digraph {
0 [style = filled, label = "EasyMock.replay(druidNodeDiscovery,druidNodeDiscoveryProvider)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "DruidLeaderClient druidLeaderClient = new DruidLeaderClient(httpClient,druidNodeDiscoveryProvider,NodeRole.PEON,\"/simple/leader\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(\"hello\",druidLeaderClient.go(request).getContent())@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "DiscoveryDruidNode dummyNode = new DiscoveryDruidNode(new DruidNode(\"test\",\"dummyhost\",false,64231,null,true,false),NodeRole.PEON,ImmutableMap.of())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testServerFailureAndRedirect['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "EasyMock.expect(druidNodeDiscoveryProvider.getForNodeRole(NodeRole.PEON)).andReturn(druidNodeDiscovery).anyTimes()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testFindCurrentLeader['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "DruidLeaderClient druidLeaderClient = new DruidLeaderClient(httpClient,druidNodeDiscoveryProvider,NodeRole.PEON,\"/simple/leader\",EasyMock.createNiceMock())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "EasyMock.expect(druidNodeDiscoveryProvider.getForNodeRole(NodeRole.PEON)).andReturn(druidNodeDiscovery)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testFindCurrentLeader['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "druidLeaderClient.start()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "DruidLeaderClient druidLeaderClient = new DruidLeaderClient(httpClient,druidNodeDiscoveryProvider,NodeRole.PEON,\"/simple/leader\")@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "request.setContent(\"hello\".getBytes(StandardCharsets.UTF_8))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(dummyNode))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Request request = druidLeaderClient.makeRequest(HttpMethod.POST,\"/simple/redirect\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->17 [style = bold, label=""];
6->8 [style = solid, label="druidNodeDiscovery"];
15->13 [style = bold, label=""];
4->9 [style = solid, label="druidNodeDiscoveryProvider"];
16->11 [style = bold, label=""];
9->0 [style = bold, label=""];
6->0 [style = solid, label="druidNodeDiscovery"];
2->3 [style = bold, label=""];
18->15 [style = bold, label=""];
2->0 [style = solid, label="druidNodeDiscoveryProvider"];
17->16 [style = solid, label="dummyNode"];
8->12 [style = dashed, label="0"];
4->2 [style = solid, label="druidNodeDiscoveryProvider"];
1->18 [style = dashed, label="0"];
7->4 [style = bold, label=""];
2->9 [style = bold, label=""];
19->6 [style = bold, label=""];
12->0 [style = bold, label=""];
10->6 [style = bold, label=""];
11->2 [style = bold, label=""];
3->0 [style = bold, label=""];
2->12 [style = bold, label=""];
6->2 [style = solid, label="druidNodeDiscovery"];
2->1 [style = solid, label="druidNodeDiscoveryProvider"];
5->6 [style = bold, label=""];
8->2 [style = bold, label=""];
3->9 [style = dashed, label="0"];
4->3 [style = solid, label="druidNodeDiscoveryProvider"];
0->1 [style = bold, label=""];
4->8 [style = bold, label=""];
14->18 [style = bold, label=""];
1->14 [style = bold, label=""];
6->7 [style = bold, label=""];
17->16 [style = bold, label=""];
}
