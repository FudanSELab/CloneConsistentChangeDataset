digraph {
18 [style = filled, label = "verifyAll()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future1.get().getStatusCode())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "EasyMock.expect(recordSupplier.poll(EasyMock.anyLong())).andReturn(records.subList(2,13)).times(2)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "recordSupplier.close()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final KinesisIndexTask task2 = createTask(null,new KinesisIndexTaskIOConfig(1,\"sequence1\",new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID0,\"0\"),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID0,\"1\")),true,null,null,INPUT_FORMAT,\"awsEndpoint\",null,null,null,null,false))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "recordSupplier.assign(EasyMock.anyObject())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(2,task2.getRunner().getRowIngestionMeters().getProcessed())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final ListenableFuture<TaskStatus> future1 = runTask(task1)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(sdd(\"2010/P1D\",0,ImmutableList.of(\"c\")),sdd(\"2011/P1D\",0,ImmutableList.of(\"d\",\"e\"))),publishedDescriptors())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "replayAll()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(sdd(\"2010/P1D\",0,ImmutableList.of(\"c\")),sdd(\"2011/P1D\",0,ImmutableList.of(\"d\",\"e\"),ImmutableList.of(\"h\")),sdd(\"2011/P1D\",1,ImmutableList.of(\"d\",\"e\"),ImmutableList.of(\"h\")),sdd(\"2012/P1D\",0,ImmutableList.of(\"g\"))),publishedDescriptors())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "EasyMock.expectLastCall().times(2)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testRunTwoTasksTwoPartitions['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "EasyMock.expect(recordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final ListenableFuture<TaskStatus> future2 = runTask(task2)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final KinesisIndexTask task1 = createTask(null,new KinesisIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"2\"),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"4\")),true,null,null,INPUT_FORMAT,\"awsEndpoint\",null,null,null,null,false))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "EasyMock.expect(recordSupplier.poll(EasyMock.anyLong())).andReturn(records.subList(2,13)).once().andReturn(records.subList(13,15)).once()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"4\"))),newDataSchemaMetadata())@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"4\",SHARD_ID0,\"1\"))),newDataSchemaMetadata())@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "testRunReplicas['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getUnparseable())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(3,task1.getRunner().getRowIngestionMeters().getProcessed())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getThrownAway())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testRunReplicas['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final ListenableFuture<TaskStatus> future2 = runTask(task2)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "recordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future2.get().getStatusCode())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final KinesisIndexTask task2 = createTask(null,new KinesisIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"2\"),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"4\")),true,null,null,INPUT_FORMAT,\"awsEndpoint\",null,null,null,null,false))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getUnparseable())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(3,task2.getRunner().getRowIngestionMeters().getProcessed())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "EasyMock.expect(recordSupplier.poll(EasyMock.anyLong())).andReturn(generateRecords(2,13)).once().andReturn(generateRecords(2,13)).once()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getThrownAway())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31->14 [style = bold, label=""];
1->33 [style = dashed, label="0"];
21->10 [style = bold, label=""];
7->32 [style = bold, label=""];
15->13 [style = bold, label=""];
4->24 [style = bold, label=""];
16->11 [style = bold, label=""];
32->12 [style = bold, label=""];
0->12 [style = bold, label=""];
0->32 [style = dashed, label="0"];
18->19 [style = bold, label=""];
7->0 [style = bold, label=""];
3->15 [style = bold, label=""];
20->3 [style = bold, label=""];
17->30 [style = bold, label=""];
9->7 [style = bold, label=""];
12->6 [style = bold, label=""];
30->31 [style = solid, label="task2"];
25->2 [style = bold, label=""];
29->21 [style = bold, label=""];
26->21 [style = bold, label=""];
24->33 [style = bold, label=""];
17->3 [style = solid, label="task1"];
6->28 [style = bold, label=""];
10->8 [style = bold, label=""];
23->21 [style = bold, label=""];
19->9 [style = bold, label=""];
30->3 [style = bold, label=""];
6->16 [style = bold, label=""];
24->25 [style = bold, label=""];
20->30 [style = dashed, label="0"];
3->13 [style = bold, label=""];
22->17 [style = bold, label=""];
14->18 [style = bold, label=""];
20->15 [style = solid, label="task2"];
1->2 [style = bold, label=""];
28->27 [style = bold, label=""];
8->4 [style = bold, label=""];
24->1 [style = bold, label=""];
13->31 [style = bold, label=""];
11->27 [style = dashed, label="0"];
1->25 [style = dashed, label="0"];
16->28 [style = dashed, label="0"];
5->22 [style = bold, label=""];
13->14 [style = bold, label=""];
33->2 [style = bold, label=""];
2->5 [style = bold, label=""];
17->20 [style = bold, label=""];
}
