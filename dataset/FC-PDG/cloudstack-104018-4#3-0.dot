digraph {
44 [style = filled, label = "when(acc.getAccountName()).thenReturn(\"accountname\")@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "when(nvpdao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NiciraNvpDeviceVO((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@7c1ffe))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "testImplement['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "when(answer.getResult()).thenReturn(true)@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "when(answer.getLogicalSwitchUuid()).thenReturn(\"aaaaa\")@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "when(nosd.areServicesSupportedByNetworkOffering(NETWORK_ID,Service.Connectivity)).thenReturn(false)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "when(netmodel.findPhysicalNetworkId(anyLong(),(String)any(),(TrafficType)any())).thenReturn(NETWORK_ID)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "when(network.getBroadcastUri()).thenReturn(new URI(\"lswitch:aaaaa\"))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final NetworkVO network = mock()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final NetworkProfile implementednetwork = mock()@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(niciraHost.getDetail(\"transportzoneuuid\")).thenReturn(\"aaaa\")@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "when(res.getDomain()).thenReturn(dom)@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "when(res.getAccount()).thenReturn(acc)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "when(physnet.getIsolationMethods()).thenReturn(Arrays.asList(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@7c1fdd))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "testShutdown['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "when(hostdao.findById(anyLong())).thenReturn(niciraHost)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "when(dom.getName()).thenReturn(\"domain\")@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "when(dest.getDataCenter()).thenReturn(dc)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertTrue(implementednetwork != null)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final DeleteLogicalSwitchAnswer answer = mock()@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "verify(implementednetwork,times(1)).setBroadcastUri(null)@@@52@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "verify(agentmgr,times(1)).easySend(eq(NETWORK_ID),(Command)any())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "when(implementednetwork.getId()).thenReturn(NETWORK_ID)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final ReservationContext res = mock()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "verify(agentmgr,times(1)).easySend(eq(NETWORK_ID),(Command)any())@@@46@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "final DataCenter dc = mock()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "when(physnetdao.findById((Long)any())).thenReturn(physnet)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "mock()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "when(niciraHost.getId()).thenReturn(NETWORK_ID)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "when(network.getPhysicalNetworkId()).thenReturn(NETWORK_ID)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "when(device.getId()).thenReturn(1L)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "final Account acc = mock()@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final NetworkOffering offering = mock()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final DeployDestination dest = mock()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final HostVO niciraHost = mock()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final Domain dom = mock()@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "when(netdao.findById(NETWORK_ID)).thenReturn(network)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "when(offering.getTrafficType()).thenReturn(TrafficType.Guest)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "guru.shutdown(implementednetwork,offering)@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "when(offering.getGuestType()).thenReturn(GuestType.Isolated)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "when(implementednetwork.getBroadcastUri()).thenReturn(new URI(\"lswitch:aaaa\"))@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final PhysicalNetworkVO physnet = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "when(agentmgr.easySend(eq(NETWORK_ID),(Command)any())).thenReturn(answer)@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "when(offering.getId()).thenReturn(NETWORK_ID)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "final Network implementednetwork = guru.implement(network,offering,dest,res)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "when(network.getName()).thenReturn(\"testnetwork\")@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "when(offering.isSpecifyVlan()).thenReturn(false)@@@49@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "when(network.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Lswitch)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testShutdown['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "when(physnet.getId()).thenReturn(NETWORK_ID)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "when(network.getState()).thenReturn(State.Implementing)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final NiciraNvpDeviceVO device = mock()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "final CreateLogicalSwitchAnswer answer = mock()@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "when(offering.getSpecifyVlan()).thenReturn(false)@@@49@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "when(niciraHost.getDetail(\"transportzoneisotype\")).thenReturn(\"stt\")@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54->51 [style = bold, label=""];
5->3 [style = bold, label=""];
28->29 [style = bold, label=""];
25->52 [style = dashed, label="0"];
17->49 [style = solid, label="dest"];
33->14 [style = bold, label=""];
39->15 [style = bold, label=""];
30->17 [style = bold, label=""];
4->17 [style = bold, label=""];
24->49 [style = solid, label="res"];
35->20 [style = bold, label=""];
20->26 [style = bold, label=""];
16->30 [style = solid, label="network"];
0->49 [style = solid, label="offering"];
28->47 [style = bold, label=""];
0->43 [style = bold, label=""];
25->21 [style = solid, label="answer"];
43->36 [style = bold, label=""];
17->40 [style = bold, label=""];
23->46 [style = bold, label=""];
12->34 [style = bold, label=""];
6->19 [style = bold, label=""];
27->9 [style = solid, label="dom"];
9->10 [style = bold, label=""];
29->23 [style = bold, label=""];
48->6 [style = bold, label=""];
0->23 [style = solid, label="offering"];
25->7 [style = bold, label=""];
34->54 [style = dashed, label="0"];
46->37 [style = bold, label=""];
10->52 [style = bold, label=""];
52->21 [style = solid, label="answer"];
13->1 [style = bold, label=""];
15->5 [style = bold, label=""];
3->18 [style = bold, label=""];
21->12 [style = bold, label=""];
34->28 [style = bold, label=""];
26->2 [style = bold, label=""];
29->47 [style = dashed, label="0"];
14->4 [style = bold, label=""];
42->44 [style = bold, label=""];
40->39 [style = bold, label=""];
26->2 [style = solid, label="device"];
4->30 [style = bold, label=""];
31->27 [style = bold, label=""];
10->25 [style = bold, label=""];
16->33 [style = bold, label=""];
15->5 [style = solid, label="niciraHost"];
1->16 [style = bold, label=""];
12->49 [style = dashed, label="0"];
19->35 [style = bold, label=""];
45->0 [style = bold, label=""];
27->41 [style = bold, label=""];
53->6 [style = bold, label=""];
18->32 [style = bold, label=""];
2->45 [style = bold, label=""];
7->21 [style = bold, label=""];
11->8 [style = bold, label=""];
21->49 [style = bold, label=""];
40->39 [style = solid, label="dc"];
52->7 [style = bold, label=""];
36->38 [style = bold, label=""];
8->4 [style = bold, label=""];
44->24 [style = bold, label=""];
6->19 [style = solid, label="physnet"];
50->21 [style = bold, label=""];
47->23 [style = bold, label=""];
38->13 [style = bold, label=""];
42->10 [style = solid, label="acc"];
16->49 [style = solid, label="network"];
12->23 [style = solid, label="implementednetwork"];
14->11 [style = bold, label=""];
32->31 [style = bold, label=""];
49->54 [style = bold, label=""];
7->50 [style = bold, label=""];
24->9 [style = bold, label=""];
22->6 [style = bold, label=""];
49->54 [style = solid, label="implementednetwork"];
41->42 [style = bold, label=""];
}
