digraph {
57 [style = filled, label = "body.add(Expressions.declare(mod,parameterC,null))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "body.add(Expressions.statement(Expressions.assign(parameterC,Expressions.call(,fieldNullable(index)? (nullsFirst ^ descending? \"compareNullsFirst\": \"compareNullsLast\"): \"compare\",arg0,arg1))))@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
56 [style = filled, label = "final ParameterExpression parameterC = Expressions.parameter(,\"c\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "body.add(Expressions.return_(null,Expressions.constant(0)))@@@30@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "return Pair.of(selector,Expressions.new_(,Collections.emptyList(),memberDeclarations))@@@39@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "return Pair.of(selector,Expressions.call(BuiltInMethod.NULLS_COMPARATOR.method,Expressions.constant(collation.nullDirection == RelFieldCollation.NullDirection.FIRST),Expressions.constant(collation.getDirection() == RelFieldCollation.Direction.DESCENDING)))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "ParameterExpression parameter = Expressions.parameter(javaRowClass,\"v\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Expression arg1 = fieldReference(parameterV1,index)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "final boolean nullsFirst = fieldCollation.nullDirection == RelFieldCollation.NullDirection.FIRST@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final int mod = collations.size() == 1? Modifier.FINAL: 0@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "BlockBuilder bridgeBody = new BlockBuilder()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final int index = fieldCollation.getFieldIndex()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "body.add(Expressions.statement(Expressions.assign(parameterC,Expressions.call(,fieldNullable(index)? (nullsFirst != descending? \"compareNullsFirst\": \"compareNullsLast\"): \"compare\",arg0,arg1))))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "body.add(Expressions.return_(null,Expressions.constant(0)))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "generateCollationKey['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "Primitive.flavor(fieldClass(index))@@@14@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "return Pair.of(selector,Expressions.new_(,Collections.emptyList(),memberDeclarations))@@@40@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "final List<MemberDeclaration> memberDeclarations = Expressions.list(Expressions.methodDecl(Modifier.PUBLIC,,\"compare\",ImmutableList.of(parameterV0,parameterV1),body.toBlock()))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final List<RelFieldCollation> collations@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "selector = Expressions.lambda(,fieldReference(parameter,collation.getFieldIndex()),parameter)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "final ParameterExpression parameterV1 = Expressions.parameter(javaRowClass,\"v1\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "final int mod = collation.getFieldCollations().size() == 1? Modifier.FINAL: 0@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "memberDeclarations.add(overridingMethodDecl(BuiltInMethod.COMPARATOR_COMPARE.method,ImmutableList.of(parameterO0,parameterO1),bridgeBody.toBlock()))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "selector = Expressions.call(BuiltInMethod.IDENTITY_SELECTOR.method)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final List<MemberDeclaration> memberDeclarations = Expressions.list(Expressions.methodDecl(Modifier.PUBLIC,,\"compare\",ImmutableList.of(parameterV0,parameterV1),body.toBlock()))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "memberDeclarations.add(overridingMethodDecl(BuiltInMethod.COMPARATOR_COMPARE.method,ImmutableList.of(parameterO0,parameterO1),bridgeBody.toBlock()))@@@38@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "BlockBuilder body = new BlockBuilder()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "generateComparator['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "final ParameterExpression parameterO0 = Expressions.parameter(,\"o0\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "bridgeBody.add(Expressions.return_(null,Expressions.call(Expressions.parameter(,\"this\"),BuiltInMethod.COMPARATOR_COMPARE.method,Expressions.convert_(parameterO0,javaRowClass),Expressions.convert_(parameterO1,javaRowClass))))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "final Type javaRowClass = Primitive.box(this.javaRowClass)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "final ParameterExpression parameterO1 = Expressions.parameter(,\"o1\")@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "body.add(Expressions.ifThen(Expressions.notEqual(parameterC,Expressions.constant(0)),Expressions.return_(null,descending? Expressions.negate(parameterC): parameterC)))@@@29@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
51 [style = filled, label = "return Expressions.new_(,Collections.emptyList(),memberDeclarations)@@@32@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "arg0 = Types.castIfNecessary(,arg0)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "arg1 = Types.castIfNecessary(,arg1)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final boolean nullsFirst = collation.nullDirection == RelFieldCollation.NullDirection.FIRST@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "final ParameterExpression parameterV0 = Expressions.parameter(javaRowClass,\"v0\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "Expression arg0 = fieldReference(parameterV0,index)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final Expression selector@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Primitive.flavor(fieldClass(index))@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "RelCollation collation@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final boolean descending = collation.getDirection() == RelFieldCollation.Direction.DESCENDING@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "EnumerableRules.BRIDGE_METHODS@@@33@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "body.add(Expressions.return_(null,Expressions.constant(0)))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "collations.size() == 1@@@4@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final int index = collation.getFieldIndex()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "generateCollationKey['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final Method method = (fieldNullable(index)? (nullsFirst ^ descending? BuiltInMethod.COMPARE_NULLS_FIRST: BuiltInMethod.COMPARE_NULLS_LAST): BuiltInMethod.COMPARE).method@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
50 [style = filled, label = "final boolean descending = fieldCollation.getDirection() == RelFieldCollation.Direction.DESCENDING@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final ParameterExpression parameterO1 = Expressions.parameter(,\"o1\")@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "BlockBuilder bridgeBody = new BlockBuilder()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "RelFieldCollation collation = collations.get(0)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "body.add(Expressions.ifThen(Expressions.notEqual(parameterC,Expressions.constant(0)),Expressions.return_(null,descending? Expressions.negate(parameterC): parameterC)))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "body.add(Expressions.statement(Expressions.assign(parameterC,Expressions.call(method.getDeclaringClass(),method.getName(),arg0,arg1))))@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "EnumerableRules.BRIDGE_METHODS@@@25@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "bridgeBody.add(Expressions.return_(null,Expressions.call(Expressions.parameter(,\"this\"),BuiltInMethod.COMPARATOR_COMPARE.method,Expressions.convert_(parameterO0,javaRowClass),Expressions.convert_(parameterO1,javaRowClass))))@@@29@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "body.add(Expressions.declare(mod,parameterC,null))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final ParameterExpression parameterO0 = Expressions.parameter(,\"o0\")@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->20 [style = solid, label="mod"];
18->3 [style = bold, label=""];
48->24 [style = solid, label="parameterO1"];
16->8 [style = solid, label="parameterV1"];
56->52 [style = bold, label=""];
21->42 [style = bold, label=""];
14->19 [style = dotted, label="true"];
0->24 [style = solid, label="descending"];
42->47 [style = dotted, label="true"];
50->22 [style = bold, label=""];
2->22 [style = solid, label="index"];
8->28 [style = solid, label="memberDeclarations"];
39->9 [style = bold, label=""];
49->55 [style = dotted, label="true"];
50->22 [style = solid, label="descending"];
27->9 [style = bold, label=""];
3->29 [style = solid, label="parameterO1"];
18->29 [style = solid, label="parameterO1"];
58->21 [style = solid, label="parameterV0"];
14->28 [style = bold, label=""];
35->29 [style = solid, label="method"];
5->22 [style = solid, label="arg0"];
7->8 [style = bold, label=""];
13->10 [style = dotted, label="true"];
46->22 [style = solid, label="arg1"];
45->24 [style = bold, label=""];
18->15 [style = solid, label="parameterO1"];
13->1 [style = bold, label=""];
52->57 [style = solid, label="mod"];
30->46 [style = solid, label="arg1"];
23->2 [style = dashed, label="0"];
40->21 [style = solid, label="parameterV1"];
5->37 [style = solid, label="parameterC"];
31->21 [style = dotted, label="true"];
12->2 [style = bold, label=""];
23->22 [style = bold, label=""];
22->32 [style = solid, label="arg0"];
2->54 [style = solid, label="index"];
23->33 [style = solid, label="index"];
16->12 [style = solid, label="parameterV1"];
35->37 [style = bold, label=""];
43->24 [style = solid, label="javaRowClass"];
12->21 [style = solid, label="arg1"];
42->48 [style = dotted, label="true"];
16->5 [style = dotted, label="true"];
23->31 [style = solid, label="index"];
5->33 [style = solid, label="parameterC"];
14->3 [style = dotted, label="true"];
25->3 [style = solid, label="parameter"];
18->29 [style = solid, label="parameterO0"];
25->30 [style = solid, label="parameter"];
0->34 [style = solid, label="descending"];
47->53 [style = solid, label="parameterO0"];
32->33 [style = solid, label="arg0"];
24->53 [style = bold, label=""];
43->58 [style = bold, label=""];
14->18 [style = dotted, label="true"];
25->19 [style = solid, label="parameter"];
5->24 [style = solid, label="parameterC"];
40->30 [style = solid, label="parameterV1"];
29->36 [style = bold, label=""];
43->40 [style = solid, label="javaRowClass"];
13->17 [style = dotted, label="true"];
19->18 [style = bold, label=""];
21->51 [style = solid, label="memberDeclarations"];
16->46 [style = dotted, label="true"];
18->36 [style = solid, label="parameterO0"];
43->58 [style = solid, label="javaRowClass"];
26->17 [style = bold, label=""];
47->48 [style = bold, label=""];
13->25 [style = dotted, label="true"];
21->37 [style = solid, label="arg1"];
23->22 [style = solid, label="index"];
34->8 [style = bold, label=""];
19->36 [style = dotted, label="true"];
5->20 [style = solid, label="parameterC"];
46->41 [style = bold, label=""];
42->24 [style = dotted, label="true"];
5->6 [style = bold, label=""];
20->23 [style = bold, label=""];
19->29 [style = dotted, label="true"];
21->11 [style = bold, label=""];
10->25 [style = bold, label=""];
19->3 [style = dotted, label="true"];
25->26 [style = bold, label=""];
47->24 [style = solid, label="parameterO0"];
24->7 [style = bold, label=""];
42->45 [style = dotted, label="true"];
19->38 [style = bold, label=""];
0->50 [style = dashed, label="0"];
30->8 [style = solid, label="parameterV0"];
41->50 [style = bold, label=""];
57->2 [style = bold, label=""];
15->29 [style = bold, label=""];
12->31 [style = bold, label=""];
19->29 [style = solid, label="parameterO0"];
13->10 [style = bold, label=""];
19->15 [style = solid, label="parameterO0"];
17->1 [style = bold, label=""];
5->34 [style = solid, label="parameterC"];
40->56 [style = bold, label=""];
14->38 [style = solid, label="memberDeclarations"];
13->26 [style = dotted, label="true"];
48->53 [style = solid, label="parameterO1"];
31->32 [style = bold, label=""];
33->22 [style = dashed, label="0"];
49->44 [style = bold, label=""];
19->18 [style = dotted, label="true"];
12->32 [style = bold, label=""];
42->47 [style = bold, label=""];
8->14 [style = bold, label=""];
14->19 [style = bold, label=""];
19->15 [style = dotted, label="true"];
27->4 [style = dotted, label="true"];
1->28 [style = solid, label="selector"];
16->14 [style = solid, label="parameterV1"];
42->51 [style = bold, label=""];
42->53 [style = dotted, label="true"];
56->22 [style = solid, label="parameterC"];
54->5 [style = solid, label="arg0"];
6->52 [style = dashed, label="0"];
28->51 [style = dashed, label="0"];
6->20 [style = bold, label=""];
33->24 [style = bold, label=""];
56->12 [style = solid, label="parameterC"];
2->30 [style = solid, label="index"];
25->5 [style = solid, label="parameter"];
16->5 [style = bold, label=""];
2->54 [style = bold, label=""];
34->23 [style = bold, label=""];
1->2 [style = bold, label=""];
25->15 [style = solid, label="parameter"];
0->35 [style = solid, label="descending"];
24->23 [style = bold, label=""];
0->33 [style = solid, label="descending"];
2->16 [style = solid, label="index"];
32->21 [style = bold, label=""];
25->29 [style = solid, label="parameter"];
53->51 [style = bold, label=""];
30->14 [style = solid, label="parameterV0"];
50->12 [style = solid, label="descending"];
23->35 [style = solid, label="index"];
25->16 [style = solid, label="parameter"];
58->40 [style = bold, label=""];
54->30 [style = bold, label=""];
3->15 [style = bold, label=""];
8->21 [style = dashed, label="0"];
30->22 [style = solid, label="parameterV0"];
44->43 [style = bold, label=""];
31->32 [style = dotted, label="true"];
29->28 [style = bold, label=""];
58->54 [style = solid, label="parameterV0"];
14->15 [style = dotted, label="true"];
11->0 [style = bold, label=""];
48->45 [style = bold, label=""];
39->4 [style = dotted, label="true"];
0->33 [style = bold, label=""];
1->38 [style = solid, label="selector"];
35->36 [style = solid, label="method"];
56->57 [style = solid, label="parameterC"];
22->12 [style = bold, label=""];
37->34 [style = bold, label=""];
11->41 [style = dashed, label="0"];
0->35 [style = bold, label=""];
14->29 [style = dotted, label="true"];
26->17 [style = solid, label="selector"];
23->12 [style = solid, label="index"];
36->38 [style = bold, label=""];
3->36 [style = solid, label="parameterO1"];
52->57 [style = bold, label=""];
2->30 [style = bold, label=""];
32->37 [style = solid, label="arg0"];
30->16 [style = bold, label=""];
5->46 [style = bold, label=""];
21->33 [style = solid, label="arg1"];
25->26 [style = solid, label="parameter"];
25->18 [style = solid, label="parameter"];
9->13 [style = bold, label=""];
33->35 [style = dashed, label="0"];
}
