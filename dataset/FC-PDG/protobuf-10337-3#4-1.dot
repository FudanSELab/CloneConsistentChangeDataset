digraph {
14 [style = filled, label = "assertThat(m1.equals(m2)).isFalse()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertFalse(m1.equals(m2))@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "TestMap m1 = b1.build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "TestMap.Builder b2 = TestMap.newBuilder().putInt32ToInt32Field(5,6).putInt32ToInt32Field(1,2).putInt32ToInt32Field(3,4)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(m2).isEqualTo(m1)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertEquals(m1,m2)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TestMap m1 = TestMap.newBuilder().putInt32ToInt32Field(1,2).putInt32ToInt32Field(3,4).putInt32ToInt32Field(5,6).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "TestMap m2 = b2.build()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(m1.hashCode(),m2.hashCode())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testEqualsAndHashCode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "TestMap.Builder b1 = TestMap.newBuilder().putInt32ToInt32Field(1,2).putInt32ToInt32Field(3,4).putInt32ToInt32Field(5,6)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "m2 = b2.build()@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "b2.removeInt32ToInt32Field(1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "TestMap.Builder b2 = TestMap.newBuilder().putInt32ToInt32Field(5,6).putInt32ToInt32Field(1,2).putInt32ToInt32Field(3,4)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(m1.equals(m2)).isFalse()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertFalse(m1.equals(m2))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testEqualsAndHashCode['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "m2 = b2.build()@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "b2.putInt32ToInt32Field(1,0)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(m2.hashCode()).isEqualTo(m1.hashCode())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testEqualsAndHashCode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertFalse(m2.equals(m1))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(m2.equals(m1)).isFalse()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2->12 [style = solid, label="m2"];
4->3 [style = bold, label=""];
16->18 [style = bold, label=""];
7->1 [style = bold, label=""];
1->8 [style = bold, label=""];
5->2 [style = solid, label="m2"];
22->12 [style = solid, label="m1"];
1->14 [style = dashed, label="0"];
7->1 [style = solid, label="m2"];
0->6 [style = bold, label=""];
17->9 [style = bold, label=""];
3->16 [style = dashed, label="0"];
3->11 [style = bold, label=""];
12->17 [style = dashed, label="0"];
0->13 [style = solid, label="m1"];
0->11 [style = solid, label="m1"];
11->19 [style = bold, label=""];
9->7 [style = bold, label=""];
12->9 [style = bold, label=""];
0->20 [style = dashed, label="0"];
22->5 [style = bold, label=""];
2->12 [style = bold, label=""];
20->22 [style = bold, label=""];
7->14 [style = bold, label=""];
6->5 [style = bold, label=""];
5->2 [style = bold, label=""];
13->17 [style = bold, label=""];
21->20 [style = bold, label=""];
2->13 [style = dashed, label="0"];
11->18 [style = dashed, label="0"];
15->0 [style = bold, label=""];
5->13 [style = bold, label=""];
10->0 [style = bold, label=""];
0->2 [style = solid, label="m1"];
14->8 [style = bold, label=""];
8->4 [style = bold, label=""];
4->3 [style = solid, label="m2"];
3->11 [style = solid, label="m2"];
22->19 [style = solid, label="m1"];
1->8 [style = solid, label="m2"];
4->16 [style = bold, label=""];
}
