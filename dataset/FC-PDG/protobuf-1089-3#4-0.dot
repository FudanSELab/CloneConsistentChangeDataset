digraph {
14 [style = filled, label = "assertEquals(2,list.size())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(list).hasSize(2)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(0,builder.getMessage(0).getOptionalInt32())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "List<TestAllTypes> list = builder.build()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(2,list.size())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(0,list.get(0).getOptionalInt32())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "RepeatedFieldBuilderV3<TestAllTypes,TestAllTypes.Builder,TestAllTypesOrBuilder> builder = newRepeatedFieldBuilderV3(mockParent)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(1,builder.getMessage(1).getOptionalInt32())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(\"foo\",list.get(0).getOptionalString())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "list = builder.build()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(list).isSameInstanceAs(list2)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertThat(builder.getMessage(0).getOptionalInt32()).isEqualTo(0)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertThat(builder.getMessage(1).getOptionalInt32()).isEqualTo(1)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertThat(list.get(1).getOptionalInt32()).isEqualTo(1)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "builder.addMessage(TestAllTypes.newBuilder().setOptionalInt32(0).build())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(list.get(0).getOptionalInt32()).isEqualTo(0)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertEquals(0,list.get(0).getOptionalInt32())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertIsUnmodifiable(list)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(1,mockParent.getInvalidationCount())@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testBasicUse['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertEquals(0,mockParent.getInvalidationCount())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(1,list.get(1).getOptionalInt32())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertIsUnmodifiable(list)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "TestUtil.MockBuilderParent mockParent = new TestUtil.MockBuilderParent()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testGoingBackAndForth['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(1,list.get(1).getOptionalInt32())@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(mockParent.getInvalidationCount()).isEqualTo(0)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertEquals(1,mockParent.getInvalidationCount())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "builder.getBuilder(0).setOptionalString(\"foo\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "builder.addMessage(TestAllTypes.newBuilder().setOptionalInt32(1).build())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "List<TestAllTypes> list2 = builder.build()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testBasicUse['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertSame(list,list2)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11->16 [style = bold, label=""];
20->13 [style = bold, label=""];
4->16 [style = dashed, label="0"];
23->30 [style = bold, label=""];
8->23 [style = bold, label=""];
3->21 [style = dashed, label="0"];
6->12 [style = solid, label="mockParent"];
11->16 [style = solid, label="list2"];
31->24 [style = bold, label=""];
13->4 [style = solid, label="list"];
11->4 [style = bold, label=""];
26->25 [style = bold, label=""];
1->19 [style = dashed, label="0"];
1->3 [style = bold, label=""];
18->19 [style = bold, label=""];
0->15 [style = dashed, label="0"];
28->26 [style = bold, label=""];
7->0 [style = bold, label=""];
24->29 [style = bold, label=""];
16->17 [style = bold, label=""];
9->7 [style = bold, label=""];
12->9 [style = bold, label=""];
27->6 [style = bold, label=""];
14->1 [style = bold, label=""];
21->2 [style = bold, label=""];
25->31 [style = bold, label=""];
28->29 [style = solid, label="list"];
0->10 [style = bold, label=""];
30->28 [style = bold, label=""];
5->6 [style = bold, label=""];
3->2 [style = bold, label=""];
10->13 [style = bold, label=""];
15->20 [style = bold, label=""];
29->32 [style = bold, label=""];
8->17 [style = dashed, label="0"];
4->8 [style = bold, label=""];
7->15 [style = bold, label=""];
10->20 [style = dashed, label="0"];
19->21 [style = bold, label=""];
11->4 [style = solid, label="list2"];
13->2 [style = solid, label="list"];
14->18 [style = dashed, label="0"];
13->14 [style = bold, label=""];
2->11 [style = bold, label=""];
13->18 [style = bold, label=""];
2->8 [style = bold, label=""];
22->6 [style = bold, label=""];
6->12 [style = bold, label=""];
}
