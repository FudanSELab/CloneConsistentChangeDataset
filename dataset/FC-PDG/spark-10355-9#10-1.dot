digraph {
4 [style = filled, label = "isNullAt(ordinal)@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "getBinary['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final UnsafeArrayData array = new UnsafeArrayData()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Platform.copyMemory(baseObject,baseOffset + offset,bytes,Platform.BYTE_ARRAY_OFFSET,size)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "getBinary['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "int ordinal@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "array.pointTo(baseObject,baseOffset + offset,size)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final byte(( bytes = new byte((((@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int ordinal@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "return bytes@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "getArray['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "return array@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final int size = (int)offsetAndSize@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "final int size = (int)(offsetAndSize & ((1L << 32) - 1))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "return null@@@4@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16->15 [style = bold, label=""];
4->3 [style = bold, label=""];
5->8 [style = bold, label=""];
6->8 [style = solid, label="size"];
14->4 [style = solid, label="ordinal"];
7->11 [style = bold, label=""];
8->16 [style = dashed, label="0"];
4->7 [style = dotted, label="false"];
1->14 [style = dashed, label="0"];
9->4 [style = bold, label=""];
6->11 [style = dashed, label="0"];
4->5 [style = dotted, label="false"];
11->8 [style = solid, label="size"];
0->7 [style = solid, label="offsetAndSize"];
4->13 [style = dotted, label="false"];
4->8 [style = dotted, label="false"];
4->6 [style = dotted, label="false"];
4->11 [style = dotted, label="false"];
7->8 [style = solid, label="offset"];
4->15 [style = dotted, label="false"];
13->16 [style = bold, label=""];
4->0 [style = bold, label=""];
0->7 [style = bold, label=""];
2->15 [style = dashed, label="0"];
14->0 [style = solid, label="ordinal"];
12->14 [style = dotted, label="true"];
6->5 [style = bold, label=""];
11->5 [style = bold, label=""];
4->2 [style = dotted, label="false"];
4->3 [style = dotted, label="true"];
8->2 [style = bold, label=""];
12->4 [style = bold, label=""];
5->8 [style = solid, label="bytes"];
6->13 [style = bold, label=""];
7->6 [style = bold, label=""];
9->1 [style = dotted, label="true"];
1->4 [style = solid, label="ordinal"];
10->4 [style = bold, label=""];
5->2 [style = solid, label="bytes"];
10->1 [style = dotted, label="true"];
1->0 [style = solid, label="ordinal"];
4->0 [style = dotted, label="false"];
13->15 [style = solid, label="array"];
4->16 [style = dotted, label="false"];
0->6 [style = solid, label="offsetAndSize"];
6->16 [style = solid, label="size"];
7->16 [style = solid, label="offset"];
0->11 [style = solid, label="offsetAndSize"];
}
