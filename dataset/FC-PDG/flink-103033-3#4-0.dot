digraph {
14 [style = filled, label = "assertTrue(graph.isAllVerticesInSameSlotSharingGroupByDefault())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final SourceTransformation<Integer> unbounded = getSourceTransformation(\"Unbounded Source\",Boundedness.CONTINUOUS_UNBOUNDED)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testBoundedDetection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertEquals(ScheduleMode.EAGER,graph.getScheduleMode())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final SourceTransformation<Integer> bounded = getSourceTransformation(\"Bounded Source\",Boundedness.BOUNDED)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(graph,hasProperties(GlobalDataExchangeMode.POINTWISE_EDGES_PIPELINED,ScheduleMode.LAZY_FROM_SOURCES_WITH_BATCH_SLOT_REQUEST,false))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertFalse(graph.isAllVerticesInSameSlotSharingGroupByDefault())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "final StreamGraph graph = generateStreamGraph(RuntimeExecutionMode.AUTOMATIC,unbounded)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(GlobalDataExchangeMode.ALL_EDGES_PIPELINED,graph.getGlobalDataExchangeMode())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(Boundedness.BOUNDED,bounded.getBoundedness())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testBoundedDetection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final SourceTransformation<Integer> bounded = getSourceTransformation(\"Bounded Source\",Boundedness.BOUNDED)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testMixedDetection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(ScheduleMode.LAZY_FROM_SOURCES_WITH_BATCH_SLOT_REQUEST,graph.getScheduleMode())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertEquals(Boundedness.BOUNDED,bounded.getBoundedness())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(Boundedness.CONTINUOUS_UNBOUNDED,unbounded.getBoundedness())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13->10 [style = bold, label=""];
15->14 [style = bold, label=""];
3->7 [style = dashed, label="0"];
2->1 [style = bold, label=""];
1->7 [style = solid, label="graph"];
12->15 [style = bold, label=""];
1->3 [style = bold, label=""];
3->11 [style = bold, label=""];
0->15 [style = dashed, label="0"];
11->12 [style = bold, label=""];
1->7 [style = bold, label=""];
3->0 [style = bold, label=""];
6->5 [style = bold, label=""];
5->2 [style = bold, label=""];
3->12 [style = dashed, label="0"];
8->5 [style = bold, label=""];
10->11 [style = solid, label="unbounded"];
0->4 [style = bold, label=""];
1->11 [style = dashed, label="0"];
4->14 [style = dashed, label="0"];
10->9 [style = bold, label=""];
9->1 [style = bold, label=""];
5->1 [style = solid, label="bounded"];
}
