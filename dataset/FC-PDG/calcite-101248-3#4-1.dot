digraph {
13 [style = filled, label = "assertThat(f.apply(createBuilder(null)),hasTree(expected))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(f.apply(createBuilder(null)),hasTree(expected))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testProjectBloat2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(f.apply(createBuilder(null)),hasTree(expectedNeg))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final String expected = \"LogicalProject($f0=(+\" + \"(CASE(=($7, 0), 'zero', =($7, 1), 'one', =($7, 2), 'two', 'other'),\" + \" CASE(=($7, 0), 'zero', =($7, 1), 'one', =($7, 2), 'two', 'other'))()\" + \" LogicalTableScan(table=((scott, EMP(()\"@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(f.apply(createBuilder(null)),hasTree(expectedNeg))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(f.apply(createBuilder()),hasTree(expected))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "final String expectedNeg = \"LogicalProject($f0=(+($0, $0)()\" + \" LogicalProject(v=(CASE(=($7, 0), 'zero', =($7, 1), \" + \"'one', =($7, 2), 'two', 'other')()\" + \" LogicalTableScan(table=((scott, EMP(()\"@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testProjectBloat['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(f.apply(createBuilder(null)),hasTree(expected))@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final Function<RelBuilder,RelNode> f = null@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final Function<RelBuilder,RelNode> f = null@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final String expectedNeg = \"LogicalProject($f0=(*($1, $2)(, SAL=($1()\" + \" LogicalProject(DEPTNO=($7(, SAL=($5(, PLUS=(+($7, $0)()\" + \" LogicalTableScan(table=((scott, EMP(()\"@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(f.apply(createBuilder(null)),hasTree(expected))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testProjectBloat['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "final String expected = \"LogicalProject($f0=(*($5, +($7, $0))(, SAL=($5()\" + \" LogicalTableScan(table=((scott, EMP(()\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(f.apply(createBuilder(null)),hasTree(expectedNeg))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->9 [style = bold, label=""];
0->8 [style = solid, label="expected"];
8->15 [style = bold, label=""];
14->15 [style = solid, label="expected"];
4->3 [style = solid, label="expectedNeg"];
3->6 [style = bold, label=""];
12->16 [style = bold, label=""];
11->3 [style = solid, label="expectedNeg"];
14->13 [style = solid, label="expected"];
9->7 [style = bold, label=""];
15->3 [style = bold, label=""];
13->1 [style = bold, label=""];
7->3 [style = bold, label=""];
8->7 [style = bold, label=""];
4->7 [style = solid, label="expectedNeg"];
0->9 [style = solid, label="expected"];
5->16 [style = dashed, label="0"];
8->9 [style = dashed, label="0"];
0->14 [style = dashed, label="0"];
6->1 [style = bold, label=""];
14->1 [style = solid, label="expected"];
10->5 [style = bold, label=""];
6->13 [style = dashed, label="0"];
5->0 [style = bold, label=""];
0->4 [style = bold, label=""];
7->15 [style = dashed, label="0"];
3->13 [style = bold, label=""];
0->1 [style = solid, label="expected"];
4->8 [style = bold, label=""];
16->14 [style = bold, label=""];
11->8 [style = bold, label=""];
14->8 [style = solid, label="expected"];
4->6 [style = solid, label="expectedNeg"];
4->11 [style = dashed, label="0"];
14->11 [style = bold, label=""];
2->5 [style = bold, label=""];
}
