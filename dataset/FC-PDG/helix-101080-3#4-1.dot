digraph {
9 [style = filled, label = "InstanceConfig instanceConfig1 = new InstanceConfig(\"instance0\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "instanceConfig2.setDomain(\"helixZoneId=zone0\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(clusterTopology.getZones().size(),2)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(clusterTopology.getClusterId(),TEST_CLUSTER)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ClusterTopology clusterTopology = mock.clusterService.getClusterTopology(TEST_CLUSTER)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testGetClusterTopology_whenMultiZones['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testGetClusterTopology_whenMultiZones['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(clusterTopology.getZones().get(0).getInstances().size(),2)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(clusterTopology.getZones().size(),1)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testGetClusterTopology_whenZoneHasMultiInstances['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "when(mock.dataAccessor.keyBuilder()).thenReturn(new PropertyKey.Builder(TEST_CLUSTER))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<HelixProperty> instanceConfigs = (List)ImmutableList.of(instanceConfig1,instanceConfig2)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Mock mock = new Mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "instanceConfig2.setDomain(\"helixZoneId=zone1\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "when(mock.dataAccessor.getChildValues(any(),anyBoolean())).thenReturn(instanceConfigs)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "instanceConfig1.setDomain(\"helixZoneId=zone0\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "InstanceConfig instanceConfig2 = new InstanceConfig(\"instance1\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(clusterTopology.getClusterId(),TEST_CLUSTER)@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "when(mock.dataAccessor.getChildValues(any())).thenReturn(instanceConfigs)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->15 [style = dashed, label="0"];
0->16 [style = bold, label=""];
4->1 [style = solid, label="instanceConfigs"];
2->4 [style = solid, label="instanceConfig2"];
11->1 [style = bold, label=""];
7->16 [style = dashed, label="0"];
17->9 [style = bold, label=""];
4->13 [style = solid, label="instanceConfigs"];
1->0 [style = bold, label=""];
2->10 [style = bold, label=""];
12->9 [style = bold, label=""];
0->7 [style = bold, label=""];
1->13 [style = dashed, label="0"];
3->9 [style = bold, label=""];
5->2 [style = bold, label=""];
9->4 [style = solid, label="instanceConfig1"];
11->13 [style = bold, label=""];
2->15 [style = bold, label=""];
7->6 [style = bold, label=""];
15->4 [style = bold, label=""];
10->4 [style = bold, label=""];
9->5 [style = bold, label=""];
4->8 [style = bold, label=""];
16->14 [style = bold, label=""];
14->18 [style = bold, label=""];
8->11 [style = bold, label=""];
13->0 [style = bold, label=""];
}
