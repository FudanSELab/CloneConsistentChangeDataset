digraph {
2 [style = filled, label = "Assert.assertFalse(\"Should skip: not(true)\",shouldRead)@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testNot['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"ID\",85)),SPEC,false).eval(FILE)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertTrue(\"Should read: id above upper bound\",shouldRead)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertTrue(\"Should read: id between lower and upper bounds\",shouldRead)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"ID\",29)),SPEC,false).eval(FILE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertTrue(\"Should read: id above upper bound\",shouldRead)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(greaterThan(\"id\",INT_MIN_VALUE - 25)),SPEC,true).eval(FILE)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(not(lessThan(\"id\",5)),SPEC,true).eval(FILE)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Assert.assertTrue(\"Should read: id equal to upper bound\",shouldRead)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"ID\",75)),SPEC,false).eval(FILE)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testNot['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(greaterThan(\"id\",5)),SPEC,true).eval(FILE)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"ID\",5)),SPEC,false).eval(FILE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertTrue(\"Should read: not(false)\",shouldRead)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertTrue(\"Should read: id below lower bound\",shouldRead)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertTrue(\"Should read: id below lower bound\",shouldRead)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testCaseInsensitiveIntegerNotEqRewritten['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(not(lessThan(\"id\",INT_MIN_VALUE - 25)),SPEC,true).eval(FILE)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"ID\",80)),SPEC,false).eval(FILE)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertTrue(\"Should read: id equal to lower bound\",shouldRead)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"ID\",30)),SPEC,false).eval(FILE)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"ID\",79)),SPEC,false).eval(FILE)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10->22 [style = bold, label=""];
16->15 [style = bold, label=""];
6->2 [style = solid, label="shouldRead"];
14->18 [style = solid, label="shouldRead"];
1->4 [style = bold, label=""];
15->13 [style = bold, label=""];
2->19 [style = dashed, label="0"];
0->5 [style = dashed, label="0"];
18->11 [style = bold, label=""];
19->10 [style = bold, label=""];
1->18 [style = dashed, label="0"];
12->16 [style = bold, label=""];
4->2 [style = bold, label=""];
11->19 [style = bold, label=""];
4->6 [style = dashed, label="0"];
11->19 [style = solid, label="shouldRead"];
10->22 [style = solid, label="shouldRead"];
3->0 [style = bold, label=""];
5->1 [style = solid, label="shouldRead"];
6->2 [style = bold, label=""];
0->14 [style = dashed, label="0"];
12->16 [style = solid, label="shouldRead"];
5->1 [style = bold, label=""];
7->5 [style = bold, label=""];
20->8 [style = bold, label=""];
1->6 [style = bold, label=""];
21->9 [style = bold, label=""];
17->14 [style = bold, label=""];
0->1 [style = bold, label=""];
22->12 [style = bold, label=""];
0->1 [style = solid, label="shouldRead"];
8->21 [style = bold, label=""];
15->13 [style = solid, label="shouldRead"];
14->18 [style = bold, label=""];
4->11 [style = dashed, label="0"];
20->8 [style = solid, label="shouldRead"];
21->9 [style = solid, label="shouldRead"];
4->2 [style = solid, label="shouldRead"];
13->20 [style = bold, label=""];
}
