digraph {
18 [style = filled, label = "final String sql = \"SELECT\" + \" SUM(cnt),\" + \" APPROX_COUNT_DISTINCT_DS_THETA(dim2),\" + \" APPROX_COUNT_DISTINCT_DS_THETA(dim2) FILTER(WHERE dim2 <> ''),\" + \" APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1)),\" + \" APPROX_COUNT_DISTINCT_DS_THETA(SUBSTRING(dim2, 1, 1) || 'x'),\" + \" APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1, 32768),\" + \" APPROX_COUNT_DISTINCT_DS_THETA(thetasketch_dim1)\" + \"FROM druid.foo\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(expectedResults.size(),results.size())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).virtualColumns(new ExpressionVirtualColumn(\"v0\",\"substring(\"dim2\", 0, 1)\",ValueType.STRING,TestExprMacroTable.INSTANCE),new ExpressionVirtualColumn(\"v1\",\"concat(substring(\"dim2\", 0, 1),'x')\",ValueType.STRING,TestExprMacroTable.INSTANCE)).aggregators(ImmutableList.of(new LongSumAggregatorFactory(\"a0\",\"cnt\"),new HllSketchBuildAggregatorFactory(\"a1\",\"dim2\",null,null,ROUND),new FilteredAggregatorFactory(new HllSketchBuildAggregatorFactory(\"a2\",\"dim2\",null,null,ROUND),BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\",\"\",null))),new HllSketchBuildAggregatorFactory(\"a3\",\"v0\",null,null,ROUND),new HllSketchBuildAggregatorFactory(\"a4\",\"v1\",null,null,ROUND),new HllSketchMergeAggregatorFactory(\"a5\",\"hllsketch_dim1\",21,\"HLL_8\",ROUND),new HllSketchMergeAggregatorFactory(\"a6\",\"hllsketch_dim1\",null,null,ROUND))).context(ImmutableMap.of(\"skipEmptyBuckets\",true,PlannerContext.CTX_SQL_QUERY_ID,\"dummy\")).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "final List<Object((> expectedResults@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testApproxCountDistinctHllSketch['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "expectedResults = ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a706ed)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testApproxCountDistinctThetaSketch['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).virtualColumns(new ExpressionVirtualColumn(\"v0\",\"substring(\"dim2\", 0, 1)\",ValueType.STRING,TestExprMacroTable.INSTANCE),new ExpressionVirtualColumn(\"v1\",\"concat(substring(\"dim2\", 0, 1),'x')\",ValueType.STRING,TestExprMacroTable.INSTANCE)).aggregators(ImmutableList.of(new LongSumAggregatorFactory(\"a0\",\"cnt\"),new HllSketchBuildAggregatorFactory(\"a1\",\"dim2\",null,null),new FilteredAggregatorFactory(new HllSketchBuildAggregatorFactory(\"a2\",\"dim2\",null,null),BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\",\"\",null))),new HllSketchBuildAggregatorFactory(\"a3\",\"v0\",null,null),new HllSketchBuildAggregatorFactory(\"a4\",\"v1\",null,null),new HllSketchMergeAggregatorFactory(\"a5\",\"hllsketch_dim1\",21,\"HLL_8\"),new HllSketchMergeAggregatorFactory(\"a6\",\"hllsketch_dim1\",null,null))).context(ImmutableMap.of(\"skipEmptyBuckets\",true,PlannerContext.CTX_SQL_QUERY_ID,\"dummy\")).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "final List<Object((> results = sqlLifecycle.runSimple(sql,QUERY_CONTEXT_DEFAULT,authenticationResult).toList()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertArrayEquals(expectedResults.get(i),results.get(i))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int i = 0@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expectedResults = ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a706db)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "i < expectedResults.size()@@@19@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "NullHandling.replaceWithDefault()@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "i++@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testApproxCountDistinctHllSketch['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "final String sql = \"SELECT\" + \" SUM(cnt),\" + \" APPROX_COUNT_DISTINCT_DS_HLL(dim2),\" + \" APPROX_COUNT_DISTINCT_DS_HLL(dim2) FILTER(WHERE dim2 <> ''),\" + \" APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1)),\" + \" APPROX_COUNT_DISTINCT_DS_HLL(SUBSTRING(dim2, 1, 1) || 'x'),\" + \" APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1, 21, 'HLL_8'),\" + \" APPROX_COUNT_DISTINCT_DS_HLL(hllsketch_dim1)\" + \"FROM druid.foo\"@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).virtualColumns(new ExpressionVirtualColumn(\"v0\",\"substring(\"dim2\", 0, 1)\",ValueType.STRING,TestExprMacroTable.INSTANCE),new ExpressionVirtualColumn(\"v1\",\"concat(substring(\"dim2\", 0, 1),'x')\",ValueType.STRING,TestExprMacroTable.INSTANCE)).aggregators(ImmutableList.of(new LongSumAggregatorFactory(\"a0\",\"cnt\"),new SketchMergeAggregatorFactory(\"a1\",\"dim2\",null,null,null,null),new FilteredAggregatorFactory(new SketchMergeAggregatorFactory(\"a2\",\"dim2\",null,null,null,null),BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"dim2\",\"\",null))),new SketchMergeAggregatorFactory(\"a3\",\"v0\",null,null,null,null),new SketchMergeAggregatorFactory(\"a4\",\"v1\",null,null,null,null),new SketchMergeAggregatorFactory(\"a5\",\"thetasketch_dim1\",32768,null,null,null),new SketchMergeAggregatorFactory(\"a6\",\"thetasketch_dim1\",null,null,null,null))).context(ImmutableMap.of(\"skipEmptyBuckets\",true,PlannerContext.CTX_SQL_QUERY_ID,\"dummy\")).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
7->1 [style = bold, label=""];
13->1 [style = solid, label="i"];
7->1 [style = solid, label="i"];
18->11 [style = bold, label=""];
13->5 [style = solid, label="i"];
12->9 [style = bold, label=""];
10->6 [style = bold, label=""];
13->1 [style = bold, label=""];
3->0 [style = bold, label=""];
9->6 [style = bold, label=""];
7->13 [style = solid, label="i"];
7->5 [style = solid, label="i"];
1->13 [style = dotted, label="true"];
12->10 [style = bold, label=""];
12->9 [style = dotted, label="false"];
17->0 [style = bold, label=""];
2->14 [style = dashed, label="0"];
12->10 [style = dotted, label="true"];
0->4 [style = bold, label=""];
1->16 [style = bold, label=""];
2->16 [style = dashed, label="0"];
15->0 [style = bold, label=""];
5->13 [style = bold, label=""];
11->8 [style = bold, label=""];
0->18 [style = bold, label=""];
1->14 [style = bold, label=""];
1->2 [style = bold, label=""];
6->7 [style = bold, label=""];
4->11 [style = bold, label=""];
1->5 [style = dotted, label="true"];
8->12 [style = bold, label=""];
}
