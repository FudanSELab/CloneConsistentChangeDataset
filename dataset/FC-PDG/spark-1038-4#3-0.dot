digraph {
1 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95)@@@15@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "hashcodes.add(hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "rand.nextBytes(bytes)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "byte(( bytes = new byte((((@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "int size = 64000@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize),hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(hasher.hashUnsafeWordsBlock(mb),hasher.hashUnsafeWordsBlock(mb))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "i < size@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "randomizedStressTestBytes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(HiveHasher.hashUnsafeBytes(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize),HiveHasher.hashUnsafeBytes(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "randomizedStressTestPaddedStrings['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "MemoryBlock mb = ByteArrayMemoryBlock.fromArray(paddedBytes)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "byte(( strBytes = String.valueOf(i).getBytes(StandardCharsets.UTF_8)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "int i = 0@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "hashcodes.add(HiveHasher.hashUnsafeBytes(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "randomizedStressTestPaddedStrings['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "int byteArrSize = rand.nextInt(100) * 8@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Random rand = new Random()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "i++@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Set<Integer> hashcodes = new HashSet<>()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "int i = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "hashcodes.add(hasher.hashUnsafeWordsBlock(mb))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "byte(( paddedBytes = new byte((((@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "System.arraycopy(strBytes,0,paddedBytes,0,strBytes.length)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95d)@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Set<Long> hashcodes = new HashSet<>()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "int size = 65536@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15->16 [style = solid, label="mb"];
4->3 [style = bold, label=""];
21->10 [style = bold, label=""];
10->12 [style = solid, label="i"];
0->9 [style = bold, label=""];
25->21 [style = solid, label="byteArrSize"];
25->20 [style = solid, label="byteArrSize"];
4->3 [style = solid, label="paddedBytes"];
10->8 [style = solid, label="byteArrSize"];
22->19 [style = bold, label=""];
5->23 [style = dashed, label="0"];
23->1 [style = solid, label="size"];
3->15 [style = bold, label=""];
12->18 [style = dotted, label="true"];
7->4 [style = bold, label=""];
12->10 [style = dotted, label="true"];
8->21 [style = dashed, label="0"];
19->6 [style = bold, label=""];
12->6 [style = bold, label=""];
12->1 [style = bold, label=""];
10->7 [style = bold, label=""];
24->18 [style = bold, label=""];
5->6 [style = solid, label="size"];
4->2 [style = solid, label="paddedBytes"];
24->20 [style = solid, label="bytes"];
2->12 [style = bold, label=""];
4->15 [style = solid, label="paddedBytes"];
9->6 [style = bold, label=""];
6->17 [style = dotted, label="true"];
12->21 [style = dotted, label="true"];
20->21 [style = bold, label=""];
6->10 [style = dotted, label="true"];
6->1 [style = bold, label=""];
25->24 [style = bold, label=""];
11->5 [style = bold, label=""];
15->17 [style = bold, label=""];
18->20 [style = bold, label=""];
12->6 [style = solid, label="i"];
7->3 [style = solid, label="strBytes"];
23->22 [style = bold, label=""];
6->2 [style = dotted, label="true"];
12->20 [style = dotted, label="true"];
6->16 [style = dotted, label="true"];
4->8 [style = solid, label="paddedBytes"];
5->0 [style = bold, label=""];
8->2 [style = bold, label=""];
9->6 [style = solid, label="i"];
5->13 [style = solid, label="size"];
10->12 [style = bold, label=""];
6->4 [style = dotted, label="true"];
12->25 [style = bold, label=""];
3->8 [style = bold, label=""];
6->10 [style = bold, label=""];
6->13 [style = bold, label=""];
26->23 [style = bold, label=""];
6->8 [style = dotted, label="true"];
10->2 [style = solid, label="byteArrSize"];
6->10 [style = solid, label="i"];
12->24 [style = dotted, label="true"];
5->1 [style = solid, label="size"];
6->7 [style = dotted, label="true"];
24->21 [style = solid, label="bytes"];
15->17 [style = solid, label="mb"];
23->12 [style = solid, label="size"];
6->12 [style = dotted, label="true"];
6->12 [style = solid, label="i"];
6->3 [style = dotted, label="true"];
16->12 [style = bold, label=""];
24->18 [style = solid, label="bytes"];
12->25 [style = dotted, label="true"];
10->25 [style = dashed, label="0"];
9->12 [style = solid, label="i"];
17->16 [style = bold, label=""];
2->17 [style = dashed, label="0"];
14->5 [style = bold, label=""];
6->15 [style = dotted, label="true"];
6->12 [style = bold, label=""];
}
