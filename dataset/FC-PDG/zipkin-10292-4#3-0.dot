digraph {
0 [style = filled, label = "i++@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "getRemoteServiceNames_allReturned['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "spanNames.add(\"yak\" + suffix)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertThat(serviceAndSpanNames().getSpanNames(\"frontend\").execute()).containsExactlyInAnyOrderElementsOf(null)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "accept(CLIENT_SPAN.toBuilder().id(i + 1).remoteEndpoint(Endpoint.newBuilder().serviceName(\"yak\" + suffix).build()).build())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(serviceAndSpanNames().getSpanNames(\"frontend\").execute()).containsExactlyInAnyOrderElementsOf(spanNames)@@@11@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(serviceAndSpanNames().getRemoteServiceNames(\"frontend\").execute()).containsExactlyInAnyOrderElementsOf(remoteServiceNames)@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "List<String> remoteServiceNames = new ArrayList<>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "getSpanNames_allReturned['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "remoteServiceNames.add(\"yak\" + suffix)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "i < 50@@@5@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<String> spanNames = new ArrayList<>()@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "List<Span> spans = IntStream.rangeClosed(0,50).mapToObj(null).collect(Collectors.toList())@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "getSpanNames_allReturned['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "accept(spans)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "String suffix = i < 10? \"0\" + i: String.valueOf(i)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int i = 0@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "accept(CLIENT_SPAN.toBuilder().id(i + 1).name(\"yak\" + suffix).build())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4->1 [style = solid, label="spanNames"];
3->5 [style = solid, label="suffix"];
3->17 [style = solid, label="suffix"];
4->16 [style = dashed, label="0"];
7->3 [style = solid, label="i"];
1->14 [style = dashed, label="0"];
9->10 [style = solid, label="spans"];
8->3 [style = bold, label=""];
8->17 [style = dotted, label="true"];
16->7 [style = bold, label=""];
8->14 [style = bold, label=""];
3->6 [style = bold, label=""];
7->0 [style = solid, label="i"];
9->10 [style = bold, label=""];
7->8 [style = bold, label=""];
12->9 [style = bold, label=""];
2->4 [style = bold, label=""];
15->16 [style = bold, label=""];
8->3 [style = dotted, label="true"];
4->7 [style = bold, label=""];
8->1 [style = bold, label=""];
6->5 [style = bold, label=""];
13->17 [style = bold, label=""];
17->0 [style = bold, label=""];
8->6 [style = dotted, label="true"];
6->13 [style = dashed, label="0"];
5->17 [style = dashed, label="0"];
5->0 [style = bold, label=""];
8->5 [style = dotted, label="true"];
0->3 [style = solid, label="i"];
0->8 [style = bold, label=""];
0->8 [style = solid, label="i"];
3->13 [style = bold, label=""];
16->14 [style = solid, label="remoteServiceNames"];
8->0 [style = dotted, label="true"];
8->13 [style = dotted, label="true"];
7->8 [style = solid, label="i"];
10->11 [style = bold, label=""];
}
