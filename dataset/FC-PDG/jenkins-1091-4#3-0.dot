digraph {
11 [style = filled, label = "dependencyExclusion['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "List<AbstractProject> upstreamProjects = downstream.getUpstreamProjects()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "FreeStyleProject downstream = createFreeStyleProjectWithFingerprints(singleContents,singleFiles)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<AbstractProject> downstreamProjects = upstream.getDownstreamProjects()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<AbstractProject> upstreamProjects = downstream.getUpstreamProjects()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(0,upstreamProjects.size())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(upstreamProjects.contains(upstream))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "j.assertBuildStatusSuccess(downstream.scheduleBuild2(0).get())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Hudson.getInstance().rebuildDependencyGraph()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "upstreamBuild.delete()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(downstreamProjects.contains(downstream))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "j.assertBuildStatusSuccess(upstream.scheduleBuild2(0).get())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "dependencyExclusion['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(1,downstreamProjects.size())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "fingerprintDependencies['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Jenkins.getInstance().rebuildDependencyGraph()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "FreeStyleProject upstream = createFreeStyleProjectWithFingerprints(singleContents,singleFiles)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(1,upstreamProjects.size())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "FreeStyleBuild upstreamBuild = j.assertBuildStatusSuccess(upstream.scheduleBuild2(0).get())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(0,downstreamProjects.size())@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
6->3 [style = bold, label=""];
4->16 [style = solid, label="upstream"];
1->4 [style = bold, label=""];
0->13 [style = bold, label=""];
15->14 [style = bold, label=""];
7->12 [style = bold, label=""];
11->4 [style = bold, label=""];
0->17 [style = solid, label="downstream"];
18->15 [style = bold, label=""];
2->18 [style = bold, label=""];
16->17 [style = bold, label=""];
10->13 [style = dashed, label="0"];
4->0 [style = bold, label=""];
6->12 [style = dashed, label="0"];
5->2 [style = bold, label=""];
0->10 [style = bold, label=""];
10->5 [style = bold, label=""];
3->2 [style = bold, label=""];
7->6 [style = bold, label=""];
8->9 [style = bold, label=""];
13->5 [style = bold, label=""];
5->7 [style = bold, label=""];
8->18 [style = dashed, label="0"];
12->3 [style = bold, label=""];
19->4 [style = bold, label=""];
2->8 [style = bold, label=""];
9->15 [style = dashed, label="0"];
}
