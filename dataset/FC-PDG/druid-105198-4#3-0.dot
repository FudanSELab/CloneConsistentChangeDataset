digraph {
3 [style = filled, label = "final String json = mapper.writeValueAsString(original)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(original,fromJson)@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testSerde['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testSerde['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final BuildingHashBasedNumberedShardSpec fromJson = (BuildingHashBasedNumberedShardSpec)mapper.readValue(json,)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final NumberedOverwriteShardSpec fromJson = (NumberedOverwriteShardSpec)mapper.readValue(json,)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "mapper.registerSubtypes(new NamedType(,NumberedOverwriteShardSpec.TYPE))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testSerde['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "final NumberedOverwriteShardSpec original = new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 2,0,10,(short)1,(short)3)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final ObjectMapper mapper = ShardSpecTestUtils.initObjectMapper()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "mapper.setInjectableValues(new Std().addValue(,mapper))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final BuildingHashBasedNumberedShardSpec original = new BuildingHashBasedNumberedShardSpec(3,5,12,ImmutableList.of(\"dim\"),mapper)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "mapper.registerSubtypes(new NamedType(,BuildingHashBasedNumberedShardSpec.TYPE))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final BuildingHashBasedNumberedShardSpec original = new BuildingHashBasedNumberedShardSpec(3,5,12,ImmutableList.of(\"dim\"),HashPartitionFunction.MURMUR3_32_ABS,mapper)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5->3 [style = bold, label=""];
2->5 [style = bold, label=""];
4->0 [style = solid, label="fromJson"];
11->12 [style = bold, label=""];
5->3 [style = solid, label="original"];
3->13 [style = solid, label="json"];
9->10 [style = bold, label=""];
3->4 [style = bold, label=""];
7->0 [style = solid, label="original"];
7->3 [style = bold, label=""];
4->0 [style = bold, label=""];
8->1 [style = bold, label=""];
6->1 [style = bold, label=""];
7->3 [style = solid, label="original"];
12->0 [style = solid, label="original"];
3->13 [style = bold, label=""];
13->0 [style = solid, label="fromJson"];
1->2 [style = bold, label=""];
12->3 [style = bold, label=""];
2->7 [style = bold, label=""];
5->0 [style = solid, label="original"];
5->7 [style = dashed, label="0"];
4->13 [style = dashed, label="0"];
12->3 [style = solid, label="original"];
3->4 [style = solid, label="json"];
13->0 [style = bold, label=""];
10->11 [style = bold, label=""];
}
