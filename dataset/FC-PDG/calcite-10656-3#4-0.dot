digraph {
2 [style = filled, label = "RelTraitSet traitSet = convert.getTraitSet().replace(EnumerableConvention.INSTANCE)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "RuleSet ruleSet = RuleSets.ofList(MergeFilterRule.INSTANCE,JavaRules.ENUMERABLE_FILTER_RULE,JavaRules.ENUMERABLE_PROJECT_RULE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "SqlNode parse = planner.parse(\"select * from \"emps\"\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(toString(transform),equalTo(\"EnumerableSortRel(sort0=($1(, dir0=(ASC()\" + \" EnumerableProjectRel(empid=($0(, deptno=($1(, name=($2(, salary=($3(, commission=($4()\" + \" EnumerableTableAccessRel(table=((hr, emps(()\"))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "RuleSet ruleSet = RuleSets.ofList(RemoveSortRule.INSTANCE,JavaRules.ENUMERABLE_PROJECT_RULE,JavaRules.ENUMERABLE_SORT_RULE)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "testPlanTransformTwice['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(toString(transform2),equalTo(\"EnumerableProjectRel(empid=($0(, deptno=($1(, name=($2(, salary=($3(, commission=($4()\" + \" EnumerableTableAccessRel(table=((hr, emps(()\"))@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "RelNode convert = planner.convert(validate)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "RelTraitSet traitSet = planner.getEmptyTraitSet().replace(EnumerableConvention.INSTANCE)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "RelNode transform2 = planner.transform(0,traitSet,transform)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "RuleSet ruleSet = RuleSets.ofList(SortRemoveRule.INSTANCE,EnumerableRules.ENUMERABLE_PROJECT_RULE,EnumerableRules.ENUMERABLE_SORT_RULE)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testSortPlan['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "RelNode transform = planner.transform(0,traitSet,convert)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "SqlNode validate = planner.validate(parse)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "SqlNode parse = planner.parse(\"select * from \"emps\" \" + \"order by \"emps\".\"deptno\"\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(toString(transform),equalTo(\"EnumerableSort(sort0=($1(, dir0=(ASC()\" + \" EnumerableProject(empid=($0(, deptno=($1(, name=($2(, salary=($3(, commission=($4()\" + \" EnumerableTableScan(table=((hr, emps(()\"))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Planner planner = getPlanner(null,Programs.of(ruleSet))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testSortPlan['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10->1 [style = solid, label="ruleSet"];
5->3 [style = bold, label=""];
17->7 [style = solid, label="parse"];
8->16 [style = dashed, label="0"];
8->10 [style = dashed, label="0"];
12->5 [style = bold, label=""];
5->9 [style = bold, label=""];
15->14 [style = bold, label=""];
8->1 [style = solid, label="ruleSet"];
5->9 [style = solid, label="transform"];
15->14 [style = solid, label="transform2"];
0->7 [style = solid, label="parse"];
7->4 [style = solid, label="validate"];
5->15 [style = bold, label=""];
1->0 [style = bold, label=""];
7->4 [style = bold, label=""];
4->2 [style = bold, label=""];
5->15 [style = solid, label="transform"];
0->17 [style = dashed, label="0"];
13->16 [style = bold, label=""];
16->1 [style = solid, label="ruleSet"];
2->5 [style = solid, label="traitSet"];
4->5 [style = solid, label="convert"];
1->17 [style = bold, label=""];
0->7 [style = bold, label=""];
17->7 [style = bold, label=""];
5->3 [style = solid, label="transform"];
8->1 [style = bold, label=""];
2->12 [style = dashed, label="0"];
12->15 [style = solid, label="traitSet"];
16->1 [style = bold, label=""];
3->9 [style = dashed, label="0"];
11->10 [style = bold, label=""];
6->8 [style = bold, label=""];
4->12 [style = bold, label=""];
10->1 [style = bold, label=""];
12->5 [style = solid, label="traitSet"];
2->5 [style = bold, label=""];
}
