digraph {
2 [style = filled, label = "testBasic['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "CuratorTransactionResult fooResult = Iterables.find(results,CuratorTransactionResult.ofTypeAndPath(OperationType.CREATE,\"/foo\"))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "CuratorTransactionResult fooBarResult = Iterables.find(results,CuratorTransactionResult.ofTypeAndPath(OperationType.CREATE,\"/foo/bar\"))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "CuratorOp createOp2 = client.transactionOp().create().forPath(\"/foo/bar\",\"snafu\".getBytes())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(fooBarResult.getResultPath(),\"/foo/bar\")@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "client.transaction().inBackground(callback).forOperations(createOp1,createOp2)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertNotNull(fooResult)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(fooResult.getResultPath(),\"/foo\")@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "CuratorOp createOp1 = client.transactionOp().create().forPath(\"/foo\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(fooBarResult.getResultPath(),\"/foo/bar\")@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "final BlockingQueue<List<CuratorTransactionResult>> queue = Queues.newLinkedBlockingQueue()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertNotSame(fooResult,fooBarResult)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertNotSame(fooResult,fooBarResult)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertNotSame(fooResult,fooBarResult)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "Assert.assertNotNull(fooResult)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(client.getData().forPath(\"/foo/bar\"),\"snafu\".getBytes())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Collection<CuratorTransactionResult> results = client.transaction().forOperations(createOp1,createOp2)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertNotNull(fooResult)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertTrue(client.checkExists().forPath(\"/foo/bar\") != null)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "Collection<CuratorTransactionResult> results = queue.poll(5,TimeUnit.SECONDS)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertNotNull(fooBarResult)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(fooResult.getResultPath(),\"/foo\")@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertTrue(client.checkExists().forPath(\"/foo/bar\") != null)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertArrayEquals(client.getData().forPath(\"/foo/bar\"),\"snafu\".getBytes())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "testBasic['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Assert.assertEquals(client.getData().forPath(\"/foo/bar\"),\"snafu\".getBytes())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "Assert.assertNotNull(fooBarResult)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertEquals(fooBarResult.getResultPath(),\"/foo/bar\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "CuratorTransactionResult fooBarResult = Iterables.find(results,CuratorTransactionResult.ofTypeAndPath(OperationType.CREATE,\"/foo/bar\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testBackground['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(fooResult.getResultPath(),\"/foo\")@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "Assert.assertNotNull(results)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "client.start()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "BackgroundCallback callback = new BackgroundCallback(){@Override public void processResult(CuratorFramework client,CuratorEvent event){queue.add(event.getOpResults())}}@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertTrue(client.checkExists().forPath(\"/foo/bar\") != null)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),new RetryOneTime(1))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertNotNull(fooBarResult)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "CuratorTransactionResult fooResult = Iterables.find(results,CuratorTransactionResult.ofTypeAndPath(OperationType.CREATE,\"/foo\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->11 [style = solid, label="createOp1"];
4->18 [style = dashed, label="0"];
1->4 [style = bold, label=""];
15->16 [style = dashed, label="0"];
7->11 [style = bold, label=""];
1->12 [style = solid, label="fooBarResult"];
30->27 [style = solid, label="results"];
11->34 [style = dashed, label="0"];
1->16 [style = solid, label="fooBarResult"];
33->28 [style = bold, label=""];
37->25 [style = bold, label=""];
0->4 [style = solid, label="fooResult"];
8->3 [style = bold, label=""];
4->15 [style = bold, label=""];
8->23 [style = dashed, label="0"];
36->32 [style = bold, label=""];
1->18 [style = bold, label=""];
23->3 [style = bold, label=""];
30->36 [style = bold, label=""];
1->15 [style = solid, label="fooBarResult"];
9->22 [style = dashed, label="0"];
13->19 [style = dashed, label="0"];
12->9 [style = bold, label=""];
9->8 [style = bold, label=""];
2->10 [style = bold, label=""];
22->23 [style = bold, label=""];
10->6 [style = bold, label=""];
17->19 [style = bold, label=""];
25->35 [style = bold, label=""];
0->18 [style = solid, label="fooResult"];
30->36 [style = solid, label="results"];
19->0 [style = bold, label=""];
35->24 [style = bold, label=""];
14->7 [style = bold, label=""];
20->10 [style = bold, label=""];
7->11 [style = solid, label="createOp2"];
12->21 [style = dashed, label="0"];
6->14 [style = bold, label=""];
26->38 [style = bold, label=""];
24->33 [style = bold, label=""];
14->38 [style = solid, label="createOp1"];
29->27 [style = bold, label=""];
11->5 [style = bold, label=""];
27->37 [style = bold, label=""];
10->28 [style = solid, label="client"];
38->30 [style = bold, label=""];
7->34 [style = bold, label=""];
11->0 [style = solid, label="results"];
1->21 [style = solid, label="fooBarResult"];
29->37 [style = solid, label="fooResult"];
5->17 [style = dashed, label="0"];
34->26 [style = bold, label=""];
21->22 [style = bold, label=""];
31->10 [style = bold, label=""];
0->1 [style = bold, label=""];
16->21 [style = bold, label=""];
5->13 [style = bold, label=""];
10->3 [style = solid, label="client"];
7->38 [style = solid, label="createOp2"];
29->35 [style = solid, label="fooResult"];
11->17 [style = bold, label=""];
30->29 [style = solid, label="results"];
15->12 [style = bold, label=""];
0->12 [style = solid, label="fooResult"];
27->25 [style = solid, label="fooBarResult"];
32->3 [style = bold, label=""];
3->29 [style = bold, label=""];
27->35 [style = solid, label="fooBarResult"];
11->1 [style = solid, label="results"];
0->21 [style = solid, label="fooResult"];
13->0 [style = bold, label=""];
18->16 [style = bold, label=""];
}
