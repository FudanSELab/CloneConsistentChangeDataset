digraph {
14 [style = filled, label = "assertThat(actual.size(),is(1))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertThat(actualPackets.next(),is(instanceOf()))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(actualPackets.next(),is(instanceOf()))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "when(connectionContext.getDescribeExecutor()).thenReturn(Optional.of(describeExecutor))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Iterator<DatabasePacket<?>> actualPackets = actual.iterator()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "setMockFieldIntoExecutor(executor)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "when(databaseCommunicationEngine.execute()).thenReturn(queryResponseHeader)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "verify(queryResponseHeader).getQueryHeaders()@@@13@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(actual.size(),is(2))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertExecuteBindPacketWithQuerySQLAndReturnEmptyResult['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "assertThat(executor.getResponseType(),is(ResponseType.UPDATE))@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(actualPackets.next(),is(instanceOf()))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(executor.getResponseType(),is(ResponseType.QUERY))@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "verify(queryResponseHeader).getQueryHeaders()@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "QueryResponseHeader queryResponseHeader = mock()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(connectionContext,bindPacket,backendConnection)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertExecuteBindPacketWithUpdateSQL['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(bindPacket,backendConnection)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertExecuteBindPacketWithQuerySQLAndReturnEmptyResult['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(actual.iterator().next(),is(instanceOf()))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Collection<DatabasePacket<?>> actual = executor.execute()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(executor.getResponseType(),is(ResponseType.QUERY))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "when(databaseCommunicationEngine.execute()).thenReturn(new UpdateResponseHeader(mock()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17->6 [style = bold, label=""];
10->14 [style = bold, label=""];
7->14 [style = dashed, label="0"];
2->3 [style = bold, label=""];
17->6 [style = solid, label="executor"];
7->4 [style = bold, label=""];
12->0 [style = bold, label=""];
10->7 [style = bold, label=""];
15->18 [style = bold, label=""];
1->9 [style = bold, label=""];
0->1 [style = solid, label="queryResponseHeader"];
1->17 [style = bold, label=""];
9->6 [style = bold, label=""];
8->0 [style = bold, label=""];
11->5 [style = bold, label=""];
5->2 [style = bold, label=""];
13->12 [style = bold, label=""];
21->20 [style = bold, label=""];
5->11 [style = dashed, label="0"];
19->9 [style = bold, label=""];
0->1 [style = bold, label=""];
4->15 [style = dashed, label="0"];
6->10 [style = bold, label=""];
9->17 [style = dashed, label="0"];
11->22 [style = bold, label=""];
14->15 [style = bold, label=""];
19->9 [style = solid, label="executor"];
9->6 [style = solid, label="executor"];
4->11 [style = bold, label=""];
20->19 [style = bold, label=""];
2->22 [style = dashed, label="0"];
18->16 [style = bold, label=""];
}
