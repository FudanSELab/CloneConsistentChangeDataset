digraph {
28 [style = filled, label = "FutureCallback<Void> restartCallback = new FutureCallback<>()@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "EasyMock.expectLastCall().andReturn(true)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "ExecutionException e@@@29@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "PowerMock.verifyAll()@@@32@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "Herder.Created<ConnectorInfo> connectorInfo = createCallback.get(1000L,TimeUnit.SECONDS)@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "assertEquals(exception,e.getCause())@@@30@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "EasyMock.expectLastCall().andReturn(false)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "EasyMock.expectLastCall().andAnswer(new IAnswer<Boolean>(){@Override public Boolean answer(){onStart.getValue().onCompletion(exception,null)return true}})@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "herder.putConnectorConfig(CONNECTOR_NAME,config,false,createCallback)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "fail()@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "fail()@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "restartCallback.get(1000L,TimeUnit.MILLISECONDS)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertEquals(createdInfo(SourceSink.SOURCE),connectorInfo.result())@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "worker.startConnector(EasyMock.eq(CONNECTOR_NAME),EasyMock.eq(config),EasyMock.anyObject(),EasyMock.eq(herder),EasyMock.eq(TargetState.STARTED))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Connector connectorMock = PowerMock.createMock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "herder.putConnectorConfig(CONNECTOR_NAME,config,false,createCallback)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "herder.restartConnector(CONNECTOR_NAME,cb)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testRestartConnector['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "PowerMock.verifyAll()@@@16@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Capture<Callback<TargetState>> onStart = EasyMock.newCapture()@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "expectConfigValidation(connectorMock,true,config)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "cb.get(1000L,TimeUnit.MILLISECONDS)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "PowerMock.replayAll()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "worker.stopConnector(CONNECTOR_NAME)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "PowerMock.replayAll()@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "EasyMock.expectLastCall()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "expectAdd(SourceSink.SOURCE)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "herder.restartConnector(CONNECTOR_NAME,restartCallback)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "worker.stopAndAwaitConnector(CONNECTOR_NAME)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testRestartConnectorFailureOnStart['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "FutureCallback<Void> cb = new FutureCallback<>()@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Map<String,String> config = connectorConfig(SourceSink.SOURCE)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Exception exception = new ConnectException(\"Failed to start connector\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "EasyMock.expectLastCall().andReturn(true)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testRestartConnectorFailureOnStart['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "worker.startConnector(EasyMock.eq(CONNECTOR_NAME),EasyMock.eq(config),EasyMock.anyObject(),EasyMock.eq(herder),EasyMock.eq(TargetState.STARTED),EasyMock.capture(onStart))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1->5 [style = bold, label=""];
19->33 [style = bold, label=""];
28->29 [style = bold, label=""];
16->15 [style = bold, label=""];
5->8 [style = bold, label=""];
4->3 [style = bold, label=""];
0->16 [style = bold, label=""];
4->35 [style = bold, label=""];
25->28 [style = bold, label=""];
27->1 [style = bold, label=""];
8->2 [style = solid, label="connectorMock"];
3->35 [style = dashed, label="0"];
31->22 [style = bold, label=""];
17->1 [style = bold, label=""];
29->30 [style = bold, label=""];
7->12 [style = bold, label=""];
2->6 [style = bold, label=""];
34->1 [style = bold, label=""];
3->14 [style = bold, label=""];
12->11 [style = bold, label=""];
6->31 [style = dashed, label="0"];
22->32 [style = bold, label=""];
7->12 [style = solid, label="cb"];
32->19 [style = bold, label=""];
10->22 [style = dashed, label="0"];
11->9 [style = bold, label=""];
23->0 [style = bold, label=""];
20->25 [style = bold, label=""];
35->14 [style = bold, label=""];
5->13 [style = solid, label="config"];
21->18 [style = bold, label=""];
11->15 [style = bold, label=""];
5->19 [style = solid, label="config"];
3->19 [style = dashed, label="0"];
33->23 [style = bold, label=""];
32->19 [style = solid, label="onStart"];
24->26 [style = bold, label=""];
30->21 [style = bold, label=""];
8->2 [style = bold, label=""];
24->26 [style = dotted, label="true"];
13->7 [style = bold, label=""];
9->15 [style = bold, label=""];
6->10 [style = bold, label=""];
5->2 [style = solid, label="config"];
5->16 [style = solid, label="config"];
5->4 [style = solid, label="config"];
10->4 [style = bold, label=""];
0->24 [style = dashed, label="0"];
0->16 [style = dotted, label="true"];
14->13 [style = bold, label=""];
11->30 [style = dashed, label="0"];
16->20 [style = bold, label=""];
33->23 [style = solid, label="exception"];
28->29 [style = solid, label="restartCallback"];
26->18 [style = bold, label=""];
2->31 [style = bold, label=""];
}
