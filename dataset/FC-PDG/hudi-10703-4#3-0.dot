digraph {
5 [style = filled, label = "Row row = KeyGeneratorTestUtilities.getRow(record)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assertions.assertEquals(key.getRecordKey(),\"_row_key:key1,pii_col:pi\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testComplexRecordKeyWithSimplePartitionPath['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assertions.assertEquals(keyGenerator.getRecordKey(row),\"_row_key:key1,pii_col:pi\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TypedProperties props@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "testHappyFlow['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "BuiltinKeyGenerator keyGenerator = (BuiltinKeyGenerator)HoodieSparkKeyGeneratorFactory.createKeyGenerator(props)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "keyGenerator.buildFieldPositionMapIfNeeded(KeyGeneratorTestUtilities.structType)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testComplexRecordKeyWithSimplePartitionPath['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Row row = KeyGeneratorTestUtilities.getRow(record)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "HoodieKey key = keyGenerator.getKey(record)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "GlobalDeleteKeyGenerator keyGenerator = new GlobalDeleteKeyGenerator(getProps())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assertions.assertEquals(keyGenerator.getPartitionPath(row),\"\")@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "GenericRecord record = getRecord()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assertions.assertEquals(key.getPartitionPath(),\"timestamp=4357686\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "BuiltinKeyGenerator keyGenerator = new CustomKeyGenerator(getComplexRecordKeyWithSimplePartitionProps())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "Assertions.assertEquals(key.getPartitionPath(),\"\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->13 [style = bold, label=""];
1->8 [style = bold, label=""];
0->6 [style = bold, label=""];
1->15 [style = bold, label=""];
8->15 [style = dashed, label="0"];
9->11 [style = solid, label="props"];
16->2 [style = bold, label=""];
2->13 [style = solid, label="row"];
15->16 [style = bold, label=""];
10->9 [style = dotted, label="true"];
12->0 [style = bold, label=""];
3->4 [style = bold, label=""];
0->5 [style = solid, label="record"];
4->0 [style = bold, label=""];
4->12 [style = dashed, label="0"];
6->1 [style = bold, label=""];
5->2 [style = solid, label="row"];
5->2 [style = bold, label=""];
11->0 [style = bold, label=""];
8->5 [style = bold, label=""];
14->12 [style = bold, label=""];
7->13 [style = dashed, label="0"];
0->2 [style = solid, label="record"];
2->7 [style = bold, label=""];
4->11 [style = dashed, label="0"];
5->7 [style = solid, label="row"];
2->7 [style = solid, label="row"];
0->6 [style = solid, label="record"];
10->11 [style = bold, label=""];
}
