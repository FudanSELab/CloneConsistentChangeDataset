digraph {
8 [style = filled, label = "return result@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "visitExpr['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "visitExpr['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "return result@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "String operator = \"XOR\"@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "return result@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "return result@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)),(ExpressionSegment)visit(ctx.expr(1)),ctx.logicalOperator().getText(),text)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "null != ctx.XOR()@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "visitExpr['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "null != ctx.LP_()@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final ExprContext ctx@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "NotExpression result = new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "ExpressionSegment right = (ExpressionSegment)visit(ctx.expr(1))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(),ctx.stop.getStopIndex()))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "ExpressionSegment left = (ExpressionSegment)visit(ctx.expr(0))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "null != ctx.logicalOperator()@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "NotExpression result = new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "return visit(ctx.expr(0))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "String operator = ctx.logicalOperator().getText()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "return result@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "return new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "return visit(ctx.booleanPrimary())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "return new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "ExpressionSegment left = (ExpressionSegment)visit(ctx.expr(0))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "null != ctx.logicalOperator()@@@13@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ExpressionSegment right = (ExpressionSegment)visit(ctx.expr(1))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "null != ctx.booleanPrimary()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4->18 [style = dotted, label="true"];
25->1 [style = bold, label=""];
15->21 [style = bold, label=""];
13->20 [style = dashed, label="0"];
17->14 [style = dotted, label="true"];
1->23 [style = bold, label=""];
21->28 [style = bold, label=""];
22->14 [style = dotted, label="true"];
19->1 [style = bold, label=""];
17->15 [style = dotted, label="true"];
23->22 [style = bold, label=""];
17->14 [style = bold, label=""];
15->20 [style = bold, label=""];
0->18 [style = solid, label="operator"];
14->7 [style = dotted, label="true"];
7->16 [style = bold, label=""];
12->18 [style = bold, label=""];
7->15 [style = dashed, label="0"];
4->23 [style = dashed, label="0"];
17->20 [style = bold, label=""];
1->4 [style = bold, label=""];
13->8 [style = solid, label="result"];
4->0 [style = dotted, label="true"];
7->16 [style = solid, label="result"];
26->14 [style = bold, label=""];
2->18 [style = solid, label="left"];
4->2 [style = bold, label=""];
22->24 [style = dotted, label="true"];
15->7 [style = solid, label="text"];
27->22 [style = bold, label=""];
3->0 [style = bold, label=""];
1->11 [style = bold, label=""];
6->18 [style = dashed, label="0"];
3->18 [style = solid, label="right"];
19->9 [style = dotted, label="true"];
23->27 [style = dotted, label="true"];
12->14 [style = solid, label="left"];
14->15 [style = bold, label=""];
26->14 [style = solid, label="text"];
10->1 [style = bold, label=""];
4->2 [style = dotted, label="true"];
4->5 [style = dotted, label="true"];
4->14 [style = bold, label=""];
16->13 [style = bold, label=""];
4->17 [style = bold, label=""];
14->15 [style = solid, label="result"];
2->3 [style = bold, label=""];
0->12 [style = bold, label=""];
11->4 [style = bold, label=""];
6->24 [style = bold, label=""];
10->9 [style = dotted, label="true"];
0->6 [style = solid, label="operator"];
14->16 [style = dotted, label="true"];
6->14 [style = solid, label="right"];
24->26 [style = bold, label=""];
6->5 [style = bold, label=""];
4->3 [style = dotted, label="true"];
22->26 [style = dotted, label="true"];
14->13 [style = bold, label=""];
4->12 [style = dotted, label="true"];
22->15 [style = dotted, label="true"];
4->6 [style = dotted, label="true"];
15->7 [style = bold, label=""];
23->27 [style = bold, label=""];
21->28 [style = solid, label="result"];
1->11 [style = dotted, label="true"];
22->21 [style = bold, label=""];
18->17 [style = bold, label=""];
2->6 [style = solid, label="left"];
6->5 [style = solid, label="result"];
5->14 [style = bold, label=""];
22->6 [style = dotted, label="true"];
12->6 [style = bold, label=""];
22->12 [style = dotted, label="true"];
14->15 [style = dotted, label="true"];
25->9 [style = dotted, label="true"];
3->6 [style = solid, label="right"];
22->12 [style = bold, label=""];
12->18 [style = solid, label="text"];
0->24 [style = dashed, label="0"];
14->15 [style = solid, label="text"];
13->8 [style = bold, label=""];
12->6 [style = solid, label="text"];
24->14 [style = solid, label="operator"];
11->23 [style = bold, label=""];
}
