digraph {
40 [style = filled, label = "results.add(expectation.getResults())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableSearchResults(segmentIds,intervals,results)).once()@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "expectations@@@71@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "List<Iterable<Result<TimeBoundaryResultValue>>> results = new ArrayList<>()@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "results.add(expectation.getResults())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "List<Object> mocks = new ArrayList<>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
114 [style = filled, label = "ServerExpectation expectation@@@24@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
124 [style = filled, label = "Object args@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "intervals.add(expectation.getInterval())@@@73@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testQueryCaching['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "final List<List<Iterable<Result<Object>>>> expectedResults = Lists.newArrayListWithCapacity(queryIntervals.size())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
102 [style = filled, label = "final QueryRunner runner@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
95 [style = filled, label = "queryCaptures@@@117@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
113 [style = filled, label = "final QueryRunner runner@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "expectedResultsRangeEnd = i + 1@@@86@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "expectations@@@49@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "intervals.add(expectation.getInterval())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "final int expectedResultsRangeStart@@@82@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "results.add(expectation.getResults())@@@74@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "queryCaptures.add(capture)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
110 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andAnswer(new IAnswer<Sequence>(){@Override public Sequence answer(){return toFilteredQueryableTimeseriesResults((TimeseriesQuery)capture.getValue().getQuery(),segmentIds,queryIntervals,results)}}).times(0,1)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "query instanceof SearchQuery@@@45@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
108 [style = filled, label = "Iterables.addAll((List)expected,filteredExpected.get(intervalNo))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "++i@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "mocks.add(serverView)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
100 [style = filled, label = "expectations@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
71 [style = filled, label = "final Capture<? extends ResponseContext> context = Capture.newInstance()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "final Capture<? extends QueryPlus> capture = Capture.newInstance()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
94 [style = filled, label = "Map.Entry<DruidServer,ServerExpectations> entry@@@15@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "query instanceof TopNQuery@@@34@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "results.add(expectation.getResults())@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "parseResults(queryIntervals,expectedResults,args)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "final Interval actualQueryInterval = new Interval(queryIntervals.get(0).getStart(),queryIntervals.get(i).getEnd())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "expectations@@@71@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
120 [style = filled, label = "final List<Iterable<Result<TimeseriesResultValue>>> results = new ArrayList<>()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
106 [style = filled, label = "testQueryCaching['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "List<Iterable<Result<TimeseriesResultValue>>> results = new ArrayList<>()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "ServerExpectation expectation@@@27@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "Assert.assertTrue(capturedQuery.getContextValue(\"bySegment\") == null || capturedQuery.getContextValue(\"bySegment\").equals(false))@@@124@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
115 [style = filled, label = "int intervalNo = 0@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "final int numTimesToQuery@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTimeseriesResults(expectBySegment,segmentIds,intervals,results)).once()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
92 [style = filled, label = "Assert.assertEquals(true,capturedQuery.getContextValue(\"bySegment\"))@@@121@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
97 [style = filled, label = "Assert.assertEquals(true,capturedQuery.getContextValue(QueryContexts.BY_SEGMENT_KEY))@@@121@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
46 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableGroupByResults((GroupByQuery)query,segmentIds,intervals,results)).once()@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "EasyMock.expect(serverView.getQueryRunner(server)).andReturn(expectations.getQueryRunner()).once()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "throw new ISE(\"Unknown query type(%s(\",query.getClass())@@@79@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "ServerExpectation expectation@@@49@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "ServerExpectation expectation@@@60@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "results.add(expectation.getResults())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "Capture queryCapture@@@117@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "final int numTimesToQuery@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "expectedResultsRangeStart = i@@@85@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Object args@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "boolean expectBySegment@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
118 [style = filled, label = "final List<Iterable<Result<TimeseriesResultValue>>> filteredExpected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
98 [style = filled, label = "ServerExpectation expectation@@@71@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
53 [style = filled, label = "expectBySegment@@@120@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ServerExpectations expectations = entry.getValue()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "query instanceof GroupByQuery@@@56@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "intervals.add(expectation.getInterval())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "final List<Interval> queryIntervals = Lists.newArrayListWithCapacity(args.length / 2)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
101 [style = filled, label = "expectations@@@38@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "final Iterable<Result<Object>> expected = new ArrayList<>()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "List<Capture> queryCaptures = new ArrayList<>()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
116 [style = filled, label = "Map.Entry<DruidServer,ServerExpectations> entry@@@14@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
121 [style = filled, label = "expectations@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "intervals.add(expectation.getInterval())@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
103 [style = filled, label = "Assert.assertTrue(capturedQuery.getContextValue(QueryContexts.BY_SEGMENT_KEY) == null || capturedQuery.getContextValue(QueryContexts.BY_SEGMENT_KEY).equals(false))@@@124@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
105 [style = filled, label = "boolean expectBySegment@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "DruidServer server = entry.getKey()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "query instanceof TimeBoundaryQuery@@@84@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "expectedResultsRangeEnd = i + 1@@@90@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Capture queryCapture@@@117@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "QueryPlus capturedQueryPlus = (QueryPlus)queryCapture.getValue()@@@118@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTimeBoundaryResults(segmentIds,intervals,results)).once()@@@76@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
119 [style = filled, label = "EasyMock.expect(serverView.getQueryRunner(server)).andReturn(expectations.getQueryRunner()).times(0,1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
96 [style = filled, label = "final Query query@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
104 [style = filled, label = "Object args@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Query capturedQuery = capturedQueryPlus.getQuery()@@@119@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
91 [style = filled, label = "List<Iterable<Result<TopNResultValue>>> results = new ArrayList<>()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
112 [style = filled, label = "throw new ISE(\"Unknown query type(%s(\",query.getClass())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "runWithMocks(new Runnable(){@Override public void run(){for (int i = 0 i < numTimesToQuery ++i){TestHelper.assertExpectedResults(new MergeIterable(query instanceof GroupByQuery? ((GroupByQuery)query).getResultOrdering(): Comparators.naturalNullsFirst(),FunctionalIterable.create(new RangeIterable(expectedResultsRangeStart,expectedResultsRangeEnd)).transformCat(new Function<Integer,Iterable<Iterable<Result<Object>>>>(){@Override public Iterable<Iterable<Result<Object>>> apply(@Nullable Integer input){List<Iterable<Result<Object>>> retVal = new ArrayList<>()final Map<DruidServer,ServerExpectations> exps = serverExpectationList.get(input)for (ServerExpectations expectations : exps.values()){for (ServerExpectation expectation : expectations){retVal.add(expectation.getResults())}}return retVal}})),runner.run(QueryPlus.wrap(query.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(ImmutableList.of(actualQueryInterval)))),initializeResponseContext()))if (queryCompletedCallback != null) {queryCompletedCallback.run()}}}},mocks.toArray())@@@92@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "expectations@@@49@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
111 [style = filled, label = "final int numTimesToQuery@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "query instanceof TimeseriesQuery@@@21@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
109 [style = filled, label = "final List<SegmentId> segmentIds = new ArrayList<>()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "finalExpectation.entrySet()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "List<Iterable<Result<SearchResultValue>>> results = new ArrayList<>()@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "final Query query@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "ServerExpectation expectation@@@60@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "intervals.add(expectation.getInterval())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "query instanceof TimeBoundaryQuery@@@67@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "QueryRunner queryable = expectations.getQueryRunner()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "runWithMocks(new Runnable(){@Override public void run(){for (int i = 0 i < numTimesToQuery ++i){TestHelper.assertExpectedResults(expected,runner.run(QueryPlus.wrap(query.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(ImmutableList.of(actualQueryInterval))))))if (queryCompletedCallback != null) {queryCompletedCallback.run()}}}},mocks.toArray())@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ServerExpectation expectation@@@38@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final List<Map<DruidServer,ServerExpectations>> serverExpectationList = populateTimeline(queryIntervals,expectedResults,i,mocks)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
107 [style = filled, label = "intervalNo++@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
123 [style = filled, label = "final Query query@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "List<Iterable<ResultRow>> results = new ArrayList<>()@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "i < queryIntervals.size()@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "final Map<DruidServer,ServerExpectations> finalExpectation = serverExpectationList.get(serverExpectationList.size() - 1)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "ServerExpectation expectation@@@38@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
99 [style = filled, label = "expectations@@@60@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTopNResults(segmentIds,intervals,results)).once()@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
122 [style = filled, label = "intervalNo < i + 1@@@41@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "int i = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "Map.Entry<DruidServer,ServerExpectations> entry@@@15@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "results.add(expectation.getResults())@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
117 [style = filled, label = "testQueryCachingWithFilter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
77->110 [style = bold, label=""];
23->64 [style = dotted, label="true"];
40->2 [style = bold, label=""];
67->35 [style = solid, label="capture"];
8->16 [style = bold, label=""];
97->6 [style = bold, label=""];
96->36 [style = solid, label="query"];
52->8 [style = bold, label=""];
26->34 [style = dotted, label="false"];
38->34 [style = solid, label="i"];
11->41 [style = dotted, label="true"];
76->90 [style = bold, label=""];
89->103 [style = dashed, label="0"];
31->65 [style = dotted, label="true"];
23->22 [style = dotted, label="true"];
106->104 [style = dotted, label="true"];
59->29 [style = solid, label="i"];
71->9 [style = bold, label=""];
11->1 [style = dotted, label="true"];
44->74 [style = bold, label=""];
5->68 [style = bold, label=""];
11->12 [style = dotted, label="true"];
60->124 [style = dashed, label="0"];
21->8 [style = bold, label=""];
49->23 [style = solid, label="query"];
10->53 [style = bold, label=""];
31->36 [style = dotted, label="false"];
64->86 [style = bold, label=""];
54->2 [style = dotted, label="true"];
24->33 [style = dotted, label="true"];
25->43 [style = bold, label=""];
54->120 [style = dotted, label="true"];
59->34 [style = solid, label="i"];
117->118 [style = dotted, label="true"];
67->71 [style = bold, label=""];
29->56 [style = bold, label=""];
110->37 [style = bold, label=""];
37->108 [style = solid, label="expected"];
53->103 [style = bold, label=""];
96->57 [style = solid, label="query"];
11->73 [style = dotted, label="true"];
31->42 [style = dotted, label="true"];
16->59 [style = solid, label="expectations"];
104->4 [style = solid, label="args"];
59->84 [style = solid, label="i"];
3->5 [style = bold, label=""];
18->44 [style = bold, label=""];
62->77 [style = bold, label=""];
31->21 [style = dotted, label="true"];
65->50 [style = bold, label=""];
54->109 [style = bold, label=""];
120->62 [style = bold, label=""];
103->1 [style = bold, label=""];
23->52 [style = bold, label=""];
106->47 [style = bold, label=""];
11->71 [style = dotted, label="true"];
57->68 [style = dotted, label="true"];
23->52 [style = dotted, label="false"];
50->91 [style = bold, label=""];
11->13 [style = bold, label=""];
56->8 [style = bold, label=""];
54->100 [style = dotted, label="true"];
38->15 [style = solid, label="i"];
106->102 [style = dotted, label="true"];
30->40 [style = bold, label=""];
22->78 [style = bold, label=""];
11->8 [style = dotted, label="true"];
92->97 [style = dashed, label="0"];
54->110 [style = dotted, label="true"];
59->11 [style = solid, label="i"];
49->57 [style = solid, label="query"];
42->21 [style = bold, label=""];
31->88 [style = dotted, label="true"];
59->6 [style = bold, label=""];
54->62 [style = dotted, label="true"];
36->74 [style = dotted, label="true"];
89->1 [style = bold, label=""];
107->122 [style = solid, label="intervalNo"];
41->122 [style = solid, label="i"];
75->0 [style = bold, label=""];
36->14 [style = dotted, label="true"];
117->113 [style = dotted, label="true"];
78->8 [style = bold, label=""];
77->62 [style = bold, label=""];
31->19 [style = dotted, label="true"];
11->70 [style = dotted, label="true"];
0->3 [style = bold, label=""];
11->7 [style = dotted, label="true"];
41->29 [style = solid, label="i"];
17->5 [style = bold, label=""];
80->59 [style = solid, label="actualQueryInterval"];
96->59 [style = solid, label="query"];
4->38 [style = bold, label=""];
73->67 [style = bold, label=""];
90->74 [style = bold, label=""];
111->41 [style = solid, label="numTimesToQuery"];
53->92 [style = bold, label=""];
11->37 [style = dotted, label="true"];
37->26 [style = bold, label=""];
11->59 [style = dotted, label="true"];
54->31 [style = dotted, label="false"];
38->11 [style = bold, label=""];
11->10 [style = dotted, label="true"];
57->3 [style = dotted, label="true"];
49->31 [style = solid, label="query"];
11->54 [style = dotted, label="true"];
24->60 [style = dotted, label="true"];
38->41 [style = solid, label="i"];
54->81 [style = bold, label=""];
89->6 [style = bold, label=""];
122->41 [style = bold, label=""];
11->35 [style = dotted, label="true"];
71->35 [style = bold, label=""];
38->11 [style = solid, label="i"];
49->54 [style = solid, label="query"];
38->59 [style = solid, label="i"];
124->4 [style = solid, label="args"];
47->87 [style = bold, label=""];
115->107 [style = solid, label="intervalNo"];
52->82 [style = bold, label=""];
11->13 [style = dotted, label="true"];
57->63 [style = dotted, label="true"];
11->115 [style = dotted, label="true"];
24->47 [style = bold, label=""];
77->30 [style = bold, label=""];
122->108 [style = dotted, label="true"];
24->55 [style = dotted, label="true"];
11->26 [style = dotted, label="true"];
1->11 [style = bold, label=""];
82->37 [style = dashed, label="0"];
39->22 [style = bold, label=""];
54->27 [style = dotted, label="true"];
54->114 [style = dotted, label="true"];
9->54 [style = bold, label=""];
57->23 [style = bold, label=""];
31->91 [style = dotted, label="true"];
11->67 [style = dotted, label="true"];
34->59 [style = bold, label=""];
96->26 [style = solid, label="query"];
36->45 [style = dotted, label="true"];
13->12 [style = bold, label=""];
57->75 [style = dotted, label="true"];
23->51 [style = dotted, label="true"];
87->4 [style = bold, label=""];
96->23 [style = solid, label="query"];
53->103 [style = dotted, label="false"];
58->51 [style = bold, label=""];
54->77 [style = dotted, label="true"];
31->85 [style = dotted, label="true"];
85->88 [style = bold, label=""];
36->44 [style = dotted, label="true"];
81->109 [style = dashed, label="0"];
11->16 [style = dotted, label="true"];
14->8 [style = bold, label=""];
16->73 [style = bold, label=""];
49->59 [style = solid, label="query"];
78->82 [style = bold, label=""];
57->0 [style = dotted, label="true"];
36->66 [style = bold, label=""];
117->123 [style = dotted, label="true"];
23->86 [style = dotted, label="true"];
36->57 [style = bold, label=""];
68->17 [style = bold, label=""];
57->17 [style = dotted, label="true"];
16->119 [style = bold, label=""];
23->58 [style = bold, label=""];
17->46 [style = bold, label=""];
26->84 [style = bold, label=""];
42->85 [style = bold, label=""];
122->107 [style = dotted, label="true"];
33->53 [style = solid, label="expectBySegment"];
48->59 [style = solid, label="numTimesToQuery"];
96->31 [style = solid, label="query"];
117->47 [style = bold, label=""];
80->29 [style = bold, label=""];
24->49 [style = dotted, label="true"];
2->110 [style = dashed, label="0"];
35->9 [style = bold, label=""];
7->56 [style = bold, label=""];
23->28 [style = dotted, label="true"];
88->42 [style = bold, label=""];
49->26 [style = solid, label="query"];
43->77 [style = bold, label=""];
11->29 [style = dotted, label="true"];
23->72 [style = dotted, label="true"];
37->115 [style = bold, label=""];
38->84 [style = solid, label="i"];
107->122 [style = bold, label=""];
15->108 [style = dashed, label="0"];
31->36 [style = bold, label=""];
11->9 [style = dotted, label="true"];
81->25 [style = bold, label=""];
92->1 [style = bold, label=""];
36->93 [style = dotted, label="true"];
60->59 [style = solid, label="numTimesToQuery"];
108->107 [style = bold, label=""];
107->108 [style = solid, label="intervalNo"];
54->112 [style = dotted, label="false"];
96->54 [style = solid, label="query"];
115->108 [style = solid, label="intervalNo"];
37->41 [style = solid, label="expected"];
11->82 [style = dotted, label="true"];
11->20 [style = dotted, label="true"];
26->41 [style = bold, label=""];
11->83 [style = dotted, label="true"];
57->61 [style = dotted, label="true"];
57->23 [style = dotted, label="false"];
23->39 [style = dotted, label="true"];
11->95 [style = dotted, label="true"];
80->41 [style = solid, label="actualQueryInterval"];
57->99 [style = dotted, label="true"];
53->97 [style = dotted, label="true"];
106->105 [style = dotted, label="true"];
53->89 [style = dotted, label="false"];
54->25 [style = dotted, label="true"];
26->41 [style = dotted, label="false"];
51->64 [style = bold, label=""];
11->6 [style = dotted, label="true"];
23->58 [style = dotted, label="true"];
6->10 [style = bold, label=""];
53->92 [style = dotted, label="true"];
46->8 [style = bold, label=""];
46->82 [style = bold, label=""];
87->4 [style = solid, label="expectedResults"];
82->37 [style = bold, label=""];
53->97 [style = bold, label=""];
36->69 [style = dotted, label="true"];
54->43 [style = dotted, label="true"];
26->15 [style = dotted, label="true"];
24->48 [style = dotted, label="true"];
54->121 [style = dotted, label="true"];
119->67 [style = bold, label=""];
36->57 [style = dotted, label="false"];
103->6 [style = bold, label=""];
2->82 [style = bold, label=""];
21->82 [style = bold, label=""];
115->122 [style = solid, label="intervalNo"];
36->18 [style = dotted, label="true"];
41->11 [style = solid, label="i"];
115->122 [style = bold, label=""];
31->65 [style = bold, label=""];
41->34 [style = bold, label=""];
54->109 [style = dotted, label="true"];
11->53 [style = dotted, label="true"];
92->6 [style = bold, label=""];
90->14 [style = bold, label=""];
11->56 [style = dotted, label="true"];
47->29 [style = solid, label="queryIntervals"];
36->76 [style = dotted, label="true"];
38->122 [style = solid, label="i"];
49->36 [style = solid, label="query"];
12->80 [style = bold, label=""];
91->85 [style = bold, label=""];
26->84 [style = dotted, label="true"];
110->8 [style = bold, label=""];
25->120 [style = dashed, label="0"];
112->8 [style = bold, label=""];
105->53 [style = solid, label="expectBySegment"];
38->29 [style = solid, label="i"];
54->112 [style = bold, label=""];
54->40 [style = dotted, label="true"];
47->4 [style = solid, label="queryIntervals"];
14->82 [style = bold, label=""];
57->46 [style = dotted, label="true"];
40->77 [style = bold, label=""];
23->78 [style = dotted, label="true"];
106->96 [style = dotted, label="true"];
54->81 [style = dotted, label="true"];
122->108 [style = bold, label=""];
11->119 [style = dotted, label="true"];
41->1 [style = bold, label=""];
117->111 [style = dotted, label="true"];
57->75 [style = bold, label=""];
11->79 [style = dotted, label="true"];
84->15 [style = bold, label=""];
15->59 [style = bold, label=""];
73->119 [style = dashed, label="0"];
13->29 [style = solid, label="mocks"];
31->32 [style = dotted, label="true"];
11->116 [style = dotted, label="true"];
97->1 [style = bold, label=""];
117->124 [style = dotted, label="true"];
87->29 [style = solid, label="expectedResults"];
54->31 [style = bold, label=""];
53->89 [style = bold, label=""];
31->50 [style = dotted, label="true"];
54->30 [style = dotted, label="true"];
36->90 [style = dotted, label="true"];
66->18 [style = bold, label=""];
36->66 [style = dotted, label="true"];
59->15 [style = solid, label="i"];
123->54 [style = solid, label="query"];
31->101 [style = dotted, label="true"];
22->86 [style = bold, label=""];
57->5 [style = dotted, label="true"];
23->98 [style = dotted, label="true"];
55->4 [style = solid, label="args"];
29->7 [style = bold, label=""];
11->122 [style = dotted, label="true"];
11->94 [style = dotted, label="true"];
112->37 [style = bold, label=""];
86->39 [style = bold, label=""];
109->120 [style = bold, label=""];
106->60 [style = dotted, label="true"];
11->80 [style = dotted, label="true"];
2->8 [style = bold, label=""];
74->76 [style = bold, label=""];
}
