digraph {
24 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"location\").field(\"type\",\"geo_point\").field(IGNORE_Z_VALUE.getPreferredName(),false).field(IGNORE_MALFORMED.getPreferredName(),true).field(NULL_VALUE.getPreferredName(),\"91,181\").endObject().endObject().endObject().endObject())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertThat(nullValue,equalTo(new GeoPoint(89,1)))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\")@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Mapper fieldMapper = mapper.mappers().getMapper(\"field\")@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertThat(defaultValue,not(equalTo(doc.rootDoc().getBinaryValue(\"field\"))))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertThat(defaultValue,not(equalTo(doc.rootDoc().getBinaryValue(\"location\"))))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "DocumentMapper mapper = createDocumentMapper(fieldMapping(null))@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "assertThat(doc.rootDoc().getField(\"field\"),notNullValue())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "doc = mapper.parse(source(null))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "doc = defaultMapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"location\",\"1, 2\").endObject()),XContentType.JSON))@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "AbstractPointGeometryFieldMapper.ParsedPoint nullValue = ((GeoPointFieldMapper)fieldMapper).nullValue@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ParsedDocument doc = defaultMapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().nullField(\"location\").endObject()),XContentType.JSON))@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testNullValueWithIgnoreMalformed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(defaultValue,equalTo(doc.rootDoc().getBinaryValue(\"field\")))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "BytesRef defaultValue = doc.rootDoc().getBinaryValue(\"field\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertThat(defaultValue,equalTo(doc.rootDoc().getBinaryValue(\"location\")))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "ParsedDocument doc = mapper.parse(source(null))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "doc = defaultMapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"location\",\"3, 4\").endObject()),XContentType.JSON))@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(fieldMapper,instanceOf())@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertThat(fieldMapper,instanceOf())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testNullValue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"location\").field(\"type\",\"geo_point\").field(NULL_VALUE.getPreferredName(),\"1,2\").endObject().endObject().endObject().endObject())@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type\",new CompressedXContent(mapping))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "BytesRef defaultValue = doc.rootDoc().getBinaryValue(\"location\")@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "doc = mapper.parse(source(null))@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertThat(doc.rootDoc().getField(\"location\"),notNullValue())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "testNullValue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24->10 [style = bold, label=""];
7->6 [style = solid, label="defaultValue"];
4->9 [style = bold, label=""];
5->8 [style = bold, label=""];
20->18 [style = solid, label="defaultValue"];
16->15 [style = bold, label=""];
23->16 [style = bold, label=""];
5->8 [style = solid, label="fieldMapper"];
11->1 [style = bold, label=""];
20->19 [style = solid, label="defaultValue"];
16->8 [style = solid, label="fieldMapper"];
7->20 [style = dashed, label="0"];
14->19 [style = bold, label=""];
20->14 [style = bold, label=""];
19->17 [style = bold, label=""];
26->24 [style = bold, label=""];
2->4 [style = bold, label=""];
1->13 [style = bold, label=""];
12->7 [style = bold, label=""];
0->10 [style = solid, label="mapping"];
3->0 [style = bold, label=""];
9->6 [style = bold, label=""];
6->18 [style = dashed, label="0"];
1->22 [style = bold, label=""];
0->10 [style = bold, label=""];
13->12 [style = bold, label=""];
10->5 [style = bold, label=""];
22->20 [style = bold, label=""];
24->10 [style = solid, label="mapping"];
16->15 [style = solid, label="fieldMapper"];
7->2 [style = bold, label=""];
12->22 [style = dashed, label="0"];
0->24 [style = dashed, label="0"];
4->19 [style = dashed, label="0"];
7->4 [style = solid, label="defaultValue"];
5->11 [style = solid, label="fieldMapper"];
1->25 [style = dashed, label="0"];
8->11 [style = bold, label=""];
15->8 [style = bold, label=""];
17->18 [style = bold, label=""];
11->25 [style = bold, label=""];
21->23 [style = bold, label=""];
}
