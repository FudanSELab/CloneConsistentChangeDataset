digraph {
25 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",2),Long.MAX_VALUE))@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final boolean EVICT_AFTER = true@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",10),initialTime + 1000))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "final boolean EVICT_AFTER = false@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",4),Long.MAX_VALUE))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "EvictingWindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator = new EvictingWindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),CountTrigger.of(TRIGGER_COUNT),DeltaEvictor.of(THRESHOLD,new DeltaFunction<Tuple2<String,Integer>>(){@Override public double getDelta(Tuple2<String,Integer> oldDataPoint,Tuple2<String,Integer> newDataPoint){return newDataPoint.f1 - oldDataPoint.f1}},EVICT_AFTER),0,null)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",5),initialTime + 999))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "EvictingWindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator = new EvictingWindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),CountTrigger.of(triggerCount),CountEvictor.of(windowSize,evictAfter),0,null)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",10),Long.MAX_VALUE))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testHarness.close()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",6),initialTime + 1999))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",11),Long.MAX_VALUE))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 10999))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",4),Long.MAX_VALUE))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 20))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final int WINDOW_SIZE = 4@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "final int triggerCount = 2@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",4),initialTime + 3999))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "testDeltaEvictorEvictBefore['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testHarness.open()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",6),Long.MAX_VALUE))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3000))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "testHarness.close()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "long initialTime = 0L@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final int TRIGGER_COUNT = 2@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "final int windowSize = 4@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "AtomicInteger closeCalled = new AtomicInteger(0)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testCountEvictorEvictAfter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
52 [style = filled, label = "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) TypeSerializer<StreamRecord<Tuple2<String,Integer>>> streamRecordSerializer = (TypeSerializer<StreamRecord<Tuple2<String,Integer>>>)new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "final boolean evictAfter = true@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
50 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",8),Long.MAX_VALUE))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ListStateDescriptor<StreamRecord<Tuple2<String,Integer>>> stateDesc = new ListStateDescriptor<>(\"window-contents\",streamRecordSerializer)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",3),initialTime + 10999))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "long initialTime = 0L@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "TypeInformation<Tuple2<String,Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testHarness.open()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3999))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",5),initialTime + 1998))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "ListStateDescriptor<StreamRecord<Tuple2<String,Integer>>> stateDesc = new ListStateDescriptor<>(\"window-contents\",streamRecordSerializer)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",2),Long.MAX_VALUE))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "Assert.assertEquals(\"Close was not called.\",1,closeCalled.get())@@@40@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3000))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "final int THRESHOLD = 2@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testCountEvictorEvictAfter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TypeInformation<Tuple2<String,Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22->18 [style = solid, label="initialTime"];
22->45 [style = solid, label="initialTime"];
0->46 [style = bold, label=""];
32->0 [style = bold, label=""];
17->9 [style = bold, label=""];
15->39 [style = solid, label="closeCalled"];
44->15 [style = bold, label=""];
9->32 [style = solid, label="streamRecordSerializer"];
19->11 [style = bold, label=""];
37->15 [style = bold, label=""];
40->39 [style = solid, label="windowSize"];
31->1 [style = bold, label=""];
27->0 [style = solid, label="TRIGGER_COUNT"];
56->47 [style = bold, label=""];
11->25 [style = solid, label="expectedOutput"];
26->50 [style = dashed, label="0"];
46->4 [style = solid, label="operator"];
55->48 [style = bold, label=""];
22->56 [style = solid, label="initialTime"];
5->49 [style = bold, label=""];
29->8 [style = solid, label="expectedOutput"];
11->13 [style = bold, label=""];
1->12 [style = bold, label=""];
19->31 [style = solid, label="initialTime"];
33->45 [style = bold, label=""];
11->30 [style = solid, label="expectedOutput"];
9->52 [style = bold, label=""];
19->20 [style = solid, label="initialTime"];
55->46 [style = solid, label="EVICT_AFTER"];
29->2 [style = solid, label="expectedOutput"];
34->0 [style = solid, label="WINDOW_SIZE"];
45->41 [style = bold, label=""];
22->54 [style = solid, label="initialTime"];
14->30 [style = bold, label=""];
15->34 [style = bold, label=""];
54->12 [style = bold, label=""];
43->51 [style = bold, label=""];
9->32 [style = bold, label=""];
22->12 [style = solid, label="initialTime"];
20->31 [style = bold, label=""];
16->17 [style = bold, label=""];
19->10 [style = solid, label="initialTime"];
27->16 [style = bold, label=""];
25->2 [style = bold, label=""];
34->40 [style = dashed, label="0"];
29->45 [style = dashed, label="0"];
5->25 [style = bold, label=""];
16->0 [style = solid, label="EVICT_AFTER"];
0->7 [style = bold, label=""];
29->20 [style = bold, label=""];
49->25 [style = bold, label=""];
52->0 [style = bold, label=""];
46->4 [style = bold, label=""];
39->7 [style = bold, label=""];
20->41 [style = dashed, label="0"];
2->21 [style = bold, label=""];
12->33 [style = bold, label=""];
23->10 [style = bold, label=""];
22->31 [style = solid, label="initialTime"];
38->17 [style = bold, label=""];
4->22 [style = bold, label=""];
22->47 [style = solid, label="initialTime"];
6->18 [style = bold, label=""];
38->39 [style = solid, label="evictAfter"];
18->26 [style = bold, label=""];
22->41 [style = solid, label="initialTime"];
22->29 [style = bold, label=""];
36->39 [style = solid, label="triggerCount"];
19->4 [style = solid, label="initialTime"];
19->1 [style = solid, label="initialTime"];
31->42 [style = dashed, label="0"];
32->39 [style = solid, label="stateDesc"];
27->36 [style = dashed, label="0"];
47->50 [style = bold, label=""];
27->55 [style = bold, label=""];
30->3 [style = bold, label=""];
40->36 [style = bold, label=""];
33->24 [style = bold, label=""];
3->8 [style = bold, label=""];
53->8 [style = bold, label=""];
15->40 [style = bold, label=""];
32->39 [style = bold, label=""];
22->42 [style = solid, label="initialTime"];
0->46 [style = dashed, label="0"];
15->46 [style = solid, label="closeCalled"];
7->19 [style = bold, label=""];
31->54 [style = bold, label=""];
21->14 [style = bold, label=""];
42->18 [style = bold, label=""];
0->46 [style = solid, label="stateDesc"];
16->38 [style = dashed, label="0"];
18->47 [style = dashed, label="0"];
28->15 [style = bold, label=""];
35->6 [style = bold, label=""];
24->35 [style = bold, label=""];
26->5 [style = bold, label=""];
39->7 [style = solid, label="operator"];
19->23 [style = solid, label="initialTime"];
32->0 [style = solid, label="stateDesc"];
19->21 [style = solid, label="initialTime"];
48->9 [style = bold, label=""];
8->43 [style = bold, label=""];
19->29 [style = solid, label="initialTime"];
11->35 [style = solid, label="expectedOutput"];
0->39 [style = dashed, label="0"];
5->53 [style = dashed, label="0"];
10->54 [style = dashed, label="0"];
19->22 [style = solid, label="initialTime"];
22->33 [style = solid, label="initialTime"];
18->5 [style = bold, label=""];
48->46 [style = solid, label="THRESHOLD"];
19->6 [style = solid, label="initialTime"];
15->0 [style = solid, label="closeCalled"];
13->23 [style = bold, label=""];
19->18 [style = solid, label="initialTime"];
10->4 [style = bold, label=""];
0->7 [style = solid, label="operator"];
6->56 [style = dashed, label="0"];
36->38 [style = bold, label=""];
2->56 [style = bold, label=""];
16->55 [style = dashed, label="0"];
15->27 [style = bold, label=""];
19->2 [style = solid, label="initialTime"];
27->46 [style = solid, label="TRIGGER_COUNT"];
50->53 [style = bold, label=""];
52->0 [style = solid, label="streamRecordSerializer"];
34->27 [style = bold, label=""];
41->42 [style = bold, label=""];
}
