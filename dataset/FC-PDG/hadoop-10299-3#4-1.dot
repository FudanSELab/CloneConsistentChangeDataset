digraph {
2 [style = filled, label = "ContainerAllocator mockAlloc = mock()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "appMaster.shutDownJob()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "when(fs.delete(any(),anyBoolean())).thenReturn(true)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testDeletionofStaging['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(),0)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "when(fs.exists(stagingDir)).thenReturn(true)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "verify(fs).delete(stagingJobPath,true)@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "JobId jobid = recordFactory.newRecordInstance()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "jobid.setAppId(appId)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "fs = mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(true,((TestMRApp)appMaster).getTestIsLastAMRetry())@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId,1)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertTrue(MRJobConfig.DEFAULT_MR_AM_MAX_ATTEMPTS > 1)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertTrue(((TestMRApp)appMaster).getTestIsLastAMRetry())@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "appMaster.init(conf)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "conf.set(MRJobConfig.MAPREDUCE_JOB_DIR,stagingJobDir)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Path stagingDir = MRApps.getStagingAreaDir(conf,user)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "verify(fs,times(1)).delete(stagingJobPath,true)@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testNotPreserveNotPatternMatchedStaging['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(true,((TestMRApp)appMaster).getTestIsLastAMRetry())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testDeletionofStaging['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "String user = UserGroupInformation.getCurrentUser().getShortUserName()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "conf.set(MRJobConfig.PRESERVE_FILES_PATTERN,\"NotMatching\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "MRAppMaster appMaster = new TestMRApp(attemptId,mockAlloc,JobStateInternal.RUNNING,MRJobConfig.DEFAULT_MR_AM_MAX_ATTEMPTS)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "appMaster.start()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
6->17 [style = bold, label=""];
8->10 [style = bold, label=""];
7->11 [style = bold, label=""];
15->14 [style = bold, label=""];
5->23 [style = dashed, label="0"];
17->9 [style = bold, label=""];
7->11 [style = solid, label="appId"];
22->9 [style = bold, label=""];
3->24 [style = dashed, label="0"];
11->12 [style = bold, label=""];
12->16 [style = bold, label=""];
1->0 [style = bold, label=""];
20->3 [style = bold, label=""];
19->17 [style = bold, label=""];
16->2 [style = bold, label=""];
17->22 [style = bold, label=""];
0->15 [style = bold, label=""];
13->1 [style = bold, label=""];
4->7 [style = bold, label=""];
5->20 [style = dashed, label="0"];
2->13 [style = bold, label=""];
23->24 [style = bold, label=""];
11->1 [style = solid, label="attemptId"];
9->18 [style = bold, label=""];
14->23 [style = bold, label=""];
10->4 [style = bold, label=""];
7->16 [style = solid, label="appId"];
18->8 [style = bold, label=""];
8->10 [style = solid, label="user"];
2->1 [style = solid, label="mockAlloc"];
21->17 [style = bold, label=""];
14->20 [style = bold, label=""];
14->5 [style = bold, label=""];
}
