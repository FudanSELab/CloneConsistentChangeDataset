digraph {
3 [style = filled, label = "final StringWriter writer = new StringWriter()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(writer.toString(),expectedLog)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "testStreamTaskLogWithNegative['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "testStreamTaskLogWithPositiveOffset['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final int internalOffset = testLog.length() + offset@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "replayAll()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(writer.toString(),testLog.substring(testLog.length() - 3))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "final int offset = -3@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "final Optional<ByteSource> byteSource = googleTaskLogs.streamTaskLog(TASKID,offset)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "verifyAll()@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final Optional<ByteSource> byteSource = googleTaskLogs.streamTaskLog(TASKID,5)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final String logPath = PREFIX + \"/\" + TASKID@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final String expectedLog = testLog.substring(internalOffset)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "final Optional<ByteSource> byteSource = googleTaskLogs.streamTaskLog(TASKID,-3)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(writer.toString(),testLog.substring(5))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final String testLog = \"hello this is a log\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "EasyMock.expect(storage.exists(BUCKET,logPath)).andReturn(true)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "IOUtils.copy(byteSource.get().openStream(),writer,\"UTF-8\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "EasyMock.expect(storage.get(BUCKET,logPath)).andReturn(new ByteArrayInputStream(StringUtils.toUtf8(testLog)))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EasyMock.expect(storage.size(BUCKET,logPath)).andReturn((long)testLog.length())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "EasyMock.expect(storage.get(BUCKET,logPath,internalOffset)).andReturn(new ByteArrayInputStream(StringUtils.toUtf8(expectedLog)))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "testStreamTaskLogWithNegative['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5->13 [style = dashed, label="0"];
5->3 [style = bold, label=""];
6->17 [style = bold, label=""];
11->16 [style = bold, label=""];
10->15 [style = dashed, label="0"];
16->0 [style = bold, label=""];
7->11 [style = bold, label=""];
0->13 [style = bold, label=""];
12->14 [style = solid, label="internalOffset"];
10->19 [style = dashed, label="0"];
17->12 [style = solid, label="offset"];
3->9 [style = solid, label="writer"];
0->21 [style = bold, label=""];
20->6 [style = bold, label=""];
9->10 [style = bold, label=""];
14->15 [style = solid, label="expectedLog"];
6->2 [style = solid, label="testLog"];
21->3 [style = bold, label=""];
11->2 [style = bold, label=""];
4->7 [style = bold, label=""];
19->8 [style = bold, label=""];
3->9 [style = bold, label=""];
6->4 [style = bold, label=""];
2->0 [style = bold, label=""];
1->6 [style = bold, label=""];
17->12 [style = bold, label=""];
17->13 [style = solid, label="offset"];
14->16 [style = solid, label="expectedLog"];
10->8 [style = bold, label=""];
13->3 [style = bold, label=""];
18->6 [style = bold, label=""];
9->15 [style = bold, label=""];
2->16 [style = dashed, label="0"];
12->14 [style = bold, label=""];
5->21 [style = dashed, label="0"];
9->19 [style = bold, label=""];
15->8 [style = bold, label=""];
0->5 [style = bold, label=""];
14->4 [style = bold, label=""];
}
