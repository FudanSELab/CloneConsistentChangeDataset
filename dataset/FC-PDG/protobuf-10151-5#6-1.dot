digraph {
46 [style = filled, label = "assertThat(builder.getInt32ToInt32Field()).isEqualTo(newMap(1,2))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "UnsupportedOperationException e@@@35@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "intMap.put(2,3)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "{}@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "{}@@@47@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
64 [style = filled, label = "UnsupportedOperationException e@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "assertWithMessage(\"expected exception\").fail()@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "assertEquals(newMap(1,2),builder.getInt32ToInt32Field())@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "{}@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(newMap(1,TestMap.EnumValue.BAR,2,TestMap.EnumValue.FOO),builder.getInt32ToEnumField())@@@27@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "{}@@@47@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(newMap(1,2),builder.build().getInt32ToInt32Field())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "UnsupportedOperationException e@@@23@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertEquals(newMap(1,\"1\"),builder.build().getInt32ToStringField())@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(newMap(1,TestMap.MessageValue.getDefaultInstance()),builder.build().getInt32ToMessageField())@@@42@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "assertThat(builder.getInt32ToEnumField()).isEqualTo(newMap(1,TestMap.EnumValue.BAR))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "builder.getMutableInt32ToEnumField().put(2,TestMap.EnumValue.FOO)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Map<Integer,TestMap.EnumValue> enumMap = builder.getMutableInt32ToEnumField()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "builder.getMutableInt32ToInt32Field().put(2,3)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertEquals(newMap(1,TestMap.EnumValue.BAR),builder.build().getInt32ToEnumField())@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(newMap(1,TestMap.MessageValue.getDefaultInstance(),2,TestMap.MessageValue.getDefaultInstance()),builder.getInt32ToMessageField())@@@51@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "{}@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertThat(builder.getInt32ToStringField()).isEqualTo(newMap(1,\"1\"))@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
67 [style = filled, label = "testMutableMapLifecycle['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "builder.putInt32ToMessageField(2,TestMap.MessageValue.getDefaultInstance())@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "intMap.put(1,2)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Map<Integer,Integer> intMap = builder.getMutableInt32ToInt32Field()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "TestMap.Builder builder = TestMap.newBuilder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertThat(builder.getInt32ToMessageField()).isEqualTo(newMap(1,TestMap.MessageValue.getDefaultInstance()))@@@49@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "enumMap.put(1,TestMap.EnumValue.BAR)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertWithMessage(\"expected exception\").fail()@@@45@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "{}@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "UnsupportedOperationException e@@@23@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "assertThat(builder.getInt32ToStringField()).isEqualTo(newMap(1,\"1\",2,\"2\"))@@@39@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "messageMap.put(1,TestMap.MessageValue.getDefaultInstance())@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertThat(builder.build().getInt32ToInt32Field()).isEqualTo(newMap(1,2))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "messageMap.put(2,TestMap.MessageValue.getDefaultInstance())@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "assertThat(builder.build().getInt32ToMessageField()).isEqualTo(newMap(1,TestMap.MessageValue.getDefaultInstance()))@@@42@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "Map<Integer,String> stringMap = builder.getMutableInt32ToStringField()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "builder.putInt32ToStringField(2,\"2\")@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Map<Integer,TestMap.MessageValue> messageMap = builder.getMutableInt32ToMessageField()@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertThat(builder.getInt32ToEnumField()).isEqualTo(newMap(1,TestMap.EnumValue.BAR,2,TestMap.EnumValue.FOO))@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
66 [style = filled, label = "UnsupportedOperationException e@@@47@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "UnsupportedOperationException e@@@35@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "assertThat(builder.build().getInt32ToStringField()).isEqualTo(newMap(1,\"1\"))@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "assertEquals(newMap(1,\"1\",2,\"2\"),builder.getInt32ToStringField())@@@39@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "{}@@@23@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "enumMap.put(2,TestMap.EnumValue.FOO)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(newMap(1,2,2,3),builder.getInt32ToInt32Field())@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(newMap(1,TestMap.EnumValue.BAR),builder.getInt32ToEnumField())@@@25@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertThat(builder.getInt32ToInt32Field()).isEqualTo(newMap(1,2,2,3))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "fail()@@@45@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "testMutableMapLifecycle['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "fail()@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "UnsupportedOperationException e@@@11@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "assertEquals(newMap(1,TestMap.MessageValue.getDefaultInstance()),builder.getInt32ToMessageField())@@@49@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "stringMap.put(1,\"1\")@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "builder.getMutableInt32ToMessageField().put(2,TestMap.MessageValue.getDefaultInstance())@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "builder.getMutableInt32ToStringField().put(2,\"2\")@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "{}@@@35@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "fail()@@@33@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testMutableMapLifecycle['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "assertThat(builder.getInt32ToMessageField()).isEqualTo(newMap(1,TestMap.MessageValue.getDefaultInstance(),2,TestMap.MessageValue.getDefaultInstance()))@@@51@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "UnsupportedOperationException e@@@11@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "fail()@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "assertThat(builder.build().getInt32ToEnumField()).isEqualTo(newMap(1,TestMap.EnumValue.BAR))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "assertWithMessage(\"expected exception\").fail()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "stringMap.put(2,\"2\")@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(newMap(1,\"1\"),builder.getInt32ToStringField())@@@37@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertWithMessage(\"expected exception\").fail()@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13->56 [style = dashed, label="0"];
37->46 [style = dashed, label="0"];
32->37 [style = bold, label=""];
34->20 [style = bold, label=""];
44->35 [style = bold, label=""];
12->65 [style = dashed, label="0"];
28->62 [style = bold, label=""];
63->36 [style = bold, label=""];
13->1 [style = bold, label=""];
56->47 [style = bold, label=""];
24->42 [style = dashed, label="0"];
61->25 [style = bold, label=""];
0->52 [style = bold, label=""];
12->40 [style = bold, label=""];
28->4 [style = bold, label=""];
55->23 [style = bold, label=""];
35->37 [style = bold, label=""];
8->51 [style = dashed, label="0"];
27->7 [style = bold, label=""];
1->12 [style = bold, label=""];
69->26 [style = bold, label=""];
4->36 [style = bold, label=""];
2->24 [style = bold, label=""];
27->60 [style = bold, label=""];
17->21 [style = bold, label=""];
9->39 [style = bold, label=""];
36->62 [style = dashed, label="0"];
16->56 [style = bold, label=""];
8->18 [style = bold, label=""];
31->5 [style = bold, label=""];
26->1 [style = bold, label=""];
26->47 [style = bold, label=""];
54->62 [style = bold, label=""];
59->34 [style = bold, label=""];
30->34 [style = bold, label=""];
42->31 [style = bold, label=""];
2->50 [style = dashed, label="0"];
64->35 [style = bold, label=""];
33->23 [style = bold, label=""];
43->11 [style = bold, label=""];
7->24 [style = bold, label=""];
28->63 [style = bold, label=""];
31->57 [style = bold, label=""];
21->11 [style = bold, label=""];
1->47 [style = dashed, label="0"];
49->46 [style = bold, label=""];
19->48 [style = dashed, label="0"];
38->0 [style = bold, label=""];
18->9 [style = bold, label=""];
51->18 [style = bold, label=""];
46->14 [style = bold, label=""];
14->8 [style = bold, label=""];
39->25 [style = bold, label=""];
19->38 [style = bold, label=""];
40->29 [style = bold, label=""];
65->40 [style = bold, label=""];
16->13 [style = bold, label=""];
3->1 [style = bold, label=""];
25->41 [style = bold, label=""];
26->3 [style = bold, label=""];
33->55 [style = dashed, label="0"];
24->68 [style = bold, label=""];
5->57 [style = dashed, label="0"];
11->32 [style = bold, label=""];
15->19 [style = bold, label=""];
6->52 [style = dashed, label="0"];
17->43 [style = bold, label=""];
41->36 [style = bold, label=""];
52->16 [style = bold, label=""];
50->42 [style = bold, label=""];
24->31 [style = bold, label=""];
32->49 [style = dashed, label="0"];
15->48 [style = bold, label=""];
29->10 [style = bold, label=""];
27->24 [style = bold, label=""];
10->33 [style = bold, label=""];
23->2 [style = bold, label=""];
62->15 [style = bold, label=""];
1->65 [style = bold, label=""];
22->35 [style = bold, label=""];
60->42 [style = bold, label=""];
25->54 [style = bold, label=""];
11->49 [style = bold, label=""];
53->28 [style = bold, label=""];
23->50 [style = bold, label=""];
21->43 [style = dashed, label="0"];
20->17 [style = bold, label=""];
0->6 [style = bold, label=""];
47->12 [style = bold, label=""];
36->15 [style = bold, label=""];
14->51 [style = bold, label=""];
41->54 [style = dashed, label="0"];
10->55 [style = bold, label=""];
9->61 [style = bold, label=""];
37->14 [style = bold, label=""];
68->5 [style = bold, label=""];
66->27 [style = bold, label=""];
48->38 [style = bold, label=""];
39->61 [style = dashed, label="0"];
58->29 [style = bold, label=""];
6->16 [style = bold, label=""];
40->58 [style = dashed, label="0"];
45->26 [style = bold, label=""];
31->68 [style = dashed, label="0"];
67->34 [style = bold, label=""];
12->58 [style = bold, label=""];
35->46 [style = bold, label=""];
}
