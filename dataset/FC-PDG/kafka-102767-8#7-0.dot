digraph {
26 [style = filled, label = "final KStream<String,String> textLines = builder.stream(DEFAULT_INPUT_TOPIC)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(LogConfig.Compact(),changelogProps.getProperty(LogConfig.CleanupPolicyProp()))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(5,repartitionProps.size())@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "StreamsBuilder builder = new StreamsBuilder()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "final String appID = APP_ID + \"-compact-delete\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(policies.contains(LogConfig.Compact()))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final KafkaStreams streams = new KafkaStreams(builder.build(),streamsProp)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "shouldCompactTopicsForKeyValueStoreChangelogs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(2,policies.size())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "streams.close()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(5,repartitionProps.size())@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "produceData(Arrays.asList(\"hello\",\"world\",\"world\",\"hello world\"))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final KStream<String,String> textLines = builder.stream(DEFAULT_INPUT_TOPIC)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG,appID)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID,\"Counts\"))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "KStream<String,String> textLines = builder.stream(DEFAULT_INPUT_TOPIC)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "shouldCompactAndDeleteTopicsForWindowStoreChangelogs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID,\"CountWindows\"))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "waitForCompletion(streams,2,5000)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final KafkaStreams streams = new KafkaStreams(builder.build(),streamsProp)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "textLines.flatMapValues(new ValueMapper<String,Iterable<String>>(){@Override public Iterable<String> apply(final String value){return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\W+\"))}}).groupBy(MockMapper.selectValueMapper()).count(Materialized.as(\"Counts\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(LogConfig.Delete(),repartitionProps.getProperty(LogConfig.CleanupPolicyProp()))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final long retention = TimeUnit.MILLISECONDS.convert(1,TimeUnit.DAYS) + durationMs@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "textLines.flatMapValues(new ValueMapper<String,Iterable<String>>(){@Override public Iterable<String> apply(final String value){return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\W+\"))}}).groupBy(MockMapper.selectValueMapper()).windowedBy(TimeWindows.of(1000).until(2000)).count(Materialized.as(\"CountWindows\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(LogConfig.Delete(),repartitionProps.getProperty(LogConfig.CleanupPolicyProp()))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(retention,Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\")@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "final StreamsBuilder builder = new StreamsBuilder()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertTrue(policies.contains(LogConfig.Delete()))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final String appID = APP_ID + \"-compact\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final StreamsBuilder builder = new StreamsBuilder()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "shouldCompactAndDeleteTopicsForWindowStoreChangelogs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "final int durationMs = 2000@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "streams.start()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "KafkaStreams streams = new KafkaStreams(builder.build(),streamsProp)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19->18 [style = bold, label=""];
32->7 [style = solid, label="streams"];
20->29 [style = bold, label=""];
7->10 [style = bold, label=""];
35->20 [style = bold, label=""];
25->23 [style = bold, label=""];
35->20 [style = solid, label="appID"];
11->21 [style = bold, label=""];
18->20 [style = solid, label="appID"];
23->15 [style = bold, label=""];
5->24 [style = dashed, label="0"];
32->34 [style = bold, label=""];
21->3 [style = bold, label=""];
20->25 [style = bold, label=""];
13->23 [style = dashed, label="0"];
13->26 [style = dashed, label="0"];
4->33 [style = dashed, label="0"];
18->35 [style = dashed, label="0"];
28->32 [style = bold, label=""];
2->13 [style = bold, label=""];
20->2 [style = bold, label=""];
29->26 [style = bold, label=""];
8->17 [style = bold, label=""];
3->9 [style = bold, label=""];
5->32 [style = dashed, label="0"];
18->20 [style = bold, label=""];
24->10 [style = solid, label="streams"];
22->18 [style = bold, label=""];
5->6 [style = bold, label=""];
10->16 [style = bold, label=""];
31->27 [style = bold, label=""];
16->33 [style = bold, label=""];
30->31 [style = bold, label=""];
12->8 [style = bold, label=""];
35->16 [style = solid, label="appID"];
15->0 [style = bold, label=""];
0->24 [style = bold, label=""];
34->6 [style = bold, label=""];
2->29 [style = dashed, label="0"];
2->25 [style = dashed, label="0"];
1->12 [style = bold, label=""];
33->30 [style = bold, label=""];
18->14 [style = solid, label="appID"];
16->14 [style = bold, label=""];
17->11 [style = solid, label="retention"];
5->10 [style = solid, label="streams"];
4->1 [style = bold, label=""];
15->17 [style = solid, label="durationMs"];
13->15 [style = bold, label=""];
26->28 [style = bold, label=""];
14->16 [style = dashed, label="0"];
36->35 [style = bold, label=""];
6->7 [style = bold, label=""];
24->6 [style = bold, label=""];
18->21 [style = solid, label="appID"];
35->30 [style = solid, label="appID"];
0->5 [style = bold, label=""];
14->4 [style = bold, label=""];
17->11 [style = bold, label=""];
}
