digraph {
13 [style = filled, label = "AbstractKeyedStateBackend<?> keyedStateBackend = stateContext.keyedStateBackend()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "MemoryStateBackend stateBackend = spy(new MemoryStateBackend(1024))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "TypeSerializer<?> typeSerializer = new IntSerializer()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "StateBackend mockingBackend = spy(new StateBackend(){@Override public CompletedCheckpointStorageLocation resolveCheckpoint(String pointer){throw new UnsupportedOperationException()}@Override public CheckpointStorage createCheckpointStorage(JobID jobId){throw new UnsupportedOperationException()}@Override public AbstractKeyedStateBackend<K> createKeyedStateBackend(Environment env,JobID jobID,String operatorIdentifier,TypeSerializer<K> keySerializer,int numberOfKeyGroups,KeyGroupRange keyGroupRange,TaskKvStateRegistry kvStateRegistry){return mock()}@Override public OperatorStateBackend createOperatorStateBackend(Environment env,String operatorIdentifier){return mock()}})@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "when(streamOperator.getOperatorID()).thenReturn(operatorID)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertNull(timeServiceManager)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "CloseableRegistry closeableRegistry = new CloseableRegistry()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertNotNull(keyedStateBackend)@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "OperatorStateBackend operatorStateBackend = stateContext.operatorStateBackend()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertNotNull(operatorStateBackend)@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "AbstractStreamOperator<?> streamOperator = mock()@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "StreamOperatorStateContext stateContext = streamTaskStateManager.streamOperatorStateContext(streamOperator.getOperatorID(),streamOperator.getClass().getSimpleName(),streamOperator,typeSerializer,closeableRegistry)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "StreamOperatorStateContext stateContext = streamTaskStateManager.streamOperatorStateContext(streamOperator.getOperatorID(),streamOperator.getClass().getSimpleName(),streamOperator,typeSerializer,closeableRegistry)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "checkCloseablesRegistered(closeableRegistry,operatorStateBackend,keyedStateBackend,keyedStateInputs,operatorStateInputs)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "InternalTimeServiceManager<?,?> timeServiceManager = stateContext.internalTimerServiceManager()@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "Random random = new Random(0x42)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertFalse(operatorStateInputs.iterator().hasNext())@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "when(streamOperator.getOperatorID()).thenReturn(operatorID)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "CloseableIterable<KeyGroupStatePartitionStreamProvider> keyedStateInputs = stateContext.rawKeyedStateInputs()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Assert.assertNotNull(operatorStateInputs)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "CloseableIterable<KeyGroupStatePartitionStreamProvider> keyedStateInputs = stateContext.rawKeyedStateInputs()@@@39@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "StreamTaskStateInitializer streamTaskStateManager = streamTaskStateManager(stateBackend,null,true)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "count = 0@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "verify(operatorStateBackend).restore(eq(operatorSubtaskState.getManagedOperatorState()))@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(1,count)@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "OperatorStateBackend operatorStateBackend = stateContext.operatorStateBackend()@@@36@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "StreamTaskStateInitializer streamTaskStateManager = streamTaskStateManager(mockingBackend,jobManagerTaskRestore,false)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testNoRestore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "AbstractStreamOperator<?> streamOperator = mock()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "CloseableIterable<StatePartitionStreamProvider> operatorStateInputs = stateContext.rawOperatorStateInputs()@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "JobManagerTaskRestore jobManagerTaskRestore = new JobManagerTaskRestore(0L,taskStateSnapshot)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "testWithRestore['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "++count@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "checkCloseablesRegistered(closeableRegistry,operatorStateBackend,keyedStateBackend,keyedStateInputs,operatorStateInputs)@@@59@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "InternalTimeServiceManager<?,?> timeServiceManager = stateContext.internalTimerServiceManager()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "verify(mockingBackend).createOperatorStateBackend(any(),any())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "OperatorSubtaskState operatorSubtaskState = new OperatorSubtaskState(new OperatorStateHandle(Collections.singletonMap(\"a\",new OperatorStateHandle.StateMetaInfo(new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bc3c0a,OperatorStateHandle.Mode.SPLIT_DISTRIBUTE)),CheckpointTestUtils.createDummyStreamStateHandle(random)),new OperatorStateHandle(Collections.singletonMap(\"_default_\",new OperatorStateHandle.StateMetaInfo(new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bc3c20,OperatorStateHandle.Mode.SPLIT_DISTRIBUTE)),CheckpointTestUtils.createDummyStreamStateHandle(random)),CheckpointTestUtils.createDummyKeyGroupStateHandle(random),CheckpointTestUtils.createDummyKeyGroupStateHandle(random))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "OperatorID operatorID = new OperatorID(47L,11L)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "CloseableRegistry closeableRegistry = new CloseableRegistry()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "CloseableIterable<StatePartitionStreamProvider> operatorStateInputs = stateContext.rawOperatorStateInputs()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertNotNull(keyedStateInputs)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "OperatorID operatorID = new OperatorID(47L,11L)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "int count = 0@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "verify(mockingBackend).createKeyedStateBackend(any(),any(),any(),eq(typeSerializer),anyInt(),any(),any())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "++count@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "AbstractKeyedStateBackend<?> keyedStateBackend = stateContext.keyedStateBackend()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "TypeSerializer<?> typeSerializer = new IntSerializer()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(3,count)@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "TaskStateSnapshot taskStateSnapshot = new TaskStateSnapshot()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "verify(keyedStateBackend).restore(eq(operatorSubtaskState.getManagedKeyedState()))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testNoRestore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(true,stateContext.isRestored())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertFalse(keyedStateInputs.iterator().hasNext())@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "verify(stateBackend).createKeyedStateBackend(any(),any(),any(),eq(typeSerializer),anyInt(),any(),any())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
48 [style = filled, label = "taskStateSnapshot.putSubtaskStateByOperatorID(operatorID,operatorSubtaskState)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "verify(stateBackend).createOperatorStateBackend(any(),any())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8->16 [style = bold, label=""];
18->3 [style = bold, label=""];
37->28 [style = bold, label=""];
4->15 [style = bold, label=""];
22->54 [style = solid, label="typeSerializer"];
38->31 [style = bold, label=""];
1->13 [style = bold, label=""];
36->55 [style = bold, label=""];
21->53 [style = solid, label="keyedStateInputs"];
44->46 [style = bold, label=""];
52->47 [style = bold, label=""];
28->21 [style = bold, label=""];
15->19 [style = solid, label="operatorID"];
22->42 [style = dashed, label="0"];
45->43 [style = bold, label=""];
13->19 [style = solid, label="keyedStateBackend"];
29->49 [style = solid, label="operatorStateInputs"];
24->17 [style = bold, label=""];
21->34 [style = solid, label="keyedStateInputs"];
9->24 [style = bold, label=""];
16->39 [style = dashed, label="0"];
17->20 [style = bold, label=""];
5->10 [style = bold, label=""];
48->41 [style = bold, label=""];
51->23 [style = bold, label=""];
11->53 [style = solid, label="closeableRegistry"];
3->0 [style = bold, label=""];
2->7 [style = solid, label="streamOperator"];
37->53 [style = solid, label="keyedStateBackend"];
45->43 [style = solid, label="random"];
23->37 [style = bold, label=""];
21->29 [style = bold, label=""];
28->42 [style = solid, label="timeServiceManager"];
29->32 [style = bold, label=""];
13->5 [style = bold, label=""];
43->48 [style = solid, label="operatorSubtaskState"];
13->12 [style = solid, label="keyedStateBackend"];
11->7 [style = solid, label="closeableRegistry"];
55->33 [style = solid, label="count"];
19->22 [style = bold, label=""];
24->6 [style = solid, label="typeSerializer"];
22->11 [style = bold, label=""];
47->36 [style = bold, label=""];
0->20 [style = solid, label="streamOperator"];
27->26 [style = bold, label=""];
29->53 [style = solid, label="operatorStateInputs"];
16->18 [style = bold, label=""];
37->31 [style = solid, label="keyedStateBackend"];
34->49 [style = bold, label=""];
49->44 [style = bold, label=""];
35->2 [style = bold, label=""];
15->32 [style = dashed, label="0"];
20->1 [style = bold, label=""];
23->26 [style = dashed, label="0"];
25->16 [style = bold, label=""];
7->54 [style = bold, label=""];
23->53 [style = solid, label="operatorStateBackend"];
40->41 [style = solid, label="taskStateSnapshot"];
31->42 [style = bold, label=""];
1->12 [style = solid, label="operatorStateBackend"];
52->36 [style = solid, label="count"];
17->20 [style = solid, label="closeableRegistry"];
15->40 [style = bold, label=""];
4->12 [style = solid, label="operatorStateInputs"];
55->50 [style = bold, label=""];
50->33 [style = bold, label=""];
3->9 [style = solid, label="operatorID"];
12->27 [style = bold, label=""];
6->54 [style = dashed, label="0"];
41->35 [style = bold, label=""];
54->51 [style = bold, label=""];
1->2 [style = solid, label="operatorStateBackend"];
10->11 [style = solid, label="keyedStateInputs"];
42->34 [style = bold, label=""];
0->9 [style = bold, label=""];
15->2 [style = bold, label=""];
39->35 [style = solid, label="mockingBackend"];
5->22 [style = solid, label="timeServiceManager"];
2->19 [style = bold, label=""];
4->7 [style = solid, label="operatorStateInputs"];
39->15 [style = bold, label=""];
7->12 [style = bold, label=""];
16->18 [style = solid, label="stateBackend"];
43->48 [style = bold, label=""];
17->12 [style = solid, label="closeableRegistry"];
14->51 [style = dashed, label="0"];
22->7 [style = solid, label="typeSerializer"];
20->6 [style = bold, label=""];
46->52 [style = bold, label=""];
33->53 [style = bold, label=""];
14->1 [style = bold, label=""];
6->14 [style = bold, label=""];
32->38 [style = bold, label=""];
23->38 [style = solid, label="operatorStateBackend"];
24->20 [style = solid, label="typeSerializer"];
23->21 [style = bold, label=""];
10->12 [style = solid, label="keyedStateInputs"];
41->35 [style = solid, label="jobManagerTaskRestore"];
10->4 [style = bold, label=""];
30->39 [style = bold, label=""];
12->23 [style = bold, label=""];
40->45 [style = bold, label=""];
15->48 [style = solid, label="operatorID"];
11->7 [style = bold, label=""];
}
