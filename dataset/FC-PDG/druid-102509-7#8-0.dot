digraph {
52 [style = filled, label = "intermediateHandoffPeriod = new Period().withSeconds(0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final KafkaPartitions startPartitions = new KafkaPartitions(topic,ImmutableMap.of(0,0L,1,0L))@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "kafkaProducer.send(record).get()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@47@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "testIncrementalHandOff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
64 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,true,null,null,false))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "final KafkaPartitions endPartitions = new KafkaPartitions(topic,ImmutableMap.of(0,10L,1,2L))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "final KafkaPartitions endPartitions = new KafkaPartitions(topic,ImmutableMap.of(0,2L,1,0L))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "final KafkaPartitions checkpoint = new KafkaPartitions(topic,ImmutableMap.of(0,1L,1,0L))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "SegmentDescriptor desc6 = SD(task,\"2012/P1D\",0)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "SegmentDescriptor desc7 = SD(task,\"2013/P1D\",0)@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final KafkaPartitions checkpoint2 = new KafkaPartitions(topic,ImmutableMap.of(0,4L,1,2L))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionSequenceNumberMap().equals(currentOffsets) || checkpoint2.getPartitionSequenceNumberMap().equals(currentOffsets))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)))))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new KafkaPartitions(topic,ImmutableMap.of(0,2L,1,0L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new KafkaPartitions(topic,checkpoint.getPartitionOffsetMap())))))@@@29@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "kafkaProducer.send(record).get()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@21@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new KafkaPartitions(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@41@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "SegmentDescriptor desc4 = SD(task,\"2011/P1D\",0)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testIncrementalHandOff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Thread.sleep(10)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint2 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,4L,1,2L))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Assert.assertTrue(checkpoint.getPartitionOffsetMap().equals(currentOffsets))@@@25@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "maxRowsPerSegment = 2@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "SegmentDescriptor desc5 = SD(task,\"2011/P1D\",1)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint1 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L,1,0L))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,true,null,null,false))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
60 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,true,null,null,false))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Assert.assertEquals(2,task.getRunner().getRowIngestionMeters().getProcessed())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "testTimeBasedIncrementalHandOff['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "task.getRunner().getStatus() != KafkaIndexTask.Status.PAUSED@@@21@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@38@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6->57 [style = bold, label=""];
2->22 [style = dotted, label="true"];
3->24 [style = bold, label=""];
5->20 [style = bold, label=""];
9->6 [style = solid, label="startPartitions"];
21->28 [style = solid, label="desc6"];
49->14 [style = bold, label=""];
53->63 [style = bold, label=""];
29->0 [style = bold, label=""];
63->58 [style = solid, label="desc1"];
60->53 [style = bold, label=""];
63->20 [style = bold, label=""];
49->35 [style = solid, label="task"];
49->38 [style = solid, label="task"];
7->40 [style = solid, label="currentOffsets"];
0->15 [style = bold, label=""];
26->11 [style = bold, label=""];
13->1 [style = bold, label=""];
45->7 [style = bold, label=""];
61->64 [style = bold, label=""];
19->38 [style = solid, label="task"];
19->21 [style = solid, label="task"];
15->49 [style = solid, label="consumerProps"];
5->28 [style = solid, label="desc1"];
9->41 [style = dashed, label="0"];
40->31 [style = bold, label=""];
7->31 [style = solid, label="currentOffsets"];
27->5 [style = bold, label=""];
28->42 [style = bold, label=""];
21->35 [style = bold, label=""];
24->47 [style = dashed, label="0"];
20->28 [style = solid, label="desc2"];
26->57 [style = dashed, label="0"];
1->38 [style = bold, label=""];
44->2 [style = bold, label=""];
8->34 [style = bold, label=""];
3->54 [style = dashed, label="0"];
48->49 [style = bold, label=""];
47->48 [style = bold, label=""];
23->64 [style = solid, label="consumerProps"];
39->8 [style = bold, label=""];
20->13 [style = solid, label="desc2"];
14->10 [style = bold, label=""];
20->55 [style = solid, label="desc2"];
31->4 [style = bold, label=""];
57->60 [style = bold, label=""];
49->14 [style = solid, label="task"];
49->21 [style = solid, label="task"];
35->28 [style = solid, label="desc7"];
64->14 [style = solid, label="task"];
24->61 [style = dashed, label="0"];
63->13 [style = solid, label="desc1"];
27->53 [style = dashed, label="0"];
10->7 [style = bold, label=""];
25->2 [style = bold, label=""];
12->51 [style = bold, label=""];
7->6 [style = solid, label="currentOffsets"];
35->28 [style = bold, label=""];
3->54 [style = bold, label=""];
61->64 [style = solid, label="endPartitions"];
12->29 [style = bold, label=""];
43->47 [style = bold, label=""];
37->46 [style = bold, label=""];
13->28 [style = solid, label="desc3"];
12->64 [style = solid, label="baseSequenceName"];
3->64 [style = solid, label="startPartitions"];
49->1 [style = solid, label="task"];
1->28 [style = solid, label="desc4"];
56->23 [style = bold, label=""];
29->51 [style = dashed, label="0"];
21->8 [style = solid, label="desc6"];
64->14 [style = bold, label=""];
54->61 [style = bold, label=""];
41->43 [style = bold, label=""];
10->45 [style = dashed, label="0"];
19->20 [style = solid, label="task"];
1->39 [style = solid, label="desc4"];
38->39 [style = solid, label="desc5"];
12->19 [style = solid, label="baseSequenceName"];
16->18 [style = bold, label=""];
6->26 [style = bold, label=""];
7->17 [style = bold, label=""];
20->13 [style = bold, label=""];
33->48 [style = dashed, label="0"];
13->62 [style = bold, label=""];
45->36 [style = bold, label=""];
19->1 [style = solid, label="task"];
3->6 [style = solid, label="startPartitions"];
11->60 [style = dashed, label="0"];
50->4 [style = bold, label=""];
12->49 [style = solid, label="baseSequenceName"];
23->41 [style = bold, label=""];
51->52 [style = bold, label=""];
32->30 [style = bold, label=""];
28->32 [style = bold, label=""];
19->14 [style = solid, label="task"];
24->33 [style = bold, label=""];
17->50 [style = bold, label=""];
19->14 [style = bold, label=""];
41->46 [style = solid, label="startPartitions"];
18->39 [style = bold, label=""];
49->5 [style = solid, label="task"];
19->5 [style = solid, label="task"];
33->19 [style = solid, label="endPartitions"];
64->63 [style = solid, label="task"];
9->3 [style = bold, label=""];
7->50 [style = solid, label="currentOffsets"];
33->19 [style = bold, label=""];
7->40 [style = bold, label=""];
5->30 [style = solid, label="desc1"];
36->10 [style = bold, label=""];
48->49 [style = solid, label="endPartitions"];
35->34 [style = solid, label="desc7"];
15->23 [style = bold, label=""];
13->18 [style = solid, label="desc3"];
17->31 [style = bold, label=""];
62->58 [style = bold, label=""];
52->56 [style = bold, label=""];
58->55 [style = bold, label=""];
7->46 [style = solid, label="currentOffsets"];
14->45 [style = bold, label=""];
37->6 [style = bold, label=""];
38->28 [style = solid, label="desc5"];
2->12 [style = bold, label=""];
10->36 [style = bold, label=""];
19->49 [style = dashed, label="0"];
6->46 [style = dashed, label="0"];
19->13 [style = solid, label="task"];
10->36 [style = dotted, label="true"];
49->13 [style = solid, label="task"];
7->17 [style = solid, label="currentOffsets"];
46->26 [style = bold, label=""];
4->37 [style = bold, label=""];
15->19 [style = solid, label="consumerProps"];
42->30 [style = bold, label=""];
22->12 [style = bold, label=""];
41->49 [style = solid, label="startPartitions"];
3->43 [style = dashed, label="0"];
17->40 [style = dashed, label="0"];
32->42 [style = dashed, label="0"];
64->20 [style = solid, label="task"];
45->36 [style = dotted, label="true"];
59->2 [style = bold, label=""];
38->21 [style = bold, label=""];
49->20 [style = solid, label="task"];
36->45 [style = bold, label=""];
2->22 [style = bold, label=""];
30->16 [style = bold, label=""];
23->9 [style = bold, label=""];
19->35 [style = solid, label="task"];
11->27 [style = bold, label=""];
9->19 [style = solid, label="startPartitions"];
20->16 [style = solid, label="desc2"];
}
