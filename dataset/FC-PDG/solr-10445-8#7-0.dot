digraph {
9 [style = filled, label = "assertEquals(\"node4\",replicas.get(1).getNodeName())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "rlt = generator.getReplicaListTransformer(params)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(\"node4\",replicas.get(2).getNodeName())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(2).getNodeName()))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertEquals(\"node4\",getHost(replicas.get(1).getNodeName()))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertEquals(\"node3\",replicas.get(3).getNodeName())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "ReplicaListTransformer rlt = generator.getReplicaListTransformer(params)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "replicaTypeAndReplicaBase['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "List<Replica> replicas = getBasicReplicaList()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertEquals(\"node2\",replicas.get(2).getNodeName())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(\"node3\",replicas.get(4).getNodeName())@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(\"node1\",replicas.get(0).getNodeName())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "replicas.add(new Replica(\"node4\",map(ZkStateReader.NODE_NAME_PROP,\"node4:8983_solr\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"TLOG\"),\"collection1\",\"shard1\"))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "replicas.add(new Replica(\"node4\",map(ZkStateReader.BASE_URL_PROP,\"http://host2_2:8983/solr\",ZkStateReader.NODE_NAME_PROP,\"node4\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"TLOG\"),\"c1\",\"s1\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(0).getNodeName()))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(\"node3\",replicas.get(3).getNodeName())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "ModifiableSolrParams params = new ModifiableSolrParams()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(\"node1\",replicas.get(0).getNodeName())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(\"node5\",replicas.get(4).getNodeName())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "replicaTypeAndReplicaLocationTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"node2\",replicas.get(2).getNodeName())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "replicaTypeAndReplicaLocationTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "replicas.add(new Replica(\"node5\",map(ZkStateReader.BASE_URL_PROP,\"http://host2_2:8983/solr\",ZkStateReader.NODE_NAME_PROP,\"node5\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"PULL\"),\"c1\",\"s1\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertEquals(\"node4\",replicas.get(1).getNodeName())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertEquals(\"node2\",replicas.get(1).getNodeName())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(\"node5\",replicas.get(3).getNodeName())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\"@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "NodePreferenceRulesComparator comparator = new NodePreferenceRulesComparator(rules,null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "rlt.transform(replicas)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "replicas.sort(comparator)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "replicas.add(new Replica(\"node4\",map(ZkStateReader.BASE_URL_PROP,\"http://host2_2:8983/solr\",ZkStateReader.NODE_NAME_PROP,\"node4\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"TLOG\"),\"collection1\",\"shard1\"))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "rlt.transform(replicas)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "params.set(\"routingPreference\",\"1\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "List<PreferenceRule> rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://node4\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "params.add(\"routingPreference\",\"0\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(\"node1\",replicas.get(0).getNodeName())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "List<Replica> replicas = getBasicReplicaList()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "params.add(ShardParams.SHARDS_PREFERENCE,rulesParam)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"node3\",getHost(replicas.get(3).getNodeName()))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6->3 [style = bold, label=""];
16->10 [style = bold, label=""];
20->26 [style = bold, label=""];
10->7 [style = solid, label="rules"];
0->2 [style = bold, label=""];
25->32 [style = bold, label=""];
1->7 [style = solid, label="rules"];
1->18 [style = bold, label=""];
29->37 [style = bold, label=""];
1->10 [style = dashed, label="0"];
5->18 [style = dashed, label="0"];
9->8 [style = bold, label=""];
7->6 [style = solid, label="comparator"];
1->7 [style = bold, label=""];
10->7 [style = bold, label=""];
22->23 [style = bold, label=""];
6->15 [style = bold, label=""];
8->13 [style = dashed, label="0"];
1->33 [style = solid, label="replicas"];
39->30 [style = bold, label=""];
5->16 [style = dashed, label="0"];
3->9 [style = bold, label=""];
5->1 [style = bold, label=""];
26->27 [style = bold, label=""];
12->2 [style = bold, label=""];
18->29 [style = bold, label=""];
27->39 [style = bold, label=""];
23->33 [style = bold, label=""];
34->24 [style = bold, label=""];
15->11 [style = bold, label=""];
31->35 [style = bold, label=""];
33->25 [style = bold, label=""];
30->31 [style = bold, label=""];
11->13 [style = bold, label=""];
21->1 [style = bold, label=""];
7->6 [style = bold, label=""];
4->34 [style = dashed, label="0"];
38->34 [style = bold, label=""];
21->30 [style = solid, label="params"];
28->17 [style = bold, label=""];
37->22 [style = solid, label="rulesParam"];
3->15 [style = dashed, label="0"];
9->11 [style = dashed, label="0"];
4->14 [style = dashed, label="0"];
37->19 [style = bold, label=""];
36->38 [style = bold, label=""];
8->4 [style = bold, label=""];
35->36 [style = bold, label=""];
21->23 [style = solid, label="params"];
19->22 [style = bold, label=""];
13->14 [style = bold, label=""];
17->21 [style = bold, label=""];
32->20 [style = bold, label=""];
1->31 [style = solid, label="replicas"];
2->5 [style = bold, label=""];
2->16 [style = bold, label=""];
}
