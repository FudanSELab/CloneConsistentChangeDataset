digraph {
9 [style = filled, label = "HoodieHBaseIndexConfig hoodieHBaseIndexConfig@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "return HoodieWriteConfig.newBuilder().withPath(\"/foo\").withSchema(HoodieTestDataGenerator.TRIP_EXAMPLE_SCHEMA).withParallelism(1,1).withCompactionConfig(HoodieCompactionConfig.newBuilder().compactionSmallFileSize(1024 * 1024).withInlineCompaction(false).build()).withAutoCommit(false).withStorageConfig(HoodieStorageConfig.newBuilder().hfileMaxFileSize(1000 * 1024).parquetMaxFileSize(1024 * 1024).build()).forTable(\"test-trip-table\").withIndexConfig(HoodieIndexConfig.newBuilder().withIndexType(HoodieIndex.IndexType.HBASE).withHBaseIndexConfig(hoodieHBaseIndexConfig).build())@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "boolean rollbackSync@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int hbaseIndexBatchSize@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "boolean updatePartitionPath@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "return HoodieWriteConfig.newBuilder().withPath(basePath).withSchema(HoodieTestDataGenerator.TRIP_EXAMPLE_SCHEMA).withParallelism(1,1).withDeleteParallelism(1).withCompactionConfig(HoodieCompactionConfig.newBuilder().compactionSmallFileSize(1024 * 1024).withInlineCompaction(false).build()).withAutoCommit(false).withStorageConfig(HoodieStorageConfig.newBuilder().hfileMaxFileSize(1024 * 1024).parquetMaxFileSize(1024 * 1024).build()).forTable(\"test-trip-table\").withIndexConfig(HoodieIndexConfig.newBuilder().withIndexType(HoodieIndex.IndexType.HBASE).withHBaseIndexConfig(new HoodieHBaseIndexConfig.Builder().hbaseZkPort(Integer.parseInt(hbaseConfig.get(\"hbase.zookeeper.property.clientPort\"))).hbaseIndexPutBatchSizeAutoCompute(true).hbaseZkZnodeParent(hbaseConfig.get(\"zookeeper.znode.parent\",\"\")).hbaseZkQuorum(hbaseConfig.get(\"hbase.zookeeper.quorum\")).hbaseTableName(TABLE_NAME).hbaseIndexUpdatePartitionPath(updatePartitionPath).hbaseIndexRollbackSync(rollbackSync).hbaseIndexGetBatchSize(hbaseIndexBatchSize).build()).build())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "getConfigBuilder['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "getConfigBuilder['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "boolean updatePartitionPath@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "getConfigBuilder['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "boolean rollbackSync@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "return HoodieWriteConfig.newBuilder().withPath(basePath()).withSchema(HoodieTestDataGenerator.TRIP_EXAMPLE_SCHEMA).withParallelism(1,1).withDeleteParallelism(1).withCompactionConfig(HoodieCompactionConfig.newBuilder().compactionSmallFileSize(1024 * 1024).withInlineCompaction(false).build()).withAutoCommit(false).withStorageConfig(HoodieStorageConfig.newBuilder().hfileMaxFileSize(1024 * 1024).parquetMaxFileSize(1024 * 1024).build()).forTable(\"test-trip-table\").withIndexConfig(HoodieIndexConfig.newBuilder().withIndexType(HoodieIndex.IndexType.HBASE).withHBaseIndexConfig(new HoodieHBaseIndexConfig.Builder().hbaseZkPort(Integer.parseInt(hbaseConfig.get(\"hbase.zookeeper.property.clientPort\"))).hbaseIndexPutBatchSizeAutoCompute(true).hbaseZkZnodeParent(hbaseConfig.get(\"zookeeper.znode.parent\",\"\")).hbaseZkQuorum(hbaseConfig.get(\"hbase.zookeeper.quorum\")).hbaseTableName(TABLE_NAME).hbaseIndexUpdatePartitionPath(updatePartitionPath).hbaseIndexRollbackSync(rollbackSync).hbaseIndexGetBatchSize(hbaseIndexBatchSize).build()).build())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11->9 [style = dotted, label="true"];
0->3 [style = dotted, label="true"];
0->2 [style = dotted, label="true"];
4->8 [style = dashed, label="0"];
6->3 [style = dotted, label="true"];
4->10 [style = dashed, label="0"];
3->9 [style = dashed, label="0"];
0->4 [style = bold, label=""];
11->10 [style = bold, label=""];
6->8 [style = bold, label=""];
6->5 [style = dotted, label="true"];
0->1 [style = dotted, label="true"];
6->7 [style = dotted, label="true"];
}
