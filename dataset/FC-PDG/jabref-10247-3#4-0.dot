digraph {
4 [style = filled, label = "List<BibEntry> entries = importer.importDatabase(file,StandardCharsets.UTF_8).getDatabase().getEntries()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testImportSingleEntries['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "n++@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(1,entries.size())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "n <= 7@@@4@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertImportOfMedlineFileEqualsBibtexFile['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "int n = 3@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(1,entries.size())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertNotNull(entries)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "String medlineFile@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "String bibtexFile@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "BibEntryAssert.assertEquals(nis,entries.get(0))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "List<BibEntry> entries = importer.importDatabase(file,StandardCharsets.UTF_8).getDatabase().getEntries()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertNotNull(entries)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testImportSingleEntries['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertNotNull(entries)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "BibEntryAssert.assertEquals(nis,entries.get(0))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(1,entries.size())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Path file = Paths.get(.getResource(medlineFile).toURI())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Path file = Paths.get(.getResource(\"OvidImporterTest\" + n + \".txt\").toURI())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->0 [style = solid, label="n"];
0->3 [style = bold, label=""];
14->16 [style = bold, label=""];
16->13 [style = bold, label=""];
0->5 [style = dotted, label="true"];
14->12 [style = dotted, label="true"];
0->10 [style = dotted, label="true"];
2->6 [style = bold, label=""];
0->4 [style = dotted, label="true"];
18->19 [style = bold, label=""];
7->0 [style = bold, label=""];
1->0 [style = bold, label=""];
7->1 [style = solid, label="n"];
9->7 [style = bold, label=""];
0->6 [style = dotted, label="true"];
3->4 [style = bold, label=""];
10->6 [style = bold, label=""];
4->5 [style = solid, label="entries"];
8->7 [style = bold, label=""];
2->10 [style = dashed, label="0"];
4->11 [style = solid, label="entries"];
6->1 [style = bold, label=""];
13->17 [style = bold, label=""];
5->2 [style = bold, label=""];
14->15 [style = dotted, label="true"];
5->11 [style = dashed, label="0"];
11->10 [style = bold, label=""];
13->17 [style = solid, label="entries"];
2->18 [style = dashed, label="0"];
0->3 [style = dotted, label="true"];
0->2 [style = dotted, label="true"];
4->11 [style = bold, label=""];
0->11 [style = dotted, label="true"];
4->5 [style = bold, label=""];
7->0 [style = solid, label="n"];
17->18 [style = bold, label=""];
0->1 [style = dotted, label="true"];
}
