digraph {
0 [style = filled, label = "DataStream<Tuple3<String,String,Integer>> window = source.keyBy(new TupleKeySelector()).window(TumblingProcessingTimeWindows.of(Time.of(1,TimeUnit.SECONDS))).aggregate(new DummyAggregationFunction(),new TestWindowFunction())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testAggregateWithWindowFunctionProcessingTime['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "Assert.assertTrue(winOperator.getTrigger() instanceof ProcessingTimeTrigger)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "DataStream<String> window = source.keyBy(new Tuple3KeySelector()).window(TumblingProcessingTimeWindows.of(Time.of(1,TimeUnit.SECONDS))).aggregate(new DummyAggregationFunction(),new TestWindowFunction())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "OneInputStreamOperator<Tuple2<String,Integer>,Tuple3<String,String,Integer>> operator = transform.getOperator()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testAggregateWithProcessWindowFunctionProcessingTime['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertTrue(winOperator.getStateDescriptor() instanceof AggregatingStateDescriptor)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertTrue(winOperator.getWindowAssigner() instanceof TumblingProcessingTimeWindows)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "processElementAndEnsureOutput(operator,winOperator.getKeySelector(),BasicTypeInfo.STRING_TYPE_INFO,new Tuple2<>(\"hello\",1))@@@14@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertTrue(operator instanceof WindowOperator)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "DataStream<Tuple2<String,Integer>> source = env.fromElements(Tuple2.of(\"hello\",1),Tuple2.of(\"hello\",2))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final OneInputStreamOperator<Tuple3<String,String,Integer>,String> operator = transform.getOperator()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "processElementAndEnsureOutput(operator,winOperator.getKeySelector(),BasicTypeInfo.STRING_TYPE_INFO,new Tuple3<>(\"hello\",\"hallo\",1))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "WindowOperator<String,Tuple3<String,String,Integer>,?,?,?> winOperator = (WindowOperator<String,Tuple3<String,String,Integer>,?,?,?>)operator@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "OneInputTransformation<Tuple2<String,Integer>,Tuple3<String,String,Integer>> transform = (OneInputTransformation<Tuple2<String,Integer>,Tuple3<String,String,Integer>>)window.getTransformation()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "DataStream<Tuple3<String,String,Integer>> window = source.keyBy(new TupleKeySelector()).window(TumblingProcessingTimeWindows.of(Time.of(1,TimeUnit.SECONDS))).aggregate(new DummyAggregationFunction(),new TestProcessWindowFunction())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "WindowOperator<String,Tuple2<String,Integer>,?,?,?> winOperator = (WindowOperator<String,Tuple2<String,Integer>,?,?,?>)operator@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final OneInputTransformation<Tuple3<String,String,Integer>,String> transform = (OneInputTransformation<Tuple3<String,String,Integer>,String>)window.getTransformation()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testAggregateWithWindowFunctionProcessingTime['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "DataStream<Tuple3<String,String,Integer>> source = env.fromElements(Tuple3.of(\"hello\",\"hallo\",1),Tuple3.of(\"hello\",\"hallo\",2))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11->6 [style = solid, label="operator"];
0->9 [style = bold, label=""];
9->11 [style = bold, label=""];
11->5 [style = solid, label="operator"];
9->18 [style = dashed, label="0"];
18->19 [style = bold, label=""];
4->21 [style = bold, label=""];
3->6 [style = bold, label=""];
7->4 [style = bold, label=""];
20->1 [style = bold, label=""];
11->3 [style = solid, label="operator"];
0->17 [style = dashed, label="0"];
1->7 [style = bold, label=""];
14->1 [style = bold, label=""];
4->0 [style = bold, label=""];
5->16 [style = dashed, label="0"];
12->2 [style = bold, label=""];
15->17 [style = bold, label=""];
21->9 [style = bold, label=""];
19->13 [style = solid, label="operator"];
6->13 [style = dashed, label="0"];
11->3 [style = bold, label=""];
11->19 [style = dashed, label="0"];
0->21 [style = dashed, label="0"];
4->15 [style = dashed, label="0"];
6->8 [style = bold, label=""];
3->13 [style = bold, label=""];
19->3 [style = solid, label="operator"];
7->15 [style = bold, label=""];
19->16 [style = solid, label="operator"];
13->8 [style = bold, label=""];
10->1 [style = bold, label=""];
19->3 [style = bold, label=""];
8->12 [style = bold, label=""];
17->18 [style = bold, label=""];
2->5 [style = bold, label=""];
2->16 [style = bold, label=""];
}
