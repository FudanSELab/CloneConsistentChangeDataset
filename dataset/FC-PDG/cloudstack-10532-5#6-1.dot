digraph {
23 [style = filled, label = "assertFalse(volumeToPoolObjectMap.isEmpty())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Mockito.verify(virtualMachineManagerImpl).createVolumeToStoragePoolMappingIfPossible(virtualMachineProfileMock,dataCenterDeploymentMock,volumeToPoolObjectMap,volumeVoMock,storagePoolVoMock)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Mockito.doNothing().when(virtualMachineManagerImpl).createVolumeToStoragePoolMappingIfPossible(virtualMachineProfileMock,hostMock,volumeToPoolObjectMap,volumeVoMock,storagePoolVoMock)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "allVolumes.add(volumeVoMock)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(volumeToPoolObjectMap.isEmpty())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Mockito.doReturn(ScopeType.CLUSTER).when(storagePoolVoMock).getScope()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "HashMap<Volume,StoragePool> volumeToPoolObjectMap = new HashMap<>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Mockito.doReturn(false).when(virtualMachineManagerImpl).isStorageCrossClusterMigration(hostMock,storagePoolVoMock)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Mockito.verify(virtualMachineManagerImpl).isStorageCrossClusterMigration(hostMockId,storagePoolVoMock)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Mockito.verify(virtualMachineManagerImpl).executeManagedStorageChecksWhenTargetStoragePoolNotProvided(hostMock,storagePoolVoMock,volumeVoMock)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "virtualMachineManagerImpl.createStoragePoolMappingsForVolumes(virtualMachineProfileMock,dataCenterDeploymentMock,volumeToPoolObjectMap,allVolumes)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "virtualMachineManagerImpl.createStoragePoolMappingsForVolumes(virtualMachineProfileMock,hostMock,volumeToPoolObjectMap,allVolumes)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Mockito.doNothing().when(virtualMachineManagerImpl).createVolumeToStoragePoolMappingIfPossible(virtualMachineProfileMock,dataCenterDeploymentMock,volumeToPoolObjectMap,volumeVoMock,storagePoolVoMock)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Mockito.doReturn(true).when(virtualMachineManagerImpl).isStorageCrossClusterMigration(hostMockId,storagePoolVoMock)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "Mockito.verify(virtualMachineManagerImpl,Mockito.times(0)).createVolumeToStoragePoolMappingIfPossible(virtualMachineProfileMock,hostMock,volumeToPoolObjectMap,volumeVoMock,storagePoolVoMock)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Mockito.doNothing().when(virtualMachineManagerImpl).executeManagedStorageChecksWhenTargetStoragePoolNotProvided(hostMock,storagePoolVoMock,volumeVoMock)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(storagePoolVoMock,volumeToPoolObjectMap.get(volumeVoMock))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Mockito.verify(virtualMachineManagerImpl).executeManagedStorageChecksWhenTargetStoragePoolNotProvided(hostMock,storagePoolVoMock,volumeVoMock)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "createStoragePoolMappingsForVolumesTestCrossCluterMigration['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Mockito.verify(virtualMachineManagerImpl).isStorageCrossClusterMigration(hostMock,storagePoolVoMock)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Mockito.verify(virtualMachineManagerImpl).isStorageCrossClusterMigration(hostMock,storagePoolVoMock)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "createStoragePoolMappingsForVolumesTestNotCrossCluterMigrationWithClusterStorage['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Mockito.doReturn(true).when(virtualMachineManagerImpl).isStorageCrossClusterMigration(hostMock,storagePoolVoMock)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "ArrayList<Volume> allVolumes = new ArrayList<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "createStoragePoolMappingsForVolumesTestCrossCluterMigration['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24->12 [style = bold, label=""];
0->18 [style = solid, label="volumeToPoolObjectMap"];
15->13 [style = bold, label=""];
0->13 [style = solid, label="volumeToPoolObjectMap"];
4->17 [style = dashed, label="0"];
9->24 [style = dashed, label="0"];
8->18 [style = bold, label=""];
0->16 [style = solid, label="volumeToPoolObjectMap"];
18->15 [style = bold, label=""];
1->3 [style = bold, label=""];
2->12 [style = solid, label="allVolumes"];
19->10 [style = bold, label=""];
6->24 [style = bold, label=""];
8->6 [style = bold, label=""];
10->21 [style = bold, label=""];
16->17 [style = bold, label=""];
3->16 [style = bold, label=""];
0->22 [style = solid, label="volumeToPoolObjectMap"];
7->8 [style = bold, label=""];
12->1 [style = bold, label=""];
13->1 [style = bold, label=""];
0->7 [style = bold, label=""];
20->2 [style = bold, label=""];
6->18 [style = dashed, label="0"];
3->10 [style = bold, label=""];
5->2 [style = bold, label=""];
11->0 [style = bold, label=""];
0->12 [style = solid, label="volumeToPoolObjectMap"];
0->10 [style = solid, label="volumeToPoolObjectMap"];
21->22 [style = bold, label=""];
0->6 [style = solid, label="volumeToPoolObjectMap"];
23->19 [style = bold, label=""];
10->4 [style = bold, label=""];
14->2 [style = bold, label=""];
12->23 [style = bold, label=""];
9->12 [style = bold, label=""];
12->13 [style = dashed, label="0"];
2->13 [style = solid, label="allVolumes"];
10->16 [style = dashed, label="0"];
6->9 [style = bold, label=""];
1->23 [style = dashed, label="0"];
2->11 [style = bold, label=""];
9->15 [style = dashed, label="0"];
}
