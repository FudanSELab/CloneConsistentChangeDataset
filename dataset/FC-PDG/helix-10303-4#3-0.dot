digraph {
55 [style = filled, label = "testNormalUsage['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "iter.remove()@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsMap(),expectedAssignment)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Set<String> expectedAssignmentSet1 = new HashSet<>(_partitionNames.subList(0,2))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(0)),expectedAssignmentSet1)@@@77@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "expectedCapacityMap.put(\"item2\",18)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "Set<String> expectedTopStateAssignmentSet1 = new HashSet<>(_partitionNames.subList(0,1))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(0)),expectedTopStateAssignmentSet1)@@@79@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(assignableNode.getFaultZone(),_testFaultZoneId)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "expectedAssignment.put(\"Resource1\",expectedAssignmentSet1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxCapacity(),_capacityDataMap)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "expectedCapacityMap.put(\"item1\",4)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "Assert.assertEquals(assignableNode.getDisabledPartitionsMap(),_disabledPartitionsMap)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "assignableNode.assignInitBatch(assignmentSet)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "Assert.assertEquals(assignableNode.getFaultZone(),_testFaultZoneId)@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "iter.hasNext()@@@38@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "AssignableNode assignableNode = new AssignableNode(testCache.getClusterConfig(),testCache.getInstanceConfigMap().get(_testInstanceId),_testInstanceId,Collections.emptyList())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "assignableNode.release(removingReplica)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "AssignableReplica removingReplica = new AssignableReplica(testCache.getResourceConfig(_resourceNames.get(1)),_partitionNames.get(2) + \"non-exist\",\"MASTER\",1)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxPartition(),5)@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "expectedAssignment.get(_resourceNames.get(1)).add(_partitionNames.get(2))@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "AssignableNode assignableNode = new AssignableNode(testCache.getClusterConfig(),testCache.getInstanceConfigMap().get(_testInstanceId),_testInstanceId)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(assignableNode.getInstanceTags(),_testInstanceTags)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assignableNode.assign(addingReplica)@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(assignableNode.getFaultZone(),_testFaultZoneId)@@@73@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "expectedAssignment.put(\"Resource2\",expectedAssignmentSet2)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assignmentSet.add(addingReplica)@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(1)),expectedTopStateAssignmentSet2)@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(1)),expectedTopStateAssignmentSet2)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(0)),expectedAssignmentSet1)@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(1)),expectedAssignmentSet2)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsCount(),expectedTopStateAssignmentSet1.size() + expectedTopStateAssignmentSet2.size())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Assert.assertEquals(assignableNode.getProjectedHighestUtilization(Collections.EMPTY_MAP),11.0 / 20.0,0.005)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(1)),expectedAssignmentSet2)@@@78@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(1)),expectedTopStateAssignmentSet2)@@@80@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(assignableNode.getRemainingCapacity(),expectedCapacityMap)@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicas(),assignmentSet)@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "AssignableReplica replica = iter.next()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "Assert.assertEquals(assignableNode.getDisabledPartitionsMap(),_disabledPartitionsMap)@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "Set<AssignableReplica> assignmentSet = generateReplicas(testCache)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "Assert.assertEquals(assignableNode.getProjectedHighestUtilization(Collections.EMPTY_MAP),16.0 / 20.0,0.005)@@@69@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxPartition(),5)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxPartition(),5)@@@71@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "expectedTopStateAssignmentSet2.remove(_partitionNames.get(2))@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "expectedCapacityMap.put(\"item2\",8)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "AssignableReplica removingReplica = new AssignableReplica(testCache.getClusterConfig(),testCache.getResourceConfig(_resourceNames.get(1)),_partitionNames.get(2),\"MASTER\",1)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsCount(),expectedTopStateAssignmentSet1.size() + expectedTopStateAssignmentSet2.size())@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "expectedAssignment.get(_resourceNames.get(1)).remove(_partitionNames.get(2))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Set<String> expectedTopStateAssignmentSet2 = new HashSet<>(_partitionNames.subList(2,3))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicas(),assignmentSet)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsCount(),expectedTopStateAssignmentSet1.size() + expectedTopStateAssignmentSet2.size())@@@81@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicaCount(),4)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "expectedCapacityMap.put(\"item3\",30)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "Map<String,Set<String>> expectedAssignment = new HashMap<>()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(assignableNode.getRemainingCapacity(),expectedCapacityMap)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testReleaseNoPartition['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicaCount(),3)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "Set<String> expectedAssignmentSet2 = new HashSet<>(_partitionNames.subList(2,4))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxCapacity(),_capacityDataMap)@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "Assert.assertEquals(assignableNode.getInstanceTags(),_testInstanceTags)@@@72@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "replica.equals(removingReplica)@@@40@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testReleaseNoPartition['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
52 [style = filled, label = "Assert.assertEquals(assignableNode.getDisabledPartitionsMap(),_disabledPartitionsMap)@@@74@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(assignableNode.getProjectedHighestUtilization(Collections.EMPTY_MAP),16.0 / 20.0,0.005)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicas(),assignmentSet)@@@76@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "Iterator<AssignableReplica> iter = assignmentSet.iterator()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "expectedCapacityMap.put(\"item2\",8)@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assignableNode.release(removingReplica)@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(1)),expectedAssignmentSet2)@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicaCount(),4)@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxCapacity(),_capacityDataMap)@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Assert.assertEquals(assignableNode.getRemainingCapacity(),expectedCapacityMap)@@@75@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ResourceControllerDataProvider testCache = setupClusterDataCache()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(0)),expectedTopStateAssignmentSet1)@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(0)),expectedTopStateAssignmentSet1)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "expectedCapacityMap.put(\"item1\",9)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "AssignableReplica addingReplica = new AssignableReplica(testCache.getClusterConfig(),testCache.getResourceConfig(_resourceNames.get(1)),_partitionNames.get(2),\"SLAVE\",2)@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "Assert.assertEquals(assignableNode.getInstanceTags(),_testInstanceTags)@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "Map<String,Integer> expectedCapacityMap = new HashMap<>()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsMap(),expectedAssignment)@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsMap(),expectedAssignment)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(0)),expectedAssignmentSet1)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "expectedCapacityMap.put(\"item1\",4)@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "AssignableReplica removingReplica = new AssignableReplica(testCache.getClusterConfig(),testCache.getResourceConfig(_resourceNames.get(1)),_partitionNames.get(2) + \"non-exist\",\"MASTER\",1)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
83->20 [style = bold, label=""];
6->3 [style = bold, label=""];
75->56 [style = bold, label=""];
39->36 [style = solid, label="expectedAssignmentSet1"];
74->82 [style = bold, label=""];
17->69 [style = solid, label="expectedTopStateAssignmentSet2"];
54->68 [style = bold, label=""];
70->37 [style = bold, label=""];
81->16 [style = solid, label="assignmentSet"];
57->71 [style = solid, label="expectedTopStateAssignmentSet1"];
9->35 [style = bold, label=""];
29->18 [style = bold, label=""];
69->30 [style = bold, label=""];
34->58 [style = bold, label=""];
5->0 [style = bold, label=""];
10->12 [style = bold, label=""];
23->52 [style = bold, label=""];
39->49 [style = bold, label=""];
25->19 [style = bold, label=""];
77->60 [style = bold, label=""];
59->22 [style = bold, label=""];
41->54 [style = bold, label=""];
46->50 [style = bold, label=""];
45->64 [style = bold, label=""];
32->11 [style = bold, label=""];
8->27 [style = bold, label=""];
81->31 [style = solid, label="assignmentSet"];
76->34 [style = bold, label=""];
21->44 [style = bold, label=""];
29->18 [style = dotted, label="true"];
74->14 [style = solid, label="expectedAssignment"];
42->2 [style = bold, label=""];
24->72 [style = bold, label=""];
39->70 [style = solid, label="expectedAssignmentSet1"];
3->81 [style = bold, label=""];
5->0 [style = solid, label="removingReplica"];
57->78 [style = solid, label="expectedTopStateAssignmentSet1"];
33->41 [style = bold, label=""];
61->71 [style = bold, label=""];
66->15 [style = bold, label=""];
67->73 [style = bold, label=""];
49->37 [style = solid, label="expectedAssignmentSet2"];
2->7 [style = dashed, label="0"];
82->24 [style = bold, label=""];
2->4 [style = bold, label=""];
39->27 [style = solid, label="expectedAssignmentSet1"];
4->0 [style = bold, label=""];
17->28 [style = solid, label="expectedTopStateAssignmentSet2"];
74->76 [style = solid, label="expectedAssignment"];
18->50 [style = bold, label=""];
49->13 [style = solid, label="expectedAssignmentSet2"];
7->5 [style = bold, label=""];
64->10 [style = bold, label=""];
3->2 [style = bold, label=""];
3->7 [style = bold, label=""];
63->40 [style = bold, label=""];
17->39 [style = bold, label=""];
81->57 [style = bold, label=""];
58->80 [style = bold, label=""];
49->24 [style = solid, label="expectedAssignmentSet2"];
4->5 [style = dashed, label="0"];
39->82 [style = solid, label="expectedAssignmentSet1"];
17->33 [style = solid, label="expectedTopStateAssignmentSet2"];
72->15 [style = solid, label="expectedCapacityMap"];
19->76 [style = bold, label=""];
57->17 [style = bold, label=""];
79->25 [style = solid, label="addingReplica"];
57->65 [style = solid, label="expectedTopStateAssignmentSet1"];
35->75 [style = bold, label=""];
68->63 [style = bold, label=""];
3->81 [style = solid, label="testCache"];
1->3 [style = bold, label=""];
31->36 [style = bold, label=""];
44->14 [style = bold, label=""];
50->29 [style = dotted, label="true"];
43->9 [style = bold, label=""];
73->23 [style = bold, label=""];
49->74 [style = bold, label=""];
12->66 [style = bold, label=""];
36->13 [style = bold, label=""];
47->32 [style = bold, label=""];
65->28 [style = bold, label=""];
29->50 [style = bold, label=""];
80->67 [style = bold, label=""];
54->44 [style = solid, label="removingReplica"];
20->42 [style = bold, label=""];
53->8 [style = bold, label=""];
51->43 [style = bold, label=""];
62->47 [style = bold, label=""];
56->59 [style = bold, label=""];
13->65 [style = bold, label=""];
79->19 [style = solid, label="addingReplica"];
78->33 [style = bold, label=""];
52->53 [style = bold, label=""];
27->61 [style = bold, label=""];
72->83 [style = bold, label=""];
60->26 [style = bold, label=""];
38->29 [style = bold, label=""];
26->25 [style = bold, label=""];
72->53 [style = solid, label="expectedCapacityMap"];
11->45 [style = bold, label=""];
14->51 [style = bold, label=""];
22->31 [style = bold, label=""];
37->78 [style = bold, label=""];
81->62 [style = solid, label="assignmentSet"];
55->3 [style = bold, label=""];
15->16 [style = bold, label=""];
79->77 [style = bold, label=""];
71->69 [style = bold, label=""];
40->46 [style = bold, label=""];
16->70 [style = bold, label=""];
4->0 [style = solid, label="removingReplica"];
74->47 [style = solid, label="expectedAssignment"];
72->22 [style = solid, label="expectedCapacityMap"];
81->8 [style = solid, label="assignmentSet"];
50->38 [style = bold, label=""];
50->38 [style = dotted, label="true"];
49->61 [style = solid, label="expectedAssignmentSet2"];
28->48 [style = bold, label=""];
50->21 [style = bold, label=""];
54->29 [style = solid, label="removingReplica"];
48->79 [style = bold, label=""];
2->62 [style = bold, label=""];
}
