digraph {
0 [style = filled, label = "c.subscribe(ts)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ts.assertNoErrors()@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ts.assertComplete()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "andThenFlowableNormal['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "andThenCompletableNormal['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "c.blockingAwait()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Flowable<Object> c = normal.completable.andThen(Flowable.fromCallable(new Callable<Object>(){@Override public Object call(){run.set(normal.get() == 0)return 1}}))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Completable c = normal.completable.andThen(Completable.fromCallable(new Callable<Object>(){@Override public Object call(){run.set(normal.get() == 0)return null}}))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "andThenFlowableNormal['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Assert.assertFalse(\"Start with other\",run.get())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ts.assertValue(1)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "TestSubscriber<Object> ts = new TestSubscriber<>()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "normal.assertSubscriptions(1)@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TestSubscriber<Object> ts = new TestSubscriber<Object>()@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "normal.assertSubscriptions(1)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final AtomicBoolean run = new AtomicBoolean()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->4 [style = bold, label=""];
9->10 [style = dashed, label="0"];
9->0 [style = bold, label=""];
8->14 [style = bold, label=""];
2->9 [style = bold, label=""];
2->10 [style = bold, label=""];
4->7 [style = bold, label=""];
15->5 [style = bold, label=""];
5->1 [style = bold, label=""];
2->14 [style = dashed, label="0"];
8->2 [style = bold, label=""];
12->8 [style = bold, label=""];
3->8 [style = bold, label=""];
10->0 [style = bold, label=""];
7->6 [style = bold, label=""];
11->8 [style = bold, label=""];
13->15 [style = bold, label=""];
14->13 [style = bold, label=""];
10->0 [style = solid, label="ts"];
0->5 [style = bold, label=""];
9->0 [style = solid, label="ts"];
}
