digraph {
4 [style = filled, label = "Endpoint someClient = Endpoint.newBuilder().serviceName(\"some-client\").ip(\"172.17.0.4\").build()@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Endpoint db = suffixServiceName(TestObjects.DB,testSuffix)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(store().getDependencies(endTs(trace),DAY).execute()).containsOnly(DependencyLink.newBuilder().parent(kafka.serviceName()).child(frontend.serviceName()).callCount(1).build(),DependencyLink.newBuilder().parent(frontend.serviceName()).child(backend.serviceName()).callCount(1).build(),DependencyLink.newBuilder().parent(backend.serviceName()).child(db.serviceName()).callCount(1).build())@@@11@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "processDependencies(trace)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Endpoint frontend = suffixServiceName(TestObjects.FRONTEND,testSuffix)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "notInstrumentedClientAndServer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TestInfo testInfo@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "String testSuffix = testSuffix(testInfo)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "instrumentedClientAndServer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Endpoint kafka = suffixServiceName(TestObjects.KAFKA,testSuffix)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "notInstrumentedClientAndServer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertThat(store().getDependencies(TRACE_ENDTS,DAY).execute()).containsOnly(DependencyLink.newBuilder().parent(\"some-client\").child(\"frontend\").callCount(1).build(),DependencyLink.newBuilder().parent(\"frontend\").child(\"backend\").callCount(1).build(),DependencyLink.newBuilder().parent(\"backend\").child(\"db\").callCount(1).build())@@@6@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "List<Span> trace = asList(Span.newBuilder().traceId(\"10\").id(\"10\").name(\"get\").timestamp((TODAY + 50L) * 1000L).duration(250L * 1000L).kind(Kind.CLIENT).localEndpoint(FRONTEND).build(),Span.newBuilder().traceId(\"10\").id(\"10\").name(\"get\").shared(true).timestamp((TODAY + 100) * 1000L).duration(150L * 1000L).kind(Kind.SERVER).localEndpoint(BACKEND).build(),Span.newBuilder().traceId(\"10\").parentId(\"10\").id(\"11\").name(\"get\").timestamp((TODAY + 150L) * 1000L).duration(50L * 1000L).kind(Kind.CLIENT).localEndpoint(BACKEND).remoteEndpoint(DB).build())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "List<Span> trace = asList(Span.newBuilder().traceId(traceId).id(\"20\").name(\"get\").timestamp(TODAY * 1000L).duration(350L * 1000L).kind(Kind.SERVER).localEndpoint(frontend).remoteEndpoint(kafka).build(),Span.newBuilder().traceId(traceId).parentId(\"20\").id(\"21\").name(\"get\").timestamp((TODAY + 50L) * 1000L).duration(250L * 1000L).kind(Kind.CLIENT).localEndpoint(frontend).build(),Span.newBuilder().traceId(traceId).parentId(\"20\").id(\"21\").name(\"get\").shared(true).timestamp((TODAY + 250) * 1000L).duration(50L * 1000L).kind(Kind.SERVER).localEndpoint(backend).build(),Span.newBuilder().traceId(traceId).parentId(\"21\").id(\"22\").name(\"get\").timestamp((TODAY + 150L) * 1000L).duration(50L * 1000L).kind(Kind.CLIENT).localEndpoint(backend).remoteEndpoint(db).build())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "List<Span> trace = asList(Span.newBuilder().traceId(\"20\").id(\"20\").name(\"get\").timestamp(TODAY * 1000L).duration(350L * 1000L).kind(Kind.SERVER).localEndpoint(FRONTEND).remoteEndpoint(someClient).build(),Span.newBuilder().traceId(\"20\").parentId(\"20\").id(\"21\").name(\"get\").timestamp((TODAY + 50L) * 1000L).duration(250L * 1000L).kind(Kind.CLIENT).localEndpoint(FRONTEND).build(),Span.newBuilder().traceId(\"20\").parentId(\"20\").id(\"21\").name(\"get\").shared(true).timestamp((TODAY + 250) * 1000L).duration(50L * 1000L).kind(Kind.SERVER).localEndpoint(BACKEND).build(),Span.newBuilder().traceId(\"20\").parentId(\"21\").id(\"22\").name(\"get\").timestamp((TODAY + 150L) * 1000L).duration(50L * 1000L).kind(Kind.CLIENT).localEndpoint(BACKEND).remoteEndpoint(DB).build())@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(store().getDependencies(TRACE_ENDTS,DAY).execute()).containsOnly(DependencyLink.newBuilder().parent(\"frontend\").child(\"backend\").callCount(1).build(),DependencyLink.newBuilder().parent(\"backend\").child(\"db\").callCount(1).build())@@@5@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "processDependencies(trace)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Endpoint backend = suffixServiceName(TestObjects.BACKEND,testSuffix)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "String traceId = newTraceId()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18->3 [style = bold, label=""];
5->14 [style = bold, label=""];
17->18 [style = solid, label="trace"];
3->2 [style = bold, label=""];
6->13 [style = bold, label=""];
11->15 [style = solid, label="testSuffix"];
0->3 [style = bold, label=""];
7->11 [style = bold, label=""];
11->5 [style = solid, label="testSuffix"];
7->9 [style = dotted, label="true"];
9->11 [style = solid, label="testInfo"];
13->12 [style = bold, label=""];
11->8 [style = bold, label=""];
11->10 [style = solid, label="testSuffix"];
11->14 [style = solid, label="testSuffix"];
15->5 [style = bold, label=""];
14->6 [style = bold, label=""];
1->4 [style = bold, label=""];
0->3 [style = solid, label="trace"];
10->15 [style = bold, label=""];
16->17 [style = bold, label=""];
6->13 [style = solid, label="trace"];
8->10 [style = bold, label=""];
4->0 [style = bold, label=""];
2->3 [style = dashed, label="0"];
17->18 [style = bold, label=""];
}
