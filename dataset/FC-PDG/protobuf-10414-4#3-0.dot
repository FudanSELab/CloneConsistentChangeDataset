digraph {
4 [style = filled, label = "assertThat(source).isEqualTo(dest)@@@5@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "TestFieldOrderings dest = TestFieldOrderings.parseFrom(source.toByteString(),getTestFieldOrderingsRegistry())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(source,dest)@@@5@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testParseMultipleExtensionRanges['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "TestFieldOrderings source = TestFieldOrderings.newBuilder().setMyInt(1).setMyString(\"foo\").setMyFloat(1.0F).setExtension(UnittestProto.myExtensionInt,23).setExtension(UnittestProto.myExtensionString,\"bar\").build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testParseMultipleExtensionRanges['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testParseMultipleExtensionRanges['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6->0 [style = bold, label=""];
2->4 [style = dashed, label="0"];
5->0 [style = bold, label=""];
3->0 [style = bold, label=""];
1->2 [style = bold, label=""];
1->4 [style = solid, label="dest"];
0->1 [style = bold, label=""];
1->2 [style = solid, label="dest"];
0->2 [style = solid, label="source"];
1->4 [style = bold, label=""];
}
