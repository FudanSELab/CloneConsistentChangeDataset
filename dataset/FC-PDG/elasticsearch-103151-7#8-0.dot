digraph {
9 [style = filled, label = "testCopyToFieldsInnerObjectParsing['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertThat(doc.getFields(\"very.inner.field\")(0(.stringValue(),equalTo(\"foo\"))@@@34@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertThat(doc.getFields(\"copy_test\")(0(.stringValue(),equalTo(\"foo\"))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ParseContext.Document doc = docMapper.parse(source(null)).rootDoc()@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertThat(doc.getFields(\"new_field\").length,equalTo(1))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "String mapping = Strings.toString(jsonBuilder().startObject().startObject(\"type1\").startObject(\"properties\").startObject(\"copy_test\").field(\"type\",\"text\").field(\"copy_to\",\"very.inner.field\").endObject().endObject().endObject().endObject())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "BytesReference json = BytesReference.bytes(jsonBuilder().startObject().field(\"copy_test\",\"foo\").field(\"new_field\",\"bar\").endObject())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(doc.getFields(\"copy_test\").length,equalTo(1))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(doc.getFields(\"copy_test\")(0(.stringValue(),equalTo(\"foo\"))@@@32@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertThat(doc.getFields(\"copy_test\").length,equalTo(1))@@@31@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "String mapping = Strings.toString(jsonBuilder().startObject().startObject(\"type1\").startObject(\"properties\").startObject(\"copy_test\").field(\"type\",\"text\").field(\"copy_to\",\"very.inner.field\").endObject().startObject(\"very\").field(\"type\",\"object\").startObject(\"properties\").startObject(\"inner\").field(\"type\",\"object\").endObject().endObject().endObject().endObject().endObject().endObject())@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(doc.getFields(\"very.inner.field\").length,equalTo(1))@@@33@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertThat(doc.getFields(\"very.inner.field\").length,equalTo(1))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testCopyToDynamicInnerObjectParsing['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "DocumentMapper docMapper = createDocumentMapper(mapping(null))@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertThat(doc.getFields(\"new_field\")(0(.stringValue(),equalTo(\"bar\"))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ParseContext.Document doc = docMapper.parse(new SourceToParse(\"test\",\"1\",json,XContentType.JSON)).rootDoc()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(doc.getFields(\"very.inner.field\")(0(.stringValue(),equalTo(\"foo\"))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testCopyToFieldsInnerObjectParsing['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type1\",new CompressedXContent(mapping))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "BytesReference json = BytesReference.bytes(jsonBuilder().startObject().field(\"copy_test\",\"foo\").startObject(\"foo\").startObject(\"bar\").field(\"baz\",\"zoo\").endObject().endObject().endObject())@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->6 [style = bold, label=""];
20->3 [style = bold, label=""];
18->20 [style = bold, label=""];
6->4 [style = bold, label=""];
8->5 [style = bold, label=""];
16->19 [style = bold, label=""];
2->20 [style = dashed, label="0"];
1->8 [style = bold, label=""];
20->3 [style = solid, label="mapping"];
2->3 [style = solid, label="mapping"];
9->15 [style = bold, label=""];
14->11 [style = bold, label=""];
4->1 [style = bold, label=""];
2->3 [style = bold, label=""];
10->12 [style = bold, label=""];
3->17 [style = bold, label=""];
11->10 [style = bold, label=""];
17->6 [style = bold, label=""];
3->0 [style = bold, label=""];
15->13 [style = bold, label=""];
0->17 [style = dashed, label="0"];
13->14 [style = bold, label=""];
5->16 [style = bold, label=""];
7->2 [style = bold, label=""];
}
