digraph {
28 [style = filled, label = "selectStatement.setFrom(subqueryTableSegment)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "when(subSelectStatement.getProjections()).thenReturn(subProjectionsSegment)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertNextForRowCountBoundOpenedFalse['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "assertBuildIteratorStreamMergedResultWithOracleLimit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "when(binaryOperationExpression.getOperator()).thenReturn(\">=\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "MergedResult actual = resultMerger.merge(createQueryResults(),selectStatementContext,buildSchema())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "WhereSegment whereSegment = mock()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "when(binaryOperationExpression.getRight()).thenReturn(new LiteralExpressionSegment(0,0,2))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "when(subProjectionsSegment.getProjections()).thenReturn(Collections.singletonList(topProjectionSegment))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "when(subquerySegment.getSelect()).thenReturn(subSelectStatement)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "when(binaryOperationExpression.getLeft()).thenReturn(new ColumnSegment(0,0,new IdentifierValue(\"row_id\")))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "SubquerySegment subquerySegment = mock()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertNextForRowCountBoundOpenedFalse['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "SubqueryTableSegment subqueryTableSegment = mock()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "when(subqueryTableSegment.getSubquery()).thenReturn(subquerySegment)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "TopProjectionSegment topProjectionSegment = mock()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "SelectStatementContext selectStatementContext = new SelectStatementContext(new OracleSelectStatement(),new GroupByContext(Collections.emptyList()),new OrderByContext(Collections.emptyList(),false),new ProjectionsContext(0,0,false,Collections.emptyList()),new PaginationContext(new NumberLiteralRowNumberValueSegment(0,0,2,true),new NumberLiteralRowNumberValueSegment(0,0,4,false),Collections.emptyList()))@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "OracleSelectStatement selectStatement = new OracleSelectStatement()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "ProjectionsSegment subProjectionsSegment = mock()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "selectStatement.setWhere(whereSegment)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertFalse(actual.next())@@@30@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "assertThat(actual,instanceOf())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "MergedResult actual = resultMerger.merge(Arrays.asList(mockQueryResult(),mockQueryResult(),mockQueryResult(),mockQueryResult()),selectStatementContext,null)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "SelectStatementContext selectStatementContext = new SelectStatementContext(Collections.singletonMap(DefaultSchema.LOGIC_NAME,metaData),null,selectStatement,DefaultSchema.LOGIC_NAME)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "SelectStatement subSelectStatement = mock()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "ShardingSphereMetaData metaData = mock()@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "assertThat(((RowNumberDecoratorMergedResult)actual).getMergedResult(),instanceOf())@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ShardingDQLResultMerger resultMerger = new ShardingDQLResultMerger(DatabaseTypeRegistry.getActualDatabaseType(\"Oracle\"))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "when(topProjectionSegment.getTop()).thenReturn(new NumberLiteralRowNumberValueSegment(0,0,4,false))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "SelectStatementContext selectStatementContext = new SelectStatementContext(buildSelectStatement(new OracleSelectStatement()),new GroupByContext(Collections.emptyList()),new OrderByContext(Collections.emptyList(),false),new ProjectionsContext(0,0,false,Collections.emptyList()),new PaginationContext(new NumberLiteralRowNumberValueSegment(0,0,1,true),null,Collections.emptyList()))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "MergedResult actual = resultMerger.merge(Arrays.asList(mockQueryResult(),mockQueryResult(),mockQueryResult(),mockQueryResult()),selectStatementContext,null)@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "when(topProjectionSegment.getAlias()).thenReturn(\"row_id\")@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertTrue(actual.next())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTrue(actual.next())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "when(whereSegment.getExpr()).thenReturn(binaryOperationExpression)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "selectStatement.setProjections(new ProjectionsSegment(0,0))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "BinaryOperationExpression binaryOperationExpression = mock()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27->13 [style = bold, label=""];
4->1 [style = solid, label="selectStatementContext"];
20->3 [style = solid, label="selectStatementContext"];
1->35 [style = dashed, label="0"];
21->14 [style = solid, label="binaryOperationExpression"];
11->12 [style = solid, label="subProjectionsSegment"];
35->32 [style = solid, label="actual"];
10->19 [style = bold, label=""];
18->11 [style = bold, label=""];
23->28 [style = solid, label="subqueryTableSegment"];
10->15 [style = solid, label="topProjectionSegment"];
22->20 [style = solid, label="metaData"];
1->3 [style = bold, label=""];
26->14 [style = bold, label=""];
36->35 [style = solid, label="selectStatementContext"];
35->32 [style = bold, label=""];
31->29 [style = bold, label=""];
6->0 [style = bold, label=""];
20->3 [style = bold, label=""];
13->30 [style = bold, label=""];
32->34 [style = bold, label=""];
12->24 [style = bold, label=""];
18->24 [style = solid, label="subSelectStatement"];
5->34 [style = dashed, label="0"];
0->36 [style = bold, label=""];
29->26 [style = bold, label=""];
9->27 [style = bold, label=""];
8->0 [style = bold, label=""];
33->0 [style = bold, label=""];
17->16 [style = solid, label="subquerySegment"];
24->16 [style = bold, label=""];
5->2 [style = bold, label=""];
3->5 [style = bold, label=""];
30->21 [style = bold, label=""];
27->20 [style = solid, label="selectStatement"];
21->31 [style = bold, label=""];
16->28 [style = bold, label=""];
14->23 [style = bold, label=""];
22->20 [style = bold, label=""];
4->36 [style = dashed, label="0"];
0->4 [style = bold, label=""];
11->10 [style = bold, label=""];
0->22 [style = bold, label=""];
28->8 [style = bold, label=""];
30->8 [style = solid, label="whereSegment"];
7->15 [style = bold, label=""];
23->17 [style = bold, label=""];
4->1 [style = bold, label=""];
15->12 [style = bold, label=""];
3->32 [style = dashed, label="0"];
36->35 [style = bold, label=""];
2->25 [style = bold, label=""];
19->7 [style = bold, label=""];
17->18 [style = bold, label=""];
}
