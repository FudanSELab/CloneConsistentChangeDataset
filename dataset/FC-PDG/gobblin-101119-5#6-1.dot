digraph {
20 [style = filled, label = "Dag<JobExecutionPlan> jobExecutionPlanDag = this.compilerWithTemplateCalague.compileFlow(flowSpec)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertNotNull(specExecutorMapping,\"Expected non null mapping.\")@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertNotNull(jobExecutionPlanDag,\"Expected non null dag.\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Map<Spec,SpecExecutor> specExecutorMapping = this.compilerWithTemplateCalague.compileFlow(flowSpec)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testCompilerWithTemplateCatalog['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertTrue(jobExecutionPlanDag.getNodes().size() == 1,\"Exepected 1 executor for FlowSpec.\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ConfigurationKeys.FLOW_NAME_KEY),TEST_FLOW_NAME)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertFalse(jobSpec.getConfig().hasPath(ConfigurationKeys.JOB_SCHEDULE_KEY))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(\"testProperty1\"),\"testValue1\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertTrue(jobSpec.getConfig().hasPath(ConfigurationKeys.FLOW_EXECUTION_ID_KEY))@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(\"testProperty3\"),\"100\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "JobSpec jobSpec = (JobSpec)spec@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY),TEST_SOURCE_NAME)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Spec spec = specExecutorMapping.keySet().iterator().next()@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(\"testProperty2\"),\"test.Value1\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertTrue(spec instanceof JobSpec,\"Expected JobSpec compiled from FlowSpec.\")@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "FlowSpec flowSpec = initFlowSpec()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testCompilerWithTemplateCatalog['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Assert.assertTrue(specExecutorMapping.size() == 1,\"Exepected 1 executor for FlowSpec.\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ConfigurationKeys.FLOW_GROUP_KEY),TEST_FLOW_GROUP)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertTrue(spec instanceof JobSpec,\"Expected JobSpec compiled from FlowSpec.\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertNull(jobExecutionPlanDag.getChildren(dagNode))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Dag.DagNode<JobExecutionPlan> dagNode = jobExecutionPlanDag.getStartNodes().get(0)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "Spec spec = dagNode.getValue().getJobSpec()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ConfigurationKeys.JOB_NAME_KEY),TEST_FLOW_NAME)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "FlowSpec flowSpec = initFlowSpec(TEST_FLOW_GROUP,TEST_FLOW_NAME,\"unsupportedSource\",\"unsupportedSink\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertTrue(specExecutorMapping.size() == 0,\"Exepected 1 executor for FlowSpec.\")@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testNoJobSpecCompilation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ConfigurationKeys.JOB_GROUP_KEY),TEST_FLOW_GROUP)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
14->16 [style = bold, label=""];
28->15 [style = solid, label="flowSpec"];
16->3 [style = bold, label=""];
5->8 [style = bold, label=""];
7->13 [style = solid, label="spec"];
17->5 [style = bold, label=""];
15->20 [style = dashed, label="0"];
23->16 [style = solid, label="spec"];
28->15 [style = bold, label=""];
0->26 [style = bold, label=""];
15->0 [style = solid, label="specExecutorMapping"];
19->21 [style = solid, label="dagNode"];
20->25 [style = solid, label="jobExecutionPlanDag"];
1->15 [style = bold, label=""];
27->28 [style = bold, label=""];
0->2 [style = bold, label=""];
25->18 [style = bold, label=""];
18->19 [style = bold, label=""];
22->21 [style = bold, label=""];
1->20 [style = bold, label=""];
9->17 [style = bold, label=""];
8->6 [style = bold, label=""];
11->12 [style = bold, label=""];
7->14 [style = solid, label="spec"];
1->15 [style = solid, label="flowSpec"];
1->28 [style = dashed, label="0"];
20->25 [style = bold, label=""];
1->20 [style = solid, label="flowSpec"];
23->14 [style = bold, label=""];
3->10 [style = bold, label=""];
0->25 [style = dashed, label="0"];
19->23 [style = bold, label=""];
15->0 [style = bold, label=""];
6->11 [style = bold, label=""];
2->18 [style = dashed, label="0"];
10->9 [style = bold, label=""];
4->1 [style = bold, label=""];
2->7 [style = bold, label=""];
24->1 [style = bold, label=""];
2->26 [style = dashed, label="0"];
13->14 [style = bold, label=""];
12->22 [style = bold, label=""];
23->14 [style = solid, label="spec"];
}
