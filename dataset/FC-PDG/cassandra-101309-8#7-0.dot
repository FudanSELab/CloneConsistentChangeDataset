digraph {
1 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(keyTokens.get(0)))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(tmd.isLeaving(hosts.get(2)))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.bootstrapping(keyTokens.get(4)))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(keyTokens.get(3)))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(endpointTokens.get(2)))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(3)))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "IPartitioner partitioner = new RandomPartitioner()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertTrue(tmd.isMember(hosts.get(2)))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "assertTrue(tmd.isMember(hosts.get(3)))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(3)).equals(hosts.get(2)))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "ss.onChange(hosts.get(3),ApplicationState.STATUS,valueFactory.normal(keyTokens.get(2)))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "Util.createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,7)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertTrue(tmd.isLeaving(hosts.get(2)))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().isEmpty())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testStateJumpToLeaving['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().isEmpty())@@@39@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "ss.onChange(hosts.get(3),ApplicationState.STATUS,valueFactory.bootstrapping(keyTokens.get(1)))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "List<UUID> hostIds = new ArrayList<UUID>()@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "assertTrue(tmd.getEndpoint(endpointTokens.get(2)) == null)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertTrue(tmd.isMember(hosts.get(2)))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(keyTokens.get(0)))@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Util.createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,hostIds,6)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Util.createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,6)@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ArrayList<Token> endpointTokens = new ArrayList<Token>()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().isEmpty())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "StorageService ss = StorageService.instance@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(3)))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)) == null)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.bootstrapping(keyTokens.get(3)))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().size() == 1)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<InetAddress> hosts = new ArrayList<InetAddress>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(3)))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "ArrayList<Token> keyTokens = new ArrayList<Token>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(2)))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "tmd.clearUnsafe()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(3)))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@27@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "TokenMetadata tmd = ss.getTokenMetadata()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testStateJumpToBootstrap['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(3)).equals(keyTokens.get(2)))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(2)))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(2)))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(keyTokens.get(1)))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(tmd.getEndpoint(keyTokens.get(1)).equals(hosts.get(2)))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.bootstrapping(keyTokens.get(1),hostIds.get(2)))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testStateJumpToLeaving['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
36->43 [style = bold, label=""];
14->21 [style = solid, label="hosts"];
4->9 [style = bold, label=""];
24->28 [style = bold, label=""];
49->45 [style = bold, label=""];
22->48 [style = solid, label="keyTokens"];
14->48 [style = solid, label="hosts"];
23->16 [style = bold, label=""];
27->1 [style = bold, label=""];
2->42 [style = dashed, label="0"];
42->50 [style = bold, label=""];
16->11 [style = bold, label=""];
15->29 [style = bold, label=""];
52->53 [style = bold, label=""];
31->23 [style = bold, label=""];
5->23 [style = bold, label=""];
25->23 [style = bold, label=""];
2->1 [style = bold, label=""];
14->48 [style = bold, label=""];
19->20 [style = bold, label=""];
0->12 [style = bold, label=""];
8->3 [style = bold, label=""];
44->33 [style = bold, label=""];
12->32 [style = bold, label=""];
8->27 [style = solid, label="partitioner"];
53->40 [style = bold, label=""];
28->13 [style = bold, label=""];
38->36 [style = bold, label=""];
35->49 [style = bold, label=""];
23->27 [style = solid, label="ss"];
1->0 [style = bold, label=""];
15->30 [style = bold, label=""];
9->10 [style = bold, label=""];
54->41 [style = bold, label=""];
43->52 [style = bold, label=""];
17->22 [style = bold, label=""];
48->42 [style = bold, label=""];
47->35 [style = bold, label=""];
24->18 [style = bold, label=""];
8->3 [style = solid, label="partitioner"];
17->21 [style = solid, label="endpointTokens"];
22->21 [style = solid, label="keyTokens"];
8->21 [style = solid, label="partitioner"];
14->27 [style = solid, label="hosts"];
26->27 [style = solid, label="hostIds"];
24->28 [style = dashed, label="0"];
21->2 [style = bold, label=""];
0->7 [style = bold, label=""];
14->26 [style = bold, label=""];
46->51 [style = bold, label=""];
6->4 [style = bold, label=""];
26->27 [style = bold, label=""];
7->24 [style = bold, label=""];
55->44 [style = bold, label=""];
22->27 [style = solid, label="keyTokens"];
51->55 [style = bold, label=""];
10->12 [style = bold, label=""];
50->0 [style = bold, label=""];
17->48 [style = solid, label="endpointTokens"];
30->54 [style = bold, label=""];
18->13 [style = bold, label=""];
39->38 [style = bold, label=""];
21->48 [style = dashed, label="0"];
8->48 [style = solid, label="partitioner"];
11->8 [style = bold, label=""];
3->17 [style = bold, label=""];
23->48 [style = solid, label="ss"];
45->46 [style = bold, label=""];
23->21 [style = solid, label="ss"];
13->6 [style = bold, label=""];
41->39 [style = bold, label=""];
22->14 [style = bold, label=""];
12->19 [style = bold, label=""];
19->32 [style = dashed, label="0"];
20->15 [style = bold, label=""];
33->34 [style = bold, label=""];
32->20 [style = bold, label=""];
14->21 [style = bold, label=""];
1->50 [style = dashed, label="0"];
40->37 [style = bold, label=""];
17->27 [style = solid, label="endpointTokens"];
37->47 [style = bold, label=""];
}
