digraph {
4 [style = filled, label = "Assert.assertFalse(pendingContains(sstable))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "cleanupCompactionFinalized['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "Assert.assertFalse(repairedContains(sstable))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertTrue(pendingContains(sstable))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "cleanupCompactionFailed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertTrue(unrepairedContains(sstable))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertFalse(hasPendingStrategiesFor(repairID))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertFalse(sstable.isRepaired())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "cfs.getCompactionStrategyManager().enable()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "mutateRepaired(sstable,repairID,false)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "UUID repairID = registerSession(cfs,true,true)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(expectedRepairedAt,sstable.getSSTableMetadata().repairedAt)@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "LocalSessionAccessor.failUnsafe(repairID)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertTrue(sstable.isRepaired())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "SSTableReader sstable = makeSSTable(true)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "cleanupCompactionFinalized['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(ActiveRepairService.UNREPAIRED_SSTABLE,sstable.getSSTableMetadata().repairedAt)@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "LocalSessionAccessor.prepareUnsafe(repairID,COORDINATOR,PARTICIPANTS)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertSame(,compactionTask.getClass())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "AbstractCompactionTask compactionTask = csm.getNextBackgroundTask(FBUtilities.nowInSeconds())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertFalse(sstable.isRepaired())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertNotNull(compactionTask)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(sstable.isPendingRepair())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertFalse(sstable.isPendingRepair())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "long expectedRepairedAt = ActiveRepairService.instance.getParentRepairSession(repairID).repairedAt@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertTrue(repairedContains(sstable))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "compactionTask.execute(ActiveCompactionsTracker.NOOP)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertTrue(hasPendingStrategiesFor(repairID))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertFalse(hasTransientStrategiesFor(repairID))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "csm.handleNotification(new SSTableAddedNotification(Collections.singleton(sstable),null),cfs.getTracker())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertFalse(hasTransientStrategiesFor(repairID))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertFalse(unrepairedContains(sstable))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "LocalSessionAccessor.finalizeUnsafe(repairID)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19->9 [style = solid, label="sstable"];
8->6 [style = solid, label="repairID"];
8->14 [style = solid, label="repairID"];
19->31 [style = solid, label="sstable"];
26->8 [style = bold, label=""];
11->16 [style = solid, label="expectedRepairedAt"];
21->22 [style = bold, label=""];
24->7 [style = bold, label=""];
9->4 [style = bold, label=""];
10->23 [style = bold, label=""];
3->2 [style = bold, label=""];
22->0 [style = bold, label=""];
8->15 [style = solid, label="repairID"];
22->29 [style = dashed, label="0"];
20->1 [style = solid, label="compactionTask"];
19->30 [style = solid, label="sstable"];
12->21 [style = bold, label=""];
23->16 [style = bold, label=""];
10->27 [style = bold, label=""];
8->12 [style = solid, label="repairID"];
28->8 [style = bold, label=""];
23->10 [style = dashed, label="0"];
8->29 [style = solid, label="repairID"];
8->6 [style = bold, label=""];
14->24 [style = bold, label=""];
6->19 [style = bold, label=""];
8->11 [style = solid, label="repairID"];
16->27 [style = dashed, label="0"];
21->29 [style = bold, label=""];
20->1 [style = bold, label=""];
2->17 [style = bold, label=""];
29->0 [style = bold, label=""];
19->17 [style = solid, label="sstable"];
19->21 [style = solid, label="sstable"];
13->11 [style = bold, label=""];
1->3 [style = bold, label=""];
11->10 [style = bold, label=""];
25->5 [style = bold, label=""];
8->22 [style = solid, label="repairID"];
9->30 [style = dashed, label="0"];
8->13 [style = solid, label="repairID"];
30->32 [style = bold, label=""];
17->9 [style = bold, label=""];
5->20 [style = bold, label=""];
7->25 [style = bold, label=""];
8->32 [style = solid, label="repairID"];
15->13 [style = bold, label=""];
2->31 [style = bold, label=""];
8->0 [style = solid, label="repairID"];
19->12 [style = solid, label="sstable"];
31->30 [style = bold, label=""];
18->8 [style = bold, label=""];
13->10 [style = bold, label=""];
0->14 [style = bold, label=""];
4->15 [style = bold, label=""];
19->12 [style = bold, label=""];
17->31 [style = dashed, label="0"];
32->15 [style = bold, label=""];
19->4 [style = solid, label="sstable"];
19->24 [style = solid, label="sstable"];
}
