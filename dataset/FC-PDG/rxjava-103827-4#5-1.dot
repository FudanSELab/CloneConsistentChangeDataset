digraph {
3 [style = filled, label = "f.subscribe(subscriber)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TestSubscriberEx<Integer> subscriber = new TestSubscriberEx<Integer>()@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "scanWithRequestOne['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "observer.assertValue(0)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "observer.assertTerminated()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "subscriber.assertValue(0)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "subscriber.assertTerminated()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TestSubscriberEx<Integer> subscriber = new TestSubscriberEx<>()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "TestObserverEx<Integer> observer = new TestObserverEx<Integer>()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Observable<Integer> o = Observable.just(1,2).scan(0,new BiFunction<Integer,Integer,Integer>(){@Override public Integer apply(Integer t1,Integer t2){return t1 + t2}}).take(1)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "scanWithRequestOne['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "scanWithRequestOne['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "o.subscribe(observer)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Flowable<Integer> f = Flowable.just(1,2).scan(0,new BiFunction<Integer,Integer,Integer>(){@Override public Integer apply(Integer t1,Integer t2){return t1 + t2}}).take(1)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "observer.assertNoErrors()@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "subscriber.assertNoErrors()@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
3->1 [style = bold, label=""];
2->6 [style = bold, label=""];
1->15 [style = dashed, label="0"];
7->3 [style = bold, label=""];
6->10 [style = dashed, label="0"];
7->3 [style = solid, label="subscriber"];
0->3 [style = solid, label="subscriber"];
2->12 [style = dashed, label="0"];
12->10 [style = bold, label=""];
8->5 [style = bold, label=""];
5->0 [style = bold, label=""];
5->11 [style = dashed, label="0"];
3->9 [style = dashed, label="0"];
9->15 [style = bold, label=""];
0->13 [style = dashed, label="0"];
11->13 [style = bold, label=""];
5->7 [style = bold, label=""];
1->2 [style = bold, label=""];
15->12 [style = bold, label=""];
13->9 [style = bold, label=""];
0->7 [style = dashed, label="0"];
14->11 [style = bold, label=""];
4->5 [style = bold, label=""];
13->9 [style = solid, label="observer"];
}
