digraph {
0 [style = filled, label = "final CompactionTask compactionTask = builder.inputSpec(new CompactionIntervalSpec(INTERVAL_TO_INDEX,null)).tuningConfig(AbstractParallelIndexSupervisorTaskTest.DEFAULT_TUNING_CONFIG_FOR_PARALLEL_INDEXING).build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "CompactionState expectedState = new CompactionState(new DynamicPartitionsSpec(null,Long.MAX_VALUE),compactionTask.getTuningConfig().getIndexSpec().asMap(getObjectMapper()),getObjectMapper().readValue(getObjectMapper().writeValueAsString(new UniformGranularitySpec(Granularities.HOUR,Granularities.NONE,true,ImmutableList.of(segment.getInterval()))),))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(null,segment.getLastCompactionState())@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testRunCompactionStateNotStoreIfContextSetToFalse['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final Builder builder = new Builder(DATA_SOURCE,getSegmentLoaderFactory(),RETRY_POLICY_FACTORY)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testRunParallelWithDynamicPartitioningMatchCompactionState['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "CompactionState expectedState = new CompactionState(new DynamicPartitionsSpec(null,Long.MAX_VALUE),compactionTask.getTuningConfig().getIndexSpec().asMap(getObjectMapper()),getObjectMapper().readValue(getObjectMapper().writeValueAsString(new UniformGranularitySpec(Granularities.HOUR,Granularities.MINUTE,true,ImmutableList.of(segment.getInterval()))),))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Assert.assertEquals(expectedState,segment.getLastCompactionState())@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final CompactionTask compactionTask = builder.inputSpec(new CompactionIntervalSpec(INTERVAL_TO_INDEX,null)).tuningConfig(AbstractParallelIndexSupervisorTaskTest.DEFAULT_TUNING_CONFIG_FOR_PARALLEL_INDEXING).context(ImmutableMap.of(Tasks.STORE_COMPACTION_STATE_KEY,false)).build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertSame(lockGranularity == LockGranularity.TIME_CHUNK? : ,segment.getShardSpec().getClass())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testRunParallelWithDynamicPartitioningMatchCompactionState['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final Set<DataSegment> compactedSegments = runTask(compactionTask)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "runIndexTask(null,true)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->9 [style = bold, label=""];
4->10 [style = bold, label=""];
1->4 [style = bold, label=""];
7->1 [style = bold, label=""];
12->5 [style = bold, label=""];
12->5 [style = solid, label="compactionTask"];
2->3 [style = bold, label=""];
0->5 [style = solid, label="compactionTask"];
9->1 [style = solid, label="expectedState"];
3->12 [style = bold, label=""];
0->12 [style = dashed, label="0"];
11->2 [style = bold, label=""];
4->7 [style = bold, label=""];
3->0 [style = bold, label=""];
6->2 [style = bold, label=""];
8->2 [style = bold, label=""];
7->9 [style = dashed, label="0"];
5->4 [style = bold, label=""];
10->4 [style = bold, label=""];
7->1 [style = solid, label="expectedState"];
9->1 [style = bold, label=""];
0->5 [style = bold, label=""];
}
