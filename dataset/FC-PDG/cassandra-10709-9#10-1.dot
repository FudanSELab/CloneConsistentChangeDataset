digraph {
8 [style = filled, label = "cfs.clearUnsafe()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertOrderedAll(cfs,10)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testScrubMultiRow['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertOrderedAll(cfs,10)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertOrderedAll(cfs,4)@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "CompactionManager.instance.disableAutoCompaction()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "fillCF(cfs,10)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "overrideWithGarbage(sstable,0,2)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "fillCF(cfs,4)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "CompactionManager.instance.performScrub(cfs,false,true)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "CompactionManager.instance.performScrub(cfs,false,true,2)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "SSTableReader sstable = cfs.getLiveSSTables().iterator().next()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "CompactionManager.instance.performScrub(cfs,false,true)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertOrderedAll(cfs,4)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Keyspace keyspace = Keyspace.open(KEYSPACE)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testScrubOneRowWithCorruptedKey['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testScrubOneRowWithCorruptedKey['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assumeTrue(!Boolean.parseBoolean(System.getProperty(\"cassandra.test.compression\",\"false\")))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->4 [style = solid, label="sstable"];
5->8 [style = bold, label=""];
0->9 [style = bold, label=""];
5->1 [style = solid, label="cfs"];
6->1 [style = dashed, label="0"];
17->9 [style = bold, label=""];
2->4 [style = bold, label=""];
11->2 [style = bold, label=""];
7->3 [style = bold, label=""];
4->7 [style = bold, label=""];
8->1 [style = bold, label=""];
15->17 [style = bold, label=""];
5->18 [style = solid, label="cfs"];
8->7 [style = solid, label="cfs"];
1->6 [style = bold, label=""];
5->16 [style = solid, label="cfs"];
11->14 [style = dashed, label="0"];
6->11 [style = bold, label=""];
8->6 [style = solid, label="cfs"];
10->0 [style = bold, label=""];
9->5 [style = bold, label=""];
4->12 [style = bold, label=""];
7->12 [style = dashed, label="0"];
14->18 [style = bold, label=""];
1->14 [style = bold, label=""];
12->3 [style = bold, label=""];
8->3 [style = solid, label="cfs"];
5->14 [style = solid, label="cfs"];
8->12 [style = solid, label="cfs"];
3->16 [style = dashed, label="0"];
13->0 [style = bold, label=""];
8->11 [style = solid, label="cfs"];
18->16 [style = bold, label=""];
}
