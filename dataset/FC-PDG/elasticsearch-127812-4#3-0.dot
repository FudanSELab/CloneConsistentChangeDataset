digraph {
2 [style = filled, label = "Map<String,Object> fieldNode@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "MappingParserContext parserContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Map<String,Object> fieldNode@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "throw new MapperParsingException(\"unknown parameter (\" + propName + \"( on runtime field (\" + name + \"( of type (\" + type + \"(\")@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "String name@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Map.Entry<String,Object> entry = iterator.next()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "parameter == null@@@15@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "parse['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "String name@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "parse['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "propNode == null && parameter.canAcceptNull() == false@@@18@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Iterator<Map.Entry<String,Object>> iterator = fieldNode.entrySet().iterator()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final Object propNode = entry.getValue()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "parse['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "parameter.parse(name,parserContext,propNode)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "throw new MapperParsingException(\"(\" + propName + \"( on runtime field (\" + name + \"( of type (\" + type + \"( must not have a (null( value\")@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Parameter<?> parameter = paramsMap.get(propName)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "iterator.hasNext()@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final String propName = entry.getKey()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "MappingParserContext parserContext@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "iterator.remove()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Map<String,Parameter<?>> paramsMap = new HashMap<>()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "paramsMap.put(param.name,param)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "parameter.validate()@@@25@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "String type = (String)fieldNode.remove(\"type\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Map<String,Object> fieldNode@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
12->0 [style = bold, label=""];
10->12 [style = solid, label="propName"];
18->15 [style = dotted, label="true"];
7->4 [style = dotted, label="true"];
18->3 [style = dotted, label="true"];
15->14 [style = solid, label="name"];
8->12 [style = bold, label=""];
7->17 [style = dotted, label="true"];
3->16 [style = solid, label="name"];
10->17 [style = bold, label=""];
8->0 [style = bold, label=""];
3->12 [style = solid, label="name"];
7->8 [style = dotted, label="true"];
7->10 [style = dotted, label="true"];
13->6 [style = bold, label=""];
17->8 [style = solid, label="propNode"];
0->9 [style = bold, label=""];
3->0 [style = solid, label="name"];
7->22 [style = bold, label=""];
16->13 [style = bold, label=""];
7->9 [style = dotted, label="true"];
15->0 [style = solid, label="parserContext"];
11->14 [style = bold, label=""];
15->12 [style = solid, label="name"];
21->15 [style = dotted, label="true"];
7->11 [style = dotted, label="true"];
21->20 [style = dotted, label="true"];
7->5 [style = dotted, label="true"];
13->14 [style = solid, label="type"];
24->23 [style = dotted, label="true"];
11->14 [style = dotted, label="true"];
5->11 [style = bold, label=""];
7->4 [style = bold, label=""];
5->11 [style = solid, label="parameter"];
13->12 [style = solid, label="type"];
15->0 [style = solid, label="name"];
11->8 [style = bold, label=""];
14->8 [style = bold, label=""];
21->19 [style = dotted, label="true"];
20->0 [style = solid, label="parserContext"];
10->5 [style = solid, label="propName"];
4->10 [style = bold, label=""];
15->16 [style = solid, label="name"];
18->1 [style = bold, label=""];
10->14 [style = solid, label="propName"];
7->0 [style = dotted, label="true"];
21->1 [style = bold, label=""];
18->2 [style = dotted, label="true"];
24->25 [style = dotted, label="true"];
24->15 [style = dotted, label="true"];
6->7 [style = bold, label=""];
1->16 [style = bold, label=""];
17->5 [style = bold, label=""];
17->0 [style = solid, label="propNode"];
8->12 [style = dotted, label="true"];
3->14 [style = solid, label="name"];
9->7 [style = bold, label=""];
}
