digraph {
3 [style = filled, label = "assertFalse(builder.isInitialized())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "builder = TestOptimizedForSize.newBuilder()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TestOptimizedForSize.Builder builder = TestOptimizedForSize.newBuilder()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "proto2Builder.setA(1).setB(2).setC(3)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertTrue(builder.buildPartial().isInitialized())@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertTrue(builder.buildPartial().isInitialized())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "proto2Builder.setA(1).setB(2).setC(3)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "UnittestProto.TestRequired.Builder proto2Builder = builder.getOptionalProto2MessageBuilder()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "proto2Builder = builder.getOneofProto2MessageBuilder()@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testUninitializedExtensionInOptimizedForSize['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertTrue(builder.isInitialized())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertFalse(builder.buildPartial().isInitialized())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testUninitializedExtensionInOptimizedForSize['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "TestAllTypes.Builder builder = TestAllTypes.newBuilder()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertTrue(builder.buildPartial().isInitialized())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "builder.setExtension(TestOptimizedForSize.testExtension2,TestRequiredOptimizedForSize.newBuilder().setX(10).buildPartial())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "builder.setExtension(TestOptimizedForSize.testExtension2,TestRequiredOptimizedForSize.newBuilder().buildPartial())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertFalse(builder.isInitialized())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertFalse(builder.isInitialized())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertFalse(builder.buildPartial().isInitialized())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(builder.isInitialized()).isFalse()@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(builder.buildPartial().isInitialized()).isFalse()@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertFalse(builder.buildPartial().isInitialized())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "proto2Builder.setA(1).setB(2).setC(3)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(builder.isInitialized()).isTrue()@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertTrue(builder.isInitialized())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(builder.buildPartial().isInitialized()).isTrue()@@@10@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertTrue(builder.isInitialized())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testIsInitialized['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "proto2Builder = builder.addRepeatedProto2MessageBuilder()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->23 [style = dashed, label="0"];
4->6 [style = bold, label=""];
17->26 [style = bold, label=""];
29->27 [style = bold, label=""];
20->3 [style = bold, label=""];
5->13 [style = dashed, label="0"];
2->4 [style = bold, label=""];
11->12 [style = bold, label=""];
14->18 [style = bold, label=""];
3->2 [style = bold, label=""];
12->4 [style = bold, label=""];
24->15 [style = bold, label=""];
9->13 [style = bold, label=""];
22->16 [style = bold, label=""];
25->14 [style = bold, label=""];
3->11 [style = dashed, label="0"];
0->3 [style = bold, label=""];
19->23 [style = bold, label=""];
0->11 [style = bold, label=""];
21->29 [style = bold, label=""];
2->17 [style = bold, label=""];
27->22 [style = bold, label=""];
6->9 [style = bold, label=""];
8->1 [style = bold, label=""];
7->9 [style = dashed, label="0"];
10->1 [style = bold, label=""];
28->24 [style = bold, label=""];
23->20 [style = bold, label=""];
18->21 [style = bold, label=""];
7->5 [style = bold, label=""];
26->7 [style = bold, label=""];
6->7 [style = bold, label=""];
5->28 [style = bold, label=""];
15->25 [style = bold, label=""];
2->12 [style = dashed, label="0"];
1->0 [style = bold, label=""];
}
