digraph {
0 [style = filled, label = "project.scheduleBuild(0,CAUSE,new LabelAssignmentActionImpl(),new ParametersAction(new StringParameterValue(PARAMETER_NAME,String.valueOf(i))))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "float altLabelQueueLength = altLabel.loadStatistics.queueLength.getLatest(TimeScale.SEC10)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "queueLengthReflectsBuildableItemsAssignedLabel['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "queueLengthReflectsBuildableItemsAssignedLabel['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "float labelQueueLength = label.loadStatistics.queueLength.getLatest(TimeScale.SEC10)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "i < 3@@@10@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "queueLengthReflectsJobsAssignedLabel['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(\"After LoadStatisticsUpdater runs, the queue length load statistic for the label is greater than 0.\",labelQueueLength,greaterThan(0f))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertTrue(\"Initially the rolling queue length for the label is 0.\",label.loadStatistics.queueLength.getLatest(TimeScale.SEC10) == 0f)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(\"The job is still queued as often as it was scheduled.\",3,j.getInstance().getQueue().getItems(project).size())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertTrue(\"Initially the rolling queue length for the alt label is 0.\",altLabel.loadStatistics.queueLength.getLatest(TimeScale.SEC10) == 0f)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "maintainQueueAndForceRunOfLoadStatisticsUpdater(project)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertTrue(\"After assigning an alternate label to the job, the queue length load statistic for the alternate label should be greater than 0.\",altLabelQueueLength > 0f)@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final Label altLabel = Label.get(ALT_LABEL_STRING)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "FreeStyleProject project = createTestProject()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "project.setAssignedLabel(altLabel)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertTrue(\"After assigning an alternate label to the job, the queue length load statistic for the queued builds should decrease.\",labelQueueLengthNew < labelQueueLength)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "i++@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "project.scheduleBuild(0,CAUSE,new ParametersAction(new StringParameterValue(PARAMETER_NAME,String.valueOf(i))))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertTrue(\"After assigning an alternate label to the job, the queue length load statistic for the queued builds should not decrease.\",labelQueueLengthNew >= labelQueueLength)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "project.setAssignedLabel(label)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertTrue(\"After LoadStatisticsUpdater runs, the queue length load statistic for the label is greater than 0.\",labelQueueLength > 0f)@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "int i = 0@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(\"The job is queued as often as it was scheduled.\",3,j.getInstance().getQueue().getItems(project).size())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final Label label = Label.get(LABEL_STRING)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(\"After assigning an alternate label to the job, the queue length load statistic for the \" + \"queued builds should not decrease.\",labelQueueLengthNew,greaterThan(labelQueueLength))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "maintainQueueAndForceRunOfLoadStatisticsUpdater(project)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "float labelQueueLengthNew = label.loadStatistics.queueLength.getLatest(TimeScale.SEC10)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->8 [style = bold, label=""];
9->17 [style = solid, label="labelQueueLength"];
4->3 [style = bold, label=""];
15->14 [style = solid, label="i"];
12->18 [style = solid, label="labelQueueLengthNew"];
12->5 [style = bold, label=""];
15->14 [style = bold, label=""];
14->0 [style = dotted, label="true"];
11->14 [style = bold, label=""];
9->2 [style = bold, label=""];
20->9 [style = bold, label=""];
16->22 [style = solid, label="label"];
0->23 [style = dashed, label="0"];
26->25 [style = bold, label=""];
16->7 [style = bold, label=""];
15->11 [style = solid, label="i"];
5->24 [style = dashed, label="0"];
0->11 [style = bold, label=""];
9->17 [style = bold, label=""];
14->23 [style = dotted, label="true"];
8->6 [style = bold, label=""];
3->15 [style = bold, label=""];
4->6 [style = solid, label="project"];
9->2 [style = solid, label="labelQueueLength"];
7->4 [style = bold, label=""];
12->24 [style = bold, label=""];
26->25 [style = solid, label="altLabelQueueLength"];
5->18 [style = dashed, label="0"];
15->0 [style = solid, label="i"];
2->17 [style = dashed, label="0"];
1->13 [style = bold, label=""];
9->18 [style = solid, label="labelQueueLength"];
27->15 [style = bold, label=""];
11->23 [style = solid, label="i"];
14->1 [style = bold, label=""];
19->16 [style = bold, label=""];
3->27 [style = bold, label=""];
22->3 [style = bold, label=""];
24->26 [style = bold, label=""];
14->0 [style = bold, label=""];
10->16 [style = bold, label=""];
14->23 [style = bold, label=""];
7->8 [style = solid, label="altLabel"];
4->13 [style = solid, label="project"];
12->5 [style = solid, label="labelQueueLengthNew"];
12->18 [style = bold, label=""];
11->14 [style = solid, label="i"];
9->5 [style = solid, label="labelQueueLength"];
21->16 [style = bold, label=""];
14->11 [style = dotted, label="true"];
13->9 [style = bold, label=""];
23->11 [style = bold, label=""];
11->0 [style = solid, label="i"];
12->24 [style = solid, label="labelQueueLengthNew"];
15->23 [style = solid, label="i"];
4->22 [style = bold, label=""];
9->24 [style = solid, label="labelQueueLength"];
2->8 [style = bold, label=""];
13->20 [style = bold, label=""];
6->12 [style = bold, label=""];
}
