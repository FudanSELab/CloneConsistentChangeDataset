digraph {
2 [style = filled, label = "Iterator<RawUnionValue> iterator = function.call(Collections.emptyIterator())@@@49@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "verify(collector).collect(new RawUnionValue(2,four))@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "verify(collector).collect(new RawUnionValue(1,three))@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "function.reduce(Collections.emptyList(),collector)@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "verifyNoMoreInteractions(collector)@@@59@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "outputsAreTaggedCorrectly['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Iterable<RawUnionValue> iterable = null@@@50@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Iterable<RawUnionValue> iterable = null@@@52@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "verify(collector).collect(new RawUnionValue(3,five))@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Map<String,Integer> outputTagMap = ImmutableMap.of(\"one\",1,\"two\",2,\"three\",3)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "StageBundleFactory stageBundleFactory = new StageBundleFactory(){@Override public RemoteBundle getBundle(OutputReceiverFactory receiverFactory,TimerReceiverFactory timerReceiverFactory,StateRequestHandler stateRequestHandler,BundleProgressHandler progressHandler){return new RemoteBundle(){@Override public String getId(){return \"bundle-id\"}@Override public Map<String,FnDataReceiver> getInputReceivers(){return ImmutableMap.of(\"input\",null)}@Override public Map<KV<String,String>,FnDataReceiver<Timer>> getTimerReceivers(){return Collections.emptyMap()}@Override public void requestProgress(){throw new UnsupportedOperationException()}@Override public void split(double fractionOfRemainder){throw new UnsupportedOperationException()}@Override public void close(){if (once) {return}receiverFactory.create(\"one\").accept(three)receiverFactory.create(\"two\").accept(four)receiverFactory.create(\"three\").accept(five)once = true}}}@Override public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor getProcessBundleDescriptor(){return processBundleDescriptor}@Override public void close(){}}@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "FlinkExecutableStageFunction<Integer> function = getFunction(outputTagMap)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "SparkExecutableStageFunction<Integer,?> function = getFunction(outputTagMap)@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory)@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "function.open(new Configuration())@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "isStateful@@@50@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "outputsAreTaggedCorrectly['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "List<WindowedValue<Integer>> inputs = new ArrayList<>()@@@49@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "Iterator<RawUnionValue> iterator = function.call(inputs.iterator())@@@51@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(iterable,contains(new RawUnionValue(1,three),new RawUnionValue(2,four),new RawUnionValue(3,five)))@@@51@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "inputs.add(WindowedValue.valueInGlobalWindow(0))@@@50@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "function.mapPartition(Collections.emptyList(),collector)@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "outputsAreTaggedCorrectly['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertThat(iterable,contains(new RawUnionValue(1,three),new RawUnionValue(2,four),new RawUnionValue(3,five)))@@@53@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
9->3 [style = solid, label="five"];
17->26 [style = bold, label=""];
26->21 [style = bold, label=""];
18->20 [style = bold, label=""];
23->19 [style = bold, label=""];
14->16 [style = bold, label=""];
24->23 [style = bold, label=""];
2->7 [style = bold, label=""];
6->13 [style = solid, label="three"];
5->24 [style = solid, label="outputTagMap"];
10->9 [style = bold, label=""];
9->0 [style = solid, label="five"];
19->22 [style = bold, label=""];
8->6 [style = bold, label=""];
11->6 [style = bold, label=""];
1->24 [style = bold, label=""];
3->1 [style = bold, label=""];
4->2 [style = bold, label=""];
12->13 [style = bold, label=""];
6->10 [style = bold, label=""];
12->13 [style = solid, label="iterable"];
16->12 [style = bold, label=""];
22->26 [style = bold, label=""];
15->14 [style = bold, label=""];
21->18 [style = bold, label=""];
19->17 [style = bold, label=""];
6->0 [style = solid, label="three"];
7->0 [style = bold, label=""];
9->13 [style = solid, label="five"];
7->0 [style = solid, label="iterable"];
3->1 [style = solid, label="stageBundleFactory"];
5->4 [style = solid, label="outputTagMap"];
1->4 [style = bold, label=""];
10->13 [style = solid, label="four"];
10->3 [style = solid, label="four"];
19->17 [style = dotted, label="true"];
5->3 [style = bold, label=""];
19->22 [style = dotted, label="false"];
10->0 [style = solid, label="four"];
4->15 [style = bold, label=""];
9->5 [style = bold, label=""];
25->6 [style = bold, label=""];
10->21 [style = solid, label="four"];
9->18 [style = solid, label="five"];
6->3 [style = solid, label="three"];
6->26 [style = solid, label="three"];
4->24 [style = dashed, label="0"];
}
