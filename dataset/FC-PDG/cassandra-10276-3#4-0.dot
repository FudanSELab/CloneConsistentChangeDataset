digraph {
4 [style = filled, label = "Set<InetAddress> toAdd = new HashSet<>()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "toAdd.add(InetAddressAndPort.getByName(\"127.0.0.3\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "toAdd.add(InetAddress.getByName(\"127.0.0.2\"))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "allStreams.addAll(streams)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(toAdd,sfo.allStreams().iterator().next())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(1,Iterables.size(sfo.allStreams()))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(toAdd,allStreams)@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "toAdd.forEach(null)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Set<InetAddressAndPort> allStreams = new HashSet<>()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Set<InetAddress> allStreams = new HashSet<>()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "toAdd.add(InetAddress.getByName(\"127.0.0.3\"))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "addAllDiffingTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "addAllMatchingTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(3,Iterables.size(sfo.allStreams()))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "toAdd.add(InetAddressAndPort.getByName(\"127.0.0.1\"))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "toAdd.add(InetAddressAndPort.getByName(\"127.0.0.2\"))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertEquals(1,streams.size())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "StreamFromOptions sfo = new StreamFromOptions(new MockDiffs(true),range(0,10))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "addAllDiffingTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Set<InetAddressAndPort> toAdd = new HashSet<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "toAdd.add(InetAddress.getByName(\"127.0.0.1\"))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "StreamFromOptions sfo = new StreamFromOptions(new MockDiffs(false),range(0,10))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->13 [style = dashed, label="0"];
0->9 [style = bold, label=""];
15->13 [style = bold, label=""];
10->20 [style = bold, label=""];
11->3 [style = solid, label="allStreams"];
21->19 [style = bold, label=""];
16->10 [style = bold, label=""];
2->6 [style = bold, label=""];
17->9 [style = bold, label=""];
2->3 [style = bold, label=""];
9->4 [style = bold, label=""];
11->6 [style = bold, label=""];
12->15 [style = bold, label=""];
12->3 [style = solid, label="toAdd"];
8->20 [style = dashed, label="0"];
8->14 [style = bold, label=""];
14->3 [style = solid, label="allStreams"];
13->16 [style = bold, label=""];
4->7 [style = bold, label=""];
4->12 [style = dashed, label="0"];
6->2 [style = bold, label=""];
9->19 [style = dashed, label="0"];
20->18 [style = bold, label=""];
5->1 [style = bold, label=""];
7->5 [style = bold, label=""];
4->3 [style = solid, label="toAdd"];
10->8 [style = bold, label=""];
1->16 [style = dashed, label="0"];
11->14 [style = dashed, label="0"];
7->15 [style = dashed, label="0"];
9->12 [style = bold, label=""];
19->4 [style = bold, label=""];
4->18 [style = solid, label="toAdd"];
1->10 [style = bold, label=""];
8->11 [style = bold, label=""];
14->6 [style = bold, label=""];
}
