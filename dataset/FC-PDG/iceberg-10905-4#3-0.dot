digraph {
20 [style = filled, label = "Assert.assertEquals(\"value1\",table.properties().get(\"key1\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Table table = catalog.loadTable(tableIdent)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "replaceTxn.commitTransaction()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "String location = temp.newFolder(\"tbl\").toString()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testReplaceTxnBuilder['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "createTxn.commitTransaction()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(table.spec().isUnpartitioned())@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Transaction createTxn = catalog.buildTable(tableIdent,SCHEMA).withPartitionSpec(PARTITION_SPEC).withProperty(\"key1\",\"value1\").createOrReplaceTransaction()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testReplaceTxnBuilder['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "final DataFile fileA = DataFiles.builder(PARTITION_SPEC).withPath(\"/path/to/data-a.parquet\").withFileSizeInBytes(0).withPartitionPath(\"data_bucket=0\").withRecordCount(2).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Schema schema = new Schema(required(1,\"id\",Types.IntegerType.get(),\"unique ID\"),required(2,\"data\",Types.StringType.get()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testCreateTableBuilder['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "table = catalog.loadTable(tableIdent)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(location,table.location())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(\"Table should have a spec with one void field\",v1Expected,table.spec())@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "Assert.assertEquals(2,table.schema().columns().size())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "createTxn.newAppend().appendFile(fileA).commit()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "PartitionSpec spec = PartitionSpec.builderFor(schema).bucket(\"data\",16).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "TableIdentifier tableIdent = TableIdentifier.of(\"db\",\"ns1\",\"ns2\",\"tbl\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "{catalog.dropTable(tableIdent)}@@@15@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertNotNull(table.currentSnapshot())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(\"value2\",table.properties().get(\"key2\"))@@@17@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Assert.assertNull(table.currentSnapshot())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(\"value2\",table.properties().get(\"key2\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(\"value1\",table.properties().get(\"key1\"))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "PartitionSpec v1Expected = PartitionSpec.builderFor(table.schema()).alwaysNull(\"data\",\"data_bucket\").withSpecId(1).build()@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "TableIdentifier tableIdent = TableIdentifier.of(DB_NAME,\"tbl\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(1,table.spec().fields().size())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Transaction replaceTxn = catalog.buildTable(tableIdent,SCHEMA).withProperty(\"key2\",\"value2\").replaceTransaction()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Table table = catalog.buildTable(tableIdent,schema).withPartitionSpec(spec).withLocation(location).withProperty(\"key1\",\"value1\").withProperty(\"key2\",\"value2\").create()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28->21 [style = bold, label=""];
12->0 [style = bold, label=""];
23->2 [style = bold, label=""];
26->24 [style = bold, label=""];
20->23 [style = bold, label=""];
22->19 [style = bold, label=""];
18->15 [style = solid, label="v1Expected"];
13->7 [style = bold, label=""];
2->4 [style = bold, label=""];
14->3 [style = bold, label=""];
27->25 [style = bold, label=""];
10->9 [style = bold, label=""];
25->20 [style = bold, label=""];
26->2 [style = solid, label="tableIdent"];
5->1 [style = bold, label=""];
15->4 [style = bold, label=""];
4->17 [style = bold, label=""];
8->21 [style = dashed, label="0"];
0->10 [style = bold, label=""];
9->28 [style = dashed, label="0"];
8->11 [style = bold, label=""];
14->7 [style = solid, label="tableIdent"];
6->14 [style = bold, label=""];
19->29 [style = bold, label=""];
3->12 [style = bold, label=""];
16->14 [style = bold, label=""];
11->13 [style = bold, label=""];
24->21 [style = solid, label="location"];
5->18 [style = bold, label=""];
21->27 [style = bold, label=""];
7->5 [style = bold, label=""];
9->8 [style = bold, label=""];
24->28 [style = bold, label=""];
14->9 [style = solid, label="tableIdent"];
1->2 [style = bold, label=""];
29->26 [style = bold, label=""];
18->15 [style = bold, label=""];
}
