digraph {
21 [style = filled, label = "RexNode e@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "RexNode e@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "final List<Interval> intervals = DruidDateTimeUtils.createInterval(e,\"UTC\")@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final List<TimeUnitRange> timeUnits = Ordering.natural().sortedCopy(DateRangeRules.extractTimeUnits(e))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "e = e.accept(new DateRangeRules.ExtractShuttle(f.rexBuilder,timeUnit,operandRanges))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Matcher<String> intervalMatcher@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Matcher<String> intervalMatcher@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Fixture f@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "List<Interval> intervals = DruidDateTimeUtils.createInterval(e2,\"UTC\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "checkDateRange['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(intervals,notNullValue())@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "e = DateRangeRules.replaceTimeUnits(f.rexBuilder,e)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertThat(intervals.toString(),intervalMatcher)@@@10@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "throw new AssertionError(\"null interval\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final RexNode e2 = f.simplify.simplify(e)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "checkDateRangeNoSimplify['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "final List<Interval> intervals = DruidDateTimeUtils.createInterval(e,\"UTC\")@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "intervals == null@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "checkDateRangeNoSimplify['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "RexNode e@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(intervals,notNullValue())@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "final Map<String,RangeSet<Calendar>> operandRanges = new HashMap<>()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(intervals.toString(),intervalMatcher)@@@6@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Fixture f@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(intervals.toString(),intervalMatcher)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Matcher<String> intervalMatcher@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
1->5 [style = bold, label=""];
14->16 [style = bold, label=""];
16->15 [style = bold, label=""];
17->25 [style = bold, label=""];
3->4 [style = solid, label="e"];
0->7 [style = solid, label="operandRanges"];
21->4 [style = solid, label="e"];
7->17 [style = bold, label=""];
19->18 [style = bold, label=""];
17->25 [style = solid, label="e2"];
9->0 [style = bold, label=""];
20->24 [style = dotted, label="true"];
8->1 [style = solid, label="intervals"];
7->8 [style = solid, label="e"];
24->22 [style = solid, label="intervalMatcher"];
16->15 [style = solid, label="e"];
20->0 [style = bold, label=""];
15->11 [style = solid, label="intervals"];
19->18 [style = dotted, label="true"];
2->5 [style = solid, label="intervalMatcher"];
11->12 [style = bold, label=""];
20->21 [style = dotted, label="true"];
7->8 [style = bold, label=""];
9->6 [style = dotted, label="true"];
14->10 [style = dotted, label="true"];
4->7 [style = bold, label=""];
14->13 [style = dotted, label="true"];
8->1 [style = bold, label=""];
18->22 [style = bold, label=""];
15->11 [style = bold, label=""];
7->17 [style = solid, label="e"];
0->4 [style = bold, label=""];
6->24 [style = dashed, label="0"];
9->2 [style = dotted, label="true"];
20->23 [style = dotted, label="true"];
25->19 [style = bold, label=""];
13->16 [style = solid, label="e"];
9->3 [style = dotted, label="true"];
1->25 [style = dashed, label="0"];
19->22 [style = bold, label=""];
10->12 [style = solid, label="intervalMatcher"];
25->19 [style = solid, label="intervals"];
14->6 [style = dotted, label="true"];
}
