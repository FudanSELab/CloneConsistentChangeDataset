digraph {
12 [style = filled, label = "bindToMapShouldBindToMapValue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "ResolvableType nestedType = ResolvableType.forClassWithGenerics(,ResolvableType.forClass(),STRING_INTEGER_MAP.getType())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "source.put(\"foo.nested.far.bin\",\"4\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "bindToMapShouldBindToMapValue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "ResolvableType type = ResolvableType.forClassWithGenerics(,ResolvableType.forClass(),STRING_INTEGER_MAP.getType())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "source.put(\"foo.bar.bin\",\"2\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(result.get(\"far\")).containsEntry(\"baz\",3).containsEntry(\"bin\",4)@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Bindable<Map<String,Map<String,Map<String,Integer>>>> target = Bindable.of(type)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(result).hasSize(2)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "source.put(\"foo.far.bin\",\"4\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(result.get(\"bar\")).containsEntry(\"baz\",1).containsEntry(\"bin\",2)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "source.put(\"foo.nested.bar.baz\",\"1\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "source.put(\"faf.nested.far.bin\",\"x\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "bindToMapShouldBindNestedMapValue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Map<String,Map<String,Integer>> nested = result.get(\"nested\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "this.sources.add(source)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "source.put(\"faf.far.bin\",\"x\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "this.sources.add(source)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "MockConfigurationPropertySource source = new MockConfigurationPropertySource()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Map<String,Map<String,Map<String,Integer>>> result = this.binder.bind(\"foo\",target).get()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(nested.get(\"far\")).containsEntry(\"baz\",3).containsEntry(\"bin\",4)@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertThat(nested).hasSize(2)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "source.put(\"foo.nested.bar.bin\",\"2\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(nested.get(\"bar\")).containsEntry(\"baz\",1).containsEntry(\"bin\",2)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "source.put(\"foo.far.baz\",\"3\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "MockConfigurationPropertySource source = new MockConfigurationPropertySource()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ResolvableType type = ResolvableType.forClassWithGenerics(,ResolvableType.forClass(),nestedType)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "source.put(\"foo.nested.far.baz\",\"3\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
6->3 [style = bold, label=""];
5->8 [style = bold, label=""];
0->9 [style = bold, label=""];
25->1 [style = bold, label=""];
7->1 [style = bold, label=""];
22->15 [style = bold, label=""];
20->17 [style = bold, label=""];
16->18 [style = bold, label=""];
0->7 [style = solid, label="source"];
12->11 [style = bold, label=""];
23->21 [style = solid, label="nestedType"];
1->20 [style = bold, label=""];
11->23 [style = dashed, label="0"];
13->11 [style = bold, label=""];
6->22 [style = dashed, label="0"];
4->7 [style = bold, label=""];
9->6 [style = bold, label=""];
1->20 [style = dashed, label="0"];
9->19 [style = dashed, label="0"];
4->25 [style = dashed, label="0"];
3->10 [style = bold, label=""];
26->16 [style = bold, label=""];
11->0 [style = bold, label=""];
21->9 [style = bold, label=""];
14->23 [style = bold, label=""];
8->2 [style = bold, label=""];
23->21 [style = bold, label=""];
9->1 [style = solid, label="source"];
24->25 [style = bold, label=""];
15->24 [style = bold, label=""];
10->4 [style = bold, label=""];
9->19 [style = bold, label=""];
3->15 [style = dashed, label="0"];
21->20 [style = solid, label="type"];
17->27 [style = bold, label=""];
19->22 [style = bold, label=""];
10->24 [style = dashed, label="0"];
27->26 [style = bold, label=""];
}
