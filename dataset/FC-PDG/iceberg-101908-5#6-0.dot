digraph {
23 [style = filled, label = "Assert.assertArrayEquals(\"Last delete should apply to seq 6\",Arrays.copyOfRange(DELETE_FILES,3,4),index.forDataFile(6,unpartitionedFile))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "Assert.assertEquals(\"No deletes should apply to FILE_A with a different specId\",0,index.forDataFile(0,unpartitionedFileA).length)@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertEquals(\"No deletes should apply to FILE_C, no indexed delete files\",0,index.forDataFile(0,FILE_C).length)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "DataFile partitionedFileA = FILE_A.copy()@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertArrayEquals(\"All deletes should apply to seq 3\",DELETE_FILES,index.forDataFile(3,UNPARTITIONED_FILE))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Assert.assertArrayEquals(\"No deletes should apply to seq 7\",new DataFile((((,index.forDataFile(7,UNPARTITIONED_FILE))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "DeleteFileIndex index = new DeleteFileIndex(ImmutableMap.of(partSpec.specId(),partSpec,1,SPEC),new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c8b5ec,DELETE_FILES,ImmutableMap.of())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "DeleteFileIndex index = new DeleteFileIndex(ImmutableMap.of(SPEC.specId(),SPEC,1,PartitionSpec.unpartitioned()),null,null,ImmutableMap.of(Pair.of(SPEC.specId(),StructLikeWrapper.forType(SPEC.partitionType()).set(FILE_A.partition())),Pair.of(new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c8b6a4,DELETE_FILES),Pair.of(SPEC.specId(),StructLikeWrapper.forType(SPEC.partitionType()).set(FILE_C.partition())),Pair.of(new long((((,new DeleteFile(((()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "PartitionSpec partSpec = PartitionSpec.unpartitioned()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "DeleteFileIndex index = new DeleteFileIndex(ImmutableMap.of(PartitionSpec.unpartitioned().specId(),PartitionSpec.unpartitioned(),1,SPEC),new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c8b54f,DELETE_FILES,ImmutableMap.of())@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "DataFile unpartitionedFileA = FILE_A.copy()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertArrayEquals(\"No deletes should apply to seq 7\",new DataFile((((,index.forDataFile(7,FILE_A))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertArrayEquals(\"No deletes should apply to seq 10\",new DataFile((((,index.forDataFile(10,FILE_A))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 4\",Arrays.copyOfRange(DELETE_FILES,1,4),index.forDataFile(4,unpartitionedFile))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Assert.assertArrayEquals(\"No deletes should apply to seq 7\",new DataFile((((,index.forDataFile(7,unpartitionedFile))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "((BaseFile<?>)partitionedFileA).setSpecId(1)@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertArrayEquals(\"All global deletes should apply to a partitioned file\",DELETE_FILES,index.forDataFile(0,partitionedFileA))@@@17@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 5\",Arrays.copyOfRange(DELETE_FILES,1,4),index.forDataFile(5,UNPARTITIONED_FILE))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "Assert.assertEquals(\"No deletes should apply to FILE_B, partition not in index\",0,index.forDataFile(0,FILE_B).length)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertArrayEquals(\"Last delete should apply to seq 6\",Arrays.copyOfRange(DELETE_FILES,3,4),index.forDataFile(6,FILE_A))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "testPartitionedDeleteIndex['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "DataFile partitionedFileA = FILE_A.copy()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 4\",Arrays.copyOfRange(DELETE_FILES,1,4),index.forDataFile(4,UNPARTITIONED_FILE))@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertArrayEquals(\"All deletes should apply to seq 0\",DELETE_FILES,index.forDataFile(0,unpartitionedFile))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "((BaseFile<?>)partitionedFileA).setSpecId(1)@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "DataFile unpartitionedFile = unpartitionedFile(partSpec)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 5\",Arrays.copyOfRange(DELETE_FILES,1,4),index.forDataFile(5,unpartitionedFile))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 4\",Arrays.copyOfRange(DELETE_FILES,1,4),index.forDataFile(4,FILE_A))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertArrayEquals(\"No deletes should apply to seq 10\",new DataFile((((,index.forDataFile(10,UNPARTITIONED_FILE))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 5\",Arrays.copyOfRange(DELETE_FILES,1,4),index.forDataFile(5,FILE_A))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "((BaseFile<?>)unpartitionedFileA).setSpecId(1)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertArrayEquals(\"All deletes should apply to seq 3\",DELETE_FILES,index.forDataFile(3,unpartitionedFile))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "Assert.assertArrayEquals(\"All deletes should apply to seq 3\",DELETE_FILES,index.forDataFile(3,FILE_A))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertArrayEquals(\"No deletes should apply to seq 10\",new DataFile((((,index.forDataFile(10,unpartitionedFile))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "testUnpartitionedDeletes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "Assert.assertArrayEquals(\"All deletes should apply to seq 0\",DELETE_FILES,index.forDataFile(0,FILE_A))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testUnpartitionedDeletes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertArrayEquals(\"Last delete should apply to seq 6\",Arrays.copyOfRange(DELETE_FILES,3,4),index.forDataFile(6,UNPARTITIONED_FILE))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Assert.assertArrayEquals(\"All deletes should apply to seq 0\",DELETE_FILES,index.forDataFile(0,UNPARTITIONED_FILE))@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
24->19 [style = solid, label="unpartitionedFile"];
15->13 [style = bold, label=""];
25->28 [style = bold, label=""];
9->11 [style = bold, label=""];
5->20 [style = solid, label="partitionedFileA"];
24->14 [style = solid, label="unpartitionedFile"];
12->24 [style = solid, label="partSpec"];
12->22 [style = solid, label="partSpec"];
11->15 [style = dashed, label="0"];
11->33 [style = dashed, label="0"];
3->37 [style = dashed, label="0"];
31->32 [style = bold, label=""];
38->29 [style = bold, label=""];
9->28 [style = dashed, label="0"];
24->21 [style = solid, label="unpartitionedFile"];
1->19 [style = dashed, label="0"];
4->31 [style = dashed, label="0"];
30->34 [style = bold, label=""];
5->18 [style = bold, label=""];
35->27 [style = solid, label="unpartitionedFileA"];
1->32 [style = dashed, label="0"];
2->30 [style = dashed, label="0"];
0->17 [style = dashed, label="0"];
3->4 [style = bold, label=""];
1->7 [style = bold, label=""];
11->2 [style = bold, label=""];
24->23 [style = solid, label="unpartitionedFile"];
32->38 [style = bold, label=""];
21->5 [style = bold, label=""];
6->5 [style = bold, label=""];
13->17 [style = bold, label=""];
18->20 [style = bold, label=""];
2->0 [style = bold, label=""];
26->27 [style = bold, label=""];
36->25 [style = bold, label=""];
28->33 [style = bold, label=""];
10->8 [style = bold, label=""];
14->23 [style = bold, label=""];
34->37 [style = bold, label=""];
37->31 [style = bold, label=""];
17->14 [style = bold, label=""];
24->17 [style = solid, label="unpartitionedFile"];
23->19 [style = bold, label=""];
7->38 [style = dashed, label="0"];
7->6 [style = bold, label=""];
8->9 [style = bold, label=""];
33->30 [style = bold, label=""];
0->34 [style = dashed, label="0"];
8->25 [style = dashed, label="0"];
24->13 [style = solid, label="unpartitionedFile"];
24->15 [style = solid, label="unpartitionedFile"];
4->1 [style = bold, label=""];
7->5 [style = solid, label="partitionedFileA"];
29->35 [style = bold, label=""];
22->24 [style = bold, label=""];
3->14 [style = dashed, label="0"];
4->23 [style = dashed, label="0"];
16->12 [style = bold, label=""];
35->26 [style = bold, label=""];
12->22 [style = bold, label=""];
24->15 [style = bold, label=""];
19->21 [style = bold, label=""];
}
