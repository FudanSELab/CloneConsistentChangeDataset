digraph {
7 [style = filled, label = "List<ResultRow> expectedResults = Arrays.asList(makeRow(query,\"1970-01-01T00:00:00.000Z\",\"marketalias\",\"upfront\",\"rows\",186L),makeRow(query,\"1970-01-01T00:00:00.000Z\",\"marketalias\",\"total_market\",\"rows\",186L))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "expectedException.expectMessage(\"Limit push down when sorting by a post aggregator is not supported.\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setGranularity(QueryRunnerTestHelper.allGran).setDimensions(new DefaultDimensionSpec(QueryRunnerTestHelper.marketDimension,\"marketalias\")).setInterval(QueryRunnerTestHelper.fullOnIntervalSpec).setLimitSpec(new DefaultLimitSpec(Collections.singletonList(new OrderByColumnSpec(\"constant\",OrderByColumnSpec.Direction.DESCENDING)),2)).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount).setPostAggregatorSpecs(Collections.singletonList(new ConstantPostAggregator(\"constant\",1))).overrideContext(ImmutableMap.of(GroupByQueryConfig.CTX_KEY_FORCE_LIMIT_PUSH_DOWN,true)).build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testGroupByLimitPushDown['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setGranularity(QueryRunnerTestHelper.allGran).setDimensions(new DefaultDimensionSpec(QueryRunnerTestHelper.marketDimension,\"marketalias\")).setInterval(QueryRunnerTestHelper.fullOnIntervalSpec).setLimitSpec(new DefaultLimitSpec(Collections.singletonList(new OrderByColumnSpec(\"marketalias\",OrderByColumnSpec.Direction.DESCENDING)),2)).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount).overrideContext(ImmutableMap.of(GroupByQueryConfig.CTX_KEY_FORCE_LIMIT_PUSH_DOWN,true)).build()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "testGroupByLimitPushDownPostAggNotSupported['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "expectedException.expect()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"order-limit\")@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testGroupByLimitPushDown['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "return@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"marketalias\",\"upfront\",\"rows\",186L),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"marketalias\",\"total_market\",\"rows\",186L))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0->7 [style = solid, label="query"];
7->2 [style = solid, label="expectedResults"];
9->2 [style = bold, label=""];
0->6 [style = solid, label="query"];
6->9 [style = dashed, label="0"];
0->9 [style = solid, label="query"];
11->12 [style = bold, label=""];
1->2 [style = solid, label="expectedResults"];
5->4 [style = dotted, label="true"];
4->0 [style = bold, label=""];
0->7 [style = bold, label=""];
6->2 [style = bold, label=""];
7->9 [style = bold, label=""];
3->5 [style = bold, label=""];
12->10 [style = bold, label=""];
1->6 [style = bold, label=""];
8->5 [style = bold, label=""];
5->0 [style = bold, label=""];
10->13 [style = bold, label=""];
0->1 [style = bold, label=""];
5->4 [style = bold, label=""];
13->14 [style = solid, label="query"];
9->2 [style = solid, label="results"];
1->7 [style = dashed, label="0"];
4->10 [style = dashed, label="0"];
13->14 [style = bold, label=""];
6->2 [style = solid, label="results"];
}
