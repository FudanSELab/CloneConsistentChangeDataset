digraph {
14 [style = filled, label = "testQuotaMetrics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "client.respond(produceResponse(tp,offset,Errors.NONE,100 * i))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "i < 4@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "sender.run(time.milliseconds())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "int v = 0@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "v++@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(300,maxMetric.value(),EPSILON)@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "testQuotaMetrics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "i++@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "int i = 1@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "accumulator.append(tp0,0L,\"key\".getBytes(),\"value\".getBytes(),null,MAX_BLOCK_TIMEOUT)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "MemoryRecordsBuilder builder = MemoryRecords.builder(ByteBuffer.allocate(1024),CompressionType.NONE,TimestampType.CREATE_TIME)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "int i = 1@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "subscriptions.assignFromUser(singleton(tp))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(3,records.size())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(metrics.metricName(\"fetch-throttle-time-avg\",metricGroup,\"\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(metrics.metricName(\"produce-throttle-time-max\",METRIC_GROUP,\"\"))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(metrics.metricName(\"fetch-throttle-time-max\",metricGroup,\"\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "builder.appendWithOffset((long)i * 3 + v,Record.NO_TIMESTAMP,\"key\".getBytes(),String.format(\"value-%d\",v).getBytes())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(300,maxMetric.value(),EPS)@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(metrics.metricName(\"produce-throttle-time-avg\",METRIC_GROUP,\"\"))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "client.respond(produceResponse(tp0,offset,Errors.NONE,100 * i))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "final long offset = 0@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "sender.run(time.milliseconds())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "v < 3@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(200,avgMetric.value(),EPSILON)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "subscriptions.seek(tp,0)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "List<ConsumerRecord<byte((,byte((>> records = fetchRecords(builder.build(),Errors.NONE,100L,100 * i).get(tp)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testQuotaMetrics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "i++@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23->20 [style = solid, label="v"];
31->20 [style = solid, label="v"];
8->19 [style = dashed, label="0"];
12->9 [style = solid, label="i"];
23->20 [style = bold, label=""];
9->12 [style = dotted, label="true"];
9->0 [style = dotted, label="true"];
1->8 [style = bold, label=""];
5->9 [style = bold, label=""];
28->30 [style = bold, label=""];
18->25 [style = dotted, label="true"];
20->29 [style = bold, label=""];
11->15 [style = dashed, label="0"];
2->1 [style = bold, label=""];
12->15 [style = solid, label="i"];
9->29 [style = solid, label="i"];
0->12 [style = bold, label=""];
9->11 [style = dotted, label="true"];
9->18 [style = dashed, label="0"];
4->15 [style = bold, label=""];
3->16 [style = dashed, label="0"];
18->21 [style = dotted, label="true"];
8->6 [style = bold, label=""];
30->9 [style = bold, label=""];
5->11 [style = solid, label="i"];
29->23 [style = bold, label=""];
9->10 [style = bold, label=""];
18->20 [style = dotted, label="true"];
12->9 [style = bold, label=""];
31->29 [style = solid, label="v"];
3->4 [style = bold, label=""];
3->29 [style = solid, label="i"];
17->19 [style = bold, label=""];
9->16 [style = bold, label=""];
3->18 [style = solid, label="i"];
14->7 [style = bold, label=""];
25->31 [style = bold, label=""];
3->18 [style = bold, label=""];
20->21 [style = bold, label=""];
22->3 [style = bold, label=""];
7->5 [style = bold, label=""];
11->0 [style = bold, label=""];
1->17 [style = dashed, label="0"];
9->18 [style = bold, label=""];
20->29 [style = dotted, label="true"];
21->22 [style = bold, label=""];
6->27 [style = dashed, label="0"];
13->7 [style = bold, label=""];
5->15 [style = solid, label="i"];
7->15 [style = solid, label="offset"];
15->0 [style = bold, label=""];
19->27 [style = bold, label=""];
18->3 [style = dotted, label="true"];
24->17 [style = bold, label=""];
18->22 [style = dotted, label="true"];
20->23 [style = dotted, label="true"];
18->25 [style = bold, label=""];
9->4 [style = dotted, label="true"];
9->3 [style = bold, label=""];
10->2 [style = bold, label=""];
12->11 [style = solid, label="i"];
18->8 [style = bold, label=""];
9->15 [style = dotted, label="true"];
26->28 [style = bold, label=""];
31->23 [style = solid, label="v"];
9->3 [style = dotted, label="true"];
16->4 [style = bold, label=""];
31->20 [style = bold, label=""];
4->11 [style = bold, label=""];
9->16 [style = dotted, label="true"];
18->31 [style = dotted, label="true"];
2->24 [style = dashed, label="0"];
7->11 [style = solid, label="offset"];
5->12 [style = solid, label="i"];
23->29 [style = solid, label="v"];
9->18 [style = solid, label="i"];
9->3 [style = solid, label="i"];
5->9 [style = solid, label="i"];
8->24 [style = bold, label=""];
}
