digraph {
15 [style = filled, label = "indexTask.addToContext(Tasks.STORE_COMPACTION_STATE_KEY,true)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Assert.assertEquals(DEFAULT_COMPACTION_STATE,segments.get(i).getLastCompactionState())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(TEST_ROWS,rowsFromSegment)@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(new NumberedShardSpec(0,1),segments.get(i).getShardSpec())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final List<DataSegment> segments = resultPair.rhs@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertTrue(resultPair.lhs.isSuccess())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "i++@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(new NumberedOverwriteShardSpec(32768,0,2,(short)1,(short)1),segments.get(i).getShardSpec())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "List<String> rowsFromSegment = getCSVFormatRowsFromSegments(segments)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(new NumberedShardSpec(0,1),segments.get(i).getShardSpec())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final Builder builder = new Builder(DATA_SOURCE,segmentLoaderFactory,RETRY_POLICY_FACTORY)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "lockGranularity == LockGranularity.SEGMENT@@@15@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "i < 3@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final CompactionTask compactionTask = builder.interval(Intervals.of(\"2014-01-01/2014-01-02\")).build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testRunWithDynamicPartitioning['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final Pair<TaskStatus,List<DataSegment>> resultPair = runTask(indexTask)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1),segments.get(i).getInterval())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "IndexTask indexTask = new IndexTask(null,null,new IndexTask.IndexIngestionSpec(new DataSchema(\"test\",getObjectMapper().convertValue(new StringInputRowParser(DEFAULT_PARSE_SPEC,null),),new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a12337,new UniformGranularitySpec(Granularities.HOUR,Granularities.MINUTE,null),null,getObjectMapper()),new IndexTask.IndexIOConfig(new IngestSegmentFirehoseFactory(DATA_SOURCE,Intervals.of(\"2014-01-01/2014-01-02\"),null,null,null,null,null,getIndexIO(),coordinatorClient,segmentLoaderFactory,RETRY_POLICY_FACTORY),false),IndexTaskTest.createTuningConfig(5000000,null,null,Long.MAX_VALUE,null,false,true)),null)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testRunRegularIndexTaskWithIngestSegmentFirehose['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "testRunRegularIndexTaskWithIngestSegmentFirehose['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final Pair<TaskStatus,List<DataSegment>> resultPair = runTask(compactionTask)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "int i = 0@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "runIndexTask()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(new NumberedOverwriteShardSpec(32768,0,2,(short)1,(short)1),segments.get(i).getShardSpec())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(3,segments.size())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->6 [style = bold, label=""];
19->3 [style = bold, label=""];
12->0 [style = bold, label=""];
9->19 [style = bold, label=""];
23->22 [style = bold, label=""];
4->3 [style = solid, label="i"];
4->12 [style = solid, label="i"];
5->8 [style = bold, label=""];
1->10 [style = bold, label=""];
24->18 [style = bold, label=""];
8->4 [style = bold, label=""];
3->1 [style = dotted, label="true"];
12->0 [style = solid, label="i"];
23->22 [style = solid, label="rowsFromSegment"];
4->0 [style = solid, label="i"];
3->12 [style = solid, label="i"];
21->17 [style = bold, label=""];
1->7 [style = dotted, label="true"];
12->0 [style = dotted, label="true"];
9->1 [style = dotted, label="true"];
1->10 [style = dotted, label="false"];
14->24 [style = bold, label=""];
0->3 [style = bold, label=""];
11->15 [style = bold, label=""];
12->23 [style = bold, label=""];
14->11 [style = bold, label=""];
0->3 [style = solid, label="i"];
9->19 [style = dotted, label="false"];
3->6 [style = bold, label=""];
6->9 [style = bold, label=""];
3->0 [style = dotted, label="true"];
1->3 [style = bold, label=""];
12->9 [style = dotted, label="true"];
3->12 [style = bold, label=""];
5->23 [style = solid, label="segments"];
12->3 [style = bold, label=""];
12->3 [style = solid, label="i"];
16->14 [style = bold, label=""];
7->0 [style = bold, label=""];
0->6 [style = solid, label="i"];
3->0 [style = solid, label="i"];
3->6 [style = dotted, label="true"];
12->6 [style = solid, label="i"];
15->13 [style = bold, label=""];
11->13 [style = bold, label=""];
4->12 [style = bold, label=""];
18->21 [style = solid, label="compactionTask"];
18->21 [style = bold, label=""];
2->14 [style = bold, label=""];
1->7 [style = bold, label=""];
12->6 [style = dotted, label="true"];
20->14 [style = bold, label=""];
3->9 [style = dotted, label="true"];
9->1 [style = bold, label=""];
11->13 [style = solid, label="indexTask"];
17->5 [style = bold, label=""];
13->5 [style = bold, label=""];
10->0 [style = bold, label=""];
12->3 [style = dotted, label="true"];
}
