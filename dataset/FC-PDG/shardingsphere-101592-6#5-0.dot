digraph {
4 [style = filled, label = "null != ctx.logicalOperator()@@@9@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "final ExprContext ctx@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "null != ctx.XOR()@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "return new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "ExpressionSegment right = (ExpressionSegment)visit(ctx.expr(1))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "return new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)),(ExpressionSegment)visit(ctx.expr(1)),ctx.logicalOperator().getText(),text)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "return createBinaryOperationExpression(ctx,ctx.orOperator().getText())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "return visit(ctx.booleanPrimary())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "return new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "null != ctx.andOperator()@@@9@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "return visit(ctx.expr(0))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "visitExpr['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "visitExpr['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(),ctx.stop.getStopIndex()))@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "visitExpr['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "null != ctx.booleanPrimary()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "null != ctx.LP_()@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "return new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "null != ctx.logicalOperator()@@@13@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "String operator = \"XOR\"@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "return new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@16@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "null != ctx.orOperator()@@@12@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "ExpressionSegment left = (ExpressionSegment)visit(ctx.expr(0))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(),ctx.stop.getStopIndex()))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String operator = ctx.logicalOperator().getText()@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "return createBinaryOperationExpression(ctx,ctx.andOperator().getText())@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10->11 [style = solid, label="operator"];
0->3 [style = bold, label=""];
4->9 [style = bold, label=""];
4->5 [style = dotted, label="true"];
6->3 [style = bold, label=""];
5->10 [style = bold, label=""];
1->25 [style = dotted, label="true"];
11->25 [style = solid, label="text"];
12->18 [style = solid, label="ctx"];
17->18 [style = dotted, label="true"];
22->19 [style = bold, label=""];
4->1 [style = dotted, label="true"];
3->21 [style = dashed, label="0"];
4->10 [style = dotted, label="true"];
2->6 [style = bold, label=""];
25->23 [style = bold, label=""];
6->21 [style = bold, label=""];
12->13 [style = solid, label="ctx"];
1->11 [style = dotted, label="true"];
3->14 [style = bold, label=""];
4->11 [style = dotted, label="true"];
4->7 [style = dotted, label="true"];
8->14 [style = bold, label=""];
1->11 [style = solid, label="text"];
21->22 [style = dotted, label="true"];
14->17 [style = bold, label=""];
15->6 [style = bold, label=""];
6->0 [style = bold, label=""];
0->21 [style = bold, label=""];
7->11 [style = solid, label="left"];
20->6 [style = bold, label=""];
11->9 [style = bold, label=""];
22->5 [style = solid, label="left"];
3->4 [style = bold, label=""];
7->5 [style = solid, label="text"];
14->13 [style = dotted, label="true"];
4->7 [style = bold, label=""];
1->23 [style = bold, label=""];
1->11 [style = bold, label=""];
19->24 [style = bold, label=""];
5->1 [style = bold, label=""];
13->17 [style = bold, label=""];
7->5 [style = bold, label=""];
21->24 [style = dotted, label="true"];
21->22 [style = bold, label=""];
19->5 [style = solid, label="right"];
3->8 [style = bold, label=""];
21->19 [style = dotted, label="true"];
21->7 [style = dotted, label="true"];
21->1 [style = bold, label=""];
2->12 [style = dotted, label="true"];
15->12 [style = dotted, label="true"];
4->14 [style = dashed, label="0"];
20->12 [style = dotted, label="true"];
6->0 [style = dotted, label="true"];
8->4 [style = bold, label=""];
14->13 [style = bold, label=""];
5->11 [style = solid, label="right"];
3->8 [style = dotted, label="true"];
10->1 [style = bold, label=""];
24->7 [style = bold, label=""];
10->24 [style = dashed, label="0"];
17->18 [style = bold, label=""];
17->16 [style = bold, label=""];
11->25 [style = bold, label=""];
24->5 [style = solid, label="operator"];
21->5 [style = dotted, label="true"];
18->16 [style = bold, label=""];
}
