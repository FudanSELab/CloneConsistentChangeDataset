digraph {
28 [style = filled, label = "joinNodeAndRun(new JoinRequest(node2,Optional.of(new Join(node2,node0,newTerm,initialTerm,initialVersion))))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "SimpleFuture futNode0 = joinNodeAsync(new JoinRequest(node0,Optional.of(new Join(node0,node0,newTerm,initialTerm,initialVersion))))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "deterministicTaskQueue.runAllRunnableTasks()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "DiscoveryNode node1 = newNode(1,true)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "long initialVersion = randomLongBetween(1,10)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "DiscoveryNode node0 = newNode(0,true)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(isLocalNodeElectedMaster())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testJoinAccumulation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testJoinWithHigherTermButBetterStateStillElectsMasterThroughSelfJoin['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "FutureUtils.get(futNode0)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertTrue(clusterStateHasNode(node1))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testJoinWithHigherTermButBetterStateStillElectsMasterThroughSelfJoin['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "long newTerm = initialTerm + randomLongBetween(1,10)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertFalse(futNode1.isDone())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "joinNodeAndRun(new JoinRequest(node1,newTerm,Optional.of(new Join(node1,node0,newTerm,initialTerm,higherVersion))))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "long higherVersion = initialVersion + randomLongBetween(1,10)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertFalse(futNode0.isDone())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertTrue(clusterStateHasNode(node2))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "deterministicTaskQueue.runAllRunnableTasks()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "FutureUtils.get(futNode1)@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "setupFakeMasterServiceAndCoordinator(initialTerm,initialState(node0,initialTerm,initialVersion,new VotingConfiguration(Collections.singleton(node2.getId()))))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "setupFakeMasterServiceAndCoordinator(initialTerm,initialState(node0,initialTerm,initialVersion,new VotingConfiguration(Collections.singleton(node0.getId()))))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertTrue(isLocalNodeElectedMaster())@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "SimpleFuture futNode1 = joinNodeAsync(new JoinRequest(node1,Optional.of(new Join(node1,node0,newTerm,initialTerm,initialVersion))))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "DiscoveryNode node2 = newNode(2,true)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "long initialTerm = randomLongBetween(1,10)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "joinNodeAndRun(new JoinRequest(node1,Optional.of(new Join(node1,node0,newTerm,initialTerm,higherVersion))))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8->1 [style = solid, label="initialTerm"];
24->28 [style = solid, label="node2"];
4->25 [style = solid, label="node1"];
14->25 [style = bold, label=""];
4->24 [style = bold, label=""];
28->15 [style = bold, label=""];
9->16 [style = solid, label="newTerm"];
16->27 [style = bold, label=""];
21->19 [style = bold, label=""];
26->17 [style = bold, label=""];
0->3 [style = solid, label="initialVersion"];
4->21 [style = solid, label="node1"];
10->28 [style = solid, label="node0"];
8->25 [style = solid, label="initialTerm"];
15->21 [style = bold, label=""];
16->13 [style = solid, label="futNode0"];
3->5 [style = solid, label="higherVersion"];
4->11 [style = solid, label="node1"];
4->5 [style = solid, label="node1"];
0->25 [style = solid, label="initialVersion"];
3->11 [style = bold, label=""];
25->22 [style = solid, label="futNode1"];
3->11 [style = solid, label="higherVersion"];
20->14 [style = bold, label=""];
0->23 [style = solid, label="initialVersion"];
2->9 [style = bold, label=""];
0->28 [style = solid, label="initialVersion"];
24->19 [style = solid, label="node2"];
8->5 [style = solid, label="initialTerm"];
8->11 [style = solid, label="initialTerm"];
9->25 [style = solid, label="newTerm"];
8->9 [style = solid, label="initialTerm"];
10->25 [style = solid, label="node0"];
18->28 [style = bold, label=""];
9->16 [style = bold, label=""];
10->5 [style = solid, label="node0"];
10->16 [style = solid, label="node0"];
8->0 [style = bold, label=""];
3->5 [style = bold, label=""];
12->10 [style = bold, label=""];
10->23 [style = solid, label="node0"];
8->16 [style = solid, label="initialTerm"];
0->23 [style = bold, label=""];
19->13 [style = bold, label=""];
5->11 [style = dashed, label="0"];
8->28 [style = solid, label="initialTerm"];
9->11 [style = solid, label="newTerm"];
0->16 [style = solid, label="initialVersion"];
0->1 [style = bold, label=""];
6->10 [style = bold, label=""];
17->18 [style = bold, label=""];
10->1 [style = solid, label="node0"];
25->26 [style = bold, label=""];
10->11 [style = solid, label="node0"];
8->23 [style = solid, label="initialTerm"];
10->4 [style = bold, label=""];
9->3 [style = bold, label=""];
4->8 [style = bold, label=""];
5->7 [style = bold, label=""];
29->10 [style = bold, label=""];
1->2 [style = bold, label=""];
23->2 [style = bold, label=""];
13->22 [style = bold, label=""];
24->8 [style = bold, label=""];
9->28 [style = solid, label="newTerm"];
1->23 [style = dashed, label="0"];
27->20 [style = bold, label=""];
0->1 [style = solid, label="initialVersion"];
11->7 [style = bold, label=""];
3->16 [style = dashed, label="0"];
9->5 [style = solid, label="newTerm"];
}
