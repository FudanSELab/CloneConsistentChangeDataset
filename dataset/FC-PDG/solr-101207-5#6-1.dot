digraph {
7 [style = filled, label = "byte(( buffer = \"hello\".getBytes(Charset.defaultCharset())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "output.flush()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testFlushSmallBuffer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "output.close()@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"Flushing a small frame of an S3OutputStream should not impact data written\",\"hello, world!\",read)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "S3OutputStream output = new S3OutputStream(s3,\"flush-small\",BUCKET)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "output.write(buffer)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "String read = IOUtils.toString(input,Charset.defaultCharset())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(\"hello\",read)@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testWriteSmallBuffer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "InputStream input = s3.getObject(null)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "output.write(buffer)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "InputStream input = s3.getObject(null)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "buffer = \", world!\".getBytes(Charset.defaultCharset())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "S3OutputStream output = new S3OutputStream(s3,\"small-buffer\",BUCKET)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "assertTrue(buffer.length < S3OutputStream.PART_SIZE)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testWriteSmallBuffer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11->16 [style = bold, label=""];
8->15 [style = bold, label=""];
2->6 [style = bold, label=""];
2->1 [style = bold, label=""];
4->13 [style = bold, label=""];
8->3 [style = bold, label=""];
16->14 [style = solid, label="buffer"];
1->10 [style = dashed, label="0"];
7->6 [style = solid, label="buffer"];
9->7 [style = bold, label=""];
2->10 [style = bold, label=""];
3->4 [style = bold, label=""];
10->6 [style = bold, label=""];
12->7 [style = bold, label=""];
4->0 [style = bold, label=""];
6->4 [style = bold, label=""];
4->13 [style = solid, label="read"];
1->6 [style = bold, label=""];
7->2 [style = bold, label=""];
15->4 [style = solid, label="input"];
6->11 [style = bold, label=""];
0->13 [style = dashed, label="0"];
6->8 [style = bold, label=""];
15->4 [style = bold, label=""];
4->0 [style = solid, label="read"];
3->15 [style = dashed, label="0"];
5->7 [style = bold, label=""];
16->14 [style = bold, label=""];
3->4 [style = solid, label="input"];
14->8 [style = bold, label=""];
}
