digraph {
23 [style = filled, label = "String rowKey = \"_row_key\" + ComplexAvroKeyGenerator.DEFAULT_RECORD_KEY_SEPARATOR + record.get(\"_row_key\").toString() + \",\" + \"timestamp\" + ComplexAvroKeyGenerator.DEFAULT_RECORD_KEY_SEPARATOR + record.get(\"timestamp\").toString()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "HoodieKey hoodieKey = compositeKeyGenerator.getKey(record)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "String partitionPath = \"\"@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY,\"\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY,\"_row_key,timestamp\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(compositeKeyGenerator.getRecordKeyFields().size(),1)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(partitionPath,hoodieKey.getPartitionPath())@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String rowKey = record.get(\"_row_key\").toString()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY.key(),\"timestamp\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testMultipleValueKeyGeneratorNonPartitioned['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ComplexKeyGenerator compositeKeyGenerator = new ComplexKeyGenerator(properties)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(rowKey,hoodieKey.getRecordKey())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(compositeKeyGenerator.getPartitionPathFields().size(),0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY,\"timestamp\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "GenericRecord record = dataGenerator.generateGenericRecords(1).get(0)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "String partitionPath = record.get(\"timestamp\").toString()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testSingleValueKeyGenerator['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY.key(),\"_row_key\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(\"_row_key:\" + rowKey,hoodieKey.getRecordKey())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(compositeKeyGenerator.getRecordKeyFields().size(),2)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(compositeKeyGenerator.getPartitionPathFields().size(),1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TypedProperties properties = new TypedProperties()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY,\"_row_key\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "testSingleValueKeyGenerator['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0->3 [style = bold, label=""];
4->10 [style = bold, label=""];
14->16 [style = bold, label=""];
16->3 [style = bold, label=""];
17->8 [style = bold, label=""];
5->6 [style = solid, label="partitionPath"];
0->16 [style = dashed, label="0"];
5->24 [style = dashed, label="0"];
18->12 [style = bold, label=""];
8->14 [style = bold, label=""];
9->22 [style = dashed, label="0"];
1->18 [style = dashed, label="0"];
20->3 [style = bold, label=""];
8->3 [style = solid, label="properties"];
19->6 [style = bold, label=""];
3->22 [style = bold, label=""];
0->20 [style = dashed, label="0"];
24->6 [style = solid, label="partitionPath"];
3->9 [style = bold, label=""];
23->24 [style = bold, label=""];
2->0 [style = bold, label=""];
22->18 [style = bold, label=""];
13->19 [style = bold, label=""];
21->20 [style = bold, label=""];
10->5 [style = bold, label=""];
2->14 [style = dashed, label="0"];
8->2 [style = bold, label=""];
12->4 [style = bold, label=""];
2->21 [style = dashed, label="0"];
7->19 [style = dashed, label="0"];
13->7 [style = bold, label=""];
5->13 [style = bold, label=""];
4->13 [style = solid, label="record"];
23->19 [style = solid, label="rowKey"];
7->6 [style = bold, label=""];
1->12 [style = bold, label=""];
8->21 [style = bold, label=""];
11->8 [style = bold, label=""];
9->1 [style = bold, label=""];
10->23 [style = dashed, label="0"];
15->8 [style = bold, label=""];
10->7 [style = solid, label="rowKey"];
4->23 [style = bold, label=""];
24->13 [style = bold, label=""];
}
