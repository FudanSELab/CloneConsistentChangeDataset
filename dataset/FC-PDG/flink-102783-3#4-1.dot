digraph {
10 [style = filled, label = "testHarness.processElement(new StreamRecord<>(0,0L))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "doAnswer(new Answer<TriggerResult>(){@Override public TriggerResult answer(InvocationOnMock invocation){Trigger.TriggerContext context = (Trigger.TriggerContext)invocation.getArguments()(3(timeAdaptor.registerTimer(context,0L)context.getPartitionedState(valueStateDescriptor).update(\"hello\")return TriggerResult.CONTINUE}}).when(mockTrigger).onElement(Matchers.anyObject(),anyLong(),anyTimeWindow(),anyTriggerContext())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(4,timeAdaptor.numTimers(testHarness))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "timeAdaptor.advanceTime(testHarness,0L)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "timeAdaptor.advanceTime(testHarness,Long.MIN_VALUE)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(4,testHarness.numKeyedStateEntries())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(4,testHarness.numKeyedStateEntries())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(2,timeAdaptor.numTimers(testHarness))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "WindowAssigner<Integer,TimeWindow> mockAssigner = mockTimeWindowAssigner()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Arrays.asList(new TimeWindow(2,4),new TimeWindow(0,2)))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Integer,Void> testHarness = createWindowOperator(mockAssigner,mockTrigger,0L,intListDescriptor,mockWindowFunction)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testOnTimeContinue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "verify(mockWindowFunction,times(1)).apply(eq(0),eq(new TimeWindow(0,2)),intIterable(0),WindowOperatorContractTest.anyCollector())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(0,testHarness.numKeyedStateEntries())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "timeAdaptor.shouldContinueOnTime(mockTrigger)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(0,testHarness.extractOutputStreamRecords().size())@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(2,timeAdaptor.numTimers(testHarness))@@@32@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "timeAdaptor.setIsEventTime(mockAssigner)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final TimeDomainAdaptor timeAdaptor@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Trigger<Integer,TimeWindow> mockTrigger = mockTrigger()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "InternalWindowFunction<Iterable<Integer>,Void,Integer,TimeWindow> mockWindowFunction = mockWindowFunction()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "verify(mockWindowFunction,times(1)).apply(eq(0),eq(new TimeWindow(2,4)),intIterable(0),WindowOperatorContractTest.anyCollector())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "final TimeDomainAdaptor timeAdaptor@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(0,testHarness.extractOutputStreamRecords().size())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testOnTimeFireAndPurge['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(2,testHarness.numKeyedStateEntries())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "verify(mockTrigger,never()).clear(anyTimeWindow(),anyTriggerContext())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "verify(mockWindowFunction,times(2)).apply(eq(0),anyTimeWindow(),anyIntIterable(),WindowOperatorContractTest.anyCollector())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testOnTimeContinue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Integer,Void> testHarness = createWindowOperator(mockAssigner,mockTrigger,0L,mockWindowFunction)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testHarness.open()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "timeAdaptor.shouldFireAndPurgeOnTime(mockTrigger)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->12 [style = solid, label="testHarness"];
14->7 [style = solid, label="testHarness"];
27->1 [style = bold, label=""];
23->30 [style = bold, label=""];
16->8 [style = bold, label=""];
6->18 [style = bold, label=""];
22->0 [style = dotted, label="true"];
19->20 [style = bold, label=""];
11->6 [style = bold, label=""];
14->26 [style = solid, label="testHarness"];
9->17 [style = bold, label=""];
1->11 [style = solid, label="mockAssigner"];
2->9 [style = bold, label=""];
7->4 [style = bold, label=""];
15->0 [style = dotted, label="true"];
17->19 [style = bold, label=""];
30->29 [style = bold, label=""];
19->25 [style = bold, label=""];
1->11 [style = bold, label=""];
20->10 [style = bold, label=""];
29->28 [style = bold, label=""];
21->5 [style = bold, label=""];
24->26 [style = bold, label=""];
12->2 [style = bold, label=""];
21->12 [style = solid, label="testHarness"];
10->16 [style = bold, label=""];
13->3 [style = bold, label=""];
5->12 [style = bold, label=""];
3->7 [style = bold, label=""];
20->25 [style = dashed, label="0"];
27->31 [style = dotted, label="true"];
21->7 [style = solid, label="testHarness"];
6->25 [style = solid, label="mockTrigger"];
18->14 [style = solid, label="mockWindowFunction"];
0->31 [style = dashed, label="0"];
21->8 [style = solid, label="testHarness"];
13->23 [style = bold, label=""];
1->21 [style = solid, label="mockAssigner"];
28->24 [style = bold, label=""];
25->10 [style = bold, label=""];
14->21 [style = dashed, label="0"];
22->1 [style = bold, label=""];
18->21 [style = bold, label=""];
6->14 [style = solid, label="mockTrigger"];
1->14 [style = solid, label="mockAssigner"];
6->21 [style = solid, label="mockTrigger"];
18->21 [style = solid, label="mockWindowFunction"];
14->13 [style = solid, label="testHarness"];
18->14 [style = bold, label=""];
21->13 [style = solid, label="testHarness"];
8->13 [style = bold, label=""];
14->8 [style = solid, label="testHarness"];
6->20 [style = solid, label="mockTrigger"];
14->5 [style = bold, label=""];
15->1 [style = bold, label=""];
}
