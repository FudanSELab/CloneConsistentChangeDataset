digraph {
21 [style = filled, label = "builder.getBuilder(0).setOptionalString(\"foo\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "builder.addMessage(TestAllTypes.newBuilder().setOptionalInt32(0).build())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(2,list.size())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "assertThat(mockParent.getInvalidationCount()).isEqualTo(1)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testGoingBackAndForth['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "builder.addMessage(TestAllTypes.newBuilder().setOptionalInt32(1).build())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(list).hasSize(2)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertThat(list.get(1).getOptionalInt32()).isEqualTo(1)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(1,builder.getMessage(1).getOptionalInt32())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertIsUnmodifiable(list)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(list.get(0).getOptionalInt32()).isEqualTo(0)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "testGoingBackAndForth['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "RepeatedFieldBuilderV3<TestAllTypes,TestAllTypes.Builder,TestAllTypesOrBuilder> builder = newRepeatedFieldBuilderV3(mockParent)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertIsUnmodifiable(list)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(list.get(0).getOptionalInt32()).isEqualTo(0)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertEquals(2,list.size())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(1,mockParent.getInvalidationCount())@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertEquals(0,mockParent.getInvalidationCount())@@@16@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertThat(list.get(1).getOptionalInt32()).isEqualTo(1)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "testBasicUse['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(1,list.get(1).getOptionalInt32())@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "List<TestAllTypes> list = builder.build()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(1,mockParent.getInvalidationCount())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "assertThat(builder.getMessage(1).getOptionalInt32()).isEqualTo(1)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "List<TestAllTypes> list2 = builder.build()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertThat(list).hasSize(2)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertThat(builder.getMessage(0).getOptionalInt32()).isEqualTo(0)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(\"foo\",list.get(0).getOptionalString())@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertEquals(0,builder.getMessage(0).getOptionalInt32())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertSame(list,list2)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(1,list.get(1).getOptionalInt32())@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "list = builder.build()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "TestUtil.MockBuilderParent mockParent = new TestUtil.MockBuilderParent()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(0,list.get(0).getOptionalInt32())@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "assertThat(mockParent.getInvalidationCount()).isEqualTo(1)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "assertThat(list.get(0).getOptionalString()).isEqualTo(\"foo\")@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(0,list.get(0).getOptionalInt32())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(mockParent.getInvalidationCount()).isEqualTo(0)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->16 [style = bold, label=""];
17->5 [style = bold, label=""];
25->28 [style = bold, label=""];
27->32 [style = bold, label=""];
11->16 [style = solid, label="list"];
10->15 [style = bold, label=""];
23->5 [style = bold, label=""];
15->28 [style = dashed, label="0"];
2->1 [style = bold, label=""];
21->33 [style = bold, label=""];
28->11 [style = bold, label=""];
4->13 [style = bold, label=""];
3->14 [style = bold, label=""];
30->26 [style = bold, label=""];
16->29 [style = bold, label=""];
19->29 [style = dashed, label="0"];
11->37 [style = solid, label="list"];
4->27 [style = dashed, label="0"];
6->31 [style = dashed, label="0"];
1->18 [style = bold, label=""];
7->0 [style = bold, label=""];
9->22 [style = dashed, label="0"];
0->26 [style = dashed, label="0"];
32->34 [style = bold, label=""];
12->24 [style = bold, label=""];
33->12 [style = bold, label=""];
8->24 [style = dashed, label="0"];
9->7 [style = bold, label=""];
11->9 [style = bold, label=""];
16->19 [style = bold, label=""];
12->14 [style = solid, label="list"];
22->30 [style = bold, label=""];
29->21 [style = bold, label=""];
13->32 [style = dashed, label="0"];
26->16 [style = bold, label=""];
5->2 [style = bold, label=""];
3->34 [style = dashed, label="0"];
5->2 [style = solid, label="mockParent"];
21->20 [style = bold, label=""];
15->11 [style = bold, label=""];
18->10 [style = bold, label=""];
13->3 [style = bold, label=""];
35->37 [style = bold, label=""];
12->8 [style = bold, label=""];
7->30 [style = dashed, label="0"];
20->12 [style = bold, label=""];
14->31 [style = bold, label=""];
18->25 [style = bold, label=""];
11->22 [style = bold, label=""];
36->5 [style = bold, label=""];
34->14 [style = bold, label=""];
37->19 [style = bold, label=""];
8->4 [style = bold, label=""];
16->35 [style = bold, label=""];
20->33 [style = dashed, label="0"];
24->27 [style = bold, label=""];
14->6 [style = bold, label=""];
10->25 [style = dashed, label="0"];
35->37 [style = solid, label="list2"];
19->21 [style = bold, label=""];
}
