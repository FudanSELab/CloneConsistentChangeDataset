digraph {
2 [style = filled, label = "assertTrue(subscriptions.isFetchable(tp0))@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(5,subscriptions.position(tp0).longValue())@@@18@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "subscriptions.requestOffsetReset(tp0)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertTrue(subscriptions.isFetchable(tp0))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testUpdateFetchPositionResetToDefaultOffset['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "consumerClient.pollNoWakeup()@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertTrue(subscriptions.isFetchable(tp0))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "client.prepareResponse(new MockClient.RequestMatcher(){@Override public boolean matches(AbstractRequest body){ListOffsetRequest request = (ListOffsetRequest)bodyreturn request.isolationLevel() == isolationLevel}},listOffsetResponse(Errors.NONE,1L,5L))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "IsolationLevel isolationLevel@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertFalse(subscriptions.isOffsetResetNeeded(tp0))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assignFromUser(singleton(tp0))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertEquals(5,subscriptions.position(tp0).longValue())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "subscriptions.assignFromUser(singleton(tp0))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertFalse(subscriptions.isOffsetResetNeeded(tp0))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testListOffsetsSendsIsolationLevel['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(5,subscriptions.position(tp0).longValue())@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "consumerClient.pollNoWakeup()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testListOffsetsSendsIsolationLevel['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "subscriptions.requestOffsetReset(tp0,OffsetResetStrategy.LATEST)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "fetcher.resetOffsetsIfNeeded()@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "client.prepareResponse(listOffsetRequestMatcher(ListOffsetRequest.EARLIEST_TIMESTAMP),listOffsetResponse(Errors.NONE,1L,5L))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "client.prepareResponse(null,listOffsetResponse(Errors.NONE,1L,5L))@@@6@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Fetcher<byte((,byte((> fetcher = createFetcher(subscriptions,new Metrics(),new ByteArrayDeserializer(),new ByteArrayDeserializer(),Integer.MAX_VALUE,isolationLevel)@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "fetcher.resetOffsetsIfNeeded()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "buildFetcher(OffsetResetStrategy.EARLIEST,new ByteArrayDeserializer(),new ByteArrayDeserializer(),Integer.MAX_VALUE,isolationLevel)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6->3 [style = bold, label=""];
5->8 [style = bold, label=""];
3->6 [style = dashed, label="0"];
16->11 [style = bold, label=""];
9->0 [style = bold, label=""];
15->7 [style = bold, label=""];
17->1 [style = bold, label=""];
18->23 [style = bold, label=""];
16->13 [style = dotted, label="true"];
10->14 [style = bold, label=""];
3->1 [style = dashed, label="0"];
12->15 [style = bold, label=""];
22->21 [style = bold, label=""];
1->18 [style = bold, label=""];
6->17 [style = dashed, label="0"];
2->9 [style = bold, label=""];
4->0 [style = bold, label=""];
24->20 [style = bold, label=""];
7->5 [style = bold, label=""];
23->24 [style = bold, label=""];
1->6 [style = bold, label=""];
8->2 [style = bold, label=""];
3->7 [style = bold, label=""];
11->10 [style = bold, label=""];
0->1 [style = bold, label=""];
13->11 [style = solid, label="isolationLevel"];
20->19 [style = bold, label=""];
21->17 [style = bold, label=""];
14->6 [style = bold, label=""];
6->12 [style = bold, label=""];
}
