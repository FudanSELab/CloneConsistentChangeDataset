digraph {
61 [style = filled, label = "assertThat(header.getHeaders().v2().get(headerKey),hasItems(headerValue))@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "int bytesConsumed2 = decoder.decode(releasable2,null)@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final Header header = (Header)fragments.get(0)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "transportMessage = new TestResponse(randomAlphaOfLength(100))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(uncompressedBytes,content)@@@58@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertEquals(scheme,compressionScheme)@@@59@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "int bytesConsumed = decoder.decode(releasable1,null)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "threadContext.putHeader(headerKey,headerValue)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final ReleasableBytesReference releasable2 = ReleasableBytesReference.wrap(bytes2)@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "testDecode['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertEquals(header.getHeaders().v1().get(headerKey),headerValue)@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(header.getHeaders().v1().get(headerKey),headerValue)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(uncompressedBytes,content)@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final BytesReference uncompressedBytes = out.bytes()@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "assertEquals(messageBytes,content)@@@52@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "fragments.clear()@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertFalse(header.isCompressed())@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "final BytesReference totalBytes = message.serialize(new BytesStreamOutput())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "message = new OutboundMessage.Response(threadContext,new TestResponse(randomAlphaOfLength(100)),Version.CURRENT,requestId,false,null)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(action,header.getActionName())@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertFalse(header.isHandshake())@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final Object content = fragments.get(0)@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "int totalHeaderSize = TcpHeader.headerSize(Version.CURRENT) + totalBytes.getInt(TcpHeader.VARIABLE_HEADER_SIZE_POSITION)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "assertEquals(1,releasable2.refCount())@@@61@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "assertEquals(totalHeaderSize,bytesConsumed)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "testCompressedDecode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "Compression.Scheme scheme = randomFrom(Compression.Scheme.DEFLATE,Compression.Scheme.LZ4)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "final Object content = fragments.get(1)@@@57@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "assertEquals(1,releasable1.refCount())@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertEquals(2,releasable2.refCount())@@@53@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "message = new OutboundMessage.Request(threadContext,transportMessage,Version.CURRENT,action,requestId,false,scheme)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "transportMessage.writeTo(out)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertTrue(header.isCompressed())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "OutboundMessage message@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "long requestId = randomNonNegativeLong()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "testCompressedDecode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final BytesReference messageBytes = totalBytes.slice(totalHeaderSize,totalBytes.length() - totalHeaderSize)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "final Object compressionScheme = fragments.get(0)@@@56@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
57 [style = filled, label = "final Object endMarker = fragments.get(2)@@@58@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "assertTrue(header.isResponse())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "isRequest@@@35@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "assertEquals(InboundDecoder.END_CONTENT,endMarker)@@@54@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "TransportMessage transportMessage@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final BytesStreamOutput out = new BytesStreamOutput()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "boolean isRequest = randomBoolean()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "final BytesReference uncompressedBytes = out.bytes()@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "isRequest@@@15@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final ReleasableBytesReference releasable1 = ReleasableBytesReference.wrap(totalBytes)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "transportMessage = new TestRequest(randomAlphaOfLength(100))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "message = new OutboundMessage.Request(threadContext,new TestRequest(randomAlphaOfLength(100)),Version.CURRENT,action,requestId,false,null)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "message = new OutboundMessage.Response(threadContext,transportMessage,Version.CURRENT,requestId,false,scheme)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(Version.CURRENT,header.getVersion())@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final BytesReference bytes2 = totalBytes.slice(bytesConsumed,totalBytes.length() - bytesConsumed)@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(1,releasable2.refCount())@@@59@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertFalse(header.needsToReadVariableHeader())@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "assertEquals(InboundDecoder.END_CONTENT,endMarker)@@@62@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "final String headerValue = randomAlphaOfLength(20)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "final Object endMarker = fragments.get(1)@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(requestId,header.getRequestId())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(totalBytes.length() - totalHeaderSize,bytesConsumed2)@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "String action = \"test-request\"@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertTrue(header.isRequest())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "InboundDecoder decoder = new InboundDecoder(Version.CURRENT,PageCacheRecycler.NON_RECYCLING_INSTANCE)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "final ArrayList<Object> fragments = new ArrayList<>()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "final String headerKey = randomAlphaOfLength(10)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertTrue(header.isRequest())@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertTrue(header.isResponse())@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "isRequest@@@8@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "threadContext.addResponseHeader(headerKey,headerValue)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45->10 [style = solid, label="endMarker"];
14->3 [style = bold, label=""];
54->56 [style = bold, label=""];
45->56 [style = dashed, label="0"];
14->25 [style = bold, label=""];
45->65 [style = bold, label=""];
22->26 [style = solid, label="transportMessage"];
23->51 [style = dashed, label="0"];
30->61 [style = solid, label="headerKey"];
44->19 [style = bold, label=""];
40->15 [style = bold, label=""];
11->29 [style = bold, label=""];
47->37 [style = bold, label=""];
21->1 [style = dotted, label="false"];
29->34 [style = bold, label=""];
6->32 [style = solid, label="releasable1"];
38->42 [style = bold, label=""];
21->38 [style = dotted, label="true"];
21->38 [style = bold, label=""];
11->29 [style = solid, label="bytesConsumed2"];
48->67 [style = solid, label="requestId"];
21->42 [style = dotted, label="false"];
3->47 [style = solid, label="totalHeaderSize"];
21->1 [style = bold, label=""];
32->39 [style = solid, label="bytesConsumed"];
64->21 [style = dotted, label="true"];
67->68 [style = bold, label=""];
51->10 [style = solid, label="uncompressedBytes"];
44->59 [style = dashed, label="0"];
18->0 [style = bold, label=""];
0->67 [style = dotted, label="true"];
6->32 [style = bold, label=""];
10->50 [style = bold, label=""];
5->10 [style = bold, label=""];
0->59 [style = dotted, label="false"];
56->10 [style = solid, label="content"];
25->28 [style = bold, label=""];
48->19 [style = solid, label="requestId"];
16->37 [style = dashed, label="0"];
27->12 [style = bold, label=""];
64->12 [style = bold, label=""];
0->44 [style = dotted, label="false"];
12->21 [style = bold, label=""];
60->14 [style = solid, label="totalHeaderSize"];
31->42 [style = solid, label="headerValue"];
34->47 [style = bold, label=""];
26->14 [style = bold, label=""];
64->58 [style = dotted, label="false"];
30->33 [style = solid, label="headerKey"];
3->13 [style = solid, label="totalHeaderSize"];
1->42 [style = bold, label=""];
41->24 [style = dotted, label="true"];
23->3 [style = bold, label=""];
3->63 [style = bold, label=""];
56->57 [style = bold, label=""];
4->11 [style = solid, label="releasable2"];
9->8 [style = bold, label=""];
24->18 [style = bold, label=""];
62->20 [style = bold, label=""];
43->13 [style = bold, label=""];
59->68 [style = bold, label=""];
31->24 [style = solid, label="headerValue"];
21->33 [style = dotted, label="true"];
35->0 [style = bold, label=""];
22->67 [style = dashed, label="0"];
47->54 [style = bold, label=""];
8->26 [style = solid, label="action"];
14->39 [style = solid, label="totalBytes"];
64->61 [style = dotted, label="false"];
5->45 [style = dashed, label="0"];
43->13 [style = solid, label="bytesConsumed"];
0->19 [style = dotted, label="false"];
46->33 [style = bold, label=""];
32->20 [style = solid, label="bytesConsumed"];
31->41 [style = bold, label=""];
11->29 [style = solid, label="bytes2"];
38->46 [style = bold, label=""];
30->24 [style = solid, label="headerKey"];
37->45 [style = bold, label=""];
0->44 [style = bold, label=""];
15->64 [style = bold, label=""];
36->35 [style = bold, label=""];
0->26 [style = dotted, label="true"];
48->2 [style = solid, label="requestId"];
60->29 [style = solid, label="totalHeaderSize"];
27->40 [style = dashed, label="0"];
55->9 [style = bold, label=""];
2->17 [style = bold, label=""];
22->26 [style = bold, label=""];
58->61 [style = bold, label=""];
23->16 [style = solid, label="uncompressedBytes"];
30->38 [style = solid, label="headerKey"];
9->41 [style = solid, label="isRequest"];
47->65 [style = solid, label="endMarker"];
21->46 [style = dotted, label="true"];
8->38 [style = solid, label="action"];
25->28 [style = solid, label="out"];
17->40 [style = bold, label=""];
34->37 [style = solid, label="content"];
3->6 [style = bold, label=""];
45->16 [style = bold, label=""];
20->4 [style = solid, label="bytes2"];
63->6 [style = bold, label=""];
31->33 [style = solid, label="headerValue"];
34->47 [style = solid, label="bytesConsumed2"];
31->7 [style = solid, label="headerValue"];
31->38 [style = solid, label="headerValue"];
60->14 [style = bold, label=""];
19->14 [style = bold, label=""];
66->9 [style = bold, label=""];
48->40 [style = solid, label="requestId"];
30->31 [style = bold, label=""];
28->23 [style = bold, label=""];
61->42 [style = bold, label=""];
7->18 [style = bold, label=""];
16->5 [style = bold, label=""];
48->26 [style = solid, label="requestId"];
32->39 [style = bold, label=""];
30->42 [style = solid, label="headerKey"];
42->62 [style = bold, label=""];
48->30 [style = bold, label=""];
64->58 [style = bold, label=""];
68->6 [style = solid, label="totalBytes"];
0->59 [style = bold, label=""];
13->2 [style = bold, label=""];
9->21 [style = solid, label="isRequest"];
35->26 [style = solid, label="scheme"];
68->60 [style = bold, label=""];
29->34 [style = solid, label="releasable2"];
41->7 [style = bold, label=""];
33->20 [style = bold, label=""];
41->24 [style = bold, label=""];
48->59 [style = solid, label="requestId"];
42->20 [style = bold, label=""];
39->43 [style = bold, label=""];
43->11 [style = solid, label="bytesConsumed"];
39->43 [style = solid, label="releasable1"];
31->61 [style = solid, label="headerValue"];
37->54 [style = dashed, label="0"];
8->67 [style = solid, label="action"];
18->36 [style = bold, label=""];
52->10 [style = bold, label=""];
44->19 [style = solid, label="transportMessage"];
64->12 [style = dotted, label="true"];
9->64 [style = solid, label="isRequest"];
28->51 [style = bold, label=""];
0->67 [style = bold, label=""];
37->16 [style = solid, label="content"];
35->19 [style = solid, label="scheme"];
9->46 [style = solid, label="isRequest"];
41->7 [style = dotted, label="false"];
20->4 [style = bold, label=""];
0->22 [style = dotted, label="true"];
57->52 [style = bold, label=""];
14->37 [style = solid, label="messageBytes"];
8->48 [style = bold, label=""];
51->3 [style = bold, label=""];
60->39 [style = solid, label="totalHeaderSize"];
0->22 [style = bold, label=""];
54->52 [style = solid, label="compressionScheme"];
64->38 [style = dotted, label="true"];
57->53 [style = solid, label="endMarker"];
30->7 [style = solid, label="headerKey"];
8->12 [style = solid, label="action"];
4->11 [style = bold, label=""];
15->27 [style = bold, label=""];
49->9 [style = bold, label=""];
50->53 [style = bold, label=""];
35->52 [style = solid, label="scheme"];
9->0 [style = solid, label="isRequest"];
}
