digraph {
15 [style = filled, label = "assertThat(q,booleanQuery(disjunctionOf(boosted(termQuery(field,\"kimba\"),0.75f),boosted(phraseQuery(field,\"simba leo\"),0.8f),boosted(phraseQuery(field,\"panthera leo\"),0.9f))))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "assertEquals(\"((t_as_same_term_boosted_foo:\"big cat\")^0.8 (t_as_same_term_boosted_foo:bagheera)^0.9 (t_as_same_term_boosted_foo:\"panthera pardus\")^0.85 t_as_same_term_boosted_foo:leopard)\" + \" ((t_as_same_term_boosted_foo:\"panthera leo\")^0.9 (t_as_same_term_boosted_foo:\"simba leo\")^0.8 (t_as_same_term_boosted_foo:kimba)^0.75)\",q.toString())@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "q = QParser.getParser(\"leopard\",req(params(\"df\",\"t_as_same_term_boosted_foo\"))).getQuery()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"((t_pick_best_boosted_foo:\"big cat\")^0.8 | (t_pick_best_boosted_foo:bagheera)^0.9 | (t_pick_best_boosted_foo:\"panthera pardus\")^0.85 | t_pick_best_boosted_foo:leopard)\" + \" ((t_pick_best_boosted_foo:\"panthera leo\")^0.9 | (t_pick_best_boosted_foo:\"simba leo\")^0.8 | (t_pick_best_boosted_foo:kimba)^0.75)\",q.toString())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(\"((t_as_same_term_boosted_foo:\"big cat\")^0.8 (t_as_same_term_boosted_foo:bagheera)^0.9 (t_as_same_term_boosted_foo:\"panthera pardus\")^0.85 t_as_same_term_boosted_foo:leopard)\",q.toString())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"((t_as_same_term_boosted_foo:\"panthera leo\")^0.9 (t_as_same_term_boosted_foo:\"simba leo\")^0.8 (t_as_same_term_boosted_foo:kimba)^0.75)\",q.toString())@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testSynonymsBoost_singleTermQueryMultiTermSynonyms_shouldParseBoostedQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"((t_pick_best_boosted_foo:\"panthera leo\")^0.9 | (t_pick_best_boosted_foo:\"simba leo\")^0.8 | (t_pick_best_boosted_foo:kimba)^0.75)\",q.toString())@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "q = QParser.getParser(\"leopard\",req(params(\"df\",\"t_as_distinct_boosted_foo\"))).getQuery()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(\"((t_as_distinct_boosted_foo:\"big cat\")^0.8 (t_as_distinct_boosted_foo:bagheera)^0.9 (t_as_distinct_boosted_foo:\"panthera pardus\")^0.85 t_as_distinct_boosted_foo:leopard)\" + \" ((t_as_distinct_boosted_foo:\"panthera leo\")^0.9 (t_as_distinct_boosted_foo:\"simba leo\")^0.8 (t_as_distinct_boosted_foo:kimba)^0.75)\",q.toString())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(q,booleanQuery(disjunctionOf(termQuery(field,\"leopard\"),boosted(phraseQuery(field,\"big cat\"),0.8f),boosted(phraseQuery(field,\"panthera pardus\"),0.85f),boosted(termQuery(field,\"bagheera\"),0.9f))))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "q = QParser.getParser(\"lion\",req(params(\"df\",\"t_as_same_term_boosted_foo\"))).getQuery()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"((t_pick_best_boosted_foo:\"big cat\")^0.8 | (t_pick_best_boosted_foo:bagheera)^0.9 | (t_pick_best_boosted_foo:\"panthera pardus\")^0.85 | t_pick_best_boosted_foo:leopard)\",q.toString())@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "q = QParser.getParser(\"leopard lion\",req(params(\"df\",\"t_as_distinct_boosted_foo\"))).getQuery()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(\"((t_as_distinct_boosted_foo:\"panthera leo\")^0.9 (t_as_distinct_boosted_foo:\"simba leo\")^0.8 (t_as_distinct_boosted_foo:kimba)^0.75)\",q.toString())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "q = QParser.getParser(\"lion\",req(params(\"df\",\"t_pick_best_boosted_foo\"))).getQuery()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testSynonymsBoost_singleTermQueryMultiTermSynonyms_shouldParseBoostedQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "Query q = QParser.getParser(\"leopard lion\",req(params(\"df\",\"t_pick_best_boosted_foo\"))).getQuery()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "q = QParser.getParser(\"lion\",req(params(\"df\",\"t_as_distinct_boosted_foo\"))).getQuery()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(\"((t_as_distinct_boosted_foo:\"big cat\")^0.8 (t_as_distinct_boosted_foo:bagheera)^0.9 (t_as_distinct_boosted_foo:\"panthera pardus\")^0.85 t_as_distinct_boosted_foo:leopard)\",q.toString())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testSynonymsBoost_multiTermQueryMultiTermSynonyms_shouldParseBoostedQuery['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "String field = \"t_pick_best_boosted_foo\"@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Query q = QParser.getParser(\"leopard\",req(params(\"df\",\"t_pick_best_boosted_foo\"))).getQuery()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "q = QParser.getParser(\"leopard lion\",req(params(\"df\",\"t_as_same_term_boosted_foo\"))).getQuery()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->3 [style = bold, label=""];
16->13 [style = bold, label=""];
7->1 [style = bold, label=""];
2->20 [style = dashed, label="0"];
3->18 [style = dashed, label="0"];
11->6 [style = bold, label=""];
4->15 [style = bold, label=""];
1->19 [style = dashed, label="0"];
22->21 [style = bold, label=""];
19->17 [style = bold, label=""];
10->22 [style = dashed, label="0"];
2->10 [style = bold, label=""];
13->1 [style = bold, label=""];
1->9 [style = bold, label=""];
20->22 [style = bold, label=""];
1->14 [style = solid, label="q"];
6->5 [style = bold, label=""];
18->20 [style = bold, label=""];
13->15 [style = solid, label="field"];
3->2 [style = bold, label=""];
0->4 [style = bold, label=""];
0->21 [style = dashed, label="0"];
12->8 [style = bold, label=""];
13->14 [style = solid, label="field"];
4->15 [style = solid, label="q"];
23->19 [style = bold, label=""];
9->17 [style = dashed, label="0"];
10->0 [style = bold, label=""];
4->12 [style = bold, label=""];
9->3 [style = bold, label=""];
1->14 [style = bold, label=""];
8->11 [style = bold, label=""];
15->8 [style = bold, label=""];
17->18 [style = bold, label=""];
}
