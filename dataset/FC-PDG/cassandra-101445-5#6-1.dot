digraph {
4 [style = filled, label = "testMoveBackwardBetweenCalculateRangesToFetchWithPreferredEndpoints['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "expectedResult.put(fullReplica(address01,nineToken,elevenToken),fullReplica(address05,nineToken,elevenToken))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "InetAddressAndPort cOrBAddress = (downNodes.contains(address03) || sourceFilterDownNodes.contains(address03))? address02: address03@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "expectedResult.put(transientReplica(address01,sixToken,nineToken),transientReplica(address05,sixToken,nineToken))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testMoveBackwardBetweenCalculateRangesToFetchWithPreferredEndpoints['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "invokeCalculateRangesToFetchWithPreferredEndpoints(calculateStreamAndFetchRangesMoveBackwardBetween().right,constructTMDsMoveBackwardBetween(),expectedResult.asImmutableView())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "EndpointsByReplica.Builder expectedResult = new EndpointsByReplica.Builder()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "invokeCalculateRangesToFetchWithPreferredEndpoints(calculateStreamAndFetchRangesMoveForward().right,constructTMDsMoveForward(),expectedResult.asImmutableView())@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "EndpointsByReplica.Mutable expectedResult = new EndpointsByReplica.Mutable()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "invokeCalculateRangesToFetchWithPreferredEndpoints(calculateStreamAndFetchRangesMoveBackwardBetween().right,constructTMDsMoveBackwardBetween(),expectedResult.build())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "expectedResult.put(fullReplica(address01,threeToken,fourToken),transientReplica(address04,threeToken,sixToken))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testMoveForwardCalculateRangesToFetchWithPreferredEndpoints['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "expectedResult.put(fullReplica(address01,threeToken,fourToken),fullReplica(cOrBAddress,threeToken,sixToken))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11->8 [style = bold, label=""];
5->1 [style = bold, label=""];
1->2 [style = bold, label=""];
7->5 [style = bold, label=""];
0->9 [style = bold, label=""];
9->11 [style = solid, label="cOrBAddress"];
3->6 [style = dashed, label="0"];
9->11 [style = bold, label=""];
0->5 [style = dashed, label="0"];
0->1 [style = bold, label=""];
2->6 [style = bold, label=""];
8->12 [style = bold, label=""];
10->0 [style = bold, label=""];
2->3 [style = bold, label=""];
4->0 [style = bold, label=""];
}
