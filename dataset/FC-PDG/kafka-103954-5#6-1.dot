digraph {
0 [style = filled, label = "MetadataResponse initialMetadataUpdate = RequestTestUtils.metadataUpdateWith(1,singletonMap(topicName,1))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertNull(offsetAndTimestampMap.get(tp0))@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "timestampToSearch.put(tp0,0L)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testGetOffsetsForTimesWithUnknownOffset['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "MetadataResponse initialMetadataUpdate = RequestTestUtils.metadataUpdateWith(1,singletonMap(topicName,1))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testGetOffsetsForTimesWithUnknownOffset['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "client.prepareResponseFrom(new ListOffsetsResponse(data),metadata.fetch().leaderFor(tp0))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Node node = metadata.fetch().nodes().get(0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertTrue(fetcher.offsetsForTimes(new HashMap<>(),time.timer(100L)).isEmpty())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "timestampToSearch.put(tp0,0L)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testGetOffsetsForTimesWithUnknownOffsetV0['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Map<TopicPartition,Long> timestampToSearch = new HashMap<>()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ListOffsetsResponseData data = new ListOffsetsResponseData().setThrottleTimeMs(0).setTopics(Collections.singletonList(new ListOffsetsTopicResponse().setName(tp0.topic()).setPartitions(Collections.singletonList(new ListOffsetsPartitionResponse().setPartitionIndex(tp0.partition()).setErrorCode(Errors.NONE.code()).setTimestamp(ListOffsetsResponse.UNKNOWN_TIMESTAMP).setOffset(ListOffsetsResponse.UNKNOWN_OFFSET)))))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "client.reset()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(offsetAndTimestampMap.containsKey(tp0))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "client.prepareResponseFrom(new ListOffsetResponse(data),metadata.fetch().leaderFor(tp0))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "client.updateMetadata(initialMetadataUpdate)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Map<TopicPartition,OffsetAndTimestamp> offsetAndTimestampMap = fetcher.offsetsForTimes(timestampToSearch,time.timer(Long.MAX_VALUE))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Map<TopicPartition,Long> timestampToSearch = new HashMap<>()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "apiVersions.update(node.idString(),NodeApiVersions.create(ApiKeys.LIST_OFFSETS.id,(short)0,(short)0))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "ListOffsetResponseData data = new ListOffsetResponseData().setThrottleTimeMs(0).setTopics(Collections.singletonList(new ListOffsetTopicResponse().setName(tp0.topic()).setPartitions(Collections.singletonList(new ListOffsetPartitionResponse().setPartitionIndex(tp0.partition()).setErrorCode(Errors.NONE.code()).setTimestamp(ListOffsetResponse.UNKNOWN_TIMESTAMP).setOldStyleOffsets(Collections.emptyList())))))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "buildFetcher()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Map<TopicPartition,OffsetAndTimestamp> offsetAndTimestampMap = fetcher.offsetsForTimes(timestampToSearch,time.timer(Long.MAX_VALUE))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "client.reset()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
12->5 [style = bold, label=""];
10->14 [style = bold, label=""];
9->2 [style = bold, label=""];
11->13 [style = solid, label="data"];
0->1 [style = solid, label="initialMetadataUpdate"];
10->15 [style = solid, label="timestampToSearch"];
4->8 [style = solid, label="initialMetadataUpdate"];
0->11 [style = dashed, label="0"];
16->23 [style = bold, label=""];
17->22 [style = bold, label=""];
2->10 [style = bold, label=""];
21->18 [style = bold, label=""];
19->16 [style = bold, label=""];
23->2 [style = solid, label="data"];
1->13 [style = dashed, label="0"];
8->0 [style = bold, label=""];
3->9 [style = bold, label=""];
18->20 [style = bold, label=""];
15->17 [style = bold, label=""];
7->5 [style = bold, label=""];
20->8 [style = bold, label=""];
1->6 [style = bold, label=""];
0->1 [style = solid, label="data"];
0->1 [style = bold, label=""];
11->13 [style = bold, label=""];
5->4 [style = bold, label=""];
4->8 [style = bold, label=""];
14->15 [style = bold, label=""];
23->2 [style = bold, label=""];
6->9 [style = solid, label="timestampToSearch"];
13->6 [style = bold, label=""];
1->19 [style = bold, label=""];
8->11 [style = bold, label=""];
}
