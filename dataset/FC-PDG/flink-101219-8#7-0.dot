digraph {
16 [style = filled, label = "assertEquals(6,aggr_values(3()@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "final String UPDATED_ELEMENTS = \"updated.elements.aggr\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(4,aggr_values(1()@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "List<Tuple2<Long,Long>> expectedResult = Arrays.asList(new Tuple2<>(1L,1L),new Tuple2<>(2L,1L),new Tuple2<>(3L,1L),new Tuple2<>(4L,1L),new Tuple2<>(5L,1L),new Tuple2<>(6L,1L),new Tuple2<>(7L,7L),new Tuple2<>(8L,7L),new Tuple2<>(9L,7L))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "testParameterizableAggregator['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "DataSet<Tuple2<Long,Long>> updatedComponentId = verticesWithNewComponents.join(iteration).where(0).equalTo(0).flatMap(new MinimumIdFilter(UPDATED_ELEMENTS))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "DataSet<Tuple2<Long,Long>> updatedComponentId = verticesWithNewComponents.join(iteration).where(0).equalTo(0).flatMap(new MinimumIdFilterCounting(AGGREGATOR_NAME))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "DataSet<Tuple2<Long,Long>> updatedComponentId = verticesWithNewComponents.join(iteration).where(0).equalTo(0).flatMap(new MinimumIdFilterCounting(aggregatorName))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertEquals(3,aggrValues(0()@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "testConnectedComponentsWithParametrizableConvergence['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "IterativeDataSet<Tuple2<Long,Long>> iteration = initialSolutionSet.iterate(maxIterations)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "final long componentId = 1l@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "long(( aggr_values = MinimumIdFilterCounting.aggr_value@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "iteration.registerAggregator(AGGREGATOR_NAME,new LongSumAggregatorWithParameter(componentId))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "final String aggregatorName = \"elements.in.component.aggregator\"@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "iteration.registerAggregationConvergenceCriterion(UPDATED_ELEMENTS,new LongSumAggregator(),new UpdatedElementsConvergenceCriterion(convergence_threshold))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final long componentId = 1L@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertEquals(3,aggr_values(0()@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "iteration.registerAggregator(aggregatorName,new LongSumAggregatorWithParameter(componentId))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "assertEquals(6,aggrValues(3()@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "long(( aggrValues = MinimumIdFilterCounting.aggr_value@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(5,aggr_values(2()@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "final int MAX_ITERATIONS = 5@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "final int maxIterations = 5@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "DataSet<Tuple2<Long,Long>> initialSolutionSet = env.fromCollection(verticesInput)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "List<Tuple2<Long,Long>> expectedResult = Arrays.asList(new Tuple2<>(1L,1L),new Tuple2<>(2L,1L),new Tuple2<>(3L,1L),new Tuple2<>(4L,1L),new Tuple2<>(5L,1L),new Tuple2<>(6L,1L),new Tuple2<>(7L,7L),new Tuple2<>(8L,7L),new Tuple2<>(9L,7L))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertEquals(expectedResult,result)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "IterativeDataSet<Tuple2<Long,Long>> iteration = initialSolutionSet.iterate(10)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "List<Tuple2<Long,Long>> result = iteration.closeWith(updatedComponentId).collect()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "DataSet<Tuple2<Long,Long>> edges = env.fromCollection(edgesInput)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(4,aggrValues(1()@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "testParameterizableAggregator['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(expectedResult,result)@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "DataSet<Tuple2<Long,Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0).with(new NeighborWithComponentIDJoin()).groupBy(0).min(1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "IterativeDataSet<Tuple2<Long,Long>> iteration = initialSolutionSet.iterate(MAX_ITERATIONS)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "final String AGGREGATOR_NAME = \"elements.in.component.aggregator\"@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "assertEquals(5,aggrValues(2()@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Collections.sort(result,new TestBaseUtils.TupleComparator<Tuple2<Long,Long>>())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final long convergence_threshold = 3@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->32 [style = dashed, label="0"];
0->13 [style = bold, label=""];
25->22 [style = bold, label=""];
34->15 [style = bold, label=""];
5->15 [style = bold, label=""];
28->9 [style = bold, label=""];
27->15 [style = bold, label=""];
22->30 [style = bold, label=""];
20->27 [style = bold, label=""];
3->6 [style = solid, label="aggr_values"];
8->1 [style = bold, label=""];
13->9 [style = solid, label="result"];
17->20 [style = dashed, label="0"];
24->21 [style = bold, label=""];
3->12 [style = solid, label="aggr_values"];
15->0 [style = bold, label=""];
35->8 [style = solid, label="result"];
9->29 [style = bold, label=""];
8->28 [style = bold, label=""];
17->5 [style = bold, label=""];
13->8 [style = solid, label="result"];
10->14 [style = bold, label=""];
39->34 [style = bold, label=""];
19->20 [style = bold, label=""];
1->9 [style = solid, label="expectedResult"];
18->19 [style = bold, label=""];
3->11 [style = bold, label=""];
19->39 [style = bold, label=""];
11->12 [style = bold, label=""];
5->39 [style = dashed, label="0"];
15->35 [style = bold, label=""];
35->13 [style = solid, label="result"];
5->27 [style = dashed, label="0"];
15->31 [style = bold, label=""];
7->38 [style = dashed, label="0"];
14->18 [style = bold, label=""];
36->37 [style = bold, label=""];
4->24 [style = dashed, label="0"];
4->10 [style = bold, label=""];
23->20 [style = solid, label="maxIterations"];
7->23 [style = dashed, label="0"];
29->32 [style = solid, label="aggrValues"];
24->27 [style = solid, label="aggregatorName"];
31->13 [style = bold, label=""];
3->11 [style = solid, label="aggr_values"];
30->32 [style = bold, label=""];
19->17 [style = bold, label=""];
7->4 [style = bold, label=""];
1->28 [style = dashed, label="0"];
29->30 [style = solid, label="aggrValues"];
1->9 [style = bold, label=""];
28->9 [style = solid, label="expectedResult"];
12->22 [style = dashed, label="0"];
11->25 [style = dashed, label="0"];
9->3 [style = bold, label=""];
24->31 [style = solid, label="aggregatorName"];
29->22 [style = solid, label="aggrValues"];
3->16 [style = solid, label="aggr_values"];
21->14 [style = bold, label=""];
7->17 [style = solid, label="MAX_ITERATIONS"];
3->29 [style = dashed, label="0"];
10->21 [style = dashed, label="0"];
0->15 [style = dashed, label="0"];
29->25 [style = bold, label=""];
38->36 [style = bold, label=""];
4->5 [style = solid, label="AGGREGATOR_NAME"];
21->27 [style = solid, label="componentId"];
4->0 [style = solid, label="AGGREGATOR_NAME"];
12->6 [style = bold, label=""];
38->15 [style = solid, label="UPDATED_ELEMENTS"];
37->14 [style = bold, label=""];
23->24 [style = bold, label=""];
29->25 [style = solid, label="aggrValues"];
6->16 [style = bold, label=""];
26->23 [style = bold, label=""];
0->31 [style = dashed, label="0"];
33->38 [style = bold, label=""];
10->5 [style = solid, label="componentId"];
6->30 [style = dashed, label="0"];
2->7 [style = bold, label=""];
36->39 [style = solid, label="convergence_threshold"];
13->8 [style = bold, label=""];
35->13 [style = bold, label=""];
38->39 [style = solid, label="UPDATED_ELEMENTS"];
17->19 [style = dashed, label="0"];
}
