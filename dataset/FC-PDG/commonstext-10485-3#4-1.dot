digraph {
16 [style = filled, label = "assertThat(matcher.isMatch(BUFFER2,4)).isEqualTo(1)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertEquals(0,matcher.isMatch(BUFFER2,3))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(matcher.isMatch(BUFFER2,1)).isEqualTo(0)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertThat(StrMatcher.charSetMatcher(\"a\".toCharArray()) instanceof StrMatcher.CharMatcher).isTrue()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(0,matcher.isMatch(BUFFER2,1))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "testCharSetMatcher_charArray['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(0,matcher.isMatch(BUFFER2,0))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(matcher.isMatch(BUFFER2,0)).isEqualTo(1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "final StrMatcher matcher = StrMatcher.charSetMatcher(\"ace\".toCharArray())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(2,matcher.isMatch(BUFFER2,1))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(1,matcher.isMatch(BUFFER2,2))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertSame(StrMatcher.noneMatcher(),StrMatcher.charSetMatcher((char(()null))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "assertEquals(0,matcher.isMatch(BUFFER2,4))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(StrMatcher.charSetMatcher((char(()null)).isSameAs(StrMatcher.noneMatcher())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertThat(matcher.isMatch(BUFFER2,5)).isEqualTo(0)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertThat(matcher.isMatch(BUFFER2,2)).isEqualTo(1)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertTrue(StrMatcher.charSetMatcher(\"a\".toCharArray()) instanceof StrMatcher.CharMatcher)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "assertSame(StrMatcher.noneMatcher(),StrMatcher.stringMatcher((String)null))@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(StrMatcher.charSetMatcher(new char(((()).isSameAs(StrMatcher.noneMatcher())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "final StrMatcher matcher = StrMatcher.stringMatcher(\"bc\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(1,matcher.isMatch(BUFFER2,4))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertThat(matcher.isMatch(BUFFER2,3)).isEqualTo(0)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "testStringMatcher_String['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(0,matcher.isMatch(BUFFER2,5))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertSame(StrMatcher.noneMatcher(),StrMatcher.charSetMatcher(new char(((())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "assertSame(StrMatcher.noneMatcher(),StrMatcher.stringMatcher(\"\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testCharSetMatcher_charArray['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "assertEquals(0,matcher.isMatch(BUFFER2,2))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(1,matcher.isMatch(BUFFER2,0))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6->17 [style = bold, label=""];
4->3 [style = bold, label=""];
1->4 [style = bold, label=""];
16->18 [style = bold, label=""];
20->13 [style = bold, label=""];
7->18 [style = dashed, label="0"];
11->14 [style = bold, label=""];
7->10 [style = bold, label=""];
2->6 [style = bold, label=""];
19->20 [style = bold, label=""];
12->11 [style = bold, label=""];
10->12 [style = dashed, label="0"];
18->12 [style = bold, label=""];
22->21 [style = bold, label=""];
15->6 [style = bold, label=""];
0->11 [style = dashed, label="0"];
1->21 [style = dashed, label="0"];
5->25 [style = dashed, label="0"];
8->14 [style = dashed, label="0"];
10->27 [style = dashed, label="0"];
25->7 [style = bold, label=""];
17->19 [style = bold, label=""];
13->16 [style = bold, label=""];
6->22 [style = dashed, label="0"];
26->22 [style = bold, label=""];
21->28 [style = bold, label=""];
4->28 [style = dashed, label="0"];
5->16 [style = dashed, label="0"];
3->9 [style = bold, label=""];
3->23 [style = dashed, label="0"];
6->1 [style = bold, label=""];
1->17 [style = dashed, label="0"];
28->23 [style = bold, label=""];
9->25 [style = bold, label=""];
10->0 [style = bold, label=""];
3->20 [style = dashed, label="0"];
9->13 [style = dashed, label="0"];
0->8 [style = bold, label=""];
7->27 [style = bold, label=""];
9->5 [style = bold, label=""];
0->24 [style = dashed, label="0"];
5->7 [style = bold, label=""];
4->19 [style = dashed, label="0"];
27->24 [style = bold, label=""];
23->9 [style = bold, label=""];
}
