digraph {
1 [style = filled, label = "CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testMultpileUsages['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "int i = 0@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "i < 5@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(raw.readableBytes(),data.length)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "raw.writeBytes(data)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "CompressionType type@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ByteBuf compressed = codec.encode(raw)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "uncompressed.release()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "i++@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "ByteBuf raw = PulsarByteBufAllocator.DEFAULT.directBuffer()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(compressed.refCnt(),0)@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "CompressionType type@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "String compressedText@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertEquals(compressed.readableBytes(),compressedSize)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(raw.refCnt(),0)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ByteBuf uncompressed = codec.decode(compressed,data.length)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testCompressDecompress['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "raw.release()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testCompressDecompress['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "CompressionType type@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "byte(( data = text.getBytes()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(uncompressed.readableBytes(),data.length)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(uncompressed,raw)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "compressed.release()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(compressed.refCnt(),0)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int compressedSize = compressed.readableBytes()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21->1 [style = solid, label="type"];
4->9 [style = bold, label=""];
15->2 [style = bold, label=""];
22->10 [style = dotted, label="true"];
4->24 [style = bold, label=""];
23->24 [style = solid, label="i"];
1->8 [style = bold, label=""];
16->12 [style = dotted, label="true"];
8->23 [style = bold, label=""];
22->18 [style = dotted, label="true"];
26->25 [style = dotted, label="true"];
22->0 [style = dotted, label="true"];
26->1 [style = bold, label=""];
11->4 [style = bold, label=""];
22->7 [style = dotted, label="true"];
12->1 [style = solid, label="type"];
0->11 [style = bold, label=""];
10->3 [style = bold, label=""];
23->22 [style = solid, label="i"];
22->11 [style = dotted, label="true"];
25->1 [style = solid, label="type"];
20->21 [style = dotted, label="true"];
5->14 [style = bold, label=""];
20->1 [style = bold, label=""];
22->24 [style = dotted, label="true"];
2->10 [style = bold, label=""];
24->22 [style = bold, label=""];
24->22 [style = solid, label="i"];
12->21 [style = dashed, label="0"];
3->0 [style = bold, label=""];
22->14 [style = dotted, label="true"];
14->7 [style = bold, label=""];
22->2 [style = dotted, label="true"];
22->5 [style = dotted, label="true"];
8->17 [style = bold, label=""];
5->15 [style = solid, label="compressed"];
23->22 [style = bold, label=""];
12->25 [style = dashed, label="0"];
16->1 [style = bold, label=""];
8->18 [style = solid, label="data"];
18->5 [style = bold, label=""];
22->17 [style = bold, label=""];
22->3 [style = dotted, label="true"];
7->15 [style = bold, label=""];
22->17 [style = dotted, label="true"];
17->5 [style = solid, label="raw"];
20->19 [style = dotted, label="true"];
7->2 [style = solid, label="compressedSize"];
13->6 [style = bold, label=""];
22->4 [style = dotted, label="true"];
15->3 [style = solid, label="uncompressed"];
22->15 [style = dotted, label="true"];
17->18 [style = bold, label=""];
9->13 [style = bold, label=""];
17->3 [style = solid, label="raw"];
}
