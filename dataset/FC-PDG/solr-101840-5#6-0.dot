digraph {
30 [style = filled, label = "Double floatTest = (Double)calculateNumberStat(floatTestStart,\"median\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "String dateTest = (String)calculateStat(dateTestStart,\"min\")@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "Long longTest = (Long)calculateStat(longTestStart,\"min\")@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "String dateResult = (String)getStatResult(\"mir\",\"date_dtd\",VAL_TYPE.DATE)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "Double doubleTest = (Double)calculateNumberStat(doubleTestStart,\"median\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "minTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(getRawResponse(),floatResult,floatTest)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Integer intResult = ((Integer)getStatResult(\"mir\",\"int_id\",VAL_TYPE.INTEGER))@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Double longResult = (Double)getStatResult(\"medr\",\"long_ld\",VAL_TYPE.DOUBLE)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "expressions.put(\"strings\",new ETP(\"min(string_sm)\",\"str1\"))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "expressions.put(\"dates\",new ETP(\"min(date_dt)\",\"1801-12-31T23:59:59Z\"))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "Map<String,ETP> expressions = new HashMap<>()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "expressions.put(\"float\",new ETP(\"min(float_f)\",1.0F))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "String stringResult = (String)getStatResult(\"mir\",\"string_sd\",VAL_TYPE.STRING)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "medianTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Double doubleTest = (Double)calculateStat(doubleTestStart,\"min\")@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "Long longResult = ((Long)getStatResult(\"mir\",\"long_ld\",VAL_TYPE.LONG))@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "expressions.put(\"longs\",new ETP(\"min(long_lm)\",1L))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "testExpressions(expressions)@@@10@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Double doubleResult = (Double)getStatResult(\"mir\",\"double_dd\",VAL_TYPE.DOUBLE)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertEquals(getRawResponse(),dateResult,dateTest)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "Double longTest = (Double)calculateNumberStat(longTestStart,\"median\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Double doubleResult = (Double)getStatResult(\"medr\",\"double_dd\",VAL_TYPE.DOUBLE)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(getRawResponse(),stringResult,stringTest)@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "String stringTest = (String)calculateStat(stringTestStart,\"min\")@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Float floatResult = ((Float)getStatResult(\"mir\",\"float_fd\",VAL_TYPE.FLOAT))@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(getRawResponse(),intResult,intTest)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "expressions.put(\"doubles\",new ETP(\"min(double_dm)\",1.0))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "Double intTest = (Double)calculateNumberStat(intTestStart,\"median\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(getRawResponse(),doubleResult,doubleTest)@@@14@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Float floatTest = (Float)calculateStat(floatTestStart,\"min\")@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Integer intTest = (Integer)calculateStat(intTestStart,\"min\")@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Double floatResult = (Double)getStatResult(\"medr\",\"float_fd\",VAL_TYPE.DOUBLE)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Double intResult = (Double)getStatResult(\"medr\",\"int_id\",VAL_TYPE.DOUBLE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "minTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "expressions.put(\"int\",new ETP(\"min(int_i)\",1))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertEquals(getRawResponse(),longResult,longTest)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
17->10 [style = bold, label=""];
22->26 [style = bold, label=""];
10->28 [style = bold, label=""];
8->15 [style = bold, label=""];
17->10 [style = solid, label="intTest"];
15->14 [style = bold, label=""];
21->19 [style = bold, label=""];
23->27 [style = bold, label=""];
29->30 [style = bold, label=""];
33->10 [style = solid, label="intTest"];
16->6 [style = bold, label=""];
2->3 [style = bold, label=""];
4->13 [style = bold, label=""];
36->31 [style = bold, label=""];
32->10 [style = solid, label="intResult"];
18->12 [style = bold, label=""];
0->11 [style = bold, label=""];
1->18 [style = bold, label=""];
33->10 [style = bold, label=""];
6->0 [style = bold, label=""];
6->0 [style = solid, label="floatTest"];
17->33 [style = dashed, label="0"];
8->28 [style = dashed, label="0"];
5->17 [style = bold, label=""];
24->22 [style = bold, label=""];
35->14 [style = bold, label=""];
5->10 [style = solid, label="intResult"];
4->13 [style = solid, label="stringTest"];
11->2 [style = bold, label=""];
32->33 [style = bold, label=""];
11->36 [style = dashed, label="0"];
0->36 [style = bold, label=""];
2->31 [style = dashed, label="0"];
15->35 [style = dashed, label="0"];
36->3 [style = solid, label="doubleResult"];
3->9 [style = bold, label=""];
5->32 [style = dashed, label="0"];
28->35 [style = bold, label=""];
7->5 [style = bold, label=""];
12->13 [style = solid, label="stringResult"];
29->0 [style = solid, label="floatResult"];
10->8 [style = bold, label=""];
12->4 [style = bold, label=""];
11->3 [style = solid, label="doubleResult"];
31->3 [style = solid, label="doubleTest"];
28->14 [style = solid, label="longResult"];
19->23 [style = bold, label=""];
1->18 [style = solid, label="dateTest"];
15->14 [style = solid, label="longTest"];
14->29 [style = bold, label=""];
16->29 [style = dashed, label="0"];
34->32 [style = bold, label=""];
6->30 [style = dashed, label="0"];
30->0 [style = bold, label=""];
16->0 [style = solid, label="floatResult"];
21->26 [style = solid, label="expressions"];
31->3 [style = bold, label=""];
9->1 [style = bold, label=""];
20->24 [style = bold, label=""];
9->18 [style = solid, label="dateResult"];
35->14 [style = solid, label="longTest"];
30->0 [style = solid, label="floatTest"];
27->20 [style = bold, label=""];
25->21 [style = bold, label=""];
8->14 [style = solid, label="longResult"];
2->3 [style = solid, label="doubleTest"];
}
