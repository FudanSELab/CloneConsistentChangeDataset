digraph {
6 [style = filled, label = "NamedList<NamedList> fieldTypes = result.get(\"field_types\")@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the\",null,\"word\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@eced3c,null,false))@@@184@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
111 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"red\",null,\"<ALPHANUM>\",10,13,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecea81,null,false))@@@91@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
101 [style = filled, label = "assertNotNull(\"expecting result for field 'keywordtok'\",keywordtok)@@@276@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
128 [style = filled, label = "indexPart = keywordtok.get(\"index\")@@@277@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
159 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"quick\",null,\"word\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@eced51,null,false))@@@187@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
115 [style = filled, label = "assertNotNull(\"Expcting StopFilter analysis breakdown\",tokenList)@@@86@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",39,44,9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecebc6,null,true))@@@133@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
156 [style = filled, label = "assertNotNull(\"expecting an index token analysis for field 'keywordtok'\",indexPart)@@@278@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
105 [style = filled, label = "assertEquals(tokenList.size(),10)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
86 [style = filled, label = "testHandleAnalysisRequest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertNotNull(\"Expecting MockTokenizer analysis breakdown\",tokenList)@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
98 [style = filled, label = "assertToken(tokenList.get(8),new TokenInfo(\"brown\",null,\"word\",39,44,9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecef3d,null,true))@@@257@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
118 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",14,17,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecea98,null,true))@@@94@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecec5c,null,false))@@@153@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(\"wh鐃緒申鐃緒申鐃緒申t鐃緒申鐃緒申鐃緒申v鐃緒申鐃緒申鐃緒申r\",indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"))@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
106 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ece894,null,false))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
177 [style = filled, label = "request.setQuery(\"fox brown\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(2,tokenList.size())@@@152@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "testCharFilterAnalysis['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "assertEquals(\"whatever\",indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"))@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
140 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"over\",null,\"word\",25,29,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@eceda5,null,false))@@@199@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
165 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"quick\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ece8a9,null,false))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
89 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"dog\",null,\"<ALPHANUM>\",45,49,10,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecebde,null,false))@@@136@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
154 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"lazi\",null,\"<ALPHANUM>\",34,38,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecebae,null,false))@@@130@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "NamedList<NamedList> fieldTypes = result.get(\"field_types\")@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"lazy\",null,\"word\",34,38,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecedcf,null,false))@@@205@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertNotNull(\"expecting a query token analysis for field type 'text'\",queryPart)@@@140@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
84 [style = filled, label = "assertToken(tokenList.get(9),new TokenInfo(\"dogs\",null,\"word\",45,49,10,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecedf9,null,false))@@@211@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
134 [style = filled, label = "assertEquals(2,tokenList.size())@@@161@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
113 [style = filled, label = "tokenList = indexPart.get(\"org.apache.lucene.analysis.core.WhitespaceTokenizer\")@@@181@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
174 [style = filled, label = "assertEquals(tokenList.size(),10)@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",14,17,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@eceb66,null,true))@@@121@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertEquals(tokenList.size(),8)@@@87@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"over\",null,\"word\",25,29,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@eceefe,null,false))@@@248@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
175 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"the\",null,\"word\",30,33,7,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecef13,null,false))@@@251@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"whatever\",null,\"word\",12,20,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ece802,null,false))@@@30@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
149 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox brown\",null,\"word\",0,9,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecf037,null,false))@@@292@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
97 [style = filled, label = "tokenList = indexPart.get(\"org.apache.lucene.analysis.en.PorterStemFilter\")@@@112@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
121 [style = filled, label = "assertNotNull(\"expecting a query token analysis for field 'keywordtok'\",queryPart)@@@287@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
161 [style = filled, label = "tokenList = queryPart.get(.getName())@@@266@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertEquals(\"expecting MockTokenizer to produce 1 token\",1,tokenList.size())@@@291@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
160 [style = filled, label = "NamedList<NamedList> whitetok = fieldNames.get(\"whitetok\")@@@225@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
141 [style = filled, label = "tokenList = indexPart.get(.getName())@@@230@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "assertToken(tokenList.get(8),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",39,44,9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecea2a,null,true))@@@79@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testCharFilterAnalysis['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
132 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the\",null,\"word\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecee95,null,false))@@@233@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"quick\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@eceb36,null,false))@@@115@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
107 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"lazy\",null,\"<ALPHANUM>\",34,38,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@eceadd,null,false))@@@103@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "assertNotNull(\"Expcting PorterStemFilter analysis breakdown\",tokenList)@@@169@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "tokenList = queryPart.get(\"org.apache.lucene.analysis.core.StopFilter\")@@@159@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecec1e,null,false))@@@144@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
142 [style = filled, label = "assertNotNull(\"expecting result for field type 'text'\",textType)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
150 [style = filled, label = "NamedList<List<NamedList>> queryPart = textType.get(\"query\")@@@139@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
114 [style = filled, label = "assertToken(tokenList.get(8),new TokenInfo(\"brown\",null,\"word\",39,44,9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecede4,null,true))@@@208@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "tokenList = queryPart.get(\"org.apache.lucene.analysis.standard.StandardTokenizer\")@@@141@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
157 [style = filled, label = "assertEquals(\"expecting MockTokenizer to produce 2 tokens\",2,tokenList.size())@@@268@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
85 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"over\",null,\"<ALPHANUM>\",25,29,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ece8fd,null,false))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
167 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecec9c,null,false))@@@162@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
158 [style = filled, label = "assertNotNull(\"expecting result for field 'whitetok'\",whitetok)@@@226@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
146 [style = filled, label = "assertNotNull(\"expecting result for field type 'nametext'\",nameTextType)@@@178@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "NamedList<NamedList> result = handler.handleAnalysisRequest(request,h.getCore().getLatestSchema())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
151 [style = filled, label = "tokenList = queryPart.get(\"org.apache.lucene.analysis.en.PorterStemFilter\")@@@168@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "assertNotNull(\"Expcting WhitespaceTokenizer analysis breakdown\",tokenList)@@@182@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "queryPart = keywordtok.get(\"query\")@@@286@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
162 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"dogs\",null,\"<ALPHANUM>\",45,49,10,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@eceb0b,null,false))@@@109@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"quick\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecea6a,null,false))@@@88@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
152 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ece97a,null,false))@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\")@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
130 [style = filled, label = "assertEquals(\"expecting only MockTokenizer to be applied\",1,queryPart.size())@@@265@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ececde,null,false))@@@171@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
147 [style = filled, label = "NamedList<NamedList> textType = fieldTypes.get(\"text\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
178 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",14,17,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ece9bc,null,true))@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
119 [style = filled, label = "assertEquals(10,tokenList.size())@@@183@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
172 [style = filled, label = "queryPart = nameTextType.get(\"query\")@@@214@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
103 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"red\",null,\"<ALPHANUM>\",10,13,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ece8be,null,false))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
122 [style = filled, label = "assertNotNull(\"expecting an index token analysis for field type 'text'\",indexPart)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertTrue(\"result is null and it shouldn't be\",result != null)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecec33,null,false))@@@147@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
171 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"lazy\",null,\"<ALPHANUM>\",34,38,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecea14,null,false))@@@76@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"fox\",null,\"word\",14,17,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@eced7b,null,true))@@@193@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
117 [style = filled, label = "assertNotNull(\"expecting a query token analysis for field type 'nametext'\",queryPart)@@@215@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
137 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"jump\",null,\"<ALPHANUM>\",18,24,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@eceb7e,null,false))@@@124@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
95 [style = filled, label = "assertNotNull(\"expecting a query token analysis for field 'whitetok'\",queryPart)@@@264@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"word\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecee3a,null,false))@@@220@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"over\",null,\"<ALPHANUM>\",25,29,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ece9e8,null,false))@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
102 [style = filled, label = "assertNotNull(\"expecting only MockTokenizer to be applied\",tokenList)@@@231@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
104 [style = filled, label = "request.addFieldType(\"nametext\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "assertNotNull(\"Expcting LowerCaseFilter analysis breakdown\",tokenList)@@@151@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "@SuppressWarnings({\"rawtypes\"}) NamedList<NamedList> result = handler.handleAnalysisRequest(request,h.getCore().getLatestSchema())@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"whatever\",null,\"word\",12,20,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ece770,null,false))@@@20@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "request.addFieldName(\"keywordtok\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "assertNotNull(\"expecting only MockTokenizer to be applied\",tokenList)@@@290@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the quick red fox jumped over the lazy brown dogs\",null,\"word\",0,49,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@eceff6,null,false))@@@283@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
120 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ececf6,null,false))@@@174@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
166 [style = filled, label = "request.setShowMatch(true)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "assertEquals(tokenList.size(),8)@@@114@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
144 [style = filled, label = "assertEquals(\"expecting only MockTokenizer to be applied\",1,queryPart.size())@@@288@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(tokenList.size(),1)@@@19@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
131 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"jumped\",null,\"<ALPHANUM>\",18,24,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ece9d2,null,false))@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "List<NamedList> tokenList = (List<NamedList>)indexPart.get(.getName())@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(tokenList.size(),1)@@@29@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
168 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"quick\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ece990,null,false))@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\",indexPart)@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
88 [style = filled, label = "assertNotNull(\"Expcting LowerCaseFilter analysis breakdown\",tokenList)@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
136 [style = filled, label = "assertNotNull(\"Expecting StandardTokenizer analysis breakdown\",tokenList)@@@142@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"the\",null,\"word\",30,33,7,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecedba,null,false))@@@202@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"word\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecefa8,null,false))@@@272@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
126 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"red\",null,\"word\",10,13,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@eceebf,null,false))@@@239@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "request.addFieldType(\"charfilthtmlmap\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) NamedList<NamedList> fieldTypes = result.get(\"field_types\")@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertTrue(\"result is null and it shouldn't be\",result != null)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "request.setFieldValue(\"the quick red fox jumped over the lazy brown dogs\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
138 [style = filled, label = "assertEquals(2,tokenList.size())@@@170@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(\"wh鐃緒申鐃緒申鐃緒申t鐃緒申鐃緒申鐃緒申v鐃緒申鐃緒申鐃緒申r\",indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"))@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "assertEquals(\"expecting MockTokenizer to produce 1 token\",1,tokenList.size())@@@282@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
170 [style = filled, label = "tokenList = queryPart.get(\"org.apache.lucene.analysis.core.LowerCaseFilter\")@@@150@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"word\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecee25,null,false))@@@217@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"jumped\",null,\"word\",18,24,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@eced90,null,false))@@@196@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
92 [style = filled, label = "NamedList<NamedList> nameTextType = fieldTypes.get(\"nametext\")@@@177@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "FieldAnalysisRequest request = new FieldAnalysisRequest()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "tokenList = indexPart.get(\"org.apache.lucene.analysis.core.LowerCaseFilter\")@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
173 [style = filled, label = "assertNotNull(\"Expcting StandardTokenizer analysis breakdown\",tokenList)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
127 [style = filled, label = "assertNotNull(\"expecting only MockTokenizer to be applied\",tokenList)@@@267@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
94 [style = filled, label = "tokenList = indexPart.get(.getName())@@@280@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
108 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"red\",null,\"word\",10,13,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@eced66,null,false))@@@190@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "@SuppressWarnings({\"rawtypes\"}) NamedList indexPart = textType.get(\"index\")@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
70 [style = filled, label = "NamedList<List<NamedList>> indexPart = textType.get(\"index\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
99 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"the\",null,\"<ALPHANUM>\",30,33,7,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ece9fe,null,false))@@@73@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "indexPart = nameTextType.get(\"index\")@@@179@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
145 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"over\",null,\"<ALPHANUM>\",25,29,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@eceb96,null,false))@@@127@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
93 [style = filled, label = "tokenList = queryPart.get(.getName())@@@216@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
116 [style = filled, label = "assertNotNull(\"Expcting PorterStemFilter analysis breakdown\",tokenList)@@@113@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
125 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"word\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecef93,null,false))@@@269@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
169 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"lazy\",null,\"word\",34,38,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecef28,null,false))@@@254@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
123 [style = filled, label = "tokenList = indexPart.get(\"org.apache.lucene.analysis.core.StopFilter\")@@@85@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "assertToken(tokenList.get(9),new TokenInfo(\"dogs\",null,\"word\",45,49,10,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecef52,null,false))@@@260@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
176 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"over\",null,\"<ALPHANUM>\",25,29,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@eceac6,null,false))@@@100@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "indexPart = whitetok.get(\"index\")@@@227@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "request.addFieldType(\"text\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(\"whatever\",indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"))@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "assertToken(tokenList.get(9),new TokenInfo(\"dogs\",null,\"<ALPHANUM>\",45,49,10,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ece951,null,false))@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "queryPart = whitetok.get(\"query\")@@@263@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "assertToken(tokenList.get(9),new TokenInfo(\"dogs\",null,\"<ALPHANUM>\",45,49,10,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecea40,null,false))@@@82@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
139 [style = filled, label = "assertNotNull(\"Expcting StopFilter analysis breakdown\",tokenList)@@@160@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"quick\",null,\"word\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@eceeaa,null,false))@@@236@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(\"result is null and it shouldn't be\",result != null)@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertNotNull(\"field_nameds should never be null\",fieldNames)@@@224@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
153 [style = filled, label = "request.addFieldName(\"whitetok\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
110 [style = filled, label = "assertEquals(\"expecting MockTokenizer to produce 10 tokens\",10,tokenList.size())@@@232@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"red\",null,\"<ALPHANUM>\",10,13,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@eceb4e,null,false))@@@118@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
90 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ececb3,null,false))@@@165@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
112 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"the\",null,\"<ALPHANUM>\",30,33,7,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ece912,null,false))@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "NamedList<NamedList> result = handler.handleAnalysisRequest(request,h.getCore().getLatestSchema())@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
96 [style = filled, label = "assertToken(tokenList.get(8),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",39,44,9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ece93c,null,true))@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
124 [style = filled, label = "NamedList<NamedList> fieldNames = result.get(\"field_names\")@@@223@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
129 [style = filled, label = "assertNotNull(\"expecting an index token analysis for field type 'nametext'\",indexPart)@@@180@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
143 [style = filled, label = "assertNotNull(\"expecting an index token analysis for field 'whitetok'\",indexPart)@@@228@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
135 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"jumped\",null,\"word\",18,24,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@eceee9,null,false))@@@245@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertEquals(\"expecting only MockTokenizer to be applied\",1,indexPart.size())@@@279@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
163 [style = filled, label = "tokenList = queryPart.get(.getName())@@@289@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"fox\",null,\"word\",14,17,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@eceed4,null,true))@@@242@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) List<NamedList> tokenList = (List<NamedList>)indexPart.get(.getName())@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
155 [style = filled, label = "assertEquals(\"Expecting StandardTokenizer to produce 2 tokens from '\" + request.getQuery() + \"'\",2,tokenList.size())@@@143@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "request.setShowMatch(false)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
100 [style = filled, label = "NamedList<NamedList> keywordtok = fieldNames.get(\"keywordtok\")@@@275@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
91 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"jumped\",null,\"<ALPHANUM>\",18,24,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ece8e8,null,false))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "request.setFieldValue(\"<html><body>wh鐃緒申鐃緒申鐃緒申t鐃緒申鐃緒申鐃緒申v鐃緒申鐃緒申鐃緒申r</body></html>\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertNotNull(\"expecting only MockTokenizer to be applied\",tokenList)@@@281@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ecec72,null,false))@@@156@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",39,44,9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@eceaf4,null,true))@@@106@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
148 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"red\",null,\"<ALPHANUM>\",10,13,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ece9a6,null,false))@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
133 [style = filled, label = "List<NamedList> tokenList = indexPart.get(\"org.apache.lucene.analysis.standard.StandardTokenizer\")@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"jumped\",null,\"<ALPHANUM>\",18,24,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@eceaaf,null,false))@@@97@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",14,17,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ece8d3,null,true))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
109 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"lazy\",null,\"<ALPHANUM>\",34,38,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ece927,null,false))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
164 [style = filled, label = "assertEquals(\"expecting only MockTokenizer to be applied\",1,indexPart.size())@@@229@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertNotNull(\"expecting result for field type 'charfilthtmlmap'\",textType)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertNotNull(\"field_types should never be null\",fieldTypes)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
133->173 [style = bold, label=""];
171->49 [style = bold, label=""];
32->60 [style = bold, label=""];
141->102 [style = bold, label=""];
58->121 [style = solid, label="queryPart"];
112->109 [style = bold, label=""];
29->19 [style = bold, label=""];
7->24 [style = bold, label=""];
140->33 [style = bold, label=""];
153->59 [style = bold, label=""];
154->82 [style = bold, label=""];
110->132 [style = bold, label=""];
22->15 [style = solid, label="result"];
40->143 [style = solid, label="indexPart"];
57->35 [style = bold, label=""];
34->177 [style = bold, label=""];
27->8 [style = solid, label="fieldTypes"];
122->133 [style = bold, label=""];
100->101 [style = solid, label="keywordtok"];
82->89 [style = bold, label=""];
113->75 [style = bold, label=""];
8->122 [style = dashed, label="0"];
47->104 [style = bold, label=""];
177->166 [style = bold, label=""];
143->164 [style = bold, label=""];
88->174 [style = bold, label=""];
152->168 [style = bold, label=""];
35->32 [style = bold, label=""];
51->170 [style = bold, label=""];
95->130 [style = bold, label=""];
5->17 [style = bold, label=""];
13->11 [style = bold, label=""];
46->160 [style = bold, label=""];
8->25 [style = bold, label=""];
39->51 [style = bold, label=""];
80->100 [style = bold, label=""];
76->140 [style = bold, label=""];
13->142 [style = dashed, label="0"];
25->7 [style = solid, label="textType"];
134->167 [style = bold, label=""];
77->111 [style = bold, label=""];
11->8 [style = solid, label="fieldTypes"];
8->147 [style = bold, label=""];
124->46 [style = bold, label=""];
4->14 [style = solid, label="request"];
23->29 [style = bold, label=""];
126->63 [style = bold, label=""];
113->75 [style = solid, label="tokenList"];
96->74 [style = bold, label=""];
48->136 [style = bold, label=""];
28->30 [style = bold, label=""];
65->129 [style = solid, label="indexPart"];
37->48 [style = bold, label=""];
4->153 [style = bold, label=""];
11->70 [style = dashed, label="0"];
16->4 [style = bold, label=""];
159->108 [style = bold, label=""];
144->163 [style = bold, label=""];
175->169 [style = bold, label=""];
150->37 [style = solid, label="queryPart"];
6->15 [style = bold, label=""];
178->131 [style = bold, label=""];
72->62 [style = bold, label=""];
31->120 [style = bold, label=""];
48->136 [style = solid, label="tokenList"];
136->155 [style = bold, label=""];
111->118 [style = bold, label=""];
157->125 [style = bold, label=""];
14->13 [style = bold, label=""];
116->53 [style = bold, label=""];
55->95 [style = solid, label="queryPart"];
161->127 [style = solid, label="tokenList"];
63->135 [style = bold, label=""];
155->39 [style = bold, label=""];
103->43 [style = bold, label=""];
121->144 [style = bold, label=""];
26->4 [style = bold, label=""];
84->172 [style = bold, label=""];
147->142 [style = solid, label="textType"];
165->103 [style = bold, label=""];
8->3 [style = bold, label=""];
4->18 [style = solid, label="request"];
3->133 [style = dashed, label="0"];
12->9 [style = bold, label=""];
129->113 [style = bold, label=""];
27->8 [style = bold, label=""];
50->87 [style = bold, label=""];
89->150 [style = bold, label=""];
164->141 [style = bold, label=""];
60->71 [style = bold, label=""];
30->23 [style = bold, label=""];
53->72 [style = bold, label=""];
161->127 [style = bold, label=""];
100->101 [style = bold, label=""];
30->23 [style = solid, label="tokenList"];
97->116 [style = solid, label="tokenList"];
92->146 [style = solid, label="nameTextType"];
137->145 [style = bold, label=""];
94->50 [style = solid, label="tokenList"];
75->119 [style = bold, label=""];
163->69 [style = solid, label="tokenList"];
109->96 [style = bold, label=""];
92->146 [style = bold, label=""];
18->1 [style = solid, label="result"];
172->117 [style = solid, label="queryPart"];
9->47 [style = dashed, label="0"];
90->151 [style = bold, label=""];
104->34 [style = bold, label=""];
135->73 [style = bold, label=""];
117->93 [style = bold, label=""];
98->66 [style = bold, label=""];
151->45 [style = bold, label=""];
44->114 [style = bold, label=""];
54->124 [style = bold, label=""];
128->156 [style = solid, label="indexPart"];
166->14 [style = bold, label=""];
40->143 [style = bold, label=""];
67->88 [style = bold, label=""];
24->20 [style = solid, label="indexPart"];
79->99 [style = bold, label=""];
93->83 [style = bold, label=""];
38->94 [style = bold, label=""];
97->116 [style = bold, label=""];
2->7 [style = bold, label=""];
119->36 [style = bold, label=""];
24->20 [style = bold, label=""];
101->128 [style = bold, label=""];
162->97 [style = bold, label=""];
73->175 [style = bold, label=""];
170->57 [style = bold, label=""];
142->70 [style = bold, label=""];
170->57 [style = solid, label="tokenList"];
87->81 [style = bold, label=""];
160->158 [style = bold, label=""];
6->15 [style = solid, label="fieldTypes"];
174->152 [style = bold, label=""];
133->173 [style = solid, label="tokenList"];
130->161 [style = bold, label=""];
173->105 [style = bold, label=""];
74->67 [style = bold, label=""];
59->47 [style = bold, label=""];
147->142 [style = bold, label=""];
43->91 [style = bold, label=""];
69->41 [style = bold, label=""];
114->84 [style = bold, label=""];
150->37 [style = bold, label=""];
58->121 [style = bold, label=""];
41->149 [style = bold, label=""];
15->14 [style = bold, label=""];
11->8 [style = bold, label=""];
123->115 [style = solid, label="tokenList"];
141->102 [style = solid, label="tokenList"];
115->42 [style = bold, label=""];
123->115 [style = bold, label=""];
124->46 [style = solid, label="fieldNames"];
172->117 [style = bold, label=""];
106->165 [style = bold, label=""];
4->10 [style = bold, label=""];
7->5 [style = bold, label=""];
85->112 [style = bold, label=""];
18->1 [style = bold, label=""];
91->85 [style = bold, label=""];
131->79 [style = bold, label=""];
45->138 [style = bold, label=""];
158->40 [style = bold, label=""];
66->55 [style = bold, label=""];
78->76 [style = bold, label=""];
156->38 [style = bold, label=""];
120->92 [style = bold, label=""];
68->162 [style = bold, label=""];
99->171 [style = bold, label=""];
132->56 [style = bold, label=""];
14->147 [style = dashed, label="0"];
167->90 [style = bold, label=""];
81->58 [style = bold, label=""];
168->148 [style = bold, label=""];
9->18 [style = bold, label=""];
9->22 [style = bold, label=""];
61->123 [style = bold, label=""];
36->159 [style = bold, label=""];
102->110 [style = bold, label=""];
160->158 [style = solid, label="whitetok"];
2->7 [style = solid, label="tokenList"];
146->65 [style = bold, label=""];
83->54 [style = bold, label=""];
65->129 [style = bold, label=""];
86->4 [style = bold, label=""];
11->8 [style = solid, label="indexPart"];
64->137 [style = bold, label=""];
55->95 [style = bold, label=""];
94->50 [style = bold, label=""];
62->64 [style = bold, label=""];
138->31 [style = bold, label=""];
25->7 [style = bold, label=""];
176->107 [style = bold, label=""];
67->88 [style = solid, label="tokenList"];
148->178 [style = bold, label=""];
139->134 [style = bold, label=""];
105->106 [style = bold, label=""];
22->15 [style = bold, label=""];
33->44 [style = bold, label=""];
125->80 [style = bold, label=""];
151->45 [style = solid, label="tokenList"];
1->6 [style = bold, label=""];
71->139 [style = solid, label="tokenList"];
169->98 [style = bold, label=""];
10->12 [style = bold, label=""];
15->27 [style = bold, label=""];
20->21 [style = bold, label=""];
56->126 [style = bold, label=""];
127->157 [style = bold, label=""];
118->52 [style = bold, label=""];
128->156 [style = bold, label=""];
163->69 [style = bold, label=""];
14->13 [style = solid, label="textType"];
3->0 [style = bold, label=""];
107->68 [style = bold, label=""];
14->13 [style = solid, label="result"];
70->122 [style = solid, label="indexPart"];
70->122 [style = bold, label=""];
145->154 [style = bold, label=""];
0->2 [style = bold, label=""];
108->78 [style = bold, label=""];
10->153 [style = dashed, label="0"];
52->176 [style = bold, label=""];
42->77 [style = bold, label=""];
49->61 [style = bold, label=""];
4->22 [style = solid, label="request"];
71->139 [style = bold, label=""];
21->28 [style = bold, label=""];
}
