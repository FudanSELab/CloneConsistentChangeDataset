digraph {
18 [style = filled, label = "i < appends@@@28@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Iterator<LogEntry> iter = batch.records().deepEntries().iterator()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(partitionBatchesIterator.next().isWritable())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "LogEntry entry = iter.next()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertFalse(\"No more records\",iter.hasNext())@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertTrue(partitionBatches.peekFirst().isWritable())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertEquals(\"No partitions should be ready\",0,accum.ready(cluster,time.milliseconds()).readyNodes.size())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "accum.append(tp1,0L,key,value,null,maxBlockTimeMs)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "RecordBatch batch = batches.get(0)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "List<RecordBatch> batches = accum.drain(cluster,Collections.singleton(node1),Integer.MAX_VALUE,0).get(node1.id())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "RecordBatch batch = batches.get(0)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(1,partitionBatches.size())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "i < appends@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testFull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "int i = 0@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Iterator<RecordBatch> partitionBatchesIterator = partitionBatches.iterator()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "RecordAccumulator accum = new RecordAccumulator(1024,10 * 1024,CompressionType.NONE,lingerMs,100L,metrics,time)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Deque<RecordBatch> partitionBatches = accum.batches().get(tp1)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int batchSize = 1024@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "i++@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testLinger['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(\"No partitions should be ready.\",0,accum.ready(cluster,now).readyNodes.size())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(1,batches.size())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"Values should match\",ByteBuffer.wrap(value),entry.record().value())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testFull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertFalse(\"No more records\",iter.hasNext())@@@34@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(2,partitionBatches.size())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "int appends = batchSize / msgSize@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Iterator<LogEntry> iter = batch.records().deepEntries().iterator()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertEquals(\"Values should match\",ByteBuffer.wrap(value),entry.record().value())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "long now = time.milliseconds()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"Our partition's leader should be ready\",Collections.singleton(node1),accum.ready(cluster,time.milliseconds()).readyNodes)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(\"Our partition's leader should be ready\",Collections.singleton(node1),accum.ready(cluster,time.milliseconds()).readyNodes)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(1,batches.size())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "LogEntry entry = iter.next()@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "RecordAccumulator accum = new RecordAccumulator(batchSize,10L * batchSize,CompressionType.NONE,10L,100L,metrics,time)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "i++@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "time.sleep(10)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "List<RecordBatch> batches = accum.drain(cluster,Collections.singleton(node1),Integer.MAX_VALUE,0).get(node1.id())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(\"Keys should match\",ByteBuffer.wrap(key),entry.record().key())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertFalse(partitionBatchesIterator.next().isWritable())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "long lingerMs = 10L@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "accum.append(tp1,0L,key,value,null,maxBlockTimeMs)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Deque<RecordBatch> partitionBatches = accum.batches().get(tp1)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "int i = 0@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "RecordAccumulator accum = new RecordAccumulator(batchSize,10 * batchSize,CompressionType.NONE,10L,100L,metrics,time)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"Keys should match\",ByteBuffer.wrap(key),entry.record().key())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->22 [style = bold, label=""];
29->18 [style = solid, label="appends"];
4->3 [style = bold, label=""];
29->15 [style = bold, label=""];
10->8 [style = dotted, label="true"];
15->10 [style = bold, label=""];
19->18 [style = bold, label=""];
16->18 [style = bold, label=""];
18->16 [style = dotted, label="true"];
32->12 [style = bold, label=""];
39->13 [style = bold, label=""];
30->27 [style = bold, label=""];
35->39 [style = bold, label=""];
10->3 [style = dotted, label="true"];
31->29 [style = bold, label=""];
14->17 [style = bold, label=""];
11->12 [style = bold, label=""];
13->40 [style = bold, label=""];
7->31 [style = bold, label=""];
40->34 [style = bold, label=""];
7->29 [style = solid, label="batchSize"];
16->18 [style = solid, label="i"];
17->23 [style = bold, label=""];
22->30 [style = bold, label=""];
12->7 [style = bold, label=""];
2->31 [style = dashed, label="0"];
18->6 [style = dotted, label="true"];
20->21 [style = bold, label=""];
5->16 [style = bold, label=""];
15->3 [style = solid, label="i"];
3->10 [style = bold, label=""];
3->10 [style = solid, label="i"];
26->0 [style = bold, label=""];
0->14 [style = bold, label=""];
23->24 [style = bold, label=""];
1->28 [style = bold, label=""];
8->20 [style = bold, label=""];
19->16 [style = solid, label="i"];
7->31 [style = solid, label="batchSize"];
10->13 [style = bold, label=""];
10->13 [style = dotted, label="true"];
18->6 [style = bold, label=""];
38->37 [style = bold, label=""];
19->18 [style = solid, label="i"];
7->2 [style = bold, label=""];
10->20 [style = dotted, label="true"];
34->36 [style = bold, label=""];
18->9 [style = dotted, label="true"];
46->35 [style = bold, label=""];
7->2 [style = solid, label="batchSize"];
28->19 [style = bold, label=""];
18->25 [style = bold, label=""];
9->5 [style = bold, label=""];
43->33 [style = bold, label=""];
18->5 [style = dotted, label="true"];
7->33 [style = dashed, label="0"];
45->46 [style = bold, label=""];
24->1 [style = bold, label=""];
36->38 [style = bold, label=""];
13->8 [style = bold, label=""];
6->9 [style = bold, label=""];
29->10 [style = solid, label="appends"];
2->29 [style = bold, label=""];
33->44 [style = bold, label=""];
44->45 [style = bold, label=""];
41->43 [style = bold, label=""];
10->21 [style = dotted, label="true"];
10->4 [style = dotted, label="true"];
43->33 [style = solid, label="lingerMs"];
37->42 [style = bold, label=""];
15->10 [style = solid, label="i"];
21->4 [style = bold, label=""];
27->26 [style = bold, label=""];
}
