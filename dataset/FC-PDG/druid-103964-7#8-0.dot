digraph {
16 [style = filled, label = "testCompressionParamForTDigestQuantileAgg['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "i < expectedResults.size()@@@11@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "sqlLifecycle.runSimple(sql,TIMESERIES_CONTEXT_DEFAULT,DEFAULT_PARAMETERS,AUTH_RESULT).toList()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Object(( objects = results.get(i)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "final String sql = \"SELECT\" + \"TDIGEST_QUANTILE(m1, 0.0), TDIGEST_QUANTILE(m1, 0.5), TDIGEST_QUANTILE(m1, 1.0)\" + \"FROM foo\"@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "i++@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "int i = 0@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new TDigestSketchAggregatorFactory(\"a0:agg\",\"m1\",TDigestSketchAggregatorFactory.DEFAULT_COMPRESSION),new TDigestSketchAggregatorFactory(\"a1:agg\",\"m1\",200),new TDigestSketchAggregatorFactory(\"a2:agg\",\"m1\",300))).postAggregators(new TDigestSketchToQuantilePostAggregator(\"a0\",makeFieldAccessPostAgg(\"a0:agg\"),0.0f),new TDigestSketchToQuantilePostAggregator(\"a1\",makeFieldAccessPostAgg(\"a1:agg\"),0.5f),new TDigestSketchToQuantilePostAggregator(\"a2\",makeFieldAccessPostAgg(\"a2:agg\"),1.0f)).context(TIMESERIES_CONTEXT_DEFAULT).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testQuantileOnNumericValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "final List<Object((> results = sqlLifecycle.runSimple(sql,TIMESERIES_CONTEXT_DEFAULT,DEFAULT_PARAMETERS,AUTH_RESULT).toList()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "testQuantileOnNumericValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final String sql = \"SELECT\" + \"TDIGEST_QUANTILE(m1, 0.0), TDIGEST_QUANTILE(m1, 0.5, 200), TDIGEST_QUANTILE(m1, 1.0, 300)\" + \"FROM foo\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertArrayEquals(expectedResults.get(i),Stream.of(objects).mapToDouble(null).toArray(),0.000001)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "testQuery(\"SELECT\" + \"TDIGEST_QUANTILE(m1, 0.0), TDIGEST_QUANTILE(m1, 0.5), TDIGEST_QUANTILE(m1, 1.0)\" + \"FROM foo\",ImmutableList.of(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new TDigestSketchAggregatorFactory(\"a0:agg\",\"m1\",null))).postAggregators(new TDigestSketchToQuantilePostAggregator(\"a0\",makeFieldAccessPostAgg(\"a0:agg\"),0.0f),new TDigestSketchToQuantilePostAggregator(\"a1\",makeFieldAccessPostAgg(\"a0:agg\"),0.5f),new TDigestSketchToQuantilePostAggregator(\"a2\",makeFieldAccessPostAgg(\"a0:agg\"),1.0f)).context(QUERY_CONTEXT_DEFAULT).build()),expectedResults)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "final List<Object((> expectedResults = ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a591a4)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new TDigestSketchAggregatorFactory(\"a0:agg\",\"m1\",null))).postAggregators(new TDigestSketchToQuantilePostAggregator(\"a0\",makeFieldAccessPostAgg(\"a0:agg\"),0.0f),new TDigestSketchToQuantilePostAggregator(\"a1\",makeFieldAccessPostAgg(\"a0:agg\"),0.5f),new TDigestSketchToQuantilePostAggregator(\"a2\",makeFieldAccessPostAgg(\"a0:agg\"),1.0f)).context(TIMESERIES_CONTEXT_DEFAULT).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "SqlLifecycle sqlLifecycle = getSqlLifecycle()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "cannotVectorize()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "final List<double((> expectedResults = ImmutableList.of(new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a59115)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(expectedResults.size(),results.size())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11->10 [style = solid, label="i"];
7->11 [style = bold, label=""];
1->8 [style = bold, label=""];
0->10 [style = dotted, label="true"];
9->18 [style = dashed, label="0"];
0->2 [style = bold, label=""];
1->19 [style = dashed, label="0"];
6->0 [style = bold, label=""];
19->17 [style = bold, label=""];
9->7 [style = bold, label=""];
2->10 [style = bold, label=""];
0->6 [style = dotted, label="true"];
10->6 [style = bold, label=""];
6->0 [style = solid, label="i"];
5->19 [style = bold, label=""];
5->1 [style = bold, label=""];
3->5 [style = bold, label=""];
11->0 [style = bold, label=""];
11->6 [style = solid, label="i"];
6->2 [style = solid, label="i"];
0->4 [style = bold, label=""];
6->10 [style = solid, label="i"];
12->14 [style = bold, label=""];
8->9 [style = bold, label=""];
11->2 [style = solid, label="i"];
7->13 [style = dashed, label="0"];
16->5 [style = bold, label=""];
8->17 [style = dashed, label="0"];
15->12 [style = bold, label=""];
14->13 [style = bold, label=""];
0->2 [style = dotted, label="true"];
14->13 [style = solid, label="expectedResults"];
11->0 [style = solid, label="i"];
17->18 [style = bold, label=""];
}
