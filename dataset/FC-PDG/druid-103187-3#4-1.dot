digraph {
6 [style = filled, label = "final Properties properties = injector.getInstance()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testInjection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testInjection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "properties.put(NamespaceExtractionModule.TYPE_PREFIX,\"onHeap\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testInjection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "properties.put(NamespaceExtractionModule.TYPE_PREFIX,\"offHeap\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(,manager.getClass())@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final NamespaceExtractionCacheManager manager = injector.getInstance()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final Injector injector = Initialization.makeInjectorWithModules(GuiceInjectors.makeStartupInjector(),ImmutableList.of(new Module(){@Override public void configure(Binder binder){JsonConfigProvider.bindInstance(binder,Key.get(,),new DruidNode(\"test-inject\",null,null,null,true,false))}}))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(,manager.getClass())@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "properties.clear()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
3->9 [style = bold, label=""];
9->5 [style = bold, label=""];
6->3 [style = bold, label=""];
5->8 [style = bold, label=""];
1->9 [style = dashed, label="0"];
10->2 [style = bold, label=""];
0->8 [style = dashed, label="0"];
4->2 [style = bold, label=""];
5->0 [style = bold, label=""];
3->1 [style = bold, label=""];
7->2 [style = bold, label=""];
2->6 [style = bold, label=""];
}
