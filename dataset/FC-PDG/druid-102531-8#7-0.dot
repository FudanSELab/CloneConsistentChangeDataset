digraph {
69 [style = filled, label = "Assert.assertEquals(Status.PAUSED,task.getRunner().getStatus())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(2,Iterables.size(scanResultValues))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "Map<Integer,Long> currentOffsets = objectMapper.readValue(task.getRunner().pause().getEntity().toString(),new TypeReference<Map<Integer,Long>>(){})@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(task.getRunner().getEndOffsets(),task.getRunner().getCurrentOffsets())@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final QuerySegmentSpec endInterval = objectMapper.readValue(\"\"2008/2049\"\",)@@@43@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "task.getRunner().resume()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Thread.sleep(25)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "kafkaProducer.initTransactions()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(2,Iterables.size(scanResultValues1))@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "testRunTransactionModeRollback['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
71 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",desc2))@@@49@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable())@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertEquals(2,countEvents(task))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "kafkaProducer.send(record).get()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,2L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,6L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Iterable<ScanResultValue> scanResultValues1 = scanData(task,endInterval)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "kafkaProducer.commitTransaction()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "kafkaProducer.beginTransaction()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(0,Iterables.size(scanResultValues))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4),publishedDescriptors())@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "countEvents(task) != 2@@@14@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc3))@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2013/P1D\",0)@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "TimeoutException e@@@35@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2011/P1D\",0)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(Status.READING,task.getRunner().getStatus())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "scanResultValues = scanData(task,rollbackedInterval)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(2,countEvents(task))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "kafkaProducer.initTransactions()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getProcessed())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "future.get(10,TimeUnit.SECONDS)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Iterable<ScanResultValue> scanResultValues = scanData(task,firstInterval)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(task.getRunner().getEndOffsets(),task.getRunner().getCurrentOffsets())@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,6L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc4))@@@60@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,13L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "testRunWithPauseAndResume['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "final QuerySegmentSpec endInterval = OBJECT_MAPPER.readValue(\"\"2008/2049\"\",)@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "final QuerySegmentSpec firstInterval = OBJECT_MAPPER.readValue(\"\"2008/2010\"\",)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "kafkaProducer.flush()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2010/P1D\",0)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "testRunTransactionModeRollback['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final QuerySegmentSpec rollbackedInterval = objectMapper.readValue(\"\"2010/2012\"\",)@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "kafkaProducer.send(record).get()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(Status.READING,task.getRunner().getStatus())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getProcessed())@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "kafkaProducer.flush()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,13L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "SegmentDescriptor desc4 = sd(task,\"2049/P1D\",0)@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "Assert.fail(\"Task completed when it should have been paused\")@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "{}@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "kafkaProducer.beginTransaction()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "kafkaProducer.commitTransaction()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final QuerySegmentSpec firstInterval = objectMapper.readValue(\"\"2008/2010\"\",)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(currentOffsets,task.getRunner().getCurrentOffsets())@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "final QuerySegmentSpec rollbackedInterval = OBJECT_MAPPER.readValue(\"\"2010/2012\"\",)@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
68 [style = filled, label = "kafkaProducer.beginTransaction()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "kafkaProducer.abortTransaction()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc1))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "kafkaProducer.send(record).get()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "kafkaProducer.initTransactions()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->26 [style = bold, label=""];
70->64 [style = bold, label=""];
20->5 [style = solid, label="task"];
41->15 [style = bold, label=""];
9->32 [style = solid, label="firstInterval"];
25->22 [style = bold, label=""];
46->13 [style = bold, label=""];
65->42 [style = bold, label=""];
57->62 [style = bold, label=""];
14->13 [style = solid, label="rollbackedInterval"];
17->50 [style = dashed, label="0"];
44->19 [style = bold, label=""];
20->29 [style = solid, label="task"];
40->25 [style = bold, label=""];
51->53 [style = bold, label=""];
56->12 [style = bold, label=""];
7->8 [style = bold, label=""];
36->20 [style = bold, label=""];
39->18 [style = solid, label="desc4"];
35->5 [style = solid, label="endInterval"];
0->15 [style = bold, label=""];
7->19 [style = solid, label="desc2"];
67->69 [style = bold, label=""];
24->49 [style = bold, label=""];
9->67 [style = dashed, label="0"];
21->31 [style = bold, label=""];
32->4 [style = solid, label="scanResultValues"];
10->44 [style = solid, label="desc1"];
62->42 [style = bold, label=""];
69->58 [style = bold, label=""];
49->5 [style = solid, label="endInterval"];
45->38 [style = bold, label=""];
15->41 [style = bold, label=""];
32->4 [style = bold, label=""];
19->28 [style = bold, label=""];
6->46 [style = bold, label=""];
8->39 [style = bold, label=""];
50->54 [style = bold, label=""];
16->67 [style = bold, label=""];
13->23 [style = solid, label="scanResultValues"];
16->9 [style = bold, label=""];
20->15 [style = solid, label="task"];
4->3 [style = bold, label=""];
60->29 [style = solid, label="task"];
51->53 [style = solid, label="desc2"];
28->18 [style = bold, label=""];
35->49 [style = dashed, label="0"];
27->12 [style = bold, label=""];
54->61 [style = solid, label="desc1"];
20->10 [style = solid, label="task"];
9->32 [style = bold, label=""];
61->71 [style = bold, label=""];
3->33 [style = bold, label=""];
48->32 [style = solid, label="firstInterval"];
10->7 [style = bold, label=""];
27->56 [style = bold, label=""];
38->6 [style = bold, label=""];
20->38 [style = solid, label="task"];
35->5 [style = bold, label=""];
5->1 [style = bold, label=""];
52->0 [style = bold, label=""];
15->41 [style = dotted, label="true"];
9->48 [style = dashed, label="0"];
8->37 [style = solid, label="desc3"];
20->7 [style = solid, label="task"];
31->24 [style = dashed, label="0"];
48->32 [style = bold, label=""];
66->61 [style = bold, label=""];
7->51 [style = dashed, label="0"];
20->8 [style = solid, label="task"];
10->37 [style = solid, label="desc1"];
49->5 [style = bold, label=""];
43->34 [style = bold, label=""];
29->16 [style = bold, label=""];
22->11 [style = bold, label=""];
15->29 [style = bold, label=""];
30->44 [style = bold, label=""];
39->37 [style = bold, label=""];
5->1 [style = solid, label="scanResultValues1"];
17->10 [style = bold, label=""];
39->37 [style = solid, label="desc4"];
20->40 [style = solid, label="task"];
37->30 [style = bold, label=""];
8->28 [style = solid, label="desc3"];
12->24 [style = bold, label=""];
14->46 [style = dashed, label="0"];
67->42 [style = solid, label="currentOffsets"];
23->42 [style = bold, label=""];
20->39 [style = solid, label="task"];
60->54 [style = solid, label="task"];
55->70 [style = bold, label=""];
46->13 [style = solid, label="rollbackedInterval"];
20->32 [style = solid, label="task"];
63->60 [style = bold, label=""];
64->65 [style = bold, label=""];
16->48 [style = bold, label=""];
20->60 [style = dashed, label="0"];
42->27 [style = bold, label=""];
20->13 [style = solid, label="task"];
14->13 [style = bold, label=""];
31->17 [style = bold, label=""];
33->2 [style = bold, label=""];
34->21 [style = bold, label=""];
24->50 [style = bold, label=""];
54->51 [style = bold, label=""];
58->68 [style = bold, label=""];
54->53 [style = solid, label="desc1"];
24->35 [style = bold, label=""];
1->43 [style = bold, label=""];
7->37 [style = solid, label="desc2"];
51->71 [style = solid, label="desc2"];
11->52 [style = bold, label=""];
60->15 [style = solid, label="task"];
6->14 [style = bold, label=""];
10->54 [style = dashed, label="0"];
20->40 [style = bold, label=""];
11->0 [style = bold, label=""];
60->40 [style = solid, label="task"];
60->40 [style = bold, label=""];
53->66 [style = bold, label=""];
47->20 [style = bold, label=""];
68->55 [style = bold, label=""];
13->23 [style = bold, label=""];
12->59 [style = bold, label=""];
59->24 [style = bold, label=""];
37->61 [style = dashed, label="0"];
26->45 [style = bold, label=""];
60->51 [style = solid, label="task"];
}
