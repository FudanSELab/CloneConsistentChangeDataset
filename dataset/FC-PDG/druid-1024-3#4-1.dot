digraph {
12 [style = filled, label = "EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(NodeType.PEON)).andReturn(druidNodeDiscovery)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "request.setContent(\"hello\".getBytes(\"UTF-8\"))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "DruidLeaderClient druidLeaderClient = new DruidLeaderClient(httpClient,druidNodeDiscoveryProvider,NodeType.PEON,\"/simple/leader\",EasyMock.createNiceMock())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testRedirection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "DruidLeaderClient druidLeaderClient = new DruidLeaderClient(httpClient,druidNodeDiscoveryProvider,\"nodetype\",\"/simple/leader\",EasyMock.createNiceMock())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "request.setContent(\"hello\".getBytes(StandardCharsets.UTF_8))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Request request = druidLeaderClient.makeRequest(HttpMethod.POST,\"/simple/direct\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(\"hello\",druidLeaderClient.go(request).getContent())@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(\"nodetype\")).andReturn(druidNodeDiscovery)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testSimple['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "EasyMock.replay(druidNodeDiscovery,druidNodeDiscoveryProvider)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testSimple['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "druidLeaderClient.start()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Request request = druidLeaderClient.makeRequest(HttpMethod.POST,\"/simple/redirect\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
4->10 [style = bold, label=""];
3->4 [style = solid, label="druidNodeDiscoveryProvider"];
0->9 [style = bold, label=""];
15->2 [style = bold, label=""];
8->16 [style = dashed, label="0"];
9->11 [style = bold, label=""];
9->4 [style = bold, label=""];
3->9 [style = solid, label="druidNodeDiscoveryProvider"];
3->12 [style = bold, label=""];
0->12 [style = dashed, label="0"];
12->9 [style = bold, label=""];
7->3 [style = bold, label=""];
3->0 [style = bold, label=""];
6->2 [style = bold, label=""];
1->13 [style = dashed, label="0"];
8->1 [style = bold, label=""];
2->9 [style = solid, label="druidNodeDiscovery"];
10->8 [style = bold, label=""];
10->16 [style = bold, label=""];
16->1 [style = bold, label=""];
3->11 [style = solid, label="druidNodeDiscoveryProvider"];
11->10 [style = bold, label=""];
2->12 [style = solid, label="druidNodeDiscovery"];
13->5 [style = bold, label=""];
2->0 [style = solid, label="druidNodeDiscovery"];
14->2 [style = bold, label=""];
2->7 [style = bold, label=""];
4->11 [style = dashed, label="0"];
8->13 [style = bold, label=""];
}
