digraph {
19 [style = filled, label = "S3OutputStream output = new S3OutputStream(s3,\"flush-small\",BUCKET)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(\"Flushing a small frame of an S3OutputStream should not impact data written\",\"hello, world!\",read)@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "output.write(buffer)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "String content = RandomStringUtils.randomAlphanumeric(S3OutputStream.PART_SIZE + 1024)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "output.write(buffer)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testWriteLargeBuffer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "testFlushSmallBuffer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "String read = IOUtils.toString(input,Charset.defaultCharset())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(new String(buffer,Charset.defaultCharset()),read)@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(buffer.length < S3OutputStream.PART_SIZE)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "InputStream input = s3.getObject(BUCKET,\"flush-small\").getObjectContent()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "S3OutputStream output = new S3OutputStream(s3,\"large-buffer\",BUCKET)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "InputStream input = s3.getObject(BUCKET,\"large-buffer\").getObjectContent()@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "InputStream input = s3.getObject(null)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "output.close()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "output.flush()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(buffer.length > S3OutputStream.PART_SIZE)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "buffer = \", world!\".getBytes(Charset.defaultCharset())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "byte(( buffer = content.getBytes(Charset.defaultCharset())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "byte(( buffer = \"hello\".getBytes(Charset.defaultCharset())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testWriteLargeBuffer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
1->4 [style = bold, label=""];
8->10 [style = dashed, label="0"];
9->0 [style = bold, label=""];
0->13 [style = bold, label=""];
3->1 [style = bold, label=""];
8->6 [style = solid, label="input"];
18->17 [style = bold, label=""];
8->6 [style = bold, label=""];
4->2 [style = bold, label=""];
2->9 [style = bold, label=""];
8->0 [style = dashed, label="0"];
10->6 [style = bold, label=""];
6->7 [style = solid, label="read"];
10->6 [style = solid, label="input"];
7->6 [style = dashed, label="0"];
13->6 [style = solid, label="read"];
0->10 [style = bold, label=""];
9->18 [style = bold, label=""];
19->14 [style = bold, label=""];
1->9 [style = solid, label="buffer"];
11->3 [style = bold, label=""];
15->0 [style = bold, label=""];
1->7 [style = solid, label="buffer"];
20->12 [style = bold, label=""];
0->8 [style = bold, label=""];
17->15 [style = bold, label=""];
4->19 [style = dashed, label="0"];
14->9 [style = bold, label=""];
13->6 [style = bold, label=""];
6->7 [style = bold, label=""];
12->19 [style = bold, label=""];
16->20 [style = bold, label=""];
0->13 [style = solid, label="input"];
18->17 [style = solid, label="buffer"];
20->14 [style = solid, label="buffer"];
}
