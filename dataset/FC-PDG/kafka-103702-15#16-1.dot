digraph {
20 [style = filled, label = "List<RecordBatch> batches = accum.drain(cluster,Collections.singleton(node1),Integer.MAX_VALUE,0).get(node1.id())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "RecordBatch batch = batches.get(0)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "int i = 0@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Iterator<LogEntry> iter = batch.records.iterator()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "int appends = 1024 / msgSize@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(\"No partitions should be ready\",0,accum.ready(cluster,time.milliseconds()).readyNodes.size())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Iterator<LogEntry> iter = batch.records.iterator()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"Values should match\",ByteBuffer.wrap(value),entry.record().value())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "i++@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "LogEntry entry = iter.next()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "long lingerMs = 10L@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "time.sleep(10)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testFull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "testFull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"Values should match\",ByteBuffer.wrap(value),entry.record().value())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "RecordAccumulator accum = new RecordAccumulator(1024,10 * 1024,CompressionType.NONE,lingerMs,100L,metrics,time,metricTags)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "RecordAccumulator accum = new RecordAccumulator(1024,10 * 1024,CompressionType.NONE,10L,100L,metrics,time,metricTags)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "accum.append(tp1,key,value,null,maxBlockTimeMs)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(\"Keys should match\",ByteBuffer.wrap(key),entry.record().key())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\"Keys should match\",ByteBuffer.wrap(key),entry.record().key())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "LogEntry entry = iter.next()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertFalse(\"No more records\",iter.hasNext())@@@17@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertFalse(\"No more records\",iter.hasNext())@@@25@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"No partitions should be ready.\",0,accum.ready(cluster,now).readyNodes.size())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "batch.records.flip()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "i < appends@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(1,batches.size())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "i < appends@@@19@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "accum.append(tp1,key,value,null,maxBlockTimeMs)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "i++@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "int i = 0@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(\"Our partition's leader should be ready\",Collections.singleton(node1),accum.ready(cluster,time.milliseconds()).readyNodes)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "long now = time.milliseconds()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testLinger['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28->29 [style = bold, label=""];
29->30 [style = solid, label="lingerMs"];
26->32 [style = bold, label=""];
9->0 [style = bold, label=""];
29->30 [style = bold, label=""];
17->6 [style = dotted, label="true"];
0->17 [style = bold, label=""];
19->20 [style = dotted, label="true"];
19->20 [style = bold, label=""];
1->15 [style = bold, label=""];
30->27 [style = bold, label=""];
17->14 [style = dotted, label="true"];
15->30 [style = dashed, label="0"];
10->3 [style = bold, label=""];
20->31 [style = bold, label=""];
19->2 [style = bold, label=""];
11->19 [style = bold, label=""];
16->22 [style = bold, label=""];
5->17 [style = bold, label=""];
19->8 [style = dotted, label="true"];
0->5 [style = solid, label="i"];
5->17 [style = solid, label="i"];
12->19 [style = solid, label="appends"];
17->7 [style = bold, label=""];
3->9 [style = bold, label=""];
6->14 [style = bold, label=""];
12->13 [style = bold, label=""];
0->17 [style = solid, label="i"];
25->20 [style = bold, label=""];
13->19 [style = bold, label=""];
20->8 [style = bold, label=""];
13->11 [style = solid, label="i"];
12->17 [style = solid, label="appends"];
13->19 [style = solid, label="i"];
24->21 [style = bold, label=""];
2->21 [style = bold, label=""];
19->11 [style = dotted, label="true"];
33->24 [style = bold, label=""];
31->33 [style = bold, label=""];
11->19 [style = solid, label="i"];
7->6 [style = bold, label=""];
32->25 [style = bold, label=""];
22->10 [style = bold, label=""];
21->16 [style = bold, label=""];
23->1 [style = bold, label=""];
17->5 [style = dotted, label="true"];
15->12 [style = bold, label=""];
4->1 [style = bold, label=""];
10->9 [style = bold, label=""];
17->7 [style = dotted, label="true"];
8->11 [style = bold, label=""];
8->26 [style = dashed, label="0"];
17->18 [style = bold, label=""];
14->5 [style = bold, label=""];
27->26 [style = bold, label=""];
}
