digraph {
21 [style = filled, label = "fetchRecords(tp1,records,Errors.NONE,100L,0)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "assertEquals(1,fetcher.sendFetches())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "builder.appendWithOffset(v,RecordBatch.NO_TIMESTAMP,\"key\".getBytes(),(\"value-\" + v).getBytes())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(2,recordsCountAverage.value(),EPSILON)@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "KafkaMetric fetchSizeAverage = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchSizeAvg))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "partitions.put(tp2,new FetchResponse.PartitionData(Errors.NONE,100,FetchResponse.INVALID_LAST_STABLE_OFFSET,0L,null,MemoryRecords.withRecords(CompressionType.NONE,new SimpleRecord(\"val\".getBytes()))))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "subscriptions.assignFromUser(singleton(tp1))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "fetchRecords(records,Errors.NONE,100L,0)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "subscriptions.seek(tp1,0)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "expectedBytes += record.sizeInBytes()@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "int expectedBytes = 0@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testFetchResponseMetricsPartialResponse['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "expectedBytes += record.sizeInBytes()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Map<TopicPartition,FetchResponse.PartitionData> partitions = new HashMap<>()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "MemoryRecordsBuilder builder = MemoryRecords.builder(ByteBuffer.allocate(1024),CompressionType.NONE,TimestampType.CREATE_TIME,0L)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "builder.appendWithOffset(v,RecordBatch.NO_TIMESTAMP,\"key\".getBytes(),(\"value-\" + v).getBytes())@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "consumerClient.poll(0)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(3,recordsCountAverage.value(),EPSILON)@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testFetchResponseMetricsPartialResponse['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "KafkaMetric recordsCountAverage = allMetrics.get(metrics.metricInstance(metricsRegistry.recordsPerRequestAvg))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "builder.appendWithOffset(v,RecordBatch.NO_TIMESTAMP,\"key\".getBytes(),(\"value-\" + v).getBytes())@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "subscriptions.assignFromUser(Utils.mkSet(tp1,tp2))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(expectedBytes,fetchSizeAverage.value(),EPSILON)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "expectedBytes += record.sizeInBytes()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "v++@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "int v = 0@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "client.prepareResponse(new FetchResponse(new LinkedHashMap<>(partitions),0))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "partitions.put(tp1,new FetchResponse.PartitionData(Errors.NONE,100,FetchResponse.INVALID_LAST_STABLE_OFFSET,0L,null,records))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testFetchResponseMetricsWithOnePartitionAtTheWrongOffset['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(expectedBytes,fetchSizeAverage.value(),EPSILON)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "subscriptions.seek(tp2,0)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "MemoryRecords records = builder.build()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "subscriptions.seek(tp1,1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "fetcher.fetchedRecords()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "v < 3@@@13@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "subscriptions.seek(tp2,5)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "record.offset() >= 1@@@15@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
6->17 [style = bold, label=""];
5->10 [style = bold, label=""];
11->20 [style = bold, label=""];
17->31 [style = dashed, label="0"];
27->9 [style = solid, label="v"];
7->6 [style = solid, label="expectedBytes"];
16->18 [style = bold, label=""];
14->37 [style = dashed, label="0"];
16->2 [style = dotted, label="true"];
8->15 [style = bold, label=""];
9->21 [style = solid, label="records"];
21->6 [style = bold, label=""];
18->16 [style = dotted, label="true"];
11->1 [style = bold, label=""];
3->1 [style = solid, label="v"];
5->23 [style = dashed, label="0"];
11->1 [style = dotted, label="true"];
28->31 [style = bold, label=""];
38->29 [style = bold, label=""];
4->13 [style = bold, label=""];
27->3 [style = bold, label=""];
11->27 [style = solid, label="v"];
3->11 [style = bold, label=""];
1->3 [style = bold, label=""];
7->38 [style = solid, label="records"];
13->20 [style = solid, label="v"];
11->3 [style = solid, label="v"];
20->3 [style = bold, label=""];
16->6 [style = solid, label="expectedBytes"];
3->9 [style = dotted, label="true"];
29->34 [style = bold, label=""];
16->2 [style = bold, label=""];
9->7 [style = bold, label=""];
11->9 [style = bold, label=""];
12->6 [style = bold, label=""];
37->23 [style = bold, label=""];
13->11 [style = bold, label=""];
33->13 [style = bold, label=""];
26->24 [style = bold, label=""];
32->33 [style = bold, label=""];
12->21 [style = dashed, label="0"];
2->12 [style = bold, label=""];
9->12 [style = solid, label="records"];
22->34 [style = solid, label="partitions"];
13->1 [style = solid, label="v"];
23->35 [style = bold, label=""];
9->27 [style = bold, label=""];
3->9 [style = bold, label=""];
3->27 [style = dotted, label="true"];
7->22 [style = bold, label=""];
22->38 [style = bold, label=""];
24->36 [style = bold, label=""];
0->14 [style = bold, label=""];
18->16 [style = bold, label=""];
36->30 [style = bold, label=""];
30->28 [style = bold, label=""];
11->9 [style = solid, label="v"];
19->14 [style = bold, label=""];
11->20 [style = dotted, label="true"];
10->8 [style = bold, label=""];
3->20 [style = solid, label="v"];
3->7 [style = bold, label=""];
11->3 [style = bold, label=""];
34->26 [style = bold, label=""];
25->37 [style = bold, label=""];
2->6 [style = solid, label="expectedBytes"];
16->21 [style = bold, label=""];
7->16 [style = bold, label=""];
15->4 [style = bold, label=""];
35->8 [style = bold, label=""];
7->18 [style = bold, label=""];
13->3 [style = solid, label="v"];
3->11 [style = solid, label="v"];
18->21 [style = bold, label=""];
13->11 [style = solid, label="v"];
11->3 [style = dotted, label="true"];
30->28 [style = solid, label="expectedBytes"];
16->12 [style = bold, label=""];
4->32 [style = bold, label=""];
27->3 [style = solid, label="v"];
14->5 [style = bold, label=""];
2->16 [style = bold, label=""];
}
