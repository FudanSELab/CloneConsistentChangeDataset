digraph {
3 [style = filled, label = "Assert.assertEquals(new String(iterator.next().message()),msg1)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "KafkaPusher pusher = new KafkaPusher(\"localhost:\" + kafkaPort,TOPIC)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ConsumerIterator<byte((,byte((> iterator = this.kafkaTestHelper.getIteratorForTopic(TOPIC)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "InterruptedException ex@@@10@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String msg1 = \"msg1\"@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Thread.sleep(1000)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "pusher.pushMessages(Lists.newArrayList(msg1.getBytes(),msg2.getBytes()))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assert(iterator.hasNext())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assert(iterator.hasNext())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "String msg2 = \"msg2\"@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Pusher pusher = new KafkaProducerPusher(\"localhost:dummy\",TOPIC,Optional.of(ConfigFactory.parseMap(ImmutableMap.of(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,\"localhost:\" + this.kafkaTestHelper.getKafkaServerPort()))))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(new String(iterator.next().message()),msg2)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "test['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "pusher.close()@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "test['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Pusher pusher = new KafkaProducerPusher(\"127.0.0.1:dummy\",TOPIC,Optional.of(ConfigFactory.parseMap(ImmutableMap.of(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,\"127.0.0.1:\" + this.kafkaTestHelper.getKafkaServerPort()))))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Thread.currentThread().interrupt()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "test['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4->9 [style = bold, label=""];
11->3 [style = solid, label="msg1"];
1->8 [style = bold, label=""];
0->13 [style = bold, label=""];
0->6 [style = bold, label=""];
11->4 [style = bold, label=""];
7->0 [style = bold, label=""];
16->17 [style = bold, label=""];
7->0 [style = dotted, label="true"];
2->15 [style = dashed, label="0"];
3->10 [style = bold, label=""];
12->2 [style = bold, label=""];
5->6 [style = bold, label=""];
13->3 [style = bold, label=""];
15->11 [style = bold, label=""];
5->13 [style = bold, label=""];
6->13 [style = bold, label=""];
4->1 [style = solid, label="msg2"];
9->5 [style = bold, label=""];
14->15 [style = bold, label=""];
10->1 [style = bold, label=""];
2->11 [style = bold, label=""];
17->11 [style = bold, label=""];
}
