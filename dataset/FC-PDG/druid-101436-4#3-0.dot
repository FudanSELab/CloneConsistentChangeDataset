digraph {
3 [style = filled, label = "plannerFactory = new PlannerFactory(rootSchema,CalciteTests.createMockQueryLifecycleFactory(walker,conglomerate),CalciteTests.createOperatorTable(),CalciteTests.createExprMacroTable(),plannerConfig,AuthTestUtils.TEST_AUTHORIZER_MAPPER,CalciteTests.getJsonMapper(),CalciteTests.DRUID_SCHEMA_NAME)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "setup['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "setup['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "plannerFactory = new PlannerFactory(rootSchema,CalciteTests.createMockQueryLifecycleFactory(walker,conglomerate),createOperatorTable(),CalciteTests.createExprMacroTable(),plannerConfig,AuthTestUtils.TEST_AUTHORIZER_MAPPER,CalciteTests.getJsonMapper(),CalciteTests.DRUID_SCHEMA_NAME)@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "final QueryableIndex index = segmentGenerator.generate(dataSegment,schemaInfo,Granularities.NONE,rowsPerSegment)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final GeneratorSchemaInfo schemaInfo = GeneratorBasicSchemas.SCHEMA_MAP.get(\"basic\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final QueryRunnerFactoryConglomerate conglomerate = QueryStackTests.createQueryRunnerFactoryConglomerate(closer,PROCESSING_CONFIG)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final SpecificSegmentsQuerySegmentWalker walker = new SpecificSegmentsQuerySegmentWalker(conglomerate).add(dataSegment,index)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final DataSegment dataSegment = DataSegment.builder().dataSource(\"foo\").interval(schemaInfo.getDataInterval()).version(\"1\").shardSpec(new LinearShardSpec(0)).size(0).build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final QueryRunnerFactoryConglomerate conglomerate = QueryStackTests.createQueryRunnerFactoryConglomerate(closer)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "setup['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "log.info(\"Starting benchmark setup using cacheDir(%s(, rows(%,d(.\",segmentGenerator.getCacheDir(),rowsPerSegment)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final SchemaPlus rootSchema = CalciteTests.createMockRootSchema(conglomerate,walker,plannerConfig,AuthTestUtils.TEST_AUTHORIZER_MAPPER)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "closer.register(walker)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final PlannerConfig plannerConfig = new PlannerConfig()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "SqlVectorizedExpressionSanityTest.sanityTestVectorizedSqlQueries(plannerFactory,QUERIES.get(Integer.parseInt(query)))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final SegmentGenerator segmentGenerator = closer.register(new SegmentGenerator())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final GeneratorSchemaInfo schemaInfo = GeneratorBasicSchemas.SCHEMA_MAP.get(\"expression-testbench\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->13 [style = solid, label="plannerConfig"];
2->5 [style = solid, label="plannerConfig"];
0->4 [style = bold, label=""];
9->11 [style = bold, label=""];
3->16 [style = solid, label="plannerFactory"];
8->5 [style = bold, label=""];
11->5 [style = solid, label="walker"];
11->3 [style = solid, label="walker"];
10->9 [style = bold, label=""];
2->3 [style = solid, label="plannerConfig"];
14->3 [style = solid, label="conglomerate"];
9->5 [style = solid, label="conglomerate"];
12->1 [style = bold, label=""];
10->11 [style = solid, label="index"];
15->7 [style = bold, label=""];
14->11 [style = bold, label=""];
3->13 [style = dashed, label="0"];
5->13 [style = solid, label="rootSchema"];
5->13 [style = bold, label=""];
9->13 [style = solid, label="conglomerate"];
7->11 [style = solid, label="dataSegment"];
11->8 [style = solid, label="walker"];
9->14 [style = dashed, label="0"];
17->15 [style = bold, label=""];
11->8 [style = bold, label=""];
5->3 [style = solid, label="rootSchema"];
1->10 [style = solid, label="schemaInfo"];
15->10 [style = solid, label="schemaInfo"];
1->15 [style = dashed, label="0"];
4->10 [style = bold, label=""];
2->0 [style = bold, label=""];
5->3 [style = bold, label=""];
3->16 [style = bold, label=""];
1->7 [style = bold, label=""];
7->10 [style = solid, label="dataSegment"];
14->5 [style = solid, label="conglomerate"];
6->1 [style = bold, label=""];
10->14 [style = bold, label=""];
9->3 [style = solid, label="conglomerate"];
11->13 [style = solid, label="walker"];
7->2 [style = bold, label=""];
}
