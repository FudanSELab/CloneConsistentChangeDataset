digraph {
16 [style = filled, label = "filter.setGroup(\"group2\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "listGroup2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "region = find(regions,\"customers2\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(regions).hasSize(2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(region.getGroup()).isEqualTo(\"group2\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Region region = find(regions,\"customers2\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(region.getGroup()).isEqualTo(\"group1\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "region = find(regions,\"customers3\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<Region> regions = client.list(filter).getConfigResult()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(region.getGroups()).containsExactlyInAnyOrder(\"group1\",\"group2\")@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Region region = find(regions,\"customers1\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(region.getGroups()).containsExactlyInAnyOrder(\"group1\",\"group2\")@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(region.getGroup()).isEqualTo(\"group1\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "region = find(regions,\"customers3\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(regions).hasSize(3)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(region.getGroup()).isEqualTo(\"group1\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "listGroup1['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "listGroup1['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "filter.setGroup(\"group1\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
16->0 [style = bold, label=""];
15->13 [style = bold, label=""];
9->11 [style = bold, label=""];
3->1 [style = bold, label=""];
0->4 [style = solid, label="regions"];
18->15 [style = bold, label=""];
1->18 [style = dashed, label="0"];
4->2 [style = bold, label=""];
7->4 [style = bold, label=""];
2->9 [style = bold, label=""];
9->8 [style = bold, label=""];
0->9 [style = solid, label="regions"];
0->13 [style = solid, label="regions"];
1->7 [style = bold, label=""];
5->16 [style = dashed, label="0"];
6->5 [style = bold, label=""];
0->14 [style = bold, label=""];
13->12 [style = bold, label=""];
10->5 [style = bold, label=""];
5->0 [style = bold, label=""];
0->1 [style = solid, label="regions"];
7->15 [style = dashed, label="0"];
14->18 [style = bold, label=""];
8->11 [style = dashed, label="0"];
3->14 [style = dashed, label="0"];
0->18 [style = solid, label="regions"];
17->16 [style = bold, label=""];
}
