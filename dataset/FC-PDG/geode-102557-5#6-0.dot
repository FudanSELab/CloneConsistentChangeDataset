digraph {
10 [style = filled, label = "verify(spyNioSslEngine,times(1)).expandWriteBuffer(any(),any(),any(),any())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "wrapFails['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testEngine.addReturnResult(new SSLEngineResult(CLOSED,NEED_TASK,appData.remaining(),appData.remaining()))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Arrays.fill(appBytes,(byte)0x1F)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ByteBuffer wrappedBuffer = spyNioSslEngine.wrap(appData)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "appData.flip()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "verify(spyNioSslEngine,times(1)).handleBlockingTasks()@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(wrappedBuffer).isEqualTo(appData)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "verify(spyNioSslEngine,times(1)).expandWriteBuffer(any(),any(),any())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "wrap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "appData.flip()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "wrap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "byte(( appBytes = new byte((((@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThatThrownBy(null).isInstanceOf().hasMessageContaining(\"Error encrypting data\")@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ByteBuffer appData = ByteBuffer.allocate(nioSslEngine.myNetData.capacity() + 100)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "appData.put(appBytes)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testEngine.addReturnResult(new SSLEngineResult(OK,NEED_TASK,appData.remaining(),appData.remaining()))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->16 [style = bold, label=""];
9->11 [style = bold, label=""];
12->16 [style = dashed, label="0"];
2->1 [style = bold, label=""];
9->18 [style = dashed, label="0"];
18->11 [style = bold, label=""];
0->2 [style = bold, label=""];
1->18 [style = bold, label=""];
11->12 [style = bold, label=""];
6->0 [style = bold, label=""];
4->7 [style = bold, label=""];
1->9 [style = bold, label=""];
1->11 [style = solid, label="testEngine"];
4->3 [style = solid, label="appData"];
12->10 [style = bold, label=""];
13->3 [style = bold, label=""];
10->13 [style = bold, label=""];
4->12 [style = solid, label="appData"];
7->6 [style = solid, label="appBytes"];
3->8 [style = bold, label=""];
5->4 [style = bold, label=""];
7->6 [style = bold, label=""];
12->14 [style = bold, label=""];
15->4 [style = bold, label=""];
7->0 [style = solid, label="appBytes"];
14->13 [style = bold, label=""];
10->14 [style = dashed, label="0"];
17->4 [style = bold, label=""];
}
