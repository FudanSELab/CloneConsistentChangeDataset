digraph {
23 [style = filled, label = "assertNotNull(zk.exists(\"/revalidtest\",null),\"Read-after write failed\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "PortForwarder obsPF = new PortForwarder(obsProxyPort,CLIENT_PORT_OBS)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "{}@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "boolean testObserverMaster@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertTrue(ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_OBS,CONNECTION_TIMEOUT),\"waiting for server 3 being up\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testRevalidation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "latch.await()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "leaderPF.shutdown()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "int leaderPort = q1.getQuorumPeer().leader == null? CLIENT_PORT_QP2: CLIENT_PORT_QP1@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final int obsProxyPort = PortAssignment.unique()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "latch = new CountDownLatch(1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "zk = new ZooKeeper(String.format(\"127.0.0.1:%d,127.0.0.1:%d\",leaderProxyPort,obsProxyPort),ClientBase.CONNECTION_TIMEOUT,this)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "q3.start()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testObserver['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "setUp(-1,testObserverMaster)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final int leaderProxyPort = PortAssignment.unique()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "latch.await()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Exception e@@@20@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "PortForwarder leaderPF = new PortForwarder(leaderProxyPort,leaderPort)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "shutdown()@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testObserver['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "zk.create(\"/revalidtest\",\"test\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(new String(zk.getData(\"/revalidtest\",null,null)),\"test\")@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "latch = new CountDownLatch(2)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "obsPF.shutdown()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12->25 [style = bold, label=""];
21->11 [style = bold, label=""];
23->9 [style = bold, label=""];
5->19 [style = dotted, label="true"];
25->26 [style = solid, label="leaderProxyPort"];
24->13 [style = bold, label=""];
2->3 [style = dotted, label="true"];
1->0 [style = dotted, label="true"];
4->16 [style = bold, label=""];
13->23 [style = bold, label=""];
15->4 [style = bold, label=""];
7->26 [style = bold, label=""];
11->15 [style = bold, label=""];
6->22 [style = bold, label=""];
25->18 [style = bold, label=""];
26->14 [style = bold, label=""];
19->6 [style = solid, label="testObserverMaster"];
18->20 [style = solid, label="obsProxyPort"];
18->8 [style = solid, label="obsProxyPort"];
20->24 [style = bold, label=""];
10->15 [style = bold, label=""];
16->17 [style = bold, label=""];
9->8 [style = bold, label=""];
22->12 [style = bold, label=""];
25->20 [style = solid, label="leaderProxyPort"];
8->10 [style = bold, label=""];
14->20 [style = bold, label=""];
5->6 [style = bold, label=""];
7->26 [style = solid, label="leaderPort"];
18->7 [style = bold, label=""];
}
