digraph {
4 [style = filled, label = "accessor.clearReadCounters()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "_gSetupTool.addResourceToCluster(CLUSTER_NAME,\"TestDB_2\",_PARTITIONS,STATE_MODEL)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW),0)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES),0)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "cache.refresh(accessor)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW),0)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "_gSetupTool.rebalanceStorageCluster(CLUSTER_NAME,\"TestDB_2\",_replica)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "cache.notifyDataChange(HelixConstants.ChangeType.IDEAL_STATE)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "Assert.assertTrue(_clusterVerifier.verifyByPolling())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "_gSetupTool.addResourceToCluster(CLUSTER_NAME,\"TestDB_1\",_PARTITIONS,STATE_MODEL)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "accessor.clearReadCounters()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES),0)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testUpdateOnNotification['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
42 [style = filled, label = "_gSetupTool.addResourceToCluster(CLUSTER_NAME,\"TestDB_3\",_PARTITIONS,STATE_MODEL)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "cache.refresh(accessor)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES),0)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "cache.refresh(accessor)@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES),1)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES),NODE_NR)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testSelectiveUpdates['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES),NODE_NR)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Thread.sleep(100)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW),0)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "cache.refresh(accessor)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "TaskDriver driver = new TaskDriver(_manager)@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "cache.notifyDataChange(HelixConstants.ChangeType.IDEAL_STATE)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW),0)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES),0)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "MockZkHelixDataAccessor accessor = new MockZkHelixDataAccessor(CLUSTER_NAME,new ZkBaseDataAccessor<ZNRecord>(_gZkClient))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "_gSetupTool.rebalanceStorageCluster(CLUSTER_NAME,\"TestDB_1\",_replica)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "cache.notifyDataChange(HelixConstants.ChangeType.RESOURCE_CONFIG)@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS),2)@@@44@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ResourceControllerDataProvider cache = new ResourceControllerDataProvider(\"CLUSTER_\" + TestHelper.getTestClassName())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testUpdateOnNotification['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS),0)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES),0)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW),1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES),0)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "cache.refresh(accessor)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS),NODE_NR + 2)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "accessor.clearReadCounters()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "_gSetupTool.rebalanceStorageCluster(CLUSTER_NAME,\"TestDB_3\",_replica)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "Thread.sleep(100)@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES),2)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "accessor.clearReadCounters()@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES),0)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES),0)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "driver.start(workflow.build())@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW),0)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS),0)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "cache.refresh(accessor)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Workflow.Builder workflow = WorkflowGenerator.generateSingleJobWorkflowBuilder(\"Job\",new JobConfig.Builder().setCommand(\"ReIndex\").setTargetResource(\"TestDB_2\"))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES),NODE_NR)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "accessor.clearReadCounters()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES),1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS),NODE_NR + 1)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31->14 [style = bold, label=""];
5->29 [style = bold, label=""];
6->3 [style = bold, label=""];
8->16 [style = bold, label=""];
42->41 [style = bold, label=""];
40->49 [style = bold, label=""];
22->15 [style = bold, label=""];
44->36 [style = bold, label=""];
9->0 [style = bold, label=""];
18->23 [style = bold, label=""];
23->17 [style = solid, label="accessor"];
35->55 [style = bold, label=""];
14->34 [style = dashed, label="0"];
38->52 [style = bold, label=""];
45->51 [style = bold, label=""];
10->24 [style = bold, label=""];
28->11 [style = bold, label=""];
50->17 [style = bold, label=""];
43->48 [style = bold, label=""];
14->22 [style = bold, label=""];
52->4 [style = bold, label=""];
55->40 [style = bold, label=""];
34->54 [style = bold, label=""];
0->53 [style = dashed, label="0"];
23->19 [style = solid, label="accessor"];
13->30 [style = bold, label=""];
12->26 [style = bold, label=""];
7->20 [style = bold, label=""];
4->2 [style = bold, label=""];
47->39 [style = bold, label=""];
54->15 [style = bold, label=""];
19->6 [style = bold, label=""];
15->16 [style = bold, label=""];
51->35 [style = bold, label=""];
25->17 [style = bold, label=""];
1->13 [style = bold, label=""];
37->23 [style = bold, label=""];
31->34 [style = bold, label=""];
20->27 [style = bold, label=""];
26->21 [style = bold, label=""];
32->29 [style = bold, label=""];
33->23 [style = bold, label=""];
23->13 [style = solid, label="accessor"];
5->32 [style = dashed, label="0"];
21->5 [style = bold, label=""];
27->4 [style = bold, label=""];
17->53 [style = bold, label=""];
0->10 [style = bold, label=""];
30->12 [style = bold, label=""];
53->46 [style = bold, label=""];
48->45 [style = bold, label=""];
29->19 [style = bold, label=""];
3->7 [style = bold, label=""];
15->28 [style = bold, label=""];
16->44 [style = bold, label=""];
24->25 [style = bold, label=""];
21->32 [style = bold, label=""];
23->9 [style = solid, label="accessor"];
23->31 [style = solid, label="accessor"];
23->40 [style = solid, label="accessor"];
39->38 [style = bold, label=""];
23->1 [style = bold, label=""];
11->8 [style = bold, label=""];
27->47 [style = bold, label=""];
41->50 [style = bold, label=""];
16->9 [style = bold, label=""];
36->42 [style = bold, label=""];
2->31 [style = bold, label=""];
46->43 [style = bold, label=""];
}
