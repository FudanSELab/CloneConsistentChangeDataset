digraph {
0 [style = filled, label = "callFactory.maybeAdd(\"foo\",calls)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "call.enqueue(assertFailOnError)@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "calls.get(0).enqueue(assertFailOnError)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testFactory.maybeAdd(\"bar\",calls)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "TestFactory testFactory = new TestFactory()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "calls.clear()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "callFactory.maybeAdd(\"foo\",calls)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "calls.get(0).enqueue(assertFailOnError)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "enqueuesInOrder['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "callFactory.maybeAdd(\"bar\",calls)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "failValue.set(\"foo\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "exceptionsInvalidate_enqueue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "failBecauseExceptionWasNotThrown()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "List<Call<Void>> calls = new ArrayList<>()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(values).containsExactly(\"foo\",\"bar\")@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertThat(calls).isNotEmpty()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "{}@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(testFactory.values).containsExactly(\"foo\",\"bar\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertThat(values).containsExactly(\"bar\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "AssertionError e@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "enqueuesInOrder['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertThat(values).containsExactly(\"bar\",\"foo\")@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testFactory.maybeAdd(\"foo\",calls)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "call.enqueue(assertFailOnError)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "calls.get(1).enqueue(assertFailOnError)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
14->16 [style = bold, label=""];
4->0 [style = solid, label="calls"];
9->0 [style = bold, label=""];
18->23 [style = bold, label=""];
3->1 [style = bold, label=""];
21->19 [style = bold, label=""];
15->14 [style = bold, label=""];
0->7 [style = solid, label="calls"];
7->10 [style = bold, label=""];
19->20 [style = bold, label=""];
4->3 [style = solid, label="calls"];
0->10 [style = solid, label="calls"];
3->12 [style = bold, label=""];
12->24 [style = bold, label=""];
17->23 [style = bold, label=""];
4->0 [style = bold, label=""];
0->7 [style = bold, label=""];
22->18 [style = bold, label=""];
10->8 [style = bold, label=""];
23->21 [style = bold, label=""];
5->4 [style = bold, label=""];
24->17 [style = bold, label=""];
2->11 [style = dashed, label="0"];
1->2 [style = bold, label=""];
3->10 [style = dashed, label="0"];
6->9 [style = bold, label=""];
0->7 [style = dashed, label="0"];
8->11 [style = bold, label=""];
20->15 [style = bold, label=""];
4->20 [style = solid, label="calls"];
13->4 [style = bold, label=""];
}
