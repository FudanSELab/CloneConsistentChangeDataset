digraph {
32 [style = filled, label = "assertThat(graph.hasEdgeConnecting(predecessor,node)).isTrue()@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "sanityCheckSet(graph.edges())@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertStronglyEquivalent(graph,ImmutableGraph.copyOf(graph))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "int nodeStart = graphString.indexOf(\"nodes:\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(nodeString).contains(node.toString())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Set<EndpointPair<N>> allEndpointPairs = new HashSet<EndpointPair<N>>()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(graph.degree(node)).isEqualTo(graph.inDegree(node) + graph.outDegree(node))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertStronglyEquivalent(graph,Graphs.copyOf(graph))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(graph.inDegree(node)).isEqualTo(graph.degree(node))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(graph.predecessors(node)).isEqualTo(graph.adjacentNodes(node))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "validateGraph['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "assertThat(graph.hasEdgeConnecting(node,successor)).isTrue()@@@40@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertThat(node).isNotEqualTo(adjacentNode)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(graph.edges()).isEqualTo(allEndpointPairs)@@@43@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(graph.degree(node)).isEqualTo(graph.adjacentNodes(node).size() + selfLoopCount)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(graph.successors(predecessor)).contains(node)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Graph<N> graph@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "allEndpointPairs.add(EndpointPair.of(graph,node,successor))@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(graph.predecessors(node)).hasSize(graph.inDegree(node))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(graphString).contains(\"allowsSelfLoops: \" + graph.allowsSelfLoops())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "String nodeString = graphString.substring(nodeStart,edgeStart)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(graph.outDegree(node)).isEqualTo(graph.degree(node))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(graph.successors(node)).hasSize(graph.outDegree(node))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "String graphString = graph.toString()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "graph.isDirected()@@@14@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(graph.predecessors(node).contains(adjacentNode) || graph.successors(node).contains(adjacentNode)).isTrue()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(graphString).contains(\"isDirected: \" + graph.isDirected())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(graph.successors(node)).isEqualTo(graph.adjacentNodes(node))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "!graph.allowsSelfLoops()@@@28@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "int selfLoopCount = graph.adjacentNodes(node).contains(node)? 1: 0@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(graph.predecessors(successor)).contains(node)@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(graph.edges()).doesNotContain(EndpointPair.of(graph,new Object(),new Object()))@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "validateGraph['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "int edgeStart = graphString.indexOf(\"edges:\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "validateGraph['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7->6 [style = solid, label="graph"];
5->8 [style = bold, label=""];
22->33 [style = bold, label=""];
7->12 [style = solid, label="graph"];
22->15 [style = bold, label=""];
12->28 [style = bold, label=""];
23->27 [style = bold, label=""];
28->30 [style = bold, label=""];
33->15 [style = bold, label=""];
3->10 [style = dotted, label="true"];
25->4 [style = solid, label="nodeStart"];
7->15 [style = solid, label="graph"];
27->3 [style = bold, label=""];
18->15 [style = bold, label=""];
23->29 [style = solid, label="allEndpointPairs"];
19->16 [style = solid, label="selfLoopCount"];
34->7 [style = dotted, label="true"];
9->10 [style = bold, label=""];
17->4 [style = solid, label="edgeStart"];
3->9 [style = dotted, label="true"];
1->26 [style = bold, label=""];
26->24 [style = bold, label=""];
24->18 [style = bold, label=""];
25->17 [style = bold, label=""];
33->27 [style = bold, label=""];
33->13 [style = bold, label=""];
3->8 [style = dotted, label="false"];
31->7 [style = dotted, label="true"];
15->22 [style = bold, label=""];
19->16 [style = bold, label=""];
3->9 [style = bold, label=""];
24->26 [style = bold, label=""];
11->5 [style = bold, label=""];
26->0 [style = bold, label=""];
3->20 [style = dotted, label="false"];
21->29 [style = bold, label=""];
31->6 [style = bold, label=""];
3->19 [style = bold, label=""];
22->27 [style = bold, label=""];
3->11 [style = dotted, label="false"];
0->24 [style = bold, label=""];
3->19 [style = dotted, label="false"];
34->6 [style = bold, label=""];
14->7 [style = dotted, label="true"];
32->15 [style = bold, label=""];
18->32 [style = bold, label=""];
32->18 [style = bold, label=""];
22->13 [style = bold, label=""];
7->21 [style = solid, label="graph"];
30->2 [style = bold, label=""];
3->5 [style = dotted, label="false"];
10->1 [style = bold, label=""];
2->25 [style = bold, label=""];
16->20 [style = bold, label=""];
13->21 [style = bold, label=""];
3->1 [style = dotted, label="true"];
3->16 [style = dotted, label="false"];
14->6 [style = bold, label=""];
17->4 [style = bold, label=""];
4->23 [style = bold, label=""];
26->0 [style = dotted, label="true"];
20->11 [style = bold, label=""];
8->26 [style = bold, label=""];
6->12 [style = bold, label=""];
}
