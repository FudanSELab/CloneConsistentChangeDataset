digraph {
11 [style = filled, label = "main.start()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(\"127.0.0.1:\" + CLIENT_PORT,ClientBase.CONNECTION_TIMEOUT))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testStandalone['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertTrue(\"metrics provider lifecycle error\",BaseTestMetricsProvider.MetricsProviderCapturingLifecycle.startCalled.get())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertTrue(\"waiting for server being up\",ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT,CONNECTION_TIMEOUT))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "main.join()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(new String(zk.getData(\"/foo\",null,null)),\"foobar\")@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final int CLIENT_PORT = PortAssignment.unique()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(\"waiting for server being up\",ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT,CONNECTION_TIMEOUT))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "testMetricsProviderLifecycle['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(\"127.0.0.1:\" + CLIENT_PORT,ClientBase.CONNECTION_TIMEOUT))@@@17@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "zk.create(\"/foo\",\"foobar\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "main.start()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "clientConnected = new CountDownLatch(1)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "main.shutdown()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertTrue(\"metrics provider lifecycle error\",BaseTestMetricsProvider.MetricsProviderCapturingLifecycle.stopCalled.get())@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testStandalone['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Assert.assertTrue(\"Failed to establish zkclient connection!\",clientConnected.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "zk.close()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "MetricsProviderCapturingLifecycle.reset()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final String configs = \"metricsProvider.className=\" + .getName() + \"\" + \"metricsProvider.httpPort=1234\"@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "MainThread main = new MainThread(CLIENT_PORT,true,configs)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ZooKeeper zk = new ZooKeeper(\"127.0.0.1:\" + CLIENT_PORT,ClientBase.CONNECTION_TIMEOUT,this)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertTrue(\"metrics provider lifecycle error\",BaseTestMetricsProvider.MetricsProviderCapturingLifecycle.configureCalled.get())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertTrue(\"metrics provider lifecycle error\",BaseTestMetricsProvider.MetricsProviderCapturingLifecycle.getRootContextCalled.get())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "MainThread main = new MainThread(CLIENT_PORT,true,null)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ClientBase.setupTestEnv()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "main.deleteDirs()@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(\"Failed to establish zkclient connection!\",clientConnected.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertEquals(new String(zk.getData(\"/foo\",null,null)),\"foobar\")@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
28->21 [style = bold, label=""];
14->5 [style = bold, label=""];
3->14 [style = bold, label=""];
23->25 [style = bold, label=""];
10->17 [style = solid, label="CLIENT_PORT"];
23->25 [style = solid, label="configs"];
10->23 [style = bold, label=""];
6->11 [style = bold, label=""];
2->20 [style = dashed, label="0"];
9->3 [style = bold, label=""];
13->6 [style = bold, label=""];
10->11 [style = solid, label="CLIENT_PORT"];
16->15 [style = bold, label=""];
10->4 [style = solid, label="CLIENT_PORT"];
6->17 [style = bold, label=""];
19->0 [style = bold, label=""];
15->22 [style = bold, label=""];
27->15 [style = bold, label=""];
11->17 [style = dashed, label="0"];
10->7 [style = solid, label="CLIENT_PORT"];
11->7 [style = bold, label=""];
25->11 [style = bold, label=""];
10->1 [style = solid, label="CLIENT_PORT"];
12->18 [style = dashed, label="0"];
2->9 [style = bold, label=""];
0->20 [style = bold, label=""];
10->13 [style = bold, label=""];
10->12 [style = solid, label="CLIENT_PORT"];
5->18 [style = bold, label=""];
1->19 [style = bold, label=""];
1->4 [style = bold, label=""];
12->29 [style = bold, label=""];
26->28 [style = bold, label=""];
10->18 [style = solid, label="CLIENT_PORT"];
10->25 [style = solid, label="CLIENT_PORT"];
5->12 [style = bold, label=""];
20->9 [style = bold, label=""];
7->1 [style = bold, label=""];
29->24 [style = bold, label=""];
0->2 [style = bold, label=""];
17->7 [style = bold, label=""];
4->19 [style = dashed, label="0"];
10->13 [style = solid, label="CLIENT_PORT"];
22->10 [style = bold, label=""];
24->26 [style = bold, label=""];
15->10 [style = bold, label=""];
8->15 [style = bold, label=""];
4->0 [style = bold, label=""];
10->29 [style = solid, label="CLIENT_PORT"];
}
