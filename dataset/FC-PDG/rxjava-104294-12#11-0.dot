digraph {
14 [style = filled, label = "sequenceEqual['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "return RxJavaPlugins.onAssembly(new ObservableSequenceEqualSingle<>(source1,source2,isEqual,bufferSize))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Objects.requireNonNull(isEqual,\"isEqual is null\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "@NonNull Publisher<? extends T> source1@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "@NonNull Publisher<? extends T> source1@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "@NonNull ObservableSource<? extends T> source2@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "@NonNull BiPredicate<? super T,? super T> isEqual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "int bufferSize@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Objects.requireNonNull(source1,\"source1 is null\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "@NonNull ObservableSource<? extends T> source1@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "sequenceEqual['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "sequenceEqual['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "@NonNull Publisher<? extends T> source2@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "ObjectHelper.verifyPositive(bufferSize,\"bufferSize\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "int bufferSize@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "@NonNull Publisher<? extends T> source2@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int bufferSize@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "@NonNull BiPredicate<? super T,? super T> isEqual@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "return RxJavaPlugins.onAssembly(new FlowableSequenceEqualSingle<>(source1,source2,isEqual,bufferSize))@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Objects.requireNonNull(source2,\"source2 is null\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "@NonNull BiPredicate<? super T,? super T> isEqual@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
5->13 [style = dashed, label="0"];
14->3 [style = bold, label=""];
16->3 [style = bold, label=""];
18->19 [style = solid, label="source1"];
2->6 [style = solid, label="source1"];
14->12 [style = dotted, label="true"];
4->6 [style = solid, label="source2"];
11->6 [style = solid, label="source1"];
18->3 [style = solid, label="source1"];
16->17 [style = dotted, label="true"];
16->15 [style = dotted, label="true"];
15->19 [style = solid, label="source2"];
1->3 [style = bold, label=""];
20->9 [style = solid, label="isEqual"];
16->20 [style = dotted, label="true"];
5->7 [style = solid, label="bufferSize"];
1->4 [style = dotted, label="true"];
20->19 [style = solid, label="isEqual"];
9->7 [style = bold, label=""];
10->6 [style = solid, label="source2"];
14->10 [style = dotted, label="true"];
14->13 [style = dotted, label="true"];
5->20 [style = dashed, label="0"];
17->19 [style = solid, label="bufferSize"];
13->6 [style = solid, label="isEqual"];
5->6 [style = solid, label="bufferSize"];
15->8 [style = solid, label="source2"];
4->8 [style = solid, label="source2"];
3->8 [style = bold, label=""];
7->6 [style = bold, label=""];
6->19 [style = dashed, label="0"];
13->9 [style = solid, label="isEqual"];
8->9 [style = bold, label=""];
10->8 [style = solid, label="source2"];
12->7 [style = solid, label="bufferSize"];
14->11 [style = dotted, label="true"];
2->3 [style = solid, label="source1"];
12->6 [style = solid, label="bufferSize"];
1->0 [style = dotted, label="true"];
11->3 [style = solid, label="source1"];
1->2 [style = dotted, label="true"];
7->19 [style = bold, label=""];
1->5 [style = dotted, label="true"];
17->7 [style = solid, label="bufferSize"];
0->9 [style = solid, label="isEqual"];
0->6 [style = solid, label="isEqual"];
16->18 [style = dotted, label="true"];
}
