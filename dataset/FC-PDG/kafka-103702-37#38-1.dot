digraph {
20 [style = filled, label = "Iterator<ProducerBatch> partitionBatchesIterator = partitionBatches.iterator()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "int i = 0@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "RecordAccumulator accum = new RecordAccumulator(1024 + DefaultRecordBatch.RECORD_BATCH_OVERHEAD,10 * 1024,CompressionType.NONE,lingerMs,100L,metrics,time,new ApiVersions(),null)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "RecordAccumulator accum = new RecordAccumulator(batchSize + DefaultRecordBatch.RECORD_BATCH_OVERHEAD,10L * batchSize,CompressionType.NONE,10L,100L,metrics,time,new ApiVersions(),null)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "Deque<ProducerBatch> partitionBatches = accum.batches().get(tp1)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"Values should match\",ByteBuffer.wrap(value),record.value())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertFalse(\"No more records\",iter.hasNext())@@@34@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(partitionBatchesIterator.next().isWritable())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(2,partitionBatches.size())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "i < appends@@@28@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Iterator<Record> iter = batch.records().records().iterator()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(\"Keys should match\",ByteBuffer.wrap(key),record.key())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "int batchSize = 1025@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(1,partitionBatches.size())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Iterator<Record> iter = batch.records().records().iterator()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(1,batches.size())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testLinger['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "testFull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "i++@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(\"Our partition's leader should be ready\",Collections.singleton(node1),accum.ready(cluster,time.milliseconds()).readyNodes)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "RecordAccumulator accum = createTestRecordAccumulator(batchSize + DefaultRecordBatch.RECORD_BATCH_OVERHEAD,10L * batchSize,CompressionType.NONE,10L)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "accum.append(tp1,0L,key,value,Record.EMPTY_HEADERS,null,maxBlockTimeMs)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(\"Keys should match\",ByteBuffer.wrap(key),record.key())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "ProducerBatch batch = batches.get(0)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "ProducerBatch batch = batches.get(0)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Record record = iter.next()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "assertFalse(\"No more records\",iter.hasNext())@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Record record = iter.next()@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "i++@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Deque<ProducerBatch> partitionBatches = accum.batches().get(tp1)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertEquals(\"Values should match\",ByteBuffer.wrap(value),record.value())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(\"No partitions should be ready.\",0,accum.ready(cluster,now).readyNodes.size())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(1,batches.size())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "i < appends@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "long lingerMs = 10L@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "int appends = expectedNumAppends(batchSize)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "long now = time.milliseconds()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(batch.isWritable())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(\"Our partition's leader should be ready\",Collections.singleton(node1),accum.ready(cluster,time.milliseconds()).readyNodes)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "time.sleep(10)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "int i = 0@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ProducerBatch batch = partitionBatches.peekFirst()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "accum.append(tp1,0L,key,value,Record.EMPTY_HEADERS,null,maxBlockTimeMs)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "List<ProducerBatch> batches = accum.drain(cluster,Collections.singleton(node1),Integer.MAX_VALUE,0).get(node1.id())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "List<ProducerBatch> batches = accum.drain(cluster,Collections.singleton(node1),Integer.MAX_VALUE,0).get(node1.id())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertEquals(\"No partitions should be ready\",0,accum.ready(cluster,time.milliseconds()).readyNodes.size())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "testFull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8->16 [style = bold, label=""];
0->12 [style = dotted, label="true"];
42->37 [style = bold, label=""];
17->0 [style = solid, label="i"];
13->24 [style = bold, label=""];
4->17 [style = bold, label=""];
45->34 [style = solid, label="lingerMs"];
23->22 [style = dotted, label="true"];
25->23 [style = bold, label=""];
6->23 [style = solid, label="appends"];
46->15 [style = bold, label=""];
6->0 [style = solid, label="appends"];
19->31 [style = dashed, label="0"];
23->15 [style = bold, label=""];
2->23 [style = solid, label="i"];
5->31 [style = solid, label="batchSize"];
29->25 [style = bold, label=""];
32->27 [style = bold, label=""];
5->19 [style = solid, label="batchSize"];
34->42 [style = bold, label=""];
1->0 [style = bold, label=""];
9->10 [style = bold, label=""];
35->43 [style = bold, label=""];
40->38 [style = bold, label=""];
19->6 [style = bold, label=""];
11->9 [style = bold, label=""];
24->18 [style = bold, label=""];
12->1 [style = bold, label=""];
23->9 [style = dotted, label="true"];
15->22 [style = bold, label=""];
0->7 [style = bold, label=""];
6->2 [style = bold, label=""];
21->12 [style = bold, label=""];
5->19 [style = bold, label=""];
2->23 [style = bold, label=""];
1->0 [style = solid, label="i"];
18->20 [style = bold, label=""];
3->28 [style = bold, label=""];
20->8 [style = bold, label=""];
0->14 [style = bold, label=""];
26->27 [style = bold, label=""];
17->0 [style = bold, label=""];
23->10 [style = dotted, label="true"];
31->6 [style = bold, label=""];
17->1 [style = solid, label="i"];
5->31 [style = bold, label=""];
10->29 [style = bold, label=""];
30->3 [style = bold, label=""];
0->21 [style = dotted, label="true"];
23->13 [style = bold, label=""];
16->30 [style = bold, label=""];
15->41 [style = bold, label=""];
7->21 [style = bold, label=""];
38->46 [style = bold, label=""];
33->45 [style = bold, label=""];
23->15 [style = dotted, label="true"];
27->5 [style = bold, label=""];
0->7 [style = dotted, label="true"];
41->39 [style = bold, label=""];
36->35 [style = bold, label=""];
23->29 [style = dotted, label="true"];
43->44 [style = bold, label=""];
39->36 [style = bold, label=""];
5->6 [style = solid, label="batchSize"];
2->25 [style = solid, label="i"];
22->11 [style = bold, label=""];
45->34 [style = bold, label=""];
37->40 [style = bold, label=""];
25->23 [style = solid, label="i"];
23->25 [style = dotted, label="true"];
28->4 [style = bold, label=""];
0->1 [style = dotted, label="true"];
23->11 [style = dotted, label="true"];
}
