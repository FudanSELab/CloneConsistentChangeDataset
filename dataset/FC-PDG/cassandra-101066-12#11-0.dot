digraph {
1 [style = filled, label = "Map.Entry<Long,LongSet> listNext = listIterator.next()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final long maxToken@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "RandomAccessReader reader = null@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final File treeFile = FileUtils.createTempFile(\"token-tree-iterate-test1\",\"tt\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(convert(listNext.getValue()),convert(treeNext))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "reader = RandomAccessReader.open(treeFile)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final long minToken@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "boolean isStatic@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "Token treeNext = tokenIterator.next()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "generateTree['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "final TokenTree tokenTree = new TokenTree(new MappedBuffer(reader))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "{FileUtils.closeQuietly(reader)}@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final TokenTreeBuilder builder = isStatic? new StaticTokenTreeBuilder(new FakeCombinedTerm(toks)): new DynamicTokenTreeBuilder(toks)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "generateTree['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "treeFile.deleteOnExit()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final Iterator<Map.Entry<Long,LongSet>> listIterator = tokenMap.entrySet().iterator()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "buildSerializeAndIterate['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "final RandomAccessReader reader = RandomAccessReader.open(treeFile)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(listNext.getKey(),treeNext.get())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "TokenTreeBuilder builder@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final Iterator<Token> tokenIterator = tokenTree.iterator(KEY_CONVERTER)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "writer.sync()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "tokenIterator.hasNext() && listIterator.hasNext()@@@14@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertFalse(\"list iterator not finished\",listIterator.hasNext())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "builder.write(writer)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final SortedMap<Long,LongSet> toks = new TreeMap<Long,LongSet>(){}@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "SortedMap<Long,LongSet> tokenMap@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final long minToken@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertFalse(\"token iterator not finished\",tokenIterator.hasNext())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "reader.close()@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "return new TokenTree(new MappedBuffer(reader))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "builder.finish()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "boolean isStatic@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final File treeFile = FileUtils.createTempFile(\"token-tree-get-test\",\"tt\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26->22 [style = bold, label=""];
12->33 [style = bold, label=""];
30->26 [style = bold, label=""];
9->8 [style = dotted, label="true"];
29->19 [style = bold, label=""];
11->12 [style = bold, label=""];
24->18 [style = bold, label=""];
30->26 [style = solid, label="reader"];
16->2 [style = solid, label="isStatic"];
9->4 [style = bold, label=""];
3->2 [style = solid, label="isStatic"];
19->1 [style = bold, label=""];
23->10 [style = bold, label=""];
17->16 [style = dotted, label="true"];
29->23 [style = dotted, label="true"];
0->7 [style = bold, label=""];
20->31 [style = dotted, label="true"];
20->21 [style = dotted, label="true"];
25->24 [style = bold, label=""];
29->10 [style = dotted, label="true"];
6->0 [style = bold, label=""];
28->32 [style = bold, label=""];
22->27 [style = bold, label=""];
9->13 [style = dotted, label="true"];
17->13 [style = dotted, label="true"];
7->11 [style = dashed, label="0"];
24->30 [style = solid, label="treeFile"];
10->11 [style = bold, label=""];
1->23 [style = bold, label=""];
10->29 [style = bold, label=""];
1->14 [style = bold, label=""];
18->28 [style = bold, label=""];
4->2 [style = bold, label=""];
27->29 [style = bold, label=""];
20->25 [style = bold, label=""];
17->4 [style = bold, label=""];
4->2 [style = solid, label="toks"];
12->5 [style = bold, label=""];
17->15 [style = dotted, label="true"];
14->24 [style = dashed, label="0"];
6->7 [style = solid, label="reader"];
6->0 [style = solid, label="reader"];
2->1 [style = bold, label=""];
29->19 [style = dotted, label="true"];
5->30 [style = dashed, label="0"];
9->3 [style = dotted, label="true"];
14->6 [style = solid, label="treeFile"];
32->30 [style = bold, label=""];
14->10 [style = bold, label=""];
19->10 [style = solid, label="treeNext"];
5->6 [style = bold, label=""];
29->1 [style = dotted, label="true"];
29->11 [style = bold, label=""];
}
