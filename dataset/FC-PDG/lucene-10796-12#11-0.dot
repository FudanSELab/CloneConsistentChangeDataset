digraph {
14 [style = filled, label = "testRandomStrings['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "i++@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Analyzer analyzer = new Analyzer(){@Override protected TokenStreamComponents createComponents(String fieldName){Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE,false)return new TokenStreamComponents(tokenizer,new HunspellStemFilter(tokenizer,dictionary))}}@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "int i = 0@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testRandomStrings['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testRandomStrings['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "final CharArraySet protectedWords@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER,20,false,false)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Analyzer a = new Analyzer(){@Override protected TokenStreamComponents createComponents(String fieldName){Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE,false)return new TokenStreamComponents(tokenizer,new WordDelimiterFilter(TEST_VERSION_CURRENT,tokenizer,flags,protectedWords))}}@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final int flags = random().nextInt(512)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "protectedWords = new CharArraySet(new HashSet<>(Arrays.asList(\"a\",\"b\",\"cd\")),false)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "protectedWords = null@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "protectedWords = new CharArraySet(TEST_VERSION_CURRENT,new HashSet<>(Arrays.asList(\"a\",\"b\",\"cd\")),false)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "int numIterations = atLeast(5)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "random().nextBoolean()@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "i < numIterations@@@5@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4->10 [style = bold, label=""];
10->1 [style = solid, label="protectedWords"];
13->1 [style = solid, label="protectedWords"];
7->11 [style = bold, label=""];
9->1 [style = solid, label="flags"];
6->1 [style = solid, label="protectedWords"];
15->16 [style = solid, label="analyzer"];
4->6 [style = bold, label=""];
4->10 [style = dotted, label="true"];
7->16 [style = dashed, label="0"];
4->13 [style = bold, label=""];
8->7 [style = dotted, label="true"];
2->8 [style = solid, label="numIterations"];
10->13 [style = dashed, label="0"];
15->16 [style = bold, label=""];
1->7 [style = bold, label=""];
8->4 [style = dotted, label="true"];
4->6 [style = dotted, label="false"];
13->1 [style = bold, label=""];
8->1 [style = dotted, label="true"];
6->1 [style = bold, label=""];
4->13 [style = dotted, label="true"];
12->2 [style = bold, label=""];
2->0 [style = bold, label=""];
3->2 [style = bold, label=""];
8->5 [style = dotted, label="true"];
11->8 [style = solid, label="i"];
0->11 [style = solid, label="i"];
5->4 [style = bold, label=""];
0->8 [style = bold, label=""];
0->8 [style = solid, label="i"];
8->9 [style = bold, label=""];
9->5 [style = bold, label=""];
8->11 [style = dotted, label="true"];
11->8 [style = bold, label=""];
14->15 [style = bold, label=""];
8->9 [style = dotted, label="true"];
10->1 [style = bold, label=""];
1->7 [style = solid, label="a"];
}
