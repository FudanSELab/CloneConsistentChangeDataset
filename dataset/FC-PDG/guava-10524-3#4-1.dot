digraph {
14 [style = filled, label = "assertThat(graph.removeEdge(1,2)).isEqualTo(\"valueB\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(graph.removeEdge(2,3)).isEqualTo(\"valueC\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "graph.putEdgeValue(1,2,\"valueA\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "removeEdge_directed['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "graph.putEdgeValue(2,1,\"valueB\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "removeEdge_directed['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(graph.removeEdge(2,1)).isNull()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(graph.removeEdge(2,3)).isNull()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(graph).isEqualTo(ImmutableValueGraph.copyOf(graph))@@@12@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "graph.putEdgeValue(2,3,\"valueC\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(graph.removeEdge(1,2)).isEqualTo(\"valueA\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "removeEdge_undirected['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "graph = ValueGraphBuilder.directed().build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "graph = ValueGraphBuilder.undirected().build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(graph.removeEdge(1,2)).isNull()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(graph.removeEdge(2,1)).isEqualTo(\"valueB\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->9 [style = bold, label=""];
2->1 [style = bold, label=""];
7->14 [style = dashed, label="0"];
1->15 [style = dashed, label="0"];
1->3 [style = bold, label=""];
7->0 [style = bold, label=""];
5->14 [style = bold, label=""];
15->3 [style = bold, label=""];
12->1 [style = bold, label=""];
3->4 [style = bold, label=""];
9->6 [style = bold, label=""];
0->10 [style = bold, label=""];
14->0 [style = bold, label=""];
6->8 [style = bold, label=""];
15->11 [style = solid, label="graph"];
5->7 [style = bold, label=""];
10->9 [style = bold, label=""];
13->15 [style = bold, label=""];
8->11 [style = bold, label=""];
4->5 [style = bold, label=""];
1->11 [style = solid, label="graph"];
}
