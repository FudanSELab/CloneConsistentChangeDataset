digraph {
17 [style = filled, label = "final IndicesService indicesService = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "action.shardOperationOnPrimary(request,indexShard,new LatchedActionListener<>(ActionTestUtils.assertNoFailureListener(null),latch))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "result.runPostReplicaActions(ActionListener.wrap(null,null))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "when(indexService.getShard(id)).thenReturn(indexShard)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "action.dispatchedShardOperationOnReplica(request,indexShard,listener)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testRetentionLeaseBackgroundSyncActionOnPrimary['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final RetentionLeaseSyncAction.Request request = new RetentionLeaseSyncAction.Request(indexShard.shardId(),retentionLeases)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final RetentionLeases retentionLeases = mock()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(Settings.EMPTY,transportService,clusterService,indicesService,threadPool,shardStateAction,new ActionFilters(Collections.emptySet()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(Settings.EMPTY,transportService,clusterService,indicesService,threadPool,shardStateAction,new ActionFilters(Collections.emptySet()),new IndexingPressure(Settings.EMPTY),EmptySystemIndices.INSTANCE)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "final Index index = new Index(\"index\",\"uuid\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(success.get())@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testRetentionLeaseSyncActionOnReplica['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "PlainActionFuture<TransportReplicationAction.ReplicaResult> listener = PlainActionFuture.newFuture()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "verify(indexShard).persistRetentionLeases()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "when(indexShard.shardId()).thenReturn(shardId)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final IndexService indexService = mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "when(indicesService.indexServiceSafe(index)).thenReturn(indexService)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final IndexShard indexShard = mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final AtomicBoolean success = new AtomicBoolean()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final RetentionLeaseBackgroundSyncAction.Request request = new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(),retentionLeases)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testRetentionLeaseSyncActionOnReplica['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(Settings.EMPTY,transportService,clusterService,indicesService,threadPool,shardStateAction,new ActionFilters(Collections.emptySet()),new IndexingPressure(Settings.EMPTY),new SystemIndices(Map.of()))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "final ShardId shardId = new ShardId(index,id)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "latch.await()@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final TransportReplicationAction.ReplicaResult result = listener.actionGet()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final CountDownLatch latch = new CountDownLatch(1)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final int id = randomIntBetween(0,4)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->19 [style = solid, label="indicesService"];
5->3 [style = bold, label=""];
10->27 [style = solid, label="indexShard"];
3->7 [style = solid, label="request"];
3->26 [style = dashed, label="0"];
17->6 [style = bold, label=""];
10->14 [style = bold, label=""];
0->19 [style = bold, label=""];
7->12 [style = bold, label=""];
27->28 [style = bold, label=""];
26->25 [style = bold, label=""];
20->4 [style = solid, label="indexService"];
18->15 [style = bold, label=""];
16->7 [style = bold, label=""];
10->14 [style = solid, label="indexShard"];
13->3 [style = solid, label="shardId"];
5->26 [style = bold, label=""];
11->13 [style = solid, label="id"];
13->0 [style = solid, label="shardId"];
2->9 [style = bold, label=""];
26->27 [style = solid, label="request"];
3->16 [style = bold, label=""];
17->22 [style = solid, label="indicesService"];
22->5 [style = bold, label=""];
10->7 [style = solid, label="indexShard"];
24->5 [style = bold, label=""];
1->17 [style = bold, label=""];
20->4 [style = bold, label=""];
7->27 [style = dashed, label="0"];
13->26 [style = solid, label="shardId"];
5->26 [style = solid, label="retentionLeases"];
6->20 [style = bold, label=""];
19->5 [style = bold, label=""];
25->27 [style = bold, label=""];
5->8 [style = solid, label="retentionLeases"];
5->3 [style = solid, label="retentionLeases"];
9->18 [style = bold, label=""];
6->13 [style = solid, label="index"];
8->2 [style = bold, label=""];
11->10 [style = bold, label=""];
12->8 [style = bold, label=""];
16->7 [style = solid, label="listener"];
0->22 [style = bold, label=""];
0->24 [style = bold, label=""];
19->22 [style = dashed, label="0"];
17->24 [style = solid, label="indicesService"];
23->17 [style = bold, label=""];
19->24 [style = dashed, label="0"];
25->27 [style = solid, label="latch"];
14->13 [style = bold, label=""];
4->11 [style = bold, label=""];
21->17 [style = bold, label=""];
13->0 [style = bold, label=""];
}
