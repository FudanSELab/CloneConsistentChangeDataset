digraph {
0 [style = filled, label = "SQLException exp = new SQLException(\"\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "when(preparedStatement.executeBatch()).thenThrow(exp)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "PreparedStatement preparedStatement = getPreparedStatement()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "verify(preparedStatement1).executeBatch()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "verify(preparedStatement2).executeBatch()@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "SQLException ex = new SQLException(\"\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "when(preparedStatement1.executeBatch()).thenReturn(new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16e8efc)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "PreparedStatement preparedStatement1 = getPreparedStatement()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "setExecuteGroups(Collections.singletonList(preparedStatement))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "PreparedStatement preparedStatement2 = getPreparedStatement()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "when(preparedStatement2.executeBatch()).thenReturn(new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16e8f09)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertExecuteBatchForSinglePreparedStatementFailure['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "verify(preparedStatement).executeBatch()@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "setExecuteGroups(Arrays.asList(preparedStatement1,preparedStatement2))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(actual.executeBatch(sqlStatementContext),is(new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16e8f1f))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "when(preparedStatement.executeBatch()).thenThrow(ex)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertExecuteBatchForSinglePreparedStatementFailure['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertExecuteBatchForMultiplePreparedStatementsSuccess['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(actual.executeBatch(sqlStatementContext),is(new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16e8ed9))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->7 [style = solid, label="ex"];
1->14 [style = dashed, label="0"];
16->11 [style = solid, label="preparedStatement1"];
3->6 [style = bold, label=""];
8->6 [style = bold, label=""];
6->0 [style = bold, label=""];
16->17 [style = bold, label=""];
9->7 [style = bold, label=""];
15->16 [style = bold, label=""];
2->4 [style = bold, label=""];
13->11 [style = bold, label=""];
11->18 [style = bold, label=""];
6->2 [style = solid, label="preparedStatement"];
6->16 [style = dashed, label="0"];
18->10 [style = bold, label=""];
17->11 [style = solid, label="preparedStatement2"];
5->10 [style = dashed, label="0"];
17->14 [style = bold, label=""];
10->12 [style = bold, label=""];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
0->1 [style = solid, label="exp"];
1->2 [style = bold, label=""];
14->13 [style = bold, label=""];
0->9 [style = dashed, label="0"];
6->9 [style = bold, label=""];
1->7 [style = dashed, label="0"];
4->5 [style = bold, label=""];
}
