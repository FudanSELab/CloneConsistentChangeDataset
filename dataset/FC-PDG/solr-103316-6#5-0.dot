digraph {
4 [style = filled, label = "assertTrue(clauses(0(.getQuery() instanceof DisjunctionMaxQuery)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery()@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "Query barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "assertFalse(q instanceof BoostQuery)@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "testBoost['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "assertEquals(3.0,((BoostQuery)q).getBoost(),1e-15)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertEquals(3.0,q.getBoost(),1e-15)@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery()@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "Query fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(2.0,fooClause,1e-15)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "q = parse(\"foo^5.0 bar^6.0 +baz^7\")@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(6.0,barClause,1e-15)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery().getBoost()@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "q = parse(\"foo^3.0\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertEquals(2,qa.size())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "q = parse(\"(foo^2.0 bar)^3.0\")@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(5.0,fooClause,1e-15)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "float barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery().getBoost()@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "assertEquals(1,clauses.length)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(2,clauses.length)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertFalse(barClause instanceof BoostQuery)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertTrue(clauses(0(.getQuery() instanceof DisjunctionMaxQuery)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "q = parse(\"foo bar\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertEquals(\"text:foo\",qa.get(0).toString())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(0.0,((DisjunctionMaxQuery)clauses(0(.getQuery()).getTieBreakerMultiplier(),1e-15)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(3.0,((BoostQuery)q).getBoost(),1e-15)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertEquals(6.0,((BoostQuery)barClause).getBoost(),1e-15)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertEquals(7.0,clauses(1(.getQuery().getBoost(),1e-15)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "ArrayList<Query> qa = ((DisjunctionMaxQuery)clauses(0(.getQuery()).getDisjuncts()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(1.0,barClause,1e-15)@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "assertEquals(7.0,((BoostQuery)clauses(1(.getQuery()).getBoost(),1e-15)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertEquals(2.0,((BoostQuery)fooClause).getBoost(),1e-15)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertTrue(q instanceof BoostQuery)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertEquals(1.0,q.getBoost(),1e-15)@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testPureMax['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(3.0,q.getBoost(),1e-15)@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testBoost['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(clauses(0(.getQuery() instanceof DisjunctionMaxQuery)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "clauses = clauses(q)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "dmq = ((DisjunctionMaxQuery)clauses(0(.getQuery())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "q = parse(\"(foo^2.0 bar)^3.0\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "DisjunctionMaxQuery dmq = ((DisjunctionMaxQuery)clauses(0(.getQuery())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "clauses = clauses(q)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(5.0,((BoostQuery)fooClause).getBoost(),1e-15)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12->10 [style = dashed, label="0"];
29->36 [style = bold, label=""];
5->29 [style = bold, label=""];
32->35 [style = bold, label=""];
1->4 [style = bold, label=""];
7->21 [style = solid, label="q"];
14->23 [style = solid, label="barClause"];
13->43 [style = dashed, label="0"];
9->0 [style = bold, label=""];
33->3 [style = bold, label=""];
5->9 [style = bold, label=""];
8->31 [style = bold, label=""];
21->10 [style = solid, label="clauses"];
7->10 [style = bold, label=""];
22->20 [style = solid, label="fooClause"];
2->6 [style = bold, label=""];
42->39 [style = bold, label=""];
23->28 [style = dashed, label="0"];
5->29 [style = solid, label="q"];
11->17 [style = solid, label="barClause"];
7->33 [style = solid, label="q"];
22->32 [style = bold, label=""];
28->26 [style = bold, label=""];
20->14 [style = bold, label=""];
22->32 [style = dashed, label="0"];
15->3 [style = bold, label=""];
38->42 [style = bold, label=""];
13->11 [style = bold, label=""];
7->3 [style = solid, label="clauses"];
6->15 [style = bold, label=""];
0->7 [style = bold, label=""];
43->40 [style = bold, label=""];
19->5 [style = bold, label=""];
3->10 [style = bold, label=""];
20->35 [style = dashed, label="0"];
18->34 [style = dashed, label="0"];
30->28 [style = bold, label=""];
15->3 [style = solid, label="q"];
13->27 [style = dashed, label="0"];
24->37 [style = solid, label="barClause"];
14->23 [style = bold, label=""];
22->20 [style = bold, label=""];
10->16 [style = bold, label=""];
31->27 [style = bold, label=""];
36->7 [style = bold, label=""];
39->7 [style = bold, label=""];
12->8 [style = bold, label=""];
0->7 [style = solid, label="q"];
37->34 [style = bold, label=""];
14->30 [style = dashed, label="0"];
21->1 [style = bold, label=""];
11->24 [style = dashed, label="0"];
24->37 [style = bold, label=""];
16->43 [style = bold, label=""];
7->21 [style = bold, label=""];
11->17 [style = bold, label=""];
25->5 [style = bold, label=""];
41->38 [style = bold, label=""];
27->24 [style = bold, label=""];
5->38 [style = dashed, label="0"];
23->2 [style = bold, label=""];
17->37 [style = dashed, label="0"];
8->31 [style = dashed, label="0"];
3->10 [style = solid, label="q"];
2->26 [style = dashed, label="0"];
35->30 [style = bold, label=""];
26->33 [style = bold, label=""];
16->12 [style = bold, label=""];
4->22 [style = bold, label=""];
8->13 [style = solid, label="fooClause"];
38->42 [style = solid, label="q"];
17->18 [style = bold, label=""];
8->13 [style = bold, label=""];
}
