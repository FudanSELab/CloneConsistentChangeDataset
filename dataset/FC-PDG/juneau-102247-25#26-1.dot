digraph {
21 [style = filled, label = "AnnotationInfo<RestPost> ai@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "b.set(REST_parsers,merge(ConverterUtils.toType(b.peek(REST_parsers),),a.parsers()))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "b.setIfNotEmpty(REST_defaultCharset,string(a.defaultCharset()))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "b.addToIfNotEmpty(REST_roleGuard,string(a.roleGuard()))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "apply['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "b.httpMethod(\"put\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "b.setIfNotEmpty(REST_maxInput,string(a.maxInput()))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "stringStream(a.path()).forEach(null)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "stringStream(a.defaultQuery()).map(null).forEach(null)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "b.prependTo(REST_guards,reverse(a.guards()))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "cdStream(a.rolesDeclared()).forEach(null)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "b.set(REST_encoders,merge(ConverterUtils.toType(b.peek(REST_encoders),),a.encoders()))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "b.appendToIfNotEmpty(REST_defaultRequestHeaders,contentType(string(a.defaultContentType())))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "value(a.clientVersion()).ifPresent(null)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "stringStream(a.defaultRequestAttributes()).map(null).forEach(null)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "stringStream(a.defaultQueryData()).map(null).forEach(null)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "value(a.value()).ifPresent(null)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "AnnotationInfo<RestPost> ai@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "RestOperationContextBuilder b@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "b.httpMethod(\"post\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "value(a.debug()).map(null).ifPresent(null)@@@28@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "b.appendToIfNotEmpty(REST_defaultRequestHeaders,accept(string(a.defaultAccept())))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "stringStream(a.defaultFormData()).map(null).forEach(null)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "value(a.contextClass(),).ifPresent(null)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "apply['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "b.set(REST_serializers,merge(ConverterUtils.toType(b.peek(REST_serializers),),a.serializers()))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "b.setIfNotEmpty(REST_consumes,stringList(a.consumes()))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "b.prependTo(REST_converters,a.converters())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "RestPut a = ai.getAnnotation()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "b.prependTo(RESTOP_matchers,a.matchers())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "RestOperationContextBuilder b@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "apply['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "stringStream(a.defaultFormData()).map(null).forEach(null)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "stringStream(a.defaultRequestHeaders()).map(null).forEach(null)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "stringStream(a.defaultResponseHeaders()).map(null).forEach(null)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "b.setIfNotEmpty(REST_produces,stringList(a.produces()))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "RestPost a = ai.getAnnotation()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "AnnotationInfo<RestPut> ai@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
11->20 [style = bold, label=""];
15->10 [style = bold, label=""];
30->22 [style = bold, label=""];
13->24 [style = bold, label=""];
17->1 [style = bold, label=""];
0->6 [style = bold, label=""];
1->30 [style = dashed, label="0"];
27->3 [style = bold, label=""];
12->17 [style = bold, label=""];
35->33 [style = bold, label=""];
12->32 [style = bold, label=""];
4->26 [style = bold, label=""];
14->19 [style = bold, label=""];
17->32 [style = dashed, label="0"];
21->37 [style = dashed, label="0"];
10->33 [style = dashed, label="0"];
32->30 [style = bold, label=""];
31->15 [style = bold, label=""];
22->5 [style = bold, label=""];
33->13 [style = bold, label=""];
36->37 [style = dotted, label="true"];
2->12 [style = bold, label=""];
19->16 [style = bold, label=""];
24->14 [style = bold, label=""];
1->22 [style = bold, label=""];
15->35 [style = dashed, label="0"];
26->2 [style = bold, label=""];
3->28 [style = bold, label=""];
20->8 [style = bold, label=""];
31->21 [style = dotted, label="true"];
25->9 [style = dotted, label="true"];
10->13 [style = bold, label=""];
28->23 [style = bold, label=""];
6->11 [style = bold, label=""];
7->18 [style = bold, label=""];
25->15 [style = bold, label=""];
23->7 [style = bold, label=""];
5->27 [style = bold, label=""];
16->4 [style = bold, label=""];
36->35 [style = bold, label=""];
31->29 [style = dotted, label="true"];
36->34 [style = dotted, label="true"];
18->0 [style = bold, label=""];
25->21 [style = dotted, label="true"];
}
