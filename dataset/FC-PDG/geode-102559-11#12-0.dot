digraph {
15 [style = filled, label = "ByteBuffer appData = ByteBuffer.allocate(outputSharing.getBuffer().capacity() + 100)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "wrap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Arrays.fill(netBytes,(byte)0x1F)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "unwrapWithDecryptionError['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "appData.flip()@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "verify(spyBufferPool,times(1)).expandWriteBufferIfNeeded(any(),any(),any())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "wrappedData.flip()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "wrap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "byte(( appBytes = new byte((((@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "appData.put(appBytes)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "verify(spyNioSslEngine,times(1)).expandWriteBuffer(any(),any(),any())@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(wrappedBuffer).isEqualTo(appData)@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "ByteBuffer appData = ByteBuffer.allocate(nioSslEngine.myNetData.capacity() + 100)@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThatThrownBy(null).isInstanceOf().hasMessageContaining(\"Error decrypting data\")@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "verify(spyNioSslEngine,times(1)).handleBlockingTasks()@@@18@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "byte(( appBytes = new byte((((@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Arrays.fill(appBytes,(byte)0x1F)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "wrappedData.put(netBytes)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testEngine.addReturnResult(new SSLEngineResult(CLOSED,FINISHED,0,0))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "ByteBuffer wrappedBuffer = outputSharing2.getBuffer()@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "ByteBuffer wrappedData = ByteBuffer.allocate(nioSslEngine.peerAppData.capacity())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "appData.flip()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "byte(( netBytes = new byte((((@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(wrappedBuffer).isEqualTo(appData)@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
22->26 [style = bold, label=""];
11->8 [style = solid, label="appData"];
16->0 [style = bold, label=""];
7->11 [style = bold, label=""];
21->6 [style = bold, label=""];
12->21 [style = bold, label=""];
26->27 [style = solid, label="netBytes"];
6->23 [style = bold, label=""];
3->27 [style = dashed, label="0"];
11->4 [style = bold, label=""];
5->9 [style = solid, label="appBytes"];
11->22 [style = dashed, label="0"];
18->19 [style = bold, label=""];
11->13 [style = solid, label="appData"];
26->20 [style = bold, label=""];
1->21 [style = dashed, label="0"];
12->6 [style = solid, label="testEngine"];
4->26 [style = dashed, label="0"];
2->10 [style = bold, label=""];
12->1 [style = bold, label=""];
24->22 [style = bold, label=""];
13->23 [style = dashed, label="0"];
15->5 [style = bold, label=""];
4->3 [style = solid, label="appBytes"];
5->20 [style = dashed, label="0"];
20->27 [style = bold, label=""];
8->0 [style = bold, label=""];
3->9 [style = bold, label=""];
13->17 [style = bold, label=""];
1->6 [style = bold, label=""];
10->8 [style = bold, label=""];
25->12 [style = bold, label=""];
5->3 [style = solid, label="appBytes"];
6->13 [style = bold, label=""];
9->25 [style = dashed, label="0"];
0->18 [style = bold, label=""];
14->15 [style = bold, label=""];
9->12 [style = bold, label=""];
26->20 [style = solid, label="netBytes"];
1->13 [style = solid, label="testEngine"];
4->5 [style = solid, label="appBytes"];
4->5 [style = bold, label=""];
27->25 [style = bold, label=""];
15->18 [style = solid, label="appData"];
17->16 [style = bold, label=""];
13->2 [style = bold, label=""];
}
