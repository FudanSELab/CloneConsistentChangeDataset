digraph {
24 [style = filled, label = "assertEquals(\"point EMPTY\",wkt.toWKT(Point.EMPTY))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(\"MULTIPOINT (2.0 1.0, 3.0 4.0)\",wkt.toWKT(new MultiPoint(Arrays.asList(new Point(2,1),new Point(3,4)))))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertEquals(new MultiPoint(Collections.singletonList(new Point(2,1))),wkt.fromWKT(\"multipoint (2 1)\"))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertEquals(\"point (20.0 10.0)\",wkt.toWKT(new Point(20,10)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(new Point(20,10),wkt.fromWKT(\"point (20.0 10.0)\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "WellKnownText wkt = new WellKnownText(true,new GeographyValidator(true))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testBasicSerialization['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertEquals(MultiPoint.EMPTY,wkt.fromWKT(\"multipoint EMPTY)\"))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertEquals(\"multipoint EMPTY\",wkt.toWKT(MultiPoint.EMPTY))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertEquals(new MultiPoint(Arrays.asList(new Point(2,1),new Point(3,4))),wkt.fromWKT(\"MULTIPOINT (2 1, 3 4)\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertEquals(new MultiPoint(Arrays.asList(new Point(2,1),new Point(3,4))),wkt.fromWKT(\"multipoint (2 1, 3 4)\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"MULTIPOINT (2.0 1.0 10.0, 3.0 4.0 20.0)\",wkt.toWKT(new MultiPoint(Arrays.asList(new Point(2,1,10),new Point(3,4,20)))))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(new MultiPoint(Collections.singletonList(new Point(2,1))),wkt.fromWKT(\"MULTIPOINT (2 1)\"))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertEquals(\"point (20.0 10.0 100.0)\",wkt.toWKT(new Point(20,10,100)))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(new MultiPoint(Arrays.asList(new Point(2,1,10),new Point(3,4,20))),wkt.fromWKT(\"MULTIPOINT (2 1 10, 3 4 20)\"))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertEquals(\"multipoint (2.0 1.0 10.0, 3.0 4.0 20.0)\",wkt.toWKT(new MultiPoint(Arrays.asList(new Point(2,1,10),new Point(3,4,20)))))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertEquals(\"multipoint (2.0 1.0)\",wkt.toWKT(new MultiPoint(Collections.singletonList(new Point(2,1)))))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\"multipoint (2.0 1.0, 3.0 4.0)\",wkt.toWKT(new MultiPoint(Arrays.asList(new Point(2,1),new Point(3,4)))))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"MULTIPOINT (2.0 1.0)\",wkt.toWKT(new MultiPoint(Collections.singletonList(new Point(2,1)))))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertEquals(Point.EMPTY,wkt.fromWKT(\"point EMPTY)\"))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testBasicSerialization['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testBasicSerialization['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(\"MULTIPOINT EMPTY\",wkt.toWKT(MultiPoint.EMPTY))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(new MultiPoint(Arrays.asList(new Point(2,1,10),new Point(3,4,20))),wkt.fromWKT(\"multipoint (2 1 10, 3 4 20)\"))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertEquals(new Point(20,10,100),wkt.fromWKT(\"point (20.0 10.0 100.0)\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(MultiPoint.EMPTY,wkt.fromWKT(\"MULTIPOINT EMPTY)\"))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16->15 [style = bold, label=""];
22->25 [style = bold, label=""];
15->10 [style = bold, label=""];
7->1 [style = bold, label=""];
1->14 [style = dashed, label="0"];
4->17 [style = dashed, label="0"];
25->23 [style = bold, label=""];
8->15 [style = dashed, label="0"];
18->11 [style = bold, label=""];
0->2 [style = bold, label=""];
8->3 [style = bold, label=""];
10->17 [style = bold, label=""];
21->24 [style = bold, label=""];
3->4 [style = bold, label=""];
13->16 [style = bold, label=""];
12->7 [style = bold, label=""];
1->9 [style = bold, label=""];
4->0 [style = bold, label=""];
9->6 [style = bold, label=""];
7->14 [style = bold, label=""];
24->20 [style = bold, label=""];
7->22 [style = bold, label=""];
6->16 [style = dashed, label="0"];
23->21 [style = bold, label=""];
6->8 [style = bold, label=""];
9->13 [style = dashed, label="0"];
0->18 [style = dashed, label="0"];
5->7 [style = bold, label=""];
2->11 [style = dashed, label="0"];
3->10 [style = dashed, label="0"];
14->13 [style = bold, label=""];
19->7 [style = bold, label=""];
17->18 [style = bold, label=""];
}
