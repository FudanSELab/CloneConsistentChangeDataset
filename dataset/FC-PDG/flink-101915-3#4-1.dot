digraph {
16 [style = filled, label = "User u = format.nextRecord(null)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "!format.reachedEnd()@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "i < splits.length@@@12@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "i++@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "format.getRecordsReadFromBlock() == recordsUntilCheckpoint@@@19@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "format.close()@@@34@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "testAvroRecoveryWithFailureAtStart['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "format = new AvroInputFormat<>(new Path(testFile.getAbsolutePath()),)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "int i = 0@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testSplittedIF['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "Assert.assertEquals(1604,elementsPerSplit(0()@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "Assert.assertEquals(990,elementsPerSplit(3()@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testSplittedIF['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(1203,elementsPerSplit(2()@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "assertEquals(format.getRecordsReadFromBlock(),recordsUntilCheckpoint)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(1026,elementsPerSplit(1()@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "format.configure(parameters)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "AvroInputFormat<User> format = new AvroInputFormat<User>(new Path(testFile.getAbsolutePath()),)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "format.reopen(splits(i(,state)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "elements++@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "int(( elementsPerSplit = new int((((@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(splits.length,4)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(896,elementsPerSplit(3()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final int recordsUntilCheckpoint = 132@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Configuration parameters = new Configuration()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertTrue(u.getName().toString().startsWith(TEST_NAME))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(1539,elementsPerSplit(0()@@@29@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "format.reopen(splits(i(,format.getCurrentState())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "int elements = 0@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Configuration parameters = new Configuration()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "elementsPerSplit(i(++@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(NUM_RECORDS,elements)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "FileInputSplit(( splits = format.createInputSplits(4)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(1539,elementsPerSplit(0()@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "format.close()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Tuple2<Long,Long> state = format.getCurrentState()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "format.close()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(1539,elementsPerSplit(2()@@@31@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(1203,elementsPerSplit(1()@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "AvroInputFormat<User> format = new AvroInputFormat<>(new Path(testFile.getAbsolutePath()),)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "!format.reachedEnd()@@@15@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
39->7 [style = solid, label="i"];
18->7 [style = solid, label="i"];
15->10 [style = bold, label=""];
6->22 [style = bold, label=""];
4->36 [style = solid, label="splits"];
10->19 [style = bold, label=""];
39->22 [style = solid, label="elementsPerSplit"];
8->16 [style = dotted, label="true"];
22->29 [style = dashed, label="0"];
39->3 [style = solid, label="elementsPerSplit"];
28->9 [style = bold, label=""];
17->11 [style = solid, label="elements"];
23->1 [style = solid, label="elementsPerSplit"];
13->5 [style = dotted, label="true"];
7->36 [style = solid, label="i"];
40->38 [style = bold, label=""];
7->8 [style = bold, label=""];
17->6 [style = solid, label="elementsPerSplit"];
37->38 [style = dotted, label="true"];
5->0 [style = bold, label=""];
19->9 [style = bold, label=""];
34->32 [style = solid, label="recordsUntilCheckpoint"];
6->26 [style = dashed, label="0"];
10->9 [style = solid, label="parameters"];
21->1 [style = bold, label=""];
2->36 [style = bold, label=""];
0->8 [style = bold, label=""];
7->38 [style = solid, label="i"];
21->25 [style = dashed, label="0"];
8->0 [style = dotted, label="true"];
13->37 [style = dotted, label="true"];
18->2 [style = solid, label="i"];
13->31 [style = bold, label=""];
37->33 [style = bold, label=""];
23->6 [style = solid, label="elementsPerSplit"];
0->25 [style = solid, label="elementsPerSplit"];
19->28 [style = dashed, label="0"];
17->24 [style = solid, label="elementsPerSplit"];
13->39 [style = dotted, label="true"];
17->26 [style = solid, label="elementsPerSplit"];
0->22 [style = solid, label="elementsPerSplit"];
34->19 [style = bold, label=""];
17->21 [style = solid, label="elementsPerSplit"];
17->22 [style = solid, label="elementsPerSplit"];
23->2 [style = solid, label="i"];
18->39 [style = solid, label="i"];
3->11 [style = bold, label=""];
2->18 [style = bold, label=""];
34->37 [style = solid, label="recordsUntilCheckpoint"];
18->8 [style = dotted, label="true"];
13->16 [style = bold, label=""];
38->32 [style = bold, label=""];
25->24 [style = bold, label=""];
0->29 [style = solid, label="elementsPerSplit"];
13->0 [style = dotted, label="true"];
1->24 [style = dashed, label="0"];
7->2 [style = bold, label=""];
18->25 [style = bold, label=""];
33->38 [style = solid, label="state"];
18->7 [style = bold, label=""];
35->34 [style = bold, label=""];
20->5 [style = solid, label="elements"];
11->30 [style = bold, label=""];
23->39 [style = solid, label="elementsPerSplit"];
0->21 [style = solid, label="elementsPerSplit"];
13->16 [style = dotted, label="true"];
18->7 [style = dotted, label="true"];
7->2 [style = solid, label="i"];
39->13 [style = bold, label=""];
2->1 [style = bold, label=""];
0->11 [style = solid, label="elements"];
0->26 [style = solid, label="elementsPerSplit"];
8->14 [style = bold, label=""];
39->1 [style = solid, label="elementsPerSplit"];
2->18 [style = solid, label="i"];
17->23 [style = bold, label=""];
31->7 [style = bold, label=""];
17->25 [style = solid, label="elementsPerSplit"];
24->26 [style = bold, label=""];
36->13 [style = bold, label=""];
1->6 [style = bold, label=""];
37->32 [style = dotted, label="true"];
0->1 [style = solid, label="elementsPerSplit"];
27->10 [style = bold, label=""];
39->6 [style = solid, label="elementsPerSplit"];
0->24 [style = solid, label="elementsPerSplit"];
4->20 [style = bold, label=""];
16->5 [style = bold, label=""];
2->0 [style = solid, label="i"];
32->39 [style = bold, label=""];
14->2 [style = bold, label=""];
17->0 [style = solid, label="elements"];
9->12 [style = bold, label=""];
8->13 [style = dotted, label="true"];
18->21 [style = bold, label=""];
2->36 [style = dotted, label="true"];
7->39 [style = solid, label="i"];
23->18 [style = bold, label=""];
37->39 [style = bold, label=""];
8->13 [style = bold, label=""];
18->2 [style = dotted, label="true"];
0->2 [style = solid, label="i"];
2->7 [style = solid, label="i"];
37->33 [style = dotted, label="true"];
20->17 [style = bold, label=""];
10->28 [style = bold, label=""];
0->37 [style = bold, label=""];
23->18 [style = solid, label="i"];
0->6 [style = solid, label="elementsPerSplit"];
23->3 [style = solid, label="elementsPerSplit"];
23->0 [style = solid, label="i"];
26->29 [style = bold, label=""];
29->3 [style = bold, label=""];
4->38 [style = solid, label="splits"];
17->0 [style = solid, label="elementsPerSplit"];
39->38 [style = solid, label="i"];
18->2 [style = bold, label=""];
2->31 [style = dotted, label="true"];
18->14 [style = dotted, label="true"];
18->36 [style = solid, label="i"];
22->3 [style = bold, label=""];
33->40 [style = bold, label=""];
5->3 [style = solid, label="elements"];
17->29 [style = solid, label="elementsPerSplit"];
12->4 [style = bold, label=""];
8->5 [style = dotted, label="true"];
20->3 [style = solid, label="elements"];
2->7 [style = dotted, label="true"];
19->12 [style = solid, label="parameters"];
23->7 [style = solid, label="i"];
18->38 [style = solid, label="i"];
37->40 [style = dotted, label="true"];
17->1 [style = solid, label="elementsPerSplit"];
12->7 [style = solid, label="splits"];
23->22 [style = solid, label="elementsPerSplit"];
7->36 [style = dashed, label="0"];
2->13 [style = dotted, label="true"];
}
