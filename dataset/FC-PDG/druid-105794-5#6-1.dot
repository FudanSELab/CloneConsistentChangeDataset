digraph {
7 [style = filled, label = "Assert.assertEquals(Arrays.asList(null,null,null,\"520\",\"620\",\"720\",\"820\",\"920\"),rowList.get(2).dimensionValues())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(Arrays.asList(\"310\",null,null,\"910\"),rowList.get(0).dimensionValues())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(Arrays.asList(null,null,null,\"621\",null,\"821\",\"921\"),rowList.get(3).dimensionValues())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "checkBitmapIndex(Arrays.asList(0,1),adapter.getBitmapIndex(\"d6\",null))@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "IncrementalIndex toPersistA = new OnheapIncrementalIndex.Builder().setIndexSchema(indexSchema).setMaxRowCount(1000).build()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
67 [style = filled, label = "checkBitmapIndex(Arrays.asList(0,1,2),adapter.getBitmapIndex(\"d8\",null))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "final File tmpDirA = temporaryFolder.newFolder()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "IncrementalIndex toPersistB = new IncrementalIndex.Builder().setIndexSchema(indexSchema).setMaxRowCount(1000).buildOnheap()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "Assert.assertEquals(Arrays.asList(null,null,null,\"\",\"621\",\"\",\"821\",\"921\"),rowList.get(3).dimensionValues())@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "testJointDimMerge['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
83 [style = filled, label = "NullHandling.replaceWithDefault()@@@27@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "checkBitmapIndex(Arrays.asList(0,1,3),adapter.getBitmapIndex(\"d5\",null))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "checkBitmapIndex(Collections.singletonList(1),adapter.getBitmapIndex(\"d9\",\"911\"))@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "checkBitmapIndex(Collections.singletonList(2),adapter.getBitmapIndex(\"d8\",\"820\"))@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "IncrementalIndexSchema rollupIndexSchema = new IncrementalIndexSchema.Builder().withMetrics(new CountAggregatorFactory(\"count\")).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "toPersistB.add(new MapBasedInputRow(4,Arrays.asList(\"d4\",\"d5\",\"d6\",\"d7\",\"d8\",\"d9\"),ImmutableMap.of(\"d5\",\"\",\"d6\",\"621\",\"d7\",\"\",\"d8\",\"821\",\"d9\",\"921\")))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "toPersistA.add(new MapBasedInputRow(1,Arrays.asList(\"d1\",\"d2\",\"d3\",\"d4\",\"d5\",\"d6\",\"d7\",\"d8\",\"d9\"),ImmutableMap.of(\"d1\",\"\",\"d2\",\"\",\"d3\",\"310\",\"d7\",\"\",\"d9\",\"910\")))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final QueryableIndex merged = closer.closeLater(indexIO.loadIndex(indexMerger.mergeQueryableIndex(Arrays.asList(indexA,indexB),false,new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@91ccc1,tmpDirMerged,indexSpec,null,-1)))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d1\",\"d2\",\"d3\",\"d5\",\"d6\",\"d7\",\"d8\",\"d9\"),ImmutableList.copyOf(adapter.getDimensionNames()))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "checkBitmapIndex(Collections.singletonList(1),adapter.getBitmapIndex(\"d3\",\"311\"))@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "checkBitmapIndex(Arrays.asList(0,3),adapter.getBitmapIndex(\"d7\",null))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "Assert.assertEquals(Arrays.asList(\"\",\"\",\"310\",null,null,\"\",null,\"910\"),rowList.get(0).dimensionValues())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "checkBitmapIndex(Collections.singletonList(3),adapter.getBitmapIndex(\"d6\",\"621\"))@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "checkBitmapIndex(Arrays.asList(2,3),adapter.getBitmapIndex(\"d2\",null))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(Arrays.asList(\"210\",\"311\",null,null,\"710\",\"810\",\"911\"),rowList.get(1).dimensionValues())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "checkBitmapIndex(Collections.singletonList(2),adapter.getBitmapIndex(\"d7\",\"720\"))@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "checkBitmapIndex(Collections.singletonList(0),adapter.getBitmapIndex(\"d3\",\"310\"))@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "testNoRollupMergeWithDuplicateRow['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "IncrementalIndexSchema indexSchema = new IncrementalIndexSchema.Builder().withMetrics(new CountAggregatorFactory(\"count\")).withRollup(false).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "checkBitmapIndex(Collections.singletonList(1),adapter.getBitmapIndex(\"d2\",\"210\"))@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "checkBitmapIndex(Collections.singletonList(2),adapter.getBitmapIndex(\"d5\",\"520\"))@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "checkBitmapIndex(Collections.singletonList(0),adapter.getBitmapIndex(\"d8\",null))@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "final QueryableIndex merged = closer.closeLater(indexIO.loadIndex(indexMerger.mergeQueryableIndex(Arrays.asList(indexA,indexB),true,new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@91c998,tmpDirMerged,indexSpec,null,-1)))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "toPersistA.add(new MapBasedInputRow(1,Arrays.asList(\"d1\",\"d2\",\"d3\",\"d4\",\"d5\",\"d6\",\"d7\",\"d8\",\"d9\"),ImmutableMap.of(\"d1\",\"\",\"d2\",\"\",\"d3\",\"310\",\"d7\",\"\",\"d9\",\"910\")))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "NullHandling.replaceWithDefault()@@@20@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "NullHandling.replaceWithDefault()@@@22@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "checkBitmapIndex(Collections.emptyList(),adapter.getBitmapIndex(\"d9\",null))@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "Assert.assertEquals(Arrays.asList(\"\",\"\",\"310\",null,null,\"\",null,\"910\"),rowList.get(1).dimensionValues())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "checkBitmapIndex(Collections.emptyList(),adapter.getBitmapIndex(\"d9\",null))@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(Arrays.asList(null,\"210\",\"311\",null,null,\"710\",\"810\",\"911\"),rowList.get(1).dimensionValues())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "IncrementalIndexSchema noRollupIndexSchema = new IncrementalIndexSchema.Builder().withMetrics(new CountAggregatorFactory(\"count\")).withRollup(false).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "checkBitmapIndex(Arrays.asList(0,1,2),adapter.getBitmapIndex(\"d6\",null))@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "checkBitmapIndex(Collections.singletonList(1),adapter.getBitmapIndex(\"d7\",\"710\"))@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "final QueryableIndexIndexableAdapter adapter = new QueryableIndexIndexableAdapter(merged)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "QueryableIndex indexA = closer.closeLater(indexIO.loadIndex(indexMerger.persist(toPersistA,tmpDirA,indexSpec,null)))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "checkBitmapIndex(Collections.emptyList(),adapter.getBitmapIndex(\"d7\",null))@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "checkBitmapIndex(Collections.singletonList(3),adapter.getBitmapIndex(\"d9\",\"921\"))@@@65@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(4,rowList.size())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testJointDimMerge['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "toPersistB.add(new MapBasedInputRow(1,Arrays.asList(\"d1\",\"d2\",\"d3\",\"d4\",\"d5\",\"d6\",\"d7\",\"d8\",\"d9\"),ImmutableMap.of(\"d1\",\"\",\"d2\",\"\",\"d3\",\"310\",\"d7\",\"\",\"d9\",\"910\")))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d3\",\"d6\",\"d8\",\"d9\"),ImmutableList.copyOf(adapter.getDimensionNames()))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "IncrementalIndex toPersistA = new IncrementalIndex.Builder().setIndexSchema(indexSchema).setMaxRowCount(1000).buildOnheap()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "checkBitmapIndex(Arrays.asList(0,1),adapter.getBitmapIndex(\"d5\",null))@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(Arrays.asList(null,null,\"520\",\"620\",\"720\",\"820\",\"920\"),rowList.get(2).dimensionValues())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(Arrays.asList(null,\"310\",null,null,null,null,\"910\"),rowList.get(0).dimensionValues())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "checkBitmapIndex(Collections.singletonList(2),adapter.getBitmapIndex(\"d6\",\"620\"))@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "Assert.assertEquals(Arrays.asList(\"\",\"\",\"310\",null,null,\"\",null,\"910\"),rowList.get(2).dimensionValues())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "checkBitmapIndex(Collections.singletonList(3),adapter.getBitmapIndex(\"d9\",\"921\"))@@@47@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "checkBitmapIndex(Arrays.asList(0,1,2),adapter.getBitmapIndex(\"d3\",\"310\"))@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "Assert.assertEquals(Arrays.asList(null,\"621\",\"821\",\"921\"),rowList.get(3).dimensionValues())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "final File tmpDirMerged = temporaryFolder.newFolder()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "checkBitmapIndex(Collections.singletonList(3),adapter.getBitmapIndex(\"d6\",\"621\"))@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "final File tmpDirB = temporaryFolder.newFolder()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d2\",\"d3\",\"d5\",\"d6\",\"d7\",\"d8\",\"d9\"),ImmutableList.copyOf(adapter.getDimensionNames()))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "checkBitmapIndex(Collections.singletonList(2),adapter.getBitmapIndex(\"d9\",\"920\"))@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "final List<DebugRow> rowList = RowIteratorHelper.toList(adapter.getRows())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "toPersistB.add(new MapBasedInputRow(4,Arrays.asList(\"d4\",\"d5\",\"d6\",\"d7\",\"d8\",\"d9\"),ImmutableMap.of(\"d5\",\"\",\"d6\",\"621\",\"d7\",\"\",\"d8\",\"821\",\"d9\",\"921\")))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "IncrementalIndex toPersistB = new OnheapIncrementalIndex.Builder().setIndexSchema(indexSchema).setMaxRowCount(1000).build()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
46 [style = filled, label = "toPersistA.add(new MapBasedInputRow(1,Arrays.asList(\"d1\",\"d2\",\"d3\",\"d4\",\"d5\",\"d6\",\"d7\",\"d8\",\"d9\"),ImmutableMap.of(\"d1\",\"\",\"d2\",\"\",\"d3\",\"310\",\"d7\",\"\",\"d9\",\"910\")))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "checkBitmapIndex(Arrays.asList(0,1,2),adapter.getBitmapIndex(\"d9\",\"910\"))@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "toPersistB.add(new MapBasedInputRow(3,Arrays.asList(\"d4\",\"d5\",\"d6\",\"d7\",\"d8\",\"d9\"),ImmutableMap.of(\"d5\",\"520\",\"d6\",\"620\",\"d7\",\"720\",\"d8\",\"820\",\"d9\",\"920\")))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(Arrays.asList(\"310\",null,null,\"910\"),rowList.get(1).dimensionValues())@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "checkBitmapIndex(Collections.singletonList(3),adapter.getBitmapIndex(\"d8\",\"821\"))@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "checkBitmapIndex(Collections.singletonList(0),adapter.getBitmapIndex(\"d9\",\"910\"))@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "checkBitmapIndex(Collections.singletonList(1),adapter.getBitmapIndex(\"d8\",\"810\"))@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "Assert.assertEquals(Arrays.asList(\"310\",null,null,\"910\"),rowList.get(2).dimensionValues())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "checkBitmapIndex(Collections.singletonList(3),adapter.getBitmapIndex(\"d8\",\"821\"))@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "QueryableIndex indexB = closer.closeLater(indexIO.loadIndex(indexMerger.persist(toPersistB,tmpDirB,indexSpec,null)))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertEquals(Arrays.asList(\"\",\"\",\"310\",null,null,\"\",null,\"910\"),rowList.get(0).dimensionValues())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "checkBitmapIndex(Collections.singletonList(3),adapter.getBitmapIndex(\"d3\",null))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "toPersistA.add(new MapBasedInputRow(2,Arrays.asList(\"d1\",\"d2\",\"d3\",\"d4\",\"d5\",\"d6\",\"d7\",\"d8\",\"d9\"),ImmutableMap.of(\"d2\",\"210\",\"d3\",\"311\",\"d7\",\"710\",\"d8\",\"810\",\"d9\",\"911\")))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "checkBitmapIndex(Arrays.asList(2,3),adapter.getBitmapIndex(\"d3\",null))@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "checkBitmapIndex(Arrays.asList(0,2,3),adapter.getBitmapIndex(\"d2\",null))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "QueryableIndex indexB = closer.closeLater(indexIO.loadIndex(indexMerger.persist(toPersistB,tmpDirB,indexSpec,null)))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27->13 [style = bold, label=""];
42->23 [style = bold, label=""];
41->0 [style = bold, label=""];
74->22 [style = bold, label=""];
27->1 [style = dotted, label="true"];
25->34 [style = bold, label=""];
32->12 [style = dashed, label="0"];
39->9 [style = bold, label=""];
18->40 [style = solid, label="tmpDirMerged"];
37->26 [style = solid, label="tmpDirA"];
38->12 [style = bold, label=""];
27->7 [style = dotted, label="false"];
10->2 [style = dotted, label="false"];
68->49 [style = bold, label=""];
8->6 [style = bold, label=""];
59->71 [style = bold, label=""];
18->26 [style = solid, label="indexB"];
65->18 [style = solid, label="tmpDirB"];
36->81 [style = dashed, label="0"];
27->19 [style = dotted, label="true"];
2->83 [style = bold, label=""];
10->29 [style = dotted, label="true"];
11->78 [style = dashed, label="0"];
33->54 [style = solid, label="tmpDirB"];
33->18 [style = bold, label=""];
3->19 [style = bold, label=""];
27->6 [style = dotted, label="false"];
65->37 [style = bold, label=""];
51->70 [style = dashed, label="0"];
50->12 [style = bold, label=""];
48->10 [style = bold, label=""];
40->22 [style = bold, label=""];
73->66 [style = bold, label=""];
19->28 [style = bold, label=""];
36->17 [style = bold, label=""];
46->66 [style = dashed, label="0"];
37->33 [style = bold, label=""];
1->31 [style = bold, label=""];
24->53 [style = bold, label=""];
75->60 [style = bold, label=""];
49->56 [style = dashed, label="0"];
22->64 [style = bold, label=""];
49->54 [style = solid, label="toPersistB"];
57->46 [style = bold, label=""];
40->26 [style = dashed, label="0"];
2->16 [style = bold, label=""];
31->14 [style = bold, label=""];
54->40 [style = solid, label="indexB"];
32->56 [style = bold, label=""];
56->54 [style = solid, label="toPersistB"];
21->68 [style = dashed, label="0"];
28->5 [style = bold, label=""];
48->2 [style = bold, label=""];
32->49 [style = bold, label=""];
37->26 [style = solid, label="tmpDirMerged"];
83->27 [style = dotted, label="true"];
83->78 [style = dotted, label="false"];
4->49 [style = dashed, label="0"];
67->82 [style = bold, label=""];
26->63 [style = solid, label="merged"];
20->52 [style = bold, label=""];
79->81 [style = bold, label=""];
0->38 [style = bold, label=""];
38->57 [style = bold, label=""];
43->11 [style = bold, label=""];
5->1 [style = bold, label=""];
83->61 [style = dotted, label="true"];
7->59 [style = dashed, label="0"];
61->80 [style = bold, label=""];
56->21 [style = bold, label=""];
27->43 [style = dotted, label="false"];
10->2 [style = bold, label=""];
52->36 [style = bold, label=""];
51->42 [style = bold, label=""];
81->62 [style = bold, label=""];
44->45 [style = bold, label=""];
29->16 [style = bold, label=""];
7->44 [style = bold, label=""];
43->72 [style = dashed, label="0"];
21->4 [style = bold, label=""];
54->40 [style = bold, label=""];
27->43 [style = bold, label=""];
16->27 [style = bold, label=""];
22->48 [style = bold, label=""];
27->45 [style = dotted, label="false"];
78->59 [style = bold, label=""];
3->27 [style = dashed, label="0"];
18->26 [style = bold, label=""];
76->33 [style = solid, label="tmpDirA"];
0->60 [style = dashed, label="0"];
33->26 [style = solid, label="indexA"];
9->20 [style = bold, label=""];
44->67 [style = bold, label=""];
27->13 [style = dotted, label="true"];
63->74 [style = bold, label=""];
77->68 [style = bold, label=""];
22->64 [style = dotted, label="false"];
47->50 [style = bold, label=""];
64->2 [style = bold, label=""];
29->48 [style = dashed, label="0"];
35->25 [style = bold, label=""];
66->12 [style = bold, label=""];
42->58 [style = dashed, label="0"];
12->46 [style = bold, label=""];
30->35 [style = bold, label=""];
26->54 [style = bold, label=""];
26->63 [style = bold, label=""];
27->31 [style = dotted, label="true"];
50->57 [style = bold, label=""];
45->8 [style = bold, label=""];
34->39 [style = bold, label=""];
27->11 [style = dotted, label="false"];
22->48 [style = dotted, label="true"];
83->59 [style = dotted, label="false"];
83->80 [style = dotted, label="true"];
46->32 [style = bold, label=""];
27->8 [style = dotted, label="false"];
77->18 [style = solid, label="toPersistB"];
13->16 [style = dashed, label="0"];
12->26 [style = solid, label="toPersistA"];
27->5 [style = dotted, label="true"];
40->22 [style = solid, label="merged"];
49->76 [style = bold, label=""];
27->61 [style = bold, label=""];
57->26 [style = solid, label="toPersistA"];
83->16 [style = bold, label=""];
17->47 [style = bold, label=""];
12->57 [style = dashed, label="0"];
14->51 [style = bold, label=""];
35->67 [style = dashed, label="0"];
83->16 [style = dotted, label="true"];
15->30 [style = bold, label=""];
55->0 [style = bold, label=""];
14->69 [style = dashed, label="0"];
49->21 [style = bold, label=""];
71->69 [style = bold, label=""];
27->3 [style = dotted, label="true"];
58->44 [style = bold, label=""];
72->78 [style = bold, label=""];
6->14 [style = bold, label=""];
27->28 [style = dotted, label="true"];
23->24 [style = bold, label=""];
73->33 [style = solid, label="toPersistA"];
70->58 [style = bold, label=""];
26->40 [style = solid, label="indexA"];
4->37 [style = bold, label=""];
10->29 [style = bold, label=""];
13->3 [style = bold, label=""];
60->73 [style = bold, label=""];
82->79 [style = bold, label=""];
76->65 [style = bold, label=""];
27->44 [style = dotted, label="false"];
83->72 [style = dotted, label="false"];
28->80 [style = dashed, label="0"];
80->69 [style = bold, label=""];
53->15 [style = bold, label=""];
83->71 [style = dotted, label="false"];
69->70 [style = bold, label=""];
19->61 [style = dashed, label="0"];
12->77 [style = bold, label=""];
11->7 [style = bold, label=""];
83->72 [style = bold, label=""];
}
