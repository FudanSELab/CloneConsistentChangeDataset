digraph {
9 [style = filled, label = "assertColumns(row,\"m\")@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertNull(readRepair.sent.get(peer2))@@@34@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertEquals(expectedCmplxDelete,cd.complexDeletion())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertFalse(rowIter.hasNext())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Row row = Iterators.getOnlyElement(readRepair.getForEndpoint(peer1).getPartitionUpdate(cfm2).iterator())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Cell expectedCell = mapCell(1,1,ts(1()@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Row row = rowIter.next()@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "DeletionTime expectedCmplxDelete = new DeletionTime(ts(1( - 1,nowInSec)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "builder.addCell(expectedCell)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "ComplexColumnData cd = row.getComplexColumnData(m)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "DataResolver resolver = new DataResolver(cmd,plan(replicas,ConsistencyLevel.ALL),readRepair,System.nanoTime())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Row.Builder builder = BTreeRow.unsortedBuilder()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Row row = Iterators.getOnlyElement(rows)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Cell<?> expectedCell = mapCell(1,1,ts(1()@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "builder.addComplexDeletion(m,new DeletionTime(ts(0( - 1,nowInSec))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertEquals(Collections.singleton(expectedCell),Sets.newHashSet(cd))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertNotNull(row.getCell(m,CellPath.create(bb(1))))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testResolveComplexDelete['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "testResolveNewCollectionOverwritingDeleted['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertNull(readRepair.sent.get(peer2))@@@39@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertNull(row.getCell(m,CellPath.create(bb(0))))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "TestableReadRepair readRepair = new TestableReadRepair(cmd)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "long(( ts = {100,200}@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(rowIter.hasNext())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "builder.addCell(mapCell(0,0,ts(0())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "ComplexColumnData cd = row.getComplexColumnData(m)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "resolver.preprocess(response(cmd,peer2,iter(PartitionUpdate.singleRowUpdate(cfm2,dk,builder.build()))))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "builder.newRow(Clustering.EMPTY)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testResolveComplexDelete['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Iterator<Row> rowIter = mutation.getPartitionUpdate(cfm2).iterator()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertEquals(Collections.singleton(expectedCell),Sets.newHashSet(cd))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(expectedCmplxDelete,cd.complexDeletion())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "ComplexColumnData cd = row.getComplexColumnData(m)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "builder.newRow(Clustering.EMPTY)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "InetAddressAndPort peer2 = replicas.get(1).endpoint()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "builder.addComplexDeletion(m,expectedCmplxDelete)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ReadCommand cmd = Util.cmd(cfs2,dk).withNowInSeconds(nowInSec).build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "resolver.preprocess(response(cmd,peer1,iter(PartitionUpdate.singleRowUpdate(cfm2,dk,builder.build()))))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "EndpointsForRange replicas = makeReplicas(2)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Mutation mutation = readRepair.getForEndpoint(peer1)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(Collections.singleton(expectedCell),Sets.newHashSet(cd))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "InetAddressAndPort peer1 = replicas.get(0).endpoint()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22->26 [style = bold, label=""];
8->1 [style = solid, label="cmd"];
0->9 [style = bold, label=""];
23->2 [style = solid, label="expectedCmplxDelete"];
32->17 [style = solid, label="expectedCell"];
10->37 [style = solid, label="expectedCell"];
12->5 [style = bold, label=""];
33->3 [style = bold, label=""];
4->25 [style = bold, label=""];
8->31 [style = bold, label=""];
37->36 [style = bold, label=""];
31->27 [style = solid, label="readRepair"];
7->12 [style = bold, label=""];
25->6 [style = solid, label="cd"];
23->39 [style = solid, label="expectedCmplxDelete"];
14->41 [style = solid, label="peer2"];
16->7 [style = bold, label=""];
10->40 [style = solid, label="expectedCell"];
10->17 [style = bold, label=""];
20->3 [style = bold, label=""];
1->0 [style = bold, label=""];
14->29 [style = solid, label="peer2"];
25->6 [style = bold, label=""];
26->24 [style = bold, label=""];
28->16 [style = bold, label=""];
8->31 [style = solid, label="cmd"];
9->35 [style = bold, label=""];
11->26 [style = solid, label="ts"];
14->1 [style = bold, label=""];
24->16 [style = solid, label="peer1"];
11->22 [style = solid, label="ts"];
6->2 [style = bold, label=""];
11->10 [style = solid, label="ts"];
8->21 [style = solid, label="cmd"];
0->9 [style = solid, label="row"];
30->19 [style = bold, label=""];
14->1 [style = solid, label="peer2"];
10->32 [style = dashed, label="0"];
40->39 [style = bold, label=""];
10->6 [style = solid, label="expectedCell"];
27->11 [style = bold, label=""];
31->27 [style = bold, label=""];
24->21 [style = bold, label=""];
18->10 [style = bold, label=""];
17->14 [style = bold, label=""];
15->28 [style = bold, label=""];
9->15 [style = bold, label=""];
35->37 [style = bold, label=""];
3->8 [style = bold, label=""];
34->3 [style = bold, label=""];
8->27 [style = solid, label="cmd"];
5->4 [style = bold, label=""];
23->18 [style = solid, label="expectedCmplxDelete"];
16->36 [style = dashed, label="0"];
13->23 [style = bold, label=""];
18->32 [style = bold, label=""];
10->17 [style = solid, label="expectedCell"];
38->40 [style = solid, label="cd"];
39->41 [style = bold, label=""];
24->21 [style = solid, label="peer1"];
11->32 [style = solid, label="ts"];
36->38 [style = bold, label=""];
22->24 [style = bold, label=""];
32->6 [style = solid, label="expectedCell"];
35->37 [style = solid, label="cd"];
2->29 [style = bold, label=""];
38->40 [style = bold, label=""];
11->23 [style = solid, label="ts"];
19->22 [style = bold, label=""];
32->17 [style = bold, label=""];
11->30 [style = bold, label=""];
23->18 [style = bold, label=""];
3->27 [style = solid, label="replicas"];
21->13 [style = bold, label=""];
}
