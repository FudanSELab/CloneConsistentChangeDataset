digraph {
47 [style = filled, label = "qs.createIndex(\"Type\",IndexType.FUNCTIONAL,\"\"type\"\",SEPARATOR + \"pos\")@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
48 [style = filled, label = "qs.createIndex(\"Status\",IndexType.FUNCTIONAL,\"status\",SEPARATOR + \"pos\")@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "testRangeQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(((Index)indexesUsed.iterator().next()).getName(),\"PortFolioID\")@@@82@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "testRangeQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "qs.createIndex(\"CreateTime\",IndexType.FUNCTIONAL,\"createTime\",\"/pos\")@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "testProjectionEvaluationOnORJunction_NOT_IMPLEMENTED['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "final boolean(( actualProjectionCallback = new boolean((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10b660@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final boolean(( actualIndexUsed = new boolean((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10b650@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final boolean(( expectedIntersectionCallback = {false}@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "pf.setCreateTime(10l)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "i < queries.length@@@71@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final List indexesUsed = new ArrayList()@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Portfolio pf = new Portfolio(i)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "QueryObserverHolder.setInstance(new QueryObserverAdapter(){@Override public void invokedQueryUtilsUnion(SelectResults r1,SelectResults r2){actualUnionCallback(i( = true}@Override public void invokedQueryUtilsIntersection(SelectResults r1,SelectResults r2){actualIntersectionCallback(i( = true}@Override public void beforeIndexLookup(Index index,int oper,Object key){actualIndexUsed(i( = trueindexUsed.add(index)}@Override public void beforeApplyingProjectionOnFilterEvaluatedResults(Object preProjectionApplied){actualProjectionCallback(i( = true}@Override public void afterQueryEvaluation(Object result){++i}})@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Region rgn = CacheUtils.getRegion(SEPARATOR + \"pos\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "String(( queries = new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10b5e5@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertEquals(((Index)indexUsed.iterator().next()).getName(),\"CreateTime\")@@@82@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "int i = 0@@@70@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(expectedProjectionCallabck(i(,actualProjectionCallback(i()@@@79@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertEquals(expectedIndexUsed(i(,actualIndexUsed(i()@@@77@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ObjectType(( expectedTypes = new ObjectType((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10b680@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Region rgn = CacheUtils.getRegion(\"/pos\")@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "sr(i((1( = (SelectResults)q.execute()@@@74@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "++i@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "CacheUtils.compareResultsOfWithAndWithoutIndex(sr,this)@@@83@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "qs.createIndex(\"Type\",IndexType.FUNCTIONAL,\"\"type\"\",\"/pos\")@@@26@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final boolean(( actualUnionCallback = new boolean((((@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "qs.createIndex(\"Status\",IndexType.FUNCTIONAL,\"status\",\"/pos\")@@@25@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "i < 10000@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "qs.createIndex(\"PortFolioID\",IndexType.FUNCTIONAL,\"ID\",\"/pos\")@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Query q = qs.newQuery(queries(i()@@@73@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "qs.createIndex(\"CreateTime\",IndexType.FUNCTIONAL,\"createTime\",SEPARATOR + \"pos\")@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(expectedUnionCallback(i(,actualUnionCallback(i()@@@75@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "i < queries.length@@@17@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertEquals(indexUsed.size(),3)@@@81@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Query q = qs.newQuery(queries(i()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "sr(i((0( = (SelectResults)q.execute()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "SelectResults(((( sr = new SelectResults((((((@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "final boolean(( expectedIndexUsed = new boolean((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10b648@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "int i = 0@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(indexesUsed.size(),1)@@@81@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "final List indexUsed = new ArrayList()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "final boolean(( expectedUnionCallback = {false}@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final boolean(( expectedProjectionCallabck = new boolean((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10b658@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "rgn.put(\"\" + i,pf)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "qs.createIndex(\"PortFolioID\",IndexType.FUNCTIONAL,\"ID\",SEPARATOR + \"pos\")@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "i < 200@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final boolean(( actualIntersectionCallback = new boolean((((@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(expectedIntersectionCallback(i(,actualIntersectionCallback(i()@@@78@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "int i = 100@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "++i@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(expectedTypes(i(,sr(i((1(.getCollectionType().getElementType())@@@76@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "++i@@@72@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "QueryService qs = CacheUtils.getQueryService()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41->5 [style = bold, label=""];
42->23 [style = bold, label=""];
40->18 [style = dotted, label="true"];
40->13 [style = dotted, label="true"];
36->28 [style = bold, label=""];
40->31 [style = dotted, label="true"];
24->33 [style = dotted, label="true"];
26->40 [style = bold, label=""];
11->46 [style = bold, label=""];
24->27 [style = dotted, label="true"];
40->13 [style = bold, label=""];
40->43 [style = dotted, label="true"];
40->10 [style = dotted, label="true"];
8->28 [style = solid, label="sr"];
7->9 [style = bold, label=""];
3->36 [style = bold, label=""];
38->30 [style = bold, label=""];
16->27 [style = solid, label="i"];
19->28 [style = solid, label="sr"];
53->33 [style = dotted, label="true"];
34->26 [style = bold, label=""];
32->18 [style = solid, label="expectedProjectionCallabck"];
18->35 [style = bold, label=""];
41->22 [style = bold, label=""];
19->15 [style = bold, label=""];
2->28 [style = solid, label="sr"];
19->15 [style = solid, label="i"];
14->11 [style = bold, label=""];
41->21 [style = dotted, label="true"];
53->27 [style = dotted, label="true"];
53->29 [style = bold, label=""];
40->50 [style = bold, label=""];
51->28 [style = bold, label=""];
17->41 [style = bold, label=""];
22->49 [style = dashed, label="0"];
21->41 [style = bold, label=""];
41->49 [style = bold, label=""];
1->31 [style = solid, label="expectedTypes"];
19->43 [style = solid, label="i"];
12->1 [style = bold, label=""];
33->27 [style = bold, label=""];
40->35 [style = dotted, label="true"];
45->11 [style = bold, label=""];
41->5 [style = dotted, label="true"];
17->5 [style = solid, label="i"];
35->40 [style = bold, label=""];
15->31 [style = bold, label=""];
40->3 [style = bold, label=""];
30->7 [style = bold, label=""];
43->10 [style = bold, label=""];
39->25 [style = bold, label=""];
40->15 [style = dotted, label="true"];
6->39 [style = bold, label=""];
27->20 [style = bold, label=""];
30->15 [style = solid, label="expectedUnionCallback"];
22->6 [style = bold, label=""];
2->17 [style = bold, label=""];
4->9 [style = bold, label=""];
10->18 [style = bold, label=""];
0->16 [style = bold, label=""];
46->16 [style = bold, label=""];
54->11 [style = bold, label=""];
47->42 [style = bold, label=""];
19->10 [style = solid, label="i"];
53->20 [style = dotted, label="true"];
16->24 [style = bold, label=""];
49->44 [style = bold, label=""];
53->29 [style = dotted, label="true"];
23->32 [style = bold, label=""];
25->47 [style = dashed, label="0"];
7->4 [style = bold, label=""];
26->13 [style = solid, label="i"];
52->22 [style = bold, label=""];
53->37 [style = bold, label=""];
13->19 [style = bold, label=""];
1->34 [style = bold, label=""];
19->13 [style = solid, label="i"];
19->18 [style = solid, label="i"];
19->31 [style = solid, label="i"];
24->20 [style = dotted, label="true"];
25->42 [style = bold, label=""];
31->43 [style = bold, label=""];
41->8 [style = dotted, label="true"];
37->2 [style = bold, label=""];
34->43 [style = solid, label="actualIndexUsed"];
9->12 [style = bold, label=""];
0->46 [style = dashed, label="0"];
29->27 [style = solid, label="pf"];
37->13 [style = solid, label="queries"];
34->15 [style = solid, label="actualUnionCallback"];
9->10 [style = solid, label="expectedIntersectionCallback"];
40->19 [style = dotted, label="true"];
42->43 [style = solid, label="expectedIndexUsed"];
5->8 [style = bold, label=""];
34->18 [style = solid, label="actualProjectionCallback"];
24->29 [style = dotted, label="true"];
17->41 [style = solid, label="i"];
24->29 [style = bold, label=""];
20->53 [style = bold, label=""];
34->10 [style = solid, label="actualIntersectionCallback"];
16->53 [style = bold, label=""];
19->40 [style = solid, label="i"];
8->41 [style = solid, label="i"];
41->52 [style = bold, label=""];
32->38 [style = bold, label=""];
24->53 [style = dashed, label="0"];
11->0 [style = bold, label=""];
29->33 [style = bold, label=""];
3->50 [style = dashed, label="0"];
16->53 [style = solid, label="i"];
26->40 [style = solid, label="i"];
16->29 [style = solid, label="i"];
44->48 [style = bold, label=""];
48->47 [style = bold, label=""];
50->51 [style = bold, label=""];
8->5 [style = solid, label="i"];
39->48 [style = dashed, label="0"];
24->37 [style = bold, label=""];
8->21 [style = bold, label=""];
16->24 [style = solid, label="i"];
36->51 [style = dashed, label="0"];
20->24 [style = bold, label=""];
6->44 [style = dashed, label="0"];
37->5 [style = solid, label="queries"];
}
