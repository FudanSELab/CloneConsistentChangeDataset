digraph {
0 [style = filled, label = "String expressionString@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "MergeStream stream@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertTrue(expressionString.contains(\"q=\"id:(0 3 4)\"\"))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testIntersectStream['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertTrue(expressionString.contains(\"q=\"id:(1 2)\"\"))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "stream = new MergeStream(StreamExpressionParser.parse(\"merge(\" + \"search(collection1, q=\"id:(0 3 4)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\"),\" + \"search(collection1, q=\"id:(1 2)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\"),\" + \"on=\"a_f asc, a_s asc\")\"),factory)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "testMergeStream['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "testMergeStream['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(expressionString.contains(\"on=\"a_f asc,a_s asc\"\"))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "stream = new IntersectStream(StreamExpressionParser.parse(\"intersect(\" + \"search(collection1, q=\"id:(0 3 4)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\"),\" + \"search(collection1, q=\"id:(1 2)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\"),\" + \"on=\"a_f, a_s\")\"),factory)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertTrue(expressionString.contains(\"on=\"a_f,a_s\"\"))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "IntersectStream stream@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "expressionString = stream.toExpression(factory).toString()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->0 [style = bold, label=""];
5->1 [style = bold, label=""];
0->11 [style = bold, label=""];
4->9 [style = dashed, label="0"];
10->9 [style = bold, label=""];
9->0 [style = bold, label=""];
5->11 [style = dashed, label="0"];
11->1 [style = bold, label=""];
7->2 [style = bold, label=""];
1->7 [style = bold, label=""];
2->6 [style = bold, label=""];
3->4 [style = bold, label=""];
0->1 [style = bold, label=""];
2->12 [style = bold, label=""];
4->0 [style = bold, label=""];
0->5 [style = bold, label=""];
6->12 [style = dashed, label="0"];
}
