digraph {
1 [style = filled, label = "XIntervalSeriesCollection c1 = new XIntervalSeriesCollection()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "testSerialization['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "s1.add(1.0,1.1,1.2,1.3)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "XIntervalSeriesCollection<String> c2 = TestUtils.serialised(c1)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "s1.setDescription(\"XYZ\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertTrue(c1.getClass() == c2.getClass())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertFalse(c1.equals(c2))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "YIntervalSeriesCollection c1 = new YIntervalSeriesCollection()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "XIntervalSeriesCollection<String> c1 = new XIntervalSeriesCollection<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "XIntervalSeriesCollection c2 = TestUtils.serialised(c1)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "YIntervalSeries s1 = new YIntervalSeries(\"Series\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "XIntervalSeries<String> s1 = new XIntervalSeries<>(\"Series\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertTrue(c1.equals(c2))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(c1 != c2)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testSerialization['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertEquals(c1,c2)@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "c1.addSeries(s1)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "XIntervalSeries s1 = new XIntervalSeries(\"Series\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "YIntervalSeriesCollection c2 = CloneUtils.clone(c1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testCloning['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11->16 [style = bold, label=""];
16->15 [style = bold, label=""];
12->11 [style = solid, label="c2"];
3->1 [style = bold, label=""];
15->14 [style = bold, label=""];
8->0 [style = solid, label="c2"];
19->12 [style = solid, label="c1"];
1->0 [style = solid, label="c1"];
4->13 [style = bold, label=""];
1->19 [style = dashed, label="0"];
12->11 [style = bold, label=""];
18->19 [style = bold, label=""];
6->8 [style = solid, label="c1"];
19->10 [style = bold, label=""];
14->17 [style = bold, label=""];
7->4 [style = bold, label=""];
19->11 [style = solid, label="c1"];
2->7 [style = dashed, label="0"];
2->4 [style = bold, label=""];
2->10 [style = dashed, label="0"];
9->6 [style = bold, label=""];
8->0 [style = bold, label=""];
6->0 [style = solid, label="c1"];
13->12 [style = bold, label=""];
5->0 [style = bold, label=""];
1->5 [style = solid, label="c1"];
1->6 [style = dashed, label="0"];
12->17 [style = solid, label="c2"];
10->4 [style = bold, label=""];
12->15 [style = solid, label="c2"];
10->13 [style = solid, label="s1"];
4->8 [style = bold, label=""];
5->8 [style = dashed, label="0"];
1->2 [style = bold, label=""];
6->7 [style = bold, label=""];
4->5 [style = bold, label=""];
5->0 [style = solid, label="c2"];
}
