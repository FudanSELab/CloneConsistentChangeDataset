digraph {
20 [style = filled, label = "Assert.assertEquals(1,(long)avg.computeResult())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertEquals(1,(long)avg.computeResult())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(3,(long)avg.computeResult())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "BaseAverager<Number,Long> avg = new LongMinAverager(3,\"test\",\"field\",1)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "BaseAverager<Number,Long> avg = new LongMaxAverager(3,\"test\",\"field\",1)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(5,(long)avg.computeResult())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "avg.skip()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(-10000,(long)avg.computeResult())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(1,(long)avg.computeResult())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(Long.MIN_VALUE,(long)avg.computeResult())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "avg.skip()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "avg.addElement(Collections.singletonMap(\"field\",5L),new HashMap<>())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(-1000000,(long)avg.computeResult())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "assertEquals(3,(long)avg.computeResult())@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "avg.addElement(Collections.singletonMap(\"field\",-10000L),new HashMap<>())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "avg.addElement(Collections.singletonMap(\"field\",3L),new HashMap<>())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(Long.MAX_VALUE,(long)avg.computeResult())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(5,(long)avg.computeResult())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "testComputeResult['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "avg.addElement(Collections.singletonMap(\"field\",-1000000L),new HashMap<>())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(-10000,(long)avg.computeResult())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(1,(long)avg.computeResult())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "testComputeResult['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "avg.addElement(Collections.singletonMap(\"field\",1L),new HashMap<>())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(-1000000,(long)avg.computeResult())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testComputeResult['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "avg.addElement(Collections.singletonMap(\"field\",2L),new HashMap<>())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "avg.skip()@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "avg.addElement(Collections.singletonMap(\"field\",new Integer(1000)),new HashMap<>())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "avg.addElement(Collections.singletonMap(\"field\",1),new HashMap<>())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertEquals(2,(long)avg.computeResult())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,(long)avg.computeResult())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "avg.addElement(Collections.singletonMap(\"field\",new Integer(1)),new HashMap<>())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "assertEquals(-10000,(long)avg.computeResult())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "avg.addElement(Collections.singletonMap(\"field\",3L),new HashMap<>())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8->16 [style = bold, label=""];
20->17 [style = bold, label=""];
3->17 [style = dashed, label="0"];
3->28 [style = dashed, label="0"];
23->5 [style = bold, label=""];
28->30 [style = bold, label=""];
7->10 [style = bold, label=""];
6->21 [style = bold, label=""];
31->32 [style = bold, label=""];
26->29 [style = bold, label=""];
33->28 [style = bold, label=""];
6->32 [style = dashed, label="0"];
0->16 [style = dashed, label="0"];
3->11 [style = bold, label=""];
29->25 [style = bold, label=""];
10->3 [style = bold, label=""];
10->33 [style = dashed, label="0"];
1->18 [style = dashed, label="0"];
19->2 [style = bold, label=""];
7->20 [style = bold, label=""];
12->6 [style = bold, label=""];
2->4 [style = bold, label=""];
1->7 [style = bold, label=""];
32->26 [style = bold, label=""];
17->19 [style = bold, label=""];
11->2 [style = bold, label=""];
25->7 [style = bold, label=""];
13->26 [style = dashed, label="0"];
5->34 [style = bold, label=""];
8->0 [style = bold, label=""];
7->33 [style = bold, label=""];
0->14 [style = bold, label=""];
21->9 [style = bold, label=""];
9->18 [style = bold, label=""];
34->24 [style = bold, label=""];
13->21 [style = dashed, label="0"];
9->29 [style = dashed, label="0"];
11->19 [style = dashed, label="0"];
6->13 [style = bold, label=""];
4->8 [style = bold, label=""];
16->14 [style = bold, label=""];
10->20 [style = dashed, label="0"];
14->15 [style = bold, label=""];
27->23 [style = bold, label=""];
13->9 [style = bold, label=""];
30->2 [style = bold, label=""];
9->1 [style = bold, label=""];
18->7 [style = bold, label=""];
5->15 [style = dashed, label="0"];
8->27 [style = bold, label=""];
1->25 [style = dashed, label="0"];
11->30 [style = dashed, label="0"];
2->8 [style = bold, label=""];
22->6 [style = bold, label=""];
14->5 [style = bold, label=""];
}
