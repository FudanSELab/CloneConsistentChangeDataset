digraph {
7 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getReadDataSources(),is(expected.getReadDataSources()))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "final ReadwriteSplittingRuleSegment actual@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s function segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),CoreMatchers.is(expected.getName()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "final AlgorithmSegment actual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "null == expected@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertNull(assertContext.getText(\"Actual should not exit.\"),actual)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLoadBalancer(),is(expected.getLoadBalancer()))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertNull(assertContext.getText(\"Actual readwrite splitting rule should not exit.\"),actual)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),is(expected.getName()))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getAutoAwareResource(),is(expected.getAutoAwareResource()))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertIs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertNull(assertContext.getText(\"Actual dataSource should not exist.\"),actual)@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertIs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "final ExceptedReadwriteSplittingRule expected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual should exit.\"),actual)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getWriteDataSource(),is(expected.getWriteDataSource()))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual dataSource should exist.\"),actual)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLoadBalancer(),is(expected.getLoadBalancer()))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getReadDataSources(),is(expected.getReadDataSources()))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "PropertiesAssert.assertIs(assertContext,actual.getProps(),expected.getProps())@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "PropertiesAssert.assertIs(assertContext,actual.getProps(),expected.getProps())@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertIs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual readwrite splitting rule should exit.\"),actual)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "final ExpectedAlgorithm expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),is(expected.getName()))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getWriteDataSource(),is(expected.getWriteDataSource()))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "final ReadwriteSplittingRuleSegment actual@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getAutoAwareResource(),is(expected.getAutoAwareResource()))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12->16 [style = solid, label="actual"];
10->15 [style = dashed, label="0"];
28->24 [style = solid, label="assertContext"];
4->3 [style = bold, label=""];
16->15 [style = bold, label=""];
7->1 [style = bold, label=""];
20->13 [style = bold, label=""];
11->20 [style = dashed, label="0"];
9->11 [style = bold, label=""];
14->12 [style = dotted, label="true"];
4->7 [style = dotted, label="false"];
4->6 [style = bold, label=""];
0->3 [style = solid, label="actual"];
30->4 [style = solid, label="expected"];
4->19 [style = dotted, label="false"];
4->23 [style = dotted, label="true"];
19->20 [style = bold, label=""];
4->26 [style = bold, label=""];
25->4 [style = bold, label=""];
18->2 [style = solid, label="assertContext"];
25->28 [style = dotted, label="true"];
3->22 [style = dashed, label="0"];
1->21 [style = dashed, label="0"];
12->30 [style = dashed, label="0"];
25->29 [style = dotted, label="true"];
10->27 [style = dashed, label="0"];
15->19 [style = bold, label=""];
4->23 [style = bold, label=""];
4->13 [style = dotted, label="false"];
29->26 [style = solid, label="actual"];
4->11 [style = dotted, label="false"];
4->6 [style = dotted, label="false"];
4->15 [style = dotted, label="false"];
21->2 [style = bold, label=""];
9->19 [style = dashed, label="0"];
4->27 [style = dotted, label="false"];
14->17 [style = dotted, label="true"];
3->23 [style = dashed, label="0"];
4->9 [style = dotted, label="false"];
26->27 [style = bold, label=""];
29->23 [style = solid, label="actual"];
12->22 [style = solid, label="actual"];
4->2 [style = dotted, label="false"];
4->3 [style = dotted, label="true"];
6->16 [style = dashed, label="0"];
8->12 [style = dotted, label="true"];
4->21 [style = dotted, label="false"];
8->5 [style = dotted, label="true"];
4->22 [style = dotted, label="true"];
12->4 [style = solid, label="expected"];
6->26 [style = dashed, label="0"];
5->2 [style = solid, label="assertContext"];
6->10 [style = bold, label=""];
4->20 [style = dotted, label="false"];
7->13 [style = dashed, label="0"];
8->0 [style = dotted, label="true"];
4->1 [style = dotted, label="false"];
10->9 [style = bold, label=""];
1->2 [style = bold, label=""];
4->26 [style = dotted, label="false"];
17->4 [style = solid, label="expected"];
8->4 [style = bold, label=""];
27->24 [style = bold, label=""];
4->16 [style = dotted, label="false"];
0->6 [style = solid, label="actual"];
4->10 [style = dotted, label="false"];
25->30 [style = dotted, label="true"];
13->21 [style = bold, label=""];
14->18 [style = dotted, label="true"];
4->22 [style = bold, label=""];
11->7 [style = bold, label=""];
4->16 [style = bold, label=""];
14->4 [style = bold, label=""];
4->24 [style = dotted, label="false"];
}
