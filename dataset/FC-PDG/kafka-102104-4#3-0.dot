digraph {
0 [style = filled, label = "shouldConvertValuesIfInnerStoreImplementsTimestampedBytesStore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "initializeConsumer(1,0,t1)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "stateManager.register(new WrappedStateStore(){@Override public StateStore inner(){return store2}@Override public StateStore wrappedStore(){return store2}@Override public String name(){return store2.name()}@Override public void init(final ProcessorContext context,final StateStore root){store2.init(context,root)}@Override public void flush(){store2.flush()}@Override public void close(){store2.close()}@Override public boolean persistent(){return store2.persistent()}@Override public boolean isOpen(){return store2.isOpen()}},stateRestoreCallback)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertEquals(5,restoredRecord.value.length)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "stateManager.register(new WrappedStateStore<NoOpReadOnlyStore<Object,Object>>(store2){},stateRestoreCallback)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertEquals(3,restoredRecord.key.length)@@@33@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "shouldConvertValuesIfInnerStoreImplementsTimestampedBytesStore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertEquals(13,restoredRecord.value.length)@@@10@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "stateManager.initialize()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "shouldNotConvertValuesIfStoreDoesNotImplementTimestampedBytesStore['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final KeyValue<byte((,byte((> restoredRecord = stateRestoreCallback.restored.get(0)@@@32@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final KeyValue<byte((,byte((> restoredRecord = stateRestoreCallback.restored.get(0)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "final KeyValue<byte((,byte((> restoredRecord = stateRestoreCallback.restored.get(0)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(3,restoredRecord.key.length)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "initializeConsumer(1,0,t2)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "stateManager.register(store1,stateRestoreCallback)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(3,restoredRecord.key.length)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertEquals(13,restoredRecord.value.length)@@@34@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
5->3 [style = bold, label=""];
17->5 [style = bold, label=""];
3->6 [style = bold, label=""];
5->14 [style = bold, label=""];
7->8 [style = bold, label=""];
15->16 [style = bold, label=""];
2->4 [style = bold, label=""];
10->7 [style = bold, label=""];
4->12 [style = dashed, label="0"];
6->2 [style = bold, label=""];
13->17 [style = bold, label=""];
1->17 [style = dashed, label="0"];
11->10 [style = bold, label=""];
0->1 [style = bold, label=""];
14->15 [style = bold, label=""];
5->11 [style = bold, label=""];
3->14 [style = dashed, label="0"];
9->1 [style = bold, label=""];
16->12 [style = bold, label=""];
3->11 [style = dashed, label="0"];
}
