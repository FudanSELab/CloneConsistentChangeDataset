digraph {
20 [style = filled, label = "q = QParser.getParser(\"snow leopard panthera onca\",req(params(\"df\",\"t_as_same_term_boosted_foo\",\"sow\",\"false\"))).getQuery()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "q = QParser.getParser(\"panthera onca\",req(params(\"df\",\"t_as_same_term_boosted_foo\",\"sow\",\"false\"))).getQuery()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "q = QParser.getParser(\"panthera onca\",req(params(\"df\",\"t_as_distinct_boosted_foo\",\"sow\",\"false\"))).getQuery()@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testSynonymsBoost_multiConceptsQueryMultiTermSynonyms_shouldParseBoostedQuery['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(\"((t_as_distinct_boosted_foo:\"panthera uncia\")^0.9 (t_as_distinct_boosted_foo:\"big cat\")^0.8 (t_as_distinct_boosted_foo:white_leopard)^0.6 t_as_distinct_boosted_foo:\"snow leopard\")\" + \" ((t_as_distinct_boosted_foo:jaguar)^0.95 (t_as_distinct_boosted_foo:\"big cat\")^0.85 (t_as_distinct_boosted_foo:\"black panther\")^0.65)\",q.toString())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "q = QParser.getParser(\"snow leopard\",req(params(\"df\",\"t_as_distinct_boosted_foo\",\"sow\",\"false\"))).getQuery()@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "q = QParser.getParser(\"panthera onca\",req(params(\"df\",\"t_pick_best_boosted_foo\",\"sow\",\"false\"))).getQuery()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testSynonymsBoost_singleConceptQueryMultiTermSynonyms_shouldParseBoostedQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertEquals(\"((t_as_same_term_boosted_foo:jaguar)^0.95 (t_as_same_term_boosted_foo:\"big cat\")^0.85 (t_as_same_term_boosted_foo:\"black panther\")^0.65)\",q.toString())@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Query q = QParser.getParser(\"snow leopard\",req(params(\"df\",\"t_pick_best_boosted_foo\",\"sow\",\"false\"))).getQuery()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "Query q = QParser.getParser(\"snow leopard panthera onca\",req(params(\"df\",\"t_pick_best_boosted_foo\",\"sow\",\"false\"))).getQuery()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(q,booleanQuery(disjunctionOf(phraseQuery(field,\"snow leopard\"),boosted(phraseQuery(field,\"panthera uncia\"),0.9f),boosted(phraseQuery(field,\"big cat\"),0.8f),boosted(field,\"red_leopard\",0.6f))))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertThat(q,booleanQuery(disjunctionOf(boosted(field,\"jaguar\",0.95f),boosted(phraseQuery(field,\"big cat\"),0.85f),boosted(phraseQuery(field,\"black panther\"),0.65f))))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "q = QParser.getParser(\"snow leopard\",req(params(\"df\",\"t_as_distinct_boosted_foo\",\"sow\",\"false\"))).getQuery()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "q = QParser.getParser(\"panthera onca\",req(params(\"df\",\"t_as_distinct_boosted_foo\",\"sow\",\"false\"))).getQuery()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "q = QParser.getParser(\"snow leopard\",req(params(\"df\",\"t_as_same_term_boosted_foo\",\"sow\",\"false\"))).getQuery()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "q = QParser.getParser(\"snow leopard panthera onca\",req(params(\"df\",\"t_as_distinct_boosted_foo\",\"sow\",\"false\"))).getQuery()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(\"((t_as_distinct_boosted_foo:\"panthera uncia\")^0.9 (t_as_distinct_boosted_foo:\"big cat\")^0.8 (t_as_distinct_boosted_foo:white_leopard)^0.6 t_as_distinct_boosted_foo:\"snow leopard\")\",q.toString())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(\"((t_as_same_term_boosted_foo:\"panthera uncia\")^0.9 (t_as_same_term_boosted_foo:\"big cat\")^0.8 (t_as_same_term_boosted_foo:white_leopard)^0.6 t_as_same_term_boosted_foo:\"snow leopard\")\",q.toString())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"((t_pick_best_boosted_foo:\"panthera uncia\")^0.9 | (t_pick_best_boosted_foo:\"big cat\")^0.8 | (t_pick_best_boosted_foo:white_leopard)^0.6 | t_pick_best_boosted_foo:\"snow leopard\")\",q.toString())@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(\"((t_pick_best_boosted_foo:\"panthera uncia\")^0.9 | (t_pick_best_boosted_foo:\"big cat\")^0.8 | (t_pick_best_boosted_foo:white_leopard)^0.6 | t_pick_best_boosted_foo:\"snow leopard\")\" + \" ((t_pick_best_boosted_foo:jaguar)^0.95 | (t_pick_best_boosted_foo:\"big cat\")^0.85 | (t_pick_best_boosted_foo:\"black panther\")^0.65)\",q.toString())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testSynonymsBoost_singleConceptQueryMultiTermSynonyms_shouldParseBoostedQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Query q = QParser.getParser(\"snow leopard\",req(params(\"df\",field,\"sow\",\"false\"))).getQuery()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "assertEquals(\"((t_as_same_term_boosted_foo:\"panthera uncia\")^0.9 (t_as_same_term_boosted_foo:\"big cat\")^0.8 (t_as_same_term_boosted_foo:white_leopard)^0.6 t_as_same_term_boosted_foo:\"snow leopard\")\" + \" ((t_as_same_term_boosted_foo:jaguar)^0.95 (t_as_same_term_boosted_foo:\"big cat\")^0.85 (t_as_same_term_boosted_foo:\"black panther\")^0.65)\",q.toString())@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "String field = \"t_pick_best_boosted_foo\"@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertEquals(\"((t_as_distinct_boosted_foo:jaguar)^0.95 (t_as_distinct_boosted_foo:\"big cat\")^0.85 (t_as_distinct_boosted_foo:\"black panther\")^0.65)\",q.toString())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->10 [style = bold, label=""];
13->17 [style = solid, label="field"];
15->13 [style = bold, label=""];
7->11 [style = bold, label=""];
21->19 [style = bold, label=""];
16->10 [style = bold, label=""];
10->19 [style = dashed, label="0"];
19->20 [style = bold, label=""];
2->3 [style = bold, label=""];
11->4 [style = bold, label=""];
12->17 [style = bold, label=""];
8->23 [style = dashed, label="0"];
7->20 [style = dashed, label="0"];
6->0 [style = bold, label=""];
20->25 [style = bold, label=""];
10->7 [style = bold, label=""];
3->9 [style = bold, label=""];
12->2 [style = bold, label=""];
8->5 [style = bold, label=""];
23->21 [style = bold, label=""];
0->13 [style = dashed, label="0"];
0->8 [style = bold, label=""];
11->25 [style = dashed, label="0"];
17->3 [style = bold, label=""];
5->21 [style = dashed, label="0"];
4->12 [style = bold, label=""];
0->24 [style = dashed, label="0"];
1->14 [style = bold, label=""];
22->24 [style = bold, label=""];
9->1 [style = bold, label=""];
13->16 [style = solid, label="field"];
12->17 [style = solid, label="q"];
13->18 [style = bold, label=""];
18->16 [style = solid, label="q"];
24->23 [style = bold, label=""];
18->16 [style = bold, label=""];
}
