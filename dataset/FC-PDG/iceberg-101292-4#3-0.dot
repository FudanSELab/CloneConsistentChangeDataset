digraph {
10 [style = filled, label = "testNotNaN['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Assert.assertFalse(\"Should skip: all nans column doesn't contain non nan value\",shouldRead)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertTrue(\"Should read: both_nan_and_null nans column contains non nan value\",shouldRead)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(notNaN(\"both_nan_and_null\"),SPEC,true).eval(FILE)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testIsNaN['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(isNaN(\"float\"),SPEC,true).eval(FILE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertTrue(\"Should read: no_nan_or_null column contains non nan value\",shouldRead)@@@14@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertTrue(\"Should read: no_nans column contains non nan value\",shouldRead)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(notNaN(\"no_nan_or_null\"),SPEC,true).eval(FILE)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(notNaN(\"float\"),SPEC,true).eval(FILE)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(isNaN(\"all_nulls_double\"),SPEC,true).eval(FILE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(notNaN(\"all_nans\"),SPEC,true).eval(FILE)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "testNotNaN['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertTrue(\"Should read: all null column contains non nan value\",shouldRead)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertFalse(\"Should skip: all null column doesn't contain nan value\",shouldRead)@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(notNaN(\"all_nulls_double\"),SPEC,true).eval(FILE)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertTrue(\"Should read: no information on if there are nan value in float column\",shouldRead)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(notNaN(\"all_nulls_no_nans\"),SPEC,true).eval(FILE)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
4->6 [style = bold, label=""];
5->7 [style = bold, label=""];
7->8 [style = bold, label=""];
2->4 [style = bold, label=""];
9->11 [style = bold, label=""];
11->12 [style = bold, label=""];
14->3 [style = bold, label=""];
17->16 [style = solid, label="shouldRead"];
6->9 [style = solid, label="shouldRead"];
3->2 [style = bold, label=""];
2->17 [style = dashed, label="0"];
1->14 [style = dashed, label="0"];
4->16 [style = dashed, label="0"];
7->8 [style = solid, label="shouldRead"];
14->3 [style = solid, label="shouldRead"];
13->5 [style = solid, label="shouldRead"];
0->1 [style = bold, label=""];
12->13 [style = bold, label=""];
6->9 [style = bold, label=""];
10->1 [style = bold, label=""];
3->17 [style = bold, label=""];
1->3 [style = bold, label=""];
15->14 [style = bold, label=""];
2->4 [style = solid, label="shouldRead"];
1->3 [style = solid, label="shouldRead"];
17->16 [style = bold, label=""];
13->5 [style = bold, label=""];
11->12 [style = solid, label="shouldRead"];
}
