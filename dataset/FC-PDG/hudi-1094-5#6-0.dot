digraph {
5 [style = filled, label = "assertEquals(expected,got)@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testShowCommits['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "expected = removeNonWordAndStripSpace(expected)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testShowCommits['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "String got = removeNonWordAndStripSpace(cr.getResult().toString())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertTrue(cr.isSuccess())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(1,metaClient.getActiveTimeline().reload().getCleanerTimeline().getInstants().count(),\"Loaded 1 clean and the count should match\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_CLEAN_TIME).addTableHeaderField(HoodieTableHeaderFields.HEADER_EARLIEST_COMMAND_RETAINED).addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_FILES_DELETED).addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_TIME_TAKEN)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "rows.add(new Comparable((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16245f2)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Map<String,Integer((> data = generateData()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "CommandResult cr = getShell().executeCommand(\"cleans show\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertTrue(cr.isSuccess())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "HoodieInstant clean = metaClient.getActiveTimeline().reload().getCleanerTimeline().getInstants().findFirst().orElse(null)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertNotNull(clean)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "List<Comparable((> rows = new ArrayList<>()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testShowCleans['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "String expected = generateExpectData(1,data)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "String expected = HoodiePrintHelper.print(header,new HashMap<>(),\"\",false,-1,false,rows)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "CommandResult cr = getShell().executeCommand(\"commits show\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(expected,got)@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "String got = removeNonWordAndStripSpace(cr.getResult().toString())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertNotNull(propsFilePath,\"Not found properties file\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "SparkMain.clean(jsc,HoodieCLI.basePath,propsFilePath.getPath(),new ArrayList<>())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->2 [style = solid, label="expected"];
13->20 [style = solid, label="rows"];
13->19 [style = bold, label=""];
8->0 [style = bold, label=""];
19->20 [style = bold, label=""];
10->20 [style = solid, label="header"];
9->15 [style = bold, label=""];
15->22 [style = solid, label="got"];
15->22 [style = bold, label=""];
0->3 [style = bold, label=""];
14->11 [style = bold, label=""];
11->2 [style = bold, label=""];
3->1 [style = bold, label=""];
12->17 [style = bold, label=""];
21->18 [style = solid, label="clean"];
10->13 [style = bold, label=""];
21->18 [style = bold, label=""];
16->14 [style = bold, label=""];
18->10 [style = bold, label=""];
6->5 [style = bold, label=""];
9->22 [style = solid, label="expected"];
2->5 [style = solid, label="expected"];
2->6 [style = bold, label=""];
6->5 [style = solid, label="got"];
20->9 [style = solid, label="expected"];
20->9 [style = bold, label=""];
1->7 [style = bold, label=""];
0->7 [style = solid, label="data"];
17->16 [style = bold, label=""];
2->21 [style = bold, label=""];
4->0 [style = bold, label=""];
7->2 [style = bold, label=""];
}
