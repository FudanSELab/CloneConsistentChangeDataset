digraph {
7 [style = filled, label = "assertThat(parser.currentToken(),is(Token.END_OBJECT))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "parser.nextToken()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(e.getMessage(),is(\"latitude must be a number\"))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testParseGeoPointLonNoLat['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "XContentBuilder json = jsonBuilder().startObject().field(\"lat\",false).field(\"lon\",lon).endObject()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(e.getMessage(),is(\"field (lat( missing\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Exception e = expectThrows(,null)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertNull(parser.nextToken())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "double lon = 0.0@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "XContentBuilder json = jsonBuilder().startObject().field(\"lon\",lon).endObject()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testParseGeoPointLonNoLat['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testParseGeoPointLatWrongType['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
5->7 [style = bold, label=""];
4->3 [style = bold, label=""];
10->3 [style = bold, label=""];
5->9 [style = dashed, label="0"];
4->10 [style = dashed, label="0"];
3->1 [style = bold, label=""];
8->2 [style = bold, label=""];
2->10 [style = bold, label=""];
2->4 [style = bold, label=""];
11->2 [style = bold, label=""];
1->9 [style = bold, label=""];
7->6 [style = bold, label=""];
0->2 [style = bold, label=""];
}
