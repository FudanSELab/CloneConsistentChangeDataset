digraph {
1 [style = filled, label = "int i@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "PlatformDependent.copyMemory(baseObject,baseOffset + offsetToStringSize + 8,strBytes,PlatformDependent.BYTE_ARRAY_OFFSET,stringSizeInBytes)@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final long offsetToStringSize = getLong(i)@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "return null@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "final int size = (int)(offsetAndSize & ((1L << 32) - 1))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "int ordinal@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "getUTF8String['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "getBinary['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "return UTF8String.fromBytes(strBytes)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "isNullAt(ordinal)@@@4@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "return null@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final int stringSizeInBytes = (int)PlatformDependent.UNSAFE.getLong(baseObject,baseOffset + offsetToStringSize)@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final int size = (int)(offsetAndSize & ((1L << 32) - 1))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertIndexIsValid(i)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "return UTF8String.fromAddress(baseObject,baseOffset + offset,size)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "return bytes@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertIndexIsValid(ordinal)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "PlatformDependent.copyMemory(baseObject,baseOffset + offset,bytes,PlatformDependent.BYTE_ARRAY_OFFSET,size)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final byte(( strBytes = new byte((((@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final byte(( bytes = new byte((((@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "getUTF8String['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "isNullAt(ordinal)@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "int ordinal@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertIndexIsValid(ordinal)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22->25 [style = bold, label=""];
6->2 [style = solid, label="offsetToStringSize"];
22->19 [style = dotted, label="false"];
15->8 [style = solid, label="offsetAndSize"];
1->6 [style = solid, label="i"];
17->23 [style = solid, label="ordinal"];
13->12 [style = dotted, label="true"];
0->6 [style = bold, label=""];
22->25 [style = dotted, label="true"];
12->15 [style = bold, label=""];
22->24 [style = dotted, label="false"];
18->19 [style = bold, label=""];
19->27 [style = solid, label="bytes"];
22->27 [style = dotted, label="false"];
22->21 [style = dotted, label="false"];
1->10 [style = dashed, label="0"];
18->24 [style = solid, label="size"];
10->15 [style = solid, label="ordinal"];
11->9 [style = bold, label=""];
2->4 [style = bold, label=""];
16->10 [style = dotted, label="true"];
23->21 [style = solid, label="offsetAndSize"];
21->18 [style = bold, label=""];
11->9 [style = solid, label="size"];
17->22 [style = solid, label="ordinal"];
3->0 [style = bold, label=""];
26->22 [style = bold, label=""];
7->4 [style = solid, label="strBytes"];
19->24 [style = bold, label=""];
0->14 [style = dashed, label="0"];
1->0 [style = solid, label="i"];
4->9 [style = dashed, label="0"];
6->5 [style = bold, label=""];
10->14 [style = solid, label="ordinal"];
21->24 [style = solid, label="offset"];
13->12 [style = bold, label=""];
20->23 [style = bold, label=""];
22->20 [style = bold, label=""];
23->21 [style = bold, label=""];
15->11 [style = solid, label="offsetAndSize"];
7->2 [style = bold, label=""];
19->24 [style = solid, label="bytes"];
26->17 [style = dotted, label="true"];
22->20 [style = dotted, label="false"];
22->23 [style = dotted, label="false"];
7->2 [style = solid, label="strBytes"];
17->20 [style = solid, label="ordinal"];
5->7 [style = bold, label=""];
16->14 [style = bold, label=""];
10->13 [style = solid, label="ordinal"];
22->18 [style = dotted, label="false"];
5->2 [style = solid, label="stringSizeInBytes"];
13->15 [style = bold, label=""];
14->13 [style = bold, label=""];
8->9 [style = solid, label="offset"];
23->18 [style = solid, label="offsetAndSize"];
8->11 [style = bold, label=""];
3->1 [style = dotted, label="true"];
24->27 [style = bold, label=""];
15->8 [style = bold, label=""];
6->5 [style = solid, label="offsetToStringSize"];
}
