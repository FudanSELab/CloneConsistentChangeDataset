digraph {
10 [style = filled, label = "assertThat(slave2.toComputer().getOfflineCause(),instanceOf())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(result,failedWith(5))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "DumbSlave slave1 = j.createSlave(\"aNode1\",\"\",null)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(((OfflineCause.ByCLI)slave1.toComputer().getOfflineCause()).message,equalTo(null))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(slave2.toComputer().isOnline(),equalTo(true))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "offlineNodeManyShouldFailIfANodeDoesNotExist['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertThat(((OfflineCause.ByCLI)slave2.toComputer().getOfflineCause()).message,equalTo(null))@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "offlineNodeManyShouldFailIfANodeDoesNotExistWithCause['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Computer.DISCONNECT,Jenkins.READ).invokeWithArgs(\"aNode1\",\"aNode2\",\"never_created\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(slave1.toComputer().getOfflineCause(),instanceOf())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(slave1.toComputer().getOfflineCause(),equalTo(null))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Computer.DISCONNECT,Jenkins.READ).invokeWithArgs(\"aNode1\",\"aNode2\",\"never_created\",\"-m\",\"aCause\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(result.stderr(),containsString(\"never_created: No such agent \"never_created\" exists. Did you mean \"aNode1\"?\"))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "offlineNodeManyShouldFailIfANodeDoesNotExist['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "DumbSlave slave2 = j.createSlave(\"aNode2\",\"\",null)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(slave1.toComputer().isOffline(),equalTo(true))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(((OfflineCause.ByCLI)slave1.toComputer().getOfflineCause()).message,equalTo(\"aCause\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(slave2.toComputer().getOfflineCause(),equalTo(null))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Error occured while performing this command, see previous stderr output.\"))@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(slave2.toComputer().isOffline(),equalTo(true))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(((OfflineCause.ByCLI)slave2.toComputer().getOfflineCause()).message,equalTo(\"aCause\"))@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "slave2.toComputer().waitUntilOnline()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "slave1.toComputer().waitUntilOnline()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(slave1.toComputer().isOnline(),equalTo(true))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->9 [style = bold, label=""];
13->10 [style = bold, label=""];
11->14 [style = bold, label=""];
8->18 [style = bold, label=""];
10->24 [style = bold, label=""];
12->11 [style = bold, label=""];
14->22 [style = bold, label=""];
18->19 [style = bold, label=""];
1->3 [style = bold, label=""];
23->4 [style = bold, label=""];
5->24 [style = dashed, label="0"];
14->17 [style = bold, label=""];
3->12 [style = bold, label=""];
25->1 [style = solid, label="result"];
25->16 [style = bold, label=""];
2->4 [style = bold, label=""];
12->21 [style = dashed, label="0"];
9->6 [style = bold, label=""];
19->16 [style = bold, label=""];
20->4 [style = bold, label=""];
19->1 [style = solid, label="result"];
25->16 [style = solid, label="result"];
10->5 [style = bold, label=""];
16->1 [style = bold, label=""];
21->11 [style = bold, label=""];
15->0 [style = bold, label=""];
0->8 [style = bold, label=""];
18->25 [style = bold, label=""];
7->15 [style = bold, label=""];
3->21 [style = bold, label=""];
17->13 [style = bold, label=""];
19->25 [style = dashed, label="0"];
6->7 [style = bold, label=""];
22->13 [style = bold, label=""];
19->16 [style = solid, label="result"];
17->22 [style = dashed, label="0"];
}
