digraph {
0 [style = filled, label = "assertEquals(123,messageSet.getExtension(TestMessageSetExtension1.messageSetExtension).getI())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "extensionRegistry.add(TestMessageSetExtension1.messageSetExtension)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertWithMessage(\"expected parse exception\").fail()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(messageSet.getExtension(TestMessageSetExtension2.messageSetExtension).getStr()).isEqualTo(\"foo\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(\"foo\",messageSet.getExtension(TestMessageSetExtension2.messageSetExtension).getStr())@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testMergeMessageSet['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "TextFormat.merge(messageSetText,extensionRegistry,builder)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "fail(\"expected parse exception\")@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "builder = TestMessageSet.newBuilder()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "PARSER_WITH_OVERWRITE_FORBIDDEN.merge(MESSAGE_SET_TEXT_WITH_REPEATED_EXTENSION,extensionRegistry,builder)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertTrue(messageSet.hasExtension(TestMessageSetExtension1.messageSetExtension))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertTrue(messageSet.hasExtension(TestMessageSetExtension2.messageSetExtension))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "messageSet = builder.build()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "TestMessageSet.Builder builder = TestMessageSet.newBuilder()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(456,messageSet.getExtension(TestMessageSetExtension1.messageSetExtension).getI())@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "TestMessageSet messageSet = builder.build()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testMergeMessageSetWithOverwriteForbidden['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "parserWithOverwriteForbidden.merge(messageSetText,extensionRegistry,builder)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertThat(messageSet.getExtension(TestMessageSetExtension1.messageSetExtension).getI()).isEqualTo(123)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "parserWithOverwriteForbidden.merge(messageSetTextWithRepeatedExtension,extensionRegistry,builder)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "TextFormat.merge(messageSetTextWithRepeatedExtension,extensionRegistry,builder)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "ExtensionRegistry extensionRegistry = ExtensionRegistry.newInstance()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testMergeMessageSetWithOverwriteForbidden['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "PARSER_WITH_OVERWRITE_FORBIDDEN.merge(MESSAGE_SET_TEXT,extensionRegistry,builder)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "extensionRegistry.add(TestMessageSetExtension2.messageSetExtension)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
5->8 [style = bold, label=""];
11->22 [style = solid, label="extensionRegistry"];
16->13 [style = bold, label=""];
7->22 [style = solid, label="builder"];
11->3 [style = solid, label="extensionRegistry"];
11->5 [style = solid, label="extensionRegistry"];
1->16 [style = solid, label="builder"];
19->20 [style = bold, label=""];
11->6 [style = bold, label=""];
14->10 [style = bold, label=""];
11->14 [style = solid, label="extensionRegistry"];
10->17 [style = bold, label=""];
3->22 [style = dashed, label="0"];
9->7 [style = bold, label=""];
12->1 [style = bold, label=""];
23->0 [style = bold, label=""];
0->17 [style = dashed, label="0"];
7->3 [style = bold, label=""];
4->12 [style = dashed, label="0"];
8->13 [style = dashed, label="0"];
7->14 [style = bold, label=""];
20->21 [style = bold, label=""];
5->16 [style = dashed, label="0"];
3->10 [style = bold, label=""];
7->22 [style = bold, label=""];
7->3 [style = solid, label="builder"];
17->12 [style = bold, label=""];
15->11 [style = bold, label=""];
18->4 [style = bold, label=""];
1->19 [style = solid, label="builder"];
0->4 [style = bold, label=""];
1->16 [style = bold, label=""];
10->23 [style = bold, label=""];
24->11 [style = bold, label=""];
11->16 [style = solid, label="extensionRegistry"];
10->0 [style = bold, label=""];
1->5 [style = solid, label="builder"];
22->10 [style = bold, label=""];
0->18 [style = bold, label=""];
4->1 [style = bold, label=""];
11->19 [style = solid, label="extensionRegistry"];
6->9 [style = bold, label=""];
1->19 [style = bold, label=""];
3->14 [style = dashed, label="0"];
2->11 [style = bold, label=""];
7->14 [style = solid, label="builder"];
}
