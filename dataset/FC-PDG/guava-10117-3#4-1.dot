digraph {
4 [style = filled, label = "assertThat(graph.requestedNodes).containsExactly('a','a','b','b')@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertThat(graph.requestedNodes).containsExactly('a','a','b','b','d','d')@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "forGraph_breadthFirst_iterableIsLazy['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(graph.requestedNodes).containsExactly('a','a','b')@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Iterable<Character> result = Traverser.forGraph(graph).breadthFirst('a')@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "RequestSavingGraph graph = new RequestSavingGraph(DIAMOND_GRAPH)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "forGraph_breadthFirst_iterableIsLazy['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertEqualCharNodes(Iterables.limit(result,2),\"ab\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "forGraph_depthFirstPreOrder_iterableIsLazy['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Iterable<Character> result = Traverser.forGraph(graph).depthFirstPreOrder('a')@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(graph.requestedNodes).containsExactly('a','a','a','b','b')@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertThat(graph.requestedNodes).containsExactly('a','b')@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "assertEqualCharNodes(Iterables.limit(result,2),\"ab\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(graph.requestedNodes).containsExactly('a','b','d')@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->4 [style = bold, label=""];
9->0 [style = bold, label=""];
3->1 [style = bold, label=""];
5->2 [style = solid, label="result"];
2->3 [style = bold, label=""];
6->0 [style = bold, label=""];
3->13 [style = dashed, label="0"];
1->7 [style = bold, label=""];
13->1 [style = bold, label=""];
4->12 [style = dashed, label="0"];
2->13 [style = bold, label=""];
8->1 [style = bold, label=""];
5->2 [style = bold, label=""];
0->10 [style = bold, label=""];
11->0 [style = bold, label=""];
5->10 [style = dashed, label="0"];
4->7 [style = dashed, label="0"];
1->12 [style = bold, label=""];
5->1 [style = solid, label="result"];
3->8 [style = dashed, label="0"];
10->2 [style = bold, label=""];
10->2 [style = solid, label="result"];
10->1 [style = solid, label="result"];
2->8 [style = bold, label=""];
0->5 [style = bold, label=""];
}
