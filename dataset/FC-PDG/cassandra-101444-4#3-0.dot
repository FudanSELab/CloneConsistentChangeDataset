digraph {
7 [style = filled, label = "testMoveForwardCalculateRangesToFetchWithPreferredEndpoints['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "expectedResult.put(fullReplica(address01,threeToken,fourToken),fullReplica(cOrBAddress,threeToken,sixToken))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "expectedResult.put(fullReplica(aAddress,threeToken,fourToken),fullReplica(cOrBAddress,threeToken,sixToken))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "expectedResult.put(fullReplica(address01,threeToken,fourToken),transientReplica(address04,threeToken,sixToken))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "expectedResult.put(fullReplica(aAddress,sixToken,sevenToken),fullReplica(dAddress,sixToken,nineToken))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "invokeCalculateRangesToFetchWithPreferredEndpoints(calculateStreamAndFetchRangesMoveForward().right,constructTMDsMoveForward(),expectedResult.asImmutableView())@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "expectedResult.put(fullReplica(aAddress,sixToken,sevenToken),transientReplica(eAddress,sixToken,nineToken))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "invokeCalculateRangesToFetchWithPreferredEndpoints(calculateStreamAndFetchRangesMoveForwardBetween().right,constructTMDsMoveForwardBetween(),expectedResult.asImmutableView())@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testMoveForwardBetweenCalculateRangesToFetchWithPreferredEndpoints['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "expectedResult.put(fullReplica(aAddress,threeToken,fourToken),transientReplica(dAddress,threeToken,sixToken))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "expectedResult.put(fullReplica(aAddress,threeToken,sixToken),transientReplica(dAddress,threeToken,sixToken))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "InetAddressAndPort cOrB = (downNodes.contains(cAddress) || sourceFilterDownNodes.contains(cAddress))? bAddress: cAddress@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "InetAddressAndPort cOrBAddress = (downNodes.contains(address03) || sourceFilterDownNodes.contains(address03))? address02: address03@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "EndpointsByReplica.Mutable expectedResult = new EndpointsByReplica.Mutable()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "expectedResult.put(fullReplica(aAddress,threeToken,sixToken),fullReplica(cOrB,threeToken,sixToken))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "InetAddressAndPort cOrBAddress = (downNodes.contains(cAddress) || sourceFilterDownNodes.contains(cAddress))? bAddress: cAddress@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "testMoveForwardCalculateRangesToFetchWithPreferredEndpoints['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5->13 [style = dashed, label="0"];
11->16 [style = bold, label=""];
1->15 [style = dashed, label="0"];
12->11 [style = solid, label="cOrB"];
5->9 [style = dashed, label="0"];
7->4 [style = bold, label=""];
0->12 [style = dashed, label="0"];
3->4 [style = bold, label=""];
0->5 [style = solid, label="cOrBAddress"];
9->6 [style = bold, label=""];
4->0 [style = bold, label=""];
6->2 [style = bold, label=""];
12->13 [style = bold, label=""];
5->1 [style = bold, label=""];
15->11 [style = bold, label=""];
1->6 [style = dashed, label="0"];
8->9 [style = bold, label=""];
8->9 [style = solid, label="cOrBAddress"];
10->4 [style = bold, label=""];
4->12 [style = bold, label=""];
4->8 [style = bold, label=""];
16->14 [style = bold, label=""];
0->8 [style = dashed, label="0"];
1->2 [style = bold, label=""];
13->15 [style = bold, label=""];
0->5 [style = bold, label=""];
}
