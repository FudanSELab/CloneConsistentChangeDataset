digraph {
3 [style = filled, label = "String function = expression.getFunctionName()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "StreamExpression expression@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "classSupplier != null@@@5@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "constructOperation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "return (StreamOperation)createInstance(functionNames.get(function),new Class((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@d8efaa,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@d8efaf)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "functionNames.containsKey(function)@@@4@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Class<? extends Expressible> clazz = classSupplier.get()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(function)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid metric expression %s - function '%s' is unknown (not mapped to a valid Metric)\",expression,expression.getFunctionName()))@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "return (Metric)createInstance(clazz,new Class((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@d8ef60,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@d8ef65)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "constructMetric['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid metric expression %s - function '%s' is unknown (not mapped to a valid Metric)\",expression,expression.getFunctionName()))@@@14@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Class<? extends Expressible> clazz = functionNames.get(function)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "constructMetric['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid operation expression %s - function '%s' is unknown (not mapped to a valid StreamOperation)\",expression,expression.getFunctionName()))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = ".isAssignableFrom(clazz) && .isAssignableFrom(clazz)@@@6@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = ".isAssignableFrom(clazz) && .isAssignableFrom(clazz)@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "StreamExpression expression@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = ".isAssignableFrom(clazz) && .isAssignableFrom(clazz)@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3->7 [style = solid, label="function"];
3->1 [style = solid, label="function"];
13->10 [style = bold, label=""];
4->3 [style = bold, label=""];
4->5 [style = dotted, label="true"];
2->0 [style = dotted, label="true"];
3->1 [style = bold, label=""];
0->6 [style = bold, label=""];
3->0 [style = solid, label="function"];
2->6 [style = bold, label=""];
3->17 [style = solid, label="function"];
18->17 [style = solid, label="expression"];
16->17 [style = dotted, label="true"];
15->18 [style = dotted, label="true"];
0->11 [style = bold, label=""];
1->9 [style = dashed, label="0"];
0->11 [style = dashed, label="0"];
16->17 [style = bold, label=""];
6->14 [style = dashed, label="0"];
5->18 [style = dashed, label="0"];
15->3 [style = bold, label=""];
0->17 [style = dashed, label="0"];
1->7 [style = bold, label=""];
5->6 [style = solid, label="expression"];
3->9 [style = solid, label="function"];
1->7 [style = dotted, label="true"];
8->0 [style = bold, label=""];
3->9 [style = bold, label=""];
0->10 [style = bold, label=""];
2->0 [style = bold, label=""];
1->6 [style = bold, label=""];
5->0 [style = solid, label="expression"];
12->5 [style = dotted, label="true"];
17->14 [style = bold, label=""];
8->11 [style = solid, label="clazz"];
7->2 [style = bold, label=""];
11->10 [style = bold, label=""];
7->2 [style = solid, label="clazz"];
13->8 [style = dotted, label="true"];
7->16 [style = solid, label="clazz"];
13->0 [style = dotted, label="true"];
18->14 [style = solid, label="expression"];
7->16 [style = bold, label=""];
2->16 [style = dashed, label="0"];
5->10 [style = solid, label="expression"];
9->13 [style = bold, label=""];
16->14 [style = bold, label=""];
1->14 [style = bold, label=""];
1->16 [style = dotted, label="true"];
12->3 [style = bold, label=""];
13->8 [style = bold, label=""];
1->2 [style = dotted, label="true"];
0->11 [style = dotted, label="true"];
5->11 [style = solid, label="expression"];
9->13 [style = solid, label="classSupplier"];
8->0 [style = solid, label="clazz"];
}
