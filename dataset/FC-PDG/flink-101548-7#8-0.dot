digraph {
34 [style = filled, label = "Assert.assertEquals(set0,iter.getInitialSolutionSetInput().getShipStrategyKeys())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(ShipStrategyType.PARTITION_HASH,iter.getInitialSolutionSetInput().getShipStrategy())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(DriverStrategy.NONE,edgesSource.getDriverStrategy())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Plan plan = getConnectedComponentsCoGroupPlan()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(ShipStrategyType.FORWARD,neighborsJoin.getInput1().getShipStrategy())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "testWorksetConnectedComponents['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(ShipStrategyType.PARTITION_HASH,iter.getInitialWorksetInput().getShipStrategy())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "DualInputPlanNode cogroup = or.getNode(MIN_ID_AND_UPDATE)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertTrue(TempMode.CACHED == neighborsJoin.getInput2().getTempMode())@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "DualInputPlanNode neighborsJoin = or.getNode(JOIN_NEIGHBORS_MATCH)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(set0,cogroup.getKeysForInput1())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "String json = dumper.getOptimizerPlanAsJSON(optPlan)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "return false@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "OptimizerPlanNodeResolver or = getOptimizerPlanNodeResolver(optPlan)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "SingleInputPlanNode reducer@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "PRINT_PLAN@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(set0,neighborsJoin.getInput2().getShipStrategyKeys())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Assert.assertTrue(Arrays.equals(reducer.getInput().getLocalStrategySortOrder(),reducer.getSortOrders(0)))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(ShipStrategyType.FORWARD,sink.getInput().getShipStrategy())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "DualInputPlanNode join@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(LocalStrategy.NONE,cogroup.getInput2().getLocalStrategy())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Assert.assertEquals(LocalStrategy.SORT,join.getInput2().getLocalStrategy())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertTrue(neighborsJoin.getInput2().getTempMode().isCached())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(ShipStrategyType.PARTITION_HASH,neighborsJoin.getInput2().getShipStrategy())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(set0,join.getInput1().getLocalStrategyKeys())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "Assert.assertEquals(set01,reducer.getInput().getLocalStrategyKeys())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(ShipStrategyType.PARTITION_HASH,cogroup.getInput1().getShipStrategy())@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Assert.assertEquals(LocalStrategy.COMBININGSORT,reducer.getInput().getLocalStrategy())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "Assert.assertEquals(set01,reducer.getKeys(0))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "Assert.assertTrue(Arrays.equals(join.getInput1().getLocalStrategySortOrder(),join.getInput2().getLocalStrategySortOrder()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "OptimizedPlan optPlan = compileNoStats(plan)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "jgg.compileJobGraph(optPlan)@@@47@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(set0,iter.getInitialWorksetInput().getShipStrategyKeys())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(DriverStrategy.INNER_MERGE,neighborsJoin.getDriverStrategy())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(set0,neighborsJoin.getKeysForInput1())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "JobGraphGenerator jgg = new JobGraphGenerator()@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(DriverStrategy.CO_GROUP,cogroup.getDriverStrategy())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(LocalStrategy.SORT,neighborsJoin.getInput2().getLocalStrategy())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertEquals(set0,neighborsJoin.getKeysForInput2())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "DriverStrategy.INNER_MERGE == join.getDriverStrategy()@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "WorksetIterationPlanNode iter = or.getNode(ITERATION_NAME)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(LocalStrategy.NONE,iter.getInitialSolutionSetInput().getLocalStrategy())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(LocalStrategy.NONE,neighborsJoin.getInput1().getLocalStrategy())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Assert.assertEquals(set0,join.getInput2().getLocalStrategyKeys())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "System.out.println(json)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(DriverStrategy.NONE,vertexSource.getDriverStrategy())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "Assert.assertEquals(LocalStrategy.SORT,join.getInput1().getLocalStrategy())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "SinkPlanNode sink = or.getNode(SINK)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(LocalStrategy.SORT,iter.getInitialWorksetInput().getLocalStrategy())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "plan.setExecutionConfig(new ExecutionConfig())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(DriverStrategy.NONE,sink.getDriverStrategy())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(LocalStrategy.NONE,sink.getInput().getLocalStrategy())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testWorksetConnectedComponents['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "SourcePlanNode edgesSource = or.getNode(EDGES_SOURCE)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "return true@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "checkBroadcastMergeJoin['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "Assert.assertEquals(set0,join.getKeysForInput2())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(LocalStrategy.SORT,cogroup.getInput1().getLocalStrategy())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "Assert.assertEquals(set0,join.getKeysForInput1())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(set0,cogroup.getKeysForInput2())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertEquals(ShipStrategyType.FORWARD,cogroup.getInput2().getShipStrategy())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "SourcePlanNode vertexSource = or.getNode(VERTEX_SOURCE)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59->46 [style = bold, label=""];
61->54 [style = dotted, label="true"];
4->38 [style = solid, label="plan"];
21->14 [style = bold, label=""];
38->36 [style = bold, label=""];
62->59 [style = bold, label=""];
61->47 [style = dotted, label="true"];
11->21 [style = bold, label=""];
33->31 [style = bold, label=""];
13->30 [style = bold, label=""];
29->8 [style = bold, label=""];
6->4 [style = bold, label=""];
52->62 [style = bold, label=""];
46->55 [style = bold, label=""];
56->49 [style = dotted, label="true"];
48->60 [style = bold, label=""];
56->50 [style = dotted, label="true"];
56->58 [style = bold, label=""];
56->62 [style = dotted, label="true"];
49->51 [style = bold, label=""];
3->42 [style = bold, label=""];
39->5 [style = bold, label=""];
9->26 [style = solid, label="json"];
38->36 [style = solid, label="optPlan"];
56->51 [style = dotted, label="true"];
56->58 [style = dotted, label="false"];
12->1 [style = bold, label=""];
27->9 [style = bold, label=""];
0->38 [style = bold, label=""];
56->53 [style = dotted, label="true"];
5->32 [style = bold, label=""];
1->23 [style = bold, label=""];
34->3 [style = bold, label=""];
24->10 [style = bold, label=""];
56->59 [style = dotted, label="true"];
35->39 [style = bold, label=""];
23->43 [style = bold, label=""];
38->9 [style = solid, label="optPlan"];
56->52 [style = bold, label=""];
10->12 [style = bold, label=""];
26->19 [style = bold, label=""];
16->2 [style = bold, label=""];
36->18 [style = bold, label=""];
14->29 [style = bold, label=""];
40->44 [style = bold, label=""];
28->41 [style = bold, label=""];
56->48 [style = dotted, label="true"];
56->60 [style = dotted, label="true"];
18->27 [style = dotted, label="true"];
19->11 [style = bold, label=""];
50->53 [style = bold, label=""];
18->19 [style = bold, label=""];
53->48 [style = bold, label=""];
7->40 [style = bold, label=""];
44->16 [style = bold, label=""];
60->57 [style = bold, label=""];
57->49 [style = bold, label=""];
2->22 [style = bold, label=""];
25->13 [style = bold, label=""];
61->56 [style = bold, label=""];
56->55 [style = dotted, label="true"];
55->50 [style = bold, label=""];
15->20 [style = bold, label=""];
20->17 [style = bold, label=""];
30->28 [style = bold, label=""];
56->52 [style = dotted, label="true"];
9->26 [style = bold, label=""];
32->7 [style = bold, label=""];
42->35 [style = bold, label=""];
38->41 [style = solid, label="optPlan"];
17->34 [style = bold, label=""];
8->24 [style = bold, label=""];
31->15 [style = bold, label=""];
56->46 [style = dotted, label="true"];
18->27 [style = bold, label=""];
43->33 [style = bold, label=""];
18->9 [style = dotted, label="true"];
37->25 [style = bold, label=""];
18->26 [style = dotted, label="true"];
45->4 [style = bold, label=""];
4->0 [style = bold, label=""];
22->37 [style = bold, label=""];
56->57 [style = dotted, label="true"];
}
