digraph {
18 [style = filled, label = "testHighWatermarkNotExceeded['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder().put(EnableAllocationDecider.CLUSTER_ROUTING_REBALANCE_ENABLE_SETTING.getKey(),Rebalance.NONE.toString()).build()).get())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final long minShardSize = createReasonableSizedShards(indexName)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "refreshDiskUsage()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertAcked(client().admin().cluster().preparePutRepository(\"repo\").setType(FsRepository.TYPE).setSettings(Settings.builder().put(\"location\",randomRepoPath()).put(\"compress\",randomBoolean())))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final SnapshotInfo snapshotInfo = createSnapshotResponse.getSnapshotInfo()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertThat(restoreInfo.successfulShards(),is(snapshotInfo.totalShards()))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "final RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster().prepareRestoreSnapshot(\"repo\",\"snap\").setWaitForCompletion(true).get()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "fileSystemProvider.getTestFileStore(dataNode0Path).setTotalSpace(minShardSize + WATERMARK_BYTES + 1L)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final CreateSnapshotResponse createSnapshotResponse = client().admin().cluster().prepareCreateSnapshot(\"repo\",\"snap\").setWaitForCompletion(true).get()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "internalCluster().startMasterOnlyNode()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final String indexName = randomAlphaOfLength(10).toLowerCase(Locale.ROOT)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(snapshotInfo.successfulShards(),is(snapshotInfo.totalShards()))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertThat(snapshotInfo.state(),is(SnapshotState.SUCCESS))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(restoreInfo.failedShards(),is(0))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "fileSystemProvider.getTestFileStore(dataNode0Path).setTotalSpace(minShardSize + WATERMARK_BYTES - 1L)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "internalCluster().startDataOnlyNode()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final String dataNodeName = internalCluster().startDataOnlyNode()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ensureStableCluster(3)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "testRestoreSnapshotAllocationDoesNotExceedWatermark['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final InternalClusterInfoService clusterInfoService = (InternalClusterInfoService)internalCluster().getMasterNodeInstance()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final Path dataNode0Path = internalCluster().getInstance(,dataNodeName).dataFiles()(0(@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertBusy(null)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertBusy(null)@@@31@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final String dataNode0Id = internalCluster().getInstance(,dataNodeName).nodeId()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final RestoreInfo restoreInfo = restoreSnapshotResponse.getRestoreInfo()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "createIndex(indexName,Settings.builder().put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS,0).put(IndexMetadata.SETTING_NUMBER_OF_SHARDS,6).put(INDEX_STORE_STATS_REFRESH_INTERVAL_SETTING.getKey(),\"0ms\").build())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "ensureStableCluster(3)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "internalCluster().getMasterNodeInstance().addListener(null)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertAcked(client().admin().indices().prepareDelete(indexName).get())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testHighWatermarkNotExceeded['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder().putNull(EnableAllocationDecider.CLUSTER_ROUTING_REBALANCE_ENABLE_SETTING.getKey()).build()).get())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "refreshDiskUsage()@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28->21 [style = bold, label=""];
2->7 [style = solid, label="indexName"];
26->24 [style = bold, label=""];
24->32 [style = bold, label=""];
7->8 [style = bold, label=""];
2->8 [style = solid, label="indexName"];
9->4 [style = bold, label=""];
2->7 [style = bold, label=""];
1->12 [style = bold, label=""];
1->28 [style = bold, label=""];
20->15 [style = bold, label=""];
15->23 [style = bold, label=""];
13->6 [style = bold, label=""];
16->15 [style = bold, label=""];
19->22 [style = bold, label=""];
17->12 [style = bold, label=""];
10->11 [style = bold, label=""];
22->20 [style = bold, label=""];
5->10 [style = bold, label=""];
8->13 [style = solid, label="minShardSize"];
0->1 [style = bold, label=""];
11->2 [style = bold, label=""];
21->12 [style = bold, label=""];
8->3 [style = bold, label=""];
8->3 [style = solid, label="minShardSize"];
12->5 [style = bold, label=""];
8->29 [style = bold, label=""];
23->13 [style = bold, label=""];
6->14 [style = bold, label=""];
25->4 [style = bold, label=""];
32->31 [style = bold, label=""];
27->30 [style = bold, label=""];
1->17 [style = bold, label=""];
16->27 [style = bold, label=""];
15->13 [style = bold, label=""];
3->16 [style = bold, label=""];
30->19 [style = bold, label=""];
31->3 [style = bold, label=""];
4->0 [style = bold, label=""];
18->4 [style = bold, label=""];
29->26 [style = bold, label=""];
}
