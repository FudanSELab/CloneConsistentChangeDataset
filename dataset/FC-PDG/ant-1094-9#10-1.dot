digraph {
11 [style = filled, label = "f = new File(buildRule.getOutputDir(),LARGEIMAGE)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "buildRule.executeTarget(\"testOverwriteFalse\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "buildRule.executeTarget(\"testSimpleScale\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"File was overwritten.\",lastModified,overwrittenLastModified)@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testOverwriteFalse['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(buildRule.getLog(),containsString(\"Processing File\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "long overwrittenLastModified = f.lastModified()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assumeNotNull(\"JPEG codec is unavailable in classpath\",buildRule.getProject().getProperty(\"jpeg.codec.available\"))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "testSimpleScale['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "File f = new File(buildRule.getOutputDir(),LARGEIMAGE)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testSimpleScale['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "long lastModified = f.lastModified()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(\"Did not create \" + f.getAbsolutePath(),f.exists())@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(buildRule.getLog(),containsString(\"Processing File\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
11->8 [style = bold, label=""];
8->10 [style = bold, label=""];
8->10 [style = solid, label="overwrittenLastModified"];
1->2 [style = bold, label=""];
0->9 [style = bold, label=""];
12->11 [style = bold, label=""];
9->8 [style = solid, label="lastModified"];
9->7 [style = bold, label=""];
0->4 [style = bold, label=""];
7->12 [style = bold, label=""];
3->0 [style = bold, label=""];
2->3 [style = bold, label=""];
9->10 [style = solid, label="lastModified"];
2->5 [style = bold, label=""];
13->2 [style = bold, label=""];
6->2 [style = bold, label=""];
}
