digraph {
15 [style = filled, label = "InputFile inputFile@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Schema readSchema@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "parquetReadBuilder.reuseContainers()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "throw new UnsupportedOperationException(\"Parquet support not yet supported for Pig and Hive\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "return applyResidualFiltering(avroReadBuilder.build(),task.residual(),readSchema)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "return parquetReadBuilder.build()@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "InputFile inputFile@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Parquet.ReadBuilder parquetReadBuilder = Parquet.read(inputFile).project(readSchema).filter(task.residual()).caseSensitive(caseSensitive).split(task.start(),task.length())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "parquetReadBuilder.createReaderFunc(null)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "avroReadBuilder.createReaderFunc(null)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Schema readSchema@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "return avroReadBuilder.build()@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "reuseContainers@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "newAvroIterable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "InputFile inputFile@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "FileScanTask task@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "FileScanTask task@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Avro.ReadBuilder avroReadBuilder = Avro.read(inputFile).project(readSchema).split(task.start(),task.length())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "throw new UnsupportedOperationException(\"Avro support not yet supported for Pig and Hive\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "newParquetIterable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "FileScanTask task@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "newAvroIterable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "inMemoryDataModel@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "avroReadBuilder.reuseContainers()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->6 [style = dotted, label="true"];
4->9 [style = bold, label=""];
18->3 [style = bold, label=""];
1->4 [style = bold, label=""];
11->12 [style = solid, label="readSchema"];
5->12 [style = dashed, label="0"];
3->1 [style = bold, label=""];
21->15 [style = dotted, label="true"];
0->10 [style = dotted, label="true"];
4->6 [style = bold, label=""];
10->19 [style = dashed, label="0"];
2->3 [style = bold, label=""];
4->23 [style = dotted, label="true"];
0->2 [style = bold, label=""];
3->4 [style = bold, label=""];
22->23 [style = bold, label=""];
9->23 [style = dashed, label="0"];
21->18 [style = bold, label=""];
14->10 [style = dotted, label="true"];
14->13 [style = dotted, label="true"];
6->22 [style = dashed, label="0"];
20->4 [style = bold, label=""];
1->20 [style = dashed, label="0"];
0->8 [style = dotted, label="true"];
3->20 [style = bold, label=""];
5->17 [style = dashed, label="0"];
4->22 [style = dotted, label="true"];
21->19 [style = dotted, label="true"];
2->18 [style = dashed, label="0"];
9->5 [style = bold, label=""];
14->11 [style = dotted, label="true"];
23->17 [style = bold, label=""];
14->2 [style = bold, label=""];
9->12 [style = bold, label=""];
21->16 [style = dotted, label="true"];
6->9 [style = bold, label=""];
4->9 [style = dotted, label="true"];
3->1 [style = dotted, label="true"];
4->22 [style = bold, label=""];
4->23 [style = bold, label=""];
0->7 [style = dotted, label="true"];
3->20 [style = dotted, label="true"];
}
