digraph {
18 [style = filled, label = "final ColumnAnalysis analysis1 = ColumnAnalysis.error(\"foo\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final ColumnAnalysis analysis1 = new ColumnAnalysis(\"hyperUnique\",false,false,1L,1,null,null,null)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "ColumnAnalysis fold2 = analysis2.fold(analysis1)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ColumnAnalysis fold1 = analysis1.fold(analysis2)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final ColumnAnalysis analysis2 = new ColumnAnalysis(\"COMPLEX\",false,false,2L,2,null,null,null)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testFoldDifferentErrors['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testFoldDifferentTypes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertSerDe(analysis1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(expected,fold1)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final ColumnAnalysis expected = new ColumnAnalysis(\"STRING\",false,-1L,null,null,null,\"error:cannot_merge_diff_types\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "final ColumnAnalysis expected = new ColumnAnalysis(\"STRING\",false,false,-1L,null,null,null,\"error:cannot_merge_diff_types\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "final ColumnAnalysis analysis2 = ColumnAnalysis.error(\"bar\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertSerDe(fold2)@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final ColumnAnalysis analysis2 = new ColumnAnalysis(\"COMPLEX\",false,2L,2,null,null,null)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertSerDe(fold1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertSerDe(analysis2)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testFoldDifferentTypes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "final ColumnAnalysis expected = new ColumnAnalysis(\"STRING\",false,-1L,null,null,null,\"error:multiple_errors\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final ColumnAnalysis analysis1 = new ColumnAnalysis(\"hyperUnique\",false,1L,1,null,null,null)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(expected,fold2)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->2 [style = solid, label="analysis2"];
8->2 [style = solid, label="analysis2"];
8->19 [style = dashed, label="0"];
9->3 [style = solid, label="analysis1"];
19->2 [style = solid, label="analysis2"];
14->11 [style = solid, label="expected"];
9->18 [style = dashed, label="0"];
9->1 [style = solid, label="analysis1"];
16->0 [style = solid, label="expected"];
16->7 [style = bold, label=""];
18->19 [style = bold, label=""];
0->11 [style = bold, label=""];
14->0 [style = solid, label="expected"];
2->10 [style = bold, label=""];
9->8 [style = bold, label=""];
10->7 [style = bold, label=""];
12->1 [style = solid, label="analysis1"];
7->3 [style = bold, label=""];
3->0 [style = bold, label=""];
13->1 [style = bold, label=""];
13->7 [style = solid, label="analysis2"];
14->7 [style = bold, label=""];
8->13 [style = dashed, label="0"];
12->3 [style = solid, label="analysis1"];
8->1 [style = bold, label=""];
12->13 [style = bold, label=""];
3->4 [style = solid, label="fold2"];
11->5 [style = bold, label=""];
19->1 [style = bold, label=""];
18->1 [style = solid, label="analysis1"];
18->3 [style = solid, label="analysis1"];
5->4 [style = bold, label=""];
2->14 [style = bold, label=""];
16->11 [style = solid, label="expected"];
3->11 [style = solid, label="fold2"];
8->7 [style = solid, label="analysis2"];
1->2 [style = bold, label=""];
15->12 [style = bold, label=""];
10->0 [style = solid, label="expected"];
9->12 [style = dashed, label="0"];
10->16 [style = dashed, label="0"];
6->9 [style = bold, label=""];
7->5 [style = solid, label="fold1"];
10->14 [style = dashed, label="0"];
17->18 [style = bold, label=""];
10->11 [style = solid, label="expected"];
7->0 [style = solid, label="fold1"];
19->7 [style = solid, label="analysis2"];
2->16 [style = bold, label=""];
}
