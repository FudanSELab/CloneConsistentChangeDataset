digraph {
4 [style = filled, label = "Assert.assertTrue(result instanceof Long)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(-1L,result)@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(2L,result)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "values.clear()@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "Object result@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "values.clear()@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "values.clear()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertTrue(result instanceof Long)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "values.clear()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "values.put(\"a\",-1.1)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "values.put(\"a\",1.1)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "values.put(\"a\",1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(-2L,result)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(1D,result)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(1L,result)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "values.put(\"a\",-1.1)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "floorOneField['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "StreamEvaluator evaluator = factory.constructEvaluator(\"floor(a)\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "result = evaluator.evaluate(new Tuple(values))@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "result = evaluator.evaluate(new Tuple(values))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "result = evaluator.evaluate(new Tuple(values))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "ceilingOneField['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(1L,result)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "StreamEvaluator evaluator = factory.constructEvaluator(\"ceil(a)\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "values.clear()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "floorOneField['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Assert.assertTrue(result instanceof Long)@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
8->10 [style = dashed, label="0"];
8->23 [style = bold, label=""];
15->1 [style = solid, label="result"];
5->26 [style = dashed, label="0"];
0->17 [style = bold, label=""];
0->23 [style = dashed, label="0"];
9->4 [style = bold, label=""];
15->26 [style = solid, label="result"];
18->17 [style = bold, label=""];
3->6 [style = bold, label=""];
9->20 [style = bold, label=""];
10->21 [style = bold, label=""];
19->2 [style = bold, label=""];
15->5 [style = solid, label="result"];
9->20 [style = solid, label="result"];
1->26 [style = bold, label=""];
25->16 [style = bold, label=""];
17->11 [style = bold, label=""];
21->18 [style = bold, label=""];
7->3 [style = bold, label=""];
4->7 [style = bold, label=""];
11->15 [style = bold, label=""];
9->4 [style = solid, label="result"];
20->22 [style = bold, label=""];
8->0 [style = bold, label=""];
22->3 [style = bold, label=""];
12->2 [style = bold, label=""];
10->8 [style = bold, label=""];
4->20 [style = dashed, label="0"];
1->11 [style = dashed, label="0"];
24->25 [style = bold, label=""];
6->10 [style = bold, label=""];
2->25 [style = dashed, label="0"];
16->14 [style = bold, label=""];
23->17 [style = bold, label=""];
17->11 [style = solid, label="result"];
13->9 [style = bold, label=""];
14->13 [style = bold, label=""];
10->0 [style = solid, label="result"];
10->23 [style = solid, label="result"];
6->10 [style = solid, label="result"];
10->8 [style = solid, label="result"];
9->7 [style = solid, label="result"];
15->1 [style = bold, label=""];
2->16 [style = bold, label=""];
}
