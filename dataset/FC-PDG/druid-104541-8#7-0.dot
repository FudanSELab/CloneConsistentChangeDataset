digraph {
20 [style = filled, label = "Assert.assertEquals(new NumberedShardSpec(0,1),segments.get(i).getShardSpec())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID,0,2,(short)1,(short)1),segments.get(i).getShardSpec())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1),segments.get(i).getInterval())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(new NumberedShardSpec(0,1),segments.get(i).getShardSpec())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final CompactionTask compactionTask1 = builder.interval(Intervals.of(\"2014-01-01/2014-01-02\")).build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final Pair<TaskStatus,List<DataSegment>> resultPair = runTask(indexTask)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertTrue(resultPair.lhs.isSuccess())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "IndexTask indexTask = new IndexTask(null,null,new IndexTask.IndexIngestionSpec(new DataSchema(\"test\",getObjectMapper().convertValue(new StringInputRowParser(DEFAULT_PARSE_SPEC,null),),new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9ff858,new UniformGranularitySpec(Granularities.HOUR,Granularities.MINUTE,null),null,getObjectMapper()),new IndexTask.IndexIOConfig(new IngestSegmentFirehoseFactory(DATA_SOURCE,Intervals.of(\"2014-01-01/2014-01-02\"),null,null,null,null,null,getIndexIO(),coordinatorClient,segmentLoaderFactory,RETRY_POLICY_FACTORY),false),IndexTaskTest.createTuningConfig(5000000,null,null,Long.MAX_VALUE,null,false,true)),null)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int i = 0@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "int i = 0@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(DEFAULT_COMPACTION_STATE,segments.get(i).getLastCompactionState())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testRunRegularIndexTaskWithIngestSegmentFirehose['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "i < 3@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "segments = resultPair.rhs@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "lockGranularity == LockGranularity.SEGMENT@@@15@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(DEFAULT_COMPACTION_STATE,segments.get(i).getLastCompactionState())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(new NumberedOverwriteShardSpec(32768,0,2,(short)1,(short)1),segments.get(i).getShardSpec())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(new NumberedShardSpec(0,1),segments.get(i).getShardSpec())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Pair<TaskStatus,List<DataSegment>> resultPair = runTask(compactionTask1)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(3,segments.size())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "i++@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 1,0,2,(short)2,(short)1),segments.get(i).getShardSpec())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testRunRegularIndexTaskWithIngestSegmentFirehose['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "final CompactionTask compactionTask2 = builder.interval(Intervals.of(\"2014-01-01/2014-01-02\")).build()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "i < 3@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "resultPair = runTask(compactionTask2)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "runIndexTask()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "i++@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "lockGranularity == LockGranularity.SEGMENT@@@32@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1),segments.get(i).getInterval())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final Builder builder = new Builder(DATA_SOURCE,getObjectMapper(),AuthTestUtils.TEST_AUTHORIZER_MAPPER,new NoopChatHandlerProvider(),rowIngestionMetersFactory,indexingServiceClient,coordinatorClient,segmentLoaderFactory,RETRY_POLICY_FACTORY,appenderatorsManager)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testRunCompactionTwice['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertTrue(resultPair.lhs.isSuccess())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "List<DataSegment> segments = resultPair.rhs@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final List<DataSegment> segments = resultPair.rhs@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(3,segments.size())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18->3 [style = bold, label=""];
23->22 [style = bold, label=""];
34->16 [style = solid, label="compactionTask1"];
3->10 [style = bold, label=""];
9->12 [style = solid, label="i"];
14->7 [style = bold, label=""];
10->4 [style = solid, label="indexTask"];
5->11 [style = dotted, label="true"];
28->35 [style = bold, label=""];
9->11 [style = bold, label=""];
5->11 [style = solid, label="i"];
31->1 [style = bold, label=""];
16->25 [style = bold, label=""];
13->0 [style = bold, label=""];
1->12 [style = solid, label="i"];
1->9 [style = solid, label="i"];
12->11 [style = dotted, label="true"];
5->9 [style = dotted, label="true"];
19->24 [style = dotted, label="true"];
28->35 [style = dotted, label="false"];
28->32 [style = bold, label=""];
3->21 [style = bold, label=""];
22->27 [style = bold, label=""];
0->9 [style = bold, label=""];
5->12 [style = solid, label="i"];
25->14 [style = bold, label=""];
9->11 [style = solid, label="i"];
33->19 [style = solid, label="i"];
33->26 [style = solid, label="i"];
26->19 [style = solid, label="i"];
6->13 [style = bold, label=""];
12->13 [style = dotted, label="true"];
5->12 [style = dotted, label="true"];
19->24 [style = bold, label=""];
11->6 [style = bold, label=""];
5->9 [style = bold, label=""];
6->20 [style = bold, label=""];
24->30 [style = bold, label=""];
33->24 [style = solid, label="i"];
0->13 [style = dashed, label="0"];
8->3 [style = bold, label=""];
26->24 [style = solid, label="i"];
29->23 [style = bold, label=""];
12->5 [style = solid, label="i"];
26->19 [style = bold, label=""];
14->31 [style = bold, label=""];
32->26 [style = bold, label=""];
5->6 [style = dotted, label="true"];
6->13 [style = dotted, label="true"];
2->9 [style = bold, label=""];
12->5 [style = bold, label=""];
13->12 [style = bold, label=""];
6->20 [style = dotted, label="false"];
12->9 [style = dotted, label="true"];
27->17 [style = bold, label=""];
10->4 [style = bold, label=""];
34->16 [style = bold, label=""];
5->9 [style = solid, label="i"];
13->0 [style = dotted, label="true"];
13->2 [style = dotted, label="false"];
15->3 [style = bold, label=""];
4->14 [style = bold, label=""];
21->34 [style = bold, label=""];
5->29 [style = bold, label=""];
33->19 [style = bold, label=""];
30->28 [style = bold, label=""];
5->12 [style = bold, label=""];
12->11 [style = bold, label=""];
29->23 [style = solid, label="compactionTask2"];
7->1 [style = bold, label=""];
7->14 [style = dashed, label="0"];
28->32 [style = dotted, label="true"];
12->6 [style = dotted, label="true"];
19->30 [style = dotted, label="true"];
13->2 [style = bold, label=""];
35->26 [style = bold, label=""];
1->5 [style = solid, label="i"];
20->12 [style = bold, label=""];
19->26 [style = dotted, label="true"];
19->28 [style = dotted, label="true"];
17->33 [style = bold, label=""];
9->12 [style = bold, label=""];
12->9 [style = solid, label="i"];
1->5 [style = bold, label=""];
}
