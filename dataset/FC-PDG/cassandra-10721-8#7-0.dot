digraph {
17 [style = filled, label = "Optional<Replica> naturalEndpoint = ViewUtils.getViewNaturalEndpoint(\"Keyspace1\",new StringToken(\"AB\"),new StringToken(\"BB\"))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "replicationMap.put(\"DC1\",\"1\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Optional<InetAddressAndPort> naturalEndpoint = ViewUtils.getViewNaturalEndpoint(\"Keyspace1\",new StringToken(\"AB\"),new StringToken(\"BB\"))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(InetAddressAndPort.getByName(\"127.0.0.2\"),naturalEndpoint.get())@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "metadata.updateNormalToken(new StringToken(\"D\"),InetAddressAndPort.getByName(\"127.0.0.5\"))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Optional<InetAddressAndPort> naturalEndpoint = ViewUtils.getViewNaturalEndpoint(\"Keyspace1\",new StringToken(\"CA\"),new StringToken(\"BB\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Schema.instance.load(meta)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "metadata.updateNormalToken(new StringToken(\"B\"),InetAddressAndPort.getByName(\"127.0.0.4\"))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "KeyspaceMetadata meta = KeyspaceMetadata.create(\"Keyspace1\",KeyspaceParams.create(false,replicationMap))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertFalse(naturalEndpoint.isPresent())@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "replicationMap.put(ReplicationParams.CLASS,.getName())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testBaseTokenDoesNotBelongToLocalReplicaShouldReturnEmpty['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "metadata.updateNormalToken(new StringToken(\"A\"),InetAddressAndPort.getByName(\"127.0.0.1\"))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "metadata.clearUnsafe()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Map<String,String> replicationMap = new HashMap<>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Keyspace.clear(\"Keyspace1\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testGetIndexNaturalEndpoint['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertTrue(naturalEndpoint.isPresent())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "TokenMetadata metadata = StorageService.instance.getTokenMetadata()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testBaseTokenDoesNotBelongToLocalReplicaShouldReturnEmpty['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "metadata.updateNormalToken(new StringToken(\"C\"),InetAddressAndPort.getByName(\"127.0.0.2\"))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "replicationMap.put(\"DC2\",\"1\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->9 [style = bold, label=""];
1->4 [style = bold, label=""];
15->3 [style = solid, label="meta"];
7->21 [style = dashed, label="0"];
2->20 [style = dashed, label="0"];
12->5 [style = bold, label=""];
21->19 [style = bold, label=""];
16->8 [style = bold, label=""];
0->6 [style = bold, label=""];
13->15 [style = solid, label="replicationMap"];
5->15 [style = bold, label=""];
9->10 [style = bold, label=""];
15->3 [style = bold, label=""];
2->17 [style = dashed, label="0"];
20->21 [style = bold, label=""];
17->7 [style = bold, label=""];
8->1 [style = bold, label=""];
3->20 [style = bold, label=""];
3->2 [style = bold, label=""];
11->13 [style = bold, label=""];
3->17 [style = bold, label=""];
14->8 [style = bold, label=""];
18->8 [style = bold, label=""];
2->7 [style = bold, label=""];
13->0 [style = bold, label=""];
10->11 [style = bold, label=""];
6->12 [style = bold, label=""];
}
