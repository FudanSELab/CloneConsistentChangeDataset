digraph {
11 [style = filled, label = "assertThat(result.stderr(),containsString(\"Node 'ExistingSlave' already exists\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "j.createSlave(\"ExistingSlave\",null,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "createNodeShouldFailIfNodeAlreadyExist['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertThat(result.stderr(),containsString(\"Node 'SlaveFromXML' already exists\"))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(result,failedWith(-1))@@@7@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "createNodeShouldFailIfNodeAlreadyExist['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Computer.CREATE,Jenkins.READ).withStdin(.getResourceAsStream(\"node.xml\")).invoke()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Computer.CREATE,Jenkins.READ).withStdin(.getResourceAsStream(\"node.xml\")).invokeWithArgs(\"ExistingSlave\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(\"Command is expected to fail\",result.returnCode(),equalTo(-1))@@@7@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "createNodeShouldFailIfNodeAlreadyExistWhenNameSpecifiedExplicitly['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(\"No output expected\",result.stdout(),isEmptyString())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "j.createSlave(\"SlaveFromXML\",null,null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
6->1 [style = bold, label=""];
1->12 [style = dashed, label="0"];
11->4 [style = bold, label=""];
12->10 [style = bold, label=""];
9->12 [style = bold, label=""];
0->11 [style = dashed, label="0"];
4->2 [style = bold, label=""];
5->7 [style = solid, label="result"];
3->1 [style = bold, label=""];
5->0 [style = bold, label=""];
5->10 [style = dashed, label="0"];
0->4 [style = bold, label=""];
5->8 [style = solid, label="result"];
8->7 [style = bold, label=""];
0->8 [style = bold, label=""];
10->11 [style = bold, label=""];
}
