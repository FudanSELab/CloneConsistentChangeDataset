digraph {
3 [style = filled, label = "Druids.ScanQueryBuilder baseScanBuilder = newScanQueryBuilder().dataSource(join(new QueryDataSource(newScanQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).filters(new SelectorDimFilter(\"dim1\",\"10.1\",null)).virtualColumns(expressionVirtualColumn(\"v0\",\"'10.1'\",ValueType.STRING)).columns(ImmutableList.of(\"__time\",\"v0\")).resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST).context(queryContext).build()),new QueryDataSource(newScanQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).filters(new SelectorDimFilter(\"dim1\",\"10.1\",null)).columns(ImmutableList.of(\"dim1\")).resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST).context(queryContext).build()),\"j0.\",equalsCondition(DruidExpression.fromColumn(\"v0\"),DruidExpression.fromColumn(\"j0.dim1\")),JoinType.INNER)).intervals(querySegmentSpec(Filtration.eternity())).virtualColumns(expressionVirtualColumn(\"_v0\",\"'10.1'\",ValueType.STRING)).columns(\"__time\",\"_v0\").context(queryContext)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Map<String,Object> queryContext@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testQuery(\"with abc as\" + \"(\" + \" SELECT dim1, \"__time\", m1 from foo WHERE \"dim1\" = '10.1'\" + \")\" + \"SELECT t1.dim1, t1.\"__time\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1 WHERE t1.dim1 = '10.1'\",queryContext,ImmutableList.of(NullHandling.sqlCompatible()? baseScanBuilder.build(): baseScanBuilder.filters(new NotDimFilter(new SelectorDimFilter(\"v0\",null,null))).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@aa95c5))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Map<String,Object> queryContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testInnerJoinOnTwoInlineDataSources['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testInnerJoinOnTwoInlineDataSourcesWithOuterWhere['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "testQuery(\"with abc as\" + \"(\" + \" SELECT dim1, \"__time\", m1 from foo WHERE \"dim1\" = '10.1'\" + \")\" + \"SELECT t1.dim1, t1.\"__time\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1\",queryContext,ImmutableList.of(newScanQueryBuilder().dataSource(join(new QueryDataSource(newScanQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).filters(new SelectorDimFilter(\"dim1\",\"10.1\",null)).virtualColumns(expressionVirtualColumn(\"v0\",\"'10.1'\",ValueType.STRING)).columns(ImmutableList.of(\"__time\",\"v0\")).resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST).context(queryContext).build()),new QueryDataSource(newScanQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).filters(new SelectorDimFilter(\"dim1\",\"10.1\",null)).columns(ImmutableList.of(\"dim1\")).resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST).context(queryContext).build()),\"j0.\",equalsCondition(DruidExpression.fromColumn(\"v0\"),DruidExpression.fromColumn(\"j0.dim1\")),JoinType.INNER)).intervals(querySegmentSpec(Filtration.eternity())).virtualColumns(expressionVirtualColumn(\"_v0\",\"'10.1'\",ValueType.STRING)).columns(\"__time\",\"_v0\").context(queryContext).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@aa966a))@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testInnerJoinOnTwoInlineDataSourcesWithOuterWhere['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testQuery(\"with abc as\" + \"(\" + \" SELECT dim1, \"__time\", m1 from foo WHERE \"dim1\" = '10.1'\" + \")\" + \"SELECT t1.dim1, t1.\"__time\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1 WHERE t1.dim1 = '10.1'\",queryContext,ImmutableList.of(newScanQueryBuilder().dataSource(join(new QueryDataSource(newScanQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).filters(new SelectorDimFilter(\"dim1\",\"10.1\",null)).virtualColumns(expressionVirtualColumn(\"v0\",\"'10.1'\",ValueType.STRING)).columns(ImmutableList.of(\"__time\",\"v0\")).resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST).context(queryContext).build()),new QueryDataSource(newScanQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).filters(new SelectorDimFilter(\"dim1\",\"10.1\",null)).columns(ImmutableList.of(\"dim1\")).resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST).context(queryContext).build()),\"j0.\",equalsCondition(DruidExpression.fromColumn(\"v0\"),DruidExpression.fromColumn(\"j0.dim1\")),JoinType.INNER)).intervals(querySegmentSpec(Filtration.eternity())).virtualColumns(expressionVirtualColumn(\"_v0\",\"'10.1'\",ValueType.STRING)).columns(\"__time\",\"_v0\").filters(new NotDimFilter(new SelectorDimFilter(\"v0\",null,null))).context(queryContext).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@aa950b))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4->3 [style = bold, label=""];
3->5 [style = bold, label=""];
2->3 [style = solid, label="queryContext"];
0->2 [style = dotted, label="true"];
1->3 [style = dashed, label="0"];
2->1 [style = solid, label="queryContext"];
7->8 [style = dotted, label="true"];
8->6 [style = solid, label="queryContext"];
2->8 [style = dashed, label="0"];
1->6 [style = dashed, label="0"];
0->1 [style = bold, label=""];
2->5 [style = solid, label="queryContext"];
7->6 [style = bold, label=""];
4->2 [style = dotted, label="true"];
}
