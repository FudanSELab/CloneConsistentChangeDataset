digraph {
17 [style = filled, label = "importer.importNewSSTables(options)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "options = SSTableImporter.Options.options(backupdir.toString()).clearRepaired(true).build()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "i < 10@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "backupdir = moveToBackupDir(sstables)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "createTable(\"create table %s (id int primary key, d int)\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "options = SSTableImporter.Options.options(backupdir.toString()).resetLevel(true).build()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "i++@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "SSTableImporter.Options options = SSTableImporter.Options.options(backupdir.toString()).build()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "File backupdir = moveToBackupDir(sstables)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(8,sstable.getSSTableLevel())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "getCurrentColumnFamilyStore().forceBlockingFlush()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "importClearRepairedTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "SSTableImporter importer = new SSTableImporter(getCurrentColumnFamilyStore())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(1,sstables.size())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(0,sstable.getSSTableLevel())@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "sstable.descriptor.getMetadataSerializer().mutateRepairMetadata(sstable.descriptor,111,null,false)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "importClearRepairedTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "execute(\"insert into %s (id, d) values (?, ?)\",i,i)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertEquals(10,execute(\"select * from %s\").size())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "getCurrentColumnFamilyStore().clearUnsafe()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "importer.importNewSSTables(options)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "execute(\"insert into %s (id, d) values (?, ?)\",i,i)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertFalse(sstable.isRepaired())@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Set<SSTableReader> sstables = getCurrentColumnFamilyStore().getLiveSSTables()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "sstables = getCurrentColumnFamilyStore().getLiveSSTables()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "sstable.descriptor.getMetadataSerializer().mutateRepaired(sstable.descriptor,111,null)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "sstables = getCurrentColumnFamilyStore().getLiveSSTables()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(1,sstables.size())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "execute(\"insert into %s (id, d) values (?, ?)\",i,i)@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "int i = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "sstable.descriptor.getMetadataSerializer().mutateLevel(sstable.descriptor,8)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "getCurrentColumnFamilyStore().clearUnsafe()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "importResetLevelTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(0,execute(\"select * from %s\").size())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertTrue(sstable.isRepaired())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->10 [style = bold, label=""];
8->33 [style = bold, label=""];
27->18 [style = bold, label=""];
18->7 [style = solid, label="i"];
7->11 [style = bold, label=""];
28->5 [style = bold, label=""];
10->15 [style = bold, label=""];
23->34 [style = dashed, label="0"];
25->22 [style = bold, label=""];
14->7 [style = solid, label="i"];
0->6 [style = bold, label=""];
24->33 [style = dashed, label="0"];
20->26 [style = bold, label=""];
31->5 [style = bold, label=""];
22->9 [style = bold, label=""];
21->34 [style = bold, label=""];
14->11 [style = solid, label="i"];
4->21 [style = bold, label=""];
12->20 [style = bold, label=""];
3->10 [style = solid, label="sstables"];
15->32 [style = dashed, label="0"];
14->18 [style = solid, label="i"];
10->32 [style = bold, label=""];
18->27 [style = solid, label="i"];
18->29 [style = solid, label="i"];
5->14 [style = bold, label=""];
2->30 [style = dashed, label="0"];
33->13 [style = bold, label=""];
11->18 [style = bold, label=""];
29->18 [style = bold, label=""];
14->7 [style = bold, label=""];
20->2 [style = bold, label=""];
7->29 [style = dotted, label="true"];
19->5 [style = bold, label=""];
6->1 [style = bold, label=""];
15->17 [style = bold, label=""];
26->0 [style = bold, label=""];
2->0 [style = bold, label=""];
15->17 [style = solid, label="options"];
14->27 [style = solid, label="i"];
7->11 [style = dotted, label="true"];
32->17 [style = solid, label="options"];
14->29 [style = solid, label="i"];
3->8 [style = bold, label=""];
7->16 [style = bold, label=""];
7->29 [style = bold, label=""];
18->11 [style = solid, label="i"];
7->27 [style = bold, label=""];
1->22 [style = solid, label="options"];
7->18 [style = dotted, label="true"];
9->3 [style = bold, label=""];
7->27 [style = dotted, label="true"];
30->0 [style = bold, label=""];
2->26 [style = dashed, label="0"];
18->7 [style = bold, label=""];
20->30 [style = bold, label=""];
16->12 [style = bold, label=""];
1->25 [style = bold, label=""];
32->17 [style = bold, label=""];
17->4 [style = bold, label=""];
12->0 [style = solid, label="sstables"];
24->13 [style = bold, label=""];
21->23 [style = bold, label=""];
8->24 [style = bold, label=""];
}
