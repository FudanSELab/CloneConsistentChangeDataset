digraph {
0 [style = filled, label = "buildRule.executeTarget(\"emptydircopyandremove\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testEmptyDirCopyAndRemove['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testEmptyDirCopyAndRemove['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertFalse(buildRule.getFullLog().contains(\"Removing orphan file:\"))@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(buildRule.getFullLog(),containsString(\"Removed 2 dangling directories from\"))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertFileIsPresent(c)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "buildRule.executeTarget(\"copynoremove-selectors\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(buildRule.getFullLog(),containsString((\"Removing orphan directory:\")))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertContains(\"Removed 2 dangling directories from\",buildRule.getFullLog())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "assertContains(\"NO dangling file to remove from\",buildRule.getFullLog())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertFileIsNotPresent(f)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(buildRule.getFullLog().contains(\"Removing orphan directory:\"))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertThat(buildRule.getFullLog(),containsString(\"NO dangling file to remove from\"))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertFileIsPresent(f)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testCopyNoRemoveSelectors['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "String f = buildRule.getProject().getProperty(\"dest\") + \"/e/f\"@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "String c = buildRule.getProject().getProperty(\"dest\") + \"/a/b/c\"@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertFileIsPresent(d)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "String d = buildRule.getProject().getProperty(\"dest\") + \"/a/b/c/d\"@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertFileIsNotPresent(d)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->15 [style = solid, label="f"];
10->8 [style = dashed, label="0"];
0->19 [style = dashed, label="0"];
18->17 [style = bold, label=""];
1->18 [style = bold, label=""];
9->10 [style = bold, label=""];
16->19 [style = bold, label=""];
7->8 [style = bold, label=""];
5->7 [style = solid, label="c"];
2->4 [style = bold, label=""];
13->11 [style = bold, label=""];
12->0 [style = bold, label=""];
3->0 [style = bold, label=""];
6->18 [style = dashed, label="0"];
6->5 [style = bold, label=""];
19->1 [style = bold, label=""];
1->6 [style = bold, label=""];
2->13 [style = dashed, label="0"];
0->1 [style = bold, label=""];
1->18 [style = solid, label="d"];
17->15 [style = bold, label=""];
8->9 [style = bold, label=""];
9->14 [style = bold, label=""];
5->7 [style = bold, label=""];
10->2 [style = bold, label=""];
14->13 [style = bold, label=""];
4->11 [style = dashed, label="0"];
8->9 [style = solid, label="f"];
15->8 [style = bold, label=""];
10->14 [style = dashed, label="0"];
9->15 [style = dashed, label="0"];
1->6 [style = solid, label="d"];
}
