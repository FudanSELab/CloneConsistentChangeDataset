digraph {
6 [style = filled, label = "scheduler.advanceTimeTo(101,TimeUnit.MILLISECONDS)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Flowable<Flowable<String>> windowed = source.window(100,TimeUnit.MILLISECONDS,scheduler)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(1,lists.size())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(lists.get(0),list(\"one\",\"two\",\"three\"))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(2,lists.size())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "timed['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(lists.get(1),list(\"four\",\"five\"))@@@24@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "timed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final List<String> list = new ArrayList<String>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>(){@Override public void subscribe(Subscriber<? super String> subscriber){subscriber.onSubscribe(new BooleanSubscription())push(subscriber,\"one\",98)push(subscriber,\"two\",99)push(subscriber,\"three\",99)push(subscriber,\"four\",101)push(subscriber,\"five\",102)complete(subscriber,150)}})@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "windowed.subscribe(observeWindow(list,lists))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "scheduler.advanceTimeTo(201,TimeUnit.MILLISECONDS)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>(){@Override public void subscribe(Observer<? super String> observer){observer.onSubscribe(Disposable.empty())push(observer,\"one\",98)push(observer,\"two\",99)push(observer,\"three\",99)push(observer,\"four\",101)push(observer,\"five\",102)complete(observer,150)}})@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Observable<Observable<String>> windowed = source.window(100,TimeUnit.MILLISECONDS,scheduler)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "timed['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "final List<List<String>> lists = new ArrayList<List<String>>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->9 [style = bold, label=""];
14->3 [style = bold, label=""];
15->9 [style = bold, label=""];
11->13 [style = dashed, label="0"];
0->7 [style = bold, label=""];
10->11 [style = bold, label=""];
9->4 [style = solid, label="list"];
9->1 [style = solid, label="list"];
11->2 [style = bold, label=""];
5->4 [style = bold, label=""];
2->3 [style = bold, label=""];
3->6 [style = bold, label=""];
12->9 [style = bold, label=""];
10->13 [style = bold, label=""];
2->14 [style = dashed, label="0"];
9->3 [style = solid, label="list"];
6->5 [style = bold, label=""];
7->1 [style = bold, label=""];
13->14 [style = bold, label=""];
10->3 [style = solid, label="lists"];
4->0 [style = bold, label=""];
9->10 [style = bold, label=""];
}
