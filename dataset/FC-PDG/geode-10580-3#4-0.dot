digraph {
5 [style = filled, label = "when(supplier1.getAsInt()).thenReturn(23)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "verify(supplier1).getAsInt()@@@7@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "when(intSupplier.getAsInt()).thenReturn(23)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertEquals(1,stats.invokeSuppliers())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "statistics.setIntSupplier(4,intSupplier)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertEquals(23,stats.getInt(4))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertEquals(0,stats.invokeSuppliers())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertThat(statistics.invokeSuppliers()).isEqualTo(0)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "invokeSuppliersShouldCatchSupplierErrorsAndReturnCount['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "invokeIntSuppliersShouldUpdateStats['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "verify(intSupplier).getAsInt()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "invokeIntSuppliersShouldUpdateStats['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "IntSupplier intSupplier = mock()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "when(supplier1.getAsInt()).thenThrow()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(statistics.getInt(4)).isEqualTo(23)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "IntSupplier supplier1 = mock()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "stats.setIntSupplier(4,supplier1)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
5->14 [style = dashed, label="0"];
4->16 [style = dashed, label="0"];
4->6 [style = bold, label=""];
16->6 [style = bold, label=""];
6->9 [style = dashed, label="0"];
1->0 [style = bold, label=""];
9->10 [style = bold, label=""];
2->4 [style = bold, label=""];
13->11 [style = bold, label=""];
2->8 [style = dashed, label="0"];
8->7 [style = bold, label=""];
0->2 [style = solid, label="supplier1"];
7->9 [style = bold, label=""];
12->13 [style = bold, label=""];
5->2 [style = bold, label=""];
0->14 [style = bold, label=""];
5->11 [style = dashed, label="0"];
4->7 [style = dashed, label="0"];
15->0 [style = bold, label=""];
0->13 [style = dashed, label="0"];
11->8 [style = bold, label=""];
14->2 [style = bold, label=""];
3->10 [style = dashed, label="0"];
0->5 [style = bold, label=""];
13->8 [style = solid, label="intSupplier"];
2->16 [style = bold, label=""];
}
