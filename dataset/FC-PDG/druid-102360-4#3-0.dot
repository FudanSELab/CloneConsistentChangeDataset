digraph {
8 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(),publishedDescriptors())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testMultipleParseExceptionsFailure['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getProcessed())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(expectedMetrics,reportData.getRowStats())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertNull(metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "maxParseExceptions = 2@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L)),kafkaServer.consumerProperties(),true,null,null,false))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "expect(recordSupplier.getEarliestSequenceNumber(anyObject())).andReturn(\"0\").anyTimes()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "IndexTaskTest.checkTaskStatusErrorMsgForParseExceptionsExceeded(status)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null,false))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(TaskState.FAILED,status.getStatusCode())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "expectLastCall().anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "verifyAll()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "recordSupplier.seek(anyObject(),anyString())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "maxSavedParseExceptions = 2@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "TaskStatus status = future.get()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testMultipleParseExceptionsFailure['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getProcessedWithError())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Map<String,Object> expectedMetrics = ImmutableMap.of(RowIngestionMeters.BUILD_SEGMENTS,ImmutableMap.of(RowIngestionMeters.PROCESSED,3,RowIngestionMeters.PROCESSED_WITH_ERROR,0,RowIngestionMeters.UNPARSEABLE,3,RowIngestionMeters.THROWN_AWAY,0))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "IngestionStatsAndErrorsTaskReportData reportData = getTaskReportData()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(unparseableEvents,reportData.getUnparseableEvents())@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(null,\"sequence0\",new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"2\")),new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"9\")),true,null,null,\"awsEndpoint\",null,null,null,null,null,false))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "replayAll()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Map<String,Object> unparseableEvents = ImmutableMap.of(RowIngestionMeters.BUILD_SEGMENTS,Arrays.asList(\"Unable to parse row (unparseable2(\",\"Unable to parse row (unparseable(\"))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "TaskStatus status = future.get()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "recordSupplier.assign(anyObject())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "expect(recordSupplier.poll(anyLong())).andReturn(records.subList(2,13)).once()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "kafkaProducer.send(record).get()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "reportParseExceptions = false@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expectLastCall().anyTimes()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testMultipleParseExceptionsFailure['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5->29 [style = bold, label=""];
6->3 [style = bold, label=""];
11->20 [style = bold, label=""];
25->28 [style = bold, label=""];
1->8 [style = bold, label=""];
24->4 [style = solid, label="task"];
11->20 [style = solid, label="expectedMetrics"];
2->6 [style = bold, label=""];
27->30 [style = bold, label=""];
26->25 [style = bold, label=""];
0->2 [style = bold, label=""];
4->13 [style = bold, label=""];
12->11 [style = bold, label=""];
33->2 [style = bold, label=""];
11->20 [style = solid, label="unparseableEvents"];
3->26 [style = bold, label=""];
20->32 [style = bold, label=""];
14->17 [style = bold, label=""];
30->34 [style = bold, label=""];
15->18 [style = bold, label=""];
21->2 [style = bold, label=""];
9->12 [style = solid, label="expectedMetrics"];
5->19 [style = bold, label=""];
7->22 [style = bold, label=""];
23->24 [style = bold, label=""];
24->4 [style = bold, label=""];
16->14 [style = solid, label="task"];
29->19 [style = bold, label=""];
18->10 [style = bold, label=""];
3->7 [style = bold, label=""];
7->28 [style = dashed, label="0"];
7->16 [style = bold, label=""];
8->9 [style = bold, label=""];
13->5 [style = bold, label=""];
16->14 [style = bold, label=""];
34->23 [style = bold, label=""];
32->31 [style = solid, label="unparseableEvents"];
9->12 [style = bold, label=""];
28->27 [style = bold, label=""];
13->19 [style = solid, label="status"];
19->15 [style = bold, label=""];
22->14 [style = bold, label=""];
22->14 [style = solid, label="task"];
10->1 [style = bold, label=""];
17->13 [style = solid, label="status"];
32->31 [style = bold, label=""];
17->4 [style = bold, label=""];
16->22 [style = dashed, label="0"];
}
