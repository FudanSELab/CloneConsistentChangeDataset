digraph {
4 [style = filled, label = "assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "verify(someProperties,times(1)).getProperty(anotherKey)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "String someKey = \"someKey\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "someProperties.setProperty(someStringKey,someStringValue)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "defineComponent(,)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertEquals(someDefaultValue,defaultConfig.getIntProperty(someStringKey,someDefaultValue))@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Integer someValue = 2@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "String someStringKey = \"someStringKey\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Integer someValue = 2@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Integer someDefaultValue = -1@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testGetIntProperty['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Integer someDefaultValue = -1@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(anotherValue,defaultConfig.getIntProperty(anotherKey,someDefaultValue))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testGetIntPropertyMultipleTimesWithSmallCache['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "DefaultConfig defaultConfig = new DefaultConfig(someNamespace,configRepository)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "when(someProperties.getProperty(someKey)).thenReturn(String.valueOf(someValue))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "String someStringValue = \"someStringValue\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "verify(someProperties,times(2)).getProperty(someKey)@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "when(configRepository.getConfig()).thenReturn(someProperties)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "someProperties.setProperty(someKey,String.valueOf(someValue))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(anotherValue,defaultConfig.getIntProperty(anotherKey,someDefaultValue))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "someProperties = new Properties()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "when(someProperties.getProperty(anotherKey)).thenReturn(String.valueOf(anotherValue))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "MockInjector.setInstance(,new MockConfigUtilWithSmallCache())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "String someKey = \"someKey\"@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "DefaultConfig defaultConfig = new DefaultConfig(someNamespace,configRepository)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "when(configRepository.getConfig()).thenReturn(someProperties)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testGetIntPropertyMultipleTimesWithSmallCache['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27->22 [style = solid, label="someProperties"];
8->14 [style = solid, label="someKey"];
23->24 [style = solid, label="someStringKey"];
23->25 [style = bold, label=""];
16->4 [style = solid, label="someValue"];
8->4 [style = solid, label="someKey"];
6->21 [style = bold, label=""];
2->10 [style = solid, label="someProperties"];
16->6 [style = bold, label=""];
8->7 [style = solid, label="someKey"];
25->18 [style = bold, label=""];
10->3 [style = bold, label=""];
18->1 [style = solid, label="anotherKey"];
16->2 [style = bold, label=""];
9->8 [style = bold, label=""];
12->0 [style = bold, label=""];
11->12 [style = solid, label="someValue"];
4->7 [style = bold, label=""];
11->18 [style = bold, label=""];
2->12 [style = bold, label=""];
26->22 [style = bold, label=""];
21->2 [style = bold, label=""];
11->4 [style = solid, label="someValue"];
18->19 [style = solid, label="anotherKey"];
12->26 [style = dashed, label="0"];
18->15 [style = solid, label="anotherKey"];
6->14 [style = solid, label="someDefaultValue"];
24->26 [style = bold, label=""];
6->5 [style = bold, label=""];
5->2 [style = bold, label=""];
0->10 [style = bold, label=""];
20->8 [style = bold, label=""];
8->17 [style = solid, label="someKey"];
8->13 [style = solid, label="someKey"];
6->4 [style = solid, label="someDefaultValue"];
16->0 [style = solid, label="anotherValue"];
2->7 [style = solid, label="someDefaultValue"];
28->23 [style = bold, label=""];
4->7 [style = dashed, label="0"];
16->15 [style = solid, label="anotherValue"];
16->19 [style = solid, label="anotherValue"];
2->4 [style = solid, label="someDefaultValue"];
11->17 [style = solid, label="someValue"];
6->15 [style = solid, label="someDefaultValue"];
5->21 [style = dashed, label="0"];
2->27 [style = bold, label=""];
22->17 [style = bold, label=""];
3->17 [style = bold, label=""];
1->14 [style = bold, label=""];
27->24 [style = bold, label=""];
6->17 [style = solid, label="someDefaultValue"];
14->13 [style = bold, label=""];
18->26 [style = solid, label="someKey"];
19->15 [style = bold, label=""];
2->24 [style = dashed, label="0"];
16->26 [style = solid, label="someValue"];
8->11 [style = bold, label=""];
7->19 [style = bold, label=""];
11->14 [style = solid, label="someValue"];
17->4 [style = bold, label=""];
25->24 [style = solid, label="someStringValue"];
6->19 [style = solid, label="someDefaultValue"];
18->4 [style = solid, label="someKey"];
23->7 [style = solid, label="someStringKey"];
15->1 [style = bold, label=""];
18->16 [style = bold, label=""];
}
