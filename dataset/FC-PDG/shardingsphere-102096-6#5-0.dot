digraph {
1 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final DropDatabaseDiscoveryRuleStatement actual@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertNull(assertContext.getText(\"Actual should not exist.\"),actual)@@@4@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final DropDataBaseDiscoveryRuleStatementTestCase expected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual statement should exist.\"),actual)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual should exist.\"),actual)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "null == expected@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final ExpectedProperty expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(assertContext.getText(\"database discovery rule assertion error: \"),actual.getRuleNames(),is(expected.getRules()))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final Properties actual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertIs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertIs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertIs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final DropDatabaseDiscoveryRuleStatement actual@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertThat(assertContext.getText(\"properties assertion error: \"),actual.getProperty(expected.getKey()),is(expected.getValue()))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertNull(assertContext.getText(\"Actual statement should not exist.\"),actual)@@@4@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
8->10 [style = dotted, label="true"];
4->6 [style = bold, label=""];
5->13 [style = dashed, label="0"];
2->4 [style = bold, label=""];
4->3 [style = dotted, label="true"];
8->4 [style = bold, label=""];
4->12 [style = dotted, label="true"];
4->11 [style = bold, label=""];
17->3 [style = solid, label="actual"];
10->12 [style = solid, label="actual"];
14->16 [style = dotted, label="true"];
7->4 [style = solid, label="expected"];
10->11 [style = solid, label="actual"];
6->13 [style = bold, label=""];
15->4 [style = solid, label="expected"];
0->3 [style = solid, label="actual"];
4->11 [style = dotted, label="false"];
8->7 [style = dotted, label="true"];
4->6 [style = dotted, label="false"];
2->1 [style = dotted, label="true"];
17->6 [style = solid, label="actual"];
7->17 [style = dashed, label="0"];
4->5 [style = dotted, label="false"];
14->15 [style = dotted, label="true"];
4->13 [style = dotted, label="false"];
9->4 [style = solid, label="expected"];
6->5 [style = bold, label=""];
4->12 [style = bold, label=""];
0->6 [style = solid, label="actual"];
2->0 [style = dotted, label="true"];
14->4 [style = bold, label=""];
6->11 [style = dashed, label="0"];
3->12 [style = dashed, label="0"];
4->3 [style = bold, label=""];
2->7 [style = dotted, label="true"];
11->5 [style = bold, label=""];
14->17 [style = dotted, label="true"];
8->9 [style = dotted, label="true"];
}
