digraph {
4 [style = filled, label = "taskRunner.start()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "TestDruidNodeDiscovery druidNodeDiscovery = new TestDruidNodeDiscovery()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "List<Object> listenerNotificationsAccumulator@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "taskRunner.registerListener(new TaskRunnerListener(){@Override public String getListenerId(){return \"test-listener\"}@Override public void locationChanged(String taskId,TaskLocation newLocation){listenerNotificationsAccumulator.add(ImmutableList.of(taskId,newLocation))}@Override public void statusChanged(String taskId,TaskStatus status){listenerNotificationsAccumulator.add(ImmutableList.of(taskId,status))}},Execs.directExecutor())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "createTaskRunnerForTestTaskAddedOrUpdated['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(NodeType.MIDDLE_MANAGER)).andReturn(druidNodeDiscovery)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "registerLocationListener['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "List<Object> listenerNotificationsAccumulator@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "listenerNotificationsAccumulator != null@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "EasyMock.replay(druidNodeDiscoveryProvider)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "return taskRunner@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "TaskStorage taskStorage@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "EasyMock.expect(druidNodeDiscoveryProvider.getForService(WorkerNodeService.DISCOVERY_SERVICE_KEY)).andReturn(druidNodeDiscovery)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "taskRunner.registerListener(new TaskRunnerListener(){@Override public String getListenerId(){return \"WorkerTaskManager\"}@Override public void locationChanged(final String taskId,final TaskLocation newLocation){submitNoticeToExec(new LocationNotice(taskId,newLocation))}@Override public void statusChanged(final String taskId,final TaskStatus status){}},Execs.directExecutor())@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "createTaskRunnerForTestTaskAddedOrUpdated['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "HttpRemoteTaskRunner taskRunner = new HttpRemoteTaskRunner(TestHelper.makeJsonMapper(),new HttpRemoteTaskRunnerConfig(){@Override public int getPendingTasksRunnerNumThreads(){return 3}},EasyMock.createNiceMock(),DSuppliers.of(new AtomicReference<>(DefaultWorkerBehaviorConfig.defaultConfig())),new NoopProvisioningStrategy<>(),druidNodeDiscoveryProvider,taskStorage,EasyMock.createNiceMock(),new IndexerZkConfig(new ZkPathsConfig(),null,null,null,null))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->15 [style = bold, label=""];
0->5 [style = solid, label="taskRunner"];
8->2 [style = dotted, label="true"];
11->0 [style = solid, label="taskStorage"];
6->7 [style = solid, label="druidNodeDiscovery"];
6->12 [style = solid, label="druidNodeDiscovery"];
9->7 [style = bold, label=""];
9->0 [style = solid, label="druidNodeDiscoveryProvider"];
10->6 [style = bold, label=""];
7->3 [style = bold, label=""];
3->0 [style = bold, label=""];
14->8 [style = solid, label="listenerNotificationsAccumulator"];
8->5 [style = bold, label=""];
1->8 [style = solid, label="listenerNotificationsAccumulator"];
8->2 [style = bold, label=""];
10->11 [style = dotted, label="true"];
0->4 [style = bold, label=""];
9->3 [style = solid, label="druidNodeDiscoveryProvider"];
7->12 [style = dashed, label="0"];
4->8 [style = bold, label=""];
13->11 [style = dotted, label="true"];
12->3 [style = bold, label=""];
9->12 [style = bold, label=""];
10->1 [style = dotted, label="true"];
13->6 [style = bold, label=""];
6->9 [style = bold, label=""];
13->14 [style = dotted, label="true"];
2->5 [style = bold, label=""];
}
