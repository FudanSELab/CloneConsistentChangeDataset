digraph {
2 [style = filled, label = "assertThat(j.jenkins.getView(\"aView2\"),nullValue())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "j.jenkins.addView(new ListView(\"aView2\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(j.jenkins.getView(\"never_created\"),nullValue())@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(j.jenkins.getView(\"aView1\"),nullValue())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(result,failedWith(5))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(View.READ,View.DELETE,Jenkins.READ).invokeWithArgs(\"aView1\",\"never_created\",\"aView2\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "j.jenkins.addView(new ListView(\"aView1\"))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final CLICommandInvoker.Result result = command.invokeWithArgs(\"never_created\",\"aView1\",\"aView2\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "deleteViewManyShouldFailIfFirstViewDoesNotExist['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertThat(j.jenkins.getView(\"never_created\"),nullValue())@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "deleteViewManyShouldFailIfMiddleViewDoesNotExist['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(result.stderr(),containsString(\"never_created: No view named never_created inside view Jenkins\"))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "deleteViewManyShouldFailIfFirstViewDoesNotExist['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(View.READ,View.DELETE,Jenkins.READ).invokeWithArgs(\"never_created\",\"aView1\",\"aView2\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.READ,View.DELETE,Jenkins.READ).everywhere().toAuthenticated())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
4->10 [style = bold, label=""];
9->11 [style = bold, label=""];
12->7 [style = solid, label="result"];
2->1 [style = bold, label=""];
6->11 [style = dashed, label="0"];
16->10 [style = solid, label="result"];
7->0 [style = bold, label=""];
11->12 [style = bold, label=""];
15->3 [style = bold, label=""];
10->7 [style = bold, label=""];
12->10 [style = solid, label="result"];
9->16 [style = bold, label=""];
9->6 [style = bold, label=""];
3->9 [style = bold, label=""];
6->4 [style = bold, label=""];
12->10 [style = bold, label=""];
6->16 [style = dashed, label="0"];
16->4 [style = solid, label="result"];
13->3 [style = bold, label=""];
8->2 [style = bold, label=""];
0->8 [style = bold, label=""];
6->4 [style = solid, label="result"];
1->14 [style = bold, label=""];
16->4 [style = bold, label=""];
6->10 [style = solid, label="result"];
}
