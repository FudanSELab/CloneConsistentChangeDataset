digraph {
11 [style = filled, label = "MockSplitReader mockSplitReader = MockSplitReader.newBuilder().setNumRecordsPerSplitPerFetch(2).setSeparatedFinishedRecord(false).setBlockingFetch(false).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "reader.notifyNoMoreSplits()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "status == InputStatus.NOTHING_AVAILABLE@@@15@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "createReader['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "reader.start()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "reader.isAvailable().get()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "createReader['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "List<MockSourceSplit> splits = Arrays.asList(getSplit(0,10,Boundedness.BOUNDED),getSplit(1,12,Boundedness.BOUNDED))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "MockSplitReader mockSplitReader = new MockSplitReader(2,true)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "MockSplitReader mockSplitReader = MockSplitReader.newBuilder().setNumRecordsPerSplitPerFetch(2).setBlockingFetch(true).build()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "FutureCompletingBlockingQueue<RecordsWithSplitIds<int((>> elementsQueue = new FutureCompletingBlockingQueue<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "return new MockSourceReader(elementsQueue,null,getConfig(),null)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "return new MockSourceReader(elementsQueue,null,getConfig(),null)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "status == InputStatus.END_OF_INPUT@@@12@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "InputStatus status = reader.pollNext(new TestingReaderOutput<>())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "true@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "MockSourceReader reader = new MockSourceReader(elementsQueue,null,getConfig(),null)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testMultipleSplitsWithDifferentFinishingMoments['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "reader.addSplits(splits)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
17->15 [style = solid, label="status"];
15->10 [style = bold, label=""];
1->5 [style = dashed, label="0"];
16->8 [style = bold, label=""];
2->3 [style = bold, label=""];
8->17 [style = dotted, label="true"];
3->11 [style = bold, label=""];
8->15 [style = dotted, label="true"];
11->12 [style = bold, label=""];
0->4 [style = dashed, label="0"];
3->1 [style = solid, label="elementsQueue"];
0->11 [style = dashed, label="0"];
8->10 [style = dotted, label="true"];
3->4 [style = bold, label=""];
7->3 [style = bold, label=""];
3->0 [style = bold, label=""];
8->17 [style = bold, label=""];
3->5 [style = solid, label="elementsQueue"];
1->12 [style = dashed, label="0"];
9->18 [style = bold, label=""];
10->8 [style = bold, label=""];
10->16 [style = bold, label=""];
3->12 [style = solid, label="elementsQueue"];
0->1 [style = bold, label=""];
12->14 [style = bold, label=""];
17->15 [style = bold, label=""];
13->9 [style = solid, label="splits"];
17->10 [style = solid, label="status"];
18->8 [style = bold, label=""];
13->9 [style = bold, label=""];
14->13 [style = bold, label=""];
10->16 [style = dotted, label="true"];
4->5 [style = bold, label=""];
}
