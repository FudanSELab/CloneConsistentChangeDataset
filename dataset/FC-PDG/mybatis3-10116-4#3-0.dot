digraph {
19 [style = filled, label = "inputStream.close()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "XMLMapperBuilder builder = new XMLMapperBuilder(inputStream,configuration,resource,configuration.getSqlFragments())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(mappedStatement.getStatementType()).isEqualTo(StatementType.PREPARED)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "shouldSuccessfullyLoadXMLMapperFile['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "mappedStatementWithOptions['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertThat(mappedStatement.getStatementType(),is(StatementType.PREPARED))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertThat(mappedStatement.isFlushCacheRequired(),is(false))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "String resource = \"org/apache/ibatis/builder/AuthorMapper.xml\"@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(mappedStatement.getFetchSize(),is(200))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertThat(mappedStatement.getResultSetType(),is(ResultSetType.SCROLL_SENSITIVE))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Configuration configuration = new Configuration()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "InputStream inputStream = Resources.getResourceAsStream(resource)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(mappedStatement.getTimeout(),is(10))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertThat(mappedStatement.isUseCache(),is(false))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "assertThat(mappedStatement.isFlushCacheRequired()).isFalse()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "builder.parse()@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(mappedStatement.getFetchSize()).isEqualTo(200)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertThat(mappedStatement.isUseCache()).isFalse()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertThat(mappedStatement.getTimeout()).isEqualTo(10)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "mappedStatementWithOptions['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(mappedStatement.getResultSetType()).isEqualTo(ResultSetType.SCROLL_SENSITIVE)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "MappedStatement mappedStatement = configuration.getMappedStatement(\"selectWithOptions\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->13 [style = dashed, label="0"];
0->3 [style = bold, label=""];
4->10 [style = bold, label=""];
5->8 [style = bold, label=""];
8->16 [style = dashed, label="0"];
15->13 [style = bold, label=""];
4->1 [style = solid, label="resource"];
7->12 [style = bold, label=""];
6->18 [style = bold, label=""];
11->6 [style = bold, label=""];
18->15 [style = bold, label=""];
14->19 [style = bold, label=""];
20->14 [style = bold, label=""];
2->9 [style = bold, label=""];
0->20 [style = dashed, label="0"];
13->16 [style = bold, label=""];
1->11 [style = bold, label=""];
21->12 [style = bold, label=""];
6->2 [style = bold, label=""];
8->0 [style = bold, label=""];
17->12 [style = bold, label=""];
12->1 [style = solid, label="configuration"];
12->4 [style = bold, label=""];
2->18 [style = dashed, label="0"];
9->5 [style = bold, label=""];
3->14 [style = dashed, label="0"];
10->1 [style = solid, label="inputStream"];
10->1 [style = bold, label=""];
16->20 [style = bold, label=""];
4->10 [style = solid, label="resource"];
9->15 [style = dashed, label="0"];
}
