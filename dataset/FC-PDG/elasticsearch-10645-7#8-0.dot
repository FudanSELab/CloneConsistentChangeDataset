digraph {
0 [style = filled, label = "assertTrue(response.headers().contains(CorsHandler.DATE))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testCorsRequest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "request.headers().add(CorsHandler.ORIGIN,\"elastic.co\")@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final FullHttpResponse response = client.send(remoteAddress.address(),request)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(response.status(),equalTo(HttpResponseStatus.OK))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher(){@Override public void dispatchRequest(final RestRequest request,final RestChannel channel,final ThreadContext threadContext){throw new AssertionError()}@Override public void dispatchBadRequest(final RestChannel channel,final ThreadContext threadContext,final Throwable cause){throw new AssertionError()}}@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final FullHttpResponse response = client.post(remoteAddress.address(),request)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "{response.release()}@@@38@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testCorsRequest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "request.headers().add(CorsHandler.ORIGIN,\"elastic2.co\")@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.OPTIONS,\"/\")@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final Settings settings = Settings.builder().put(SETTING_CORS_ENABLED.getKey(),true).put(SETTING_CORS_ALLOW_ORIGIN.getKey(),\"elastic.co\").build()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN),equalTo(\"elastic.co\"))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testCorsRequest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,\"/\")@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(response.headers().get(CorsHandler.VARY),equalTo(CorsHandler.ORIGIN))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "{response.release()}@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "transport.start()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(response.status(),equalTo(HttpResponseStatus.FORBIDDEN))@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final FullHttpResponse response = client.send(remoteAddress.address(),request)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD,\"POST\")@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final FullHttpResponse response = client.post(remoteAddress.address(),request)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->21 [style = solid, label="request"];
14->17 [style = bold, label=""];
6->18 [style = bold, label=""];
10->21 [style = bold, label=""];
21->14 [style = bold, label=""];
3->20 [style = dashed, label="0"];
10->2 [style = bold, label=""];
1->10 [style = bold, label=""];
11->12 [style = bold, label=""];
4->16 [style = bold, label=""];
12->4 [style = bold, label=""];
18->5 [style = bold, label=""];
0->8 [style = bold, label=""];
3->13 [style = bold, label=""];
18->20 [style = solid, label="request"];
8->1 [style = bold, label=""];
1->2 [style = solid, label="request"];
20->13 [style = bold, label=""];
7->0 [style = bold, label=""];
18->3 [style = solid, label="request"];
16->6 [style = bold, label=""];
15->3 [style = bold, label=""];
15->20 [style = bold, label=""];
2->21 [style = dashed, label="0"];
2->14 [style = bold, label=""];
13->9 [style = bold, label=""];
22->12 [style = bold, label=""];
19->12 [style = bold, label=""];
5->15 [style = bold, label=""];
9->7 [style = bold, label=""];
}
