digraph {
11 [style = filled, label = "subscriptions.assignFromUser(singleton(tp))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "sender.run(time.milliseconds())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "i++@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(300,maxMetric.value(),EPSILON)@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "subscriptions.seek(tp,0)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(metrics.metricName(\"fetch-throttle-time-avg\",metricGroup,\"\"))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "List<ConsumerRecord<byte((,byte((>> records = fetchRecords(builder.build(),Errors.NONE,100L,100 * i).get(tp)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "builder.appendWithOffset((long)i * 3 + v,RecordBatch.NO_TIMESTAMP,\"key\".getBytes(),String.format(\"value-%d\",v).getBytes())@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "MemoryRecordsBuilder builder = MemoryRecords.builder(ByteBuffer.allocate(1024),CompressionType.NONE,TimestampType.CREATE_TIME,0L)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "i <= 3@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "i < 4@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "sender.run(time.milliseconds())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "accumulator.append(tp,0L,\"key\".getBytes(),\"value\".getBytes(),null,MAX_BLOCK_TIMEOUT)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(300,maxMetric.value(),EPS)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(metrics.metricName(\"produce-throttle-time-max\",METRIC_GROUP,\"\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "int i = 1@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(metrics.metricName(\"fetch-throttle-time-max\",metricGroup,\"\"))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "builder.appendWithOffset((long)i * 3 + v,Record.NO_TIMESTAMP,\"key\".getBytes(),String.format(\"value-%d\",v).getBytes())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "client.respond(produceResponse(tp,offset,Errors.NONE,100 * i))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "final long offset = 0@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testQuotaMetrics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "v++@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "v++@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertEquals(3,records.size())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "MemoryRecordsBuilder builder = MemoryRecords.builder(ByteBuffer.allocate(1024),CompressionType.NONE,TimestampType.CREATE_TIME)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(metrics.metricName(\"produce-throttle-time-avg\",METRIC_GROUP,\"\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(200,avgMetric.value(),EPSILON)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "v < 3@@@10@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(200,avgMetric.value(),EPS)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testQuotaMetrics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testQuotaMetrics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "int v = 0@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->10 [style = bold, label=""];
8->16 [style = bold, label=""];
8->17 [style = dotted, label="true"];
4->23 [style = dotted, label="true"];
25->22 [style = bold, label=""];
4->10 [style = dotted, label="true"];
8->18 [style = bold, label=""];
10->8 [style = solid, label="i"];
2->7 [style = solid, label="v"];
19->20 [style = bold, label=""];
17->9 [style = bold, label=""];
26->25 [style = bold, label=""];
7->13 [style = solid, label="v"];
30->23 [style = bold, label=""];
24->32 [style = bold, label=""];
31->23 [style = solid, label="i"];
1->3 [style = bold, label=""];
8->16 [style = dotted, label="true"];
4->26 [style = bold, label=""];
8->14 [style = bold, label=""];
8->2 [style = dotted, label="true"];
31->4 [style = bold, label=""];
31->27 [style = solid, label="i"];
13->20 [style = dashed, label="0"];
9->10 [style = bold, label=""];
3->12 [style = bold, label=""];
16->2 [style = bold, label=""];
18->2 [style = bold, label=""];
8->10 [style = dotted, label="true"];
5->17 [style = bold, label=""];
16->18 [style = dashed, label="0"];
10->13 [style = solid, label="i"];
4->13 [style = solid, label="i"];
4->8 [style = solid, label="i"];
20->5 [style = solid, label="v"];
4->30 [style = dotted, label="true"];
20->5 [style = bold, label=""];
4->28 [style = dotted, label="true"];
1->22 [style = dashed, label="0"];
23->28 [style = bold, label=""];
5->19 [style = bold, label=""];
6->1 [style = bold, label=""];
27->4 [style = bold, label=""];
27->23 [style = solid, label="i"];
7->5 [style = bold, label=""];
11->0 [style = bold, label=""];
5->13 [style = dotted, label="true"];
15->11 [style = bold, label=""];
10->8 [style = bold, label=""];
6->25 [style = dashed, label="0"];
21->11 [style = bold, label=""];
7->5 [style = solid, label="v"];
0->4 [style = bold, label=""];
8->5 [style = dotted, label="true"];
13->7 [style = bold, label=""];
4->19 [style = solid, label="i"];
5->7 [style = dotted, label="true"];
5->13 [style = bold, label=""];
5->19 [style = dotted, label="true"];
2->20 [style = solid, label="v"];
4->10 [style = solid, label="i"];
14->29 [style = bold, label=""];
4->27 [style = dotted, label="true"];
2->19 [style = solid, label="v"];
8->18 [style = dotted, label="true"];
12->29 [style = dashed, label="0"];
4->8 [style = bold, label=""];
5->20 [style = dotted, label="true"];
8->4 [style = dashed, label="0"];
28->27 [style = bold, label=""];
8->9 [style = dotted, label="true"];
27->4 [style = solid, label="i"];
31->4 [style = solid, label="i"];
22->14 [style = bold, label=""];
20->19 [style = solid, label="v"];
3->14 [style = dashed, label="0"];
2->5 [style = solid, label="v"];
10->30 [style = bold, label=""];
14->6 [style = bold, label=""];
32->31 [style = bold, label=""];
2->13 [style = solid, label="v"];
10->19 [style = solid, label="i"];
2->5 [style = bold, label=""];
32->23 [style = solid, label="offset"];
}
