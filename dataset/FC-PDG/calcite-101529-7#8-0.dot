digraph {
13 [style = filled, label = "testNestedAggregatesMySqlTable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testSum0BecomesCoalesce['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "final SqlDialect dialect = SqlDialect.DatabaseProduct.MYSQL.getDialect()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final String expectedMysql = \"SELECT COALESCE(SUM(`MGR`), 0) AS `s`\" + \"FROM `scott`.`EMP`\"@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "final RelNode root = builder.scan(\"EMP\").aggregate(builder.groupKey(),builder.aggregateCall(SqlStdOperatorTable.SUM0,builder.field(3)).as(\"s\")).build()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\" + \"FROM `scott`.`EMP`\"@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "relFn(fn).withPostgresql().ok(expectedPostgresql).withMysql().ok(expectedMysql)@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testSum0BecomesCoalesce['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(toSql(root,SqlDialect.DatabaseProduct.POSTGRESQL.getDialect()),isLinux(expectedPostgresql))@@@8@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final String expectedPostgresql = \"SELECT COALESCE(SUM(\"MGR\"), 0) AS \"s\"\" + \"FROM \"scott\".\"EMP\"\"@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(toSql(root,SqlDialect.DatabaseProduct.MYSQL.getDialect()),isLinux(expectedMysql))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertThat(toSql(root,dialect),isLinux(expectedSql))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final Function<RelBuilder,RelNode> fn = null@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "final RelBuilder builder = relBuilder()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final RelNode root = builder.scan(\"EMP\").aggregate(builder.groupKey(),builder.count(false,\"c\",builder.field(3))).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
11->14 [style = bold, label=""];
4->0 [style = solid, label="expectedMysql"];
3->2 [style = solid, label="root"];
9->7 [style = bold, label=""];
7->8 [style = bold, label=""];
3->4 [style = bold, label=""];
4->0 [style = bold, label=""];
1->2 [style = solid, label="expectedPostgresql"];
8->1 [style = solid, label="expectedMysql"];
6->5 [style = bold, label=""];
11->14 [style = solid, label="expectedSql"];
12->10 [style = bold, label=""];
12->14 [style = solid, label="root"];
3->12 [style = dashed, label="0"];
5->12 [style = bold, label=""];
0->1 [style = bold, label=""];
13->5 [style = bold, label=""];
1->2 [style = bold, label=""];
4->1 [style = bold, label=""];
8->4 [style = bold, label=""];
5->7 [style = dashed, label="0"];
10->14 [style = solid, label="dialect"];
3->0 [style = solid, label="root"];
10->11 [style = bold, label=""];
}
