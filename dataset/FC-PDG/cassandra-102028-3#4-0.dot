digraph {
3 [style = filled, label = "i < 1024@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(1024,region.top())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "i < buffer.capacity()@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(0,region.offset())@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertNotNull(region)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(1024,region.end())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertEquals(2048,region.end())@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertEquals(4096,region.top())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "MmappedRegions.Region region = regions.floor(i)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(1024,region.bottom())@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertEquals(0,region.offset())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "MmappedRegions.Region region = regions.floor(i)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertNotNull(region)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testTwoSegments['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "i < 2048@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int i = 0@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "i++@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testTwoSegments['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(0,region.bottom())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "regions.extend(2048)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(1024,region.end())@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "ByteBuffer buffer = allocateBuffer(4096)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "ByteBuffer buffer = allocateBuffer(2048)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testExtendOutOfOrder['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "regions.extend(1024)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(1024,region.offset())@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "i++@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "i < 1024@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int i = 0@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(2048,region.top())@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "regions.extend(4096)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(0,region.bottom())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(1024,region.top())@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1->5 [style = bold, label=""];
28->11 [style = dotted, label="true"];
26->10 [style = bold, label=""];
16->27 [style = dashed, label="0"];
30->20 [style = bold, label=""];
28->15 [style = dotted, label="true"];
31->1 [style = bold, label=""];
0->4 [style = solid, label="i"];
13->23 [style = dashed, label="0"];
3->4 [style = bold, label=""];
28->30 [style = dotted, label="true"];
3->5 [style = bold, label=""];
18->22 [style = bold, label=""];
6->28 [style = bold, label=""];
15->11 [style = bold, label=""];
14->9 [style = bold, label=""];
8->21 [style = dotted, label="false"];
2->26 [style = dashed, label="0"];
17->16 [style = bold, label=""];
0->3 [style = bold, label=""];
15->11 [style = solid, label="region"];
18->19 [style = bold, label=""];
3->26 [style = dotted, label="true"];
8->23 [style = dotted, label="true"];
4->18 [style = bold, label=""];
11->12 [style = bold, label=""];
1->0 [style = bold, label=""];
19->2 [style = bold, label=""];
6->7 [style = solid, label="i"];
8->27 [style = dotted, label="false"];
8->17 [style = bold, label=""];
8->12 [style = dotted, label="true"];
5->6 [style = bold, label=""];
3->18 [style = dotted, label="true"];
11->8 [style = bold, label=""];
6->15 [style = solid, label="i"];
4->18 [style = solid, label="region"];
20->7 [style = bold, label=""];
9->1 [style = bold, label=""];
6->7 [style = bold, label=""];
7->8 [style = dotted, label="true"];
16->20 [style = bold, label=""];
27->20 [style = bold, label=""];
8->16 [style = dotted, label="false"];
20->15 [style = solid, label="i"];
22->26 [style = bold, label=""];
8->25 [style = dotted, label="true"];
23->20 [style = bold, label=""];
20->8 [style = solid, label="i"];
8->17 [style = dotted, label="false"];
6->20 [style = solid, label="i"];
20->7 [style = solid, label="i"];
21->27 [style = bold, label=""];
6->28 [style = solid, label="i"];
28->20 [style = dotted, label="true"];
3->10 [style = dotted, label="true"];
2->10 [style = bold, label=""];
7->15 [style = dotted, label="true"];
0->10 [style = solid, label="i"];
12->13 [style = bold, label=""];
7->11 [style = dotted, label="true"];
7->28 [style = dashed, label="0"];
0->3 [style = solid, label="i"];
7->15 [style = bold, label=""];
8->13 [style = dotted, label="true"];
8->12 [style = bold, label=""];
24->9 [style = bold, label=""];
28->12 [style = dotted, label="true"];
20->28 [style = solid, label="i"];
28->15 [style = bold, label=""];
25->23 [style = bold, label=""];
29->31 [style = bold, label=""];
20->28 [style = bold, label=""];
3->4 [style = dotted, label="true"];
10->3 [style = bold, label=""];
12->30 [style = bold, label=""];
10->4 [style = solid, label="i"];
17->21 [style = dashed, label="0"];
6->8 [style = solid, label="i"];
7->20 [style = dotted, label="true"];
32->29 [style = bold, label=""];
3->19 [style = dotted, label="true"];
12->25 [style = dashed, label="0"];
9->29 [style = dashed, label="0"];
3->22 [style = dotted, label="true"];
8->21 [style = bold, label=""];
8->25 [style = bold, label=""];
13->30 [style = dashed, label="0"];
10->3 [style = solid, label="i"];
3->2 [style = dotted, label="true"];
19->22 [style = dashed, label="0"];
13->20 [style = bold, label=""];
}
