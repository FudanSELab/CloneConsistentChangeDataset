digraph {
42 [style = filled, label = "testRemove['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
63 [style = filled, label = "assertThat(map.keySet()).isEqualTo(makeSortedKeySet(0,1,2,3,4,5))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
64 [style = filled, label = "assertEquals(Integer.valueOf(i + 1),map.put(i,i + 2))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "assertThat(map.getNumArrayEntries()).isEqualTo(3)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
51 [style = filled, label = "assertThat(map.getNumArrayEntries()).isEqualTo(3)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "int i = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertThat(map.getNumOverflowEntries()).isEqualTo(0)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "assertThat(map.getNumArrayEntries()).isEqualTo(2)@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertNull(map.remove(3))@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
53 [style = filled, label = "assertThat(map).hasSize(2)@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertEquals(Integer.valueOf(5),map.remove(4))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "assertEquals(2,map.size())@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
68 [style = filled, label = "int i = 0@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "assertThat(map.getNumArrayEntries()).isEqualTo(3)@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "assertThat(map.getNumArrayEntries()).isEqualTo(3)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(makeSortedKeySet(0,2,3,4,5),map.keySet())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "assertThat(map.keySet()).isEqualTo(makeSortedKeySet(0,2,3,5))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertNull(map.remove(i + 1))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(0,map.getNumOverflowEntries())@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
48 [style = filled, label = "assertThat(map).hasSize(5)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
62 [style = filled, label = "assertThat(map.getNumOverflowEntries()).isEqualTo(0)@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "assertThat(map.remove(0)).isEqualTo(Integer.valueOf(1))@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "assertThat(map.getNumArrayEntries()).isEqualTo(3)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "testRemove['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertThat(map.remove(4)).isEqualTo(Integer.valueOf(5))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertNull(map.put(i,i + 1))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "assertThat(map.getNumOverflowEntries()).isEqualTo(1)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertEquals(6,map.size())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "assertThat(map.remove(1)).isEqualTo(Integer.valueOf(2))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertEquals(4,map.size())@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "i < 6@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "i++@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertThat(map.put(i,i + 1)).isNull()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(makeSortedKeySet(0,2,3,5),map.keySet())@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
47 [style = filled, label = "assertThat(map.remove(3)).isEqualTo(Integer.valueOf(4))@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
65 [style = filled, label = "testReplacingPut['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertThat(map.getNumOverflowEntries()).isEqualTo(3)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "assertThat(map.getNumOverflowEntries()).isEqualTo(2)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertEquals(2,map.getNumArrayEntries())@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
61 [style = filled, label = "assertThat(map).hasSize(3)@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertEquals(0,map.getNumOverflowEntries())@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertEquals(1,map.getNumOverflowEntries())@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "assertEquals(3,map.size())@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "assertEquals(Integer.valueOf(2),map.remove(1))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
58 [style = filled, label = "assertThat(map).hasSize(6)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(Integer.valueOf(4),map.remove(3))@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
66 [style = filled, label = "i < 6@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "i++@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(makeSortedKeySet(0,2,5),map.keySet())@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "assertThat(map.keySet()).isEqualTo(makeSortedKeySet(0,2,3,4,5))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "assertThat(map.getNumOverflowEntries()).isEqualTo(0)@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
57 [style = filled, label = "assertThat(map.keySet()).isEqualTo(makeSortedKeySet(0,2,5))@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "assertThat(map.remove(i + 1)).isNull()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertEquals(5,map.size())@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertEquals(makeSortedKeySet(0,1,2,3,4,5),map.keySet())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertEquals(Integer.valueOf(1),map.remove(0))@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
55 [style = filled, label = "assertThat(map.remove(3)).isNull()@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertEquals(3,map.size())@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
60 [style = filled, label = "assertThat(map).hasSize(3)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(2,map.getNumOverflowEntries())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "SmallSortedMap<Integer,Integer> map = SmallSortedMap.newInstanceForTest(3)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "assertEquals(3,map.getNumOverflowEntries())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertEquals(0,map.getNumOverflowEntries())@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "assertThat(map).hasSize(4)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5->20 [style = bold, label=""];
25->45 [style = bold, label=""];
2->6 [style = bold, label=""];
12->8 [style = solid, label="i"];
62->61 [style = bold, label=""];
68->66 [style = bold, label=""];
68->64 [style = solid, label="i"];
38->12 [style = bold, label=""];
12->25 [style = solid, label="i"];
6->51 [style = dashed, label="0"];
21->59 [style = dashed, label="0"];
20->37 [style = dashed, label="0"];
25->44 [style = bold, label=""];
22->4 [style = bold, label=""];
26->60 [style = dashed, label="0"];
39->60 [style = bold, label=""];
3->64 [style = dashed, label="0"];
68->66 [style = solid, label="i"];
15->11 [style = bold, label=""];
10->8 [style = bold, label=""];
17->62 [style = dashed, label="0"];
66->64 [style = dotted, label="true"];
66->64 [style = bold, label=""];
23->39 [style = dashed, label="0"];
25->10 [style = bold, label=""];
13->31 [style = bold, label=""];
27->25 [style = bold, label=""];
16->9 [style = bold, label=""];
25->44 [style = dotted, label="true"];
22->41 [style = dashed, label="0"];
34->53 [style = bold, label=""];
1->58 [style = dashed, label="0"];
40->52 [style = bold, label=""];
37->58 [style = bold, label=""];
57->55 [style = bold, label=""];
26->14 [style = bold, label=""];
48->50 [style = bold, label=""];
56->62 [style = bold, label=""];
25->12 [style = dotted, label="true"];
19->52 [style = dashed, label="0"];
0->29 [style = bold, label=""];
24->61 [style = dashed, label="0"];
24->18 [style = bold, label=""];
25->38 [style = dotted, label="true"];
44->38 [style = bold, label=""];
9->34 [style = dashed, label="0"];
58->63 [style = bold, label=""];
60->57 [style = bold, label=""];
47->54 [style = bold, label=""];
63->40 [style = bold, label=""];
21->22 [style = bold, label=""];
36->49 [style = bold, label=""];
7->2 [style = bold, label=""];
8->38 [style = dashed, label="0"];
5->45 [style = dashed, label="0"];
28->19 [style = bold, label=""];
42->32 [style = bold, label=""];
11->17 [style = bold, label=""];
41->46 [style = bold, label=""];
14->15 [style = bold, label=""];
25->10 [style = dotted, label="true"];
35->51 [style = bold, label=""];
25->8 [style = dotted, label="true"];
67->66 [style = bold, label=""];
2->35 [style = dashed, label="0"];
6->21 [style = bold, label=""];
28->40 [style = dashed, label="0"];
66->67 [style = dotted, label="true"];
4->13 [style = bold, label=""];
1->3 [style = bold, label=""];
32->27 [style = bold, label=""];
0->43 [style = dashed, label="0"];
4->46 [style = dashed, label="0"];
20->1 [style = bold, label=""];
19->0 [style = bold, label=""];
61->36 [style = bold, label=""];
27->8 [style = solid, label="i"];
29->48 [style = dashed, label="0"];
54->39 [style = bold, label=""];
52->43 [style = bold, label=""];
3->28 [style = bold, label=""];
18->36 [style = dashed, label="0"];
25->68 [style = bold, label=""];
67->66 [style = solid, label="i"];
25->5 [style = bold, label=""];
33->32 [style = bold, label=""];
64->67 [style = bold, label=""];
68->67 [style = solid, label="i"];
50->35 [style = bold, label=""];
67->64 [style = solid, label="i"];
27->25 [style = solid, label="i"];
8->12 [style = bold, label=""];
18->16 [style = bold, label=""];
31->23 [style = bold, label=""];
11->56 [style = dashed, label="0"];
27->10 [style = solid, label="i"];
43->48 [style = bold, label=""];
23->26 [style = bold, label=""];
31->54 [style = dashed, label="0"];
10->44 [style = dashed, label="0"];
12->10 [style = solid, label="i"];
9->30 [style = bold, label=""];
14->57 [style = dashed, label="0"];
49->34 [style = bold, label=""];
46->47 [style = bold, label=""];
30->53 [style = dashed, label="0"];
55->56 [style = bold, label=""];
3->63 [style = dashed, label="0"];
51->59 [style = bold, label=""];
15->55 [style = dashed, label="0"];
17->24 [style = bold, label=""];
12->25 [style = bold, label=""];
16->49 [style = dashed, label="0"];
29->7 [style = bold, label=""];
13->47 [style = dashed, label="0"];
45->37 [style = bold, label=""];
7->50 [style = dashed, label="0"];
59->41 [style = bold, label=""];
65->32 [style = bold, label=""];
27->12 [style = solid, label="i"];
}
