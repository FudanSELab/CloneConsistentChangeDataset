digraph {
38 [style = filled, label = "StreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertEquals(keyedResult2MaxParallelism,keyedResult2Node.getMaxParallelism())@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "DataStream<Integer> keyedResult1 = source.keyBy(null).map(new NoOpIntMap())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "DataStream<Integer> keyedResult3 = keyedResult2.keyBy(null).map(new NoOpIntMap()).setMaxParallelism(maxParallelism)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "DataStream<Integer> keyedResult4 = keyedResult3.keyBy(null).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "env.getConfig().setMaxParallelism(globalMaxParallelism)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "DataStream<Integer> keyedResult4 = keyedResult3.keyBy(new KeySelector<Integer,Integer>(){@Override public Integer getKey(Integer value){return value}}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism)@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "int globalParallelism = 42@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "DataStream<Integer> keyedResult3 = keyedResult2.keyBy(new KeySelector<Integer,Integer>(){@Override public Integer getKey(Integer value){return value}}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism)@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "testMaxParallelismForwarding['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "int keyedResult2MaxParallelism = 17@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "StreamGraph graph = env.getStreamGraph()@@@38@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(maxParallelism,keyedResult4Node.getMaxParallelism())@@@42@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "StreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId())@@@40@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "DataStream<Integer> keyedResult2 = keyedResult1.keyBy(null).map(new NoOpIntMap()).setParallelism(mapParallelism)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "StreamGraph graph = env.getStreamGraph()@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "DataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer,Integer>(){@Override public Integer getKey(Integer value){return value}}).map(new NoOpIntMap()).setMaxParallelism(keyedResult2MaxParallelism)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(globalMaxParallelism,keyedResult1Node.getMaxParallelism())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "StreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId())@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "int globalMaxParallelism = 42@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "DataStream<Integer> source = env.fromElements(1,2,3)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "StreamGraph graph = env.getStreamGraph()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "DataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer,Integer>(){@Override public Integer getKey(Integer value){return value}}).map(new NoOpIntMap())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "testAutoMaxParallelism['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "keyedResult4.addSink(new DiscardingSink<Integer>())@@@37@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "DataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer,Integer>(){@Override public Integer getKey(Integer value){return value}}).map(new NoOpIntMap()).setParallelism(mapParallelism)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertEquals(maxParallelism,keyedResult3Node.getMaxParallelism())@@@41@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testAutoMaxParallelism['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "StreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(maxParallelism,keyedResult3Node.getMaxParallelism())@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "StreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId())@@@39@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "StreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId())@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "DataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer,Integer>(){@Override public Integer getKey(Integer value){return value}}).map(new NoOpIntMap())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "keyedResult4.addSink(new DiscardingSink<>())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "keyedResult2.addSink(new DiscardingSink<Integer>())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "int maxParallelism = 21@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(maxParallelism,keyedResult4Node.getMaxParallelism())@@@18@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "int mapParallelism = 17@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "env.setParallelism(globalParallelism)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->32 [style = bold, label=""];
36->6 [style = bold, label=""];
22->26 [style = bold, label=""];
17->25 [style = bold, label=""];
2->19 [style = solid, label="mapParallelism"];
16->0 [style = bold, label=""];
19->18 [style = bold, label=""];
2->15 [style = solid, label="mapParallelism"];
29->30 [style = bold, label=""];
10->14 [style = bold, label=""];
31->37 [style = solid, label="keyedResult2MaxParallelism"];
14->28 [style = dashed, label="0"];
32->12 [style = bold, label=""];
13->25 [style = solid, label="maxParallelism"];
3->37 [style = dashed, label="0"];
33->28 [style = bold, label=""];
28->38 [style = bold, label=""];
4->15 [style = bold, label=""];
8->3 [style = bold, label=""];
13->4 [style = solid, label="maxParallelism"];
8->35 [style = dashed, label="0"];
31->36 [style = bold, label=""];
12->34 [style = bold, label=""];
21->24 [style = bold, label=""];
12->16 [style = bold, label=""];
9->10 [style = bold, label=""];
7->8 [style = bold, label=""];
13->23 [style = solid, label="maxParallelism"];
11->2 [style = bold, label=""];
39->33 [style = bold, label=""];
14->7 [style = bold, label=""];
2->13 [style = bold, label=""];
11->1 [style = solid, label="globalParallelism"];
2->31 [style = dashed, label="0"];
30->35 [style = solid, label="globalMaxParallelism"];
6->1 [style = bold, label=""];
2->0 [style = solid, label="mapParallelism"];
18->27 [style = bold, label=""];
35->37 [style = bold, label=""];
0->4 [style = bold, label=""];
15->9 [style = bold, label=""];
30->31 [style = bold, label=""];
13->17 [style = solid, label="maxParallelism"];
1->6 [style = dashed, label="0"];
23->19 [style = bold, label=""];
26->23 [style = bold, label=""];
34->39 [style = bold, label=""];
13->3 [style = solid, label="maxParallelism"];
24->17 [style = bold, label=""];
7->38 [style = dashed, label="0"];
1->12 [style = bold, label=""];
31->34 [style = solid, label="keyedResult2MaxParallelism"];
5->11 [style = bold, label=""];
13->6 [style = bold, label=""];
11->30 [style = dashed, label="0"];
38->35 [style = bold, label=""];
27->21 [style = bold, label=""];
13->8 [style = solid, label="maxParallelism"];
2->26 [style = solid, label="mapParallelism"];
30->6 [style = solid, label="globalMaxParallelism"];
12->22 [style = bold, label=""];
16->22 [style = dashed, label="0"];
20->11 [style = bold, label=""];
}
