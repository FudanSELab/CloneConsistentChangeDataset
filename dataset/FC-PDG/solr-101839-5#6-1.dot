digraph {
15 [style = filled, label = "Long longTest = (Long)calculateStat(longTestStart,\"min\")@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "String dateResult = (String)getStatResult(\"mar\",\"date_dtd\",VAL_TYPE.DATE)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "expressions.put(\"strings\",new ETP(\"min(string_sm)\",\"str1\"))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "Double doubleTest = (Double)calculateStat(doubleTestStart,\"max\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "String dateTest = (String)calculateStat(dateTestStart,\"max\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "expressions.put(\"int\",new ETP(\"min(int_i)\",1))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "String dateTest = (String)calculateStat(dateTestStart,\"min\")@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "expressions.put(\"longs\",new ETP(\"min(long_lm)\",1L))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Float floatResult = ((Float)getStatResult(\"mir\",\"float_fd\",VAL_TYPE.FLOAT))@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Float floatTest = (Float)calculateStat(floatTestStart,\"min\")@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(getRawResponse(),intResult,intTest)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Long longResult = ((Long)getStatResult(\"mar\",\"long_ld\",VAL_TYPE.LONG))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "String stringTest = (String)calculateStat(stringTestStart,\"max\")@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(getRawResponse(),stringResult,stringTest)@@@20@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "minTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Double doubleTest = (Double)calculateStat(doubleTestStart,\"min\")@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "Map<String,ETP> expressions = new HashMap<>()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Long longResult = ((Long)getStatResult(\"mir\",\"long_ld\",VAL_TYPE.LONG))@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "expressions.put(\"float\",new ETP(\"min(float_f)\",1.0F))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "String stringResult = (String)getStatResult(\"mir\",\"string_sd\",VAL_TYPE.STRING)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "Float floatTest = (Float)calculateStat(floatTestStart,\"max\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(getRawResponse(),dateResult,dateTest)@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Integer intResult = ((Integer)getStatResult(\"mar\",\"int_id\",VAL_TYPE.INTEGER))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Integer intResult = ((Integer)getStatResult(\"mir\",\"int_id\",VAL_TYPE.INTEGER))@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "expressions.put(\"doubles\",new ETP(\"min(double_dm)\",1.0))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "Long longTest = (Long)calculateStat(longTestStart,\"max\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Double doubleResult = (Double)getStatResult(\"mir\",\"double_dd\",VAL_TYPE.DOUBLE)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "Integer intTest = (Integer)calculateStat(intTestStart,\"max\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Integer intTest = (Integer)calculateStat(intTestStart,\"min\")@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(getRawResponse(),doubleResult,doubleTest)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testExpressions(expressions)@@@10@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "String stringTest = (String)calculateStat(stringTestStart,\"min\")@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertEquals(getRawResponse(),longResult,longTest)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "maxTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(getRawResponse(),floatResult,floatTest)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "minTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "String dateResult = (String)getStatResult(\"mir\",\"date_dtd\",VAL_TYPE.DATE)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "Float floatResult = ((Float)getStatResult(\"mar\",\"float_fd\",VAL_TYPE.FLOAT))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "String stringResult = (String)getStatResult(\"mar\",\"string_sd\",VAL_TYPE.STRING)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Double doubleResult = (Double)getStatResult(\"mar\",\"double_dd\",VAL_TYPE.DOUBLE)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "expressions.put(\"dates\",new ETP(\"min(date_dt)\",\"1801-12-31T23:59:59Z\"))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
38->8 [style = solid, label="intResult"];
6->7 [style = solid, label="stringResult"];
32->35 [style = bold, label=""];
11->32 [style = dashed, label="0"];
29->8 [style = bold, label=""];
8->28 [style = bold, label=""];
30->38 [style = bold, label=""];
13->37 [style = dashed, label="0"];
15->34 [style = dashed, label="0"];
9->8 [style = solid, label="intTest"];
23->27 [style = bold, label=""];
28->34 [style = bold, label=""];
40->1 [style = solid, label="doubleResult"];
20->26 [style = bold, label=""];
38->29 [style = bold, label=""];
10->38 [style = dashed, label="0"];
12->36 [style = bold, label=""];
16->17 [style = solid, label="floatTest"];
17->40 [style = bold, label=""];
33->17 [style = solid, label="floatResult"];
4->31 [style = dashed, label="0"];
10->8 [style = solid, label="intResult"];
11->12 [style = solid, label="dateResult"];
3->33 [style = bold, label=""];
16->17 [style = bold, label=""];
31->1 [style = bold, label=""];
4->1 [style = solid, label="doubleTest"];
28->3 [style = solid, label="longResult"];
9->8 [style = bold, label=""];
15->3 [style = bold, label=""];
12->6 [style = bold, label=""];
29->8 [style = solid, label="intTest"];
0->28 [style = dashed, label="0"];
37->7 [style = solid, label="stringTest"];
0->15 [style = bold, label=""];
37->7 [style = bold, label=""];
14->1 [style = solid, label="doubleResult"];
1->11 [style = bold, label=""];
24->20 [style = bold, label=""];
8->0 [style = bold, label=""];
13->7 [style = solid, label="stringTest"];
39->17 [style = solid, label="floatTest"];
36->7 [style = solid, label="stringResult"];
11->5 [style = bold, label=""];
0->3 [style = solid, label="longResult"];
2->17 [style = solid, label="floatResult"];
9->29 [style = dashed, label="0"];
33->39 [style = bold, label=""];
3->2 [style = bold, label=""];
18->10 [style = bold, label=""];
5->12 [style = bold, label=""];
34->3 [style = bold, label=""];
17->14 [style = bold, label=""];
39->17 [style = bold, label=""];
13->7 [style = bold, label=""];
15->3 [style = solid, label="longTest"];
5->12 [style = solid, label="dateTest"];
6->13 [style = bold, label=""];
26->23 [style = bold, label=""];
32->12 [style = solid, label="dateResult"];
35->12 [style = solid, label="dateTest"];
5->35 [style = dashed, label="0"];
25->19 [style = bold, label=""];
6->36 [style = dashed, label="0"];
1->32 [style = bold, label=""];
34->3 [style = solid, label="longTest"];
24->21 [style = solid, label="expressions"];
10->9 [style = bold, label=""];
4->1 [style = bold, label=""];
19->21 [style = bold, label=""];
40->31 [style = bold, label=""];
22->24 [style = bold, label=""];
36->37 [style = bold, label=""];
2->33 [style = dashed, label="0"];
27->25 [style = bold, label=""];
14->40 [style = dashed, label="0"];
35->12 [style = bold, label=""];
31->1 [style = solid, label="doubleTest"];
16->39 [style = dashed, label="0"];
14->4 [style = bold, label=""];
2->16 [style = bold, label=""];
}
