digraph {
19 [style = filled, label = "fail(\"should fail\")@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "SlidingEventTimeWindows.of(Time.seconds(2),Time.seconds(-1))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(e.toString(),containsString(\"0 <= offset < slide and size > 0\"))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "testInvalidParameters['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "TumblingEventTimeWindows.of(Time.seconds(10),Time.seconds(-1))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "IllegalArgumentException e@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "fail(\"should fail\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "SlidingEventTimeWindows.of(Time.seconds(-2),Time.seconds(1))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "TumblingEventTimeWindows.of(Time.seconds(-1))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "SlidingEventTimeWindows.of(Time.seconds(20),Time.seconds(10),Time.seconds(11))@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertThat(e.toString(),containsString(\"0 <= offset < slide and size > 0\"))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "fail(\"should fail\")@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "TumblingEventTimeWindows.of(Time.seconds(10),Time.seconds(20))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "IllegalArgumentException e@@@28@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "IllegalArgumentException e@@@14@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(e.toString(),containsString(\"abs(offset) < slide and size > 0\"))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertThat(e.toString(),containsString(\"abs(offset) < slide and size > 0\"))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "IllegalArgumentException e@@@21@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "SlidingEventTimeWindows.of(Time.seconds(20),Time.seconds(10),Time.seconds(-11))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "testInvalidParameters['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertThat(e.toString(),containsString(\"0 <= offset < size\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "fail(\"should fail\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(e.toString(),containsString(\"abs(offset) < slide and size > 0\"))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(e.toString(),containsString(\"abs(offset) < slide and size > 0\"))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "SlidingEventTimeWindows.of(Time.seconds(20),Time.seconds(10),Time.seconds(-1))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "fail(\"should fail\")@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "SlidingEventTimeWindows.of(Time.seconds(-20),Time.seconds(10),Time.seconds(-1))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "testInvalidParameters['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "assertThat(e.toString(),containsString(\"0 <= offset < size\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->3 [style = bold, label=""];
1->4 [style = bold, label=""];
15->13 [style = bold, label=""];
5->20 [style = bold, label=""];
24->9 [style = bold, label=""];
11->21 [style = bold, label=""];
0->2 [style = bold, label=""];
8->17 [style = dotted, label="true"];
18->15 [style = bold, label=""];
7->20 [style = dashed, label="0"];
10->3 [style = bold, label=""];
8->6 [style = bold, label=""];
23->3 [style = bold, label=""];
6->17 [style = dashed, label="0"];
2->9 [style = bold, label=""];
9->10 [style = bold, label=""];
9->16 [style = bold, label=""];
21->18 [style = bold, label=""];
5->25 [style = bold, label=""];
4->0 [style = bold, label=""];
22->12 [style = dotted, label="true"];
4->28 [style = dashed, label="0"];
3->18 [style = bold, label=""];
20->2 [style = bold, label=""];
8->17 [style = bold, label=""];
28->0 [style = bold, label=""];
12->13 [style = bold, label=""];
25->24 [style = bold, label=""];
9->23 [style = bold, label=""];
13->19 [style = bold, label=""];
8->6 [style = dotted, label="true"];
5->25 [style = dotted, label="true"];
6->27 [style = dashed, label="0"];
5->7 [style = dotted, label="true"];
7->2 [style = bold, label=""];
22->12 [style = bold, label=""];
6->10 [style = bold, label=""];
0->24 [style = bold, label=""];
7->25 [style = dashed, label="0"];
5->7 [style = bold, label=""];
5->20 [style = dotted, label="true"];
27->23 [style = bold, label=""];
10->16 [style = dashed, label="0"];
26->28 [style = bold, label=""];
11->21 [style = dotted, label="true"];
2->24 [style = dashed, label="0"];
8->27 [style = dotted, label="true"];
8->27 [style = bold, label=""];
10->23 [style = dashed, label="0"];
17->16 [style = bold, label=""];
14->4 [style = bold, label=""];
}
