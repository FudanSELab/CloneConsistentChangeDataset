digraph {
47 [style = filled, label = "DocumentMapper documentMapper = mapperService.documentMapper()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,12),equalTo(10))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(fields.size(),equalTo(2))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "TermRangeQuery query = new TermRangeQuery(\"field1\",new BytesRef(\"a\"),new BytesRef(\"z\"),true,true)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertThat(fields.size(),equalTo(1))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(document.getField(fieldType.extractionResultField.name()).stringValue(),equalTo(EXTRACTION_PARTIAL))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(LongPoint.decodeDimension(fields.get(1).binaryValue().bytes,8),equalTo(15L))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(1).binaryValue().bytes,12),equalTo(15))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "fieldMapper.processQuery(bq.build(),parseContext)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "bq.add(rangeQuery2,Occur.MUST)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "fieldMapper.processQuery(bq.build(),parseContext)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Query rangeQuery1 = mapperService.fieldType(\"number_field1\").rangeQuery(10,20,true,true,null,null,null,context)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "fieldMapper.processQuery(query,parseContext)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "PercolatorFieldMapper.PercolatorFieldType fieldType = (PercolatorFieldMapper.PercolatorFieldType)fieldMapper.fieldType()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertThat(fields.size(),equalTo(1))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "PercolatorFieldMapper.PercolatorFieldType fieldType = (PercolatorFieldMapper.PercolatorFieldType)fieldMapper.fieldType()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "List<IndexableField> fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.rangeField.name())))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(documentMapper,null,null,null,null)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "parseContext = new ParseContext.InternalParseContext(documentMapper.mapping(),documentMapper.mappers(),mapperService.getIndexSettings(),mapperService.getIndexAnalyzers(),null,null,null,null)@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "bq.add(rangeQuery1,Occur.MUST)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(fields.get(0).numericValue(),equalTo(1L))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,28),equalTo(20))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(1).binaryValue().bytes,28),equalTo(20))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "PercolatorFieldMapper fieldMapper = (PercolatorFieldMapper)documentMapper.mappers().getMapper(fieldName)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,28),equalTo(20))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "ParseContext.Document document = parseContext.doc()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(documentMapper.mapping(),documentMapper.mappers(),mapperService.getIndexSettings(),mapperService.getIndexAnalyzers(),null,null,null,null)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,12),equalTo(10))@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "bq.add(rangeQuery2,Occur.MUST)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "fields.sort(Comparator.comparing(null))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(document.getField(fieldType.extractionResultField.name()).stringValue(),equalTo(EXTRACTION_FAILED))@@@12@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(document.getField(fieldType.extractionResultField.name()).stringValue(),equalTo(EXTRACTION_PARTIAL))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "document = parseContext.doc()@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "QueryShardContext context = createSearchContext(indexService).getQueryShardContext()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "bq.add(rangeQuery1,Occur.MUST)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.minimumShouldMatchField.name())))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertThat(document.getFields().size(),equalTo(1))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.rangeField.name())))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.minimumShouldMatchField.name())))@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "addQueryFieldMappings()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "ParseContext.Document document = parseContext.doc()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "fields.sort(Comparator.comparing(null))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Query rangeQuery2 = mapperService.fieldType(\"number_field1\").rangeQuery(15,20,true,true,null,null,null,context)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(fields.get(0).numericValue(),equalTo(2L))@@@44@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "bq = new BooleanQuery.Builder()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "BooleanQuery.Builder bq = new BooleanQuery.Builder()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "parseContext = new ParseContext.InternalParseContext(documentMapper,null,null,null,null)@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "testExtractRanges['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "testExtractRanges['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "rangeQuery2 = mapperService.fieldType(\"number_field2\").rangeQuery(15,20,true,true,null,null,null,context)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(fields.size(),equalTo(2))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "testExtractTermsAndRanges_failed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertThat(LongPoint.decodeDimension(fields.get(1).binaryValue().bytes,24),equalTo(20L))@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25->0 [style = bold, label=""];
8->10 [style = bold, label=""];
25->47 [style = bold, label=""];
27->38 [style = bold, label=""];
29->22 [style = solid, label="context"];
35->16 [style = bold, label=""];
1->8 [style = bold, label=""];
42->43 [style = bold, label=""];
33->3 [style = bold, label=""];
13->42 [style = bold, label=""];
30->1 [style = bold, label=""];
16->27 [style = bold, label=""];
22->19 [style = bold, label=""];
13->11 [style = solid, label="documentMapper"];
44->7 [style = solid, label="parseContext"];
21->44 [style = dashed, label="0"];
2->6 [style = bold, label=""];
36->15 [style = bold, label=""];
29->33 [style = solid, label="context"];
29->32 [style = solid, label="context"];
44->7 [style = bold, label=""];
29->25 [style = bold, label=""];
9->20 [style = bold, label=""];
18->36 [style = bold, label=""];
31->21 [style = bold, label=""];
12->35 [style = bold, label=""];
13->21 [style = solid, label="documentMapper"];
23->41 [style = bold, label=""];
26->24 [style = bold, label=""];
3->22 [style = bold, label=""];
24->18 [style = bold, label=""];
5->17 [style = bold, label=""];
34->30 [style = bold, label=""];
38->39 [style = bold, label=""];
39->4 [style = bold, label=""];
45->29 [style = bold, label=""];
51->13 [style = bold, label=""];
49->50 [style = bold, label=""];
33->3 [style = solid, label="rangeQuery1"];
50->25 [style = bold, label=""];
21->7 [style = solid, label="parseContext"];
48->46 [style = bold, label=""];
8->42 [style = dashed, label="0"];
46->51 [style = bold, label=""];
28->2 [style = bold, label=""];
37->14 [style = bold, label=""];
48->46 [style = solid, label="parseContext"];
7->5 [style = bold, label=""];
17->28 [style = bold, label=""];
25->46 [style = solid, label="query"];
11->34 [style = bold, label=""];
19->13 [style = bold, label=""];
0->33 [style = bold, label=""];
20->23 [style = bold, label=""];
31->44 [style = bold, label=""];
42->11 [style = bold, label=""];
43->34 [style = solid, label="parseContext"];
34->46 [style = dashed, label="0"];
52->48 [style = bold, label=""];
47->48 [style = solid, label="documentMapper"];
21->7 [style = bold, label=""];
11->43 [style = dashed, label="0"];
10->9 [style = bold, label=""];
41->26 [style = bold, label=""];
33->14 [style = solid, label="rangeQuery1"];
47->52 [style = bold, label=""];
14->32 [style = bold, label=""];
22->19 [style = solid, label="rangeQuery2"];
15->37 [style = bold, label=""];
43->34 [style = bold, label=""];
32->31 [style = bold, label=""];
11->34 [style = solid, label="parseContext"];
32->31 [style = solid, label="rangeQuery2"];
40->29 [style = bold, label=""];
6->12 [style = bold, label=""];
}
