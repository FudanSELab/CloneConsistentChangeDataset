digraph {
40 [style = filled, label = "int count = 0@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "template.send(\"direct:commit\",new Processor(){@Override public void process(Exchange exchange){exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE,commitMessage)}})@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(status.getAdded().contains(filenameToAdd))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "boolean branchCreated = false@@@29@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Iterable<RevCommit> revCommits = template.requestBody(\"direct:log\",\"\",)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "File gitDir = new File(gitLocalRepo,\".git\")@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
48 [style = filled, label = "logBranchTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "template.sendBody(\"direct:create-branch\",\"\")@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "List<Ref> ref = git.branchList().call()@@@24@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(branchCreated,true)@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "template.sendBody(\"direct:create-branch\",\"\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "MockEndpoint mockResultBranch = getMockEndpoint(\"mock:result-branch\")@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertEquals(branchCreated,true)@@@35@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "branchCreated = true@@@32@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "List<Ref> ref = git.branchList().call()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "fileToAdd.createNewFile()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(gitDir.exists(),true)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "repository.close()@@@61@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "File gitDir = new File(gitLocalRepo,\".git\")@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "fileToAddDifferent.createNewFile()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertTrue(status.getAdded().contains(filenameToAdd))@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
57 [style = filled, label = "Status status = template.requestBody(\"direct:status\",\"\",)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "File fileToAdd = new File(gitLocalRepo,filenameToAdd)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "mockResultBranch.expectedMessageCount(2)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "MockEndpoint added = getMockEndpoint(\"mock:result-branch\")@@@32@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "List<Exchange> exchanges = mockResultBranch.getExchanges()@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
50 [style = filled, label = "template.send(\"direct:add-on-branch\",new Processor(){@Override public void process(Exchange exchange){exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME,filenameBranchToAdd)}})@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "fileToAdd.createNewFile()@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
46 [style = filled, label = "File fileToAddDifferent = new File(gitLocalRepo,filenameBranchToAdd)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "template.send(\"direct:commit-all-branch\",new Processor(){@Override public void process(Exchange exchange){exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE,commitMessageAll)}})@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "count++@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "git.commit().setMessage(commitMessage).call()@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Git git = new Git(repository)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "assertEquals(\"refs/heads/master\",exchanges.get(0).getOut().getBody().getName())@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "boolean branchCreated = false@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "repository.close()@@@35@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(gitDir.exists(),true)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "git.add().addFilepattern(filenameToAdd).call()@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "branchConsumerTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "Git git = new Git(repository)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "assertEquals(rev.getShortMessage(),commitMessage)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(\"refs/heads/\" + branchTest,exchanges.get(1).getOut().getBody().getName())@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
58 [style = filled, label = "revCommits = template.requestBody(\"direct:log-branch\",\"\",)@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "mockResultBranch.assertIsSatisfied()@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "template.send(\"direct:add\",new Processor(){@Override public void process(Exchange exchange){exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME,filenameToAdd)}})@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertEquals(rev.getShortMessage(),commitMessageAll)@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Thread.sleep(1 * 5000)@@@33@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "branchCreated = true@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
49 [style = filled, label = "refInternal.getName().equals(\"refs/heads/\" + branchTest)@@@31@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Repository repository = getTestRepository()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Status status = git.status().call()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "boolean branchCreated = false@@@25@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "branchConsumerTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "git.branchCreate().setName(branchTest).call()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "refInternal.getName().equals(\"refs/heads/\" + branchTest)@@@18@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
56 [style = filled, label = "count == 0@@@53@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertEquals(rev.getShortMessage(),commitMessage)@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "count == 1@@@56@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Git git = getGitTestRepository()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16->9 [style = dotted, label="true"];
56->42 [style = dotted, label="true"];
22->37 [style = bold, label=""];
53->58 [style = bold, label=""];
39->24 [style = bold, label=""];
40->55 [style = solid, label="count"];
9->16 [style = bold, label=""];
3->34 [style = bold, label=""];
9->20 [style = solid, label="branchCreated"];
21->26 [style = bold, label=""];
3->5 [style = bold, label=""];
46->54 [style = bold, label=""];
37->31 [style = bold, label=""];
49->4 [style = bold, label=""];
10->57 [style = bold, label=""];
16->9 [style = bold, label=""];
5->10 [style = bold, label=""];
23->25 [style = bold, label=""];
2->20 [style = bold, label=""];
25->28 [style = bold, label=""];
9->4 [style = solid, label="branchCreated"];
55->51 [style = solid, label="count"];
8->18 [style = bold, label=""];
4->20 [style = solid, label="branchCreated"];
8->0 [style = solid, label="repository"];
1->0 [style = bold, label=""];
13->11 [style = bold, label=""];
33->13 [style = bold, label=""];
35->21 [style = bold, label=""];
13->26 [style = dashed, label="0"];
0->7 [style = bold, label=""];
6->2 [style = bold, label=""];
56->51 [style = bold, label=""];
43->47 [style = bold, label=""];
8->47 [style = solid, label="repository"];
13->57 [style = dashed, label="0"];
14->8 [style = bold, label=""];
19->4 [style = solid, label="branchCreated"];
38->33 [style = bold, label=""];
1->45 [style = bold, label=""];
45->52 [style = bold, label=""];
29->16 [style = bold, label=""];
24->3 [style = bold, label=""];
11->30 [style = bold, label=""];
47->16 [style = bold, label=""];
51->41 [style = dotted, label="true"];
28->29 [style = bold, label=""];
22->31 [style = solid, label="branchCreated"];
40->56 [style = bold, label=""];
15->19 [style = bold, label=""];
27->35 [style = bold, label=""];
42->51 [style = bold, label=""];
19->16 [style = bold, label=""];
57->11 [style = bold, label=""];
37->22 [style = bold, label=""];
52->43 [style = bold, label=""];
10->13 [style = bold, label=""];
4->20 [style = bold, label=""];
37->22 [style = dotted, label="true"];
17->3 [style = bold, label=""];
7->15 [style = bold, label=""];
32->39 [style = bold, label=""];
16->4 [style = bold, label=""];
9->49 [style = bold, label=""];
49->20 [style = bold, label=""];
49->4 [style = dotted, label="true"];
31->23 [style = bold, label=""];
40->56 [style = solid, label="count"];
11->1 [style = bold, label=""];
4->6 [style = bold, label=""];
41->55 [style = bold, label=""];
30->31 [style = solid, label="branchCreated"];
9->4 [style = bold, label=""];
20->28 [style = dashed, label="0"];
20->46 [style = bold, label=""];
18->17 [style = bold, label=""];
22->31 [style = bold, label=""];
58->40 [style = bold, label=""];
36->32 [style = bold, label=""];
30->37 [style = bold, label=""];
48->8 [style = bold, label=""];
40->51 [style = solid, label="count"];
55->56 [style = bold, label=""];
56->42 [style = bold, label=""];
54->50 [style = bold, label=""];
26->38 [style = bold, label=""];
55->44 [style = bold, label=""];
4->49 [style = bold, label=""];
51->55 [style = bold, label=""];
20->12 [style = bold, label=""];
51->41 [style = bold, label=""];
50->53 [style = bold, label=""];
34->27 [style = bold, label=""];
55->56 [style = solid, label="count"];
}
