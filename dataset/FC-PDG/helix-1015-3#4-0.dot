digraph {
31 [style = filled, label = "_participants(0( = new MockParticipantManager(ZK_ADDR,_clusterName,_participants(0(.getInstanceName())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).setResources(Sets.newHashSet(FULL_AUTO_RESOURCES)).build()@@@20@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(10000))@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(10000))@@@26@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "System.out.println(\"Un-verify resource: \" + resource)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).setResources(Sets.newHashSet(FULL_AUTO_RESOURCES)).build()@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "_participants(0(.setTransition(new SleepTransition(99999999))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Thread.sleep(1000)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "HelixClusterVerifier strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).build()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "boolean isVerifiedFalse = TestHelper.verify(null,TestHelper.WAIT_DURATION)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "testSleepTransition['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testDisablePartitionAndStopInstance['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Thread.sleep(1000)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(bestPossibleVerifier.verify(10000))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "_admin.enablePartition(true,_clusterName,_participants(0(.getInstanceName(),FULL_AUTO_RESOURCES(0(,Lists.newArrayList(FULL_AUTO_RESOURCES(0( + \"_0\"))@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Thread.sleep(1000)@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "Thread.sleep(1000)@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "_participants(0(.syncStart()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertFalse(strictMatchVerifier.verify(3000))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "HelixClusterVerifier bestPossibleVerifier = new BestPossibleExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertFalse(strictMatchVerifier.verify(3000))@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "_admin.enablePartition(true,_clusterName,_participants(0(.getInstanceName(),FULL_AUTO_RESOURCES(0(,Lists.newArrayList(FULL_AUTO_RESOURCES(0( + \"_0\"))@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "Assert.assertFalse(strictMatchVerifier.verify(3000))@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "_participants(0(.syncStop()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(10000))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).setResources(Sets.newHashSet(resource)).build()@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(10000))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertTrue(isVerifiedFalse)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "testDisablePartitionAndStopInstance['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "Thread.sleep(1000)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Thread.sleep(1000)@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "_admin.enablePartition(false,_clusterName,_participants(0(.getInstanceName(),FULL_AUTO_RESOURCES(0(,Lists.newArrayList(FULL_AUTO_RESOURCES(0( + \"_0\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "_participants(0(.syncStop()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
0->3 [style = bold, label=""];
4->10 [style = bold, label=""];
1->4 [style = bold, label=""];
18->24 [style = bold, label=""];
24->19 [style = bold, label=""];
12->5 [style = bold, label=""];
8->23 [style = bold, label=""];
10->31 [style = bold, label=""];
28->30 [style = bold, label=""];
17->9 [style = bold, label=""];
23->15 [style = bold, label=""];
30->32 [style = bold, label=""];
32->27 [style = bold, label=""];
10->17 [style = bold, label=""];
9->8 [style = bold, label=""];
3->4 [style = bold, label=""];
15->18 [style = bold, label=""];
20->21 [style = bold, label=""];
8->17 [style = bold, label=""];
6->1 [style = bold, label=""];
5->0 [style = bold, label=""];
21->22 [style = bold, label=""];
25->11 [style = bold, label=""];
19->26 [style = bold, label=""];
7->6 [style = bold, label=""];
22->17 [style = bold, label=""];
20->21 [style = solid, label="isVerifiedFalse"];
1->14 [style = bold, label=""];
13->15 [style = bold, label=""];
31->28 [style = bold, label=""];
16->12 [style = bold, label=""];
2->11 [style = bold, label=""];
29->11 [style = bold, label=""];
11->7 [style = bold, label=""];
8->13 [style = bold, label=""];
14->20 [style = bold, label=""];
24->15 [style = bold, label=""];
}
