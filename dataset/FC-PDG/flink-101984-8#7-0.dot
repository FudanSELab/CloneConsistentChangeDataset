digraph {
18 [style = filled, label = "assertEquals(11,row.getInt(6))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "boolean nullPartValue@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(6.6,row.getDouble(9),0)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Path testPath@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(DecimalData.fromBigDecimal(new BigDecimal(25),15,0),row.getDecimal(13,15,0))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertTrue(row.isNullAt(j))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "RowType rowType = RowType.of(fieldTypes,IntStream.range(0,28).mapToObj(null).toArray(null))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(DecimalData.fromBigDecimal(new BigDecimal(26),20,0),row.getDecimal(14,20,0))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(LocalDateTime.of(1999,1,1,1,1),row.getTimestamp(11,9).toLocalDateTime())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(i,row.getInt(2))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "forEachRemaining(format.createReader(EMPTY_CONF,new FileSourceSplit(\"id\",testPath,0,Long.MAX_VALUE)),null)@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "innerTestPartitionValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "i++@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "reader.close()@@@39@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "AtomicInteger cnt = new AtomicInteger(0)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertEquals(\"f27\",row.getString(15).toString())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "innerTestPartitionValues['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "nullPartValue@@@15@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "j < 16@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Path testPath@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "ColumnarRowData row = reader.nextRecord()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(SqlDateTimeUtils.dateToInternal(Date.valueOf(\"2020-11-23\")),row.getInt(10))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertTrue(row.getBoolean(3))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Path testPath@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "List<String> partitionKeys@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "int i = 0@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "int j = 3@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "ParquetColumnarRowSplitReader reader = ParquetSplitReaderUtil.genPartColumnarRowReader(false,true,new Configuration(),IntStream.range(0,28).mapToObj(null).toArray(null),Arrays.stream(fieldTypes).map(null).toArray(null),partSpec,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c084f8,rowGroupSize,new Path(testPath.getPath()),0,Long.MAX_VALUE)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "innerTestPartitionValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "assertEquals(i,row.getDouble(0),0)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "!reader.reachedEnd()@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "int(( projected = new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c08426@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ParquetColumnarRowInputFormat format = ParquetColumnarRowInputFormat.createPartitionedFormat(new Configuration(),producedType,partitionKeys,\"my_default_value\",PartitionValueConverter.DEFAULT,500,false,true)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "boolean nullPartValue@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "assertEquals(13,row.getFloat(8),0)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(9,row.getByte(4))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "LogicalType(( fieldTypes = new LogicalType((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c08482@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "RowType producedType = new RowType(Arrays.stream(projected).mapToObj(null).collect(Collectors.toList()))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertEquals(DecimalData.fromBigDecimal(new BigDecimal(24),5,0),row.getDecimal(12,5,0))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "ParquetColumnarRowInputFormat<FileSourceSplit> format = ParquetColumnarRowInputFormat.createPartitionedFormat(new Configuration(),producedType,partitionKeys,PartitionFieldExtractor.forFileSystem(\"my_default_value\"),500,false,true)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "assertEquals(12,row.getLong(7))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "j++@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "boolean nullPartValue@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals((byte)i,row.getByte(1))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(10,row.getShort(5))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Map<String,Object> partSpec@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
32->35 [style = bold, label=""];
17->25 [style = bold, label=""];
44->26 [style = solid, label="j"];
0->13 [style = bold, label=""];
25->45 [style = bold, label=""];
44->38 [style = solid, label="j"];
3->4 [style = bold, label=""];
22->30 [style = bold, label=""];
31->34 [style = solid, label="i"];
44->29 [style = solid, label="j"];
31->33 [style = solid, label="i"];
5->9 [style = dotted, label="true"];
14->11 [style = dotted, label="true"];
42->23 [style = dotted, label="true"];
40->31 [style = bold, label=""];
37->33 [style = bold, label=""];
28->35 [style = dotted, label="false"];
14->12 [style = dotted, label="true"];
20->21 [style = solid, label="i"];
3->24 [style = dashed, label="0"];
0->13 [style = solid, label="producedType"];
42->36 [style = dotted, label="true"];
5->6 [style = dotted, label="true"];
19->33 [style = dotted, label="true"];
19->21 [style = dotted, label="true"];
28->18 [style = dotted, label="false"];
19->37 [style = dotted, label="true"];
20->33 [style = solid, label="i"];
29->26 [style = solid, label="j"];
8->3 [style = solid, label="fieldTypes"];
4->0 [style = bold, label=""];
19->37 [style = bold, label=""];
29->26 [style = bold, label=""];
39->22 [style = bold, label=""];
24->20 [style = bold, label=""];
28->16 [style = dotted, label="false"];
28->44 [style = dotted, label="true"];
19->41 [style = bold, label=""];
5->7 [style = dotted, label="true"];
42->43 [style = dotted, label="true"];
10->2 [style = bold, label=""];
14->8 [style = bold, label=""];
20->19 [style = bold, label=""];
36->24 [style = solid, label="partSpec"];
31->21 [style = solid, label="i"];
28->17 [style = dotted, label="false"];
8->24 [style = bold, label=""];
13->10 [style = bold, label=""];
6->2 [style = solid, label="testPath"];
27->18 [style = bold, label=""];
19->34 [style = dotted, label="true"];
30->17 [style = bold, label=""];
42->8 [style = bold, label=""];
8->3 [style = bold, label=""];
21->34 [style = bold, label=""];
0->1 [style = solid, label="producedType"];
45->16 [style = bold, label=""];
9->2 [style = solid, label="testPath"];
9->1 [style = solid, label="partitionKeys"];
28->32 [style = dotted, label="false"];
28->25 [style = dotted, label="false"];
20->31 [style = solid, label="i"];
28->40 [style = dotted, label="false"];
28->32 [style = bold, label=""];
9->43 [style = dashed, label="0"];
34->28 [style = bold, label=""];
19->28 [style = dotted, label="true"];
26->31 [style = bold, label=""];
26->38 [style = dotted, label="true"];
18->39 [style = bold, label=""];
0->1 [style = bold, label=""];
15->40 [style = bold, label=""];
20->34 [style = solid, label="i"];
31->19 [style = bold, label=""];
19->31 [style = dotted, label="true"];
29->38 [style = solid, label="j"];
28->39 [style = dotted, label="false"];
16->15 [style = bold, label=""];
5->8 [style = bold, label=""];
35->27 [style = bold, label=""];
28->45 [style = dotted, label="false"];
38->29 [style = bold, label=""];
1->13 [style = dashed, label="0"];
26->38 [style = bold, label=""];
44->26 [style = bold, label=""];
28->15 [style = dotted, label="false"];
11->13 [style = solid, label="partitionKeys"];
28->26 [style = dotted, label="true"];
28->22 [style = dotted, label="false"];
28->44 [style = bold, label=""];
28->27 [style = dotted, label="false"];
26->29 [style = dotted, label="true"];
14->9 [style = dotted, label="true"];
33->21 [style = bold, label=""];
1->10 [style = bold, label=""];
28->30 [style = dotted, label="false"];
}
