digraph {
1 [style = filled, label = "creatingParentsIfNeeded['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "creatingParentsIfNeeded['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "return new CreateProtectACLCreateModePathAndBytesable<String>(){@Override public BackgroundPathAndBytesable<String> withACL(List<ACL> aclList){return this.withACL(aclList)}@Override public PathAndBytesable<String> inBackground(){return this.inBackground()}@Override public PathAndBytesable<String> inBackground(Object context){return this.inBackground(context)}@Override public PathAndBytesable<String> inBackground(BackgroundCallback callback){return this.inBackground(callback)}@Override public PathAndBytesable<String> inBackground(BackgroundCallback callback,Object context){return this.inBackground(callback,context)}@Override public PathAndBytesable<String> inBackground(BackgroundCallback callback,Executor executor){return this.inBackground(callback,executor)}@Override public PathAndBytesable<String> inBackground(BackgroundCallback callback,Object context,Executor executor){return this.inBackground(callback,context,executor)}@Override public String forPath(String path,byte(( data){return this.forPath(path,data)}@Override public String forPath(String path){return this.forPath(path)}@Override public ACLBackgroundPathAndBytesable<String> withMode(CreateMode mode){return this.withMode(mode)}@Override public ACLCreateModeBackgroundPathAndBytesable<String> withProtection(){return this.withProtection()}@Override public ProtectACLCreateModePathAndBytesable<String> creatingParentsIfNeeded(){return this.creatingParentsIfNeeded()}@Override public ProtectACLCreateModePathAndBytesable<String> creatingParentContainersIfNeeded(){return this.creatingParentContainersIfNeeded()}}@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "storingStatIn['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "return new ProtectACLCreateModeStatPathAndBytesable<String>(){@Override public ACLCreateModeBackgroundPathAndBytesable<String> withProtection(){return this.withProtection()}@Override public BackgroundPathAndBytesable<String> withACL(List<ACL> aclList){return this.withACL(aclList)}@Override public ErrorListenerPathAndBytesable<String> inBackground(){return this.inBackground()}@Override public ErrorListenerPathAndBytesable<String> inBackground(Object context){return this.inBackground(context)}@Override public ErrorListenerPathAndBytesable<String> inBackground(BackgroundCallback callback){return this.inBackground(callback)}@Override public ErrorListenerPathAndBytesable<String> inBackground(BackgroundCallback callback,Object context){return this.inBackground(callback,context)}@Override public ErrorListenerPathAndBytesable<String> inBackground(BackgroundCallback callback,Executor executor){return this.inBackground(callback,executor)}@Override public ErrorListenerPathAndBytesable<String> inBackground(BackgroundCallback callback,Object context,Executor executor){return this.inBackground(callback,context,executor)}@Override public ACLBackgroundPathAndBytesable<String> withMode(CreateMode mode){return this.withMode(mode)}@Override public String forPath(String path,byte(( data){return this.forPath(path,data)}@Override public String forPath(String path){return this.forPath(path)}@Override public ACLBackgroundPathAndBytesable<String> storingStatIn(Stat stat){storingStat = statreturn this}}@@@4@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "createParentsIfNeeded = true@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "storingStat = stat@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Stat stat@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4->6 [style = dotted, label="true"];
5->7 [style = bold, label=""];
1->0 [style = bold, label=""];
2->7 [style = dashed, label="0"];
4->5 [style = bold, label=""];
3->0 [style = bold, label=""];
0->2 [style = bold, label=""];
6->5 [style = solid, label="stat"];
}
