digraph {
29 [style = filled, label = "IndexableField pointField = fields(0(@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertEquals(mapping,mapper.mappingSource().toString())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertArrayEquals(new IndexableField((((,doc.rootDoc().getFields(\"field\"))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(1457654400000L,dvField.numericValue().longValue())@@@21@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "mapper = parser.parse(\"type\",new CompressedXContent(mapping))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "IndexableField pointField = fields(0(@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(DocValuesType.SORTED_NUMERIC,dvField.fieldType().docValuesType())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(mapping,mapper.mappingSource().toString())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))),dvField.binaryValue())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "DocumentMapper mapper = createDocumentMapper(fieldMapping(null))@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",\"date\").endObject().endObject().endObject().endObject())@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "IndexableField(( fields = doc.rootDoc().getFields(\"field\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",\"ip\").endObject().endObject().endObject().endObject())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "testNullValue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertFalse(dvField.fieldType().stored())@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))),pointField.binaryValue())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "doc = mapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().nullField(\"field\").endObject()),XContentType.JSON))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",\"ip\").field(\"null_value\",\"::1\").endObject().endObject().endObject().endObject())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(1,pointField.fieldType().pointIndexDimensionCount())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(16,pointField.fieldType().pointNumBytes())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "mapper = createDocumentMapper(fieldMapping(null))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "ParsedDocument doc = mapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().nullField(\"field\").endObject()),XContentType.JSON))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",\"date\").field(\"null_value\",\"2016-03-11\").endObject().endObject().endObject().endObject())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "assertArrayEquals(new IndexableField((((,doc.rootDoc().getFields(\"field\"))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "IndexableField dvField = fields(1(@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(DocValuesType.SORTED_NUMERIC,dvField.fieldType().docValuesType())@@@20@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "IndexableField(( fields = doc.rootDoc().getFields(\"field\")@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "assertEquals(2,fields.length)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertFalse(dvField.fieldType().stored())@@@22@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "ParsedDocument doc = mapper.parse(source(null))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "assertEquals(1,pointField.fieldType().pointIndexDimensionCount())@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "assertEquals(DocValuesType.SORTED_SET,dvField.fieldType().docValuesType())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testNullValue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertFalse(pointField.fieldType().stored())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "DocumentMapper mapper = parser.parse(\"type\",new CompressedXContent(mapping))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testNullValue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertEquals(2,fields.length)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
8->5 [style = solid, label="mapping"];
2->20 [style = bold, label=""];
34->9 [style = bold, label=""];
30->1 [style = bold, label=""];
7->12 [style = solid, label="fields"];
20->9 [style = bold, label=""];
21->29 [style = solid, label="fields"];
21->17 [style = solid, label="fields"];
10->19 [style = bold, label=""];
27->28 [style = bold, label=""];
0->32 [style = dashed, label="0"];
32->10 [style = solid, label="mapping"];
4->21 [style = bold, label=""];
7->15 [style = solid, label="fields"];
6->0 [style = bold, label=""];
5->18 [style = bold, label=""];
36->12 [style = bold, label=""];
8->28 [style = dashed, label="0"];
30->5 [style = solid, label="mapping"];
3->4 [style = bold, label=""];
13->16 [style = bold, label=""];
32->10 [style = bold, label=""];
0->10 [style = solid, label="mapping"];
26->22 [style = bold, label=""];
31->34 [style = bold, label=""];
2->31 [style = dashed, label="0"];
7->14 [style = bold, label=""];
23->29 [style = bold, label=""];
8->1 [style = bold, label=""];
15->17 [style = bold, label=""];
0->10 [style = bold, label=""];
12->2 [style = bold, label=""];
4->30 [style = bold, label=""];
22->27 [style = bold, label=""];
20->34 [style = dashed, label="0"];
30->1 [style = solid, label="mapping"];
0->19 [style = solid, label="mapping"];
11->13 [style = bold, label=""];
25->26 [style = bold, label=""];
13->36 [style = bold, label=""];
16->36 [style = dashed, label="0"];
8->1 [style = solid, label="mapping"];
4->8 [style = bold, label=""];
33->32 [style = bold, label=""];
14->15 [style = bold, label=""];
8->30 [style = dashed, label="0"];
18->7 [style = bold, label=""];
35->13 [style = bold, label=""];
32->19 [style = solid, label="mapping"];
29->24 [style = bold, label=""];
24->7 [style = bold, label=""];
21->23 [style = bold, label=""];
19->3 [style = bold, label=""];
16->12 [style = bold, label=""];
12->31 [style = bold, label=""];
11->35 [style = dashed, label="0"];
17->35 [style = bold, label=""];
28->4 [style = bold, label=""];
17->11 [style = bold, label=""];
}
