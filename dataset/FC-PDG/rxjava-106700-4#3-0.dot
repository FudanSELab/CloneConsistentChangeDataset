digraph {
13 [style = filled, label = "startEmptyListBlocking['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final Object invoked = new Object()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Collection<Flowable<Object>> observables = Collections.emptyList()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Collection<Observable<Object>> observables = Collections.emptyList()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Observable<Object> o = Observable.zip(observables,new Function<Object((,Object>(){@Override public Object apply(final Object(( args){assertEquals(\"No argument should have been passed\",0,args.length)return invoked}})@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ts.assertNoValues()@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "o.blockingLast()@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "startEmptyList['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Flowable<Object> f = Flowable.zip(observables,new Function<Object((,Object>(){@Override public Object apply(final Object(( args){assertEquals(\"No argument should have been passed\",0,args.length)return invoked}})@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TestSubscriber<Object> ts = new TestSubscriber<>()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "f.subscribe(ts)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "TestSubscriber<Object> ts = new TestSubscriber<Object>()@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "ts.awaitDone(200,TimeUnit.MILLISECONDS)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "startEmptyList['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1->5 [style = bold, label=""];
5->0 [style = solid, label="observables"];
0->9 [style = bold, label=""];
5->12 [style = dashed, label="0"];
2->6 [style = bold, label=""];
12->10 [style = solid, label="observables"];
0->2 [style = bold, label=""];
7->3 [style = bold, label=""];
13->1 [style = bold, label=""];
0->10 [style = dashed, label="0"];
9->6 [style = bold, label=""];
8->1 [style = bold, label=""];
9->6 [style = solid, label="ts"];
12->10 [style = bold, label=""];
5->0 [style = bold, label=""];
2->9 [style = dashed, label="0"];
1->12 [style = bold, label=""];
1->10 [style = solid, label="invoked"];
4->1 [style = bold, label=""];
1->0 [style = solid, label="invoked"];
6->7 [style = bold, label=""];
2->6 [style = solid, label="ts"];
10->11 [style = bold, label=""];
}
