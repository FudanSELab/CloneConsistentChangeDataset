digraph {
3 [style = filled, label = "assertEquals(newMap(1,2,2,3),builder.getInt32ToInt32FieldMap())@@@11@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "builder.putInt32ToInt32Field(1,2)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "builder.putInt32ToInt32Field(2,3)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(newMap(1,2),message.getInt32ToInt32FieldMap())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "testSanityCopyOnWrite['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "TestMap message = builder.build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TestMap.Builder builder = TestMap.newBuilder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(builder.getInt32ToInt32FieldMap()).isEqualTo(newMap(1,2))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "message = builder.build()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testSanityCopyOnWrite['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testSanityCopyOnWrite['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertThat(message.getInt32ToInt32FieldMap()).isEqualTo(newMap(1,2))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertThat(builder.getInt32ToInt32FieldMap()).isEqualTo(newMap(1,2,2,3))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(newMap(1,2),message.getInt32ToInt32FieldMap())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(message.getInt32ToInt32FieldMap()).isEqualTo(newMap(1,2))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "message = builder.build()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(message.getInt32ToInt32FieldMap()).isEmpty()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(newMap(1,2),builder.getInt32ToInt32FieldMap())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTrue(message.getInt32ToInt32FieldMap().isEmpty())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->10 [style = bold, label=""];
4->3 [style = bold, label=""];
15->2 [style = bold, label=""];
7->17 [style = bold, label=""];
16->10 [style = bold, label=""];
0->11 [style = dashed, label="0"];
3->13 [style = dashed, label="0"];
2->4 [style = bold, label=""];
9->16 [style = bold, label=""];
11->15 [style = bold, label=""];
1->9 [style = bold, label=""];
0->7 [style = bold, label=""];
5->16 [style = dashed, label="0"];
8->1 [style = bold, label=""];
17->2 [style = bold, label=""];
7->2 [style = bold, label=""];
12->8 [style = bold, label=""];
10->0 [style = bold, label=""];
2->14 [style = bold, label=""];
6->8 [style = bold, label=""];
7->15 [style = dashed, label="0"];
9->5 [style = bold, label=""];
5->7 [style = bold, label=""];
4->14 [style = dashed, label="0"];
18->8 [style = bold, label=""];
14->13 [style = bold, label=""];
10->11 [style = bold, label=""];
}
