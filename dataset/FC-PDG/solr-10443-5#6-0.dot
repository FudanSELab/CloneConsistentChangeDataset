digraph {
33 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(2).getNodeName()))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
50 [style = filled, label = "List<Replica> replicas = getBasicReplicaList()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\"@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(0).getNodeName()))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "assertEquals(\"node3\",getHost(replicas.get(1).getNodeName()))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "NodePreferenceRulesComparator comparator = new NodePreferenceRulesComparator(rules,null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "assertEquals(\"node1\",replicas.get(0).getNodeName())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "rlt.transform(replicas)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "params.add(ShardParams.SHARDS_PREFERENCE,rulesParam)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "ModifiableSolrParams params = new ModifiableSolrParams()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(\"node3\",replicas.get(2).getNodeName())@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "replicaTypeAndReplicaLocationTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertEquals(\"node3\",getHost(replicas.get(0).getNodeName()))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "rlt = generator.getReplicaListTransformer(params)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"node1\",replicas.get(1).getNodeName())@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "testNodePreferenceRulesBase['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertEquals(\"node4\",replicas.get(1).getNodeName())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(1).getNodeName()))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "assertEquals(\"node3\",getHost(replicas.get(2).getNodeName()))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertEquals(\"node2\",replicas.get(1).getNodeName())@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testNodePreferenceRulesBase['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "rlt.transform(replicas)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "List<PreferenceRule> rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2_2\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"node2\",replicas.get(0).getNodeName())@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(1).getNodeName()))@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(0).getNodeName()))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(\"node3\",replicas.get(3).getNodeName())@@@11@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "params.set(\"routingPreference\",\"1\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "rlt.transform(replicas)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\"node2\",replicas.get(2).getNodeName())@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(0).getNodeName()))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "params.add(\"routingPreference\",\"0\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "replicas.add(new Replica(\"node4\",map(ZkStateReader.BASE_URL_PROP,\"http://host2_2:8983/solr\",ZkStateReader.NODE_NAME_PROP,\"node4\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"TLOG\"),\"collection1\",\"shard1\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "params.set(\"routingPreference\",\"2\")@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(2).getNodeName()))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(\"node1\",replicas.get(0).getNodeName())@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "assertEquals(\"node3\",getHost(replicas.get(2).getNodeName()))@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "ReplicaListTransformer rlt = generator.getReplicaListTransformer(params)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "replicas.sort(comparator)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "rlt.transform(replicas)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(\"node3\",replicas.get(1).getNodeName())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "assertEquals(\"node3\",replicas.get(2).getNodeName())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"node1\",replicas.get(2).getNodeName())@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "params.set(\"routingPreference\",\"3\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "rlt = generator.getReplicaListTransformer(params)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "rlt = generator.getReplicaListTransformer(params)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(\"node2\",replicas.get(1).getNodeName())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(1).getNodeName()))@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertEquals(\"node3\",replicas.get(0).getNodeName())@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
49 [style = filled, label = "assertEquals(\"node2\",replicas.get(2).getNodeName())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39->37 [style = bold, label=""];
9->39 [style = dashed, label="0"];
5->29 [style = bold, label=""];
1->46 [style = dashed, label="0"];
15->23 [style = bold, label=""];
23->25 [style = bold, label=""];
22->26 [style = solid, label="params"];
16->0 [style = bold, label=""];
27->36 [style = bold, label=""];
12->33 [style = dashed, label="0"];
43->50 [style = bold, label=""];
28->37 [style = dashed, label="0"];
10->36 [style = dashed, label="0"];
19->20 [style = bold, label=""];
11->44 [style = bold, label=""];
46->49 [style = bold, label=""];
8->3 [style = bold, label=""];
44->48 [style = solid, label="comparator"];
18->30 [style = bold, label=""];
4->30 [style = dashed, label="0"];
2->18 [style = bold, label=""];
36->32 [style = bold, label=""];
47->46 [style = bold, label=""];
10->17 [style = bold, label=""];
11->27 [style = solid, label="replicas"];
17->32 [style = dashed, label="0"];
40->34 [style = bold, label=""];
38->31 [style = bold, label=""];
28->12 [style = bold, label=""];
25->6 [style = bold, label=""];
29->42 [style = dashed, label="0"];
15->41 [style = dashed, label="0"];
11->18 [style = solid, label="replicas"];
3->27 [style = bold, label=""];
24->14 [style = bold, label=""];
26->21 [style = bold, label=""];
20->2 [style = bold, label=""];
9->28 [style = bold, label=""];
14->26 [style = bold, label=""];
45->11 [style = bold, label=""];
11->6 [style = solid, label="replicas"];
31->42 [style = bold, label=""];
22->2 [style = solid, label="params"];
6->38 [style = bold, label=""];
13->19 [style = bold, label=""];
21->9 [style = bold, label=""];
7->5 [style = bold, label=""];
35->0 [style = bold, label=""];
19->11 [style = dashed, label="0"];
18->4 [style = bold, label=""];
21->39 [style = bold, label=""];
1->24 [style = bold, label=""];
12->8 [style = bold, label=""];
44->48 [style = bold, label=""];
0->22 [style = bold, label=""];
27->10 [style = bold, label=""];
11->13 [style = bold, label=""];
48->47 [style = bold, label=""];
22->25 [style = solid, label="params"];
50->45 [style = bold, label=""];
17->15 [style = bold, label=""];
11->21 [style = solid, label="replicas"];
7->38 [style = dashed, label="0"];
5->31 [style = dashed, label="0"];
30->40 [style = bold, label=""];
32->41 [style = bold, label=""];
4->1 [style = bold, label=""];
34->14 [style = bold, label=""];
49->4 [style = bold, label=""];
22->3 [style = solid, label="params"];
13->20 [style = solid, label="rulesParam"];
6->7 [style = bold, label=""];
37->33 [style = bold, label=""];
41->23 [style = bold, label=""];
33->8 [style = bold, label=""];
24->34 [style = dashed, label="0"];
22->11 [style = bold, label=""];
1->40 [style = dashed, label="0"];
11->44 [style = solid, label="rules"];
}
