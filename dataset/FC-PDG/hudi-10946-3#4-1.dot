digraph {
38 [style = filled, label = "List<IndexedRecord> copyOfRecords2 = records2.stream().map(null).collect(Collectors.toList())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(copyOfRecords3.size(),dataBlockRead.getRecords().size(),\"Third records size should be equal to the written records size\")@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "dataBlock = getDataBlock(records2,header)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
53 [style = filled, label = "boolean readBlocksLazily@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "dataBlockRead = (HoodieAvroDataBlock)prevBlock@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
51 [style = filled, label = "assertTrue(reader.hasPrev(),\"Third block should be available\")@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "HoodieAvroDataBlock dataBlock = new HoodieAvroDataBlock(records1,header)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testBasicAppendAndReadInReverse['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "writer = writer.appendBlock(dataBlock)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "HoodieAvroDataBlock dataBlockRead = (HoodieAvroDataBlock)prevBlock@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "dataBlockRead = (HoodieDataBlock)prevBlock@@@38@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "assertTrue(reader.hasPrev(),\"Second block should be available\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "List<IndexedRecord> records1 = SchemaTestUtil.generateTestRecords(0,100)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(copyOfRecords3,dataBlockRead.getRecords(),\"Both records lists should be the same. (ordering guaranteed)\")@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "header.put(HoodieLogBlock.HeaderMetadataType.INSTANT_TIME,\"100\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "writer.close()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertEquals(copyOfRecords1,dataBlockRead.getRecords(),\"Both records lists should be the same. (ordering guaranteed)\")@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "assertTrue(reader.hasPrev(),\"First block should be available\")@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "dataBlock = new HoodieAvroDataBlock(records2,header)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "writer = writer.appendBlock(dataBlock)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "testBasicAppendAndTraverseInReverse['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertTrue(reader.hasPrev(),\"Last block should be available\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "HoodieAvroDataBlock dataBlockRead = (HoodieAvroDataBlock)prevBlock@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "assertEquals(copyOfRecords2.size(),dataBlockRead.getRecords().size(),\"Read records size should be equal to the written records size\")@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "List<IndexedRecord> records3 = SchemaTestUtil.generateTestRecords(0,100)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "dataBlock = new HoodieAvroDataBlock(records3,header)@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "boolean readBlocksLazily@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "prevBlock = reader.prev()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "testBasicAppendAndReadInReverse['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
48 [style = filled, label = "dataBlock = getDataBlock(records3,header)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "assertFalse(reader.hasPrev())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "reader.moveToPrev()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "reader.moveToPrev()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Schema schema = getSimpleSchema()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "writer = writer.appendBlock(dataBlock)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "writer = HoodieLogFormat.newWriterBuilder().onParentPath(partitionPath).withFileExtension(HoodieLogFile.DELTA_EXTENSION).withFileId(\"test-fileid1\").overBaseCommit(\"100\").withFs(fs).build()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "prevBlock = reader.prev()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "reader.close()@@@42@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Map<HoodieLogBlock.HeaderMetadataType,String> header = new HashMap<>()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<IndexedRecord> copyOfRecords3 = records3.stream().map(null).collect(Collectors.toList())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "header.put(HoodieLogBlock.HeaderMetadataType.SCHEMA,schema.toString())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "writer = HoodieLogFormat.newWriterBuilder().onParentPath(partitionPath).withFileExtension(HoodieLogFile.DELTA_EXTENSION).withFileId(\"test-fileid1\").overBaseCommit(\"100\").withFs(fs).build()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "HoodieDataBlock dataBlock = getDataBlock(records1,header)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertEquals(copyOfRecords1,dataBlockRead.getRecords(),\"Both records lists should be the same. (ordering guaranteed)\")@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "List<IndexedRecord> records2 = SchemaTestUtil.generateTestRecords(0,100)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "dataBlockRead = (HoodieDataBlock)prevBlock@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "writer.close()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "HoodieLogFileReader reader = new HoodieLogFileReader(fs,writer.getLogFile(),SchemaTestUtil.getSimpleSchema(),bufferSize,readBlocksLazily,true)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(copyOfRecords1.size(),dataBlockRead.getRecords().size(),\"Read records size should be equal to the written records size\")@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertFalse(reader.hasPrev())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "HoodieDataBlock dataBlockRead = (HoodieDataBlock)prevBlock@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Writer writer = HoodieLogFormat.newWriterBuilder().onParentPath(partitionPath).withFileExtension(HoodieLogFile.DELTA_EXTENSION).withFileId(\"test-fileid1\").overBaseCommit(\"100\").withFs(fs).build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "reader.close()@@@34@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "writer.close()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(copyOfRecords2,dataBlockRead.getRecords(),\"Both records lists should be the same. (ordering guaranteed)\")@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "List<IndexedRecord> copyOfRecords1 = records1.stream().map(null).collect(Collectors.toList())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertEquals(copyOfRecords1.size(),dataBlockRead.getRecords().size(),\"Read records size should be equal to the written records size\")@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "dataBlockRead = (HoodieAvroDataBlock)prevBlock@@@38@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "HoodieLogBlock prevBlock = reader.prev()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "HoodieLogBlock prevBlock = reader.prev()@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32->30 [style = solid, label="header"];
5->20 [style = bold, label=""];
23->51 [style = dashed, label="0"];
40->55 [style = bold, label=""];
40->55 [style = solid, label="prevBlock"];
59->57 [style = bold, label=""];
31->40 [style = dashed, label="0"];
26->40 [style = bold, label=""];
43->35 [style = solid, label="dataBlock"];
13->1 [style = bold, label=""];
22->30 [style = bold, label=""];
45->7 [style = bold, label=""];
20->27 [style = bold, label=""];
31->24 [style = solid, label="prevBlock"];
29->6 [style = bold, label=""];
48->1 [style = solid, label="dataBlock"];
38->30 [style = bold, label=""];
38->3 [style = solid, label="copyOfRecords2"];
21->54 [style = solid, label="copyOfRecords1"];
43->35 [style = bold, label=""];
21->17 [style = solid, label="copyOfRecords1"];
9->21 [style = bold, label=""];
15->41 [style = bold, label=""];
49->56 [style = bold, label=""];
36->59 [style = dashed, label="0"];
32->11 [style = bold, label=""];
48->1 [style = bold, label=""];
11->28 [style = bold, label=""];
6->13 [style = solid, label="records3"];
57->40 [style = bold, label=""];
39->34 [style = bold, label=""];
5->42 [style = solid, label="prevBlock"];
22->30 [style = solid, label="records2"];
0->29 [style = bold, label=""];
24->55 [style = dashed, label="0"];
17->37 [style = bold, label=""];
36->47 [style = solid, label="prevBlock"];
44->12 [style = bold, label=""];
14->34 [style = solid, label="readBlocksLazily"];
54->58 [style = bold, label=""];
22->43 [style = solid, label="records2"];
22->38 [style = bold, label=""];
6->4 [style = bold, label=""];
35->0 [style = bold, label=""];
24->45 [style = dashed, label="0"];
6->48 [style = solid, label="records3"];
47->41 [style = bold, label=""];
24->7 [style = bold, label=""];
32->13 [style = solid, label="header"];
52->54 [style = bold, label=""];
27->26 [style = bold, label=""];
19->33 [style = bold, label=""];
1->39 [style = bold, label=""];
36->15 [style = solid, label="prevBlock"];
46->16 [style = bold, label=""];
7->17 [style = bold, label=""];
23->5 [style = bold, label=""];
8->31 [style = bold, label=""];
58->8 [style = bold, label=""];
31->24 [style = bold, label=""];
25->9 [style = bold, label=""];
13->1 [style = solid, label="dataBlock"];
4->13 [style = bold, label=""];
44->12 [style = solid, label="dataBlock"];
13->48 [style = dashed, label="0"];
30->35 [style = solid, label="dataBlock"];
34->51 [style = bold, label=""];
50->53 [style = dotted, label="true"];
20->42 [style = dashed, label="0"];
30->35 [style = bold, label=""];
10->16 [style = bold, label=""];
40->36 [style = bold, label=""];
3->8 [style = bold, label=""];
6->13 [style = bold, label=""];
53->34 [style = solid, label="readBlocksLazily"];
2->12 [style = solid, label="dataBlock"];
42->27 [style = bold, label=""];
34->23 [style = bold, label=""];
55->52 [style = bold, label=""];
31->45 [style = solid, label="prevBlock"];
4->48 [style = bold, label=""];
56->59 [style = bold, label=""];
33->22 [style = bold, label=""];
38->43 [style = bold, label=""];
32->48 [style = solid, label="header"];
36->47 [style = bold, label=""];
14->53 [style = dashed, label="0"];
46->14 [style = dotted, label="true"];
15->47 [style = dashed, label="0"];
41->3 [style = bold, label=""];
36->15 [style = bold, label=""];
50->16 [style = bold, label=""];
16->25 [style = bold, label=""];
9->2 [style = solid, label="records1"];
32->43 [style = solid, label="header"];
9->44 [style = solid, label="records1"];
51->49 [style = bold, label=""];
5->20 [style = solid, label="prevBlock"];
30->43 [style = dashed, label="0"];
32->2 [style = solid, label="header"];
2->12 [style = bold, label=""];
10->14 [style = dotted, label="true"];
28->2 [style = bold, label=""];
21->32 [style = bold, label=""];
28->44 [style = bold, label=""];
37->18 [style = bold, label=""];
5->42 [style = bold, label=""];
12->19 [style = bold, label=""];
32->44 [style = solid, label="header"];
31->45 [style = bold, label=""];
4->26 [style = solid, label="copyOfRecords3"];
2->44 [style = dashed, label="0"];
}
