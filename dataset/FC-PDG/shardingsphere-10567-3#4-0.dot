digraph {
11 [style = filled, label = "assertDoSharding['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "sharingValueMap.put(\"order_id\",Arrays.asList(1,2))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertTrue(actual.containsAll(availableTargetNames))@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Collection<String> actual = complexInlineShardingAlgorithm.doSharding(availableTargetNames,shardingValue)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertDoSharding['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Map<String,Collection<Comparable<?>>> sharingValueMap = new HashMap<>(2,1)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertTrue(actual.size() == 1 && actual.contains(\"t_order_0_0\"))@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "sharingValueMap.put(\"order_id\",Collections.singletonList(2))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "List<String> availableTargetNames = Lists.newArrayList(\"t_order_0_0\",\"t_order_0_1\",\"t_order_1_0\",\"t_order_1_1\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Map<String,Collection<Comparable<?>>> sharingValueMap = new HashMap<>()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "sharingValueMap.put(\"type\",Collections.singletonList(2))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertDoShardingWithMultiValue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ComplexKeysShardingValue<Comparable<?>> shardingValue = new ComplexKeysShardingValue<>(\"t_order\",sharingValueMap,rangeShardingValueMap)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "sharingValueMap.put(\"type\",Arrays.asList(1,2))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Map<String,Range<Comparable<?>>> rangeShardingValueMap = Collections.emptyMap()@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Map<String,Range<Comparable<?>>> rangeShardingValueMap = new HashMap<>()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->8 [style = bold, label=""];
0->1 [style = solid, label="shardingValue"];
5->13 [style = dashed, label="0"];
4->9 [style = dashed, label="0"];
10->8 [style = bold, label=""];
6->13 [style = solid, label="availableTargetNames"];
3->14 [style = dashed, label="0"];
4->0 [style = solid, label="rangeShardingValueMap"];
9->0 [style = bold, label=""];
11->6 [style = bold, label=""];
0->1 [style = bold, label=""];
8->3 [style = bold, label=""];
6->10 [style = bold, label=""];
15->14 [style = bold, label=""];
9->0 [style = solid, label="rangeShardingValueMap"];
3->9 [style = bold, label=""];
8->15 [style = dashed, label="0"];
7->0 [style = solid, label="sharingValueMap"];
2->6 [style = bold, label=""];
6->1 [style = solid, label="availableTargetNames"];
7->15 [style = bold, label=""];
14->4 [style = bold, label=""];
6->7 [style = bold, label=""];
10->0 [style = solid, label="sharingValueMap"];
3->4 [style = bold, label=""];
7->10 [style = dashed, label="0"];
4->0 [style = bold, label=""];
12->6 [style = bold, label=""];
1->13 [style = bold, label=""];
1->5 [style = bold, label=""];
}
