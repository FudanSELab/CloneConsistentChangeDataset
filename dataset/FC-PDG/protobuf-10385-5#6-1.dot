digraph {
12 [style = filled, label = "ByteString.Output rawOutput = ByteString.newOutput()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "CodedOutputStream output = CodedOutputStream.newInstance(rawOutput,bytes.length)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "output.writeRawBytes(bytes)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "byte(( bytes = lorem.getBytes(\"UTF-8\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String lorem = \"Lorem ipsum dolor sit amet \"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertWithMessage(inputType.name()).that(lorem).isEqualTo(text)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(inputType.name(),lorem,text)@@@24@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "output.flush()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "String text = input.readStringRequireUtf8()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "output.writeRawVarint32(tag)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "output.writeRawVarint32(bytes.length)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "byte(( rawInput = rawOutput.toByteString().toByteArray()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "builder.append(lorem)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "StringBuilder builder = new StringBuilder()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "i += lorem.length()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testReadStringRequireUtf8['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testReadString['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testReadString['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "CodedInputStream input = inputType.newDecoder(rawInput)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertWithMessage(inputType.name()).that(tag).isEqualTo(input.readTag())@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertEquals(inputType.name(),tag,input.readTag())@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "lorem = builder.toString().substring(0,4096)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "int i = 0@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String text = input.readString()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "i < 4096@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "int tag = WireFormat.makeTag(1,WireFormat.WIRETYPE_LENGTH_DELIMITED)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18->7 [style = solid, label="i"];
20->13 [style = bold, label=""];
10->15 [style = bold, label=""];
9->2 [style = bold, label=""];
16->10 [style = bold, label=""];
0->17 [style = bold, label=""];
2->20 [style = solid, label="bytes"];
16->24 [style = bold, label=""];
0->17 [style = solid, label="rawInput"];
10->15 [style = solid, label="text"];
15->21 [style = dashed, label="0"];
24->15 [style = solid, label="text"];
16->23 [style = dashed, label="0"];
6->19 [style = bold, label=""];
7->4 [style = bold, label=""];
10->21 [style = bold, label=""];
1->7 [style = solid, label="i"];
12->6 [style = bold, label=""];
1->7 [style = bold, label=""];
17->23 [style = bold, label=""];
2->12 [style = bold, label=""];
3->18 [style = bold, label=""];
7->9 [style = bold, label=""];
11->4 [style = solid, label="lorem"];
15->17 [style = bold, label=""];
19->14 [style = solid, label="tag"];
8->20 [style = bold, label=""];
19->14 [style = bold, label=""];
11->3 [style = bold, label=""];
9->15 [style = solid, label="lorem"];
25->11 [style = bold, label=""];
10->21 [style = solid, label="text"];
19->16 [style = solid, label="tag"];
7->4 [style = dotted, label="true"];
23->10 [style = bold, label=""];
12->6 [style = solid, label="rawOutput"];
4->1 [style = bold, label=""];
14->8 [style = bold, label=""];
5->11 [style = bold, label=""];
18->7 [style = bold, label=""];
7->1 [style = dotted, label="true"];
21->17 [style = bold, label=""];
10->24 [style = dashed, label="0"];
22->11 [style = bold, label=""];
17->16 [style = bold, label=""];
13->0 [style = bold, label=""];
24->15 [style = bold, label=""];
}
