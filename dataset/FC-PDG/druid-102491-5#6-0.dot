digraph {
42 [style = filled, label = "supervisor = getSupervisor(2,1,true,\"PT1H\",null,null,false)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id2\"),anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expect(taskStorage.getStatus(\"id1\")).andReturn(Optional.of(TaskStatus.running(\"id1\"))).anyTimes()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "expect(taskClient.getStartTimeAsync(\"id2\")).andReturn(Futures.immediateFuture(startTime))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "supervisor.runInternal()@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "expect(taskStorage.getStatus(\"id3\")).andReturn(Optional.of(TaskStatus.running(\"id3\"))).anyTimes()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "testSuspendedRunningTasks['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final TaskLocation location2 = new TaskLocation(\"testHost2\",145,-1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final DateTime startTime = DateTimes.nowUtc()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Collection workItems = new ArrayList<>()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "supervisor = getSupervisor(2,1,true,\"PT1H\",null,null,false,true,kafkaHost)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of(id1,id2,id3)).anyTimes()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "verifyAll()@@@43@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Task id2 = createKafkaIndexTask(\"id2\",DATASOURCE,0,new KafkaPartitions(\"topic\",ImmutableMap.of(0,10L,1,20L,2,30L)),new KafkaPartitions(\"topic\",ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "expect(taskStorage.getTask(\"id3\")).andReturn(Optional.of(id3)).anyTimes()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "expect(taskClient.pauseAsync(\"id2\")).andReturn(Futures.immediateFuture(ImmutableMap.of(0,15L,1,25L,2,30L)))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testResetRunningTasks['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final TaskLocation location1 = new TaskLocation(\"testHost\",1234,-1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "expect(taskClient.getEndOffsets(\"id1\")).andReturn(ImmutableMap.of(0,10L,1,20L,2,30L))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "taskQueue.shutdown(\"id2\",\"DataSourceMetadata is not found while reset\")@@@42@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
53 [style = filled, label = "expectLastCall().times(2)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "reset(taskQueue,indexerMetadataStorageCoordinator)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "workItems.add(new TestTaskRunnerWorkItem(id1,null,location1))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "replayAll()@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "testResetRunningTasks['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "expect(taskRunner.getRunningTasks()).andReturn(workItems).anyTimes()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "taskQueue.shutdown(\"id3\")@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "taskRunner.registerListener(anyObject(),anyObject())@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "taskQueue.shutdown(\"id3\",\"DataSourceMetadata is not found while reset\")@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Task id3 = createKafkaIndexTask(\"id3\",DATASOURCE,0,new KafkaPartitions(\"topic\",ImmutableMap.of(0,10L,1,20L,2,30L)),new KafkaPartitions(\"topic\",ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "supervisor.resetInternal(null)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id3\"),anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "replay(taskQueue,indexerMetadataStorageCoordinator)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expect(taskStorage.getStatus(\"id2\")).andReturn(Optional.of(TaskStatus.running(\"id2\"))).anyTimes()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expect(taskClient.getStartTimeAsync(\"id3\")).andReturn(Futures.immediateFuture(startTime))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "taskQueue.shutdown(\"id2\")@@@42@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "Task id1 = createKafkaIndexTask(\"id1\",DATASOURCE,0,new KafkaPartitions(\"topic\",ImmutableMap.of(0,0L,1,0L,2,0L)),new KafkaPartitions(\"topic\",ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "verifyAll()@@@46@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "checkpoints.put(0,ImmutableMap.of(0,10L,1,20L,2,30L))@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "taskQueue.shutdown(\"id3\")@@@43@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "expect(taskClient.getStatusAsync(\"id2\")).andReturn(Futures.immediateFuture(KafkaIndexTask.Status.READING))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "supervisor.start()@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "expect(taskClient.getStatusAsync(\"id3\")).andReturn(Futures.immediateFuture(KafkaIndexTask.Status.READING))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "expect(taskClient.setEndOffsetsAsync(\"id2\",ImmutableMap.of(0,15L,1,25L,2,30L),true)).andReturn(Futures.immediateFuture(true))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "TreeMap<Integer,Map<Integer,Long>> checkpoints = new TreeMap<>()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "addSomeEvents(1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expect(taskClient.getStatusAsync(\"id1\")).andReturn(Futures.immediateFuture(KafkaIndexTask.Status.PUBLISHING))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "workItems.add(new TestTaskRunnerWorkItem(id2,null,location2))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "expect(taskStorage.getTask(\"id1\")).andReturn(Optional.of(id1)).anyTimes()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "expect(taskStorage.getTask(\"id2\")).andReturn(Optional.of(id2)).anyTimes()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33->7 [style = bold, label=""];
8->30 [style = bold, label=""];
46->3 [style = bold, label=""];
34->29 [style = bold, label=""];
20->13 [style = bold, label=""];
6->35 [style = bold, label=""];
13->32 [style = bold, label=""];
9->11 [style = bold, label=""];
28->10 [style = bold, label=""];
15->45 [style = bold, label=""];
25->52 [style = bold, label=""];
11->24 [style = solid, label="startTime"];
11->48 [style = bold, label=""];
12->45 [style = dashed, label="0"];
27->28 [style = bold, label=""];
42->17 [style = bold, label=""];
23->43 [style = bold, label=""];
26->47 [style = dashed, label="0"];
16->34 [style = bold, label=""];
26->20 [style = bold, label=""];
39->24 [style = bold, label=""];
51->53 [style = bold, label=""];
12->26 [style = bold, label=""];
11->42 [style = bold, label=""];
53->31 [style = bold, label=""];
28->37 [style = solid, label="id2"];
48->17 [style = bold, label=""];
22->23 [style = bold, label=""];
35->21 [style = bold, label=""];
42->48 [style = dashed, label="0"];
24->14 [style = bold, label=""];
25->31 [style = bold, label=""];
21->2 [style = bold, label=""];
3->1 [style = solid, label="location1"];
3->9 [style = bold, label=""];
40->1 [style = bold, label=""];
9->37 [style = solid, label="location2"];
11->14 [style = solid, label="startTime"];
38->18 [style = bold, label=""];
36->0 [style = bold, label=""];
5->41 [style = bold, label=""];
31->6 [style = bold, label=""];
44->4 [style = bold, label=""];
18->5 [style = bold, label=""];
0->22 [style = bold, label=""];
50->51 [style = bold, label=""];
2->15 [style = bold, label=""];
47->20 [style = bold, label=""];
45->47 [style = bold, label=""];
10->40 [style = bold, label=""];
49->3 [style = bold, label=""];
4->8 [style = bold, label=""];
52->50 [style = bold, label=""];
29->38 [style = bold, label=""];
15->12 [style = bold, label=""];
27->1 [style = solid, label="id1"];
17->27 [style = bold, label=""];
41->39 [style = bold, label=""];
37->33 [style = bold, label=""];
43->25 [style = bold, label=""];
30->16 [style = bold, label=""];
19->3 [style = bold, label=""];
7->44 [style = bold, label=""];
1->37 [style = bold, label=""];
14->36 [style = bold, label=""];
}
