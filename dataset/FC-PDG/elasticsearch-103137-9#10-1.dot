digraph {
10 [style = filled, label = "testDisableNorms['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertFalse(fields(0(.fieldType().omitNorms())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(0,fieldNamesFields.length)@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",\"keyword\").field(\"doc_values\",false).field(\"norms\",true).endObject().endObject().endObject().endObject())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "DocumentMapper mapper = parser.parse(\"type\",new CompressedXContent(mapping))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "IndexableField(( fieldNamesFields = doc.rootDoc().getFields(FieldNamesFieldMapper.NAME)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",\"text\").field(\"norms\",false).endObject().endObject().endObject().endObject())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertEquals(1,fields.length)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ParsedDocument doc = mapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"1234\").endObject()),XContentType.JSON))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\").startObject(\"properties\").startObject(\"field\").field(\"type\",\"text\").field(\"norms\",false).endObject().endObject().endObject().endObject())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "DocumentMapper mapper = parser.parse(\"_doc\",new CompressedXContent(mapping))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertTrue(fields(0(.fieldType().omitNorms())@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testDisableNorms['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testEnableNorms['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "IndexableField(( fields = doc.rootDoc().getFields(\"field\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(mapping,mapper.mappingSource().toString())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->8 [style = dashed, label="0"];
8->4 [style = solid, label="mapping"];
11->14 [style = bold, label=""];
14->4 [style = solid, label="mapping"];
9->4 [style = bold, label=""];
2->3 [style = bold, label=""];
6->0 [style = solid, label="mapping"];
6->0 [style = bold, label=""];
3->15 [style = bold, label=""];
6->14 [style = dashed, label="0"];
6->4 [style = solid, label="mapping"];
12->13 [style = bold, label=""];
5->6 [style = bold, label=""];
10->8 [style = bold, label=""];
14->0 [style = bold, label=""];
3->7 [style = bold, label=""];
0->4 [style = bold, label=""];
8->9 [style = bold, label=""];
7->15 [style = dashed, label="0"];
4->1 [style = bold, label=""];
1->2 [style = bold, label=""];
14->0 [style = solid, label="mapping"];
15->12 [style = bold, label=""];
0->9 [style = dashed, label="0"];
8->9 [style = solid, label="mapping"];
}
