digraph {
4 [style = filled, label = "TestSubscriber<Object> ts = new TestSubscriber<Object>()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "just['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "to.assertNoErrors()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "TestObserver<Object> to = new TestObserver<Object>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "to.assertNotComplete()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ts.assertNoErrors()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "just['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "to.assertValue(2)@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "ts.assertNotComplete()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Flowable.just(1).flatMap(new Function<Integer,Flowable<Object>>(){@Override public Flowable<Object> apply(Integer item){return Flowable.just((Object)(item + 1))}},new Function<Throwable,Flowable<Object>>(){@Override public Flowable<Object> apply(Throwable e){return Flowable.error(e)}},new Supplier<Flowable<Object>>(){@Override public Flowable<Object> get(){return Flowable.never()}}).subscribe(ts)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "just['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "ts.assertValue(2)@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Observable.just(1).flatMap(new Function<Integer,Observable<Object>>(){@Override public Observable<Object> apply(Integer item){return Observable.just((Object)(item + 1))}},new Function<Throwable,Observable<Object>>(){@Override public Observable<Object> apply(Throwable e){return Observable.error(e)}},new Supplier<Observable<Object>>(){@Override public Observable<Object> get(){return Observable.never()}}).subscribe(to)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "TestSubscriber<Object> ts = new TestSubscriber<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6->3 [style = bold, label=""];
4->3 [style = bold, label=""];
6->3 [style = solid, label="ts"];
2->1 [style = bold, label=""];
0->2 [style = bold, label=""];
10->9 [style = solid, label="to"];
4->6 [style = dashed, label="0"];
9->8 [style = bold, label=""];
3->0 [style = bold, label=""];
1->13 [style = dashed, label="0"];
4->3 [style = solid, label="ts"];
12->10 [style = bold, label=""];
3->9 [style = dashed, label="0"];
5->4 [style = bold, label=""];
11->13 [style = bold, label=""];
7->6 [style = bold, label=""];
0->8 [style = dashed, label="0"];
2->11 [style = dashed, label="0"];
10->9 [style = bold, label=""];
4->10 [style = dashed, label="0"];
8->11 [style = bold, label=""];
}
