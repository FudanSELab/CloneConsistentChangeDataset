digraph {
10 [style = filled, label = "MyDialLayerChangeListener l1 = new MyDialLayerChangeListener()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testCloning['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(c1 != c2)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(c1.equals(c2))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testCloning['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "testSerialization['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertFalse(c2.hasListener(l1))@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "DialCap c2 = (DialCap)c1.clone()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(c1.getClass() == c2.getClass())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(c1,c2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "c1.setOutlinePaint(new GradientPaint(1.0f,2.0f,Color.WHITE,3.0f,4.0f,Color.GRAY))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "c1.setFillPaint(new GradientPaint(1.0f,2.0f,Color.BLUE,3.0f,4.0f,Color.GREEN))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "c2 = (DialCap)TestUtils.serialised(c1)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "c1.setOutlinePaint(new GradientPaint(1.0f,2.0f,Color.WHITE,3.0f,4.0f,Color.gray))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "c1.addChangeListener(l1)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "DialCap c1 = new DialCap()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(c1.getClass() == c2.getClass())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "c1.setOutlineStroke(new BasicStroke(2.0f))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(c1,c2)@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertTrue(c1.equals(c2))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "c1.setFillPaint(new GradientPaint(1.0f,2.0f,Color.BLUE,3.0f,4.0f,Color.green))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "c2 = (DialCap)c1.clone()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(c1.hasListener(l1))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "c1 = new DialCap()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertTrue(c1 != c2)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "DialCap c2 = (DialCap)TestUtils.serialised(c1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->17 [style = bold, label=""];
16->15 [style = bold, label=""];
8->12 [style = solid, label="c1"];
19->18 [style = bold, label=""];
8->21 [style = solid, label="c1"];
25->22 [style = bold, label=""];
22->6 [style = solid, label="c1"];
7->10 [style = bold, label=""];
10->5 [style = solid, label="l1"];
3->14 [style = bold, label=""];
10->4 [style = solid, label="l1"];
17->15 [style = solid, label="c1"];
16->7 [style = solid, label="c2"];
1->21 [style = dashed, label="0"];
22->14 [style = solid, label="c1"];
21->25 [style = bold, label=""];
10->11 [style = solid, label="l1"];
23->8 [style = bold, label=""];
9->7 [style = bold, label=""];
17->19 [style = bold, label=""];
8->25 [style = solid, label="c1"];
14->6 [style = solid, label="c2"];
3->19 [style = dashed, label="0"];
8->1 [style = bold, label=""];
12->13 [style = bold, label=""];
20->8 [style = bold, label=""];
12->25 [style = dashed, label="0"];
10->5 [style = bold, label=""];
1->12 [style = solid, label="c2"];
18->6 [style = bold, label=""];
6->16 [style = bold, label=""];
15->9 [style = bold, label=""];
16->15 [style = solid, label="c2"];
5->4 [style = bold, label=""];
16->14 [style = dashed, label="0"];
24->17 [style = bold, label=""];
0->8 [style = bold, label=""];
1->12 [style = bold, label=""];
17->3 [style = bold, label=""];
15->6 [style = dashed, label="0"];
8->21 [style = bold, label=""];
22->24 [style = bold, label=""];
14->18 [style = dashed, label="0"];
4->11 [style = bold, label=""];
21->25 [style = solid, label="c2"];
14->6 [style = bold, label=""];
1->2 [style = solid, label="c2"];
13->2 [style = bold, label=""];
}
