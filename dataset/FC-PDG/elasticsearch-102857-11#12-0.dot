digraph {
7 [style = filled, label = "assertThat(doc.getBinaryValue(docMapper.idFieldMapper().name()),equalTo(Uid.encodeId(\"1\")))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Document doc = builtDocMapper.parse(new SourceToParse(\"test\",\"1\",json,XContentType.JSON)).rootDoc()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "String builtMapping = docMapper.mappingSource().string()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(doc.getBinaryValue(docMapper.idFieldMapper().name()),equalTo(Uid.encodeId(\"1\")))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(doc.get(docMapper.mappers().getMapper(\"name.first\").name()),equalTo(\"shay\"))@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "BytesReference json = new BytesArray(copyToBytesFromClasspath(\"/org/elasticsearch/index/mapper/simple/test1-notype-noid.json\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "DocumentMapper builtDocMapper = parser.parse(\"person\",new CompressedXContent(builtMapping))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Document doc = docMapper.parse(new SourceToParse(\"test\",\"1\",json,XContentType.JSON)).rootDoc()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/simple/test-mapping.json\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testParseToJsonAndParse['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testParseToJsonAndParse['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "testSimpleParserNoTypeNoId['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(doc.get(docMapper.mappers().getMapper(\"name.first\").name()),equalTo(\"shay\"))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"person\",new CompressedXContent(mapping))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "DocumentMapper builtDocMapper = parser.parse(\"_doc\",new CompressedXContent(builtMapping))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "DocumentMapperParser parser = createIndex(\"test\").mapperService().documentMapperParser()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "DocumentMapper docMapper = parser.parse(\"person\",new CompressedXContent(mapping))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "BytesReference json = new BytesArray(copyToBytesFromClasspath(\"/org/elasticsearch/index/mapper/simple/test1.json\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->9 [style = bold, label=""];
0->1 [style = solid, label="builtMapping"];
4->13 [style = bold, label=""];
1->3 [style = bold, label=""];
4->5 [style = solid, label="mapping"];
0->11 [style = bold, label=""];
3->6 [style = bold, label=""];
16->17 [style = bold, label=""];
0->17 [style = dashed, label="0"];
13->16 [style = bold, label=""];
5->0 [style = bold, label=""];
11->3 [style = bold, label=""];
17->14 [style = bold, label=""];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
1->11 [style = dashed, label="0"];
14->12 [style = bold, label=""];
9->13 [style = dashed, label="0"];
15->4 [style = bold, label=""];
10->4 [style = bold, label=""];
9->5 [style = bold, label=""];
8->4 [style = bold, label=""];
6->7 [style = bold, label=""];
4->13 [style = solid, label="mapping"];
0->11 [style = solid, label="builtMapping"];
}
