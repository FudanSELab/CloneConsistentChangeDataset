digraph {
14 [style = filled, label = "XYSeries<String> s1 = new XYSeries<>(\"S1\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "s1.add(2.0,2.2)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(1.0,s1.getMinX(),EPSILON)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(1.1,s1.getMinY(),EPSILON)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "s1.add(1.0,1.1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(1.1,s1.getMinY(),EPSILON)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(-1.1,s1.getMinY(),EPSILON)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testGetMinY['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "s1.add(0.0,null)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(1.0,s1.getMinX(),EPSILON)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(Double.isNaN(s1.getMinX()))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testGetMinX['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "XYSeries s1 = new XYSeries(\"S1\")@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "s1.add(-1.0,-1.1)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(-1.1,s1.getMinY(),EPSILON)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testGetMinX['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(-1.0,s1.getMinX(),EPSILON)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "s1.add(Double.NaN,99.9)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(-1.0,s1.getMinX(),EPSILON)@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(1.0,s1.getMinX(),EPSILON)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(1.1,s1.getMinY(),EPSILON)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertTrue(Double.isNaN(s1.getMinY()))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17->10 [style = bold, label=""];
6->21 [style = dashed, label="0"];
4->3 [style = bold, label=""];
1->4 [style = bold, label=""];
2->20 [style = bold, label=""];
9->16 [style = dashed, label="0"];
7->17 [style = bold, label=""];
11->20 [style = dashed, label="0"];
5->9 [style = bold, label=""];
9->2 [style = bold, label=""];
8->18 [style = bold, label=""];
7->14 [style = dashed, label="0"];
4->15 [style = bold, label=""];
7->0 [style = bold, label=""];
1->18 [style = dashed, label="0"];
10->21 [style = bold, label=""];
16->2 [style = bold, label=""];
0->17 [style = dashed, label="0"];
10->6 [style = bold, label=""];
12->7 [style = bold, label=""];
5->16 [style = bold, label=""];
8->1 [style = bold, label=""];
21->5 [style = bold, label=""];
6->5 [style = bold, label=""];
0->10 [style = bold, label=""];
20->8 [style = bold, label=""];
18->4 [style = bold, label=""];
14->0 [style = bold, label=""];
3->15 [style = dashed, label="0"];
11->8 [style = bold, label=""];
13->14 [style = bold, label=""];
19->7 [style = bold, label=""];
2->11 [style = bold, label=""];
}
