digraph {
22 [style = filled, label = "rlt.transform(replicas)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(2).getNodeName()))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "rlt = generator.getReplicaListTransformer(params)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "rlt = generator.getReplicaListTransformer(params)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "params.set(\"routingPreference\",\"1\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(2).getNodeName()))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(0).getNodeName()))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "replicas.add(new Replica(\"node4\",map(ZkStateReader.NODE_NAME_PROP,\"node4:8983_solr\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"TLOG\"),\"collection1\",\"shard1\"))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "List<Replica> replicas = getBasicReplicaList()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\"node3\",getHost(replicas.get(1).getNodeName()))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(1).getNodeName()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "params.set(\"routingPreference\",\"2\")@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "params.add(ShardParams.SHARDS_PREFERENCE,rulesParam)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(1).getNodeName()))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertEquals(\"node3\",getHost(replicas.get(2).getNodeName()))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "params.set(\"routingPreference\",\"3\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "rlt.transform(replicas)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(1).getNodeName()))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "ReplicaListTransformer rlt = generator.getReplicaListTransformer(params)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "NodePreferenceRulesComparator comparator = new NodePreferenceRulesComparator(rules,null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testNodePreferenceRulesBase['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(\"node4\",getHost(replicas.get(1).getNodeName()))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "params.add(\"routingPreference\",\"0\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "replicaTypeAndReplicaLocationTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "rlt.transform(replicas)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertEquals(\"node3\",getHost(replicas.get(2).getNodeName()))@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(\"node3\",getHost(replicas.get(0).getNodeName()))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(0).getNodeName()))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "replicas.sort(comparator)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(2).getNodeName()))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "rlt.transform(replicas)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "replicas.add(new Replica(\"node4\",Map.of(ZkStateReader.NODE_NAME_PROP,\"node4:8983_solr\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"TLOG\"),\"collection1\",\"shard1\"))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "List<Replica> replicas = getBasicReplicaList()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "replicaTypeAndReplicaLocationTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(0).getNodeName()))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "rlt = generator.getReplicaListTransformer(params)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(0).getNodeName()))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ModifiableSolrParams params = new ModifiableSolrParams()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\"@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24->26 [style = solid, label="rulesParam"];
14->25 [style = bold, label=""];
3->1 [style = bold, label=""];
34->19 [style = bold, label=""];
3->24 [style = bold, label=""];
9->4 [style = bold, label=""];
38->29 [style = bold, label=""];
0->2 [style = bold, label=""];
8->3 [style = bold, label=""];
35->39 [style = bold, label=""];
25->18 [style = bold, label=""];
3->1 [style = solid, label="rules"];
19->27 [style = solid, label="params"];
12->20 [style = bold, label=""];
19->23 [style = solid, label="params"];
32->14 [style = bold, label=""];
3->14 [style = solid, label="replicas"];
15->30 [style = bold, label=""];
36->26 [style = bold, label=""];
20->6 [style = bold, label=""];
29->23 [style = bold, label=""];
19->12 [style = solid, label="params"];
1->9 [style = solid, label="comparator"];
1->9 [style = bold, label=""];
31->34 [style = bold, label=""];
28->32 [style = bold, label=""];
24->36 [style = bold, label=""];
26->12 [style = bold, label=""];
27->37 [style = bold, label=""];
13->27 [style = bold, label=""];
23->22 [style = bold, label=""];
30->28 [style = bold, label=""];
3->22 [style = solid, label="replicas"];
11->3 [style = bold, label=""];
6->33 [style = bold, label=""];
7->6 [style = bold, label=""];
5->33 [style = dashed, label="0"];
17->15 [style = bold, label=""];
22->17 [style = bold, label=""];
5->7 [style = bold, label=""];
33->38 [style = bold, label=""];
10->2 [style = bold, label=""];
9->12 [style = dashed, label="0"];
18->21 [style = bold, label=""];
16->35 [style = bold, label=""];
3->37 [style = solid, label="replicas"];
8->11 [style = dashed, label="0"];
19->32 [style = solid, label="params"];
3->20 [style = solid, label="replicas"];
4->5 [style = bold, label=""];
19->3 [style = bold, label=""];
2->11 [style = bold, label=""];
37->16 [style = bold, label=""];
2->8 [style = bold, label=""];
21->13 [style = bold, label=""];
}
