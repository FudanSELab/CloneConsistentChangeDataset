digraph {
18 [style = filled, label = "assertEquals(\"Classfileset did not pick up expected number of \" + \"class files\",5,files.size())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Hashtable files = new Hashtable()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "files.put(scannedFile,scannedFile)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testBasicSet['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Hashtable<String,String> files = new Hashtable<>()@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertTrue(\"Result did not contain C.class\",files.containsKey(\"C.class\"))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "DirectoryScanner scanner = resultFileSet.getDirectoryScanner(p)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(\"Result did not contain A.class\",files.containsKey(\"A.class\"))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"Classfileset did not pick up expected number of \" + \"class files\",4,files.size())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(\"Result did not contain E.class\",files.containsKey(\"E.class\"))@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(\"Result did not contain D.class\",files.containsKey(\"D.class\"))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testBasicSet['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Project p = buildRule.getProject()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "FileSet resultFileSet = p.getReference(RESULT_FILESET)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "buildRule.executeTarget(\"testmethodparam\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "String(( scannedFiles = scanner.getIncludedFiles()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "buildRule.executeTarget(\"testbasicset\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testMethodParam['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertTrue(\"Result did not contain B.class\",files.containsKey(\"B.class\"))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->18 [style = bold, label=""];
8->14 [style = bold, label=""];
5->8 [style = bold, label=""];
16->4 [style = bold, label=""];
18->2 [style = bold, label=""];
13->0 [style = bold, label=""];
0->7 [style = bold, label=""];
6->14 [style = dashed, label="0"];
11->0 [style = bold, label=""];
12->2 [style = bold, label=""];
4->5 [style = bold, label=""];
0->5 [style = solid, label="p"];
14->9 [style = bold, label=""];
2->10 [style = bold, label=""];
8->6 [style = bold, label=""];
6->9 [style = bold, label=""];
10->1 [style = bold, label=""];
12->18 [style = dashed, label="0"];
3->17 [style = bold, label=""];
1->3 [style = bold, label=""];
15->0 [style = bold, label=""];
7->4 [style = bold, label=""];
7->16 [style = dashed, label="0"];
9->12 [style = bold, label=""];
0->16 [style = bold, label=""];
}
