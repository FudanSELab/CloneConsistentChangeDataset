digraph {
1 [style = filled, label = "DocumentMapper docMapper = parser.parse(\"person\",new CompressedXContent(mapping))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(doc.get(docMapper.mappers().getMapper(\"name.first\").name()),equalTo(\"shay\"))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"person\",new CompressedXContent(mapping))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "DocumentMapperParser parser = createIndex(\"test\").mapperService().documentMapperParser()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(doc.get(docMapper.mappers().getMapper(\"name.first\").name()),equalTo(\"shay\"))@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat((String)docMapper.meta().get(\"param1\"),equalTo(\"value1\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/simple/test-mapping.json\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Document doc = builtDocMapper.parse(new SourceToParse(\"test\",\"1\",json,XContentType.JSON)).rootDoc()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(doc.getBinaryValue(docMapper.idFieldMapper().name()),equalTo(Uid.encodeId(\"1\")))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testSimpleParser['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "BytesReference json = new BytesArray(copyToBytesFromClasspath(\"/org/elasticsearch/index/mapper/simple/test1.json\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testParseToJsonAndParse['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Document doc = docMapper.parse(new SourceToParse(\"test\",\"1\",json,XContentType.JSON)).rootDoc()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testParseToJsonAndParse['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "DocumentMapper builtDocMapper = parser.parse(\"_doc\",new CompressedXContent(builtMapping))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertThat(doc.getBinaryValue(docMapper.idFieldMapper().name()),equalTo(Uid.encodeId(\"1\")))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "DocumentMapper builtDocMapper = parser.parse(\"person\",new CompressedXContent(builtMapping))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "String builtMapping = docMapper.mappingSource().string()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->16 [style = bold, label=""];
4->16 [style = dashed, label="0"];
0->16 [style = solid, label="mapping"];
6->0 [style = bold, label=""];
16->17 [style = bold, label=""];
9->10 [style = bold, label=""];
10->7 [style = bold, label=""];
12->7 [style = bold, label=""];
7->3 [style = bold, label=""];
1->9 [style = bold, label=""];
7->14 [style = bold, label=""];
0->1 [style = solid, label="mapping"];
11->0 [style = bold, label=""];
3->12 [style = dashed, label="0"];
8->2 [style = bold, label=""];
5->10 [style = dashed, label="0"];
0->4 [style = bold, label=""];
3->8 [style = bold, label=""];
17->15 [style = bold, label=""];
9->5 [style = bold, label=""];
5->7 [style = bold, label=""];
4->1 [style = bold, label=""];
15->12 [style = bold, label=""];
9->10 [style = solid, label="builtMapping"];
9->5 [style = solid, label="builtMapping"];
13->0 [style = bold, label=""];
}
