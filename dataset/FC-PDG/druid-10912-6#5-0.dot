digraph {
5 [style = filled, label = "Assert.assertNull(Iterables.getOnlyElement(filteredBatchServerInventoryView.getInventory()).getSegment(segment1.getId()))@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(testSegments,Sets.newHashSet(server.getSegments()))@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "int prevUpdateCount = inventoryUpdateCounter.get()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testSegments.add(segment2)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testSegments.add(segment1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "waitForSync(batchServerInventoryView,testSegments)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "segmentAnnouncer.announceSegment(segment2)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "waitForUpdateEvents(prevUpdateCount + 1)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testRun['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "waitForSync(batchServerInventoryView,testSegments)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "DruidServer server = Iterables.get(batchServerInventoryView.getInventory(),0)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(testSegments,segments)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Set<DataSegment> segments = Sets.newHashSet(server.getSegments())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testSegments.remove(segment2)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "DataSegment segment2 = makeSegment(102)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "segmentAnnouncer.announceSegments(testSegments)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testRunWithFilter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "DataSegment segment1 = makeSegment(101)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(testSegments,Sets.newHashSet(server.getSegments()))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "waitForSync(filteredBatchServerInventoryView,testSegments)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "waitForSync(batchServerInventoryView,testSegments)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Set<DataSegment> segments = Sets.newHashSet(server.iterateAllSegments())@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "segmentAnnouncer.unannounceSegment(segment1)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testRunWithFilter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testSegments.remove(segment1)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "segmentAnnouncer.announceSegment(segment1)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "DruidServer server = Iterables.get(filteredBatchServerInventoryView.getInventory(),0)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "segmentAnnouncer.unannounceSegment(segment2)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->7 [style = bold, label=""];
13->7 [style = bold, label=""];
10->2 [style = bold, label=""];
10->18 [style = dashed, label="0"];
18->2 [style = bold, label=""];
8->0 [style = bold, label=""];
0->22 [style = bold, label=""];
2->11 [style = bold, label=""];
16->18 [style = bold, label=""];
11->0 [style = bold, label=""];
22->3 [style = bold, label=""];
25->26 [style = bold, label=""];
7->16 [style = bold, label=""];
22->19 [style = solid, label="segment2"];
24->17 [style = bold, label=""];
4->16 [style = dashed, label="0"];
15->19 [style = bold, label=""];
0->3 [style = bold, label=""];
21->24 [style = bold, label=""];
26->27 [style = bold, label=""];
27->20 [style = bold, label=""];
3->6 [style = bold, label=""];
10->12 [style = bold, label=""];
6->9 [style = bold, label=""];
6->21 [style = bold, label=""];
3->23 [style = bold, label=""];
19->25 [style = bold, label=""];
0->6 [style = solid, label="segment1"];
0->3 [style = solid, label="segment1"];
22->21 [style = solid, label="segment2"];
22->26 [style = solid, label="segment2"];
23->6 [style = bold, label=""];
17->15 [style = bold, label=""];
11->8 [style = bold, label=""];
7->4 [style = bold, label=""];
12->11 [style = solid, label="segments"];
4->10 [style = bold, label=""];
12->11 [style = bold, label=""];
1->7 [style = bold, label=""];
2->11 [style = solid, label="segments"];
22->23 [style = solid, label="segment2"];
0->15 [style = solid, label="segment1"];
8->9 [style = solid, label="prevUpdateCount"];
9->5 [style = bold, label=""];
0->25 [style = solid, label="segment1"];
2->12 [style = dashed, label="0"];
}
