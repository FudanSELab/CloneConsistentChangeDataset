digraph {
13 [style = filled, label = "testStreamTaskLogWithoutOffset['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "final String logPath = PREFIX + \"/\" + TASKID@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "verifyAll()@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "EasyMock.expect(storage.get(BUCKET,logPath,0)).andReturn(new ByteArrayInputStream(StringUtils.toUtf8(testLog)))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "EasyMock.expect(storage.size(BUCKET,logPath)).andReturn((long)testLog.length())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final String testLog = \"hello this is a log\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testStreamTaskLogWithoutOffset['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(writer.toString(),testLog)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "IOUtils.copy(byteSource.get().openStream(),writer,\"UTF-8\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EasyMock.expect(storage.exists(BUCKET,logPath)).andReturn(true)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final Optional<ByteSource> byteSource = googleTaskLogs.streamTaskLog(TASKID,5)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(writer.toString(),testLog.substring(5))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testStreamTaskLogWithPositiveOffset['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final StringWriter writer = new StringWriter()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "EasyMock.expect(storage.get(BUCKET,logPath)).andReturn(new ByteArrayInputStream(StringUtils.toUtf8(testLog)))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "replayAll()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final Optional<ByteSource> byteSource = googleTaskLogs.streamTaskLog(TASKID,0)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3->0 [style = solid, label="testLog"];
8->16 [style = dashed, label="0"];
11->4 [style = bold, label=""];
1->10 [style = bold, label=""];
10->14 [style = dashed, label="0"];
10->9 [style = bold, label=""];
12->2 [style = bold, label=""];
14->9 [style = bold, label=""];
1->14 [style = bold, label=""];
7->1 [style = solid, label="writer"];
3->5 [style = bold, label=""];
2->8 [style = bold, label=""];
5->11 [style = bold, label=""];
6->3 [style = bold, label=""];
4->12 [style = bold, label=""];
15->3 [style = bold, label=""];
13->3 [style = bold, label=""];
8->7 [style = bold, label=""];
2->16 [style = bold, label=""];
16->7 [style = bold, label=""];
3->10 [style = solid, label="testLog"];
7->1 [style = bold, label=""];
0->2 [style = bold, label=""];
3->12 [style = solid, label="testLog"];
4->0 [style = bold, label=""];
0->12 [style = dashed, label="0"];
}
