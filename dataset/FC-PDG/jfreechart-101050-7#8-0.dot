digraph {
6 [style = filled, label = "testCloning['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(v1.getClass() == v2.getClass())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "v1 = new DefaultKeyedValue<>(\"Test 1\",45.5)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testCloning['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertTrue(v2.equals(v1))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "v2 = new DefaultKeyedValue<>(\"Test 2\",45.5)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertFalse(v1.equals(v2))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "v2.setValue(\"V1\",new Integer(44))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertTrue(v1.equals(v2))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testEquals['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "DefaultKeyedValues<String> v2 = (DefaultKeyedValues)v1.clone()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "v1.addValue(\"V1\",new Integer(1))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "DefaultKeyedValue<String> v2 = new DefaultKeyedValue<>(\"Test\",45.5)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "v1 = new DefaultKeyedValue<>(\"Test\",45.5)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertFalse(v1.equals(v2))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertFalse(v1.equals(v2))@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "DefaultKeyedValues v1 = new DefaultKeyedValues()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "DefaultKeyedValues<String> v1 = new DefaultKeyedValues<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "v2 = new DefaultKeyedValue<>(\"Test\",45.6)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertTrue(v1 != v2)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "v1.addValue(\"V3\",new Integer(3))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "v1.addValue(\"V2\",null)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "DefaultKeyedValues v2 = (DefaultKeyedValues)v1.clone()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "DefaultKeyedValue<String> v1 = new DefaultKeyedValue<>(\"Test\",45.5)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->10 [style = bold, label=""];
5->8 [style = bold, label=""];
10->7 [style = solid, label="v2"];
9->0 [style = bold, label=""];
18->22 [style = solid, label="v2"];
1->19 [style = dashed, label="0"];
10->12 [style = dashed, label="0"];
1->3 [style = bold, label=""];
10->9 [style = solid, label="v2"];
12->9 [style = solid, label="v2"];
14->19 [style = bold, label=""];
1->9 [style = solid, label="v1"];
21->23 [style = solid, label="v2"];
12->9 [style = bold, label=""];
2->4 [style = bold, label=""];
22->7 [style = bold, label=""];
13->9 [style = solid, label="v1"];
19->16 [style = bold, label=""];
0->7 [style = bold, label=""];
1->13 [style = dashed, label="0"];
6->1 [style = bold, label=""];
15->17 [style = bold, label=""];
7->5 [style = bold, label=""];
18->22 [style = bold, label=""];
3->2 [style = bold, label=""];
13->3 [style = bold, label=""];
19->15 [style = solid, label="v1"];
11->13 [style = bold, label=""];
4->12 [style = bold, label=""];
7->21 [style = bold, label=""];
10->9 [style = bold, label=""];
12->8 [style = solid, label="v2"];
10->8 [style = solid, label="v2"];
16->20 [style = solid, label="v2"];
16->20 [style = bold, label=""];
20->15 [style = bold, label=""];
17->18 [style = bold, label=""];
12->7 [style = solid, label="v2"];
21->23 [style = bold, label=""];
}
