digraph {
12 [style = filled, label = "assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()),initialData))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()),updatedData))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "CuratorFramework curator = newCurator()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "node.setData(updatedData)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "PersistentEphemeralNode node = new PersistentEphemeralNode(curator,PersistentEphemeralNode.Mode.EPHEMERAL,PATH,data)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "node.debugWaitMsForBackgroundBeforeClose.set(timing.forSleepingABit().milliseconds())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "final CountDownLatch dataUpdateLatch = new CountDownLatch(1)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "node.waitForInitialCreate(timing.forWaiting().seconds(),TimeUnit.SECONDS)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()),updatedData))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "server.restart()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "byte(( updatedData = \"Updated\".getBytes()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testSetDataWhenNodeExists['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "byte(( data = \"Hello World\".getBytes()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testSetUpdatedDataWhenReconnected['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "{CloseableUtils.closeQuietly(node)}@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "byte(( initialData = \"Hello World\".getBytes()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()),data))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "node.start()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testSetDataWhenNodeExists['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "PersistentEphemeralNode node = new PersistentEphemeralNode(curator,PersistentEphemeralNode.Mode.EPHEMERAL,PATH,initialData)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertTrue(timing.awaitLatch(dataUpdateLatch))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "curator.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(PATH,\"InitialData\".getBytes())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "curator.getData().inBackground(new BackgroundCallback(){@Override public void processResult(CuratorFramework client,CuratorEvent event){dataUpdateLatch.countDown()}}).forPath(node.getActualPath())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "{CloseableUtils.closeQuietly(node)}@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13->11 [style = solid, label="updatedData"];
14->16 [style = bold, label=""];
18->3 [style = bold, label=""];
7->0 [style = solid, label="data"];
19->20 [style = solid, label="initialData"];
6->20 [style = dashed, label="0"];
3->20 [style = solid, label="curator"];
11->21 [style = bold, label=""];
0->2 [style = bold, label=""];
12->11 [style = bold, label=""];
19->12 [style = solid, label="initialData"];
1->3 [style = bold, label=""];
3->6 [style = solid, label="curator"];
10->3 [style = bold, label=""];
6->2 [style = solid, label="node"];
16->17 [style = bold, label=""];
0->12 [style = dashed, label="0"];
20->15 [style = solid, label="node"];
9->8 [style = bold, label=""];
3->4 [style = bold, label=""];
4->7 [style = bold, label=""];
13->21 [style = solid, label="updatedData"];
20->8 [style = bold, label=""];
23->22 [style = bold, label=""];
19->13 [style = bold, label=""];
8->5 [style = bold, label=""];
5->0 [style = bold, label=""];
3->19 [style = bold, label=""];
5->12 [style = bold, label=""];
7->6 [style = solid, label="data"];
22->16 [style = solid, label="dataUpdateLatch"];
7->6 [style = bold, label=""];
6->8 [style = bold, label=""];
17->15 [style = bold, label=""];
7->13 [style = dashed, label="0"];
13->20 [style = bold, label=""];
6->9 [style = bold, label=""];
22->14 [style = bold, label=""];
13->17 [style = solid, label="updatedData"];
21->23 [style = bold, label=""];
}
