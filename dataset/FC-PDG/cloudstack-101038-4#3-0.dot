digraph {
9 [style = filled, label = "when(virtualRouterElement._dcDao.findById(dataCenterId)).thenReturn(Mockito.mock())@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertTrue(virtualRouterElement.addPasswordAndUserdata(network,nic,vm,dest,context))@@@25@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "when(vm.getType()).thenReturn(VirtualMachine.Type.User)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "when(network.getId()).thenReturn(networkId)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "NicProfile nic = Mockito.mock()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertTrue(virtualRouterElement.canHandle(network,null))@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final long networkOfferingId = 10@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "when(network.getPhysicalNetworkId()).thenReturn(physicalNetworkId)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "when(virtualRouterElement._networkMdl.isProviderSupportServiceInNetwork(networkId,service,Network.Provider.VirtualRouter)).thenReturn(true)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "lenient().when(network.getNetworkOfferingId()).thenReturn(networkOfferingId)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "lenient().when(vm.getType()).thenReturn(VirtualMachine.Type.User)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "when(network.getVpcId()).thenReturn(null)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "lenient().when(network.getTrafficType()).thenReturn(TrafficType.Guest)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "when(virtualRouterElement._networkMdl.getPhysicalNetworkId(network)).thenReturn(physicalNetworkId)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Service service = Service.UserData@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "when(network.getTrafficType()).thenReturn(TrafficType.Guest)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final long dataCenterId = 33@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "lenient().when(virtualRouterElement._dcDao.findById(dataCenterId)).thenReturn(Mockito.mock())@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "when(virtualRouterElement._networkMdl.isProviderForNetwork(Network.Provider.VirtualRouter,networkId)).thenReturn(true)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "when(virtualRouterElement.canHandle(network,service)).thenReturn(false)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "when(virtualRouterElement._networkMdl.isProviderEnabledInPhysicalNetwork(physicalNetworkId,Network.Provider.VirtualRouter.getName())).thenReturn(true)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testAddPasswordAndUserdata['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "VirtualMachineProfile vm = Mockito.mock()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "when(network.getDataCenterId()).thenReturn(dataCenterId)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testCanHandle['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "when(network.getNetworkOfferingId()).thenReturn(networkOfferingId)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "lenient().when(network.getDataCenterId()).thenReturn(dataCenterId)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "lenient().when(network.getPhysicalNetworkId()).thenReturn(physicalNetworkId)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "testAddPasswordAndUserdata['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Network network = Mockito.mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "DeployDestination dest = Mockito.mock()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ReservationContext context = Mockito.mock()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final long networkId = 1@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final long physicalNetworkId = 42@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28->29 [style = bold, label=""];
17->25 [style = bold, label=""];
4->3 [style = bold, label=""];
18->31 [style = bold, label=""];
25->28 [style = bold, label=""];
9->0 [style = bold, label=""];
13->23 [style = solid, label="physicalNetworkId"];
27->0 [style = bold, label=""];
13->25 [style = solid, label="physicalNetworkId"];
20->9 [style = bold, label=""];
12->24 [style = solid, label="dataCenterId"];
31->32 [style = bold, label=""];
33->6 [style = bold, label=""];
12->17 [style = bold, label=""];
22->29 [style = dashed, label="0"];
20->31 [style = dashed, label="0"];
3->26 [style = bold, label=""];
2->5 [style = solid, label="dest"];
9->27 [style = dashed, label="0"];
12->4 [style = solid, label="dataCenterId"];
30->6 [style = bold, label=""];
8->29 [style = solid, label="networkOfferingId"];
17->19 [style = bold, label=""];
6->15 [style = bold, label=""];
9->32 [style = dashed, label="0"];
22->4 [style = bold, label=""];
20->27 [style = bold, label=""];
1->5 [style = solid, label="nic"];
3->10 [style = bold, label=""];
7->22 [style = bold, label=""];
18->20 [style = bold, label=""];
3->23 [style = bold, label=""];
11->17 [style = solid, label="networkId"];
10->26 [style = dashed, label="0"];
6->32 [style = solid, label="network"];
21->11 [style = bold, label=""];
7->28 [style = dashed, label="0"];
10->23 [style = bold, label=""];
16->21 [style = bold, label=""];
15->5 [style = solid, label="vm"];
6->11 [style = bold, label=""];
26->23 [style = bold, label=""];
11->13 [style = bold, label=""];
6->5 [style = solid, label="network"];
16->5 [style = solid, label="context"];
8->22 [style = solid, label="networkOfferingId"];
1->2 [style = bold, label=""];
19->25 [style = dashed, label="0"];
4->24 [style = dashed, label="0"];
13->8 [style = bold, label=""];
29->24 [style = bold, label=""];
19->7 [style = bold, label=""];
24->3 [style = bold, label=""];
23->18 [style = bold, label=""];
8->12 [style = bold, label=""];
14->6 [style = bold, label=""];
13->19 [style = solid, label="physicalNetworkId"];
0->5 [style = bold, label=""];
15->1 [style = bold, label=""];
2->16 [style = bold, label=""];
}
