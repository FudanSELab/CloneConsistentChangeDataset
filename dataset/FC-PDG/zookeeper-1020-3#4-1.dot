digraph {
19 [style = filled, label = "containerManager.checkContainers()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertNotNull(\"Ttl node should not have been deleted yet\",zk.exists(\"/foo\",false))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final AtomicLong fakeElapsed = new AtomicLong(0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(0,stat.getEphemeralOwner())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "testModifying['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "++i@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertNotNull(\"Ttl node should not have been deleted yet\",zk.exists(\"/foo\",false))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "zk.create(\"/foo\",new byte((((,ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_WITH_TTL,stat,100)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "int i = 0@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "fakeElapsed.set(200)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertNull(\"Ttl node should have been deleted\",zk.exists(\"/foo\",false))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "containerManager.checkContainers()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "zk.setData(\"/foo\",new byte((((,-1)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ContainerManager containerManager = newContainerManager(fakeElapsed)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "containerManager.checkContainers()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "containerManager.checkContainers()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testCreate['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "fakeElapsed.set(50)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertNull(\"Ttl node should have been deleted\",zk.exists(\"/foo\",false))@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertNull(\"Ttl node should have been deleted\",zk.exists(\"/foo\",false))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertEquals(0,stat.getEphemeralOwner())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertNotNull(\"Ttl node should not have been deleted yet\",zk.exists(\"/foo\",false))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Stat stat = new Stat()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "fakeElapsed.set(1000)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "i < 10@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testCreate['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25->21 [style = solid, label="i"];
18->23 [style = bold, label=""];
5->9 [style = bold, label=""];
5->9 [style = solid, label="stat"];
3->1 [style = bold, label=""];
7->10 [style = bold, label=""];
0->6 [style = bold, label=""];
21->18 [style = dotted, label="true"];
7->14 [style = dashed, label="0"];
21->15 [style = bold, label=""];
0->12 [style = bold, label=""];
2->3 [style = bold, label=""];
19->20 [style = bold, label=""];
14->10 [style = bold, label=""];
21->22 [style = dotted, label="true"];
21->17 [style = dotted, label="true"];
9->7 [style = bold, label=""];
15->19 [style = bold, label=""];
10->4 [style = solid, label="fakeElapsed"];
4->0 [style = bold, label=""];
6->2 [style = bold, label=""];
6->12 [style = dashed, label="0"];
1->13 [style = dashed, label="0"];
11->5 [style = bold, label=""];
12->2 [style = bold, label=""];
8->5 [style = bold, label=""];
23->21 [style = bold, label=""];
21->24 [style = dotted, label="true"];
21->22 [style = bold, label=""];
21->23 [style = dotted, label="true"];
24->17 [style = bold, label=""];
9->14 [style = bold, label=""];
10->4 [style = bold, label=""];
3->13 [style = bold, label=""];
16->5 [style = bold, label=""];
22->24 [style = bold, label=""];
17->18 [style = bold, label=""];
25->21 [style = bold, label=""];
6->25 [style = bold, label=""];
}
