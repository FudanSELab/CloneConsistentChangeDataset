digraph {
1 [style = filled, label = "Assert.assertEquals(\"met1,met2\",objectMap.get(\"metrics\"))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(IndexIO.CURRENT_VERSION_ID,objectMap.get(\"binaryVersion\"))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(interval.toString(),objectMap.get(\"interval\"))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(12,objectMap.size())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ObjectMapper mapper = new DefaultObjectMapper()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "DataSegment segment = new DataSegment(\"something\",interval,\"1\",loadSpec,Arrays.asList(\"dim1\",\"dim2\"),Arrays.asList(\"met1\",\"met2\"),NoneShardSpec.instance(),IndexIO.CURRENT_VERSION_ID,1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Map<String,Object> objectMap = mapper.readValue(mapper.writeValueAsString(segmentDrop),JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(\"dim1,dim2\",objectMap.get(\"dimensions\"))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(\"1\",objectMap.get(\"version\"))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testV1Serialization['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testV1Serialization['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "final ImmutableMap<String,Object> loadSpec = ImmutableMap.of(\"something\",\"or_other\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(loadSpec,objectMap.get(\"loadSpec\"))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(1,objectMap.get(\"size\"))@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testV1Serialization['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final SegmentChangeRequestLoad segmentDrop = new SegmentChangeRequestLoad(segment)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final SegmentChangeRequestDrop segmentDrop = new SegmentChangeRequestDrop(segment)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(11,objectMap.size())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(\"load\",objectMap.get(\"action\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(ImmutableMap.of(\"type\",\"none\"),objectMap.get(\"shardSpec\"))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(\"something\",objectMap.get(\"dataSource\"))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final Interval interval = Intervals.of(\"2011-10-01/2011-10-02\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(\"drop\",objectMap.get(\"action\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9->20 [style = dashed, label="0"];
5->10 [style = bold, label=""];
21->10 [style = bold, label=""];
16->0 [style = bold, label=""];
8->12 [style = solid, label="loadSpec"];
22->6 [style = solid, label="segmentDrop"];
0->17 [style = bold, label=""];
2->15 [style = solid, label="segment"];
2->22 [style = solid, label="segment"];
15->6 [style = bold, label=""];
11->12 [style = bold, label=""];
20->3 [style = bold, label=""];
6->19 [style = bold, label=""];
7->8 [style = bold, label=""];
10->7 [style = bold, label=""];
13->11 [style = bold, label=""];
15->22 [style = dashed, label="0"];
6->14 [style = bold, label=""];
18->10 [style = bold, label=""];
8->2 [style = bold, label=""];
12->4 [style = bold, label=""];
19->9 [style = bold, label=""];
8->2 [style = solid, label="loadSpec"];
1->16 [style = bold, label=""];
15->6 [style = solid, label="segmentDrop"];
2->15 [style = bold, label=""];
3->13 [style = bold, label=""];
9->3 [style = bold, label=""];
14->9 [style = bold, label=""];
14->19 [style = dashed, label="0"];
4->1 [style = bold, label=""];
7->2 [style = solid, label="interval"];
2->22 [style = bold, label=""];
14->20 [style = bold, label=""];
22->6 [style = bold, label=""];
}
