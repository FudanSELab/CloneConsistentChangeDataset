digraph {
5 [style = filled, label = "ParserResult result = new BibtexParser(importFormatPreferences,new DummyFileUpdateMonitor()).parse(originalReader)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Path auxFile = Paths.get(.getResource(\"paper.aux\").toURI())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "assertEquals(2,auxResult.getFoundKeysInAux())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "InputStream originalStream = .getResourceAsStream(\"origin.bib\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "BibDatabase db = auxResult.getGeneratedBibDatabase()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(0,auxResult.getCrossRefEntriesCount())@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(1,db.getStringCount())@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Path auxFile = Path.of(.getResource(\"paper.aux\").toURI())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testNestedAux['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "BibDatabase newDB = auxResult.getGeneratedBibDatabase()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "duplicateBibDatabaseConfiguration['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "AuxParserResult auxResult = auxParser.parse(auxFile)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Path auxFile = Paths.get(.getResource(\"nested.aux\").toURI())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertTrue(auxResult.getGeneratedBibDatabase().hasEntries())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "AuxParser auxParser = new DefaultAuxParser(result.getDatabase())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(0,auxResult.getUnresolvedKeysCount())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(Optional.of(\"\"Maintained by \" # maintainer\"),db.getPreamble())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "InputStream originalStream = .getResourceAsStream(\"config.bib\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "duplicateBibDatabaseConfiguration['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(2,newDB.getEntries().size())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(2,auxResult.getResolvedKeysCount())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
11->8 [style = solid, label="auxFile"];
8->15 [style = bold, label=""];
4->6 [style = bold, label=""];
8->3 [style = bold, label=""];
18->12 [style = bold, label=""];
12->20 [style = bold, label=""];
19->11 [style = bold, label=""];
1->10 [style = dashed, label="0"];
9->6 [style = bold, label=""];
20->21 [style = bold, label=""];
10->8 [style = solid, label="auxFile"];
6->1 [style = bold, label=""];
11->5 [style = bold, label=""];
15->17 [style = bold, label=""];
13->19 [style = bold, label=""];
10->5 [style = bold, label=""];
5->0 [style = bold, label=""];
3->7 [style = bold, label=""];
17->14 [style = bold, label=""];
7->2 [style = bold, label=""];
1->11 [style = dashed, label="0"];
6->10 [style = bold, label=""];
6->19 [style = dashed, label="0"];
0->8 [style = bold, label=""];
1->8 [style = solid, label="auxFile"];
21->16 [style = bold, label=""];
3->15 [style = dashed, label="0"];
14->18 [style = bold, label=""];
}
