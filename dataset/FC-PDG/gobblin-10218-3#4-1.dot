digraph {
8 [style = filled, label = "GobblinTrackingEvent event = new GobblinTrackingEvent(0L,\"namespace\",\"event\",Maps.newHashMap())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(results.size(),1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(monitor.events.get(0),event)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(monitor.events.size(),0)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(results.size(),0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "monitor.shutdownMetrics()@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Collection<Either<JobSpec,URI>> results = monitor.parseJobSpec(serializer.serializeRecord(event))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "monitor.buildMetricsContextAndMetrics()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testSimple['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "AvroSerializer<GobblinTrackingEvent> serializer = new AvroBinarySerializer<>(GobblinTrackingEvent.SCHEMA$,new FixedSchemaVersionWriter())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(monitor.events.size(),1)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testWrongSchemaVersionWriter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(monitor.getMessageParseFailures().getCount(),1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testSimple['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "AvroSerializer<GobblinTrackingEvent> serializer = new AvroBinarySerializer<>(GobblinTrackingEvent.SCHEMA$,new NoopSchemaVersionWriter())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TestKafkaAvroJobMonitor monitor = new TestKafkaAvroJobMonitor(GobblinTrackingEvent.SCHEMA$,new NoopSchemaVersionWriter())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Collection<JobSpec> results = monitor.parseJobSpec(serializer.serializeRecord(event))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4->9 [style = bold, label=""];
8->10 [style = bold, label=""];
15->14 [style = bold, label=""];
9->2 [style = bold, label=""];
11->1 [style = bold, label=""];
7->12 [style = bold, label=""];
2->3 [style = bold, label=""];
4->15 [style = bold, label=""];
7->0 [style = bold, label=""];
0->12 [style = dashed, label="0"];
3->13 [style = dashed, label="0"];
1->7 [style = bold, label=""];
8->3 [style = solid, label="event"];
6->1 [style = bold, label=""];
3->5 [style = bold, label=""];
2->14 [style = dashed, label="0"];
16->1 [style = bold, label=""];
12->8 [style = bold, label=""];
8->4 [style = solid, label="event"];
0->8 [style = bold, label=""];
13->5 [style = bold, label=""];
10->9 [style = bold, label=""];
8->4 [style = bold, label=""];
14->13 [style = bold, label=""];
4->10 [style = dashed, label="0"];
9->15 [style = dashed, label="0"];
8->10 [style = solid, label="event"];
}
