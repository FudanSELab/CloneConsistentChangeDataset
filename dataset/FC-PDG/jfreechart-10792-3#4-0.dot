digraph {
7 [style = filled, label = "double(( starts_S2 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@27dfb3@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "d2 = (DefaultIntervalCategoryDataset)d1.clone()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertTrue(d1.equals(d2))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertTrue(d1.getClass() == d2.getClass())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "DefaultWindDataset d1 = new DefaultWindDataset()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "double(( ends_S2 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@27dfc7@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "DefaultIntervalCategoryDataset d2 = null@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(d1 != d2)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(d1.equals(d2))@@@34@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "DefaultWindDataset d2 = (DefaultWindDataset)d1.clone()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testCloning['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "d1.setStartValue(0,\"Category 1\",new Double(0.99))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testCloning['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "double(((( starts = new double((((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@27dfd1@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertTrue(d1.getClass() == d2.getClass())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testCloning['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "d1 = createSampleDataset1()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "double(((( ends = new double((((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@27dfda@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(d1.getClass() == d2.getClass())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(d1.equals(d2))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(d1 != d2)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "double(( starts_S1 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@27dfa9@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "double(( ends_S1 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@27dfbd@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "DefaultIntervalCategoryDataset d1 = new DefaultIntervalCategoryDataset(new Comparable((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@27dfe5,new Comparable((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@27dfea,DataUtils.createNumberArray2D(starts),DataUtils.createNumberArray2D(ends))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertTrue(d1.equals(d2))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "d2 = (DefaultWindDataset)d1.clone()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertTrue(d1 != d2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "d2.setStartValue(0,\"Category 1\",new Double(0.99))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertFalse(d1.equals(d2))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25->23 [style = bold, label=""];
14->13 [style = solid, label="d2"];
8->5 [style = bold, label=""];
16->4 [style = bold, label=""];
28->22 [style = solid, label="d2"];
28->25 [style = solid, label="d2"];
9->16 [style = bold, label=""];
26->19 [style = solid, label="d2"];
16->6 [style = solid, label="d1"];
26->24 [style = solid, label="d2"];
0->9 [style = solid, label="ends_S1"];
12->1 [style = bold, label=""];
18->25 [style = bold, label=""];
0->8 [style = bold, label=""];
5->9 [style = bold, label=""];
8->9 [style = solid, label="ends_S2"];
15->7 [style = bold, label=""];
7->5 [style = solid, label="starts_S2"];
9->16 [style = solid, label="ends"];
6->2 [style = bold, label=""];
23->26 [style = bold, label=""];
1->11 [style = bold, label=""];
15->20 [style = dashed, label="0"];
19->27 [style = bold, label=""];
26->19 [style = bold, label=""];
20->22 [style = solid, label="d1"];
28->22 [style = bold, label=""];
27->24 [style = bold, label=""];
11->10 [style = bold, label=""];
21->20 [style = bold, label=""];
10->13 [style = bold, label=""];
14->11 [style = solid, label="d2"];
17->15 [style = bold, label=""];
5->16 [style = solid, label="starts"];
7->0 [style = bold, label=""];
22->18 [style = bold, label=""];
20->28 [style = bold, label=""];
3->15 [style = bold, label=""];
14->6 [style = bold, label=""];
4->14 [style = bold, label=""];
15->5 [style = solid, label="starts_S1"];
23->19 [style = solid, label="d1"];
14->12 [style = solid, label="d2"];
14->6 [style = solid, label="d2"];
2->12 [style = bold, label=""];
}
