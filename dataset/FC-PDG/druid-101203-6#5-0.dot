digraph {
31 [style = filled, label = "return null@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "return null@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "return null@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "asyncContext.addListener(new AsyncListener(){@Override public void onComplete(AsyncEvent event){}@Override public void onTimeout(AsyncEvent event){future.cancel(true)event.getAsyncContext().complete()}@Override public void onError(AsyncEvent event){}@Override public void onStartAsync(AsyncEvent event){}})@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "getWorkerState['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "Futures.addCallback(future,new FutureCallback<ChangeRequestsSnapshot<DataSegmentChangeRequest>>(){@Override public void onSuccess(ChangeRequestsSnapshot<DataSegmentChangeRequest> result){try {HttpServletResponse response = (HttpServletResponse)asyncContext.getResponse()response.setStatus(HttpServletResponse.SC_OK)context.inputMapper.writerWithType(HttpServerInventoryView.SEGMENT_LIST_RESP_TYPE_REF).writeValue(asyncContext.getResponse().getOutputStream(),result)asyncContext.complete()}catch (Exception ex) }@Override public void onFailure(Throwable th){try {HttpServletResponse response = (HttpServletResponse)asyncContext.getResponse()if (th instanceof IllegalArgumentException) {response.sendError(HttpServletResponse.SC_BAD_REQUEST,th.getMessage())}{response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,th.getMessage())}asyncContext.complete()}catch (Exception ex) }})@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "timeout <= 0@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "asyncContext.addListener(new AsyncListener(){@Override public void onComplete(AsyncEvent event){}@Override public void onTimeout(AsyncEvent event){future.cancel(true)event.getAsyncContext().complete()}@Override public void onError(AsyncEvent event){}@Override public void onStartAsync(AsyncEvent event){}})@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "sendErrorResponse(req,HttpServletResponse.SC_BAD_REQUEST,\"timeout must be positive.\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "sendErrorResponse(req,HttpServletResponse.SC_NOT_FOUND,\"announcer is not available.\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "announcer == null@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "@QueryParam(\"timeout\") long timeout@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Futures.addCallback(future,new FutureCallback<ChangeRequestsSnapshot>(){@Override public void onSuccess(ChangeRequestsSnapshot result){try {HttpServletResponse response = (HttpServletResponse)asyncContext.getResponse()response.setStatus(HttpServletResponse.SC_OK)context.inputMapper.writerWithType(WorkerHolder.WORKER_SYNC_RESP_TYPE_REF).writeValue(asyncContext.getResponse().getOutputStream(),result)asyncContext.complete()}catch (Exception ex) }@Override public void onFailure(Throwable th){try {HttpServletResponse response = (HttpServletResponse)asyncContext.getResponse()if (th instanceof IllegalArgumentException) {response.sendError(HttpServletResponse.SC_BAD_REQUEST,th.getMessage())}{response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,th.getMessage())}asyncContext.complete()}catch (Exception ex) }})@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "return null@@@53@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "@Context final HttpServletRequest req@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final AsyncContext asyncContext = req.startAsync()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "@QueryParam(\"counter\") long counter@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "@QueryParam(\"hash\") long hash@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "final ListenableFuture<ChangeRequestsSnapshot<DataSegmentChangeRequest>> future = announcer.getSegmentChangesSince(new ChangeRequestHistory.Counter(counter,hash))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "getWorkerState['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "@QueryParam(\"counter\") long counter@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "@QueryParam(\"timeout\") long timeout@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "sendErrorResponse(req,HttpServletResponse.SC_BAD_REQUEST,\"timeout must be positive.\")@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "@QueryParam(\"hash\") long hash@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "@Context final HttpServletRequest req@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "@Context final HttpServletRequest req@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final ListenableFuture<ChangeRequestsSnapshot<WorkerHistoryItem>> future = workerTaskManager.getChangesSince(new ChangeRequestHistory.Counter(counter,hash))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "@QueryParam(\"timeout\") long timeout@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "@QueryParam(\"hash\") long hash@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "asyncContext.setTimeout(timeout)@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final ResponseContext context = createContext(req.getHeader(\"Accept\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "asyncContext.setTimeout(timeout)@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "timeout <= 0@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "getSegments['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "return null@@@57@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14->5 [style = bold, label=""];
8->9 [style = solid, label="timeout"];
18->16 [style = solid, label="counter"];
33->27 [style = solid, label="req"];
10->2 [style = dotted, label="true"];
4->6 [style = bold, label=""];
12->0 [style = bold, label=""];
13->26 [style = dashed, label="0"];
3->14 [style = bold, label=""];
11->4 [style = solid, label="timeout"];
8->4 [style = solid, label="timeout"];
28->31 [style = dotted, label="true"];
7->13 [style = solid, label="hash"];
4->12 [style = dotted, label="true"];
24->26 [style = solid, label="counter"];
29->20 [style = solid, label="timeout"];
3->21 [style = bold, label=""];
29->0 [style = solid, label="timeout"];
0->3 [style = dotted, label="true"];
11->33 [style = dashed, label="0"];
13->16 [style = dashed, label="0"];
23->24 [style = dotted, label="true"];
0->13 [style = dotted, label="true"];
16->5 [style = solid, label="future"];
26->34 [style = solid, label="future"];
5->34 [style = dashed, label="0"];
33->13 [style = solid, label="req"];
10->7 [style = dotted, label="true"];
28->27 [style = dotted, label="true"];
0->13 [style = bold, label=""];
5->9 [style = bold, label=""];
34->20 [style = bold, label=""];
28->27 [style = bold, label=""];
19->11 [style = dotted, label="true"];
13->5 [style = solid, label="future"];
22->34 [style = bold, label=""];
21->26 [style = bold, label=""];
10->8 [style = dotted, label="true"];
10->4 [style = bold, label=""];
16->3 [style = bold, label=""];
20->30 [style = bold, label=""];
26->32 [style = bold, label=""];
19->15 [style = dotted, label="true"];
23->25 [style = dotted, label="true"];
0->21 [style = bold, label=""];
6->12 [style = bold, label=""];
19->4 [style = bold, label=""];
32->22 [style = bold, label=""];
11->13 [style = solid, label="counter"];
13->3 [style = bold, label=""];
25->26 [style = solid, label="hash"];
15->6 [style = solid, label="req"];
19->17 [style = dotted, label="true"];
23->28 [style = bold, label=""];
23->29 [style = dotted, label="true"];
10->11 [style = dotted, label="true"];
4->6 [style = dotted, label="true"];
2->6 [style = solid, label="req"];
23->33 [style = dotted, label="true"];
9->1 [style = bold, label=""];
17->16 [style = solid, label="hash"];
28->0 [style = bold, label=""];
27->31 [style = bold, label=""];
4->0 [style = bold, label=""];
11->9 [style = solid, label="timeout"];
31->0 [style = bold, label=""];
19->18 [style = dotted, label="true"];
0->16 [style = bold, label=""];
}
