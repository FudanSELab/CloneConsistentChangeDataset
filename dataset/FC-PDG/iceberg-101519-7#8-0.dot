digraph {
1 [style = filled, label = "return ROWS_CANNOT_MATCH@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "containsNullsOnly(id)@@@4@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "containsNullsOnly(id) || containsNaNsOnly(id)@@@4@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "return ROWS_MIGHT_MATCH@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "NaNUtil.isNaN(lower)@@@9@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "int cmp = lit.comparator().compare(lower,lit.value())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "BoundReference<T> ref@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "return ROWS_MIGHT_MATCH@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "lt['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "T lower = Conversions.fromByteBuffer(ref.type(),lowerBounds.get(id))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "lowerBounds != null && lowerBounds.containsKey(id)@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "return ROWS_CANNOT_MATCH@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "cmp >= 0@@@13@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "gtEq['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Literal<T> lit@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "BoundReference<T> ref@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "T upper = Conversions.fromByteBuffer(ref.type(),upperBounds.get(id))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "int cmp = lit.comparator().compare(upper,lit.value())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Integer id = ref.fieldId()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Literal<T> lit@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "lt['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "cmp < 0@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Literal<T> lit@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "upperBounds != null && upperBounds.containsKey(id)@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
4->13 [style = solid, label="lower"];
10->20 [style = bold, label=""];
20->23 [style = bold, label=""];
9->8 [style = dotted, label="true"];
13->15 [style = bold, label=""];
4->23 [style = dashed, label="0"];
19->6 [style = bold, label=""];
11->20 [style = bold, label=""];
20->6 [style = bold, label=""];
11->10 [style = dotted, label="true"];
9->4 [style = bold, label=""];
19->1 [style = bold, label=""];
2->8 [style = solid, label="cmp"];
22->0 [style = bold, label=""];
10->9 [style = bold, label=""];
20->18 [style = dotted, label="true"];
9->13 [style = dotted, label="true"];
11->9 [style = bold, label=""];
2->18 [style = dashed, label="0"];
14->0 [style = bold, label=""];
8->6 [style = bold, label=""];
14->7 [style = dotted, label="true"];
4->2 [style = solid, label="lower"];
1->6 [style = bold, label=""];
0->11 [style = bold, label=""];
0->20 [style = solid, label="id"];
16->10 [style = bold, label=""];
15->2 [style = bold, label=""];
9->2 [style = dotted, label="true"];
14->12 [style = dotted, label="true"];
2->8 [style = bold, label=""];
4->2 [style = bold, label=""];
9->6 [style = bold, label=""];
20->23 [style = dotted, label="true"];
8->1 [style = bold, label=""];
7->21 [style = dashed, label="0"];
8->19 [style = dashed, label="0"];
11->10 [style = bold, label=""];
0->11 [style = solid, label="id"];
18->19 [style = bold, label=""];
18->19 [style = solid, label="cmp"];
16->10 [style = dotted, label="true"];
3->0 [style = bold, label=""];
11->16 [style = dashed, label="0"];
0->4 [style = solid, label="id"];
9->4 [style = dotted, label="true"];
9->20 [style = dashed, label="0"];
19->1 [style = dotted, label="true"];
23->18 [style = solid, label="upper"];
23->18 [style = bold, label=""];
4->13 [style = bold, label=""];
0->16 [style = solid, label="id"];
13->15 [style = dotted, label="true"];
20->19 [style = dotted, label="true"];
3->7 [style = dotted, label="true"];
0->9 [style = solid, label="id"];
13->2 [style = bold, label=""];
0->23 [style = solid, label="id"];
3->5 [style = dotted, label="true"];
8->1 [style = dotted, label="true"];
22->17 [style = dotted, label="true"];
22->21 [style = dotted, label="true"];
16->9 [style = bold, label=""];
0->16 [style = bold, label=""];
}
