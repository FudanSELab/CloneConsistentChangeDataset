digraph {
10 [style = filled, label = "assertEquals(bytes(11(,1)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "Name qname = Name.fromString(\"www.example.\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "List<Record> additionalSection = parsed.getSection(Section.ADDITIONAL)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(result,Rcode.NOERROR)@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "TSIG_queryIsLastAddMessageRecord['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(Type.string(Type.OPT),Type.string(additionalSection.get(0).getType()))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(1,bytes(11()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "byte(( bytes = msg.toWire(512)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TSIG key = new TSIG(TSIG.HMAC_SHA256,\"example.\",\"12345678\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "TSIG_query['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "msg.addRecord(opt,Section.ADDITIONAL)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(Type.string(Type.TSIG),Type.string(additionalSection.get(1).getType()))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "msg.setTSIG(key,Rcode.NOERROR,null)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Message msg = Message.newQuery(rec)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(parsed.isSigned())@@@18@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "TSIG_query['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Record rec = Record.newRecord(qname,Type.A,DClass.IN)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "OPTRecord opt = new OPTRecord(SimpleResolver.DEFAULT_EDNS_PAYLOADSIZE,0,0,0)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(Rcode.NOERROR,result)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Message parsed = new Message(bytes)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(bytes(11(,2)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "int result = key.verify(parsed,bytes,null)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
7->1 [style = solid, label="bytes"];
15->7 [style = bold, label=""];
11->8 [style = solid, label="result"];
4->6 [style = bold, label=""];
7->10 [style = bold, label=""];
7->14 [style = solid, label="bytes"];
20->0 [style = bold, label=""];
4->19 [style = bold, label=""];
19->15 [style = solid, label="opt"];
5->15 [style = bold, label=""];
7->10 [style = solid, label="bytes"];
8->12 [style = dashed, label="0"];
11->12 [style = bold, label=""];
16->17 [style = bold, label=""];
12->9 [style = bold, label=""];
19->6 [style = bold, label=""];
3->4 [style = bold, label=""];
1->11 [style = solid, label="parsed"];
14->1 [style = bold, label=""];
1->11 [style = bold, label=""];
7->14 [style = bold, label=""];
3->4 [style = solid, label="qname"];
6->5 [style = bold, label=""];
2->0 [style = bold, label=""];
11->12 [style = solid, label="result"];
7->18 [style = solid, label="bytes"];
18->1 [style = bold, label=""];
4->6 [style = solid, label="rec"];
1->21 [style = bold, label=""];
0->5 [style = solid, label="key"];
8->9 [style = bold, label=""];
7->11 [style = solid, label="bytes"];
7->18 [style = bold, label=""];
21->16 [style = bold, label=""];
5->7 [style = bold, label=""];
11->8 [style = bold, label=""];
10->1 [style = bold, label=""];
10->14 [style = dashed, label="0"];
10->18 [style = dashed, label="0"];
13->0 [style = bold, label=""];
17->11 [style = bold, label=""];
}
