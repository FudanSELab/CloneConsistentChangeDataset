digraph {
44 [style = filled, label = "i++@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "EasyMock.expect(kinesis.getShardIterator(EasyMock.anyObject(),EasyMock.eq(SHARD_ID0),EasyMock.anyString(),EasyMock.anyString())).andReturn(getShardIteratorResult0).anyTimes()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "recordSupplier.assign(partitions)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "expect(getRecordsResult1.getNextShardIterator()).andReturn(null).anyTimes()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "replayAll()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(9,polledRecords.size())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "List<OrderedPartitionableRecord<String,String>> polledRecords = cleanRecords(recordSupplier.poll(poll_timeout_millis))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "recordsPerFetch = 100@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "EasyMock.expect(getShardIteratorResult0.getShardIterator()).andReturn(null).once()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "replayAll()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "recordSupplier.start()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "StreamPartition<String> shard0 = StreamPartition.of(stream,shardId0)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "Assert.assertTrue(polledRecords.containsAll(allRecords.subList(1,2)))@@@32@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Set<StreamPartition<String>> partitions = ImmutableSet.of(shard0Partition,shard1Partition)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "EasyMock.expect(getShardIteratorResult1.getShardIterator()).andReturn(null).once()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "recordSupplier.seek(shard1Partition,shard1Records.get(2).getSequenceNumber())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "StreamPartition<String> shard1 = StreamPartition.of(stream,shardId1)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "expect(getShardIteratorResult1.getShardIterator()).andReturn(shard1Iterator).anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertTrue(polledRecords.containsAll(allRecords.subList(4,12)))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "StreamPartition<String> shard1 = StreamPartition.of(stream,SHARD_ID1)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "int i = 0@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "StreamPartition<String> shard1Partition = StreamPartition.of(stream,shardId1)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "expect(getRecordsResult1.getRecords()).andReturn(shard1Records.subList(2,shard1Records.size())).once()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "i < 10 && recordSupplier.bufferSize() < 9@@@24@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "expect(getRecordsResult0.getRecords()).andReturn(shard0Records.subList(1,shard0Records.size())).once()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Thread.sleep(100)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "expect(getShardIteratorResult1.getShardIterator()).andReturn(null).once()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Set<StreamPartition<String>> partitions = ImmutableSet.of(shard0,shard1)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expect(getShardIteratorResult0.getShardIterator()).andReturn(null).once()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "testSeekToLatest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "recordSupplier.seek(shard0Partition,shard0Records.get(1).getSequenceNumber())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "expect(kinesis.getShardIterator(anyObject(),eq(shardId1),anyString(),anyString())).andReturn(getShardIteratorResult1).anyTimes()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "expect(kinesis.getRecords(generateGetRecordsReq(shard0Iterator,recordsPerFetch))).andReturn(getRecordsResult0).anyTimes()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "int i = 0@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EasyMock.expect(kinesis.getShardIterator(EasyMock.anyObject(),EasyMock.eq(SHARD_ID1),EasyMock.anyString(),EasyMock.anyString())).andReturn(getShardIteratorResult1).anyTimes()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "verifyAll()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "expect(getRecordsResult0.getNextShardIterator()).andReturn(null).anyTimes()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "i < 10 && recordSupplier.bufferSize() < 2@@@17@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "StreamPartition<String> shard0 = StreamPartition.of(stream,SHARD_ID0)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "recordSupplier.start()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,recordsPerFetch,0,2,false,100,5000,5000,60000,100)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "expect(getShardIteratorResult0.getShardIterator()).andReturn(shard0Iterator).anyTimes()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "expect(kinesis.getShardIterator(anyObject(),eq(shardId0),anyString(),anyString())).andReturn(getShardIteratorResult0).anyTimes()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "StreamPartition<String> shard0Partition = StreamPartition.of(stream,shardId0)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "testSeek['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testSeekToLatest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
45 [style = filled, label = "expect(kinesis.getRecords(generateGetRecordsReq(shard1Iterator,recordsPerFetch))).andReturn(getRecordsResult1).anyTimes()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertEquals(Collections.emptyList(),cleanRecords(recordSupplier.poll(POLL_TIMEOUT_MILLIS)))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(Collections.emptyList(),cleanRecords(recordSupplier.poll(poll_timeout_millis)))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "recordSupplier.assign(partitions)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,recordsPerFetch,0,2,false,100,5000,5000,60000,100)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->16 [style = bold, label=""];
6->3 [style = bold, label=""];
18->3 [style = bold, label=""];
38->44 [style = bold, label=""];
32->12 [style = bold, label=""];
4->15 [style = bold, label=""];
16->7 [style = bold, label=""];
19->47 [style = dashed, label="0"];
48->35 [style = bold, label=""];
42->29 [style = bold, label=""];
1->13 [style = bold, label=""];
15->22 [style = dashed, label="0"];
28->0 [style = bold, label=""];
19->1 [style = bold, label=""];
40->16 [style = bold, label=""];
12->13 [style = solid, label="recordsPerFetch"];
2->36 [style = dashed, label="0"];
21->1 [style = bold, label=""];
50->45 [style = bold, label=""];
41->14 [style = solid, label="partitions"];
1->8 [style = solid, label="partitions"];
5->36 [style = bold, label=""];
31->44 [style = dotted, label="true"];
10->24 [style = dashed, label="0"];
27->12 [style = bold, label=""];
21->1 [style = solid, label="shard1"];
3->31 [style = dashed, label="0"];
5->23 [style = dashed, label="0"];
34->44 [style = solid, label="i"];
12->11 [style = bold, label=""];
47->41 [style = solid, label="shard1Partition"];
15->1 [style = solid, label="shard0"];
34->31 [style = bold, label=""];
22->1 [style = solid, label="shard0"];
16->43 [style = dashed, label="0"];
18->3 [style = solid, label="i"];
14->43 [style = bold, label=""];
12->18 [style = solid, label="recordsPerFetch"];
0->34 [style = bold, label=""];
35->40 [style = bold, label=""];
36->30 [style = bold, label=""];
26->0 [style = bold, label=""];
3->18 [style = dotted, label="true"];
7->6 [style = bold, label=""];
47->43 [style = solid, label="shard1Partition"];
47->41 [style = bold, label=""];
14->18 [style = bold, label=""];
1->16 [style = solid, label="partitions"];
4->22 [style = bold, label=""];
19->1 [style = solid, label="shard1"];
23->20 [style = bold, label=""];
44->31 [style = solid, label="i"];
3->26 [style = bold, label=""];
31->38 [style = bold, label=""];
31->49 [style = bold, label=""];
15->19 [style = bold, label=""];
2->10 [style = bold, label=""];
30->50 [style = bold, label=""];
46->28 [style = solid, label="shard0Partition"];
3->14 [style = dotted, label="true"];
6->18 [style = solid, label="i"];
3->9 [style = bold, label=""];
11->5 [style = bold, label=""];
17->12 [style = bold, label=""];
10->30 [style = dashed, label="0"];
9->26 [style = dashed, label="0"];
11->25 [style = dashed, label="0"];
33->37 [style = bold, label=""];
41->18 [style = bold, label=""];
6->3 [style = solid, label="i"];
44->31 [style = bold, label=""];
46->41 [style = solid, label="shard0Partition"];
45->39 [style = bold, label=""];
16->46 [style = bold, label=""];
49->42 [style = bold, label=""];
39->48 [style = bold, label=""];
2->20 [style = dashed, label="0"];
9->0 [style = bold, label=""];
25->23 [style = bold, label=""];
3->14 [style = bold, label=""];
22->21 [style = bold, label=""];
1->41 [style = dashed, label="0"];
9->49 [style = dashed, label="0"];
46->47 [style = bold, label=""];
43->28 [style = bold, label=""];
5->2 [style = bold, label=""];
24->4 [style = bold, label=""];
29->33 [style = bold, label=""];
19->21 [style = dashed, label="0"];
15->46 [style = dashed, label="0"];
12->25 [style = bold, label=""];
31->38 [style = dotted, label="true"];
10->4 [style = bold, label=""];
13->8 [style = bold, label=""];
20->24 [style = bold, label=""];
18->14 [style = bold, label=""];
34->31 [style = solid, label="i"];
}
