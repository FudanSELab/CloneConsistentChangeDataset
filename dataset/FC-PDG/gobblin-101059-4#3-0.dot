digraph {
31 [style = filled, label = "AssertWithBackoff.create().timeoutMs(20000).maxSleepMs(2000).backoffFactor(2).assertTrue(new Predicate<Void>(){@Override public boolean apply(Void input){Map<String,Spec> scheduledFlowSpecs = scheduler.scheduledFlowSpecsif (scheduledFlowSpecs != null && scheduledFlowSpecs.size() == 3) {return scheduler.scheduledFlowSpecs.containsKey(\"spec0\") && scheduler.scheduledFlowSpecs.containsKey(\"spec1\") && scheduler.scheduledFlowSpecs.containsKey(\"spec2\")}{return false}}},\"Waiting all flowSpecs to be scheduled\")@@@34@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "SpecCompiler mockCompiler = Mockito.mock()@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "TestGobblinServiceJobScheduler scheduler = new TestGobblinServiceJobScheduler(\"testscheduler\",ConfigFactory.empty(),Optional.of(flowCatalog),null,mockOrchestrator,null)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(flowCatalog.getSpecs().size(),3)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(scheduler.scheduledFlowSpecs.size(),0)@@@51@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "Assert.assertFalse(invocation.getMethod().getName().equals(\"remove\"))@@@49@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "Mockito.when(mockOrchestrator.getSpecCompiler()).thenReturn(mockCompiler)@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "flowCatalog.put(flowSpec1,true)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Properties properties = new Properties()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "scheduler.setActive(true)@@@33@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "properties.setProperty(FLOWSPEC_STORE_DIR_KEY,specDir.getAbsolutePath())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "SchedulerService schedulerService = new SchedulerService(new Properties())@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
46 [style = filled, label = "Orchestrator mockOrchestrator = Mockito.mock()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "FlowSpec flowSpec0 = FlowCatalogTest.initFlowSpec(specDir.getAbsolutePath(),URI.create(\"spec0\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Mockito.doAnswer((Answer<Void>)null).when(mockCompiler).awaitHealthy()@@@25@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(schedulerService.getScheduler().getJobGroupNames().size(),0)@@@52@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testJobSchedulerUnschedule['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "testJobSchedulerUnschedule['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "ServiceBasedAppLauncher serviceLauncher = new ServiceBasedAppLauncher(properties,\"GaaSJobSchedulerTest\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "scheduler.setActive(true)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "SpecCompiler mockCompiler = Mockito.mock()@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "when(mockListener.getName()).thenReturn(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_SCHEDULER_LISTENER_CLASS)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "FlowSpec flowSpec1 = FlowCatalogTest.initFlowSpec(specDir.getAbsolutePath(),URI.create(\"spec1\"))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Collection<Invocation> invocations = Mockito.mockingDetails(mockOrchestrator).getInvocations()@@@44@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "SpecCatalogListener mockListener = Mockito.mock()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "testJobSchedulerInit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "FlowCatalog flowCatalog = new FlowCatalog(ConfigUtils.propertiesToConfig(properties))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Mockito.doAnswer((Answer<Void>)null).when(mockCompiler).awaitHealthy()@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "when(mockListener.onAddSpec(any())).thenReturn(new AddSpecResponse(\"\"))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "File specDir = Files.createTempDir()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "ServiceBasedAppLauncher serviceLauncher = new ServiceBasedAppLauncher(properties,\"GaaSJobSchedulerTest\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "AssertWithBackoff.create().timeoutMs(20000).maxSleepMs(2000).backoffFactor(2).assertTrue(new Predicate<Void>(){@Override public boolean apply(Void input){Map<String,Spec> scheduledFlowSpecs = scheduler.scheduledFlowSpecsif (scheduledFlowSpecs != null && scheduledFlowSpecs.size() == 2) {return scheduler.scheduledFlowSpecs.containsKey(\"spec0\") && scheduler.scheduledFlowSpecs.containsKey(\"spec1\")}{return false}}},\"Waiting all flowSpecs to be scheduled\")@@@29@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "FlowSpec flowSpec0 = FlowCatalogTest.initFlowSpec(specDir.getAbsolutePath(),URI.create(\"spec0\"),MockedSpecCompiler.UNCOMPILABLE_FLOW)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "Mockito.when(mockOrchestrator.getSpecCompiler()).thenReturn(mockCompiler)@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
49 [style = filled, label = "Assert.assertEquals(flowCatalog.getSpecs().size(),2)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "flowCatalog.put(flowSpec2,true)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "schedulerService.startAsync().awaitRunning()@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "serviceLauncher.addService(flowCatalog)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "AssertWithBackoff.create().timeoutMs(20000).maxSleepMs(2000).backoffFactor(2).assertTrue(new Predicate<Void>(){@Override public boolean apply(Void input){Map<String,Spec> scheduledFlowSpecs = scheduler.scheduledFlowSpecsif (scheduledFlowSpecs != null && scheduledFlowSpecs.size() == 2) {return scheduler.scheduledFlowSpecs.containsKey(\"spec1\") && scheduler.scheduledFlowSpecs.containsKey(\"spec2\")}{return false}}},\"Waiting all flowSpecs to be scheduled\")@@@31@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "flowCatalog.put(flowSpec0,true)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "scheduler.startUp()@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "scheduler.setActive(false)@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "scheduler.setActive(false)@@@43@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "FlowSpec flowSpec0 = FlowCatalogTest.initFlowSpec(specDir.getAbsolutePath(),URI.create(\"spec0\"))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Mockito.doAnswer((Answer<Void>)null).when(mockCompiler).awaitHealthy()@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "flowCatalog.addListener(mockListener)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "serviceLauncher.start()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "TestGobblinServiceJobScheduler scheduler = new TestGobblinServiceJobScheduler(\"testscheduler\",ConfigFactory.empty(),Optional.of(flowCatalog),null,mockOrchestrator,schedulerService)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "Collection<Invocation> invocations = Mockito.mockingDetails(mockOrchestrator).getInvocations()@@@47@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "FlowSpec flowSpec2 = FlowCatalogTest.initFlowSpec(specDir.getAbsolutePath(),URI.create(\"spec2\"))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39->37 [style = bold, label=""];
0->3 [style = bold, label=""];
17->25 [style = bold, label=""];
11->36 [style = solid, label="mockOrchestrator"];
42->36 [style = solid, label="schedulerService"];
2->20 [style = bold, label=""];
12->45 [style = bold, label=""];
7->44 [style = solid, label="properties"];
27->14 [style = bold, label=""];
13->35 [style = dashed, label="0"];
45->3 [style = bold, label=""];
9->2 [style = bold, label=""];
25->13 [style = bold, label=""];
22->16 [style = bold, label=""];
46->11 [style = solid, label="mockOrchestrator"];
13->48 [style = dashed, label="0"];
35->22 [style = bold, label=""];
35->21 [style = solid, label="flowSpec0"];
18->12 [style = bold, label=""];
22->21 [style = bold, label=""];
8->36 [style = solid, label="flowCatalog"];
26->8 [style = bold, label=""];
3->15 [style = bold, label=""];
48->22 [style = bold, label=""];
1->49 [style = bold, label=""];
47->10 [style = bold, label=""];
11->42 [style = bold, label=""];
42->36 [style = bold, label=""];
25->48 [style = bold, label=""];
16->19 [style = solid, label="flowSpec2"];
11->24 [style = bold, label=""];
25->35 [style = bold, label=""];
24->18 [style = bold, label=""];
10->7 [style = bold, label=""];
12->0 [style = bold, label=""];
36->33 [style = bold, label=""];
34->30 [style = bold, label=""];
30->29 [style = bold, label=""];
44->17 [style = bold, label=""];
46->11 [style = bold, label=""];
19->49 [style = dashed, label="0"];
38->32 [style = bold, label=""];
7->26 [style = bold, label=""];
23->28 [style = bold, label=""];
19->5 [style = bold, label=""];
20->40 [style = bold, label=""];
8->17 [style = solid, label="flowCatalog"];
7->4 [style = solid, label="properties"];
14->23 [style = bold, label=""];
15->9 [style = bold, label=""];
49->46 [style = bold, label=""];
16->21 [style = bold, label=""];
13->21 [style = solid, label="flowSpec0"];
6->10 [style = bold, label=""];
21->1 [style = bold, label=""];
4->27 [style = bold, label=""];
40->41 [style = bold, label=""];
7->8 [style = solid, label="properties"];
28->44 [style = bold, label=""];
48->21 [style = solid, label="flowSpec0"];
28->17 [style = bold, label=""];
11->24 [style = solid, label="mockOrchestrator"];
43->10 [style = bold, label=""];
29->38 [style = bold, label=""];
5->11 [style = bold, label=""];
27->28 [style = solid, label="mockListener"];
13->22 [style = bold, label=""];
22->1 [style = solid, label="flowSpec1"];
8->4 [style = bold, label=""];
31->20 [style = bold, label=""];
1->19 [style = bold, label=""];
41->39 [style = bold, label=""];
8->27 [style = bold, label=""];
8->24 [style = solid, label="flowCatalog"];
33->34 [style = bold, label=""];
30->29 [style = solid, label="mockCompiler"];
24->18 [style = solid, label="mockCompiler"];
32->31 [style = bold, label=""];
18->12 [style = solid, label="mockCompiler"];
8->11 [style = solid, label="flowCatalog"];
}
