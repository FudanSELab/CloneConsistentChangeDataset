digraph {
5 [style = filled, label = "QueryRunner<ResultRow> mergeRunner = factory.getToolchest().mergeResults(runner)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "builder.setLimit(Integer.MAX_VALUE).setAggregatorSpecs(aggregatorSpecs)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testGroupByWithOrderLimit2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).addOrderByColumn(\"rows\").addOrderByColumn(\"alias\",OrderByColumnSpec.Direction.DESCENDING).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).addOrderByColumn(\"rows\",OrderByColumnSpec.Direction.DESCENDING).addOrderByColumn(\"alias\",OrderByColumnSpec.Direction.DESCENDING).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "testGroupByWithOrderLimit2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final GroupByQuery query = builder.build()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(builder.build())),\"no-limit\")@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "List<AggregatorFactory> aggregatorSpecs2 = Arrays.asList(QueryRunnerTestHelper.rowsCount,new DoubleSumAggregatorFactory(\"idx\",\"expr\"))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "ExpressionVirtualColumn expressionVirtualColumn = new ExpressionVirtualColumn(\"expr\",\"index / 2 + indexMin\",ValueType.FLOAT,TestExprMacroTable.INSTANCE)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(query)),\"no-limit\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<AggregatorFactory> aggregatorSpecs = Arrays.asList(QueryRunnerTestHelper.rowsCount,new DoubleSumAggregatorFactory(\"idx\",null,\"index / 2 + indexMin\",TestExprMacroTable.INSTANCE))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build())),\"limited\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "QueryRunner<ResultRow> mergeRunner = factory.getToolchest().mergeResults(runner)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(QueryPlus.wrap(builder.build())),\"no-limit\")@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "cannotVectorize()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "builder.setLimit(Integer.MAX_VALUE).setVirtualColumns(expressionVirtualColumn).setAggregatorSpecs(aggregatorSpecs2)@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final GroupByQuery query = builder.build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build())),\"limited\")@@@39@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "expectedResults = makeRows(builder.build(),new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a5f4b8,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a5f4bf,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a5f4c6,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a5f4cd,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a5f4d4,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a5f4db,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a5f4e2,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a5f4e9,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a5f4f0,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a5f4f7)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "List<ResultRow> expectedResults = Arrays.asList(makeRow(query,\"2011-04-01\",\"alias\",\"travel\",\"rows\",2L,\"idx\",243L),makeRow(query,\"2011-04-01\",\"alias\",\"technology\",\"rows\",2L,\"idx\",177L),makeRow(query,\"2011-04-01\",\"alias\",\"news\",\"rows\",2L,\"idx\",221L),makeRow(query,\"2011-04-01\",\"alias\",\"health\",\"rows\",2L,\"idx\",216L),makeRow(query,\"2011-04-01\",\"alias\",\"entertainment\",\"rows\",2L,\"idx\",319L),makeRow(query,\"2011-04-01\",\"alias\",\"business\",\"rows\",2L,\"idx\",217L),makeRow(query,\"2011-04-01\",\"alias\",\"automotive\",\"rows\",2L,\"idx\",269L),makeRow(query,\"2011-04-01\",\"alias\",\"premium\",\"rows\",6L,\"idx\",4416L),makeRow(query,\"2011-04-01\",\"alias\",\"mezzanine\",\"rows\",6L,\"idx\",4420L))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT,new LongSumAggregatorFactory(\"idx\",\"index\")).addOrderByColumn(\"rows\",OrderByColumnSpec.Direction.DESCENDING).addOrderByColumn(\"alias\",OrderByColumnSpec.Direction.DESCENDING).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(QueryPlus.wrap(builder.setLimit(5).build())),\"limited\")@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testGroupByOrderLimit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
13->3 [style = solid, label="expectedResults"];
23->20 [style = solid, label="expectedResults"];
23->20 [style = bold, label=""];
14->11 [style = solid, label="aggregatorSpecs"];
17->18 [style = solid, label="aggregatorSpecs2"];
0->6 [style = bold, label=""];
1->3 [style = solid, label="expectedResults"];
23->19 [style = solid, label="expectedResults"];
18->19 [style = bold, label=""];
9->17 [style = bold, label=""];
23->15 [style = solid, label="expectedResults"];
8->6 [style = bold, label=""];
1->13 [style = solid, label="query"];
3->16 [style = bold, label=""];
7->8 [style = bold, label=""];
6->1 [style = solid, label="query"];
1->13 [style = bold, label=""];
6->5 [style = solid, label="query"];
4->0 [style = bold, label=""];
20->21 [style = bold, label=""];
1->13 [style = dashed, label="0"];
6->1 [style = bold, label=""];
13->16 [style = solid, label="expectedResults"];
21->9 [style = bold, label=""];
1->5 [style = solid, label="expectedResults"];
10->12 [style = bold, label=""];
23->21 [style = solid, label="expectedResults"];
13->5 [style = bold, label=""];
16->14 [style = bold, label=""];
0->8 [style = dashed, label="0"];
1->2 [style = bold, label=""];
22->1 [style = bold, label=""];
19->15 [style = bold, label=""];
14->11 [style = bold, label=""];
11->23 [style = bold, label=""];
1->3 [style = solid, label="query"];
12->22 [style = bold, label=""];
17->18 [style = bold, label=""];
2->5 [style = bold, label=""];
}
