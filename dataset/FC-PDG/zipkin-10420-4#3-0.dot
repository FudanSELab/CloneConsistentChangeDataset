digraph {
13 [style = filled, label = "assertThat(storage.getTraces()).containsExactly(asList(v2))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(scribeMetrics.messagesDropped()).isZero()@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertThat(scribeMetrics.spans()).isEqualTo(1)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertThat(scribeMetrics.spansDropped()).isZero()@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "ScribeSpanConsumer scribe = newScribeSpanConsumer(\"zipkin\",consumer)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(scribe.log(asList(entry)).get()).isEqualTo(Scribe.ResultCode.OK)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Scribe.LogEntry entry = new Scribe.LogEntry()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(scribeMetrics.bytes()).isEqualTo(bytes.length)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "newScribeSpanConsumer(entry.category,consumer).log(asList(entry)).get()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(scribeMetrics.bytes()).isEqualTo(Base64.getMimeDecoder().decode(entry.message).length)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "decodesSpanGeneratedByFinagle['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "entry.category = \"zipkin\"@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(scribeMetrics.spans()).isEqualTo(1)@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "entriesWithSpansAreConsumed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "entry.message = encodedSpan@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(scribeMetrics.messages()).isEqualTo(1)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertThat(storage.getTraces()).containsExactly(asList(v2))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Scribe.LogEntry entry = new Scribe.LogEntry()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "decodesSpanGeneratedByFinagle['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(scribeMetrics.messages()).isEqualTo(1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18->3 [style = bold, label=""];
2->11 [style = solid, label="message"];
0->4 [style = bold, label=""];
14->18 [style = bold, label=""];
3->2 [style = bold, label=""];
13->17 [style = bold, label=""];
17->19 [style = bold, label=""];
10->8 [style = bold, label=""];
16->15 [style = bold, label=""];
11->6 [style = bold, label=""];
5->10 [style = bold, label=""];
6->9 [style = bold, label=""];
8->11 [style = bold, label=""];
7->4 [style = bold, label=""];
2->1 [style = bold, label=""];
15->13 [style = bold, label=""];
1->15 [style = dashed, label="0"];
2->16 [style = bold, label=""];
19->12 [style = bold, label=""];
4->3 [style = bold, label=""];
1->5 [style = bold, label=""];
}
