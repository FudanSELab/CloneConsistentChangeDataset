digraph {
9 [style = filled, label = "int thisLength = byteBuffer.remaining()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "byte(( roundTripBytes = new byte((((@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "List<ByteBuffer> byteBuffers = testString.asReadOnlyByteBufferList()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertTrue(bytesSeen == BYTES.length)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertTrue(byteBuffer.isReadOnly())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "bytesSeen += thisLength@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testAsReadOnlyByteBufferList['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int bytesSeen = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<ByteBuffer> byteBuffers = TEST_STRING.asReadOnlyByteBufferList()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "byteBuffer.get(roundTripBytes,bytesSeen,thisLength)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testAsReadOnlyByteBufferList['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "testAsReadOnlyByteBufferList['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "List<ByteBuffer> byteBuffers = stringUnderTest.asReadOnlyByteBufferList()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertTrue(bytesSeen == referenceBytes.length)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertTrue(bytesSeen + thisLength <= referenceBytes.length)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertTrue(classUnderTest + \".asReadOnlyByteBufferTest() must give back the same bytes\",Arrays.equals(referenceBytes,roundTripBytes))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "byte(( roundTripBytes = new byte((((@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertTrue(CLASSNAME + \".asReadOnlyByteBufferTest() must give back the same bytes\",Arrays.equals(BYTES,roundTripBytes))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(bytesSeen + thisLength <= BYTES.length)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->8 [style = solid, label="thisLength"];
1->4 [style = bold, label=""];
0->9 [style = bold, label=""];
17->5 [style = bold, label=""];
3->17 [style = dashed, label="0"];
4->16 [style = dashed, label="0"];
16->8 [style = bold, label=""];
0->8 [style = solid, label="roundTripBytes"];
2->4 [style = solid, label="bytesSeen"];
2->18 [style = solid, label="bytesSeen"];
2->6 [style = bold, label=""];
15->14 [style = solid, label="roundTripBytes"];
7->14 [style = dashed, label="0"];
2->16 [style = solid, label="bytesSeen"];
12->11 [style = bold, label=""];
0->15 [style = dashed, label="0"];
5->15 [style = bold, label=""];
10->3 [style = bold, label=""];
2->18 [style = bold, label=""];
9->2 [style = solid, label="thisLength"];
2->9 [style = bold, label=""];
5->16 [style = solid, label="bytesSeen"];
0->7 [style = solid, label="roundTripBytes"];
2->8 [style = solid, label="bytesSeen"];
6->18 [style = dashed, label="0"];
11->5 [style = bold, label=""];
13->17 [style = bold, label=""];
3->5 [style = bold, label=""];
5->8 [style = solid, label="bytesSeen"];
5->0 [style = bold, label=""];
8->2 [style = bold, label=""];
15->9 [style = bold, label=""];
1->16 [style = bold, label=""];
9->4 [style = solid, label="thisLength"];
4->8 [style = bold, label=""];
15->8 [style = solid, label="roundTripBytes"];
9->1 [style = bold, label=""];
6->7 [style = bold, label=""];
18->14 [style = bold, label=""];
2->6 [style = solid, label="bytesSeen"];
9->16 [style = solid, label="thisLength"];
3->11 [style = dashed, label="0"];
5->4 [style = solid, label="bytesSeen"];
}
