digraph {
4 [style = filled, label = "testMoveForwardBetweenCalculateRangesToStreamWithPreferredEndpoints['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "RangesByEndpoint.Mutable expectedResult = new RangesByEndpoint.Mutable()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "DatabaseDescriptor.setTransientReplicationEnabledUnsafe(true)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expectedResult.put(address03,fullReplica(address03,oneToken,threeToken))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testMoveBackwardBetweenCalculateRangesToStreamWithPreferredEndpoints['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "invokeCalculateRangesToStreamWithPreferredEndpoints(calculateStreamAndFetchRangesMoveForwardBetween().left,constructTMDsMoveForwardBetween(),expectedResult.build())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "testMoveForwardBetweenCalculateRangesToStreamWithPreferredEndpoints['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "expectedResult.put(address03,transientReplica(address03,fourteenToken,oneToken))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "expectedResult.put(address04,transientReplica(address04,oneToken,threeToken))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "RangesByEndpoint.Builder expectedResult = new RangesByEndpoint.Builder()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "expectedResult.put(address02,transientReplica(address02,nineToken,elevenToken))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "expectedResult.put(address02,fullReplica(address02,fourteenToken,oneToken))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "invokeCalculateRangesToStreamWithPreferredEndpoints(calculateStreamAndFetchRangesMoveBackwardBetween().left,constructTMDsMoveBackwardBetween(),expectedResult.asImmutableView())@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "expectedResult.put(address02,fullReplica(address02,elevenToken,oneToken))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "invokeCalculateRangesToStreamWithPreferredEndpoints(calculateStreamAndFetchRangesMoveForwardBetween().left,constructTMDsMoveForwardBetween(),expectedResult.asImmutableView())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5->7 [style = bold, label=""];
4->3 [style = bold, label=""];
3->6 [style = bold, label=""];
1->14 [style = bold, label=""];
1->2 [style = bold, label=""];
14->10 [style = bold, label=""];
11->12 [style = bold, label=""];
10->11 [style = bold, label=""];
13->9 [style = bold, label=""];
2->1 [style = dashed, label="0"];
5->14 [style = dashed, label="0"];
9->1 [style = bold, label=""];
5->0 [style = bold, label=""];
3->1 [style = bold, label=""];
0->7 [style = dashed, label="0"];
1->6 [style = dashed, label="0"];
2->5 [style = bold, label=""];
8->3 [style = bold, label=""];
6->2 [style = bold, label=""];
}
