digraph {
16 [style = filled, label = "Assert.assertNull(config.getBasicAuthentication())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testDefaults['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "Assert.assertEquals(300,config.getFlushCount())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(0,config.getMinHttpTimeoutMillis())@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(500,config.getFlushCount())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final HttpEmitterConfig config = objectMapper.convertValue(Emitters.makeCustomFactoryMap(props),)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(60000,config.getFlushMillis())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "props.put(\"org.apache.druid.java.util.emitter.recipientBaseUrl\",\"http://example.com/\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final Properties props = new Properties()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "props.put(\"org.apache.druid.java.util.emitter.http.url\",\"http://example.com/\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(null,config.getBasicAuthentication())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testDefaults['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,config.getFlushTimeOut())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(BatchingStrategy.ARRAY,config.getBatchingStrategy())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final ObjectMapper objectMapper = new ObjectMapper()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(\"http://example.com/\",config.getRecipientBaseUrl())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Pair<Integer,Integer> batchConfigPair = BaseHttpEmittingConfig.getDefaultBatchSizeAndLimit(Runtime.getRuntime().maxMemory())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(batchConfigPair.lhs.intValue(),config.getMaxBatchSize())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final HttpEmitterConfig config = objectMapper.convertValue(Emitters.makeHttpMap(props),)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(batchConfigPair.rhs.intValue(),config.getBatchQueueSizeLimit())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testDefaultsLegacy['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(2.0f,config.getHttpTimeoutAllowanceFactor(),0.0f)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->18 [style = dashed, label="0"];
0->9 [style = bold, label=""];
15->16 [style = dashed, label="0"];
7->11 [style = bold, label=""];
14->11 [style = solid, label="props"];
14->21 [style = solid, label="props"];
10->15 [style = bold, label=""];
21->0 [style = bold, label=""];
16->8 [style = bold, label=""];
0->19 [style = bold, label=""];
3->6 [style = bold, label=""];
19->10 [style = bold, label=""];
20->14 [style = bold, label=""];
9->10 [style = bold, label=""];
4->7 [style = bold, label=""];
9->19 [style = dashed, label="0"];
8->1 [style = bold, label=""];
6->5 [style = bold, label=""];
5->2 [style = bold, label=""];
11->0 [style = bold, label=""];
10->16 [style = bold, label=""];
17->14 [style = bold, label=""];
1->12 [style = bold, label=""];
7->21 [style = bold, label=""];
14->18 [style = bold, label=""];
12->3 [style = bold, label=""];
18->7 [style = bold, label=""];
13->14 [style = bold, label=""];
15->8 [style = bold, label=""];
14->4 [style = bold, label=""];
11->21 [style = dashed, label="0"];
}
