digraph {
28 [style = filled, label = "assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(),equalTo(0L))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "List<ProfileResult> results = profiler.getTree()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\").longValue(),equalTo(0L))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Query query = new TermQuery(new Term(\"foo\",\"bar\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Engine.Searcher engineSearcher = new Engine.Searcher(\"test\",new IndexSearcher(reader))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(),equalTo(0L))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(),greaterThan(0L))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Map<String,Long> breakdown = results.get(0).getTimeBreakdown()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ContextIndexSearcher searcher = new ContextIndexSearcher(engineSearcher,null,MAYBE_CACHE_POLICY)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "long rewriteTime = profiler.getRewriteTime()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\").longValue(),greaterThan(0L))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(),equalTo(0L))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "QueryProfiler profiler = new QueryProfiler()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(),greaterThan(0L))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\").longValue(),greaterThan(0L))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(),equalTo(0L))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(rewriteTime,greaterThan(0L))@@@23@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Query query = new RandomApproximationQuery(new TermQuery(new Term(\"foo\",\"bar\")),random())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(),greaterThan(0L))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(),greaterThan(0L))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "searcher.count(query)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\").longValue(),greaterThan(0L))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "searcher.search(query,1,Sort.INDEXORDER)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testApproximations['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\").longValue(),equalTo(0L))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testNoScoring['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Engine.Searcher engineSearcher = new Engine.Searcher(\"test\",new IndexSearcher(reader),logger)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "searcher.setProfiler(profiler)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(1,results.size())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testApproximations['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(),greaterThan(0L))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->22 [style = bold, label=""];
2->17 [style = bold, label=""];
11->16 [style = bold, label=""];
0->3 [style = bold, label=""];
5->8 [style = bold, label=""];
4->10 [style = bold, label=""];
22->26 [style = bold, label=""];
17->1 [style = bold, label=""];
18->23 [style = bold, label=""];
27->12 [style = bold, label=""];
10->14 [style = bold, label=""];
5->26 [style = dashed, label="0"];
16->27 [style = dashed, label="0"];
30->20 [style = bold, label=""];
26->29 [style = bold, label=""];
20->22 [style = solid, label="profiler"];
19->9 [style = solid, label="engineSearcher"];
10->28 [style = dashed, label="0"];
8->6 [style = bold, label=""];
14->7 [style = solid, label="rewriteTime"];
3->4 [style = bold, label=""];
22->5 [style = bold, label=""];
21->18 [style = bold, label=""];
4->28 [style = bold, label=""];
28->14 [style = bold, label=""];
14->7 [style = bold, label=""];
20->22 [style = bold, label=""];
6->2 [style = bold, label=""];
12->13 [style = bold, label=""];
29->6 [style = bold, label=""];
25->20 [style = bold, label=""];
19->9 [style = bold, label=""];
1->21 [style = bold, label=""];
15->20 [style = bold, label=""];
26->29 [style = solid, label="query"];
5->8 [style = solid, label="query"];
19->24 [style = dashed, label="0"];
24->9 [style = solid, label="engineSearcher"];
23->11 [style = bold, label=""];
20->19 [style = bold, label=""];
20->24 [style = bold, label=""];
16->12 [style = bold, label=""];
8->29 [style = dashed, label="0"];
24->9 [style = bold, label=""];
13->0 [style = bold, label=""];
11->27 [style = bold, label=""];
}
