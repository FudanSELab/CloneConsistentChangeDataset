digraph {
0 [style = filled, label = "assertFalse(\"The buffer should be filled\",buffer.hasRemaining())@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(\"The buffer should be populated correctly.\",expectedBufferContent.toString(),new String(buffer.array()))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testReadFullyOrFailWithPartialFileChannelReads['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "EasyMock.replay(channelMock)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "verify(channelMock,atLeastOnce()).read(any(),anyLong())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "ByteBuffer buffer = ByteBuffer.allocate(bufferSize)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final int bufferSize = 100@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "StringBuilder expectedBufferContent = new StringBuilder()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "EasyMock.verify(channelMock)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "fileChannelMockExpectReadWithRandomBytes(channelMock,expectedBufferContent,bufferSize)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertFalse(\"The buffer should be filled\",buffer.hasRemaining())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "FileChannel channelMock = EasyMock.createMock()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testReadFullyWithPartialFileChannelReads['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(\"The buffer should be populated correctly\",expectedBufferContent,new String(buffer.array()))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "ByteBuffer buffer = ByteBuffer.allocate(bufferSize)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Utils.readFullyOrFail(channelMock,buffer,0L,\"test\")@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertFalse(\"The buffer should be filled\",buffer.hasRemaining())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "FileChannel channelMock = mock()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "String expectedBufferContent = fileChannelMockExpectReadWithRandomBytes(channelMock,bufferSize)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Utils.readFully(channelMock,buffer,0L)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testReadFullyOrFailWithPartialFileChannelReads['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"The buffer should be populated correctly\",expectedBufferContent.toString(),new String(buffer.array()))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5->15 [style = solid, label="buffer"];
4->9 [style = bold, label=""];
16->15 [style = bold, label=""];
4->2 [style = solid, label="channelMock"];
6->8 [style = solid, label="expectedBufferContent"];
1->4 [style = bold, label=""];
2->20 [style = bold, label=""];
4->8 [style = solid, label="channelMock"];
4->7 [style = solid, label="channelMock"];
4->20 [style = solid, label="channelMock"];
9->5 [style = solid, label="bufferSize"];
0->2 [style = bold, label=""];
10->12 [style = dashed, label="0"];
9->19 [style = solid, label="bufferSize"];
19->17 [style = bold, label=""];
11->9 [style = bold, label=""];
7->3 [style = bold, label=""];
8->7 [style = bold, label=""];
9->6 [style = bold, label=""];
21->2 [style = bold, label=""];
5->16 [style = bold, label=""];
3->10 [style = bold, label=""];
6->16 [style = dashed, label="0"];
4->3 [style = solid, label="channelMock"];
5->6 [style = bold, label=""];
18->4 [style = bold, label=""];
9->16 [style = solid, label="bufferSize"];
2->13 [style = dashed, label="0"];
11->16 [style = solid, label="channelMock"];
10->0 [style = bold, label=""];
6->8 [style = bold, label=""];
16->12 [style = solid, label="expectedBufferContent"];
9->5 [style = bold, label=""];
3->13 [style = bold, label=""];
9->8 [style = solid, label="bufferSize"];
15->12 [style = bold, label=""];
12->3 [style = bold, label=""];
4->17 [style = solid, label="channelMock"];
11->15 [style = solid, label="channelMock"];
4->11 [style = dashed, label="0"];
14->11 [style = bold, label=""];
7->19 [style = bold, label=""];
17->21 [style = bold, label=""];
5->3 [style = solid, label="buffer"];
19->17 [style = solid, label="buffer"];
}
