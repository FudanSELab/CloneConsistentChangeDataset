digraph {
0 [style = filled, label = "ConfigTable configTable = optionalConfigTable.get()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "readConfigWhenInformerNotwork['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "V1ConfigMap v1ConfigMap = new V1ConfigMap()@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "readConfigWhenConfigMapDataIsNull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(configTable.getItems().get(0).getName(),\"key1\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "PowerMockito.doReturn(Optional.of(v1ConfigMap)).when(informer).configMap()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "readConfigWhenConfigMapDataIsNull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Map<String,String> configMapData = new HashMap<>()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Optional<ConfigTable> optionalConfigTable = register.readConfig(new HashSet<String>(){})@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Optional<ConfigTable> optionalConfigTable = register.readConfig(new HashSet<String>(){})@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(configTable.getItems().size(),1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertNull(configTable.getItems().get(0).getValue())@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "PowerMockito.doReturn(configMapData).when(informer).configMapData()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Assert.assertTrue(optionalConfigTable.isPresent())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertNull(configTable.getItems().get(0).getValue())@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "PowerMockito.doReturn(Optional.empty()).when(informer).configMap()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
5->8 [style = bold, label=""];
12->14 [style = bold, label=""];
13->0 [style = bold, label=""];
15->12 [style = bold, label=""];
2->5 [style = bold, label=""];
7->1 [style = bold, label=""];
1->0 [style = bold, label=""];
8->4 [style = bold, label=""];
14->13 [style = bold, label=""];
9->1 [style = bold, label=""];
3->12 [style = dashed, label="0"];
3->7 [style = bold, label=""];
11->9 [style = bold, label=""];
11->9 [style = solid, label="configMapData"];
7->9 [style = dashed, label="0"];
0->2 [style = bold, label=""];
10->11 [style = bold, label=""];
}
