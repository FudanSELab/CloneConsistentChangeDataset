digraph {
12 [style = filled, label = "final SqlTester tester1 = tester.withConformance(SqlConformanceEnum.MYSQL_5)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "tester1.checkString(\"trim(leading 'eh' from 'hehe__hehe')\",\"__hehe\",\"VARCHAR(10) NOT NULL\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "tester.checkString(\"lower('a')\",\"a\",\"CHAR(1) NOT NULL\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testTrimFunc['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testLowerFunc['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "tester.checkNull(\"trim('a' from cast(null as varchar(1)))\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "tester.checkFails(\"trim('xy' from 'abcde')\",\"Trim error: trim character must be exactly 1 character\",true)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "tester.checkString(\"trim(trailing 'a' from 'aAa')\",\"aA\",\"VARCHAR(3) NOT NULL\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "tester.setFor(SqlStdOperatorTable.TRIM)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "tester.setFor(SqlStdOperatorTable.LOWER)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "tester.checkNull(\"lower(cast(null as varchar(1)))\")@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "tester1.checkString(\"trim('eh' from 'hehe__hehe')\",\"__\",\"VARCHAR(10) NOT NULL\")@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "tester.checkNull(\"trim(cast(null as varchar(1)) from 'a')\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "tester1.checkString(\"trim(trailing 'eh' from 'hehe__hehe')\",\"hehe__\",\"VARCHAR(10) NOT NULL\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "tester.checkString(\"trim('a' from 'aAa')\",\"A\",\"VARCHAR(3) NOT NULL\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "tester.checkString(\"trim(leading 'a' from 'aAa')\",\"Aa\",\"VARCHAR(3) NOT NULL\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testLowerFunc['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "tester.checkString(\"lower('A')\",\"a\",\"CHAR(1) NOT NULL\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "tester.checkFails(\"trim('' from 'abcde')\",\"Trim error: trim character must be exactly 1 character\",true)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "tester.checkString(\"lower('1')\",\"1\",\"CHAR(1) NOT NULL\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "tester.checkString(\"trim(both 'a' from 'aAa')\",\"A\",\"VARCHAR(3) NOT NULL\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "tester.checkString(\"lower('AA')\",\"aa\",\"CHAR(2) NOT NULL\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
17->8 [style = bold, label=""];
10->18 [style = bold, label=""];
2->19 [style = dashed, label="0"];
3->17 [style = dashed, label="0"];
3->1 [style = bold, label=""];
2->6 [style = bold, label=""];
8->19 [style = bold, label=""];
14->10 [style = bold, label=""];
7->0 [style = bold, label=""];
4->0 [style = bold, label=""];
19->16 [style = bold, label=""];
20->21 [style = bold, label=""];
6->16 [style = dashed, label="0"];
5->11 [style = dashed, label="0"];
21->11 [style = bold, label=""];
0->21 [style = dashed, label="0"];
12->14 [style = bold, label=""];
11->17 [style = bold, label=""];
1->8 [style = dashed, label="0"];
1->2 [style = bold, label=""];
15->12 [style = bold, label=""];
13->15 [style = bold, label=""];
16->9 [style = bold, label=""];
0->5 [style = bold, label=""];
9->13 [style = bold, label=""];
}
