digraph {
33 [style = filled, label = "RelOptPredicateList predicates = mq.getAllPredicates(empScan)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "RexCall call = (RexCall)predicates.pulledUpPredicates.get(0)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "inputRef1 = (RexTableInputRef)call.getOperands().get(0)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertTrue(inputRef2.getQualifiedName().equals(ImmutableList.of(\"CATALOG\",\"SALES\",\"DEPT\")))@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "assertThat(inputRef1.getQualifiedName(),is(EMP_QNAME))@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "final RelMetadataQuery mq = cluster.getMetadataQuery()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(predicates.pulledUpPredicates.size(),is(1))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertThat(pulledUpPredicates,sortsAs(\"(=($0, 1)(\"))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "relBuilder.push(empScan)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "relBuilder.project(relBuilder.field(\"DEPTNO\"))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME))@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
47 [style = filled, label = "ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "final RelNode project = relBuilder.peek()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertThat(inputRef1.getQualifiedName(),is(EMP_QNAME))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "relBuilder.push(deptScan)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(inputRef2.getIndex(),is(0))@@@37@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(inputRef1.getIndex(),is(7))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(predicates.pulledUpPredicates.isEmpty(),is(true))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final LogicalTableScan empScan = LogicalTableScan.create(cluster,empTable)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(inputRef1.getIndex(),is(0))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "call = (RexCall)predicates.pulledUpPredicates.get(0)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(call.getOperands().size(),is(2))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "final String sql = \"select a, max(b) from (\" + \" select 1 as a, 2 as b from emp)subq\" + \"group by a\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final RelNode filter = relBuilder.peek()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "RelOptTable deptTable@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(inputRef1.getIndex(),is(0))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "checkAllPredicates['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "checkAllPredicates['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "RelOptCluster cluster@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "testPullUpPredicatesFromAggregation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "final Aggregate rel = (Aggregate)convertSql(sql)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "inputRef1 = (RexTableInputRef)call.getOperands().get(0)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "RelOptTable empTable@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "RelOptCluster cluster@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "RexTableInputRef inputRef2 = (RexTableInputRef)call.getOperands().get(1)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "RelOptTable empTable@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "relBuilder.filter(relBuilder.equals(relBuilder.field(\"EMPNO\"),relBuilder.literal(BigDecimal.ONE)))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final RelBuilder relBuilder = RelBuilder.proto().create(cluster,null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME))@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
48 [style = filled, label = "RelOptPredicateList inputSet = mq.getPulledUpPredicates(rel)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(call.getOperands().size(),is(2))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "relBuilder.join(JoinRelType.INNER,relBuilder.equals(relBuilder.field(2,0,\"DEPTNO\"),relBuilder.field(2,1,\"DEPTNO\")))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertThat(inputRef1.getQualifiedName(),is(EMP_QNAME))@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "final LogicalTableScan deptScan = LogicalTableScan.create(cluster,deptTable)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertThat(inputRef2.getQualifiedName(),equalTo(ImmutableList.of(\"CATALOG\",\"SALES\",\"DEPT\")))@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "RexTableInputRef inputRef1 = (RexTableInputRef)call.getOperands().get(0)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertThat(predicates.pulledUpPredicates.size(),is(2))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "final RelMetadataQuery mq = rel.getCluster().getMetadataQuery()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "call = (RexCall)predicates.pulledUpPredicates.get(1)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "predicates = mq.getAllPredicates(project)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "predicates = mq.getAllPredicates(filter)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(call.getOperands().size(),is(2))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42->39 [style = dotted, label="true"];
36->6 [style = bold, label=""];
6->17 [style = bold, label=""];
40->10 [style = bold, label=""];
37->2 [style = solid, label="project"];
42->13 [style = bold, label=""];
30->40 [style = dashed, label="0"];
35->16 [style = bold, label=""];
15->45 [style = bold, label=""];
27->43 [style = bold, label=""];
19->0 [style = dotted, label="true"];
4->25 [style = bold, label=""];
47->52 [style = solid, label="pulledUpPredicates"];
50->46 [style = bold, label=""];
39->13 [style = solid, label="cluster"];
14->22 [style = bold, label=""];
7->35 [style = bold, label=""];
5->15 [style = bold, label=""];
31->4 [style = bold, label=""];
20->14 [style = bold, label=""];
50->46 [style = solid, label="sql"];
24->38 [style = bold, label=""];
16->32 [style = bold, label=""];
20->14 [style = solid, label="filter"];
34->8 [style = bold, label=""];
42->28 [style = dotted, label="true"];
9->45 [style = dashed, label="0"];
46->48 [style = solid, label="rel"];
39->31 [style = solid, label="cluster"];
32->30 [style = bold, label=""];
34->43 [style = dashed, label="0"];
13->1 [style = bold, label=""];
49->50 [style = bold, label=""];
19->28 [style = dotted, label="true"];
35->44 [style = dashed, label="0"];
42->41 [style = dotted, label="true"];
9->26 [style = bold, label=""];
46->51 [style = bold, label=""];
29->20 [style = bold, label=""];
18->29 [style = bold, label=""];
11->5 [style = bold, label=""];
26->31 [style = bold, label=""];
3->24 [style = solid, label="empTable"];
21->37 [style = bold, label=""];
27->34 [style = bold, label=""];
51->48 [style = bold, label=""];
19->13 [style = bold, label=""];
44->16 [style = bold, label=""];
33->18 [style = bold, label=""];
31->4 [style = solid, label="deptScan"];
39->24 [style = solid, label="cluster"];
1->24 [style = bold, label=""];
0->13 [style = solid, label="cluster"];
28->31 [style = solid, label="deptTable"];
15->9 [style = bold, label=""];
32->40 [style = bold, label=""];
43->8 [style = bold, label=""];
2->36 [style = bold, label=""];
24->38 [style = solid, label="empScan"];
48->47 [style = bold, label=""];
30->10 [style = bold, label=""];
41->24 [style = solid, label="empTable"];
18->52 [style = dashed, label="0"];
37->2 [style = bold, label=""];
12->23 [style = bold, label=""];
23->7 [style = bold, label=""];
0->24 [style = solid, label="cluster"];
0->31 [style = solid, label="cluster"];
24->33 [style = solid, label="empScan"];
17->27 [style = bold, label=""];
45->26 [style = bold, label=""];
19->3 [style = dotted, label="true"];
38->33 [style = bold, label=""];
47->52 [style = bold, label=""];
22->11 [style = bold, label=""];
8->12 [style = bold, label=""];
7->44 [style = bold, label=""];
25->21 [style = bold, label=""];
}
