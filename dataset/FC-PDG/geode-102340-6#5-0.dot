digraph {
12 [style = filled, label = "getDataTypeShouldReturnUserClass4['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "PowerMockito.mockStatic()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "DataOutputStream out = new DataOutputStream(baos)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "out.writeByte(DSCODE.USER_CLASS_4.toByte())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ByteArrayOutputStream baos = new ByteArrayOutputStream()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "out.writeInt(someUserClass4Id)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "DataSerializer.writeString(DSCODE.GEMFIRE_ENUM.name(),out)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "int someUserClass4Id = 1@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "getDataTypeShouldReturnGemfireEnum['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "String type = DataType.getDataType(bytes)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "getDataTypeShouldReturnGemfireEnum['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "out.writeByte(DSCODE.GEMFIRE_ENUM.toByte())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "when(DataSerializer.readString(any())).thenReturn(\"GEMFIRE_ENUM\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "byte(( bytes = baos.toByteArray()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(type).isEqualTo(\"DataSerializer: with Id:\" + someUserClass4Id)@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "byte(( bytes = baos.toByteArray()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->3 [style = solid, label="baos"];
7->10 [style = solid, label="out"];
3->7 [style = solid, label="baos"];
15->14 [style = bold, label=""];
4->6 [style = bold, label=""];
2->3 [style = bold, label=""];
7->0 [style = bold, label=""];
14->6 [style = solid, label="bytes"];
13->11 [style = bold, label=""];
8->1 [style = bold, label=""];
12->13 [style = bold, label=""];
6->5 [style = bold, label=""];
0->10 [style = bold, label=""];
13->15 [style = solid, label="someUserClass4Id"];
3->7 [style = bold, label=""];
11->3 [style = bold, label=""];
0->4 [style = bold, label=""];
4->6 [style = solid, label="bytes"];
10->4 [style = bold, label=""];
9->3 [style = bold, label=""];
7->15 [style = bold, label=""];
1->2 [style = bold, label=""];
13->5 [style = solid, label="someUserClass4Id"];
0->7 [style = dashed, label="0"];
14->6 [style = bold, label=""];
}
