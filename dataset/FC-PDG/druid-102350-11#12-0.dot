digraph {
38 [style = filled, label = "testRunWithTransformSpec['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"0\"),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"4\")),true,null,DateTimes.of(\"2010\"),\"awsEndpoint\",null,null,null,null,false))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(2,task.getRunner().getRowIngestionMeters().getThrownAway())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2,desc3),publishedDescriptors())@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2009/P1D\",0)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "SegmentDescriptor desc1 = sd(\"2008/P1D\",0)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "SegmentDescriptor desc3 = sd(\"2010/P1D\",0)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "recordSupplier.assign(EasyMock.anyObject())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(4,task.getRunner().getRowIngestionMeters().getThrownAway())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "task.getRunner().getStatus() != SeekableStreamIndexTaskRunner.Status.READING@@@14@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(0)))@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getProcessed())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testRunWithMaximumMessageTime['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "recordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2010/P1D\",0)@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testRunWithMaximumMessageTime['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Thread.sleep(10)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1),publishedDescriptors())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "SegmentDescriptor desc2 = sd(\"2009/P1D\",0)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getProcessed())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"bb\"),readSegmentColumn(\"dim1t\",desc1))@@@26@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "recordSupplier.close()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(2)))@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3),publishedDescriptors())@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors()@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "replayAll()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "final KinesisIndexTask task = createTask(null,DATA_SCHEMA.withTransformSpec(new TransformSpec(new SelectorDimFilter(\"dim1\",\"b\",null),ImmutableList.of(new ExpressionTransform(\"dim1t\",\"concat(dim1,dim1)\",ExprMacroTable.nil())))),new KinesisIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"0\"),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"4\")),true,null,null,\"awsEndpoint\",null,null,null,null,false))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "verifyAll()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc1))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(1)))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "EasyMock.expect(recordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "EasyMock.expectLastCall().once()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"4\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "EasyMock.expect(recordSupplier.poll(EasyMock.anyLong())).andReturn(records.subList(0,13)).once()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24->10 [style = bold, label=""];
14->16 [style = bold, label=""];
13->25 [style = bold, label=""];
17->8 [style = bold, label=""];
35->31 [style = bold, label=""];
1->4 [style = bold, label=""];
5->23 [style = bold, label=""];
4->1 [style = dotted, label="true"];
6->22 [style = bold, label=""];
22->31 [style = dashed, label="0"];
28->31 [style = solid, label="desc2"];
37->43 [style = solid, label="desc1"];
20->0 [style = bold, label=""];
25->3 [style = bold, label=""];
4->19 [style = bold, label=""];
34->33 [style = bold, label=""];
30->27 [style = bold, label=""];
23->4 [style = bold, label=""];
43->42 [style = bold, label=""];
32->31 [style = solid, label="desc1"];
39->37 [style = solid, label="task"];
17->32 [style = dashed, label="0"];
8->6 [style = bold, label=""];
3->15 [style = bold, label=""];
11->32 [style = bold, label=""];
5->8 [style = solid, label="task"];
5->39 [style = dashed, label="0"];
39->23 [style = solid, label="task"];
8->28 [style = dashed, label="0"];
6->0 [style = solid, label="desc3"];
11->36 [style = dashed, label="0"];
41->2 [style = bold, label=""];
22->7 [style = bold, label=""];
31->7 [style = bold, label=""];
42->40 [style = bold, label=""];
24->41 [style = bold, label=""];
29->18 [style = bold, label=""];
5->6 [style = solid, label="task"];
19->24 [style = bold, label=""];
7->26 [style = bold, label=""];
37->7 [style = solid, label="desc1"];
6->35 [style = dashed, label="0"];
17->26 [style = solid, label="desc1"];
28->35 [style = bold, label=""];
37->43 [style = bold, label=""];
40->7 [style = bold, label=""];
38->18 [style = bold, label=""];
7->34 [style = bold, label=""];
17->22 [style = solid, label="desc1"];
10->41 [style = dashed, label="0"];
6->22 [style = solid, label="desc3"];
15->9 [style = bold, label=""];
39->23 [style = bold, label=""];
37->40 [style = solid, label="desc1"];
0->30 [style = dashed, label="0"];
2->36 [style = bold, label=""];
12->18 [style = bold, label=""];
9->21 [style = bold, label=""];
18->13 [style = bold, label=""];
33->30 [style = bold, label=""];
16->5 [style = bold, label=""];
5->17 [style = solid, label="task"];
8->20 [style = solid, label="desc2"];
11->17 [style = bold, label=""];
35->31 [style = solid, label="desc3"];
16->39 [style = bold, label=""];
10->2 [style = bold, label=""];
4->1 [style = bold, label=""];
5->23 [style = solid, label="task"];
36->37 [style = bold, label=""];
17->37 [style = dashed, label="0"];
20->33 [style = dashed, label="0"];
32->28 [style = bold, label=""];
26->40 [style = dashed, label="0"];
2->11 [style = bold, label=""];
20->7 [style = dashed, label="0"];
26->20 [style = bold, label=""];
21->14 [style = bold, label=""];
8->22 [style = solid, label="desc2"];
}
