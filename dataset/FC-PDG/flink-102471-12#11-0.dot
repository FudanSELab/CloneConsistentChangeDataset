digraph {
14 [style = filled, label = "Assert.assertEquals(4L,chainedOutputWatermarkGauge.getValue().longValue())@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(1L,headInput1WatermarkGauge.getValue().longValue())@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,chainedOutputWatermarkGauge.getValue().longValue())@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "final TwoInputStreamTaskTestHarness<String,Integer,String> testHarness = new TwoInputStreamTaskTestHarness<>(null,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.INT_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
63 [style = filled, label = "OperatorID headOperatorId = new OperatorID()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,headInput2WatermarkGauge.getValue().longValue())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(2L,headOutputWatermarkGauge.getValue().longValue())@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Gauge<Long> taskInputWatermarkGauge = (Gauge<Long>)taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "OneInputStreamTaskTest.WatermarkMetricOperator chainedOperator = new OneInputStreamTaskTest.WatermarkMetricOperator()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(1L,headInputWatermarkGauge.getValue().longValue())@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "InterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "Assert.assertEquals(2L,taskInputWatermarkGauge.getValue().longValue())@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(\"A metric was registered multiple times.\",7,new HashSet<>(Arrays.asList(taskInputWatermarkGauge,headInput1WatermarkGauge,headInput2WatermarkGauge,headInputWatermarkGauge,headOutputWatermarkGauge,chainedInputWatermarkGauge,chainedOutputWatermarkGauge)).size())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(2L,headInput2WatermarkGauge.getValue().longValue())@@@71@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,chainedInputWatermarkGauge.getValue().longValue())@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Gauge<Long> headOutputWatermarkGauge = (Gauge<Long>)headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(2L,chainedInputWatermarkGauge.getValue().longValue())@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "Assert.assertEquals(1L,headInput1WatermarkGauge.getValue().longValue())@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "Assert.assertEquals(4L,chainedInputWatermarkGauge.getValue().longValue())@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testHarness.waitForTaskRunning()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(2L,headInput2WatermarkGauge.getValue().longValue())@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testHarness.processElement(new Watermark(1L),0,0)@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "Assert.assertEquals(8L,chainedOutputWatermarkGauge.getValue().longValue())@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "testWatermarkMetrics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "Assert.assertEquals(2L,headInputWatermarkGauge.getValue().longValue())@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testHarness.processElement(new Watermark(3L),0,0)@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "OneInputStreamOperator<String,String> headOperator = new WatermarkMetricOperator()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Gauge<Long> chainedInputWatermarkGauge = (Gauge<Long>)chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testHarness.waitForTaskCompletion()@@@59@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,taskInputWatermarkGauge.getValue().longValue())@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,headInputWatermarkGauge.getValue().longValue())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(3L,headInput1WatermarkGauge.getValue().longValue())@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "CoStreamMap<String,Integer,String> headOperator = new CoStreamMap<>(new IdentityMap())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(2L,taskInputWatermarkGauge.getValue().longValue())@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "testHarness.processElement(new Watermark(2L))@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "Gauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>)chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK)@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,headInputWatermarkGauge.getValue().longValue())@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "InterceptingTaskMetricGroup taskMetricGroup = new InterceptingTaskMetricGroup(){@Override public OperatorMetricGroup getOrAddOperator(OperatorID id,String name){if (id.equals(headOperatorId)) {return headOperatorMetricGroup}if (id.equals(chainedOperatorId)) {return chainedOperatorMetricGroup}{return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1ba6059idname}}}@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(1L,headOutputWatermarkGauge.getValue().longValue())@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testHarness.endInput()@@@58@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "OneInputStreamOperator<String,String> chainedOperator = new WatermarkMetricOperator()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Gauge<Long> headInput2WatermarkGauge = (Gauge<Long>)headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_2_WATERMARK)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testHarness.processElement(new Watermark(2L),1,0)@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(1L,chainedInputWatermarkGauge.getValue().longValue())@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testHarness.setupOperatorChain(headOperatorId,headOperator).chain(chainedOperatorId,chainedOperator,BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig())).finish()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testHarness.invoke(env)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "Assert.assertEquals(4L,headOutputWatermarkGauge.getValue().longValue())@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "final OperatorID headOperatorId = new OperatorID()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(1L,taskInputWatermarkGauge.getValue().longValue())@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testHarness.waitForInputProcessing()@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "testWatermarkMetrics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Assert.assertEquals(2L,headInputWatermarkGauge.getValue().longValue())@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testHarness.waitForInputProcessing()@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final TwoInputStreamTaskTestHarness<String,Integer,String> testHarness = new TwoInputStreamTaskTestHarness<>(null,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.INT_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "InterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,headOutputWatermarkGauge.getValue().longValue())@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "Assert.assertEquals(\"A metric was registered multiple times.\",5,new HashSet<>(Arrays.asList(taskInputWatermarkGauge,headInputWatermarkGauge,headOutputWatermarkGauge,chainedInputWatermarkGauge,chainedOutputWatermarkGauge)).size())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testWatermarkMetrics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,chainedOutputWatermarkGauge.getValue().longValue())@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,taskInputWatermarkGauge.getValue().longValue())@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "OperatorID chainedOperatorId = new OperatorID()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "testHarness.processElement(new Watermark(1L))@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Gauge<Long> headInputWatermarkGauge = (Gauge<Long>)headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(2L,chainedOutputWatermarkGauge.getValue().longValue())@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,chainedInputWatermarkGauge.getValue().longValue())@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "testHarness.waitForInputProcessing()@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,headInput1WatermarkGauge.getValue().longValue())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "testHarness.waitForInputProcessing()@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,headInput2WatermarkGauge.getValue().longValue())@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "final OneInputStreamTaskTestHarness<String,String> testHarness = new OneInputStreamTaskTestHarness<>(null,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,headOutputWatermarkGauge.getValue().longValue())@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "StreamMockEnvironment env = new StreamMockEnvironment(testHarness.jobConfig,testHarness.taskConfig,testHarness.memorySize,new MockInputSplitProvider(),testHarness.bufferSize,new TestTaskStateManager()){@Override public TaskMetricGroup getMetricGroup(){return taskMetricGroup}}@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Gauge<Long> headInput1WatermarkGauge = (Gauge<Long>)headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_1_WATERMARK)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56->29 [style = bold, label=""];
47->9 [style = bold, label=""];
70->67 [style = bold, label=""];
61->66 [style = bold, label=""];
50->22 [style = bold, label=""];
7->30 [style = bold, label=""];
21->15 [style = bold, label=""];
46->2 [style = bold, label=""];
25->53 [style = bold, label=""];
53->47 [style = bold, label=""];
41->9 [style = bold, label=""];
68->49 [style = bold, label=""];
8->44 [style = bold, label=""];
19->24 [style = bold, label=""];
39->68 [style = dashed, label="0"];
66->20 [style = bold, label=""];
39->49 [style = bold, label=""];
30->14 [style = bold, label=""];
34->32 [style = bold, label=""];
4->36 [style = bold, label=""];
38->55 [style = bold, label=""];
14->20 [style = bold, label=""];
52->35 [style = bold, label=""];
60->51 [style = bold, label=""];
49->12 [style = bold, label=""];
43->55 [style = solid, label="headOperatorId"];
27->0 [style = bold, label=""];
0->19 [style = bold, label=""];
36->57 [style = dashed, label="0"];
26->43 [style = bold, label=""];
44->50 [style = bold, label=""];
16->19 [style = bold, label=""];
22->23 [style = bold, label=""];
13->11 [style = bold, label=""];
14->71 [style = bold, label=""];
29->52 [style = bold, label=""];
69->62 [style = bold, label=""];
17->51 [style = bold, label=""];
5->1 [style = bold, label=""];
54->25 [style = bold, label=""];
26->67 [style = dashed, label="0"];
12->33 [style = bold, label=""];
54->59 [style = bold, label=""];
45->21 [style = bold, label=""];
65->61 [style = bold, label=""];
31->28 [style = bold, label=""];
51->42 [style = bold, label=""];
32->17 [style = bold, label=""];
43->63 [style = dashed, label="0"];
23->5 [style = bold, label=""];
16->27 [style = bold, label=""];
35->3 [style = bold, label=""];
47->40 [style = bold, label=""];
55->45 [style = solid, label="taskMetricGroup"];
42->8 [style = bold, label=""];
57->26 [style = bold, label=""];
49->55 [style = solid, label="chainedOperatorId"];
58->57 [style = bold, label=""];
2->10 [style = bold, label=""];
59->53 [style = bold, label=""];
48->46 [style = bold, label=""];
11->31 [style = bold, label=""];
32->60 [style = bold, label=""];
72->65 [style = bold, label=""];
67->63 [style = bold, label=""];
33->55 [style = solid, label="headOperatorMetricGroup"];
36->70 [style = dashed, label="0"];
43->39 [style = bold, label=""];
45->21 [style = solid, label="env"];
38->55 [style = solid, label="chainedOperatorMetricGroup"];
28->7 [style = bold, label=""];
51->56 [style = bold, label=""];
1->18 [style = bold, label=""];
36->26 [style = bold, label=""];
20->6 [style = bold, label=""];
15->16 [style = bold, label=""];
25->59 [style = dashed, label="0"];
8->7 [style = bold, label=""];
71->69 [style = bold, label=""];
37->54 [style = bold, label=""];
3->48 [style = bold, label=""];
10->42 [style = bold, label=""];
63->68 [style = bold, label=""];
62->72 [style = bold, label=""];
24->37 [style = bold, label=""];
40->41 [style = bold, label=""];
18->13 [style = bold, label=""];
33->38 [style = bold, label=""];
17->60 [style = dashed, label="0"];
63->55 [style = solid, label="headOperatorId"];
55->45 [style = bold, label=""];
64->70 [style = bold, label=""];
9->34 [style = bold, label=""];
}
