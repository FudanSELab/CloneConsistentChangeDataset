digraph {
12 [style = filled, label = "GroupByQuery.Builder builder = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\"),new DefaultDimensionSpec(\"market\",\"market\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setLimitSpec(new DefaultLimitSpec(Lists.newArrayList(new OrderByColumnSpec(\"alias\",OrderByColumnSpec.Direction.DESCENDING),new OrderByColumnSpec(\"idx\",OrderByColumnSpec.Direction.DESCENDING),new OrderByColumnSpec(\"market\",OrderByColumnSpec.Direction.DESCENDING)),5)).setContext(ImmutableMap.of(GroupByQueryConfig.CTX_KEY_FORCE_LIMIT_PUSH_DOWN,true)).setGranularity(Granularities.ALL)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testMergeResultsWithLimitPushDownSortByAgg['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "List<Row> allGranExpectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"mezzanine\",\"rows\",6L,\"idx\",4420L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"premium\",\"rows\",6L,\"idx\",4416L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"entertainment\",\"rows\",2L,\"idx\",319L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"automotive\",\"rows\",2L,\"idx\",269L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"travel\",\"rows\",2L,\"idx\",243L))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "GroupByQuery.Builder builder = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setLimitSpec(new DefaultLimitSpec(Collections.singletonList(new OrderByColumnSpec(\"idx\",OrderByColumnSpec.Direction.DESCENDING)),5)).setContext(ImmutableMap.of(GroupByQueryConfig.CTX_KEY_FORCE_LIMIT_PUSH_DOWN,true)).setGranularity(Granularities.ALL)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "QueryRunner mergedRunner = factory.getToolchest().mergeResults(new QueryRunner<Row>(){@Override public Sequence<Row> run(QueryPlus<Row> queryPlus,Map<String,Object> responseContext){final QueryPlus<Row> queryPlus1 = queryPlus.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-04-02/2011-04-03\"))))final QueryPlus<Row> queryPlus2 = queryPlus.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-04-03/2011-04-04\"))))return factory.getToolchest().mergeResults(null).run(queryPlus,responseContext)}})@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<Row> allGranExpectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"travel\",\"market\",\"spot\",\"rows\",2L,\"idx\",243L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"technology\",\"market\",\"spot\",\"rows\",2L,\"idx\",177L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"premium\",\"market\",\"total_market\",\"rows\",2L,\"idx\",2342L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"premium\",\"market\",\"upfront\",\"rows\",2L,\"idx\",1817L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"premium\",\"market\",\"spot\",\"rows\",2L,\"idx\",257L))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Map<String,Object> context = new HashMap<>()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final GroupByQuery allGranQuery = builder.build()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "TestHelper.assertExpectedObjects(allGranExpectedResults,results,\"merged\")@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setLimitSpec(new DefaultLimitSpec(Collections.singletonList(new OrderByColumnSpec(\"idx\",OrderByColumnSpec.Direction.DESCENDING)),5)).overrideContext(ImmutableMap.of(GroupByQueryConfig.CTX_KEY_FORCE_LIMIT_PUSH_DOWN,true)).setGranularity(Granularities.ALL)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "testMergeResultsWithLimitPushDownSortByAgg['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "testMergeResultsWithLimitPushDownSortByDimAggDim['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Iterable<Row> results = mergedRunner.run(QueryPlus.wrap(allGranQuery),context).toList()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->3 [style = dotted, label="true"];
4->14 [style = bold, label=""];
7->1 [style = bold, label=""];
1->8 [style = bold, label=""];
4->6 [style = bold, label=""];
2->3 [style = bold, label=""];
0->2 [style = bold, label=""];
6->5 [style = solid, label="allGranExpectedResults"];
3->12 [style = bold, label=""];
2->10 [style = bold, label=""];
12->1 [style = bold, label=""];
11->2 [style = bold, label=""];
2->12 [style = bold, label=""];
3->10 [style = bold, label=""];
3->7 [style = bold, label=""];
9->5 [style = bold, label=""];
7->12 [style = dashed, label="0"];
9->5 [style = solid, label="results"];
7->10 [style = dashed, label="0"];
14->9 [style = bold, label=""];
2->7 [style = bold, label=""];
8->4 [style = bold, label=""];
6->9 [style = bold, label=""];
14->5 [style = solid, label="allGranExpectedResults"];
10->1 [style = bold, label=""];
13->2 [style = bold, label=""];
}
