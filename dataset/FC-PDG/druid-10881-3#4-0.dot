digraph {
75 [style = filled, label = "intervals.add(expectation.getInterval())@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "List<String> segmentIds = Lists.newArrayList()@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
108 [style = filled, label = "Assert.assertEquals(true,capturedQuery.getContextValue(\"bySegment\"))@@@133@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
85 [style = filled, label = "intervals.add(expectation.getInterval())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
94 [style = filled, label = "expectedResultsRangeEnd = i + 1@@@101@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "final List<Iterable<Result<TimeseriesResultValue>>> filteredExpected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "expectations@@@24@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testQueryCachingWithFilter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "List<Interval> intervals = Lists.newArrayList()@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "expectedResultsRangeEnd = i + 1@@@97@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "final List<Interval> queryIntervals = Lists.newArrayListWithCapacity(args.length / 2)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
120 [style = filled, label = "testQueryCaching['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "expectations@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
126 [style = filled, label = "query instanceof TimeBoundaryQuery@@@95@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "intervalNo < i + 1@@@41@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTimeBoundaryResults(segmentIds,intervals,results)).once()@@@87@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
100 [style = filled, label = "List<Iterable<Result<TopNResultValue>>> results = Lists.newArrayList()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
102 [style = filled, label = "intervals.add(expectation.getInterval())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
106 [style = filled, label = "List<String> segmentIds = Lists.newArrayList()@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
88 [style = filled, label = "expectations@@@71@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
95 [style = filled, label = "query instanceof SearchQuery@@@45@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "mocks.add(serverView)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Object args@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final Capture<? extends QueryPlus> capture = new Capture()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
115 [style = filled, label = "List<Iterable<Row>> results = Lists.newArrayList()@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
125 [style = filled, label = "List<Iterable<Result<TimeBoundaryResultValue>>> results = Lists.newArrayList()@@@81@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "intervalNo++@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Iterables.addAll((List)expected,filteredExpected.get(intervalNo))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableSearchResults(segmentIds,intervals,results)).once()@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "ServerExpectation expectation@@@27@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "List<Object> mocks = Lists.newArrayList()@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "DruidServer server = entry.getKey()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final Capture<? extends Map> context = new Capture()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "final List<Iterable<Result<TimeseriesResultValue>>> results = new ArrayList<>()@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "final QueryRunner runner@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
129 [style = filled, label = "expectations@@@82@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Map.Entry<DruidServer,ServerExpectations> entry@@@15@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final List<Iterable<Result<TimeseriesResultValue>>> results = Lists.newArrayList()@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
79 [style = filled, label = "expectations@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "Capture queryCapture@@@129@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final Interval actualQueryInterval = new Interval(queryIntervals.get(0).getStart(),queryIntervals.get(i).getEnd())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "ServerExpectations expectations = entry.getValue()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "final List<String> segmentIds = new ArrayList<>()@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
116 [style = filled, label = "List<Interval> intervals = Lists.newArrayList()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "final Query query@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final List<Map<DruidServer,ServerExpectations>> serverExpectationList = populateTimeline(queryIntervals,expectedResults,i,mocks)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "List<Interval> intervals = Lists.newArrayList()@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "final int numTimesToQuery@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
130 [style = filled, label = "QueryPlus capturedQueryPlus = (QueryPlus)queryCapture.getValue()@@@130@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "final int numTimesToQuery@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
122 [style = filled, label = "results.add(expectation.getResults())@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
96 [style = filled, label = "List<Iterable<Result<TimeseriesResultValue>>> results = Lists.newArrayList()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Map.Entry<DruidServer,ServerExpectations> entry@@@14@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "expectations@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "testQueryCachingWithFilter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "final List<List<Iterable<Result<Object>>>> expectedResults = Lists.newArrayListWithCapacity(queryIntervals.size())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "query instanceof TimeseriesQuery@@@23@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
101 [style = filled, label = "ServerExpectation expectation@@@60@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
121 [style = filled, label = "intervals.add(expectation.getInterval())@@@84@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "boolean expectBySegment@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
113 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTopNResults(segmentIds,intervals,results)).once()@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "throw new ISE(\"Unknown query type(%s(\",query.getClass())@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "expectedResultsRangeStart = 0@@@100@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "List<String> segmentIds = Lists.newArrayList()@@@79@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "final List<Iterable<Result<TimeseriesResultValue>>> filteredExpected@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "EasyMock.expect(serverView.getQueryRunner(server)).andReturn(expectations.getQueryRunner()).times(0,1)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "runWithMocks(new Runnable(){@Override public void run(){HashMap<String,List> context = new HashMap<String,List>()for (int i = 0 i < numTimesToQuery ++i){TestHelper.assertExpectedResults(new MergeIterable<>(Comparators.naturalNullsFirst(),FunctionalIterable.create(new RangeIterable(expectedResultsRangeStart,expectedResultsRangeEnd)).transformCat(new Function<Integer,Iterable<Iterable<Result<Object>>>>(){@Override public Iterable<Iterable<Result<Object>>> apply(@Nullable Integer input){List<Iterable<Result<Object>>> retVal = Lists.newArrayList()final Map<DruidServer,ServerExpectations> exps = serverExpectationList.get(input)for (ServerExpectations expectations : exps.values()){for (ServerExpectation expectation : expectations){retVal.add(expectation.getResults())}}return retVal}})),runner.run(QueryPlus.wrap(query.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(ImmutableList.of(actualQueryInterval)))),context))if (queryCompletedCallback != null) {queryCompletedCallback.run()}}}},mocks.toArray())@@@103@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "final QueryRunner runner@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "final Query query@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
117 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@72@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "throw new ISE(\"Unknown query type(%s(\",query.getClass())@@@90@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
111 [style = filled, label = "List<Interval> intervals = Lists.newArrayList()@@@69@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
109 [style = filled, label = "Object args@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "ServerExpectation expectation@@@24@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
104 [style = filled, label = "query instanceof TimeBoundaryQuery@@@78@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
127 [style = filled, label = "ServerExpectation expectation@@@71@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "EasyMock.expect(serverView.getQueryRunner(server)).andReturn(expectations.getQueryRunner()).once()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
119 [style = filled, label = "queryCaptures@@@129@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "ServerExpectation expectation@@@49@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "query instanceof SelectQuery@@@56@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "queryCaptures.add(capture)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "expectBySegment@@@132@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "++i@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final Map<DruidServer,ServerExpectations> finalExpectation = serverExpectationList.get(serverExpectationList.size() - 1)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "QueryRunner queryable = expectations.getQueryRunner()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
103 [style = filled, label = "expectedResultsRangeStart = i@@@96@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableGroupByResults(segmentIds,intervals,results)).once()@@@76@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andAnswer(new IAnswer<Sequence>(){@Override public Sequence answer(){return toFilteredQueryableTimeseriesResults((TimeseriesQuery)capture.getValue().getQuery(),segmentIds,queryIntervals,results)}}).times(0,1)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "List<Iterable<Result<SearchResultValue>>> results = Lists.newArrayList()@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "results.add(expectation.getResults())@@@74@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
118 [style = filled, label = "Assert.assertTrue(capturedQuery.getContextValue(\"bySegment\") == null || capturedQuery.getContextValue(\"bySegment\").equals(false))@@@136@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "int intervalNo = 0@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "List<Object> mocks = new ArrayList<>()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
91 [style = filled, label = "List<String> segmentIds = Lists.newArrayList()@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
107 [style = filled, label = "results.add(expectation.getResults())@@@85@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
87 [style = filled, label = "results.add(expectation.getResults())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
93 [style = filled, label = "finalExpectation.entrySet()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
105 [style = filled, label = "List<Iterable<Result<SelectResultValue>>> results = Lists.newArrayList()@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "results.add(expectation.getResults())@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "expectations@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@83@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
92 [style = filled, label = "List<String> segmentIds = Lists.newArrayList()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "Query capturedQuery = capturedQueryPlus.getQuery()@@@131@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
128 [style = filled, label = "results.add(expectation.getResults())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "ServerExpectation expectation@@@82@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "intervals.add(expectation.getInterval())@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "List<String> segmentIds = Lists.newArrayList()@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final int expectedResultsRangeEnd@@@94@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "parseResults(queryIntervals,expectedResults,args)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
110 [style = filled, label = "List<Interval> intervals = Lists.newArrayList()@@@80@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
124 [style = filled, label = "final int expectedResultsRangeStart@@@93@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "final Query query@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
99 [style = filled, label = "ServerExpectation expectation@@@38@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final List<String> segmentIds = Lists.newArrayList()@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
98 [style = filled, label = "List<Interval> intervals = Lists.newArrayList()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "finalExpectation.entrySet()@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
97 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTimeseriesResults(expectBySegment,segmentIds,intervals,results)).once()@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
123 [style = filled, label = "intervals.add(expectation.getInterval())@@@73@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableSelectResults(segmentIds,intervals,results)).once()@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
84 [style = filled, label = "final int numTimesToQuery@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
112 [style = filled, label = "final QueryRunner runner@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "i < queryIntervals.size()@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "int i = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "expectations@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "query instanceof GroupByQuery@@@67@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "query instanceof TopNQuery@@@34@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
114 [style = filled, label = "List<Capture> queryCaptures = Lists.newArrayList()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28->11 [style = dotted, label="true"];
69->101 [style = dotted, label="true"];
61->123 [style = dotted, label="true"];
55->100 [style = dotted, label="true"];
1->39 [style = dotted, label="true"];
61->66 [style = bold, label=""];
21->96 [style = dotted, label="true"];
44->8 [style = bold, label=""];
126->103 [style = dotted, label="true"];
120->112 [style = dotted, label="true"];
5->9 [style = bold, label=""];
21->15 [style = dotted, label="true"];
38->10 [style = solid, label="queryIntervals"];
74->82 [style = bold, label=""];
63->86 [style = bold, label=""];
69->75 [style = dotted, label="true"];
126->63 [style = dotted, label="true"];
126->9 [style = dotted, label="false"];
21->15 [style = bold, label=""];
68->21 [style = solid, label="query"];
21->8 [style = dotted, label="true"];
28->38 [style = bold, label=""];
15->92 [style = dashed, label="0"];
61->111 [style = dotted, label="true"];
4->1 [style = solid, label="i"];
21->48 [style = bold, label=""];
1->31 [style = dotted, label="true"];
0->126 [style = bold, label=""];
1->21 [style = dotted, label="true"];
10->114 [style = bold, label=""];
104->121 [style = dotted, label="true"];
22->81 [style = bold, label=""];
55->98 [style = dotted, label="true"];
61->88 [style = dotted, label="true"];
104->90 [style = dotted, label="true"];
16->9 [style = solid, label="actualQueryInterval"];
9->1 [style = solid, label="i"];
7->8 [style = bold, label=""];
30->18 [style = bold, label=""];
12->10 [style = solid, label="mocks"];
9->10 [style = solid, label="i"];
1->65 [style = dotted, label="true"];
11->21 [style = solid, label="query"];
1->3 [style = dotted, label="true"];
103->63 [style = bold, label=""];
95->69 [style = dotted, label="false"];
86->63 [style = solid, label="i"];
21->116 [style = dotted, label="true"];
5->13 [style = dotted, label="true"];
21->56 [style = dotted, label="true"];
21->128 [style = dotted, label="true"];
38->30 [style = bold, label=""];
36->0 [style = bold, label=""];
41->40 [style = dotted, label="true"];
21->36 [style = bold, label=""];
31->35 [style = bold, label=""];
113->124 [style = bold, label=""];
21->24 [style = dotted, label="true"];
27->5 [style = solid, label="intervalNo"];
25->13 [style = solid, label="intervalNo"];
37->31 [style = bold, label=""];
67->121 [style = bold, label=""];
108->130 [style = bold, label=""];
54->118 [style = bold, label=""];
4->103 [style = solid, label="i"];
73->39 [style = bold, label=""];
21->7 [style = dotted, label="true"];
1->12 [style = dotted, label="true"];
1->54 [style = dotted, label="true"];
51->39 [style = bold, label=""];
41->43 [style = dotted, label="true"];
20->37 [style = bold, label=""];
1->12 [style = bold, label=""];
9->14 [style = bold, label=""];
66->111 [style = bold, label=""];
107->90 [style = bold, label=""];
1->126 [style = dotted, label="true"];
126->103 [style = bold, label=""];
1->6 [style = dotted, label="true"];
113->39 [style = bold, label=""];
1->23 [style = dotted, label="true"];
75->77 [style = bold, label=""];
54->108 [style = dotted, label="true"];
1->0 [style = dotted, label="true"];
41->33 [style = dotted, label="true"];
27->5 [style = bold, label=""];
21->102 [style = dotted, label="true"];
7->44 [style = dashed, label="0"];
120->71 [style = dotted, label="true"];
46->9 [style = solid, label="numTimesToQuery"];
53->78 [style = bold, label=""];
104->125 [style = dotted, label="true"];
68->61 [style = solid, label="query"];
120->38 [style = bold, label=""];
1->27 [style = dotted, label="true"];
21->55 [style = dotted, label="false"];
109->18 [style = solid, label="args"];
104->129 [style = dotted, label="true"];
13->25 [style = bold, label=""];
92->116 [style = bold, label=""];
21->42 [style = dotted, label="true"];
19->34 [style = bold, label=""];
81->37 [style = bold, label=""];
77->64 [style = bold, label=""];
1->35 [style = dotted, label="true"];
1->93 [style = dotted, label="true"];
1->114 [style = dotted, label="true"];
53->117 [style = bold, label=""];
41->46 [style = dotted, label="true"];
30->10 [style = solid, label="expectedResults"];
21->92 [style = dotted, label="true"];
61->53 [style = dotted, label="true"];
54->108 [style = bold, label=""];
1->22 [style = dotted, label="true"];
32->9 [style = solid, label="numTimesToQuery"];
68->95 [style = solid, label="query"];
55->83 [style = dotted, label="true"];
115->117 [style = bold, label=""];
22->86 [style = solid, label="expectations"];
1->49 [style = bold, label=""];
91->58 [style = bold, label=""];
48->44 [style = bold, label=""];
1->86 [style = dotted, label="true"];
125->67 [style = bold, label=""];
4->63 [style = solid, label="i"];
95->122 [style = dotted, label="true"];
86->103 [style = solid, label="i"];
128->19 [style = bold, label=""];
64->75 [style = bold, label=""];
35->21 [style = bold, label=""];
34->0 [style = bold, label=""];
96->19 [style = bold, label=""];
130->70 [style = bold, label=""];
117->123 [style = bold, label=""];
39->22 [style = bold, label=""];
21->48 [style = dotted, label="true"];
28->29 [style = dotted, label="true"];
4->94 [style = solid, label="i"];
95->51 [style = dotted, label="true"];
61->66 [style = dotted, label="true"];
122->82 [style = bold, label=""];
27->13 [style = solid, label="intervalNo"];
70->54 [style = bold, label=""];
18->4 [style = bold, label=""];
87->113 [style = bold, label=""];
22->20 [style = bold, label=""];
121->107 [style = bold, label=""];
9->94 [style = bold, label=""];
95->91 [style = bold, label=""];
84->86 [style = solid, label="numTimesToQuery"];
38->18 [style = solid, label="queryIntervals"];
49->10 [style = solid, label="mocks"];
5->25 [style = dotted, label="true"];
1->70 [style = dotted, label="true"];
68->126 [style = solid, label="query"];
55->95 [style = dotted, label="false"];
16->86 [style = solid, label="actualQueryInterval"];
126->94 [style = dotted, label="false"];
69->60 [style = dotted, label="true"];
41->38 [style = bold, label=""];
86->130 [style = bold, label=""];
104->73 [style = bold, label=""];
104->107 [style = dotted, label="true"];
31->9 [style = solid, label="context"];
69->105 [style = dotted, label="true"];
104->80 [style = dotted, label="true"];
31->86 [style = solid, label="context"];
54->118 [style = dotted, label="false"];
6->39 [style = bold, label=""];
78->39 [style = bold, label=""];
55->57 [style = dotted, label="true"];
94->86 [style = bold, label=""];
7->116 [style = dashed, label="0"];
95->69 [style = bold, label=""];
4->9 [style = solid, label="i"];
55->85 [style = dotted, label="true"];
12->49 [style = dashed, label="0"];
61->115 [style = dotted, label="true"];
1->10 [style = dotted, label="true"];
33->18 [style = solid, label="args"];
61->104 [style = bold, label=""];
1->17 [style = dotted, label="true"];
83->98 [style = bold, label=""];
1->81 [style = dotted, label="true"];
104->89 [style = dotted, label="true"];
9->5 [style = solid, label="i"];
55->87 [style = dotted, label="true"];
37->65 [style = solid, label="capture"];
0->13 [style = solid, label="expected"];
65->35 [style = bold, label=""];
106->76 [style = bold, label=""];
21->2 [style = dotted, label="true"];
61->78 [style = dotted, label="true"];
15->48 [style = dashed, label="0"];
49->23 [style = bold, label=""];
4->5 [style = solid, label="i"];
73->124 [style = bold, label=""];
98->100 [style = bold, label=""];
51->124 [style = bold, label=""];
10->6 [style = bold, label=""];
116->96 [style = bold, label=""];
36->39 [style = bold, label=""];
55->95 [style = bold, label=""];
104->73 [style = dotted, label="false"];
97->124 [style = bold, label=""];
68->69 [style = solid, label="query"];
21->55 [style = bold, label=""];
69->64 [style = dotted, label="true"];
69->52 [style = dotted, label="true"];
104->89 [style = bold, label=""];
120->84 [style = dotted, label="true"];
28->32 [style = dotted, label="true"];
27->25 [style = solid, label="intervalNo"];
4->86 [style = solid, label="i"];
126->9 [style = bold, label=""];
58->74 [style = bold, label=""];
95->62 [style = dotted, label="true"];
5->13 [style = bold, label=""];
1->9 [style = dotted, label="true"];
34->39 [style = bold, label=""];
1->119 [style = dotted, label="true"];
1->47 [style = dotted, label="true"];
107->67 [style = bold, label=""];
78->124 [style = bold, label=""];
69->106 [style = dotted, label="true"];
86->94 [style = solid, label="i"];
25->5 [style = bold, label=""];
118->14 [style = bold, label=""];
34->97 [style = dashed, label="0"];
4->1 [style = bold, label=""];
1->16 [style = dotted, label="true"];
1->37 [style = dotted, label="true"];
86->1 [style = solid, label="i"];
52->124 [style = bold, label=""];
1->5 [style = dotted, label="true"];
114->6 [style = bold, label=""];
31->65 [style = bold, label=""];
105->64 [style = bold, label=""];
1->20 [style = dotted, label="true"];
55->113 [style = dotted, label="true"];
95->50 [style = dotted, label="true"];
82->50 [style = bold, label=""];
1->124 [style = dotted, label="true"];
61->127 [style = dotted, label="true"];
104->110 [style = dotted, label="true"];
57->85 [style = bold, label=""];
95->82 [style = dotted, label="true"];
1->72 [style = dotted, label="true"];
21->92 [style = bold, label=""];
23->16 [style = bold, label=""];
52->39 [style = bold, label=""];
55->79 [style = dotted, label="true"];
120->68 [style = dotted, label="true"];
30->18 [style = solid, label="expectedResults"];
15->7 [style = bold, label=""];
40->21 [style = solid, label="query"];
122->51 [style = bold, label=""];
16->10 [style = bold, label=""];
61->104 [style = dotted, label="false"];
0->27 [style = bold, label=""];
8->19 [style = bold, label=""];
102->128 [style = bold, label=""];
28->33 [style = dotted, label="true"];
76->105 [style = bold, label=""];
68->55 [style = solid, label="query"];
61->117 [style = dotted, label="true"];
108->14 [style = bold, label=""];
21->34 [style = dotted, label="true"];
87->57 [style = bold, label=""];
95->58 [style = dotted, label="true"];
25->5 [style = solid, label="intervalNo"];
95->74 [style = dotted, label="true"];
1->14 [style = dotted, label="true"];
123->53 [style = bold, label=""];
124->0 [style = bold, label=""];
41->45 [style = dotted, label="true"];
19->8 [style = bold, label=""];
14->1 [style = bold, label=""];
69->61 [style = bold, label=""];
128->97 [style = bold, label=""];
0->9 [style = solid, label="expected"];
85->87 [style = bold, label=""];
19->102 [style = bold, label=""];
97->39 [style = bold, label=""];
68->104 [style = solid, label="query"];
55->83 [style = bold, label=""];
100->57 [style = bold, label=""];
110->125 [style = bold, label=""];
1->49 [style = dotted, label="true"];
90->124 [style = bold, label=""];
95->59 [style = dotted, label="true"];
104->67 [style = dotted, label="true"];
71->54 [style = solid, label="expectBySegment"];
21->44 [style = dotted, label="true"];
50->122 [style = bold, label=""];
69->76 [style = dotted, label="true"];
33->112 [style = dashed, label="0"];
77->52 [style = bold, label=""];
21->19 [style = dotted, label="true"];
28->26 [style = dotted, label="true"];
69->77 [style = dotted, label="true"];
120->109 [style = dotted, label="true"];
111->115 [style = bold, label=""];
4->10 [style = solid, label="i"];
69->61 [style = dotted, label="false"];
86->10 [style = solid, label="i"];
12->23 [style = bold, label=""];
90->39 [style = bold, label=""];
1->130 [style = dotted, label="true"];
20->81 [style = dashed, label="0"];
21->36 [style = dotted, label="false"];
21->97 [style = dotted, label="true"];
55->99 [style = dotted, label="true"];
69->106 [style = bold, label=""];
89->110 [style = bold, label=""];
118->130 [style = bold, label=""];
95->91 [style = dotted, label="true"];
}
