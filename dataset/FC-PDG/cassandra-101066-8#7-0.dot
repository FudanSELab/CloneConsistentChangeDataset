digraph {
30 [style = filled, label = "Token treeNext = tokenIterator.next()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "boolean isStatic@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "{FileUtils.closeQuietly(reader)}@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "SortedMap<Long,KeyOffsets> tokenMap@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "return new TokenTree(new MappedBuffer(reader))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final File treeFile = File.createTempFile(\"token-tree-get-test\",\"tt\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final long maxToken@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Assert.assertFalse(\"list iterator not finished\",listIterator.hasNext())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "RandomAccessReader reader = null@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final long minToken@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "final Iterator<Map.Entry<Long,KeyOffsets>> listIterator = tokenMap.entrySet().iterator()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final TokenTree tokenTree = new TokenTree(new MappedBuffer(reader))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "reader.close()@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "reader = RandomAccessReader.open(treeFile)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "tokenIterator.hasNext() && listIterator.hasNext()@@@14@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final RandomAccessReader reader = RandomAccessReader.open(treeFile)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final long maxToken@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "generateTree['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "buildSerializeAndIterate['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "final File treeFile = File.createTempFile(\"token-tree-iterate-test1\",\"tt\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "builder.finish()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "TokenTreeBuilder builder@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final SortedMap<Long,LongSet> toks = new TreeMap<Long,LongSet>(){}@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(convert(listNext.getValue()),convert(treeNext))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "generateTree['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final long minToken@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Map.Entry<Long,KeyOffsets> listNext = listIterator.next()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final SortedMap<Long,KeyOffsets> toks = new TreeMap<Long,KeyOffsets>(){}@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "final TokenTreeBuilder builder = isStatic? new StaticTokenTreeBuilder(new FakeCombinedTerm(toks)): new DynamicTokenTreeBuilder(toks)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertFalse(\"token iterator not finished\",tokenIterator.hasNext())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(listNext.getKey(),treeNext.get())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "builder.write(writer)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "boolean isStatic@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "final Iterator<Token> tokenIterator = tokenTree.iterator(KeyConverter.instance)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "treeFile.deleteOnExit()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "writer.sync()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22->26 [style = bold, label=""];
28->29 [style = bold, label=""];
10->8 [style = dotted, label="true"];
29->9 [style = dotted, label="true"];
10->6 [style = dotted, label="true"];
29->4 [style = dotted, label="true"];
31->23 [style = bold, label=""];
24->32 [style = dotted, label="true"];
25->22 [style = bold, label=""];
29->30 [style = bold, label=""];
3->31 [style = dashed, label="0"];
14->25 [style = dashed, label="0"];
0->13 [style = solid, label="reader"];
30->4 [style = solid, label="treeNext"];
16->7 [style = bold, label=""];
18->19 [style = dotted, label="true"];
18->15 [style = dotted, label="true"];
3->0 [style = solid, label="treeFile"];
24->34 [style = bold, label=""];
1->7 [style = solid, label="toks"];
34->31 [style = bold, label=""];
9->20 [style = bold, label=""];
30->9 [style = bold, label=""];
4->29 [style = bold, label=""];
4->2 [style = bold, label=""];
24->27 [style = dotted, label="true"];
1->7 [style = bold, label=""];
3->4 [style = bold, label=""];
29->20 [style = dotted, label="true"];
15->7 [style = solid, label="isStatic"];
2->12 [style = bold, label=""];
20->4 [style = bold, label=""];
16->7 [style = solid, label="toks"];
35->25 [style = bold, label=""];
7->9 [style = bold, label=""];
29->2 [style = bold, label=""];
0->5 [style = solid, label="reader"];
14->0 [style = bold, label=""];
23->21 [style = bold, label=""];
10->11 [style = dotted, label="true"];
8->7 [style = solid, label="isStatic"];
11->19 [style = dashed, label="0"];
1->16 [style = dashed, label="0"];
13->2 [style = dashed, label="0"];
5->13 [style = bold, label=""];
12->14 [style = bold, label=""];
12->33 [style = bold, label=""];
29->30 [style = dotted, label="true"];
9->3 [style = bold, label=""];
18->17 [style = dotted, label="true"];
26->28 [style = bold, label=""];
21->35 [style = bold, label=""];
25->22 [style = solid, label="reader"];
10->1 [style = bold, label=""];
31->25 [style = solid, label="treeFile"];
0->5 [style = bold, label=""];
18->16 [style = bold, label=""];
}
