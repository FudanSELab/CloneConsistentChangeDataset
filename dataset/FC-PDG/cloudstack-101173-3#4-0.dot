digraph {
4 [style = filled, label = "Mockito.doReturn(asyncCallFutureVolumeapiResultMock).when(volumeServiceMock).expungeVolumeAsync(volumeInfoMock)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Mockito.doReturn(accountMockId).when(volumeInfoMock).getAccountId()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Mockito.verify(asyncCallFutureVolumeapiResultMock,Mockito.times(1)).get()@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Mockito.verify(volumeServiceMock,Mockito.times(0)).expungeVolumeAsync(volumeInfoMock)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Mockito.doReturn(volumeSizeMock).when(volumeInfoMock).getSize()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Mockito.verify(asyncCallFutureVolumeapiResultMock,Mockito.times(0)).get()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Mockito.doNothing().when(resourceLimitServiceMock).decrementResourceCount(accountMockId,ResourceType.secondary_storage,volumeSizeMock)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Mockito.doReturn(volumeInfoMock).when(volumeDataFactoryMock).getVolume(volumeMockId,DataStoreRole.Primary)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "expungeVolumesInPrimaryStorageIfNeededTestVolumeInPrimaryDataStore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "volumeApiServiceImpl.expungeVolumesInPrimaryStorageIfNeeded(volumeVoMock)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Mockito.verify(resourceLimitServiceMock,Mockito.times(0)).decrementResourceCount(accountMockId,ResourceType.secondary_storage,volumeSizeMock)@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "expungeVolumesInSecondaryStorageIfNeededTestVolumeNotFoundInSecondaryStorage['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Mockito.doReturn(null).when(volumeDataFactoryMock).getVolume(volumeMockId,DataStoreRole.Image)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Mockito.verify(volumeServiceMock,Mockito.times(1)).expungeVolumeAsync(volumeInfoMock)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expungeVolumesInPrimaryStorageIfNeededTestVolumeInPrimaryDataStore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "volumeApiServiceImpl.expungeVolumesInSecondaryStorageIfNeeded(volumeVoMock)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15->4 [style = bold, label=""];
2->7 [style = dashed, label="0"];
9->10 [style = bold, label=""];
10->13 [style = bold, label=""];
4->7 [style = bold, label=""];
0->3 [style = bold, label=""];
11->12 [style = bold, label=""];
6->4 [style = bold, label=""];
8->9 [style = bold, label=""];
7->11 [style = bold, label=""];
2->1 [style = bold, label=""];
14->8 [style = bold, label=""];
5->4 [style = bold, label=""];
4->2 [style = bold, label=""];
12->14 [style = bold, label=""];
1->0 [style = bold, label=""];
}
