digraph {
45 [style = filled, label = "fetches1.clear()@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertEquals(2L,consumer.position(tp0))@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "assertEquals(Utils.mkSet(tp0,t2p0),consumer.assignment())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "consumer.poll(Duration.ZERO)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(1L,consumer.position(tp0))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "client.respondFrom(joinGroupFollowerResponse(assignor,2,\"memberId\",\"leaderId\",Errors.NONE),coordinator)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "client.respondFrom(fetchResponse(fetches1),node)@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(Collections.singleton(tp0),consumer.assignment())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "fetches1.put(tp0,new FetchInfo(1,1))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ConsumerMetadata metadata = createMetadata(subscription)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "SubscriptionState subscription = new SubscriptionState(new LogContext(),OffsetResetStrategy.EARLIEST)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "consumer.subscribe(asList(topic,topic2),getConsumerRebalanceListener(consumer))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
80 [style = filled, label = "consumer.subscribe(Arrays.asList(topic,topic2),countingRebalanceListener)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "fetches1.put(t2p0,new FetchInfo(0,10))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "client.respondFrom(fetchResponse(fetches1),node)@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "consumer.poll(Duration.ZERO)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "assertEquals(1,records.count())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "consumer.subscribe(Arrays.asList(topic,topic3),getConsumerRebalanceListener(consumer))@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "records = consumer.poll(Duration.ZERO)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "fetches1.put(t2p0,new FetchInfo(10,20))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "assertEquals(countingRebalanceListener.revokedCount,1)@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "client.requests().clear()@@@79@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "Map<TopicPartition,FetchInfo> fetches1 = new HashMap<>()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "client.respondFrom(fetchResponse(fetches1),node)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(Utils.mkSet(tp0,t3p0),consumer.assignment())@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "consumer.subscribe(Arrays.asList(topic,topic2),getConsumerRebalanceListener(consumer))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertEquals(4L,consumer.position(tp0))@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "records = consumer.poll(Duration.ZERO)@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "AtomicBoolean commitReceived = prepareOffsetCommitResponse(client,coordinator,partitionOffsets1)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "assertEquals(Utils.mkSet(topic,topic3),consumer.subscription())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "client.respondFrom(syncGroupResponse(Arrays.asList(tp0,t3p0),Errors.NONE),coordinator)@@@56@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
65 [style = filled, label = "assertEquals(100L,consumer.position(t3p0))@@@78@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(3L,consumer.position(tp0))@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "fetches1.put(tp0,new FetchInfo(0,1))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "assertEquals(Utils.mkSet(topic,topic3),consumer.subscription())@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(5L,consumer.position(tp0))@@@77@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "consumer.close()@@@81@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "consumer.unsubscribe()@@@80@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "testReturnRecordsDuringRebalance['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(commitReceived.get())@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "client.respondFrom(fetchResponse(fetches1),node)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "TestUtils.waitForCondition(null,\"Does not complete rebalance in time\")@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "fetches1.put(tp0,new FetchInfo(3,1))@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertEquals(Utils.mkSet(tp0,t2p0),consumer.assignment())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "TestUtils.waitForCondition(null,\"Does not complete rebalance in time\")@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "MockRebalanceListener countingRebalanceListener = new MockRebalanceListener()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "AtomicInteger count = new AtomicInteger(0)@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertEquals(11,records.count())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "partitionOffsets1.put(t2p0,10L)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "TestUtils.waitForCondition(null,\"Does not complete rebalance in time\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "fetches1.put(tp0,new FetchInfo(2,1))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(10L,consumer.position(t2p0))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertEquals(Utils.mkSet(topic,topic2),consumer.subscription())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Node coordinator = prepareRebalance(client,node,assignor,Arrays.asList(tp0,t2p0),null)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "ConsumerPartitionAssignor assignor = new CooperativeStickyAssignor()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(0L,consumer.position(t3p0))@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "count.set(0)@@@71@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "fetches1.clear()@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "initMetadata(client,Utils.mkMap(Utils.mkEntry(topic,1),Utils.mkEntry(topic2,1),Utils.mkEntry(topic3,1)))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "consumer.enforceRebalance()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "KafkaConsumer<String,String> consumer = newConsumer(time,client,subscription,metadata,assignor,true,groupInstanceId)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "assertEquals(Utils.mkSet(topic,topic3),consumer.subscription())@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(Utils.mkSet(topic,topic3),consumer.subscription())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "consumer.subscribe(asList(topic,topic3),getConsumerRebalanceListener(consumer))@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "fetches1.put(t3p0,new FetchInfo(0,100))@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Time time = new MockTime(1L)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "testReturnRecordsDuringRebalance['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
56 [style = filled, label = "ConsumerRecords<String,String> records = consumer.poll(Duration.ZERO)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "fetches1.clear()@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "client.respondFrom(fetchResponse(fetches1),node)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "assertEquals(countingRebalanceListener.revokedCount,0)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "prepareRebalance(client,node,assignor,Arrays.asList(tp0,t2p0),null)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "testEnforceRebalanceTriggersRebalanceOnNextPoll['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Node node = metadata.fetch().nodes().get(0)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "consumer.poll(Duration.ZERO)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "fetches1.put(tp0,new FetchInfo(4,1))@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "fetches1.clear()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "ConsumerPartitionAssignor assignor = new RoundRobinAssignor()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Map<TopicPartition,Long> partitionOffsets1 = new HashMap<>()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "client.respondFrom(syncGroupResponse(asList(tp0,t3p0),Errors.NONE),coordinator)@@@56@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "MockClient client = new MockClient(time,metadata)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(1,records.count())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "assertEquals(countingRebalanceListener.assignedCount,1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "initMetadata(client,mkMap(mkEntry(topic,1),mkEntry(topic2,1),mkEntry(topic3,1)))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertEquals(Collections.singleton(tp0),consumer.assignment())@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "Node coordinator = prepareRebalance(client,node,assignor,asList(tp0,t2p0),null)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
75->16 [style = bold, label=""];
76->42 [style = bold, label=""];
6->30 [style = solid, label="node"];
47->27 [style = solid, label="fetches1"];
37->28 [style = bold, label=""];
21->74 [style = bold, label=""];
26->67 [style = solid, label="coordinator"];
66->69 [style = solid, label="consumer"];
75->80 [style = solid, label="countingRebalanceListener"];
81->78 [style = bold, label=""];
60->22 [style = bold, label=""];
18->30 [style = bold, label=""];
53->47 [style = bold, label=""];
73->29 [style = solid, label="coordinator"];
50->73 [style = solid, label="assignor"];
48->35 [style = bold, label=""];
21->16 [style = solid, label="client"];
50->74 [style = dashed, label="0"];
35->29 [style = solid, label="partitionOffsets1"];
31->6 [style = bold, label=""];
5->0 [style = bold, label=""];
72->11 [style = bold, label=""];
29->44 [style = bold, label=""];
26->17 [style = solid, label="coordinator"];
50->66 [style = bold, label=""];
73->72 [style = solid, label="coordinator"];
36->67 [style = bold, label=""];
35->38 [style = bold, label=""];
50->26 [style = solid, label="assignor"];
43->58 [style = bold, label=""];
21->50 [style = bold, label=""];
21->71 [style = solid, label="client"];
59->61 [style = solid, label="subscription"];
26->29 [style = solid, label="coordinator"];
50->66 [style = solid, label="assignor"];
6->26 [style = solid, label="node"];
23->61 [style = bold, label=""];
34->52 [style = bold, label=""];
66->31 [style = solid, label="consumer"];
21->77 [style = solid, label="client"];
54->62 [style = bold, label=""];
4->18 [style = bold, label=""];
59->39 [style = solid, label="subscription"];
41->2 [style = bold, label=""];
22->7 [style = bold, label=""];
6->73 [style = solid, label="node"];
16->80 [style = bold, label=""];
59->66 [style = solid, label="subscription"];
46->63 [style = bold, label=""];
21->66 [style = solid, label="client"];
45->14 [style = bold, label=""];
19->66 [style = solid, label="metadata"];
3->64 [style = bold, label=""];
44->4 [style = bold, label=""];
71->68 [style = bold, label=""];
61->32 [style = bold, label=""];
10->65 [style = bold, label=""];
13->43 [style = bold, label=""];
69->1 [style = bold, label=""];
66->71 [style = bold, label=""];
21->73 [style = solid, label="client"];
28->24 [style = bold, label=""];
51->27 [style = bold, label=""];
21->29 [style = solid, label="client"];
74->66 [style = solid, label="assignor"];
67->11 [style = bold, label=""];
49->5 [style = bold, label=""];
68->6 [style = bold, label=""];
27->20 [style = bold, label=""];
6->77 [style = solid, label="node"];
2->17 [style = bold, label=""];
17->46 [style = bold, label=""];
47->30 [style = solid, label="fetches1"];
6->26 [style = bold, label=""];
47->3 [style = bold, label=""];
25->39 [style = bold, label=""];
62->51 [style = bold, label=""];
26->77 [style = dashed, label="0"];
64->55 [style = bold, label=""];
1->48 [style = bold, label=""];
0->12 [style = bold, label=""];
78->79 [style = bold, label=""];
12->36 [style = bold, label=""];
56->37 [style = bold, label=""];
36->72 [style = bold, label=""];
20->1 [style = bold, label=""];
6->77 [style = bold, label=""];
67->72 [style = dashed, label="0"];
39->53 [style = bold, label=""];
59->19 [style = solid, label="subscription"];
47->55 [style = solid, label="fetches1"];
50->17 [style = solid, label="assignor"];
70->42 [style = bold, label=""];
74->66 [style = bold, label=""];
32->9 [style = bold, label=""];
6->27 [style = solid, label="node"];
66->75 [style = bold, label=""];
52->40 [style = bold, label=""];
16->31 [style = bold, label=""];
66->16 [style = bold, label=""];
27->69 [style = bold, label=""];
73->25 [style = bold, label=""];
74->77 [style = solid, label="assignor"];
6->43 [style = solid, label="node"];
7->41 [style = bold, label=""];
14->13 [style = bold, label=""];
80->6 [style = bold, label=""];
59->63 [style = solid, label="subscription"];
42->59 [style = bold, label=""];
66->20 [style = solid, label="consumer"];
66->68 [style = solid, label="consumer"];
19->21 [style = solid, label="metadata"];
19->21 [style = bold, label=""];
6->73 [style = bold, label=""];
82->81 [style = bold, label=""];
59->1 [style = solid, label="subscription"];
42->21 [style = solid, label="time"];
6->55 [style = solid, label="node"];
57->42 [style = bold, label=""];
15->45 [style = bold, label=""];
31->80 [style = dashed, label="0"];
26->73 [style = dashed, label="0"];
65->34 [style = bold, label=""];
47->43 [style = solid, label="fetches1"];
26->25 [style = bold, label=""];
38->29 [style = bold, label=""];
33->10 [style = bold, label=""];
59->60 [style = solid, label="subscription"];
55->56 [style = bold, label=""];
79->85 [style = bold, label=""];
24->54 [style = bold, label=""];
42->66 [style = solid, label="time"];
83->82 [style = bold, label=""];
58->33 [style = bold, label=""];
21->26 [style = solid, label="client"];
9->15 [style = bold, label=""];
73->17 [style = solid, label="coordinator"];
59->19 [style = bold, label=""];
63->8 [style = bold, label=""];
20->69 [style = dashed, label="0"];
8->49 [style = bold, label=""];
77->84 [style = bold, label=""];
31->68 [style = dashed, label="0"];
6->36 [style = solid, label="node"];
11->23 [style = bold, label=""];
84->83 [style = bold, label=""];
30->60 [style = bold, label=""];
47->36 [style = solid, label="fetches1"];
}
