digraph {
21 [style = filled, label = "assertEquals(\"c\",abstractBuilder.getInitializationErrorString())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertFalse(builder.isInitialized())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "builder.setA(1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testRequired['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertFalse(abstractBuilder.isInitialized())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "builder.setC(1)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(builder.isInitialized()).isFalse()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertThat(builder.isInitialized()).isTrue()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertThat(builder.isInitialized()).isFalse()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "TestRequired.Builder builder = TestRequired.newBuilder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "builder.setB(1)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertFalse(abstractBuilder.isInitialized())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "builder.setC(1)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\"a, b, c\",abstractBuilder.getInitializationErrorString())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertFalse(builder.isInitialized())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "AbstractMessageWrapper.Builder abstractBuilder = new AbstractMessageWrapper.Builder(builder)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(builder.isInitialized()).isFalse()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "testRequired['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertFalse(builder.isInitialized())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "builder.setA(1)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertFalse(abstractBuilder.isInitialized())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testIsInitialized['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(\"b, c\",abstractBuilder.getInitializationErrorString())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(\"\",abstractBuilder.getInitializationErrorString())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertTrue(abstractBuilder.isInitialized())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->3 [style = bold, label=""];
5->8 [style = bold, label=""];
4->3 [style = bold, label=""];
7->1 [style = bold, label=""];
3->17 [style = dashed, label="0"];
7->10 [style = bold, label=""];
6->20 [style = dashed, label="0"];
8->18 [style = bold, label=""];
7->19 [style = solid, label="builder"];
9->4 [style = bold, label=""];
4->13 [style = bold, label=""];
6->9 [style = dashed, label="0"];
1->19 [style = dashed, label="0"];
23->15 [style = bold, label=""];
8->6 [style = bold, label=""];
1->10 [style = dashed, label="0"];
5->18 [style = dashed, label="0"];
3->13 [style = dashed, label="0"];
12->7 [style = bold, label=""];
14->7 [style = bold, label=""];
0->7 [style = bold, label=""];
20->21 [style = bold, label=""];
6->4 [style = bold, label=""];
3->20 [style = bold, label=""];
17->24 [style = bold, label=""];
5->11 [style = dashed, label="0"];
21->22 [style = bold, label=""];
19->23 [style = bold, label=""];
8->9 [style = bold, label=""];
22->17 [style = bold, label=""];
11->8 [style = bold, label=""];
10->2 [style = bold, label=""];
1->2 [style = bold, label=""];
7->19 [style = bold, label=""];
2->11 [style = bold, label=""];
15->8 [style = bold, label=""];
2->5 [style = bold, label=""];
18->16 [style = bold, label=""];
}
