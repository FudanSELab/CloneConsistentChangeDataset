digraph {
85 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "int numToAdd = records.size() - 2@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@34@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "kafkaProducer.commitTransaction()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "Assert.assertTrue(checkpoint2.getPartitionSequenceNumberMap().equals(nextOffsets))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "maxTotalRows = 3L@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint2 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,0L))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "kafkaProducer.commitTransaction()@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "int i = numToAdd@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "int i = 0@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,checkpoint.getPartitionSequenceNumberMap())))))@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Thread.sleep(10)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2010/P1D\",0)@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testTimeBasedIncrementalHandOff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@28@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L,1,0L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
71 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "i < records.size()@@@41@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,checkpoint.getPartitionSequenceNumberMap())))))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "SegmentDescriptor desc6 = sd(task,\"2012/P1D\",0)@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Thread.sleep(10)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@71@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "kafkaProducer.initTransactions()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
84 [style = filled, label = "SegmentDescriptor desc4 = sd(task,\"2011/P1D\",0)@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "kafkaProducer.beginTransaction()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@73@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,0L),ImmutableSet.of())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "kafkaProducer.beginTransaction()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,1L,1,0L))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "final Map<Integer,Long> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,2L,1,0L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "kafkaProducer.initTransactions()@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)))))@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "insertData()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "intermediateHandoffPeriod = new Period().withSeconds(0)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "i++@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,1L,1,0L))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
64 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamPartitions(topic,currentOffsets)),new KafkaDataSourceMetadata(new SeekableStreamPartitions(topic,nextOffsets)))))@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@69@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "i++@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L,1,0L))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "Thread.sleep(10)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@72@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "SegmentDescriptor desc5 = sd(task,\"2011/P1D\",1)@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,2L,1,0L))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "testTimeBasedIncrementalHandOff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@17@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "i < numToAdd@@@14@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint1 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,3L,1,0L))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionSequenceNumberMap().equals(currentOffsets))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->3 [style = bold, label=""];
28->76 [style = solid, label="currentOffsets"];
24->12 [style = dotted, label="true"];
28->22 [style = solid, label="currentOffsets"];
63->79 [style = solid, label="desc7"];
76->62 [style = bold, label=""];
16->31 [style = dashed, label="0"];
74->83 [style = solid, label="desc1"];
50->80 [style = bold, label=""];
8->32 [style = dashed, label="0"];
78->40 [style = dotted, label="true"];
26->9 [style = bold, label=""];
31->21 [style = bold, label=""];
51->77 [style = solid, label="i"];
11->60 [style = bold, label=""];
12->22 [style = solid, label="desc1"];
59->61 [style = bold, label=""];
22->30 [style = bold, label=""];
63->83 [style = bold, label=""];
7->26 [style = bold, label=""];
20->21 [style = solid, label="consumerProps"];
78->57 [style = dotted, label="true"];
84->83 [style = solid, label="desc4"];
80->50 [style = bold, label=""];
67->55 [style = solid, label="nextOffsets"];
63->71 [style = solid, label="desc7"];
3->19 [style = bold, label=""];
53->65 [style = bold, label=""];
57->78 [style = bold, label=""];
52->67 [style = bold, label=""];
15->20 [style = bold, label=""];
22->80 [style = bold, label=""];
0->24 [style = bold, label=""];
2->15 [style = bold, label=""];
62->49 [style = bold, label=""];
69->83 [style = solid, label="desc3"];
34->32 [style = bold, label=""];
56->26 [style = bold, label=""];
21->38 [style = solid, label="task"];
68->71 [style = solid, label="desc5"];
28->42 [style = bold, label=""];
0->49 [style = dashed, label="0"];
82->54 [style = solid, label="numToAdd"];
68->53 [style = solid, label="desc5"];
77->51 [style = dotted, label="true"];
27->2 [style = bold, label=""];
45->83 [style = solid, label="desc2"];
80->58 [style = bold, label=""];
24->28 [style = bold, label=""];
5->27 [style = solid, label="startPartitions"];
37->57 [style = solid, label="i"];
10->82 [style = dashed, label="0"];
15->13 [style = bold, label=""];
34->31 [style = solid, label="startPartitions"];
3->21 [style = solid, label="startPartitions"];
21->0 [style = bold, label=""];
78->44 [style = bold, label=""];
3->81 [style = bold, label=""];
84->53 [style = solid, label="desc4"];
38->83 [style = solid, label="desc6"];
81->59 [style = bold, label=""];
21->84 [style = solid, label="task"];
18->11 [style = bold, label=""];
41->37 [style = bold, label=""];
77->75 [style = bold, label=""];
64->74 [style = bold, label=""];
54->77 [style = bold, label=""];
5->16 [style = solid, label="startPartitions"];
20->14 [style = bold, label=""];
45->43 [style = solid, label="desc2"];
25->27 [style = solid, label="endPartitions"];
26->9 [style = dotted, label="true"];
19->6 [style = bold, label=""];
78->40 [style = bold, label=""];
33->27 [style = bold, label=""];
85->43 [style = bold, label=""];
43->73 [style = bold, label=""];
5->34 [style = dashed, label="0"];
21->45 [style = solid, label="task"];
15->13 [style = dotted, label="true"];
21->69 [style = solid, label="task"];
3->76 [style = solid, label="startPartitions"];
49->72 [style = bold, label=""];
25->27 [style = bold, label=""];
28->35 [style = bold, label=""];
18->27 [style = solid, label="baseSequenceName"];
39->85 [style = bold, label=""];
82->78 [style = solid, label="numToAdd"];
69->71 [style = solid, label="desc3"];
47->54 [style = bold, label=""];
84->68 [style = bold, label=""];
44->20 [style = bold, label=""];
14->42 [style = dashed, label="0"];
67->66 [style = solid, label="nextOffsets"];
23->10 [style = bold, label=""];
80->50 [style = dotted, label="true"];
13->15 [style = bold, label=""];
42->22 [style = bold, label=""];
28->42 [style = solid, label="currentOffsets"];
72->64 [style = bold, label=""];
18->21 [style = solid, label="baseSequenceName"];
68->83 [style = solid, label="desc5"];
24->12 [style = bold, label=""];
67->66 [style = bold, label=""];
1->35 [style = dashed, label="0"];
8->81 [style = dashed, label="0"];
60->82 [style = bold, label=""];
27->17 [style = solid, label="task"];
12->17 [style = bold, label=""];
51->77 [style = bold, label=""];
65->79 [style = bold, label=""];
6->48 [style = dashed, label="0"];
48->76 [style = bold, label=""];
61->21 [style = bold, label=""];
63->83 [style = solid, label="desc7"];
12->24 [style = bold, label=""];
38->71 [style = solid, label="desc6"];
17->28 [style = solid, label="desc2"];
32->33 [style = bold, label=""];
74->85 [style = solid, label="desc1"];
16->76 [style = dashed, label="0"];
24->72 [style = dashed, label="0"];
37->78 [style = solid, label="i"];
55->30 [style = bold, label=""];
9->18 [style = bold, label=""];
74->45 [style = bold, label=""];
66->55 [style = bold, label=""];
20->3 [style = solid, label="currentOffsets"];
82->70 [style = bold, label=""];
73->53 [style = bold, label=""];
4->5 [style = bold, label=""];
4->34 [style = bold, label=""];
69->84 [style = bold, label=""];
5->8 [style = bold, label=""];
29->4 [style = bold, label=""];
27->12 [style = solid, label="task"];
71->39 [style = bold, label=""];
27->2 [style = solid, label="task"];
34->27 [style = solid, label="startPartitions"];
35->22 [style = bold, label=""];
38->65 [style = solid, label="desc6"];
67->62 [style = solid, label="nextOffsets"];
29->27 [style = solid, label="consumerProps"];
37->78 [style = bold, label=""];
61->21 [style = solid, label="endPartitions"];
28->1 [style = bold, label=""];
45->69 [style = bold, label=""];
36->26 [style = bold, label=""];
54->51 [style = solid, label="i"];
68->38 [style = bold, label=""];
75->51 [style = bold, label=""];
21->74 [style = solid, label="task"];
40->57 [style = bold, label=""];
83->46 [style = bold, label=""];
25->59 [style = dashed, label="0"];
84->71 [style = solid, label="desc4"];
1->22 [style = bold, label=""];
46->71 [style = bold, label=""];
21->68 [style = solid, label="task"];
33->27 [style = solid, label="endPartitions"];
17->28 [style = bold, label=""];
70->41 [style = bold, label=""];
58->47 [style = bold, label=""];
77->75 [style = dotted, label="true"];
6->31 [style = bold, label=""];
10->29 [style = bold, label=""];
6->16 [style = bold, label=""];
69->73 [style = solid, label="desc3"];
16->21 [style = bold, label=""];
38->63 [style = bold, label=""];
77->52 [style = bold, label=""];
21->63 [style = solid, label="task"];
17->30 [style = solid, label="desc2"];
21->0 [style = solid, label="task"];
74->71 [style = solid, label="desc1"];
25->33 [style = dashed, label="0"];
57->78 [style = solid, label="i"];
20->14 [style = solid, label="currentOffsets"];
30->48 [style = bold, label=""];
54->77 [style = solid, label="i"];
11->23 [style = bold, label=""];
8->25 [style = bold, label=""];
45->71 [style = solid, label="desc2"];
28->62 [style = solid, label="currentOffsets"];
26->18 [style = bold, label=""];
12->28 [style = solid, label="desc1"];
}
