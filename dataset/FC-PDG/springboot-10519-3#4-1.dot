digraph {
12 [style = filled, label = "SimpleMeterRegistry secondLevel = new SimpleMeterRegistry()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "metricValuesAreTheSumOfAllTimeSeriesMatchingTags['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertThat(availableTagKeys(response)).containsExactly(\"host\")@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(response.getName()).isEqualTo(\"cache\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "MetricsEndpoint endpoint = new MetricsEndpoint(composite)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "SimpleMeterRegistry firstLevel0 = new SimpleMeterRegistry()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "composite.add(firstLevel1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "firstLevel1.add(secondLevel)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertThat(getCount(response)).hasValue(4.0)@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "secondLevel.counter(\"cache\",\"result\",\"hit\",\"host\",\"1\").increment(2)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "metricValuesAreTheSumOfAllTimeSeriesMatchingTags['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "CompositeMeterRegistry composite = new CompositeMeterRegistry()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "secondLevel.counter(\"cache\",\"result\",\"hit\",\"host\",\"2\").increment(2)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(availableTagKeys(response)).containsExactly(\"host\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "this.registry.counter(\"cache\",\"result\",\"miss\",\"host\",\"1\").increment(2)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(getCount(response)).hasValue(6.0)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "CompositeMeterRegistry firstLevel1 = new CompositeMeterRegistry()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "composite.add(firstLevel0)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(availableTagKeys(response)).containsExactly(\"result\",\"host\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(response.getName()).isEqualTo(\"cache\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(getCount(response)).hasValue(4.0)@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "secondLevel.counter(\"cache\",\"result\",\"miss\",\"host\",\"1\").increment(2)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "response = endpoint.metric(\"cache\",Collections.singletonList(\"result:hit\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "findFirstMatchingMetersFromNestedRegistries['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(getCount(response)).hasValue(6.0)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "response = this.endpoint.metric(\"cache\",Collections.singletonList(\"result:hit\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "MetricsEndpoint.MetricResponse response = this.endpoint.metric(\"cache\",Collections.emptyList())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "this.registry.counter(\"cache\",\"result\",\"hit\",\"host\",\"1\").increment(2)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(availableTagKeys(response)).containsExactly(\"result\",\"host\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "MetricsEndpoint.MetricResponse response = endpoint.metric(\"cache\",Collections.emptyList())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "this.registry.counter(\"cache\",\"result\",\"hit\",\"host\",\"2\").increment(2)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->23 [style = dashed, label="0"];
17->25 [style = bold, label=""];
29->25 [style = solid, label="composite"];
13->24 [style = bold, label=""];
27->14 [style = bold, label=""];
25->22 [style = bold, label=""];
21->27 [style = bold, label=""];
4->6 [style = bold, label=""];
20->29 [style = bold, label=""];
15->21 [style = bold, label=""];
11->4 [style = bold, label=""];
18->30 [style = bold, label=""];
14->17 [style = bold, label=""];
12->26 [style = bold, label=""];
16->23 [style = bold, label=""];
28->12 [style = bold, label=""];
9->8 [style = bold, label=""];
1->7 [style = bold, label=""];
7->3 [style = bold, label=""];
3->9 [style = bold, label=""];
28->15 [style = solid, label="firstLevel1"];
6->1 [style = bold, label=""];
24->16 [style = bold, label=""];
19->26 [style = solid, label="firstLevel0"];
29->19 [style = bold, label=""];
8->2 [style = bold, label=""];
5->0 [style = bold, label=""];
12->21 [style = solid, label="secondLevel"];
26->15 [style = bold, label=""];
10->4 [style = bold, label=""];
19->28 [style = bold, label=""];
23->18 [style = bold, label=""];
22->13 [style = bold, label=""];
2->5 [style = bold, label=""];
}
