digraph {
5 [style = filled, label = "AuxParserResult auxResult = auxParser.parse(auxFile)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Path auxFile = Path.of(.getResource(\"nested.aux\").toURI())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "InputStream originalStream = .getResourceAsStream(\"origin.bib\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(1,auxResult.getCrossRefEntriesCount())@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "AuxParser auxParser = new DefaultAuxParser(result.getDatabase())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(4,auxResult.getFoundKeysInAux())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(2,auxResult.getFoundKeysInAux())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testCrossRef['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "BibDatabase newDB = auxResult.getGeneratedBibDatabase()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(3,auxResult.getResolvedKeysCount())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testNestedAux['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertEquals(2,auxResult.getResolvedKeysCount())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertTrue(auxResult.getGeneratedBibDatabase().hasEntries())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(0,auxResult.getUnresolvedKeysCount())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Path auxFile = Paths.get(.getResource(\"nested.aux\").toURI())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "ParserResult result = new BibtexParser(importFormatPreferences,new DummyFileUpdateMonitor()).parse(originalReader)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(2,newDB.getEntries().size())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testNestedAux['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(2,auxResult.getUnresolvedKeysCount())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(4,newDB.getEntries().size())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Path auxFile = Paths.get(.getResource(\"crossref.aux\").toURI())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(0,auxResult.getCrossRefEntriesCount())@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2->17 [style = bold, label=""];
0->16 [style = bold, label=""];
8->16 [style = dashed, label="0"];
15->13 [style = bold, label=""];
3->17 [style = dashed, label="0"];
22->2 [style = bold, label=""];
7->10 [style = bold, label=""];
9->2 [style = bold, label=""];
10->19 [style = dashed, label="0"];
2->3 [style = bold, label=""];
15->5 [style = solid, label="auxFile"];
11->12 [style = bold, label=""];
4->21 [style = dashed, label="0"];
17->5 [style = solid, label="auxFile"];
11->18 [style = bold, label=""];
19->0 [style = bold, label=""];
1->11 [style = bold, label=""];
1->20 [style = dashed, label="0"];
6->5 [style = bold, label=""];
21->20 [style = bold, label=""];
16->21 [style = bold, label=""];
10->0 [style = bold, label=""];
2->15 [style = bold, label=""];
0->8 [style = bold, label=""];
3->13 [style = bold, label=""];
3->15 [style = dashed, label="0"];
5->7 [style = bold, label=""];
12->18 [style = dashed, label="0"];
3->5 [style = solid, label="auxFile"];
4->1 [style = bold, label=""];
14->2 [style = bold, label=""];
17->13 [style = bold, label=""];
8->4 [style = bold, label=""];
13->6 [style = bold, label=""];
7->19 [style = bold, label=""];
20->11 [style = bold, label=""];
}
