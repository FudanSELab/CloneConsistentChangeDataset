digraph {
1 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s sharding binding table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableGroups(),is(expected.getTableGroups()))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategyColumn(),CoreMatchers.is(expected.getTableStrategyColumn()))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final ExpectedTableRule expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),CoreMatchers.is(expected.getName()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateStrategyColumn(),CoreMatchers.is(expected.getKeyGenerateStrategyColumn()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual sharding binding table rule should exist.\"),actual)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertIs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "AlgorithmAssert.assertIs(assertContext,actual.getKeyGenerateStrategy(),expected.getKeyGenerateStrategy())@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "final BindingTableRuleSegment actual@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertIs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final TableRuleSegment actual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertIs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSources(),CoreMatchers.is(expected.getDataSources()))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertNull(assertContext.getText(\"Actual should not exist.\"),actual)@@@4@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "null == expected@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final BindingTableRuleSegment actual@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final ExpectedShardingBindingTableRule expected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertNull(assertContext.getText(\"Actual sharding binding table rule should not exist.\"),actual)@@@4@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual should exist.\"),actual)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "AlgorithmAssert.assertIs(assertContext,actual.getTableStrategy(),expected.getTableStrategy())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8->10 [style = dotted, label="true"];
15->21 [style = dotted, label="true"];
8->11 [style = dotted, label="true"];
14->17 [style = bold, label=""];
0->1 [style = dotted, label="true"];
3->6 [style = solid, label="actual"];
2->4 [style = bold, label=""];
15->13 [style = dotted, label="true"];
5->12 [style = solid, label="actual"];
7->12 [style = dotted, label="false"];
18->17 [style = solid, label="assertContext"];
0->7 [style = bold, label=""];
7->9 [style = bold, label=""];
19->20 [style = bold, label=""];
13->6 [style = solid, label="actual"];
12->4 [style = bold, label=""];
15->18 [style = dotted, label="true"];
16->19 [style = bold, label=""];
20->22 [style = bold, label=""];
0->3 [style = dotted, label="true"];
7->6 [style = bold, label=""];
4->16 [style = dashed, label="0"];
6->9 [style = dashed, label="0"];
5->7 [style = solid, label="expected"];
7->2 [style = bold, label=""];
5->9 [style = solid, label="actual"];
7->9 [style = dotted, label="true"];
15->7 [style = bold, label=""];
0->5 [style = dotted, label="true"];
3->2 [style = solid, label="actual"];
13->2 [style = solid, label="actual"];
7->12 [style = bold, label=""];
7->19 [style = dotted, label="false"];
7->4 [style = dotted, label="false"];
7->16 [style = dotted, label="false"];
22->14 [style = bold, label=""];
21->7 [style = solid, label="expected"];
5->21 [style = dashed, label="0"];
8->5 [style = dotted, label="true"];
7->2 [style = dotted, label="false"];
10->7 [style = solid, label="expected"];
18->14 [style = solid, label="assertContext"];
7->14 [style = dotted, label="false"];
7->17 [style = dotted, label="false"];
8->7 [style = bold, label=""];
2->16 [style = bold, label=""];
7->22 [style = dotted, label="false"];
7->20 [style = dotted, label="false"];
2->12 [style = dashed, label="0"];
7->6 [style = dotted, label="true"];
}
