digraph {
13 [style = filled, label = "Assert.assertEquals(4L,chainedOutputWatermarkGauge.getValue().longValue())@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "Assert.assertEquals(3L,headInput1WatermarkGauge.getValue().longValue())@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "testWatermarkMetrics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
64 [style = filled, label = "Assert.assertEquals(1L,headInput1WatermarkGauge.getValue().longValue())@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "testHarness.endInput()@@@75@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(2L,taskInputWatermarkGauge.getValue().longValue())@@@68@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(2L,headInputWatermarkGauge.getValue().longValue())@@@69@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "StreamMockEnvironment env = new StreamMockEnvironment(testHarness.jobConfig,testHarness.taskConfig,testHarness.memorySize,new MockInputSplitProvider(),testHarness.bufferSize,new TestTaskStateManager()){@Override public TaskMetricGroup getMetricGroup(){return taskMetricGroup}}@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testHarness.waitForInputProcessing()@@@67@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(2L,chainedInputWatermarkGauge.getValue().longValue())@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testHarness.waitForTaskCompletion()@@@59@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,chainedInputWatermarkGauge.getValue().longValue())@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "testHarness.processElement(new Watermark(1L),0,0)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Gauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>)chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,headOutputWatermarkGauge.getValue().longValue())@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,headInputWatermarkGauge.getValue().longValue())@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Gauge<Long> headOutputWatermarkGauge = (Gauge<Long>)headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK)@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Assert.assertEquals(2L,chainedOutputWatermarkGauge.getValue().longValue())@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testHarness.waitForTaskRunning()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,headInputWatermarkGauge.getValue().longValue())@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,taskInputWatermarkGauge.getValue().longValue())@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,headOutputWatermarkGauge.getValue().longValue())@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "OneInputStreamOperator<String,String> headOperator = new WatermarkMetricOperator()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(2L,headOutputWatermarkGauge.getValue().longValue())@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testHarness.setupOperatorChain(headOperatorId,headOperator).chain(chainedOperatorId,chainedOperator,BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig())).finish()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Assert.assertEquals(1L,chainedInputWatermarkGauge.getValue().longValue())@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "OneInputStreamOperator<String,String> chainedOperator = new WatermarkMetricOperator()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Gauge<Long> taskInputWatermarkGauge = (Gauge<Long>)taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "CoStreamMap<String,Integer,String> headOperator = new CoStreamMap<>(new IdentityMap())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "final OperatorID headOperatorId = new OperatorID()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(1L,taskInputWatermarkGauge.getValue().longValue())@@@59@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "InterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,chainedInputWatermarkGauge.getValue().longValue())@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "testHarness.processElement(new Watermark(3L),0,0)@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "Assert.assertEquals(2L,chainedInputWatermarkGauge.getValue().longValue())@@@73@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Assert.assertEquals(\"A metric was registered multiple times.\",5,new HashSet<>(Arrays.asList(taskInputWatermarkGauge,headInputWatermarkGauge,headOutputWatermarkGauge,chainedInputWatermarkGauge,chainedOutputWatermarkGauge)).size())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Gauge<Long> headInputWatermarkGauge = (Gauge<Long>)headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testHarness.waitForInputProcessing()@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,headInput1WatermarkGauge.getValue().longValue())@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "InterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "final TwoInputStreamTaskTestHarness<String,Integer,String> testHarness = new TwoInputStreamTaskTestHarness<>(null,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.INT_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "Assert.assertEquals(2L,headInput2WatermarkGauge.getValue().longValue())@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,chainedOutputWatermarkGauge.getValue().longValue())@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "testHarness.waitForInputProcessing()@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Gauge<Long> chainedInputWatermarkGauge = (Gauge<Long>)chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK)@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "OperatorID chainedOperatorId = new OperatorID()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testHarness.endInput()@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testHarness.waitForInputProcessing()@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "OneInputStreamTaskTest.WatermarkMetricOperator chainedOperator = new OneInputStreamTaskTest.WatermarkMetricOperator()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testHarness.processElement(new Watermark(2L))@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "testWatermarkMetrics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final OneInputStreamTaskTestHarness<String,String> testHarness = new OneInputStreamTaskTestHarness<>(null,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(2L,taskInputWatermarkGauge.getValue().longValue())@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(1L,headInputWatermarkGauge.getValue().longValue())@@@60@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "InterceptingTaskMetricGroup taskMetricGroup = new InterceptingTaskMetricGroup(){@Override public OperatorMetricGroup getOrAddOperator(OperatorID id,String name){if (id.equals(headOperatorId)) {return headOperatorMetricGroup}if (id.equals(chainedOperatorId)) {return chainedOperatorMetricGroup}{return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b12342idname}}}@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(2L,headOutputWatermarkGauge.getValue().longValue())@@@72@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Gauge<Long> headInput1WatermarkGauge = (Gauge<Long>)headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_1_WATERMARK)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,headInput2WatermarkGauge.getValue().longValue())@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "testHarness.waitForTaskCompletion()@@@76@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,taskInputWatermarkGauge.getValue().longValue())@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,chainedOutputWatermarkGauge.getValue().longValue())@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "Assert.assertEquals(4L,chainedOutputWatermarkGauge.getValue().longValue())@@@74@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "OperatorID headOperatorId = new OperatorID()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "Assert.assertEquals(\"A metric was registered multiple times.\",7,new HashSet<>(Arrays.asList(taskInputWatermarkGauge,headInput1WatermarkGauge,headInput2WatermarkGauge,headInputWatermarkGauge,headOutputWatermarkGauge,chainedInputWatermarkGauge,chainedOutputWatermarkGauge)).size())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,headInput2WatermarkGauge.getValue().longValue())@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "Assert.assertEquals(1L,headOutputWatermarkGauge.getValue().longValue())@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "testHarness.processElement(new Watermark(2L),1,0)@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "Assert.assertEquals(1L,headInput1WatermarkGauge.getValue().longValue())@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "Gauge<Long> headInput2WatermarkGauge = (Gauge<Long>)headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_2_WATERMARK)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(8L,chainedOutputWatermarkGauge.getValue().longValue())@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "Assert.assertEquals(2L,headInput2WatermarkGauge.getValue().longValue())@@@71@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testHarness.invoke(env)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testWatermarkMetrics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testHarness.processElement(new Watermark(1L))@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52->1 [style = bold, label=""];
8->10 [style = bold, label=""];
21->30 [style = solid, label="chainedOperatorMetricGroup"];
0->13 [style = bold, label=""];
15->25 [style = bold, label=""];
38->4 [style = bold, label=""];
49->48 [style = bold, label=""];
16->64 [style = bold, label=""];
0->47 [style = dashed, label="0"];
66->62 [style = bold, label=""];
21->30 [style = bold, label=""];
3->27 [style = bold, label=""];
26->60 [style = dashed, label="0"];
67->69 [style = bold, label=""];
37->5 [style = bold, label=""];
34->30 [style = solid, label="chainedOperatorId"];
23->43 [style = dashed, label="0"];
44->46 [style = bold, label=""];
22->59 [style = bold, label=""];
34->24 [style = bold, label=""];
62->65 [style = bold, label=""];
27->7 [style = bold, label=""];
41->67 [style = bold, label=""];
9->21 [style = bold, label=""];
40->26 [style = bold, label=""];
50->66 [style = bold, label=""];
23->12 [style = bold, label=""];
1->31 [style = bold, label=""];
7->53 [style = bold, label=""];
73->60 [style = bold, label=""];
39->52 [style = dashed, label="0"];
28->36 [style = bold, label=""];
63->51 [style = bold, label=""];
19->39 [style = bold, label=""];
46->36 [style = bold, label=""];
6->42 [style = dashed, label="0"];
38->45 [style = bold, label=""];
26->6 [style = bold, label=""];
31->68 [style = bold, label=""];
9->30 [style = solid, label="headOperatorMetricGroup"];
71->34 [style = bold, label=""];
35->3 [style = solid, label="env"];
70->54 [style = bold, label=""];
22->20 [style = bold, label=""];
54->44 [style = bold, label=""];
29->32 [style = bold, label=""];
56->50 [style = bold, label=""];
36->16 [style = bold, label=""];
2->59 [style = dashed, label="0"];
65->61 [style = bold, label=""];
59->56 [style = bold, label=""];
13->72 [style = dashed, label="0"];
13->18 [style = bold, label=""];
48->58 [style = bold, label=""];
35->3 [style = bold, label=""];
6->23 [style = bold, label=""];
11->64 [style = dashed, label="0"];
18->33 [style = bold, label=""];
43->30 [style = solid, label="headOperatorId"];
25->17 [style = bold, label=""];
28->41 [style = bold, label=""];
4->45 [style = dashed, label="0"];
30->35 [style = bold, label=""];
22->56 [style = dashed, label="0"];
57->15 [style = bold, label=""];
7->15 [style = bold, label=""];
39->1 [style = bold, label=""];
33->37 [style = bold, label=""];
60->42 [style = bold, label=""];
31->8 [style = bold, label=""];
24->9 [style = bold, label=""];
10->38 [style = bold, label=""];
12->71 [style = dashed, label="0"];
43->71 [style = bold, label=""];
16->11 [style = bold, label=""];
42->43 [style = bold, label=""];
72->49 [style = bold, label=""];
20->29 [style = bold, label=""];
53->57 [style = bold, label=""];
30->35 [style = solid, label="taskMetricGroup"];
12->34 [style = bold, label=""];
47->72 [style = bold, label=""];
45->28 [style = bold, label=""];
23->30 [style = solid, label="headOperatorId"];
17->19 [style = bold, label=""];
4->28 [style = bold, label=""];
14->26 [style = bold, label=""];
20->50 [style = dashed, label="0"];
51->70 [style = bold, label=""];
5->2 [style = bold, label=""];
11->0 [style = bold, label=""];
64->47 [style = bold, label=""];
68->55 [style = bold, label=""];
58->5 [style = bold, label=""];
2->22 [style = bold, label=""];
55->8 [style = bold, label=""];
69->63 [style = bold, label=""];
19->52 [style = bold, label=""];
}
