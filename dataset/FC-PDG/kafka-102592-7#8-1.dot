digraph {
0 [style = filled, label = "STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG,appID + \"-left-repartitioned\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testLeftRepartitioned['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "final List<List<KeyValueTimestamp<Long,String>>> expectedResult = Arrays.asList(null,null,Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-null\",3L)),Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-a\",4L)),Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-a\",5L)),Arrays.asList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-b\",6L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-b\",6L)),null,null,Arrays.asList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-a\",9L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-b\",9L)),Arrays.asList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-c\",10L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-c\",10L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-c\",10L)),null,null,null,Arrays.asList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-d\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-d\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-d\",14L)),Arrays.asList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-a\",15L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-b\",15L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-c\",15L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-d\",15L)))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final List<List<TestRecord<Long,String>>> expectedResult = Arrays.asList(null,null,Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY,\"A-null\",null,3L)),Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY,\"A-a\",null,4L)),Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY,\"B-a\",null,5L)),Arrays.asList(new TestRecord<>(ANY_UNIQUE_KEY,\"A-b\",null,6L),new TestRecord<>(ANY_UNIQUE_KEY,\"B-b\",null,6L)),null,null,Arrays.asList(new TestRecord<>(ANY_UNIQUE_KEY,\"C-a\",null,9L),new TestRecord<>(ANY_UNIQUE_KEY,\"C-b\",null,9L)),Arrays.asList(new TestRecord<>(ANY_UNIQUE_KEY,\"A-c\",null,10L),new TestRecord<>(ANY_UNIQUE_KEY,\"B-c\",null,10L),new TestRecord<>(ANY_UNIQUE_KEY,\"C-c\",null,10L)),null,null,null,Arrays.asList(new TestRecord<>(ANY_UNIQUE_KEY,\"A-d\",null,14L),new TestRecord<>(ANY_UNIQUE_KEY,\"B-d\",null,14L),new TestRecord<>(ANY_UNIQUE_KEY,\"C-d\",null,14L)),Arrays.asList(new TestRecord<>(ANY_UNIQUE_KEY,\"D-a\",null,15L),new TestRecord<>(ANY_UNIQUE_KEY,\"D-b\",null,15L),new TestRecord<>(ANY_UNIQUE_KEY,\"D-c\",null,15L),new TestRecord<>(ANY_UNIQUE_KEY,\"D-d\",null,15L)))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "runTest(expectedResult)@@@6@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "leftStream.map(MockMapper.noOpKeyValueMapper()).leftJoin(rightStream.flatMap(MockMapper.noOpFlatKeyValueMapper()).selectKey(MockMapper.selectKeyKeyValueMapper()),valueJoiner,JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testLeftRepartitioned['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG,appID + \"-outer\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "leftStream.outerJoin(rightStream,valueJoiner,JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "runTestWithDriver(expectedResult)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testOuter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1->3 [style = bold, label=""];
6->1 [style = bold, label=""];
1->8 [style = dashed, label="0"];
10->2 [style = bold, label=""];
6->7 [style = solid, label="expectedResult"];
9->10 [style = bold, label=""];
5->0 [style = bold, label=""];
2->3 [style = solid, label="expectedResult"];
0->6 [style = bold, label=""];
1->7 [style = bold, label=""];
3->7 [style = dashed, label="0"];
2->1 [style = bold, label=""];
2->8 [style = bold, label=""];
0->10 [style = dashed, label="0"];
4->0 [style = bold, label=""];
0->2 [style = bold, label=""];
8->3 [style = bold, label=""];
}
