digraph {
14 [style = filled, label = "UnicastSubject<Integer> us = UnicastSubject.create()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TestHelper.emit(up,1,2,2,3,3,4,5)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "to.assertFuseable().assertFusionMode(QueueFuseable.ASYNC).assertResult(1,2,3,4,5)@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "to.assertFusionMode(QueueFuseable.ASYNC).assertResult(1,2,3,4,5)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "us.distinct().subscribe(to)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "UnicastSubject<Integer> up = UnicastSubject.create()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "fusedAsync['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TestObserverEx<Integer> to = new TestObserverEx<>(QueueFuseable.ANY)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "TestHelper.emit(us,1,2,2,3,3,4,5)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "TestHelper.emit(us,1,1,2,1,3,2,4,5,4)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "up.distinctUntilChanged(new BiPredicate<Integer,Integer>(){@Override public boolean test(Integer a,Integer b){return a.equals(b)}}).subscribe(to)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "fusedAsync['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "us.distinctUntilChanged(new BiPredicate<Integer,Integer>(){@Override public boolean test(Integer a,Integer b){return a.equals(b)}}).subscribe(to)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "fusedAsync['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "UnicastSubject<Integer> us = UnicastSubject.create()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4->3 [style = bold, label=""];
1->4 [style = bold, label=""];
7->1 [style = bold, label=""];
1->8 [style = bold, label=""];
1->9 [style = solid, label="to"];
6->0 [style = bold, label=""];
14->10 [style = solid, label="us"];
12->1 [style = bold, label=""];
9->6 [style = bold, label=""];
1->11 [style = solid, label="to"];
5->1 [style = bold, label=""];
8->6 [style = solid, label="us"];
2->0 [style = bold, label=""];
3->2 [style = bold, label=""];
10->13 [style = bold, label=""];
3->9 [style = dashed, label="0"];
11->10 [style = bold, label=""];
4->8 [style = dashed, label="0"];
8->9 [style = bold, label=""];
2->6 [style = dashed, label="0"];
4->2 [style = solid, label="up"];
1->14 [style = bold, label=""];
4->14 [style = dashed, label="0"];
1->3 [style = solid, label="to"];
14->11 [style = bold, label=""];
}
