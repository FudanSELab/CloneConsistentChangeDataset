digraph {
13 [style = filled, label = "_properties.setProperty(KafkaWriterConfigurationKeys.KAFKA_TOPIC,TOPIC)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "_properties.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + \"bootstrap.servers\",_kafkaBrokers)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "List<Pair<SpecExecutor.Verb,Spec>> consumedEvent = seic.changedSpecs().get()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertTrue(consumedSpecAction.getValue().getUri().toString().equals(addedSpecUriString),\"Expected URI did not match\")@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "SimpleKafkaSpecConsumer seic = _closer.register(new SimpleKafkaSpecConsumer(ConfigUtils.propertiesToConfig(_properties)))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "_properties = new Properties()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "_properties.setProperty(SimpleKafkaSpecExecutor.SPEC_KAFKA_TOPICS_KEY,TOPIC)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "WriteResponse writeResponse = (WriteResponse)_seip.addSpec(spec).get()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertTrue(consumedEvent.size() == 1,\"Consumption did not match production\")@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "_properties.setProperty(\"spec.kafka.dataWriterClass\",\"org.apache.gobblin.kafka.writer.Kafka09DataWriter\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "_jobCatalog.startAsync().awaitRunning()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "_seip = _closer.register(new SimpleKafkaSpecProducer(config))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testResetConsumption['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "_properties.setProperty(KafkaJobMonitor.KAFKA_JOB_MONITOR_PREFIX + \".\" + Kafka09ConsumerClient.GOBBLIN_CONFIG_VALUE_DESERIALIZER_CLASS_KEY,\"org.apache.kafka.common.serialization.ByteArrayDeserializer\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertTrue(consumedEvent.size() == 3,\"Consumption was reset, we should see all events\")@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Spec spec = initJobSpec(addedSpecUriString)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "_properties.setProperty(KafkaJobMonitor.KAFKA_JOB_MONITOR_PREFIX + \".\" + Kafka09ConsumerClient.CONFIG_PREFIX + Kafka09ConsumerClient.CONSUMER_CONFIG + \".auto.offset.reset\",\"earliest\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertTrue(consumedSpecAction.getValue().getUri().toString().equals(specUriString),\"Expected URI did not match\")@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "_seic = _closer.register(new StreamingKafkaSpecConsumer(config,_jobCatalog))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertTrue(consumedSpecAction.getKey().equals(SpecExecutor.Verb.ADD),\"Verb did not match\")@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "_seic.startAsync().awaitRunning()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testAddSpec['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "_properties.setProperty(KafkaJobMonitor.KAFKA_JOB_MONITOR_PREFIX + \".\" + ConfigurationKeys.KAFKA_BROKERS,_kafkaBrokers)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testAddSpec['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "_properties.setProperty(\"gobblin.cluster.jobconf.fullyQualifiedPath\",_JOBS_DIR_PATH)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "List<Pair<SpecExecutor.Verb,Spec>> consumedEvent = _seic.changedSpecs().get()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "String addedSpecUriString = \"/foo/bar/addedSpec\"@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "Map.Entry<SpecExecutor.Verb,Spec> consumedSpecAction = consumedEvent.get(0)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "_jobCatalog = new NonObservingFSJobCatalog(config.getConfig(\"gobblin.cluster\"))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertTrue(consumedSpecAction.getValue() instanceof JobSpec,\"Expected JobSpec\")@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Config config = ConfigUtils.propertiesToConfig(_properties)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "_properties.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + \"value.serializer\",\"org.apache.kafka.common.serialization.ByteArraySerializer\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "log.info(\"WriteResponse: \" + writeResponse)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "_closer = Closer.create()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->22 [style = bold, label=""];
5->10 [style = bold, label=""];
22->25 [style = bold, label=""];
29->8 [style = bold, label=""];
2->20 [style = bold, label=""];
7->1 [style = bold, label=""];
21->23 [style = solid, label="addedSpecUriString"];
18->23 [style = bold, label=""];
21->0 [style = bold, label=""];
26->17 [style = bold, label=""];
16->6 [style = bold, label=""];
28->11 [style = bold, label=""];
25->9 [style = bold, label=""];
23->28 [style = dashed, label="0"];
1->3 [style = bold, label=""];
3->26 [style = bold, label=""];
30->32 [style = bold, label=""];
20->17 [style = solid, label="config"];
12->20 [style = solid, label="_properties"];
15->18 [style = bold, label=""];
17->19 [style = bold, label=""];
9->16 [style = bold, label=""];
18->28 [style = bold, label=""];
24->14 [style = bold, label=""];
0->7 [style = bold, label=""];
19->24 [style = bold, label=""];
20->27 [style = bold, label=""];
6->2 [style = bold, label=""];
12->13 [style = bold, label=""];
7->1 [style = solid, label="writeResponse"];
27->7 [style = bold, label=""];
31->30 [style = bold, label=""];
3->17 [style = solid, label="_jobCatalog"];
13->5 [style = bold, label=""];
33->31 [style = bold, label=""];
4->8 [style = bold, label=""];
14->15 [style = bold, label=""];
8->31 [style = dashed, label="0"];
23->11 [style = bold, label=""];
20->27 [style = solid, label="config"];
27->21 [style = bold, label=""];
21->0 [style = solid, label="addedSpecUriString"];
8->12 [style = bold, label=""];
}
