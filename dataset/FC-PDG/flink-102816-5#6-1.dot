digraph {
1 [style = filled, label = "Assert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingEventTimeWindows)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testAggregateEventTime['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testAggregateEventTime['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "Assert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingProcessingTimeWindows)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertTrue(winOperator.getTrigger() instanceof ProcessingTimeTrigger)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "DataStream<Integer> window1 = source.keyBy(new Tuple3KeySelector()).window(SlidingEventTimeWindows.of(Time.of(1,TimeUnit.SECONDS),Time.of(100,TimeUnit.MILLISECONDS))).aggregate(new DummyAggregationFunction())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "processElementAndEnsureOutput(winOperator,winOperator.getKeySelector(),BasicTypeInfo.STRING_TYPE_INFO,new Tuple3<>(\"hello\",\"hallo\",1))@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "WindowOperator<String,Tuple3<String,String,Integer>,?,?,?> winOperator = (WindowOperator<String,Tuple3<String,String,Integer>,?,?,?>)operator@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertTrue(operator instanceof WindowOperator)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final OneInputStreamOperator<Tuple3<String,String,Integer>,Integer> operator = transform.getOperator()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "DataStream<Integer> window1 = source.keyBy(new Tuple3KeySelector()).window(SlidingProcessingTimeWindows.of(Time.of(1,TimeUnit.SECONDS),Time.of(100,TimeUnit.MILLISECONDS))).aggregate(new DummyAggregationFunction())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final OneInputTransformation<Tuple3<String,String,Integer>,Integer> transform = (OneInputTransformation<Tuple3<String,String,Integer>,Integer>)window1.getTransformation()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(winOperator.getStateDescriptor() instanceof AggregatingStateDescriptor)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "DataStream<Tuple3<String,String,Integer>> source = env.fromElements(Tuple3.of(\"hello\",\"hallo\",1),Tuple3.of(\"hello\",\"hallo\",2))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testAggregateProcessingTime['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4->3 [style = bold, label=""];
3->11 [style = solid, label="winOperator"];
7->11 [style = bold, label=""];
12->5 [style = bold, label=""];
6->4 [style = solid, label="operator"];
8->6 [style = bold, label=""];
3->15 [style = bold, label=""];
5->18 [style = dashed, label="0"];
12->0 [style = bold, label=""];
1->7 [style = bold, label=""];
2->12 [style = bold, label=""];
17->7 [style = bold, label=""];
3->9 [style = bold, label=""];
6->4 [style = bold, label=""];
15->17 [style = bold, label=""];
0->10 [style = bold, label=""];
0->14 [style = bold, label=""];
1->17 [style = dashed, label="0"];
13->12 [style = bold, label=""];
10->8 [style = bold, label=""];
5->0 [style = bold, label=""];
12->18 [style = bold, label=""];
14->8 [style = bold, label=""];
9->1 [style = bold, label=""];
16->12 [style = bold, label=""];
18->0 [style = bold, label=""];
10->14 [style = dashed, label="0"];
6->3 [style = solid, label="operator"];
9->15 [style = dashed, label="0"];
}
