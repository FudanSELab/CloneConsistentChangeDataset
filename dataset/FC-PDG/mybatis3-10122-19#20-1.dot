digraph {
53 [style = filled, label = "Properties props = new Properties()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "assertThat(config.getLogPrefix()).isEqualTo(\"mybatis_\")@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "assertTrue(config.getTypeAliasRegistry().getTypeAliases().get(\"cart\").equals())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertThat(config.getDefaultExecutorType()).isEqualTo(ExecutorType.BATCH)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
86 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "assertThat(config.getDatabaseId()).isEqualTo(\"derby\")@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertThat(config.getDefaultScriptingLanuageInstance()).isInstanceOf()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(config.getLocalCacheScope()).isEqualTo(LocalCacheScope.SESSION)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertThat(config.getJdbcTypeForNull()).isEqualTo(JdbcType.NULL)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "assertThat(config.getReflectorFactory()).isInstanceOf()@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "assertThat(config.isCacheEnabled()).isFalse()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertThat(config.getConfigurationFactory().getName()).isEqualTo(.getName())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertNull(config.getLogPrefix())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "assertThat(config.getAutoMappingUnknownColumnBehavior()).isEqualTo(AutoMappingUnknownColumnBehavior.WARNING)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "assertThat(config.getObjectWrapperFactory()).isInstanceOf()@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "assertThat(objectFactory.getProperties().size()).isEqualTo(1)@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "assertThat(config.isUseColumnLabel()).isFalse()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertThat(config.getLocalCacheScope()).isEqualTo(LocalCacheScope.STATEMENT)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "ExampleObjectFactory objectFactory = (ExampleObjectFactory)config.getObjectFactory()@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertNull(config.getDefaultFetchSize())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(config.isCacheEnabled()).isTrue()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Configuration config = builder.parse()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertThat(plugin.getProperties().getProperty(\"pluginProperty\")).isEqualTo(\"100\")@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertNotNull(config)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "assertTrue(config.getTypeAliasRegistry().getTypeAliases().get(\"blog\").equals())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "assertThat(config.isCallSettersOnNulls()).isTrue()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Configuration config = builder.parse()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "assertThat(config.getDefaultStatementTimeout()).isEqualTo(10)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "assertThat(config.getLazyLoadTriggerMethods()).isEqualTo((Set<String>)new HashSet<String>(Arrays.asList(\"equals\",\"clone\",\"hashCode\",\"toString\",\"xxx\")))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper()).isTrue()@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "String resource = \"org/apache/ibatis/builder/MinimalMapperConfig.xml\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(config.getProxyFactory()).isInstanceOf()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertNull(config.getConfigurationFactory())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper()).isTrue()@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "String resource = \"org/apache/ibatis/builder/CustomizedSettingsMapperConfig.xml\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
84 [style = filled, label = "assertThat(plugin.getProperties().size()).isEqualTo(1)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "ExamplePlugin plugin = (ExamplePlugin)config.getInterceptors().get(0)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(config.isLazyLoadingEnabled()).isFalse()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper()).isTrue()@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertThat(config.getDefaultFetchSize()).isEqualTo(100)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(config.getLazyLoadTriggerMethods()).isEqualTo((Set<String>)new HashSet<String>(Arrays.asList(\"equals\",\"clone\",\"hashCode\",\"toString\")))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "shouldSuccessfullyLoadMinimalXMLConfigFile['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
49 [style = filled, label = "props.put(\"prop2\",\"cccc\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertThat(environment.getTransactionFactory()).isInstanceOf()@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
85 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "assertThat(environment.getId()).isEqualTo(\"development\")@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertThat(config.getAutoMappingBehavior()).isEqualTo(AutoMappingBehavior.NONE)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "shouldSuccessfullyLoadXMLConfigFile['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertThat(config.isSafeResultHandlerEnabled()).isTrue()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "inputStream.close()@@@59@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "assertThat(config.isMapUnderscoreToCamelCase()).isTrue()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper()).isTrue()@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "assertThat(config.isUseGeneratedKeys()).isTrue()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertThat(config.isMapUnderscoreToCamelCase()).isFalse()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "assertThat(config.getProxyFactory()).isInstanceOf()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "Environment environment = config.getEnvironment()@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertNull(config.getLogImpl())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(config.isUseColumnLabel()).isTrue()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "assertThat(config.getMapperRegistry().getMappers().size()).isEqualTo(4)@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "assertTrue(config.getTypeAliasRegistry().getTypeAliases().get(\"blogauthor\").equals())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "assertThat(objectFactory.getProperties().getProperty(\"objectFactoryProperty\")).isEqualTo(\"100\")@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertThat(config.getLogImpl().getName()).isEqualTo(.getName())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "assertThat(config.isAggressiveLazyLoading()).isTrue()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(config.isCallSettersOnNulls()).isFalse()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(config.isMultipleResultSetsEnabled()).isTrue()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "InputStream inputStream = Resources.getResourceAsStream(resource)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(config.getDefaultExecutorType()).isEqualTo(ExecutorType.SIMPLE)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertThat(config.getDefaultScriptingLanuageInstance()).isInstanceOf()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "XMLConfigBuilder builder = new XMLConfigBuilder(inputStream)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(config.getJdbcTypeForNull()).isEqualTo(JdbcType.OTHER)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertThat(environment.getDataSource()).isInstanceOf()@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(config.isAggressiveLazyLoading()).isFalse()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(config.getAutoMappingUnknownColumnBehavior()).isEqualTo(AutoMappingUnknownColumnBehavior.NONE)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertThat(config.isSafeRowBoundsEnabled()).isTrue()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(config.isUseGeneratedKeys()).isFalse()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler(,JdbcType.VARCHAR)).isInstanceOf()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertThat(config.isLazyLoadingEnabled()).isTrue()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "inputStream.close()@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "shouldSuccessfullyLoadMinimalXMLConfigFile['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertNull(config.getDefaultStatementTimeout())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(config.isSafeRowBoundsEnabled()).isFalse()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "XMLConfigBuilder builder = new XMLConfigBuilder(inputStream,null,props)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertThat(config.isSafeResultHandlerEnabled()).isFalse()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@31@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "assertThat(config.isMultipleResultSetsEnabled()).isFalse()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "assertThat(config.getVfsImpl().getName()).isEqualTo(.getName())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48->81 [style = bold, label=""];
14->26 [style = solid, label="inputStream"];
69->76 [style = bold, label=""];
12->82 [style = dashed, label="0"];
83->42 [style = bold, label=""];
78->60 [style = bold, label=""];
63->48 [style = bold, label=""];
23->51 [style = dashed, label="0"];
55->40 [style = bold, label=""];
37->79 [style = bold, label=""];
76->71 [style = bold, label=""];
65->14 [style = bold, label=""];
21->13 [style = solid, label="config"];
74->51 [style = bold, label=""];
7->42 [style = dashed, label="0"];
72->73 [style = bold, label=""];
9->79 [style = dashed, label="0"];
16->14 [style = bold, label=""];
34->69 [style = bold, label=""];
8->4 [style = bold, label=""];
29->1 [style = bold, label=""];
2->25 [style = bold, label=""];
9->24 [style = bold, label=""];
21->13 [style = bold, label=""];
56->38 [style = bold, label=""];
25->28 [style = bold, label=""];
14->77 [style = solid, label="inputStream"];
60->85 [style = bold, label=""];
24->0 [style = bold, label=""];
61->82 [style = bold, label=""];
85->64 [style = bold, label=""];
0->73 [style = dashed, label="0"];
16->26 [style = bold, label=""];
75->46 [style = bold, label=""];
54->62 [style = bold, label=""];
39->45 [style = bold, label=""];
47->87 [style = bold, label=""];
86->78 [style = bold, label=""];
77->30 [style = bold, label=""];
13->32 [style = dashed, label="0"];
6->57 [style = dashed, label="0"];
70->39 [style = bold, label=""];
71->68 [style = bold, label=""];
15->9 [style = bold, label=""];
49->77 [style = bold, label=""];
32->58 [style = bold, label=""];
59->63 [style = bold, label=""];
28->19 [style = bold, label=""];
43->33 [style = bold, label=""];
28->67 [style = dashed, label="0"];
27->29 [style = bold, label=""];
19->22 [style = bold, label=""];
22->11 [style = bold, label=""];
29->35 [style = dashed, label="0"];
50->34 [style = bold, label=""];
66->65 [style = bold, label=""];
4->10 [style = bold, label=""];
64->44 [style = bold, label=""];
58->61 [style = bold, label=""];
79->72 [style = bold, label=""];
27->41 [style = dashed, label="0"];
4->38 [style = dashed, label="0"];
6->18 [style = bold, label=""];
22->33 [style = dashed, label="0"];
16->14 [style = solid, label="resource"];
42->47 [style = bold, label=""];
30->32 [style = bold, label=""];
40->80 [style = bold, label=""];
73->57 [style = bold, label=""];
7->20 [style = bold, label=""];
3->12 [style = bold, label=""];
26->21 [style = bold, label=""];
5->16 [style = bold, label=""];
24->72 [style = dashed, label="0"];
30->3 [style = bold, label=""];
10->23 [style = bold, label=""];
18->36 [style = dashed, label="0"];
65->14 [style = solid, label="resource"];
25->45 [style = dashed, label="0"];
84->54 [style = bold, label=""];
82->37 [style = bold, label=""];
53->77 [style = solid, label="props"];
52->50 [style = bold, label=""];
1->2 [style = bold, label=""];
18->8 [style = bold, label=""];
14->53 [style = bold, label=""];
67->43 [style = bold, label=""];
81->84 [style = bold, label=""];
41->35 [style = bold, label=""];
35->70 [style = bold, label=""];
36->56 [style = bold, label=""];
20->17 [style = bold, label=""];
38->74 [style = bold, label=""];
23->27 [style = bold, label=""];
33->83 [style = bold, label=""];
0->6 [style = bold, label=""];
31->16 [style = bold, label=""];
1->70 [style = dashed, label="0"];
62->52 [style = bold, label=""];
15->37 [style = dashed, label="0"];
12->15 [style = bold, label=""];
45->67 [style = bold, label=""];
13->30 [style = bold, label=""];
87->75 [style = bold, label=""];
14->26 [style = bold, label=""];
53->49 [style = bold, label=""];
8->56 [style = dashed, label="0"];
11->83 [style = dashed, label="0"];
19->43 [style = dashed, label="0"];
30->58 [style = dashed, label="0"];
68->55 [style = bold, label=""];
57->36 [style = bold, label=""];
46->86 [style = bold, label=""];
51->41 [style = bold, label=""];
11->7 [style = bold, label=""];
16->65 [style = dashed, label="0"];
44->59 [style = bold, label=""];
}
