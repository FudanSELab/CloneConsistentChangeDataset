digraph {
3 [style = filled, label = "final Query<Result<TimeseriesResultValue>> query = Druids.newTimeseriesQueryBuilder().dataSource(\"dummy\").intervals(\"2014-07-31T-07/2014-08-05T-07\").granularity(new PeriodGranularity(new Period(\"P1D\"),null,DateTimes.inferTzFromString(\"America/Los_Angeles\"))).aggregators(Collections.singletonList(new CountAggregatorFactory(\"count\"))).build()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(Lists.newArrayList(new Result<>(DateTimes.of(\"2014-07-31T-07\"),new TimeseriesResultValue(ImmutableMap.of(\"metric\",2))),new Result<>(DateTimes.of(\"2014-08-02T-07\"),new TimeseriesResultValue(ImmutableMap.of(\"metric\",3))),new Result<>(DateTimes.of(\"2014-08-02T-07\"),new TimeseriesResultValue(ImmutableMap.of(\"metric\",5)))),queryRunner.run(QueryPlus.wrap(query)).toList())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "testPostProcessWithTimezonesAndDstShift['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testPostProcessWithTimezonesAndDstShift['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Assert.assertEquals(Lists.newArrayList(new Result<>(DateTimes.of(\"2014-07-31T-07\"),new TimeseriesResultValue(ImmutableMap.of(\"metric\",2))),new Result<>(DateTimes.of(\"2014-08-02T-07\"),new TimeseriesResultValue(ImmutableMap.of(\"metric\",3))),new Result<>(DateTimes.of(\"2014-08-02T-07\"),new TimeseriesResultValue(ImmutableMap.of(\"metric\",5)))),queryRunner.run(QueryPlus.wrap(query),CONTEXT).toList())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "testEmptyFutureInterval['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final Query<Result<TimeseriesResultValue>> query = Druids.newTimeseriesQueryBuilder().dataSource(\"dummy\").intervals(\"2014-08-06/2014-08-08\").aggregators(Collections.singletonList(new CountAggregatorFactory(\"count\"))).build()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(Lists.newArrayList(new Result<>(DateTimes.of(\"2014-08-02\"),new TimeseriesResultValue(ImmutableMap.of(\"metric\",2))),new Result<>(DateTimes.of(\"2014-08-02\"),new TimeseriesResultValue(ImmutableMap.of(\"metric\",3)))),queryRunner.run(QueryPlus.wrap(query),new HashMap<>()).toList())@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "QueryRunner<Result<TimeseriesResultValue>> queryRunner = testOperator.postProcess(new QueryRunner<Result<TimeseriesResultValue>>(){@Override public Sequence<Result<TimeseriesResultValue>> run(QueryPlus<Result<TimeseriesResultValue>> queryPlus,Map<String,Object> responseContext){final Query<Result<TimeseriesResultValue>> query = queryPlus.getQuery()return Sequences.simple(ImmutableList.of(new Result<>(query.getIntervals().get(0).getStart(),new TimeseriesResultValue(ImmutableMap.of(\"metric\",2))),new Result<>(query.getIntervals().get(0).getEnd(),new TimeseriesResultValue(ImmutableMap.of(\"metric\",3)))))}},DateTimes.of(\"2014-08-02\").getMillis())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
1->4 [style = dashed, label="0"];
1->8 [style = dashed, label="0"];
2->0 [style = bold, label=""];
6->0 [style = bold, label=""];
5->0 [style = bold, label=""];
3->1 [style = bold, label=""];
7->8 [style = bold, label=""];
3->7 [style = dashed, label="0"];
3->4 [style = bold, label=""];
0->7 [style = bold, label=""];
}
