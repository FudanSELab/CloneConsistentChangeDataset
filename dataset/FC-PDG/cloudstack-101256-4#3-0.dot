digraph {
5 [style = filled, label = "Mockito.doReturn(roles).when(roleDaoMock).findAllByRoleType(RoleType.User)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Mockito.lenient().doReturn(true).when(accountManagerMock).isRootAdmin(accountMockId)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "roles.add(Mockito.mock())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Mockito.doReturn(accountMock).when(roleManagerImpl).getCurrentAccount()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<Role> roles = new ArrayList<>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Mockito.doReturn(true).when(accountManagerMock).isRootAdmin(accountMockId)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "findRolesByTypeTestNonAdminRoleRootAdminUser['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Mockito.lenient().doReturn(accountMock).when(roleManagerImpl).getCurrentAccount()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "findRolesByTypeTestAdminRoleRootAdminUser['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Mockito.verify(accountManagerMock,Mockito.times(1)).isRootAdmin(Mockito.anyLong())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "List<Role> returnedRoles = roleManagerImpl.findRolesByType(RoleType.User)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "List<Role> returnedRoles = roleManagerImpl.findRolesByType(RoleType.Admin)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Mockito.verify(accountManagerMock,Mockito.times(0)).isRootAdmin(Mockito.anyLong())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Mockito.doReturn(roles).when(roleDaoMock).findAllByRoleType(RoleType.Admin)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Mockito.verify(roleDaoMock,Mockito.times(1)).findAllByRoleType(Mockito.any())@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "findRolesByTypeTestNonAdminRoleRootAdminUser['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(1,returnedRoles.size())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12->0 [style = bold, label=""];
5->16 [style = dashed, label="0"];
13->7 [style = bold, label=""];
5->8 [style = bold, label=""];
11->12 [style = bold, label=""];
9->12 [style = dashed, label="0"];
7->9 [style = bold, label=""];
2->5 [style = bold, label=""];
1->14 [style = dashed, label="0"];
16->15 [style = bold, label=""];
7->11 [style = dashed, label="0"];
10->11 [style = bold, label=""];
9->0 [style = bold, label=""];
8->6 [style = bold, label=""];
3->7 [style = bold, label=""];
15->6 [style = bold, label=""];
6->14 [style = bold, label=""];
8->15 [style = dashed, label="0"];
1->4 [style = bold, label=""];
2->16 [style = bold, label=""];
0->2 [style = bold, label=""];
14->4 [style = bold, label=""];
6->1 [style = bold, label=""];
}
