digraph {
19 [style = filled, label = "cqDUnitTest.closeServer(server)@@@135@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "VM server = host.getVM(0)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "AsyncInvocation processCqs = client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ\"){public void run2(){QueryService cqService = getCache().getQueryService()CqQuery cq1 = cqService.getCq(cqName)if (cq1 == null) {fail(\"Failed to get CQ \" + cqName)}SelectResults cqResults = nulltry {cqResults = cq1.executeWithInitialResults()}catch (Exception ex) CqQueryTestListener cqListener = (CqQueryTestListener)cq1.getCqAttributes().getCqListener()cqListener.waitForCreated(\"\" + totalObjects)int oldId = 0for (Object cqEvent : cqListener.events.toArray()){int newId = new Integer(cqEvent.toString()).intValue()if (oldId > newId) {fail(\"Queued events for CQ Listener during execution with \" + \"Initial results is not in the order in which they are created.\")}oldId = newId}HashSet ids = new HashSet(cqListener.events)for (Object o : cqResults.asList()){Struct s = (Struct)oids.add(s.get(\"key\"))}HashSet missingIds = new HashSet()String key = \"\"for (int i = 1 i <= totalObjects i++){key = \"\" + iif (!(ids.contains(key))) {missingIds.add(key)}}if (!missingIds.isEmpty()) {fail(\"Missing Keys in either ResultSet or the Cq Event list. \" + \" Missing keys : (size : \" + missingIds.size() + \"(\" + missingIds + \" Ids in ResultSet and CQ Events :\" + ids)}}})@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final int port = server.invoke(null)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "cqDUnitTest.createClient(client,port,host0)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "processCqs.get(1,TimeUnit.MINUTES)@@@133@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "ThreadUtils.join(processCqs,60 * 1000)@@@133@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "server.invoke(new CacheSerializableRunnable(\"Update Region\"){public void run2(){Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions(0()for (int i = 1 i <= numObjects i++){Portfolio p = new Portfolio(i)region.put(\"\" + i,p)}}})@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "ThreadUtils.join(processCqs,60 * 1000)@@@91@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "final Host host = Host.getHost(0)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final String cqName = \"testEventsDuringQueryExecution_0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "client.invokeAsync(new CacheSerializableRunnable(\"Release latch\"){public void run2(){try {Thread.sleep(5000)}catch (InterruptedException e) CqQueryImpl.testHook.ready()}})@@@118@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "cqDUnitTest.closeClient(client)@@@92@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "cqDUnitTest.createCQ(client,cqName,cqDUnitTest.cqs(0()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "server.invokeAsync(new CacheSerializableRunnable(\"Update Region\"){public void run2(){try {Thread.sleep(1000)}catch (InterruptedException e) Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions(0()for (int i = numObjects + 1 i <= totalObjects i++){Portfolio p = new Portfolio(i)region.put(\"\" + i,p)}}})@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final String host0 = NetworkUtils.getServerHostName(server.getHost())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "cqDUnitTest.createServer(server)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "VM client = host.getVM(1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final int totalObjects = 500@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final int numObjects = 200@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testMultipleExecuteWithInitialResults['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "final String cqName = \"testMultiExecuteWithInitialResults\"@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final int numObjects = 200@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "cqDUnitTest.closeClient(client)@@@134@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ second\"){public void run2(){try {Thread.sleep(2000)}catch (InterruptedException e) QueryService cqService = getCache().getQueryService()CqQuery cq1 = cqService.getCq(cqName)if (cq1 == null) {fail(\"Failed to get CQ \" + cqName)}try {cq1.executeWithInitialResults()}catch (IllegalStateException e) catch (Exception e) }})@@@92@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testEventsDuringQueryExecution['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "AsyncInvocation processCqs = client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ first\"){public void run2(){SelectResults cqResults = nullQueryService cqService = getCache().getQueryService()CqQuery cq1 = cqService.getCq(cqName)if (cq1 == null) {fail(\"Failed to get CQ \" + cqName)}try {cqResults = cq1.executeWithInitialResults()}catch (Exception e) CqQueryTestListener cqListener = (CqQueryTestListener)cq1.getCqAttributes().getCqListener()cqListener.waitForCreated(\"\" + totalObjects)int oldId = 0for (Object cqEvent : cqListener.events.toArray()){int newId = new Integer(cqEvent.toString()).intValue()if (oldId > newId) {fail(\"Queued events for CQ Listener during execution with \" + \"Initial results is not in the order in which they are created.\")}oldId = newId}HashSet ids = new HashSet(cqListener.events)for (Object o : cqResults.asList()){Struct s = (Struct)oids.add(s.get(\"key\"))}HashSet missingIds = new HashSet()String key = \"\"for (int i = 1 i <= totalObjects i++){key = \"\" + iif (!(ids.contains(key))) {missingIds.add(key)}}if (!missingIds.isEmpty()) {fail(\"Missing Keys in either ResultSet or the Cq Event list. \" + \" Missing keys : (size : \" + missingIds.size() + \"(\" + missingIds + \" Ids in ResultSet and CQ Events :\" + ids)}}})@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "client.invoke(setTestHook())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testMultipleExecuteWithInitialResults['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final int totalObjects = 500@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "server.invokeAsync(new CacheSerializableRunnable(\"Update Region\"){public void run2(){try {Thread.sleep(1000)}catch (InterruptedException e) Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions(0()for (int i = numObjects + 1 i <= totalObjects i++){Portfolio p = new Portfolio(i)region.put(\"\" + i,p)}}})@@@73@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "cqDUnitTest.closeServer(server)@@@93@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "server.invoke(new CacheSerializableRunnable(\"Update Region\"){public void run2(){Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions(0()for (int i = 1 i <= numObjects i++){Portfolio p = new Portfolio(i)region.put(\"\" + i,p)}}})@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18->30 [style = solid, label="totalObjects"];
3->29 [style = dashed, label="0"];
6->21 [style = dashed, label="0"];
0->30 [style = bold, label=""];
13->4 [style = solid, label="client"];
15->10 [style = bold, label=""];
4->14 [style = bold, label=""];
5->19 [style = solid, label="server"];
15->16 [style = solid, label="cqName"];
18->29 [style = solid, label="totalObjects"];
14->18 [style = solid, label="host0"];
9->2 [style = bold, label=""];
31->32 [style = bold, label=""];
16->6 [style = bold, label=""];
2->3 [style = bold, label=""];
32->23 [style = solid, label="server"];
5->4 [style = solid, label="cqName"];
9->2 [style = solid, label="i"];
14->29 [style = solid, label="numObjects"];
30->28 [style = solid, label="processCqs"];
28->26 [style = bold, label=""];
5->30 [style = solid, label="cqName"];
13->10 [style = solid, label="client"];
20->1 [style = bold, label=""];
3->16 [style = bold, label=""];
5->10 [style = solid, label="server"];
4->18 [style = solid, label="port"];
14->0 [style = solid, label="numObjects"];
15->3 [style = solid, label="cqName"];
1->13 [style = bold, label=""];
30->29 [style = bold, label=""];
3->16 [style = solid, label="err"];
7->9 [style = solid, label="i"];
0->7 [style = bold, label=""];
21->12 [style = bold, label=""];
29->28 [style = bold, label=""];
20->7 [style = solid, label="numObjects"];
7->9 [style = bold, label=""];
25->27 [style = bold, label=""];
1->2 [style = solid, label="totalObjects"];
0->29 [style = solid, label="i"];
11->18 [style = solid, label="client"];
8->20 [style = bold, label=""];
22->20 [style = bold, label=""];
24->31 [style = bold, label=""];
32->11 [style = solid, label="server"];
0->30 [style = solid, label="i"];
16->21 [style = bold, label=""];
1->9 [style = solid, label="totalObjects"];
27->10 [style = bold, label=""];
26->23 [style = bold, label=""];
11->12 [style = solid, label="client"];
17->15 [style = bold, label=""];
10->4 [style = bold, label=""];
13->5 [style = bold, label=""];
11->17 [style = bold, label=""];
14->18 [style = bold, label=""];
5->11 [style = bold, label=""];
11->0 [style = solid, label="client"];
9->30 [style = dashed, label="0"];
2->6 [style = solid, label="processCqs"];
12->19 [style = bold, label=""];
32->13 [style = bold, label=""];
20->9 [style = solid, label="numObjects"];
15->0 [style = solid, label="cqName"];
27->10 [style = solid, label="host0"];
18->0 [style = bold, label=""];
15->2 [style = solid, label="cqName"];
25->10 [style = solid, label="port"];
11->25 [style = bold, label=""];
13->26 [style = solid, label="client"];
6->12 [style = bold, label=""];
}
