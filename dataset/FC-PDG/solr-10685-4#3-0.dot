digraph {
9 [style = filled, label = "new UpdateRequest().add(id,\"1\",\"type_s\",\"left\",\"bbid_s\",\"MG!!00TNH1\",\"ykey_s\",\"Mtge\").add(id,\"2\",\"type_s\",\"right\",\"bbid_s\",\"MG!!00TNGP\",\"ykey_s\",\"Mtge\",\"extra_s\",\"foo\").commit(cluster.getSolrClient(),COLLECTIONORALIAS)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<Tuple> tuples@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "StreamExpression expression@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "streamContext.setSolrClientCache(solrClientCache)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertFalse(tuples.get(0).getFields().containsKey(\"extra_s\"))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "SolrClientCache solrClientCache = new SolrClientCache()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "tuples = getTuples(stream)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS,cluster.getZkServer().getZkAddress()).withFunctionName(\"search\",).withFunctionName(\"outerHashJoin\",)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "expression = StreamExpressionParser.parse(\"hashJoin(\" + \" search(collection1, q=*:*, fl=\"bbid_s,ykey_s\", fq=\"type_s:left\", sort=\"bbid_s asc, ykey_s asc\"),\" + \" hashed=search(collection1, q=*:*, fl=\"bbid_s,ykey_s\", fq=\"type_s:right\", sort=\"bbid_s asc, ykey_s asc\"),\" + \" on=\"bbid_s,ykey_s\"\" + \")\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS,cluster.getZkServer().getZkAddress()).withFunctionName(\"search\",).withFunctionName(\"hashJoin\",)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "stream = new OuterHashJoinStream(expression,factory)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "StreamContext streamContext = new StreamContext()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "{solrClientCache.close()}@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "expression = StreamExpressionParser.parse(\"outerHashJoin(\" + \" search(collection1, q=*:*, fl=\"bbid_s,ykey_s\", fq=\"type_s:left\", sort=\"bbid_s asc, ykey_s asc\"),\" + \" hashed=search(collection1, q=*:*, fl=\"bbid_s,ykey_s,extra_s\", fq=\"type_s:right\", sort=\"bbid_s asc, ykey_s asc\"),\" + \" on=\"bbid_s,ykey_s\"\" + \")\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "stream.setStreamContext(streamContext)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "stream = new HashJoinStream(expression,factory)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "{solrClientCache.close()}@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(1,tuples.size())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "new UpdateRequest().add(id,\"1\",\"type_s\",\"left\",\"bbid_s\",\"MG!!00TNH1\",\"ykey_s\",\"Mtge\").add(id,\"2\",\"type_s\",\"right\",\"bbid_s\",\"MG!!00TNGP\",\"ykey_s\",\"Mtge\").commit(cluster.getSolrClient(),COLLECTIONORALIAS)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testHashJoinStreamWithKnownConflict['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testOuterHashJoinStreamWithKnownConflict['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "TupleStream stream@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testOuterHashJoinStreamWithKnownConflict['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertFalse(tuples.get(0).fields.containsKey(\"extra_s\"))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertEquals(0,tuples.size())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21->1 [style = solid, label="stream"];
6->11 [style = solid, label="solrClientCache"];
0->5 [style = solid, label="streamContext"];
15->7 [style = bold, label=""];
0->6 [style = bold, label=""];
9->18 [style = dashed, label="0"];
3->24 [style = dashed, label="0"];
18->12 [style = bold, label=""];
14->17 [style = bold, label=""];
4->21 [style = dashed, label="0"];
13->23 [style = dashed, label="0"];
3->4 [style = bold, label=""];
23->21 [style = solid, label="factory"];
4->1 [style = solid, label="stream"];
24->21 [style = solid, label="expression"];
17->7 [style = bold, label=""];
20->18 [style = bold, label=""];
3->4 [style = solid, label="expression"];
21->5 [style = bold, label=""];
5->1 [style = bold, label=""];
23->24 [style = bold, label=""];
2->0 [style = bold, label=""];
13->3 [style = bold, label=""];
8->2 [style = bold, label=""];
24->21 [style = bold, label=""];
13->4 [style = solid, label="factory"];
12->8 [style = bold, label=""];
6->11 [style = bold, label=""];
11->13 [style = bold, label=""];
15->17 [style = dashed, label="0"];
1->14 [style = bold, label=""];
14->15 [style = bold, label=""];
10->9 [style = bold, label=""];
9->12 [style = bold, label=""];
14->19 [style = dashed, label="0"];
1->19 [style = bold, label=""];
11->23 [style = bold, label=""];
4->5 [style = bold, label=""];
19->22 [style = bold, label=""];
16->9 [style = bold, label=""];
}
