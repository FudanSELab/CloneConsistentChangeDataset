digraph {
10 [style = filled, label = "config.setInteger(JobManagerOptions.PORT,mockJmAddress.getPort())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertNotNull(op)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Optimizer optimizer = new Optimizer(new DataStatistics(),new DefaultCostEstimator(),config)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Configuration config = new Configuration()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Plan plan = (Plan)PackagedProgramUtils.getPipelineFromProgram(prg,1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "config.setString(JobManagerOptions.ADDRESS,mockJmAddress.getHostName())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "PackagedProgram prg = PackagedProgram.newBuilder().setEntryPointClassName(.getName()).setArguments(\"/dev/random\",\"/tmp\").build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "InetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress,12345)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "String htmlEscaped = dumper2.getOptimizerPlanAsJSON(op)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "PlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "InetAddress mockAddress = InetAddress.getLocalHost()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testGetExecutionPlan['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "dumper2.setEncodeForHTML(true)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Plan plan = (Plan)PackagedProgramUtils.getPipelineFromProgram(prg,-1)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testGetExecutionPlan['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "testGetExecutionPlan['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(-1,htmlEscaped.indexOf('\'))@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(-1,htmlEscaped.indexOf('\'))@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Plan plan = (Plan)PackagedProgramUtils.getPipelineFromProgram(prg,-1,true)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertNotNull(dumper.getOptimizerPlanAsJSON(op))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "OptimizedPlan op = optimizer.compile(plan)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->17 [style = bold, label=""];
4->14 [style = bold, label=""];
12->15 [style = solid, label="plan"];
16->10 [style = bold, label=""];
21->3 [style = solid, label="op"];
21->15 [style = bold, label=""];
19->20 [style = bold, label=""];
11->6 [style = bold, label=""];
0->2 [style = bold, label=""];
20->0 [style = bold, label=""];
8->3 [style = bold, label=""];
12->15 [style = bold, label=""];
3->11 [style = bold, label=""];
17->15 [style = solid, label="plan"];
2->21 [style = solid, label="plan"];
12->17 [style = dashed, label="0"];
20->2 [style = solid, label="prg"];
14->1 [style = bold, label=""];
2->12 [style = bold, label=""];
15->8 [style = solid, label="op"];
7->9 [style = bold, label=""];
4->14 [style = solid, label="mockAddress"];
15->9 [style = solid, label="op"];
0->17 [style = solid, label="prg"];
0->12 [style = solid, label="prg"];
0->4 [style = bold, label=""];
1->16 [style = bold, label=""];
2->21 [style = bold, label=""];
12->2 [style = dashed, label="0"];
17->15 [style = bold, label=""];
9->5 [style = bold, label=""];
1->2 [style = solid, label="config"];
10->2 [style = bold, label=""];
6->7 [style = bold, label=""];
15->11 [style = solid, label="op"];
15->8 [style = bold, label=""];
18->0 [style = bold, label=""];
21->7 [style = solid, label="op"];
21->15 [style = solid, label="op"];
13->0 [style = bold, label=""];
}
