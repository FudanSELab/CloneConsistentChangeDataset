digraph {
2 [style = filled, label = "StreamFactory factory@@@2@@@['1', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "throw new IOException(\"This IntersectionStream contains a non-expressible TupleStream - it cannot be converted to an expression\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "includeStreams@@@4@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "expression.addParameter(\"<stream>\")@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "expression.addParameter(new StreamExpressionNamedParameter(\"on\",eq.toExpression(factory)))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expression.addParameter(\"<stream>\")@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "throw new IOException(\"This IntersectStream contains a non-expressible TupleStream - it cannot be converted to an expression\")@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "StreamFactory factory@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "expression.addParameter(((Expressible)streamA).toExpression(factory))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "toExpression['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "originalStreamB instanceof Expressible@@@10@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "toExpression['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "streamA instanceof Expressible@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "expression.addParameter(((Expressible)originalStreamB).toExpression(factory))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "return expression@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "toExpression['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "boolean includeStreams@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "throw new IOException(\"This IntersectStream contains a non-expressible TupleStream - it cannot be converted to an expression\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
5->3 [style = bold, label=""];
0->9 [style = bold, label=""];
16->7 [style = solid, label="factory"];
3->17 [style = dashed, label="0"];
12->5 [style = bold, label=""];
11->1 [style = bold, label=""];
16->9 [style = solid, label="factory"];
9->4 [style = bold, label=""];
5->17 [style = dotted, label="false"];
7->0 [style = bold, label=""];
2->7 [style = solid, label="factory"];
5->17 [style = bold, label=""];
3->0 [style = bold, label=""];
1->8 [style = solid, label="expression"];
6->1 [style = bold, label=""];
12->13 [style = bold, label=""];
0->10 [style = bold, label=""];
6->2 [style = dotted, label="true"];
17->0 [style = bold, label=""];
18->1 [style = bold, label=""];
2->4 [style = solid, label="factory"];
12->5 [style = dotted, label="true"];
16->4 [style = solid, label="factory"];
5->7 [style = dotted, label="true"];
2->16 [style = dashed, label="0"];
12->13 [style = dotted, label="false"];
5->3 [style = dotted, label="false"];
1->12 [style = bold, label=""];
10->4 [style = bold, label=""];
12->0 [style = dotted, label="true"];
11->16 [style = dotted, label="true"];
5->7 [style = bold, label=""];
4->8 [style = bold, label=""];
2->9 [style = solid, label="factory"];
15->12 [style = solid, label="includeStreams"];
11->15 [style = dotted, label="true"];
0->9 [style = dotted, label="true"];
13->14 [style = bold, label=""];
12->14 [style = dotted, label="false"];
18->2 [style = dotted, label="true"];
14->4 [style = bold, label=""];
0->10 [style = dotted, label="false"];
}
