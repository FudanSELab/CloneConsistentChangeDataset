digraph {
7 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "int ordinal@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Platform.copyMemory(baseObject,baseOffset + offset,bytes,Platform.BYTE_ARRAY_OFFSET,size)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "return null@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "return new UTF8String(mb)@@@8@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "isNullAt(ordinal)@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "getUTF8String['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "final int size = (int)offsetAndSize@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "return null@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final byte(( bytes = new byte((((@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "getUTF8String['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "MemoryBlock mb = MemoryBlock.allocateFromObject(baseObject,baseOffset + offset,size)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "isNullAt(ordinal)@@@3@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "int ordinal@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "getBinary['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final int size = (int)offsetAndSize@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "return null@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "return bytes@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4->20 [style = solid, label="offsetAndSize"];
0->4 [style = solid, label="size"];
4->11 [style = dashed, label="0"];
2->8 [style = solid, label="ordinal"];
5->13 [style = dashed, label="0"];
0->4 [style = bold, label=""];
18->20 [style = bold, label=""];
13->4 [style = bold, label=""];
8->5 [style = bold, label=""];
17->4 [style = solid, label="ordinal"];
2->17 [style = dashed, label="0"];
5->3 [style = dotted, label="true"];
13->20 [style = dotted, label="false"];
12->15 [style = bold, label=""];
4->18 [style = solid, label="offsetAndSize"];
17->13 [style = solid, label="ordinal"];
6->0 [style = solid, label="offsetAndSize"];
8->6 [style = bold, label=""];
13->4 [style = dotted, label="false"];
13->16 [style = dotted, label="false"];
13->12 [style = dotted, label="false"];
6->7 [style = solid, label="offsetAndSize"];
9->2 [style = dotted, label="true"];
0->11 [style = bold, label=""];
7->4 [style = solid, label="offset"];
2->6 [style = solid, label="ordinal"];
19->13 [style = bold, label=""];
2->5 [style = solid, label="ordinal"];
3->6 [style = bold, label=""];
0->11 [style = solid, label="size"];
11->10 [style = solid, label="mb"];
18->15 [style = solid, label="offset"];
7->11 [style = solid, label="offset"];
13->18 [style = dotted, label="false"];
13->15 [style = dotted, label="false"];
11->10 [style = bold, label=""];
7->0 [style = bold, label=""];
15->16 [style = bold, label=""];
12->16 [style = solid, label="bytes"];
8->5 [style = dotted, label="true"];
20->15 [style = solid, label="size"];
1->2 [style = dotted, label="true"];
19->17 [style = dotted, label="true"];
5->3 [style = bold, label=""];
9->8 [style = bold, label=""];
6->7 [style = bold, label=""];
13->14 [style = bold, label=""];
13->14 [style = dotted, label="true"];
20->12 [style = bold, label=""];
5->6 [style = bold, label=""];
4->18 [style = bold, label=""];
12->15 [style = solid, label="bytes"];
1->5 [style = bold, label=""];
}
