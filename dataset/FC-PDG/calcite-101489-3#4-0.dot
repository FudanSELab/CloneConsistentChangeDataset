digraph {
14 [style = filled, label = "checkDateRange(f,f.ge(f.exYear,f.literal(2014)),is(\">=($9, 2014-01-01)\"))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "checkDateRange(f,e,is(\"AND(>=($8, 2014-01-01), <($8, 2015-01-01))\"))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "checkDateRange(f,f.ge(f.exYear,f.literal(2014)),is(\">=($8, 2014-01-01)\"))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "checkDateRange(f,f.gt(f.exYearTs,f.literal(2014)),is(\">=($9, 2015-01-01)\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "checkDateRange(f,f.le(f.exYear,f.literal(2014)),is(\"<($9, 2015-01-01)\"))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "checkDateRange(f,f.eq(f.exYear,f.literal(2014)),is(\"AND(>=($8, 2014-01-01), <($8, 2015-01-01))\"))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "testExtractYearFromDateColumn['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final Fixture2 f = new Fixture2()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "checkDateRange(f,f.eq(f.exYearTs,f.literal(2014)),is(\"AND(>=($9, 2014-01-01), <($9, 2015-01-01))\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "checkDateRange(f,f.gt(f.exYear,f.literal(2014)),is(\">=($9, 2015-01-01)\"))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "testExtractYearFromTimestampColumn['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "checkDateRange(f,f.ne(f.exYear,f.literal(2014)),is(\"<>(EXTRACT(FLAG(YEAR), $9), 2014)\"))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "checkDateRange(f,f.lt(f.exYear,f.literal(2014)),is(\"<($9, 2014-01-01)\"))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertThat(DateRangeRules.extractTimeUnits(f.literal(1)),is(set()))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "checkDateRange(f,f.ge(f.exYearTs,f.literal(2014)),is(\">=($9, 2014-01-01)\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(DateRangeRules.extractTimeUnits(e),is(set(TimeUnitRange.YEAR)))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "checkDateRange(f,f.ne(f.exYear,f.literal(2014)),is(\"<>(EXTRACT_DATE(FLAG(YEAR), $8), 2014)\"))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "checkDateRange(f,f.gt(f.exYear,f.literal(2014)),is(\">=($8, 2015-01-01)\"))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "checkDateRange(f,f.lt(f.exYear,f.literal(2014)),is(\"<($8, 2014-01-01)\"))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "checkDateRange(f,f.ne(f.exYearTs,f.literal(2014)),is(\"<>(EXTRACT(FLAG(YEAR), $9), 2014)\"))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testExtractYearFromDateColumn['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "checkDateRange(f,f.lt(f.exYearTs,f.literal(2014)),is(\"<($9, 2014-01-01)\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "checkDateRange(f,e,is(\"AND(>=($9, 2014-01-01), <($9, 2015-01-01))\"))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "checkDateRange(f,f.le(f.exYearTs,f.literal(2014)),is(\"<($9, 2015-01-01)\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(DateRangeRules.extractTimeUnits(f.dec),is(set()))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final RexNode e = f.eq(f.literal(2014),f.exYear)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "checkDateRange(f,f.le(f.exYear,f.literal(2014)),is(\"<($8, 2015-01-01)\"))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "checkDateRange(f,f.eq(f.exYear,f.literal(2014)),is(\"AND(>=($9, 2014-01-01), <($9, 2015-01-01))\"))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->18 [style = solid, label="e"];
8->2 [style = solid, label="f"];
8->14 [style = solid, label="f"];
0->4 [style = solid, label="e"];
8->20 [style = solid, label="f"];
1->26 [style = dashed, label="0"];
2->6 [style = bold, label=""];
8->23 [style = solid, label="f"];
8->6 [style = solid, label="f"];
1->3 [style = bold, label=""];
14->17 [style = bold, label=""];
20->14 [style = bold, label=""];
8->16 [style = solid, label="f"];
5->18 [style = bold, label=""];
0->27 [style = dashed, label="0"];
8->21 [style = solid, label="f"];
9->10 [style = bold, label=""];
7->8 [style = bold, label=""];
12->1 [style = bold, label=""];
15->16 [style = bold, label=""];
22->23 [style = bold, label=""];
8->18 [style = solid, label="f"];
17->19 [style = bold, label=""];
2->17 [style = dashed, label="0"];
8->17 [style = solid, label="f"];
3->14 [style = dashed, label="0"];
1->20 [style = dashed, label="0"];
8->0 [style = bold, label=""];
8->1 [style = solid, label="f"];
8->24 [style = solid, label="f"];
24->26 [style = bold, label=""];
11->5 [style = bold, label=""];
18->20 [style = bold, label=""];
23->24 [style = bold, label=""];
8->12 [style = solid, label="f"];
3->2 [style = bold, label=""];
5->12 [style = bold, label=""];
0->4 [style = bold, label=""];
21->22 [style = bold, label=""];
8->10 [style = solid, label="f"];
12->24 [style = dashed, label="0"];
8->27 [style = solid, label="f"];
6->19 [style = dashed, label="0"];
8->26 [style = solid, label="f"];
12->18 [style = dashed, label="0"];
25->8 [style = bold, label=""];
10->16 [style = dashed, label="0"];
13->8 [style = bold, label=""];
19->15 [style = bold, label=""];
6->9 [style = bold, label=""];
4->11 [style = bold, label=""];
8->27 [style = bold, label=""];
27->21 [style = bold, label=""];
8->3 [style = solid, label="f"];
0->12 [style = solid, label="e"];
8->9 [style = solid, label="f"];
8->15 [style = solid, label="f"];
9->15 [style = dashed, label="0"];
8->19 [style = solid, label="f"];
8->22 [style = solid, label="f"];
}
