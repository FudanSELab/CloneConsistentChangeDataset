digraph {
0 [style = filled, label = "{webClient.setRedirectEnabled(true)Page page = webClient.goTo(\"userContent/readme.txt\",\"text/plain\")resourceResponseUrl = page.getUrl().toString()Assert.assertEquals(\"resource response success\",200,page.getWebResponse().getStatusCode())Assert.assertNull(\"no CSP headers\",page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"))Assert.assertTrue(\"Served from resource domain\",resourceResponseUrl.contains(RESOURCE_DOMAIN))Assert.assertTrue(\"Served from resource action\",resourceResponseUrl.contains(\"static-files\"))}@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "secondDomainCannotBeFaked['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "j.jenkins.setSecurityRealm(j.createDummySecurityRealm())@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "{webClient.setThrowExceptionOnFailingStatusCode(false)Page page = webClient.getPage(resourceRootUrl + \"/static-files\")Assert.assertEquals(\"resource action index page response is 404\",404,page.getWebResponse().getStatusCode())}@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "{webClient.setRedirectEnabled(false)webClient.setThrowExceptionOnFailingStatusCode(false)Page page = webClient.getPage(resourceResponseUrl.replace(\"readme.txt\",\"\"))Assert.assertEquals(\"directory listing response\",200,page.getWebResponse().getStatusCode())String responseContent = page.getWebResponse().getContentAsString()Assert.assertTrue(\"directory listing shown\",responseContent.contains(\"readme.txt\"))Assert.assertTrue(\"is HTML\",responseContent.contains(\"href=\"))}@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "{webClient.setThrowExceptionOnFailingStatusCode(false)String uuid = UUID.randomUUID().toString()Page page = webClient.getPage(resourceRootUrl + \"static-files/\" + uuid)Assert.assertEquals(\"resource response is 404\",404,page.getWebResponse().getStatusCode())Assert.assertTrue(\"response URL is still the same\",page.getUrl().toString().contains(uuid))}@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "String resourceRootUrl = ResourceDomainConfiguration.get().getUrl()@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "j.jenkins.setAuthorizationStrategy(a)@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "secondDomainCannotBeFaked['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "{Page page = webClient.goTo(\"userContent\")Assert.assertEquals(\"successful request\",200,page.getWebResponse().getStatusCode())Assert.assertTrue(\"still on the original URL\",page.getUrl().toString().contains(\"/userContent\"))Assert.assertTrue(\"web page\",page.isHtmlPage())Assert.assertTrue(\"complex web page\",page.getWebResponse().getContentAsString().contains(\"javascript\"))}@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "String resourceResponseUrl@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "JenkinsRule.WebClient webClient = j.createWebClient()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "MockAuthorizationStrategy a = new MockAuthorizationStrategy()@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "{Page page = webClient.getPage(resourceResponseUrl)resourceResponseUrl = page.getUrl().toString()Assert.assertEquals(\"resource response success\",200,page.getWebResponse().getStatusCode())Assert.assertNull(\"no CSP headers\",page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"))Assert.assertTrue(\"Served from resource domain\",resourceResponseUrl.contains(RESOURCE_DOMAIN))Assert.assertTrue(\"Served from resource action\",resourceResponseUrl.contains(\"static-files\"))}@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "secondDomainBasics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "{webClient.withRedirectEnabled(false).withThrowExceptionOnFailingStatusCode(false)Page page = webClient.getPage(resourceResponseUrl)resourceResponseUrl = page.getUrl().toString()Assert.assertEquals(\"resource response failed\",403,page.getWebResponse().getStatusCode())Assert.assertNull(\"no CSP headers\",page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"))Assert.assertTrue(\"Served from resource domain\",resourceResponseUrl.contains(RESOURCE_DOMAIN))}@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "{Page page = webClient.getPage(resourceResponseUrl)resourceResponseUrl = page.getUrl().toString()Assert.assertEquals(\"resource response success\",200,page.getWebResponse().getStatusCode())Assert.assertNull(\"no CSP headers\",page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"))Assert.assertTrue(\"Served from resource domain\",resourceResponseUrl.contains(RESOURCE_DOMAIN))Assert.assertTrue(\"Served from resource action\",resourceResponseUrl.contains(\"static-files\"))}@@@68@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "{webClient.setThrowExceptionOnFailingStatusCode(false)Page page = webClient.getPage(resourceRootUrl)Assert.assertEquals(\"resource root URL response is 404\",404,page.getWebResponse().getStatusCode())}@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "a.grant(Jenkins.READ).onRoot().to(\"anonymous\")@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17->12 [style = solid, label="resourceRootUrl"];
4->7 [style = bold, label=""];
9->4 [style = bold, label=""];
1->11 [style = solid, label="resourceResponseUrl"];
11->10 [style = solid, label="resourceResponseUrl"];
6->13 [style = bold, label=""];
11->16 [style = bold, label=""];
14->11 [style = bold, label=""];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
16->10 [style = bold, label=""];
5->4 [style = bold, label=""];
4->2 [style = bold, label=""];
8->18 [style = bold, label=""];
13->12 [style = bold, label=""];
0->1 [style = solid, label="resourceResponseUrl"];
17->6 [style = bold, label=""];
17->13 [style = solid, label="resourceRootUrl"];
1->15 [style = bold, label=""];
2->0 [style = bold, label=""];
18->14 [style = solid, label="a"];
18->14 [style = bold, label=""];
12->8 [style = bold, label=""];
3->4 [style = bold, label=""];
17->6 [style = solid, label="resourceRootUrl"];
15->17 [style = bold, label=""];
}
