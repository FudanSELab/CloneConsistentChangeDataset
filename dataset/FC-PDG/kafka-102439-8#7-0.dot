digraph {
25 [style = filled, label = "final TaskId taskId1 = new TaskId(0,0)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expect(task1.id()).andStubReturn(taskId1)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "shouldCatchTimeoutExceptionFromHandleCorruptionAndInvokeExceptionHandler['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "expect(consumerGroupMetadata.groupInstanceId()).andReturn(Optional.empty())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "expect(taskManager.producerClientIds()).andStubReturn(Collections.emptySet())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "shouldCatchHandleCorruptionOnTaskCorruptedExceptionPath['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final ConsumerGroupMetadata consumerGroupMetadata = mock()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "expect(consumer.groupMetadata()).andStubReturn(consumerGroupMetadata)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "expect(task2.state()).andReturn(Task.State.RUNNING).anyTimes()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final TaskManager taskManager = EasyMock.createNiceMock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "expectLastCall().andThrow(new TimeoutException())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "EasyMock.replay(consumerGroupMetadata)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "consumer.unsubscribe()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final AtomicBoolean exceptionHandlerInvoked = new AtomicBoolean(false)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(exceptionHandlerInvoked.get(),is(true))@@@40@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final Task task2 = mock()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "topologyMetadata.buildAndRewriteTopology()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final TaskId taskId2 = new TaskId(0,2)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final StreamThread thread = new StreamThread(mockTime,config,null,consumer,consumer,null,null,taskManager,streamsMetrics,topologyMetadata,CLIENT_ID,new LogContext(\"\"),new AtomicInteger(),new AtomicLong(Long.MAX_VALUE),null,HANDLER,null){@Override void runOnce(){setState(State.PENDING_SHUTDOWN)throw new TaskCorruptedException(corruptedTasks)}}.updateThreadMetadata(getSharedAdminClientId(CLIENT_ID))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "thread.run()@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "expect(task2.state()).andStubReturn(Task.State.RUNNING)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "expect(consumerGroupMetadata.groupInstanceId()).andReturn(Optional.empty())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final Set<TaskId> corruptedTasks = singleton(taskId1)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "EasyMock.expectLastCall().atLeastOnce()@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "taskManager.handleCorruption(corruptedTasks)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "EasyMock.expectLastCall().atLeastOnce()@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "thread.setStreamsUncaughtExceptionHandler(null)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "EasyMock.replay(task1,task2,taskManager,consumer)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "verify(taskManager)@@@36@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "expect(task1.state()).andStubReturn(Task.State.RUNNING)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final Task task1 = mock()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final Consumer<byte((,byte((> consumer = mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "expect(task1.state()).andReturn(Task.State.RUNNING).anyTimes()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "expect(consumer.groupMetadata()).andStubReturn(consumerGroupMetadata)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final TopologyMetadata topologyMetadata = new TopologyMetadata(internalTopologyBuilder,config)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "shouldCatchTimeoutExceptionFromHandleCorruptionAndInvokeExceptionHandler['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "consumer.subscribe((Collection<String>)anyObject(),anyObject())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expect(task2.id()).andStubReturn(taskId2)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics,CLIENT_ID,StreamsConfig.METRICS_LATEST,mockTime)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "expect(task2.id()).andReturn(taskId2).anyTimes()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "expect(task1.id()).andReturn(taskId1).anyTimes()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->36 [style = dashed, label="0"];
23->22 [style = bold, label=""];
33->27 [style = bold, label=""];
35->3 [style = bold, label=""];
24->35 [style = bold, label=""];
6->18 [style = bold, label=""];
7->38 [style = bold, label=""];
5->39 [style = dashed, label="0"];
26->8 [style = bold, label=""];
14->3 [style = bold, label=""];
10->24 [style = bold, label=""];
27->31 [style = solid, label="taskManager"];
10->23 [style = bold, label=""];
27->32 [style = solid, label="taskManager"];
17->31 [style = solid, label="task2"];
22->24 [style = bold, label=""];
30->15 [style = bold, label=""];
20->31 [style = bold, label=""];
7->34 [style = dashed, label="0"];
10->38 [style = solid, label="consumerGroupMetadata"];
9->20 [style = bold, label=""];
15->31 [style = solid, label="task1"];
9->31 [style = bold, label=""];
28->37 [style = dashed, label="0"];
12->1 [style = bold, label=""];
31->12 [style = bold, label=""];
8->6 [style = bold, label=""];
41->36 [style = bold, label=""];
25->5 [style = solid, label="taskId1"];
16->13 [style = bold, label=""];
3->7 [style = bold, label=""];
0->11 [style = bold, label=""];
40->27 [style = bold, label=""];
5->4 [style = bold, label=""];
32->21 [style = bold, label=""];
4->2 [style = bold, label=""];
27->16 [style = bold, label=""];
39->41 [style = bold, label=""];
19->27 [style = bold, label=""];
11->9 [style = solid, label="corruptedTasks"];
14->35 [style = dashed, label="0"];
36->9 [style = bold, label=""];
4->41 [style = dashed, label="0"];
2->9 [style = bold, label=""];
8->29 [style = bold, label=""];
37->39 [style = bold, label=""];
0->2 [style = solid, label="taskId2"];
29->32 [style = bold, label=""];
25->11 [style = solid, label="taskId1"];
38->42 [style = bold, label=""];
28->5 [style = bold, label=""];
13->31 [style = solid, label="consumer"];
25->0 [style = bold, label=""];
1->26 [style = bold, label=""];
11->37 [style = bold, label=""];
13->10 [style = bold, label=""];
24->14 [style = bold, label=""];
10->23 [style = solid, label="consumerGroupMetadata"];
34->30 [style = bold, label=""];
11->28 [style = bold, label=""];
18->29 [style = bold, label=""];
3->34 [style = bold, label=""];
7->30 [style = bold, label=""];
17->25 [style = bold, label=""];
10->30 [style = solid, label="consumerGroupMetadata"];
42->30 [style = bold, label=""];
15->17 [style = bold, label=""];
}
