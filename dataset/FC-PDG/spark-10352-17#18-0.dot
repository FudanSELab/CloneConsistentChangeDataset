digraph {
2 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int ordinal@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "int ordinal@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final byte(( bytes = new byte((((@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "isNullAt(ordinal)@@@3@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "isNullAt(ordinal)@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "getUTF8String['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "final int size = (int)offsetAndSize@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "return bytes@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "getBinary['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "getUTF8String['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Platform.copyMemory(baseObject,baseOffset + offset,bytes,Platform.BYTE_ARRAY_OFFSET,size)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "return null@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "return null@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final int size = (int)offsetAndSize@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "isNullAt(ordinal)@@@3@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "return UTF8String.fromAddress(baseObject,baseOffset + offset,size)@@@7@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
0->6 [style = bold, label=""];
14->16 [style = solid, label="ordinal"];
8->15 [style = solid, label="offset"];
5->14 [style = dashed, label="0"];
12->19 [style = solid, label="bytes"];
3->16 [style = dashed, label="0"];
2->8 [style = solid, label="offsetAndSize"];
1->0 [style = bold, label=""];
10->9 [style = bold, label=""];
16->18 [style = bold, label=""];
12->15 [style = bold, label=""];
5->9 [style = solid, label="ordinal"];
16->17 [style = dotted, label="false"];
4->11 [style = bold, label=""];
16->18 [style = dotted, label="true"];
9->3 [style = bold, label=""];
0->3 [style = dotted, label="true"];
4->2 [style = solid, label="size"];
14->2 [style = solid, label="ordinal"];
15->19 [style = bold, label=""];
17->12 [style = bold, label=""];
5->6 [style = solid, label="ordinal"];
16->12 [style = dotted, label="false"];
16->2 [style = dotted, label="false"];
0->3 [style = bold, label=""];
16->15 [style = dotted, label="false"];
8->17 [style = bold, label=""];
6->7 [style = solid, label="offsetAndSize"];
17->15 [style = solid, label="size"];
5->0 [style = solid, label="ordinal"];
4->2 [style = bold, label=""];
2->8 [style = bold, label=""];
3->6 [style = bold, label=""];
9->6 [style = bold, label=""];
16->2 [style = bold, label=""];
2->8 [style = solid, label="mb"];
7->11 [style = solid, label="offset"];
1->5 [style = dotted, label="true"];
7->4 [style = bold, label=""];
13->16 [style = bold, label=""];
7->2 [style = solid, label="offset"];
6->4 [style = solid, label="offsetAndSize"];
9->3 [style = dotted, label="true"];
2->11 [style = dashed, label="0"];
6->7 [style = bold, label=""];
4->11 [style = solid, label="size"];
13->14 [style = dotted, label="true"];
16->19 [style = dotted, label="false"];
16->8 [style = dotted, label="false"];
10->5 [style = dotted, label="true"];
12->15 [style = solid, label="bytes"];
2->17 [style = solid, label="offsetAndSize"];
}
