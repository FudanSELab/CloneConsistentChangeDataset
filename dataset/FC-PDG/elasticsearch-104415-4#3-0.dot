digraph {
12 [style = filled, label = "strategy.connect(connectFuture)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testProxyStrategyWillOpenNewConnectionsOnDisconnect['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "connectFuture.actionGet()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertFalse(connectionManager.getAllConnectedNodes().stream().anyMatch(null))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ConnectionManager connectionManager = new ConnectionManager(profile,localService.transport)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertNotEquals(0,initialConnectionsToTransport2)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "int numOfConnections = randomIntBetween(4,8)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "localService.acceptIncomingRequests()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "long initialConnectionsToTransport2 = connectionManager.getAllConnectedNodes().stream().filter(null).count()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertTrue(strategy.assertNoRunningConnections())@@@26@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertBusy(null)@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "TransportAddress address1 = transport1.boundAddress().publishAddress()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "transport1.close()@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertFalse(connectionManager.getAllConnectedNodes().stream().anyMatch(null))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertBusy(null)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "assertEquals(numOfConnections,connectionManager.size())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testClusterNameValidationPreventConnectingToDifferentClusters['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(connectionManager.getAllConnectedNodes().stream().anyMatch(null))@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "connectionManager.getAllConnectedNodes().stream().anyMatch(null)@@@20@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertTrue(connectionManager.getAllConnectedNodes().stream().anyMatch(null))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TransportAddress address2 = transport2.boundAddress().publishAddress()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "PlainActionFuture<Void> connectFuture = PlainActionFuture.newFuture()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertTrue(strategy.assertNoRunningConnections())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "transport1.close()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TransportAddress address2 = transport2.boundAddress().publishAddress()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertFalse(connectionManager.getAllConnectedNodes().stream().anyMatch(null))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testClusterNameValidationPreventConnectingToDifferentClusters['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Settings otherSettings = Settings.builder().put(\"cluster.name\",\"otherCluster\").build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "int numOfConnections = randomIntBetween(4,8)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertTrue(connectionManager.getAllConnectedNodes().stream().anyMatch(null))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "localService.start()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Supplier<TransportAddress> resolver = alternatingResolver(address1,address2)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30->22 [style = bold, label=""];
7->10 [style = bold, label=""];
31->24 [style = bold, label=""];
26->25 [style = bold, label=""];
28->7 [style = bold, label=""];
22->31 [style = bold, label=""];
15->30 [style = dashed, label="0"];
5->15 [style = bold, label=""];
10->3 [style = bold, label=""];
11->12 [style = bold, label=""];
19->17 [style = bold, label=""];
5->14 [style = bold, label=""];
15->19 [style = bold, label=""];
12->6 [style = bold, label=""];
13->11 [style = bold, label=""];
5->15 [style = dotted, label="true"];
4->0 [style = bold, label=""];
5->14 [style = dotted, label="false"];
5->20 [style = dashed, label="0"];
5->16 [style = dashed, label="0"];
3->9 [style = bold, label=""];
30->22 [style = solid, label="initialConnectionsToTransport2"];
24->26 [style = bold, label=""];
1->28 [style = bold, label=""];
6->16 [style = bold, label=""];
12->6 [style = solid, label="connectFuture"];
0->1 [style = bold, label=""];
3->31 [style = solid, label="numOfConnections"];
16->30 [style = bold, label=""];
2->21 [style = solid, label="address2"];
9->21 [style = bold, label=""];
16->5 [style = bold, label=""];
23->1 [style = bold, label=""];
27->23 [style = bold, label=""];
1->2 [style = bold, label=""];
14->8 [style = bold, label=""];
11->12 [style = solid, label="connectFuture"];
2->7 [style = bold, label=""];
16->20 [style = bold, label=""];
20->15 [style = bold, label=""];
15->8 [style = bold, label=""];
18->0 [style = bold, label=""];
3->29 [style = bold, label=""];
1->21 [style = solid, label="address1"];
21->13 [style = bold, label=""];
9->13 [style = bold, label=""];
29->13 [style = bold, label=""];
}
