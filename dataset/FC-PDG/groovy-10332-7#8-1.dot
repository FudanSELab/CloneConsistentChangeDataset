digraph {
4 [style = filled, label = "Class fooClass = loadClass(classNode)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "InvokerInvocationException e@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Statement statement = createPrintlnStatement(new VariableExpression(\"coll\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Statement loopStatement = createPrintlnStatement(new VariableExpression(\"i\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "InvokerHelper.invokeMethod(bean,\"oneParamDemo\",new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@161422a)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Class fooClass = loadClass(classNode)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "InvokerHelper.invokeMethod(bean,\"iterateDemo\",new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16142cf)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "System.out.println(\"################ Done\")@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Object value = new Integer(10000)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "System.out.println(\"################ Now about to invoke a method with looping\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "System.out.println(\"Caught: \" + e.getCause())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "fail(\"Should not have thrown an exception\")@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "ClassNode classNode = new ClassNode(\"Foo\",ACC_PUBLIC,ClassHelper.OBJECT_TYPE)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "System.out.println(\"Caught: \" + e.getCause())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Object bean = fooClass.newInstance()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Object(( array = {new Integer(1234),\"abc\",\"def\"}@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "classNode.addMethod(new MethodNode(\"oneParamDemo\",ACC_PUBLIC,ClassHelper.VOID_TYPE,parameters,statement))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "Parameter(( parameters = {new Parameter(ClassHelper.OBJECT_TYPE.makeArray(),\"coll\")}@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "classNode.addConstructor(new ConstructorNode(ACC_PUBLIC,null))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "e.getCause().printStackTrace()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "e.getCause().printStackTrace()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "InvokerInvocationException e@@@24@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "classNode.addMethod(new MethodNode(\"oneParamDemo\",ACC_PUBLIC,ClassHelper.VOID_TYPE,parameters,ClassNode.EMPTY_ARRAY,statement))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "classNode.addMethod(new MethodNode(\"iterateDemo\",ACC_PUBLIC,ClassHelper.VOID_TYPE,parameters,statement))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(\"Loaded a new class\",fooClass != null)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testLoop['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testNonLoop['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertTrue(\"Managed to create bean\",bean != null)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testNonLoop['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "ForStatement statement = new ForStatement(\"i\",ClassHelper.DYNAMIC_TYPE,new VariableExpression(\"coll\"),loopStatement)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23->21 [style = solid, label="statement"];
12->16 [style = solid, label="statement"];
11->1 [style = solid, label="fooClass"];
4->11 [style = solid, label="fooClass"];
15->28 [style = dashed, label="0"];
11->1 [style = bold, label=""];
8->18 [style = solid, label="parameters"];
17->9 [style = bold, label=""];
8->16 [style = solid, label="parameters"];
26->9 [style = bold, label=""];
1->0 [style = solid, label="bean"];
0->10 [style = solid, label="bean"];
22->28 [style = bold, label=""];
9->4 [style = solid, label="classNode"];
12->16 [style = bold, label=""];
1->0 [style = bold, label=""];
16->18 [style = dashed, label="0"];
10->29 [style = dashed, label="0"];
7->3 [style = bold, label=""];
15->5 [style = bold, label=""];
2->15 [style = solid, label="value"];
9->6 [style = bold, label=""];
20->5 [style = bold, label=""];
14->13 [style = dotted, label="true"];
3->24 [style = dotted, label="true"];
0->10 [style = bold, label=""];
3->5 [style = bold, label=""];
3->20 [style = bold, label=""];
3->5 [style = dotted, label="true"];
18->4 [style = bold, label=""];
23->21 [style = bold, label=""];
19->9 [style = bold, label=""];
21->11 [style = bold, label=""];
10->29 [style = bold, label=""];
13->7 [style = bold, label=""];
24->25 [style = bold, label=""];
5->24 [style = bold, label=""];
22->28 [style = solid, label="array"];
1->15 [style = solid, label="bean"];
2->15 [style = bold, label=""];
6->8 [style = bold, label=""];
12->18 [style = bold, label=""];
9->11 [style = solid, label="classNode"];
8->21 [style = solid, label="parameters"];
27->23 [style = solid, label="loopStatement"];
14->7 [style = dotted, label="true"];
28->25 [style = bold, label=""];
14->3 [style = dotted, label="true"];
12->27 [style = dashed, label="0"];
10->2 [style = bold, label=""];
27->23 [style = bold, label=""];
14->13 [style = bold, label=""];
29->22 [style = bold, label=""];
16->4 [style = bold, label=""];
4->11 [style = bold, label=""];
8->27 [style = bold, label=""];
12->18 [style = solid, label="statement"];
2->22 [style = dashed, label="0"];
0->28 [style = solid, label="bean"];
8->12 [style = bold, label=""];
3->20 [style = dotted, label="true"];
}
