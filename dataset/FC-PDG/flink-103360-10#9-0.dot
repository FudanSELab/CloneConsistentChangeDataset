digraph {
17 [style = filled, label = "{IOUtils.closeQuietly(backend)backend.dispose()}@@@26@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "keyedStateHandle = runSnapshot(backend.snapshot(1L,1L,createStreamFactory(),CheckpointOptions.forCheckpointWithDefaultLocation()),new SharedStateRegistry())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "CheckpointableKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(\"Hello\",state.value())@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "backend.setCurrentKey(1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "state = backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId)@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testValueStateDefaultValue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "state.update(\"Ciao\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>(\"id\",,\"Hello\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "backend = restoreKeyedBackend(IntSerializer.INSTANCE,keyedStateHandle)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "ValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "backend.dispose()@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testValueStateDefaultValue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>(\"id\",,\"Hello\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"Hello\",state.value())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "backend.setCurrentKey(1)@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"Hello\",state.value())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"Ciao\",state.value())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testValueStateDefaultValue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "KeyedStateHandle keyedStateHandle@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "backend.setCurrentKey(1)@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "backend = restoreKeyedBackend(IntSerializer.INSTANCE,runSnapshot(backend.snapshot(1L,1L,createStreamFactory(),CheckpointOptions.forCheckpointWithDefaultLocation()),new SharedStateRegistry()))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "{IOUtils.closeQuietly(backend)backend.dispose()}@@@18@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "state.clear()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "{IOUtils.closeQuietly(backend)backend.dispose()}@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertEquals(\"Hello\",state.value())@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24->27 [style = solid, label="kvId"];
8->15 [style = bold, label=""];
21->19 [style = bold, label=""];
7->12 [style = bold, label=""];
1->12 [style = solid, label="kvId"];
2->6 [style = bold, label=""];
19->20 [style = bold, label=""];
16->7 [style = bold, label=""];
3->11 [style = bold, label=""];
22->21 [style = bold, label=""];
7->22 [style = solid, label="backend"];
10->3 [style = bold, label=""];
4->2 [style = bold, label=""];
15->21 [style = solid, label="keyedStateHandle"];
25->7 [style = bold, label=""];
1->7 [style = bold, label=""];
15->22 [style = bold, label=""];
6->14 [style = bold, label=""];
11->5 [style = bold, label=""];
7->24 [style = bold, label=""];
12->10 [style = bold, label=""];
1->2 [style = solid, label="kvId"];
20->23 [style = bold, label=""];
18->1 [style = bold, label=""];
1->19 [style = solid, label="kvId"];
1->16 [style = bold, label=""];
0->1 [style = bold, label=""];
4->15 [style = dashed, label="0"];
5->13 [style = bold, label=""];
27->10 [style = bold, label=""];
12->27 [style = dashed, label="0"];
23->17 [style = bold, label=""];
14->9 [style = bold, label=""];
4->9 [style = solid, label="backend"];
8->4 [style = bold, label=""];
13->8 [style = bold, label=""];
21->17 [style = solid, label="backend"];
24->27 [style = bold, label=""];
8->26 [style = bold, label=""];
}
