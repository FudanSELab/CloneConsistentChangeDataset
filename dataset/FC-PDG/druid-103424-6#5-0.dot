digraph {
10 [style = filled, label = "Assert.assertTrue(outFile.exists())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final URI uri = URI.create(uriBase.toString() + zipPath)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertArrayEquals(pathByteContents,Files.readAllBytes(outFile.toPath()))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ByteStreams.copy(new ByteArrayInputStream(pathByteContents),stream)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "outFile.delete()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "ByteStreams.copy(inputStream,gzStream)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final Path zipPath = new Path(\"/tmp/testZip.zip\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testGZ['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "testZip['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final File outFile = new File(outTmpDir,\"testZip\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final File tmpFile = File.createTempFile(\"zipContents\",\".txt\",tmpDir)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final File outTmpDir = FileUtils.createTempDir()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "CompressionUtils.zip(tmpDir,stream)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final File outTmpDir = com.google.common.io.Files.createTempDir()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertFalse(outFile.exists())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testGZ['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final URI uri = URI.create(uriBase.toString() + zipPath)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final File tmpDir = com.google.common.io.Files.createTempDir()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final File outFile = new File(outTmpDir,tmpFile.getName())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final Path zipPath = new Path(\"/tmp/testZip.gz\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "{if (tmpFile.exists()) {tmpFile.delete()}if (outFile.exists()) {outFile.delete()}if (outTmpDir.exists()) {outTmpDir.delete()}if (tmpDir.exists()) {tmpDir.delete()}}@@@23@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertTrue(tmpFile.exists())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final File outTmpDir = com.google.common.io.Files.createTempDir()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "puller.getSegmentFiles(new Path(uri),outTmpDir)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12->8 [style = solid, label="outTmpDir"];
20->17 [style = bold, label=""];
22->15 [style = bold, label=""];
20->2 [style = solid, label="uri"];
18->23 [style = bold, label=""];
5->20 [style = bold, label=""];
11->1 [style = bold, label=""];
9->4 [style = bold, label=""];
5->1 [style = solid, label="outTmpDir"];
5->2 [style = solid, label="outTmpDir"];
0->11 [style = bold, label=""];
10->3 [style = bold, label=""];
14->20 [style = solid, label="zipPath"];
4->2 [style = solid, label="outTmpDir"];
19->2 [style = bold, label=""];
18->23 [style = solid, label="tmpDir"];
15->19 [style = bold, label=""];
2->10 [style = bold, label=""];
21->18 [style = bold, label=""];
4->12 [style = dashed, label="0"];
1->22 [style = bold, label=""];
23->14 [style = bold, label=""];
0->2 [style = solid, label="uri"];
8->5 [style = bold, label=""];
5->0 [style = bold, label=""];
3->7 [style = bold, label=""];
16->1 [style = bold, label=""];
4->8 [style = solid, label="outTmpDir"];
18->15 [style = solid, label="tmpDir"];
12->8 [style = bold, label=""];
12->2 [style = solid, label="outTmpDir"];
4->8 [style = bold, label=""];
1->2 [style = bold, label=""];
9->12 [style = bold, label=""];
13->9 [style = bold, label=""];
6->9 [style = bold, label=""];
9->0 [style = solid, label="zipPath"];
17->16 [style = bold, label=""];
14->5 [style = bold, label=""];
}
