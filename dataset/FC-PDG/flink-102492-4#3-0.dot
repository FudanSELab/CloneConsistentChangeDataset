digraph {
12 [style = filled, label = "testHarness.getTask().cancel()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testHarness.getTask().getMailboxExecutorFactory().createExecutor(0).execute(null,\"Test\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "boolean throwInCancel@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "withPendingMail@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testInterruptionExceptionNotSwallowed['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final StreamTaskTestHarness<String> testHarness = new StreamTaskTestHarness<>(null,BasicTypeInfo.STRING_TYPE_INFO)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "InterruptedSource.ExceptionGenerator exceptionGenerator@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "CancelLockingSource.reset()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "streamConfig.setTimeCharacteristic(TimeCharacteristic.ProcessingTime)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testHarness.setupOperatorChain(new OperatorID(),new StreamSource<>(new CancelLockingSource(throwInCancel))).chain(new OperatorID(),new TestBoundedOneInputStreamOperator(\"Operator1\"),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig())).finish()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testCancellationWithSourceBlockedOnLock['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "checkState(throwInCancel)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "CancelLockingSource.awaitRunning()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testInterruptionExceptionNotSwallowed['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "testHarness.setupOperatorChain(new OperatorID(),new StreamSource<>(new InterruptedSource(exceptionGenerator))).chain(new OperatorID(),new TestBoundedOneInputStreamOperator(\"Operator1\"),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig())).finish()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "StreamConfig streamConfig = testHarness.getStreamConfig()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "boolean withPendingMail@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "ExpectedTestException e@@@16@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testHarness.waitForTaskCompletion()@@@20@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testHarness.invoke()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15->14 [style = solid, label="withPendingMail"];
7->8 [style = bold, label=""];
2->4 [style = dotted, label="true"];
1->11 [style = dashed, label="0"];
16->18 [style = bold, label=""];
9->3 [style = bold, label=""];
16->18 [style = dotted, label="true"];
14->12 [style = bold, label=""];
11->6 [style = bold, label=""];
1->6 [style = bold, label=""];
0->11 [style = bold, label=""];
13->17 [style = dotted, label="true"];
0->1 [style = bold, label=""];
2->3 [style = bold, label=""];
10->12 [style = bold, label=""];
3->0 [style = bold, label=""];
9->4 [style = dotted, label="true"];
6->5 [style = bold, label=""];
14->10 [style = dotted, label="true"];
13->3 [style = bold, label=""];
13->15 [style = dotted, label="true"];
19->14 [style = bold, label=""];
7->19 [style = bold, label=""];
18->8 [style = bold, label=""];
14->10 [style = bold, label=""];
12->8 [style = bold, label=""];
5->7 [style = bold, label=""];
}
