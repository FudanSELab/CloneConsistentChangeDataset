digraph {
5 [style = filled, label = "Assert.assertEquals(expected,actual)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "i++@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final List<Object((> expectedResults = ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3e2b3)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testQuantileOnFloatAndLongs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "final List<Object((> results = sqlLifecycle.runSimple(sql,TIMESERIES_CONTEXT_DEFAULT,DEFAULT_PARAMETERS,AUTH_RESULT).toList()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).virtualColumns(new ExpressionVirtualColumn(\"v0\",\"(\"m1\" * 2)\",ValueType.FLOAT,TestExprMacroTable.INSTANCE)).aggregators(ImmutableList.of(new ApproximateHistogramAggregatorFactory(\"a0:agg\",\"m1\",null,null,null,null,false),new ApproximateHistogramAggregatorFactory(\"a2:agg\",\"m1\",200,null,null,null,false),new ApproximateHistogramAggregatorFactory(\"a4:agg\",\"v0\",null,null,null,null,false),new FilteredAggregatorFactory(new ApproximateHistogramAggregatorFactory(\"a5:agg\",\"m1\",null,null,null,null,false),new SelectorDimFilter(\"dim1\",\"abc\",null)),new FilteredAggregatorFactory(new ApproximateHistogramAggregatorFactory(\"a6:agg\",\"m1\",null,null,null,null,false),new NotDimFilter(new SelectorDimFilter(\"dim1\",\"abc\",null))),new ApproximateHistogramAggregatorFactory(\"a8:agg\",\"cnt\",null,null,null,null,false))).postAggregators(new QuantilePostAggregator(\"a0\",\"a0:agg\",0.01f),new QuantilePostAggregator(\"a1\",\"a0:agg\",0.50f),new QuantilePostAggregator(\"a2\",\"a2:agg\",0.98f),new QuantilePostAggregator(\"a3\",\"a0:agg\",0.99f),new QuantilePostAggregator(\"a4\",\"a4:agg\",0.97f),new QuantilePostAggregator(\"a5\",\"a5:agg\",0.99f),new QuantilePostAggregator(\"a6\",\"a6:agg\",0.999f),new QuantilePostAggregator(\"a7\",\"a5:agg\",0.999f),new QuantilePostAggregator(\"a8\",\"a8:agg\",0.50f)).context(TIMESERIES_CONTEXT_DEFAULT).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testQuery(\"SELECT\" + \"APPROX_QUANTILE_FIXED_BUCKETS(m1, 0.01, 20, 0.0, 10.0),\" + \"APPROX_QUANTILE_FIXED_BUCKETS(m1, 0.5, 20, 0.0, 10.0),\" + \"APPROX_QUANTILE_FIXED_BUCKETS(m1, 0.98, 20, 0.0, 10.0),\" + \"APPROX_QUANTILE_FIXED_BUCKETS(m1, 0.99, 20, 0.0, 10.0),\" + \"APPROX_QUANTILE_FIXED_BUCKETS(m1 * 2, 0.97, 40, 0.0, 20.0),\" + \"APPROX_QUANTILE_FIXED_BUCKETS(m1, 0.99, 20, 0.0, 10.0) FILTER(WHERE dim1 = 'abc'),\" + \"APPROX_QUANTILE_FIXED_BUCKETS(m1, 0.999, 20, 0.0, 10.0) FILTER(WHERE dim1 <> 'abc'),\" + \"APPROX_QUANTILE_FIXED_BUCKETS(m1, 0.999, 20, 0.0, 10.0) FILTER(WHERE dim1 = 'abc'),\" + \"APPROX_QUANTILE_FIXED_BUCKETS(cnt, 0.5, 20, 0.0, 10.0)\" + \"FROM foo\",ImmutableList.of(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).virtualColumns(new ExpressionVirtualColumn(\"v0\",\"(\"m1\" * 2)\",ValueType.FLOAT,TestExprMacroTable.INSTANCE)).aggregators(ImmutableList.of(new FixedBucketsHistogramAggregatorFactory(\"a0:agg\",\"m1\",20,0.0d,10.0d,FixedBucketsHistogram.OutlierHandlingMode.IGNORE,false),new FixedBucketsHistogramAggregatorFactory(\"a4:agg\",\"v0\",40,0.0d,20.0d,FixedBucketsHistogram.OutlierHandlingMode.IGNORE,false),new FilteredAggregatorFactory(new FixedBucketsHistogramAggregatorFactory(\"a5:agg\",\"m1\",20,0.0d,10.0d,FixedBucketsHistogram.OutlierHandlingMode.IGNORE,false),new SelectorDimFilter(\"dim1\",\"abc\",null)),new FilteredAggregatorFactory(new FixedBucketsHistogramAggregatorFactory(\"a6:agg\",\"m1\",20,0.0d,10.0d,FixedBucketsHistogram.OutlierHandlingMode.IGNORE,false),new NotDimFilter(new SelectorDimFilter(\"dim1\",\"abc\",null))),new FixedBucketsHistogramAggregatorFactory(\"a8:agg\",\"cnt\",20,0.0d,10.0d,FixedBucketsHistogram.OutlierHandlingMode.IGNORE,false))).postAggregators(new QuantilePostAggregator(\"a0\",\"a0:agg\",0.01f),new QuantilePostAggregator(\"a1\",\"a0:agg\",0.50f),new QuantilePostAggregator(\"a2\",\"a0:agg\",0.98f),new QuantilePostAggregator(\"a3\",\"a0:agg\",0.99f),new QuantilePostAggregator(\"a4\",\"a4:agg\",0.97f),new QuantilePostAggregator(\"a5\",\"a5:agg\",0.99f),new QuantilePostAggregator(\"a6\",\"a6:agg\",0.999f),new QuantilePostAggregator(\"a7\",\"a5:agg\",0.999f),new QuantilePostAggregator(\"a8\",\"a8:agg\",0.50f)).context(QUERY_CONTEXT_DEFAULT).build()),expectedResults)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "i < expectedResults.size()@@@11@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testQuantileOnFloatAndLongs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final List<Object((> expectedResults = ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3e1b7)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "Assert.assertEquals(expectedResults.size(),results.size())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final String sql = \"SELECT\" + \"APPROX_QUANTILE_FIXED_BUCKETS(m1, 0.01, 20, 0.0, 10.0),\" + \"APPROX_QUANTILE_FIXED_BUCKETS(m1, 0.5, 20, 0.0, 10.0),\" + \"APPROX_QUANTILE_FIXED_BUCKETS(m1, 0.98, 20, 0.0, 10.0),\" + \"APPROX_QUANTILE_FIXED_BUCKETS(m1, 0.99, 20, 0.0, 10.0),\" + \"APPROX_QUANTILE_FIXED_BUCKETS(m1 * 2, 0.97, 40, 0.0, 20.0),\" + \"APPROX_QUANTILE_FIXED_BUCKETS(m1, 0.99, 20, 0.0, 10.0) FILTER(WHERE dim1 = 'abc'),\" + \"APPROX_QUANTILE_FIXED_BUCKETS(m1, 0.999, 20, 0.0, 10.0) FILTER(WHERE dim1 <> 'abc'),\" + \"APPROX_QUANTILE_FIXED_BUCKETS(m1, 0.999, 20, 0.0, 10.0) FILTER(WHERE dim1 = 'abc'),\" + \"APPROX_QUANTILE_FIXED_BUCKETS(cnt, 0.5, 20, 0.0, 10.0)\" + \"FROM foo\"@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Assert.assertArrayEquals(expectedResults.get(i),results.get(i))@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Query expected = Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).virtualColumns(new ExpressionVirtualColumn(\"v0\",\"(\"m1\" * 2)\",ValueType.FLOAT,TestExprMacroTable.INSTANCE)).aggregators(ImmutableList.of(new FixedBucketsHistogramAggregatorFactory(\"a0:agg\",\"m1\",20,0.0d,10.0d,FixedBucketsHistogram.OutlierHandlingMode.IGNORE,false),new FixedBucketsHistogramAggregatorFactory(\"a4:agg\",\"v0\",40,0.0d,20.0d,FixedBucketsHistogram.OutlierHandlingMode.IGNORE,false),new FilteredAggregatorFactory(new FixedBucketsHistogramAggregatorFactory(\"a5:agg\",\"m1\",20,0.0d,10.0d,FixedBucketsHistogram.OutlierHandlingMode.IGNORE,false),new SelectorDimFilter(\"dim1\",\"abc\",null)),new FilteredAggregatorFactory(new FixedBucketsHistogramAggregatorFactory(\"a6:agg\",\"m1\",20,0.0d,10.0d,FixedBucketsHistogram.OutlierHandlingMode.IGNORE,false),new NotDimFilter(new SelectorDimFilter(\"dim1\",\"abc\",null))),new FixedBucketsHistogramAggregatorFactory(\"a8:agg\",\"cnt\",20,0.0d,10.0d,FixedBucketsHistogram.OutlierHandlingMode.IGNORE,false))).postAggregators(new QuantilePostAggregator(\"a0\",\"a0:agg\",0.01f),new QuantilePostAggregator(\"a1\",\"a0:agg\",0.50f),new QuantilePostAggregator(\"a2\",\"a0:agg\",0.98f),new QuantilePostAggregator(\"a3\",\"a0:agg\",0.99f),new QuantilePostAggregator(\"a4\",\"a4:agg\",0.97f),new QuantilePostAggregator(\"a5\",\"a5:agg\",0.99f),new QuantilePostAggregator(\"a6\",\"a6:agg\",0.999f),new QuantilePostAggregator(\"a7\",\"a5:agg\",0.999f),new QuantilePostAggregator(\"a8\",\"a8:agg\",0.50f)).context(TIMESERIES_CONTEXT_DEFAULT).build()@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "int i = 0@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "SqlLifecycle sqlLifecycle = getSqlLifecycle()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final String sql = \"SELECT\" + \"APPROX_QUANTILE(m1, 0.01),\" + \"APPROX_QUANTILE(m1, 0.5, 50),\" + \"APPROX_QUANTILE(m1, 0.98, 200),\" + \"APPROX_QUANTILE(m1, 0.99),\" + \"APPROX_QUANTILE(m1 * 2, 0.97),\" + \"APPROX_QUANTILE(m1, 0.99) FILTER(WHERE dim1 = 'abc'),\" + \"APPROX_QUANTILE(m1, 0.999) FILTER(WHERE dim1 <> 'abc'),\" + \"APPROX_QUANTILE(m1, 0.999) FILTER(WHERE dim1 = 'abc'),\" + \"APPROX_QUANTILE(cnt, 0.5)\" + \"FROM foo\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testQuantileOnFloatAndLongs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "cannotVectorize()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2->17 [style = bold, label=""];
4->9 [style = bold, label=""];
8->10 [style = bold, label=""];
7->5 [style = solid, label="expected"];
2->0 [style = dotted, label="true"];
2->1 [style = bold, label=""];
10->2 [style = solid, label="i"];
18->12 [style = bold, label=""];
10->0 [style = solid, label="i"];
0->11 [style = bold, label=""];
3->12 [style = bold, label=""];
8->14 [style = dashed, label="0"];
15->16 [style = bold, label=""];
16->14 [style = solid, label="expectedResults"];
1->7 [style = bold, label=""];
11->2 [style = bold, label=""];
10->11 [style = solid, label="i"];
9->6 [style = bold, label=""];
2->11 [style = dotted, label="true"];
7->5 [style = bold, label=""];
2->0 [style = bold, label=""];
1->17 [style = dashed, label="0"];
12->4 [style = bold, label=""];
19->9 [style = bold, label=""];
6->8 [style = bold, label=""];
1->5 [style = solid, label="actual"];
11->2 [style = solid, label="i"];
16->14 [style = bold, label=""];
10->2 [style = bold, label=""];
13->15 [style = bold, label=""];
12->19 [style = bold, label=""];
11->0 [style = solid, label="i"];
}
