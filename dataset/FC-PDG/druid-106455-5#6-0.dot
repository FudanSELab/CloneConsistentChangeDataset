digraph {
4 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD).setVirtualColumns(new ExpressionVirtualColumn(\"alias\",\"quality\",ValueType.STRING,TestExprMacroTable.INSTANCE)).setDimensions(Lists.newArrayList(new DefaultDimensionSpec(\"market\",\"market2\"),new DefaultDimensionSpec(\"alias\",\"alias2\"))).setAggregatorSpecs(Arrays.asList(QueryRunnerTestHelper.ROWS_COUNT,new LongSumAggregatorFactory(\"idx\",\"index\"))).setGranularity(QueryRunnerTestHelper.DAY_GRAN).setSubtotalsSpec(ImmutableList.of(ImmutableList.of(\"market2\"),ImmutableList.of())).build()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "return@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD).setDimensions(Lists.newArrayList(new DefaultDimensionSpec(\"qualityLong\",\"ql\",ValueType.LONG),new DefaultDimensionSpec(\"market\",\"market2\"))).setAggregatorSpecs(Arrays.asList(QueryRunnerTestHelper.ROWS_COUNT,new LongSumAggregatorFactory(\"idx\",\"index\"))).setGranularity(QueryRunnerTestHelper.DAY_GRAN).setSubtotalsSpec(ImmutableList.of(ImmutableList.of(\"ql\"),ImmutableList.of(\"market2\"),ImmutableList.of())).build()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"subtotal\")@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"subtotal-long-dim\")@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "List<ResultRow> expectedResults = Arrays.asList(makeRow(query,\"2011-04-01T00:00:00.000Z\",\"ql\",1000L,\"rows\",1L,\"idx\",135L),makeRow(query,\"2011-04-01T00:00:00.000Z\",\"ql\",1100L,\"rows\",1L,\"idx\",118L),makeRow(query,\"2011-04-01T00:00:00.000Z\",\"ql\",1200L,\"rows\",1L,\"idx\",158L),makeRow(query,\"2011-04-01T00:00:00.000Z\",\"ql\",1300L,\"rows\",1L,\"idx\",120L),makeRow(query,\"2011-04-01T00:00:00.000Z\",\"ql\",1400L,\"rows\",3L,\"idx\",2870L),makeRow(query,\"2011-04-01T00:00:00.000Z\",\"ql\",1500L,\"rows\",1L,\"idx\",121L),makeRow(query,\"2011-04-01T00:00:00.000Z\",\"ql\",1600L,\"rows\",3L,\"idx\",2900L),makeRow(query,\"2011-04-01T00:00:00.000Z\",\"ql\",1700L,\"rows\",1L,\"idx\",78L),makeRow(query,\"2011-04-01T00:00:00.000Z\",\"ql\",1800L,\"rows\",1L,\"idx\",119L),makeRow(query,\"2011-04-02T00:00:00.000Z\",\"ql\",1000L,\"rows\",1L,\"idx\",147L),makeRow(query,\"2011-04-02T00:00:00.000Z\",\"ql\",1100L,\"rows\",1L,\"idx\",112L),makeRow(query,\"2011-04-02T00:00:00.000Z\",\"ql\",1200L,\"rows\",1L,\"idx\",166L),makeRow(query,\"2011-04-02T00:00:00.000Z\",\"ql\",1300L,\"rows\",1L,\"idx\",113L),makeRow(query,\"2011-04-02T00:00:00.000Z\",\"ql\",1400L,\"rows\",3L,\"idx\",2447L),makeRow(query,\"2011-04-02T00:00:00.000Z\",\"ql\",1500L,\"rows\",1L,\"idx\",114L),makeRow(query,\"2011-04-02T00:00:00.000Z\",\"ql\",1600L,\"rows\",3L,\"idx\",2505L),makeRow(query,\"2011-04-02T00:00:00.000Z\",\"ql\",1700L,\"rows\",1L,\"idx\",97L),makeRow(query,\"2011-04-02T00:00:00.000Z\",\"ql\",1800L,\"rows\",1L,\"idx\",126L),makeRow(query,\"2011-04-01T00:00:00.000Z\",\"market2\",\"spot\",\"rows\",9L,\"idx\",1102L),makeRow(query,\"2011-04-01T00:00:00.000Z\",\"market2\",\"total_market\",\"rows\",2L,\"idx\",2836L),makeRow(query,\"2011-04-01T00:00:00.000Z\",\"market2\",\"upfront\",\"rows\",2L,\"idx\",2681L),makeRow(query,\"2011-04-02T00:00:00.000Z\",\"market2\",\"spot\",\"rows\",9L,\"idx\",1120L),makeRow(query,\"2011-04-02T00:00:00.000Z\",\"market2\",\"total_market\",\"rows\",2L,\"idx\",2514L),makeRow(query,\"2011-04-02T00:00:00.000Z\",\"market2\",\"upfront\",\"rows\",2L,\"idx\",2193L),makeRow(query,\"2011-04-01T00:00:00.000Z\",\"rows\",13L,\"idx\",6619L),makeRow(query,\"2011-04-02T00:00:00.000Z\",\"rows\",13L,\"idx\",5827L))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testGroupByWithSubtotalsSpecOfDimensionsPrefixes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "cannotVectorize()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "List<ResultRow> expectedResults = Arrays.asList(makeRow(query,\"2011-04-01T00:00:00.000Z\",\"market2\",\"spot\",\"rows\",9L,\"idx\",1102L),makeRow(query,\"2011-04-01T00:00:00.000Z\",\"market2\",\"total_market\",\"rows\",2L,\"idx\",2836L),makeRow(query,\"2011-04-01T00:00:00.000Z\",\"market2\",\"upfront\",\"rows\",2L,\"idx\",2681L),makeRow(query,\"2011-04-02T00:00:00.000Z\",\"market2\",\"spot\",\"rows\",9L,\"idx\",1120L),makeRow(query,\"2011-04-02T00:00:00.000Z\",\"market2\",\"total_market\",\"rows\",2L,\"idx\",2514L),makeRow(query,\"2011-04-02T00:00:00.000Z\",\"market2\",\"upfront\",\"rows\",2L,\"idx\",2193L),makeRow(query,\"2011-04-01T00:00:00.000Z\",\"rows\",13L,\"idx\",6619L),makeRow(query,\"2011-04-02T00:00:00.000Z\",\"rows\",13L,\"idx\",5827L))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testGroupByWithSubtotalsSpecOfDimensionsPrefixes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testGroupByWithSubtotalsSpecWithLongDimensionColumn['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->1 [style = solid, label="results"];
0->6 [style = bold, label=""];
2->1 [style = bold, label=""];
11->6 [style = bold, label=""];
8->6 [style = bold, label=""];
12->2 [style = solid, label="results"];
4->7 [style = solid, label="query"];
9->10 [style = bold, label=""];
11->9 [style = bold, label=""];
13->11 [style = bold, label=""];
4->7 [style = bold, label=""];
3->0 [style = bold, label=""];
10->2 [style = solid, label="expectedResults"];
9->12 [style = solid, label="query"];
6->4 [style = bold, label=""];
6->5 [style = bold, label=""];
12->2 [style = bold, label=""];
4->9 [style = dashed, label="0"];
7->1 [style = solid, label="expectedResults"];
10->12 [style = bold, label=""];
7->2 [style = bold, label=""];
11->6 [style = dotted, label="true"];
9->10 [style = solid, label="query"];
5->4 [style = bold, label=""];
7->10 [style = dashed, label="0"];
1->2 [style = dashed, label="0"];
6->9 [style = bold, label=""];
4->2 [style = solid, label="query"];
6->5 [style = dotted, label="true"];
}
