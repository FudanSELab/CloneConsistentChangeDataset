digraph {
31 [style = filled, label = "when(configRepository.getConfig()).thenReturn(someProperties)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Integer someDefaultValue = -1@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "someProperties = mock()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "String someKey = \"someKey\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Boolean someValue = true@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "verify(someProperties,times(2)).getProperty(someKey)@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "defineComponent(,)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertEquals(someDefaultValue,defaultConfig.getBooleanProperty(someStringKey,someDefaultValue))@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Boolean someDefaultValue = false@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Integer someValue = 2@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Integer anotherValue = 3@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "DefaultConfig defaultConfig = new DefaultConfig(someNamespace,configRepository)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "String someStringKey = \"someStringKey\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "verify(someProperties,times(1)).getProperty(anotherKey)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(anotherValue,defaultConfig.getIntProperty(anotherKey,someDefaultValue))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "someProperties = new Properties()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "when(configRepository.getConfig()).thenReturn(someProperties)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "someProperties.setProperty(someStringKey,someStringValue)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(anotherValue,defaultConfig.getIntProperty(anotherKey,someDefaultValue))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(someValue,defaultConfig.getBooleanProperty(someKey,someDefaultValue))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "DefaultConfig defaultConfig = new DefaultConfig(someNamespace,configRepository)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "String someKey = \"someKey\"@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "when(someProperties.getProperty(someKey)).thenReturn(String.valueOf(someValue))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "someProperties.setProperty(someKey,String.valueOf(someValue))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "String someStringValue = \"someStringValue\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "MockInjector.setInstance(,new MockConfigUtilWithSmallCache())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "when(someProperties.getProperty(anotherKey)).thenReturn(String.valueOf(anotherValue))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testGetBooleanProperty['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "verify(someProperties,times(1)).getProperty(someKey)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testGetIntPropertyMultipleTimesWithSmallCache['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testGetIntPropertyMultipleTimesWithSmallCache['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
28->29 [style = bold, label=""];
10->18 [style = bold, label=""];
7->17 [style = solid, label="anotherValue"];
11->0 [style = solid, label="someValue"];
16->0 [style = bold, label=""];
31->25 [style = bold, label=""];
5->17 [style = solid, label="someDefaultValue"];
5->8 [style = solid, label="someDefaultValue"];
22->26 [style = solid, label="someValue"];
24->31 [style = solid, label="someProperties"];
29->30 [style = bold, label=""];
17->6 [style = bold, label=""];
25->23 [style = bold, label=""];
32->23 [style = solid, label="someDefaultValue"];
1->15 [style = bold, label=""];
9->4 [style = bold, label=""];
4->13 [style = bold, label=""];
0->2 [style = bold, label=""];
18->11 [style = bold, label=""];
3->23 [style = solid, label="someKey"];
11->22 [style = dashed, label="0"];
18->19 [style = solid, label="someKey"];
7->6 [style = solid, label="anotherValue"];
8->14 [style = bold, label=""];
14->19 [style = bold, label=""];
22->32 [style = bold, label=""];
19->17 [style = bold, label=""];
22->23 [style = solid, label="someValue"];
23->8 [style = bold, label=""];
9->1 [style = solid, label="someProperties"];
12->9 [style = bold, label=""];
3->22 [style = bold, label=""];
18->14 [style = solid, label="someKey"];
18->0 [style = solid, label="someKey"];
18->2 [style = solid, label="someKey"];
30->27 [style = solid, label="someStringValue"];
12->21 [style = dashed, label="0"];
13->1 [style = bold, label=""];
32->8 [style = solid, label="someDefaultValue"];
29->27 [style = solid, label="someStringKey"];
11->4 [style = solid, label="someValue"];
20->18 [style = bold, label=""];
5->21 [style = bold, label=""];
7->5 [style = bold, label=""];
21->9 [style = bold, label=""];
26->31 [style = bold, label=""];
3->7 [style = bold, label=""];
11->3 [style = bold, label=""];
5->12 [style = bold, label=""];
6->16 [style = bold, label=""];
30->3 [style = bold, label=""];
7->13 [style = solid, label="anotherValue"];
29->8 [style = solid, label="someStringKey"];
3->26 [style = solid, label="someKey"];
18->8 [style = solid, label="someKey"];
11->8 [style = solid, label="someValue"];
5->14 [style = solid, label="someDefaultValue"];
3->17 [style = solid, label="anotherKey"];
3->16 [style = solid, label="anotherKey"];
3->6 [style = solid, label="anotherKey"];
5->0 [style = solid, label="someDefaultValue"];
32->24 [style = bold, label=""];
11->14 [style = solid, label="someValue"];
24->27 [style = bold, label=""];
15->8 [style = bold, label=""];
14->8 [style = dashed, label="0"];
8->23 [style = dashed, label="0"];
27->26 [style = bold, label=""];
5->6 [style = solid, label="someDefaultValue"];
}
