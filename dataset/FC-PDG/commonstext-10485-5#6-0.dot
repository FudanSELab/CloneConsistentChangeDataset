digraph {
0 [style = filled, label = "assertThat(StrMatcher.charSetMatcher(\"a\".toCharArray()) instanceof StrMatcher.CharMatcher).isTrue()@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testStringMatcher_String['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(StrMatcher.stringMatcher(\"\")).isSameAs(StrMatcher.noneMatcher())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(matcher.isMatch(BUFFER2,4)).isEqualTo(0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(matcher.isMatch(BUFFER2,1)).isEqualTo(0)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(StrMatcher.charSetMatcher()).isSameAs(StrMatcher.noneMatcher())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "testCharSetMatcher_charArray['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertThat(StrMatcher.stringMatcher((String)null)).isSameAs(StrMatcher.noneMatcher())@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(matcher.isMatch(BUFFER2,1)).isEqualTo(2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(matcher.isMatch(BUFFER2,2)).isEqualTo(0)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final StrMatcher matcher = StrMatcher.charSetMatcher(\"ace\".toCharArray())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(matcher.isMatch(BUFFER2,5)).isEqualTo(0)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(matcher.isMatch(BUFFER2,0)).isEqualTo(1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(matcher.isMatch(BUFFER2,0)).isEqualTo(0)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final StrMatcher matcher = StrMatcher.stringMatcher(\"bc\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(matcher.isMatch(BUFFER2,3)).isEqualTo(0)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(StrMatcher.charSetMatcher((char(()null)).isSameAs(StrMatcher.noneMatcher())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(StrMatcher.charSetMatcher(new char(((()).isSameAs(StrMatcher.noneMatcher())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertThat(matcher.isMatch(BUFFER2,4)).isEqualTo(1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(matcher.isMatch(BUFFER2,2)).isEqualTo(1)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testCharSetMatcher_charArray['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13->10 [style = bold, label=""];
2->1 [style = bold, label=""];
11->6 [style = bold, label=""];
8->15 [style = dashed, label="0"];
10->3 [style = bold, label=""];
14->17 [style = bold, label=""];
4->2 [style = bold, label=""];
7->8 [style = bold, label=""];
2->17 [style = dashed, label="0"];
9->6 [style = bold, label=""];
6->18 [style = dashed, label="0"];
1->13 [style = dashed, label="0"];
8->0 [style = bold, label=""];
20->18 [style = bold, label=""];
5->19 [style = bold, label=""];
6->4 [style = bold, label=""];
3->5 [style = bold, label=""];
10->16 [style = bold, label=""];
5->12 [style = bold, label=""];
7->19 [style = dashed, label="0"];
12->8 [style = bold, label=""];
16->5 [style = bold, label=""];
7->12 [style = dashed, label="0"];
5->7 [style = bold, label=""];
4->14 [style = dashed, label="0"];
17->13 [style = bold, label=""];
19->15 [style = bold, label=""];
1->10 [style = bold, label=""];
18->14 [style = bold, label=""];
3->16 [style = dashed, label="0"];
}
