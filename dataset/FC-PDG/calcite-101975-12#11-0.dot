digraph {
39 [style = filled, label = "operands.add(builder.isNull(builder.field(\"c\")),falseLiteral)@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "logic@@@35@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "RexNode project = builder.and(fields.stream().map(null).collect(Collectors.toList()))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "builder.distinct()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "operands.add(falseLiteral)@@@94@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "rewriteIn['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final List<RexNode> conditions = Pair.zip(expressionOperands,builder.fields()).stream().map(null).collect(Collectors.toList())@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "operands.add(builder.isNotNull(builder.field(\"cs\")),trueLiteral)@@@82@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "final List<RexNode> keyIsNulls = e.getOperands().stream().filter(null).map(null).collect(Collectors.toList())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "builder.distinct()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "builder.aggregate(builder.groupKey(fields))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "builder.as(\"dt\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "List<RexNode> isNullOperands = fields.stream().map(null).collect(Collectors.toList())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "fields.add(builder.alias(trueLiteral,\"i\"))@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "logic@@@88@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "builder.join(JoinRelType.INNER,builder.literal(true),variablesSet)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "builder.sortLimit(0,1,ImmutableList.of(builder.call(SqlStdOperatorTable.DESC,builder.field(\"cs\"))))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "return builder.isNotNull(Util.last(builder.fields()))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "b = unknownLiteral@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "offset += 2@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "RelBuilder builder@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "builder.push(e.rel)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "variablesSet.isEmpty()@@@67@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "RelOptUtil.Logic logic@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "operands.add(builder.equals(builder.field(\"ct\",\"c\"),builder.literal(0)),falseLiteral)@@@73@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "final ImmutableList.Builder<RexNode> operands = ImmutableList.builder()@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final RexLiteral unknownLiteral = builder.getRexBuilder().makeNullLiteral(trueLiteral.getType())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "builder.join(JoinRelType.LEFT,builder.literal(true),variablesSet)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "expressionOperands.clear()@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "builder.project(builder.alias(project,\"cs\"))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "Set<CorrelationId> variablesSet@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "allLiterals@@@81@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "final List<RexNode> conditions = Pair.zip(expressionOperands,fields).stream().map(null).collect(Collectors.toList())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "!variablesSet.isEmpty()@@@40@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "logic@@@64@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "int offset@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "builder.as(\"dt\")@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "RelBuilder builder@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
59 [style = filled, label = "final RexLiteral falseLiteral = (RexLiteral)builder.literal(false)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "rewriteExists['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final RexLiteral trueLiteral = (RexLiteral)builder.literal(true)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "allLiterals@@@66@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "RexLiteral b = trueLiteral@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "return builder.call(SqlStdOperatorTable.CASE,operands.build())@@@95@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "int offset@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "allLiterals@@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "builder.join(JoinRelType.INNER,builder.and(conditions),variablesSet)@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "operands.add(builder.call(SqlStdOperatorTable.LESS_THAN,builder.field(\"ct\",\"ck\"),builder.field(\"ct\",\"c\")),b)@@@89@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "operands.add(builder.equals(builder.field(\"cs\"),falseLiteral),b)@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "rewriteIn['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "logic@@@56@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "builder.aggregate(builder.groupKey(0))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "builder.distinct()@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "builder.join(JoinRelType.INNER,trueLiteral,variablesSet)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "RelOptUtil.Logic logic@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "RexSubQuery e@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "builder.aggregate(builder.groupKey(),builder.count(false,\"c\"),builder.count(builder.fields()).as(\"ck\"))@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "builder.project(fields)@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "operands.add(builder.or(keyIsNulls),unknownLiteral)@@@79@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "builder.as(\"dt\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "int refOffset = offset@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "builder.join(JoinRelType.LEFT,trueLiteral,variablesSet)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "return builder.literal(true)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "RexSubQuery e@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "Set<CorrelationId> variablesSet@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
50 [style = filled, label = "isNullOperands.addAll(keyIsNulls)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "builder.filter(builder.or(builder.and(conditions),builder.or(isNullOperands)))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "builder.push(e.rel)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "builder.join(JoinRelType.LEFT,builder.and(conditions),variablesSet)@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "RexSubQuery e@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "fields.clear()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "RelOptUtil.Logic logic@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "builder.project(builder.alias(trueLiteral,\"cs\"))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "builder.distinct()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "return trueLiteral@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "final List<RexNode> fields = new ArrayList<>(builder.fields())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "boolean allLiterals = RexUtil.allLiterals(e.getOperands())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "logic@@@5@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "builder.filter(conditions)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "builder.aggregate(builder.groupKey(builder.field(\"cs\")),builder.count(false,\"c\"))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "!keyIsNulls.isEmpty()@@@78@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "operands.add(builder.isNotNull(Util.last(builder.fields())),trueLiteral)@@@85@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "builder.as(\"ct\")@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "!allLiterals@@@87@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "builder.project(builder.alias(builder.literal(true),\"i\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final List<RexNode> expressionOperands = new ArrayList<>(e.getOperands())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "variablesSet.isEmpty()@@@23@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Set<CorrelationId> variablesSet@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0->10 [style = dotted, label="true"];
85->76 [style = bold, label=""];
31->4 [style = solid, label="offset"];
7->18 [style = dotted, label="true"];
45->1 [style = bold, label=""];
60->9 [style = bold, label=""];
0->48 [style = dotted, label="true"];
71->68 [style = solid, label="logic"];
49->32 [style = bold, label=""];
46->44 [style = bold, label=""];
27->56 [style = solid, label="unknownLiteral"];
86->87 [style = bold, label=""];
8->25 [style = dotted, label="false"];
73->69 [style = dotted, label="true"];
12->26 [style = solid, label="isNullOperands"];
73->70 [style = dotted, label="true"];
59->60 [style = solid, label="falseLiteral"];
2->34 [style = bold, label=""];
51->36 [style = bold, label=""];
6->46 [style = dotted, label="true"];
14->7 [style = dotted, label="true"];
64->39 [style = bold, label=""];
49->77 [style = dashed, label="0"];
64->60 [style = bold, label=""];
66->36 [style = bold, label=""];
0->20 [style = bold, label=""];
6->31 [style = dotted, label="true"];
16->56 [style = dotted, label="true"];
63->64 [style = dotted, label="true"];
0->42 [style = dotted, label="true"];
21->43 [style = bold, label=""];
8->25 [style = bold, label=""];
13->23 [style = solid, label="trueLiteral"];
7->29 [style = bold, label=""];
72->23 [style = solid, label="variablesSet"];
13->41 [style = solid, label="trueLiteral"];
14->47 [style = bold, label=""];
20->52 [style = bold, label=""];
42->38 [style = solid, label="logic"];
10->41 [style = solid, label="variablesSet"];
53->67 [style = bold, label=""];
71->7 [style = solid, label="logic"];
65->68 [style = bold, label=""];
84->77 [style = solid, label="variablesSet"];
56->45 [style = solid, label="b"];
15->30 [style = solid, label="conditions"];
63->64 [style = bold, label=""];
10->30 [style = solid, label="variablesSet"];
14->6 [style = dotted, label="false"];
11->33 [style = dotted, label="false"];
55->41 [style = dotted, label="false"];
58->67 [style = solid, label="builder"];
83->80 [style = bold, label=""];
26->21 [style = bold, label=""];
73->72 [style = dotted, label="true"];
37->14 [style = solid, label="allLiterals"];
18->49 [style = bold, label=""];
47->26 [style = solid, label="conditions"];
33->65 [style = bold, label=""];
63->28 [style = dotted, label="false"];
36->4 [style = bold, label=""];
15->38 [style = bold, label=""];
6->40 [style = dotted, label="true"];
39->60 [style = bold, label=""];
16->63 [style = dotted, label="true"];
7->8 [style = dotted, label="true"];
42->7 [style = solid, label="logic"];
58->84 [style = dashed, label="0"];
47->7 [style = bold, label=""];
42->16 [style = solid, label="logic"];
59->1 [style = solid, label="falseLiteral"];
8->34 [style = dotted, label="true"];
72->30 [style = solid, label="variablesSet"];
31->22 [style = bold, label=""];
10->23 [style = solid, label="variablesSet"];
55->23 [style = bold, label=""];
11->17 [style = bold, label=""];
78->20 [style = bold, label=""];
7->29 [style = dotted, label="true"];
73->71 [style = dotted, label="true"];
20->85 [style = bold, label=""];
14->32 [style = dotted, label="true"];
37->11 [style = solid, label="allLiterals"];
50->26 [style = bold, label=""];
8->2 [style = bold, label=""];
7->12 [style = bold, label=""];
6->24 [style = dotted, label="true"];
74->76 [style = solid, label="logic"];
37->5 [style = bold, label=""];
29->86 [style = dashed, label="0"];
1->54 [style = bold, label=""];
21->43 [style = solid, label="project"];
6->44 [style = dotted, label="true"];
52->40 [style = solid, label="fields"];
5->62 [style = bold, label=""];
57->60 [style = solid, label="b"];
62->13 [style = bold, label=""];
76->86 [style = bold, label=""];
79->83 [style = bold, label=""];
37->63 [style = solid, label="allLiterals"];
59->39 [style = solid, label="falseLiteral"];
44->51 [style = bold, label=""];
13->18 [style = solid, label="trueLiteral"];
76->83 [style = bold, label=""];
76->87 [style = dotted, label="true"];
52->44 [style = solid, label="fields"];
12->50 [style = bold, label=""];
27->3 [style = solid, label="unknownLiteral"];
63->60 [style = dotted, label="true"];
28->9 [style = bold, label=""];
76->79 [style = dotted, label="true"];
55->23 [style = dotted, label="true"];
13->19 [style = solid, label="trueLiteral"];
78->84 [style = dotted, label="true"];
7->21 [style = dotted, label="true"];
15->53 [style = solid, label="conditions"];
13->59 [style = bold, label=""];
77->79 [style = bold, label=""];
7->50 [style = dotted, label="true"];
42->68 [style = solid, label="logic"];
62->3 [style = solid, label="keyIsNulls"];
71->38 [style = solid, label="logic"];
65->1 [style = bold, label=""];
52->33 [style = solid, label="fields"];
13->46 [style = solid, label="trueLiteral"];
87->77 [style = bold, label=""];
7->26 [style = dotted, label="true"];
38->30 [style = dotted, label="true"];
67->57 [style = bold, label=""];
6->24 [style = bold, label=""];
8->2 [style = dotted, label="true"];
59->27 [style = bold, label=""];
64->39 [style = dotted, label="true"];
73->58 [style = dotted, label="true"];
41->31 [style = bold, label=""];
13->33 [style = solid, label="trueLiteral"];
11->17 [style = dotted, label="true"];
0->35 [style = dotted, label="true"];
19->53 [style = bold, label=""];
78->81 [style = dotted, label="true"];
59->28 [style = solid, label="falseLiteral"];
23->31 [style = bold, label=""];
65->68 [style = dotted, label="true"];
73->20 [style = bold, label=""];
56->60 [style = solid, label="b"];
78->82 [style = dotted, label="true"];
32->66 [style = bold, label=""];
38->19 [style = dotted, label="true"];
76->77 [style = dotted, label="true"];
57->45 [style = solid, label="b"];
70->67 [style = solid, label="builder"];
61->55 [style = bold, label=""];
16->63 [style = bold, label=""];
68->45 [style = dotted, label="true"];
6->61 [style = dotted, label="true"];
62->50 [style = solid, label="keyIsNulls"];
16->56 [style = bold, label=""];
29->18 [style = bold, label=""];
7->49 [style = dotted, label="true"];
43->8 [style = bold, label=""];
72->53 [style = solid, label="variablesSet"];
38->53 [style = bold, label=""];
27->14 [style = bold, label=""];
25->32 [style = bold, label=""];
14->66 [style = dotted, label="true"];
3->11 [style = bold, label=""];
48->4 [style = solid, label="offset"];
9->11 [style = bold, label=""];
11->33 [style = bold, label=""];
24->61 [style = bold, label=""];
14->47 [style = dotted, label="true"];
52->37 [style = bold, label=""];
68->45 [style = bold, label=""];
40->36 [style = bold, label=""];
10->53 [style = solid, label="variablesSet"];
7->43 [style = dotted, label="true"];
7->12 [style = dotted, label="true"];
9->3 [style = bold, label=""];
7->75 [style = bold, label=""];
13->17 [style = solid, label="trueLiteral"];
6->51 [style = dotted, label="true"];
84->7 [style = solid, label="variablesSet"];
17->65 [style = bold, label=""];
22->46 [style = bold, label=""];
13->57 [style = solid, label="trueLiteral"];
71->16 [style = solid, label="logic"];
38->30 [style = bold, label=""];
76->83 [style = dotted, label="true"];
47->29 [style = solid, label="conditions"];
69->4 [style = solid, label="offset"];
42->6 [style = solid, label="logic"];
6->22 [style = dotted, label="true"];
76->86 [style = dotted, label="true"];
68->1 [style = bold, label=""];
57->16 [style = bold, label=""];
71->6 [style = solid, label="logic"];
0->58 [style = dotted, label="true"];
55->41 [style = bold, label=""];
6->46 [style = bold, label=""];
14->6 [style = bold, label=""];
63->28 [style = bold, label=""];
72->41 [style = solid, label="variablesSet"];
78->74 [style = dotted, label="true"];
9->3 [style = dotted, label="true"];
56->63 [style = bold, label=""];
6->55 [style = dotted, label="true"];
4->15 [style = bold, label=""];
30->19 [style = bold, label=""];
80->7 [style = bold, label=""];
6->40 [style = bold, label=""];
34->32 [style = bold, label=""];
16->9 [style = bold, label=""];
}
