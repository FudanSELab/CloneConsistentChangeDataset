digraph {
48 [style = filled, label = "assertEquals(Collections.emptySet(),worker.connectorNames())@@@53@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
55 [style = filled, label = "EasyMock.expect(plugins.newConnector(connectorClass)).andReturn(sourceConnector)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
99 [style = filled, label = "expectedTaskProps.put(\"foo\",\"bar\")@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "{}@@@36@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
103 [style = filled, label = "assertStatistics(worker,1,0)@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "EasyMock.expect(sourceConnector.version()).andReturn(\"1.0\")@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
97 [style = filled, label = "worker.herder = herder@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "worker.start()@@@33@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "EasyMock.expect(delegatingLoader.connectorLoader(connectorClass)).andReturn(pluginLoader)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "MockFileConfigProvider.assertClosed(mockFileProviderTestId)@@@57@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
51 [style = filled, label = "ExecutionException e@@@45@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "assertEquals(TargetState.STARTED,onFirstStart.get(1000,TimeUnit.MILLISECONDS))@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
68 [style = filled, label = "assertStatistics(worker,0,0)@@@55@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
89 [style = filled, label = "EasyMock.expect(sinkConnector.taskClass()).andReturn()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "EasyMock.expect(sinkConnector.version()).andReturn(\"1.0\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "worker.startConnector(CONNECTOR_ID,connectorProps,ctx,connectorStatusListener,TargetState.STARTED)@@@36@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testStartAndStopConnector['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
111 [style = filled, label = "worker.stop()@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
106 [style = filled, label = "List<Map<String,String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID,connConfig)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader).times(3)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "EasyMock.expectLastCall()@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)),worker.connectorNames())@@@38@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "EasyMock.expect(sourceConnector.version()).andReturn(\"1.0\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader).times(3)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "expectConverters()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "assertThat(e.getCause(),instanceOf())@@@46@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "worker = new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore,noneConnectorClientConfigOverridePolicy)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "connectorStatusListener.onShutdown(CONNECTOR_ID)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "FutureCallback<TargetState> onSecondStart = new FutureCallback<>()@@@39@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
94 [style = filled, label = "PowerMock.replayAll()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "worker.startConnector(CONNECTOR_ID,connectorProps,ctx,connectorStatusListener,TargetState.STARTED,onFirstStart)@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "expectFileConfigProvider()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "sourceConnector.start(connectorProps)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "sourceConnector.initialize(anyObject())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "EasyMock.expect(plugins.newConnector(.getName())).andReturn(sourceConnector)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "EasyMock.expectLastCall()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "connectorProps.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG,.getName())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
70 [style = filled, label = "Map<String,String> taskProps = new HashMap<>()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "sinkConnector.start(connectorProps)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "worker.startConnector(CONNECTOR_ID,connectorProps,ctx,connectorStatusListener,TargetState.STARTED)@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "{}@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
91 [style = filled, label = "expectedTaskProps.put(SinkTask.TOPICS_CONFIG,\"foo,bar\")@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader).times(3)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "EasyMock.expectLastCall()@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "EasyMock.expectLastCall()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "connectorProps.put(SinkConnectorConfig.TOPICS_CONFIG,\"foo,bar\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG,.getName())@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
87 [style = filled, label = "assertEquals(Collections.emptySet(),worker.connectorNames())@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "onSecondStart.get(0,TimeUnit.MILLISECONDS)@@@42@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
90 [style = filled, label = "connectorProps.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG,.getName())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
84 [style = filled, label = "assertStatistics(worker,0,0)@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "EasyMock.expectLastCall()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "final String connectorClass = .getName()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "expectFileConfigProvider()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "worker.stopAndAwaitConnector(CONNECTOR_ID)@@@50@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
75 [style = filled, label = "assertStartupStatistics(worker,1,0,0,0)@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
86 [style = filled, label = "taskProps.put(\"foo\",\"bar\")@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
102 [style = filled, label = "testReconfigureConnectorTasks['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
100 [style = filled, label = "assertEquals(2,taskConfigs.size())@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "expectClusterId()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "worker.herder = herder@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertStartupStatistics(worker,1,0,0,0)@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
109 [style = filled, label = "EasyMock.expect(sinkConnector.version()).andReturn(\"1.0\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "connectorStatusListener.onStartup(CONNECTOR_ID)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "ctx.close()@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "PowerMock.replayAll()@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
110 [style = filled, label = "sinkConnector.initialize(anyObject())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
71 [style = filled, label = "assertStatistics(worker,0,0)@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "expectStartStorage()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "assertStatistics(worker,0,0)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
85 [style = filled, label = "assertEquals(expectedTaskProps,taskConfigs.get(1))@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
95 [style = filled, label = "assertStartupStatistics(worker,1,0,0,0)@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "EasyMock.expectLastCall()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
98 [style = filled, label = "EasyMock.expect(plugins.newConnector(.getName())).andReturn(sinkConnector)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "ConnectorConfig connConfig = new SinkConnectorConfig(plugins,connProps)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "expectStopStorage()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "EasyMock.expectLastCall()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
92 [style = filled, label = "Map<String,String> expectedTaskProps = new HashMap<>()@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "worker.startConnector(CONNECTOR_ID,connectorProps,ctx,connectorStatusListener,TargetState.STARTED,onSecondStart)@@@40@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertStartupStatistics(worker,1,0,0,0)@@@42@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "PowerMock.verifyAll()@@@56@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
107 [style = filled, label = "EasyMock.expect(sinkConnector.taskConfigs(2)).andReturn(Arrays.asList(taskProps,taskProps))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
101 [style = filled, label = "EasyMock.expectLastCall()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "expectLastCall()@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "EasyMock.expect(sourceConnector.version()).andReturn(\"1.0\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertEquals(Collections.emptySet(),worker.connectorNames())@@@35@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expectClusterId()@@@29@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "connectorProps.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG,connectorClass)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)),worker.connectorNames())@@@38@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
104 [style = filled, label = "sinkConnector.stop()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "FutureCallback<TargetState> onFirstStart = new FutureCallback<>()@@@35@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
108 [style = filled, label = "worker.stopConnector(CONNECTOR_ID)@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "EasyMock.expectLastCall()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "worker = new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore,noneConnectorClientConfigOverridePolicy)@@@31@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expectStopStorage()@@@28@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "EasyMock.expectLastCall()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
96 [style = filled, label = "assertStatistics(worker,1,0)@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "assertEquals(expectedTaskProps,taskConfigs.get(0))@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "worker.stop()@@@54@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "assertStatistics(worker,0,0)@@@45@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "fail(\"Should have thrown exception when trying to add connector with same name.\")@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
105 [style = filled, label = "Map<String,String> connProps = new HashMap<>(connectorProps)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "fail(\"Should have failed while trying to start second connector with same name\")@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "EasyMock.expectLastCall()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "EasyMock.expect(plugins.compareAndSwapLoaders(sinkConnector)).andReturn(delegatingLoader).times(3)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "connProps.put(ConnectorConfig.TASKS_MAX_CONFIG,\"2\")@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "ConnectException e@@@43@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "testStartAndStopConnector['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
72 [style = filled, label = "PowerMock.verifyAll()@@@64@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
73->27 [style = bold, label=""];
27->88 [style = bold, label=""];
13->93 [style = dashed, label="0"];
70->86 [style = bold, label=""];
102->19 [style = bold, label=""];
46->13 [style = bold, label=""];
29->30 [style = bold, label=""];
90->83 [style = bold, label=""];
32->0 [style = bold, label=""];
61->19 [style = bold, label=""];
36->96 [style = solid, label="worker"];
51->53 [style = bold, label=""];
26->40 [style = bold, label=""];
53->11 [style = bold, label=""];
107->104 [style = bold, label=""];
9->16 [style = bold, label=""];
69->55 [style = bold, label=""];
14->94 [style = bold, label=""];
37->105 [style = bold, label=""];
56->47 [style = bold, label=""];
9->11 [style = solid, label="worker"];
110->17 [style = bold, label=""];
99->80 [style = bold, label=""];
19->1 [style = bold, label=""];
32->62 [style = bold, label=""];
55->23 [style = bold, label=""];
65->50 [style = bold, label=""];
15->11 [style = bold, label=""];
35->37 [style = bold, label=""];
0->25 [style = bold, label=""];
10->12 [style = bold, label=""];
49->67 [style = bold, label=""];
30->14 [style = bold, label=""];
4->8 [style = bold, label=""];
40->24 [style = bold, label=""];
33->45 [style = bold, label=""];
77->37 [style = bold, label=""];
51->53 [style = dotted, label="true"];
8->41 [style = solid, label="worker"];
60->46 [style = solid, label="connectorClass"];
17->21 [style = bold, label=""];
8->43 [style = solid, label="worker"];
39->29 [style = bold, label=""];
86->107 [style = bold, label=""];
108->71 [style = bold, label=""];
8->12 [style = solid, label="worker"];
24->59 [style = bold, label=""];
100->79 [style = bold, label=""];
13->32 [style = bold, label=""];
71->95 [style = bold, label=""];
40->59 [style = dashed, label="0"];
17->89 [style = dashed, label="0"];
62->25 [style = bold, label=""];
22->9 [style = bold, label=""];
12->11 [style = bold, label=""];
7->64 [style = dashed, label="0"];
92->99 [style = bold, label=""];
1->42 [style = bold, label=""];
8->15 [style = solid, label="worker"];
13->62 [style = dashed, label="0"];
84->72 [style = bold, label=""];
18->28 [style = bold, label=""];
109->74 [style = bold, label=""];
8->22 [style = bold, label=""];
91->100 [style = bold, label=""];
40->88 [style = dashed, label="0"];
3->23 [style = bold, label=""];
93->98 [style = bold, label=""];
83->81 [style = bold, label=""];
105->78 [style = solid, label="connProps"];
36->95 [style = solid, label="worker"];
25->26 [style = bold, label=""];
63->37 [style = bold, label=""];
95->87 [style = bold, label=""];
43->10 [style = bold, label=""];
16->39 [style = bold, label=""];
78->106 [style = bold, label=""];
17->73 [style = bold, label=""];
34->35 [style = bold, label=""];
25->73 [style = dashed, label="0"];
20->19 [style = bold, label=""];
41->43 [style = bold, label=""];
80->91 [style = bold, label=""];
9->34 [style = solid, label="worker"];
9->6 [style = solid, label="worker"];
6->48 [style = bold, label=""];
103->75 [style = bold, label=""];
36->71 [style = solid, label="worker"];
81->110 [style = bold, label=""];
27->18 [style = bold, label=""];
34->105 [style = bold, label=""];
67->66 [style = bold, label=""];
60->2 [style = bold, label=""];
50->58 [style = bold, label=""];
21->27 [style = bold, label=""];
36->84 [style = solid, label="worker"];
94->36 [style = bold, label=""];
33->4 [style = bold, label=""];
2->64 [style = bold, label=""];
74->90 [style = bold, label=""];
36->97 [style = bold, label=""];
3->46 [style = dashed, label="0"];
9->68 [style = solid, label="worker"];
70->107 [style = solid, label="taskProps"];
58->49 [style = bold, label=""];
29->101 [style = bold, label=""];
38->3 [style = bold, label=""];
36->82 [style = solid, label="worker"];
41->82 [style = bold, label=""];
57->68 [style = bold, label=""];
29->65 [style = bold, label=""];
111->84 [style = bold, label=""];
23->42 [style = bold, label=""];
14->52 [style = dashed, label="0"];
24->31 [style = bold, label=""];
36->75 [style = solid, label="worker"];
96->12 [style = bold, label=""];
88->28 [style = bold, label=""];
36->5 [style = bold, label=""];
1->2 [style = bold, label=""];
101->30 [style = bold, label=""];
31->17 [style = bold, label=""];
67->66 [style = solid, label="onSecondStart"];
89->70 [style = bold, label=""];
105->76 [style = bold, label=""];
76->78 [style = bold, label=""];
14->41 [style = bold, label=""];
85->103 [style = bold, label=""];
1->60 [style = bold, label=""];
59->17 [style = bold, label=""];
52->11 [style = bold, label=""];
33->89 [style = bold, label=""];
42->13 [style = bold, label=""];
92->79 [style = solid, label="expectedTaskProps"];
48->57 [style = bold, label=""];
98->109 [style = bold, label=""];
64->69 [style = bold, label=""];
12->15 [style = bold, label=""];
23->46 [style = bold, label=""];
104->39 [style = bold, label=""];
82->43 [style = bold, label=""];
92->85 [style = solid, label="expectedTaskProps"];
37->6 [style = bold, label=""];
54->4 [style = bold, label=""];
87->111 [style = bold, label=""];
68->56 [style = bold, label=""];
79->85 [style = bold, label=""];
65->50 [style = solid, label="onFirstStart"];
45->54 [style = bold, label=""];
36->103 [style = solid, label="worker"];
7->38 [style = bold, label=""];
75->108 [style = bold, label=""];
10->96 [style = bold, label=""];
11->34 [style = bold, label=""];
5->41 [style = bold, label=""];
42->93 [style = bold, label=""];
28->33 [style = bold, label=""];
9->37 [style = solid, label="worker"];
44->52 [style = bold, label=""];
78->106 [style = solid, label="connConfig"];
8->35 [style = solid, label="worker"];
97->41 [style = bold, label=""];
2->7 [style = bold, label=""];
36->51 [style = dashed, label="0"];
10->63 [style = dashed, label="0"];
66->44 [style = bold, label=""];
106->92 [style = bold, label=""];
34->63 [style = bold, label=""];
}
