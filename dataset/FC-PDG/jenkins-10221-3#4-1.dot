digraph {
11 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\",2,3\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(result,failedWith(3))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,2,\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: \"-,2,3\" is not a valid option\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,2,', expected correct notation M,N or M-N\"))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse ',2,3', expected correct notation M,N or M-N\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,,3\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(result,failedWith(3))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,-,3', expected string with a range M-N\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(result,failedWith(3))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,,3', expected correct notation M,N or M-N\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(result,failedWith(2))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "dummyRangeNumberMultiShouldFailIfBuildNumberIsEmpty['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,-,3\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "dummyRangeNumberMultiShouldFailIfBuildNumberIsEmpty['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,2,-', expected string with a range M-N\"))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "dummyRangeNumberMultiShouldFailIfBuildNumberIsHyphen['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,2,-\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"-,2,3\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
5->8 [style = bold, label=""];
9->0 [style = bold, label=""];
7->6 [style = solid, label="result"];
21->8 [style = bold, label=""];
7->20 [style = dashed, label="0"];
14->17 [style = bold, label=""];
4->18 [style = bold, label=""];
1->18 [style = dashed, label="0"];
12->16 [style = bold, label=""];
20->6 [style = bold, label=""];
11->9 [style = bold, label=""];
20->4 [style = solid, label="result"];
13->11 [style = bold, label=""];
0->15 [style = bold, label=""];
11->0 [style = solid, label="result"];
5->8 [style = solid, label="result"];
6->4 [style = bold, label=""];
12->10 [style = bold, label=""];
17->0 [style = bold, label=""];
19->14 [style = bold, label=""];
3->7 [style = bold, label=""];
7->4 [style = solid, label="result"];
15->20 [style = bold, label=""];
11->14 [style = dashed, label="0"];
9->17 [style = dashed, label="0"];
11->9 [style = solid, label="result"];
7->6 [style = bold, label=""];
14->0 [style = solid, label="result"];
5->12 [style = solid, label="result"];
5->21 [style = dashed, label="0"];
3->15 [style = dashed, label="0"];
20->6 [style = solid, label="result"];
4->1 [style = bold, label=""];
14->17 [style = solid, label="result"];
10->16 [style = dashed, label="0"];
18->21 [style = bold, label=""];
21->8 [style = solid, label="result"];
2->11 [style = bold, label=""];
8->12 [style = bold, label=""];
21->12 [style = solid, label="result"];
}
