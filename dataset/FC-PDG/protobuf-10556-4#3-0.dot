digraph {
1 [style = filled, label = "proto2Roundtrip['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Proto2Message result = ExperimentalSerializationUtil.fromByteArray(expectedBytes,)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(actualBytes).hasLength(expectedBytes.length)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(expected,result)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(expected,actual)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "proto2Roundtrip['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "proto2Roundtrip['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "byte(( expectedBytes = expected.toByteArray()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Proto2Message result = fromByteArray(expectedBytes,)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(actual).isEqualTo(expected)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Proto2Message actual = Proto2Message.parseFrom(actualBytes)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Proto2Message expected = new Proto2MessageFactory(5,10,2,2).newMessage()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(expectedBytes.length,actualBytes.length)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "byte(( actualBytes = toByteArray(result,expectedBytes.length)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(result).isEqualTo(expected)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertEquals(expected,actual)@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "byte(( actualBytes = ExperimentalSerializationUtil.toByteArray(result)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
4->2 [style = solid, label="actualBytes"];
0->16 [style = bold, label=""];
16->13 [style = bold, label=""];
8->10 [style = dashed, label="0"];
4->16 [style = dashed, label="0"];
6->9 [style = solid, label="expected"];
9->4 [style = bold, label=""];
7->11 [style = dashed, label="0"];
5->15 [style = bold, label=""];
6->2 [style = solid, label="expected"];
5->3 [style = solid, label="expectedBytes"];
6->0 [style = solid, label="expected"];
15->0 [style = solid, label="result"];
2->10 [style = bold, label=""];
12->6 [style = bold, label=""];
6->10 [style = solid, label="expected"];
11->2 [style = bold, label=""];
4->7 [style = bold, label=""];
3->0 [style = bold, label=""];
5->15 [style = solid, label="expectedBytes"];
3->9 [style = bold, label=""];
6->5 [style = bold, label=""];
13->2 [style = solid, label="actual"];
1->6 [style = bold, label=""];
3->0 [style = solid, label="result"];
0->4 [style = bold, label=""];
7->2 [style = bold, label=""];
15->0 [style = bold, label=""];
2->8 [style = solid, label="actual"];
3->15 [style = dashed, label="0"];
0->9 [style = dashed, label="0"];
16->13 [style = solid, label="actualBytes"];
4->11 [style = bold, label=""];
15->16 [style = solid, label="result"];
14->6 [style = bold, label=""];
3->4 [style = solid, label="result"];
6->8 [style = solid, label="expected"];
2->8 [style = bold, label=""];
13->2 [style = bold, label=""];
}
