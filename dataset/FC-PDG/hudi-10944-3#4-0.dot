digraph {
10 [style = filled, label = "header.put(HoodieLogBlock.HeaderMetadataType.SCHEMA,getSimpleSchema().toString())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(copyOfRecords,dataBlockRead.getRecords(),\"Both records lists should be the same. (ordering guaranteed)\")@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "Map<HoodieLogBlock.HeaderMetadataType,String> header = new HashMap<>()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "dataBlockRead = (HoodieAvroDataBlock)nextBlock@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "HoodieAvroDataBlock dataBlock = new HoodieAvroDataBlock(records1,header)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "List<IndexedRecord> records3 = SchemaTestUtil.generateTestRecords(0,100)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(HoodieLogBlockType.AVRO_DATA_BLOCK,nextBlock.getBlockType(),\"The next block should be a data block\")@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
54 [style = filled, label = "Reader reader = HoodieLogFormat.newReader(fs,writer.getLogFile(),SchemaTestUtil.getSimpleSchema())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "HoodieAvroDataBlock dataBlock = new HoodieAvroDataBlock(records,header)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertEquals(dataBlockType,nextBlock.getBlockType(),\"The next block should be a data block\")@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "assertEquals(copyOfRecords1,dataBlockRead.getRecords(),\"Both records lists should be the same. (ordering guaranteed)\")@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertTrue(reader.hasNext(),\"We wrote a block, we should be able to read it\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "reader.close()@@@44@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertTrue(reader.hasNext(),\"First block should be available\")@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "List<IndexedRecord> records1 = SchemaTestUtil.generateTestRecords(0,100)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "writer = HoodieLogFormat.newWriterBuilder().onParentPath(partitionPath).withFileExtension(HoodieLogFile.DELTA_EXTENSION).withFileId(\"test-fileid1\").overBaseCommit(\"100\").withFs(fs).build()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "List<IndexedRecord> copyOfRecords1 = records1.stream().map(null).collect(Collectors.toList())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "nextBlock = reader.next()@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "writer.close()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "header.put(HoodieLogBlock.HeaderMetadataType.SCHEMA,getSimpleSchema().toString())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "writer.close()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "dataBlock = new HoodieAvroDataBlock(records3,header)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "dataBlock = new HoodieAvroDataBlock(records2,header)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Schema schema = getSimpleSchema()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testBasicWriteAndScan['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "header.put(HoodieLogBlock.HeaderMetadataType.INSTANT_TIME,\"100\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "List<IndexedRecord> copyOfRecords = records.stream().map(null).collect(Collectors.toList())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "writer = writer.appendBlock(dataBlock)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "testBasicAppendAndRead['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "writer = HoodieLogFormat.newWriterBuilder().onParentPath(partitionPath).withFileExtension(HoodieLogFile.DELTA_EXTENSION).withFileId(\"test-fileid1\").overBaseCommit(\"100\").withFs(fs).build()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "List<IndexedRecord> records2 = SchemaTestUtil.generateTestRecords(0,100)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "HoodieDataBlock dataBlockRead = (HoodieDataBlock)nextBlock@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(copyOfRecords.size(),dataBlockRead.getRecords().size(),\"Read records size should be equal to the written records size\")@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "writer = writer.appendBlock(dataBlock)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "List<IndexedRecord> records = SchemaTestUtil.generateTestRecords(0,100)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertEquals(copyOfRecords2.size(),dataBlockRead.getRecords().size(),\"Read records size should be equal to the written records size\")@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(copyOfRecords3.size(),dataBlockRead.getRecords().size(),\"Read records size should be equal to the written records size\")@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "dataBlockRead = (HoodieAvroDataBlock)nextBlock@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "HoodieLogBlock nextBlock = reader.next()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "nextBlock = reader.next()@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testBasicWriteAndScan['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "writer.close()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "List<IndexedRecord> copyOfRecords3 = records3.stream().map(null).collect(Collectors.toList())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "reader.hasNext()@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "assertEquals(copyOfRecords3,dataBlockRead.getRecords(),\"Both records lists should be the same. (ordering guaranteed)\")@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "writer = writer.appendBlock(dataBlock)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "header.put(HoodieLogBlock.HeaderMetadataType.SCHEMA,getSimpleSchema().toString())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "HoodieAvroDataBlock dataBlockRead = (HoodieAvroDataBlock)nextBlock@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "reader.close()@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "List<IndexedRecord> copyOfRecords2 = records2.stream().map(null).collect(Collectors.toList())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "HoodieDataBlock dataBlock = getDataBlock(records,header)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "reader.hasNext()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertEquals(dataBlockRead.getSchema(),getSimpleSchema())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(copyOfRecords1.size(),dataBlockRead.getRecords().size(),\"Read records size should be equal to the written records size\")@@@31@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Writer writer = HoodieLogFormat.newWriterBuilder().onParentPath(partitionPath).withFileExtension(HoodieLogFile.DELTA_EXTENSION).withFileId(\"test-fileid1\").overBaseCommit(\"100\").withFs(fs).build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(copyOfRecords2,dataBlockRead.getRecords(),\"Both records lists should be the same. (ordering guaranteed)\")@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18->0 [style = dashed, label="0"];
25->52 [style = solid, label="nextBlock"];
25->52 [style = bold, label=""];
16->7 [style = bold, label=""];
39->6 [style = bold, label=""];
21->6 [style = solid, label="dataBlock"];
27->3 [style = solid, label="records1"];
15->19 [style = dashed, label="0"];
38->31 [style = bold, label=""];
1->13 [style = bold, label=""];
43->35 [style = solid, label="dataBlock"];
4->12 [style = dashed, label="0"];
49->55 [style = bold, label=""];
52->24 [style = bold, label=""];
53->43 [style = solid, label="records2"];
24->49 [style = bold, label=""];
41->49 [style = solid, label="copyOfRecords3"];
43->35 [style = bold, label=""];
6->11 [style = bold, label=""];
29->46 [style = bold, label=""];
51->7 [style = bold, label=""];
3->39 [style = solid, label="dataBlock"];
32->25 [style = bold, label=""];
17->6 [style = solid, label="dataBlock"];
4->8 [style = bold, label=""];
3->39 [style = bold, label=""];
50->9 [style = solid, label="nextBlock"];
30->40 [style = bold, label=""];
41->45 [style = bold, label=""];
47->26 [style = solid, label="header"];
37->33 [style = bold, label=""];
42->34 [style = solid, label="copyOfRecords1"];
23->44 [style = bold, label=""];
47->43 [style = solid, label="header"];
13->42 [style = dashed, label="0"];
48->37 [style = bold, label=""];
7->1 [style = bold, label=""];
12->20 [style = dashed, label="0"];
19->20 [style = bold, label=""];
8->34 [style = dashed, label="0"];
1->42 [style = bold, label=""];
53->30 [style = bold, label=""];
22->7 [style = bold, label=""];
46->41 [style = bold, label=""];
35->28 [style = bold, label=""];
46->26 [style = solid, label="records3"];
13->21 [style = solid, label="records"];
36->48 [style = solid, label="nextBlock"];
47->2 [style = bold, label=""];
18->9 [style = bold, label=""];
13->5 [style = bold, label=""];
15->12 [style = bold, label=""];
34->38 [style = bold, label=""];
28->29 [style = bold, label=""];
44->54 [style = bold, label=""];
17->6 [style = bold, label=""];
5->8 [style = solid, label="copyOfRecords"];
42->47 [style = bold, label=""];
8->14 [style = bold, label=""];
31->36 [style = bold, label=""];
2->10 [style = bold, label=""];
54->0 [style = bold, label=""];
26->23 [style = solid, label="dataBlock"];
9->12 [style = solid, label="nextBlock"];
9->19 [style = bold, label=""];
3->17 [style = bold, label=""];
33->32 [style = bold, label=""];
0->18 [style = bold, label=""];
3->21 [style = bold, label=""];
9->20 [style = solid, label="nextBlock"];
9->12 [style = bold, label=""];
40->43 [style = bold, label=""];
27->1 [style = bold, label=""];
2->17 [style = solid, label="header"];
50->9 [style = bold, label=""];
21->6 [style = bold, label=""];
47->3 [style = solid, label="header"];
10->3 [style = bold, label=""];
12->34 [style = bold, label=""];
17->21 [style = dashed, label="0"];
0->50 [style = bold, label=""];
20->4 [style = bold, label=""];
11->53 [style = bold, label=""];
5->2 [style = bold, label=""];
11->0 [style = bold, label=""];
12->4 [style = bold, label=""];
17->3 [style = dashed, label="0"];
9->15 [style = bold, label=""];
26->23 [style = bold, label=""];
36->48 [style = bold, label=""];
7->27 [style = bold, label=""];
2->21 [style = solid, label="header"];
30->33 [style = solid, label="copyOfRecords2"];
45->26 [style = bold, label=""];
13->17 [style = solid, label="records"];
}
