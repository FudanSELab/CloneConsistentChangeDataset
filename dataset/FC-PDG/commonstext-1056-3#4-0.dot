digraph {
1 [style = filled, label = "assertFalse(sb1.equals(\"abc\"))@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertFalse(sb1.equals((Object)sb2))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(sb1.equals(sb1))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "sb2.append(\"ABC\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(sb1.equals(sb2))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "sb2.set(\"abc\")@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "testEquals['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testEquals['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(sb2.equals(sb2))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "sb2.clear().append(\"abc\")@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(sb1.equals((Object)sb2))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final TextStringBuilder sb2 = new TextStringBuilder()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertFalse(sb1.equals(sb2))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTrue(sb1.equals((Object)sb2))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(sb1.equals(sb2))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertFalse(sb1.equals(Integer.valueOf(1)))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final StrBuilder sb1 = new StrBuilder()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final StrBuilder sb2 = new StrBuilder()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testEquals['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "sb1.append(\"abc\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertFalse(sb1.equals(sb2))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertFalse(sb1.equals((Object)sb2))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final TextStringBuilder sb1 = new TextStringBuilder()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3->10 [style = bold, label=""];
11->4 [style = bold, label=""];
14->4 [style = solid, label="sb2"];
10->18 [style = dashed, label="0"];
21->5 [style = solid, label="sb2"];
14->12 [style = solid, label="sb2"];
21->12 [style = solid, label="sb2"];
21->6 [style = solid, label="sb2"];
13->2 [style = solid, label="sb1"];
21->15 [style = solid, label="sb2"];
6->0 [style = bold, label=""];
14->3 [style = solid, label="sb2"];
14->0 [style = solid, label="sb2"];
21->8 [style = bold, label=""];
4->17 [style = bold, label=""];
22->20 [style = bold, label=""];
5->9 [style = bold, label=""];
3->18 [style = bold, label=""];
0->11 [style = bold, label=""];
14->5 [style = solid, label="sb2"];
19->13 [style = bold, label=""];
7->13 [style = bold, label=""];
16->12 [style = bold, label=""];
20->21 [style = bold, label=""];
14->6 [style = solid, label="sb2"];
21->0 [style = solid, label="sb2"];
8->2 [style = bold, label=""];
14->8 [style = solid, label="sb2"];
14->17 [style = solid, label="sb2"];
14->15 [style = solid, label="sb2"];
12->3 [style = bold, label=""];
14->21 [style = dashed, label="0"];
21->17 [style = solid, label="sb2"];
21->4 [style = solid, label="sb2"];
14->8 [style = bold, label=""];
15->5 [style = bold, label=""];
21->3 [style = solid, label="sb2"];
21->8 [style = solid, label="sb2"];
20->2 [style = solid, label="sb1"];
2->6 [style = bold, label=""];
13->20 [style = dashed, label="0"];
10->15 [style = bold, label=""];
13->14 [style = bold, label=""];
17->16 [style = bold, label=""];
9->1 [style = bold, label=""];
18->15 [style = bold, label=""];
}
