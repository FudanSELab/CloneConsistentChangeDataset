digraph {
10 [style = filled, label = "right = (ExpressionSegment)visit(ctx.subquery())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "createCompareSegment['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "createCompareSegment['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "right = (ExpressionSegment)visit(ctx.predicate())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ExpressionSegment right@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "createCompareSegment['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "null != ctx.predicate()@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ExpressionSegment left = (ExpressionSegment)visit(ctx.booleanPrimary())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final BooleanPrimaryContext ctx@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "return result@@@14@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "String operator = null != ctx.SAFE_EQ_()? ctx.SAFE_EQ_().getText(): ctx.comparisonOperator().getText()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(),ctx.stop.getStopIndex()))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "return new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7->2 [style = dotted, label="true"];
0->4 [style = solid, label="right"];
9->0 [style = dotted, label="true"];
9->0 [style = bold, label=""];
6->4 [style = solid, label="text"];
8->3 [style = bold, label=""];
12->2 [style = dotted, label="true"];
10->4 [style = solid, label="right"];
9->10 [style = bold, label=""];
7->8 [style = bold, label=""];
3->9 [style = bold, label=""];
13->2 [style = dotted, label="true"];
1->4 [style = solid, label="operator"];
6->4 [style = bold, label=""];
1->6 [style = bold, label=""];
4->5 [style = solid, label="result"];
12->8 [style = bold, label=""];
0->1 [style = bold, label=""];
8->4 [style = solid, label="left"];
6->11 [style = bold, label=""];
0->11 [style = solid, label="right"];
8->11 [style = solid, label="left"];
1->11 [style = solid, label="operator"];
10->11 [style = solid, label="right"];
4->11 [style = dashed, label="0"];
13->8 [style = bold, label=""];
10->1 [style = bold, label=""];
6->11 [style = solid, label="text"];
9->10 [style = dotted, label="false"];
4->5 [style = bold, label=""];
}
