digraph {
9 [style = filled, label = "intervals.add(expectation.getInterval())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "expectedResultsRangeStart = i@@@85@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTopNResults(segmentIds,intervals,results)).once()@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@57@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "final Map<DruidServer,ServerExpectations> finalExpectation = serverExpectationList.get(serverExpectationList.size() - 1)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ServerExpectation expectation@@@82@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
101 [style = filled, label = "boolean expectBySegment@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "expectations@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "results.add(expectation.getResults())@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "expectedResultsRangeEnd = i + 1@@@90@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
131 [style = filled, label = "EasyMock.expect(serverView.getQueryRunner(server)).andReturn(expectations.getQueryRunner()).times(0,1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
130 [style = filled, label = "final List<Iterable<Result<TimeseriesResultValue>>> filteredExpected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "List<Object> mocks = new ArrayList<>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "final Capture<? extends ResponseContext> context = Capture.newInstance()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "runWithMocks(new Runnable(){@Override public void run(){for (int i = 0 i < numTimesToQuery ++i){TestHelper.assertExpectedResults(expected,runner.run(QueryPlus.wrap(query.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(ImmutableList.of(actualQueryInterval))))))if (queryCompletedCallback != null) {queryCompletedCallback.run()}}}},mocks.toArray())@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "query instanceof TimeBoundaryQuery@@@67@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "Object args@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@61@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
68 [style = filled, label = "final Capture<? extends QueryPlus> capture = Capture.newInstance()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "queryCaptures@@@128@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "intervals.add(expectation.getInterval())@@@73@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "i < queryIntervals.size()@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "parseResults(queryIntervals,expectedResults,args)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "query instanceof SelectQuery@@@56@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
95 [style = filled, label = "query instanceof SearchQuery@@@45@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
120 [style = filled, label = "Iterables.addAll((List)expected,filteredExpected.get(intervalNo))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTimeBoundaryResults(segmentIds,intervals,results)).once()@@@76@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
100 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "final int expectedResultsRangeStart@@@82@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "++i@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "query instanceof TimeseriesQuery@@@21@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "QueryPlus capturedQueryPlus = (QueryPlus)queryCapture.getValue()@@@118@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Assert.assertTrue(capturedQuery.getContextValue(\"bySegment\") == null || capturedQuery.getContextValue(\"bySegment\").equals(false))@@@124@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
112 [style = filled, label = "Object args@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "intervals.add(expectation.getInterval())@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "List<Iterable<ResultRow>> results = new ArrayList<>()@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
123 [style = filled, label = "expectations@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "mocks.add(serverView)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableGroupByResults((GroupByQuery)query,segmentIds,intervals,results)).once()@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "intervals.add(expectation.getInterval())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "results.add(expectation.getResults())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
91 [style = filled, label = "boolean expectBySegment@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
124 [style = filled, label = "final QueryRunner runner@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "query instanceof GroupByQuery@@@56@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
106 [style = filled, label = "queryCaptures@@@117@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
74 [style = filled, label = "ServerExpectation expectation@@@27@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
107 [style = filled, label = "finalExpectation.entrySet()@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
45 [style = filled, label = "intervals.add(expectation.getInterval())@@@62@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
114 [style = filled, label = "expectations@@@71@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
111 [style = filled, label = "ServerExpectation expectation@@@49@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
88 [style = filled, label = "results.add(expectation.getResults())@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
110 [style = filled, label = "ServerExpectation expectation@@@27@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "ServerExpectation expectation@@@60@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
71 [style = filled, label = "query instanceof TimeBoundaryQuery@@@84@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "List<Iterable<Result<SearchResultValue>>> results = new ArrayList<>()@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
113 [style = filled, label = "final int numTimesToQuery@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
67 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTimeseriesResults(expectBySegment,segmentIds,intervals,results)).once()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "intervals.add(expectation.getInterval())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "expectations@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
108 [style = filled, label = "final QueryRunner runner@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
83 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "query instanceof TopNQuery@@@34@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "final Iterable<Result<Object>> expected = new ArrayList<>()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
129 [style = filled, label = "final int numTimesToQuery@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "expectations@@@38@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "results.add(expectation.getResults())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
132 [style = filled, label = "ServerExpectation expectation@@@24@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertEquals(true,capturedQuery.getContextValue(\"bySegment\"))@@@121@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
98 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableSearchResults(segmentIds,intervals,results)).once()@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "DruidServer server = entry.getKey()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
125 [style = filled, label = "Object args@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final List<List<Iterable<Result<Object>>>> expectedResults = Lists.newArrayListWithCapacity(queryIntervals.size())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "throw new ISE(\"Unknown query type(%s(\",query.getClass())@@@79@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "Query capturedQuery = capturedQueryPlus.getQuery()@@@119@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
119 [style = filled, label = "intervalNo++@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final Interval actualQueryInterval = new Interval(queryIntervals.get(0).getStart(),queryIntervals.get(i).getEnd())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "List<Iterable<Result<TopNResultValue>>> results = new ArrayList<>()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ServerExpectation expectation@@@71@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
116 [style = filled, label = "intervalNo < i + 1@@@41@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
121 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andAnswer(new IAnswer<Sequence>(){@Override public Sequence answer(){return toFilteredQueryableTimeseriesResults((TimeseriesQuery)capture.getValue().getQuery(),segmentIds,queryIntervals,results)}}).times(0,1)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "List<Iterable<Result<TimeBoundaryResultValue>>> results = new ArrayList<>()@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
105 [style = filled, label = "ServerExpectation expectation@@@60@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "runWithMocks(new Runnable(){@Override public void run(){for (int i = 0 i < numTimesToQuery ++i){TestHelper.assertExpectedResults(new MergeIterable(query instanceof GroupByQuery? ((GroupByQuery)query).getResultOrdering(): Comparators.naturalNullsFirst(),FunctionalIterable.create(new RangeIterable(expectedResultsRangeStart,expectedResultsRangeEnd)).transformCat(new Function<Integer,Iterable<Iterable<Result<Object>>>>(){@Override public Iterable<Iterable<Result<Object>>> apply(@Nullable Integer input){List<Iterable<Result<Object>>> retVal = new ArrayList<>()final Map<DruidServer,ServerExpectations> exps = serverExpectationList.get(input)for (ServerExpectations expectations : exps.values()){for (ServerExpectation expectation : expectations){retVal.add(expectation.getResults())}}return retVal}})),runner.run(QueryPlus.wrap(query.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(ImmutableList.of(actualQueryInterval))))))if (queryCompletedCallback != null) {queryCompletedCallback.run()}}}},mocks.toArray())@@@92@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
103 [style = filled, label = "testQueryCaching['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
97 [style = filled, label = "results.add(expectation.getResults())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
102 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "results.add(expectation.getResults())@@@74@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
117 [style = filled, label = "int intervalNo = 0@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
109 [style = filled, label = "expectations@@@38@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "expectBySegment@@@120@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "testQueryCaching['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
127 [style = filled, label = "final Query query@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
115 [style = filled, label = "final List<SegmentId> segmentIds = new ArrayList<>()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableSelectResults(segmentIds,intervals,results)).once()@@@65@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
65 [style = filled, label = "final QueryRunner runner@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
92 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
104 [style = filled, label = "final Query query@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
128 [style = filled, label = "Map.Entry<DruidServer,ServerExpectations> entry@@@14@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
87 [style = filled, label = "queryCaptures.add(capture)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "expectations@@@60@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "List<Iterable<Result<TimeseriesResultValue>>> results = new ArrayList<>()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
96 [style = filled, label = "int i = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "final int numTimesToQuery@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Capture queryCapture@@@117@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "finalExpectation.entrySet()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "ServerExpectation expectation@@@49@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "ServerExpectation expectation@@@71@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "results.add(expectation.getResults())@@@63@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
76 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@58@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "ServerExpectations expectations = entry.getValue()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "expectedResultsRangeEnd = i + 1@@@86@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "EasyMock.expect(serverView.getQueryRunner(server)).andReturn(expectations.getQueryRunner()).once()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
94 [style = filled, label = "List<Capture> queryCaptures = new ArrayList<>()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "ServerExpectation expectation@@@38@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
118 [style = filled, label = "throw new ISE(\"Unknown query type(%s(\",query.getClass())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
122 [style = filled, label = "final List<Iterable<Result<TimeseriesResultValue>>> results = new ArrayList<>()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
126 [style = filled, label = "testQueryCachingWithFilter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final List<Interval> queryIntervals = Lists.newArrayListWithCapacity(args.length / 2)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
99 [style = filled, label = "List<Iterable<Result<SelectResultValue>>> results = new ArrayList<>()@@@59@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "QueryRunner queryable = expectations.getQueryRunner()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final List<Map<DruidServer,ServerExpectations>> serverExpectationList = populateTimeline(queryIntervals,expectedResults,i,mocks)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "finalExpectation.entrySet()@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86->101 [style = dotted, label="true"];
36->59 [style = bold, label=""];
103->113 [style = dotted, label="true"];
39->62 [style = bold, label=""];
42->87 [style = dotted, label="true"];
53->69 [style = bold, label=""];
71->7 [style = dotted, label="false"];
96->7 [style = solid, label="i"];
71->44 [style = bold, label=""];
71->40 [style = dotted, label="true"];
25->45 [style = bold, label=""];
84->25 [style = bold, label=""];
73->97 [style = dotted, label="true"];
73->110 [style = dotted, label="true"];
101->130 [style = dashed, label="0"];
103->14 [style = bold, label=""];
78->95 [style = dotted, label="false"];
42->57 [style = dotted, label="true"];
10->53 [style = bold, label=""];
44->7 [style = bold, label=""];
120->119 [style = bold, label=""];
113->3 [style = solid, label="numTimesToQuery"];
117->116 [style = solid, label="intervalNo"];
73->78 [style = dotted, label="false"];
95->85 [style = dotted, label="true"];
47->34 [style = dotted, label="true"];
48->61 [style = bold, label=""];
53->69 [style = dashed, label="0"];
98->9 [style = bold, label=""];
21->3 [style = solid, label="actualQueryInterval"];
101->73 [style = solid, label="query"];
17->36 [style = bold, label=""];
42->19 [style = dotted, label="true"];
2->53 [style = bold, label=""];
80->38 [style = bold, label=""];
41->3 [style = solid, label="numTimesToQuery"];
118->77 [style = bold, label=""];
104->3 [style = solid, label="query"];
95->111 [style = dotted, label="true"];
73->39 [style = bold, label=""];
58->87 [style = bold, label=""];
103->104 [style = dotted, label="true"];
82->53 [style = bold, label=""];
55->34 [style = bold, label=""];
31->92 [style = dotted, label="true"];
75->77 [style = bold, label=""];
104->31 [style = solid, label="query"];
87->29 [style = bold, label=""];
59->54 [style = bold, label=""];
42->15 [style = bold, label=""];
14->5 [style = solid, label="queryIntervals"];
101->95 [style = solid, label="query"];
117->119 [style = solid, label="intervalNo"];
96->90 [style = solid, label="i"];
126->124 [style = dotted, label="true"];
95->31 [style = bold, label=""];
72->131 [style = dashed, label="0"];
42->3 [style = dotted, label="true"];
126->125 [style = dotted, label="true"];
48->49 [style = bold, label=""];
119->116 [style = bold, label=""];
42->26 [style = dotted, label="true"];
89->28 [style = dotted, label="true"];
78->109 [style = dotted, label="true"];
119->120 [style = solid, label="intervalNo"];
85->77 [style = bold, label=""];
96->116 [style = solid, label="i"];
73->67 [style = dotted, label="true"];
80->12 [style = bold, label=""];
78->59 [style = dotted, label="true"];
89->76 [style = dotted, label="true"];
56->96 [style = bold, label=""];
66->8 [style = bold, label=""];
89->13 [style = dotted, label="true"];
22->43 [style = bold, label=""];
61->52 [style = bold, label=""];
125->56 [style = solid, label="args"];
69->44 [style = solid, label="expected"];
96->40 [style = solid, label="i"];
0->102 [style = bold, label=""];
6->98 [style = bold, label=""];
99->25 [style = bold, label=""];
12->63 [style = bold, label=""];
38->53 [style = bold, label=""];
11->131 [style = bold, label=""];
19->33 [style = dotted, label="true"];
29->73 [style = bold, label=""];
81->55 [style = bold, label=""];
23->5 [style = solid, label="expectedResults"];
96->3 [style = solid, label="i"];
101->19 [style = solid, label="expectBySegment"];
44->49 [style = bold, label=""];
95->64 [style = dotted, label="true"];
88->98 [style = bold, label=""];
31->66 [style = bold, label=""];
67->53 [style = bold, label=""];
52->19 [style = bold, label=""];
3->61 [style = bold, label=""];
43->67 [style = bold, label=""];
95->83 [style = dotted, label="true"];
95->27 [style = dotted, label="true"];
89->99 [style = dotted, label="true"];
94->46 [style = bold, label=""];
91->19 [style = solid, label="expectBySegment"];
69->120 [style = solid, label="expected"];
31->10 [style = dotted, label="true"];
104->47 [style = solid, label="query"];
42->58 [style = dotted, label="true"];
79->56 [style = solid, label="args"];
78->2 [style = dotted, label="true"];
31->105 [style = dotted, label="true"];
89->25 [style = dotted, label="true"];
89->24 [style = dotted, label="true"];
47->80 [style = dotted, label="true"];
103->101 [style = dotted, label="true"];
21->44 [style = solid, label="actualQueryInterval"];
5->94 [style = bold, label=""];
70->92 [style = bold, label=""];
3->90 [style = solid, label="i"];
44->116 [style = solid, label="i"];
3->40 [style = solid, label="i"];
54->2 [style = bold, label=""];
2->77 [style = bold, label=""];
11->3 [style = solid, label="expectations"];
73->37 [style = dotted, label="true"];
73->118 [style = dotted, label="false"];
73->78 [style = bold, label=""];
42->52 [style = dotted, label="true"];
62->122 [style = dashed, label="0"];
68->87 [style = solid, label="capture"];
47->51 [style = dotted, label="true"];
71->90 [style = dotted, label="true"];
73->74 [style = dotted, label="true"];
95->35 [style = dotted, label="true"];
42->30 [style = dotted, label="true"];
104->73 [style = solid, label="query"];
85->53 [style = bold, label=""];
31->47 [style = bold, label=""];
95->98 [style = dotted, label="true"];
86->41 [style = dotted, label="true"];
42->128 [style = dotted, label="true"];
78->54 [style = dotted, label="true"];
78->17 [style = dotted, label="true"];
95->31 [style = dotted, label="false"];
47->38 [style = dotted, label="true"];
73->121 [style = dotted, label="true"];
95->9 [style = dotted, label="true"];
14->56 [style = solid, label="queryIntervals"];
47->81 [style = bold, label=""];
103->108 [style = dotted, label="true"];
73->43 [style = dotted, label="true"];
47->12 [style = dotted, label="true"];
103->112 [style = dotted, label="true"];
126->129 [style = dotted, label="true"];
19->33 [style = bold, label=""];
122->100 [style = bold, label=""];
73->62 [style = dotted, label="true"];
44->5 [style = solid, label="i"];
67->77 [style = bold, label=""];
95->89 [style = bold, label=""];
45->84 [style = bold, label=""];
42->61 [style = dotted, label="true"];
121->69 [style = bold, label=""];
47->20 [style = dotted, label="true"];
42->106 [style = dotted, label="true"];
42->131 [style = dotted, label="true"];
42->117 [style = dotted, label="true"];
101->89 [style = solid, label="query"];
101->78 [style = solid, label="query"];
3->5 [style = solid, label="i"];
46->77 [style = bold, label=""];
78->0 [style = dotted, label="true"];
42->44 [style = dotted, label="true"];
9->88 [style = bold, label=""];
82->77 [style = bold, label=""];
47->75 [style = dotted, label="false"];
73->122 [style = dotted, label="true"];
90->3 [style = bold, label=""];
116->120 [style = dotted, label="true"];
47->81 [style = dotted, label="true"];
42->107 [style = dotted, label="true"];
60->92 [style = bold, label=""];
37->97 [style = bold, label=""];
116->44 [style = bold, label=""];
92->1 [style = bold, label=""];
89->31 [style = bold, label=""];
42->71 [style = dotted, label="true"];
126->127 [style = dotted, label="true"];
78->102 [style = dotted, label="true"];
78->93 [style = dotted, label="true"];
89->28 [style = bold, label=""];
42->11 [style = dotted, label="true"];
73->123 [style = dotted, label="true"];
67->121 [style = dashed, label="0"];
101->71 [style = solid, label="query"];
42->53 [style = dotted, label="true"];
42->77 [style = dotted, label="true"];
73->22 [style = dotted, label="true"];
31->8 [style = dotted, label="true"];
21->5 [style = bold, label=""];
89->84 [style = dotted, label="true"];
30->21 [style = bold, label=""];
42->5 [style = dotted, label="true"];
73->100 [style = dotted, label="true"];
86->65 [style = dotted, label="true"];
42->116 [style = dotted, label="true"];
14->23 [style = bold, label=""];
54->36 [style = bold, label=""];
73->118 [style = bold, label=""];
86->14 [style = bold, label=""];
42->49 [style = dotted, label="true"];
101->31 [style = solid, label="query"];
73->115 [style = bold, label=""];
42->18 [style = dotted, label="true"];
31->1 [style = dotted, label="true"];
42->15 [style = dotted, label="true"];
101->3 [style = solid, label="query"];
15->5 [style = solid, label="mocks"];
89->31 [style = dotted, label="false"];
71->40 [style = bold, label=""];
77->11 [style = bold, label=""];
33->49 [style = bold, label=""];
43->97 [style = bold, label=""];
63->80 [style = bold, label=""];
95->88 [style = dotted, label="true"];
42->29 [style = dotted, label="true"];
115->122 [style = bold, label=""];
47->75 [style = bold, label=""];
101->47 [style = solid, label="query"];
40->90 [style = bold, label=""];
96->5 [style = solid, label="i"];
23->56 [style = solid, label="expectedResults"];
1->60 [style = bold, label=""];
89->82 [style = dotted, label="true"];
49->42 [style = bold, label=""];
33->61 [style = bold, label=""];
42->72 [style = dotted, label="true"];
23->56 [style = bold, label=""];
73->115 [style = dotted, label="true"];
78->95 [style = bold, label=""];
19->48 [style = bold, label=""];
11->72 [style = bold, label=""];
95->89 [style = dotted, label="false"];
28->76 [style = bold, label=""];
89->45 [style = dotted, label="true"];
126->130 [style = dotted, label="true"];
42->50 [style = dotted, label="true"];
116->120 [style = bold, label=""];
96->42 [style = solid, label="i"];
83->27 [style = bold, label=""];
3->7 [style = solid, label="i"];
76->99 [style = bold, label=""];
10->77 [style = bold, label=""];
69->117 [style = bold, label=""];
38->77 [style = bold, label=""];
97->121 [style = bold, label=""];
119->116 [style = solid, label="intervalNo"];
84->82 [style = bold, label=""];
95->83 [style = bold, label=""];
129->44 [style = solid, label="numTimesToQuery"];
15->30 [style = bold, label=""];
127->73 [style = solid, label="query"];
118->69 [style = bold, label=""];
44->42 [style = solid, label="i"];
117->116 [style = bold, label=""];
34->12 [style = bold, label=""];
126->14 [style = bold, label=""];
31->16 [style = dotted, label="true"];
47->114 [style = dotted, label="true"];
117->120 [style = solid, label="intervalNo"];
27->6 [style = bold, label=""];
7->3 [style = bold, label=""];
3->42 [style = solid, label="i"];
104->71 [style = solid, label="query"];
78->0 [style = bold, label=""];
31->32 [style = dotted, label="true"];
47->55 [style = dotted, label="true"];
71->44 [style = dotted, label="false"];
78->36 [style = dotted, label="true"];
90->120 [style = dashed, label="0"];
31->66 [style = dotted, label="true"];
31->70 [style = dotted, label="true"];
95->6 [style = dotted, label="true"];
116->119 [style = dotted, label="true"];
39->115 [style = dashed, label="0"];
112->56 [style = solid, label="args"];
69->71 [style = bold, label=""];
58->29 [style = bold, label=""];
62->37 [style = bold, label=""];
42->73 [style = dotted, label="true"];
31->60 [style = dotted, label="true"];
42->68 [style = dotted, label="true"];
19->48 [style = dotted, label="false"];
8->70 [style = bold, label=""];
96->44 [style = solid, label="i"];
96->42 [style = bold, label=""];
42->69 [style = dotted, label="true"];
47->63 [style = dotted, label="true"];
104->78 [style = solid, label="query"];
104->95 [style = solid, label="query"];
60->10 [style = bold, label=""];
100->97 [style = bold, label=""];
86->91 [style = dotted, label="true"];
73->132 [style = dotted, label="true"];
88->85 [style = bold, label=""];
97->100 [style = bold, label=""];
42->94 [style = dotted, label="true"];
78->4 [style = dotted, label="true"];
75->53 [style = bold, label=""];
42->21 [style = dotted, label="true"];
72->68 [style = bold, label=""];
5->46 [style = bold, label=""];
42->46 [style = dotted, label="true"];
73->39 [style = dotted, label="true"];
131->68 [style = bold, label=""];
86->79 [style = dotted, label="true"];
102->17 [style = bold, label=""];
31->47 [style = dotted, label="false"];
68->58 [style = bold, label=""];
97->22 [style = bold, label=""];
121->77 [style = bold, label=""];
}
