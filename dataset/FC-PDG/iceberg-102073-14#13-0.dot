digraph {
19 [style = filled, label = "Assert.assertEquals(\"Sequence number should default to 0\",expected.sequenceNumber(),snapshot.sequenceNumber())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(\"Files should match\",expected.manifests(),snapshot.manifests())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(\"Parent ID should match\",expected.parentId(),snapshot.parentId())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "String json = SnapshotParser.toJson(expected)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "List<ManifestFile> manifests = ImmutableList.of(new GenericManifestFile(localInput(\"file:/tmp/manifest1.avro\"),0),new GenericManifestFile(localInput(\"file:/tmp/manifest2.avro\"),0))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Snapshot snapshot = SnapshotParser.fromJson(ops.io(),json)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertNull(\"Summary should be null\",snapshot.summary())@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "long parentId = 1@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testJsonConversion['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Snapshot snapshot = SnapshotParser.fromJson(ops.io(),json)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Snapshot expected = new BaseSnapshot(ops.io(),System.currentTimeMillis(),\"file:/tmp/manifest1.avro\",\"file:/tmp/manifest2.avro\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testJsonConversionWithManifestList['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "testJsonConversionWithManifestList['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "writer.addAll(manifests)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertNull(\"Operation should be null\",snapshot.operation())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Snapshot expected = new BaseSnapshot(ops.io(),id,34,parentId,System.currentTimeMillis(),null,null,localInput(manifestList))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "manifestList.deleteOnExit()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(\"Snapshot ID should match\",expected.snapshotId(),snapshot.snapshotId())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertNull(\"Summary should be null\",snapshot.summary())@@@24@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(\"Files should match in memory list\",inMemory.manifests(),expected.manifests())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(\"Snapshot ID should match\",expected.snapshotId(),snapshot.snapshotId())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(manifestList.delete())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(\"Files should match in memory list\",inMemory.allManifests(),expected.allManifests())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Assert.assertEquals(\"Manifest list should match\",expected.manifestListLocation(),snapshot.manifestListLocation())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "long id = 2@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertNull(\"Operation should be null\",snapshot.operation())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(\"Files should match\",expected.manifests(),snapshot.manifests())@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Snapshot inMemory = new BaseSnapshot(ops.io(),id,parentId,expected.timestampMillis(),null,null,manifests)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(\"Files should match\",expected.allManifests(),snapshot.allManifests())@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "File manifestList = temp.newFile(\"manifests\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "String json = SnapshotParser.toJson(expected)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(\"Timestamp should match\",expected.timestampMillis(),snapshot.timestampMillis())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->9 [style = bold, label=""];
24->28 [style = bold, label=""];
2->20 [style = bold, label=""];
1->8 [style = bold, label=""];
22->2 [style = bold, label=""];
23->5 [style = bold, label=""];
17->1 [style = bold, label=""];
9->14 [style = solid, label="manifests"];
4->11 [style = solid, label="id"];
21->6 [style = bold, label=""];
10->14 [style = bold, label=""];
7->10 [style = bold, label=""];
9->15 [style = solid, label="manifests"];
6->18 [style = bold, label=""];
12->17 [style = bold, label=""];
18->19 [style = bold, label=""];
29->25 [style = bold, label=""];
15->21 [style = dashed, label="0"];
15->6 [style = bold, label=""];
0->21 [style = bold, label=""];
5->0 [style = solid, label="parentId"];
9->0 [style = solid, label="manifests"];
30->29 [style = bold, label=""];
0->15 [style = bold, label=""];
19->16 [style = bold, label=""];
25->31 [style = bold, label=""];
1->22 [style = bold, label=""];
26->30 [style = bold, label=""];
30->29 [style = solid, label="expected"];
8->22 [style = dashed, label="0"];
3->5 [style = bold, label=""];
11->0 [style = bold, label=""];
8->2 [style = bold, label=""];
31->27 [style = bold, label=""];
13->7 [style = bold, label=""];
5->30 [style = dashed, label="0"];
5->4 [style = bold, label=""];
13->11 [style = solid, label="manifestList"];
29->25 [style = solid, label="json"];
6->18 [style = solid, label="json"];
9->8 [style = solid, label="manifests"];
27->24 [style = bold, label=""];
5->11 [style = solid, label="parentId"];
5->17 [style = solid, label="parentId"];
11->6 [style = solid, label="expected"];
14->11 [style = bold, label=""];
16->12 [style = bold, label=""];
4->0 [style = solid, label="id"];
9->13 [style = bold, label=""];
}
