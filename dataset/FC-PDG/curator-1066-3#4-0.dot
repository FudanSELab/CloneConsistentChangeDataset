digraph {
7 [style = filled, label = "List<ACL> actual_bar_foo = client.getACL().forPath(path)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testCreateWithParentsWithAclApplyToParentsInBackground['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(actual_bar_foo,acl)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "client.create().creatingParentsIfNeeded().withACL(acl).forPath(path)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "String path = \"/bar/foo\"@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(actual_bar,acl)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "List<ACL> acl = Collections.singletonList(new ACL(ZooDefs.Perms.CREATE | ZooDefs.Perms.READ,ANYONE_ID_UNSAFE))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(actual_bar,ZooDefs.Ids.OPEN_ACL_UNSAFE)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "List<ACL> actual_bar = client.getACL().forPath(\"/bar\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testCreateWithParentsWithAcl['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "BackgroundCallback callback = new BackgroundCallback(){@Override public void processResult(CuratorFramework client,CuratorEvent event){latch.countDown()}}@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "client.start()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(actual_bar_foo,acl)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "List<ACL> actual_bar = client.getACL().forPath(\"/bar\")@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "List<ACL> actual_bar_foo = client.getACL().forPath(path)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testCreateWithParentsWithAcl['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "Assert.assertTrue(latch.await(2000,TimeUnit.MILLISECONDS),\"Callback not invoked\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(actual_bar,ZooDefs.Ids.OPEN_ACL_UNSAFE)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "CuratorFramework client = createClient(new DefaultACLProvider())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "client.create().creatingParentsIfNeeded().withACL(acl,true).inBackground(callback).forPath(path)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(actual_bar_foo,acl)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "final CountDownLatch latch = new CountDownLatch(1)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8->0 [style = solid, label="acl"];
5->10 [style = bold, label=""];
7->11 [style = solid, label="actual_bar_foo"];
23->16 [style = bold, label=""];
5->12 [style = dashed, label="0"];
7->11 [style = bold, label=""];
1->8 [style = bold, label=""];
8->15 [style = bold, label=""];
3->1 [style = bold, label=""];
7->0 [style = solid, label="actual_bar_foo"];
1->2 [style = solid, label="path"];
11->4 [style = bold, label=""];
16->22 [style = solid, label="actual_bar_foo"];
7->0 [style = bold, label=""];
0->11 [style = dashed, label="0"];
20->1 [style = bold, label=""];
8->11 [style = solid, label="acl"];
15->19 [style = bold, label=""];
16->22 [style = bold, label=""];
5->18 [style = dashed, label="0"];
1->19 [style = solid, label="path"];
12->10 [style = bold, label=""];
3->20 [style = bold, label=""];
21->9 [style = bold, label=""];
8->2 [style = bold, label=""];
1->7 [style = solid, label="path"];
0->4 [style = bold, label=""];
8->22 [style = solid, label="acl"];
19->23 [style = bold, label=""];
1->16 [style = solid, label="path"];
17->18 [style = solid, label="actual_bar"];
4->5 [style = solid, label="actual_bar"];
9->14 [style = solid, label="client"];
4->12 [style = bold, label=""];
9->3 [style = bold, label=""];
22->17 [style = bold, label=""];
9->10 [style = solid, label="client"];
8->18 [style = solid, label="acl"];
13->9 [style = bold, label=""];
2->7 [style = bold, label=""];
6->9 [style = bold, label=""];
4->12 [style = solid, label="actual_bar"];
4->5 [style = bold, label=""];
18->14 [style = bold, label=""];
17->18 [style = bold, label=""];
}
