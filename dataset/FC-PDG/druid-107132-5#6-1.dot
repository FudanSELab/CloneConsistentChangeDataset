digraph {
23 [style = filled, label = "ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(expected.contains(iter.next()))@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "BitmapFactory bf = new ConciseBitmapFactory()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int i = 0@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "inPolygon < 500@@@8@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "outPolygon++@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "RTree tree = new RTree(2,new LinearGutmanSplitStrategy(0,50,bf),bf)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Iterable<ImmutableBitmap> points = searchTree.search(PolygonBound.from(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8d5ceb,new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8d5cf4))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "ImmutableBitmap finalSet = bf.union(points)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "int outPolygon = 0,inPolygon = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testSearchWithSplit4Roaring['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "expected.add(i)@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "abscissa < 1 || abscissa > 4 || ordinate < 1 || ordinate > 3 || abscissa < 2 && ordinate > 2@@@12@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "inPolygon++@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testSearchWithSplit4['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "double ordinate = rand.nextDouble() * 4@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "i < 500@@@35@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "tree.insert(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8d5ccb,inPolygon)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Set<Integer> expected = Sets.newHashSet()@@@33@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "iter.hasNext()@@@40@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Set<Integer> expected = new HashSet<>()@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "abscissa > 1 && abscissa < 4 && ordinate > 1 && ordinate < 2 || abscissa > 2 && abscissa < 4 && ordinate >= 2 && ordinate < 3@@@18@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertTrue(finalSet.size() == 500)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "tree.insert(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8d5c86,outPolygon + 500)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "BitmapFactory bf = new RoaringBitmapFactory()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "IntIterator iter = finalSet.iterator()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "i++@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Random rand = ThreadLocalRandom.current()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testSearchWithSplit4['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "double abscissa = rand.nextDouble() * 5@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->20 [style = solid, label="i"];
21->10 [style = bold, label=""];
15->10 [style = bold, label=""];
21->2 [style = solid, label="outPolygon"];
22->19 [style = dotted, label="true"];
5->22 [style = dotted, label="false"];
0->13 [style = bold, label=""];
27->0 [style = bold, label=""];
22->19 [style = bold, label=""];
10->14 [style = bold, label=""];
8->18 [style = solid, label="i"];
4->18 [style = solid, label="i"];
8->18 [style = bold, label=""];
21->19 [style = solid, label="inPolygon"];
17->9 [style = bold, label=""];
14->5 [style = solid, label="abscissa"];
3->26 [style = bold, label=""];
5->6 [style = dotted, label="true"];
9->17 [style = bold, label=""];
8->20 [style = solid, label="i"];
4->18 [style = bold, label=""];
26->8 [style = bold, label=""];
28->13 [style = bold, label=""];
18->20 [style = dotted, label="true"];
2->10 [style = bold, label=""];
11->19 [style = solid, label="ordinate"];
28->13 [style = solid, label="bf"];
7->8 [style = bold, label=""];
25->17 [style = bold, label=""];
13->16 [style = bold, label=""];
12->0 [style = bold, label=""];
10->5 [style = dotted, label="true"];
0->28 [style = dashed, label="0"];
20->4 [style = bold, label=""];
6->2 [style = bold, label=""];
29->28 [style = bold, label=""];
10->14 [style = dotted, label="true"];
11->5 [style = bold, label=""];
18->20 [style = bold, label=""];
15->10 [style = solid, label="inPolygon"];
0->13 [style = solid, label="bf"];
5->6 [style = bold, label=""];
3->7 [style = bold, label=""];
11->22 [style = solid, label="ordinate"];
14->22 [style = solid, label="abscissa"];
1->24 [style = solid, label="points"];
10->23 [style = bold, label=""];
16->21 [style = bold, label=""];
1->24 [style = bold, label=""];
10->11 [style = dotted, label="true"];
17->9 [style = dotted, label="true"];
11->6 [style = solid, label="ordinate"];
14->19 [style = solid, label="abscissa"];
2->6 [style = solid, label="outPolygon"];
13->23 [style = solid, label="tree"];
22->10 [style = bold, label=""];
23->1 [style = bold, label=""];
21->6 [style = solid, label="outPolygon"];
21->15 [style = solid, label="inPolygon"];
14->6 [style = solid, label="abscissa"];
18->25 [style = bold, label=""];
18->4 [style = dotted, label="true"];
15->19 [style = solid, label="inPolygon"];
19->15 [style = bold, label=""];
7->26 [style = dashed, label="0"];
11->5 [style = solid, label="ordinate"];
5->22 [style = bold, label=""];
14->11 [style = bold, label=""];
22->15 [style = dotted, label="true"];
24->3 [style = bold, label=""];
8->4 [style = solid, label="i"];
21->10 [style = solid, label="inPolygon"];
5->2 [style = dotted, label="true"];
}
