digraph {
13 [style = filled, label = "InboundChannelBuffer channelBuffer = new InboundChannelBuffer(allocator)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "channelBuffer.close()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(PAGE_SIZE * 2,channelBuffer.getCapacity())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "expectThrows(,null)@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "InboundChannelBuffer channelBuffer = new InboundChannelBuffer(supplier)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(queue.poll().get())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertFalse(closedRef.get())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "channelBuffer.ensureCapacity(PAGE_SIZE * 4)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "channelBuffer.ensureCapacity(InboundChannelBuffer.PAGE_SIZE * 4)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "ConcurrentLinkedQueue<AtomicBoolean> queue = new ConcurrentLinkedQueue<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "channelBuffer.release(2 * PAGE_SIZE)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Supplier<Page> supplier = null@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(PAGE_SIZE * 4,channelBuffer.getCapacity())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertFalse(queue.poll().get())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testClose['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertFalse(queue.poll().get())@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "IntFunction<Page> allocator = null@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testClose['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertTrue(closedRef.get())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(queue.poll().get())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testReleaseClosesPages['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(4,queue.size())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->2 [style = bold, label=""];
3->19 [style = dashed, label="0"];
12->7 [style = bold, label=""];
14->17 [style = bold, label=""];
20->16 [style = bold, label=""];
17->21 [style = bold, label=""];
16->19 [style = bold, label=""];
9->3 [style = bold, label=""];
0->9 [style = bold, label=""];
11->13 [style = solid, label="allocator"];
15->7 [style = bold, label=""];
5->11 [style = dashed, label="0"];
2->8 [style = bold, label=""];
1->11 [style = bold, label=""];
10->1 [style = bold, label=""];
0->20 [style = bold, label=""];
13->12 [style = bold, label=""];
8->12 [style = dashed, label="0"];
7->0 [style = bold, label=""];
11->13 [style = bold, label=""];
9->20 [style = dashed, label="0"];
8->7 [style = bold, label=""];
18->1 [style = bold, label=""];
19->14 [style = bold, label=""];
6->1 [style = bold, label=""];
5->2 [style = solid, label="supplier"];
3->4 [style = bold, label=""];
8->15 [style = bold, label=""];
2->13 [style = dashed, label="0"];
1->5 [style = bold, label=""];
}
