digraph {
7 [style = filled, label = "final Object next2 = resultsIter.next()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setGranularity(QueryRunnerTestHelper.dayGran).setDimensions(new DefaultDimensionSpec(QueryRunnerTestHelper.marketDimension,QueryRunnerTestHelper.marketDimension)).setInterval(QueryRunnerTestHelper.firstToThird).setLimitSpec(new DefaultLimitSpec(Collections.singletonList(new OrderByColumnSpec(\"rows\",OrderByColumnSpec.Direction.DESCENDING)),2)).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Object expectedNext1 = expectedResultsIter.next()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Iterator resultsIter = results.iterator()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "List<ResultRow> expectedResults = Arrays.asList(makeRow(query,\"2011-04-01T00:00:00.000Z\",\"market\",\"spot\",\"rows\",9L),makeRow(query,\"2011-04-02T00:00:00.000Z\",\"market\",\"spot\",\"rows\",9L))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Object expectedNext2 = expectedResultsIter.next()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setGranularity(QueryRunnerTestHelper.ALL_GRAN).setDimensions(new DefaultDimensionSpec(QueryRunnerTestHelper.MARKET_DIMENSION,QueryRunnerTestHelper.MARKET_DIMENSION)).setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC).setLimitSpec(new DefaultLimitSpec(Collections.singletonList(new OrderByColumnSpec(QueryRunnerTestHelper.MARKET_DIMENSION,OrderByColumnSpec.Direction.DESCENDING)),3)).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT).build()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "testGroupByWithOrderLimit4['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"order-limit\")@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<ResultRow> expectedResults = Arrays.asList(makeRow(query,\"1970-01-01T00:00:00.000Z\",\"market\",\"upfront\",\"rows\",186L),makeRow(query,\"1970-01-01T00:00:00.000Z\",\"market\",\"total_market\",\"rows\",186L),makeRow(query,\"1970-01-01T00:00:00.000Z\",\"market\",\"spot\",\"rows\",837L))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testGroupByWithOrderLimit4['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "final Object next1 = resultsIter.next()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testLimitPerGrouping['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Iterator expectedResultsIter = expectedResults.iterator()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(\"order-limit\",expectedNext1,next1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertNotEquals(\"order-limit\",expectedNext2,next2)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setGranularity(QueryRunnerTestHelper.allGran).setDimensions(new DefaultDimensionSpec(QueryRunnerTestHelper.marketDimension,QueryRunnerTestHelper.marketDimension)).setInterval(QueryRunnerTestHelper.fullOnIntervalSpec).setLimitSpec(new DefaultLimitSpec(Collections.singletonList(new OrderByColumnSpec(QueryRunnerTestHelper.marketDimension,OrderByColumnSpec.Direction.DESCENDING)),3)).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount).build()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5->3 [style = bold, label=""];
8->16 [style = bold, label=""];
13->15 [style = solid, label="next1"];
15->7 [style = bold, label=""];
3->1 [style = solid, label="expectedResults"];
2->0 [style = solid, label="query"];
8->16 [style = solid, label="expectedNext2"];
11->15 [style = solid, label="expectedNext1"];
0->12 [style = bold, label=""];
2->3 [style = bold, label=""];
17->9 [style = bold, label=""];
5->0 [style = solid, label="query"];
4->2 [style = bold, label=""];
9->10 [style = bold, label=""];
9->0 [style = solid, label="query"];
7->8 [style = bold, label=""];
13->11 [style = bold, label=""];
3->0 [style = bold, label=""];
11->15 [style = bold, label=""];
6->5 [style = bold, label=""];
2->5 [style = dashed, label="0"];
2->3 [style = solid, label="query"];
2->9 [style = dashed, label="0"];
0->1 [style = bold, label=""];
9->10 [style = solid, label="query"];
10->0 [style = bold, label=""];
0->1 [style = solid, label="results"];
12->14 [style = bold, label=""];
7->16 [style = solid, label="next2"];
5->3 [style = solid, label="query"];
3->10 [style = dashed, label="0"];
14->13 [style = bold, label=""];
}
