digraph {
8 [style = filled, label = "Single<Map<Integer,Collection<String>>> mapped = source.toMultimap(lengthFunc,duplicateErr)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "mapped.subscribe(singleObserver)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "toMultimapWithErrorInValueSelector['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Observable<String> source = Observable.just(\"a\",\"b\",\"cc\",\"dd\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "toMultimapWithErrorInValueSelector['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "verify(singleObserver,times(1)).onError(any())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Flowable<String> source = Flowable.just(\"a\",\"b\",\"cc\",\"dd\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "verify(singleObserver,never()).onSuccess(expected)@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Map<Integer,Collection<String>> expected = new HashMap<>()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Function<String,String> duplicateErr = new Function<String,String>(){@Override public String apply(String t1){if (\"b\".equals(t1)) {throw new RuntimeException(\"Forced failure\")}return t1 + t1}}@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "expected.put(1,Arrays.asList(\"aa\",\"bb\"))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Map<Integer,Collection<String>> expected = new HashMap<Integer,Collection<String>>()@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "toMultimapWithErrorInValueSelector['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "expected.put(2,Arrays.asList(\"cccc\",\"dddd\"))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->3 [style = bold, label=""];
12->13 [style = bold, label=""];
9->11 [style = dashed, label="0"];
3->5 [style = bold, label=""];
1->2 [style = bold, label=""];
9->6 [style = solid, label="expected"];
7->1 [style = bold, label=""];
4->0 [style = bold, label=""];
11->6 [style = solid, label="expected"];
10->1 [style = bold, label=""];
11->3 [style = bold, label=""];
8->11 [style = bold, label=""];
0->6 [style = bold, label=""];
13->2 [style = bold, label=""];
2->8 [style = solid, label="duplicateErr"];
5->4 [style = bold, label=""];
2->8 [style = bold, label=""];
8->9 [style = bold, label=""];
1->13 [style = dashed, label="0"];
}
