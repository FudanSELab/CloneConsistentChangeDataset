digraph {
3 [style = filled, label = "String(( results = decoder.decode(ByteBuffer.wrap(\"a stringa\".getBytes()),context)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "assertEquals(\"a string\",results)@@@11@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertEquals(1,results.length)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertEquals(\"a string\",results(0()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Context context = decoder.createDecoderState()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"a string\",results)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertEquals(\"a string\",results(0()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "testThatUnixLineTerminatedStringReturnsEmptyResult['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "results = decoder.decode(ByteBuffer.wrap(\" string\".getBytes()),context)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testThatContextIsMaintainedBetweenMessages['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "TextLineDecoder decoder = new TextLineDecoder(LineDelimiter.WINDOWS)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testThatContextIsMaintainedBetweenMessages['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(1,context.getBuffer().position())@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "assertEquals(9,context.getBuffer().position())@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertNotNull(results)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertNotNull(results)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(0,context.getBuffer().position())@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "String(( results = decoder.decode(ByteBuffer.wrap(\"a string\".getBytes()),context)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "String results = decoder.decode(ByteBuffer.wrap(\"a stringa\".getBytes()),context)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertEquals(0,results.length)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(0,context.getBuffer().position())@@@14@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TextLineDecoder decoder = new TextLineDecoder(LineDelimiter.UNIX)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(1,results.length)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16->13 [style = solid, label="results"];
7->16 [style = solid, label="context"];
3->11 [style = solid, label="results"];
16->11 [style = bold, label=""];
17->6 [style = bold, label=""];
3->18 [style = dashed, label="0"];
11->4 [style = bold, label=""];
18->11 [style = bold, label=""];
3->11 [style = bold, label=""];
22->21 [style = bold, label=""];
10->1 [style = solid, label="results"];
6->10 [style = solid, label="results"];
4->22 [style = dashed, label="0"];
9->7 [style = bold, label=""];
7->10 [style = solid, label="context"];
7->18 [style = solid, label="context"];
7->3 [style = bold, label=""];
9->19 [style = dashed, label="0"];
7->3 [style = solid, label="context"];
13->17 [style = bold, label=""];
2->0 [style = bold, label=""];
10->2 [style = solid, label="results"];
5->6 [style = bold, label=""];
0->1 [style = bold, label=""];
3->5 [style = solid, label="results"];
6->10 [style = bold, label=""];
11->13 [style = bold, label=""];
2->15 [style = bold, label=""];
7->16 [style = bold, label=""];
8->9 [style = bold, label=""];
1->12 [style = bold, label=""];
11->22 [style = bold, label=""];
7->18 [style = bold, label=""];
5->21 [style = dashed, label="0"];
14->9 [style = bold, label=""];
10->2 [style = bold, label=""];
7->6 [style = solid, label="context"];
0->2 [style = dashed, label="0"];
4->13 [style = dashed, label="0"];
20->19 [style = bold, label=""];
18->11 [style = solid, label="results"];
4->5 [style = bold, label=""];
19->7 [style = bold, label=""];
3->16 [style = dashed, label="0"];
6->2 [style = solid, label="results"];
16->11 [style = solid, label="results"];
}
