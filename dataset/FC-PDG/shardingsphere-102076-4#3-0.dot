digraph {
11 [style = filled, label = "final CreateReadwriteSplittingRuleStatement actual@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertIs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "SQLSegmentAssert.assertIs(assertContext,actual,expected)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertIs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertSubquery['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertNull(assertContext.getText(\"Actual statement should not exist.\"),actual)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual subquery should exist.\"),actual)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertNull(assertContext.getText(\"Actual should not exist.\"),actual)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "final CreateReadWriteSplittingRuleStatementTestCase expected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "null == expected@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertNull(assertContext.getText(\"Actual subquery should not exist.\"),actual)@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final SubquerySegment actual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final CreateReadwriteSplittingRuleStatement actual@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual statement should exist.\"),actual)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "final ExpectedSubquery expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual should exist.\"),actual)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertReadwriteSplittingRule(assertContext,actual.getRules(),expected.getRules())@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "SelectStatementAssert.assertIs(assertContext,actual.getSelect(),expected.getSelectTestCases())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->6 [style = dotted, label="true"];
4->5 [style = dotted, label="true"];
4->3 [style = bold, label=""];
18->3 [style = bold, label=""];
20->15 [style = solid, label="assertContext"];
3->1 [style = bold, label=""];
14->13 [style = solid, label="actual"];
3->10 [style = dotted, label="true"];
11->8 [style = solid, label="actual"];
18->19 [style = dotted, label="true"];
4->7 [style = dotted, label="true"];
7->20 [style = dashed, label="0"];
3->15 [style = dotted, label="false"];
1->0 [style = bold, label=""];
16->17 [style = bold, label=""];
19->3 [style = solid, label="expected"];
18->20 [style = dotted, label="true"];
3->16 [style = bold, label=""];
3->8 [style = dotted, label="false"];
7->3 [style = solid, label="expected"];
0->17 [style = dashed, label="0"];
18->14 [style = dotted, label="true"];
3->0 [style = dotted, label="false"];
2->10 [style = dashed, label="0"];
12->11 [style = dotted, label="true"];
8->0 [style = bold, label=""];
3->10 [style = bold, label=""];
7->0 [style = solid, label="assertContext"];
14->16 [style = solid, label="actual"];
14->15 [style = solid, label="actual"];
3->2 [style = bold, label=""];
6->2 [style = solid, label="actual"];
20->17 [style = solid, label="assertContext"];
3->8 [style = bold, label=""];
2->13 [style = dashed, label="0"];
1->16 [style = dashed, label="0"];
17->15 [style = bold, label=""];
6->1 [style = solid, label="actual"];
9->3 [style = solid, label="expected"];
11->10 [style = solid, label="actual"];
5->0 [style = solid, label="assertContext"];
3->13 [style = bold, label=""];
1->8 [style = dashed, label="0"];
12->3 [style = bold, label=""];
12->7 [style = dotted, label="true"];
3->1 [style = dotted, label="false"];
3->16 [style = dotted, label="false"];
19->15 [style = solid, label="expected"];
3->13 [style = dotted, label="true"];
3->2 [style = dotted, label="true"];
12->9 [style = dotted, label="true"];
3->17 [style = dotted, label="false"];
}
