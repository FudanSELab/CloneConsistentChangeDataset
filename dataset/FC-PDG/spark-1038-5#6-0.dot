digraph {
2 [style = filled, label = "MemoryBlock mb = ByteArrayMemoryBlock.fromArray(bytes)@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "int size = 64000@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "rand.nextBytes(bytes)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95d)@@@16@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int byteArrSize = 8@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95)@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "randomizedStressTestBytes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "i < size@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "hashcodes.add(hasher.hashUnsafeWordsBlock(mb))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "randomizedStressTestBytes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(HiveHasher.hashUnsafeBytesBlock(mb),HiveHasher.hashUnsafeBytesBlock(mb))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "randomizedStressTestPaddedStrings['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "hashcodes.add(HiveHasher.hashUnsafeBytesBlock(mb))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "byte(( bytes = new byte((((@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "i++@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "System.arraycopy(strBytes,0,paddedBytes,0,strBytes.length)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Random rand = new Random()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int byteArrSize = rand.nextInt(100) * 8@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "byte(( strBytes = String.valueOf(i).getBytes(StandardCharsets.UTF_8)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(hasher.hashUnsafeWordsBlock(mb),hasher.hashUnsafeWordsBlock(mb))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "int size = 65536@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Set<Long> hashcodes = new HashSet<>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(HiveHasher.hashUnsafeBytes(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize),HiveHasher.hashUnsafeBytes(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "hashcodes.add(HiveHasher.hashUnsafeBytes(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Set<Integer> hashcodes = new HashSet<>()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "MemoryBlock mb = ByteArrayMemoryBlock.fromArray(paddedBytes)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "byte(( paddedBytes = new byte((((@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "int i = 0@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22->24 [style = solid, label="strBytes"];
7->2 [style = dotted, label="true"];
7->6 [style = dotted, label="true"];
8->19 [style = dashed, label="0"];
16->0 [style = bold, label=""];
23->20 [style = bold, label=""];
10->6 [style = dotted, label="true"];
26->7 [style = bold, label=""];
18->23 [style = bold, label=""];
21->19 [style = bold, label=""];
27->24 [style = solid, label="paddedBytes"];
7->10 [style = bold, label=""];
6->22 [style = bold, label=""];
0->14 [style = solid, label="size"];
7->13 [style = dotted, label="true"];
2->3 [style = bold, label=""];
0->23 [style = dashed, label="0"];
11->22 [style = dashed, label="0"];
21->26 [style = solid, label="mb"];
27->21 [style = solid, label="paddedBytes"];
8->6 [style = bold, label=""];
15->6 [style = bold, label=""];
6->7 [style = solid, label="i"];
11->17 [style = solid, label="bytes"];
7->10 [style = solid, label="i"];
21->19 [style = solid, label="mb"];
2->8 [style = solid, label="mb"];
20->25 [style = bold, label=""];
10->7 [style = bold, label=""];
10->6 [style = bold, label=""];
7->15 [style = dotted, label="true"];
10->6 [style = solid, label="i"];
4->0 [style = bold, label=""];
7->5 [style = dotted, label="true"];
7->14 [style = bold, label=""];
1->20 [style = dashed, label="0"];
7->9 [style = bold, label=""];
13->17 [style = bold, label=""];
23->9 [style = solid, label="size"];
7->5 [style = bold, label=""];
12->10 [style = bold, label=""];
13->27 [style = dashed, label="0"];
7->11 [style = dotted, label="true"];
5->6 [style = dashed, label="0"];
22->27 [style = bold, label=""];
24->21 [style = bold, label=""];
5->17 [style = solid, label="byteArrSize"];
11->2 [style = solid, label="bytes"];
7->3 [style = dotted, label="true"];
10->19 [style = dotted, label="true"];
0->1 [style = bold, label=""];
3->8 [style = bold, label=""];
19->26 [style = bold, label=""];
10->24 [style = dotted, label="true"];
11->13 [style = bold, label=""];
0->9 [style = solid, label="size"];
5->15 [style = solid, label="byteArrSize"];
23->10 [style = solid, label="size"];
17->15 [style = bold, label=""];
1->12 [style = bold, label=""];
2->3 [style = solid, label="mb"];
10->22 [style = dotted, label="true"];
3->15 [style = dashed, label="0"];
10->26 [style = dotted, label="true"];
25->10 [style = bold, label=""];
27->24 [style = bold, label=""];
5->11 [style = bold, label=""];
10->9 [style = bold, label=""];
0->7 [style = solid, label="size"];
11->15 [style = solid, label="bytes"];
25->10 [style = solid, label="i"];
10->27 [style = dotted, label="true"];
6->7 [style = bold, label=""];
25->7 [style = solid, label="i"];
10->7 [style = solid, label="i"];
7->8 [style = dotted, label="true"];
7->17 [style = dotted, label="true"];
10->21 [style = dotted, label="true"];
10->7 [style = dotted, label="true"];
13->2 [style = bold, label=""];
11->13 [style = solid, label="bytes"];
}
