digraph {
46 [style = filled, label = "Assert.assertNull(hmsParams.get(InputFormatConfig.PARTITION_SPEC))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertTrue(hmsParams.get(BaseMetastoreTableOperations.METADATA_LOCATION_PROP).startsWith(icebergTable.location()))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(\"test\",hmsParams.get(\"dummy\"))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(.getName(),hmsTable.getSd().getOutputFormat())@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "fs.exists(hmsTableLocation)@@@46@@@['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "expectedIcebergProperties.put(TableProperties.ENGINE_HIVE_ENABLED,\"true\")@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(\"TRUE\",hmsParams.get(\"EXTERNAL\"))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
48 [style = filled, label = "Assert.assertEquals(5,hmsParams.size())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(BaseMetastoreTableOperations.ICEBERG_TABLE_TYPE_VALUE.toUpperCase(),hmsTable.getParameters().get(BaseMetastoreTableOperations.TABLE_TYPE_PROP))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "org.apache.iceberg.Table icebergTable = testTables.loadTable(identifier)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "fs.exists(hmsTableLocation)@@@24@@@['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "AssertHelpers.assertThrows(\"should throw exception\",,\"Table does not exist\",null)@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "FileSystem fs = Util.getFs(hmsTableLocation,shell.getHiveConf())@@@45@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Path hmsTableLocation = new Path(hmsTable.getSd().getLocation())@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" + \"'\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(PartitionSpec.unpartitioned()) + \"', \" + \"'dummy'='test')\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Map<String,String> expectedIcebergProperties = new HashMap<>(2)@@@34@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(6,hmsParams.size())@@@12@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(1,fs.listStatus(hmsTableLocation).length)@@@47@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testCreateDropTable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(.getName(),hmsTable.getSd().getInputFormat())@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(expectedIcebergProperties,icebergTable.properties())@@@37@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "Catalogs.hiveCatalog(shell.getHiveConf())@@@11@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "hmsTable = shell.metastore().clientPool().run(null)@@@38@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
47 [style = filled, label = "testCreateTableWithoutSpec['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "!Catalogs.hiveCatalog(shell.getHiveConf())@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "AssertHelpers.assertThrows(\"should throw exception\",,\"Table does not exist\",null)@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
49 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"')\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(0,fs.listStatus(new Path(hmsTableLocation,\"metadata\")).length)@@@48@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Path hmsTableLocation = new Path(hmsTable.getSd().getLocation())@@@39@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "expectedIcebergProperties.put(\"dummy\",\"test\")@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(.getName(),hmsTable.getSd().getSerdeInfo().getSerializationLib())@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "org.apache.hadoop.hive.metastore.api.Table hmsTable = shell.metastore().getTable(\"default\",\"customers\")@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
40 [style = filled, label = "Assert.assertEquals(1,fs.listStatus(hmsTableLocation).length)@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "IGNORED_PARAMS.forEach(null)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "org.apache.hadoop.hive.metastore.api.Table hmsTable = shell.metastore().clientPool().run(null)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(.getName(),hmsTable.getParameters().get(hive_metastoreConstants.META_TABLE_STORAGE))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(PartitionSpec.unpartitioned(),icebergTable.spec())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(Collections.singletonMap(\"dummy\",\"test\"),icebergTable.properties())@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA.asStruct(),icebergTable.schema().asStruct())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(\"TRUE\",hmsParams.get(InputFormatConfig.EXTERNAL_TABLE_PURGE))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "Map<String,String> hmsParams = hmsTable.getParameters()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "testCreateDropTable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@40@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "hmsParams.remove(BaseMetastoreTableOperations.METADATA_LOCATION_PROP)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Assert.assertNotNull(hmsParams.get(hive_metastoreConstants.DDL_TIME))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(0,fs.listStatus(new Path(hmsTableLocation,\"metadata\")).length)@@@26@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "TableIdentifier identifier = TableIdentifier.of(\"default\",\"customers\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "FileSystem fs = Util.getFs(hmsTableLocation,shell.getHiveConf())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27->13 [style = bold, label=""];
37->28 [style = bold, label=""];
46->34 [style = bold, label=""];
41->15 [style = bold, label=""];
26->10 [style = bold, label=""];
2->6 [style = bold, label=""];
13->20 [style = dotted, label="true"];
30->36 [style = bold, label=""];
28->14 [style = solid, label="hmsTableLocation"];
11->46 [style = bold, label=""];
36->33 [style = bold, label=""];
9->16 [style = bold, label=""];
7->9 [style = bold, label=""];
8->1 [style = bold, label=""];
1->49 [style = dashed, label="0"];
34->24 [style = bold, label=""];
13->31 [style = dotted, label="false"];
13->26 [style = dotted, label="false"];
32->11 [style = bold, label=""];
45->40 [style = solid, label="hmsTableLocation"];
13->4 [style = dotted, label="true"];
38->40 [style = dotted, label="true"];
18->23 [style = dotted, label="true"];
13->25 [style = bold, label=""];
15->38 [style = bold, label=""];
8->49 [style = solid, label="identifier"];
34->48 [style = bold, label=""];
13->25 [style = dotted, label="true"];
39->8 [style = bold, label=""];
45->15 [style = solid, label="hmsTableLocation"];
13->44 [style = dotted, label="false"];
20->25 [style = bold, label=""];
33->27 [style = bold, label=""];
22->5 [style = bold, label=""];
13->28 [style = dotted, label="false"];
43->45 [style = bold, label=""];
45->38 [style = solid, label="hmsTableLocation"];
34->22 [style = dotted, label="true"];
13->37 [style = dotted, label="false"];
12->29 [style = bold, label=""];
15->31 [style = bold, label=""];
13->45 [style = dotted, label="false"];
13->43 [style = bold, label=""];
44->41 [style = bold, label=""];
17->15 [style = bold, label=""];
13->3 [style = dotted, label="false"];
28->18 [style = solid, label="hmsTableLocation"];
38->42 [style = dotted, label="true"];
24->12 [style = bold, label=""];
13->35 [style = dotted, label="false"];
35->3 [style = bold, label=""];
34->24 [style = dotted, label="true"];
6->21 [style = bold, label=""];
13->15 [style = dotted, label="false"];
45->42 [style = solid, label="hmsTableLocation"];
3->26 [style = bold, label=""];
35->10 [style = solid, label="expectedIcebergProperties"];
45->44 [style = bold, label=""];
2->0 [style = bold, label=""];
14->23 [style = bold, label=""];
5->24 [style = bold, label=""];
6->13 [style = bold, label=""];
16->30 [style = bold, label=""];
34->48 [style = dotted, label="false"];
28->17 [style = bold, label=""];
49->2 [style = bold, label=""];
1->2 [style = bold, label=""];
13->10 [style = dotted, label="false"];
28->31 [style = solid, label="hmsTableLocation"];
38->40 [style = bold, label=""];
10->37 [style = bold, label=""];
34->5 [style = dotted, label="true"];
8->2 [style = solid, label="identifier"];
47->8 [style = bold, label=""];
0->6 [style = bold, label=""];
25->4 [style = bold, label=""];
31->18 [style = bold, label=""];
13->18 [style = dotted, label="false"];
18->14 [style = dotted, label="true"];
19->8 [style = bold, label=""];
34->22 [style = bold, label=""];
13->43 [style = dotted, label="false"];
11->34 [style = bold, label=""];
13->41 [style = dotted, label="false"];
13->17 [style = dotted, label="false"];
8->1 [style = solid, label="identifier"];
21->32 [style = bold, label=""];
28->23 [style = solid, label="hmsTableLocation"];
29->7 [style = bold, label=""];
8->49 [style = bold, label=""];
13->35 [style = bold, label=""];
18->14 [style = bold, label=""];
40->42 [style = bold, label=""];
13->38 [style = dotted, label="false"];
13->20 [style = bold, label=""];
}
