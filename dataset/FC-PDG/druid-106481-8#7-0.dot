digraph {
22 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(QueryRunnerTestHelper.dayGran).setDimFilter(new ExtractionDimFilter(\"quality\",\"\",lookupExtractionFn,null)).build()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "List<ResultRow> expectedResults = Collections.emptyList()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "extractionMap.put(\"premium\",\"premium0\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "extractionMap.put(\"news\",\"\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"news\",\"rows\",1L,\"idx\",121L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"news\",\"rows\",1L,\"idx\",114L))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "extractionMap.put(\"technology\",\"technology0\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(QueryRunnerTestHelper.dayGran).setDimFilter(new ExtractionDimFilter(\"quality\",\"NOT_THERE\",lookupExtractionFn,null)).build()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "extractionMap.put(\"mezzanine\",null)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testGroupByWithExtractionDimFilterCaseMappingValueIsNullOrEmpty['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testGroupByWithExtractionDimFilterWhenSearchValueNotInTheMap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "extractionMap.put(\"entertainment\",\"entertainment0\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "NullHandling.replaceWithDefault()@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "extractionMap.put(\"business\",\"business0\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "MapLookupExtractor mapLookupExtractor = new MapLookupExtractor(extractionMap,false)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testGroupByWithExtractionDimFilterWhenSearchValueNotInTheMap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "extractionMap.put(\"travel\",\"travel0\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"dim-extraction\")@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<Row> expectedResults = Collections.emptyList()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Map<String,String> extractionMap = new HashMap<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(QueryRunnerTestHelper.dayGran).setDimFilter(new ExtractionDimFilter(\"quality\",\"NOT_THERE\",lookupExtractionFn,null)).build()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "extractionMap.put(\"health\",\"health0\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"dim-extraction\")@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "extractionMap.put(\"automotive\",\"automotive0\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "List<Row> expectedResults@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"mezzanine\",\"rows\",3L,\"idx\",2870L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"news\",\"rows\",1L,\"idx\",121L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"mezzanine\",\"rows\",3L,\"idx\",2447L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"news\",\"rows\",1L,\"idx\",114L))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "LookupExtractionFn lookupExtractionFn = new LookupExtractionFn(mapLookupExtractor,false,null,true,false)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->9 [style = solid, label="query"];
27->13 [style = bold, label=""];
13->25 [style = bold, label=""];
8->10 [style = bold, label=""];
16->18 [style = bold, label=""];
9->0 [style = bold, label=""];
12->28 [style = bold, label=""];
11->1 [style = bold, label=""];
25->23 [style = bold, label=""];
6->2 [style = solid, label="mapLookupExtractor"];
7->8 [style = dashed, label="0"];
12->28 [style = dotted, label="false"];
12->26 [style = bold, label=""];
20->6 [style = bold, label=""];
26->24 [style = bold, label=""];
3->4 [style = bold, label=""];
7->3 [style = bold, label=""];
4->0 [style = bold, label=""];
4->0 [style = solid, label="results"];
6->2 [style = bold, label=""];
3->0 [style = solid, label="expectedResults"];
12->26 [style = dotted, label="true"];
5->1 [style = bold, label=""];
4->9 [style = dashed, label="0"];
24->17 [style = solid, label="results"];
1->6 [style = bold, label=""];
21->20 [style = bold, label=""];
18->27 [style = bold, label=""];
1->16 [style = bold, label=""];
1->6 [style = solid, label="extractionMap"];
23->19 [style = bold, label=""];
14->12 [style = bold, label=""];
24->17 [style = bold, label=""];
7->4 [style = solid, label="query"];
22->24 [style = solid, label="query"];
28->24 [style = bold, label=""];
10->9 [style = bold, label=""];
3->10 [style = dashed, label="0"];
10->0 [style = solid, label="expectedResults"];
2->7 [style = bold, label=""];
3->14 [style = dashed, label="0"];
2->22 [style = bold, label=""];
22->14 [style = bold, label=""];
26->17 [style = solid, label="expectedResults"];
7->22 [style = dashed, label="0"];
28->17 [style = solid, label="expectedResults"];
9->0 [style = solid, label="results"];
2->8 [style = bold, label=""];
15->1 [style = bold, label=""];
19->21 [style = bold, label=""];
}
