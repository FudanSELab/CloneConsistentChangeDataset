digraph {
2 [style = filled, label = "Assert.assertEquals(\"2012-01-07T23:59:59.999Z\",Optional.of(Intervals.of(\"2012-01-07T00Z/2012-01-08T00Z\")),spec.bucketInterval(DateTimes.of(\"2012-01-07T23:59:59.999Z\")))@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(\"2012-01-03T01Z\",Optional.of(Intervals.of(\"2012-01-03T00Z/2012-01-04T00Z\")),spec.bucketInterval(DateTimes.of(\"2012-01-03T01Z\")))@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(\"2012-01-08T01Z\",Optional.of(Intervals.of(\"2012-01-08T00Z/2012-01-09T00Z\")),spec.bucketInterval(DateTimes.of(\"2012-01-08T01Z\")))@@@10@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(\"2012-01-04T01Z\",Optional.absent(),spec.bucketInterval(DateTimes.of(\"2012-01-04T01Z\")))@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(Optional.absent(),spec.bucketInterval(DateTimes.of(\"2011-01-12T00Z\")))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "final List<Interval> inputIntervals = Lists.newArrayList(Intervals.of(\"2012-01-08T00Z/2012-01-11T00Z\"),Intervals.of(\"2012-01-07T00Z/2012-01-08T00Z\"),Intervals.of(\"2012-01-03T00Z/2012-01-04T00Z\"),Intervals.of(\"2012-01-01T00Z/2012-01-03T00Z\"))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "testRollupSetting['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(Lists.newArrayList(Intervals.of(\"2012-01-01T00Z/P1D\"),Intervals.of(\"2012-01-02T00Z/P1D\"),Intervals.of(\"2012-01-03T00Z/P1D\"),Intervals.of(\"2012-01-07T00Z/P1D\"),Intervals.of(\"2012-01-08T00Z/P1D\"),Intervals.of(\"2012-01-09T00Z/P1D\"),Intervals.of(\"2012-01-10T00Z/P1D\")),Lists.newArrayList(spec.sortedBucketIntervals()))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "Assert.assertEquals(\"2012-01-03T00Z\",Optional.of(Intervals.of(\"2012-01-03T00Z/2012-01-04T00Z\")),spec.bucketInterval(DateTimes.of(\"2012-01-03T00Z\")))@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Assert.assertEquals(\"2012-01-03T01Z\",Optional.of(Intervals.of(\"2012-01-03T00Z/2012-01-04T00Z\")),spec.bucketInterval(DateTimes.of(\"2012-01-03T01Z\")))@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(Optional.of(Intervals.of(\"2012-01-10T00Z/2012-01-11T00Z\")),spec.bucketInterval(DateTimes.of(\"2012-01-10T00Z\")))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "Assert.assertFalse(spec.isRollup())@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertTrue(spec.isRollup())@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final GranularitySpec spec = new UniformGranularitySpec(Granularities.DAY,Granularities.NONE,false,intervals)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testSimple['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertTrue(spec.isRollup())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(inputIntervals,Lists.newArrayList(spec.inputIntervals()))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(\"2012-01-07T23:59:59.999Z\",Optional.of(Intervals.of(\"2012-01-07T00Z/2012-01-08T00Z\")),spec.bucketInterval(DateTimes.of(\"2012-01-07T23:59:59.999Z\")))@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Assert.assertEquals(\"2012-01-08T01Z\",Optional.of(Intervals.of(\"2012-01-08T00Z/2012-01-09T00Z\")),spec.bucketInterval(DateTimes.of(\"2012-01-08T01Z\")))@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "final GranularitySpec spec = new UniformGranularitySpec(Granularities.DAY,null,inputIntervals)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Assert.assertEquals(\"2012-01-03T00Z\",Optional.of(Intervals.of(\"2012-01-03T00Z/2012-01-04T00Z\")),spec.bucketInterval(DateTimes.of(\"2012-01-03T00Z\")))@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testSimple['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "Assert.assertEquals(Optional.of(Intervals.of(\"2012-01-01T00Z/2012-01-02T00Z\")),spec.bucketInterval(DateTimes.of(\"2012-01-01T00Z\")))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assert.assertEquals(\"2012-01-04T01Z\",Optional.absent(),spec.bucketInterval(DateTimes.of(\"2012-01-04T01Z\")))@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "List<Interval> intervals = Lists.newArrayList(Intervals.of(\"2012-01-08T00Z/2012-01-11T00Z\"),Intervals.of(\"2012-01-07T00Z/2012-01-08T00Z\"),Intervals.of(\"2012-01-03T00Z/2012-01-04T00Z\"),Intervals.of(\"2012-01-01T00Z/2012-01-03T00Z\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final GranularitySpec spec = new UniformGranularitySpec(Granularities.DAY,null,Lists.newArrayList(Intervals.of(\"2012-01-08T00Z/2012-01-11T00Z\"),Intervals.of(\"2012-01-07T00Z/2012-01-08T00Z\"),Intervals.of(\"2012-01-03T00Z/2012-01-04T00Z\"),Intervals.of(\"2012-01-01T00Z/2012-01-03T00Z\")))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(Optional.absent(),spec.bucketInterval(DateTimes.of(\"2012-01-12T00Z\")))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1->5 [style = bold, label=""];
5->3 [style = bold, label=""];
16->19 [style = solid, label="inputIntervals"];
16->13 [style = solid, label="inputIntervals"];
23->25 [style = bold, label=""];
16->13 [style = bold, label=""];
9->11 [style = bold, label=""];
23->25 [style = solid, label="intervals"];
0->19 [style = bold, label=""];
5->23 [style = dashed, label="0"];
21->15 [style = bold, label=""];
19->10 [style = bold, label=""];
10->17 [style = bold, label=""];
12->16 [style = bold, label=""];
17->22 [style = bold, label=""];
2->4 [style = bold, label=""];
3->0 [style = bold, label=""];
8->7 [style = bold, label=""];
6->2 [style = bold, label=""];
20->21 [style = bold, label=""];
5->16 [style = dashed, label="0"];
25->24 [style = bold, label=""];
22->18 [style = bold, label=""];
15->9 [style = bold, label=""];
26->23 [style = bold, label=""];
7->6 [style = bold, label=""];
0->8 [style = bold, label=""];
18->14 [style = bold, label=""];
14->20 [style = bold, label=""];
13->0 [style = bold, label=""];
}
