digraph {
3 [style = filled, label = "root instanceof SqlBasicCall@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "return SqlUtil.stripAs(select.getSelectList().get(ordinal))@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "intValue < 1 || intValue > aliasList.size()@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "intValue < 1 || intValue > select.getSelectList().size()@@@24@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "operandList@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "visit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "intValue >= 0@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "SqlNode node@@@10@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "int ordinal = intValue - 1@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "literal.getTypeName()@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "isOrdinalLiteral = true@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "SqlLiteral literal@@@2@@@['1', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10dad2cliteral@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "SqlNode node@@@10@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final int intValue = literal.intValue(false)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "literal == root && config.sqlConformance().isSortByOrdinal()@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "throw newValidationError(literal,RESOURCE.orderByOrdinalOutOfRange())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "boolean isOrdinalLiteral = literal == root@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "intValue < 1 || intValue > SqlNonNullableAccessors.getSelectList(select).size()@@@24@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "visit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "isOrdinalLiteral@@@20@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "throw validator.newValidationError(literal,RESOURCE.orderByOrdinalOutOfRange())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "visit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10dae08literal@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "List<SqlNode> operandList = ((SqlBasicCall)root).getOperandList()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "root.getKind()@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10dadadliteral@@@34@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final int intValue = literal.intValue(false)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "node.equals(literal)@@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "int ordinal = intValue - 1@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "intValue >= 0@@@23@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "havingExpr || !validator.config().sqlConformance().isGroupByOrdinal()@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "return SqlUtil.stripAs(SqlNonNullableAccessors.getSelectList(select).get(ordinal))@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "return nthSelectItem(ordinal,literal.getParserPosition())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "SqlLiteral literal@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "literal.getTypeName()@@@4@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
30->31 [style = solid, label="ordinal"];
15->9 [style = solid, label="literal"];
28->35 [style = dotted, label="true"];
14->17 [style = bold, label=""];
29->34 [style = bold, label=""];
7->8 [style = bold, label=""];
11->9 [style = bold, label=""];
21->13 [style = solid, label="literal"];
34->26 [style = dotted, label="true"];
7->14 [style = bold, label=""];
3->18 [style = bold, label=""];
15->13 [style = solid, label="literal"];
12->19 [style = solid, label="intValue"];
11->2 [style = dotted, label="true"];
16->6 [style = solid, label="ordinal"];
34->27 [style = dotted, label="true"];
26->30 [style = dotted, label="true"];
26->28 [style = dotted, label="true"];
3->0 [style = dotted, label="true"];
21->4 [style = solid, label="literal"];
1->6 [style = dotted, label="true"];
34->32 [style = bold, label=""];
26->28 [style = bold, label=""];
19->28 [style = dashed, label="0"];
15->8 [style = solid, label="literal"];
26->32 [style = bold, label=""];
28->30 [style = bold, label=""];
16->6 [style = bold, label=""];
23->21 [style = dotted, label="true"];
3->11 [style = bold, label=""];
2->9 [style = bold, label=""];
27->28 [style = solid, label="intValue"];
12->1 [style = bold, label=""];
10->7 [style = bold, label=""];
17->3 [style = dotted, label="true"];
13->16 [style = bold, label=""];
33->29 [style = bold, label=""];
28->35 [style = bold, label=""];
18->4 [style = bold, label=""];
19->13 [style = bold, label=""];
29->32 [style = bold, label=""];
3->18 [style = dotted, label="true"];
15->35 [style = solid, label="literal"];
2->12 [style = dotted, label="true"];
5->11 [style = bold, label=""];
23->7 [style = bold, label=""];
1->19 [style = bold, label=""];
7->8 [style = dotted, label="true"];
16->25 [style = solid, label="ordinal"];
24->13 [style = bold, label=""];
27->26 [style = bold, label=""];
24->13 [style = dotted, label="true"];
4->5 [style = dotted, label="true"];
21->8 [style = solid, label="literal"];
13->35 [style = dashed, label="0"];
29->34 [style = dotted, label="true"];
31->32 [style = bold, label=""];
25->9 [style = bold, label=""];
8->14 [style = bold, label=""];
15->21 [style = dashed, label="0"];
1->19 [style = dotted, label="true"];
1->9 [style = bold, label=""];
19->16 [style = bold, label=""];
27->26 [style = solid, label="intValue"];
26->31 [style = dotted, label="true"];
21->14 [style = solid, label="literal"];
30->31 [style = bold, label=""];
12->16 [style = solid, label="intValue"];
17->3 [style = bold, label=""];
15->32 [style = solid, label="literal"];
1->16 [style = dotted, label="true"];
19->24 [style = dashed, label="0"];
35->30 [style = bold, label=""];
4->5 [style = bold, label=""];
1->25 [style = dotted, label="true"];
27->30 [style = solid, label="intValue"];
21->9 [style = solid, label="literal"];
1->24 [style = dotted, label="true"];
3->4 [style = dotted, label="true"];
16->25 [style = bold, label=""];
12->1 [style = solid, label="intValue"];
19->13 [style = dotted, label="true"];
15->29 [style = solid, label="literal"];
11->2 [style = bold, label=""];
2->12 [style = bold, label=""];
10->15 [style = dotted, label="true"];
24->16 [style = bold, label=""];
6->25 [style = dashed, label="0"];
12->24 [style = solid, label="intValue"];
33->15 [style = dotted, label="true"];
2->1 [style = dotted, label="true"];
1->24 [style = bold, label=""];
5->11 [style = solid, label="isOrdinalLiteral"];
15->14 [style = solid, label="literal"];
3->22 [style = dotted, label="true"];
15->4 [style = solid, label="literal"];
7->29 [style = dashed, label="0"];
6->9 [style = bold, label=""];
4->11 [style = bold, label=""];
14->11 [style = solid, label="isOrdinalLiteral"];
3->20 [style = dotted, label="true"];
34->27 [style = bold, label=""];
17->11 [style = bold, label=""];
}
