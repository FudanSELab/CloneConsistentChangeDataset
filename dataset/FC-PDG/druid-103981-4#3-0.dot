digraph {
40 [style = filled, label = "testMultipleMissingDaysMultipleRowAtTheEnd['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Sequence<Row> seq = Sequences.simple(rows)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<Row> expectedDay5 = Collections.singletonList(JAN_5_M_10)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "intervals = new ArrayList<>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(JAN_4,actual.getDateTime())@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(JAN_5,actual.getDateTime())@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertEquals(expectedDay3,actual.getRows())@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertEquals(JAN_5,actual.getDateTime())@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(JAN_3,actual.getDateTime())@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "Assert.assertEquals(JAN_1,actual.getDateTime())@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "rows.add(JAN_5_M_10)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "intervals.add(INTERVAL_JAN_1_5)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "rows.add(JAN_2_M_10)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(JAN_2,actual.getDateTime())@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "actual = iter.next()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "RowBucketIterable rbi = new RowBucketIterable(seq,intervals,ONE_DAY)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "List<Row> expectedDay3 = Collections.emptyList()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<Row> expectedDay1 = Collections.emptyList()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(expectedDay5,actual.getRows())@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertEquals(JAN_3,actual.getDateTime())@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "rows.add(JAN_4_M_10)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "actual = iter.next()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(expectedDay4,actual.getRows())@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "actual = iter.next()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testMissingDaysAtBegining['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testMultipleMissingDaysMultipleRowAtTheEnd['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(JAN_4,actual.getDateTime())@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "Assert.assertEquals(expectedDay5,actual.getRows())@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "Iterator<RowBucket> iter = rbi.iterator()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(expectedDay2,actual.getRows())@@@17@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "intervals.add(INTERVAL_JAN_1_2)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertEquals(expectedDay1,actual.getRows())@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertEquals(JAN_1,actual.getDateTime())@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "rows = new ArrayList<>()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "RowBucket actual = iter.next()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "List<Row> expectedDay2 = Collections.singletonList(JAN_2_M_10)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(expectedDay4,actual.getRows())@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(expectedDay3,actual.getRows())@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "Assert.assertEquals(JAN_2,actual.getDateTime())@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "Assert.assertEquals(expectedDay2,actual.getRows())@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "actual = iter.next()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "List<Row> expectedDay4 = Collections.singletonList(JAN_4_M_10)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(expectedDay1,actual.getRows())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25->0 [style = bold, label=""];
40->2 [style = bold, label=""];
8->24 [style = bold, label=""];
23->38 [style = dashed, label="0"];
17->39 [style = dashed, label="0"];
33->35 [style = bold, label=""];
27->36 [style = bold, label=""];
24->20 [style = solid, label="expectedDay4"];
2->26 [style = solid, label="expectedDay1"];
1->35 [style = dashed, label="0"];
4->25 [style = bold, label=""];
16->8 [style = bold, label=""];
20->29 [style = bold, label=""];
9->33 [style = bold, label=""];
8->1 [style = solid, label="expectedDay3"];
26->32 [style = dashed, label="0"];
16->23 [style = solid, label="expectedDay2"];
27->28 [style = bold, label=""];
0->12 [style = bold, label=""];
18->15 [style = bold, label=""];
38->9 [style = bold, label=""];
11->37 [style = bold, label=""];
8->35 [style = solid, label="expectedDay3"];
32->27 [style = bold, label=""];
34->31 [style = bold, label=""];
10->17 [style = bold, label=""];
16->25 [style = bold, label=""];
16->38 [style = solid, label="expectedDay2"];
42->12 [style = bold, label=""];
29->34 [style = bold, label=""];
11->19 [style = bold, label=""];
25->13 [style = solid, label="intervals"];
15->3 [style = bold, label=""];
24->30 [style = solid, label="expectedDay4"];
41->2 [style = bold, label=""];
30->29 [style = bold, label=""];
6->33 [style = dashed, label="0"];
4->21 [style = solid, label="expectedDay5"];
9->6 [style = bold, label=""];
39->30 [style = bold, label=""];
21->31 [style = dashed, label="0"];
6->1 [style = bold, label=""];
5->13 [style = solid, label="seq"];
26->27 [style = bold, label=""];
3->5 [style = bold, label=""];
24->4 [style = bold, label=""];
0->42 [style = dashed, label="0"];
10->39 [style = bold, label=""];
28->23 [style = bold, label=""];
28->36 [style = dashed, label="0"];
19->26 [style = bold, label=""];
18->5 [style = bold, label=""];
5->13 [style = bold, label=""];
20->30 [style = dashed, label="0"];
2->32 [style = solid, label="expectedDay1"];
12->18 [style = bold, label=""];
7->34 [style = dashed, label="0"];
37->32 [style = bold, label=""];
7->21 [style = bold, label=""];
29->7 [style = bold, label=""];
25->42 [style = bold, label=""];
14->2 [style = bold, label=""];
35->10 [style = bold, label=""];
13->22 [style = bold, label=""];
36->38 [style = bold, label=""];
1->10 [style = bold, label=""];
23->9 [style = bold, label=""];
19->37 [style = dashed, label="0"];
22->11 [style = bold, label=""];
12->5 [style = solid, label="rows"];
4->31 [style = solid, label="expectedDay5"];
17->20 [style = bold, label=""];
2->16 [style = bold, label=""];
}
