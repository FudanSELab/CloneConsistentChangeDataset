digraph {
1 [style = filled, label = "Mapper mapper = sqlSession.getMapper()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "shouldGetAllCars['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "List<Car> cars = mapper.getCars()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assertions.assertEquals(4,cars.size())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assertions.assertNotNull(cars.get(1).getBrakes())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "shouldGetAllCarsAndDetectAssociationType['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assertions.assertEquals(\"Opel\",cars.get(1).getType())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Assert.assertNotNull(cars.get(0).getEngine())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assertions.assertNotNull(cars.get(0).getEngine())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(\"Opel\",cars.get(1).getType())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(\"VW\",cars.get(0).getType())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertNotNull(cars.get(1).getBrakes())@@@12@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assertions.assertNull(cars.get(0).getBrakes())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "shouldGetAllCars['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assertions.assertEquals(\"VW\",cars.get(0).getType())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertNull(cars.get(0).getBrakes())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(4,cars.size())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assertions.assertNull(cars.get(1).getEngine())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "List<Car> cars = mapper.getCarsAndDetectAssociationType()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertNull(cars.get(1).getEngine())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
5->8 [style = bold, label=""];
2->6 [style = bold, label=""];
7->14 [style = dashed, label="0"];
12->15 [style = bold, label=""];
14->17 [style = bold, label=""];
1->18 [style = bold, label=""];
7->0 [style = bold, label=""];
5->18 [style = dashed, label="0"];
0->17 [style = dashed, label="0"];
3->4 [style = bold, label=""];
13->1 [style = bold, label=""];
2->10 [style = dashed, label="0"];
19->1 [style = bold, label=""];
17->12 [style = bold, label=""];
6->16 [style = dashed, label="0"];
3->12 [style = dashed, label="0"];
10->16 [style = bold, label=""];
8->2 [style = bold, label=""];
11->10 [style = bold, label=""];
4->15 [style = dashed, label="0"];
16->14 [style = bold, label=""];
5->11 [style = bold, label=""];
18->8 [style = bold, label=""];
8->11 [style = dashed, label="0"];
6->7 [style = bold, label=""];
9->1 [style = bold, label=""];
}
