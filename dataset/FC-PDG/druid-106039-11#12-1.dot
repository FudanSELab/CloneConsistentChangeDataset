digraph {
11 [style = filled, label = "Filter filter = new AndFilter(ImmutableList.of(new SelectorFilter(\"channel\",\"#es.wikipedia\"),new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\"El Salvador\")))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "JoinTestHelper.verifyCursors(adapter.makeCursors(filter,Intervals.ETERNITY,VirtualColumns.EMPTY,Granularities.ALL,false,null),ImmutableList.of(\"page\",\"countryIsoCode\",\"countryNumber\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@91192d))@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "test_filterPushDown_factToCountryRightWithFilterOnChannelAndJoinable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(new AndFilter(ImmutableList.of(new SelectorFilter(\"channel\",\"#es.wikipedia\"),new InDimFilter(\"countryIsoCode\",ImmutableSet.of(\"SV\"),null,null).toFilter())),new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\"El Salvador\"),ImmutableList.of())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(new AndFilter(ImmutableList.of(new SelectorFilter(\"channel\",\"#de.wikipedia\"),new InDimFilter(\"countryIsoCode\",ImmutableSet.of(\"DE\"),null,null).toFilter())),new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\"Germany\"),ImmutableList.of())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(new AndFilter(ImmutableList.of(new SelectorFilter(\"channel\",\"#de.wikipedia\"),new InDimFilter(\"countryIsoCode\",ImmutableSet.of(\"DE\"),null,null).toFilter())),new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\"Germany\"),ImmutableSet.of())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "test_filterPushDown_factToCountryRightWithFilterOnChannelAndJoinable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "JoinFilterPreAnalysis joinFilterPreAnalysis = simplePreAnalysis(joinableClauses,originalFilter)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Filter originalFilter = new AndFilter(ImmutableList.of(new SelectorFilter(\"channel\",\"#de.wikipedia\"),new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\"Germany\")))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(expectedFilterSplit,actualFilterSplit)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(factSegment.asStorageAdapter(),joinableClauses,joinFilterPreAnalysis)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.RIGHT))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "JoinFilterPreAnalysis joinFilterPreAnalysis = simplePreAnalysis(joinableClauses,filter)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.FULL))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "JoinTestHelper.verifyCursors(adapter.makeCursors(originalFilter,Intervals.ETERNITY,VirtualColumns.EMPTY,Granularities.ALL,false,null),ImmutableList.of(\"page\",\"countryIsoCode\",\"countryNumber\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@911893))@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "test_filterPushDown_factToCountryFullWithFilterOnChannelAndCountryName['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4->10 [style = bold, label=""];
4->14 [style = bold, label=""];
7->1 [style = bold, label=""];
3->5 [style = solid, label="originalFilter"];
8->10 [style = dashed, label="0"];
12->11 [style = bold, label=""];
13->16 [style = solid, label="joinableClauses"];
1->3 [style = bold, label=""];
0->16 [style = dashed, label="0"];
1->4 [style = solid, label="joinableClauses"];
8->6 [style = bold, label=""];
8->14 [style = dashed, label="0"];
10->6 [style = bold, label=""];
13->16 [style = bold, label=""];
11->16 [style = solid, label="filter"];
0->4 [style = solid, label="joinFilterPreAnalysis"];
3->0 [style = bold, label=""];
0->6 [style = solid, label="joinFilterPreAnalysis"];
16->4 [style = solid, label="joinFilterPreAnalysis"];
6->2 [style = bold, label=""];
3->0 [style = solid, label="originalFilter"];
16->6 [style = solid, label="joinFilterPreAnalysis"];
1->0 [style = solid, label="joinableClauses"];
10->2 [style = solid, label="expectedFilterSplit"];
13->4 [style = solid, label="joinableClauses"];
0->4 [style = bold, label=""];
6->2 [style = solid, label="actualFilterSplit"];
11->13 [style = bold, label=""];
2->15 [style = bold, label=""];
14->2 [style = solid, label="expectedFilterSplit"];
11->15 [style = solid, label="filter"];
4->8 [style = bold, label=""];
16->4 [style = bold, label=""];
9->1 [style = bold, label=""];
5->15 [style = dashed, label="0"];
14->6 [style = bold, label=""];
2->5 [style = bold, label=""];
8->2 [style = solid, label="expectedFilterSplit"];
}
