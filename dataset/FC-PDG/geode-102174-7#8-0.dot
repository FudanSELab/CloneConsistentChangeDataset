digraph {
13 [style = filled, label = "cacheClientNotifier = CacheClientNotifier.getInstance(internalCache,mock(),mock(),mock(),10,10,mock(),null,true)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "when(proxy.getAcceptorId()).thenReturn(Long.valueOf(111))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "testDoNotNotifyClientsOfTombstoneGCNoProxy['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "EventID eventID = new EventID()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "CacheClientProxy proxy = mock()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "Map regionGCVersions = new HashMap()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(CacheClientNotifier.singletonHasClientProxies())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "testSingletonHasClientProxiesTrue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "when(cacheClientProxy.getAcceptorId()).thenReturn(111L)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "CacheClientNotifier ccn = CacheClientNotifier.getInstance(internalCache,mock(),mock(),mock(),10,10,mock(),null,true)@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "when(proxy.getProxyID()).thenReturn(mock())@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "FilterRoutingInfo.FilterInfo routing = null@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "ccn.shutdown(111)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "when(internalCache.getCCPTimer()).thenReturn(mock())@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "doReturn(mock()).when(cache).getCCPTimer()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "bucketRegion.notifyClientsOfTombstoneGC(regionGCVersions,keysRemoved,eventID,routing)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "CacheClientNotifier ccn = CacheClientNotifier.getInstance(cache,mock(),mock(),mock(),10,10,mock(),null,true)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "when(cacheClientProxy.getProxyID()).thenReturn(mock())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "InternalCache internalCache = Fakes.cache()@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testSingletonHasClientProxiesTrue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "verify(bucketRegion,never()).getFilterProfile()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ccn.addClientProxy(proxy)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "BucketRegion bucketRegion = spy(new BucketRegion(regionName,regionAttributes,partitionedRegion,cache,internalRegionArgs,disabledClock()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Set keysRemoved = new HashSet()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "doReturn(Collections.emptyList()).when(cache).getCacheServers()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(CacheClientNotifier.singletonHasClientProxies()).isTrue()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "ccn.shutdown(111)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "cacheClientNotifier.addClientProxy(cacheClientProxy)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6->3 [style = bold, label=""];
17->26 [style = bold, label=""];
7->1 [style = bold, label=""];
23->26 [style = solid, label="keysRemoved"];
15->14 [style = bold, label=""];
1->5 [style = solid, label="internalCache"];
0->6 [style = bold, label=""];
25->23 [style = bold, label=""];
18->26 [style = solid, label="routing"];
6->11 [style = dashed, label="0"];
16->25 [style = bold, label=""];
11->12 [style = bold, label=""];
26->19 [style = bold, label=""];
2->6 [style = solid, label="proxy"];
24->18 [style = bold, label=""];
13->11 [style = bold, label=""];
2->15 [style = dashed, label="0"];
23->24 [style = bold, label=""];
18->22 [style = bold, label=""];
25->26 [style = solid, label="regionGCVersions"];
3->12 [style = dashed, label="0"];
5->0 [style = bold, label=""];
9->15 [style = bold, label=""];
24->26 [style = solid, label="eventID"];
3->8 [style = bold, label=""];
19->27 [style = bold, label=""];
1->16 [style = dashed, label="0"];
21->16 [style = bold, label=""];
22->17 [style = bold, label=""];
1->2 [style = bold, label=""];
10->9 [style = bold, label=""];
8->4 [style = bold, label=""];
14->13 [style = bold, label=""];
27->20 [style = bold, label=""];
2->5 [style = bold, label=""];
}
