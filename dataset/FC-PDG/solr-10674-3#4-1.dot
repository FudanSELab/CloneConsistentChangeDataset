digraph {
7 [style = filled, label = "assertTrue(expressionString.contains(\"q=\"*:*\"\"))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(expressionString.contains(\"outcome=out_i\"))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testFeaturesSelectionStream['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "String expr = \"featuresSelection(collection1, q=\"*:*\", featureSet=\"first\", field=\"tv_text\", outcome=\"out_i\", numTerms=4, positiveLabel=2)\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(expressionString.contains(\"name=model\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertFalse(expressionString.contains(\"terms=\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testTextLogitStreamWithFeaturesSelection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertTrue(expressionString.contains(\"featuresSelection(\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "TextLogitStream logitStream = new TextLogitStream(StreamExpressionParser.parse(expr),factory)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "String expressionString = stream.toExpression(factory).toString()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(expressionString.contains(\"field=tv_text\"))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testFeaturesSelectionStream['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertTrue(expressionString.contains(\"maxIterations=100\"))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "String expressionString = logitStream.toExpression(factory).toString()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertTrue(expressionString.contains(\"featureSet=first\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTrue(expressionString.contains(\"outcome=out_i\"))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "FeaturesSelectionStream stream = new FeaturesSelectionStream(StreamExpressionParser.parse(expr),factory)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertTrue(expressionString.contains(\"field=tv_text\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "String expr = \"tlogit(\" + \"collection1, \" + \"q=\"*:*\", \" + \"name=\"model\", \" + \"featuresSelection(collection1, q=\"*:*\", featureSet=\"first\", field=\"tv_text\", outcome=\"out_i\", numTerms=4), \" + \"field=\"tv_text\", \" + \"outcome=\"out_i\", \" + \"maxIterations=100)\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->15 [style = bold, label=""];
9->16 [style = dashed, label="0"];
7->11 [style = bold, label=""];
9->1 [style = solid, label="expr"];
0->6 [style = bold, label=""];
1->15 [style = dashed, label="0"];
1->3 [style = bold, label=""];
7->0 [style = bold, label=""];
0->11 [style = dashed, label="0"];
2->9 [style = bold, label=""];
5->14 [style = bold, label=""];
12->7 [style = bold, label=""];
3->12 [style = dashed, label="0"];
3->7 [style = bold, label=""];
6->8 [style = bold, label=""];
9->3 [style = bold, label=""];
16->15 [style = solid, label="expr"];
11->17 [style = bold, label=""];
4->14 [style = dashed, label="0"];
10->9 [style = bold, label=""];
15->12 [style = bold, label=""];
17->13 [style = bold, label=""];
8->4 [style = bold, label=""];
9->1 [style = bold, label=""];
4->5 [style = bold, label=""];
13->4 [style = bold, label=""];
18->16 [style = bold, label=""];
}
