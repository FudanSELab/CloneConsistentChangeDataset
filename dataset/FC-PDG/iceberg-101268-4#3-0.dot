digraph {
12 [style = filled, label = "boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA,and(lessThan(\"id\",5),greaterThanOrEqual(\"id\",0))).eval(FILE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertFalse(\"Should skip: or(false, false)\",shouldRead)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertTrue(\"Should read: or(false, true)\",shouldRead)@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,and(greaterThan(\"id\",5),lessThanOrEqual(\"id\",30))).eval(FILE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testOr['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA,or(lessThan(\"id\",5),greaterThanOrEqual(\"id\",80))).eval(FILE)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA,or(lessThan(\"id\",INT_MIN_VALUE - 25),greaterThanOrEqual(\"id\",INT_MAX_VALUE + 1))).eval(FILE)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertTrue(\"Should read: and(true, true)\",shouldRead)@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testOr['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testAnd['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,or(lessThan(\"id\",5),greaterThanOrEqual(\"id\",60))).eval(FILE)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,or(lessThan(\"id\",INT_MIN_VALUE - 25),greaterThanOrEqual(\"id\",INT_MAX_VALUE - 19))).eval(FILE)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Assert.assertFalse(\"Should skip: and(false, false)\",shouldRead)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
6->2 [style = solid, label="shouldRead"];
1->5 [style = dashed, label="0"];
12->8 [style = solid, label="shouldRead"];
2->1 [style = bold, label=""];
0->6 [style = dashed, label="0"];
0->2 [style = bold, label=""];
1->3 [style = bold, label=""];
0->12 [style = dashed, label="0"];
11->9 [style = bold, label=""];
2->8 [style = dashed, label="0"];
11->9 [style = solid, label="shouldRead"];
4->0 [style = bold, label=""];
6->2 [style = bold, label=""];
5->3 [style = solid, label="shouldRead"];
3->9 [style = dashed, label="0"];
10->12 [style = bold, label=""];
12->8 [style = bold, label=""];
1->11 [style = dashed, label="0"];
7->6 [style = bold, label=""];
0->2 [style = solid, label="shouldRead"];
8->11 [style = bold, label=""];
1->3 [style = solid, label="shouldRead"];
2->5 [style = bold, label=""];
}
