digraph {
17 [style = filled, label = "assertTrue(lists.get(3).isEmpty())@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "scheduler.advanceTimeTo(195,TimeUnit.MILLISECONDS)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "timedAndCount['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(5,lists.size())@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "final List<String> list = new ArrayList<String>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>(){@Override public void subscribe(Observer<? super String> observer){observer.onSubscribe(Disposables.empty())push(observer,\"one\",10)push(observer,\"two\",90)push(observer,\"three\",110)push(observer,\"four\",190)push(observer,\"five\",210)complete(observer,250)}})@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "windowed.subscribe(observeWindow(list,lists))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(lists.get(1),list(\"three\",\"four\"))@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final List<List<String>> lists = new ArrayList<List<String>>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(lists.get(4),list(\"five\"))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Observable<Observable<String>> windowed = source.window(100,TimeUnit.MILLISECONDS,scheduler,2)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(lists.get(0),list(\"one\",\"two\"))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(3,lists.size())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(1,lists.size())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(3,lists.size())@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "timedAndCount['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertEquals(2,lists.size())@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Flowable<Flowable<String>> windowed = source.window(100,TimeUnit.MILLISECONDS,scheduler,2)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(lists.get(2),list(\"five\"))@@@27@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "scheduler.advanceTimeTo(95,TimeUnit.MILLISECONDS)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertTrue(lists.get(1).isEmpty())@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "scheduler.advanceTimeTo(200,TimeUnit.MILLISECONDS)@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>(){@Override public void subscribe(Subscriber<? super String> subscriber){subscriber.onSubscribe(new BooleanSubscription())push(subscriber,\"one\",10)push(subscriber,\"two\",90)push(subscriber,\"three\",110)push(subscriber,\"four\",190)push(subscriber,\"five\",210)complete(subscriber,250)}})@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "scheduler.advanceTimeTo(300,TimeUnit.MILLISECONDS)@@@25@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "timedAndCount['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "scheduler.advanceTimeTo(100,TimeUnit.MILLISECONDS)@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(lists.get(2),list(\"three\",\"four\"))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7->11 [style = bold, label=""];
10->21 [style = dashed, label="0"];
3->1 [style = bold, label=""];
21->19 [style = bold, label=""];
7->9 [style = solid, label="list"];
4->15 [style = bold, label=""];
11->12 [style = bold, label=""];
4->2 [style = bold, label=""];
7->10 [style = solid, label="list"];
5->14 [style = bold, label=""];
5->18 [style = dashed, label="0"];
15->16 [style = bold, label=""];
11->24 [style = bold, label=""];
25->7 [style = bold, label=""];
7->0 [style = solid, label="list"];
7->19 [style = solid, label="list"];
17->23 [style = bold, label=""];
2->13 [style = bold, label=""];
1->22 [style = bold, label=""];
2->15 [style = dashed, label="0"];
8->0 [style = bold, label=""];
24->26 [style = bold, label=""];
19->1 [style = bold, label=""];
26->0 [style = bold, label=""];
12->8 [style = bold, label=""];
16->21 [style = bold, label=""];
12->24 [style = dashed, label="0"];
7->23 [style = solid, label="list"];
7->4 [style = solid, label="list"];
11->0 [style = solid, label="lists"];
22->17 [style = bold, label=""];
9->3 [style = bold, label=""];
0->18 [style = bold, label=""];
13->9 [style = bold, label=""];
20->7 [style = bold, label=""];
6->7 [style = bold, label=""];
1->10 [style = bold, label=""];
18->14 [style = bold, label=""];
0->5 [style = bold, label=""];
14->4 [style = bold, label=""];
8->26 [style = dashed, label="0"];
}
