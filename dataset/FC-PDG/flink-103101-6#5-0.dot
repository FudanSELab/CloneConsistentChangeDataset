digraph {
8 [style = filled, label = "printSink.setRuntimeContext(ctx)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "printSink.setTargetToStandardOut()@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Mockito.when(ctx.getIndexOfThisSubtask()).thenReturn(1)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertEquals(\"Print to System.out\",printSink.toString())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "printSink.invoke(\"hello world!\",SinkContextUtil.forTimestamp(0))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final StreamingRuntimeContext ctx = Mockito.mock()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "printSink.setRuntimeContext(new MockStreamingRuntimeContext(false,2,1))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertEquals(\"hello world!\" + line,baos.toString())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(\"2> hello world!\" + line,baos.toString())@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "System.setOut(stream)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.fail()@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "PrintStream stream = new PrintStream(baos)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ByteArrayOutputStream baos = new ByteArrayOutputStream()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "stream.close()@@@20@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "printSink.open(new Configuration())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testPrintSinkWithPrefix['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(\"2> hello world!\" + line,arrayOutputStream.toString())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Exception e@@@12@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Mockito.when(ctx.getNumberOfParallelSubtasks()).thenReturn(2)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "printSink.close()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testPrintSinkStdErr['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "printSink.setTargetToStandardErr()@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(\"Print to System.err\",printSink.toString())@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "PrintSinkFunction<String> printSink = new PrintSinkFunction<>()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testPrintSinkWithPrefix['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2->23 [style = dashed, label="0"];
0->3 [style = bold, label=""];
8->10 [style = bold, label=""];
2->20 [style = dashed, label="0"];
14->12 [style = dotted, label="true"];
16->9 [style = solid, label="baos"];
19->20 [style = bold, label=""];
10->3 [style = bold, label=""];
11->8 [style = solid, label="ctx"];
4->2 [style = bold, label=""];
9->1 [style = solid, label="stream"];
12->0 [style = bold, label=""];
3->4 [style = bold, label=""];
15->5 [style = bold, label=""];
11->15 [style = bold, label=""];
1->11 [style = bold, label=""];
24->16 [style = bold, label=""];
18->22 [style = bold, label=""];
3->19 [style = bold, label=""];
5->13 [style = bold, label=""];
14->12 [style = bold, label=""];
10->0 [style = bold, label=""];
7->6 [style = bold, label=""];
11->13 [style = bold, label=""];
22->10 [style = bold, label=""];
4->19 [style = dashed, label="0"];
8->18 [style = dashed, label="0"];
23->7 [style = bold, label=""];
2->7 [style = bold, label=""];
13->8 [style = bold, label=""];
9->1 [style = bold, label=""];
20->7 [style = bold, label=""];
16->9 [style = bold, label=""];
4->23 [style = bold, label=""];
17->16 [style = bold, label=""];
13->18 [style = bold, label=""];
21->13 [style = bold, label=""];
}
