digraph {
34 [style = filled, label = "assertEquals(rev.getShortMessage(),COMMIT_MESSAGE_ALL)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "count == 1@@@49@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "commitAllDifferentBranchTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Repository repository = getTestRepository()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "commitConsumerTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "File fileToAdd1 = new File(GIT_LOCAL_REPO,FILENAME_BRANCH_TO_ADD)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(count,2)@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "git.checkout().setCreateBranch(true).setName(BRANCH_TEST).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(\"Test test Commit\",ex1.getOut().getBody().getShortMessage())@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "count == 0@@@48@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "int count = 0@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "template.send(\"direct:add-on-branch\",new Processor(){@Override public void process(Exchange exchange){exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME,FILENAME_BRANCH_TO_ADD)}})@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "logs = git.log().call()@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "File gitDir = new File(GIT_LOCAL_REPO,\".git\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Exchange ex1 = added.getExchanges().get(0)@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertEquals(rev.getShortMessage(),COMMIT_MESSAGE)@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(count,1)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(rev.getShortMessage(),COMMIT_MESSAGE)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "count++@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Thread.sleep(1 * 5000)@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "fileToAdd.createNewFile()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "count++@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "commitConsumerTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "Status status = new Git(repository).status().call()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "count = 0@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "MockEndpoint added = getMockEndpoint(\"mock:result-commit\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertEquals(gitDir.exists(),true)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(status.getAdded().contains(FILENAME_TO_ADD))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(count,2)@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "template.send(\"direct:add\",new Processor(){@Override public void process(Exchange exchange){exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME,FILENAME_TO_ADD)}})@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "repository.close()@@@57@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "File fileToAdd = new File(GIT_LOCAL_REPO,FILENAME_TO_ADD)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Iterable<RevCommit> logs = new Git(repository).log().call()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "status = new Git(repository).status().call()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "logs = new Git(repository).log().call()@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Git git = new Git(repository)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "template.send(\"direct:commit-all-branch\",new Processor(){@Override public void process(Exchange exchange){exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE,COMMIT_MESSAGE_ALL)}})@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "repository.close()@@@53@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "template.send(\"direct:commit\",new Processor(){@Override public void process(Exchange exchange){exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE,COMMIT_MESSAGE)}})@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "fileToAdd1.createNewFile()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(status.getAdded().contains(FILENAME_BRANCH_TO_ADD))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "template.send(\"direct:commit\",new Processor(){@Override public void process(Exchange exchange){exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE,\"Test test Commit\")}})@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(COMMIT_MESSAGE,ex2.getOut().getBody().getShortMessage())@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Exchange ex2 = added.getExchanges().get(1)@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "template.send(\"direct:add\",new Processor(){@Override public void process(Exchange exchange){exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME,FILENAME_BRANCH_TO_ADD)}})@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "MockEndpoint added = getMockEndpoint(\"mock:result\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40->4 [style = bold, label=""];
36->6 [style = bold, label=""];
27->18 [style = bold, label=""];
4->7 [style = solid, label="count"];
22->2 [style = bold, label=""];
23->30 [style = bold, label=""];
6->34 [style = bold, label=""];
40->6 [style = bold, label=""];
45->18 [style = bold, label=""];
40->38 [style = solid, label="count"];
25->13 [style = bold, label=""];
35->42 [style = bold, label=""];
44->35 [style = bold, label=""];
4->39 [style = bold, label=""];
37->41 [style = bold, label=""];
6->4 [style = solid, label="count"];
18->15 [style = bold, label=""];
1->3 [style = bold, label=""];
18->19 [style = bold, label=""];
5->26 [style = bold, label=""];
15->32 [style = dashed, label="0"];
9->20 [style = bold, label=""];
0->21 [style = bold, label=""];
32->19 [style = bold, label=""];
41->1 [style = bold, label=""];
42->36 [style = bold, label=""];
15->19 [style = bold, label=""];
11->24 [style = bold, label=""];
12->1 [style = bold, label=""];
9->8 [style = solid, label="count"];
18->37 [style = solid, label="repository"];
40->4 [style = solid, label="count"];
26->11 [style = bold, label=""];
4->7 [style = bold, label=""];
12->37 [style = bold, label=""];
19->16 [style = bold, label=""];
43->40 [style = bold, label=""];
6->4 [style = bold, label=""];
3->23 [style = bold, label=""];
17->28 [style = bold, label=""];
20->8 [style = bold, label=""];
3->44 [style = bold, label=""];
6->38 [style = bold, label=""];
8->20 [style = bold, label=""];
8->12 [style = solid, label="count"];
36->38 [style = solid, label="count"];
36->40 [style = solid, label="count"];
33->18 [style = bold, label=""];
38->43 [style = dotted, label="true"];
23->44 [style = dashed, label="0"];
16->31 [style = bold, label=""];
18->32 [style = bold, label=""];
13->5 [style = bold, label=""];
6->34 [style = dotted, label="true"];
29->10 [style = bold, label=""];
10->9 [style = bold, label=""];
30->0 [style = bold, label=""];
7->25 [style = bold, label=""];
34->38 [style = bold, label=""];
31->17 [style = bold, label=""];
2->29 [style = bold, label=""];
38->40 [style = bold, label=""];
40->6 [style = solid, label="count"];
14->6 [style = bold, label=""];
8->12 [style = bold, label=""];
28->22 [style = bold, label=""];
38->43 [style = bold, label=""];
21->14 [style = bold, label=""];
36->6 [style = solid, label="count"];
}
