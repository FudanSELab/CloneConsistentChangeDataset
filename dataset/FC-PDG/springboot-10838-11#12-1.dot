digraph {
7 [style = filled, label = "dispatcherHandlerFields.addAll(handlerMethod)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "mappings['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "List<FieldDescriptor> handlerFunction = Arrays.asList(fieldWithPath(\"*.((.details.handlerFunction\").optional().type(JsonFieldType.OBJECT).description(\"Details of the function, if any, that will handle \" + \"requests to this mapping.\"),fieldWithPath(\"*.((.details.handlerFunction.className\").type(JsonFieldType.STRING).description(\"Fully qualified name of the class of the function.\"))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "mappings['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "List<FieldDescriptor> dispatcherServletFields = new ArrayList<>(Arrays.asList(fieldWithPath(\"*\").description(\"Dispatcher servlet mappings, if any, keyed by \" + \"dispatcher servlet bean name.\"),fieldWithPath(\"*.((.details\").optional().type(JsonFieldType.OBJECT).description(\"Additional implementation-specific \" + \"details about the mapping. Optional.\"),fieldWithPath(\"*.((.handler\").description(\"Handler for the mapping.\"),fieldWithPath(\"*.((.predicate\").description(\"Predicate for the mapping.\")))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "List<FieldDescriptor> dispatcherHandlerFields = new ArrayList<>(Arrays.asList(fieldWithPath(\"*\").description(\"Dispatcher handler mappings, if any, keyed by \" + \"dispatcher handler bean name.\"),fieldWithPath(\"*.((.details\").optional().type(JsonFieldType.OBJECT).description(\"Additional implementation-specific \" + \"details about the mapping. Optional.\"),fieldWithPath(\"*.((.handler\").description(\"Handler for the mapping.\"),fieldWithPath(\"*.((.predicate\").description(\"Predicate for the mapping.\")))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "dispatcherHandlerFields.addAll(handlerFunction)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "dispatcherHandlerFields.addAll(requestMappingConditions)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "mappings['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "this.client.get().uri(\"/actuator/mappings\").exchange().expectBody().consumeWith(document(\"mappings\",commonResponseFields,responseFields(beneathPath(\"contexts.*.mappings.dispatcherServlets\").withSubsectionId(\"dispatcher-servlets\"),dispatcherServletFields),responseFields(beneathPath(\"contexts.*.mappings.servletFilters\").withSubsectionId(\"servlet-filters\"),fieldWithPath(\"((.servletNameMappings\").description(\"Names of the servlets to which the filter is mapped.\"),fieldWithPath(\"((.urlPatternMappings\").description(\"URL pattern to which the filter is mapped.\"),fieldWithPath(\"((.name\").description(\"Name of the filter.\"),fieldWithPath(\"((.className\").description(\"Class name of the filter\")),responseFields(beneathPath(\"contexts.*.mappings.servlets\").withSubsectionId(\"servlets\"),fieldWithPath(\"((.mappings\").description(\"Mappings of the servlet.\"),fieldWithPath(\"((.name\").description(\"Name of the servlet.\"),fieldWithPath(\"((.className\").description(\"Class name of the servlet\"))))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "dispatcherServletFields.addAll(handlerMethod)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "ResponseFieldsSnippet commonResponseFields = responseFields(fieldWithPath(\"contexts\").description(\"Application contexts keyed by id.\"),fieldWithPath(\"contexts.*.mappings\").description(\"Mappings in the context, keyed by mapping type.\"),subsectionWithPath(\"contexts.*.mappings.dispatcherServlets\").description(\"Dispatcher servlet mappings, if any.\"),subsectionWithPath(\"contexts.*.mappings.servletFilters\").description(\"Servlet filter mappings, if any.\"),subsectionWithPath(\"contexts.*.mappings.servlets\").description(\"Servlet mappings, if any.\"),subsectionWithPath(\"contexts.*.mappings.dispatcherHandlers\").description(\"Dispatcher handler mappings, if any.\").optional().type(JsonFieldType.OBJECT),parentIdField())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "dispatcherServletFields.addAll(requestMappingConditions)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "List<FieldDescriptor> handlerMethod = Arrays.asList(fieldWithPath(\"*.((.details.handlerMethod\").optional().type(JsonFieldType.OBJECT).description(\"Details of the method, if any, \" + \"that will handle requests to this mapping.\"),fieldWithPath(\"*.((.details.handlerMethod.className\").type(JsonFieldType.STRING).description(\"Fully qualified name of the class of the method.\"),fieldWithPath(\"*.((.details.handlerMethod.name\").type(JsonFieldType.STRING).description(\"Name of the method.\"),fieldWithPath(\"*.((.details.handlerMethod.descriptor\").type(JsonFieldType.STRING).description(\"Descriptor of the method as specified in the Java \" + \"Language Specification.\"))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "this.client.get().uri(\"/actuator/mappings\").exchange().expectStatus().isOk().expectBody().consumeWith(document(\"mappings\",responseFields(beneathPath(\"contexts.*.mappings.dispatcherHandlers\").withSubsectionId(\"dispatcher-handlers\"),dispatcherHandlerFields)))@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "List<FieldDescriptor> handlerMethod = Arrays.asList(fieldWithPath(\"*.((.details.handlerMethod\").optional().type(JsonFieldType.OBJECT).description(\"Details of the method, if any, \" + \"that will handle requests to this mapping.\"),fieldWithPath(\"*.((.details.handlerMethod.className\").description(\"Fully qualified name of the class of the method.\"),fieldWithPath(\"*.((.details.handlerMethod.name\").description(\"Name of the method.\"),fieldWithPath(\"*.((.details.handlerMethod.descriptor\").description(\"Descriptor of the method as specified in the Java \" + \"Language Specification.\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "List<FieldDescriptor> requestMappingConditions = Arrays.asList(requestMappingConditionField(\"\").description(\"Details of the request mapping conditions.\").optional(),requestMappingConditionField(\".consumes\").description(\"Details of the consumes condition\"),requestMappingConditionField(\".consumes.((.mediaType\").description(\"Consumed media type.\"),requestMappingConditionField(\".consumes.((.negated\").description(\"Whether the media type is negated.\"),requestMappingConditionField(\".headers\").description(\"Details of the headers condition.\"),requestMappingConditionField(\".headers.((.name\").description(\"Name of the header.\"),requestMappingConditionField(\".headers.((.value\").description(\"Required value of the header, if any.\"),requestMappingConditionField(\".headers.((.negated\").description(\"Whether the value is negated.\"),requestMappingConditionField(\".methods\").description(\"HTTP methods that are handled.\"),requestMappingConditionField(\".params\").description(\"Details of the params condition.\"),requestMappingConditionField(\".params.((.name\").description(\"Name of the parameter.\"),requestMappingConditionField(\".params.((.value\").description(\"Required value of the parameter, if any.\"),requestMappingConditionField(\".params.((.negated\").description(\"Whether the value is negated.\"),requestMappingConditionField(\".patterns\").description(\"Patterns identifying the paths handled by the mapping.\"),requestMappingConditionField(\".produces\").description(\"Details of the produces condition.\"),requestMappingConditionField(\".produces.((.mediaType\").description(\"Produced media type.\"),requestMappingConditionField(\".produces.((.negated\").description(\"Whether the media type is negated.\"))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = solid, label="requestMappingConditions"];
11->1 [style = bold, label=""];
16->10 [style = bold, label=""];
15->12 [style = solid, label="commonResponseFields"];
1->3 [style = bold, label=""];
7->0 [style = bold, label=""];
4->2 [style = bold, label=""];
1->10 [style = solid, label="requestMappingConditions"];
3->13 [style = dashed, label="0"];
3->4 [style = bold, label=""];
1->13 [style = bold, label=""];
13->16 [style = bold, label=""];
13->16 [style = solid, label="handlerMethod"];
6->1 [style = bold, label=""];
3->7 [style = solid, label="handlerMethod"];
15->11 [style = bold, label=""];
2->8 [style = solid, label="dispatcherHandlerFields"];
10->12 [style = bold, label=""];
0->8 [style = bold, label=""];
5->7 [style = bold, label=""];
14->15 [style = bold, label=""];
11->12 [style = solid, label="dispatcherServletFields"];
9->1 [style = bold, label=""];
4->0 [style = solid, label="handlerFunction"];
2->5 [style = bold, label=""];
}
