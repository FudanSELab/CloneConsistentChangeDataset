digraph {
2 [style = filled, label = "final int size = 65536@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertTrue(loc.append(key,Platform.BYTE_ARRAY_OFFSET,key.length,value,Platform.BYTE_ARRAY_OFFSET,value.length))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "final Map<ByteBuffer,byte((> expected = new HashMap<>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertTrue(loc.isDefined())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expected.put(ByteBuffer.wrap(key),value)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "{map.free()}@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "final byte(( value = getRandomByteArray(rand.nextInt(128))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "int i = 0@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final Map<ByteBuffer,byte((> expected = new HashMap<>()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "!expected.containsKey(ByteBuffer.wrap(key))@@@12@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final byte(( value = entry.getValue()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertTrue(loc.putNewKey(key,Platform.BYTE_ARRAY_OFFSET,key.length,value,Platform.BYTE_ARRAY_OFFSET,value.length))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertTrue(loc.isDefined())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final byte(( key = JavaUtils.bufferToArray(entry.getKey())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager,64,pageSizeBytes)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final BytesToBytesMap.Location loc = map.lookup(key,Platform.BYTE_ARRAY_OFFSET,key.length)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(key.length,loc.getKeyLength())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final long pageSizeBytes = 128@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "randomizedTestWithRecordsLargerThanPageSize['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "{map.free()}@@@33@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(value.length,loc.getValueLength())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final byte(( value = getRandomByteArray(rand.nextInt(512) + 1)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertTrue(arrayEquals(key,loc.getKeyBase(),loc.getKeyOffset(),key.length))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertTrue(arrayEquals(value,loc.getValueBase(),loc.getValueOffset(),value.length))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "i++@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertTrue(arrayEquals(value,loc.getValueBase(),loc.getValueOffset(),loc.getValueLength()))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "i < 1000@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "i++@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "randomizedStressTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "final byte(( key = JavaUtils.bufferToArray(entry.getKey())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final byte(( key = getRandomByteArray(rand.nextInt(128))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertFalse(loc.isDefined())@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertTrue(arrayEquals(key,loc.getKeyBase(),loc.getKeyOffset(),loc.getKeyLength()))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int i = 0@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "!expected.containsKey(ByteBuffer.wrap(key))@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "randomizedStressTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final BytesToBytesMap.Location loc = map.lookup(key,Platform.BYTE_ARRAY_OFFSET,key.length)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->36 [style = dashed, label="0"];
18->35 [style = solid, label="i"];
12->5 [style = bold, label=""];
16->13 [style = dotted, label="true"];
29->30 [style = bold, label=""];
7->3 [style = solid, label="i"];
0->1 [style = solid, label="key"];
30->20 [style = bold, label=""];
12->8 [style = dotted, label="true"];
36->11 [style = solid, label="key"];
31->5 [style = solid, label="value"];
12->15 [style = dotted, label="true"];
9->15 [style = solid, label="key"];
31->14 [style = solid, label="value"];
35->12 [style = dotted, label="true"];
12->9 [style = bold, label=""];
9->35 [style = bold, label=""];
3->18 [style = bold, label=""];
33->0 [style = bold, label=""];
23->22 [style = solid, label="value"];
36->22 [style = solid, label="key"];
1->21 [style = bold, label=""];
11->13 [style = bold, label=""];
18->3 [style = dotted, label="true"];
16->5 [style = dotted, label="true"];
18->35 [style = bold, label=""];
2->25 [style = bold, label=""];
13->14 [style = bold, label=""];
27->2 [style = bold, label=""];
18->23 [style = dotted, label="true"];
18->9 [style = solid, label="i"];
31->32 [style = solid, label="value"];
16->3 [style = bold, label=""];
2->20 [style = solid, label="size"];
18->16 [style = dotted, label="true"];
33->28 [style = bold, label=""];
23->31 [style = dashed, label="0"];
36->31 [style = bold, label=""];
26->14 [style = bold, label=""];
22->32 [style = bold, label=""];
7->18 [style = solid, label="i"];
19->2 [style = bold, label=""];
13->26 [style = dashed, label="0"];
36->5 [style = solid, label="key"];
4->0 [style = bold, label=""];
12->11 [style = dotted, label="true"];
20->18 [style = bold, label=""];
35->0 [style = bold, label=""];
12->22 [style = dotted, label="true"];
18->4 [style = bold, label=""];
12->32 [style = dotted, label="true"];
23->13 [style = solid, label="value"];
12->6 [style = dotted, label="true"];
16->14 [style = dotted, label="true"];
18->9 [style = bold, label=""];
0->17 [style = solid, label="value"];
5->11 [style = bold, label=""];
20->7 [style = bold, label=""];
10->1 [style = bold, label=""];
16->11 [style = dotted, label="true"];
14->6 [style = bold, label=""];
11->26 [style = bold, label=""];
16->8 [style = dotted, label="true"];
34->29 [style = bold, label=""];
9->26 [style = solid, label="key"];
9->5 [style = solid, label="key"];
8->15 [style = bold, label=""];
4->21 [style = solid, label="key"];
23->12 [style = solid, label="value"];
10->33 [style = solid, label="value"];
29->30 [style = solid, label="pageSizeBytes"];
35->31 [style = dotted, label="true"];
31->12 [style = bold, label=""];
15->22 [style = bold, label=""];
3->18 [style = solid, label="i"];
32->9 [style = bold, label=""];
25->20 [style = bold, label=""];
12->13 [style = dotted, label="true"];
2->29 [style = dashed, label="0"];
18->9 [style = dotted, label="true"];
7->18 [style = bold, label=""];
9->12 [style = solid, label="key"];
17->4 [style = bold, label=""];
16->15 [style = dotted, label="true"];
23->16 [style = bold, label=""];
16->12 [style = dotted, label="true"];
4->10 [style = solid, label="key"];
35->36 [style = dotted, label="true"];
35->9 [style = dotted, label="true"];
17->33 [style = bold, label=""];
16->22 [style = dotted, label="true"];
18->35 [style = dashed, label="0"];
9->13 [style = solid, label="key"];
23->26 [style = solid, label="value"];
16->26 [style = dotted, label="true"];
36->14 [style = solid, label="key"];
9->23 [style = bold, label=""];
22->3 [style = bold, label=""];
0->17 [style = solid, label="key"];
12->14 [style = dotted, label="true"];
2->18 [style = solid, label="size"];
0->10 [style = bold, label=""];
17->24 [style = bold, label=""];
12->5 [style = dotted, label="true"];
6->8 [style = bold, label=""];
9->35 [style = solid, label="i"];
35->36 [style = bold, label=""];
16->12 [style = bold, label=""];
21->17 [style = bold, label=""];
16->6 [style = dotted, label="true"];
}
