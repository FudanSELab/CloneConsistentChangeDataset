digraph {
6 [style = filled, label = "assertEquals(\"data length field 2\",1,ze(1(.getLocalFileDataLength().getValue())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"mode field 1\",040755,((AsiExtraField)ze(0().getMode())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testParse['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertEquals(\"data length field 2\",4,ze(1(.getLocalFileDataLength().getValue())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "int i = 0@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "testParseWithRead['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertTrue(\"type field 1\",ze(0( instanceof AsiExtraField)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testParse['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(\"type field 1\",ze(0(,instanceOf())@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "thrown.expectMessage(\"bad extra field starting at \" + (4 + aLocal.length) + \". Block length of 1 bytes exceeds remaining data of 0 bytes.\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"number of fields\",2,ze.length)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "i++@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "ExtraFieldUtils.parse(data2)@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ze = ExtraFieldUtils.parse(data2,true,ExtraFieldUtils.UnparseableExtraField.READ)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(\"type field 2\",ze(1(,instanceOf())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertEquals(\"mode field 1\",040755,((AsiExtraField)ze(0().getMode())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertTrue(\"type field 2\",ze(1( instanceof UnparseableExtraFieldData)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(\"number of fields\",2,ze.length)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "System.arraycopy(data,0,data2,0,data2.length)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertTrue(\"type field 1\",ze(0( instanceof AsiExtraField)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ZipExtraField(( ze = ExtraFieldUtils.parse(data)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "thrown.expect()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "i < 4@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(\"type field 2\",ze(1( instanceof UnrecognizedExtraField)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ZipExtraField(( ze = ExtraFieldUtils.parse(data,true,ExtraFieldUtils.UnparseableExtraField.READ)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "byte(( data2 = new byte((((@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(\"byte number \" + i,data2(data.length - 5 + i(,ze(1(.getLocalFileDataData()(i()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->24 [style = bold, label=""];
22->5 [style = bold, label=""];
26->18 [style = bold, label=""];
13->7 [style = bold, label=""];
18->1 [style = solid, label="ze"];
4->2 [style = solid, label="ze"];
24->20 [style = solid, label="i"];
21->22 [style = bold, label=""];
20->16 [style = bold, label=""];
8->0 [style = bold, label=""];
2->7 [style = bold, label=""];
2->9 [style = solid, label="data2"];
24->20 [style = bold, label=""];
7->9 [style = bold, label=""];
25->19 [style = bold, label=""];
5->1 [style = bold, label=""];
4->5 [style = bold, label=""];
9->11 [style = solid, label="data2"];
24->16 [style = solid, label="i"];
6->13 [style = bold, label=""];
23->24 [style = solid, label="i"];
10->11 [style = bold, label=""];
0->3 [style = bold, label=""];
14->0 [style = bold, label=""];
19->23 [style = bold, label=""];
20->24 [style = dotted, label="true"];
20->16 [style = dotted, label="true"];
1->6 [style = bold, label=""];
11->9 [style = dashed, label="0"];
6->2 [style = bold, label=""];
2->7 [style = solid, label="data2"];
18->22 [style = solid, label="ze"];
2->16 [style = solid, label="data2"];
23->16 [style = solid, label="i"];
23->20 [style = bold, label=""];
17->25 [style = bold, label=""];
23->20 [style = solid, label="i"];
4->12 [style = solid, label="ze"];
4->13 [style = solid, label="ze"];
9->10 [style = solid, label="data2"];
1->12 [style = dashed, label="0"];
18->21 [style = bold, label=""];
5->12 [style = bold, label=""];
10->15 [style = bold, label=""];
9->25 [style = solid, label="ze"];
9->15 [style = solid, label="ze"];
4->1 [style = solid, label="ze"];
3->4 [style = bold, label=""];
12->6 [style = bold, label=""];
2->13 [style = dashed, label="0"];
9->10 [style = bold, label=""];
15->17 [style = bold, label=""];
}
