digraph {
30 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(2).getNodeName()))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(0).getNodeName()))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(1).getNodeName()))@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "params.set(\"routingPreference\",\"1\")@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertEquals(\"node1\",replicas.get(0).getNodeName())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "testNodePreferenceRulesBase['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "List<Replica> replicas = getBasicReplicaList()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertEquals(\"node3\",getHost(replicas.get(1).getNodeName()))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertEquals(\"node1\",replicas.get(0).getNodeName())@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertEquals(\"node1\",replicas.get(0).getNodeName())@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "params.add(ShardParams.SHARDS_PREFERENCE,rulesParam)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "rlt = generator.getReplicaListTransformer(params)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(\"node3\",replicas.get(0).getNodeName())@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
53 [style = filled, label = "assertEquals(\"node4\",replicas.get(2).getNodeName())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(1).getNodeName()))@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "rlt = generator.getReplicaListTransformer(params)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "rlt.transform(replicas)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\"@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "replicas.add(new Replica(\"node4\",map(ZkStateReader.BASE_URL_PROP,\"http://host2_2:8983/solr\",ZkStateReader.NODE_NAME_PROP,\"node4\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"TLOG\"),\"c1\",\"s1\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "rlt = generator.getReplicaListTransformer(params)@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(\"node2\",replicas.get(1).getNodeName())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "replicaTypeAndReplicaBase['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "assertEquals(\"node3\",replicas.get(3).getNodeName())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "ModifiableSolrParams params = new ModifiableSolrParams()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "rlt = generator.getReplicaListTransformer(params)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(0).getNodeName()))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "assertEquals(\"node5\",replicas.get(4).getNodeName())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(\"node2\",replicas.get(2).getNodeName())@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "rlt.transform(replicas)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "rlt.transform(replicas)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(\"node1\",replicas.get(1).getNodeName())@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
51 [style = filled, label = "assertEquals(\"node5\",replicas.get(3).getNodeName())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "params.add(\"routingPreference\",\"0\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "params.add(ShardParams.SHARDS_PREFERENCE,rulesParam)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(\"node3\",getHost(replicas.get(2).getNodeName()))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "assertEquals(\"node3\",getHost(replicas.get(2).getNodeName()))@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(\"node2\",replicas.get(0).getNodeName())@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
49 [style = filled, label = "assertEquals(\"node2\",replicas.get(2).getNodeName())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\"@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(\"node3\",replicas.get(2).getNodeName())@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "assertEquals(\"node3\",replicas.get(4).getNodeName())@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(\"node2\",replicas.get(1).getNodeName())@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
47 [style = filled, label = "replicas.add(new Replica(\"node5\",map(ZkStateReader.BASE_URL_PROP,\"http://host2_2:8983/solr\",ZkStateReader.NODE_NAME_PROP,\"node5\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"PULL\"),\"c1\",\"s1\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "params.add(\"routingPreference\",\"0\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "ReplicaListTransformer rlt = generator.getReplicaListTransformer(params)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(0).getNodeName()))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(1).getNodeName()))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "assertEquals(\"node3\",getHost(replicas.get(0).getNodeName()))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "testNodePreferenceRulesBase['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "params.set(\"routingPreference\",\"3\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(2).getNodeName()))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "assertEquals(\"node4\",replicas.get(1).getNodeName())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "rlt.transform(replicas)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "rlt.transform(replicas)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->39 [style = dashed, label="0"];
32->35 [style = bold, label=""];
17->25 [style = bold, label=""];
31->37 [style = bold, label=""];
16->0 [style = bold, label=""];
52->8 [style = bold, label=""];
25->22 [style = bold, label=""];
46->13 [style = bold, label=""];
49->51 [style = bold, label=""];
53->54 [style = bold, label=""];
0->38 [style = dashed, label="0"];
18->1 [style = solid, label="replicas"];
12->43 [style = dashed, label="0"];
21->26 [style = bold, label=""];
29->6 [style = bold, label=""];
18->44 [style = bold, label=""];
51->50 [style = bold, label=""];
23->17 [style = solid, label="params"];
48->43 [style = bold, label=""];
37->38 [style = bold, label=""];
26->15 [style = bold, label=""];
1->31 [style = bold, label=""];
44->47 [style = bold, label=""];
25->40 [style = bold, label=""];
4->16 [style = bold, label=""];
1->4 [style = bold, label=""];
24->41 [style = dashed, label="0"];
41->32 [style = bold, label=""];
16->37 [style = dashed, label="0"];
8->23 [style = bold, label=""];
39->34 [style = bold, label=""];
18->11 [style = bold, label=""];
11->20 [style = solid, label="rulesParam"];
5->17 [style = bold, label=""];
18->3 [style = solid, label="replicas"];
30->19 [style = bold, label=""];
23->13 [style = solid, label="params"];
23->29 [style = solid, label="params"];
34->36 [style = bold, label=""];
33->30 [style = bold, label=""];
28->24 [style = bold, label=""];
14->8 [style = bold, label=""];
2->33 [style = dashed, label="0"];
3->32 [style = dashed, label="0"];
12->34 [style = dashed, label="0"];
6->39 [style = bold, label=""];
24->3 [style = bold, label=""];
18->6 [style = solid, label="replicas"];
38->5 [style = bold, label=""];
20->13 [style = bold, label=""];
22->2 [style = bold, label=""];
26->53 [style = bold, label=""];
19->29 [style = bold, label=""];
42->8 [style = bold, label=""];
45->16 [style = bold, label=""];
27->36 [style = dashed, label="0"];
28->41 [style = bold, label=""];
18->25 [style = solid, label="replicas"];
40->33 [style = bold, label=""];
11->10 [style = bold, label=""];
46->28 [style = solid, label="rulesParam"];
3->21 [style = bold, label=""];
9->12 [style = bold, label=""];
21->35 [style = dashed, label="0"];
7->19 [style = bold, label=""];
12->27 [style = bold, label=""];
35->26 [style = bold, label=""];
23->18 [style = bold, label=""];
23->15 [style = solid, label="params"];
0->5 [style = bold, label=""];
15->1 [style = bold, label=""];
54->45 [style = bold, label=""];
10->20 [style = bold, label=""];
23->24 [style = solid, label="params"];
27->49 [style = dashed, label="0"];
22->40 [style = dashed, label="0"];
4->31 [style = dashed, label="0"];
47->46 [style = bold, label=""];
18->28 [style = solid, label="replicas"];
23->0 [style = solid, label="params"];
21->53 [style = dashed, label="0"];
7->30 [style = dashed, label="0"];
5->48 [style = bold, label=""];
43->49 [style = bold, label=""];
2->7 [style = bold, label=""];
6->9 [style = bold, label=""];
18->5 [style = solid, label="replicas"];
13->28 [style = bold, label=""];
}
