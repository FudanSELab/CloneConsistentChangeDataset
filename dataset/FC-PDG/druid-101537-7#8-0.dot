digraph {
26 [style = filled, label = "final PlannerFactory plannerFactory = new PlannerFactory(rootSchema,CalciteTests.createMockQueryLifecycleFactory(walker,conglomerate),operatorTable,macroTable,plannerConfig,CalciteTests.TEST_AUTHORIZER_MAPPER,CalciteTests.getJsonMapper(),CalciteTests.DRUID_SCHEMA_NAME)@@@41@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "final PlannerFactory plannerFactory = new PlannerFactory(rootSchema,CalciteTests.createMockQueryLifecycleFactory(walker,conglomerate),operatorTable,macroTable,plannerConfig,CalciteTests.TEST_AUTHORIZER_MAPPER,CalciteTests.getJsonMapper(),CalciteTests.DRUID_SCHEMA_NAME)@@@26@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "resource = new SqlResource(JSON_MAPPER,new SqlLifecycleFactory(plannerFactory,new NoopServiceEmitter(),testRequestLogger))@@@42@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "testRequestLogger = new TestRequestLogger()@@@40@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).anyTimes()@@@32@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "EasyMock.replay(req)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "EasyMock.expect(req.getRemoteAddr()).andReturn(null).once()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable()@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "setUp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).anyTimes()@@@23@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "req = EasyMock.createStrictMock()@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "executorService = MoreExecutors.listeningDecorator(Execs.multiThreaded(8,\"test_sql_resource_%s\"))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final ExprMacroTable macroTable = CalciteTests.createExprMacroTable()@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "req = EasyMock.createStrictMock()@@@30@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "final SchemaPlus rootSchema = CalciteTests.createMockRootSchema(conglomerate,walker,plannerConfig,CalciteTests.TEST_AUTHORIZER_MAPPER)@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "EasyMock.expect(req.getRemoteAddr()).andReturn(null).once()@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@22@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "return req@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final PlannerConfig plannerConfig = new PlannerConfig(){@Override public boolean shouldSerializeComplexValues(){return false}}@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "walker = CalciteTests.createMockWalker(conglomerate,temporaryFolder.newFolder(),scheduler)@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).anyTimes()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "EasyMock.replay(req)@@@24@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testRequestLogger = new TestRequestLogger()@@@25@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).anyTimes()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes()@@@33@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@37@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).anyTimes()@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "EasyMock.expect(req.getRemoteAddr()).andReturn(null).once()@@@31@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED,true)@@@36@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "HttpServletRequest req = EasyMock.createStrictMock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "executorService = MoreExecutors.listeningDecorator(Execs.multiThreaded(8,\"test_sql_resource_%s\"))@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final SchemaPlus rootSchema = CalciteTests.createMockRootSchema(conglomerate,walker,plannerConfig,CalciteTests.TEST_AUTHORIZER_MAPPER)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).anyTimes()@@@38@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).anyTimes()@@@35@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "final QueryScheduler scheduler = new QueryScheduler(5,ManualQueryPrioritizationStrategy.INSTANCE,new HiLoQueryLaningStrategy(40),new ServerConfig())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).anyTimes()@@@34@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes()@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "setUp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "final ExprMacroTable macroTable = CalciteTests.createExprMacroTable()@@@29@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "final PlannerConfig plannerConfig = new PlannerConfig(){@Override public boolean shouldSerializeComplexValues(){return false}}@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "walker = CalciteTests.createMockWalker(conglomerate,temporaryFolder.newFolder(),scheduler)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "EasyMock.replay(req)@@@39@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "final QueryScheduler scheduler = new QueryScheduler(5,ManualQueryPrioritizationStrategy.INSTANCE,new HiLoQueryLaningStrategy(40),new ServerConfig()){@Override public Sequence<T> run(Query<?> query,Sequence<T> resultSequence){return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@abcd9aquerynew LazySequence<T>(null)}}@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "makeExpectedReq['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).anyTimes()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable()@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED,true)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
12->6 [style = solid, label="plannerConfig"];
4->9 [style = bold, label=""];
17->8 [style = bold, label=""];
15->21 [style = dashed, label="0"];
0->16 [style = bold, label=""];
22->33 [style = bold, label=""];
10->15 [style = bold, label=""];
47->40 [style = bold, label=""];
5->8 [style = solid, label="plannerConfig"];
44->39 [style = solid, label="req"];
45->49 [style = bold, label=""];
14->26 [style = solid, label="walker"];
3->14 [style = bold, label=""];
30->27 [style = bold, label=""];
14->6 [style = solid, label="walker"];
16->7 [style = bold, label=""];
18->19 [style = bold, label=""];
39->43 [style = bold, label=""];
31->29 [style = bold, label=""];
34->31 [style = bold, label=""];
19->11 [style = bold, label=""];
8->6 [style = bold, label=""];
38->45 [style = bold, label=""];
5->18 [style = bold, label=""];
29->37 [style = bold, label=""];
42->48 [style = bold, label=""];
20->1 [style = bold, label=""];
46->39 [style = bold, label=""];
6->26 [style = solid, label="rootSchema"];
32->30 [style = bold, label=""];
12->6 [style = bold, label=""];
26->24 [style = bold, label=""];
1->18 [style = solid, label="walker"];
18->8 [style = solid, label="rootSchema"];
11->2 [style = bold, label=""];
7->3 [style = bold, label=""];
44->38 [style = bold, label=""];
17->6 [style = solid, label="testRequestLogger"];
12->26 [style = solid, label="plannerConfig"];
49->47 [style = bold, label=""];
48->46 [style = bold, label=""];
8->6 [style = solid, label="plannerFactory"];
36->21 [style = bold, label=""];
15->1 [style = solid, label="scheduler"];
13->17 [style = bold, label=""];
28->35 [style = bold, label=""];
1->8 [style = solid, label="walker"];
2->0 [style = bold, label=""];
23->22 [style = bold, label=""];
6->28 [style = bold, label=""];
34->33 [style = solid, label="req"];
12->4 [style = bold, label=""];
33->25 [style = bold, label=""];
25->24 [style = solid, label="testRequestLogger"];
15->20 [style = bold, label=""];
26->24 [style = solid, label="plannerFactory"];
14->12 [style = bold, label=""];
28->26 [style = solid, label="operatorTable"];
25->26 [style = bold, label=""];
19->8 [style = solid, label="operatorTable"];
37->32 [style = bold, label=""];
5->18 [style = solid, label="plannerConfig"];
27->23 [style = bold, label=""];
44->43 [style = solid, label="req"];
11->8 [style = solid, label="macroTable"];
35->34 [style = bold, label=""];
21->14 [style = solid, label="scheduler"];
41->44 [style = bold, label=""];
40->42 [style = bold, label=""];
2->13 [style = solid, label="req"];
35->26 [style = solid, label="macroTable"];
21->3 [style = bold, label=""];
9->13 [style = bold, label=""];
}
