digraph {
12 [style = filled, label = "j.jenkins.setSecurityRealm(j.createDummySecurityRealm())@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "a.grant(Jenkins.READ).everywhere().toEveryone()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "String resourceRootUrl = ResourceDomainConfiguration.get().getUrl()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "String resourceResponseUrl@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "{webClient.setRedirectEnabled(false)webClient.setThrowExceptionOnFailingStatusCode(false)Page page = webClient.getPage(resourceResponseUrl.replace(\"readme.txt\",\"\"))Assert.assertEquals(\"directory listing response\",200,page.getWebResponse().getStatusCode())String responseContent = page.getWebResponse().getContentAsString()Assert.assertTrue(\"directory listing shown\",responseContent.contains(\"readme.txt\"))Assert.assertTrue(\"is HTML\",responseContent.contains(\"href=\"))}@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(\"resource response success\",200,page.getWebResponse().getStatusCode())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertTrue(\"Served from resource domain\",resourceResponseUrl.contains(RESOURCE_DOMAIN))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertNull(\"no CSP headers\",page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertTrue(\"Served from resource action\",resourceResponseUrl.contains(\"static-files\"))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "JenkinsRule.WebClient webClient = j.createWebClient()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "String resourceResponseUrl = page.getUrl().toString()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "MockAuthorizationStrategy a = new MockAuthorizationStrategy()@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "webClient.setRedirectEnabled(true)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "secondDomainBasics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "{webClient.withRedirectEnabled(false).withThrowExceptionOnFailingStatusCode(false)Page page = webClient.getPage(resourceResponseUrl)resourceResponseUrl = page.getUrl().toString()Assert.assertEquals(\"resource response failed\",403,page.getWebResponse().getStatusCode())Assert.assertNull(\"no CSP headers\",page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"))Assert.assertTrue(\"Served from resource domain\",resourceResponseUrl.contains(RESOURCE_DOMAIN))}@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testColonUserName['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "MockAuthorizationStrategy a = new MockAuthorizationStrategy()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "JenkinsRule.WebClient webClient = j.createWebClient()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Page page = webClient.goTo(\"userContent/readme.txt\",\"text/plain\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "secondDomainBasics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "j.jenkins.setAuthorizationStrategy(a)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "a.grant(Jenkins.READ).onRoot().to(\"anonymous\")@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "j.jenkins.setAuthorizationStrategy(a)@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "{webClient.setThrowExceptionOnFailingStatusCode(false)String uuid = UUID.randomUUID().toString()Page page = webClient.getPage(resourceRootUrl + \"static-files/\" + uuid)Assert.assertEquals(\"resource response is 404\",404,page.getWebResponse().getStatusCode())Assert.assertTrue(\"response URL is still the same\",page.getUrl().toString().contains(uuid))}@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "{webClient.setRedirectEnabled(true)Page page = webClient.goTo(\"userContent/readme.txt\",\"text/plain\")resourceResponseUrl = page.getUrl().toString()Assert.assertEquals(\"resource response success\",200,page.getWebResponse().getStatusCode())Assert.assertNull(\"no CSP headers\",page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"))Assert.assertTrue(\"Served from resource domain\",resourceResponseUrl.contains(RESOURCE_DOMAIN))Assert.assertTrue(\"Served from resource action\",resourceResponseUrl.contains(\"static-files\"))}@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "j.jenkins.setSecurityRealm(j.createDummySecurityRealm())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "{Page page = webClient.goTo(\"userContent\")Assert.assertEquals(\"successful request\",200,page.getWebResponse().getStatusCode())Assert.assertTrue(\"still on the original URL\",page.getUrl().toString().contains(\"/userContent\"))Assert.assertTrue(\"web page\",page.isHtmlPage())Assert.assertTrue(\"complex web page\",page.getWebResponse().getContentAsString().contains(\"javascript\"))}@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "webClient.login(\"foo:bar\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "{webClient.setThrowExceptionOnFailingStatusCode(false)Page page = webClient.getPage(resourceRootUrl + \"/static-files/\")Assert.assertEquals(\"resource action index page response is 404\",404,page.getWebResponse().getStatusCode())}@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "{webClient.setThrowExceptionOnFailingStatusCode(false)Page page = webClient.getPage(resourceRootUrl)Assert.assertEquals(\"resource root URL response is 404\",404,page.getWebResponse().getStatusCode())}@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "{Page page = webClient.getPage(resourceResponseUrl)resourceResponseUrl = page.getUrl().toString()Assert.assertEquals(\"resource response success\",200,page.getWebResponse().getStatusCode())Assert.assertNull(\"no CSP headers\",page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"))Assert.assertTrue(\"Served from resource domain\",resourceResponseUrl.contains(RESOURCE_DOMAIN))Assert.assertTrue(\"Served from resource action\",resourceResponseUrl.contains(\"static-files\"))}@@@68@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8->16 [style = bold, label=""];
28->21 [style = solid, label="a"];
22->30 [style = bold, label=""];
13->15 [style = bold, label=""];
13->11 [style = solid, label="resourceResponseUrl"];
4->7 [style = bold, label=""];
18->20 [style = bold, label=""];
24->18 [style = bold, label=""];
1->6 [style = solid, label="resourceRootUrl"];
16->25 [style = bold, label=""];
25->19 [style = bold, label=""];
5->1 [style = bold, label=""];
12->4 [style = bold, label=""];
20->22 [style = bold, label=""];
17->14 [style = bold, label=""];
30->16 [style = bold, label=""];
21->29 [style = bold, label=""];
1->0 [style = solid, label="resourceRootUrl"];
10->3 [style = bold, label=""];
23->26 [style = bold, label=""];
7->13 [style = bold, label=""];
28->27 [style = bold, label=""];
15->11 [style = bold, label=""];
3->8 [style = bold, label=""];
26->28 [style = bold, label=""];
9->14 [style = bold, label=""];
6->12 [style = bold, label=""];
1->2 [style = solid, label="resourceRootUrl"];
16->5 [style = bold, label=""];
2->6 [style = bold, label=""];
4->7 [style = solid, label="a"];
16->13 [style = solid, label="resourceResponseUrl"];
29->24 [style = bold, label=""];
0->2 [style = bold, label=""];
14->10 [style = bold, label=""];
8->16 [style = solid, label="resourceResponseUrl"];
27->21 [style = bold, label=""];
1->0 [style = bold, label=""];
}
