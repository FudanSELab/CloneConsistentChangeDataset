digraph {
17 [style = filled, label = "testSerdeWithInterval['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(task.getInterval(),fromJson.getInterval())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final CompactionTask task = new CompactionTask(null,null,DATA_SOURCE,null,SEGMENTS,null,null,null,createTuningConfig(),ImmutableMap.of(\"testKey\",\"testContext\"),objectMapper,AuthTestUtils.TEST_AUTHORIZER_MAPPER,null,rowIngestionMetersFactory)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "final byte(( bytes = objectMapper.writeValueAsBytes(task)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(task.getDataSource(),fromJson.getDataSource())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testSerdeWithSegments['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final CompactionTask fromJson = objectMapper.readValue(bytes,)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(task.getTargetCompactionSizeBytes(),fromJson.getTargetCompactionSizeBytes())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "final CompactionTask task = new CompactionTask(null,null,DATA_SOURCE,null,SEGMENTS,null,null,createTuningConfig(),ImmutableMap.of(\"testKey\",\"testContext\"),objectMapper,AuthTestUtils.TEST_AUTHORIZER_MAPPER,null,rowIngestionMetersFactory)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(task.getType(),fromJson.getType())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertNull(fromJson.getSegmentProvider().getSegments())@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(task.getDimensionsSpec(),fromJson.getDimensionsSpec())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(task.getTuningConfig(),fromJson.getTuningConfig())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(task.isKeepSegmentGranularity(),fromJson.isKeepSegmentGranularity())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "final CompactionTask task = new CompactionTask(null,null,DATA_SOURCE,COMPACTION_INTERVAL,null,null,null,createTuningConfig(),ImmutableMap.of(\"testKey\",\"testContext\"),objectMapper,AuthTestUtils.TEST_AUTHORIZER_MAPPER,null,rowIngestionMetersFactory)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(task.getSegments(),fromJson.getSegments())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testSerdeWithSegments['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Assert.assertEquals(task.getContext(),fromJson.getContext())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->8 [style = bold, label=""];
0->4 [style = solid, label="bytes"];
8->10 [style = bold, label=""];
16->0 [style = bold, label=""];
10->15 [style = bold, label=""];
7->16 [style = dashed, label="0"];
7->0 [style = bold, label=""];
11->12 [style = bold, label=""];
5->14 [style = bold, label=""];
12->0 [style = bold, label=""];
1->9 [style = bold, label=""];
9->6 [style = bold, label=""];
6->2 [style = bold, label=""];
7->0 [style = solid, label="task"];
12->0 [style = solid, label="task"];
3->7 [style = bold, label=""];
0->4 [style = bold, label=""];
7->12 [style = dashed, label="0"];
4->1 [style = bold, label=""];
14->13 [style = bold, label=""];
13->8 [style = bold, label=""];
17->16 [style = bold, label=""];
2->5 [style = bold, label=""];
16->0 [style = solid, label="task"];
}
