digraph {
42 [style = filled, label = "final String url = StringUtils.format(\"%s://%s/druid/v2/\",scheme,host)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "types = Pair.of(baseType,bySegmentType)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "final JavaType queryResultType = isBySegment? toolChest.getBySegmentResultType(): toolChest.getBaseResultType()@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
71 [style = filled, label = "throw Throwables.propagate(e)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final long requestStartTimeNs = System.nanoTime()@@@26@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final Map<String,Object> context@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final String url = StringUtils.format(\"%s://%s/druid/v2/\",scheme,host)@@@22@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "final boolean usingBackpressure = maxQueuedBytes > 0@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
63 [style = filled, label = "IOException e@@@221@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "final long maxQueuedBytes = QueryContexts.getMaxQueuedBytes(query,0)@@@30@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "return ClientResponse.finished(new SequenceInputStream(new Enumeration<InputStream>(){@Override public boolean hasMoreElements(){synchronized (done) {return !done.get() || !queue.isEmpty()}}@Override public InputStream nextElement(){try {return queue.take()}catch (InterruptedException e) }}))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "log.error(e,\"Queue appending interrupted\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "final String cancelUrl = StringUtils.format(\"%s://%s/druid/v2/%s\",scheme,host,query.getId())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "final HttpResponseHandler<InputStream,InputStream> responseHandler = new HttpResponseHandler<InputStream,InputStream>(){private QueryMetrics<? super Query<T>> acquireResponseMetrics(){if (queryMetrics == null) {queryMetrics = toolChest.makeMetrics(query)queryMetrics.server(host)}return queryMetrics}private boolean enqueue(ChannelBuffer buffer,long chunkNum){final InputStreamHolder holder = InputStreamHolder.fromChannelBuffer(buffer,chunkNum)final long currentQueuedByteCount = queuedByteCount.addAndGet(holder.getLength())queue.put(holder)return !usingBackpressure || currentQueuedByteCount < maxQueuedBytes}private InputStream dequeue(){final InputStreamHolder holder = queue.poll(checkQueryTimeout(),TimeUnit.MILLISECONDS)if (holder == null) {throw new RE(\"Query(%s( url(%s( timed out.\",query.getId(),url)}final long currentQueuedByteCount = queuedByteCount.addAndGet(-holder.getLength())if (usingBackpressure && currentQueuedByteCount < maxQueuedBytes) {long backPressureTime = Preconditions.checkNotNull(trafficCopRef.get(),\"No TrafficCop, how can this be?\").resume(holder.getChunkNum())channelSuspendedTime.addAndGet(backPressureTime)}return holder.getStream()}@Override public ClientResponse<InputStream> handleResponse(HttpResponse response,TrafficCop trafficCop){trafficCopRef.set(trafficCop)checkQueryTimeout()checkTotalBytesLimit(response.getContent().readableBytes())log.debug(\"Initial response from url(%s( for queryId(%s(\",url,query.getId())responseStartTimeNs = System.nanoTime()acquireResponseMetrics().reportNodeTimeToFirstByte(responseStartTimeNs - requestStartTimeNs).emit(emitter)final boolean continueReadingtry {final String responseContext = response.headers().get(\"X-Druid-Response-Context\")if (responseContext != null) {context.putAll(objectMapper.readValue(responseContext,JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT))}continueReading = enqueue(response.getContent(),0L)}catch (final IOException e) catch (InterruptedException e) totalByteCount.addAndGet(response.getContent().readableBytes())return ClientResponse.finished(new SequenceInputStream(new Enumeration<InputStream>(){@Override public boolean hasMoreElements(){if (fail.get() != null) {throw new RE(fail.get())}checkQueryTimeout()synchronized (done) {return !done.get() || !queue.isEmpty()}}@Override public InputStream nextElement(){if (fail.get() != null) {throw new RE(fail.get())}try {return dequeue()}catch (InterruptedException e) }}),continueReading)}@Override public ClientResponse<InputStream> handleChunk(ClientResponse<InputStream> clientResponse,HttpChunk chunk,long chunkNum){checkQueryTimeout()final ChannelBuffer channelBuffer = chunk.getContent()final int bytes = channelBuffer.readableBytes()checkTotalBytesLimit(bytes)boolean continueReading = trueif (bytes > 0) {try {continueReading = enqueue(channelBuffer,chunkNum)}catch (InterruptedException e) totalByteCount.addAndGet(bytes)}return ClientResponse.finished(clientResponse.getObj(),continueReading)}@Override public ClientResponse<InputStream> done(ClientResponse<InputStream> clientResponse){long stopTimeNs = System.nanoTime()long nodeTimeNs = stopTimeNs - requestStartTimeNsfinal long nodeTimeMs = TimeUnit.NANOSECONDS.toMillis(nodeTimeNs)log.debug(\"Completed queryId(%s( request to url(%s( with %,d bytes returned in %,d millis (%,f b/s(.\",query.getId(),url,totalByteCount.get(),nodeTimeMs,totalByteCount.get() / (0.001 * nodeTimeMs))QueryMetrics<? super Query<T>> responseMetrics = acquireResponseMetrics()responseMetrics.reportNodeTime(nodeTimeNs)responseMetrics.reportNodeBytes(totalByteCount.get())if (usingBackpressure) {responseMetrics.reportBackPressureTime(channelSuspendedTime.get())}responseMetrics.emit(emitter)synchronized (done) {try {queue.put(InputStreamHolder.fromChannelBuffer(ChannelBuffers.EMPTY_BUFFER,Long.MAX_VALUE))}catch (InterruptedException e) {done.set(true)}}return ClientResponse.finished(clientResponse.getObj())}@Override public void exceptionCaught(final ClientResponse<InputStream> clientResponse,final Throwable e){String msg = StringUtils.format(\"Query(%s( url(%s( failed with exception msg (%s(\",query.getId(),url,e.getMessage())setupResponseReadFailure(msg,e)}private void setupResponseReadFailure(String msg,Throwable th){fail.set(msg)queue.clear()queue.offer(InputStreamHolder.fromStream(new InputStream(){@Override public int read(){if (th != null) {throw new IOException(msg,th)}{throw new IOException(msg)}}},-1,0))}private long checkQueryTimeout(){long timeLeft = timeoutAt - System.currentTimeMillis()if (timeLeft <= 0) {String msg = StringUtils.format(\"Query(%s( url(%s( timed out.\",query.getId(),url)setupResponseReadFailure(msg,null)throw new RE(msg)}{return timeLeft}}private void checkTotalBytesLimit(long bytes){if (maxScatterGatherBytes < Long.MAX_VALUE && totalBytesGathered.addAndGet(bytes) > maxScatterGatherBytes) {String msg = StringUtils.format(\"Query(%s( url(%s( max scatter-gather bytes limit reached.\",query.getId(),url)setupResponseReadFailure(msg,null)throw new RE(msg)}}}@@@32@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "InterruptedException e@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "return retVal@@@250@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "timeLeft <= 0@@@208@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "final QueryPlus<T> queryPlus@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
54 [style = filled, label = "Futures.addCallback(future,new FutureCallback<InputStream>(){@Override public void onSuccess(InputStream result){openConnections.getAndDecrement()}@Override public void onFailure(Throwable t){openConnections.getAndDecrement()if (future.isCancelled()) {try {StatusResponseHolder res = httpClient.go(new Request(HttpMethod.DELETE,new URL(cancelUrl)).setContent(objectMapper.writeValueAsBytes(query)).setHeader(HttpHeaders.Names.CONTENT_TYPE,isSmile? SmileMediaTypes.APPLICATION_JACKSON_SMILE: MediaType.APPLICATION_JSON),new StatusResponseHandler(StandardCharsets.UTF_8),Duration.standardSeconds(1)).get(1,TimeUnit.SECONDS)if (res.getStatus().getCode() >= 500) {throw new RE(\"Error cancelling query(%s(: queriable node returned status(%d( (%s(.\",res.getStatus().getCode(),res.getStatus().getReasonPhrase())}}catch (IOException|ExecutionException|InterruptedException|TimeoutException e) }}})@@@200@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
47 [style = filled, label = "future = httpClient.go(new Request(HttpMethod.POST,new URL(url)).setContent(objectMapper.writeValueAsBytes(QueryContexts.withTimeout(query,timeLeft))).setHeader(HttpHeaders.Names.CONTENT_TYPE,isSmile? SmileMediaTypes.APPLICATION_JACKSON_SMILE: MediaType.APPLICATION_JSON),responseHandler,Duration.millis(timeLeft))@@@197@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "return retVal@@@236@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "Thread.currentThread().interrupt()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "retVal = Sequences.map(retVal,toolChest.makePreComputeManipulatorFn(query,MetricManipulatorFns.deserializing()))@@@234@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "final Query<T> query = queryPlus.getQuery()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "run['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "log.debug(\"Querying queryId(%s( url(%s(\",query.getId(),url)@@@25@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Futures.addCallback(future,new FutureCallback<InputStream>(){@Override public void onSuccess(InputStream result){openConnections.getAndDecrement()}@Override public void onFailure(Throwable t){openConnections.getAndDecrement()if (future.isCancelled()) {try {StatusResponseHolder res = httpClient.go(new Request(HttpMethod.DELETE,new URL(cancelUrl)).setContent(objectMapper.writeValueAsBytes(query)).setHeader(HttpHeaders.Names.CONTENT_TYPE,isSmile? SmileMediaTypes.APPLICATION_JACKSON_SMILE: MediaType.APPLICATION_JSON),new StatusResponseHandler(StandardCharsets.UTF_8),Duration.standardSeconds(1)).get(1,TimeUnit.SECONDS)if (res.getStatus().getCode() >= 500) {throw new RE(\"Error cancelling query(%s(: queriable node returned status(%d( (%s(.\",res.getStatus().getCode(),res.getStatus().getReasonPhrase())}}catch (IOException|ExecutionException|InterruptedException|TimeoutException e) }}})@@@214@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "long timeLeft = timeoutAt - System.currentTimeMillis()@@@193@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
56 [style = filled, label = "final ListenableFuture<InputStream> future@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
59 [style = filled, label = "final long maxScatterGatherBytes = QueryContexts.getMaxScatterGatherBytes(query)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "throw new RE(\"Query(%s( url(%s( timed out.\",query.getId(),url)@@@209@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "isBySegment@@@15@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "final String cancelUrl = StringUtils.format(\"%s://%s/druid/v2/%s\",scheme,host,query.getId())@@@23@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "throw Throwables.propagate(e)@@@222@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "typeRef = types.rhs@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
66 [style = filled, label = "final AtomicLong totalBytesGathered = (AtomicLong)context.get(QUERY_TOTAL_BYTES_GATHERED)@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
45 [style = filled, label = "openConnections.getAndIncrement()@@@199@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Pair<JavaType,JavaType> types = typesMap.get(query.getClass())@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final long maxScatterGatherBytes = QueryContexts.getMaxScatterGatherBytes(query)@@@28@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final boolean usingBackpressure = maxQueuedBytes > 0@@@31@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "timeLeft <= 0@@@194@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "boolean isBySegment = QueryContexts.isBySegment(query)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final Map<String,Object> context@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final ListenableFuture<InputStream> future@@@21@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "!isBySegment@@@233@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "JavaType baseType = typeFactory.constructType(toolChest.getResultTypeReference())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
65 [style = filled, label = "final long maxQueuedBytes = QueryContexts.getMaxQueuedBytes(query,0)@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "QueryToolChest<T,Query<T>> toolChest = warehouse.getToolChest(query)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "run['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "queryWatcher.registerQuery(query,future)@@@212@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Sequence<T> retVal = new BaseSequence<>(new BaseSequence.IteratorMaker<T,JsonParserIterator<T>>(){@Override public JsonParserIterator<T> make(){return new JsonParserIterator<T>(typeRef,future,url,query,host,objectMapper,null)}@Override public void cleanup(JsonParserIterator<T> iterFromMake){CloseQuietly.close(iterFromMake)}})@@@238@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "openConnections.getAndIncrement()@@@213@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "IOException e@@@235@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "log.debug(\"Querying queryId(%s( url(%s(\",query.getId(),url)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "typeRef = types.lhs@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "final long timeoutAt = query.getContextValue(QUERY_FAIL_TIME)@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Sequence<T> retVal = new BaseSequence<>(new BaseSequence.IteratorMaker<T,JsonParserIterator<T>>(){@Override public JsonParserIterator<T> make(){return new JsonParserIterator<T>(queryResultType,future,url,query,host,objectMapper,null)}@Override public void cleanup(JsonParserIterator<T> iterFromMake){CloseQuietly.close(iterFromMake)}})@@@224@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "!isBySegment@@@247@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final AtomicLong totalBytesGathered = (AtomicLong)context.get(QUERY_TOTAL_BYTES_GATHERED)@@@29@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "JavaType bySegmentType = typeFactory.constructParametricType(,typeFactory.constructParametricType(,baseType))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "final HttpResponseHandler<InputStream,InputStream> responseHandler = new HttpResponseHandler<InputStream,InputStream>(){private QueryMetrics<? super Query<T>> acquireResponseMetrics(){if (queryMetrics == null) {queryMetrics = toolChest.makeMetrics(query)queryMetrics.server(host)}return queryMetrics}private boolean enqueue(ChannelBuffer buffer,long chunkNum){final InputStreamHolder holder = InputStreamHolder.fromChannelBuffer(buffer,chunkNum)final long currentQueuedByteCount = queuedByteCount.addAndGet(holder.getLength())queue.put(holder)return !usingBackpressure || currentQueuedByteCount < maxQueuedBytes}private InputStream dequeue(){final InputStreamHolder holder = queue.poll(checkQueryTimeout(),TimeUnit.MILLISECONDS)if (holder == null) {throw new RE(\"Query(%s( url(%s( timed out.\",query.getId(),url)}final long currentQueuedByteCount = queuedByteCount.addAndGet(-holder.getLength())if (usingBackpressure && currentQueuedByteCount < maxQueuedBytes) {long backPressureTime = Preconditions.checkNotNull(trafficCopRef.get(),\"No TrafficCop, how can this be?\").resume(holder.getChunkNum())channelSuspendedTime.addAndGet(backPressureTime)}return holder.getStream()}@Override public ClientResponse<InputStream> handleResponse(HttpResponse response,TrafficCop trafficCop){trafficCopRef.set(trafficCop)checkQueryTimeout()checkTotalBytesLimit(response.getContent().readableBytes())log.debug(\"Initial response from url(%s( for queryId(%s(\",url,query.getId())responseStartTimeNs = System.nanoTime()acquireResponseMetrics().reportNodeTimeToFirstByte(responseStartTimeNs - requestStartTimeNs).emit(emitter)final boolean continueReadingtry {final String responseContext = response.headers().get(\"X-Druid-Response-Context\")if (responseContext != null) {context.putAll(objectMapper.readValue(responseContext,JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT))}continueReading = enqueue(response.getContent(),0L)}catch (final IOException e) catch (InterruptedException e) totalByteCount.addAndGet(response.getContent().readableBytes())return ClientResponse.finished(new SequenceInputStream(new Enumeration<InputStream>(){@Override public boolean hasMoreElements(){if (fail.get() != null) {throw new RE(fail.get())}checkQueryTimeout()synchronized (done) {return !done.get() || !queue.isEmpty()}}@Override public InputStream nextElement(){if (fail.get() != null) {throw new RE(fail.get())}try {return dequeue()}catch (InterruptedException e) }}),continueReading)}@Override public ClientResponse<InputStream> handleChunk(ClientResponse<InputStream> clientResponse,HttpChunk chunk,long chunkNum){checkQueryTimeout()final ChannelBuffer channelBuffer = chunk.getContent()final int bytes = channelBuffer.readableBytes()checkTotalBytesLimit(bytes)boolean continueReading = trueif (bytes > 0) {try {continueReading = enqueue(channelBuffer,chunkNum)}catch (InterruptedException e) totalByteCount.addAndGet(bytes)}return ClientResponse.finished(clientResponse.getObj(),continueReading)}@Override public ClientResponse<InputStream> done(ClientResponse<InputStream> clientResponse){long stopTimeNs = System.nanoTime()long nodeTimeNs = stopTimeNs - requestStartTimeNsfinal long nodeTimeMs = TimeUnit.NANOSECONDS.toMillis(nodeTimeNs)log.debug(\"Completed queryId(%s( request to url(%s( with %,d bytes returned in %,d millis (%,f b/s(.\",query.getId(),url,totalByteCount.get(),nodeTimeMs,totalByteCount.get() / (0.001 * nodeTimeMs))QueryMetrics<? super Query<T>> responseMetrics = acquireResponseMetrics()responseMetrics.reportNodeTime(nodeTimeNs)responseMetrics.reportNodeBytes(totalByteCount.get())if (usingBackpressure) {responseMetrics.reportBackPressureTime(channelSuspendedTime.get())}responseMetrics.emit(emitter)synchronized (done) {try {queue.put(InputStreamHolder.fromChannelBuffer(ChannelBuffers.EMPTY_BUFFER,Long.MAX_VALUE))}catch (InterruptedException e) {done.set(true)}}return ClientResponse.finished(clientResponse.getObj())}@Override public void exceptionCaught(final ClientResponse<InputStream> clientResponse,final Throwable e){String msg = StringUtils.format(\"Query(%s( url(%s( failed with exception msg (%s(\",query.getId(),url,e.getMessage())setupResponseReadFailure(msg,e)}private void setupResponseReadFailure(String msg,Throwable th){fail.set(msg)queue.clear()queue.offer(InputStreamHolder.fromStream(new InputStream(){@Override public int read(){if (th != null) {throw new IOException(msg,th)}{throw new IOException(msg)}}},-1,0))}private long checkQueryTimeout(){long timeLeft = timeoutAt - System.currentTimeMillis()if (timeLeft <= 0) {String msg = StringUtils.format(\"Query(%s( url(%s( timed out.\",query.getId(),url)setupResponseReadFailure(msg,null)throw new RE(msg)}{return timeLeft}}private void checkTotalBytesLimit(long bytes){if (maxScatterGatherBytes < Long.MAX_VALUE && totalBytesGathered.addAndGet(bytes) > maxScatterGatherBytes) {String msg = StringUtils.format(\"Query(%s( url(%s( max scatter-gather bytes limit reached.\",query.getId(),url)setupResponseReadFailure(msg,null)throw new RE(msg)}}}@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
60 [style = filled, label = "throw new RE(\"Query(%s( url(%s( timed out.\",query.getId(),url)@@@195@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
76 [style = filled, label = "byteCount.addAndGet(response.getContent().readableBytes())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "final TypeFactory typeFactory = objectMapper.getTypeFactory()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "future = httpClient.go(new Request(HttpMethod.POST,new URL(url)).setContent(objectMapper.writeValueAsBytes(QueryContexts.withTimeout(query,timeLeft))).setHeader(HttpHeaders.Names.CONTENT_TYPE,isSmile? SmileMediaTypes.APPLICATION_JACKSON_SMILE: MediaType.APPLICATION_JSON),responseHandler,Duration.millis(timeLeft))@@@211@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "types == null@@@7@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
64 [style = filled, label = "queryWatcher.registerQuery(query,future)@@@198@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "final JavaType typeRef@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
72 [style = filled, label = "handleResponse['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "final long requestStartTimeNs = System.nanoTime()@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
67 [style = filled, label = "TrafficCop trafficCop@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "final long timeoutAt = query.getContextValue(QUERY_FAIL_TIME)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "typesMap.put(query.getClass(),types)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
75 [style = filled, label = "HttpResponse response@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "queue.put(new ChannelBufferInputStream(response.getContent()))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "long timeLeft = timeoutAt - System.currentTimeMillis()@@@207@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "retVal = Sequences.map(retVal,toolChest.makePreComputeManipulatorFn(query,MetricManipulatorFns.deserializing()))@@@248@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40->4 [style = bold, label=""];
17->25 [style = bold, label=""];
43->60 [style = bold, label=""];
69->76 [style = bold, label=""];
72->75 [style = dotted, label="true"];
20->9 [style = bold, label=""];
65->52 [style = solid, label="maxQueuedBytes"];
76->68 [style = bold, label=""];
36->29 [style = bold, label=""];
35->55 [style = solid, label="query"];
73->74 [style = bold, label=""];
7->35 [style = bold, label=""];
47->64 [style = solid, label="future"];
51->47 [style = solid, label="timeLeft"];
62->55 [style = bold, label=""];
35->19 [style = solid, label="query"];
57->41 [style = bold, label=""];
48->28 [style = solid, label="retVal"];
8->44 [style = bold, label=""];
32->6 [style = bold, label=""];
59->66 [style = bold, label=""];
21->28 [style = bold, label=""];
36->20 [style = dotted, label="true"];
48->62 [style = bold, label=""];
42->48 [style = solid, label="url"];
35->23 [style = bold, label=""];
70->73 [style = bold, label=""];
60->47 [style = bold, label=""];
63->61 [style = dotted, label="true"];
18->16 [style = solid, label="maxQueuedBytes"];
34->26 [style = bold, label=""];
33->18 [style = bold, label=""];
3->6 [style = solid, label="url"];
35->48 [style = solid, label="query"];
11->33 [style = bold, label=""];
25->15 [style = bold, label=""];
39->38 [style = bold, label=""];
39->4 [style = solid, label="future"];
13->37 [style = dotted, label="true"];
39->40 [style = solid, label="future"];
31->39 [style = solid, label="timeLeft"];
4->1 [style = solid, label="retVal"];
44->48 [style = solid, label="queryResultType"];
19->39 [style = solid, label="responseHandler"];
46->58 [style = dotted, label="true"];
34->26 [style = solid, label="bySegmentType"];
46->30 [style = dotted, label="true"];
13->27 [style = dotted, label="false"];
47->64 [style = bold, label=""];
36->9 [style = bold, label=""];
11->19 [style = solid, label="maxScatterGatherBytes"];
8->13 [style = solid, label="isBySegment"];
12->11 [style = bold, label=""];
47->48 [style = solid, label="future"];
41->49 [style = bold, label=""];
23->8 [style = bold, label=""];
16->19 [style = bold, label=""];
21->28 [style = dotted, label="true"];
70->71 [style = dotted, label="true"];
51->43 [style = solid, label="timeLeft"];
48->55 [style = solid, label="retVal"];
4->0 [style = bold, label=""];
61->48 [style = bold, label=""];
13->37 [style = bold, label=""];
64->45 [style = bold, label=""];
43->47 [style = bold, label=""];
10->34 [style = bold, label=""];
70->73 [style = dotted, label="true"];
3->4 [style = solid, label="url"];
35->50 [style = solid, label="query"];
35->18 [style = solid, label="query"];
8->44 [style = solid, label="isBySegment"];
62->28 [style = bold, label=""];
3->25 [style = solid, label="url"];
35->23 [style = solid, label="query"];
31->32 [style = solid, label="timeLeft"];
43->60 [style = dotted, label="true"];
35->59 [style = solid, label="query"];
15->12 [style = bold, label=""];
36->29 [style = dotted, label="true"];
6->39 [style = bold, label=""];
24->3 [style = bold, label=""];
26->20 [style = bold, label=""];
16->19 [style = solid, label="usingBackpressure"];
14->36 [style = bold, label=""];
66->65 [style = bold, label=""];
38->5 [style = bold, label=""];
7->2 [style = dotted, label="true"];
10->26 [style = solid, label="baseType"];
26->20 [style = solid, label="types"];
44->56 [style = bold, label=""];
37->24 [style = bold, label=""];
72->69 [style = bold, label=""];
62->55 [style = dotted, label="true"];
59->50 [style = solid, label="maxScatterGatherBytes"];
32->6 [style = dotted, label="true"];
14->36 [style = solid, label="types"];
31->32 [style = bold, label=""];
8->14 [style = bold, label=""];
35->65 [style = solid, label="query"];
35->11 [style = solid, label="query"];
71->76 [style = bold, label=""];
72->67 [style = dotted, label="true"];
13->27 [style = bold, label=""];
42->50 [style = solid, label="url"];
65->52 [style = bold, label=""];
10->34 [style = solid, label="baseType"];
42->57 [style = bold, label=""];
0->1 [style = bold, label=""];
65->50 [style = solid, label="maxQueuedBytes"];
47->54 [style = solid, label="future"];
46->35 [style = bold, label=""];
29->10 [style = bold, label=""];
3->17 [style = bold, label=""];
52->50 [style = bold, label=""];
27->24 [style = bold, label=""];
39->38 [style = solid, label="future"];
32->39 [style = bold, label=""];
51->43 [style = bold, label=""];
22->1 [style = bold, label=""];
63->61 [style = bold, label=""];
5->40 [style = bold, label=""];
35->8 [style = solid, label="query"];
52->50 [style = solid, label="usingBackpressure"];
50->47 [style = solid, label="responseHandler"];
36->26 [style = dotted, label="true"];
53->51 [style = solid, label="timeoutAt"];
18->16 [style = bold, label=""];
3->19 [style = solid, label="url"];
19->31 [style = bold, label=""];
42->60 [style = solid, label="url"];
42->41 [style = solid, label="url"];
74->71 [style = bold, label=""];
55->28 [style = solid, label="retVal"];
54->48 [style = bold, label=""];
27->4 [style = solid, label="typeRef"];
4->22 [style = solid, label="retVal"];
12->31 [style = solid, label="timeoutAt"];
56->42 [style = bold, label=""];
0->22 [style = dotted, label="true"];
37->4 [style = solid, label="typeRef"];
36->10 [style = dotted, label="true"];
49->53 [style = bold, label=""];
45->54 [style = bold, label=""];
18->19 [style = solid, label="maxQueuedBytes"];
53->59 [style = bold, label=""];
35->4 [style = solid, label="query"];
15->19 [style = solid, label="requestStartTimeNs"];
12->19 [style = solid, label="timeoutAt"];
0->22 [style = bold, label=""];
35->22 [style = solid, label="query"];
50->51 [style = bold, label=""];
70->74 [style = dotted, label="true"];
53->50 [style = solid, label="timeoutAt"];
49->50 [style = solid, label="requestStartTimeNs"];
7->30 [style = dotted, label="true"];
36->34 [style = dotted, label="true"];
22->1 [style = solid, label="retVal"];
35->64 [style = solid, label="query"];
35->38 [style = solid, label="query"];
55->28 [style = bold, label=""];
28->4 [style = bold, label=""];
9->13 [style = bold, label=""];
}
