digraph {
14 [style = filled, label = "@NonNull Comparator<? super T> comparator@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "toSortedList['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "@NonNull Comparator<? super T> comparator@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ParallelFlowable<List<T>> railSorted = railReduced.map(new SorterFunction<T>(comparator))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Objects.requireNonNull(comparator,\"comparator is null\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "return RxJavaPlugins.onAssembly(new ParallelSortedJoin<T>(railSorted,comparator))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "ParallelFlowable<List<T>> railReduced = reduce(Functions.createArrayList(ch),ListAddBiConsumer.instance())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "@NonNull Comparator<? super T> comparator@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "return RxJavaPlugins.onAssembly(new ParallelSortedJoin<>(railSorted,comparator))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "sorted['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "return RxJavaPlugins.onAssembly(merged)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "sorted['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "int ch = capacityHint / parallelism() + 1@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Flowable<List<T>> merged = railSorted.reduce(new MergerBiFunction<T>(comparator))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "int capacityHint@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "int capacityHint@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ObjectHelper.verifyPositive(capacityHint,\"capacityHint\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
7->2 [style = dotted, label="true"];
13->16 [style = dotted, label="true"];
16->0 [style = solid, label="capacityHint"];
11->10 [style = dotted, label="true"];
11->4 [style = bold, label=""];
0->5 [style = solid, label="ch"];
6->9 [style = solid, label="railSorted"];
15->12 [style = solid, label="merged"];
7->4 [style = bold, label=""];
1->4 [style = solid, label="comparator"];
14->6 [style = solid, label="comparator"];
10->6 [style = solid, label="comparator"];
10->4 [style = solid, label="comparator"];
6->15 [style = bold, label=""];
16->8 [style = solid, label="capacityHint"];
8->0 [style = bold, label=""];
2->0 [style = solid, label="capacityHint"];
11->2 [style = dotted, label="true"];
10->9 [style = solid, label="comparator"];
2->8 [style = solid, label="capacityHint"];
14->15 [style = solid, label="comparator"];
5->6 [style = bold, label=""];
3->9 [style = dashed, label="0"];
1->6 [style = solid, label="comparator"];
2->16 [style = dashed, label="0"];
4->8 [style = bold, label=""];
15->12 [style = bold, label=""];
6->9 [style = bold, label=""];
6->3 [style = solid, label="railSorted"];
7->1 [style = dotted, label="true"];
13->14 [style = dotted, label="true"];
14->4 [style = solid, label="comparator"];
0->5 [style = bold, label=""];
13->4 [style = bold, label=""];
1->3 [style = solid, label="comparator"];
}
