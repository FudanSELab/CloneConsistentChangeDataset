digraph {
9 [style = filled, label = "taskManager.handleAssignment(emptyMap(),emptyMap())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "taskManager.handleAssignment(Collections.emptyMap(),taskId00Assignment)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "shouldCloseStandbyUnassignedTasksWhenCreatingNewTasks['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "expect(standbyTaskCreator.createTasks(eq(taskId00Assignment))).andReturn(singletonList(task00)).anyTimes()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertThat(task00.state(),is(Task.State.RUNNING))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()),is(true))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "taskManager.handleAssignment(emptyMap(),taskId00Assignment)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "shouldNotCommitOffsetsIfOnlyStandbyTasksAssigned['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "expectRestoreToBeCompleted(consumer,changeLogReader)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "replay(activeTaskCreator,standbyTaskCreator,consumer,changeLogReader)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final StateMachineTask task00 = new StateMachineTask(taskId00,taskId00Partitions,false)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "expect(standbyTaskCreator.createTasks(eq(taskId00Assignment))).andReturn(singletonList(task00)).anyTimes()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "consumer.commitSync(Collections.emptyMap())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final Task task00 = new StateMachineTask(taskId00,taskId00Partitions,false)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(taskManager.commitAll(),equalTo(1))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "expect(standbyTaskCreator.createTasks(eq(taskId00Assignment))).andStubReturn(singletonList(task00))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertThat(task00.commitNeeded,is(false))@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "shouldCloseStandbyUnassignedTasksWhenCreatingNewTasks['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(task00.state(),is(Task.State.CLOSED))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.anEmptyMap())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "task00.setCommitNeeded()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "expectLastCall()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->18 [style = dashed, label="0"];
21->10 [style = bold, label=""];
19->18 [style = bold, label=""];
20->13 [style = bold, label=""];
9->11 [style = bold, label=""];
2->3 [style = bold, label=""];
11->4 [style = bold, label=""];
12->17 [style = dashed, label="0"];
0->1 [style = dashed, label="0"];
3->6 [style = bold, label=""];
3->22 [style = dashed, label="0"];
1->0 [style = bold, label=""];
16->17 [style = bold, label=""];
10->7 [style = bold, label=""];
13->1 [style = bold, label=""];
12->14 [style = solid, label="task00"];
7->9 [style = bold, label=""];
12->2 [style = bold, label=""];
0->10 [style = bold, label=""];
17->2 [style = bold, label=""];
22->20 [style = bold, label=""];
11->19 [style = dashed, label="0"];
1->21 [style = bold, label=""];
6->13 [style = bold, label=""];
2->14 [style = bold, label=""];
15->12 [style = bold, label=""];
3->14 [style = dashed, label="0"];
2->22 [style = bold, label=""];
7->19 [style = bold, label=""];
4->5 [style = bold, label=""];
14->6 [style = bold, label=""];
8->12 [style = bold, label=""];
}
