digraph {
2 [style = filled, label = "Assert.assertEquals(serializedDoubleFilter,serialized)@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "IntStream.range(0,floatValues1.length).forEach(null)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "IntStream.range(0,doubleValues1.length).forEach(null)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "DoubleBloomFilterAggregator agg = new DoubleBloomFilterAggregator(selector,MAX_NUM_VALUES,true)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testBufferAggregateDoubleValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "testBufferAggregateDoubleValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "TestFloatColumnSelector selector = new TestFloatColumnSelector(Arrays.asList(floatValues1))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "int maxSize = valueAggregatorFactory.getMaxIntermediateSizeWithNulls()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "TestDoubleColumnSelector selector = new TestDoubleColumnSelector(Arrays.asList(doubleValues1))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "IntStream.range(0,DOUBLE_VALUES1.length).forEach(null)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "agg.init(buf,pos)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "FloatBloomFilterAggregator agg = new FloatBloomFilterAggregator(selector,maxNumValues,true)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ByteBuffer buf = ByteBuffer.allocate(maxSize + 64)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "DoubleBloomFilterAggregator agg = new DoubleBloomFilterAggregator(selector,maxNumValues,true)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "testBufferAggregateFloatValues['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(serializedFloatFilter,serialized)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "int pos = 10@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TestDoubleColumnSelector selector = new TestDoubleColumnSelector(Arrays.asList(DOUBLE_VALUES1))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "buf.limit(pos + maxSize)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "String serialized = filterToString(bloomKFilter)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "BloomKFilter bloomKFilter = BloomKFilter.deserialize((ByteBuffer)valueAggregatorFactory.finalizeComputation(agg.get(buf,pos)))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->17 [style = solid, label="serialized"];
16->0 [style = bold, label=""];
5->12 [style = dashed, label="0"];
7->17 [style = bold, label=""];
0->6 [style = bold, label=""];
11->16 [style = dashed, label="0"];
9->4 [style = bold, label=""];
18->19 [style = bold, label=""];
9->20 [style = bold, label=""];
0->6 [style = solid, label="maxSize"];
2->17 [style = dashed, label="0"];
1->9 [style = bold, label=""];
8->7 [style = bold, label=""];
19->16 [style = bold, label=""];
10->9 [style = solid, label="pos"];
12->13 [style = bold, label=""];
3->5 [style = bold, label=""];
6->9 [style = solid, label="buf"];
12->13 [style = solid, label="selector"];
11->0 [style = bold, label=""];
20->8 [style = bold, label=""];
11->13 [style = dashed, label="0"];
19->16 [style = solid, label="selector"];
4->20 [style = dashed, label="0"];
7->2 [style = bold, label=""];
6->10 [style = bold, label=""];
9->14 [style = bold, label=""];
7->2 [style = solid, label="serialized"];
10->1 [style = solid, label="pos"];
6->8 [style = solid, label="buf"];
4->8 [style = bold, label=""];
4->14 [style = dashed, label="0"];
5->11 [style = bold, label=""];
8->7 [style = solid, label="bloomKFilter"];
14->8 [style = bold, label=""];
15->12 [style = bold, label=""];
0->1 [style = solid, label="maxSize"];
5->11 [style = solid, label="selector"];
10->1 [style = bold, label=""];
5->19 [style = dashed, label="0"];
10->8 [style = solid, label="pos"];
13->0 [style = bold, label=""];
}
