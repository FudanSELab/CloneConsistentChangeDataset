digraph {
8 [style = filled, label = "literal.getTypeName()@@@20@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "havingExpr || !validator.getConformance().isGroupByOrdinal()@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "throw newValidationError(literal,RESOURCE.orderByOrdinalOutOfRange())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "List<SqlNode> operandList = ((SqlBasicCall)root).getOperandList()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "intValue < 1 || intValue > select.getSelectList().size()@@@23@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "intValue < 1 || intValue > aliasList.size()@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "literal.getTypeName()@@@4@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "throw validator.newValidationError(literal,RESOURCE.orderByOrdinalOutOfRange())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "SqlLiteral literal@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "root.getKind()@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "isOrdinalLiteral@@@19@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "operandList@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "node.equals(literal)@@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "intValue >= 0@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "SqlNode node@@@10@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "int ordinal = intValue - 1@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "isOrdinalLiteral = true@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10da854literal@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "final int intValue = literal.intValue(false)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final int intValue = literal.intValue(false)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "int ordinal = intValue - 1@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "boolean isOrdinalLiteral = literal == root@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "SqlNode node@@@10@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "intValue >= 0@@@22@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "literal == root && getConformance().isSortByOrdinal()@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "return SqlUtil.stripAs(select.getSelectList().get(ordinal))@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "root instanceof SqlBasicCall@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10da7fcliteral@@@32@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10da781literal@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "visit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "visit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "visit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "return nthSelectItem(ordinal,literal.getParserPosition())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "return select.getSelectList().get(ordinal)@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30->31 [style = solid, label="ordinal"];
5->3 [style = bold, label=""];
25->33 [style = bold, label=""];
32->30 [style = solid, label="intValue"];
25->30 [style = bold, label=""];
6->1 [style = dotted, label="true"];
18->20 [style = dotted, label="true"];
0->6 [style = dotted, label="true"];
29->26 [style = dotted, label="true"];
7->8 [style = bold, label=""];
0->15 [style = bold, label=""];
2->23 [style = bold, label=""];
13->17 [style = bold, label=""];
5->28 [style = dashed, label="0"];
26->30 [style = dotted, label="true"];
32->26 [style = solid, label="intValue"];
2->14 [style = bold, label=""];
8->0 [style = dotted, label="true"];
2->14 [style = solid, label="ordinal"];
18->13 [style = dotted, label="true"];
24->28 [style = bold, label=""];
13->17 [style = dotted, label="true"];
19->18 [style = bold, label=""];
17->7 [style = solid, label="isOrdinalLiteral"];
11->7 [style = solid, label="isOrdinalLiteral"];
18->16 [style = dotted, label="true"];
3->11 [style = bold, label=""];
5->3 [style = dotted, label="true"];
32->26 [style = bold, label=""];
12->6 [style = solid, label="intValue"];
6->2 [style = bold, label=""];
28->29 [style = dotted, label="true"];
26->27 [style = bold, label=""];
21->9 [style = dotted, label="true"];
8->12 [style = dotted, label="true"];
31->27 [style = bold, label=""];
29->32 [style = bold, label=""];
33->30 [style = bold, label=""];
0->14 [style = dotted, label="true"];
14->15 [style = bold, label=""];
5->11 [style = bold, label=""];
18->7 [style = bold, label=""];
7->8 [style = dotted, label="true"];
29->32 [style = dotted, label="true"];
12->2 [style = solid, label="intValue"];
1->33 [style = dashed, label="0"];
28->29 [style = bold, label=""];
9->1 [style = solid, label="literal"];
12->0 [style = solid, label="intValue"];
9->28 [style = solid, label="literal"];
9->33 [style = solid, label="literal"];
19->18 [style = dotted, label="true"];
23->15 [style = bold, label=""];
18->10 [style = dotted, label="true"];
6->1 [style = bold, label=""];
21->5 [style = bold, label=""];
26->31 [style = dotted, label="true"];
14->23 [style = dashed, label="0"];
9->11 [style = solid, label="literal"];
18->10 [style = bold, label=""];
10->13 [style = bold, label=""];
30->31 [style = bold, label=""];
9->3 [style = solid, label="literal"];
32->25 [style = solid, label="intValue"];
7->15 [style = bold, label=""];
0->23 [style = dotted, label="true"];
1->2 [style = bold, label=""];
9->27 [style = solid, label="literal"];
2->23 [style = solid, label="ordinal"];
4->5 [style = bold, label=""];
8->12 [style = bold, label=""];
18->22 [style = dotted, label="true"];
25->33 [style = dotted, label="true"];
0->6 [style = bold, label=""];
26->25 [style = dotted, label="true"];
26->25 [style = bold, label=""];
24->9 [style = dotted, label="true"];
11->19 [style = bold, label=""];
9->15 [style = solid, label="literal"];
12->0 [style = bold, label=""];
9->13 [style = solid, label="literal"];
17->7 [style = bold, label=""];
6->25 [style = dashed, label="0"];
13->7 [style = bold, label=""];
28->27 [style = bold, label=""];
0->2 [style = dotted, label="true"];
4->9 [style = dotted, label="true"];
}
