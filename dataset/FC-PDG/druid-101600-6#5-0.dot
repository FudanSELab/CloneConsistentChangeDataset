digraph {
2 [style = filled, label = "testQuery(\"SELECT \" + \"ANY_VALUE(cnt), ANY_VALUE(m1), ANY_VALUE(m2), ANY_VALUE(dim1, 10), \" + \"ANY_VALUE(cnt + 1), ANY_VALUE(m1 + 1), ANY_VALUE(dim1 || CAST(cnt AS VARCHAR), 10) \" + \"FROM druid.foo\",ImmutableList.of(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).granularity(Granularities.ALL).virtualColumns(expressionVirtualColumn(\"v0\",\"(\"cnt\" + 1)\",ValueType.LONG),expressionVirtualColumn(\"v1\",\"(\"m1\" + 1)\",ValueType.FLOAT),expressionVirtualColumn(\"v2\",\"concat(\"dim1\",CAST(\"cnt\", 'STRING'))\",ValueType.STRING)).aggregators(aggregators(new LongAnyAggregatorFactory(\"a0\",\"cnt\"),new FloatAnyAggregatorFactory(\"a1\",\"m1\"),new DoubleAnyAggregatorFactory(\"a2\",\"m2\"),new StringAnyAggregatorFactory(\"a3\",\"dim1\",10),new LongAnyAggregatorFactory(\"a4\",\"v0\"),new FloatAnyAggregatorFactory(\"a5\",\"v1\"),new StringAnyAggregatorFactory(\"a6\",\"v2\",10))).context(TIMESERIES_CONTEXT_DEFAULT).build()),NullHandling.sqlCompatible()? ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a920f2): ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a920ff))@@@4@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testAnyAggregator['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "testQuery(\"SELECT \" + \"EARLIEST(cnt), EARLIEST(m1), EARLIEST(dim1, 10), \" + \"EARLIEST(cnt + 1), EARLIEST(m1 + 1), EARLIEST(dim1 || CAST(cnt AS VARCHAR), 10) \" + \"FROM druid.foo\",ImmutableList.of(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).granularity(Granularities.ALL).virtualColumns(expressionVirtualColumn(\"v0\",\"(\"cnt\" + 1)\",ValueType.LONG),expressionVirtualColumn(\"v1\",\"(\"m1\" + 1)\",ValueType.FLOAT),expressionVirtualColumn(\"v2\",\"concat(\"dim1\",CAST(\"cnt\", 'STRING'))\",ValueType.STRING)).aggregators(aggregators(new LongFirstAggregatorFactory(\"a0\",\"cnt\"),new FloatFirstAggregatorFactory(\"a1\",\"m1\"),new StringFirstAggregatorFactory(\"a2\",\"dim1\",10),new LongFirstAggregatorFactory(\"a3\",\"v0\"),new FloatFirstAggregatorFactory(\"a4\",\"v1\"),new StringFirstAggregatorFactory(\"a5\",\"v2\",10))).context(TIMESERIES_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a9216d))@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testAnyAggregator['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testEarliestAggregators['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "skipVectorize()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->4 [style = dashed, label="0"];
1->2 [style = bold, label=""];
0->1 [style = bold, label=""];
3->1 [style = bold, label=""];
1->4 [style = bold, label=""];
5->1 [style = bold, label=""];
}
