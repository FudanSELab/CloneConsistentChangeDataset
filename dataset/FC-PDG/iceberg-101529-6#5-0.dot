digraph {
4 [style = filled, label = "return Expressions.predicate(predicate.op(),name)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "return Expressions.predicate(predicate.op(),name,apply(predicate.asLiteralPredicate().literal().value()))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "predicate.isUnaryPredicate()@@@6@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "return Expressions.predicate(pred.op(),name,apply(pred.literal().value()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "return null@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "predicate.isSetPredicate() && predicate.op() == Expression.Operation.NOT_IN@@@12@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "pred.op()@@@11@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "BoundPredicate<T> predicate@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "return null@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "predicate.term() instanceof BoundTransform@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "String name@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String name@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "predicate.isLiteralPredicate() && predicate.op() == Expression.Operation.NOT_EQ@@@9@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "return Expressions.predicate(pred.op(),name,apply(pred.literal().value()))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "String name@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "predicate instanceof BoundLiteralPredicate@@@9@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "project['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "return null@@@16@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "BoundPredicate<T> predicate@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "predicate instanceof BoundUnaryPredicate@@@6@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "BoundLiteralPredicate<T> pred = predicate.asLiteralPredicate()@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "return ProjectionUtil.projectTransformPredicate(this,name,predicate)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "return ProjectionUtil.transformSet(name,predicate.asSetPredicate(),this)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "return null@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "projectStrict['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "projectStrict['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11->4 [style = solid, label="name"];
9->22 [style = bold, label=""];
6->3 [style = bold, label=""];
11->4 [style = solid, label="predicate"];
9->12 [style = dotted, label="true"];
5->14 [style = dashed, label="0"];
0->5 [style = dotted, label="true"];
18->16 [style = dotted, label="false"];
1->8 [style = bold, label=""];
22->2 [style = bold, label=""];
3->1 [style = bold, label=""];
5->9 [style = bold, label=""];
21->0 [style = solid, label="predicate"];
12->23 [style = dashed, label="0"];
24->23 [style = solid, label="name"];
11->0 [style = solid, label="predicate"];
11->17 [style = solid, label="name"];
16->17 [style = dotted, label="true"];
0->2 [style = bold, label=""];
25->3 [style = bold, label=""];
4->19 [style = bold, label=""];
8->20 [style = dashed, label="0"];
7->1 [style = solid, label="name"];
1->20 [style = bold, label=""];
25->24 [style = dotted, label="true"];
14->19 [style = bold, label=""];
4->2 [style = bold, label=""];
21->4 [style = solid, label="predicate"];
11->14 [style = solid, label="name"];
9->10 [style = bold, label=""];
16->17 [style = bold, label=""];
16->19 [style = bold, label=""];
15->3 [style = bold, label=""];
10->22 [style = dashed, label="0"];
7->4 [style = solid, label="name"];
11->12 [style = solid, label="predicate"];
8->4 [style = dotted, label="true"];
13->4 [style = solid, label="predicate"];
18->14 [style = dotted, label="true"];
17->19 [style = bold, label=""];
20->4 [style = bold, label=""];
15->13 [style = dotted, label="true"];
21->23 [style = solid, label="predicate"];
11->1 [style = solid, label="predicate"];
8->0 [style = bold, label=""];
20->18 [style = bold, label=""];
9->23 [style = bold, label=""];
18->16 [style = bold, label=""];
12->10 [style = bold, label=""];
3->20 [style = bold, label=""];
23->22 [style = bold, label=""];
11->1 [style = solid, label="name"];
20->4 [style = dotted, label="true"];
9->23 [style = dotted, label="true"];
3->8 [style = bold, label=""];
11->8 [style = solid, label="predicate"];
11->24 [style = dashed, label="0"];
15->11 [style = dotted, label="true"];
6->7 [style = dotted, label="true"];
7->12 [style = solid, label="name"];
21->8 [style = solid, label="predicate"];
24->4 [style = solid, label="name"];
13->1 [style = solid, label="predicate"];
0->18 [style = dashed, label="0"];
10->2 [style = bold, label=""];
9->12 [style = bold, label=""];
20->18 [style = dotted, label="false"];
6->11 [style = dotted, label="true"];
8->4 [style = bold, label=""];
9->22 [style = dotted, label="true"];
9->10 [style = dotted, label="true"];
0->9 [style = dotted, label="true"];
3->1 [style = dotted, label="true"];
8->0 [style = dotted, label="false"];
18->14 [style = bold, label=""];
21->1 [style = solid, label="predicate"];
13->14 [style = solid, label="predicate"];
25->21 [style = dotted, label="true"];
0->5 [style = bold, label=""];
24->1 [style = solid, label="name"];
}
