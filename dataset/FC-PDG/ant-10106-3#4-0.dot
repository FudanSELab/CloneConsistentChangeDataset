digraph {
14 [style = filled, label = "assertTrue(\"File was not overwritten.\",lastModified < overwrittenLastModified)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "File f = new File(buildRule.getOutputDir(),LARGEIMAGE)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "long lastModified = f.lastModified()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(\"File was overwritten.\",lastModified,overwrittenLastModified)@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testDrawOverwriteTrue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(buildRule.getLog(),containsString(\"Processing File\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assumeTrue(\"Could not change file modification date\",f.setLastModified(f.lastModified() - FILE_UTILS.getFileTimestampGranularity() * 2))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testOverwriteFalse['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assumeNotNull(\"JPEG codec is unavailable in classpath\",buildRule.getProject().getProperty(\"jpeg.codec.available\"))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "buildRule.executeTarget(\"testDrawOverwriteTrue\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "buildRule.executeTarget(\"testOverwriteFalse\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(buildRule.getLog(),containsString(\"Processing File\"))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testOverwriteFalse['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "buildRule.executeTarget(\"testSimpleScale\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "long overwrittenLastModified = f.lastModified()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "f = new File(buildRule.getOutputDir(),LARGEIMAGE)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12->0 [style = bold, label=""];
8->14 [style = solid, label="lastModified"];
4->14 [style = dashed, label="0"];
9->4 [style = bold, label=""];
0->7 [style = bold, label=""];
7->6 [style = bold, label=""];
6->13 [style = bold, label=""];
8->4 [style = solid, label="lastModified"];
10->0 [style = bold, label=""];
6->8 [style = bold, label=""];
0->11 [style = bold, label=""];
15->2 [style = bold, label=""];
9->14 [style = solid, label="overwrittenLastModified"];
11->7 [style = bold, label=""];
2->3 [style = bold, label=""];
8->1 [style = bold, label=""];
5->0 [style = bold, label=""];
8->9 [style = solid, label="lastModified"];
3->9 [style = bold, label=""];
9->14 [style = bold, label=""];
1->15 [style = dashed, label="0"];
13->8 [style = bold, label=""];
9->4 [style = solid, label="overwrittenLastModified"];
1->2 [style = bold, label=""];
8->15 [style = bold, label=""];
}
