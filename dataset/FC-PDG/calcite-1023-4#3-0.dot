digraph {
3 [style = filled, label = "Assert.assertFalse(Functions.all(ints,new Predicate1<Integer>(){public boolean apply(Integer v1){return v1 > 20}}))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Assert.assertFalse(Functions.all(ints,null))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertTrue(Functions.all(ints,null))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Assert.assertFalse(Functions.exists(empty,Functions.truePredicate1()))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testAll['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(Functions.all(empty,Functions.falsePredicate1()))@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Assert.assertFalse(Functions.all(ints,new Predicate1<Integer>(){public boolean apply(Integer v1){return v1 < 10}}))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "Assert.assertTrue(Functions.all(empty,Functions.falsePredicate1()))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testExists['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertTrue(Functions.all(ints,new Predicate1<Integer>(){public boolean apply(Integer v1){return v1 < 20}}))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Assert.assertFalse(Functions.all(ints,null))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assert.assertFalse(Functions.exists(ints,new Predicate1<Integer>(){public boolean apply(Integer v1){return v1 > 20}}))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertTrue(Functions.all(empty,Functions.truePredicate1()))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "final List<Integer> empty = Collections.emptyList()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final List<Integer> ints = Arrays.asList(1,10,2)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertFalse(Functions.exists(empty,Functions.falsePredicate1()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testAll['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Assert.assertTrue(Functions.all(empty,Functions.truePredicate1()))@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5->1 [style = solid, label="empty"];
5->3 [style = bold, label=""];
0->11 [style = solid, label="ints"];
8->10 [style = bold, label=""];
7->1 [style = bold, label=""];
0->9 [style = solid, label="ints"];
4->16 [style = dashed, label="0"];
5->6 [style = solid, label="empty"];
5->15 [style = bold, label=""];
11->9 [style = bold, label=""];
9->8 [style = bold, label=""];
12->0 [style = bold, label=""];
3->4 [style = bold, label=""];
13->11 [style = bold, label=""];
15->16 [style = bold, label=""];
3->13 [style = dashed, label="0"];
4->7 [style = bold, label=""];
5->8 [style = solid, label="empty"];
0->4 [style = solid, label="ints"];
0->3 [style = solid, label="ints"];
0->13 [style = solid, label="ints"];
2->0 [style = bold, label=""];
1->6 [style = bold, label=""];
17->0 [style = bold, label=""];
5->13 [style = bold, label=""];
5->10 [style = solid, label="empty"];
3->15 [style = dashed, label="0"];
16->14 [style = bold, label=""];
0->7 [style = solid, label="ints"];
5->16 [style = solid, label="empty"];
0->15 [style = solid, label="ints"];
5->14 [style = solid, label="empty"];
0->5 [style = bold, label=""];
}
