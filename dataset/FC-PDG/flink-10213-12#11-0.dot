digraph {
0 [style = filled, label = "final DynamicTableSink.SinkRuntimeProvider provider = actualSink.getSinkRuntimeProvider(new SinkRuntimeProviderContext(false))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final Map<String,String> modifiedOptions = getModifiedOptions(getFullSinkOptions(),null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final DynamicTableSink actualSink = createTableSink(SINK_SCHEMA,modifiedOptions)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(100,(long)sinkFunctionProvider.getParallelism().get())@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final Map<String,String> modifiedOptions = getModifiedOptions(getBasicSinkOptions(),null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final DynamicTableSink expectedSink = createExpectedSink(SINK_SCHEMA.toPhysicalRowDataType(),keyEncodingFormat,valueEncodingFormat,SINK_KEY_FIELDS,SINK_VALUE_FIELDS,null,SINK_TOPIC,UPSERT_KAFKA_SINK_PROPERTIES,DeliveryGuarantee.AT_LEAST_ONCE,SinkBufferFlushMode.DISABLED,100)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "final DynamicTableSink.SinkRuntimeProvider provider = actualSink.getSinkRuntimeProvider(new SinkRuntimeProviderContext(false))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(provider,instanceOf())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "final DynamicTableSink expectedSink = createExpectedSink(SCHEMA_DATA_TYPE,null,valueEncodingFormat,new int((((,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c030f1,null,TOPIC,KAFKA_SINK_PROPERTIES,new FlinkFixedPartitioner<>(),SinkSemantic.EXACTLY_ONCE,100)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(100,(long)sinkProvider.getParallelism().get())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "final SinkFunctionProvider sinkFunctionProvider = (SinkFunctionProvider)provider@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertTrue(sinkProvider.getParallelism().isPresent())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertTrue(sinkFunctionProvider.getParallelism().isPresent())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(expectedSink,actualSink)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testTableSinkWithParallelism['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(provider,instanceOf())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testTableSinkWithParallelism['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final SinkProvider sinkProvider = (SinkProvider)provider@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "KafkaDynamicSink actualSink = (KafkaDynamicSink)createTableSink(SCHEMA,modifiedOptions)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(provider,instanceOf())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "final EncodingFormat<SerializationSchema<RowData>> valueEncodingFormat = new EncodingFormatMock(\",\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testTableSinkWithParallelism['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertEquals(expectedSink,actualSink)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final DynamicTableSink expectedSink = createExpectedSink(SINK_SCHEMA.toPhysicalRowDataType(),keyEncodingFormat,valueEncodingFormat,SINK_KEY_FIELDS,SINK_VALUE_FIELDS,null,SINK_TOPIC,UPSERT_KAFKA_SINK_PROPERTIES,SinkBufferFlushMode.DISABLED,100)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5->3 [style = bold, label=""];
9->10 [style = dashed, label="0"];
7->21 [style = dashed, label="0"];
16->4 [style = solid, label="actualSink"];
1->10 [style = solid, label="provider"];
15->7 [style = bold, label=""];
9->4 [style = bold, label=""];
0->2 [style = bold, label=""];
5->8 [style = solid, label="actualSink"];
19->17 [style = bold, label=""];
16->19 [style = bold, label=""];
7->5 [style = solid, label="modifiedOptions"];
0->22 [style = solid, label="provider"];
19->17 [style = solid, label="valueEncodingFormat"];
1->9 [style = bold, label=""];
4->0 [style = bold, label=""];
5->16 [style = dashed, label="0"];
20->18 [style = bold, label=""];
1->9 [style = solid, label="provider"];
17->4 [style = solid, label="expectedSink"];
8->1 [style = bold, label=""];
3->8 [style = solid, label="expectedSink"];
7->5 [style = bold, label=""];
21->16 [style = solid, label="modifiedOptions"];
3->12 [style = dashed, label="0"];
2->14 [style = dashed, label="0"];
22->20 [style = bold, label=""];
5->12 [style = bold, label=""];
23->21 [style = bold, label=""];
12->8 [style = bold, label=""];
3->8 [style = bold, label=""];
11->13 [style = bold, label=""];
0->2 [style = solid, label="provider"];
12->8 [style = solid, label="expectedSink"];
0->13 [style = dashed, label="0"];
1->11 [style = solid, label="provider"];
21->16 [style = bold, label=""];
4->11 [style = dashed, label="0"];
6->7 [style = bold, label=""];
2->22 [style = bold, label=""];
1->4 [style = solid, label="provider"];
1->10 [style = bold, label=""];
13->14 [style = bold, label=""];
17->4 [style = bold, label=""];
10->11 [style = bold, label=""];
}
