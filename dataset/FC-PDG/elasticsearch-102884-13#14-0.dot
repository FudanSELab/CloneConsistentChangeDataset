digraph {
3 [style = filled, label = "assertEquals(Set.of(\"field\"),lookup.sourcePaths(\"field.subfield2\"))@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "FieldTypeLookup lookup = new FieldTypeLookup(Arrays.asList(field,otherField),emptyList(),emptyList())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "MockFieldMapper field = new MockFieldMapper.Builder(\"field\").addMultiField(new MockFieldMapper.Builder(\"field.subfield1\")).addMultiField(new MockFieldMapper.Builder(\"field.subfield2\")).build(MapperBuilderContext.ROOT)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertEquals(Set.of(\"field\"),lookup.sourcePaths(\"field.subfield1\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "MockFieldMapper otherField = new MockFieldMapper.Builder(\"other_field\").copyTo(\"field\").build(new ContentPath())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(Set.of(\"other_field\",\"field\"),lookup.sourcePaths(\"field\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testSourcePathWithMultiFields['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "testSourcePathWithMultiFields['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "MockFieldMapper field = new MockFieldMapper.Builder(\"field\").addMultiField(new MockFieldMapper.Builder(\"field.subfield1\")).addMultiField(new MockFieldMapper.Builder(\"field.subfield2\")).build(new ContentPath())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "FieldTypeLookup lookup = new FieldTypeLookup(singletonList(field),emptyList(),emptyList())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(Set.of(\"field\"),lookup.sourcePaths(\"field\"))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testSourcePathsWithCopyTo['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(Set.of(\"other_field\",\"field\"),lookup.sourcePaths(\"field.subfield1\"))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "MockFieldMapper field = new MockFieldMapper.Builder(\"field\").addMultiField(new MockFieldMapper.Builder(\"field.subfield1\")).build(new ContentPath())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
1->12 [style = dashed, label="0"];
7->5 [style = bold, label=""];
13->9 [style = bold, label=""];
12->11 [style = solid, label="field"];
4->2 [style = bold, label=""];
1->5 [style = solid, label="field"];
1->7 [style = dashed, label="0"];
6->7 [style = bold, label=""];
8->11 [style = solid, label="otherField"];
11->13 [style = bold, label=""];
8->11 [style = bold, label=""];
10->12 [style = bold, label=""];
12->8 [style = bold, label=""];
0->1 [style = bold, label=""];
2->13 [style = dashed, label="0"];
3->9 [style = dashed, label="0"];
5->4 [style = bold, label=""];
2->3 [style = bold, label=""];
7->5 [style = solid, label="field"];
}
