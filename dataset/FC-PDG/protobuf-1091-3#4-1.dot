digraph {
0 [style = filled, label = "String testString = \"I love unicode ሴ噸 characters\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "LiteralByteString unicode = new LiteralByteString(testString.getBytes(Internal.UTF_8))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ByteString unicode = ByteString.wrap(testString.getBytes(Internal.UTF_8))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertEquals(classUnderTest + \".substring() must have the expected type\",classUnderTest,getActualClassName(chopped))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(classUnderTest + \" unicode bytes must match\",testString.substring(2,testString.length() - 6),roundTripString)@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testToString['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "testToString['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "String roundTripString = chopped.toString(UTF_8)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testCharsetToString['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "String roundTripString = chopped.toString(Internal.UTF_8)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "ByteString chopped = unicode.substring(2,unicode.size() - 6)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
8->0 [style = bold, label=""];
6->0 [style = bold, label=""];
10->4 [style = solid, label="roundTripString"];
9->0 [style = bold, label=""];
3->2 [style = bold, label=""];
5->10 [style = dashed, label="0"];
1->10 [style = bold, label=""];
2->1 [style = solid, label="chopped"];
3->7 [style = dashed, label="0"];
7->2 [style = bold, label=""];
2->1 [style = bold, label=""];
5->4 [style = bold, label=""];
5->4 [style = solid, label="roundTripString"];
0->7 [style = bold, label=""];
10->4 [style = bold, label=""];
}
