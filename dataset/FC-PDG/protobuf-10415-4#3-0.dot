digraph {
6 [style = filled, label = "testExtensionInsideTable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(source).isEqualTo(dest)@@@5@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "TestExtensionInsideTable source = TestExtensionInsideTable.newBuilder().setField1(1).setExtension(UnittestProto.testExtensionInsideTableExtension,23).build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testExtensionInsideTable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "TestExtensionInsideTable dest = TestExtensionInsideTable.parseFrom(source.toByteString(),getTestExtensionInsideTableRegistry())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testExtensionInsideTable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertEquals(source,dest)@@@5@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2->3 [style = solid, label="dest"];
2->4 [style = solid, label="dest"];
2->4 [style = bold, label=""];
6->1 [style = bold, label=""];
1->2 [style = bold, label=""];
1->3 [style = solid, label="source"];
0->1 [style = bold, label=""];
2->3 [style = bold, label=""];
3->4 [style = dashed, label="0"];
5->1 [style = bold, label=""];
}
