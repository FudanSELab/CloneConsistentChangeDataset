digraph {
9 [style = filled, label = "testCopyConstructorCopiesByReference['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(3,list2.size())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testCopyConstructorCopiesByReference['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertEquals(3,list2.size())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "list1.add(BYTE_STRING_B)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "list2.addAll(list1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(list2).hasSize(3)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "list1.add(STRING_A)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testAddAllCopiesByReferenceIfPossible['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertSame(STRING_A,list2.get(0))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertSame(BYTE_STRING_B,list2.getByteString(1))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "LazyStringArrayList list1 = new LazyStringArrayList()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(list2.get(0)).isSameInstanceAs(STRING_A)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertSame(BYTE_STRING_C,list2.getByteString(2))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "LazyStringArrayList list2 = new LazyStringArrayList(list1)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(list2.getByteString(1)).isSameInstanceAs(BYTE_STRING_B)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertThat(list2.getByteString(2)).isSameInstanceAs(BYTE_STRING_C)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "list1.add(BYTE_STRING_C)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "LazyStringArrayList list2 = new LazyStringArrayList()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->17 [style = bold, label=""];
0->3 [style = bold, label=""];
16->15 [style = bold, label=""];
5->12 [style = dashed, label="0"];
1->6 [style = solid, label="list1"];
8->10 [style = dashed, label="0"];
10->14 [style = bold, label=""];
11->1 [style = bold, label=""];
3->6 [style = bold, label=""];
7->0 [style = bold, label=""];
3->16 [style = bold, label=""];
1->7 [style = bold, label=""];
12->13 [style = bold, label=""];
5->2 [style = bold, label=""];
6->16 [style = dashed, label="0"];
18->1 [style = bold, label=""];
2->13 [style = dashed, label="0"];
6->10 [style = bold, label=""];
14->12 [style = bold, label=""];
6->8 [style = bold, label=""];
15->4 [style = bold, label=""];
4->14 [style = dashed, label="0"];
8->4 [style = bold, label=""];
9->1 [style = bold, label=""];
1->15 [style = solid, label="list1"];
4->5 [style = bold, label=""];
}
