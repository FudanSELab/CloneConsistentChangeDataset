digraph {
14 [style = filled, label = "SqlNode node@@@10@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "intValue >= 0@@@22@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "literal == root && config.sqlConformance().isSortByOrdinal()@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "throw newValidationError(literal,RESOURCE.orderByOrdinalOutOfRange())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "havingExpr || !validator.config().sqlConformance().isGroupByOrdinal()@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "root.getKind()@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "root instanceof SqlBasicCall@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "boolean isOrdinalLiteral = literal == root@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1070656literal@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "node.equals(literal)@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final int intValue = literal.intValue(false)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "return nthSelectItem(ordinal,literal.getParserPosition())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "intValue >= 0@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final int intValue = literal.intValue(false)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "visit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "SqlLiteral literal@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@107063bliteral@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "intValue < 1 || intValue > select.getSelectList().size()@@@23@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "isOrdinalLiteral = true@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "visit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "isOrdinalLiteral@@@19@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "int ordinal = intValue - 1@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "literal.getTypeName()@@@4@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "List<SqlNode> operandList = ((SqlBasicCall)root).getOperandList()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "operandList@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "intValue < 1 || intValue > aliasList.size()@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "int ordinal = intValue - 1@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "return SqlUtil.stripAs(select.getSelectList().get(ordinal))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "throw validator.newValidationError(literal,RESOURCE.orderByOrdinalOutOfRange())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "literal.getTypeName()@@@20@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "visit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "SqlLiteral literal@@@2@@@['1', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10706d1literal@@@32@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8->10 [style = bold, label=""];
25->22 [style = bold, label=""];
4->1 [style = dotted, label="true"];
28->21 [style = dotted, label="true"];
2->6 [style = bold, label=""];
27->28 [style = bold, label=""];
1->7 [style = solid, label="intValue"];
11->12 [style = dotted, label="true"];
24->32 [style = bold, label=""];
28->15 [style = dotted, label="true"];
28->14 [style = dotted, label="true"];
4->7 [style = dotted, label="true"];
0->9 [style = solid, label="literal"];
9->10 [style = bold, label=""];
6->8 [style = solid, label="ordinal"];
1->6 [style = solid, label="intValue"];
11->9 [style = bold, label=""];
29->18 [style = bold, label=""];
0->21 [style = solid, label="literal"];
20->19 [style = solid, label="isOrdinalLiteral"];
0->2 [style = solid, label="literal"];
3->0 [style = dotted, label="true"];
13->22 [style = bold, label=""];
17->21 [style = bold, label=""];
23->19 [style = solid, label="isOrdinalLiteral"];
7->6 [style = dotted, label="true"];
25->32 [style = dotted, label="true"];
29->18 [style = dotted, label="true"];
21->20 [style = dotted, label="true"];
21->19 [style = bold, label=""];
26->25 [style = solid, label="intValue"];
1->5 [style = solid, label="intValue"];
30->26 [style = bold, label=""];
31->29 [style = bold, label=""];
0->18 [style = solid, label="literal"];
16->32 [style = bold, label=""];
29->23 [style = bold, label=""];
0->12 [style = dashed, label="0"];
28->17 [style = dotted, label="true"];
7->5 [style = bold, label=""];
5->6 [style = bold, label=""];
28->19 [style = bold, label=""];
9->4 [style = dotted, label="true"];
2->24 [style = dashed, label="0"];
20->19 [style = bold, label=""];
7->8 [style = dotted, label="true"];
19->22 [style = bold, label=""];
16->24 [style = dotted, label="true"];
18->23 [style = bold, label=""];
16->24 [style = bold, label=""];
12->10 [style = solid, label="literal"];
25->13 [style = dotted, label="true"];
19->30 [style = dotted, label="true"];
25->16 [style = bold, label=""];
31->0 [style = dotted, label="true"];
1->7 [style = bold, label=""];
7->5 [style = dotted, label="true"];
5->16 [style = dashed, label="0"];
3->9 [style = bold, label=""];
30->25 [style = dotted, label="true"];
26->16 [style = solid, label="intValue"];
28->17 [style = bold, label=""];
4->1 [style = bold, label=""];
25->16 [style = dotted, label="true"];
5->2 [style = dotted, label="true"];
0->23 [style = solid, label="literal"];
23->27 [style = bold, label=""];
12->9 [style = solid, label="literal"];
7->10 [style = bold, label=""];
9->4 [style = bold, label=""];
26->25 [style = bold, label=""];
30->26 [style = dotted, label="true"];
12->2 [style = solid, label="literal"];
32->13 [style = solid, label="ordinal"];
27->28 [style = dotted, label="true"];
26->32 [style = solid, label="intValue"];
5->2 [style = bold, label=""];
21->20 [style = bold, label=""];
9->29 [style = dashed, label="0"];
0->22 [style = solid, label="literal"];
0->24 [style = solid, label="literal"];
6->8 [style = bold, label=""];
0->10 [style = solid, label="literal"];
32->13 [style = bold, label=""];
19->30 [style = bold, label=""];
}
