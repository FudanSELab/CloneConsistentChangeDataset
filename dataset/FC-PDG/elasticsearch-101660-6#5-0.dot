digraph {
0 [style = filled, label = "assertSame(writeOperation,writeOp)@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "context.sendMessage(buffers,listener)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "WriteOperation writeOp = writeOpCaptor.getValue()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "verify(selector).queueWrite(writeOpCaptor.capture())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "testSendMessageFromSameThreadIsQueuedInChannel['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ByteBuffer(( buffers = {ByteBuffer.wrap(createMessage(10))}@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testSendMessageFromDifferentThreadIsQueuedWithSelector['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testSendMessageFromSameThreadIsQueuedInChannel['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "ArgumentCaptor<WriteOperation> writeOpCaptor = ArgumentCaptor.forClass()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "verify(selector).writeToChannel(writeOpCaptor.capture())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "verify(selector).queueWrite(writeOpCaptor.capture())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "when(selector.isOnCurrentThread()).thenReturn(false)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "when(readWriteHandler.createWriteOperation(context,buffers,listener)).thenReturn(writeOperation)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "WriteOperation writeOperation = mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->8 [style = bold, label=""];
5->12 [style = dashed, label="0"];
4->0 [style = solid, label="writeOperation"];
3->1 [style = bold, label=""];
2->6 [style = bold, label=""];
5->9 [style = dashed, label="0"];
4->2 [style = bold, label=""];
7->4 [style = bold, label=""];
9->8 [style = bold, label=""];
1->7 [style = bold, label=""];
7->6 [style = solid, label="buffers"];
13->1 [style = bold, label=""];
1->11 [style = bold, label=""];
8->0 [style = solid, label="writeOp"];
8->0 [style = bold, label=""];
6->5 [style = bold, label=""];
12->8 [style = bold, label=""];
6->9 [style = bold, label=""];
10->1 [style = bold, label=""];
4->2 [style = solid, label="writeOperation"];
11->7 [style = bold, label=""];
6->12 [style = bold, label=""];
}
