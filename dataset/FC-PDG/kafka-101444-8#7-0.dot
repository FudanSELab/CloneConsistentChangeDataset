digraph {
3 [style = filled, label = "stream2 = builder.stream(topic2,consumed)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final KStream<Integer,String> stream1@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "final MockProcessorSupplier<Integer,String> supplier = new MockProcessorSupplier<>()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "final KStream<Integer,String> stream2@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "i < 2@@@45@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "i < 2@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "int i = 0@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final KStream<Integer,String> joined@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+Y0\",\"1:X1+Y1\",\"2:X2+null\",\"3:X3+null\")@@@35@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
46 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+YYY0\",\"0:X0+YYY0\",\"0:XX0+YYY0\",\"1:X1+YYY1\",\"1:X1+YYY1\",\"1:XX1+YYY1\")@@@49@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
50 [style = filled, label = "testOuterJoin['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
40 [style = filled, label = "stream1 = builder.stream(topic1,consumed)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+YY0\",\"0:X0+YY0\",\"1:X1+YY1\",\"1:X1+YY1\",\"2:X2+YY2\",\"3:X3+YY3\")@@@39@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "i < 2@@@27@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(streamTopic,tableTopic)),copartitionGroups.iterator().next())@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "joined.process(processor)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "final StreamsBuilder builder = new StreamsBuilder()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "driver.pipeInput(recordFactory.create(topic2,expectedKey,\"YY\" + expectedKey))@@@37@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "driver.pipeInput(recordFactory.create(topic2,expectedKeys(i(,\"Y\" + expectedKeys(i())@@@29@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "driver.pipeInput(recordFactory.create(topic1,expectedKey,\"XX\" + expectedKey))@@@41@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "driver.pipeInput(recordFactory.create(topic2,expectedKeys(i(,\"Y\" + expectedKeys(i())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(1,copartitionGroups.size())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "driver.pipeInput(recordFactory.create(topic1,expectedKey,\"X\" + expectedKey))@@@33@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "driver.pipeInput(recordFactory.create(topic2,expectedKeys(i(,\"YYY\" + expectedKeys(i())@@@47@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "i++@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder)@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "driver.pipeInput(recordFactory.create(topic2,expectedKey,\"YY\" + expectedKey))@@@37@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+YYY0\",\"0:X0+YYY0\",\"0:XX0+YYY0\",\"1:X1+YYY1\",\"1:X1+YYY1\",\"1:XX1+YYY1\")@@@49@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+YY0\",\"0:X0+YY0\",\"1:X1+YY1\",\"1:X1+YY1\",\"2:X2+YY2\",\"3:X3+YY3\")@@@39@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "testOuterJoin['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "joined = stream1.outerJoin(stream2,MockValueJoiner.TOSTRING_JOINER,JoinWindows.of(100),Joined.with(intSerde,stringSerde,stringSerde))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "driver.pipeInput(recordFactory.create(topic2,expectedKeys(i(,\"YYY\" + expectedKeys(i())@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertEquals(1,copartitionGroups.size())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "processor.checkAndClearProcessResult(\"0:XX0+Y0\",\"0:XX0+YY0\",\"1:XX1+Y1\",\"1:XX1+YY1\",\"2:XX2+YY2\",\"3:XX3+YY3\")@@@43@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "i++@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "driver.pipeInput(recordFactory.create(topic1,expectedKey,\"X\" + expectedKey))@@@33@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "driver.pipeInput(recordFactory.create(topic1,expectedKeys(i(,\"X\" + expectedKeys(i())@@@23@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+null\",\"1:X1+null\")@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "driver.pipeInput(recordFactory.create(topic1,expectedKey,\"XX\" + expectedKey))@@@41@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "driver.pipeInput(recordFactory.create(topic1,expectedKeys(i(,\"X\" + expectedKeys(i())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "i++@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(topic1,topic2)),copartitionGroups.iterator().next())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+Y0\",\"1:X1+Y1\")@@@31@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final MockProcessor<Integer,String> processor = supplier.theCapturedProcessor()@@@19@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "final MockProcessorSupplier<Integer,String> processor@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+Y0\",\"1:X1+Y1\",\"2:X2+null\",\"3:X3+null\")@@@35@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "joined.process(supplier)@@@14@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "int i = 0@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+Y0\",\"1:X1+Y1\")@@@31@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "processor = new MockProcessorSupplier<>()@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "driver = new TopologyTestDriver(builder.build(),props,0L)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "int i = 0@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "shouldRequireCopartitionedStreams['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final int(( expectedKeys = new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@cb415a@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21->10 [style = bold, label=""];
35->48 [style = bold, label=""];
32->12 [style = bold, label=""];
38->25 [style = solid, label="i"];
11->29 [style = bold, label=""];
51->53 [style = bold, label=""];
31->48 [style = dashed, label="0"];
11->46 [style = bold, label=""];
19->6 [style = solid, label="i"];
25->6 [style = bold, label=""];
12->9 [style = bold, label=""];
29->18 [style = bold, label=""];
22->4 [style = bold, label=""];
0->14 [style = bold, label=""];
5->0 [style = bold, label=""];
25->19 [style = bold, label=""];
50->12 [style = bold, label=""];
20->23 [style = dashed, label="0"];
12->17 [style = solid, label="builder"];
16->4 [style = solid, label="i"];
22->21 [style = solid, label="i"];
27->2 [style = bold, label=""];
23->44 [style = bold, label=""];
13->25 [style = bold, label=""];
35->31 [style = bold, label=""];
25->19 [style = solid, label="i"];
13->25 [style = solid, label="i"];
16->21 [style = solid, label="i"];
53->52 [style = bold, label=""];
18->11 [style = bold, label=""];
30->27 [style = bold, label=""];
9->4 [style = solid, label="expectedKeys"];
4->21 [style = bold, label=""];
29->8 [style = solid, label="i"];
18->8 [style = dotted, label="true"];
7->54 [style = dashed, label="0"];
44->17 [style = bold, label=""];
11->18 [style = bold, label=""];
19->25 [style = bold, label=""];
22->49 [style = bold, label=""];
43->45 [style = bold, label=""];
24->20 [style = solid, label="processor"];
7->33 [style = bold, label=""];
19->25 [style = solid, label="i"];
19->13 [style = bold, label=""];
40->3 [style = bold, label=""];
21->22 [style = bold, label=""];
11->8 [style = solid, label="i"];
4->21 [style = solid, label="i"];
25->6 [style = dotted, label="true"];
39->41 [style = bold, label=""];
34->35 [style = bold, label=""];
22->4 [style = dotted, label="true"];
41->43 [style = bold, label=""];
24->3 [style = bold, label=""];
47->16 [style = bold, label=""];
52->54 [style = bold, label=""];
13->6 [style = solid, label="i"];
18->29 [style = dotted, label="true"];
22->21 [style = dotted, label="true"];
23->20 [style = bold, label=""];
49->37 [style = bold, label=""];
17->1 [style = bold, label=""];
31->24 [style = bold, label=""];
11->29 [style = dotted, label="true"];
21->4 [style = solid, label="i"];
42->39 [style = bold, label=""];
9->8 [style = solid, label="expectedKeys"];
29->18 [style = solid, label="i"];
21->10 [style = dotted, label="true"];
25->13 [style = dotted, label="true"];
45->2 [style = bold, label=""];
25->16 [style = bold, label=""];
2->18 [style = solid, label="i"];
1->7 [style = bold, label=""];
38->19 [style = bold, label=""];
9->29 [style = solid, label="expectedKeys"];
9->28 [style = bold, label=""];
21->5 [style = bold, label=""];
19->47 [style = bold, label=""];
19->13 [style = solid, label="i"];
2->11 [style = solid, label="i"];
38->13 [style = solid, label="i"];
15->23 [style = solid, label="stream2"];
6->13 [style = bold, label=""];
3->15 [style = solid, label="stream2"];
22->10 [style = solid, label="i"];
18->11 [style = solid, label="i"];
18->8 [style = bold, label=""];
33->19 [style = bold, label=""];
21->22 [style = solid, label="i"];
38->19 [style = solid, label="i"];
2->11 [style = bold, label=""];
37->42 [style = bold, label=""];
2->29 [style = solid, label="i"];
9->6 [style = solid, label="expectedKeys"];
15->23 [style = bold, label=""];
19->25 [style = dotted, label="true"];
20->17 [style = bold, label=""];
28->34 [style = bold, label=""];
48->23 [style = solid, label="supplier"];
22->21 [style = bold, label=""];
16->22 [style = solid, label="i"];
18->36 [style = bold, label=""];
3->15 [style = bold, label=""];
22->4 [style = solid, label="i"];
11->29 [style = solid, label="i"];
18->29 [style = solid, label="i"];
19->13 [style = dotted, label="true"];
11->18 [style = dotted, label="true"];
16->22 [style = bold, label=""];
21->4 [style = dotted, label="true"];
48->40 [style = bold, label=""];
26->30 [style = bold, label=""];
14->26 [style = bold, label=""];
9->13 [style = solid, label="expectedKeys"];
12->44 [style = solid, label="builder"];
9->10 [style = solid, label="expectedKeys"];
4->10 [style = solid, label="i"];
10->4 [style = bold, label=""];
33->38 [style = bold, label=""];
8->29 [style = bold, label=""];
11->18 [style = solid, label="i"];
25->13 [style = solid, label="i"];
}
