digraph {
25 [style = filled, label = "testRegisterService['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(instances.getServices().get(0),service)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "ClientConfig config = new DefaultClientConfig(){@Override public Set<Object> getSingletons(){Set<Object> singletons = Sets.newHashSet()singletons.add(context)singletons.add(serviceNamesMarshaller)singletons.add(serviceInstanceMarshaller)singletons.add(serviceInstancesMarshaller)return singletons}}@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(names.getNames(),Lists.newArrayList())@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "WebResource resource = client.resource(\"http://localhost:\" + port)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Client client = Client.create(config)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ServiceNames names = resource.path(\"/v1/service\").get()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testEmptyServiceNames['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "payload.setDescription(\"Example description for test\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "ServiceInstance<ServiceDetails> instance = resource.path(\"/v1/service/test/\" + service.getId()).get(singleInstanceType)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testEmptyServiceNames['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(instances.getServices().get(0).getPayload(),payload)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "GenericType<ServiceInstance<ServiceDetails>> singleInstanceType = new GenericType<ServiceInstance<ServiceDetails>>(){}@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "ServiceNames names = resource.path(\"/v1/service\").get()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "payload.getData().put(\"one\",\"1\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ClientConfig config = new DefaultClientConfig(){@Override public Set<Object> getSingletons(){Set<Object> singletons = Sets.newHashSet()singletons.add(context)singletons.add(serviceNamesMarshaller)singletons.add(serviceInstanceMarshaller)singletons.add(serviceInstancesMarshaller)return singletons}}@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(names.getNames(),Lists.newArrayList(\"test\"))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "payload.getData().put(\"two\",\"2\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(names.getNames(),Lists.newArrayList())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "GenericType<ServiceInstances<ServiceDetails>> type = new GenericType<ServiceInstances<ServiceDetails>>(){}@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "WebResource resource = client.resource(\"http://localhost:\" + port)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "payload.getData().put(\"three\",\"3\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "ServiceInstance<ServiceDetails> service = ServiceInstance.builder().name(\"test\").payload(payload).serviceType(ServiceType.STATIC).build()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "ServiceDetails payload = new ServiceDetails()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "WebResource resource = client.resource(\"http://\" + HOST + \":\" + port)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Client client = Client.create(config)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "resource.path(\"/v1/service/test/\" + service.getId()).type(MediaType.APPLICATION_JSON_TYPE).put(service)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertEquals(instance,service)@@@36@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "ServiceInstances<ServiceDetails> instances = resource.path(\"/v1/service/test\").get(type)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(instances.getServices().size(),1)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11->16 [style = bold, label=""];
14->24 [style = bold, label=""];
4->3 [style = bold, label=""];
20->29 [style = bold, label=""];
12->15 [style = solid, label="singleInstanceType"];
4->3 [style = solid, label="config"];
12->15 [style = bold, label=""];
28->9 [style = bold, label=""];
3->6 [style = bold, label=""];
9->26 [style = solid, label="service"];
27->22 [style = bold, label=""];
9->10 [style = solid, label="service"];
22->23 [style = bold, label=""];
25->17 [style = bold, label=""];
15->26 [style = bold, label=""];
21->12 [style = bold, label=""];
23->28 [style = bold, label=""];
5->1 [style = bold, label=""];
17->21 [style = solid, label="payload"];
6->5 [style = bold, label=""];
9->24 [style = solid, label="service"];
19->13 [style = solid, label="config"];
19->13 [style = bold, label=""];
3->2 [style = bold, label=""];
18->10 [style = bold, label=""];
24->21 [style = bold, label=""];
20->29 [style = solid, label="type"];
0->4 [style = bold, label=""];
1->16 [style = dashed, label="0"];
29->14 [style = bold, label=""];
2->6 [style = dashed, label="0"];
9->19 [style = bold, label=""];
5->7 [style = bold, label=""];
8->4 [style = bold, label=""];
17->27 [style = bold, label=""];
1->7 [style = dashed, label="0"];
15->26 [style = solid, label="instance"];
16->20 [style = bold, label=""];
13->18 [style = bold, label=""];
2->5 [style = bold, label=""];
10->11 [style = bold, label=""];
}
