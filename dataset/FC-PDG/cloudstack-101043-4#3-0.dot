digraph {
0 [style = filled, label = "assertSourceNatAllocatedNetwork['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(ipAddressManager.isSourceNatAvailableForNetwork(account,ipAddressVO,networkAllocated))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "when(networkAllocated.getGuestType()).thenReturn(Network.GuestType.Isolated)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "when(networkAllocated.getId()).thenReturn(2L)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Mockito.when(networkDao.findById(2L)).thenReturn(networkAllocated)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "doReturn(null).when(ipAddressManager).getExistingSourceNatInNetwork(1L,2L)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(\"Source NAT should be true\",isSourceNat)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "NetworkVO networkImplemented = Mockito.mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "when(networkImplemented.getNetworkOfferingId()).thenReturn(8L)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "NetworkVO networkAllocated = Mockito.mock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "when(networkImplemented.getVpcId()).thenReturn(null)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "doReturn(null).when(ipAddressManager).getExistingSourceNatInNetwork(1L,1L)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Mockito.when(networkDao.findById(1L)).thenReturn(networkImplemented)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "boolean isSourceNat = ipAddressManager.isSourceNatAvailableForNetwork(account,ipAddressVO,networkImplemented)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertSourceNatAllocatedNetwork['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "when(networkAllocated.getVpcId()).thenReturn(null)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "when(networkAllocated.getTrafficType()).thenReturn(Networks.TrafficType.Guest)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "when(networkImplemented.getTrafficType()).thenReturn(Networks.TrafficType.Guest)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "when(networkImplemented.getState()).thenReturn(Network.State.Implemented)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertSourceNatImplementedNetwork['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ipAddressManager.isSourceNatAvailableForNetwork(account,ipAddressVO,networkAllocated)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "when(networkImplemented.getGuestType()).thenReturn(Network.GuestType.Isolated)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "when(networkAllocated.getState()).thenReturn(Network.State.Allocated)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "when(networkAllocated.getNetworkOfferingId()).thenReturn(8L)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "when(networkImplemented.getId()).thenReturn(1L)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13->14 [style = solid, label="isSourceNat"];
15->13 [style = bold, label=""];
3->17 [style = dashed, label="0"];
7->23 [style = dashed, label="0"];
22->16 [style = bold, label=""];
9->4 [style = bold, label=""];
2->3 [style = bold, label=""];
18->17 [style = solid, label="networkImplemented"];
1->19 [style = dashed, label="0"];
18->19 [style = bold, label=""];
5->3 [style = solid, label="networkAllocated"];
21->24 [style = bold, label=""];
16->23 [style = bold, label=""];
10->22 [style = dashed, label="0"];
8->21 [style = dashed, label="0"];
5->18 [style = dashed, label="0"];
7->8 [style = bold, label=""];
10->6 [style = bold, label=""];
4->12 [style = dashed, label="0"];
3->9 [style = bold, label=""];
20->18 [style = bold, label=""];
5->1 [style = bold, label=""];
11->5 [style = bold, label=""];
6->16 [style = dashed, label="0"];
8->2 [style = bold, label=""];
23->21 [style = bold, label=""];
9->15 [style = dashed, label="0"];
5->12 [style = solid, label="networkAllocated"];
24->17 [style = bold, label=""];
17->15 [style = bold, label=""];
9->12 [style = bold, label=""];
18->13 [style = solid, label="networkImplemented"];
2->24 [style = dashed, label="0"];
6->7 [style = bold, label=""];
4->13 [style = dashed, label="0"];
1->10 [style = bold, label=""];
5->4 [style = solid, label="networkAllocated"];
19->22 [style = bold, label=""];
13->14 [style = bold, label=""];
0->5 [style = bold, label=""];
}
