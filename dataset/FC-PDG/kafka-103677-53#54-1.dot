digraph {
1 [style = filled, label = "client.poll(1,time.milliseconds())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "client.poll(1,time.milliseconds())@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Sensor throttleTimeSensor = Sender.throttleTimeSensor(metrics,this.senderMetricsRegistry)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "ProduceResponse response = produceResponse(tp0,i,Errors.NONE,throttleTimeMs)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ProduceRequest.Builder builder = new ProduceRequest.Builder(RecordBatch.CURRENT_MAGIC_VALUE,(short)1,1000,Collections.emptyMap())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int throttleTimeMs = 100 * i@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(metrics.metricInstance(this.senderMetricsRegistry.produceThrottleTimeMax))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "!client.ready(node,time.milliseconds())@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "ByteBuffer buffer = ApiVersionsResponse.createApiVersionsResponse(400,RecordBatch.CURRENT_MAGIC_VALUE).serialize(apiVersionsResponseVersion,new ResponseHeader(0))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "selector.clear()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "selector.delayedReceive(new DelayedReceive(node.idString(),new NetworkReceive(node.idString(),buffer)))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(400,maxMetric.value(),EPS)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "NetworkClient client = new NetworkClient(selector,metadata,\"mock\",Integer.MAX_VALUE,1000,1000,64 * 1024,64 * 1024,1000,time,true,new ApiVersions(),throttleTimeSensor,new LogContext())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(metrics.metricInstance(this.senderMetricsRegistry.produceThrottleTimeAvg))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "buffer = response.serialize(ApiKeys.PRODUCE.latestVersion(),new ResponseHeader(request.correlationId()))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "client.poll(1,time.milliseconds())@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "buffer = response.serialize(ApiKeys.FETCH.latestVersion(),new ResponseHeader(request.correlationId()))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Sensor throttleTimeSensor = Fetcher.throttleTimeSensor(metrics,metricsRegistry)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "client.poll(1,time.milliseconds())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "client.send(request,time.milliseconds())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "client.poll(1,time.milliseconds())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Cluster cluster = TestUtils.singletonCluster(\"test\",1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "FetchRequest.Builder builder = FetchRequest.Builder.forConsumer(100,100,new LinkedHashMap<TopicPartition,PartitionData>())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "NetworkClient client = new NetworkClient(selector,metadata,\"mock\",Integer.MAX_VALUE,1000,1000,64 * 1024,64 * 1024,1000,time,true,new ApiVersions(),throttleTimeSensor)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "selector.clear()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchThrottleTimeMax))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "ClientRequest request = client.newClientRequest(node.idString(),builder,time.milliseconds(),true,null)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "i++@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchThrottleTimeAvg))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertEquals(250,avgMetric.value(),EPSILON)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Node node = cluster.nodes().get(0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testQuotaMetrics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "int i = 1@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "FetchResponse response = fetchResponse(tp0,nextRecords,Errors.NONE,i,throttleTimeMs)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertEquals(400,maxMetric.value(),EPSILON)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "short apiVersionsResponseVersion = ApiKeys.API_VERSIONS.latestVersion()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "MockSelector selector = new MockSelector(time)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "i <= 3@@@14@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(250,avgMetric.value(),EPS)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "selector.completeReceive(new NetworkReceive(node.idString(),buffer))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "testQuotaMetrics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "testQuotaMetrics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "client.close()@@@32@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14->3 [style = bold, label=""];
26->12 [style = solid, label="buffer"];
4->40 [style = solid, label="i"];
20->0 [style = dotted, label="true"];
20->0 [style = bold, label=""];
20->36 [style = dotted, label="true"];
8->25 [style = solid, label="throttleTimeMs"];
21->30 [style = bold, label=""];
17->7 [style = solid, label="i"];
17->8 [style = solid, label="i"];
7->8 [style = bold, label=""];
36->20 [style = bold, label=""];
43->15 [style = solid, label="throttleTimeSensor"];
1->23 [style = bold, label=""];
42->18 [style = solid, label="builder"];
33->11 [style = bold, label=""];
26->12 [style = bold, label=""];
18->22 [style = bold, label=""];
31->6 [style = bold, label=""];
6->28 [style = bold, label=""];
19->9 [style = bold, label=""];
24->11 [style = bold, label=""];
9->21 [style = bold, label=""];
7->27 [style = dotted, label="true"];
15->31 [style = dashed, label="0"];
23->17 [style = bold, label=""];
7->1 [style = dotted, label="true"];
32->20 [style = bold, label=""];
27->25 [style = bold, label=""];
35->12 [style = bold, label=""];
10->14 [style = bold, label=""];
7->40 [style = dotted, label="true"];
17->25 [style = solid, label="i"];
25->40 [style = dashed, label="0"];
11->43 [style = bold, label=""];
12->1 [style = bold, label=""];
4->17 [style = solid, label="i"];
7->42 [style = dotted, label="true"];
4->8 [style = solid, label="i"];
9->34 [style = dashed, label="0"];
38->2 [style = bold, label=""];
7->12 [style = dotted, label="true"];
13->37 [style = bold, label=""];
5->18 [style = solid, label="builder"];
7->23 [style = dotted, label="true"];
25->26 [style = bold, label=""];
7->35 [style = dotted, label="true"];
0->20 [style = bold, label=""];
41->38 [style = bold, label=""];
10->43 [style = dashed, label="0"];
7->22 [style = dotted, label="true"];
7->17 [style = dotted, label="true"];
16->20 [style = bold, label=""];
7->8 [style = dotted, label="true"];
30->38 [style = dashed, label="0"];
4->7 [style = solid, label="i"];
17->40 [style = solid, label="i"];
40->35 [style = bold, label=""];
7->26 [style = dotted, label="true"];
5->18 [style = bold, label=""];
26->35 [style = dashed, label="0"];
8->40 [style = solid, label="throttleTimeMs"];
4->7 [style = bold, label=""];
7->5 [style = dotted, label="true"];
35->12 [style = solid, label="buffer"];
13->19 [style = bold, label=""];
43->14 [style = bold, label=""];
11->10 [style = bold, label=""];
28->16 [style = solid, label="buffer"];
7->18 [style = dotted, label="true"];
6->28 [style = solid, label="apiVersionsResponseVersion"];
20->36 [style = bold, label=""];
7->13 [style = bold, label=""];
10->15 [style = solid, label="throttleTimeSensor"];
42->18 [style = bold, label=""];
29->4 [style = bold, label=""];
20->29 [style = bold, label=""];
3->31 [style = bold, label=""];
18->22 [style = solid, label="request"];
11->15 [style = solid, label="selector"];
20->32 [style = bold, label=""];
15->6 [style = bold, label=""];
3->15 [style = bold, label=""];
34->41 [style = bold, label=""];
39->11 [style = bold, label=""];
28->16 [style = bold, label=""];
4->25 [style = solid, label="i"];
17->7 [style = bold, label=""];
8->42 [style = bold, label=""];
8->5 [style = bold, label=""];
22->27 [style = bold, label=""];
10->31 [style = solid, label="throttleTimeSensor"];
21->41 [style = dashed, label="0"];
37->34 [style = bold, label=""];
7->25 [style = dotted, label="true"];
27->40 [style = bold, label=""];
30->2 [style = bold, label=""];
20->32 [style = dotted, label="true"];
19->37 [style = dashed, label="0"];
11->31 [style = solid, label="selector"];
}
