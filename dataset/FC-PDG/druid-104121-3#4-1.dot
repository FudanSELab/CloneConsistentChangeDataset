digraph {
12 [style = filled, label = "Assert.assertEquals(500L,emitter.getEvents().get(1).toMap().get(\"value\"))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(\"ingest/test/lag/time\",emitter.getEvents().get(0).toMap().get(\"metric\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(\"ingest/test/lag\",emitter.getEvents().get(0).toMap().get(\"metric\"))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "testEmitRecordLag['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "testEmitRecordLag['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "List<Event> events = emitter.getEvents()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "Assert.assertEquals(\"ingest/test/avgLag/time\",emitter.getEvents().get(2).toMap().get(\"metric\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "expectEmitterSupervisor(false)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "events = filterMetrics(events,whitelist)@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "Assert.assertEquals(500L,events.get(1).toMap().get(\"value\"))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "CountDownLatch latch = new CountDownLatch(2)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "Assert.assertEquals(\"ingest/test/avgLag\",events.get(2).toMap().get(\"metric\"))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "testEmitTimeLag['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(3,events.size())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "TestEmittingTestSeekableStreamSupervisor supervisor = new TestEmittingTestSeekableStreamSupervisor(latch,null,ImmutableMap.of(\"1\",10000L,\"2\",15000L,\"3\",20000L))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertEquals(20000L,emitter.getEvents().get(1).toMap().get(\"value\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(850L,emitter.getEvents().get(0).toMap().get(\"value\"))@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(BasicState.PENDING,supervisor.stateManager.getSupervisorState())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(283L,events.get(2).toMap().get(\"value\"))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "latch.await()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(supervisor.stateManager.getExceptionEvents().isEmpty())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "TestEmittingTestSeekableStreamSupervisor supervisor = new TestEmittingTestSeekableStreamSupervisor(latch,ImmutableMap.of(\"1\",100L,\"2\",250L,\"3\",500L),null)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(\"ingest/test/lag\",events.get(0).toMap().get(\"metric\"))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "verifyAll()@@@23@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "Assert.assertEquals(\"ingest/test/maxLag/time\",emitter.getEvents().get(1).toMap().get(\"metric\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(283L,emitter.getEvents().get(2).toMap().get(\"value\"))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "Assert.assertTrue(supervisor.stateManager.isHealthy())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(3,emitter.getEvents().size())@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "verifyAll()@@@20@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(850L,events.get(0).toMap().get(\"value\"))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "Assert.assertEquals(15000L,emitter.getEvents().get(2).toMap().get(\"value\"))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(\"ingest/test/maxLag\",emitter.getEvents().get(1).toMap().get(\"metric\"))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(45000L,emitter.getEvents().get(0).toMap().get(\"value\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(\"ingest/test/avgLag\",emitter.getEvents().get(2).toMap().get(\"metric\"))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "supervisor.start()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "CountDownLatch latch = new CountDownLatch(1)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(BasicState.PENDING,supervisor.stateManager.getSupervisorState().getBasicState())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "List<String> redlist = Arrays.asList(\"ingest/test/lag\",\"ingest/test/maxLag\",\"ingest/test/avgLag\")@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "Assert.assertEquals(\"ingest/test/maxLag\",events.get(1).toMap().get(\"metric\"))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4->10 [style = bold, label=""];
30->24 [style = bold, label=""];
1->4 [style = bold, label=""];
23->25 [style = bold, label=""];
2->19 [style = dashed, label="0"];
10->28 [style = bold, label=""];
24->19 [style = bold, label=""];
6->35 [style = bold, label=""];
35->3 [style = bold, label=""];
32->37 [style = bold, label=""];
16->8 [style = bold, label=""];
28->30 [style = bold, label=""];
6->15 [style = solid, label="latch"];
30->24 [style = solid, label="whitelist"];
12->37 [style = dashed, label="0"];
28->24 [style = solid, label="events"];
39->34 [style = bold, label=""];
31->13 [style = bold, label=""];
2->32 [style = dashed, label="0"];
22->21 [style = bold, label=""];
14->39 [style = dashed, label="0"];
38->36 [style = bold, label=""];
26->15 [style = solid, label="latch"];
29->23 [style = bold, label=""];
15->3 [style = bold, label=""];
0->28 [style = dashed, label="0"];
18->38 [style = dashed, label="0"];
33->13 [style = bold, label=""];
6->15 [style = bold, label=""];
2->12 [style = bold, label=""];
14->7 [style = bold, label=""];
20->22 [style = bold, label=""];
15->35 [style = dashed, label="0"];
5->1 [style = bold, label=""];
11->5 [style = bold, label=""];
0->14 [style = bold, label=""];
0->39 [style = bold, label=""];
21->29 [style = bold, label=""];
13->26 [style = bold, label=""];
7->2 [style = bold, label=""];
37->38 [style = bold, label=""];
6->26 [style = dashed, label="0"];
19->27 [style = bold, label=""];
14->30 [style = dashed, label="0"];
10->0 [style = bold, label=""];
18->20 [style = dashed, label="0"];
26->15 [style = bold, label=""];
12->18 [style = bold, label=""];
12->27 [style = dashed, label="0"];
16->36 [style = dashed, label="0"];
36->8 [style = bold, label=""];
3->17 [style = bold, label=""];
34->32 [style = bold, label=""];
13->6 [style = bold, label=""];
6->35 [style = solid, label="latch"];
27->20 [style = bold, label=""];
7->34 [style = dashed, label="0"];
16->22 [style = dashed, label="0"];
9->13 [style = bold, label=""];
17->11 [style = bold, label=""];
18->16 [style = bold, label=""];
}
