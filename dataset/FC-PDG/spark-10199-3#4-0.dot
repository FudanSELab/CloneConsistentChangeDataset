digraph {
4 [style = filled, label = "JavaTestUtils.attachTestOutputStream(flatMapped)@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "List<List<String>> result = JavaTestUtils.runStreams(ssc,3,3)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertOrderInvariantEquals(expected,result)@@@14@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "JavaTestUtils.attachTestOutputStream(flatMapped)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "JavaTestUtils.attachTestOutputStream(flatMapped)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testFlatMap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "JavaDStream<String> flatMapped = stream.flatMap(null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertOrderInvariantEquals(expected,result)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "List<List<String>> result = JavaTestUtils.runStreams(ssc,3,3)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertOrderInvariantEquals(expected,result)@@@9@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "JavaDStream<String> flatMapped = stream.flatMap(new FlatMapFunction<String,String>(){@Override public Iterator<String> call(String x){return Arrays.asList(x.split(\"(?!^)\")).iterator()}})@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "JavaDStream<String> flatMapped = stream.flatMap(null)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "List<List<String>> inputData = Arrays.asList(Arrays.asList(\"go\",\"giants\"),Arrays.asList(\"boo\",\"dodgers\"),Arrays.asList(\"athletics\"))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testFlatMap['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "List<List<String>> expected = Arrays.asList(Arrays.asList(\"g\",\"o\",\"g\",\"i\",\"a\",\"n\",\"t\",\"s\"),Arrays.asList(\"b\",\"o\",\"o\",\"d\",\"o\",\"d\",\"g\",\"e\",\"r\",\"s\"),Arrays.asList(\"a\",\"t\",\"h\",\"l\",\"e\",\"t\",\"i\",\"c\",\"s\"))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "List<List<String>> result = JavaTestUtils.runStreams(ssc,3,3)@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testFlatMap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "List<List<String>> expected = Arrays.asList(Arrays.asList(\"g\",\"o\",\"g\",\"i\",\"a\",\"n\",\"t\",\"s\"),Arrays.asList(\"b\",\"o\",\"o\",\"d\",\"o\",\"d\",\"g\",\"e\",\"r\",\"s\"),Arrays.asList(\"a\",\"t\",\"h\",\"l\",\"e\",\"t\",\"i\",\"c\",\"s\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "JavaDStream<String> stream = JavaTestUtils.attachTestInputStream(ssc,inputData,1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->3 [style = bold, label=""];
12->9 [style = solid, label="flatMapped"];
15->13 [style = bold, label=""];
6->4 [style = solid, label="flatMapped"];
15->13 [style = solid, label="flatMapped"];
2->1 [style = solid, label="expected"];
2->3 [style = bold, label=""];
2->11 [style = solid, label="expected"];
3->6 [style = bold, label=""];
16->14 [style = solid, label="expected"];
3->15 [style = bold, label=""];
3->12 [style = bold, label=""];
9->10 [style = bold, label=""];
12->9 [style = bold, label=""];
8->7 [style = bold, label=""];
0->7 [style = bold, label=""];
6->12 [style = dashed, label="0"];
6->4 [style = bold, label=""];
5->1 [style = bold, label=""];
13->17 [style = bold, label=""];
17->14 [style = solid, label="result"];
6->15 [style = dashed, label="0"];
17->14 [style = bold, label=""];
7->2 [style = bold, label=""];
2->16 [style = dashed, label="0"];
7->16 [style = bold, label=""];
5->1 [style = solid, label="result"];
18->7 [style = bold, label=""];
10->11 [style = solid, label="result"];
4->5 [style = bold, label=""];
7->3 [style = solid, label="inputData"];
10->11 [style = bold, label=""];
}
