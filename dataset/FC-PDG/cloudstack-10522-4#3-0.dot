digraph {
4 [style = filled, label = "Mockito.doReturn(ScopeType.ZONE).when(storagePoolVoMock).getScope()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertTrue(returnedValue)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Mockito.doReturn(ScopeType.CLUSTER).when(storagePoolVoMock).getScope()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertFalse(returnedValue)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "isStorageCrossClusterMigrationTestStorageTypeEqualsZone['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertFalse(returnedValue)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "isStorageCrossClusterMigrationTestStorageTypeEqualsCluster['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "isStorageCrossClusterMigrationTestStorageTypeEqualsZone['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "boolean returnedValue = virtualMachineManagerImpl.isStorageCrossClusterMigration(hostMock,storagePoolVoMock)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Mockito.doReturn(2L).when(storagePoolVoMock).getClusterId()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Mockito.doReturn(1L).when(hostMock).getClusterId()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
6->3 [style = bold, label=""];
4->9 [style = dashed, label="0"];
4->1 [style = bold, label=""];
0->9 [style = bold, label=""];
1->7 [style = solid, label="returnedValue"];
5->7 [style = dashed, label="0"];
9->1 [style = bold, label=""];
5->10 [style = dashed, label="0"];
1->10 [style = bold, label=""];
0->4 [style = bold, label=""];
1->7 [style = bold, label=""];
1->5 [style = solid, label="returnedValue"];
3->0 [style = bold, label=""];
2->3 [style = bold, label=""];
1->10 [style = solid, label="returnedValue"];
8->3 [style = bold, label=""];
}
