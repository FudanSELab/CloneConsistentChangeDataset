digraph {
17 [style = filled, label = "final IndicesService indicesService = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testRetentionLeaseBackgroundSyncActionOnReplica['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testRetentionLeaseBackgroundSyncActionOnReplica['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "verify(indexShard).persistRetentionLeases()@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertTrue(flushRequest.getValue().force())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request,indexShard)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final ArgumentCaptor<FlushRequest> flushRequest = ArgumentCaptor.forClass()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "verify(indexShard).afterWriteOperation()@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(Settings.EMPTY,transportService,clusterService,indicesService,threadPool,shardStateAction,new ActionFilters(Collections.emptySet()),new IndexNameExpressionResolver())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final Index index = new Index(\"index\",\"uuid\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final ShardId shardId = new ShardId(index,id)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final TransportWriteAction.WritePrimaryResult<RetentionLeaseSyncAction.Request,RetentionLeaseSyncAction.Response> result = action.shardOperationOnPrimary(request,indexShard)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "result.respond(ActionListener.wrap(null,null))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testRetentionLeaseSyncActionOnPrimary['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final RetentionLeaseBackgroundSyncAction.Request request = new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(),retentionLeases)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "verify(indexShard).flush(flushRequest.capture())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final IndexShard indexShard = mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(result.replicaRequest(),sameInstance(request))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "when(indexShard.shardId()).thenReturn(shardId)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(Settings.EMPTY,transportService,clusterService,indicesService,threadPool,shardStateAction,new ActionFilters(Collections.emptySet()),new IndexNameExpressionResolver())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final AtomicBoolean success = new AtomicBoolean()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertNull(result.finalResponseIfSuccessful.getShardInfo())@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "final RetentionLeaseSyncAction.Request request = new RetentionLeaseSyncAction.Request(indexShard.shardId(),retentionLeases)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertTrue(flushRequest.getValue().waitIfOngoing())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(success.get())@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(indicesService.indexServiceSafe(index)).thenReturn(indexService)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "when(indexService.getShard(id)).thenReturn(indexShard)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final IndexService indexService = mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final RetentionLeases retentionLeases = mock()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final int id = randomIntBetween(0,4)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->17 [style = bold, label=""];
9->8 [style = solid, label="indexShard"];
16->3 [style = bold, label=""];
7->1 [style = solid, label="retentionLeases"];
23->25 [style = bold, label=""];
9->11 [style = bold, label=""];
26->7 [style = bold, label=""];
30->22 [style = solid, label="request"];
7->30 [style = bold, label=""];
11->14 [style = bold, label=""];
7->10 [style = bold, label=""];
8->23 [style = dashed, label="0"];
30->23 [style = bold, label=""];
30->23 [style = solid, label="request"];
1->20 [style = bold, label=""];
9->11 [style = solid, label="indexShard"];
22->28 [style = bold, label=""];
1->0 [style = bold, label=""];
19->17 [style = bold, label=""];
3->12 [style = bold, label=""];
25->29 [style = bold, label=""];
16->3 [style = solid, label="indexService"];
12->14 [style = solid, label="id"];
12->9 [style = bold, label=""];
0->20 [style = dashed, label="0"];
10->8 [style = solid, label="request"];
15->18 [style = bold, label=""];
9->23 [style = solid, label="indexShard"];
7->10 [style = solid, label="retentionLeases"];
20->5 [style = bold, label=""];
15->26 [style = bold, label=""];
8->1 [style = bold, label=""];
29->27 [style = bold, label=""];
10->30 [style = dashed, label="0"];
14->30 [style = solid, label="shardId"];
5->6 [style = bold, label=""];
10->8 [style = bold, label=""];
21->22 [style = bold, label=""];
6->13 [style = bold, label=""];
14->15 [style = solid, label="shardId"];
24->17 [style = bold, label=""];
7->30 [style = solid, label="retentionLeases"];
0->29 [style = dashed, label="0"];
17->26 [style = solid, label="indicesService"];
14->15 [style = bold, label=""];
17->18 [style = solid, label="indicesService"];
18->7 [style = bold, label=""];
27->21 [style = bold, label=""];
13->22 [style = dashed, label="0"];
4->14 [style = solid, label="index"];
17->4 [style = bold, label=""];
4->16 [style = bold, label=""];
14->10 [style = solid, label="shardId"];
0->5 [style = bold, label=""];
18->26 [style = dashed, label="0"];
}
