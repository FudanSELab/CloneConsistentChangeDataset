digraph {
9 [style = filled, label = "when(nvpApi.findNatRulesByLogicalRouterUuid(\"aaaaa\")).thenReturn(storedRules)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final List<NatRule> storedRules = Arrays.asList(rulepair)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "verify(nvpApi,atLeastOnce()).deleteLogicalRouterNatRule(eq(\"aaaaa\"),eq(rulepair(0(.getUuid()))@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testConfigureStaticNatRulesOnLogicalRouterExistingRules['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "final ConfigureStaticNatRulesOnLogicalRouterAnswer a = (ConfigureStaticNatRulesOnLogicalRouterAnswer)resource.executeRequest(cmd)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "when(cmd.getLogicalRouterUuid()).thenReturn(\"aaaaa\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "when(nvpApi.createLogicalRouterNatRule(eq(\"aaaaa\"),(NatRule)any())).thenReturn(rulepair(0().thenReturn(rulepair(1()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testConfigureStaticNatRulesOnLogicalRouterExistingRules['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "resource.configure(\"NiciraNvpResource\",parameters)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertTrue(a.getResult())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertFalse(a.getResult())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final ConfigureStaticNatRulesOnLogicalRouterCommand cmd = mock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "rulepair(1(.setUuid(UUID.randomUUID())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final List<StaticNatRuleTO> rules = new ArrayList<StaticNatRuleTO>()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final StaticNatRuleTO rule = new StaticNatRuleTO(1,\"11.11.11.11\",null,null,\"10.10.10.10\",null,null,null,false,false)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "when(cmd.getRules()).thenReturn(rules)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "when(nvpApi.createLogicalRouterNatRule(eq(\"aaaaa\"),(NatRule)any())).thenReturn(rulepair(0().thenThrow(new NiciraNvpApiException())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "rulepair(0(.setUuid(UUID.randomUUID())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final NatRule(( rulepair = resource.generateStaticNatRulePair(\"10.10.10.10\",\"11.11.11.11\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "@SuppressWarnings(\"unchecked\") final List<NatRule> storedRules = Collections.EMPTY_LIST@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testConfigureStaticNatRulesOnLogicalRouterRollback['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "rules.add(rule)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "verify(nvpApi,never()).createLogicalRouterNatRule(eq(\"aaaaa\"),argThat(new ArgumentMatcher<NatRule>(){@Override public boolean matches(final NatRule argument){final NatRule rule = argumentif (rule.getType().equals(\"DestinationNatRule\") && ((DestinationNatRule)rule).getToDestinationIpAddress().equals(\"10.10.10.10\")) {return true}if (rule.getType().equals(\"SourceNatRule\") && ((SourceNatRule)rule).getToSourceIpAddressMin().equals(\"11.11.11.11\")) {return true}return false}}))@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5->2 [style = bold, label=""];
22->19 [style = bold, label=""];
12->2 [style = solid, label="rules"];
8->12 [style = bold, label=""];
11->14 [style = solid, label="rulepair"];
1->3 [style = solid, label="cmd"];
2->13 [style = bold, label=""];
20->18 [style = bold, label=""];
11->0 [style = bold, label=""];
18->9 [style = solid, label="storedRules"];
1->8 [style = bold, label=""];
9->3 [style = bold, label=""];
14->9 [style = bold, label=""];
3->7 [style = bold, label=""];
12->5 [style = bold, label=""];
13->11 [style = bold, label=""];
18->9 [style = bold, label=""];
0->15 [style = bold, label=""];
14->9 [style = solid, label="storedRules"];
17->6 [style = bold, label=""];
7->4 [style = bold, label=""];
7->22 [style = dashed, label="0"];
16->6 [style = bold, label=""];
15->20 [style = bold, label=""];
11->10 [style = solid, label="rulepair"];
3->22 [style = bold, label=""];
8->5 [style = solid, label="rule"];
14->18 [style = dashed, label="0"];
4->19 [style = dashed, label="0"];
21->6 [style = bold, label=""];
6->1 [style = bold, label=""];
15->10 [style = bold, label=""];
10->14 [style = bold, label=""];
10->20 [style = dashed, label="0"];
}
