digraph {
13 [style = filled, label = "_clusterManagers(0(.handleLeadershipChange(null)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertFalse(testJobFile.exists())@@@34@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testKillManager['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "AssertWithBackoff.create().logger(LOG).timeoutMs(ASSERT_TIMEOUT).maxSleepMs(ASSERT_MAX_SLEEP).backoffFactor(1.5).assertTrue(new Predicate<Void>(){@Override public boolean apply(Void input){File writerOutputDir = getWriterOutputDir()if (writerOutputDir != null && writerOutputDir.exists()) {return FileUtils.listFiles(writerOutputDir,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@19fb269,true).size() >= 25}{return false}}},\"Waiting for writer output\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "_clusterManagers(0(.connectHelixManager()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "AssertWithBackoff.create().logger(LOG).timeoutMs(ASSERT_TIMEOUT).maxSleepMs(ASSERT_MAX_SLEEP).backoffFactor(1.5).assertTrue(new Predicate<Void>(){@Override public boolean apply(Void input){File jobOutputDir = getJobOutputDir()if (jobOutputDir != null && jobOutputDir.exists()) {return FileUtils.listFiles(jobOutputDir,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@19fb2a6,true).size() >= 100}{return false}}},\"Waiting for job-completion\")@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Collection<File> matches = Collections.EMPTY_LIST@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testKillManager['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "_clusterManagers(1(.disconnectHelixManager()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "AssertWithBackoff.create().logger(LOG).timeoutMs(ASSERT_TIMEOUT).maxSleepMs(ASSERT_MAX_SLEEP).backoffFactor(1.5).assertTrue(new Predicate<Void>(){@Override public boolean apply(Void input){File jobOutputDir = getJobOutputDir()if (jobOutputDir != null && jobOutputDir.exists()) {return FileUtils.listFiles(jobOutputDir,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@19fb35d,true).size() >= 100}{return false}}},\"Waiting for job-completion\")@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testRestartManager['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "setupTestDir()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "AssertWithBackoff.create().logger(LOG).timeoutMs(ASSERT_TIMEOUT).maxSleepMs(ASSERT_MAX_SLEEP).backoffFactor(1.5).assertTrue(new Predicate<Void>(){@Override public boolean apply(Void input){File writerOutputDir = getWriterOutputDir()if (writerOutputDir != null && writerOutputDir.exists()) {return FileUtils.listFiles(writerOutputDir,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@19fb320,true).size() >= 25}{return false}}},\"Waiting for writer output\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "_clusterManagers(0(.initializeHelixManager()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Thread.sleep(5000)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "_clusterManagers(0(.disconnectHelixManager()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final File testJobFile = new File(_jobDirPath + \"/GobblinClusterKillTestJob.conf\")@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->10 [style = bold, label=""];
10->16 [style = bold, label=""];
13->11 [style = bold, label=""];
5->3 [style = bold, label=""];
0->10 [style = dashed, label="0"];
0->8 [style = bold, label=""];
2->4 [style = bold, label=""];
9->0 [style = bold, label=""];
11->12 [style = bold, label=""];
7->2 [style = bold, label=""];
1->6 [style = bold, label=""];
16->13 [style = bold, label=""];
15->2 [style = bold, label=""];
4->0 [style = bold, label=""];
6->5 [style = bold, label=""];
12->14 [style = bold, label=""];
8->1 [style = bold, label=""];
}
