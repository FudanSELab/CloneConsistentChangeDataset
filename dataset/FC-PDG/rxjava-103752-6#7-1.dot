digraph {
3 [style = filled, label = "takeOneAnotherBoundary['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final AtomicReference<Subscriber<? super Object>> refMain = new AtomicReference<Subscriber<? super Object>>()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "to.assertValueCount(1).assertNotTerminated()@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final AtomicReference<Observer<? super Object>> ref = new AtomicReference<Observer<? super Object>>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "takeOneAnotherBoundary['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ts.assertValueCount(1).assertNotTerminated()@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TestObserverEx<Observable<Object>> to = new Observable<Object>(){@Override protected void subscribeActual(Observer<? super Object> observer){observer.onSubscribe(Disposable.empty())refMain.set(observer)}}.window(new Observable<Object>(){@Override protected void subscribeActual(Observer<? super Object> observer){observer.onSubscribe(Disposable.empty())ref.set(observer)}}).to(TestHelper.testConsumer())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<Subscriber<? super Object>>()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "ts.assertValueCount(1).assertNotTerminated().cancel()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "TestSubscriberEx<Flowable<Object>> ts = new Flowable<Object>(){@Override protected void subscribeActual(Subscriber<? super Object> subscriber){subscriber.onSubscribe(new BooleanSubscription())refMain.set(subscriber)}}.window(new Flowable<Object>(){@Override protected void subscribeActual(Subscriber<? super Object> subscriber){subscriber.onSubscribe(new BooleanSubscription())ref.set(subscriber)}}).to(TestHelper.testConsumer())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final AtomicReference<Subscriber<? super Object>> refMain = new AtomicReference<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "final AtomicReference<Observer<? super Object>> refMain = new AtomicReference<Observer<? super Object>>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ref.get().onNext(1)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "takeOneAnotherBoundary['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "to.assertValueCount(1).assertNotTerminated().dispose()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13->10 [style = bold, label=""];
1->4 [style = bold, label=""];
6->7 [style = dashed, label="0"];
3->6 [style = bold, label=""];
0->11 [style = dashed, label="0"];
4->2 [style = bold, label=""];
9->7 [style = bold, label=""];
7->8 [style = bold, label=""];
15->5 [style = bold, label=""];
6->10 [style = dashed, label="0"];
2->15 [style = dashed, label="0"];
6->1 [style = bold, label=""];
1->12 [style = dashed, label="0"];
5->0 [style = bold, label=""];
10->12 [style = bold, label=""];
12->14 [style = bold, label=""];
1->8 [style = dashed, label="0"];
14->15 [style = bold, label=""];
5->11 [style = bold, label=""];
4->14 [style = dashed, label="0"];
8->4 [style = bold, label=""];
2->5 [style = bold, label=""];
}
