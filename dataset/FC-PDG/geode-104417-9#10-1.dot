digraph {
26 [style = filled, label = "Set<ServerLocation> excluded = Collections.emptySet()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "exchangeReturnsExistingConnectionIfOneExists['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ServerLocation serverLocation2 = mock()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "when(connection2.getServer()).thenReturn(serverLocation2)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(connectionManager.borrowConnection(timeout).getServer()).isEqualTo(connection2.getServer())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ServerLocation serverLocation1 = mock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Connection heldConnection1 = connectionManager.borrowConnection(serverLocation1,timeout,false)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "when(connectionFactory.createClientToServerConnection(serverLocation2,false)).thenReturn(connection2)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Connection connection1 = mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Connection heldConnection2 = connectionManager.borrowConnection(serverLocation2,false)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ServerLocation serverLocation2 = mock()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Endpoint endpoint2 = mock()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "when(connection2.getEndpoint()).thenReturn(endpoint2)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "heldConnection2 = connectionManager.exchangeConnection(heldConnection1,excluded)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "connectionManager.start(backgroundProcessor)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "connectionManager.close(false)@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "connectionManager = createDefaultConnectionManager()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ServerLocation serverLocation1 = mock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "connectionManager.close(false)@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "connectionManager.returnConnection(heldConnection2)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(connectionManager.getConnectionCount()).isEqualTo(2)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "returnConnectionReturnsToHead['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "connectionManager.returnConnection(heldConnection2,true)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Connection heldConnection2 = connectionManager.borrowConnection(serverLocation2,timeout,false)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Connection heldConnection1 = connectionManager.borrowConnection(serverLocation1,false)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "returnConnectionReturnsToHead['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(heldConnection2.getServer()).isEqualTo(connection2.getServer())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "when(connectionFactory.createClientToServerConnection(serverLocation1,false)).thenReturn(connection1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "when(endpoint2.getLocation()).thenReturn(serverLocation2)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Connection connection2 = mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28->29 [style = bold, label=""];
4->3 [style = bold, label=""];
20->6 [style = solid, label="endpoint2"];
29->17 [style = bold, label=""];
21->17 [style = solid, label="heldConnection1"];
12->5 [style = bold, label=""];
14->21 [style = solid, label="serverLocation1"];
3->21 [style = dashed, label="0"];
16->10 [style = bold, label=""];
3->17 [style = solid, label="heldConnection1"];
27->28 [style = bold, label=""];
8->28 [style = solid, label="heldConnection1"];
7->9 [style = solid, label="serverLocation2"];
4->21 [style = bold, label=""];
5->10 [style = solid, label="serverLocation2"];
11->12 [style = solid, label="connection1"];
9->17 [style = bold, label=""];
7->16 [style = solid, label="connection2"];
11->12 [style = bold, label=""];
6->0 [style = bold, label=""];
9->27 [style = solid, label="heldConnection2"];
7->20 [style = bold, label=""];
14->3 [style = solid, label="serverLocation1"];
5->0 [style = solid, label="serverLocation2"];
10->6 [style = bold, label=""];
0->15 [style = bold, label=""];
12->7 [style = bold, label=""];
20->10 [style = solid, label="connection2"];
5->23 [style = solid, label="serverLocation2"];
9->27 [style = bold, label=""];
26->2 [style = bold, label=""];
13->19 [style = bold, label=""];
17->24 [style = bold, label=""];
20->16 [style = bold, label=""];
7->6 [style = solid, label="serverLocation2"];
2->8 [style = solid, label="serverLocation1"];
3->8 [style = bold, label=""];
14->12 [style = solid, label="serverLocation1"];
23->18 [style = solid, label="heldConnection2"];
25->26 [style = bold, label=""];
15->4 [style = bold, label=""];
8->9 [style = bold, label=""];
18->13 [style = bold, label=""];
26->28 [style = solid, label="excluded"];
5->7 [style = bold, label=""];
5->8 [style = solid, label="serverLocation2"];
16->0 [style = solid, label="endpoint2"];
1->14 [style = bold, label=""];
14->2 [style = bold, label=""];
2->11 [style = solid, label="connection1"];
22->14 [style = bold, label=""];
7->15 [style = solid, label="serverLocation2"];
23->9 [style = bold, label=""];
2->11 [style = bold, label=""];
8->18 [style = solid, label="heldConnection2"];
17->18 [style = bold, label=""];
8->23 [style = dashed, label="0"];
21->23 [style = bold, label=""];
}
