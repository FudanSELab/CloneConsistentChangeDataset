digraph {
15 [style = filled, label = "assertEquals(0,initialConnectionsToTransport2)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "TransportAddress address2 = transport2.boundAddress().publishAddress()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertBusy(null)@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "useAddress1.set(false)@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "testClusterNameValidationPreventConnectingToDifferentClusters['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(numOfConnections,connectionManager.size())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertFalse(connectionManager.getAllConnectedNodes().stream().anyMatch(null))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertFalse(connectionManager.getAllConnectedNodes().stream().anyMatch(null))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testProxyStrategyWillOpenNewConnectionsOnDisconnect['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "TransportAddress address1 = transport1.boundAddress().publishAddress()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "localService.acceptIncomingRequests()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "TransportAddress address1 = transport1.boundAddress().publishAddress()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "PlainActionFuture<Void> connectFuture = PlainActionFuture.newFuture()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "transport1.close()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "localService.start()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertFalse(connectionManager.getAllConnectedNodes().stream().anyMatch(null))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "int numOfConnections = randomIntBetween(4,8)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertTrue(connectionManager.getAllConnectedNodes().stream().anyMatch(null))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertTrue(strategy.assertNoRunningConnections())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "AtomicBoolean useAddress1 = new AtomicBoolean(true)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "transport1.close()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Supplier<TransportAddress> resolver = alternatingResolver(address1,address2)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertBusy(null)@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "localService.start()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ConnectionManager connectionManager = new ConnectionManager(profile,localService.transport)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertFalse(connectionManager.getAllConnectedNodes().stream().anyMatch(null))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "strategy.connect(connectFuture)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testProxyStrategyWillOpenNewConnectionsOnDisconnect['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "connectFuture.actionGet()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Settings otherSettings = Settings.builder().put(\"cluster.name\",\"otherCluster\").build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12->7 [style = bold, label=""];
29->26 [style = bold, label=""];
7->29 [style = dashed, label="0"];
10->6 [style = bold, label=""];
10->23 [style = bold, label=""];
23->24 [style = solid, label="address2"];
22->24 [style = bold, label=""];
25->10 [style = bold, label=""];
20->5 [style = bold, label=""];
15->4 [style = bold, label=""];
3->21 [style = bold, label=""];
7->15 [style = solid, label="initialConnectionsToTransport2"];
24->11 [style = bold, label=""];
14->12 [style = bold, label=""];
6->17 [style = bold, label=""];
5->9 [style = bold, label=""];
26->27 [style = bold, label=""];
0->11 [style = bold, label=""];
16->10 [style = bold, label=""];
4->1 [style = bold, label=""];
8->18 [style = bold, label=""];
19->16 [style = bold, label=""];
18->14 [style = solid, label="connectFuture"];
11->8 [style = bold, label=""];
17->13 [style = bold, label=""];
3->0 [style = bold, label=""];
7->29 [style = bold, label=""];
8->18 [style = solid, label="connectFuture"];
10->24 [style = solid, label="address1"];
13->3 [style = bold, label=""];
2->16 [style = bold, label=""];
3->4 [style = solid, label="numOfConnections"];
7->15 [style = bold, label=""];
3->22 [style = bold, label=""];
1->20 [style = bold, label=""];
18->14 [style = bold, label=""];
21->0 [style = bold, label=""];
23->17 [style = bold, label=""];
28->25 [style = bold, label=""];
1->5 [style = bold, label=""];
}
