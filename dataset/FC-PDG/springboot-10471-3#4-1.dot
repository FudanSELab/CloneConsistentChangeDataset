digraph {
5 [style = filled, label = "this.exporter.afterPropertiesSet()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "verify(this.mBeanServer).unregisterMBean(this.objectNameCaptor.capture())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "verify(this.mBeanServer).registerMBean(this.objectCaptor.capture(),this.objectNameCaptor.capture())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "afterPropertiesSetShouldRegisterMBeans['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "destroyShouldUnregisterMBeans['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "afterPropertiesSetShouldRegisterMBeans['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "this.endpoints.add(new TestExposableJmxEndpoint(new TestJmxOperation()))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(this.objectNameCaptor.getValue().getKeyProperty(\"name\")).isEqualTo(\"test\")@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "this.exporter.destroy()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(this.objectCaptor.getValue()).isInstanceOf()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->1 [style = bold, label=""];
7->0 [style = bold, label=""];
1->0 [style = bold, label=""];
3->2 [style = bold, label=""];
5->9 [style = bold, label=""];
9->7 [style = bold, label=""];
8->2 [style = bold, label=""];
5->4 [style = bold, label=""];
2->5 [style = bold, label=""];
6->2 [style = bold, label=""];
}
