digraph {
13 [style = filled, label = "Assert.assertNotNull(batch.tryAppend(record,WriteCallback.EMPTY))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "BytesBoundedBatch batch = new BytesBoundedBatch(8,3000)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "LargeMessagePolicy policy = LargeMessagePolicy.DROP@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Assert.assertNotNull(batch.tryAppend(record,WriteCallback.EMPTY,policy))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "Assert.assertEquals(batch.hasRoom(record,policy),true)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(batch.hasRoom(record,policy),false)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testBatch['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertNotNull(batch.tryAppend(record,WriteCallback.EMPTY,policy))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Assert.assertNull(batch.tryAppend(record,WriteCallback.EMPTY))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(batch.hasRoom(record),false)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "testBatchWithLargeRecord['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertNotNull(batch.tryAppend(record,WriteCallback.EMPTY))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Assert.assertNotNull(batch.tryAppend(record,WriteCallback.EMPTY))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Assert.assertNotNull(batch.tryAppend(record,WriteCallback.EMPTY))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "Assert.assertNotNull(batch.tryAppend(record,WriteCallback.EMPTY,policy))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "Assert.assertNotNull(batch.tryAppend(record,WriteCallback.EMPTY,policy))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertNotNull(batch.tryAppend(record,WriteCallback.EMPTY))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "Assert.assertNotNull(batch.tryAppend(record,WriteCallback.EMPTY,policy))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertNotNull(batch.tryAppend(record,WriteCallback.EMPTY))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Assert.assertNotNull(batch.tryAppend(record,WriteCallback.EMPTY,policy))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "BytesBoundedBatch batch = new BytesBoundedBatch(200,3000)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertNotNull(batch.tryAppend(record,WriteCallback.EMPTY))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Assert.assertNotNull(batch.tryAppend(record,WriteCallback.EMPTY))@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertNotNull(batch.tryAppend(record,WriteCallback.EMPTY,policy))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "testBatch['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(batch.hasRoom(record),true)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "Assert.assertNull(batch.tryAppend(record,WriteCallback.EMPTY,policy))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "String record = \"abcdefgh\"@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertNull(batch.tryAppend(record,WriteCallback.EMPTY))@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertNotNull(batch.tryAppend(record,WriteCallback.EMPTY,policy))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28->29 [style = bold, label=""];
1->4 [style = solid, label="record"];
1->17 [style = solid, label="record"];
1->23 [style = solid, label="record"];
1->13 [style = solid, label="record"];
1->15 [style = solid, label="record"];
7->11 [style = bold, label=""];
1->11 [style = solid, label="record"];
24->19 [style = bold, label=""];
1->26 [style = solid, label="record"];
7->21 [style = dashed, label="0"];
18->23 [style = bold, label=""];
15->14 [style = bold, label=""];
3->26 [style = dashed, label="0"];
4->17 [style = dashed, label="0"];
16->26 [style = solid, label="policy"];
1->2 [style = solid, label="record"];
1->27 [style = solid, label="record"];
9->4 [style = bold, label=""];
4->13 [style = bold, label=""];
8->3 [style = bold, label=""];
8->23 [style = dashed, label="0"];
1->20 [style = solid, label="record"];
23->26 [style = bold, label=""];
16->14 [style = solid, label="policy"];
1->8 [style = solid, label="record"];
1->10 [style = solid, label="record"];
21->24 [style = bold, label=""];
16->17 [style = bold, label=""];
1->7 [style = solid, label="record"];
2->10 [style = bold, label=""];
16->19 [style = solid, label="policy"];
16->21 [style = solid, label="policy"];
1->3 [style = solid, label="record"];
10->6 [style = bold, label=""];
1->19 [style = solid, label="record"];
11->2 [style = bold, label=""];
1->6 [style = solid, label="record"];
1->9 [style = bold, label=""];
19->25 [style = bold, label=""];
1->25 [style = solid, label="record"];
26->21 [style = bold, label=""];
1->21 [style = solid, label="record"];
22->0 [style = bold, label=""];
12->14 [style = dashed, label="0"];
5->0 [style = bold, label=""];
3->7 [style = bold, label=""];
1->14 [style = solid, label="record"];
6->15 [style = dashed, label="0"];
1->16 [style = bold, label=""];
0->1 [style = bold, label=""];
16->25 [style = solid, label="policy"];
16->20 [style = solid, label="policy"];
16->18 [style = solid, label="policy"];
16->24 [style = solid, label="policy"];
16->15 [style = solid, label="policy"];
11->24 [style = dashed, label="0"];
0->29 [style = dashed, label="0"];
1->12 [style = bold, label=""];
2->19 [style = dashed, label="0"];
25->15 [style = bold, label=""];
16->23 [style = solid, label="policy"];
16->17 [style = solid, label="policy"];
29->1 [style = bold, label=""];
13->8 [style = bold, label=""];
13->18 [style = dashed, label="0"];
1->24 [style = solid, label="record"];
1->18 [style = solid, label="record"];
12->27 [style = bold, label=""];
10->25 [style = dashed, label="0"];
1->9 [style = solid, label="record"];
17->18 [style = bold, label=""];
14->20 [style = bold, label=""];
1->12 [style = solid, label="record"];
6->12 [style = bold, label=""];
}
