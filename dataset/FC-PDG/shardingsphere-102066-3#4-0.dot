digraph {
14 [style = filled, label = "assertIs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "final ExpectedTableRule expected@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual)@@@4@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),CoreMatchers.is(expected.getName()))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertNull(assertContext.getText(\"Actual should not exist.\"),actual)@@@4@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "null == expected@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final TableRuleSegment actual@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "AlgorithmAssert.assertIs(assertContext,actual.getKeyGenerateStrategy(),expected.getKeyGenerateStrategy())@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertIs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final BindingTableRuleSegment actual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "AlgorithmAssert.assertIs(assertContext,actual.getTableStrategy(),expected.getTableStrategy())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final TableRuleSegment actual@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateStrategyColumn(),CoreMatchers.is(expected.getKeyGenerateStrategyColumn()))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertIs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s sharding binding table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableGroups(),is(expected.getTableGroups()))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final ExpectedShardingBindingTableRule expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual should exist.\"),actual)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSources(),CoreMatchers.is(expected.getDataSources()))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategyColumn(),CoreMatchers.is(expected.getTableStrategyColumn()))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->20 [style = dotted, label="false"];
12->16 [style = dashed, label="0"];
6->11 [style = dotted, label="true"];
17->1 [style = bold, label=""];
3->2 [style = solid, label="assertContext"];
22->19 [style = dotted, label="true"];
6->4 [style = bold, label=""];
5->12 [style = solid, label="actual"];
4->16 [style = dotted, label="true"];
4->16 [style = bold, label=""];
4->12 [style = dotted, label="true"];
4->2 [style = dotted, label="false"];
1->20 [style = dashed, label="0"];
4->0 [style = dotted, label="false"];
19->4 [style = solid, label="expected"];
0->9 [style = bold, label=""];
18->8 [style = solid, label="actual"];
9->2 [style = bold, label=""];
4->17 [style = bold, label=""];
15->10 [style = solid, label="assertContext"];
4->8 [style = bold, label=""];
18->12 [style = solid, label="actual"];
2->10 [style = bold, label=""];
11->21 [style = dashed, label="0"];
4->17 [style = dotted, label="false"];
3->10 [style = solid, label="assertContext"];
8->1 [style = bold, label=""];
4->10 [style = dotted, label="false"];
6->5 [style = dotted, label="true"];
14->13 [style = dotted, label="true"];
14->15 [style = dotted, label="true"];
7->0 [style = bold, label=""];
4->1 [style = dotted, label="false"];
13->17 [style = solid, label="actual"];
15->2 [style = solid, label="assertContext"];
22->4 [style = bold, label=""];
4->12 [style = bold, label=""];
6->3 [style = dotted, label="true"];
4->9 [style = dotted, label="false"];
5->8 [style = solid, label="actual"];
4->8 [style = dotted, label="false"];
14->11 [style = dotted, label="true"];
1->7 [style = bold, label=""];
14->4 [style = bold, label=""];
22->18 [style = dotted, label="true"];
22->21 [style = dotted, label="true"];
8->17 [style = dashed, label="0"];
8->20 [style = bold, label=""];
4->7 [style = dotted, label="false"];
11->4 [style = solid, label="expected"];
13->16 [style = solid, label="actual"];
}
