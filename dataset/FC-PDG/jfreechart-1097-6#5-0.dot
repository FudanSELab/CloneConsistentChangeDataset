digraph {
25 [style = filled, label = "assertTrue(c1.equals(c2))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "c1.setOutlinePaint(new GradientPaint(1.0f,2.0f,Color.WHITE,3.0f,4.0f,Color.gray))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "DialCap c2 = (DialCap)c1.clone()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testSerialization['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "c1 = new DialCap()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "c1.setOutlineStroke(new BasicStroke(2.0f))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "c1 = new DialCap()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertTrue(c1 != c2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertTrue(c1 != c2)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "DialCap c2 = (DialCap)TestUtils.serialised(c1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "c2 = (DialCap)TestUtils.serialised(c1)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertTrue(c1.getClass() == c2.getClass())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertFalse(c2.hasListener(l1))@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testCloning['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "c1.setFillPaint(new GradientPaint(1.0f,2.0f,Color.BLUE,3.0f,4.0f,Color.green))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(c1,c2)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "c1.setFillPaint(new GradientPaint(1.0f,2.0f,Color.BLUE,3.0f,4.0f,Color.green))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "c1.addChangeListener(l1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertTrue(c1.equals(c2))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "DialCap c1 = new DialCap()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "DialCap c2 = (DialCap)TestUtilities.serialised(c1)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "testSerialization['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(c1.hasListener(l1))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "MyDialLayerChangeListener l1 = new MyDialLayerChangeListener()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "c2 = (DialCap)c1.clone()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertTrue(c1.getClass() == c2.getClass())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->10 [style = solid, label="c1"];
2->0 [style = solid, label="c1"];
8->12 [style = solid, label="c1"];
5->12 [style = dashed, label="0"];
14->25 [style = bold, label=""];
7->1 [style = bold, label=""];
25->1 [style = bold, label=""];
22->2 [style = bold, label=""];
6->0 [style = solid, label="c2"];
2->18 [style = solid, label="c1"];
23->20 [style = solid, label="l1"];
1->24 [style = solid, label="c1"];
9->2 [style = bold, label=""];
2->6 [style = bold, label=""];
5->4 [style = solid, label="c2"];
1->3 [style = bold, label=""];
4->21 [style = bold, label=""];
23->15 [style = bold, label=""];
12->4 [style = solid, label="c2"];
6->0 [style = bold, label=""];
21->24 [style = bold, label=""];
3->12 [style = bold, label=""];
2->10 [style = bold, label=""];
15->16 [style = bold, label=""];
17->19 [style = bold, label=""];
11->2 [style = bold, label=""];
8->7 [style = bold, label=""];
6->10 [style = dashed, label="0"];
2->13 [style = bold, label=""];
23->16 [style = solid, label="l1"];
3->5 [style = bold, label=""];
8->4 [style = solid, label="c1"];
6->13 [style = dashed, label="0"];
12->4 [style = bold, label=""];
21->24 [style = solid, label="c2"];
23->15 [style = solid, label="l1"];
19->23 [style = bold, label=""];
5->4 [style = bold, label=""];
10->0 [style = bold, label=""];
24->17 [style = bold, label=""];
0->8 [style = bold, label=""];
5->21 [style = dashed, label="0"];
0->18 [style = dashed, label="0"];
8->5 [style = solid, label="c1"];
2->6 [style = solid, label="c1"];
13->18 [style = solid, label="c2"];
10->0 [style = solid, label="c2"];
4->24 [style = dashed, label="0"];
13->25 [style = solid, label="c2"];
16->20 [style = bold, label=""];
18->14 [style = bold, label=""];
21->19 [style = solid, label="c2"];
13->18 [style = bold, label=""];
}
