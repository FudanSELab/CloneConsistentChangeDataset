digraph {
9 [style = filled, label = "testCreateSinkTableWithoutPK['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "thrown.expect()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "createActualSource(illegalSchema,getFullSinkOptions())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "TableSchema illegalSchema = TableSchema.builder().field(\"window_start\",DataTypes.STRING()).field(\"region\",DataTypes.STRING()).field(\"view_count\",DataTypes.BIGINT()).build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TableSchema illegalSchema = TableSchema.builder().field(\"region\",DataTypes.STRING()).field(\"view_count\",DataTypes.BIGINT()).build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testCreateSourceTableWithoutPK['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "thrown.expect(containsCause(new ValidationException(\"'upsert-kafka' tables require to define a PRIMARY KEY constraint. \" + \"The PRIMARY KEY specifies which columns should be read from or write to the Kafka message key. \" + \"The PRIMARY KEY also defines records in the 'upsert-kafka' table should update or delete on which keys.\")))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "createActualSource(illegalSchema,getFullSourceOptions())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "testCreateSourceTableWithoutPK['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "createActualSink(illegalSchema,getFullSinkOptions())@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1->3 [style = bold, label=""];
3->8 [style = dashed, label="0"];
1->6 [style = solid, label="illegalSchema"];
3->6 [style = dashed, label="0"];
1->6 [style = bold, label=""];
2->7 [style = bold, label=""];
9->0 [style = bold, label=""];
7->8 [style = solid, label="illegalSchema"];
5->0 [style = bold, label=""];
1->7 [style = dashed, label="0"];
7->8 [style = bold, label=""];
1->3 [style = solid, label="illegalSchema"];
2->1 [style = bold, label=""];
4->0 [style = bold, label=""];
0->2 [style = bold, label=""];
}
