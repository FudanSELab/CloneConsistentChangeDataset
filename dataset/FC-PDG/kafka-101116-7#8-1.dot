digraph {
3 [style = filled, label = "testUpperBoundWithLargeTimestamps['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(\"appending zeros to key should still be in range\",lower.compareTo(WindowKeySchema.toStoreKeyBinary(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b5bb7a,Long.MAX_VALUE - 1,0)) < 0)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testUpperBoundWithLargeTimestamps['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertThat(\"shorter key with max timestamp should be in range\",upper.compareTo(Bytes.wrap(SessionKeySchema.toBinary(new Windowed<>(Bytes.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b5bb08),new SessionWindow(Long.MAX_VALUE,Long.MAX_VALUE))))) >= 0)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(lower,equalTo(WindowKeySchema.toStoreKeyBinary(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b5bba2,0,0)))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final Bytes upper = sessionKeySchema.upperRange(Bytes.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b5baec),Long.MAX_VALUE)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testLowerBoundMatchesTrailingZeros['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Bytes upper = sessionKeySchema.upperRange(Bytes.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b5ba75),Long.MAX_VALUE)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertThat(\"shorter key with max timestamp should be in range\",upper.compareTo(Bytes.wrap(SessionKeySchema.toBinary(new Windowed<>(Bytes.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b5bb29),new SessionWindow(Long.MAX_VALUE,Long.MAX_VALUE))))) >= 0)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Bytes lower = windowKeySchema.lowerRange(Bytes.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b5bb63),Long.MAX_VALUE - 1)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(upper,equalTo(Bytes.wrap(SessionKeySchema.toBinary(new Windowed<>(Bytes.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b5bb49),new SessionWindow(Long.MAX_VALUE,Long.MAX_VALUE))))))@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4->1 [style = bold, label=""];
2->0 [style = bold, label=""];
6->0 [style = bold, label=""];
5->6 [style = bold, label=""];
3->2 [style = bold, label=""];
10->8 [style = bold, label=""];
9->7 [style = bold, label=""];
2->1 [style = solid, label="upper"];
0->4 [style = bold, label=""];
7->10 [style = bold, label=""];
7->8 [style = solid, label="lower"];
2->6 [style = dashed, label="0"];
2->7 [style = dashed, label="0"];
6->1 [style = solid, label="upper"];
}
