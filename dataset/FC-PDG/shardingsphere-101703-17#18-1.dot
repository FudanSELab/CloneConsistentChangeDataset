digraph {
1 [style = filled, label = "ShardingSphereResource resource = new ShardingSphereResource(Collections.emptyMap(),mock(),mock())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "SQLRewriteUnit sqlRewriteUnit1 = new SQLRewriteUnit(\"sql1\",Collections.singletonList(\"parameter1\"))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "expected.add(expectedUnit1)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Collection<ExecutionUnit> expected = new LinkedHashSet<>(2,1)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Map<RouteUnit,SQLRewriteUnit> sqlRewriteUnits = new HashMap<>(2,1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertThat(actual,is(expected))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "SQLRewriteUnit sqlRewriteUnit2 = new SQLRewriteUnit(\"sql2\",Collections.singletonList(\"parameter2\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "expected.add(expectedUnit2)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ExecutionUnit expectedUnit2 = new ExecutionUnit(\"actualName2\",new SQLUnit(\"sql2\",Collections.singletonList(\"parameter2\")))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(),is(0))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "sqlRewriteUnits.put(routeUnit2,sqlRewriteUnit2)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\",resource,ruleMetaData,schema)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "RouteUnit routeUnit1 = new RouteUnit(new RouteMapper(\"logicName1\",\"actualName1\"),Collections.singletonList(new RouteMapper(\"logicName1\",\"actualName1\")))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\",\"actualName2\"),Collections.singletonList(new RouteMapper(\"logicName1\",\"actualName1\")))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(actual,is(expected))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Collection<ExecutionUnit> expected = new LinkedHashSet<>(1,1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ShardingSphereSchema schema = new ShardingSphereSchema(mock(),buildPhysicalSchemaMetaData())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Collection<ExecutionUnit> actual = ExecutionContextBuilder.build(metaData,new RouteSQLRewriteResult(sqlRewriteUnits),mock())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "ShardingSphereSchema schema = new ShardingSphereSchema(mock(),buildPhysicalSchemaMetaDataWithoutPrimaryKey())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "sqlRewriteUnits.put(routeUnit1,sqlRewriteUnit1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertBuildRouteSQLRewriteResult['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "ExecutionUnit expectedUnit1 = new ExecutionUnit(\"actualName1\",new SQLUnit(\"sql1\",Collections.singletonList(\"parameter1\")))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertBuildRouteSQLRewriteResultWithEmptyPrimaryKeyMeta['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "ShardingSphereRuleMetaData ruleMetaData = new ShardingSphereRuleMetaData(Collections.emptyList(),Collections.emptyList())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertThat(actual.iterator().next().getSqlUnit().getSqlRuntimeContext().getPrimaryKeysMetaData().size(),is(1))@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "expected.add(expectedUnit2)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertBuildRouteSQLRewriteResult['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "RouteUnit routeUnit2 = new RouteUnit(new RouteMapper(\"logicName2\",\"actualName2\"),Collections.singletonList(new RouteMapper(\"logicName2\",\"actualName2\")))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ShardingSphereMetaData metaData = new ShardingSphereMetaData(\"name\",Collections.emptyList(),Collections.emptyList(),resource,schema)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24->10 [style = bold, label=""];
5->13 [style = dashed, label="0"];
5->10 [style = bold, label=""];
8->26 [style = solid, label="expected"];
19->21 [style = solid, label="ruleMetaData"];
2->26 [style = bold, label=""];
7->11 [style = bold, label=""];
1->3 [style = solid, label="resource"];
10->21 [style = dashed, label="0"];
12->8 [style = dashed, label="0"];
3->24 [style = bold, label=""];
17->6 [style = bold, label=""];
8->16 [style = solid, label="actual"];
13->3 [style = solid, label="schema"];
10->8 [style = solid, label="metaData"];
3->21 [style = solid, label="resource"];
0->2 [style = bold, label=""];
9->28 [style = dashed, label="0"];
12->15 [style = bold, label=""];
21->8 [style = bold, label=""];
7->14 [style = solid, label="routeUnit1"];
21->8 [style = solid, label="metaData"];
1->13 [style = bold, label=""];
2->4 [style = solid, label="expectedUnit2"];
5->21 [style = solid, label="schema"];
2->12 [style = bold, label=""];
17->13 [style = solid, label="routeUnit2"];
27->6 [style = solid, label="routeUnit2"];
7->27 [style = dashed, label="0"];
8->0 [style = bold, label=""];
19->5 [style = bold, label=""];
6->1 [style = bold, label=""];
5->21 [style = bold, label=""];
25->27 [style = bold, label=""];
5->10 [style = solid, label="schema"];
3->5 [style = bold, label=""];
23->22 [style = bold, label=""];
1->8 [style = solid, label="sqlRewriteUnits"];
13->3 [style = bold, label=""];
10->8 [style = bold, label=""];
3->19 [style = bold, label=""];
8->2 [style = bold, label=""];
0->15 [style = solid, label="expectedUnit1"];
12->16 [style = solid, label="expected"];
24->26 [style = solid, label="actual"];
15->4 [style = bold, label=""];
6->13 [style = solid, label="sqlRewriteUnit2"];
11->17 [style = bold, label=""];
23->6 [style = solid, label="sqlRewriteUnit2"];
1->14 [style = bold, label=""];
27->23 [style = bold, label=""];
22->24 [style = solid, label="sqlRewriteUnits"];
26->28 [style = bold, label=""];
14->13 [style = bold, label=""];
3->24 [style = solid, label="metaData"];
20->7 [style = bold, label=""];
18->7 [style = bold, label=""];
10->2 [style = solid, label="expectedUnit2"];
11->14 [style = solid, label="sqlRewriteUnit1"];
16->9 [style = bold, label=""];
3->10 [style = solid, label="resource"];
4->16 [style = bold, label=""];
22->6 [style = bold, label=""];
}
