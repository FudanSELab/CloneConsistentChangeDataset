digraph {
29 [style = filled, label = "AggregateProcessAllWindowFunctionMock mock = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "verify(mock).open(config)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "verify(ctx).currentProcessingTime()@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "InternalAggregateProcessAllWindowFunction<Long,Set<Long>,Map<Long,Long>,String,TimeWindow> windowFunction = new InternalAggregateProcessAllWindowFunction<>(new AggregateFunction<Long,Set<Long>,Map<Long,Long>>(){@Override public Set<Long> createAccumulator(){return new HashSet<>()}@Override public void add(Long value,Set<Long> accumulator){accumulator.add(value)}@Override public Map<Long,Long> getResult(Set<Long> accumulator){Map<Long,Long> result = new HashMap<>()for (Long in : accumulator){result.put(in,in)}return result}@Override public Set<Long> merge(Set<Long> a,Set<Long> b){a.addAll(b)return a}},mock)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "args.add(24L)@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "TypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "windowFunction.close()@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "windowFunction.setRuntimeContext(rCtx)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Collector<String> c = (Collector<String>)mock()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "windowFunction.process(42L,w,ctx,args,c)@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "verify(mock).close()@@@45@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "InternalWindowFunction.InternalWindowContext ctx = mock()@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "StreamingFunctionUtils.setOutputType(windowFunction,stringType,execConf)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Configuration config = new Configuration()@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "verify(ctx).globalState()@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "verify(mock).process((AggregateProcessAllWindowFunctionMock.Context)anyObject(),(Iterable)argThat(containsInAnyOrder(allOf(hasEntry(is(23L),is(23L)),hasEntry(is(24L),is(24L))))),eq(c))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testInternalAggregateProcessWindowFunction['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "windowFunction.open(config)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "windowFunction.close()@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TimeWindow w = mock()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testInternalAggregateProcessWindowFunction['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "verify(mock).setOutputType(stringType,execConf)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "execConf.setParallelism(42)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "List<Long> args = new LinkedList<>()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "verify(mock).close()@@@60@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "verify(ctx).windowState()@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ExecutionConfig execConf = new ExecutionConfig()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "verify(mock).setRuntimeContext(rCtx)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "InternalAggregateProcessWindowFunction<Long,Set<Long>,Map<Long,Long>,String,Long,TimeWindow> windowFunction = new InternalAggregateProcessWindowFunction<>(new AggregateFunction<Long,Set<Long>,Map<Long,Long>>(){@Override public Set<Long> createAccumulator(){return new HashSet<>()}@Override public Set<Long> add(Long value,Set<Long> accumulator){accumulator.add(value)return accumulator}@Override public Map<Long,Long> getResult(Set<Long> accumulator){Map<Long,Long> result = new HashMap<>()for (Long in : accumulator){result.put(in,in)}return result}@Override public Set<Long> merge(Set<Long> a,Set<Long> b){a.addAll(b)return a}},mock)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "args.add(23L)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "RuntimeContext rCtx = mock()@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "AggregateProcessWindowFunctionMock mock = mock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "verify(ctx).currentWatermark()@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testInternalAggregateProcessAllWindowFunction['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "doAnswer(new Answer(){@Override public Object answer(InvocationOnMock invocationOnMock){ProcessWindowFunctionMock.Context c = (ProcessWindowFunction.Context)invocationOnMock.getArguments()(1(c.currentProcessingTime()c.currentWatermark()c.windowState()c.globalState()return null}}).when(mock).process(eq(42L),(AggregateProcessWindowFunctionMock.Context)anyObject(),(Iterable)argThat(containsInAnyOrder(allOf(hasEntry(is(23L),is(23L)),hasEntry(is(24L),is(24L))))),eq(c))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "windowFunction.process(((byte)0),w,ctx,args,c)@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29->5 [style = solid, label="mock"];
11->16 [style = bold, label=""];
22->8 [style = solid, label="mock"];
35->31 [style = bold, label=""];
23->25 [style = bold, label=""];
5->30 [style = solid, label="ctx"];
18->24 [style = bold, label=""];
7->1 [style = bold, label=""];
29->20 [style = solid, label="mock"];
19->12 [style = bold, label=""];
0->19 [style = bold, label=""];
22->26 [style = solid, label="mock"];
9->30 [style = solid, label="w"];
13->12 [style = solid, label="stringType"];
20->23 [style = solid, label="rCtx"];
29->26 [style = solid, label="mock"];
26->30 [style = solid, label="c"];
25->9 [style = bold, label=""];
34->13 [style = bold, label=""];
22->29 [style = dashed, label="0"];
1->20 [style = bold, label=""];
5->15 [style = bold, label=""];
8->34 [style = dashed, label="0"];
14->1 [style = solid, label="config"];
29->34 [style = bold, label=""];
22->5 [style = solid, label="mock"];
20->25 [style = solid, label="rCtx"];
3->22 [style = bold, label=""];
2->19 [style = solid, label="execConf"];
15->18 [style = bold, label=""];
5->18 [style = solid, label="ctx"];
29->34 [style = solid, label="mock"];
27->18 [style = solid, label="args"];
14->7 [style = bold, label=""];
8->19 [style = solid, label="windowFunction"];
32->29 [style = bold, label=""];
22->8 [style = bold, label=""];
27->30 [style = solid, label="args"];
9->26 [style = bold, label=""];
21->5 [style = bold, label=""];
26->27 [style = bold, label=""];
2->0 [style = bold, label=""];
26->18 [style = solid, label="c"];
30->35 [style = bold, label=""];
20->23 [style = bold, label=""];
2->12 [style = solid, label="execConf"];
26->35 [style = solid, label="c"];
34->19 [style = solid, label="windowFunction"];
31->33 [style = bold, label=""];
6->10 [style = bold, label=""];
13->19 [style = solid, label="stringType"];
22->20 [style = solid, label="mock"];
12->14 [style = bold, label=""];
27->17 [style = bold, label=""];
10->4 [style = bold, label=""];
26->15 [style = solid, label="c"];
9->18 [style = solid, label="w"];
5->30 [style = bold, label=""];
29->9 [style = solid, label="mock"];
24->6 [style = bold, label=""];
22->9 [style = solid, label="mock"];
14->7 [style = solid, label="config"];
4->11 [style = bold, label=""];
17->21 [style = bold, label=""];
28->22 [style = bold, label=""];
8->13 [style = bold, label=""];
13->2 [style = bold, label=""];
}
