digraph {
9 [style = filled, label = "HiveTestUtils.createTextTableInserter(hiveCatalog,\"default\",\"src\").addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b8282b).addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b82830).addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b82835).addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b8283a).commit()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testProjectionPushDown['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Table table = batchTableEnv.sqlQuery(\"select p1, count(y) from hive.`default`.src group by p1\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "{batchTableEnv.executeSql(\"drop table src\")}@@@26@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "List<Row> rows = CollectionUtil.iteratorToList(table.execute().collect())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "List<Row> rows = CollectionUtil.iteratorToList(table.execute().collect())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(1,rows.size())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "HiveTestUtils.createTextTableInserter(hiveCatalog,\"default\",\"src\").addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b827af).commit(\"p1=2014, p2='2014'\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "String logicalPlan = explain(2(@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "batchTableEnv.executeSql(\"create table src(x int,y string) partitioned by (p1 bigint, p2 string)\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Table table = batchTableEnv.sqlQuery(\"select * from hive.`default`.src limit 1\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Object(( rowStrings = rows.stream().map(null).sorted().toArray()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Object(( rowStrings = rows.stream().map(null).sorted().toArray()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testProjectionPushDown['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertTrue(logicalPlan,logicalPlan.contains(expectedExplain))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(logicalPlan,logicalPlan.contains(\"table=((hive, default, src, limit=(1(((\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertArrayEquals(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b8288b,rowStrings)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "String(( explain = table.explain().split(\"==.*==\")@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(4,explain.length)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String(( explain = table.explain().split(\"==.*==\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "batchTableEnv.executeSql(\"create table src (a string)\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testLimitPushDown['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7->19 [style = solid, label="logicalPlan"];
11->4 [style = bold, label=""];
5->8 [style = bold, label=""];
11->20 [style = bold, label=""];
13->0 [style = bold, label=""];
10->8 [style = solid, label="explain"];
7->13 [style = solid, label="expectedExplain"];
5->7 [style = solid, label="explain"];
7->19 [style = dashed, label="0"];
0->11 [style = bold, label=""];
9->6 [style = bold, label=""];
7->13 [style = bold, label=""];
19->16 [style = bold, label=""];
12->10 [style = bold, label=""];
18->9 [style = bold, label=""];
1->3 [style = bold, label=""];
21->18 [style = bold, label=""];
9->17 [style = bold, label=""];
3->9 [style = bold, label=""];
6->12 [style = bold, label=""];
15->3 [style = bold, label=""];
4->14 [style = bold, label=""];
20->14 [style = solid, label="rowStrings"];
14->2 [style = bold, label=""];
3->18 [style = dashed, label="0"];
8->7 [style = bold, label=""];
8->13 [style = solid, label="logicalPlan"];
7->19 [style = bold, label=""];
20->14 [style = bold, label=""];
16->11 [style = bold, label=""];
10->5 [style = bold, label=""];
17->5 [style = bold, label=""];
4->14 [style = solid, label="rowStrings"];
}
