digraph {
6 [style = filled, label = "DimensionSpec dimensionSpec@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "VectorColumnSelectorFactory factory@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "VectorColumnSelectorFactory factory@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "DimensionSpec dimensionSpec@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final IndexedInts(( rowVector = new IndexedInts((((@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Arrays.fill(rowVector,new ArrayBasedIndexedInts(new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ad8116))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "return new SingleValueDimensionVectorSelector(){@Override public int(( getRowVector(){return rowVector}@Override public int getValueCardinality(){return dictionaryEncoded? 1: CARDINALITY_UNKNOWN}@Nullable @Override public String lookupName(int id){return \"2\"}@Override public boolean nameLookupPossibleInAdvance(){return dictionaryEncoded}@Nullable @Override public IdLookup idLookup(){return null}@Override public int getMaxVectorSize(){return inspector.getMaxVectorSize()}@Override public int getCurrentVectorSize(){return inspector.getCurrentVectorSize()}}@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "VectorColumnSelectorFactory factory@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "makeMultiValueVectorDimensionSelector['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(outputName,dimensionSpec.getOutputName())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "makeSingleValueVectorDimensionSelector['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final IndexedInts(( rowVector = new IndexedInts((((@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "return new MultiValueDimensionVectorSelector(){@Override public IndexedInts(( getRowVector(){return rowVector}@Override public int getValueCardinality(){return dictionaryEncoded? 1: CARDINALITY_UNKNOWN}@Nullable @Override public String lookupName(int id){return \"2\"}@Override public boolean nameLookupPossibleInAdvance(){return dictionaryEncoded}@Nullable @Override public IdLookup idLookup(){return null}@Override public int getMaxVectorSize(){return inspector.getMaxVectorSize()}@Override public int getCurrentVectorSize(){return inspector.getCurrentVectorSize()}}@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "makeMultiValueVectorDimensionSelector['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7->6 [style = dotted, label="true"];
5->1 [style = solid, label="rowVector"];
2->3 [style = bold, label=""];
6->11 [style = dashed, label="0"];
5->9 [style = dashed, label="0"];
9->0 [style = solid, label="rowVector"];
1->0 [style = bold, label=""];
3->12 [style = bold, label=""];
13->10 [style = dotted, label="true"];
5->0 [style = solid, label="rowVector"];
7->3 [style = bold, label=""];
3->9 [style = bold, label=""];
5->1 [style = bold, label=""];
3->5 [style = bold, label=""];
13->3 [style = bold, label=""];
2->6 [style = dotted, label="true"];
2->4 [style = dotted, label="true"];
13->11 [style = dotted, label="true"];
9->1 [style = bold, label=""];
7->8 [style = dotted, label="true"];
9->1 [style = solid, label="rowVector"];
}
