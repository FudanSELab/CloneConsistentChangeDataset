digraph {
40 [style = filled, label = "shouldCloseActiveTasksAndIgnoreExceptionsOnUncleanShutdown['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "expectLastCall()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(task02.state(),is(Task.State.CLOSED))@@@53@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "expectLastCall()@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever 1\"))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever 2\"))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "expectLastCall()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(task01.state(),is(Task.State.CLOSED))@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever all\"))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertThat(task00.state(),is(Task.State.CREATED))@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final TopicPartition changelog = new TopicPartition(\"changelog\",0)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final Task task00 = new StateMachineTask(taskId00,taskId00Partitions,true){@Override public Collection<TopicPartition> changelogPartitions(){return singletonList(changelog)}}@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "shouldCloseActiveTasksAndPropagateExceptionsOnCleanShutdown['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(task01.state(),is(Task.State.CREATED))@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.equalTo(mkMap(mkEntry(taskId00,task00),mkEntry(taskId01,task01),mkEntry(taskId02,task02))))@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@57@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "replay(activeTaskCreator,standbyTaskCreator,changeLogReader)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "shouldCloseActiveTasksAndIgnoreExceptionsOnUncleanShutdown['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "taskManager.shutdown(false)@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId01))@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertThat(exception.getMessage(),is(\"Unexpected exception while closing task\"))@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever 0\"))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final Map<TaskId,Set<TopicPartition>> assignment = mkMap(mkEntry(taskId00,taskId00Partitions),mkEntry(taskId01,taskId01Partitions),mkEntry(taskId02,taskId02Partitions))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "expectLastCall()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "final RuntimeException exception = assertThrows(,null)@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId02))@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(task02.state(),is(Task.State.CREATED))@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId00))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(task01.state(),is(Task.State.RUNNING))@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(task02.state(),is(Task.State.RUNNING))@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "expectLastCall()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final Task task01 = new StateMachineTask(taskId01,taskId01Partitions,true){@Override public void closeClean(){throw new TaskMigratedException(\"migrated\",new RuntimeException(\"cause\"))}}@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "changeLogReader.remove(eq(singletonList(changelog)))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final Task task02 = new StateMachineTask(taskId02,taskId02Partitions,true){@Override public void closeClean(){throw new RuntimeException(\"oops\")}}@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "changeLogReader.transitToRestoreActive()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "verify(activeTaskCreator,changeLogReader)@@@58@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.anEmptyMap())@@@56@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "taskManager.tryToCompleteRestoration()@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertThat(exception.getCause().getMessage(),is(\"oops\"))@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "expect(changeLogReader.completedChangelogs()).andReturn(emptySet())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(assignment))).andReturn(asList(task00,task01,task02)).anyTimes()@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "resetToStrict(changeLogReader)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(task00.state(),is(Task.State.CLOSED))@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "expectLastCall()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "activeTaskCreator.closeThreadProducerIfNeeded()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "taskManager.handleAssignment(assignment,emptyMap())@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertThat(task00.state(),is(Task.State.RESTORING))@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->27 [style = bold, label=""];
20->23 [style = bold, label=""];
44->13 [style = bold, label=""];
6->18 [style = bold, label=""];
7->38 [style = bold, label=""];
23->25 [style = bold, label=""];
4->7 [style = bold, label=""];
17->45 [style = bold, label=""];
12->48 [style = bold, label=""];
4->37 [style = solid, label="task02"];
39->2 [style = bold, label=""];
21->15 [style = bold, label=""];
26->13 [style = bold, label=""];
24->33 [style = bold, label=""];
36->43 [style = dashed, label="0"];
41->25 [style = bold, label=""];
10->47 [style = dashed, label="0"];
10->9 [style = bold, label=""];
9->20 [style = bold, label=""];
19->8 [style = bold, label=""];
3->21 [style = bold, label=""];
15->4 [style = bold, label=""];
3->11 [style = solid, label="assignment"];
16->0 [style = bold, label=""];
24->48 [style = dashed, label="0"];
48->33 [style = bold, label=""];
27->37 [style = bold, label=""];
13->21 [style = solid, label="changelog"];
47->9 [style = bold, label=""];
12->24 [style = bold, label=""];
22->32 [style = bold, label=""];
25->39 [style = bold, label=""];
29->47 [style = bold, label=""];
28->6 [style = bold, label=""];
37->29 [style = bold, label=""];
42->41 [style = bold, label=""];
0->12 [style = bold, label=""];
40->13 [style = bold, label=""];
5->11 [style = bold, label=""];
34->31 [style = bold, label=""];
13->32 [style = solid, label="changelog"];
30->5 [style = bold, label=""];
46->30 [style = bold, label=""];
45->19 [style = bold, label=""];
43->17 [style = bold, label=""];
1->45 [style = dashed, label="0"];
38->35 [style = bold, label=""];
1->19 [style = bold, label=""];
32->16 [style = bold, label=""];
18->34 [style = bold, label=""];
13->3 [style = bold, label=""];
29->10 [style = bold, label=""];
21->37 [style = solid, label="task00"];
8->30 [style = bold, label=""];
8->46 [style = dashed, label="0"];
19->46 [style = bold, label=""];
11->28 [style = bold, label=""];
35->22 [style = bold, label=""];
33->36 [style = bold, label=""];
36->17 [style = bold, label=""];
31->14 [style = bold, label=""];
15->37 [style = solid, label="task01"];
33->43 [style = bold, label=""];
23->42 [style = bold, label=""];
17->1 [style = bold, label=""];
}
