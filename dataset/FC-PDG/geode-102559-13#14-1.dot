digraph {
18 [style = filled, label = "byte(( netBytes = new byte((((@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "wrap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "Arrays.fill(netBytes,(byte)0x1F)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "ByteBuffer wrappedBuffer = outputSharing2.getBuffer()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ByteBuffer appData = ByteBuffer.allocate(outputSharing.getBuffer().capacity() + 100)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Arrays.fill(appBytes,(byte)0x1F)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "wrap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "unwrapWithDecryptionError['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "wrappedData.put(netBytes)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "appData.flip()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "byte(( appBytes = new byte((((@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "wrappedData.flip()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "ByteBuffer wrappedData = ByteBuffer.allocate(inputSharing.getBuffer().capacity())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "appData.flip()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(wrappedBuffer).isEqualTo(appData)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "appData.put(appBytes)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThatThrownBy(null).isInstanceOf().hasMessageContaining(\"Error decrypting data\")@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testEngine.addReturnResult(new SSLEngineResult(OK,NEED_TASK,appData.remaining(),appData.remaining()))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "verify(spyBufferPool,times(1)).expandWriteBufferIfNeeded(any(),any(),any())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "verify(spyNioSslEngine,times(1)).handleBlockingTasks()@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testEngine.addReturnResult(new SSLEngineResult(CLOSED,FINISHED,0,0))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
0->9 [style = bold, label=""];
0->10 [style = solid, label="appData"];
2->19 [style = bold, label=""];
7->10 [style = bold, label=""];
11->15 [style = dashed, label="0"];
2->6 [style = bold, label=""];
18->21 [style = solid, label="netBytes"];
9->18 [style = dashed, label="0"];
21->15 [style = bold, label=""];
9->4 [style = bold, label=""];
18->15 [style = solid, label="netBytes"];
12->17 [style = dashed, label="0"];
9->11 [style = solid, label="appBytes"];
11->12 [style = bold, label=""];
0->20 [style = dashed, label="0"];
3->22 [style = bold, label=""];
4->21 [style = dashed, label="0"];
20->18 [style = bold, label=""];
12->2 [style = bold, label=""];
15->17 [style = bold, label=""];
8->5 [style = bold, label=""];
14->0 [style = bold, label=""];
17->2 [style = bold, label=""];
3->8 [style = bold, label=""];
6->19 [style = dashed, label="0"];
5->7 [style = bold, label=""];
18->21 [style = bold, label=""];
4->11 [style = bold, label=""];
10->1 [style = bold, label=""];
16->20 [style = bold, label=""];
2->3 [style = solid, label="testEngine"];
19->3 [style = bold, label=""];
9->4 [style = solid, label="appBytes"];
13->0 [style = bold, label=""];
}
