digraph {
11 [style = filled, label = "assertThat(checkResultMap.size(),is(1))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "initTableData(jobConfig.getRuleConfig())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertResetTargetTable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertTrue(jobId.isPresent())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertDataConsistencyCheck['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertFalse(checkResultMap.get(\"t_order\").isDataValid())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "scalingAPI.resetTargetTable(jobId.get())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertTrue(checkResultMap.get(\"t_order\").isCountValid())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "JobConfiguration jobConfig = scalingAPI.getJobConfig(jobId.get())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Map<String,DataConsistencyCheckResult> checkResultMap = scalingAPI.dataConsistencyCheck(jobId.get())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(checkResultMap.get(\"t_order\").getTargetCount(),is(0L))@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "scalingAPI.reset(jobId.get())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Optional<Long> jobId = scalingAPI.start(ResourceUtil.mockJobConfig())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertResetTargetTable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertThat(checkResultMap.get(\"t_order\").getTargetCount(),is(2L))@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13->10 [style = bold, label=""];
5->7 [style = bold, label=""];
0->11 [style = bold, label=""];
4->9 [style = dashed, label="0"];
1->4 [style = bold, label=""];
1->0 [style = bold, label=""];
9->0 [style = bold, label=""];
8->5 [style = bold, label=""];
3->1 [style = bold, label=""];
11->13 [style = bold, label=""];
12->5 [style = bold, label=""];
10->14 [style = bold, label=""];
0->6 [style = bold, label=""];
7->3 [style = bold, label=""];
1->9 [style = bold, label=""];
4->0 [style = bold, label=""];
2->5 [style = bold, label=""];
6->11 [style = dashed, label="0"];
}
