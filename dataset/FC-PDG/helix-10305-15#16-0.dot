digraph {
9 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxPartition(),5)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(assignableNode.getDisabledPartitionsMap(),_disabledPartitionsMap)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsMap(),expectedAssignment)@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicas(),assignmentSet)@@@76@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(0)),expectedAssignmentSet1)@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(1)),expectedTopStateAssignmentSet2)@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expectedCapacityMap.put(\"item2\",18)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsCount(),expectedTopStateAssignmentSet1.size() + expectedTopStateAssignmentSet2.size())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(1)),expectedAssignmentSet2)@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Map<String,Integer> expectedCapacityMap = new HashMap<>()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(assignableNode.getRemainingCapacity(),expectedCapacityMap)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "AssignableReplica addingReplica = new AssignableReplica(testCache.getClusterConfig(),testCache.getResourceConfig(_resourceNames.get(1)),_partitionNames.get(2),\"SLAVE\",2)@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "assignableNode.assignInitBatch(assignmentSet)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "testNormalUsage['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
58 [style = filled, label = "Assert.assertEquals(assignableNode.getRemainingCapacity(),expectedCapacityMap)@@@75@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "Assert.assertEquals(assignableNode.getProjectedHighestUtilization(Collections.EMPTY_MAP),11.0 / 20.0,0.005)@@@48@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
59 [style = filled, label = "Assert.assertEquals(assignableNode.getHighestCapacityUtilization(),16.0 / 20.0,0.005)@@@69@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "expectedCapacityMap.put(\"item1\",9)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "testClusterConfig.setDefaultInstanceCapacityMap(_capacityDataMap)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(1)),expectedTopStateAssignmentSet2)@@@80@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxCapacity(),_capacityDataMap)@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "Assert.assertEquals(assignableNode.getDisabledPartitionsMap(),_disabledPartitionsMap)@@@74@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "expectedCapacityMap.put(\"item1\",4)@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicaCount(),4)@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicaCount(),3)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsMap(),expectedAssignment)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "expectedCapacityMap.put(\"item3\",30)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Map<String,Set<String>> expectedAssignment = new HashMap<>()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "iter.hasNext()@@@38@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(0)),expectedTopStateAssignmentSet1)@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxPartition(),5)@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxCapacity(),_capacityDataMap)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(0)),expectedAssignmentSet1)@@@77@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicaCount(),4)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "ClusterConfig testClusterConfig = new ClusterConfig(\"testClusterConfigId\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Set<String> expectedAssignmentSet2 = new HashSet<>(_partitionNames.subList(2,4))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(1)),expectedAssignmentSet2)@@@78@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "expectedCapacityMap.put(\"item1\",4)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsCount(),expectedTopStateAssignmentSet1.size() + expectedTopStateAssignmentSet2.size())@@@81@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "Set<String> expectedTopStateAssignmentSet1 = new HashSet<>(_partitionNames.subList(0,1))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "expectedAssignment.put(\"Resource2\",expectedAssignmentSet2)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(0)),expectedAssignmentSet1)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "AssignableReplica replica = iter.next()@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "Assert.assertEquals(assignableNode.getFaultZone(),_testFaultZoneId)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "Assert.assertEquals(assignableNode.getFaultZone(),_testFaultZoneId)@@@73@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "testNormalUsage['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "assignableNode.assign(addingReplica)@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxCapacity(),_capacityDataMap)@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(assignableNode.getRemainingCapacity(),expectedCapacityMap)@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(0)),expectedTopStateAssignmentSet1)@@@79@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Set<AssignableReplica> assignmentSet = generateReplicas(testCache)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Set<String> expectedAssignmentSet1 = new HashSet<>(_partitionNames.subList(0,2))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "iter.remove()@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "expectedAssignment.put(\"Resource1\",expectedAssignmentSet1)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxPartition(),5)@@@71@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "AssignableNode assignableNode = new AssignableNode(testCache.getClusterConfig(),testCache.getInstanceConfigMap().get(_testInstanceId),_testInstanceId)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(assignableNode.getHighestCapacityUtilization(),16.0 / 20.0,0.005)@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "expectedTopStateAssignmentSet2.remove(_partitionNames.get(2))@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "expectedAssignment.get(_resourceNames.get(1)).remove(_partitionNames.get(2))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "testDefaultInstanceCapacity['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "expectedCapacityMap.put(\"item2\",8)@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ResourceControllerDataProvider testCache = setupClusterDataCache()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "Assert.assertEquals(assignableNode.getInstanceTags(),_testInstanceTags)@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "Assert.assertEquals(assignableNode.getProjectedHighestUtilization(Collections.EMPTY_MAP),16.0 / 20.0,0.005)@@@69@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "Set<String> expectedTopStateAssignmentSet2 = new HashSet<>(_partitionNames.subList(2,3))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "Assert.assertEquals(assignableNode.getMaxCapacity(),_capacityDataMap)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(0)),expectedTopStateAssignmentSet1)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsByResource(_resourceNames.get(1)),expectedAssignmentSet2)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicas(),assignmentSet)@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedPartitionsMap(),expectedAssignment)@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(assignableNode.getHighestCapacityUtilization(),11.0 / 20.0,0.005)@@@48@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(assignableNode.getFaultZone(),_testFaultZoneId)@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedReplicas(),assignmentSet)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsCount(),expectedTopStateAssignmentSet1.size() + expectedTopStateAssignmentSet2.size())@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "InstanceConfig testInstanceConfig = new InstanceConfig(\"testInstanceConfigId\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "replica.equals(removingReplica)@@@40@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "expectedAssignment.get(_resourceNames.get(1)).add(_partitionNames.get(2))@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "expectedCapacityMap.put(\"item2\",8)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "AssignableReplica removingReplica = new AssignableReplica(testCache.getClusterConfig(),testCache.getResourceConfig(_resourceNames.get(1)),_partitionNames.get(2),\"MASTER\",1)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(assignableNode.getAssignedTopStatePartitionsByResource(_resourceNames.get(1)),expectedTopStateAssignmentSet2)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "Assert.assertEquals(assignableNode.getProjectedHighestUtilization(Collections.EMPTY_MAP),16.0 / 20.0,0.005)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(assignableNode.getDisabledPartitionsMap(),_disabledPartitionsMap)@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "AssignableNode assignableNode = new AssignableNode(testClusterConfig,testInstanceConfig,_testInstanceId)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Assert.assertEquals(assignableNode.getInstanceTags(),_testInstanceTags)@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assignableNode.release(removingReplica)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "Iterator<AssignableReplica> iter = assignmentSet.iterator()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "assignmentSet.add(addingReplica)@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(assignableNode.getInstanceTags(),_testInstanceTags)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52->1 [style = bold, label=""];
2->37 [style = solid, label="assignmentSet"];
8->2 [style = solid, label="testCache"];
13->50 [style = solid, label="removingReplica"];
5->76 [style = bold, label=""];
56->30 [style = bold, label=""];
69->60 [style = bold, label=""];
14->81 [style = dashed, label="0"];
55->40 [style = bold, label=""];
7->35 [style = bold, label=""];
48->61 [style = bold, label=""];
85->86 [style = bold, label=""];
41->20 [style = bold, label=""];
45->19 [style = solid, label="expectedAssignmentSet1"];
47->49 [style = bold, label=""];
87->82 [style = bold, label=""];
19->5 [style = bold, label=""];
65->18 [style = bold, label=""];
43->3 [style = bold, label=""];
71->67 [style = bold, label=""];
22->1 [style = solid, label="expectedTopStateAssignmentSet2"];
57->16 [style = bold, label=""];
50->33 [style = dotted, label="true"];
60->65 [style = bold, label=""];
25->75 [style = bold, label=""];
16->42 [style = bold, label=""];
46->50 [style = bold, label=""];
67->58 [style = bold, label=""];
44->47 [style = bold, label=""];
79->47 [style = bold, label=""];
49->70 [style = bold, label=""];
78->8 [style = bold, label=""];
70->17 [style = bold, label=""];
54->52 [style = bold, label=""];
38->46 [style = dotted, label="true"];
28->37 [style = bold, label=""];
2->64 [style = solid, label="assignmentSet"];
29->39 [style = bold, label=""];
51->54 [style = bold, label=""];
72->8 [style = bold, label=""];
21->5 [style = solid, label="expectedAssignmentSet2"];
34->31 [style = bold, label=""];
26->43 [style = bold, label=""];
45->51 [style = solid, label="expectedAssignmentSet1"];
32->10 [style = bold, label=""];
66->48 [style = bold, label=""];
61->55 [style = bold, label=""];
21->29 [style = bold, label=""];
81->68 [style = bold, label=""];
21->24 [style = solid, label="expectedAssignmentSet2"];
68->9 [style = bold, label=""];
39->66 [style = bold, label=""];
2->77 [style = bold, label=""];
2->60 [style = solid, label="assignmentSet"];
45->21 [style = bold, label=""];
38->46 [style = bold, label=""];
1->56 [style = bold, label=""];
29->16 [style = solid, label="expectedAssignment"];
38->50 [style = dotted, label="true"];
22->20 [style = solid, label="expectedTopStateAssignmentSet2"];
27->26 [style = bold, label=""];
14->68 [style = bold, label=""];
29->65 [style = solid, label="expectedAssignment"];
4->24 [style = bold, label=""];
22->45 [style = bold, label=""];
62->32 [style = bold, label=""];
13->62 [style = bold, label=""];
38->27 [style = bold, label=""];
63->6 [style = bold, label=""];
18->81 [style = bold, label=""];
2->31 [style = solid, label="assignmentSet"];
77->22 [style = bold, label=""];
6->15 [style = bold, label=""];
30->63 [style = bold, label=""];
24->41 [style = bold, label=""];
82->83 [style = bold, label=""];
3->79 [style = bold, label=""];
3->44 [style = bold, label=""];
17->0 [style = bold, label=""];
8->2 [style = bold, label=""];
84->85 [style = bold, label=""];
59->80 [style = dashed, label="0"];
87->82 [style = solid, label="testInstanceConfig"];
22->7 [style = solid, label="expectedTopStateAssignmentSet2"];
50->33 [style = bold, label=""];
23->11 [style = bold, label=""];
64->4 [style = bold, label=""];
42->59 [style = bold, label=""];
30->74 [style = solid, label="addingReplica"];
36->34 [style = bold, label=""];
31->19 [style = bold, label=""];
80->23 [style = bold, label=""];
58->64 [style = bold, label=""];
77->41 [style = solid, label="expectedTopStateAssignmentSet1"];
15->74 [style = bold, label=""];
10->73 [style = bold, label=""];
77->52 [style = solid, label="expectedTopStateAssignmentSet1"];
37->51 [style = bold, label=""];
45->39 [style = solid, label="expectedAssignmentSet1"];
21->54 [style = solid, label="expectedAssignmentSet2"];
59->23 [style = bold, label=""];
77->76 [style = solid, label="expectedTopStateAssignmentSet1"];
74->57 [style = bold, label=""];
48->34 [style = solid, label="expectedCapacityMap"];
0->28 [style = bold, label=""];
21->66 [style = solid, label="expectedAssignmentSet2"];
86->87 [style = bold, label=""];
53->71 [style = bold, label=""];
11->53 [style = bold, label=""];
76->7 [style = bold, label=""];
50->38 [style = bold, label=""];
13->26 [style = solid, label="removingReplica"];
45->4 [style = solid, label="expectedAssignmentSet1"];
48->28 [style = solid, label="expectedCapacityMap"];
9->25 [style = bold, label=""];
42->80 [style = bold, label=""];
20->12 [style = bold, label=""];
29->43 [style = solid, label="expectedAssignment"];
40->69 [style = bold, label=""];
48->58 [style = solid, label="expectedCapacityMap"];
33->38 [style = bold, label=""];
75->36 [style = bold, label=""];
73->38 [style = bold, label=""];
35->13 [style = bold, label=""];
18->14 [style = bold, label=""];
85->82 [style = solid, label="testClusterConfig"];
30->57 [style = solid, label="addingReplica"];
44->79 [style = dashed, label="0"];
}
