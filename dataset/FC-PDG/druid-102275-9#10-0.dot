digraph {
13 [style = filled, label = "checkpoints2.put(0,ImmutableMap.of(shardId0,\"0\"))@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
59 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID1,SHARD_ID0)).anyTimes()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(aNewTaskCapture))).andReturn(true)@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(task.getId())).andReturn(Optional.of(TaskStatus.running(task.getId()))).anyTimes()@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TreeMap<Integer,Map<Integer,Long>> checkpoints1 = new TreeMap<>()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "supervisor.start()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "TreeMap<Integer,Map<String,String>> checkpoints1 = new TreeMap<>()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "checkpoints2.put(0,ImmutableMap.of(SHARD_ID0,\"0\"))@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
63 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(captured))).andReturn(true).times(4)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "verifyAll()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(DateTimes.nowUtc())).anyTimes()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "KafkaIndexTask iHaveFailed = (KafkaIndexTask)tasks.get(3)@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(imStillAlive).anyTimes()@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "EasyMock.reset(taskStorage)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "KinesisIndexTask iHaveFailed = (KinesisIndexTask)tasks.get(3)@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "verifyAll()@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(shard1Partition,shard0Partition)).anyTimes()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "Capture<Task> aNewTaskCapture = Capture.newInstance()@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "checkpoints2.put(0,ImmutableMap.of(1,0L))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-0\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints1)).anyTimes()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "List<Task> imStillAlive = tasks.subList(0,3)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EasyMock.replay(taskStorage)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertNotEquals(iHaveFailed.getId(),aNewTaskCapture.getValue().getId())@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(EasyMock.anyObject())).andReturn(\"100\").anyTimes()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(iHaveFailed.getIOConfig().getBaseSequenceName(),((KinesisIndexTask)aNewTaskCapture.getValue()).getIOConfig().getBaseSequenceName())@@@62@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "EasyMock.expect(taskStorage.getTask(task.getId())).andReturn(Optional.of(task)).anyTimes()@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "supervisorRecordSupplier.assign(EasyMock.anyObject())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "supervisor.start()@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(aNewTaskCapture))).andReturn(true)@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "verifyAll()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "Assert.assertEquals(iHaveFailed.getIOConfig().getBaseSequenceName(),((KafkaIndexTask)aNewTaskCapture.getValue()).getIOConfig().getBaseSequenceName())@@@53@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "EasyMock.expect(taskStorage.getTask(iHaveFailed.getId())).andReturn(Optional.of(iHaveFailed)).anyTimes()@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "supervisor.runInternal()@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "Capture<Task> captured = Capture.newInstance(CaptureType.ALL)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "TreeMap<Integer,Map<Integer,Long>> checkpoints2 = new TreeMap<>()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(iHaveFailed.getId())).andReturn(Optional.of(TaskStatus.failure(iHaveFailed.getId())))@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Capture<Task> aNewTaskCapture = Capture.newInstance()@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "checkpoints1.put(0,ImmutableMap.of(0,0L,2,0L))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(iHaveFailed.getId())).andReturn(Optional.of(TaskStatus.failure(iHaveFailed.getId())))@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EasyMock.replay(taskQueue)@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(task.getId())).andReturn(Optional.of(TaskStatus.running(task.getId()))).anyTimes()@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "EasyMock.expect(taskStorage.getTask(iHaveFailed.getId())).andReturn(Optional.of(iHaveFailed)).anyTimes()@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.NOT_STARTED)).anyTimes()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(SHARD1_PARTITION,SHARD0_PARTITION)).anyTimes()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "EasyMock.replay(taskQueue)@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(Status.NOT_STARTED)).anyTimes()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "EasyMock.replay(taskStorage)@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "List<Task> tasks = captured.getValues()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "supervisor.runInternal()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "checkpoints1.put(0,ImmutableMap.of(SHARD_ID1,\"0\"))@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "supervisor.runInternal()@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(tasks).anyTimes()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "EasyMock.replay(taskStorage)@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "checkpoints1.put(0,ImmutableMap.of(shardId1,\"0\"))@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "supervisorRecordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "EasyMock.reset(taskStorage)@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "addSomeEvents(1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-1\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints2)).anyTimes()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "supervisorRecordSupplier.seekToLatest(EasyMock.anyObject())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "EasyMock.reset(taskQueue)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "Assert.assertNotEquals(iHaveFailed.getId(),aNewTaskCapture.getValue().getId())@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "testRequeueTaskWhenFailed['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getPartitionIds(stream)).andReturn(ImmutableSet.of(shardId1,shardId0)).anyTimes()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
55 [style = filled, label = "EasyMock.expect(taskStorage.getTask(task.getId())).andReturn(Optional.of(task)).anyTimes()@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "testRequeueTaskWhenFailed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "supervisor.runInternal()@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "TreeMap<Integer,Map<String,String>> checkpoints2 = new TreeMap<>()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "verifyAll()@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(null)).anyTimes()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "EasyMock.replay(taskStorage)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testRequeueTaskWhenFailed['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "taskRunner.registerListener(EasyMock.anyObject(),EasyMock.anyObject())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "supervisor = getTestableSupervisor(2,2,true,\"PT1H\",null,null)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "replayAll()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-1\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints2)).anyTimes()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->67 [style = bold, label=""];
19->55 [style = bold, label=""];
46->0 [style = bold, label=""];
56->3 [style = bold, label=""];
12->65 [style = dashed, label="0"];
71->62 [style = bold, label=""];
10->35 [style = bold, label=""];
5->15 [style = bold, label=""];
14->28 [style = bold, label=""];
35->43 [style = bold, label=""];
72->15 [style = bold, label=""];
61->10 [style = bold, label=""];
50->8 [style = dashed, label="0"];
48->52 [style = bold, label=""];
41->48 [style = bold, label=""];
21->26 [style = bold, label=""];
64->79 [style = bold, label=""];
56->83 [style = bold, label=""];
43->35 [style = bold, label=""];
32->25 [style = bold, label=""];
82->75 [style = bold, label=""];
9->13 [style = bold, label=""];
32->18 [style = bold, label=""];
60->39 [style = bold, label=""];
23->57 [style = dashed, label="0"];
66->45 [style = bold, label=""];
37->59 [style = dashed, label="0"];
2->20 [style = bold, label=""];
16->40 [style = bold, label=""];
70->82 [style = bold, label=""];
50->23 [style = bold, label=""];
37->36 [style = bold, label=""];
59->60 [style = bold, label=""];
38->11 [style = bold, label=""];
15->50 [style = bold, label=""];
18->19 [style = bold, label=""];
68->80 [style = bold, label=""];
77->48 [style = bold, label=""];
75->74 [style = bold, label=""];
17->37 [style = bold, label=""];
22->5 [style = bold, label=""];
67->22 [style = bold, label=""];
43->11 [style = bold, label=""];
4->45 [style = bold, label=""];
26->16 [style = bold, label=""];
6->4 [style = bold, label=""];
7->51 [style = bold, label=""];
54->44 [style = bold, label=""];
30->7 [style = bold, label=""];
45->56 [style = bold, label=""];
28->83 [style = dashed, label="0"];
55->19 [style = bold, label=""];
65->25 [style = bold, label=""];
13->10 [style = bold, label=""];
81->27 [style = bold, label=""];
31->25 [style = bold, label=""];
9->42 [style = dashed, label="0"];
0->12 [style = bold, label=""];
48->64 [style = bold, label=""];
4->66 [style = bold, label=""];
36->39 [style = bold, label=""];
56->45 [style = bold, label=""];
43->38 [style = bold, label=""];
58->48 [style = bold, label=""];
24->31 [style = bold, label=""];
29->42 [style = bold, label=""];
39->2 [style = bold, label=""];
50->57 [style = bold, label=""];
57->9 [style = bold, label=""];
40->14 [style = bold, label=""];
22->72 [style = bold, label=""];
10->33 [style = bold, label=""];
78->19 [style = bold, label=""];
47->21 [style = bold, label=""];
79->71 [style = bold, label=""];
44->24 [style = bold, label=""];
51->8 [style = bold, label=""];
13->34 [style = dashed, label="0"];
12->27 [style = bold, label=""];
31->65 [style = bold, label=""];
11->54 [style = bold, label=""];
62->70 [style = bold, label=""];
42->34 [style = bold, label=""];
33->35 [style = bold, label=""];
15->69 [style = bold, label=""];
34->1 [style = bold, label=""];
13->61 [style = dashed, label="0"];
25->32 [style = bold, label=""];
80->10 [style = bold, label=""];
53->22 [style = bold, label=""];
55->0 [style = bold, label=""];
0->81 [style = bold, label=""];
23->29 [style = dashed, label="0"];
52->17 [style = bold, label=""];
27->6 [style = bold, label=""];
5->76 [style = dashed, label="0"];
49->47 [style = bold, label=""];
53->75 [style = dashed, label="0"];
9->61 [style = bold, label=""];
32->78 [style = bold, label=""];
55->46 [style = bold, label=""];
63->8 [style = bold, label=""];
36->60 [style = dashed, label="0"];
69->73 [style = bold, label=""];
73->68 [style = bold, label=""];
3->49 [style = bold, label=""];
17->59 [style = bold, label=""];
20->30 [style = bold, label=""];
23->9 [style = bold, label=""];
76->63 [style = bold, label=""];
8->29 [style = bold, label=""];
1->53 [style = bold, label=""];
74->76 [style = bold, label=""];
}
