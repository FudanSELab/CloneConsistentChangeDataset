digraph {
14 [style = filled, label = "assertThrown(null).message().contains(\"It's recommended you use the BeanTraverseContext.BEANTRAVERSE_detectRecursions setting to help locate the loop.\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertThrown(null).contains(\"It's recommended you use the BeanTraverseContext.BEANTRAVERSE_detectRecursions setting to help locate the loop.\")@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "UrlEncodingSerializerBuilder s = UrlEncodingSerializer.create().maxDepth(Integer.MAX_VALUE)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testRecursion['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "r1.r2 = r2@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"name=foo&r2=(name=bar,r3=(name=baz))\",s.build().serialize(r1))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "R2 r2 = new R2()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "R3 r3 = new R3()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "s.ignoreRecursions()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "s.detectRecursions()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "r3.r1 = r1@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "R1 r1 = new R1()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThrown(null).contains(\"(0( root:org.apache.juneau.urlencoding.Common_UrlEncodingTest$R1\",\"(1( r2:org.apache.juneau.urlencoding.Common_UrlEncodingTest$R2\",\"(2( r3:org.apache.juneau.urlencoding.Common_UrlEncodingTest$R3\",\"(3( r1:org.apache.juneau.urlencoding.Common_UrlEncodingTest$R1\")@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "testRecursion['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThrown(null).contains(\"$R1\",\"$R2\",\"$R3\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(\"(name=foo,r2=(name=bar,r3=(name=baz)))\",s.build().serialize(r1))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testRecursion['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThrown(null).message().contains(\"(0( root:org.apache.juneau.urlencoding.Common_UrlEncodingTest$R1\",\"(1( r2:org.apache.juneau.urlencoding.Common_UrlEncodingTest$R2\",\"(2( r3:org.apache.juneau.urlencoding.Common_UrlEncodingTest$R3\",\"(3( r1:org.apache.juneau.urlencoding.Common_UrlEncodingTest$R1\")@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "r2.r3 = r3@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "UonSerializerBuilder s = UonSerializer.create().maxDepth(Integer.MAX_VALUE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->17 [style = bold, label=""];
7->11 [style = bold, label=""];
17->6 [style = bold, label=""];
6->18 [style = bold, label=""];
4->8 [style = solid, label="r1"];
0->2 [style = bold, label=""];
8->14 [style = bold, label=""];
15->6 [style = bold, label=""];
2->9 [style = bold, label=""];
1->11 [style = solid, label="r2"];
1->7 [style = bold, label=""];
8->18 [style = solid, label="r1"];
9->6 [style = bold, label=""];
19->16 [style = bold, label=""];
8->0 [style = bold, label=""];
0->14 [style = dashed, label="0"];
5->16 [style = dashed, label="0"];
10->5 [style = bold, label=""];
11->3 [style = bold, label=""];
3->8 [style = bold, label=""];
5->4 [style = bold, label=""];
2->15 [style = bold, label=""];
13->5 [style = bold, label=""];
12->18 [style = dashed, label="0"];
4->1 [style = bold, label=""];
14->2 [style = bold, label=""];
7->3 [style = solid, label="r3"];
16->4 [style = bold, label=""];
8->12 [style = solid, label="r1"];
9->15 [style = dashed, label="0"];
6->12 [style = bold, label=""];
}
