digraph {
12 [style = filled, label = "@NonNull BiPredicate<? super T,? super T> isEqual@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "@NonNull BiPredicate<? super T,? super T> isEqual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "@NonNull Publisher<? extends T> source2@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "int bufferSize@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "return RxJavaPlugins.onAssembly(new ObservableSequenceEqualSingle<>(source1,source2,isEqual,bufferSize))@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "@NonNull ObservableSource<? extends T> source2@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Objects.requireNonNull(isEqual,\"isEqual is null\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "sequenceEqual['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "ObjectHelper.verifyPositive(bufferSize,\"bufferSize\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Objects.requireNonNull(source2,\"source2 is null\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Objects.requireNonNull(source1,\"source1 is null\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int bufferSize@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "@NonNull BiPredicate<? super T,? super T> isEqual@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "@NonNull ObservableSource<? extends T> source2@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "sequenceEqual['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "@NonNull Publisher<? extends T> source1@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "int bufferSize@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "@NonNull ObservableSource<? extends T> source1@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "@NonNull ObservableSource<? extends T> source1@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "return RxJavaPlugins.onAssembly(new FlowableSequenceEqualSingle<>(source1,source2,isEqual,bufferSize))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "sequenceEqual['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7->2 [style = dotted, label="true"];
12->6 [style = solid, label="isEqual"];
10->8 [style = solid, label="bufferSize"];
5->14 [style = dashed, label="0"];
19->20 [style = solid, label="source2"];
10->4 [style = solid, label="bufferSize"];
13->12 [style = dotted, label="true"];
18->6 [style = solid, label="isEqual"];
0->9 [style = solid, label="source1"];
11->8 [style = solid, label="source1"];
15->18 [style = dotted, label="true"];
8->20 [style = dashed, label="0"];
3->6 [style = bold, label=""];
1->8 [style = solid, label="isEqual"];
12->8 [style = solid, label="isEqual"];
15->16 [style = dotted, label="true"];
11->9 [style = solid, label="source1"];
7->0 [style = dotted, label="true"];
13->10 [style = dotted, label="true"];
14->8 [style = solid, label="source2"];
5->4 [style = solid, label="bufferSize"];
7->5 [style = dotted, label="true"];
1->6 [style = solid, label="isEqual"];
2->3 [style = solid, label="source2"];
15->17 [style = dotted, label="true"];
7->9 [style = bold, label=""];
17->9 [style = solid, label="source1"];
6->4 [style = bold, label=""];
16->20 [style = solid, label="bufferSize"];
19->3 [style = solid, label="source2"];
15->9 [style = bold, label=""];
15->19 [style = dotted, label="true"];
4->20 [style = bold, label=""];
5->8 [style = solid, label="bufferSize"];
2->8 [style = solid, label="source2"];
9->3 [style = bold, label=""];
4->8 [style = bold, label=""];
13->11 [style = dotted, label="true"];
13->9 [style = bold, label=""];
17->20 [style = solid, label="source1"];
7->1 [style = dotted, label="true"];
13->14 [style = dotted, label="true"];
5->19 [style = dashed, label="0"];
0->8 [style = solid, label="source1"];
14->3 [style = solid, label="source2"];
16->4 [style = solid, label="bufferSize"];
18->20 [style = solid, label="isEqual"];
}
