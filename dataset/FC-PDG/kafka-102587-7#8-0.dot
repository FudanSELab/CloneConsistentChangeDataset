digraph {
11 [style = filled, label = "final List<List<KeyValueTimestamp<Long,String>>> expectedResult = Arrays.asList(null,null,null,Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-a-a\",4L)),Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-a-a\",5L)),Arrays.asList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-b-a\",6L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-b-a\",6L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-a-b\",6L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-a-b\",6L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-b-b\",6L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-b-b\",6L)),null,null,Arrays.asList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-a-a\",9L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-a-b\",9L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-b-a\",9L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-b-b\",9L)),Arrays.asList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-c-a\",10L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-c-b\",10L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-c-a\",10L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-c-b\",10L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-c-a\",10L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-c-b\",10L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-a-c\",10L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-a-c\",10L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-b-c\",10L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-b-c\",10L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-a-c\",10L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-b-c\",10L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-c-c\",10L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-c-c\",10L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-c-c\",10L)),null,null,null,Arrays.asList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-d-a\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-d-b\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-d-c\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-d-a\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-d-b\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-d-c\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-d-a\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-d-b\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-d-c\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-a-d\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-a-d\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-b-d\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-b-d\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-a-d\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-b-d\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-c-d\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-c-d\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-c-d\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-d-d\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-d-d\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-d-d\",14L)),Arrays.asList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-a-a\",15L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-a-b\",15L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-a-c\",15L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-a-d\",15L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-b-a\",15L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-b-b\",15L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-b-c\",15L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-b-d\",15L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-c-a\",15L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-c-b\",15L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-c-c\",15L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-c-d\",15L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-d-a\",15L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-d-b\",15L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-d-c\",15L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-d-d\",15L)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG,appID + \"-inner-repartitioned\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "runTestWithDriver(expectedResult)@@@6@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "testInnerRepartitioned['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "leftStream.join(rightStream,valueJoiner,JoinWindows.of(ofSeconds(10))).join(rightStream,valueJoiner,JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "leftStream.map(MockMapper.noOpKeyValueMapper()).join(rightStream.flatMap(MockMapper.noOpFlatKeyValueMapper()).selectKey(MockMapper.selectKeyKeyValueMapper()),valueJoiner,JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testMultiInner['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "runTest(expectedResult)@@@6@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final List<List<KeyValueTimestamp<Long,String>>> expectedResult = Arrays.asList(null,null,null,Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-a\",4L)),Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-a\",5L)),Arrays.asList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-b\",6L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-b\",6L)),null,null,Arrays.asList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-a\",9L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-b\",9L)),Arrays.asList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-c\",10L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-c\",10L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-c\",10L)),null,null,null,Arrays.asList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-d\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-d\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-d\",14L)),Arrays.asList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-a\",15L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-b\",15L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-c\",15L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-d\",15L)))@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG,appID + \"-multi-inner\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final List<List<TestRecord<Long,String>>> expectedResult = Arrays.asList(null,null,null,Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY,\"A-a\",null,4L)),Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY,\"B-a\",null,5L)),Arrays.asList(new TestRecord<>(ANY_UNIQUE_KEY,\"A-b\",null,6L),new TestRecord<>(ANY_UNIQUE_KEY,\"B-b\",null,6L)),null,null,Arrays.asList(new TestRecord<>(ANY_UNIQUE_KEY,\"C-a\",null,9L),new TestRecord<>(ANY_UNIQUE_KEY,\"C-b\",null,9L)),Arrays.asList(new TestRecord<>(ANY_UNIQUE_KEY,\"A-c\",null,10L),new TestRecord<>(ANY_UNIQUE_KEY,\"B-c\",null,10L),new TestRecord<>(ANY_UNIQUE_KEY,\"C-c\",null,10L)),null,null,null,Arrays.asList(new TestRecord<>(ANY_UNIQUE_KEY,\"A-d\",null,14L),new TestRecord<>(ANY_UNIQUE_KEY,\"B-d\",null,14L),new TestRecord<>(ANY_UNIQUE_KEY,\"C-d\",null,14L)),Arrays.asList(new TestRecord<>(ANY_UNIQUE_KEY,\"D-a\",null,15L),new TestRecord<>(ANY_UNIQUE_KEY,\"D-b\",null,15L),new TestRecord<>(ANY_UNIQUE_KEY,\"D-c\",null,15L),new TestRecord<>(ANY_UNIQUE_KEY,\"D-d\",null,15L)))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "testInnerRepartitioned['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4->10 [style = dashed, label="0"];
9->2 [style = bold, label=""];
0->2 [style = bold, label=""];
0->5 [style = bold, label=""];
11->9 [style = bold, label=""];
4->7 [style = bold, label=""];
10->11 [style = bold, label=""];
1->2 [style = solid, label="expectedResult"];
6->4 [style = bold, label=""];
11->2 [style = solid, label="expectedResult"];
2->5 [style = dashed, label="0"];
7->0 [style = bold, label=""];
7->5 [style = solid, label="expectedResult"];
3->4 [style = bold, label=""];
8->10 [style = bold, label=""];
4->1 [style = bold, label=""];
1->0 [style = bold, label=""];
0->9 [style = dashed, label="0"];
}
