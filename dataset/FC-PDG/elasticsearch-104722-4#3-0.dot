digraph {
65 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"xorr the god jewel\"))@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "assertThat(corrections.length,equalTo(1))@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"Xor the Got-Jewel\"),generator,0.5f,4,ir,\"body\",wordScorer,1,3).corrections@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"Zorr the Got-Jewel\"),generator,0.5f,4,ir,\"body\",wordScorer,0,2).corrections@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "DirectCandidateGenerator forward = new DirectCandidateGenerator(spellchecker,\"body\",SuggestMode.SUGGEST_ALWAYS,ir,0.95,10)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "corrections = suggester.getCorrections(analyzer,new BytesRef(\"captian usa\"),generator,2,4,ir,\"body\",wordScorer,1,3).corrections@@@81@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "CandidateGenerator generator = new MultiCandidateGeneratorWrapper(10,forward,reverse)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "suggester = new NoisyChannelSpellChecker(0.95)@@@79@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "doc.add(new Field(\"body\",line,TextField.TYPE_NOT_STORED))@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"xorr the god jewel\"))@@@63@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "WordScorer wordScorer = new LinearInterpolatingScorer(ir,MultiTerms.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.85d,new BytesRef(\" \"),0.5,0.4,0.1)@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"american ace\"))@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testTrigram['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"Zorr the Got-Jewel\"),generator,0.5f,1,ir,\"body\",wordScorer,1.5f,2).corrections@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "NoisyChannelSpellChecker suggester = new NoisyChannelSpellChecker()@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "wordScorer = new StupidBackoffScorer(ir,MultiTerms.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.85d,new BytesRef(\" \"),0.4)@@@86@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "wordScorer = new LinearInterpolatingScorer(ir,MultiFields.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.85d,new BytesRef(\" \"),0.5,0.4,0.1)@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertThat(corrections.length,equalTo(0))@@@57@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "spellchecker.setAccuracy(0.0f)@@@76@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(),mapping)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"Xor the Got-Jewel\"),generator,0.5f,1,ir,\"body\",wordScorer,1.5f,2).corrections@@@69@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(corrections(1(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"xor the god jewel\"))@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(corrections.length,equalTo(4))@@@62@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"Xor the Got-Jewel\"),generator,0.5f,4,ir,\"body\",wordScorer,0,3).corrections@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "assertThat(corrections.length,equalTo(1))@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"xorr the god jewel\"))@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(corrections.length,equalTo(4))@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "wordScorer = new LinearInterpolatingScorer(ir,MultiTerms.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.95d,new BytesRef(\" \"),0.5,0.4,0.1)@@@80@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "IndexWriter writer = new IndexWriter(dir,conf)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(corrections(1(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"xor the god jewel\"))@@@90@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(corrections(3(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"xorr the got jewel\"))@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"xorr the god jewel\"))@@@89@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"american ace\"))@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Analyzer analyzer = new Analyzer(){@Override protected TokenStreamComponents createComponents(String fieldName){Tokenizer t = new StandardTokenizer()TokenFilter filter = new LowerCaseFilter(t)try {SolrSynonymParser parser = new SolrSynonymParser(true,false,new WhitespaceAnalyzer())parser.parse(new StringReader(\"usa => usa, america, american\"))filter = new SynonymFilter(filter,parser.build(),true)}catch (Exception e) return new TokenStreamComponents(t,filter)}}@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"quasar ii\"))@@@74@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "assertThat(corrections.length,equalTo(1))@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"american cae\"),forward,1,1,ir,\"body\",wordScorer,1,2).corrections@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"xorr the god jewel\"))@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "mapping.put(\"body_ngram\",new Analyzer(){@Override protected TokenStreamComponents createComponents(String fieldName){Tokenizer t = new StandardTokenizer()ShingleFilter tf = new ShingleFilter(t,2,3)tf.setOutputUnigrams(false)return new TokenStreamComponents(t,new LowerCaseFilter(tf))}})@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "writer.addDocument(doc)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "String(( strings = new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13dbff0@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "spellchecker.setMinQueryLength(1)@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"america cae\"),generator,2,1,ir,\"body\",wordScorer,1,2).corrections@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "wordScorer = new LinearInterpolatingScorer(ir,MultiTerms.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.85d,new BytesRef(\" \"),0.5,0.4,0.1)@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "generator = new DirectCandidateGenerator(spellchecker,\"body\",SuggestMode.SUGGEST_MORE_POPULAR,ir,0.95,10,null,analyzer,MultiFields.getTerms(ir,\"body\"))@@@83@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
83 [style = filled, label = "LaplaceScorer wordScorer = new LaplaceScorer(ir,MultiFields.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.95d,new BytesRef(\" \"),0.5f)@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Correction(( corrections = suggester.getCorrections(wrapper,new BytesRef(\"american ame\"),generator,1,1,ir,\"body\",wordScorer,1,3).corrections@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"american ame\"),generator,1,1,ir,\"body\",wordScorer,1,2).corrections@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "mapping.put(\"body_reverse\",new Analyzer(){@Override protected TokenStreamComponents createComponents(String fieldName){Tokenizer t = new StandardTokenizer()return new TokenStreamComponents(t,new ReverseStringFilter(new LowerCaseFilter(t)))}})@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"Quazar II\"),generator,1,1,ir,\"body\",wordScorer,1,2).corrections@@@72@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "assertThat(corrections.length,equalTo(1))@@@73@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"Xor the Got-Jewel\"),generator,0.5f,1,ir,\"body\",wordScorer,100,3).corrections@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "assertThat(corrections.length,equalTo(1))@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"american ace\"))@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(corrections.length,equalTo(2))@@@88@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertThat(corrections.length,equalTo(1))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertThat(corrections(3(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"xorr the got jewel\"))@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "DirectCandidateGenerator reverse = new DirectCandidateGenerator(spellchecker,\"body_reverse\",SuggestMode.SUGGEST_ALWAYS,ir,0.95,10,wrapper,wrapper,MultiFields.getTerms(ir,\"body_reverse\"))@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Map<String,Analyzer> mapping = new HashMap<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "DirectSpellChecker spellchecker = new DirectSpellChecker()@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"Xor the Got-Jewel\"),generator,0.5f,2,ir,\"body\",wordScorer,0,3).corrections@@@87@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "assertThat(corrections(2(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"four the god jewel\"))@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "spellchecker.setMinQueryLength(1)@@@78@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"captain america\"))@@@82@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "Correction(( corrections = suggester.getCorrections(wrapper,new BytesRef(\"american cae\"),generator,1,1,ir,\"body\",wordScorer,1,2).corrections@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "spellchecker.setMinPrefix(1)@@@77@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertThat(corrections.length,equalTo(1))@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"xorr the god jewel\"))@@@71@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "doc.add(new Field(\"body_ngram\",line,TextField.TYPE_NOT_STORED))@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "wordScorer = new LinearInterpolatingScorer(ir,MultiFields.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.95d,new BytesRef(\" \"),0.5,0.4,0.1)@@@80@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
61 [style = filled, label = "testTrigram['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
51 [style = filled, label = "WordScorer wordScorer = new LinearInterpolatingScorer(ir,MultiFields.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.85d,new BytesRef(\" \"),0.5,0.4,0.1)@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "assertThat(corrections.length,equalTo(4))@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Document doc = new Document()@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "assertThat(corrections(1(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"zorr the god jewel\"))@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "DirectCandidateGenerator generator = new DirectCandidateGenerator(spellchecker,\"body\",SuggestMode.SUGGEST_MORE_POPULAR,ir,0.95,5)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"captain america\"))@@@85@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "wordScorer = new StupidBackoffScorer(ir,MultiFields.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.85d,new BytesRef(\" \"),0.4)@@@86@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
57 [style = filled, label = "generator = new DirectCandidateGenerator(spellchecker,\"body\",SuggestMode.SUGGEST_MORE_POPULAR,ir,0.95,10,null,analyzer,MultiTerms.getTerms(ir,\"body\"))@@@83@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
72 [style = filled, label = "testMultiGenerator['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "IndexWriterConfig conf = new IndexWriterConfig(wrapper)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "assertThat(corrections.length,equalTo(1))@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "doc.add(new Field(\"body_reverse\",line,TextField.TYPE_NOT_STORED))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "mapping.put(\"body\",new Analyzer(){@Override protected TokenStreamComponents createComponents(String fieldName){Tokenizer t = new StandardTokenizer()return new TokenStreamComponents(t,new LowerCaseFilter(t))}})@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"xorr the god jewel\"))@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "DirectoryReader ir = DirectoryReader.open(writer)@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "generator = new MultiCandidateGeneratorWrapper(5,forward,reverse)@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "corrections = suggester.getCorrections(analyzer,new BytesRef(\"captian usw\"),generator,2,4,ir,\"body\",wordScorer,1,3).corrections@@@84@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"american ace\"))@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "RAMDirectory dir = new RAMDirectory()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71->70 [style = bold, label=""];
85->69 [style = bold, label=""];
74->82 [style = solid, label="corrections"];
54->27 [style = bold, label=""];
70->64 [style = bold, label=""];
15->29 [style = solid, label="generator"];
83->32 [style = bold, label=""];
83->76 [style = solid, label="wordScorer"];
73->79 [style = solid, label="forward"];
14->35 [style = bold, label=""];
83->70 [style = solid, label="wordScorer"];
60->29 [style = bold, label=""];
65->84 [style = bold, label=""];
38->48 [style = solid, label="generator"];
15->57 [style = dashed, label="0"];
57->8 [style = bold, label=""];
48->8 [style = solid, label="corrections"];
62->76 [style = bold, label=""];
11->29 [style = bold, label=""];
17->45 [style = bold, label=""];
53->47 [style = bold, label=""];
26->29 [style = solid, label="ir"];
87->65 [style = bold, label=""];
3->80 [style = bold, label=""];
39->76 [style = solid, label="wrapper"];
47->37 [style = bold, label=""];
67->71 [style = bold, label=""];
39->82 [style = solid, label="wrapper"];
51->59 [style = dashed, label="0"];
78->42 [style = bold, label=""];
26->57 [style = solid, label="ir"];
51->32 [style = bold, label=""];
26->51 [style = bold, label=""];
9->50 [style = solid, label="corrections"];
37->8 [style = solid, label="analyzer"];
83->84 [style = solid, label="wordScorer"];
41->48 [style = bold, label=""];
37->57 [style = solid, label="analyzer"];
39->86 [style = solid, label="wrapper"];
0->81 [style = solid, label="t"];
36->38 [style = solid, label="spellchecker"];
76->87 [style = bold, label=""];
38->5 [style = solid, label="generator"];
79->76 [style = solid, label="generator"];
39->9 [style = solid, label="wrapper"];
82->14 [style = bold, label=""];
26->38 [style = solid, label="ir"];
79->74 [style = solid, label="generator"];
25->15 [style = bold, label=""];
58->5 [style = solid, label="wordScorer"];
26->9 [style = solid, label="ir"];
76->84 [style = solid, label="corrections"];
15->8 [style = solid, label="generator"];
26->41 [style = solid, label="ir"];
56->8 [style = solid, label="wordScorer"];
26->86 [style = solid, label="ir"];
31->20 [style = bold, label=""];
9->52 [style = bold, label=""];
39->5 [style = solid, label="wrapper"];
14->75 [style = bold, label=""];
39->31 [style = solid, label="wrapper"];
43->58 [style = bold, label=""];
58->34 [style = solid, label="wordScorer"];
64->88 [style = bold, label=""];
25->57 [style = bold, label=""];
34->53 [style = bold, label=""];
82->75 [style = solid, label="corrections"];
72->13 [style = bold, label=""];
6->5 [style = solid, label="wordScorer"];
26->83 [style = bold, label=""];
8->28 [style = bold, label=""];
26->50 [style = solid, label="ir"];
26->83 [style = solid, label="ir"];
50->43 [style = bold, label=""];
83->82 [style = solid, label="wordScorer"];
83->89 [style = solid, label="wordScorer"];
59->32 [style = bold, label=""];
83->75 [style = solid, label="wordScorer"];
51->9 [style = solid, label="wordScorer"];
56->48 [style = solid, label="wordScorer"];
19->73 [style = bold, label=""];
38->34 [style = solid, label="generator"];
79->70 [style = solid, label="generator"];
5->34 [style = solid, label="corrections"];
61->13 [style = bold, label=""];
85->79 [style = solid, label="reverse"];
39->34 [style = solid, label="wrapper"];
8->29 [style = solid, label="corrections"];
44->17 [style = bold, label=""];
36->85 [style = solid, label="spellchecker"];
13->16 [style = bold, label=""];
38->50 [style = solid, label="generator"];
46->41 [style = bold, label=""];
13->44 [style = solid, label="dir"];
73->69 [style = solid, label="forward"];
35->5 [style = bold, label=""];
39->75 [style = solid, label="wrapper"];
3->10 [style = bold, label=""];
5->1 [style = bold, label=""];
26->73 [style = solid, label="ir"];
39->85 [style = solid, label="wrapper"];
26->82 [style = solid, label="ir"];
26->48 [style = solid, label="ir"];
27->46 [style = bold, label=""];
10->34 [style = bold, label=""];
26->58 [style = solid, label="ir"];
26->84 [style = solid, label="ir"];
26->11 [style = solid, label="ir"];
39->50 [style = solid, label="wrapper"];
26->60 [style = solid, label="ir"];
75->89 [style = solid, label="corrections"];
32->36 [style = bold, label=""];
21->7 [style = bold, label=""];
56->48 [style = bold, label=""];
26->76 [style = solid, label="ir"];
6->34 [style = solid, label="wordScorer"];
19->38 [style = bold, label=""];
4->80 [style = dashed, label="0"];
0->39 [style = bold, label=""];
41->48 [style = solid, label="wordScorer"];
49->45 [style = bold, label=""];
39->84 [style = solid, label="wrapper"];
84->70 [style = solid, label="corrections"];
4->14 [style = bold, label=""];
51->50 [style = solid, label="wordScorer"];
46->56 [style = bold, label=""];
38->9 [style = solid, label="generator"];
81->39 [style = bold, label=""];
86->50 [style = bold, label=""];
26->70 [style = solid, label="ir"];
45->55 [style = bold, label=""];
6->58 [style = dashed, label="0"];
83->86 [style = solid, label="wordScorer"];
26->51 [style = solid, label="ir"];
40->44 [style = solid, label="conf"];
2->3 [style = bold, label=""];
33->4 [style = bold, label=""];
38->9 [style = bold, label=""];
80->62 [style = bold, label=""];
11->60 [style = dashed, label="0"];
26->85 [style = solid, label="ir"];
16->23 [style = bold, label=""];
11->29 [style = solid, label="wordScorer"];
77->82 [style = bold, label=""];
55->42 [style = bold, label=""];
23->0 [style = bold, label=""];
57->29 [style = solid, label="generator"];
30->50 [style = bold, label=""];
29->21 [style = bold, label=""];
83->74 [style = solid, label="wordScorer"];
50->31 [style = solid, label="corrections"];
26->34 [style = solid, label="ir"];
74->66 [style = bold, label=""];
12->13 [style = bold, label=""];
7->22 [style = bold, label=""];
26->89 [style = solid, label="ir"];
16->39 [style = solid, label="mapping"];
6->31 [style = solid, label="wordScorer"];
28->60 [style = bold, label=""];
41->8 [style = solid, label="wordScorer"];
39->40 [style = bold, label=""];
36->73 [style = solid, label="spellchecker"];
36->15 [style = solid, label="spellchecker"];
79->89 [style = solid, label="generator"];
39->40 [style = solid, label="wrapper"];
37->48 [style = solid, label="analyzer"];
26->59 [style = bold, label=""];
23->0 [style = solid, label="t"];
15->8 [style = bold, label=""];
59->9 [style = solid, label="wordScorer"];
45->49 [style = solid, label="doc"];
26->15 [style = solid, label="ir"];
59->50 [style = solid, label="wordScorer"];
40->44 [style = bold, label=""];
36->19 [style = bold, label=""];
26->59 [style = solid, label="ir"];
26->74 [style = solid, label="ir"];
55->78 [style = bold, label=""];
66->77 [style = bold, label=""];
51->83 [style = dashed, label="0"];
44->26 [style = solid, label="writer"];
24->2 [style = bold, label=""];
38->73 [style = dashed, label="0"];
31->5 [style = solid, label="corrections"];
14->62 [style = dashed, label="0"];
84->67 [style = bold, label=""];
28->11 [style = bold, label=""];
79->84 [style = solid, label="generator"];
39->70 [style = solid, label="wrapper"];
58->31 [style = bold, label=""];
26->75 [style = solid, label="ir"];
38->31 [style = solid, label="generator"];
39->74 [style = solid, label="wrapper"];
39->29 [style = solid, label="wrapper"];
0->81 [style = bold, label=""];
57->8 [style = solid, label="generator"];
39->89 [style = solid, label="wrapper"];
43->6 [style = bold, label=""];
20->33 [style = bold, label=""];
75->63 [style = bold, label=""];
36->57 [style = solid, label="spellchecker"];
69->86 [style = solid, label="generator"];
26->8 [style = solid, label="ir"];
26->6 [style = solid, label="ir"];
43->79 [style = bold, label=""];
6->31 [style = bold, label=""];
85->69 [style = solid, label="reverse"];
63->68 [style = bold, label=""];
26->5 [style = solid, label="ir"];
26->31 [style = solid, label="ir"];
68->89 [style = bold, label=""];
1->24 [style = bold, label=""];
86->74 [style = solid, label="corrections"];
73->85 [style = bold, label=""];
48->25 [style = bold, label=""];
37->18 [style = bold, label=""];
79->74 [style = bold, label=""];
89->76 [style = solid, label="corrections"];
73->82 [style = solid, label="forward"];
42->49 [style = bold, label=""];
0->37 [style = solid, label="t"];
58->31 [style = solid, label="wordScorer"];
89->2 [style = bold, label=""];
49->26 [style = bold, label=""];
18->54 [style = bold, label=""];
41->56 [style = dashed, label="0"];
69->86 [style = bold, label=""];
26->56 [style = solid, label="ir"];
52->30 [style = bold, label=""];
37->15 [style = solid, label="analyzer"];
34->48 [style = solid, label="corrections"];
79->75 [style = solid, label="generator"];
60->29 [style = solid, label="wordScorer"];
}
