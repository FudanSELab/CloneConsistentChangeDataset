digraph {
4 [style = filled, label = "testGetIntervalsOnZeroDiff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Map<Long,Long> expected = Maps.newHashMap()@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "long lwm = 20150201000000l@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testGetIntervalsOnZeroDiff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "int partition = 30@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int maxInterval = 4@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(results,expected)@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testGetIntervalsOnNegDiff['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Map<Long,Long> results = hourwm.getIntervals(lwm,hwm,partition,maxInterval)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "HourWatermark hourwm = new HourWatermark(\"Hourwatermark\",\"test\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "long lwm = 20150201060000l@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Map<Long,Long> results = datewm.getIntervals(lwm,hwm,partition,maxInterval)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "DateWatermark datewm = new DateWatermark(\"Datewatermark\",\"test\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "long hwm = 20150201020000l@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Map<Long,Long> expected = ImmutableMap.of(lwm,hwm)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "long hwm = 20150201000000l@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(results.size(),0)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0->9 [style = bold, label=""];
8->0 [style = solid, label="maxInterval"];
5->14 [style = dashed, label="0"];
11->14 [style = bold, label=""];
2->6 [style = bold, label=""];
6->11 [style = dashed, label="0"];
12->15 [style = bold, label=""];
1->3 [style = bold, label=""];
1->9 [style = dashed, label="0"];
7->0 [style = solid, label="partition"];
4->2 [style = bold, label=""];
0->3 [style = solid, label="results"];
7->8 [style = bold, label=""];
13->16 [style = bold, label=""];
5->9 [style = solid, label="hwm"];
7->13 [style = solid, label="partition"];
14->7 [style = bold, label=""];
1->3 [style = solid, label="expected"];
2->15 [style = dashed, label="0"];
8->0 [style = bold, label=""];
11->13 [style = solid, label="lwm"];
6->5 [style = bold, label=""];
15->11 [style = bold, label=""];
0->1 [style = bold, label=""];
6->9 [style = solid, label="lwm"];
0->13 [style = dashed, label="0"];
14->13 [style = solid, label="hwm"];
8->13 [style = solid, label="maxInterval"];
9->3 [style = solid, label="expected"];
5->0 [style = solid, label="hwm"];
9->3 [style = bold, label=""];
5->7 [style = bold, label=""];
10->2 [style = bold, label=""];
8->13 [style = bold, label=""];
6->0 [style = solid, label="lwm"];
}
