digraph {
34 [style = filled, label = "resultSet.next()@@@20@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "connection.close()@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "sql = \"select *\" + \"from table(\"s\".\"Maze\"(5, 3, 1)) as t(s)\"@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Boolean solution@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(CalciteAssert.toString(resultSet),is(result + \"S=generate2(w=5, h=3, s=null)\"))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final String sql2 = \"select *\" + \"from table(\"s\".\"Maze\"(WIDTH => 5, HEIGHT => 3, SEED => 1))\"@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "SchemaPlus rootSchema = calciteConnection.getRootSchema()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "resultSet = statement.executeQuery(sql2)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Connection connection = DriverManager.getConnection(\"jdbc:calcite:\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ResultSet resultSet = statement.executeQuery(sql)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "schema.add(\"Maze\",table)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "ResultSet resultSet = connection.createStatement().executeQuery(sql)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final Statement statement = connection.createStatement()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "SchemaPlus schema = rootSchema.add(\"s\",new AbstractSchema())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final TableFunction table2 = TableFunctionImpl.create(SOLVE_METHOD)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "String maze@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testScannableTableFunctionWithNamedParameters['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "final TableFunction table = TableFunctionImpl.create(Smalls.MAZE2_METHOD)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final String sql@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final StringBuilder b = new StringBuilder()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertThat(b.toString(),is(maze))@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "solution@@@12@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(CalciteAssert.toString(resultSet),is(result + \"S=generate2(w=5, h=3, s=1)\"))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final TableFunction table = TableFunctionImpl.create(MAZE_METHOD)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final String result = \"S=abcde\" + \"S=xyz\"@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "schema.add(\"Solve\",table2)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "checkMazeTableFunction['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "b.append(resultSet.getString(1)).append(\"\")@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "CalciteConnection calciteConnection = connection.unwrap()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "resultSet = statement.executeQuery(sql3)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(CalciteAssert.toString(resultSet),is(result + \"S=generate2(w=5, h=3, s=1)\"))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final String sql = \"select *\" + \"from table(\"s\".\"Maze\"(5, 3, 1))\"@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testScannableTableFunctionWithNamedParameters['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "sql = \"select *\" + \"from table(\"s\".\"Solve\"(5, 3, 1)) as t(s)\"@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final String sql3 = \"select *\" + \"from table(\"s\".\"Maze\"(HEIGHT => 3, WIDTH => 5))\"@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->6 [style = bold, label=""];
8->16 [style = bold, label=""];
29->30 [style = bold, label=""];
18->15 [style = solid, label="result"];
32->23 [style = bold, label=""];
18->17 [style = solid, label="result"];
2->13 [style = solid, label="sql3"];
14->7 [style = bold, label=""];
26->12 [style = solid, label="table"];
3->11 [style = bold, label=""];
22->30 [style = solid, label="solution"];
32->23 [style = solid, label="sql"];
15->9 [style = bold, label=""];
34->28 [style = bold, label=""];
24->23 [style = bold, label=""];
10->15 [style = solid, label="resultSet"];
2->13 [style = bold, label=""];
13->17 [style = bold, label=""];
33->22 [style = dotted, label="true"];
18->6 [style = solid, label="result"];
9->0 [style = bold, label=""];
13->17 [style = solid, label="resultSet"];
30->24 [style = dotted, label="true"];
14->26 [style = bold, label=""];
11->14 [style = bold, label=""];
5->4 [style = bold, label=""];
6->2 [style = bold, label=""];
33->16 [style = bold, label=""];
10->18 [style = bold, label=""];
12->31 [style = bold, label=""];
27->29 [style = bold, label=""];
23->21 [style = bold, label=""];
19->16 [style = bold, label=""];
7->12 [style = solid, label="table"];
9->0 [style = solid, label="sql2"];
20->25 [style = solid, label="maze"];
24->23 [style = solid, label="sql"];
12->5 [style = bold, label=""];
7->12 [style = bold, label=""];
28->34 [style = bold, label=""];
16->3 [style = bold, label=""];
30->32 [style = bold, label=""];
34->28 [style = dotted, label="true"];
5->10 [style = solid, label="sql"];
21->34 [style = bold, label=""];
4->10 [style = bold, label=""];
26->12 [style = bold, label=""];
0->6 [style = solid, label="resultSet"];
34->25 [style = bold, label=""];
7->26 [style = dashed, label="0"];
30->32 [style = dotted, label="false"];
31->27 [style = bold, label=""];
30->24 [style = bold, label=""];
33->20 [style = dotted, label="true"];
17->1 [style = bold, label=""];
31->27 [style = solid, label="table2"];
18->15 [style = bold, label=""];
}
