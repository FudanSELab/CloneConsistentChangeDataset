digraph {
11 [style = filled, label = "final Map<TaskId,Long> allTaskEndOffsetSums = Collections.singletonMap(taskId01,500L)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final Map<TaskId,Long> allTaskEndOffsetSums = Collections.singletonMap(taskId01,1L)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertThat(client.lagFor(taskId01),equalTo(1L))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "shouldReturnEndOffsetSumIfOffsetSumIsGreaterThanEndOffsetSum['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertThat(client.lagFor(taskId01),equalTo(500L))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final Map<TaskId,Long> allTaskEndOffsetSums = Collections.singletonMap(TASK_0_1,1L)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "final Map<TaskId,Long> taskOffsetSums = Collections.emptyMap()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "client.addPreviousTasksAndOffsetSums(taskOffsetSums)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "shouldReturnEndOffsetSumIfOffsetSumIsGreaterThanEndOffsetSum['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "client.computeTaskLags(null,allTaskEndOffsetSums)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final Map<TaskId,Long> taskOffsetSums = Collections.singletonMap(taskId01,5L)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "shouldReturnEndOffsetSumForLagOfTaskWeDidNotPreviouslyOwn['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(client.lagFor(TASK_0_1),equalTo(1L))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "final Map<TaskId,Long> taskOffsetSums = Collections.singletonMap(TASK_0_1,5L)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5->13 [style = dashed, label="0"];
4->10 [style = bold, label=""];
4->3 [style = bold, label=""];
9->0 [style = bold, label=""];
1->4 [style = solid, label="allTaskEndOffsetSums"];
1->9 [style = dashed, label="0"];
1->0 [style = bold, label=""];
7->0 [style = solid, label="taskOffsetSums"];
5->0 [style = solid, label="taskOffsetSums"];
13->11 [style = bold, label=""];
11->4 [style = solid, label="allTaskEndOffsetSums"];
7->9 [style = bold, label=""];
12->13 [style = bold, label=""];
5->1 [style = bold, label=""];
11->0 [style = bold, label=""];
13->0 [style = solid, label="taskOffsetSums"];
0->4 [style = bold, label=""];
1->11 [style = dashed, label="0"];
3->8 [style = dashed, label="0"];
4->8 [style = bold, label=""];
3->10 [style = dashed, label="0"];
5->7 [style = dashed, label="0"];
6->7 [style = bold, label=""];
9->4 [style = solid, label="allTaskEndOffsetSums"];
2->5 [style = bold, label=""];
}
