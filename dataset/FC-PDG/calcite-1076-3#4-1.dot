digraph {
31 [style = filled, label = "final Enumerable<String> zipped2 = e2.zip(e1,resultSelector)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(\"\" + (char)('a' + i) + (char)('1' + i),zipped.elementAt(i))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "i < 3@@@14@@@['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "i++@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "zipped2.enumerator().reset()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testZip['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final Enumerable<String> zipped = e1.zip(e2,null)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "i < 2@@@16@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final Enumerable<String> zipped = e1.zip(e2,new Function2<String,String,String>(){public String apply(String v0,String v1){return v0 + v1}})@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "testZip['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "testZipLengthNotMatch['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(3,zipped.count())@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "final Function2<String,String,String> resultSelector = new Function2<String,String,String>(){public String apply(String v0,String v1){return v0 + v1}}@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final Enumerable<String> e1 = Linq4j.asEnumerable(Arrays.asList(\"a\",\"b\",\"c\"))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "int i = 0@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "zipped1.enumerator().reset()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final Enumerable<String> zipped1 = e1.zip(e2,resultSelector)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(\"\" + (char)('a' + i) + (char)('1' + i),zipped.elementAt(i))@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(2,count(zipped2.enumerator()))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(\"\" + (char)('a' + i) + (char)('1' + i),zipped1.elementAt(i))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(\"\" + (char)('1' + i) + (char)('a' + i),zipped2.elementAt(i))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "i < 3@@@9@@@['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "zipped.enumerator().reset()@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "i++@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "int i = 0@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(2,zipped2.count())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final Enumerable<String> e1 = Linq4j.asEnumerable(Arrays.asList(\"a\",\"b\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "zipped.enumerator().reset()@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "i++@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "i < 2@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final Enumerable<String> e2 = Linq4j.asEnumerable(Arrays.asList(\"1\",\"2\",\"3\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(2,count(zipped1.enumerator()))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "int i = 0@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "assertEquals(2,zipped1.count())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "int i = 0@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->10 [style = solid, label="e2"];
11->16 [style = bold, label=""];
28->29 [style = bold, label=""];
18->31 [style = bold, label=""];
22->33 [style = bold, label=""];
25->28 [style = bold, label=""];
1->8 [style = bold, label=""];
32->23 [style = bold, label=""];
9->0 [style = bold, label=""];
12->16 [style = solid, label="i"];
33->34 [style = solid, label="i"];
10->14 [style = bold, label=""];
4->6 [style = bold, label=""];
7->10 [style = bold, label=""];
30->20 [style = bold, label=""];
2->1 [style = bold, label=""];
0->1 [style = solid, label="i"];
26->34 [style = dotted, label="true"];
16->6 [style = bold, label=""];
5->23 [style = dashed, label="0"];
26->34 [style = bold, label=""];
33->24 [style = solid, label="i"];
9->28 [style = dashed, label="0"];
24->26 [style = solid, label="i"];
18->30 [style = bold, label=""];
2->18 [style = bold, label=""];
31->21 [style = bold, label=""];
12->16 [style = bold, label=""];
2->30 [style = solid, label="i"];
7->4 [style = bold, label=""];
18->20 [style = dotted, label="true"];
7->25 [style = solid, label="e2"];
1->18 [style = dashed, label="0"];
17->22 [style = bold, label=""];
2->18 [style = solid, label="i"];
19->31 [style = solid, label="resultSelector"];
23->31 [style = solid, label="e1"];
11->16 [style = solid, label="i"];
19->25 [style = bold, label=""];
2->8 [style = solid, label="i"];
33->26 [style = bold, label=""];
2->20 [style = solid, label="i"];
20->18 [style = solid, label="i"];
20->18 [style = bold, label=""];
12->6 [style = solid, label="i"];
29->27 [style = bold, label=""];
24->26 [style = bold, label=""];
3->5 [style = bold, label=""];
11->6 [style = solid, label="i"];
34->24 [style = bold, label=""];
6->25 [style = dashed, label="0"];
8->2 [style = bold, label=""];
0->1 [style = bold, label=""];
6->11 [style = bold, label=""];
26->24 [style = dotted, label="true"];
2->1 [style = solid, label="i"];
0->8 [style = solid, label="i"];
1->8 [style = dotted, label="true"];
13->5 [style = bold, label=""];
5->7 [style = bold, label=""];
4->19 [style = dashed, label="0"];
7->4 [style = solid, label="e2"];
14->15 [style = bold, label=""];
15->12 [style = bold, label=""];
23->7 [style = bold, label=""];
12->11 [style = solid, label="i"];
20->30 [style = solid, label="i"];
8->30 [style = dashed, label="0"];
19->25 [style = solid, label="resultSelector"];
6->9 [style = bold, label=""];
1->2 [style = dotted, label="true"];
4->10 [style = dashed, label="0"];
24->34 [style = solid, label="i"];
16->11 [style = dotted, label="true"];
7->19 [style = bold, label=""];
21->17 [style = bold, label=""];
27->2 [style = bold, label=""];
33->26 [style = solid, label="i"];
16->6 [style = dotted, label="true"];
18->30 [style = dotted, label="true"];
0->2 [style = solid, label="i"];
}
