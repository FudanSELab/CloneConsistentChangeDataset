digraph {
18 [style = filled, label = "d = processAdd(\"max-value\",doc(f(\"id\",\"1111\"),f(\"foo_s\",\"zzz\",\"aaa\",\"bbb\"),f(\"foo_i\",42,128,-3),f(\"bar_s\",\"aaa\"),f(\"yak_t\",\"aaa\",\"bbb\")))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(Arrays.asList(-3),d.getFieldValues(\"foo_i\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "d = processAdd(\"min-value\",doc(f(\"id\",\"1111\"),f(\"foo_s\",\"zzz\",\"aaa\",\"bbb\"),f(\"foo_i\",42,128,-3),f(\"bar_s\",\"aaa\"),f(\"yak_t\",\"aaa\",\"bbb\")))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(Arrays.asList(\"aaa\"),d.getFieldValues(\"bar_s\"))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "d = processAdd(\"min-value\",doc(f(\"id\",\"1111\"),f(\"foo_s\",\"zzz\",new Integer(42),\"bbb\"),f(\"bar_s\",\"aaa\"),f(\"yak_t\",\"aaa\",\"bbb\")))@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testMaxValue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(Arrays.asList(\"zzz\"),d.getFieldValues(\"foo_s\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testMinValue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertEquals(Arrays.asList(\"aaa\",\"bbb\"),d.getFieldValues(\"yak_t\"))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ignoreException(\".*Unable to mutate field.*\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "SolrException e@@@15@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testMinValue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "{resetExceptionIgnores()}@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(Arrays.asList(\"aaa\"),d.getFieldValues(\"foo_s\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "error = e@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "d = processAdd(\"min-value\",doc(f(\"id\",\"1111\"),f(\"foo_s\",\"zzz\",42,\"bbb\"),f(\"bar_s\",\"aaa\"),f(\"yak_t\",\"aaa\",\"bbb\")))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertNotNull(\"no error on un-comparable values\",error)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "SolrException error = null@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(Arrays.asList(128),d.getFieldValues(\"foo_i\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertTrue(\"error doesn't mention field name\",0 <= error.getMessage().indexOf(\"foo_s\"))@@@22@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "SolrInputDocument d = null@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertNotNull(d)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->16 [style = dashed, label="0"];
17->1 [style = bold, label=""];
21->19 [style = bold, label=""];
16->8 [style = bold, label=""];
6->21 [style = bold, label=""];
9->18 [style = dashed, label="0"];
2->3 [style = bold, label=""];
12->11 [style = bold, label=""];
8->14 [style = bold, label=""];
1->18 [style = bold, label=""];
18->6 [style = solid, label="d"];
7->4 [style = bold, label=""];
20->1 [style = bold, label=""];
10->7 [style = bold, label=""];
11->14 [style = solid, label="error"];
1->9 [style = bold, label=""];
9->6 [style = bold, label=""];
3->19 [style = dashed, label="0"];
6->2 [style = bold, label=""];
12->11 [style = dotted, label="true"];
5->1 [style = bold, label=""];
0->10 [style = bold, label=""];
19->13 [style = bold, label=""];
2->21 [style = dashed, label="0"];
18->6 [style = bold, label=""];
10->14 [style = solid, label="error"];
7->16 [style = bold, label=""];
3->13 [style = bold, label=""];
9->6 [style = solid, label="d"];
4->8 [style = bold, label=""];
11->8 [style = bold, label=""];
14->15 [style = bold, label=""];
13->0 [style = bold, label=""];
}
