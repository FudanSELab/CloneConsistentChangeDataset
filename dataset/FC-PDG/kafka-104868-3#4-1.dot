digraph {
8 [style = filled, label = "ConnectorStateInfo csi = herder.connectorStatus(connector)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "EasyMock.expect(herder.config(connector)).andReturn(null)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "connectorStatus['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(\"UNASSIGNED\",taskState.state())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(1,state.tasks().size())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "ConnectorTaskId taskId = new ConnectorTaskId(connector,0)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(workerId,taskState.workerId())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(workerId,state.connector().workerId())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "replayAll()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(\"RUNNING\",state.connector().state())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "EasyMock.expect(worker.getPlugins()).andStubReturn(plugins)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "AbstractHerder herder = partialMockBuilder().withConstructor(,,,,).withArgs(worker,workerId,kafkaClusterId,statusStore,configStore).addMockedMethod(\"generation\").createMock()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "PowerMock.verifyAll()@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "EasyMock.expect(herder.generation()).andStubReturn(generation)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testConnectorStatus['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ConnectorStateInfo.TaskState taskState = state.tasks().get(0)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(connector,state.name())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "AbstractHerder herder = partialMockBuilder().withConstructor(,,,,).withArgs(worker,workerId,kafkaClusterId,statusStore,configStore).addMockedMethod(\"generation\").createMock()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "testConnectorStatus['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "AbstractHerder herder = partialMockBuilder().withConstructor(,,,,,).withArgs(worker,workerId,kafkaClusterId,statusStore,configStore,noneConnectorClientConfigOverridePolicy).addMockedMethod(\"generation\").createMock()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "ConnectorStateInfo state = herder.connectorStatus(connector)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "PowerMock.verifyAll()@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(0,taskState.id())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "EasyMock.expect(statusStore.getAll(connector)).andReturn(Collections.singletonList(new TaskStatus(taskId,AbstractStatus.State.UNASSIGNED,workerId,generation)))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "EasyMock.expect(statusStore.get(connector)).andReturn(new ConnectorStatus(connector,AbstractStatus.State.RUNNING,workerId,generation))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->9 [style = bold, label=""];
9->11 [style = bold, label=""];
11->1 [style = bold, label=""];
2->6 [style = bold, label=""];
8->3 [style = bold, label=""];
14->23 [style = solid, label="state"];
7->0 [style = bold, label=""];
21->24 [style = bold, label=""];
16->17 [style = bold, label=""];
8->14 [style = dashed, label="0"];
5->18 [style = dashed, label="0"];
13->16 [style = bold, label=""];
5->1 [style = bold, label=""];
7->22 [style = bold, label=""];
0->14 [style = bold, label=""];
9->18 [style = bold, label=""];
22->0 [style = bold, label=""];
18->1 [style = bold, label=""];
5->11 [style = dashed, label="0"];
23->13 [style = bold, label=""];
15->9 [style = bold, label=""];
14->19 [style = solid, label="state"];
14->12 [style = bold, label=""];
0->8 [style = bold, label=""];
9->5 [style = bold, label=""];
1->2 [style = bold, label=""];
10->9 [style = bold, label=""];
12->23 [style = bold, label=""];
9->7 [style = solid, label="taskId"];
6->7 [style = bold, label=""];
20->19 [style = bold, label=""];
17->20 [style = bold, label=""];
19->21 [style = bold, label=""];
}
