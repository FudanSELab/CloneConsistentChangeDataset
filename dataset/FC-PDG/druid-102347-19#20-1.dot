digraph {
33 [style = filled, label = "testIncrementalHandOff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "Thread.sleep(10)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"9\",SHARD_ID0,\"1\"))),metadataStorageCoordinator.getDataSourceMetadata(NEW_DATA_SCHEMA.getDataSource()))@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"4\",SHARD_ID0,\"0\"))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "replayAll()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(startPartitions))))@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final Map<String,String> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(startPartitions))))@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
47 [style = filled, label = "maxTotalRows = 3L@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Assert.assertEquals(checkpoint2.getPartitionSequenceNumberMap(),nextOffsets)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "recordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "verifyAll()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(4,task.getRunner().getRowIngestionMeters().getUnparseable())@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> checkpoint2 = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"9\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@40@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testIncrementalHandOff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final SeekableStreamStartSequenceNumbers<String,String> startPartitions = new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"0\",SHARD_ID0,\"0\"),ImmutableSet.of())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"10\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@42@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"2\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "EasyMock.expect(recordSupplier.poll(EasyMock.anyLong())).andReturn(records.subList(0,3)).once().andReturn(records.subList(2,10)).once().andReturn(records.subList(9,11))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "recordSupplier.assign(EasyMock.anyObject())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> endPartitions = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"10\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "final Map<String,String> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(4,task.getRunner().getRowIngestionMeters().getUnparseable())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,true,null,null,INPUT_FORMAT,\"awsEndpoint\",null,null,null,null,false))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,true,null,null,\"awsEndpoint\",null,null,null,null,false))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "EasyMock.expect(recordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(NEW_DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(startPartitions))))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "maxRecordsPerPoll = 1@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,true,null,null,\"awsEndpoint\",null,null,null,null,false))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "recordSupplier.close()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "task.getRunner().getStatus() != SeekableStreamIndexTaskRunner.Status.PAUSED@@@21@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final Map<String,String> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "maxRowsPerSegment = 2@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(STREAM,currentOffsets,currentOffsets.keySet())))))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Thread.sleep(10)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "EasyMock.expect(recordSupplier.poll(EasyMock.anyLong())).andReturn(records.subList(0,5)).once().andReturn(records.subList(4,records.size())).once()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "Assert.assertEquals(6,task.getRunner().getRowIngestionMeters().getProcessed())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(sdd(\"2008/P1D\",0,ImmutableList.of(\"a\")),sdd(\"2009/P1D\",0,ImmutableList.of(\"b\")),sdd(\"2010/P1D\",0,ImmutableList.of(\"c\")),sdd(\"2011/P1D\",0,ImmutableList.of(\"d\",\"e\")),sdd(\"2049/P1D\",0,ImmutableList.of(\"f\")),sdd(\"2013/P1D\",0,ImmutableList.of(\"f\"))),publishedDescriptors())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "task.getRunner().getStatus() != SeekableStreamIndexTaskRunner.Status.PAUSED@@@27@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "EasyMock.expectLastCall().once()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> endPartitions = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"9\",SHARD_ID0,\"1\"))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "final SeekableStreamStartSequenceNumbers<String,String> startPartitions = new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"0\"),ImmutableSet.of())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(checkpoint1.getPartitionSequenceNumberMap(),currentOffsets)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->54 [style = bold, label=""];
29->30 [style = bold, label=""];
28->34 [style = dashed, label="0"];
21->48 [style = bold, label=""];
30->27 [style = solid, label="currentOffsets"];
17->7 [style = solid, label="baseSequenceName"];
50->49 [style = solid, label="nextOffsets"];
5->26 [style = solid, label="startPartitions"];
38->31 [style = bold, label=""];
28->41 [style = dashed, label="0"];
49->22 [style = bold, label=""];
1->40 [style = dashed, label="0"];
23->28 [style = bold, label=""];
48->51 [style = bold, label=""];
12->38 [style = bold, label=""];
31->6 [style = bold, label=""];
15->52 [style = bold, label=""];
29->44 [style = bold, label=""];
27->19 [style = bold, label=""];
45->17 [style = bold, label=""];
4->26 [style = solid, label="endPartitions"];
17->16 [style = bold, label=""];
5->18 [style = solid, label="startPartitions"];
26->7 [style = bold, label=""];
30->19 [style = solid, label="currentOffsets"];
10->14 [style = bold, label=""];
51->23 [style = bold, label=""];
5->32 [style = solid, label="startPartitions"];
30->27 [style = bold, label=""];
1->35 [style = bold, label=""];
32->7 [style = bold, label=""];
52->7 [style = solid, label="startPartitions"];
13->11 [style = bold, label=""];
35->21 [style = bold, label=""];
46->41 [style = bold, label=""];
5->25 [style = bold, label=""];
29->20 [style = bold, label=""];
21->9 [style = bold, label=""];
0->23 [style = bold, label=""];
16->54 [style = dashed, label="0"];
11->8 [style = bold, label=""];
42->7 [style = bold, label=""];
5->52 [style = dashed, label="0"];
19->22 [style = bold, label=""];
24->38 [style = dashed, label="0"];
40->21 [style = bold, label=""];
39->37 [style = bold, label=""];
36->43 [style = bold, label=""];
42->7 [style = solid, label="endPartitions"];
26->32 [style = dashed, label="0"];
44->29 [style = bold, label=""];
43->36 [style = bold, label=""];
26->7 [style = solid, label="task"];
30->48 [style = solid, label="currentOffsets"];
7->20 [style = bold, label=""];
12->24 [style = bold, label=""];
6->15 [style = bold, label=""];
7->20 [style = solid, label="task"];
24->31 [style = bold, label=""];
23->46 [style = dashed, label="0"];
32->7 [style = solid, label="task"];
3->17 [style = bold, label=""];
22->1 [style = bold, label=""];
14->13 [style = bold, label=""];
18->21 [style = bold, label=""];
4->37 [style = dashed, label="0"];
43->36 [style = dotted, label="true"];
19->43 [style = bold, label=""];
8->12 [style = bold, label=""];
37->42 [style = bold, label=""];
25->39 [style = dashed, label="0"];
33->17 [style = bold, label=""];
17->32 [style = solid, label="baseSequenceName"];
52->39 [style = bold, label=""];
43->50 [style = bold, label=""];
9->0 [style = bold, label=""];
20->29 [style = bold, label=""];
16->10 [style = bold, label=""];
1->40 [style = bold, label=""];
5->35 [style = solid, label="startPartitions"];
52->21 [style = solid, label="startPartitions"];
4->26 [style = bold, label=""];
25->4 [style = bold, label=""];
29->44 [style = dotted, label="true"];
1->18 [style = bold, label=""];
2->27 [style = solid, label="currentOffsets"];
17->26 [style = solid, label="baseSequenceName"];
18->35 [style = dashed, label="0"];
2->30 [style = solid, label="currentOffsets"];
15->5 [style = bold, label=""];
20->2 [style = bold, label=""];
53->49 [style = bold, label=""];
54->47 [style = bold, label=""];
28->46 [style = bold, label=""];
50->53 [style = solid, label="nextOffsets"];
20->29 [style = dotted, label="true"];
4->32 [style = solid, label="endPartitions"];
23->34 [style = bold, label=""];
2->30 [style = bold, label=""];
47->14 [style = bold, label=""];
50->53 [style = bold, label=""];
4->32 [style = bold, label=""];
}
