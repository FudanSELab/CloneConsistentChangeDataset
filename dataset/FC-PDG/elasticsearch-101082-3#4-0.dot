digraph {
113 [style = filled, label = "BinaryMathNode irBinaryMathNode@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
54 [style = filled, label = "type == @@@135@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() % (int)irRightConstantNode.getConstant())@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
95 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() >> (int)irRightConstantNode.getConstant())@@@127@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "scope.accept(irLeftConstantNode)@@@183@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "irBinaryMathNode.getLeftNode().visit(this,null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
135 [style = filled, label = "Consumer<ExpressionNode> scope@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() ^ (long)irRightConstantNode.getConstant())@@@166@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "type == @@@165@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
131 [style = filled, label = "throw irBooleanNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"boolean operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
114 [style = filled, label = "visitBinaryMath['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
98 [style = filled, label = "scope.accept(irLeftConstantNode)@@@90@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() % (long)irRightConstantNode.getConstant())@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
110 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() - (long)irRightConstantNode.getConstant())@@@97@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() % (double)irRightConstantNode.getConstant())@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
128 [style = filled, label = "operation == Operation.OR@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
122 [style = filled, label = "Operation operation = irBooleanNode.getOperation()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
125 [style = filled, label = "irBooleanNode.getRightNode().visit(this,null)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "type == @@@177@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@181@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "type == @@@36@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "type == @@@147@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
129 [style = filled, label = "irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() || (boolean)irRightConstantNode.getConstant())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
90 [style = filled, label = "type == @@@84@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "ConstantNode irRightConstantNode = (ConstantNode)irBinaryMathNode.getRightNode()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ArithmeticException ae@@@46@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "operation == Operation.REM@@@51@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "type == @@@56@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "ArithmeticException ae@@@69@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() / (float)irRightConstantNode.getConstant())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@154@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "type == @@@93@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "type == @@@96@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
101 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@118@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "operation == Operation.XOR@@@158@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
121 [style = filled, label = "type == @@@20@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "type == @@@114@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
124 [style = filled, label = "scope.accept(irLeftConstantNode)@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
115 [style = filled, label = "operation == Operation.BWOR@@@173@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
83 [style = filled, label = "type == @@@53@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
117 [style = filled, label = "irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() && (boolean)irRightConstantNode.getConstant())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "operation == Operation.RSH@@@122@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() * (double)irRightConstantNode.getConstant())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
99 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() >>> (int)irRightConstantNode.getConstant())@@@136@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "type == @@@111@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
118 [style = filled, label = "scope.accept(irLeftConstantNode)@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() >>> (int)irRightConstantNode.getConstant())@@@139@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "type == @@@123@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "type == @@@17@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
112 [style = filled, label = "irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() + (float)irRightConstantNode.getConstant())@@@82@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "irBinaryMathNode.getRightNode().visit(this,null)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "scope.accept(irLeftConstantNode)@@@108@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
104 [style = filled, label = "irBinaryMathNode.getLeftNode() instanceof ConstantNode && irBinaryMathNode.getRightNode() instanceof ConstantNode@@@5@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() >> (int)irRightConstantNode.getConstant())@@@124@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "scope.accept(irLeftConstantNode)@@@144@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() / (int)irRightConstantNode.getConstant())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "scope.accept(irLeftConstantNode)@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
107 [style = filled, label = "Operation operation = irBinaryMathNode.getOperation()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() - (float)irRightConstantNode.getConstant())@@@100@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
105 [style = filled, label = "scope.accept(irLeftConstantNode)@@@49@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
123 [style = filled, label = "ConstantNode irRightConstantNode = (ConstantNode)irBooleanNode.getRightNode()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() ^ (boolean)irRightConstantNode.getConstant())@@@160@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "scope.accept(irLeftConstantNode)@@@156@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "type == @@@75@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "type == @@@33@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "type == @@@30@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
116 [style = filled, label = "type == @@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() * (int)irRightConstantNode.getConstant())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() << (int)irRightConstantNode.getConstant())@@@115@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() & (long)irRightConstantNode.getConstant())@@@151@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
106 [style = filled, label = "visitBinaryMath['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() * (float)irRightConstantNode.getConstant())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() - (double)irRightConstantNode.getConstant())@@@103@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "type == @@@59@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
134 [style = filled, label = "operation == Operation.AND@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
97 [style = filled, label = "operation == Operation.BWAND@@@146@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
132 [style = filled, label = "throw irBooleanNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
127 [style = filled, label = "visitBoolean['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
100 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() | (int)irRightConstantNode.getConstant())@@@175@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() + (int)irRightConstantNode.getConstant())@@@76@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
92 [style = filled, label = "scope.accept(irLeftConstantNode)@@@120@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "ConstantNode irLeftConstantNode = (ConstantNode)irBinaryMathNode.getLeftNode()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
91 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() | (long)irRightConstantNode.getConstant())@@@178@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "operation == Operation.USH@@@134@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "Class<?> type = irBinaryMathNode.getExpressionType()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "type == @@@102@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "type == @@@174@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "operation == Operation.MUL@@@10@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() + (double)irRightConstantNode.getConstant())@@@85@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
119 [style = filled, label = "irBooleanNode.getLeftNode() instanceof ConstantNode && irBooleanNode.getRightNode() instanceof ConstantNode@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() - (int)irRightConstantNode.getConstant())@@@94@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
120 [style = filled, label = "irBooleanNode.getLeftNode().visit(this,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
130 [style = filled, label = "Class<?> type = irBooleanNode.getExpressionType()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "scope.accept(irLeftConstantNode)@@@132@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@142@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
133 [style = filled, label = "ConstantNode irLeftConstantNode = (ConstantNode)irBooleanNode.getLeftNode()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "type == @@@138@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "operation == Operation.ADD@@@74@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() * (long)irRightConstantNode.getConstant())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "operation == Operation.OR@@@173@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() << (int)irRightConstantNode.getConstant())@@@112@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "operation == Operation.DIV@@@28@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@106@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "type == @@@150@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() / (long)irRightConstantNode.getConstant())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
111 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "type == @@@126@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() % (float)irRightConstantNode.getConstant())@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "scope.accept(irLeftConstantNode)@@@72@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() & (int)irRightConstantNode.getConstant())@@@148@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(ae)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "operation == Operation.SUB@@@92@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "type == @@@78@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "type == @@@159@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "type == @@@162@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
108 [style = filled, label = "irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() / (double)irRightConstantNode.getConstant())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
96 [style = filled, label = "type == @@@39@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
109 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@130@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "type == @@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(ae)@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "Consumer<ExpressionNode> scope@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "operation == Operation.LSH@@@110@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
126 [style = filled, label = "BooleanNode irBooleanNode@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
94 [style = filled, label = "type == @@@20@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() ^ (int)irRightConstantNode.getConstant())@@@163@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "type == @@@62@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "BinaryMathNode irBinaryMathNode@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
102 [style = filled, label = "irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() + (long)irRightConstantNode.getConstant())@@@79@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@169@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "type == @@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "type == @@@99@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
103 [style = filled, label = "throw irBinaryMathNode.getLocation().createError(new IllegalStateException(\"constant folding error: \" + \"unexpected type (\" + PainlessLookupUtility.typeToCanonicalTypeName(type) + \"( for \" + \"binary operation (\" + operation.symbol + \"( on \" + \"constants (\" + irLeftConstantNode.getConstant() + \"( and (\" + irRightConstantNode.getConstant() + \"(\"))@@@88@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "type == @@@81@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "scope.accept(irLeftConstantNode)@@@171@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
53->52 [style = dotted, label="true"];
73->21 [style = bold, label=""];
42->84 [style = bold, label=""];
61->83 [style = solid, label="type"];
2->11 [style = dotted, label="true"];
22->98 [style = solid, label="irLeftConstantNode"];
90->26 [style = dotted, label="true"];
55->74 [style = bold, label=""];
107->61 [style = bold, label=""];
93->107 [style = bold, label=""];
49->120 [style = dashed, label="0"];
97->42 [style = bold, label=""];
96->111 [style = dotted, label="false"];
81->102 [style = bold, label=""];
90->103 [style = dotted, label="false"];
59->18 [style = dotted, label="true"];
83->46 [style = dotted, label="true"];
64->135 [style = dashed, label="0"];
14->48 [style = bold, label=""];
120->125 [style = bold, label=""];
87->53 [style = bold, label=""];
68->75 [style = dotted, label="true"];
72->97 [style = bold, label=""];
96->108 [style = dotted, label="true"];
130->131 [style = solid, label="type"];
33->110 [style = bold, label=""];
53->52 [style = bold, label=""];
130->116 [style = solid, label="type"];
9->32 [style = bold, label=""];
61->53 [style = solid, label="type"];
22->66 [style = solid, label="irLeftConstantNode"];
61->14 [style = solid, label="type"];
61->90 [style = solid, label="type"];
61->35 [style = solid, label="type"];
61->0 [style = solid, label="type"];
34->92 [style = bold, label=""];
6->59 [style = dotted, label="false"];
10->34 [style = bold, label=""];
51->101 [style = dotted, label="false"];
70->21 [style = bold, label=""];
55->74 [style = dotted, label="false"];
13->100 [style = dotted, label="true"];
68->8 [style = dotted, label="false"];
121->131 [style = bold, label=""];
82->105 [style = bold, label=""];
83->67 [style = bold, label=""];
19->85 [style = bold, label=""];
80->44 [style = dotted, label="true"];
133->123 [style = bold, label=""];
8->19 [style = dotted, label="true"];
61->4 [style = solid, label="type"];
107->24 [style = solid, label="operation"];
61->81 [style = solid, label="type"];
67->80 [style = bold, label=""];
89->125 [style = dashed, label="0"];
61->32 [style = solid, label="type"];
122->130 [style = bold, label=""];
17->47 [style = dotted, label="true"];
37->57 [style = dotted, label="false"];
61->74 [style = solid, label="type"];
127->126 [style = dotted, label="true"];
61->33 [style = solid, label="type"];
96->111 [style = bold, label=""];
78->62 [style = bold, label=""];
45->9 [style = bold, label=""];
33->2 [style = bold, label=""];
61->59 [style = solid, label="type"];
22->36 [style = solid, label="irLeftConstantNode"];
37->68 [style = dotted, label="true"];
39->21 [style = dotted, label="true"];
37->68 [style = bold, label=""];
2->38 [style = dotted, label="false"];
107->25 [style = solid, label="operation"];
8->19 [style = bold, label=""];
17->47 [style = bold, label=""];
112->98 [style = bold, label=""];
61->130 [style = dashed, label="0"];
60->23 [style = dotted, label="true"];
61->31 [style = solid, label="type"];
119->133 [style = bold, label=""];
24->86 [style = dotted, label="true"];
20->6 [style = bold, label=""];
67->80 [style = dotted, label="false"];
11->15 [style = bold, label=""];
81->102 [style = dotted, label="true"];
61->16 [style = solid, label="type"];
51->3 [style = bold, label=""];
55->65 [style = dotted, label="true"];
130->121 [style = solid, label="type"];
68->75 [style = bold, label=""];
127->120 [style = bold, label=""];
22->93 [style = bold, label=""];
86->79 [style = bold, label=""];
130->134 [style = bold, label=""];
68->8 [style = bold, label=""];
22->92 [style = solid, label="irLeftConstantNode"];
61->78 [style = solid, label="type"];
115->48 [style = dotted, label="true"];
69->105 [style = bold, label=""];
57->45 [style = dotted, label="true"];
3->92 [style = bold, label=""];
94->58 [style = dotted, label="true"];
84->13 [style = bold, label=""];
134->116 [style = dotted, label="true"];
107->57 [style = solid, label="operation"];
61->68 [style = solid, label="type"];
20->27 [style = bold, label=""];
107->37 [style = solid, label="operation"];
122->134 [style = solid, label="operation"];
122->128 [style = solid, label="operation"];
106->64 [style = dotted, label="true"];
57->39 [style = dotted, label="false"];
41->91 [style = dotted, label="true"];
4->112 [style = dotted, label="true"];
57->105 [style = dotted, label="true"];
115->13 [style = bold, label=""];
54->78 [style = dotted, label="false"];
119->134 [style = dotted, label="true"];
61->23 [style = solid, label="type"];
116->117 [style = dotted, label="true"];
37->134 [style = dashed, label="0"];
17->30 [style = dotted, label="false"];
77->73 [style = dotted, label="true"];
107->87 [style = solid, label="operation"];
72->28 [style = dotted, label="true"];
7->76 [style = dotted, label="true"];
45->29 [style = bold, label=""];
0->36 [style = bold, label=""];
55->65 [style = bold, label=""];
16->85 [style = bold, label=""];
95->1 [style = bold, label=""];
61->101 [style = solid, label="type"];
114->64 [style = dotted, label="true"];
61->67 [style = solid, label="type"];
107->122 [style = dashed, label="0"];
23->31 [style = dotted, label="false"];
99->28 [style = bold, label=""];
103->98 [style = bold, label=""];
125->119 [style = bold, label=""];
59->0 [style = dotted, label="false"];
90->103 [style = bold, label=""];
61->13 [style = solid, label="type"];
9->32 [style = dotted, label="false"];
22->1 [style = solid, label="irLeftConstantNode"];
86->81 [style = dotted, label="false"];
79->98 [style = bold, label=""];
127->135 [style = dotted, label="true"];
65->21 [style = bold, label=""];
38->71 [style = dotted, label="false"];
42->20 [style = dotted, label="true"];
54->99 [style = dotted, label="true"];
61->96 [style = solid, label="type"];
5->50 [style = dotted, label="true"];
61->30 [style = solid, label="type"];
13->100 [style = bold, label=""];
2->11 [style = bold, label=""];
134->128 [style = bold, label=""];
37->57 [style = bold, label=""];
25->60 [style = dotted, label="false"];
75->85 [style = bold, label=""];
104->61 [style = dotted, label="true"];
97->42 [style = dotted, label="false"];
27->36 [style = bold, label=""];
86->81 [style = bold, label=""];
84->115 [style = dashed, label="0"];
107->42 [style = solid, label="operation"];
31->109 [style = dotted, label="false"];
22->28 [style = solid, label="irLeftConstantNode"];
47->66 [style = bold, label=""];
42->20 [style = bold, label=""];
29->105 [style = bold, label=""];
134->116 [style = bold, label=""];
61->10 [style = solid, label="type"];
33->110 [style = dotted, label="true"];
116->117 [style = bold, label=""];
17->30 [style = bold, label=""];
61->9 [style = solid, label="type"];
35->56 [style = bold, label=""];
97->35 [style = dotted, label="true"];
40->1 [style = bold, label=""];
32->82 [style = dotted, label="true"];
8->5 [style = bold, label=""];
13->41 [style = dotted, label="false"];
43->15 [style = bold, label=""];
93->123 [style = dashed, label="0"];
116->132 [style = dotted, label="false"];
104->37 [style = dotted, label="true"];
86->79 [style = dotted, label="true"];
25->60 [style = bold, label=""];
4->112 [style = bold, label=""];
104->119 [style = dashed, label="0"];
134->128 [style = dotted, label="false"];
104->22 [style = dotted, label="true"];
58->85 [style = bold, label=""];
61->37 [style = bold, label=""];
61->54 [style = solid, label="type"];
10->34 [style = dotted, label="true"];
109->1 [style = bold, label=""];
20->27 [style = dotted, label="true"];
14->131 [style = dashed, label="0"];
61->2 [style = solid, label="type"];
61->41 [style = solid, label="type"];
31->109 [style = bold, label=""];
37->85 [style = dotted, label="true"];
22->133 [style = dashed, label="0"];
22->21 [style = solid, label="irLeftConstantNode"];
53->33 [style = dotted, label="false"];
91->48 [style = bold, label=""];
24->98 [style = dotted, label="true"];
84->13 [style = dotted, label="true"];
25->10 [style = bold, label=""];
54->78 [style = bold, label=""];
100->48 [style = bold, label=""];
51->101 [style = bold, label=""];
42->115 [style = dotted, label="false"];
44->21 [style = bold, label=""];
54->99 [style = bold, label=""];
31->95 [style = dotted, label="true"];
45->9 [style = dotted, label="false"];
24->87 [style = bold, label=""];
42->115 [style = bold, label=""];
5->94 [style = bold, label=""];
7->76 [style = bold, label=""];
4->90 [style = bold, label=""];
61->109 [style = solid, label="type"];
6->12 [style = dotted, label="true"];
25->10 [style = dotted, label="true"];
128->121 [style = bold, label=""];
61->38 [style = solid, label="type"];
23->31 [style = bold, label=""];
61->71 [style = solid, label="type"];
20->6 [style = dotted, label="false"];
27->117 [style = dashed, label="0"];
31->95 [style = bold, label=""];
77->73 [style = bold, label=""];
61->80 [style = solid, label="type"];
39->24 [style = dotted, label="false"];
67->70 [style = bold, label=""];
71->15 [style = bold, label=""];
41->14 [style = dotted, label="false"];
121->129 [style = bold, label=""];
9->69 [style = dotted, label="true"];
106->63 [style = dotted, label="true"];
116->132 [style = bold, label=""];
80->44 [style = bold, label=""];
39->83 [style = bold, label=""];
128->124 [style = dotted, label="true"];
32->96 [style = bold, label=""];
83->67 [style = dotted, label="false"];
8->5 [style = dotted, label="false"];
41->91 [style = bold, label=""];
81->4 [style = dotted, label="false"];
6->59 [style = bold, label=""];
50->85 [style = bold, label=""];
84->48 [style = dotted, label="true"];
67->70 [style = dotted, label="true"];
114->49 [style = bold, label=""];
134->118 [style = dotted, label="true"];
110->15 [style = bold, label=""];
132->118 [style = bold, label=""];
133->124 [style = solid, label="irLeftConstantNode"];
30->66 [style = bold, label=""];
61->86 [style = solid, label="type"];
80->55 [style = dotted, label="false"];
87->25 [style = dotted, label="false"];
97->66 [style = dotted, label="true"];
107->60 [style = solid, label="operation"];
61->20 [style = solid, label="type"];
78->88 [style = dotted, label="false"];
2->38 [style = bold, label=""];
89->104 [style = bold, label=""];
94->16 [style = dotted, label="false"];
107->72 [style = solid, label="operation"];
96->108 [style = bold, label=""];
107->115 [style = solid, label="operation"];
59->0 [style = bold, label=""];
119->133 [style = dotted, label="true"];
5->50 [style = bold, label=""];
94->58 [style = bold, label=""];
111->105 [style = bold, label=""];
107->39 [style = solid, label="operation"];
129->124 [style = bold, label=""];
25->92 [style = dotted, label="true"];
32->96 [style = dotted, label="false"];
39->24 [style = bold, label=""];
74->21 [style = bold, label=""];
61->55 [style = solid, label="type"];
46->21 [style = bold, label=""];
9->69 [style = bold, label=""];
57->39 [style = bold, label=""];
0->132 [style = dashed, label="0"];
22->105 [style = solid, label="irLeftConstantNode"];
106->49 [style = bold, label=""];
61->17 [style = solid, label="type"];
114->113 [style = dotted, label="true"];
42->84 [style = dotted, label="false"];
107->97 [style = solid, label="operation"];
61->45 [style = solid, label="type"];
24->87 [style = dotted, label="false"];
60->23 [style = bold, label=""];
94->16 [style = bold, label=""];
90->26 [style = bold, label=""];
10->51 [style = bold, label=""];
107->84 [style = solid, label="operation"];
61->8 [style = solid, label="type"];
4->90 [style = dotted, label="false"];
42->36 [style = dotted, label="true"];
61->51 [style = solid, label="type"];
128->121 [style = dotted, label="true"];
22->48 [style = solid, label="irLeftConstantNode"];
57->45 [style = bold, label=""];
61->94 [style = solid, label="type"];
23->40 [style = dotted, label="true"];
104->22 [style = bold, label=""];
32->82 [style = bold, label=""];
22->85 [style = solid, label="irLeftConstantNode"];
60->1 [style = dotted, label="true"];
35->17 [style = bold, label=""];
59->18 [style = bold, label=""];
62->28 [style = bold, label=""];
53->33 [style = bold, label=""];
104->107 [style = dotted, label="true"];
121->131 [style = dotted, label="false"];
130->132 [style = solid, label="type"];
121->129 [style = dotted, label="true"];
81->4 [style = bold, label=""];
101->92 [style = bold, label=""];
61->5 [style = solid, label="type"];
52->15 [style = bold, label=""];
87->25 [style = bold, label=""];
78->88 [style = bold, label=""];
104->93 [style = dotted, label="true"];
97->35 [style = bold, label=""];
102->98 [style = bold, label=""];
45->29 [style = dotted, label="true"];
12->36 [style = bold, label=""];
87->53 [style = dotted, label="true"];
56->66 [style = bold, label=""];
131->124 [style = bold, label=""];
133->118 [style = solid, label="irLeftConstantNode"];
119->122 [style = dotted, label="true"];
39->83 [style = dotted, label="true"];
13->41 [style = bold, label=""];
80->55 [style = bold, label=""];
108->105 [style = bold, label=""];
60->72 [style = bold, label=""];
24->86 [style = bold, label=""];
35->17 [style = dotted, label="false"];
61->111 [style = solid, label="type"];
88->28 [style = bold, label=""];
117->118 [style = bold, label=""];
49->89 [style = bold, label=""];
72->97 [style = dotted, label="false"];
61->6 [style = solid, label="type"];
5->94 [style = dotted, label="false"];
119->130 [style = dotted, label="true"];
38->43 [style = bold, label=""];
41->14 [style = bold, label=""];
6->12 [style = bold, label=""];
76->105 [style = bold, label=""];
72->54 [style = bold, label=""];
18->36 [style = bold, label=""];
115->13 [style = dotted, label="true"];
123->122 [style = bold, label=""];
33->2 [style = dotted, label="false"];
51->3 [style = dotted, label="true"];
100->129 [style = dashed, label="0"];
83->46 [style = bold, label=""];
10->51 [style = dotted, label="false"];
26->98 [style = bold, label=""];
78->62 [style = dotted, label="true"];
38->43 [style = dotted, label="true"];
61->88 [style = solid, label="type"];
23->40 [style = bold, label=""];
22->15 [style = solid, label="irLeftConstantNode"];
61->103 [style = solid, label="type"];
119->123 [style = dotted, label="true"];
87->15 [style = dotted, label="true"];
13->121 [style = dashed, label="0"];
60->72 [style = dotted, label="false"];
72->54 [style = dotted, label="true"];
35->56 [style = dotted, label="true"];
38->71 [style = bold, label=""];
}
