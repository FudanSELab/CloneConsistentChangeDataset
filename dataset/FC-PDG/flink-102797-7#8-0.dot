digraph {
10 [style = filled, label = "WindowAssigner<Integer,TimeWindow> mockAssigner = mockTimeWindowAssigner()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(0,testHarness.numEventTimeTimers())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(0,testHarness.getOutput().size())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "verify(mockTrigger,never()).clear(anyTimeWindow(),anyTriggerContext())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testHarness.processWatermark(new Watermark(20))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Arrays.asList(new TimeWindow(0,2)))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(0,testHarness.numProcessingTimeTimers())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "verify(mockWindowFunction,times(1)).apply(eq(0),eq(new TimeWindow(0,2)),intIterable(0),WindowOperatorContractTest.anyCollector())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "testHarness.processElement(new StreamRecord<>(0,0L))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(0,testHarness.numKeyedStateEntries())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Integer,Void> testHarness = createWindowOperator(mockAssigner,mockTrigger,20L,mockWindowFunction)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testHarness.open()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Trigger<Integer,TimeWindow> mockTrigger = mockTrigger()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testProcessingElementsWithinAllowedLateness['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertEquals(0,testHarness.numKeyedStateEntries())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "verify(mockWindowFunction,times(1)).process(eq(0),eq(new TimeWindow(0,2)),anyInternalWindowContext(),intIterable(0),WindowOperatorContractTest.anyCollector())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertEquals(1,testHarness.numKeyedStateEntries())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testHarness.processWatermark(new Watermark(21))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(0,testHarness.extractOutputStreamRecords().size())@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "shouldFireOnElement(mockTrigger)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testLateWindowDropping['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(1,testHarness.numEventTimeTimers())@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testProcessingElementsWithinAllowedLateness['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "InternalWindowFunction<Iterable<Integer>,Void,Integer,TimeWindow> mockWindowFunction = mockWindowFunction()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->23 [style = dashed, label="0"];
17->8 [style = bold, label=""];
9->0 [style = bold, label=""];
5->9 [style = bold, label=""];
0->6 [style = bold, label=""];
7->10 [style = bold, label=""];
16->10 [style = bold, label=""];
1->19 [style = dashed, label="0"];
4->19 [style = bold, label=""];
1->3 [style = bold, label=""];
3->11 [style = bold, label=""];
10->9 [style = solid, label="mockAssigner"];
13->4 [style = solid, label="mockTrigger"];
11->17 [style = dashed, label="0"];
22->23 [style = bold, label=""];
20->21 [style = bold, label=""];
6->14 [style = bold, label=""];
12->2 [style = bold, label=""];
3->20 [style = bold, label=""];
18->10 [style = bold, label=""];
10->13 [style = bold, label=""];
21->22 [style = bold, label=""];
12->22 [style = dashed, label="0"];
15->4 [style = bold, label=""];
13->5 [style = bold, label=""];
11->8 [style = bold, label=""];
3->17 [style = bold, label=""];
14->15 [style = bold, label=""];
4->1 [style = bold, label=""];
5->9 [style = solid, label="mockWindowFunction"];
13->9 [style = solid, label="mockTrigger"];
19->3 [style = bold, label=""];
8->12 [style = bold, label=""];
}
