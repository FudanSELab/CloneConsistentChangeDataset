digraph {
15 [style = filled, label = "field = ((PartitionData)entry.file().partition()).getPartitionType().fields().get(1)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "DataFile newFileC = DataFiles.builder(newSpec).copy(FILE_C).withPartitionPath(\"data_bucket=2/id_bucket=3\").build()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Snapshot pending = table.newAppend().appendFile(newFileC).apply()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testManifestEntryFieldIdsForChangedPartitionSpecForV1Table['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "DataFile newFile = DataFiles.builder(table.spec()).copy(FILE_B).build()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testChangedPartitionSpec['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "table.newAppend().appendFile(FILE_A).appendFile(FILE_B).commit()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(1001,field.fieldId())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(\"Second manifest should be the initial manifest with the old spec\",initialManifest,pending.manifests().get(1))@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "validateManifest(pending.manifests().get(0),ids(pending.snapshotId()),files(newFileC))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Snapshot pending = table.newAppend().appendFile(newFile).apply()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ManifestEntry entry = ManifestReader.read(pending.manifests().get(0),FILE_IO).entries().iterator().next()@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "PartitionSpec newSpec = PartitionSpec.builderFor(base.schema()).bucket(\"id\",8).bucket(\"data\",8).build()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testManifestEntryFieldIdsForChangedPartitionSpecForV1Table['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "field = ((PartitionData)entry.file().partition()).getPartitionType().fields().get(0)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(\"data_bucket\",field.name())@@@24@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ManifestFile initialManifest = base.currentSnapshot().manifests().get(0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(1000,field.fieldId())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Types.NestedField field = ((PartitionData)entry.file().partition()).getPartitionType().fields().get(0)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "PartitionSpec newSpec = PartitionSpec.builderFor(base.schema()).bucket(\"data\",16).bucket(\"id\",4).build()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "entry = ManifestFiles.read(pending.manifests().get(1),FILE_IO).entries().iterator().next()@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "validateManifest(pending.manifests().get(0),ids(pending.snapshotId()),files(newFile))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "ManifestEntry entry = ManifestFiles.read(pending.manifests().get(0),FILE_IO).entries().iterator().next()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "Assert.assertEquals(\"Should create 1 manifest for initial write\",1,base.currentSnapshot().manifests().size())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "table.ops().commit(base,base.updatePartitionSpec(newSpec))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "entry = ManifestReader.read(pending.manifests().get(1),FILE_IO).entries().iterator().next()@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(\"data_bucket\",field.name())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(\"Should use 2 manifest files\",2,pending.manifests().size())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(\"id_bucket\",field.name())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "table.newAppend().appendFile(FILE_A).commit()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(1000,field.fieldId())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "TableMetadata base = readMetadata()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
11->28 [style = bold, label=""];
17->5 [style = bold, label=""];
16->10 [style = bold, label=""];
9->2 [style = bold, label=""];
12->21 [style = bold, label=""];
24->0 [style = bold, label=""];
31->28 [style = solid, label="newFileC"];
1->26 [style = dashed, label="0"];
29->3 [style = bold, label=""];
18->19 [style = bold, label=""];
10->31 [style = dashed, label="0"];
5->15 [style = bold, label=""];
20->8 [style = solid, label="initialManifest"];
20->6 [style = bold, label=""];
7->8 [style = bold, label=""];
3->22 [style = bold, label=""];
15->18 [style = bold, label=""];
9->23 [style = dashed, label="0"];
26->11 [style = bold, label=""];
3->16 [style = solid, label="base"];
1->11 [style = bold, label=""];
4->0 [style = bold, label=""];
2->13 [style = bold, label=""];
31->26 [style = bold, label=""];
12->25 [style = dashed, label="0"];
6->16 [style = solid, label="newSpec"];
22->20 [style = bold, label=""];
19->9 [style = bold, label=""];
7->28 [style = dashed, label="0"];
6->16 [style = bold, label=""];
16->31 [style = bold, label=""];
19->23 [style = bold, label=""];
28->8 [style = bold, label=""];
0->29 [style = dashed, label="0"];
6->30 [style = dashed, label="0"];
10->7 [style = solid, label="newFile"];
23->2 [style = bold, label=""];
27->29 [style = bold, label=""];
20->30 [style = bold, label=""];
10->1 [style = bold, label=""];
30->16 [style = bold, label=""];
13->14 [style = bold, label=""];
21->17 [style = bold, label=""];
8->25 [style = bold, label=""];
8->12 [style = bold, label=""];
11->7 [style = bold, label=""];
25->21 [style = bold, label=""];
30->16 [style = solid, label="newSpec"];
}
