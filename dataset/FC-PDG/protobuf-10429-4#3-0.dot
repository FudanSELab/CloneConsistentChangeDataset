digraph {
12 [style = filled, label = "TextFormat.merge(message.toString(),message2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testMergeComment['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "TestProto3Optional.Builder message2 = TestProto3Optional.newBuilder()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(2,builder.getOptionalInt64())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "Message message = TestProto3Optional.newBuilder().setOptionalInt32(1).setOptionalInt64(2).setOptionalNestedEnum(NestedEnum.BAZ).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertTrue(message2.hasOptionalNestedEnum())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(1,builder.getOptionalInt32())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertEquals(2,message2.getOptionalInt64())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(builder.getOptionalInt64()).isEqualTo(2)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertEquals(1,message2.getOptionalInt32())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TestAllTypes.Builder builder = TestAllTypes.newBuilder()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(builder.getOptionalInt32()).isEqualTo(1)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testRoundtripProto3Optional['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertTrue(message2.hasOptionalInt32())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "TextFormat.merge(\"# this is a comment\" + \"optional_int32: 1 # another comment\" + \"optional_int64: 2\" + \"# EOF comment\",builder)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(NestedEnum.BAZ,message2.getOptionalNestedEnum())@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(message2.hasOptionalInt64())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testMergeComment['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
3->5 [style = dashed, label="0"];
16->15 [style = bold, label=""];
2->0 [style = solid, label="builder"];
13->12 [style = solid, label="message2"];
3->4 [style = bold, label=""];
6->2 [style = bold, label=""];
2->0 [style = bold, label=""];
12->10 [style = bold, label=""];
13->12 [style = bold, label=""];
2->14 [style = dashed, label="0"];
4->7 [style = dashed, label="0"];
9->14 [style = bold, label=""];
5->7 [style = bold, label=""];
11->17 [style = bold, label=""];
1->2 [style = bold, label=""];
14->13 [style = bold, label=""];
4->10 [style = dashed, label="0"];
15->8 [style = bold, label=""];
17->16 [style = bold, label=""];
0->5 [style = bold, label=""];
10->11 [style = bold, label=""];
}
