digraph {
1 [style = filled, label = "map.put(key,value)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "int size = random.nextInt(50)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "HashMap map = new HashMap()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "DataInput in = getDataInput()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testLinkedHashMapObject['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "DataOutputStream out = getDataOutput()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "i < size@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Object key = new Long(random.nextLong())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(map,map2)@@@18@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "String value = String.valueOf(random.nextLong())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Long key = random.nextLong()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "testHashMapObject['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "HashMap<Long,String> map = new HashMap<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Random random = getRandom()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "LinkedHashMap map2 = (LinkedHashMap)DataSerializer.readObject(in)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "out.flush()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testHashMapObject['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "i++@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Object value = String.valueOf(random.nextLong())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "HashMap map2 = (HashMap)DataSerializer.readObject(in)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "HashMap<Long,String> map2 = DataSerializer.readObject(in)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "int i = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "LinkedHashMap map = new LinkedHashMap()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "DataSerializer.writeObject(map,out)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
9->19 [style = solid, label="in"];
4->10 [style = bold, label=""];
12->10 [style = solid, label="size"];
22->6 [style = solid, label="map"];
18->3 [style = bold, label=""];
15->6 [style = solid, label="map2"];
21->6 [style = solid, label="map2"];
10->8 [style = dotted, label="true"];
11->20 [style = dashed, label="0"];
17->1 [style = bold, label=""];
5->9 [style = bold, label=""];
21->6 [style = bold, label=""];
8->1 [style = solid, label="value"];
0->1 [style = solid, label="key"];
4->14 [style = solid, label="i"];
2->3 [style = bold, label=""];
0->16 [style = dashed, label="0"];
11->22 [style = dashed, label="0"];
3->11 [style = bold, label=""];
14->10 [style = bold, label=""];
15->21 [style = dashed, label="0"];
14->10 [style = solid, label="i"];
7->13 [style = solid, label="out"];
11->12 [style = bold, label=""];
15->6 [style = bold, label=""];
23->3 [style = bold, label=""];
20->6 [style = solid, label="map"];
16->17 [style = bold, label=""];
20->13 [style = solid, label="map"];
17->1 [style = solid, label="value"];
22->13 [style = solid, label="map"];
15->19 [style = dashed, label="0"];
19->6 [style = bold, label=""];
3->22 [style = bold, label=""];
10->7 [style = bold, label=""];
19->6 [style = solid, label="map2"];
10->17 [style = dotted, label="true"];
10->14 [style = dotted, label="true"];
8->1 [style = bold, label=""];
3->20 [style = bold, label=""];
16->1 [style = solid, label="key"];
11->13 [style = solid, label="map"];
10->16 [style = bold, label=""];
12->4 [style = bold, label=""];
9->15 [style = bold, label=""];
22->12 [style = bold, label=""];
10->0 [style = bold, label=""];
20->12 [style = bold, label=""];
0->8 [style = bold, label=""];
9->21 [style = bold, label=""];
11->6 [style = solid, label="map"];
13->5 [style = bold, label=""];
4->10 [style = solid, label="i"];
9->19 [style = bold, label=""];
9->15 [style = solid, label="in"];
10->0 [style = dotted, label="true"];
8->17 [style = dashed, label="0"];
1->14 [style = bold, label=""];
10->1 [style = dotted, label="true"];
9->21 [style = solid, label="in"];
10->16 [style = dotted, label="true"];
}
