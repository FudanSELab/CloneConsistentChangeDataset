digraph {
8 [style = filled, label = "assertThat(propertyValues.get(\"filter\")).isEqualTo(scanned)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "this.handler.handle(definition,this.registry)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "ScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(new SimpleMetadataReaderFactory().getMetadataReader(.getName()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat((EnumSet<DispatcherType>)propertyValues.get(\"dispatcherTypes\")).containsExactly(DispatcherType.REQUEST)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(propertyValues.get(\"name\")).isEqualTo(.getName())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "filterWithCustomName['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "MutablePropertyValues propertyValues = filterRegistrationBean.getPropertyValues()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat((String(()propertyValues.get(\"urlPatterns\")).isEmpty()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat((String(()propertyValues.get(\"servletNames\")).isEmpty()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "BeanDefinition filterRegistrationBean = this.registry.getBeanDefinition(\"custom\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "AnnotatedBeanDefinition definition = createBeanDefinition()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "this.handler.handle(scanned,this.registry)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(propertyValues.get(\"asyncSupported\")).isEqualTo(false)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(propertyValues.get(\"filter\")).isEqualTo(definition)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "defaultFilterConfiguration['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "ScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(new SimpleMetadataReaderFactory().getMetadataReader(.getName()))@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "defaultFilterConfiguration['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(propertyValues.get(\"name\")).isEqualTo(\"custom\")@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "BeanDefinition filterRegistrationBean = this.registry.getBeanDefinition(.getName())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(((Map<String,String>)propertyValues.get(\"initParameters\"))).isEmpty()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
17->5 [style = bold, label=""];
15->12 [style = solid, label="definition"];
15->14 [style = bold, label=""];
4->6 [style = bold, label=""];
7->17 [style = dashed, label="0"];
11->4 [style = bold, label=""];
1->19 [style = dashed, label="0"];
9->17 [style = bold, label=""];
8->12 [style = dashed, label="0"];
9->7 [style = bold, label=""];
2->10 [style = bold, label=""];
16->9 [style = solid, label="scanned"];
15->14 [style = solid, label="definition"];
14->7 [style = bold, label=""];
3->9 [style = bold, label=""];
5->19 [style = bold, label=""];
5->1 [style = bold, label=""];
7->5 [style = bold, label=""];
3->8 [style = solid, label="scanned"];
18->16 [style = bold, label=""];
9->14 [style = dashed, label="0"];
6->8 [style = bold, label=""];
3->9 [style = solid, label="scanned"];
1->2 [style = bold, label=""];
13->15 [style = bold, label=""];
16->9 [style = bold, label=""];
3->16 [style = dashed, label="0"];
10->11 [style = bold, label=""];
6->12 [style = bold, label=""];
}
