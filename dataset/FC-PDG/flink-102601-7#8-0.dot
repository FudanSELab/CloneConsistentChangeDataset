digraph {
33 [style = filled, label = "expected.add(new StreamRecord<>(new Tuple2<>(\"key2\",2),2999))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),2400))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testSlidingEventTimeWindows(testHarness)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),1000))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "expected.add(new Watermark(25000))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "expected.add(new StreamRecord<>(new Tuple2<>(\"key1\",2),5999))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testHarness.open()@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "expected.add(new StreamRecord<>(new Tuple2<>(\"key1\",2),3999))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testHarness.setup()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "expected.add(new Watermark(3000))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "expected.add(new StreamRecord<>(new Tuple2<>(\"key2\",4),4999))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expected,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "sideExpected.add(new StreamRecord<>(new Tuple2<>(\"key1\",1),3001))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),3001))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>()@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),3001))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testHarness.processWatermark(new Watermark(25000))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final int windowSize = 3@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,TimeWindow> operator = new WindowOperator<>(SlidingEventTimeWindows.of(Time.of(windowSize,TimeUnit.SECONDS),Time.of(windowSlide,TimeUnit.SECONDS)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String,TimeWindow,Tuple2<String,Integer>>()),EventTimeTrigger.create(),0,null)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testHarness.processWatermark(new Watermark(1999))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "expected.add(new StreamRecord<>(new Tuple2<>(\"key2\",5),3999))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),3001))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "expected.add(new StreamRecord<>(new Tuple2<>(\"key1\",2),4999))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final long lateness = 0@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),2000))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,TimeWindow> operator = new WindowOperator<>(SlidingEventTimeWindows.of(Time.of(windowSize,TimeUnit.SECONDS),Time.of(windowSlide,TimeUnit.SECONDS)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String,TimeWindow,Tuple2<String,Integer>>()),EventTimeTrigger.create(),lateness,lateOutputTag)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testHarness.close()@@@40@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ReducingStateDescriptor<Tuple2<String,Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",new SumReducer(),inputType.createSerializer(new ExecutionConfig()))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testSlidingEventTimeWindows(operator)@@@9@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "testSlidingEventTimeWindowsReduce['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "ConcurrentLinkedQueue<Object> sideExpected = new ConcurrentLinkedQueue<>()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testHarness.processWatermark(new Watermark(6000))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "TypeInformation<Tuple2<String,Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testHarness.processWatermark(new Watermark(3000))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testHarness.close()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "closeCalled.set(0)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testSideOutputDueToLatenessSliding['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),3900))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "expected.add(new StreamRecord<>(new Tuple2<>(\"key2\",1),1999))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),2400))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testSlidingEventTimeWindowsReduce['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "expected.add(new Watermark(6000))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"SideOutput was not correct.\",sideExpected,(Iterable)testHarness.getSideOutput(lateOutputTag),new Tuple2ResultSortComparator())@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "expected.add(new StreamRecord<>(new Tuple2<>(\"key2\",1),5999))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "expected.add(new Watermark(1999))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final int windowSlide = 1@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->10 [style = bold, label=""];
9->8 [style = solid, label="windowSize"];
30->41 [style = bold, label=""];
6->8 [style = solid, label="windowSlide"];
1->8 [style = bold, label=""];
46->0 [style = bold, label=""];
8->13 [style = solid, label="operator"];
38->28 [style = bold, label=""];
44->35 [style = bold, label=""];
39->34 [style = bold, label=""];
18->40 [style = bold, label=""];
11->4 [style = bold, label=""];
36->15 [style = bold, label=""];
42->16 [style = bold, label=""];
26->9 [style = bold, label=""];
34->31 [style = bold, label=""];
19->11 [style = bold, label=""];
22->32 [style = bold, label=""];
6->0 [style = bold, label=""];
17->33 [style = bold, label=""];
31->21 [style = bold, label=""];
2->9 [style = bold, label=""];
7->4 [style = bold, label=""];
29->23 [style = bold, label=""];
26->1 [style = solid, label="windowSize"];
8->1 [style = dashed, label="0"];
25->17 [style = bold, label=""];
4->44 [style = bold, label=""];
0->1 [style = solid, label="stateDesc"];
4->24 [style = solid, label="expected"];
9->6 [style = bold, label=""];
24->30 [style = bold, label=""];
23->42 [style = bold, label=""];
11->10 [style = solid, label="testHarness"];
14->26 [style = bold, label=""];
12->2 [style = bold, label=""];
9->1 [style = solid, label="windowSlide"];
1->19 [style = solid, label="operator"];
40->39 [style = bold, label=""];
10->5 [style = bold, label=""];
28->43 [style = bold, label=""];
3->2 [style = bold, label=""];
6->1 [style = solid, label="lateness"];
21->22 [style = bold, label=""];
44->30 [style = solid, label="sideExpected"];
0->1 [style = bold, label=""];
1->8 [style = solid, label="stateDesc"];
20->37 [style = bold, label=""];
33->38 [style = bold, label=""];
43->29 [style = bold, label=""];
37->45 [style = bold, label=""];
8->11 [style = solid, label="operator"];
6->46 [style = bold, label=""];
35->36 [style = bold, label=""];
1->19 [style = bold, label=""];
15->27 [style = bold, label=""];
8->11 [style = bold, label=""];
16->20 [style = bold, label=""];
32->24 [style = bold, label=""];
27->25 [style = bold, label=""];
11->7 [style = bold, label=""];
8->13 [style = bold, label=""];
45->18 [style = bold, label=""];
}
