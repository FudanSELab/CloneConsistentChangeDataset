digraph {
4 [style = filled, label = "Assert.assertTrue(factoryJson.exists())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "List<String> columnNames = data.getColumnNames()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "File factoryJson = new File(persisted,\"factory.json\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertNotNull(table)@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertTrue(factoryJson.exists())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertTrue(factory instanceof BroadcastJoinableMMappedQueryableSegmentizerFactory)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Interval testInterval = Intervals.of(\"2011-01-12T00:00:00.000Z/2011-05-01T00:00:00.000Z\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "mapper.registerModule(new SegmentizerModule())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "File persisted = INDEX_MERGER.persist(data,Intervals.of(\"2011-01-12T00:00:00.000Z/2011-05-01T00:00:00.000Z\"),segment,new IndexSpec(null,null,null,null,null),null)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testDefaultSegmentizerPersist['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "SegmentizerFactory factory = JSON_MAPPER.readValue(factoryJson,)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "IndexMerger indexMerger = new IndexMergerV9(mapper,indexIO,OffHeapMemorySegmentWriteOutMediumFactory.instance())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(expectedFactory,factory)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final BroadcastSegmentIndexedTable table = (BroadcastSegmentIndexedTable)loaded.as()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "File factoryJson = new File(persistedSegmentRoot,\"factory.json\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "SegmentizerFactory expectedFactory = new BroadcastJoinableMMappedQueryableSegmentizerFactory(indexIO,KEY_COLUMNS)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "File persistedSegmentRoot = indexMerger.persist(data,testInterval,segment,new IndexSpec(null,null,null,null,expectedFactory),null)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "SegmentizerFactory factory = mapper.readValue(factoryJson,)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final Segment loaded = factory.factorize(dataSegment,persistedSegmentRoot,false,SegmentLazyLoadFailCallback.NOOP)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "testSegmentizer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "Assert.assertTrue(factory instanceof MMappedQueryableSegmentizerFactory)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "mapper.setInjectableValues(new InjectableValues.Std().addValue(.getName(),TestExprMacroTable.INSTANCE).addValue(.getName(),mapper).addValue(,indexIO).addValue(,DataSegment.PruneSpecsHolder.DEFAULT))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final ObjectMapper mapper = new DefaultObjectMapper()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "File segment = new File(temporaryFolder.newFolder(),\"segment\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final Segment loaded = factory.factorize(dataSegment,persistedSegmentRoot,false)@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "testSegmentizer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "IncrementalIndex data = TestIndex.makeRealtimeIndex(\"druid.sample.numeric.tsv\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final IndexIO indexIO = new IndexIO(mapper,null)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "IncrementalIndex data = TestIndex.makeRealtimeIndex(\"druid.sample.numeric.tsv\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final DataSegment dataSegment = new DataSegment(TABLE_NAME,testInterval,DateTimes.nowUtc().toString(),ImmutableMap.of(),columnNames,ImmutableList.of(),null,null,persistedSegmentRoot.getTotalSpace())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "File segment = new File(temporaryFolder.newFolder(),\"segment\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->18 [style = bold, label=""];
16->15 [style = bold, label=""];
3->8 [style = solid, label="table"];
17->7 [style = solid, label="dataSegment"];
29->25 [style = solid, label="segment"];
7->21 [style = dashed, label="0"];
25->30 [style = solid, label="persisted"];
1->5 [style = solid, label="testInterval"];
25->30 [style = bold, label=""];
17->21 [style = solid, label="dataSegment"];
11->6 [style = bold, label=""];
5->7 [style = solid, label="persistedSegmentRoot"];
2->27 [style = dashed, label="0"];
29->25 [style = bold, label=""];
5->25 [style = dashed, label="0"];
24->29 [style = bold, label=""];
4->2 [style = bold, label=""];
9->10 [style = bold, label=""];
20->11 [style = bold, label=""];
19->2 [style = solid, label="factoryJson"];
2->16 [style = solid, label="factory"];
7->3 [style = bold, label=""];
20->10 [style = solid, label="mapper"];
12->5 [style = solid, label="data"];
17->7 [style = bold, label=""];
16->26 [style = dashed, label="0"];
5->19 [style = bold, label=""];
12->13 [style = bold, label=""];
1->17 [style = solid, label="testInterval"];
15->17 [style = bold, label=""];
23->24 [style = bold, label=""];
30->28 [style = bold, label=""];
19->30 [style = dashed, label="0"];
6->10 [style = solid, label="indexIO"];
18->1 [style = bold, label=""];
22->20 [style = bold, label=""];
20->6 [style = solid, label="mapper"];
5->21 [style = solid, label="persistedSegmentRoot"];
3->8 [style = bold, label=""];
18->5 [style = solid, label="expectedFactory"];
30->27 [style = solid, label="factoryJson"];
1->12 [style = bold, label=""];
18->15 [style = solid, label="expectedFactory"];
13->17 [style = solid, label="columnNames"];
0->20 [style = bold, label=""];
6->18 [style = solid, label="indexIO"];
24->25 [style = solid, label="data"];
27->26 [style = solid, label="factory"];
19->4 [style = bold, label=""];
28->27 [style = bold, label=""];
6->9 [style = bold, label=""];
5->19 [style = solid, label="persistedSegmentRoot"];
14->5 [style = solid, label="segment"];
13->14 [style = bold, label=""];
17->21 [style = bold, label=""];
2->15 [style = solid, label="factory"];
21->3 [style = bold, label=""];
14->5 [style = bold, label=""];
27->26 [style = bold, label=""];
2->16 [style = bold, label=""];
}
