digraph {
19 [style = filled, label = "val.setValue(new TestAnalyticsValue()).setExists(true)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "func.getObject()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(new Long(3),func.getObject())@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "val.setValue(new Long(234)).setExists(true)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "remover.setValue(new Double(23423.0)).setExists(true)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertTrue(uncasted instanceof AnalyticsValue)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TestAnalyticsValue val = new TestAnalyticsValue()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "AnalyticsValueStream uncasted = RemoveFunction.creatorFunction.apply(new AnalyticsValueStream((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@f6b50b)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertFalse(func.exists())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "filter.setValue(true).setExists(true)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "singleValueObjectTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "filter.setExists(false)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "filter.setExists(false)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "val.setValue(\"abc123\").setExists(true)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "remover.setValue(new Date(123)).setExists(true)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "func.getObject()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "TestAnalyticsValue remover = new TestAnalyticsValue()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "filter.setValue(false).setExists(true)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(\"3\",func.getObject())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "remover.setExists(false)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertFalse(func.exists())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "val.setExists(false)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "AnalyticsValue func = (AnalyticsValue)uncasted@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "func.getObject()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "remover.setValue(new Boolean(true)).setExists(true)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertFalse(func.exists())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertFalse(func.exists())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(\"abc123\",func.getObject())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertEquals(3L,func.getObject())@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "TestBooleanValue filter = new TestBooleanValue()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "val.setValue(\"3\").setExists(true)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "val.setExists(false)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "val.setValue(new Long(3)).setExists(true)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "func.getObject()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "val.setValue(\"1810-12-02T10:30:15Z\").setExists(true)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "func.getObject()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "val.setValue(new Double(23423.0)).setExists(true)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "remover.setExists(false)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "filter.setValue(true).setExists(true)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "val.setValue(new Date(2)).setExists(true)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "filter.setValue(false).setExists(true)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "singleValueObjectTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "singleValueObjectTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(func.exists())@@@29@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertEquals(new Long(234),func.getObject())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "val.setValue(3L).setExists(true)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "filter.setValue(true).setExists(true)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(func.exists())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertFalse(func.exists())@@@37@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "AnalyticsValueStream uncasted = FilterFunction.creatorFunction.apply(new AnalyticsValueStream((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@f6b42d)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33->7 [style = bold, label=""];
36->6 [style = bold, label=""];
0->25 [style = solid, label="val"];
1->4 [style = bold, label=""];
24->12 [style = bold, label=""];
37->0 [style = bold, label=""];
28->5 [style = bold, label=""];
28->40 [style = bold, label=""];
27->49 [style = dashed, label="0"];
14->49 [style = bold, label=""];
8->31 [style = bold, label=""];
29->30 [style = bold, label=""];
26->10 [style = bold, label=""];
28->34 [style = bold, label=""];
10->36 [style = dashed, label="0"];
16->44 [style = dashed, label="0"];
26->36 [style = bold, label=""];
16->29 [style = bold, label=""];
0->42 [style = bold, label=""];
42->39 [style = bold, label=""];
12->15 [style = bold, label=""];
39->8 [style = bold, label=""];
20->46 [style = bold, label=""];
25->31 [style = solid, label="uncasted"];
5->26 [style = bold, label=""];
15->44 [style = bold, label=""];
26->47 [style = dashed, label="0"];
39->31 [style = solid, label="uncasted"];
42->39 [style = solid, label="remover"];
10->38 [style = dashed, label="0"];
22->28 [style = bold, label=""];
30->9 [style = bold, label=""];
17->33 [style = bold, label=""];
19->17 [style = bold, label=""];
5->40 [style = dashed, label="0"];
20->1 [style = bold, label=""];
29->43 [style = dashed, label="0"];
11->24 [style = bold, label=""];
15->16 [style = bold, label=""];
27->22 [style = bold, label=""];
47->38 [style = bold, label=""];
10->6 [style = bold, label=""];
0->39 [style = solid, label="val"];
5->34 [style = dashed, label="0"];
43->45 [style = bold, label=""];
3->0 [style = bold, label=""];
44->43 [style = bold, label=""];
49->22 [style = bold, label=""];
38->6 [style = bold, label=""];
18->42 [style = dashed, label="0"];
23->14 [style = bold, label=""];
30->45 [style = dashed, label="0"];
48->12 [style = bold, label=""];
41->48 [style = bold, label=""];
35->0 [style = bold, label=""];
24->48 [style = dashed, label="0"];
23->21 [style = bold, label=""];
34->26 [style = bold, label=""];
46->4 [style = bold, label=""];
1->46 [style = dashed, label="0"];
6->11 [style = bold, label=""];
18->25 [style = solid, label="filter"];
2->14 [style = bold, label=""];
21->32 [style = bold, label=""];
40->47 [style = bold, label=""];
6->41 [style = bold, label=""];
18->25 [style = bold, label=""];
11->41 [style = dashed, label="0"];
9->19 [style = bold, label=""];
0->18 [style = bold, label=""];
25->8 [style = bold, label=""];
14->27 [style = bold, label=""];
31->20 [style = bold, label=""];
32->13 [style = bold, label=""];
25->8 [style = solid, label="uncasted"];
25->39 [style = dashed, label="0"];
45->9 [style = bold, label=""];
4->23 [style = bold, label=""];
13->2 [style = bold, label=""];
39->8 [style = solid, label="uncasted"];
}
