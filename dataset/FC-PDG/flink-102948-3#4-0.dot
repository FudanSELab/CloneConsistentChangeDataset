digraph {
0 [style = filled, label = "assertOutput(sequence)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ValidatingCheckpointHandler handler = new ValidatingCheckpointHandler(1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testMultiChannelTrailingInflightData['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testSingleChannelAbortCheckpoint['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "inputGate = createInputGate(1,handler)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertOutput(sequence2)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(4L,handler.getLastCanceledCheckpointId())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final BufferOrEvent(( sequence1 = addSequence(inputGate,createBuffer(0),createBarrier(1,0),createBuffer(0),createBarrier(2,0),createCancellationBarrier(4,0))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertOutput(sequence1)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "BufferOrEvent(( sequence = addSequence(inputGate,createBuffer(0),createBuffer(1),createBuffer(2),createBarrier(1,1),createBarrier(1,2),createBarrier(1,0),createBuffer(2),createBuffer(1),createBuffer(0),createBarrier(2,1),createBuffer(1),createBuffer(1),createEndOfPartition(1),createBuffer(0),createBuffer(2),createBarrier(2,2),createBuffer(2),createEndOfPartition(2),createBuffer(0),createEndOfPartition(0))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertInflightData()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final BufferOrEvent(( sequence2 = addSequence(inputGate,createBarrier(5,0),createBuffer(0),createCancellationBarrier(6,0),createBuffer(0),createEndOfPartition(0))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(2L,channelStateWriter.getLastStartedCheckpointId())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(6L,handler.getLastCanceledCheckpointId())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(5L,channelStateWriter.getLastStartedCheckpointId())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testMultiChannelTrailingInflightData['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "inputGate = createInputGate(3,handler,false)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertInflightData()@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "inputGate = createInputGate(3,handler)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0->3 [style = bold, label=""];
4->9 [style = bold, label=""];
16->15 [style = bold, label=""];
18->3 [style = bold, label=""];
1->6 [style = solid, label="inputGate"];
4->9 [style = solid, label="handler"];
1->9 [style = dashed, label="0"];
12->18 [style = solid, label="sequence1"];
4->1 [style = solid, label="handler"];
6->0 [style = bold, label=""];
4->7 [style = solid, label="handler"];
13->16 [style = bold, label=""];
4->7 [style = bold, label=""];
2->13 [style = bold, label=""];
9->13 [style = solid, label="inputGate"];
1->6 [style = bold, label=""];
15->11 [style = bold, label=""];
3->2 [style = bold, label=""];
17->2 [style = bold, label=""];
11->10 [style = bold, label=""];
6->0 [style = solid, label="sequence"];
5->4 [style = bold, label=""];
7->6 [style = bold, label=""];
12->18 [style = bold, label=""];
7->6 [style = solid, label="inputGate"];
0->18 [style = dashed, label="0"];
3->17 [style = bold, label=""];
4->1 [style = bold, label=""];
9->12 [style = bold, label=""];
8->4 [style = bold, label=""];
1->7 [style = dashed, label="0"];
9->12 [style = solid, label="inputGate"];
13->16 [style = solid, label="sequence2"];
14->4 [style = bold, label=""];
}
