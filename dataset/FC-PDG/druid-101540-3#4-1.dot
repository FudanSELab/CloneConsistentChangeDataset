digraph {
5 [style = filled, label = "final List<Map<String,Object>> rows = doPost(createSimpleQueryWithId(\"id\",\"SELECT COUNT(*) AS cnt, 'foo' AS TheFoo FROM druid.foo\")).rhs@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testCountStarExtendedCharacters['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testCountStar['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "final List<Map<String,Object>> rows = doPost(new SqlQuery(\"SELECT COUNT(*) AS cnt, 'foo' AS TheFoo FROM druid.foo\",null,false,null,null)).rhs@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "checkSqlRequestLog(true)@@@5@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertTrue(lifecycleManager.getAll(\"id\").isEmpty())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "final List<Map<String,Object>> rows = doPost(new SqlQuery(\"SELECT COUNT(*) AS cnt FROM druid.lotsocolumns WHERE dimMultivalEnumerated = '�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ �ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ �ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ �ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ �ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ �ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ �ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ �ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ �ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ'\",null,false,null,null)).rhs@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testCountStar['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(ImmutableList.of(ImmutableMap.of(\"cnt\",6,\"TheFoo\",\"foo\")),rows)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(ImmutableList.of(ImmutableMap.of(\"cnt\",1)),rows)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->0 [style = solid, label="rows"];
1->8 [style = dashed, label="0"];
1->0 [style = bold, label=""];
1->5 [style = dashed, label="0"];
1->0 [style = solid, label="rows"];
3->1 [style = bold, label=""];
5->0 [style = bold, label=""];
9->8 [style = bold, label=""];
0->7 [style = dashed, label="0"];
4->5 [style = bold, label=""];
2->6 [style = bold, label=""];
7->2 [style = bold, label=""];
8->7 [style = solid, label="rows"];
8->7 [style = bold, label=""];
0->2 [style = bold, label=""];
}
