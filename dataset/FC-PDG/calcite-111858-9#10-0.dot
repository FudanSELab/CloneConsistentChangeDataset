digraph {
4 [style = filled, label = "literal == root && config.sqlConformance().isSortByOrdinal()@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "int ordinal = intValue - 1@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "literal.getTypeName()@@@4@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "node.equals(literal)@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "isOrdinalLiteral@@@19@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "root instanceof SqlBasicCall@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10da91bliteral@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "boolean isOrdinalLiteral = literal == root@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "List<SqlNode> operandList = ((SqlBasicCall)root).getOperandList()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "intValue < 1 || intValue > select.getSelectList().size()@@@23@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10da900literal@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "throw validator.newValidationError(literal,RESOURCE.orderByOrdinalOutOfRange())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "intValue < 1 || intValue > aliasList.size()@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int ordinal = intValue - 1@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "intValue >= 0@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final int intValue = literal.intValue(false)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "visit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "operandList@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "havingExpr || !validator.config().sqlConformance().isGroupByOrdinal()@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10da996literal@@@32@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "return SqlUtil.stripAs(select.getSelectList().get(ordinal))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "visit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final int intValue = literal.intValue(false)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "SqlNode node@@@10@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "root.getKind()@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "intValue >= 0@@@22@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "isOrdinalLiteral = true@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "literal.getTypeName()@@@20@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "throw newValidationError(literal,RESOURCE.orderByOrdinalOutOfRange())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "SqlLiteral literal@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "return nthSelectItem(ordinal,literal.getParserPosition())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "visit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25->30 [style = dotted, label="true"];
0->6 [style = bold, label=""];
1->16 [style = solid, label="literal"];
12->24 [style = solid, label="isOrdinalLiteral"];
15->19 [style = dotted, label="true"];
3->10 [style = bold, label=""];
29->21 [style = bold, label=""];
28->13 [style = bold, label=""];
9->8 [style = dotted, label="true"];
27->22 [style = dotted, label="true"];
1->22 [style = solid, label="literal"];
18->15 [style = dotted, label="true"];
11->4 [style = bold, label=""];
25->29 [style = bold, label=""];
4->27 [style = dashed, label="0"];
27->12 [style = bold, label=""];
14->18 [style = bold, label=""];
19->28 [style = bold, label=""];
8->0 [style = bold, label=""];
24->26 [style = dotted, label="true"];
25->29 [style = dotted, label="true"];
25->24 [style = bold, label=""];
25->20 [style = dotted, label="true"];
2->0 [style = solid, label="intValue"];
14->18 [style = solid, label="intValue"];
8->6 [style = dotted, label="true"];
25->21 [style = dotted, label="true"];
9->2 [style = bold, label=""];
15->19 [style = bold, label=""];
1->5 [style = solid, label="literal"];
1->10 [style = solid, label="literal"];
7->1 [style = dotted, label="true"];
2->6 [style = solid, label="intValue"];
26->18 [style = dotted, label="true"];
21->24 [style = bold, label=""];
5->19 [style = dashed, label="0"];
9->2 [style = dotted, label="true"];
31->24 [style = solid, label="isOrdinalLiteral"];
26->14 [style = bold, label=""];
1->12 [style = solid, label="literal"];
27->22 [style = bold, label=""];
2->8 [style = bold, label=""];
0->5 [style = dotted, label="true"];
18->13 [style = dotted, label="true"];
15->28 [style = bold, label=""];
14->15 [style = solid, label="intValue"];
12->17 [style = bold, label=""];
26->14 [style = dotted, label="true"];
17->25 [style = dotted, label="true"];
23->1 [style = dotted, label="true"];
11->1 [style = dotted, label="true"];
2->8 [style = solid, label="intValue"];
7->4 [style = bold, label=""];
4->9 [style = bold, label=""];
24->16 [style = bold, label=""];
18->28 [style = dotted, label="true"];
6->3 [style = bold, label=""];
13->16 [style = bold, label=""];
18->16 [style = bold, label=""];
6->3 [style = solid, label="ordinal"];
1->19 [style = solid, label="literal"];
4->10 [style = bold, label=""];
4->9 [style = dotted, label="true"];
8->3 [style = dotted, label="true"];
0->15 [style = dashed, label="0"];
31->24 [style = bold, label=""];
14->28 [style = solid, label="intValue"];
1->4 [style = solid, label="literal"];
0->5 [style = bold, label=""];
21->31 [style = dotted, label="true"];
22->12 [style = bold, label=""];
5->6 [style = bold, label=""];
24->26 [style = bold, label=""];
1->21 [style = solid, label="literal"];
21->31 [style = bold, label=""];
8->10 [style = bold, label=""];
28->13 [style = solid, label="ordinal"];
17->25 [style = bold, label=""];
8->0 [style = dotted, label="true"];
9->10 [style = bold, label=""];
23->27 [style = bold, label=""];
18->15 [style = bold, label=""];
}
