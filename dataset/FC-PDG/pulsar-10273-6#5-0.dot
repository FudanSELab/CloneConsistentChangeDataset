digraph {
3 [style = filled, label = "decode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ByteBuffer encodedNio = encoded.nioBuffer(encoded.readerIndex(),encoded.readableBytes())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "decode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "encoded.hasMemoryAddress()@@@4@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "decode['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Zstd.decompress(uncompressedNio,encodedNio)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "encoded.hasMemoryAddress() && uncompressed.hasMemoryAddress()@@@4@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "ByteBuffer encodedNio = encoded.nioBuffer(encoded.readerIndex(),encoded.readableBytes())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "SNAPPY_DECOMPRESSOR.get().decompress(encodedNio,uncompressedNio)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "return uncompressed@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ByteBuffer uncompressedNio = uncompressed.nioBuffer(0,uncompressedLength)@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "SnappyRawDecompressor.decompress(null,encoded.memoryAddress() + encoded.readerIndex(),encoded.memoryAddress() + encoded.writerIndex(),null,uncompressed.memoryAddress(),uncompressed.memoryAddress() + uncompressedLength)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "ByteBuf uncompressed = PulsarByteBufAllocator.DEFAULT.buffer(uncompressedLength,uncompressedLength)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "ByteBuffer uncompressedNio = uncompressed.nioBuffer(0,uncompressedLength)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "return uncompressed@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "Zstd.decompressUnsafe(uncompressed.memoryAddress(),uncompressedLength,encoded.memoryAddress() + encoded.readerIndex(),encoded.readableBytes())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Snappy.uncompress(encodedNio,uncompressedNio)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "ByteBuffer encodedNio = encoded.nioBuffer(encoded.readerIndex(),encoded.readableBytes())@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "uncompressed.writerIndex(uncompressedLength)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "uncompressed.writerIndex(uncompressedLength)@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ByteBuf encoded@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "int uncompressedLength@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "int uncompressedLength@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "ByteBuf uncompressed = PooledByteBufAllocator.DEFAULT.buffer(uncompressedLength,uncompressedLength)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "ByteBuf encoded@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ByteBuf uncompressed = PulsarByteBufAllocator.DEFAULT.directBuffer(uncompressedLength,uncompressedLength)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "uncompressed.writerIndex(uncompressedLength)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->23 [style = dashed, label="0"];
13->6 [style = dotted, label="true"];
1->4 [style = bold, label=""];
7->21 [style = dashed, label="0"];
7->1 [style = bold, label=""];
22->19 [style = dotted, label="true"];
6->8 [style = solid, label="uncompressedLength"];
10->9 [style = solid, label="uncompressedLength"];
22->19 [style = bold, label=""];
0->17 [style = bold, label=""];
7->14 [style = dashed, label="0"];
21->24 [style = solid, label="uncompressed"];
23->26 [style = bold, label=""];
22->0 [style = dotted, label="false"];
17->12 [style = solid, label="encodedNio"];
4->2 [style = bold, label=""];
10->0 [style = solid, label="uncompressedLength"];
3->6 [style = dotted, label="true"];
11->9 [style = bold, label=""];
12->9 [style = bold, label=""];
26->24 [style = bold, label=""];
13->10 [style = dotted, label="true"];
9->16 [style = bold, label=""];
25->18 [style = dotted, label="true"];
14->16 [style = solid, label="uncompressed"];
1->2 [style = solid, label="uncompressedNio"];
8->0 [style = bold, label=""];
2->12 [style = dashed, label="0"];
17->12 [style = bold, label=""];
3->5 [style = dotted, label="true"];
18->0 [style = solid, label="uncompressedLength"];
15->0 [style = dotted, label="false"];
22->0 [style = bold, label=""];
15->11 [style = bold, label=""];
20->23 [style = bold, label=""];
15->17 [style = dotted, label="false"];
3->7 [style = bold, label=""];
21->22 [style = bold, label=""];
20->23 [style = solid, label="encodedNio"];
19->26 [style = bold, label=""];
0->23 [style = solid, label="uncompressedNio"];
15->0 [style = bold, label=""];
0->12 [style = solid, label="uncompressedNio"];
10->14 [style = solid, label="uncompressedLength"];
6->7 [style = solid, label="uncompressedLength"];
15->12 [style = dotted, label="false"];
15->11 [style = dotted, label="true"];
22->20 [style = dotted, label="false"];
22->23 [style = dotted, label="false"];
25->6 [style = dotted, label="true"];
0->20 [style = bold, label=""];
14->15 [style = bold, label=""];
6->1 [style = solid, label="uncompressedLength"];
7->0 [style = solid, label="uncompressed"];
18->26 [style = solid, label="uncompressedLength"];
18->19 [style = solid, label="uncompressedLength"];
18->21 [style = solid, label="uncompressedLength"];
13->14 [style = bold, label=""];
4->2 [style = solid, label="encodedNio"];
25->21 [style = bold, label=""];
2->8 [style = bold, label=""];
10->11 [style = solid, label="uncompressedLength"];
}
