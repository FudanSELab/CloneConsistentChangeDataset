digraph {
23 [style = filled, label = "assertEquals(expectedMax,metric.getMax())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "metric.reset()@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(expectedAvg,(double)results.get(\"avg_test\"),200)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Assert.assertEquals(expectedMin,metric.getMin())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(expectedMin,(long)results.get(\"min_test\"))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "assertEquals(expectedMax,(long)results.get(\"max_test\"))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "metric.add(value)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(expectedSum,metric.getTotal())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(expectedCount,(long)results.get(\"test\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(expectedCnt,metric.getCount())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "int size@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "final Map<String,Object> results = metric.values()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(expectedSum,metric.getTotal())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "int size@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "long expectedSum = Arrays.stream(values).sum()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "AvgMinMaxCounter metric@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "int size@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(expectedAvg,(double)results.get(\"avg_test\"),(double)200)@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "SimpleCounter metric@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testAvgMinMaxCounter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(expectedAvg,metric.getAvg(),(double)200)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "assertEquals(expectedCnt,metric.getCount())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "long expectedMin = Arrays.stream(values).min().orElse(0)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(expectedCnt,(long)results.get(\"cnt_test\"))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(expectedMax,(long)results.get(\"max_test\"))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "long expectedCnt = values.length@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testSimpleCounter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(expectedAvg,metric.getAvg(),200)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "final Map<String,Object> results = metric.values()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "long expectedMax = Arrays.stream(values).max().orElse(0)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "metric.reset()@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testAvgMinMaxCounter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "double expectedAvg = expectedSum / Math.max(1,expectedCnt)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(expectedMax,metric.getMax())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "assertEquals(expectedMin,(long)results.get(\"min_test\"))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "Assert.assertEquals(expectedCount,metric.get())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(expectedCnt,(long)results.get(\"cnt_test\"))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "final long(( values = generateRandomValues(size)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(expectedMin,metric.getMin())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "long expectedCount = Arrays.stream(values).sum()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->13 [style = bold, label=""];
24->10 [style = bold, label=""];
3->7 [style = solid, label="expectedMin"];
14->3 [style = bold, label=""];
32->35 [style = bold, label=""];
2->23 [style = dashed, label="0"];
20->13 [style = solid, label="expectedCnt"];
20->12 [style = solid, label="expectedCnt"];
20->27 [style = solid, label="expectedCnt"];
25->28 [style = bold, label=""];
8->1 [style = solid, label="values"];
20->9 [style = solid, label="expectedCnt"];
20->26 [style = solid, label="expectedCnt"];
4->0 [style = solid, label="expectedMax"];
4->15 [style = bold, label=""];
23->26 [style = bold, label=""];
4->23 [style = solid, label="expectedMax"];
22->8 [style = solid, label="size"];
8->14 [style = bold, label=""];
21->8 [style = bold, label=""];
21->22 [style = dotted, label="true"];
12->30 [style = bold, label=""];
12->16 [style = bold, label=""];
1->0 [style = bold, label=""];
16->17 [style = bold, label=""];
2->9 [style = bold, label=""];
29->23 [style = bold, label=""];
31->1 [style = bold, label=""];
12->11 [style = solid, label="expectedAvg"];
32->36 [style = solid, label="expectedCount"];
17->29 [style = dashed, label="0"];
3->4 [style = bold, label=""];
13->11 [style = bold, label=""];
30->29 [style = bold, label=""];
36->39 [style = bold, label=""];
6->19 [style = dotted, label="true"];
12->30 [style = solid, label="expectedAvg"];
0->7 [style = bold, label=""];
12->16 [style = solid, label="expectedAvg"];
3->28 [style = solid, label="expectedMin"];
4->25 [style = solid, label="expectedMax"];
8->34 [style = solid, label="values"];
15->12 [style = solid, label="expectedSum"];
5->1 [style = bold, label=""];
26->31 [style = bold, label=""];
32->35 [style = solid, label="expectedCount"];
19->38 [style = dashed, label="0"];
6->18 [style = dotted, label="true"];
13->27 [style = dashed, label="0"];
0->25 [style = dashed, label="0"];
17->2 [style = bold, label=""];
16->30 [style = dashed, label="0"];
15->5 [style = solid, label="expectedSum"];
15->31 [style = solid, label="expectedSum"];
38->8 [style = solid, label="size"];
3->29 [style = solid, label="expectedMin"];
15->20 [style = bold, label=""];
11->10 [style = bold, label=""];
7->28 [style = dashed, label="0"];
34->36 [style = bold, label=""];
21->19 [style = dotted, label="true"];
6->8 [style = bold, label=""];
20->12 [style = bold, label=""];
9->26 [style = dashed, label="0"];
11->24 [style = dashed, label="0"];
5->31 [style = dashed, label="0"];
3->17 [style = solid, label="expectedMin"];
9->5 [style = bold, label=""];
4->2 [style = solid, label="expectedMax"];
27->24 [style = bold, label=""];
33->38 [style = dotted, label="true"];
28->27 [style = bold, label=""];
3->32 [style = dashed, label="0"];
18->8 [style = solid, label="size"];
0->36 [style = dashed, label="0"];
35->34 [style = bold, label=""];
33->37 [style = dotted, label="true"];
14->32 [style = bold, label=""];
33->8 [style = bold, label=""];
12->24 [style = solid, label="expectedAvg"];
1->25 [style = bold, label=""];
}
