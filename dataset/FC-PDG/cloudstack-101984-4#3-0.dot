digraph {
19 [style = filled, label = "throw new CloudRuntimeException(\"Can not found security enabled network in SG Zone \" + dc)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "throw new CloudRuntimeException(String.format(\"%s is not basic.\",dc.toString()))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "dc.isSecurityGroupEnabled()@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "return defaultNetworks.get(0)@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "defaultNetworks.size() != 1@@@16@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "defaultNetworks.size() != 1@@@8@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "throw new CloudRuntimeException(\"Found \" + defaultNetworks.size() + \" networks of type \" + defaultTrafficType + \" when expect to find 1\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "DataCenter dc@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "getDefaultNetworkForBasicZone['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TrafficType defaultTrafficType = TrafficType.Guest@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "List<NetworkVO> networks = _networkDao.listByZoneSecurityGroup(dc.getId())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "DataCenter dc@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "List<NetworkVO> defaultNetworks = _networkDao.listByZoneAndTrafficType(dc.getId(),defaultTrafficType)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "CollectionUtils.isEmpty(networks)@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "return defaultNetworks.get(0)@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "networksSize != 1@@@9@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "throw new CloudRuntimeException(\"Found \" + defaultNetworks.size() + \" networks of type \" + defaultTrafficType + \" when expect to find 1\")@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "getDefaultNetworkForAdvancedZone['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "throw new CloudRuntimeException(\"Zone \" + dc + \" is not advanced.\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "dc.getNetworkType() != NetworkType.Basic@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "TrafficType defaultTrafficType = TrafficType.Public@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "dc.getNetworkType() != NetworkType.Advanced@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "throw new CloudRuntimeException(String.format(\"Found (%s( networks of type (%s( when expect to find 1.\",networksSize,defaultTrafficType))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "return networks.get(0)@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "int networksSize = defaultNetworks.size()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "List<NetworkVO> defaultNetworks = _networkDao.listByZoneAndTrafficType(dc.getId(),defaultTrafficType)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "return defaultNetworks.get(0)@@@11@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "throw new CloudRuntimeException(\"Zone \" + dc + \"is not basic.\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "getDefaultNetworkForBasicZone['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22->21 [style = dotted, label="true"];
5->3 [style = bold, label=""];
14->3 [style = bold, label=""];
17->26 [style = bold, label=""];
16->18 [style = bold, label=""];
18->20 [style = solid, label="networks"];
4->6 [style = bold, label=""];
22->16 [style = bold, label=""];
2->6 [style = bold, label=""];
15->24 [style = dotted, label="true"];
24->19 [style = solid, label="dc"];
28->17 [style = solid, label="defaultTrafficType"];
16->27 [style = dotted, label="false"];
16->25 [style = dotted, label="false"];
22->21 [style = bold, label=""];
16->20 [style = dotted, label="true"];
11->12 [style = bold, label=""];
3->22 [style = dashed, label="0"];
8->1 [style = solid, label="defaultTrafficType"];
12->9 [style = bold, label=""];
2->4 [style = bold, label=""];
16->23 [style = dotted, label="true"];
25->17 [style = bold, label=""];
3->0 [style = bold, label=""];
1->11 [style = bold, label=""];
15->22 [style = bold, label=""];
7->0 [style = solid, label="dc"];
8->1 [style = bold, label=""];
11->12 [style = solid, label="networksSize"];
18->20 [style = bold, label=""];
12->10 [style = bold, label=""];
16->28 [style = dotted, label="false"];
8->4 [style = solid, label="defaultTrafficType"];
12->10 [style = dotted, label="true"];
16->28 [style = bold, label=""];
20->23 [style = bold, label=""];
7->24 [style = dashed, label="0"];
25->17 [style = dotted, label="true"];
5->7 [style = dotted, label="true"];
0->21 [style = dashed, label="0"];
11->10 [style = solid, label="networksSize"];
3->8 [style = bold, label=""];
19->23 [style = bold, label=""];
0->13 [style = dashed, label="0"];
14->7 [style = dotted, label="true"];
2->4 [style = dotted, label="true"];
0->8 [style = bold, label=""];
3->0 [style = dotted, label="true"];
8->10 [style = solid, label="defaultTrafficType"];
25->26 [style = bold, label=""];
3->13 [style = bold, label=""];
21->16 [style = bold, label=""];
2->11 [style = dashed, label="0"];
16->26 [style = dotted, label="false"];
20->19 [style = dotted, label="true"];
28->27 [style = solid, label="defaultTrafficType"];
1->2 [style = bold, label=""];
10->9 [style = bold, label=""];
28->27 [style = bold, label=""];
13->8 [style = bold, label=""];
20->19 [style = bold, label=""];
27->25 [style = bold, label=""];
3->13 [style = dotted, label="true"];
24->21 [style = solid, label="dc"];
16->18 [style = dotted, label="true"];
}
