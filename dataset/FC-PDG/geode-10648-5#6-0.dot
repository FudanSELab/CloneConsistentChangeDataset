digraph {
3 [style = filled, label = "cqDUnitTest.createClient(client,port,host0)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "cqDUnitTest.createServer(server)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testEventsDuringQueryExecution['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final Host host = Host.getHost(0)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final int port = server.invoke(null)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "VM client = host.getVM(1)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "cqDUnitTest.createPool(client,poolName,host0,port)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "VM server = host.getVM(0)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "String poolName = \"testEventsDuringQueryExecution\"@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "AsyncInvocation processCqs = client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ\"){@Override public void run2(){QueryService cqService = getCache().getQueryService()CqQuery cq1 = cqService.getCq(cqName)if (cq1 == null) {fail(\"Failed to get CQ \" + cqName)}SelectResults cqResults = nulltry {cqResults = cq1.executeWithInitialResults()}catch (Exception ex) CqQueryTestListener cqListener = (CqQueryTestListener)cq1.getCqAttributes().getCqListener()cqListener.waitForCreated(\"\" + totalObjects)int oldId = 0for (Object cqEvent : cqListener.events.toArray()){int newId = new Integer(cqEvent.toString()).intValue()if (oldId > newId) {fail(\"Queued events for CQ Listener during execution with \" + \"Initial results is not in the order in which they are created.\")}oldId = newId}HashSet ids = new HashSet(cqListener.events)for (Object o : cqResults.asList()){Struct s = (Struct)oids.add(s.get(\"key\"))}HashSet missingIds = new HashSet()String key = \"\"for (int i = 1 i <= totalObjects i++){key = \"\" + iif (!(ids.contains(key))) {missingIds.add(key)}}if (!missingIds.isEmpty()) {fail(\"Missing Keys in either ResultSet or the Cq Event list. \" + \" Missing keys : (size : \" + missingIds.size() + \"(\" + missingIds + \" Ids in ResultSet and CQ Events :\" + ids)}}})@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final int numObjects = 200@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testEventsDuringQueryExecution['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "final int totalObjects = 500@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final String cqName = \"testEventsDuringQueryExecution_0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "cqDUnitTest.createCQ(client,poolName,cqName,cqDUnitTest.cqs(0()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "cqDUnitTest.closeClient(client)@@@92@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "cqDUnitTest.closeClient(client)@@@104@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "cqDUnitTest.closeServer(server)@@@105@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final int numObjects = 200@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final VM client = host.getVM(1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "AsyncInvocation executeCq = client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ AsyncInvoke\"){@Override public void run2(){QueryService cqService = getCache().getQueryService()CqQuery cq1 = cqService.getCq(cqName)if (cq1 == null) {fail(\"Failed to get CQ \" + cqName)}SelectResults cqResults = nulltry {cqResults = cq1.executeWithInitialResults()}catch (Exception ex) final TestHook testHook = CqQueryImpl.testHookGeodeAwaitility.await().untilAsserted(new WaitCriterion(){@Override public boolean done(){return testHook.numQueuedEvents() > 0}@Override public String description(){return \"No queued events found.\"}})getCache().getLogger().fine(\"Queued Events Size\" + testHook.numQueuedEvents())CqQueryTestListener cqListener = (CqQueryTestListener)cq1.getCqAttributes().getCqListener()cqListener.waitForCreated(\"\" + totalObjects)int oldId = 0for (Object cqEvent : cqListener.events.toArray()){int newId = new Integer(cqEvent.toString()).intValue()if (oldId > newId) {fail(\"Queued events for CQ Listener during execution with \" + \"Initial results is not in the order in which they are created.\")}oldId = newId}HashSet ids = new HashSet(cqListener.events)for (Object o : cqResults.asList()){Struct s = (Struct)oids.add(s.get(\"key\"))}HashSet missingIds = new HashSet()String key = \"\"for (int i = 1 i <= totalObjects i++){key = \"\" + iif (!(ids.contains(key))) {missingIds.add(key)}}if (!missingIds.isEmpty()) {fail(\"Missing Keys in either ResultSet or the Cq Event list. \" + \" Missing keys : (size : \" + missingIds.size() + \"(\" + missingIds + \" Ids in ResultSet and CQ Events :\" + ids)}}})@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final int port = server.invoke(null)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "cqDUnitTest.createCQ(client,cqName,cqDUnitTest.cqs(0()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testEventsDuringQueryExecution['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "server.invoke(new CacheSerializableRunnable(\"Update Region\"){@Override public void run2(){Wait.pause(200)client.invoke(new CacheSerializableRunnable(\"Releasing the latch\"){@Override public void run2(){final TestHook testHook = CqQueryImpl.testHooktestHook.ready()}})Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions(0()for (int i = numObjects + 1 i <= totalObjects i++){Portfolio p = new Portfolio(i)region.put(\"\" + i,p)}}})@@@84@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "client.invoke(setTestHook())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "cqDUnitTest.closeServer(server)@@@93@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final String host0 = NetworkUtils.getServerHostName(server.getHost())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "server.invoke(new CacheSerializableRunnable(\"Update Region\"){@Override public void run2(){Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions(0()for (int i = 1 i <= numObjects i++){Portfolio p = new Portfolio(i)region.put(\"\" + i,p)}}})@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "ThreadUtils.join(processCqs,60 * 1000)@@@91@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->23 [style = dashed, label="0"];
19->25 [style = solid, label="client"];
12->28 [style = solid, label="host0"];
10->22 [style = solid, label="cqName"];
25->29 [style = bold, label=""];
26->21 [style = bold, label=""];
5->7 [style = bold, label=""];
19->10 [style = bold, label=""];
0->4 [style = bold, label=""];
7->2 [style = solid, label="totalObjects"];
1->3 [style = solid, label="port"];
10->6 [style = bold, label=""];
8->9 [style = solid, label="client"];
15->4 [style = solid, label="server"];
13->17 [style = bold, label=""];
2->13 [style = bold, label=""];
1->12 [style = bold, label=""];
13->25 [style = bold, label=""];
7->13 [style = solid, label="totalObjects"];
14->20 [style = solid, label="totalObjects"];
10->9 [style = solid, label="cqName"];
16->15 [style = bold, label=""];
5->13 [style = solid, label="numObjects"];
15->19 [style = bold, label=""];
7->13 [style = solid, label="numObjects"];
11->16 [style = bold, label=""];
14->13 [style = solid, label="totalObjects"];
7->26 [style = solid, label="numObjects"];
15->6 [style = solid, label="server"];
14->26 [style = bold, label=""];
12->24 [style = bold, label=""];
5->14 [style = solid, label="numObjects"];
27->16 [style = bold, label=""];
7->14 [style = bold, label=""];
19->28 [style = solid, label="client"];
24->22 [style = solid, label="poolName"];
9->28 [style = dashed, label="0"];
28->22 [style = bold, label=""];
10->2 [style = solid, label="cqName"];
8->19 [style = dashed, label="0"];
20->13 [style = bold, label=""];
8->0 [style = solid, label="client"];
21->20 [style = bold, label=""];
23->12 [style = bold, label=""];
12->3 [style = bold, label=""];
22->7 [style = bold, label=""];
3->9 [style = bold, label=""];
18->16 [style = bold, label=""];
8->3 [style = solid, label="client"];
12->3 [style = solid, label="host0"];
26->20 [style = solid, label="i"];
24->28 [style = solid, label="poolName"];
14->2 [style = bold, label=""];
15->29 [style = solid, label="server"];
23->28 [style = solid, label="port"];
14->13 [style = solid, label="i"];
14->2 [style = solid, label="i"];
24->28 [style = bold, label=""];
6->23 [style = bold, label=""];
15->8 [style = bold, label=""];
9->5 [style = bold, label=""];
6->1 [style = bold, label=""];
26->13 [style = solid, label="i"];
8->10 [style = bold, label=""];
17->0 [style = bold, label=""];
10->20 [style = solid, label="cqName"];
2->17 [style = solid, label="processCqs"];
19->22 [style = solid, label="client"];
}
