digraph {
7 [style = filled, label = "i < expectedResults.size()@@@19@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testQuantileOnInnerQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "testQuantileOnInnerQuery['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "i++@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "expectedResults = ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8c4bdc)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final List<Object((> results = sqlLifecycle.runSimple(sql,QUERY_CONTEXT_DEFAULT,DEFAULT_PARAMETERS,AUTH_RESULT).toList()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Assert.assertEquals(GroupByQuery.builder().setDataSource(new QueryDataSource(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).setGranularity(Granularities.ALL).setDimensions(new DefaultDimensionSpec(\"dim2\",\"d0\")).setAggregatorSpecs(ImmutableList.of(new DoubleSumAggregatorFactory(\"a0\",\"m1\"))).setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID,\"dummy\")).build())).setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).setGranularity(Granularities.ALL).setAggregatorSpecs(new DoubleSumAggregatorFactory(\"_a0:sum\",\"a0\"),new CountAggregatorFactory(\"_a0:count\"),new ApproximateHistogramAggregatorFactory(\"_a1:agg\",\"a0\",null,null,null,null,false)).setPostAggregatorSpecs(ImmutableList.of(new ArithmeticPostAggregator(\"_a0\",\"quotient\",ImmutableList.of(new FieldAccessPostAggregator(null,\"_a0:sum\"),new FieldAccessPostAggregator(null,\"_a0:count\"))),new QuantilePostAggregator(\"_a1\",\"_a1:agg\",0.98f))).setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID,\"dummy\")).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(expectedResults.size(),results.size())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final String sql = \"SELECT AVG(x), APPROX_QUANTILE(x, 0.98)\" + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\"@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final List<Object((> expectedResults@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(GroupByQuery.builder().setDataSource(new QueryDataSource(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).setGranularity(Granularities.ALL).setDimensions(new DefaultDimensionSpec(\"dim2\",\"d0\")).setAggregatorSpecs(ImmutableList.of(new DoubleSumAggregatorFactory(\"a0\",\"m1\"))).setContext(QUERY_CONTEXT_DEFAULT).build())).setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).setGranularity(Granularities.ALL).setAggregatorSpecs(new DoubleSumAggregatorFactory(\"_a0:sum\",\"a0\"),new CountAggregatorFactory(\"_a0:count\"),new ApproximateHistogramAggregatorFactory(\"_a1:agg\",\"a0\",null,null,null,null,false)).setPostAggregatorSpecs(ImmutableList.of(new ArithmeticPostAggregator(\"_a0\",\"quotient\",ImmutableList.of(new FieldAccessPostAggregator(null,\"_a0:sum\"),new FieldAccessPostAggregator(null,\"_a0:count\"))),new QuantilePostAggregator(\"_a1\",\"_a1:agg\",0.98f))).setContext(QUERY_CONTEXT_DEFAULT).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "final String sql = \"SELECT AVG(x), APPROX_QUANTILE_DS(x, 0.98)\" + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "SqlLifecycle sqlLifecycle = getSqlLifecycle()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Assert.assertEquals(GroupByQuery.builder().setDataSource(new QueryDataSource(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).setGranularity(Granularities.ALL).setDimensions(new DefaultDimensionSpec(\"dim2\",\"d0\")).setAggregatorSpecs(ImmutableList.of(new DoubleSumAggregatorFactory(\"a0\",\"m1\"))).setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID,\"dummy\")).build())).setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).setGranularity(Granularities.ALL).setAggregatorSpecs(new DoubleSumAggregatorFactory(\"_a0:sum\",\"a0\"),new CountAggregatorFactory(\"_a0:count\"),new DoublesSketchAggregatorFactory(\"_a1:agg\",\"a0\",null)).setPostAggregatorSpecs(ImmutableList.of(new ArithmeticPostAggregator(\"_a0\",\"quotient\",ImmutableList.of(new FieldAccessPostAggregator(null,\"_a0:sum\"),new FieldAccessPostAggregator(null,\"_a0:count\"))),new DoublesSketchToQuantilePostAggregator(\"_a1\",makeFieldAccessPostAgg(\"_a1:agg\"),0.98f))).setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID,\"dummy\")).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertArrayEquals(expectedResults.get(i),results.get(i))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int i = 0@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "NullHandling.replaceWithDefault()@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expectedResults = ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8c4bcf)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testQuantileOnInnerQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final List<Object((> results = sqlLifecycle.runSimple(sql,QUERY_CONTEXT_DEFAULT,DEFAULT_PARAMETERS,authenticationResult).toList()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->15 [style = bold, label=""];
15->10 [style = bold, label=""];
20->13 [style = bold, label=""];
7->12 [style = bold, label=""];
1->15 [style = dashed, label="0"];
2->3 [style = bold, label=""];
1->20 [style = bold, label=""];
13->17 [style = dashed, label="0"];
3->6 [style = bold, label=""];
10->17 [style = bold, label=""];
7->4 [style = bold, label=""];
0->4 [style = solid, label="i"];
8->7 [style = bold, label=""];
0->7 [style = bold, label=""];
7->14 [style = bold, label=""];
3->6 [style = dotted, label="false"];
3->5 [style = bold, label=""];
11->0 [style = bold, label=""];
3->5 [style = dotted, label="true"];
12->14 [style = dashed, label="0"];
12->19 [style = dashed, label="0"];
17->2 [style = bold, label=""];
10->13 [style = bold, label=""];
18->1 [style = bold, label=""];
6->11 [style = bold, label=""];
7->4 [style = dotted, label="true"];
0->8 [style = solid, label="i"];
4->8 [style = bold, label=""];
10->20 [style = dashed, label="0"];
5->11 [style = bold, label=""];
9->1 [style = bold, label=""];
7->8 [style = dotted, label="true"];
1->10 [style = bold, label=""];
8->7 [style = solid, label="i"];
7->19 [style = bold, label=""];
8->4 [style = solid, label="i"];
0->7 [style = solid, label="i"];
13->2 [style = bold, label=""];
}
