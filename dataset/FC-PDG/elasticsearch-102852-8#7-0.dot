digraph {
1 [style = filled, label = "assertThat(aMapper,instanceOf())@@@20@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "BytesReference bytes = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startObject(\"foo.bar.baz\").field(\"a\",0).endObject().endObject())@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertNotNull(fooMapper)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "DocumentMapper mapper = mapperParser.parse(\"type\",new CompressedXContent(mapping))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(fooMapper,instanceOf())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(2,doc.rootDoc().getFields(\"field.bar.baz.a\").length)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertThat(bazMapper,instanceOf())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "BytesReference bytes = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startObject(\"foo.bar.baz\").field(\"a\",0).endObject().endObject())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertNotNull(bazMapper)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "DocumentMapper mapper = createDocumentMapper(fieldMapping(null))@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Mapper bazMapper = ((ObjectMapper)barMapper).getMapper(\"baz\")@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Mapper barMapper = ((ObjectMapper)fooMapper).getMapper(\"bar\")@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "ParsedDocument doc = mapper.parse(new SourceToParse(\"test\",\"1\",bytes,XContentType.JSON))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testDynamicDottedFieldNameObjectWithExistingParent['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertNotNull(aMapper)@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Mapper barMapper = ((ObjectMapper)fooMapper).getMapper(\"bar\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"foo\").field(\"type\",\"object\").endObject().endObject().endObject().endObject())@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertNotNull(barMapper)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Mapper fooMapper = doc.dynamicMappingsUpdate().root().getMapper(\"foo\")@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Mapper aMapper = ((ObjectMapper)bazMapper).getMapper(\"a\")@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Mapper fooMapper = doc.dynamicMappingsUpdate().root().getMapper(\"field\")@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertEquals(2,doc.rootDoc().getFields(\"foo.bar.baz.a\").length)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testDynamicDottedFieldNameObjectWithExistingParent['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "DocumentMapperParser mapperParser = createIndex(\"test\").mapperService().documentMapperParser()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "ParsedDocument doc = mapper.parse(source(null))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "assertThat(fooMapper,instanceOf())@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertThat(barMapper,instanceOf())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertNotNull(fooMapper)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startArray(\"dynamic_templates\").startObject().startObject(\"georule\").field(\"match\",\"foo*\").startObject(\"mapping\").field(\"type\",\"object\").endObject().endObject().endObject().endArray().endObject().endObject())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "testDynamicDottedFieldNameObjectWithParentTemplate['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28->7 [style = bold, label=""];
26->22 [style = bold, label=""];
16->14 [style = solid, label="bazMapper"];
10->2 [style = bold, label=""];
25->9 [style = solid, label="barMapper"];
6->28 [style = bold, label=""];
19->21 [style = solid, label="fooMapper"];
7->27 [style = bold, label=""];
16->18 [style = solid, label="bazMapper"];
6->15 [style = bold, label=""];
15->28 [style = dashed, label="0"];
2->11 [style = bold, label=""];
16->18 [style = bold, label=""];
16->18 [style = solid, label="barMapper"];
9->16 [style = bold, label=""];
12->2 [style = solid, label="bazMapper"];
15->7 [style = solid, label="mapping"];
0->9 [style = bold, label=""];
3->27 [style = dashed, label="0"];
14->12 [style = bold, label=""];
11->13 [style = solid, label="aMapper"];
22->20 [style = bold, label=""];
21->24 [style = bold, label=""];
8->17 [style = bold, label=""];
15->7 [style = bold, label=""];
12->2 [style = solid, label="aMapper"];
4->0 [style = solid, label="fooMapper"];
23->26 [style = bold, label=""];
20->19 [style = bold, label=""];
7->3 [style = bold, label=""];
17->4 [style = bold, label=""];
19->21 [style = bold, label=""];
12->10 [style = bold, label=""];
27->8 [style = bold, label=""];
27->8 [style = solid, label="bytes"];
29->6 [style = bold, label=""];
25->0 [style = solid, label="barMapper"];
16->14 [style = solid, label="barMapper"];
3->8 [style = bold, label=""];
11->13 [style = bold, label=""];
13->1 [style = bold, label=""];
11->1 [style = solid, label="aMapper"];
25->0 [style = bold, label=""];
19->24 [style = solid, label="fooMapper"];
12->10 [style = solid, label="aMapper"];
24->25 [style = bold, label=""];
28->7 [style = solid, label="mapping"];
18->14 [style = bold, label=""];
4->0 [style = bold, label=""];
3->8 [style = solid, label="bytes"];
4->9 [style = solid, label="fooMapper"];
5->6 [style = bold, label=""];
12->10 [style = solid, label="bazMapper"];
}
