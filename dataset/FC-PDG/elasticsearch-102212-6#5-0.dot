digraph {
22 [style = filled, label = "final float indexBalance = 1.0f@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertReplicaBalance(clusterState.getRoutingNodes(),numberOfNodes + 1 - (numberOfNodes + 1) / 2,numberOfIndices,numberOfReplicas,numberOfShards,balanceThreshold)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "settings.put(BalancedShardsAllocator.INDEX_BALANCE_FACTOR_SETTING.getKey(),indexBalance)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testIndexBalance['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final float balanceThreshold = 1.0f@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertReplicaBalance(logger,clusterState.getRoutingNodes(),numberOfNodes + 1,numberOfIndices,numberOfReplicas,numberOfShards,balanceTreshold)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "settings.put(BalancedShardsAllocator.THRESHOLD_SETTING.getKey(),balanceThreshold)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "settings.put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),ClusterRebalanceAllocationDecider.ClusterRebalanceType.ALWAYS.toString())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "clusterState = addNode(clusterState,strategy)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "settings.put(BalancedShardsAllocator.SHARD_BALANCE_FACTOR_SETTING.getKey(),replicaBalance)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "settings.put(BalancedShardsAllocator.THRESHOLD_SETTING.getKey(),balanceTreshold)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Settings.Builder settings = Settings.builder()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testReplicaBalance['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertReplicaBalance(logger,clusterState.getRoutingNodes(),numberOfNodes,numberOfIndices,numberOfReplicas,numberOfShards,balanceTreshold)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "clusterState = removeNodes(clusterState,strategy)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertIndexBalance(clusterState.getRoutingTable(),clusterState.getRoutingNodes(),numberOfNodes + 1,numberOfIndices,numberOfReplicas,numberOfShards,balanceTreshold)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final float replicaBalance = 0.0f@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ClusterState clusterState = initCluster(strategy)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertIndexBalance(clusterState.getRoutingTable(),clusterState.getRoutingNodes(),numberOfNodes,numberOfIndices,numberOfReplicas,numberOfShards,balanceTreshold)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final float replicaBalance = 1.0f@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final float balanceTreshold = 1.0f@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertReplicaBalance(logger,clusterState.getRoutingNodes(),(numberOfNodes + 1) - (numberOfNodes + 1) / 2,numberOfIndices,numberOfReplicas,numberOfShards,balanceTreshold)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "testReplicaBalance['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertReplicaBalance(clusterState.getRoutingNodes(),numberOfNodes + 1,numberOfIndices,numberOfReplicas,numberOfShards,balanceThreshold)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertIndexBalance(clusterState.getRoutingTable(),clusterState.getRoutingNodes(),(numberOfNodes + 1) - (numberOfNodes + 1) / 2,numberOfIndices,numberOfReplicas,numberOfShards,balanceTreshold)@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertReplicaBalance(clusterState.getRoutingNodes(),numberOfNodes,numberOfIndices,numberOfReplicas,numberOfShards,balanceThreshold)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "final float indexBalance = 0.0f@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "AllocationService strategy = createAllocationService(settings.build(),new TestGatewayAllocator())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->17 [style = bold, label=""];
24->12 [style = bold, label=""];
15->2 [style = bold, label=""];
16->0 [style = bold, label=""];
20->13 [style = bold, label=""];
19->12 [style = bold, label=""];
3->24 [style = bold, label=""];
9->18 [style = dashed, label="0"];
1->15 [style = bold, label=""];
5->9 [style = solid, label="balanceTreshold"];
3->11 [style = bold, label=""];
7->3 [style = solid, label="strategy"];
16->18 [style = solid, label="balanceThreshold"];
5->25 [style = solid, label="balanceTreshold"];
11->12 [style = bold, label=""];
10->26 [style = bold, label=""];
7->10 [style = solid, label="strategy"];
10->21 [style = bold, label=""];
4->26 [style = dashed, label="0"];
9->10 [style = bold, label=""];
12->9 [style = bold, label=""];
3->12 [style = solid, label="clusterState"];
4->21 [style = dashed, label="0"];
7->3 [style = bold, label=""];
5->26 [style = solid, label="balanceTreshold"];
8->7 [style = bold, label=""];
27->2 [style = solid, label="replicaBalance"];
17->7 [style = bold, label=""];
5->16 [style = dashed, label="0"];
6->5 [style = bold, label=""];
23->22 [style = bold, label=""];
7->12 [style = solid, label="strategy"];
16->17 [style = solid, label="balanceThreshold"];
5->11 [style = solid, label="balanceTreshold"];
18->10 [style = bold, label=""];
5->0 [style = bold, label=""];
3->19 [style = bold, label=""];
22->27 [style = bold, label=""];
5->8 [style = solid, label="balanceTreshold"];
6->16 [style = bold, label=""];
5->4 [style = solid, label="balanceTreshold"];
0->1 [style = bold, label=""];
12->25 [style = bold, label=""];
12->10 [style = solid, label="clusterState"];
11->19 [style = dashed, label="0"];
6->27 [style = dashed, label="0"];
11->24 [style = dashed, label="0"];
9->25 [style = dashed, label="0"];
12->18 [style = bold, label=""];
10->4 [style = bold, label=""];
8->17 [style = dashed, label="0"];
25->10 [style = bold, label=""];
22->15 [style = solid, label="indexBalance"];
5->24 [style = solid, label="balanceTreshold"];
14->13 [style = bold, label=""];
13->6 [style = bold, label=""];
27->5 [style = bold, label=""];
13->15 [style = solid, label="indexBalance"];
16->19 [style = solid, label="balanceThreshold"];
13->22 [style = dashed, label="0"];
16->21 [style = solid, label="balanceThreshold"];
2->8 [style = bold, label=""];
6->2 [style = solid, label="replicaBalance"];
}
