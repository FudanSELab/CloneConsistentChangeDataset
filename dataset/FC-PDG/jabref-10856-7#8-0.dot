digraph {
10 [style = filled, label = "ParserResult actualParserResult = new ParserResult(Collections.singletonList(entry))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "BibEntry expectedEntry = createMinimalBibEntry()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "commentField['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(entry,actualParserResult.getDatabase().getEntryByCitationKey(\"Entry1\").get())@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "ParserResult actualParserResult = new ParserResult(Collections.singletonList(actualEntry))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "BibEntry entry = createMinimalBibEntry()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "entry.setField(StandardField.REVIEW,\"My Review\")@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "actualEntry.setField(StandardField.REVIEW,\"My Review\")@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "action.performMigration(actualParserResult)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "reviewField['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "reviewField['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "action.performMigration(actualParserResult)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertEquals(expectedEntry,actualParserResult.getDatabase().getEntryByCitationKey(\"Entry1\").get())@@@9@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "BibEntry actualEntry = createMinimalBibEntry()@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "expectedEntry.setField(StandardField.COMMENT,\"My Review\")@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "action.performMigration(actualParserResult)@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(expectedEntry,actualParserResult.getDatabase().getEntryByCitationKey(\"Entry1\").get())@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "entry.setField(StandardField.COMMENT,\"My Comment\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "ParserResult actualParserResult = new ParserResult(Collections.singletonList(entry))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->18 [style = bold, label=""];
2->5 [style = solid, label="actualParserResult"];
9->4 [style = bold, label=""];
2->3 [style = bold, label=""];
18->15 [style = bold, label=""];
14->17 [style = bold, label=""];
1->0 [style = bold, label=""];
12->9 [style = bold, label=""];
0->17 [style = dashed, label="0"];
3->4 [style = bold, label=""];
13->16 [style = bold, label=""];
0->7 [style = bold, label=""];
17->16 [style = solid, label="entry"];
5->6 [style = bold, label=""];
6->15 [style = dashed, label="0"];
11->10 [style = bold, label=""];
7->2 [style = bold, label=""];
10->12 [style = bold, label=""];
2->16 [style = dashed, label="0"];
7->13 [style = dashed, label="0"];
17->13 [style = bold, label=""];
16->18 [style = solid, label="actualParserResult"];
3->6 [style = solid, label="expectedEntry"];
8->11 [style = bold, label=""];
10->9 [style = solid, label="actualParserResult"];
4->5 [style = bold, label=""];
17->15 [style = solid, label="entry"];
0->2 [style = solid, label="actualEntry"];
}
