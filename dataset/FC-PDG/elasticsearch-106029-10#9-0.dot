digraph {
17 [style = filled, label = "clusterService = mock()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "beforeClass['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "when(operationRouting.getShards(eq(clusterState),eq(index2.getName()),anyString(),anyString(),anyString())).thenReturn(index2ShardIterator)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "when(operationRouting.shardId(eq(clusterState),eq(index2.getName()),anyString(),anyString())).thenReturn(new ShardId(index2,randomInt()))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "shardAction = new TransportShardMultiGetAction(clusterService,transportService,mock(),threadPool,new ActionFilters(emptySet()),new Resolver(),EmptySystemIndices.INSTANCE.getExecutorSelector()){@Override protected void doExecute(Task task,MultiGetShardRequest request,ActionListener<MultiGetShardResponse> listener){}}@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "final Index index1 = new Index(\"index1\",randomBase64UUID())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final OperationRouting operationRouting = mock()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "transportService = new TransportService(Settings.EMPTY,mock(),threadPool,TransportService.NOOP_TRANSPORT_INTERCEPTOR,null,null,emptySet()){@Override public TaskManager getTaskManager(){return taskManager}}@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final ShardIterator index1ShardIterator = mock()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "shardAction = new TransportShardMultiGetAction(clusterService,transportService,mock(),threadPool,new ActionFilters(emptySet()),new Resolver()){@Override protected void doExecute(Task task,MultiGetShardRequest request,ActionListener<MultiGetShardResponse> listener){}}@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "when(operationRouting.getShards(eq(clusterState),eq(index1.getName()),anyString(),anyString(),anyString())).thenReturn(index1ShardIterator)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "when(operationRouting.shardId(eq(clusterState),eq(index1.getName()),anyString(),anyString())).thenReturn(new ShardId(index1,randomInt()))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "when(clusterService.localNode()).thenReturn(transportService.getLocalNode())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final ShardIterator index2ShardIterator = mock()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "threadPool = new TestThreadPool(.getSimpleName())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "when(index2ShardIterator.shardId()).thenReturn(new ShardId(index2,randomInt()))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "when(index1ShardIterator.shardId()).thenReturn(new ShardId(index1,randomInt()))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "beforeClass['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "shardAction = new TransportShardMultiTermsVectorAction(clusterService,transportService,mock(),threadPool,new ActionFilters(emptySet()),new Resolver()){@Override protected void doExecute(Task task,MultiTermVectorsShardRequest request,ActionListener<MultiTermVectorsShardResponse> listener){}}@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "when(clusterService.operationRouting()).thenReturn(operationRouting)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final ClusterState clusterState = ClusterState.builder(new ClusterName(.getSimpleName())).metadata(new Metadata.Builder().put(new IndexMetadata.Builder(index1.getName()).settings(Settings.builder().put(\"index.version.created\",Version.CURRENT).put(\"index.number_of_shards\",1).put(\"index.number_of_replicas\",1).put(IndexMetadata.SETTING_INDEX_UUID,index1.getUUID())).putMapping(XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\").startObject(\"_routing\").field(\"required\",false).endObject().endObject().endObject()),true,XContentType.JSON))).put(new IndexMetadata.Builder(index2.getName()).settings(Settings.builder().put(\"index.version.created\",Version.CURRENT).put(\"index.number_of_shards\",1).put(\"index.number_of_replicas\",1).put(IndexMetadata.SETTING_INDEX_UUID,index1.getUUID())).putMapping(XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\").startObject(\"_routing\").field(\"required\",true).endObject().endObject().endObject()),true,XContentType.JSON)))).build()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final Index index2 = new Index(\"index2\",randomBase64UUID())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "beforeClass['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "when(clusterService.state()).thenReturn(clusterState)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
10->16 [style = solid, label="index2"];
3->22 [style = solid, label="threadPool"];
10->15 [style = bold, label=""];
17->6 [style = bold, label=""];
14->22 [style = solid, label="transportService"];
1->13 [style = solid, label="index1"];
3->14 [style = bold, label=""];
0->2 [style = bold, label=""];
3->14 [style = solid, label="threadPool"];
4->12 [style = solid, label="index2ShardIterator"];
9->22 [style = dashed, label="0"];
4->18 [style = bold, label=""];
6->0 [style = bold, label=""];
12->16 [style = bold, label=""];
20->3 [style = bold, label=""];
16->17 [style = bold, label=""];
2->9 [style = bold, label=""];
23->3 [style = bold, label=""];
1->8 [style = solid, label="index1"];
19->8 [style = bold, label=""];
14->1 [style = bold, label=""];
3->9 [style = solid, label="threadPool"];
17->22 [style = solid, label="clusterService"];
7->2 [style = solid, label="operationRouting"];
15->11 [style = bold, label=""];
17->21 [style = solid, label="clusterService"];
9->21 [style = dashed, label="0"];
2->21 [style = bold, label=""];
15->0 [style = solid, label="clusterState"];
17->9 [style = solid, label="clusterService"];
11->13 [style = bold, label=""];
14->21 [style = solid, label="transportService"];
3->21 [style = solid, label="threadPool"];
10->18 [style = solid, label="index2"];
18->7 [style = bold, label=""];
2->22 [style = bold, label=""];
1->10 [style = bold, label=""];
7->19 [style = bold, label=""];
8->12 [style = bold, label=""];
11->19 [style = solid, label="index1ShardIterator"];
14->9 [style = solid, label="transportService"];
13->4 [style = bold, label=""];
}
