digraph {
23 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\"1,+2,4\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertThat(result.stdout(),containsString(\"Builds: 1,1\" + System.lineSeparator()))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,2\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "assertThat(result.stdout(),containsString(\"Builds: \" + System.lineSeparator()))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\"1,1\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertThat(result.stdout(),containsString(\"Builds: 1,2\" + System.lineSeparator()))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(result,succeeded())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "dummyRangeNumberMultiShouldSuccess['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "dummyRangeNumberSingleShouldSuccessIfBuildNumberIsZero['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(result,succeeded())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(result,succeeded())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"0\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertThat(result.stdout(),containsString(\"Builds: \" + System.lineSeparator()))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\"1,2\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,2,0\")@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\"0,1,2\")@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "dummyRangeNumberMultiShouldSuccess['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,+2,4\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,0,2\")@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"+0\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\"1,2,0\")@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertThat(result.stdout(),containsString(\"Builds: 1,2,4\" + System.lineSeparator()))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(result,succeeded())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(result.stdout(),containsString(\"Builds: 1,2\" + System.lineSeparator()))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(result.stdout(),containsString(\"Builds: 1,2\" + System.lineSeparator()))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"0,1,2\")@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,1\")@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertThat(result,succeeded())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\"1,0,2\")@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertThat(result.stdout(),containsString(\"Builds: 1,2\" + System.lineSeparator()))@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(result,succeeded())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27->13 [style = bold, label=""];
0->30 [style = bold, label=""];
0->16 [style = bold, label=""];
18->3 [style = bold, label=""];
15->2 [style = bold, label=""];
7->11 [style = bold, label=""];
10->21 [style = dashed, label="0"];
2->0 [style = solid, label="result"];
3->1 [style = bold, label=""];
5->20 [style = bold, label=""];
11->14 [style = bold, label=""];
19->12 [style = bold, label=""];
19->12 [style = solid, label="result"];
20->18 [style = solid, label="result"];
30->27 [style = bold, label=""];
1->19 [style = dashed, label="0"];
21->8 [style = bold, label=""];
28->26 [style = bold, label=""];
4->18 [style = bold, label=""];
25->14 [style = bold, label=""];
16->17 [style = bold, label=""];
9->10 [style = bold, label=""];
16->23 [style = bold, label=""];
5->29 [style = dashed, label="0"];
27->13 [style = solid, label="result"];
11->14 [style = solid, label="result"];
17->13 [style = solid, label="result"];
12->9 [style = bold, label=""];
25->14 [style = solid, label="result"];
24->22 [style = bold, label=""];
8->7 [style = bold, label=""];
20->18 [style = bold, label=""];
26->0 [style = solid, label="result"];
4->18 [style = solid, label="result"];
26->0 [style = bold, label=""];
2->0 [style = bold, label=""];
13->29 [style = bold, label=""];
22->0 [style = bold, label=""];
10->8 [style = bold, label=""];
22->0 [style = solid, label="result"];
3->19 [style = bold, label=""];
16->30 [style = dashed, label="0"];
23->13 [style = bold, label=""];
4->20 [style = dashed, label="0"];
5->4 [style = bold, label=""];
9->21 [style = bold, label=""];
1->12 [style = bold, label=""];
13->5 [style = bold, label=""];
1->12 [style = solid, label="result"];
11->25 [style = dashed, label="0"];
17->13 [style = bold, label=""];
7->25 [style = bold, label=""];
17->23 [style = dashed, label="0"];
2->26 [style = dashed, label="0"];
21->8 [style = solid, label="result"];
2->22 [style = dashed, label="0"];
10->8 [style = solid, label="result"];
23->13 [style = solid, label="result"];
14->6 [style = bold, label=""];
17->27 [style = dashed, label="0"];
}
