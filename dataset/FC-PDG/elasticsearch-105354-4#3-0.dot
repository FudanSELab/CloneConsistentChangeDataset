digraph {
18 [style = filled, label = "testCircuitBreakerOnConstruction['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "int whenToBreak = randomInt(10)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testCircuitBreakerOnConstruction['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(total.get(),CoreMatchers.equalTo(0L))@@@34@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final HyperLogLogPlusPlusSparse subject = new HyperLogLogPlusPlusSparse(p,bigArrays,1,1)@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "final HyperLogLogPlusPlusSparse subject = new HyperLogLogPlusPlusSparse(p,bigArrays,1)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "AtomicLong total = new AtomicLong()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final HyperLogLogPlusPlus subject = new HyperLogLogPlusPlus(p,bigArrays,0)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "{}@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testCircuitBreakerOnConstruction['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "int i = 0@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "fail(\"Must fail\")@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "BigArrays bigArrays = new BigArrays(null,breakerService,CircuitBreaker.REQUEST).withCircuitBreaking()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final int p = randomIntBetween(AbstractCardinalityAlgorithm.MIN_PRECISION,AbstractCardinalityAlgorithm.MAX_PRECISION)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "i < whenToBreak + 1@@@25@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "when(breakerService.getBreaker(CircuitBreaker.REQUEST)).thenReturn(new NoopCircuitBreaker(CircuitBreaker.REQUEST){@Override public double addEstimateBytesAndMaybeBreak(long bytes,String label){if (countDown-- == 0) {throw new CircuitBreakingException(\"test error\",bytes,Long.MAX_VALUE,Durability.TRANSIENT)}total.addAndGet(bytes)return total.get()}@Override public long addWithoutBreaking(long bytes){total.addAndGet(bytes)return total.get()}})@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "{}@@@32@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "CircuitBreakerService breakerService = mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "++i@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "subject.close()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "{}@@@32@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "CircuitBreakingException e@@@32@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(total.get(),equalTo(0L))@@@34@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final int p = randomIntBetween(HyperLogLogPlusPlus.MIN_PRECISION,HyperLogLogPlusPlus.MAX_PRECISION)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->15 [style = bold, label=""];
7->11 [style = bold, label=""];
15->23 [style = dashed, label="0"];
14->12 [style = dotted, label="true"];
5->23 [style = bold, label=""];
8->9 [style = solid, label="p"];
11->6 [style = bold, label=""];
3->14 [style = bold, label=""];
18->11 [style = bold, label=""];
4->13 [style = bold, label=""];
8->3 [style = bold, label=""];
14->22 [style = bold, label=""];
8->20 [style = dashed, label="0"];
5->15 [style = bold, label=""];
14->17 [style = bold, label=""];
19->11 [style = bold, label=""];
14->22 [style = dotted, label="true"];
6->0 [style = bold, label=""];
20->3 [style = bold, label=""];
10->21 [style = bold, label=""];
11->14 [style = solid, label="whenToBreak"];
9->22 [style = dashed, label="0"];
12->1 [style = bold, label=""];
14->17 [style = dotted, label="true"];
17->12 [style = bold, label=""];
10->16 [style = bold, label=""];
13->17 [style = solid, label="bigArrays"];
0->4 [style = bold, label=""];
22->12 [style = bold, label=""];
9->17 [style = dashed, label="0"];
2->15 [style = bold, label=""];
13->9 [style = solid, label="bigArrays"];
20->22 [style = solid, label="p"];
14->9 [style = bold, label=""];
1->14 [style = bold, label=""];
10->2 [style = bold, label=""];
9->12 [style = bold, label=""];
3->14 [style = solid, label="i"];
14->1 [style = dotted, label="true"];
14->9 [style = dotted, label="true"];
13->8 [style = bold, label=""];
8->17 [style = solid, label="p"];
13->22 [style = solid, label="bigArrays"];
21->23 [style = bold, label=""];
14->5 [style = bold, label=""];
13->20 [style = bold, label=""];
}
