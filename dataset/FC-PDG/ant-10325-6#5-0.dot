digraph {
17 [style = filled, label = "v.addAll(Arrays.asList(O,a,b,c))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Object a = new Object()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(v.contains(O))@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(0,v.indexOf(O))@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "v.addAll(Arrays.asList(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@d546e3))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(v.retainAll(Arrays.asList(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@d54653)))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "assertEquals(2,v.size())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(2,v.size())@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "v.removeRange(1,3)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertTrue(v.contains(c))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertTrue(v.contains(c))@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(0,v.indexOf(O))@@@16@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Object c = new Object()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testRetainAll['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(v.contains(c))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "testRetainAll['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Object b = new Object()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(2,v.size())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(0,v.indexOf(O))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertTrue(v.contains(O))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "assertTrue(v.contains(O))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertTrue(v.retainAll(Arrays.asList(c,O)))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "testRemoveRange['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4->9 [style = bold, label=""];
16->3 [style = bold, label=""];
18->3 [style = bold, label=""];
21->19 [style = bold, label=""];
10->14 [style = bold, label=""];
0->17 [style = bold, label=""];
6->17 [style = solid, label="b"];
0->17 [style = solid, label="c"];
0->8 [style = solid, label="c"];
3->6 [style = bold, label=""];
6->0 [style = bold, label=""];
9->8 [style = bold, label=""];
2->4 [style = bold, label=""];
0->19 [style = solid, label="c"];
7->3 [style = bold, label=""];
0->2 [style = solid, label="c"];
1->22 [style = bold, label=""];
20->21 [style = bold, label=""];
0->12 [style = solid, label="c"];
2->12 [style = dashed, label="0"];
12->10 [style = bold, label=""];
1->17 [style = dashed, label="0"];
13->12 [style = bold, label=""];
15->11 [style = bold, label=""];
8->5 [style = bold, label=""];
22->20 [style = bold, label=""];
0->1 [style = bold, label=""];
0->15 [style = solid, label="c"];
3->17 [style = solid, label="a"];
10->2 [style = bold, label=""];
17->13 [style = bold, label=""];
14->15 [style = bold, label=""];
0->1 [style = solid, label="c"];
1->10 [style = bold, label=""];
3->1 [style = solid, label="a"];
6->1 [style = solid, label="b"];
}
