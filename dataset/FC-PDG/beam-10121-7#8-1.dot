digraph {
6 [style = filled, label = "JavaSparkContext jsc = SparkContextFactory.getSparkContext(options)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "JavaStreamingContext jssc = new JavaStreamingContext(jsc,new org.apache.spark.streaming.Duration(options.getBatchIntervalMillis()))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testTrackSingle['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "p.traverseTopologically(new StreamingSourceTracker(jssc,p,,0))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "PCollection<Integer> pcol2 = p.apply(queueStream2)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "CreateStream<Integer> queueStream1 = CreateStream.of(VarIntCoder.of(),Duration.millis(options.getBatchIntervalMillis())).emptyBatch()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Pipeline p = Pipeline.create(options)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(StreamingSourceTracker.numAssertions,equalTo(1))@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "PCollection<Integer> pcol1 = p.apply(queueStream1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "PCollection<Integer> flattened = PCollectionList.of(pcol1).and(pcol2).apply(Flatten.pCollections())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "flattened.apply(ParDo.of(new PassthroughFn<>()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "options.setRunner()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "p.traverseTopologically(new StreamingSourceTracker(jssc,p,,0,1))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testTrackSingle['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "CreateStream<Integer> queueStream2 = CreateStream.of(VarIntCoder.of(),Duration.millis(options.getBatchIntervalMillis())).emptyBatch()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "p.traverseTopologically(new StreamingSourceTracker(jssc,p,,0))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "p.apply(emptyStream).apply(ParDo.of(new PassthroughFn<>()))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(StreamingSourceTracker.numAssertions,equalTo(1))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testTrackFlattened['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "CreateStream<Integer> emptyStream = CreateStream.of(VarIntCoder.of(),Duration.millis(options.getBatchIntervalMillis())).emptyBatch()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->3 [style = solid, label="p"];
4->15 [style = solid, label="p"];
16->18 [style = bold, label=""];
7->9 [style = solid, label="jssc"];
3->1 [style = bold, label=""];
0->6 [style = bold, label=""];
2->3 [style = bold, label=""];
7->3 [style = solid, label="jssc"];
11->12 [style = bold, label=""];
7->4 [style = bold, label=""];
2->9 [style = bold, label=""];
13->16 [style = bold, label=""];
19->0 [style = bold, label=""];
8->0 [style = bold, label=""];
6->7 [style = solid, label="jsc"];
12->13 [style = bold, label=""];
5->2 [style = bold, label=""];
15->17 [style = bold, label=""];
11->13 [style = solid, label="queueStream1"];
5->11 [style = dashed, label="0"];
3->9 [style = dashed, label="0"];
10->0 [style = bold, label=""];
7->15 [style = solid, label="jssc"];
4->9 [style = solid, label="p"];
12->16 [style = solid, label="queueStream2"];
14->15 [style = bold, label=""];
6->7 [style = bold, label=""];
9->1 [style = bold, label=""];
4->11 [style = bold, label=""];
4->5 [style = bold, label=""];
18->14 [style = bold, label=""];
}
