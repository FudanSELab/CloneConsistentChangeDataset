digraph {
0 [style = filled, label = "Assert.assertNull(pti.reference())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertNull(pti.reference())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(branch,pti.reference())@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "Assertions.assertThat(branch).isEqualTo(pti.reference())@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Assert.assertEquals(path,pti.tableIdentifier().name())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "pti = TableReference.parse(path + \"@\" + branch)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "String path = \"foo \"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertNull(pti.timestamp())@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(branch,pti.reference())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "whitespace['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "path = \"&&\"@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assertions.assertThat(pti.timestamp()).isNull()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "Assertions.assertThat(pti.reference()).isNull()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "Assertions.assertThat(pti.timestamp()).isNull()@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertNull(pti.timestamp())@@@12@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "pti = TableReference.parse(path + \"@\" + branch)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assertions.assertThat(path).isEqualTo(pti.tableIdentifier().name())@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "String path = \"/%\"@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assertions.assertThat(path).isEqualTo(pti.tableIdentifier().name())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "Assertions.assertThat(pti.timestamp()).isNull()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "TableReference pti = TableReference.parse(path)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "String branch = \"bar \"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(path,pti.tableIdentifier().name())@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "Assert.assertNull(pti.timestamp())@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "Assertions.assertThat(path).isEqualTo(pti.tableIdentifier().name())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(path,pti.tableIdentifier().name())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "String branch = \"bar\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assertions.assertThat(branch).isEqualTo(pti.reference())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "pti = TableReference.parse(path)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assertions.assertThat(pti.timestamp()).isNull()@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Assert.assertNull(pti.timestamp())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assertions.assertThat(pti.reference()).isNull()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "strangeCharacters['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(path,pti.tableIdentifier().name())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "strangeCharacters['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "Assertions.assertThat(path).isEqualTo(pti.tableIdentifier().name())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16->3 [style = bold, label=""];
28->29 [style = bold, label=""];
34->3 [style = solid, label="path"];
6->21 [style = dashed, label="0"];
23->16 [style = bold, label=""];
33->35 [style = bold, label=""];
11->20 [style = dashed, label="0"];
7->31 [style = dashed, label="0"];
25->22 [style = bold, label=""];
12->21 [style = bold, label=""];
3->11 [style = bold, label=""];
31->4 [style = bold, label=""];
14->28 [style = bold, label=""];
16->32 [style = bold, label=""];
20->31 [style = bold, label=""];
9->22 [style = dashed, label="0"];
4->6 [style = solid, label="path"];
7->4 [style = bold, label=""];
21->25 [style = bold, label=""];
34->8 [style = bold, label=""];
19->2 [style = solid, label="branch"];
1->28 [style = dashed, label="0"];
26->24 [style = bold, label=""];
12->6 [style = bold, label=""];
24->23 [style = bold, label=""];
4->12 [style = solid, label="path"];
13->8 [style = solid, label="path"];
14->1 [style = bold, label=""];
19->11 [style = solid, label="branch"];
13->17 [style = solid, label="path"];
8->17 [style = bold, label=""];
5->19 [style = bold, label=""];
29->27 [style = bold, label=""];
30->19 [style = bold, label=""];
17->0 [style = bold, label=""];
34->16 [style = solid, label="path"];
19->13 [style = bold, label=""];
18->23 [style = dashed, label="0"];
34->8 [style = solid, label="path"];
2->29 [style = dashed, label="0"];
6->10 [style = bold, label=""];
2->15 [style = bold, label=""];
19->14 [style = solid, label="branch"];
4->1 [style = solid, label="path"];
9->14 [style = bold, label=""];
35->11 [style = solid, label="branch"];
4->12 [style = bold, label=""];
0->24 [style = dashed, label="0"];
19->16 [style = solid, label="branch"];
0->18 [style = bold, label=""];
13->16 [style = solid, label="path"];
17->26 [style = dashed, label="0"];
10->9 [style = bold, label=""];
1->2 [style = bold, label=""];
34->17 [style = solid, label="path"];
15->27 [style = dashed, label="0"];
3->32 [style = dashed, label="0"];
19->35 [style = dashed, label="0"];
13->8 [style = bold, label=""];
22->14 [style = bold, label=""];
35->34 [style = bold, label=""];
13->3 [style = solid, label="path"];
13->34 [style = dashed, label="0"];
32->20 [style = bold, label=""];
10->25 [style = dashed, label="0"];
35->16 [style = solid, label="branch"];
11->7 [style = bold, label=""];
4->14 [style = solid, label="path"];
8->26 [style = bold, label=""];
18->16 [style = bold, label=""];
}
