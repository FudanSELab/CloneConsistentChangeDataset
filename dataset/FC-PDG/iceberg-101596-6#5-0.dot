digraph {
0 [style = filled, label = "!Catalogs.hiveCatalog(shell.getHiveConf())@@@5@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "FileSystem fs = Util.getFs(hmsTableLocation,shell.getHiveConf())@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "org.apache.hadoop.hive.metastore.api.Table hmsTable = shell.metastore().getTable(\"default\",\"customers\")@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" + \"'\" + InputFormatConfig.EXTERNAL_TABLE_PURGE + \"'='FALSE')\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" + \"'\" + InputFormatConfig.EXTERNAL_TABLE_PURGE + \"'='FALSE', \" + \"'\" + InputFormatConfig.CATALOG_NAME + \"'='\" + Catalogs.ICEBERG_DEFAULT_CATALOG_NAME + \"')\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "AssertHelpers.assertThrows(\"should throw exception\",,\"Table does not exist\",null)@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "org.apache.iceberg.Table icebergTable = testTables.loadTable(identifier)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Path hmsTableLocation = new Path(hmsTable.getSd().getLocation())@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(1,fs.listStatus(new Path(hmsTableLocation,\"metadata\")).length)@@@19@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(1,fs.listStatus(hmsTableLocation).length)@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "testDeleteBackingTable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "!Catalogs.hiveCatalog(shell.getHiveConf(),tableProperties)@@@8@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "testTables.loadTable(identifier)@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" + \"'\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(PartitionSpec.unpartitioned()) + \"')\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "AssertHelpers.assertThrows(\"should throw exception\",,\"Table does not exist\",null)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "TableIdentifier identifier = TableIdentifier.of(\"default\",\"customers\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(SPEC,icebergTable.spec())@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(1,fs.listStatus(new Path(hmsTableLocation,\"metadata\")).length)@@@21@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Path hmsTableLocation = new Path(hmsTable.getSd().getLocation())@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "FileSystem fs = Util.getFs(hmsTableLocation,shell.getHiveConf())@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Assert.assertEquals(1,fs.listStatus(hmsTableLocation).length)@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testCreateTableWithUnpartitionedSpec['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "Properties tableProperties = new Properties()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "testTables.loadTable(identifier)@@@7@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "hmsTable.getParameters().entrySet().stream().filter(null).forEach(null)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "testDeleteBackingTable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4->9 [style = bold, label=""];
5->8 [style = bold, label=""];
0->5 [style = dotted, label="true"];
22->2 [style = bold, label=""];
9->26 [style = solid, label="identifier"];
11->1 [style = bold, label=""];
15->25 [style = bold, label=""];
21->17 [style = dotted, label="false"];
21->14 [style = dotted, label="false"];
19->20 [style = bold, label=""];
21->15 [style = bold, label=""];
0->2 [style = bold, label=""];
15->14 [style = solid, label="hmsTableLocation"];
0->10 [style = dotted, label="false"];
0->2 [style = dotted, label="false"];
28->9 [style = bold, label=""];
21->2 [style = dotted, label="true"];
21->22 [style = dotted, label="true"];
6->0 [style = bold, label=""];
0->1 [style = dotted, label="false"];
16->19 [style = bold, label=""];
12->1 [style = solid, label="hmsTableLocation"];
21->24 [style = dotted, label="false"];
25->17 [style = bold, label=""];
12->11 [style = solid, label="hmsTableLocation"];
12->7 [style = bold, label=""];
7->3 [style = bold, label=""];
2->12 [style = bold, label=""];
9->6 [style = solid, label="identifier"];
9->6 [style = bold, label=""];
13->16 [style = bold, label=""];
24->14 [style = bold, label=""];
29->26 [style = bold, label=""];
20->21 [style = bold, label=""];
0->8 [style = dotted, label="true"];
3->10 [style = bold, label=""];
26->27 [style = bold, label=""];
9->29 [style = solid, label="identifier"];
17->24 [style = bold, label=""];
0->11 [style = dotted, label="false"];
6->29 [style = dashed, label="0"];
6->13 [style = dashed, label="0"];
14->23 [style = bold, label=""];
0->3 [style = dotted, label="false"];
21->25 [style = dotted, label="false"];
21->22 [style = bold, label=""];
0->7 [style = dotted, label="false"];
15->23 [style = solid, label="hmsTableLocation"];
18->9 [style = bold, label=""];
0->12 [style = dotted, label="false"];
9->2 [style = solid, label="identifier"];
21->15 [style = dotted, label="false"];
12->10 [style = solid, label="hmsTableLocation"];
15->24 [style = solid, label="hmsTableLocation"];
21->23 [style = dotted, label="false"];
9->29 [style = bold, label=""];
9->8 [style = solid, label="identifier"];
0->5 [style = bold, label=""];
9->13 [style = bold, label=""];
10->11 [style = bold, label=""];
9->13 [style = solid, label="identifier"];
}
