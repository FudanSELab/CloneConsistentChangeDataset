digraph {
9 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+Y0 (ts: 0)\",\"1:X1+Y1 (ts: 0)\")@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "testOuterJoin['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final MockProcessorSupplier<Integer,String> supplier = new MockProcessorSupplier<>()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "processor.checkAndClearProcessResult(\"0:XX0+Y0 (ts: 0)\",\"0:XX0+YY0 (ts: 0)\",\"1:XX1+Y1 (ts: 0)\",\"1:XX1+YY1 (ts: 0)\",\"2:XX2+YY2 (ts: 0)\",\"3:XX3+YY3 (ts: 0)\")@@@43@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "testOuterJoin['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
50 [style = filled, label = "assertEquals(1,copartitionGroups.size())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+YY0 (ts: 0)\",\"0:X0+YY0 (ts: 0)\",\"1:X1+YY1 (ts: 0)\",\"1:X1+YY1 (ts: 0)\",\"2:X2+YY2 (ts: 0)\",\"3:X3+YY3 (ts: 0)\")@@@39@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
52 [style = filled, label = "shouldRequireCopartitionedStreams['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "int i = 0@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "driver.pipeInput(recordFactory.create(topic2,expectedKeys(i(,\"YYY\" + expectedKeys(i())@@@47@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "i++@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "i < 2@@@27@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int i = 0@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final KStream<Integer,String> stream1@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "driver.pipeInput(recordFactory.create(topic1,expectedKey,\"C\" + expectedKey))@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "processor.checkAndClearProcessResult(\"0:C0+a0 (ts: 0)\",\"0:C0+b0 (ts: 0)\",\"1:C1+a1 (ts: 0)\",\"1:C1+b1 (ts: 0)\",\"2:C2+b2 (ts: 0)\",\"3:C3+b3 (ts: 0)\")@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+null (ts: 0)\",\"1:X1+null (ts: 0)\")@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "final int(( expectedKeys = new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@cb4f12@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "processor.checkAndClearProcessResult(\"0:B0+a0 (ts: 0)\",\"1:B1+a1 (ts: 0)\",\"2:B2+null (ts: 0)\",\"3:B3+null (ts: 0)\")@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "driver.pipeInput(recordFactory.create(topic1,expectedKey,\"X\" + expectedKey))@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "final KStream<Integer,String> joined@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "i < 2@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "processor.checkAndClearProcessResult(\"0:A0+null (ts: 0)\",\"1:A1+null (ts: 0)\")@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "joined.process(supplier)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(streamTopic,tableTopic)),copartitionGroups.iterator().next())@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "i++@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "final Collection<Set<String>> copartitionGroups = TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "driver.pipeInput(recordFactory.create(topic1,expectedKey,\"B\" + expectedKey))@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "int i = 0@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "i++@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "driver.pipeInput(recordFactory.create(topic2,expectedKey,\"YY\" + expectedKey))@@@37@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "stream2 = builder.stream(topic2,consumed)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "i < 2@@@45@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "driver.pipeInput(recordFactory.create(topic2,expectedKeys(i(,\"Y\" + expectedKeys(i())@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+Y0 (ts: 0)\",\"1:X1+Y1 (ts: 0)\",\"2:X2+null (ts: 0)\",\"3:X3+null (ts: 0)\")@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
47 [style = filled, label = "processor.checkAndClearProcessResult(\"0:A0+b0 (ts: 0)\",\"0:B0+b0 (ts: 0)\",\"1:A1+b1 (ts: 0)\",\"1:B1+b1 (ts: 0)\",\"2:B2+b2 (ts: 0)\",\"3:B3+b3 (ts: 0)\")@@@39@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "final Collection<Set<String>> copartitionGroups = TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "joined = stream1.outerJoin(stream2,MockValueJoiner.TOSTRING_JOINER,JoinWindows.of(ofMillis(100)),Joined.with(Serdes.Integer(),Serdes.String(),Serdes.String()))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+YYY0 (ts: 0)\",\"0:X0+YYY0 (ts: 0)\",\"0:XX0+YYY0 (ts: 0)\",\"1:X1+YYY1 (ts: 0)\",\"1:X1+YYY1 (ts: 0)\",\"1:XX1+YYY1 (ts: 0)\")@@@49@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(topic1,topic2)),copartitionGroups.iterator().next())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "driver.pipeInput(recordFactory.create(topic2,expectedKeys(i(,\"a\" + expectedKeys(i())@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
48 [style = filled, label = "processor.checkAndClearProcessResult(\"0:A0+c0 (ts: 0)\",\"0:B0+c0 (ts: 0)\",\"0:C0+c0 (ts: 0)\",\"1:A1+c1 (ts: 0)\",\"1:B1+c1 (ts: 0)\",\"1:C1+c1 (ts: 0)\")@@@49@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "stream1 = builder.stream(topic1,consumed)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final KStream<Integer,String> stream2@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "driver.pipeInput(recordFactory.create(topic2,expectedKey,\"b\" + expectedKey))@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "processor.checkAndClearProcessResult(\"0:A0+a0 (ts: 0)\",\"1:A1+a1 (ts: 0)\")@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "final MockProcessor<Integer,String> processor = supplier.theCapturedProcessor()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "driver.pipeInput(recordFactory.create(topic2,expectedKeys(i(,\"c\" + expectedKeys(i())@@@47@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "final StreamsBuilder builder = new StreamsBuilder()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "driver.pipeInput(recordFactory.create(topic1,expectedKeys(i(,\"A\" + expectedKeys(i())@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "driver.pipeInput(recordFactory.create(topic1,expectedKey,\"XX\" + expectedKey))@@@41@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertEquals(1,copartitionGroups.size())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "driver.pipeInput(recordFactory.create(topic1,expectedKeys(i(,\"X\" + expectedKeys(i())@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0->30 [style = bold, label=""];
14->25 [style = bold, label=""];
3->24 [style = bold, label=""];
11->14 [style = bold, label=""];
6->22 [style = bold, label=""];
32->13 [style = solid, label="i"];
14->11 [style = solid, label="i"];
14->25 [style = solid, label="i"];
35->31 [style = solid, label="expectedKeys"];
25->11 [style = dotted, label="true"];
24->42 [style = dashed, label="0"];
10->38 [style = solid, label="i"];
18->39 [style = dashed, label="0"];
29->6 [style = bold, label=""];
30->21 [style = solid, label="stream2"];
35->11 [style = solid, label="expectedKeys"];
10->33 [style = solid, label="i"];
9->5 [style = bold, label=""];
13->46 [style = bold, label=""];
13->15 [style = dotted, label="true"];
27->19 [style = bold, label=""];
28->3 [style = bold, label=""];
26->28 [style = bold, label=""];
32->46 [style = solid, label="i"];
25->40 [style = bold, label=""];
17->35 [style = bold, label=""];
45->41 [style = bold, label=""];
35->37 [style = solid, label="expectedKeys"];
34->51 [style = dashed, label="0"];
20->48 [style = dashed, label="0"];
16->17 [style = bold, label=""];
23->8 [style = bold, label=""];
24->18 [style = bold, label=""];
44->17 [style = bold, label=""];
13->32 [style = dotted, label="true"];
31->38 [style = dashed, label="0"];
43->47 [style = bold, label=""];
13->46 [style = dotted, label="true"];
28->43 [style = dashed, label="0"];
25->37 [style = bold, label=""];
5->45 [style = dashed, label="0"];
33->36 [style = bold, label=""];
13->15 [style = bold, label=""];
33->38 [style = dotted, label="true"];
8->38 [style = solid, label="i"];
41->43 [style = bold, label=""];
33->10 [style = dotted, label="true"];
33->31 [style = dotted, label="true"];
8->33 [style = bold, label=""];
35->29 [style = bold, label=""];
32->15 [style = solid, label="i"];
47->42 [style = bold, label=""];
21->27 [style = bold, label=""];
25->9 [style = bold, label=""];
42->39 [style = bold, label=""];
35->15 [style = solid, label="expectedKeys"];
5->26 [style = bold, label=""];
13->48 [style = bold, label=""];
8->33 [style = solid, label="i"];
2->13 [style = solid, label="i"];
1->7 [style = bold, label=""];
26->41 [style = dashed, label="0"];
49->50 [style = bold, label=""];
30->21 [style = bold, label=""];
31->10 [style = bold, label=""];
39->2 [style = bold, label=""];
8->10 [style = solid, label="i"];
34->23 [style = bold, label=""];
2->32 [style = solid, label="i"];
10->33 [style = bold, label=""];
46->32 [style = bold, label=""];
4->34 [style = bold, label=""];
7->14 [style = solid, label="i"];
12->27 [style = solid, label="supplier"];
25->37 [style = dotted, label="true"];
38->10 [style = bold, label=""];
52->49 [style = bold, label=""];
2->46 [style = solid, label="i"];
33->1 [style = bold, label=""];
25->14 [style = dotted, label="true"];
18->2 [style = bold, label=""];
12->0 [style = bold, label=""];
7->25 [style = solid, label="i"];
2->15 [style = solid, label="i"];
35->38 [style = solid, label="expectedKeys"];
2->13 [style = bold, label=""];
10->31 [style = solid, label="i"];
37->14 [style = bold, label=""];
8->31 [style = solid, label="i"];
1->36 [style = dashed, label="0"];
9->40 [style = dashed, label="0"];
15->46 [style = dashed, label="0"];
36->7 [style = bold, label=""];
25->11 [style = bold, label=""];
22->12 [style = bold, label=""];
50->51 [style = bold, label=""];
35->46 [style = solid, label="expectedKeys"];
33->31 [style = bold, label=""];
11->37 [style = dashed, label="0"];
33->38 [style = bold, label=""];
14->37 [style = solid, label="i"];
7->25 [style = bold, label=""];
40->45 [style = bold, label=""];
19->4 [style = bold, label=""];
32->13 [style = bold, label=""];
7->37 [style = solid, label="i"];
15->32 [style = bold, label=""];
7->11 [style = solid, label="i"];
13->20 [style = bold, label=""];
3->47 [style = dashed, label="0"];
}
