digraph {
2 [style = filled, label = "testExpression(rexBuilder.makeCall(new RightOperatorConversion().calciteOperator(),inputRef(\"s\"),inputRef(\"s\")),DruidExpression.fromExpression(\"right(\"s\",\"s\")\"),null)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "expectedException.expectMessage(\"Function(left( needs a string as first argument \" + \"and an integer as second argument\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testAbnormalLeftWithWrongType['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testAbnormalRightWithWrongType['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "expectedException.expect()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "expectedException.expectMessage(\"Function(right( needs a string as first argument \" + \"and an integer as second argument\")@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expectException(,\"Function(right( needs a string as first argument and an integer as second argument\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testHelper.testExpression(new RightOperatorConversion().calciteOperator(),ImmutableList.of(testHelper.makeInputRef(\"s\"),testHelper.makeInputRef(\"s\")),DruidExpression.fromExpression(\"right(\"s\",\"s\")\"),null)@@@4@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "testExpression(rexBuilder.makeCall(new LeftOperatorConversion().calciteOperator(),inputRef(\"s\"),inputRef(\"s\")),DruidExpression.fromExpression(\"left(\"s\",\"s\")\"),null)@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testAbnormalRightWithWrongType['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1->8 [style = dashed, label="0"];
1->2 [style = bold, label=""];
7->0 [style = bold, label=""];
5->6 [style = bold, label=""];
0->5 [style = dashed, label="0"];
2->9 [style = dashed, label="0"];
4->5 [style = bold, label=""];
0->1 [style = bold, label=""];
3->0 [style = bold, label=""];
0->8 [style = bold, label=""];
8->9 [style = bold, label=""];
}
