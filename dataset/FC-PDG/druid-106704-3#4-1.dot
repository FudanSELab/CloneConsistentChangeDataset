digraph {
0 [style = filled, label = "Assert.assertEquals(0,selector.idLookup().lookupId(\"c\"))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "DimensionSelector selector = spec.decorate(TestDimensionSelector.INSTANCE)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "ListFilteredDimensionSpec spec = new ListFilteredDimensionSpec(new DefaultDimensionSpec(\"foo\",\"bar\"),ImmutableSet.of(\"c\",\"g\"),true)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "RegexFilteredDimensionSpec spec = new RegexFilteredDimensionSpec(new DefaultDimensionSpec(\"foo\",\"bar\"),\"(c,g(\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testDecorator['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(2,row.size())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(1,row.get(1))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(\"g\",selector.lookupName(1))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(2,selector.getValueCardinality())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(0,row.get(0))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testDecoratorWithWhitelist['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(1,selector.idLookup().lookupId(\"g\"))@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "IndexedInts row = selector.getRow()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(\"c\",selector.lookupName(0))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testDecoratorWithWhitelist['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "DimensionSelector selector = spec.decorate(TestDimensionSelector.instance)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3->10 [style = bold, label=""];
11->5 [style = bold, label=""];
1->4 [style = bold, label=""];
0->9 [style = bold, label=""];
12->2 [style = bold, label=""];
14->8 [style = bold, label=""];
7->1 [style = bold, label=""];
2->14 [style = dashed, label="0"];
13->3 [style = bold, label=""];
4->11 [style = bold, label=""];
5->0 [style = bold, label=""];
2->13 [style = bold, label=""];
15->14 [style = bold, label=""];
10->7 [style = bold, label=""];
2->8 [style = bold, label=""];
8->13 [style = dashed, label="0"];
8->3 [style = bold, label=""];
6->2 [style = bold, label=""];
}
