digraph {
9 [style = filled, label = "final DeleteConsumerGroupOffsetsResult errorResult1 = env.adminClient().deleteConsumerGroupOffsets(groupId,Stream.of(tp1).collect(Collectors.toSet()))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertNull(errorResult1.partitionResult(tp1).get())@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final DeleteConsumerGroupOffsetsResult errorResult1 = env.adminClient().deleteConsumerGroupOffsets(GROUP_ID,Stream.of(tp1).collect(Collectors.toSet()))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "final TopicPartition tp1 = new TopicPartition(\"foo\",0)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "env.kafkaClient().prepareResponse(prepareOffsetDeleteResponse(Errors.COORDINATOR_LOAD_IN_PROGRESS))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "env.kafkaClient().prepareResponse(prepareFindCoordinatorResponse(Errors.COORDINATOR_LOAD_IN_PROGRESS,Node.noNode()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "env.kafkaClient().prepareResponse(prepareOffsetCommitResponse(tp1,Errors.NONE))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "env.kafkaClient().setNodeApiVersions(NodeApiVersions.create())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Map<TopicPartition,OffsetAndMetadata> offsets = new HashMap<>()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "offsets.put(tp1,new OffsetAndMetadata(123L))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "env.kafkaClient().prepareResponse(prepareFindCoordinatorResponse(Errors.NONE,env.cluster().controller()))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "env.kafkaClient().prepareResponse(prepareFindCoordinatorResponse(Errors.COORDINATOR_NOT_AVAILABLE,Node.noNode()))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testAlterConsumerGroupOffsetsFindCoordinatorRetriableErrors['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertNull(result.partitionResult(tp1).get())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final AlterConsumerGroupOffsetsResult result = env.adminClient().alterConsumerGroupOffsets(groupId,offsets)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "env.kafkaClient().prepareResponse(prepareOffsetDeleteResponse(\"foo\",0,Errors.NONE))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final String groupId = \"group-0\"@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "env.kafkaClient().prepareResponse(prepareOffsetDeleteResponse(Errors.COORDINATOR_NOT_AVAILABLE))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "env.kafkaClient().prepareResponse(prepareFindCoordinatorResponse(Errors.NONE,env.cluster().controller()))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "env.kafkaClient().prepareResponse(prepareOffsetDeleteResponse(Errors.NOT_COORDINATOR))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testDeleteConsumerGroupOffsetsRetriableErrors['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertNull(errorResult1.all().get())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertNull(result.all().get())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testDeleteConsumerGroupOffsetsRetriableErrors['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8->19 [style = dashed, label="0"];
3->21 [style = solid, label="tp1"];
10->15 [style = bold, label=""];
12->5 [style = bold, label=""];
18->23 [style = bold, label=""];
5->9 [style = bold, label=""];
19->20 [style = bold, label=""];
0->12 [style = bold, label=""];
20->17 [style = solid, label="offsets"];
4->19 [style = bold, label=""];
8->6 [style = bold, label=""];
6->0 [style = bold, label=""];
5->14 [style = bold, label=""];
15->16 [style = bold, label=""];
1->7 [style = bold, label=""];
14->1 [style = bold, label=""];
20->21 [style = bold, label=""];
3->10 [style = bold, label=""];
3->19 [style = solid, label="tp1"];
9->14 [style = dashed, label="0"];
13->3 [style = bold, label=""];
11->3 [style = bold, label=""];
11->9 [style = solid, label="groupId"];
11->17 [style = solid, label="groupId"];
10->4 [style = bold, label=""];
4->8 [style = bold, label=""];
16->4 [style = bold, label=""];
9->1 [style = bold, label=""];
21->17 [style = bold, label=""];
2->11 [style = bold, label=""];
22->11 [style = bold, label=""];
17->18 [style = bold, label=""];
}
