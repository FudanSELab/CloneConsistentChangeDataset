digraph {
43 [style = filled, label = "kafkaProducer.send(record).get()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Map<Integer,Long> currentOffsets = OBJECT_MAPPER.readValue(task.getRunner().pause().getEntity().toString(),new TypeReference<Map<Integer,Long>>(){})@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "{}@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final QuerySegmentSpec endInterval = OBJECT_MAPPER.readValue(\"\"2008/2049\"\",)@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,13L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "final QuerySegmentSpec firstInterval = OBJECT_MAPPER.readValue(\"\"2008/2010\"\",)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(sdd(\"2008/P1D\",0,ImmutableList.of(\"a\")),sdd(\"2009/P1D\",0,ImmutableList.of(\"b\")),sdd(\"2013/P1D\",0,ImmutableList.of(\"f\")),sdd(\"2049/P1D\",0,ImmutableList.of(\"f\"))),publishedDescriptors())@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "kafkaProducer.beginTransaction()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "kafkaProducer.send(record).get()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,2L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,6L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "kafkaProducer.initTransactions()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testRunTransactionModeRollback['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getProcessed())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(Status.READING,task.getRunner().getStatus())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "Assert.assertEquals(2,Iterables.size(scanResultValues1))@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "kafkaProducer.send(record).get()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "kafkaProducer.beginTransaction()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "kafkaProducer.abortTransaction()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "final QuerySegmentSpec rollbackedInterval = OBJECT_MAPPER.readValue(\"\"2010/2012\"\",)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "testRunWithPauseAndResume['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "Assert.assertEquals(2,countEvents(task))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "kafkaProducer.flush()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "scanResultValues = scanData(task,rollbackedInterval)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "{}@@@35@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "Assert.assertEquals(2,Iterables.size(scanResultValues))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "TimeoutException e@@@35@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "kafkaProducer.commitTransaction()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "kafkaProducer.beginTransaction()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "countEvents(task) != 2@@@13@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,2L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,6L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null,INPUT_FORMAT))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
48 [style = filled, label = "Assert.assertEquals(task.getRunner().getEndOffsets(),task.getRunner().getCurrentOffsets())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "Iterable<ScanResultValue> scanResultValues1 = scanData(task,endInterval)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testRunWithPauseAndResume['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,6L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@45@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,6L))),metadataStorageCoordinator.getDataSourceMetadata(NEW_DATA_SCHEMA.getDataSource()))@@@45@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Assert.assertEquals(2,countEvents(task))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "kafkaProducer.initTransactions()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,13L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@52@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "kafkaProducer.send(record).get()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "future.get(10,TimeUnit.SECONDS)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "kafkaProducer.flush()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "kafkaProducer.commitTransaction()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Iterable<ScanResultValue> scanResultValues = scanData(task,firstInterval)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "kafkaProducer.initTransactions()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Thread.sleep(25)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "kafkaProducer.initTransactions()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "Assert.assertEquals(0,Iterables.size(scanResultValues))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.fail(\"Task completed when it should have been paused\")@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(Status.READING,task.getRunner().getStatus())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "kafkaProducer.beginTransaction()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(sdd(\"2010/P1D\",0,ImmutableList.of(\"c\")),sdd(\"2011/P1D\",0,ImmutableList.of(\"d\",\"e\"))),publishedDescriptors())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "kafkaProducer.commitTransaction()@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getProcessed())@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(Status.PAUSED,task.getRunner().getStatus())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35->54 [style = solid, label="scanResultValues"];
54->27 [style = bold, label=""];
5->9 [style = bold, label=""];
21->15 [style = bold, label=""];
28->34 [style = dashed, label="0"];
26->9 [style = bold, label=""];
3->16 [style = bold, label=""];
15->40 [style = dashed, label="0"];
53->46 [style = solid, label="task"];
6->55 [style = dashed, label="0"];
39->57 [style = bold, label=""];
21->36 [style = bold, label=""];
34->1 [style = solid, label="task"];
15->20 [style = bold, label=""];
0->24 [style = bold, label=""];
34->9 [style = solid, label="task"];
25->19 [style = bold, label=""];
9->5 [style = bold, label=""];
13->22 [style = bold, label=""];
30->8 [style = bold, label=""];
46->50 [style = bold, label=""];
27->2 [style = bold, label=""];
52->35 [style = bold, label=""];
48->37 [style = bold, label=""];
35->54 [style = bold, label=""];
53->57 [style = solid, label="task"];
12->21 [style = bold, label=""];
6->32 [style = dashed, label="0"];
51->44 [style = bold, label=""];
53->35 [style = solid, label="task"];
53->9 [style = solid, label="task"];
29->23 [style = bold, label=""];
53->1 [style = solid, label="task"];
10->7 [style = bold, label=""];
53->44 [style = solid, label="task"];
21->45 [style = dashed, label="0"];
47->58 [style = bold, label=""];
56->51 [style = bold, label=""];
41->53 [style = bold, label=""];
36->46 [style = bold, label=""];
22->18 [style = bold, label=""];
46->50 [style = solid, label="scanResultValues1"];
59->55 [style = bold, label=""];
37->45 [style = bold, label=""];
11->26 [style = bold, label=""];
44->42 [style = bold, label=""];
58->43 [style = bold, label=""];
20->59 [style = dashed, label="0"];
19->29 [style = bold, label=""];
42->52 [style = bold, label=""];
28->1 [style = solid, label="task"];
1->3 [style = bold, label=""];
34->13 [style = solid, label="task"];
38->48 [style = bold, label=""];
40->59 [style = bold, label=""];
39->57 [style = solid, label="firstInterval"];
28->13 [style = solid, label="task"];
31->10 [style = bold, label=""];
24->25 [style = bold, label=""];
22->39 [style = bold, label=""];
53->1 [style = bold, label=""];
28->9 [style = solid, label="task"];
16->4 [style = bold, label=""];
8->12 [style = bold, label=""];
45->40 [style = bold, label=""];
57->49 [style = solid, label="scanResultValues"];
9->5 [style = dotted, label="true"];
23->27 [style = bold, label=""];
28->53 [style = dashed, label="0"];
34->1 [style = bold, label=""];
53->13 [style = solid, label="task"];
10->27 [style = bold, label=""];
18->27 [style = solid, label="currentOffsets"];
4->26 [style = bold, label=""];
20->32 [style = bold, label=""];
28->1 [style = bold, label=""];
20->6 [style = bold, label=""];
49->47 [style = bold, label=""];
36->46 [style = solid, label="endInterval"];
17->28 [style = bold, label=""];
52->35 [style = solid, label="rollbackedInterval"];
14->0 [style = bold, label=""];
50->38 [style = bold, label=""];
7->27 [style = bold, label=""];
8->21 [style = bold, label=""];
57->49 [style = bold, label=""];
2->30 [style = bold, label=""];
4->11 [style = bold, label=""];
33->34 [style = bold, label=""];
18->14 [style = bold, label=""];
43->56 [style = bold, label=""];
2->8 [style = bold, label=""];
9->13 [style = bold, label=""];
}
