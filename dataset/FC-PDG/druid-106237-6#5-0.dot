digraph {
2 [style = filled, label = "testEmptyStringPatternOnNull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testEmptyStringPatternOnNull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "final ExprEval<?> result = eval(\"icontains_string(a, '')\",Parser.withSuppliers(ImmutableMap.of(\"a\",null)))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testEmptyStringSearchOnNull['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(ExprEval.ofLongBoolean(NullHandling.replaceWithDefault()).value(),result.value())@@@4@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(ExprEval.of(!NullHandling.sqlCompatible(),ExprType.LONG).value(),result.value())@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final ExprEval<?> result = eval(\"regexp_like(a, '')\",InputBindings.withSuppliers(ImmutableMap.of(\"a\",null)))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "final ExprEval<?> result = eval(\"regexp_like(a, '')\",Parser.withSuppliers(ImmutableMap.of(\"a\",null)))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4->1 [style = bold, label=""];
2->0 [style = bold, label=""];
0->4 [style = dashed, label="0"];
5->6 [style = bold, label=""];
6->7 [style = bold, label=""];
1->7 [style = dashed, label="0"];
3->4 [style = bold, label=""];
0->1 [style = bold, label=""];
0->6 [style = dashed, label="0"];
}
