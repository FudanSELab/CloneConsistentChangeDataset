digraph {
14 [style = filled, label = "assertIs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "final ExpectedAssignmentValue expected@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final ExpectedCallParameter expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertIs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery())@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "actual instanceof ColumnSegment@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final ExpressionSegment actual@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "actual instanceof CommonExpressionSegment@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final ExpectedAssignmentValue expected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "ExpressionAssert.assertCommonExpression(assertContext,(CommonExpressionSegment)actual,expected.getCommonExpression())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "actual instanceof LiteralExpressionSegment@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertParameter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "actual instanceof ExpressionProjectionSegment@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression())@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn())@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final ExpressionSegment actual@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final ExpressionSegment actual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression())@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "actual instanceof ParameterMarkerExpressionSegment@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "actual instanceof SubqueryExpressionSegment@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression())@@@4@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0->6 [style = bold, label=""];
0->6 [style = dotted, label="true"];
21->9 [style = solid, label="actual"];
10->7 [style = solid, label="assertContext"];
2->4 [style = dotted, label="true"];
5->11 [style = dotted, label="true"];
10->2 [style = solid, label="actual"];
2->20 [style = dotted, label="false"];
2->4 [style = bold, label=""];
1->0 [style = solid, label="actual"];
1->9 [style = solid, label="actual"];
3->1 [style = dotted, label="true"];
17->7 [style = solid, label="assertContext"];
1->6 [style = solid, label="actual"];
16->11 [style = solid, label="assertContext"];
18->9 [style = bold, label=""];
2->5 [style = bold, label=""];
9->7 [style = dotted, label="true"];
12->15 [style = bold, label=""];
16->6 [style = solid, label="assertContext"];
10->12 [style = solid, label="actual"];
16->4 [style = solid, label="assertContext"];
21->2 [style = solid, label="actual"];
14->16 [style = dotted, label="true"];
3->8 [style = dotted, label="true"];
1->7 [style = solid, label="actual"];
10->11 [style = solid, label="actual"];
10->6 [style = solid, label="actual"];
1->5 [style = solid, label="actual"];
21->4 [style = solid, label="actual"];
12->15 [style = dotted, label="true"];
9->2 [style = bold, label=""];
10->0 [style = solid, label="actual"];
14->9 [style = bold, label=""];
10->6 [style = solid, label="assertContext"];
0->12 [style = dotted, label="false"];
9->2 [style = dotted, label="false"];
11->19 [style = dashed, label="0"];
10->15 [style = solid, label="actual"];
9->7 [style = bold, label=""];
20->19 [style = bold, label=""];
10->4 [style = solid, label="actual"];
10->4 [style = solid, label="assertContext"];
1->4 [style = solid, label="actual"];
3->10 [style = dotted, label="true"];
17->4 [style = solid, label="assertContext"];
1->11 [style = solid, label="actual"];
17->19 [style = solid, label="assertContext"];
5->0 [style = dotted, label="false"];
18->17 [style = dotted, label="true"];
10->11 [style = solid, label="assertContext"];
14->13 [style = dotted, label="true"];
18->21 [style = dotted, label="true"];
21->7 [style = solid, label="actual"];
5->0 [style = bold, label=""];
5->11 [style = bold, label=""];
0->12 [style = bold, label=""];
2->20 [style = bold, label=""];
3->9 [style = bold, label=""];
5->20 [style = dashed, label="0"];
10->9 [style = solid, label="actual"];
14->10 [style = dotted, label="true"];
16->7 [style = solid, label="assertContext"];
2->5 [style = dotted, label="false"];
16->15 [style = solid, label="assertContext"];
21->19 [style = solid, label="actual"];
20->19 [style = dotted, label="true"];
10->7 [style = solid, label="actual"];
1->2 [style = solid, label="actual"];
10->22 [style = dashed, label="0"];
18->22 [style = dotted, label="true"];
10->5 [style = solid, label="actual"];
21->20 [style = solid, label="actual"];
}
