digraph {
13 [style = filled, label = "assertEquals(2,auxResult.getResolvedKeysCount())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Path auxFile = Paths.get(.getResource(\"badpaper.aux\").toURI())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertTrue(auxResult.getGeneratedBibDatabase().hasEntries())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(2,auxResult.getUnresolvedKeysCount())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(3,auxResult.getFoundKeysInAux())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testCrossRef['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Path auxFile = Paths.get(.getResource(\"crossref.aux\").toURI())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(2,newDB.getEntries().size())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(0,auxResult.getCrossRefEntriesCount())@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "BibDatabase newDB = auxResult.getGeneratedBibDatabase()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "AuxParser auxParser = new DefaultAuxParser(result.getDatabase())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Path auxFile = Path.of(.getResource(\"badpaper.aux\").toURI())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(3,auxResult.getResolvedKeysCount())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(4,newDB.getEntries().size())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(1,auxResult.getCrossRefEntriesCount())@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testNotAllFound['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "AuxParserResult auxResult = auxParser.parse(auxFile)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "InputStream originalStream = .getResourceAsStream(\"origin.bib\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(4,auxResult.getFoundKeysInAux())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "ParserResult result = new BibtexParser(importFormatPreferences,new DummyFileUpdateMonitor()).parse(originalReader)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testNotAllFound['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(1,auxResult.getUnresolvedKeysCount())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
13->10 [style = bold, label=""];
6->3 [style = bold, label=""];
8->19 [style = dashed, label="0"];
11->20 [style = dashed, label="0"];
12->5 [style = bold, label=""];
7->18 [style = dashed, label="0"];
19->12 [style = bold, label=""];
8->6 [style = solid, label="auxFile"];
17->9 [style = bold, label=""];
1->20 [style = bold, label=""];
4->18 [style = bold, label=""];
2->9 [style = bold, label=""];
8->14 [style = dashed, label="0"];
9->8 [style = bold, label=""];
3->22 [style = bold, label=""];
0->22 [style = dashed, label="0"];
4->7 [style = bold, label=""];
3->0 [style = bold, label=""];
1->11 [style = bold, label=""];
22->4 [style = bold, label=""];
13->21 [style = dashed, label="0"];
5->6 [style = bold, label=""];
16->1 [style = bold, label=""];
0->4 [style = bold, label=""];
15->9 [style = bold, label=""];
19->6 [style = solid, label="auxFile"];
14->12 [style = bold, label=""];
9->14 [style = bold, label=""];
21->16 [style = bold, label=""];
9->19 [style = bold, label=""];
10->16 [style = dashed, label="0"];
18->21 [style = bold, label=""];
10->1 [style = bold, label=""];
8->12 [style = bold, label=""];
14->6 [style = solid, label="auxFile"];
}
