digraph {
8 [style = filled, label = "assertTrue(iterator.hasNext())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(KeyValue.pair(\"b\",\"2\"),toStringKeyValue(iterator.next()))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(\"b\",new String(iterator.peekNextKey().get()))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "iterator = new SegmentIterator<>(Arrays.asList(segmentOne,segmentTwo).iterator(),hasNextCondition,Bytes.wrap(\"a\".getBytes()),Bytes.wrap(\"z\".getBytes()),true)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertTrue(iterator.hasNext())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\"d\",new String(iterator.peekNextKey().get()))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(KeyValue.pair(\"a\",\"1\"),toStringKeyValue(iterator.next()))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(iterator.hasNext())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "iterator = new SegmentIterator<>(Arrays.asList(segmentOne,segmentTwo).iterator(),hasNextCondition,Bytes.wrap(\"a\".getBytes()),Bytes.wrap(\"z\".getBytes()))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"a\",new String(iterator.peekNextKey().get()))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(iterator.hasNext())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "shouldOnlyIterateOverSegmentsInRange['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "shouldIterateOverAllSegments['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertEquals(KeyValue.pair(\"c\",\"3\"),toStringKeyValue(iterator.next()))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertFalse(iterator.hasNext())@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(\"c\",new String(iterator.peekNextKey().get()))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(KeyValue.pair(\"d\",\"4\"),toStringKeyValue(iterator.next()))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "shouldIterateOverAllSegments['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "iterator = new SegmentIterator<>(Arrays.asList(segmentOne,segmentTwo).iterator(),hasNextCondition,Bytes.wrap(\"a\".getBytes()),Bytes.wrap(\"b\".getBytes()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->13 [style = bold, label=""];
6->3 [style = bold, label=""];
16->15 [style = bold, label=""];
10->14 [style = bold, label=""];
3->14 [style = bold, label=""];
0->11 [style = bold, label=""];
11->12 [style = bold, label=""];
8->6 [style = bold, label=""];
9->7 [style = bold, label=""];
2->10 [style = bold, label=""];
5->18 [style = dashed, label="0"];
1->9 [style = bold, label=""];
5->1 [style = bold, label=""];
18->1 [style = bold, label=""];
12->8 [style = bold, label=""];
10->0 [style = bold, label=""];
5->15 [style = dashed, label="0"];
4->5 [style = bold, label=""];
17->18 [style = bold, label=""];
13->2 [style = bold, label=""];
15->1 [style = bold, label=""];
}
