digraph {
4 [style = filled, label = "when(((IndexAvailable)sqlStatementContext).getIndexes()).thenReturn(Collections.singletonList(segment))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "ShardingTableBroadcastRoutingEngine shardingTableBroadcastRoutingEngine = new ShardingTableBroadcastRoutingEngine(mock(),createSQLStatementContext(Lists.newArrayList(\"t_order\")))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "when(((TableAvailable)sqlStatementContext).getAllTables()).thenReturn(Collections.emptyList())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertRouteUnit(routeUnits.next(),\"ds0\",\"t_order_1\")@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertRouteForDropIndexStatement['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "SQLStatementContext<DropIndexStatement> sqlStatementContext = mock(,RETURNS_DEEP_STUBS)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertRouteForDropIndexStatement['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "assertThat(routeContext.getRouteUnits().size(),is(2))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "ShardingTableBroadcastRoutingEngine shardingTableBroadcastRoutingEngine = new ShardingTableBroadcastRoutingEngine(schema,sqlStatementContext)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Iterator<RouteUnit> routeUnits = routeContext.getRouteUnits().iterator()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "when(schema.get(anyString()).getIndexes().containsKey(anyString())).thenReturn(true)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertRouteUnit(routeUnits.next(),\"ds1\",\"t_order\")@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "when(schema.getAllTableNames()).thenReturn(Collections.singleton(\"t_order\"))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertThat(routeContext.getActualDataSourceNames().size(),is(2))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "when(segment.getIdentifier().getValue()).thenReturn(\"t_order\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(routeContext.getActualDataSourceNames().size(),is(2))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Iterator<RouteUnit> routeUnits = routeContext.getRouteUnits().iterator()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertRouteForBroadcastTable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "shardingTableBroadcastRoutingEngine.route(routeContext,createShardingRule(false))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "RouteContext routeContext = new RouteContext()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "shardingTableBroadcastRoutingEngine.route(routeContext,createShardingRule(true))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertRouteUnit(routeUnits.next(),\"ds1\",\"t_order_0\")@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "when(schema.getAllTableNames()).thenReturn(Sets.newHashSet(\"t_order\"))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertRouteUnit(routeUnits.next(),\"ds1\",\"t_order_1\")@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertRouteUnit(routeUnits.next(),\"ds0\",\"t_order\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ShardingSphereSchema schema = mock(,RETURNS_DEEP_STUBS)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertRouteUnit(routeUnits.next(),\"ds0\",\"t_order_0\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "DropIndexStatement dropIndexStatement = mock(,RETURNS_DEEP_STUBS)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "RouteContext routeContext = new RouteContext()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "IndexSegment segment = mock(,RETURNS_DEEP_STUBS)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(sqlStatementContext.getTablesContext().getTableNames()).thenReturn(Collections.emptyList())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
13->10 [style = bold, label=""];
22->25 [style = bold, label=""];
5->16 [style = solid, label="sqlStatementContext"];
2->19 [style = bold, label=""];
7->11 [style = bold, label=""];
17->1 [style = bold, label=""];
21->0 [style = bold, label=""];
0->17 [style = bold, label=""];
16->6 [style = bold, label=""];
30->23 [style = bold, label=""];
11->22 [style = dashed, label="0"];
0->16 [style = solid, label="schema"];
11->12 [style = bold, label=""];
3->15 [style = bold, label=""];
0->27 [style = dashed, label="0"];
20->1 [style = bold, label=""];
10->7 [style = bold, label=""];
19->8 [style = bold, label=""];
24->30 [style = bold, label=""];
23->28 [style = bold, label=""];
19->5 [style = bold, label=""];
26->27 [style = bold, label=""];
13->24 [style = dashed, label="0"];
12->25 [style = dashed, label="0"];
8->5 [style = bold, label=""];
17->20 [style = dashed, label="0"];
2->4 [style = solid, label="segment"];
6->13 [style = bold, label=""];
12->14 [style = bold, label=""];
15->4 [style = bold, label=""];
14->9 [style = bold, label=""];
0->20 [style = bold, label=""];
1->2 [style = bold, label=""];
29->24 [style = solid, label="routeContext"];
27->29 [style = bold, label=""];
6->13 [style = solid, label="routeContext"];
29->24 [style = bold, label=""];
18->0 [style = bold, label=""];
28->22 [style = bold, label=""];
4->16 [style = bold, label=""];
}
