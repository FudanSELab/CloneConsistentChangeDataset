digraph {
14 [style = filled, label = "Stat stat = client.checkExists().forPath(queuePath)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "log.warn(String.format(\"Max number of queues (%d) reached. Consider increasing the max.\",policies.getMaxQueues()))@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "preferredQueues.add(queuePath)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "checkThreshold['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "addAQueueIfLeader = true@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "preferredQueues.remove(queuePath)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "size = stat.getNumChildren()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "stat.getNumChildren() >= policies.getNewQueueThreshold()@@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "stat.getNumChildren() <= (policies.getNewQueueThreshold() / 2)@@@16@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int size = 0@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "boolean addAQueueIfLeader = false@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "addNewQueueIfNeeded(queuePath)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "addNewQueueIfNeeded(null)@@@23@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "getInitialQueues['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "children.size() == 0@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "log.info(String.format(\"Adding a queue due to exceeded threshold. Queue Size: %d - Threshold: %d\",size,policies.getNewQueueThreshold()))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "addAQueueIfLeader && leaderLatch.hasLeadership()@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "List<String> children = client.getChildren().forPath(queuePath)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "queues.size() < policies.getMaxQueues()@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "checkThreshold['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "String queuePath = ZKPaths.makePath(this.queuePath,child)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "addNewQueueIfNeeded(null)@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2->15 [style = solid, label="queuePath"];
13->6 [style = dotted, label="true"];
3->11 [style = bold, label=""];
19->10 [style = bold, label=""];
2->7 [style = solid, label="queuePath"];
10->2 [style = bold, label=""];
14->3 [style = bold, label=""];
11->9 [style = solid, label="size"];
19->10 [style = solid, label="queuePath"];
8->0 [style = solid, label="addAQueueIfLeader"];
3->4 [style = dotted, label="false"];
3->8 [style = dotted, label="true"];
0->13 [style = dotted, label="true"];
4->17 [style = bold, label=""];
5->13 [style = solid, label="size"];
4->17 [style = dotted, label="true"];
13->9 [style = dotted, label="true"];
0->13 [style = bold, label=""];
5->10 [style = bold, label=""];
13->12 [style = dotted, label="false"];
4->2 [style = bold, label=""];
20->19 [style = bold, label=""];
9->6 [style = bold, label=""];
10->19 [style = bold, label=""];
13->12 [style = bold, label=""];
2->15 [style = dotted, label="true"];
16->1 [style = bold, label=""];
21->20 [style = bold, label=""];
2->14 [style = solid, label="queuePath"];
15->14 [style = bold, label=""];
11->8 [style = bold, label=""];
7->0 [style = bold, label=""];
3->11 [style = dotted, label="true"];
5->9 [style = solid, label="size"];
8->7 [style = bold, label=""];
18->1 [style = bold, label=""];
1->0 [style = solid, label="addAQueueIfLeader"];
2->17 [style = solid, label="queuePath"];
13->9 [style = bold, label=""];
11->13 [style = solid, label="size"];
3->7 [style = dotted, label="true"];
2->15 [style = bold, label=""];
3->4 [style = bold, label=""];
17->0 [style = bold, label=""];
4->0 [style = bold, label=""];
17->2 [style = bold, label=""];
1->5 [style = bold, label=""];
7->2 [style = bold, label=""];
}
