digraph {
6 [style = filled, label = "CommandLine commandLine = CliFrontendParser.parse(CliFrontendParser.RUN_OPTIONS,arguments,true)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertArrayEquals(classpath,executionOptions.getClasspaths().toArray())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "String(( arguments = {\"--classpath\",\"file:///tmp/foo\",\"--classpath\",\"file:///tmp/bar\",\"/some/none/existing/path\",\"--debug\",\"true\",\"arg1\",\"arg2\"}@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ExecutionConfigAccessor executionOptions = ExecutionConfigAccessor.fromProgramOptions(programOptions)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "frontend.buildProgram(programOptions)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "ProgramOptions programOptions = new ProgramOptions(commandLine)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(arguments(0(,programOptions.getJarFilePath())@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "String(( reducedArguments = {\"--debug\",\"true\",\"arg1\",\"arg2\"}@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "URL(( classpath = new URL((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b9f6cd@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertArrayEquals(reducedArguments,programOptions.getProgramArgs())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertArrayEquals(new String((((,programOptions.getProgramArgs())@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(arguments(4(,executionOptions.getJarFilePath())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testNonExistingFileWithoutArguments['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertArrayEquals(new String((((,programOptions.getProgramArgs())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "testNonExistingFileWithArguments['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "frontend.buildProgram(programOptions,executionOptions)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "frontend.buildProgram(programOptions,executionOptions)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "testNonExistingFileWithoutArguments['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "fail(\"Should fail with an exception\")@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(arguments(0(,executionOptions.getJarFilePath())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5->3 [style = bold, label=""];
4->10 [style = bold, label=""];
15->13 [style = bold, label=""];
17->1 [style = bold, label=""];
13->12 [style = solid, label="reducedArguments"];
2->1 [style = bold, label=""];
7->16 [style = dashed, label="0"];
1->15 [style = bold, label=""];
3->18 [style = dashed, label="0"];
4->19 [style = solid, label="programOptions"];
7->0 [style = bold, label=""];
5->18 [style = bold, label=""];
11->9 [style = bold, label=""];
6->4 [style = solid, label="commandLine"];
1->10 [style = solid, label="arguments"];
8->1 [style = bold, label=""];
6->4 [style = bold, label=""];
1->18 [style = solid, label="arguments"];
1->6 [style = bold, label=""];
19->14 [style = bold, label=""];
3->7 [style = bold, label=""];
4->5 [style = solid, label="programOptions"];
1->3 [style = solid, label="arguments"];
4->0 [style = solid, label="programOptions"];
4->9 [style = solid, label="programOptions"];
15->16 [style = solid, label="classpath"];
13->6 [style = bold, label=""];
12->19 [style = bold, label=""];
0->9 [style = dashed, label="0"];
4->5 [style = bold, label=""];
16->12 [style = bold, label=""];
5->0 [style = solid, label="executionOptions"];
5->19 [style = solid, label="executionOptions"];
1->6 [style = solid, label="arguments"];
10->11 [style = bold, label=""];
18->16 [style = bold, label=""];
}
