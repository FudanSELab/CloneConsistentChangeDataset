digraph {
85 [style = filled, label = "assertNotNull(\"Expecting the 'MockTokenizer' to be applied on the query for the 'whitetok' field\",tokenList)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "assertEquals(\"Expecting 4 tokens after stop word removal\",4,tokenList.size())@@@139@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "List<NamedList> tokenList@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db73e5,null,false))@@@119@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "assertEquals(\"Expecting 2 tokens to be present\",2,tokenList.size())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "FieldAnalysisRequest request = new FieldAnalysisRequest()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
116 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"Jumped\",null,\"<ALPHANUM>\",8,14,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db7378,null,false))@@@104@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
99 [style = filled, label = "document.addField(\"text\",\"The Fox Jumped Over The Dogs\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertNotNull(\"Expecting the 'PorterStemFilter' to be applied on the index for the 'text' field\",tokenList)@@@153@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "assertEquals(\"The 'text' field has only a single value\",1,indexResult.size())@@@72@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
115 [style = filled, label = "assertEquals(\"Expecting 6 tokens\",6,tokenList.size())@@@118@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
110 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(\"org.apache.lucene.analysis.standard.StandardTokenizer\")@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
103 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"Over\",null,\"<ALPHANUM>\",15,19,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db72f8,null,false))@@@86@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "queryResult = textResult.get(\"query\")@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(\"org.apache.lucene.analysis.core.StopFilter\")@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"Jumping\",null,\"word\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db7165,null,false))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
84 [style = filled, label = "valueResult = (NamedList<List<NamedList>>)indexResult.get(\"The Fox Jumped Over The Dogs\")@@@73@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
94 [style = filled, label = "assertNotNull(\"Expecting the 'PorterStemFilter' to be applied on the query for the 'text' field\",tokenList)@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
86 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"dogs\",null,\"<ALPHANUM>\",24,28,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db74cc,null,false))@@@149@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertNotNull(\"expecting result for field type 'charfilthtmlmap'\",textType)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"over\",null,\"<ALPHANUM>\",15,19,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db752b,null,false))@@@161@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "document.addField(\"whitetok\",\"Jumping Jack\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "assertNotNull(\"Expecting the 'StopFilter' to be applied on the index for the 'text' field\",tokenList)@@@138@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
105 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(.getName())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
92 [style = filled, label = "SolrInputDocument document = new SolrInputDocument()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",4,7,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db73fc,null,false))@@@122@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(\"org.apache.lucene.analysis.core.LowerCaseFilter\")@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "assertNotNull(\"Expecting the 'StandardFilter' to be applied on the index for the 'text' field\",tokenList)@@@96@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
102 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"over\",null,\"<ALPHANUM>\",15,19,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db74b4,null,false))@@@146@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "assertNotNull(\"Expecting the 'StandardTokenizer' to be applied on the query for the 'text' field\",tokenList)@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
104 [style = filled, label = "tokenList = valueResult.get(\"org.apache.lucene.analysis.standard.StandardFilter\")@@@95@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"dog\",null,\"<ALPHANUM>\",24,28,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db7544,null,false))@@@164@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
89 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"JUMPING\",null,\"word\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db7126,null,false))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "DocumentAnalysisRequest request = new DocumentAnalysisRequest().setQuery(\"JUMPING\").setShowMatch(true).addDocument(document)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
114 [style = filled, label = "assertNotNull(\"Expecting the 'StandardFilter' to be applied on the query for the 'text' field\",tokenList)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(\"org.apache.lucene.analysis.en.PorterStemFilter\")@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "tokenList = valueResult.get(\"org.apache.lucene.analysis.standard.StandardTokenizer\")@@@74@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "queryResult = whitetokResult.get(\"query\")@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
113 [style = filled, label = "NamedList<NamedList<NamedList<Object>>> documentResult = (NamedList<NamedList<NamedList<Object>>>)result.get(\"1\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
107 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"Dogs\",null,\"<ALPHANUM>\",24,28,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db7322,null,false))@@@92@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertNotNull(\"Expecting the 'LowerCaseFilter' to be applied on the query for the 'text' field\",tokenList)@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
117 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"jumped\",null,\"<ALPHANUM>\",8,14,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db7413,null,false))@@@125@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
100 [style = filled, label = "NamedList<NamedList<Object>> idResult = documentResult.get(\"id\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testCharFilterAnalysis['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "NamedList indexPart = textType.get(\"index\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "indexResult = whitetokResult.get(\"index\")@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "NamedList<List<NamedList>> valueResult@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
101 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",4,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db74f9,null,false))@@@155@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"The\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db734c,null,false))@@@98@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
109 [style = filled, label = "assertNotNull(\"An analysis for document with key '1' should be returned\",documentResult)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(tokenList.size(),1)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "assertNotNull(\"an analysis for the 'text' field should be returned\",textResult)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
98 [style = filled, label = "tokenList = valueResult.get(\"org.apache.lucene.analysis.core.StopFilter\")@@@137@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertNotNull(\"Expecting MockTokenizer analysis breakdown\",tokenList)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "assertNotNull(\"Expecting the 'StopFilter' to be applied on the query for the 'text' field\",tokenList)@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "request.setShowMatch(false)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"jumping\",null,\"<ALPHANUM>\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db7214,null,false))@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
97 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"JUMPING\",null,\"<ALPHANUM>\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db71e7,null,false))@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
87 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"the\",null,\"<ALPHANUM>\",20,23,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db7441,null,false))@@@131@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "assertEquals(\"Expecting 6 tokens\",6,tokenList.size())@@@76@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"Jack\",null,\"word\",8,12,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db717a,null,false))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(\"wh鐃緒申鐃緒申鐃緒申t鐃緒申鐃緒申鐃緒申v鐃緒申鐃緒申鐃緒申r\",indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
112 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"Dogs\",null,\"<ALPHANUM>\",24,28,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db73ba,null,false))@@@113@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "NamedList<NamedList> fieldTypes = result.get(\"field_types\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "assertNotNull(\"an analysis for the 'id' field should be returned\",idResult)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",4,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db7484,null,false))@@@140@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"jumped\",null,\"<ALPHANUM>\",8,14,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db749c,null,false))@@@143@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "indexResult = textResult.get(\"index\")@@@71@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "NamedList<Object> result = handler.handleAnalysisRequest(request,h.getCore().getSchema())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "testHandleAnalysisRequest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"over\",null,\"<ALPHANUM>\",15,19,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db742a,null,false))@@@128@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "tokenList = valueResult.getVal(0)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
91 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"Fox\",null,\"<ALPHANUM>\",4,7,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db72ce,null,false))@@@80@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "NamedList<Object> indexResult@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "NamedList<Object> queryResult@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "tokenList = valueResult.get(\"org.apache.lucene.analysis.en.PorterStemFilter\")@@@152@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"The\",null,\"<ALPHANUM>\",20,23,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db73a4,null,false))@@@110@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
96 [style = filled, label = "NamedList<NamedList<Object>> whitetokResult = documentResult.get(\"whitetok\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertTrue(\"result is null and it shouldn't be\",result != null)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
106 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"jumping\",null,\"<ALPHANUM>\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db7242,null,false))@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "assertNotNull(\"an analysis for the 'whitetok' field should be returned\",whitetokResult)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "assertNotNull(\"Expecting the 'LowerCaseFilter' to be applied on the index for the 'text' field\",tokenList)@@@117@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"dogs\",null,\"<ALPHANUM>\",24,28,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db7458,null,false))@@@134@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"The\",null,\"<ALPHANUM>\",20,23,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db730d,null,false))@@@89@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"The\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db72b9,null,false))@@@77@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testCharFilterAnalysis['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\",indexPart)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "NamedList<NamedList> result = handler.handleAnalysisRequest(request,h.getCore().getSchema())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
111 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(\"org.apache.lucene.analysis.standard.StandardFilter\")@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"Fox\",null,\"<ALPHANUM>\",4,7,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db7362,null,false))@@@101@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "NamedList<NamedList> result = handler.handleAnalysisRequest(request,h.getCore().getLatestSchema())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
69 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"Jumped\",null,\"<ALPHANUM>\",8,14,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db72e3,null,false))@@@83@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "request.addFieldType(\"charfilthtmlmap\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertNotNull(\"field_types should never be null\",fieldTypes)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "request.setFieldValue(\"<html><body>wh鐃緒申鐃緒申鐃緒申t鐃緒申鐃緒申鐃緒申v鐃緒申鐃緒申鐃緒申r</body></html>\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "document.addField(\"id\",1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
90 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"jump\",null,\"<ALPHANUM>\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db7271,null,false))@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "assertEquals(\"Expecting 4 tokens\",4,tokenList.size())@@@154@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "assertEquals(\"The 'whitetok' field has only a single value\",1,indexResult.size())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
108 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"Over\",null,\"<ALPHANUM>\",15,19,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db738e,null,false))@@@107@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"JUMPING\",null,\"<ALPHANUM>\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db71bb,null,false))@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "NamedList<NamedList<Object>> textResult = documentResult.get(\"text\")@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "valueResult = (NamedList<List<NamedList>>)indexResult.get(\"Jumping Jack\")@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(\"whatever\",indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "List<NamedList> tokenList = (List<NamedList>)indexPart.get(.getName())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"jump\",null,\"<ALPHANUM>\",8,14,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db7512,null,true))@@@158@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
88 [style = filled, label = "assertNotNull(\"Expecting the 'StandardTokenizer' to be applied on the index for the 'text' field\",tokenList)@@@75@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"whatever\",null,\"word\",12,20,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@db707a,null,false))@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "assertEquals(\"Expecting 6 tokens\",6,tokenList.size())@@@97@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
95 [style = filled, label = "tokenList = valueResult.get(\"org.apache.lucene.analysis.core.LowerCaseFilter\")@@@116@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "assertNotNull(\"result is null and it shouldn't be\",result)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74->112 [style = bold, label=""];
18->3 [style = bold, label=""];
54->97 [style = bold, label=""];
93->31 [style = bold, label=""];
77->25 [style = bold, label=""];
105->85 [style = bold, label=""];
95->48 [style = bold, label=""];
91->69 [style = bold, label=""];
18->30 [style = dashed, label="0"];
29->67 [style = solid, label="request"];
39->61 [style = bold, label=""];
107->104 [style = bold, label=""];
12->7 [style = bold, label=""];
55->88 [style = solid, label="tokenList"];
108->74 [style = bold, label=""];
47->49 [style = bold, label=""];
89->106 [style = bold, label=""];
96->81 [style = solid, label="whitetokResult"];
56->28 [style = solid, label="tokenList"];
113->109 [style = bold, label=""];
106->80 [style = bold, label=""];
15->11 [style = bold, label=""];
116->108 [style = bold, label=""];
65->37 [style = bold, label=""];
7->16 [style = bold, label=""];
98->83 [style = bold, label=""];
83->78 [style = bold, label=""];
85->46 [style = bold, label=""];
16->14 [style = bold, label=""];
92->29 [style = solid, label="document"];
52->21 [style = bold, label=""];
51->101 [style = bold, label=""];
11->10 [style = solid, label="result"];
61->89 [style = bold, label=""];
99->29 [style = bold, label=""];
67->76 [style = solid, label="result"];
114->54 [style = bold, label=""];
82->59 [style = bold, label=""];
100->93 [style = bold, label=""];
78->38 [style = bold, label=""];
40->51 [style = bold, label=""];
68->82 [style = bold, label=""];
2->18 [style = bold, label=""];
103->43 [style = bold, label=""];
2->11 [style = solid, label="request"];
92->30 [style = bold, label=""];
98->83 [style = solid, label="tokenList"];
6->81 [style = dashed, label="0"];
58->39 [style = bold, label=""];
41->53 [style = bold, label=""];
5->1 [style = bold, label=""];
21->91 [style = bold, label=""];
37->117 [style = bold, label=""];
19->10 [style = solid, label="result"];
76->113 [style = bold, label=""];
59->35 [style = bold, label=""];
10->0 [style = bold, label=""];
55->88 [style = bold, label=""];
43->107 [style = bold, label=""];
81->62 [style = bold, label=""];
101->70 [style = bold, label=""];
14->4 [style = bold, label=""];
6->17 [style = bold, label=""];
53->96 [style = bold, label=""];
97->56 [style = bold, label=""];
44->42 [style = bold, label=""];
110->73 [style = bold, label=""];
84->55 [style = bold, label=""];
39->61 [style = solid, label="tokenList"];
49->68 [style = bold, label=""];
71->90 [style = bold, label=""];
48->115 [style = bold, label=""];
46->77 [style = bold, label=""];
0->12 [style = bold, label=""];
86->45 [style = bold, label=""];
100->93 [style = solid, label="idResult"];
42->47 [style = bold, label=""];
38->27 [style = bold, label=""];
19->10 [style = bold, label=""];
104->72 [style = solid, label="tokenList"];
88->52 [style = bold, label=""];
23->41 [style = bold, label=""];
15->19 [style = bold, label=""];
36->98 [style = bold, label=""];
1->9 [style = bold, label=""];
82->59 [style = solid, label="textResult"];
112->95 [style = bold, label=""];
35->110 [style = bold, label=""];
72->63 [style = bold, label=""];
8->2 [style = bold, label=""];
117->26 [style = bold, label=""];
64->116 [style = bold, label=""];
111->114 [style = bold, label=""];
11->10 [style = bold, label=""];
102->86 [style = bold, label=""];
105->85 [style = solid, label="tokenList"];
113->109 [style = solid, label="documentResult"];
110->73 [style = solid, label="tokenList"];
69->103 [style = bold, label=""];
7->16 [style = solid, label="textType"];
28->79 [style = bold, label=""];
87->36 [style = bold, label=""];
13->6 [style = bold, label=""];
4->5 [style = bold, label=""];
80->94 [style = solid, label="tokenList"];
24->50 [style = bold, label=""];
45->40 [style = bold, label=""];
95->48 [style = solid, label="tokenList"];
67->76 [style = bold, label=""];
22->99 [style = bold, label=""];
104->72 [style = bold, label=""];
30->22 [style = bold, label=""];
31->23 [style = bold, label=""];
79->58 [style = bold, label=""];
32->92 [style = bold, label=""];
29->67 [style = bold, label=""];
63->33 [style = bold, label=""];
26->87 [style = bold, label=""];
115->65 [style = bold, label=""];
50->111 [style = bold, label=""];
2->19 [style = solid, label="request"];
45->40 [style = solid, label="tokenList"];
73->24 [style = bold, label=""];
3->15 [style = bold, label=""];
75->57 [style = bold, label=""];
62->105 [style = bold, label=""];
0->12 [style = solid, label="fieldTypes"];
27->102 [style = bold, label=""];
94->71 [style = bold, label=""];
20->2 [style = bold, label=""];
14->4 [style = solid, label="indexPart"];
90->75 [style = bold, label=""];
60->34 [style = bold, label=""];
80->94 [style = bold, label=""];
11->19 [style = dashed, label="0"];
70->60 [style = bold, label=""];
109->100 [style = bold, label=""];
56->28 [style = bold, label=""];
9->13 [style = solid, label="tokenList"];
96->81 [style = bold, label=""];
9->53 [style = dashed, label="0"];
33->64 [style = bold, label=""];
57->84 [style = bold, label=""];
25->66 [style = bold, label=""];
66->44 [style = bold, label=""];
9->13 [style = bold, label=""];
111->114 [style = solid, label="tokenList"];
}
