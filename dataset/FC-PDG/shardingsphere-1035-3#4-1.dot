digraph {
0 [style = filled, label = "assertThat(tags.get(ZipkinConstants.Tags.COMPONENT),is(\"shardingsphere\"))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(tags.get(ZipkinConstants.Tags.DB_TYPE),is(\"shardingsphere-proxy\"))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Span span = COLLECTOR.pop()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "advice.afterMethod(getTargetObject(),null,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1689fcb,new MethodInvocationResult())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertNotNull(tags)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertExceptionHandle['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(tags.get(ZipkinConstants.Tags.DB_INSTANCE),is(\"mock.db\"))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(tags.get(\"error\"),is(\"IOException\"))@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(tags.get(ZipkinConstants.Tags.PEER_PORT),is(\"1000\"))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Span span = collector.pop()@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(tags.get(ZipkinConstants.Tags.PEER_HOSTNAME),is(\"mock.host\"))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertFalse(tags == null || tags.isEmpty())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "advice.onThrowing(getTargetObject(),null,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1689fba,new IOException())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertNotNull(span)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Map<String,String> tags = span.tags()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(tags.get(ZipkinConstants.Tags.DB_STATEMENT),is(\"select 1\"))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "advice.beforeMethod(getTargetObject(),null,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1689fa9,new MethodInvocationResult())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertMethod['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertMethod['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertThat(span.name(),is(\"/ShardingSphere/executeSQL/\".toLowerCase()))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
5->8 [style = bold, label=""];
7->3 [style = solid, label="tags"];
7->17 [style = bold, label=""];
8->6 [style = solid, label="span"];
8->6 [style = bold, label=""];
11->12 [style = bold, label=""];
5->14 [style = bold, label=""];
8->14 [style = dashed, label="0"];
9->16 [style = bold, label=""];
7->3 [style = bold, label=""];
3->0 [style = bold, label=""];
13->1 [style = bold, label=""];
6->2 [style = bold, label=""];
19->5 [style = bold, label=""];
12->10 [style = bold, label=""];
17->0 [style = bold, label=""];
18->1 [style = bold, label=""];
0->4 [style = bold, label=""];
14->6 [style = solid, label="span"];
7->17 [style = solid, label="tags"];
10->9 [style = bold, label=""];
2->7 [style = bold, label=""];
1->19 [style = bold, label=""];
4->11 [style = bold, label=""];
14->6 [style = bold, label=""];
15->1 [style = bold, label=""];
}
