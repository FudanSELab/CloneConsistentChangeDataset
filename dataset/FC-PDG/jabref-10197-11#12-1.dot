digraph {
2 [style = filled, label = "List<SearchBasedFetcher> searchBasedFetchers = WebFetchers.getSearchBasedFetchers(importFormatPreferences)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "getSearchBasedFetchersReturnsAllFetcherDerivingFromSearchBasedFetcher['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "getSearchBasedFetchersReturnsAllFetcherDerivingFromSearchBasedFetcher['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Set<Class<? extends SearchBasedFetcher>> expected = reflections.getSubTypesOf()@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "List<IdFetcher> idFetchers = WebFetchers.getIdFetchers(importFormatPreferences)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "expected.remove()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(expected,getClasses(searchBasedFetchers))@@@8@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "expected.remove()@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Set<Class<?>> expected = controlClasses.loadClasses().stream().collect(Collectors.toSet())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "ClassInfoList controlClasses = scanResult.getClassesImplementing(.getCanonicalName())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "expected.remove()@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(expected,getClasses(idFetchers))@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Set<Class<? extends IdFetcher>> expected = reflections.getSubTypesOf()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(expected,getClasses(searchBasedFetchers))@@@6@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "getIdFetchersReturnsAllFetcherDerivingFromIdFetcher['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
5->8 [style = bold, label=""];
9->2 [style = bold, label=""];
2->6 [style = bold, label=""];
2->1 [style = bold, label=""];
5->7 [style = solid, label="expected"];
13->11 [style = solid, label="expected"];
1->0 [style = bold, label=""];
4->2 [style = bold, label=""];
2->10 [style = dashed, label="0"];
8->7 [style = bold, label=""];
1->3 [style = solid, label="expected"];
2->7 [style = solid, label="searchBasedFetchers"];
1->13 [style = dashed, label="0"];
0->14 [style = dashed, label="0"];
6->5 [style = bold, label=""];
12->10 [style = bold, label=""];
10->13 [style = bold, label=""];
2->3 [style = solid, label="searchBasedFetchers"];
10->11 [style = solid, label="idFetchers"];
14->11 [style = bold, label=""];
13->14 [style = bold, label=""];
3->11 [style = dashed, label="0"];
}
