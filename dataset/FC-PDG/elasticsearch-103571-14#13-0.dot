digraph {
22 [style = filled, label = "final CountDownLatch latch = new CountDownLatch(1)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final Index index = new Index(\"index\",\"uuid\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "when(indicesService.indexServiceSafe(index)).thenReturn(indexService)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testRetentionLeaseBackgroundSyncActionOnReplica['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "result.runPostReplicaActions(ActionListener.wrap(null,null))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "final IndexService indexService = mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testRetentionLeaseBackgroundSyncActionOnPrimary['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(success.get())@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request,indexShard)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final IndexShard indexShard = mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final ShardId shardId = new ShardId(index,id)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final RetentionLeases retentionLeases = mock()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final RetentionLeaseBackgroundSyncAction.Request request = new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(),retentionLeases)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final IndicesService indicesService = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testRetentionLeaseBackgroundSyncActionOnReplica['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "latch.await()@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "when(indexService.getShard(id)).thenReturn(indexShard)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final AtomicBoolean success = new AtomicBoolean()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "verify(indexShard).persistRetentionLeases()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(Settings.EMPTY,transportService,clusterService,indicesService,threadPool,shardStateAction,new ActionFilters(Collections.emptySet()))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final int id = randomIntBetween(0,4)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(indexShard.shardId()).thenReturn(shardId)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "result.respond(ActionListener.wrap(null,null))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "action.shardOperationOnPrimary(request,indexShard,new LatchedActionListener<>(ActionTestUtils.assertNoFailureListener(null),latch))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18->3 [style = bold, label=""];
17->5 [style = bold, label=""];
11->18 [style = solid, label="id"];
7->11 [style = bold, label=""];
22->21 [style = solid, label="latch"];
8->15 [style = bold, label=""];
18->3 [style = solid, label="shardId"];
16->19 [style = dashed, label="0"];
22->21 [style = bold, label=""];
21->24 [style = bold, label=""];
5->18 [style = bold, label=""];
12->16 [style = bold, label=""];
20->6 [style = bold, label=""];
8->21 [style = solid, label="request"];
9->7 [style = bold, label=""];
18->8 [style = solid, label="shardId"];
10->6 [style = bold, label=""];
2->12 [style = bold, label=""];
8->22 [style = bold, label=""];
17->15 [style = solid, label="indexShard"];
6->14 [style = bold, label=""];
6->13 [style = solid, label="indicesService"];
0->8 [style = solid, label="retentionLeases"];
17->5 [style = solid, label="indexShard"];
17->21 [style = solid, label="indexShard"];
9->7 [style = solid, label="indexService"];
23->6 [style = bold, label=""];
8->15 [style = solid, label="request"];
0->8 [style = bold, label=""];
0->1 [style = solid, label="retentionLeases"];
3->13 [style = bold, label=""];
11->17 [style = bold, label=""];
14->9 [style = bold, label=""];
1->2 [style = bold, label=""];
19->4 [style = bold, label=""];
16->4 [style = bold, label=""];
12->19 [style = bold, label=""];
14->18 [style = solid, label="index"];
13->0 [style = bold, label=""];
15->1 [style = bold, label=""];
}
