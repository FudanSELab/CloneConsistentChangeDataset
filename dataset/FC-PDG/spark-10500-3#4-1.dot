digraph {
17 [style = filled, label = "boostingStrategy.treeStrategy().setCategoricalFeaturesInfo(categoricalFeaturesInfo)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "model.save(jsc.sc(),\"target/tmp/myGradientBoostingClassificationModel\")@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "BoostingStrategy boostingStrategy = BoostingStrategy.defaultParams(\"Regression\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "JavaRDD<LabeledPoint>(( splits = data.randomSplit(new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a5f00d)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "boostingStrategy.getTreeStrategy().setMaxDepth(5)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "System.out.println(\"Learned regression GBT model:\" + model.toDebugString())@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "jsc.stop()@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "System.out.println(\"Test Error: \" + testErr)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "JavaPairRDD<Double,Double> predictionAndLabel = testData.mapToPair(new PairFunction<LabeledPoint,Double,Double>(){@Override public Tuple2<Double,Double> call(LabeledPoint p){return new Tuple2<Double,Double>(model.predict(p.features()),p.label())}})@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "model.save(jsc.sc(),\"target/tmp/myGradientBoostingRegressionModel\")@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "GradientBoostedTreesModel sameModel = GradientBoostedTreesModel.load(jsc.sc(),\"target/tmp/myGradientBoostingRegressionModel\")@@@39@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Double testMSE = predictionAndLabel.map(new Function<Tuple2<Double,Double>,Double>(){@Override public Double call(Tuple2<Double,Double> pl){Double diff = pl._1() - pl._2()return diff * diff}}).reduce(new Function2<Double,Double,Double>(){@Override public Double call(Double a,Double b){return a + b}}) / data.count()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "JavaRDD<LabeledPoint> trainingData = splits(0(@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "System.out.println(\"Learned classification GBT model:\" + model.toDebugString())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final GradientBoostedTreesModel model = GradientBoostedTrees.train(trainingData,boostingStrategy)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "main['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "JavaSparkContext jsc = new JavaSparkContext(sparkConf)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "BoostingStrategy boostingStrategy = BoostingStrategy.defaultParams(\"Classification\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "main['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Double testErr = 1.0 * predictionAndLabel.filter(new Function<Tuple2<Double,Double>,Boolean>(){@Override public Boolean call(Tuple2<Double,Double> pl){return !pl._1().equals(pl._2())}}).count() / testData.count()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "System.out.println(\"Test Mean Squared Error: \" + testMSE)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "SparkConf sparkConf = new SparkConf().setAppName(\"JavaGradientBoostedTreesRegressionExample\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "String(( args@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "main['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "JavaRDD<LabeledPoint> testData = splits(1(@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String datapath = \"data/mllib/sample_libsvm_data.txt\"@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "boostingStrategy.getTreeStrategy().setNumClasses(2)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "boostingStrategy.setNumIterations(3)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "JavaRDD<LabeledPoint> data = MLUtils.loadLibSVMFile(jsc.sc(),datapath).toJavaRDD()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Map<Integer,Integer> categoricalFeaturesInfo = new HashMap<Integer,Integer>()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "SparkConf sparkConf = new SparkConf().setAppName(\"JavaGradientBoostedTreesClassificationExample\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "GradientBoostedTreesModel sameModel = GradientBoostedTreesModel.load(jsc.sc(),\"target/tmp/myGradientBoostingClassificationModel\")@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20->17 [style = bold, label=""];
21->27 [style = dashed, label="0"];
5->26 [style = dashed, label="0"];
17->9 [style = bold, label=""];
14->9 [style = solid, label="trainingData"];
30->26 [style = bold, label=""];
30->6 [style = dotted, label="true"];
8->14 [style = bold, label=""];
1->18 [style = bold, label=""];
8->12 [style = solid, label="splits"];
3->16 [style = bold, label=""];
22->6 [style = dotted, label="true"];
21->1 [style = solid, label="testErr"];
26->4 [style = bold, label=""];
31->9 [style = solid, label="boostingStrategy"];
22->5 [style = bold, label=""];
31->7 [style = bold, label=""];
7->3 [style = bold, label=""];
15->5 [style = bold, label=""];
2->31 [style = dashed, label="0"];
29->28 [style = bold, label=""];
2->9 [style = solid, label="boostingStrategy"];
12->2 [style = bold, label=""];
27->29 [style = solid, label="testMSE"];
0->23 [style = bold, label=""];
10->8 [style = bold, label=""];
11->10 [style = bold, label=""];
5->4 [style = solid, label="sparkConf"];
24->25 [style = bold, label=""];
19->27 [style = bold, label=""];
14->12 [style = bold, label=""];
5->4 [style = bold, label=""];
21->1 [style = bold, label=""];
7->16 [style = bold, label=""];
15->6 [style = dotted, label="true"];
18->13 [style = bold, label=""];
9->19 [style = bold, label=""];
28->24 [style = bold, label=""];
8->14 [style = solid, label="splits"];
2->7 [style = bold, label=""];
20->17 [style = solid, label="categoricalFeaturesInfo"];
27->29 [style = bold, label=""];
4->11 [style = bold, label=""];
16->20 [style = bold, label=""];
12->31 [style = bold, label=""];
26->4 [style = solid, label="sparkConf"];
13->0 [style = bold, label=""];
19->21 [style = bold, label=""];
}
