digraph {
5 [style = filled, label = "Assert.assertEquals(2L,(long)metrics.recordCount())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertBounds(2,DoubleType.get(),3.4D,7.8D,metrics)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertBounds(1,FloatType.get(),null,null,metrics)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertCounts(2,2L,0L,2L,metrics)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertCounts(1,3L,0L,1L,metrics)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertCounts(1,2L,0L,2L,metrics)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertBounds(2,DoubleType.get(),null,null,metrics)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "testMetricsForNaNColumns['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "testMetricsForNaNColumns['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(3L,(long)metrics.recordCount())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Metrics metrics = getMetrics(FLOAT_DOUBLE_ONLY_SCHEMA,FLOAT_DOUBLE_RECORD_1,FLOAT_DOUBLE_RECORD_2,NAN_ONLY_RECORD)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertCounts(2,3L,0L,1L,metrics)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testColumnBoundsWithNaNValueAtEnd['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertBounds(1,FloatType.get(),1.2F,Float.NaN,metrics)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertBounds(2,DoubleType.get(),3.4D,Double.NaN,metrics)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertBounds(1,FloatType.get(),1.2F,5.6F,metrics)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertBounds(2,DoubleType.get(),Double.NaN,Double.NaN,metrics)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Metrics metrics = getMetrics(FLOAT_DOUBLE_ONLY_SCHEMA,NAN_ONLY_RECORD,NAN_ONLY_RECORD)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertBounds(1,FloatType.get(),Float.NaN,Float.NaN,metrics)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "fileFormat() == FileFormat.ORC@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
4->9 [style = bold, label=""];
16->13 [style = bold, label=""];
0->6 [style = bold, label=""];
6->1 [style = solid, label="metrics"];
12->17 [style = bold, label=""];
1->3 [style = bold, label=""];
18->19 [style = bold, label=""];
1->9 [style = dashed, label="0"];
14->18 [style = dotted, label="false"];
6->8 [style = solid, label="metrics"];
12->11 [style = solid, label="metrics"];
9->8 [style = bold, label=""];
2->4 [style = bold, label=""];
14->10 [style = dotted, label="true"];
6->12 [style = dashed, label="0"];
6->5 [style = bold, label=""];
5->2 [style = bold, label=""];
12->13 [style = solid, label="metrics"];
5->17 [style = dashed, label="0"];
12->10 [style = solid, label="metrics"];
14->19 [style = dotted, label="false"];
11->10 [style = bold, label=""];
2->16 [style = dashed, label="0"];
7->6 [style = bold, label=""];
6->4 [style = solid, label="metrics"];
12->18 [style = solid, label="metrics"];
6->3 [style = solid, label="metrics"];
12->16 [style = solid, label="metrics"];
12->19 [style = solid, label="metrics"];
14->11 [style = dotted, label="true"];
3->8 [style = dashed, label="0"];
14->18 [style = bold, label=""];
4->1 [style = bold, label=""];
15->12 [style = bold, label=""];
6->9 [style = solid, label="metrics"];
4->13 [style = dashed, label="0"];
3->11 [style = dashed, label="0"];
14->11 [style = bold, label=""];
13->14 [style = bold, label=""];
6->2 [style = solid, label="metrics"];
17->16 [style = bold, label=""];
}
