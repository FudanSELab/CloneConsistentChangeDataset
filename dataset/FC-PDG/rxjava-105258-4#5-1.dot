digraph {
6 [style = filled, label = "ts2.awaitDone(5,TimeUnit.SECONDS)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "to1.assertValues(1,2,3,4,5)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final TestObserver<Integer> to2 = new TestObserver<Integer>()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "ts1.assertNoErrors()@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ts2.assertNoErrors()@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final TestSubscriber<Integer> ts1 = new TestSubscriber<Integer>(){@Override public void onNext(Integer t){if (values().size() == 2) {source.doOnCancel(new Action(){@Override public void run(){child2Unsubscribed.set(true)}}).take(5).subscribe(ts2)}super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@174992ft}}@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final TestSubscriber<Integer> ts2 = new TestSubscriber<Integer>()@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "backpressureTwoConsumers['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "to2.assertNoErrors()@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertTrue(child1Unsubscribed.get())@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final AtomicBoolean child1Unsubscribed = new AtomicBoolean()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ts1.assertValues(1,2,3,4,5)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "source.doOnDispose(new Action(){@Override public void run(){child1Unsubscribed.set(true)}}).take(5).subscribe(to1)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "to1.assertNoErrors()@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "ts1.awaitDone(5,TimeUnit.SECONDS)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "to2.awaitDone(5,TimeUnit.SECONDS)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "final Observable<Integer> source = Observable.range(1,100).doOnNext(new Consumer<Integer>(){@Override public void accept(Integer t1){sourceEmission.incrementAndGet()}}).doOnDispose(new Action(){@Override public void run(){sourceUnsubscribed.set(true)}}).share()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final TestSubscriber<Integer> ts2 = new TestSubscriber<>()@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "source.doOnCancel(new Action(){@Override public void run(){child1Unsubscribed.set(true)}}).take(5).subscribe(ts1)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final AtomicBoolean sourceUnsubscribed = new AtomicBoolean()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(8,sourceEmission.get())@@@49@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "backpressureTwoConsumers['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertTrue(child2Unsubscribed.get())@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "backpressureTwoConsumers['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final TestObserver<Integer> to1 = new TestObserver<Integer>(){@Override public void onNext(Integer t){if (values().size() == 2) {source.doOnDispose(new Action(){@Override public void run(){child2Unsubscribed.set(true)}}).take(5).subscribe(to2)}super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@17499f9t}}@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final Flowable<Integer> source = Flowable.range(1,100).doOnNext(new Consumer<Integer>(){@Override public void accept(Integer t1){sourceEmission.incrementAndGet()}}).doOnCancel(new Action(){@Override public void run(){sourceUnsubscribed.set(true)}}).share()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ts2.assertValues(4,5,6,7,8)@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "to1.awaitDone(5,TimeUnit.SECONDS)@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final AtomicInteger sourceEmission = new AtomicInteger()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(sourceUnsubscribed.get())@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final AtomicBoolean child2Unsubscribed = new AtomicBoolean()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "to2.assertValues(4,5,6,7,8)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8->16 [style = bold, label=""];
1->4 [style = bold, label=""];
17->5 [style = bold, label=""];
0->9 [style = bold, label=""];
20->17 [style = bold, label=""];
30->22 [style = bold, label=""];
15->17 [style = solid, label="ts2"];
15->20 [style = dashed, label="0"];
4->25 [style = bold, label=""];
28->30 [style = bold, label=""];
2->6 [style = bold, label=""];
4->15 [style = bold, label=""];
18->12 [style = bold, label=""];
8->24 [style = dashed, label="0"];
9->8 [style = bold, label=""];
17->31 [style = dashed, label="0"];
2->30 [style = dashed, label="0"];
9->23 [style = dashed, label="0"];
6->22 [style = dashed, label="0"];
11->18 [style = bold, label=""];
14->7 [style = bold, label=""];
25->31 [style = bold, label=""];
20->17 [style = solid, label="ts2"];
24->16 [style = bold, label=""];
19->1 [style = bold, label=""];
15->17 [style = bold, label=""];
5->2 [style = bold, label=""];
12->10 [style = bold, label=""];
26->12 [style = bold, label=""];
23->24 [style = bold, label=""];
15->25 [style = dashed, label="0"];
0->23 [style = bold, label=""];
29->19 [style = bold, label=""];
5->28 [style = dashed, label="0"];
22->27 [style = bold, label=""];
17->5 [style = solid, label="ts1"];
31->28 [style = solid, label="to1"];
6->11 [style = bold, label=""];
10->0 [style = bold, label=""];
4->20 [style = bold, label=""];
14->29 [style = bold, label=""];
3->13 [style = bold, label=""];
25->31 [style = solid, label="to2"];
7->29 [style = dashed, label="0"];
31->28 [style = bold, label=""];
11->27 [style = dashed, label="0"];
32->13 [style = bold, label=""];
7->19 [style = bold, label=""];
13->14 [style = bold, label=""];
18->26 [style = dashed, label="0"];
21->13 [style = bold, label=""];
27->26 [style = bold, label=""];
}
