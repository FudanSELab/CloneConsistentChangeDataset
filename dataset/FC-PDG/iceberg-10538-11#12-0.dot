digraph {
23 [style = filled, label = "iter = ORC.read(location).project(schemaWithoutConstants).split(task.start(),task.length()).createBatchedReaderFunc(null).recordsPerBatch(batchSize).filter(task.residual()).caseSensitive(caseSensitive).build()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "open['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "throw new UnsupportedOperationException(\"Format: \" + task.file().format() + \" not supported for batched reads\")@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "task.file().format() == FileFormat.PARQUET@@@19@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "return iter.iterator()@@@33@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Schema readSchemaWithoutConstantAndMetadataFields = TypeUtil.selectNot(readSchema,Sets.union(idToConstant.keySet(),MetadataColumns.metadataFieldIds()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "idToConstant = ImmutableMap.of()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "projectsIdentityPartitionColumns@@@10@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Schema readSchema@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "builder.withNameMapping(NameMappingParser.fromJson(nameMapping))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Schema partitionSchema = TypeUtil.select(expectedSchema,idColumns)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Set<Integer> idColumns = spec.identitySourceIds()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "boolean projectsIdentityPartitionColumns = !partitionSchema.columns().isEmpty()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "newOrcIterable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "open['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Schema schemaWithoutConstants = TypeUtil.selectNot(expectedSchema,idToConstant.keySet())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "InputFile location = getInputFile(task)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "return ORC.read(location).project(readSchemaWithoutConstantAndMetadataFields).split(task.start(),task.length()).createReaderFunc(null).filter(task.residual()).caseSensitive(caseSensitive).build()@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Preconditions.checkNotNull(location,\"Could not find InputFile associated with FileScanTask\")@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Parquet.ReadBuilder builder = Parquet.read(location).project(expectedSchema).split(task.start(),task.length()).createBatchedReaderFunc(null).recordsPerBatch(batchSize).filter(task.residual()).caseSensitive(caseSensitive).reuseContainers()@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "Map<Integer,?> idToConstant@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "nameMapping != null@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "PartitionSpec spec = task.spec()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "idToConstant = PartitionUtil.constantsMap(task,null)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "InputFile location@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Map<Integer,?> idToConstant@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "iter = builder.build()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "InputFileBlockHolder.set(file.path().toString(),task.start(),task.length())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "DataFile file = task.file()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "CloseableIterable<ColumnarBatch> iter@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "task.file().format() == FileFormat.ORC@@@26@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Parquet.ReadBuilder builder = Parquet.read(location).project(expectedSchema).split(task.start(),task.length()).createBatchedReaderFunc(null).recordsPerBatch(batchSize).filter(task.residual()).caseSensitive(caseSensitive).reuseContainers()@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "FileScanTask task@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "FileScanTask task@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
2->20 [style = solid, label="task"];
1->14 [style = solid, label="projectsIdentityPartitionColumns"];
27->32 [style = bold, label=""];
4->24 [style = bold, label=""];
3->1 [style = bold, label=""];
0->3 [style = solid, label="idColumns"];
8->19 [style = bold, label=""];
13->26 [style = dotted, label="true"];
27->33 [style = dotted, label="true"];
11->26 [style = dashed, label="0"];
12->15 [style = bold, label=""];
31->32 [style = solid, label="readSchema"];
26->9 [style = bold, label=""];
24->6 [style = solid, label="location"];
12->30 [style = dashed, label="0"];
14->21 [style = dotted, label="false"];
11->9 [style = bold, label=""];
9->8 [style = bold, label=""];
25->16 [style = bold, label=""];
13->11 [style = bold, label=""];
22->23 [style = bold, label=""];
32->30 [style = bold, label=""];
20->4 [style = bold, label=""];
1->17 [style = bold, label=""];
14->20 [style = dotted, label="true"];
5->19 [style = bold, label=""];
27->28 [style = dotted, label="true"];
7->22 [style = bold, label=""];
7->5 [style = bold, label=""];
2->24 [style = solid, label="task"];
9->18 [style = bold, label=""];
7->23 [style = dotted, label="true"];
10->16 [style = bold, label=""];
10->2 [style = dotted, label="true"];
17->14 [style = bold, label=""];
13->26 [style = bold, label=""];
13->7 [style = bold, label=""];
13->8 [style = dotted, label="true"];
27->29 [style = dotted, label="true"];
6->13 [style = bold, label=""];
15->0 [style = bold, label=""];
23->19 [style = bold, label=""];
27->31 [style = dotted, label="true"];
9->18 [style = dotted, label="true"];
13->11 [style = dotted, label="true"];
2->33 [style = dashed, label="0"];
18->8 [style = bold, label=""];
7->22 [style = dotted, label="true"];
7->5 [style = dotted, label="false"];
24->6 [style = bold, label=""];
25->2 [style = dotted, label="true"];
16->12 [style = bold, label=""];
14->21 [style = bold, label=""];
13->7 [style = dotted, label="false"];
14->20 [style = bold, label=""];
21->4 [style = bold, label=""];
13->9 [style = dotted, label="true"];
}
