digraph {
1 [style = filled, label = "assertThat(r1.size(),is(1))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(result1.getIdentifier(),is(result2.getIdentifier()))@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final RexNode ref1 = RexInputRef.of(0,rel.getRowType().getFieldList())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(result1.getQualifiedName().equals(EMP_QNAME))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(result2.getIndex(),is(7))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testExpressionLineageTwoColumnsSwapped['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(result1.getQualifiedName(),EMP_QNAME)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "testExpressionLineageTwoColumns['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertThat(r2.size(),is(1))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(result2.getIndex(),is(3))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(result1.getIndex(),is(3))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(result2.getQualifiedName(),EMP_QNAME)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "final RelNode rel = convertSql(\"select mgr, deptno from emp\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(result1.getIndex(),is(7))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final RelNode rel = convertSql(\"select deptno, mgr from emp\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final RexNode ref2 = RexInputRef.of(1,rel.getRowType().getFieldList())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final Set<RexNode> r1 = mq.getExpressionLineage(rel,ref1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final RexTableInputRef result1 = (RexTableInputRef)r1.iterator().next()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final RelMetadataQuery mq = RelMetadataQuery.instance()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final RexTableInputRef result2 = (RexTableInputRef)r2.iterator().next()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(result2.getQualifiedName().equals(EMP_QNAME))@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testExpressionLineageTwoColumns['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final Set<RexNode> r2 = mq.getExpressionLineage(rel,ref2)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->8 [style = bold, label=""];
18->3 [style = bold, label=""];
2->20 [style = bold, label=""];
22->15 [style = bold, label=""];
7->17 [style = bold, label=""];
16->11 [style = bold, label=""];
21->19 [style = bold, label=""];
11->14 [style = bold, label=""];
4->6 [style = bold, label=""];
8->3 [style = bold, label=""];
3->15 [style = bold, label=""];
5->18 [style = bold, label=""];
3->22 [style = dashed, label="0"];
0->20 [style = dashed, label="0"];
12->1 [style = bold, label=""];
2->17 [style = dashed, label="0"];
1->7 [style = bold, label=""];
11->12 [style = solid, label="rel"];
19->12 [style = solid, label="rel"];
20->4 [style = bold, label=""];
8->22 [style = bold, label=""];
9->12 [style = solid, label="ref1"];
2->0 [style = bold, label=""];
17->0 [style = bold, label=""];
19->14 [style = bold, label=""];
11->6 [style = solid, label="rel"];
0->4 [style = bold, label=""];
11->19 [style = dashed, label="0"];
7->2 [style = bold, label=""];
19->6 [style = solid, label="rel"];
6->13 [style = bold, label=""];
4->6 [style = solid, label="ref2"];
13->5 [style = bold, label=""];
8->18 [style = dashed, label="0"];
14->9 [style = bold, label=""];
9->12 [style = bold, label=""];
10->11 [style = bold, label=""];
}
