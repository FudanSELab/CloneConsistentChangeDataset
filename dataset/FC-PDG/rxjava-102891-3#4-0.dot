digraph {
7 [style = filled, label = "firstGroupsCompleteAndParentSlowToThenEmitFinalGroupsAndThenComplete['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "firstGroupsCompleteAndParentSlowToThenEmitFinalGroupsAndThenComplete['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertEquals(6,results.size())@@@61@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final CountDownLatch first = new CountDownLatch(2)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "firstGroupsCompleteAndParentSlowToThenEmitFinalGroupsAndThenComplete['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final ArrayList<String> results = new ArrayList<String>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Flowable.unsafeCreate(new Publisher<Integer>(){@Override public void subscribe(Subscriber<? super Integer> sub){sub.onSubscribe(new BooleanSubscription())sub.onNext(1)sub.onNext(2)sub.onNext(1)sub.onNext(2)try {first.await()}catch (InterruptedException e) sub.onNext(3)sub.onNext(3)sub.onComplete()}}).groupBy(new Function<Integer,Integer>(){@Override public Integer apply(Integer t){return t}}).flatMap(new Function<GroupedFlowable<Integer,Integer>,Flowable<String>>(){@Override public Flowable<String> apply(final GroupedFlowable<Integer,Integer> group){if (group.getKey() < 3) {return group.map(new Function<Integer,String>(){@Override public String apply(Integer t1){return \"first groups: \" + t1}}).take(2).doOnComplete(new Action(){@Override public void run(){first.countDown()}})}{return group.map(new Function<Integer,String>(){@Override public String apply(Integer t1){return \"last group: \" + t1}})}}}).blockingForEach(new Consumer<String>(){@Override public void accept(String s){results.add(s)}})@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Observable.unsafeCreate(new ObservableSource<Integer>(){@Override public void subscribe(Observer<? super Integer> sub){sub.onSubscribe(Disposable.empty())sub.onNext(1)sub.onNext(2)sub.onNext(1)sub.onNext(2)try {first.await()}catch (InterruptedException e) sub.onNext(3)sub.onNext(3)sub.onComplete()}}).groupBy(new Function<Integer,Integer>(){@Override public Integer apply(Integer t){return t}}).flatMap(new Function<GroupedObservable<Integer,Integer>,Observable<String>>(){@Override public Observable<String> apply(final GroupedObservable<Integer,Integer> group){if (group.getKey() < 3) {return group.map(new Function<Integer,String>(){@Override public String apply(Integer t1){return \"first groups: \" + t1}}).take(2).doOnComplete(new Action(){@Override public void run(){first.countDown()}})}{return group.map(new Function<Integer,String>(){@Override public String apply(Integer t1){return \"last group: \" + t1}})}}}).blockingForEach(new Consumer<String>(){@Override public void accept(String s){results.add(s)}})@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "System.out.println(\"Results: \" + results)@@@60@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->5 [style = bold, label=""];
5->2 [style = solid, label="results"];
2->0 [style = bold, label=""];
5->3 [style = bold, label=""];
8->2 [style = bold, label=""];
3->8 [style = dashed, label="0"];
5->8 [style = bold, label=""];
7->4 [style = bold, label=""];
6->4 [style = bold, label=""];
3->2 [style = bold, label=""];
1->4 [style = bold, label=""];
}
