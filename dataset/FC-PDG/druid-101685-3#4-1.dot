digraph {
4 [style = filled, label = "testQuery(\"SELECT NVL(dim2, dim1), COUNT(*) FROM druid.foo GROUP BY NVL(dim2, dim1)\",ImmutableList.of(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(querySegmentSpec(Filtration.eternity())).setGranularity(Granularities.ALL).setVirtualColumns(expressionVirtualColumn(\"v0\",\"case_searched(notnull(\"dim2\"),\"dim2\",\"dim1\")\",ValueType.STRING)).setDimensions(dimensions(new DefaultDimensionSpec(\"v0\",\"v0\",ValueType.STRING))).setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\"))).setContext(QUERY_CONTEXT_DEFAULT).build()),NullHandling.replaceWithDefault()? ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@933d6e,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@933d73,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@933d78,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@933d7d): ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@933d85,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@933d8a,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@933d8f,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@933d94))@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "cannotVectorize()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "testQuery(\"SELECT COALESCE(dim2, dim1), COUNT(*) FROM druid.foo GROUP BY COALESCE(dim2, dim1)\",ImmutableList.of(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(querySegmentSpec(Filtration.eternity())).setGranularity(Granularities.ALL).setVirtualColumns(expressionVirtualColumn(\"v0\",\"case_searched(notnull(\"dim2\"),\"dim2\",\"dim1\")\",ValueType.STRING)).setDimensions(dimensions(new DefaultDimensionSpec(\"v0\",\"v0\",ValueType.STRING))).setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\"))).setContext(QUERY_CONTEXT_DEFAULT).build()),NullHandling.replaceWithDefault()? ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@933cfd,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@933d02,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@933d07,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@933d0c): ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@933d14,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@933d19,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@933d1e,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@933d23))@@@4@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testCoalesceColumns['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "testNvlColumns['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testCoalesceColumns['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1->4 [style = dashed, label="0"];
3->2 [style = bold, label=""];
0->1 [style = bold, label=""];
2->1 [style = bold, label=""];
5->4 [style = bold, label=""];
}
