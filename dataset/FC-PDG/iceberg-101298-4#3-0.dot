digraph {
20 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\",29),SPEC,true).eval(FILE)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,greaterThanOrEqual(\"id\",75)).eval(FILE)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,equal(\"id\",80)).eval(FILE)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "Assert.assertFalse(\"Should not read: id range above upper bound (85 < 79)\",shouldRead)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,equal(\"id\",29)).eval(FILE)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "boolean shouldRead = new InclusiveManifestEvaluator(SPEC,equal(\"id\",5)).eval(FILE)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,greaterThanOrEqual(\"id\",79)).eval(FILE)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertFalse(\"Should not read: id above upper bound\",shouldRead)@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\",75),SPEC,true).eval(FILE)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "Assert.assertTrue(\"Should read: one possible id\",shouldRead)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testIntegerEq['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\",79),SPEC,true).eval(FILE)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "boolean shouldRead = new InclusiveManifestEvaluator(SPEC,greaterThanOrEqual(\"id\",85)).eval(FILE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\",30),SPEC,true).eval(FILE)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\",5),SPEC,true).eval(FILE)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertTrue(\"Should read: id equal to upper bound\",shouldRead)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\",85),SPEC,true).eval(FILE)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\",80),SPEC,true).eval(FILE)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Assert.assertFalse(\"Should not read: id below lower bound\",shouldRead)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testIntegerEq['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "Assert.assertFalse(\"Should not read: id range above upper bound (80 > 79)\",shouldRead)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,equal(\"id\",85)).eval(FILE)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Assert.assertFalse(\"Should not read: id above upper bound\",shouldRead)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,greaterThanOrEqual(\"id\",80)).eval(FILE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,equal(\"id\",75)).eval(FILE)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(\"Should read: id between lower and upper bounds\",shouldRead)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertTrue(\"Should read: may possible ids\",shouldRead)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,equal(\"id\",30)).eval(FILE)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Assert.assertFalse(\"Should not read: id below lower bound\",shouldRead)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,equal(\"id\",79)).eval(FILE)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "testIntegerGtEq['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertTrue(\"Should read: id equal to lower bound\",shouldRead)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3->29 [style = dashed, label="0"];
25->28 [style = solid, label="shouldRead"];
4->18 [style = dashed, label="0"];
8->16 [style = bold, label=""];
30->24 [style = bold, label=""];
10->20 [style = bold, label=""];
25->28 [style = bold, label=""];
31->25 [style = bold, label=""];
12->23 [style = dashed, label="0"];
19->10 [style = solid, label="shouldRead"];
9->11 [style = bold, label=""];
12->20 [style = dashed, label="0"];
29->26 [style = solid, label="shouldRead"];
21->19 [style = bold, label=""];
23->27 [style = bold, label=""];
27->30 [style = bold, label=""];
8->3 [style = bold, label=""];
3->16 [style = dashed, label="0"];
0->15 [style = dashed, label="0"];
10->28 [style = dashed, label="0"];
2->18 [style = bold, label=""];
19->10 [style = bold, label=""];
20->14 [style = bold, label=""];
6->17 [style = dashed, label="0"];
24->29 [style = bold, label=""];
8->24 [style = dashed, label="0"];
16->2 [style = bold, label=""];
2->4 [style = bold, label=""];
14->27 [style = dashed, label="0"];
3->2 [style = solid, label="shouldRead"];
1->13 [style = bold, label=""];
22->13 [style = solid, label="shouldRead"];
30->24 [style = solid, label="shouldRead"];
1->22 [style = dashed, label="0"];
4->5 [style = solid, label="shouldRead"];
29->26 [style = bold, label=""];
17->7 [style = bold, label=""];
5->1 [style = bold, label=""];
13->17 [style = bold, label=""];
6->7 [style = solid, label="shouldRead"];
20->14 [style = solid, label="shouldRead"];
14->0 [style = bold, label=""];
3->2 [style = bold, label=""];
11->19 [style = dashed, label="0"];
11->10 [style = bold, label=""];
17->7 [style = solid, label="shouldRead"];
10->12 [style = bold, label=""];
18->5 [style = bold, label=""];
28->23 [style = bold, label=""];
0->30 [style = dashed, label="0"];
12->14 [style = bold, label=""];
0->8 [style = bold, label=""];
11->25 [style = dashed, label="0"];
14->15 [style = bold, label=""];
11->10 [style = solid, label="shouldRead"];
1->13 [style = solid, label="shouldRead"];
23->27 [style = solid, label="shouldRead"];
13->6 [style = bold, label=""];
18->5 [style = solid, label="shouldRead"];
6->7 [style = bold, label=""];
22->13 [style = bold, label=""];
5->22 [style = bold, label=""];
2->26 [style = dashed, label="0"];
4->5 [style = bold, label=""];
15->8 [style = solid, label="shouldRead"];
16->2 [style = solid, label="shouldRead"];
15->8 [style = bold, label=""];
12->14 [style = solid, label="shouldRead"];
0->8 [style = solid, label="shouldRead"];
}
