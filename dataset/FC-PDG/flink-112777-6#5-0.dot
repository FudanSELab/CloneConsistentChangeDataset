digraph {
2 [style = filled, label = "TimeDomainAdaptor timeAdaptor@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "verify(mockWindowFunction,times(1)).process(eq(0),eq(new TimeWindow(0,2)),anyInternalWindowContext(),intIterable(0),WindowOperatorContractTest.anyCollector())@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertTrue(testHarness.extractOutputStreamRecords().isEmpty())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "doAnswer(new Answer<TriggerResult>(){@Override public TriggerResult answer(InvocationOnMock invocation){return TriggerResult.FIRE}}).when(mockTrigger).onElement(Matchers.anyObject(),anyLong(),anyTimeWindow(),anyTriggerContext())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "doAnswer(new Answer<Void>(){@Override public Void answer(InvocationOnMock invocation){@SuppressWarnings(\"unchecked\") Collector<String> out = invocation.getArgumentAt(3,)out.collect(\"Hallo\")out.collect(\"Ciao\")return null}}).when(mockWindowFunction).apply(eq(0),eq(new TimeWindow(0,2)),intIterable(0),WindowOperatorContractTest.anyCollector())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "InternalWindowFunction<Iterable<Integer>,String,Integer,TimeWindow> mockWindowFunction = mockWindowFunction()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "verify(mockWindowFunction,never()).process(anyInt(),anyTimeWindow(),anyInternalWindowContext(),anyIntIterable(),WindowOperatorContractTest.anyCollector())@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Integer,String> testHarness = createWindowOperator(mockAssigner,mockTrigger,0L,mockWindowFunction)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(testHarness.extractOutputStreamRecords(),contains(isStreamRecord(\"Hallo\",1L),isStreamRecord(\"Ciao\",1L)))@@@26@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "verify(mockWindowFunction,never()).apply(anyInt(),anyTimeWindow(),anyIntIterable(),WindowOperatorContractTest.anyCollector())@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "verify(mockWindowFunction,times(1)).apply(eq(0),eq(new TimeWindow(0,2)),intIterable(0),WindowOperatorContractTest.anyCollector())@@@25@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testHarness.open()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "WindowAssigner<Integer,TimeWindow> mockAssigner = mockTimeWindowAssigner()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testEmittingFromWindowFunction['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testHarness.processElement(new StreamRecord<>(0,0L))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testEmittingFromWindowFunction['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Collections.singletonList(new TimeWindow(0,2)))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "timeAdaptor.shouldRegisterTimerOnElement(mockTrigger,1)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "timeAdaptor.advanceTime(testHarness,1L)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testEmittingFromWindowFunction['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "timeAdaptor.shouldFireOnTime(mockTrigger)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Trigger<Integer,TimeWindow> mockTrigger = mockTrigger()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->9 [style = bold, label=""];
9->10 [style = solid, label="mockWindowFunction"];
20->13 [style = bold, label=""];
21->6 [style = bold, label=""];
0->19 [style = bold, label=""];
13->10 [style = solid, label="mockAssigner"];
0->11 [style = bold, label=""];
6->0 [style = bold, label=""];
11->17 [style = dashed, label="0"];
9->10 [style = bold, label=""];
11->15 [style = bold, label=""];
0->7 [style = bold, label=""];
7->14 [style = bold, label=""];
8->17 [style = bold, label=""];
18->2 [style = dotted, label="true"];
6->5 [style = bold, label=""];
4->12 [style = solid, label="mockTrigger"];
1->6 [style = bold, label=""];
19->14 [style = bold, label=""];
10->16 [style = bold, label=""];
5->0 [style = bold, label=""];
16->1 [style = bold, label=""];
7->19 [style = dashed, label="0"];
12->8 [style = bold, label=""];
1->21 [style = bold, label=""];
4->10 [style = solid, label="mockTrigger"];
14->12 [style = bold, label=""];
17->15 [style = bold, label=""];
18->13 [style = bold, label=""];
3->13 [style = bold, label=""];
4->5 [style = solid, label="mockTrigger"];
10->8 [style = solid, label="testHarness"];
8->11 [style = bold, label=""];
3->2 [style = dotted, label="true"];
13->4 [style = bold, label=""];
}
