digraph {
7 [style = filled, label = "long sum = 0@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "List<Long> resultCollection = env.generateSequence(1,10).rebalance().map(new FailingMapper2<>()).reduce(null).collect()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "{FailingMapper2.failuresBeforeSuccess = 1}@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "sum += l@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "long sum = 0@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "{ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()env.setParallelism(4)env.setRestartStrategy(RestartStrategies.noRestart())env.generateSequence(1,10).rebalance().map(new FailingMapper1<>()).reduce(null).output(new LocalCollectionOutputFormat<>(resultCollection))try {JobExecutionResult res = env.execute()String msg = res == null? \"null result\": \"result in \" + res.getNetRuntime() + \" ms\"fail(\"The program should have failed, but returned \" + msg)}catch (JobExecutionException e) }@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "env.setParallelism(4)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "executeAndRunAssertions(env)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertEquals(55,sum)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "{ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()env.setParallelism(4)env.setRestartStrategy(RestartStrategies.noRestart())env.generateSequence(1,10).rebalance().map(new FailingMapper1<>()).reduce((ReduceFunction<Long>)null).output(new LocalCollectionOutputFormat<>(resultCollection))executeAndRunAssertions(env)long sum = 0for (long l : resultCollection){sum += l}assertEquals(55,sum)}@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testFailedRunThenSuccessfulRun['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(55,sum)@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "env.generateSequence(1,10).rebalance().map(new FailingMapper2<>()).reduce(null).output(new LocalCollectionOutputFormat<>(resultCollection))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "sum += l@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "{FailingMapper1.failuresBeforeSuccess = 1}@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "{FailingMapper2.failuresBeforeSuccess = 1}@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "testRestart['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "List<Long> resultCollection = new ArrayList<>()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testRestart['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0->3 [style = bold, label=""];
8->16 [style = bold, label=""];
5->12 [style = dashed, label="0"];
3->1 [style = bold, label=""];
8->17 [style = solid, label="resultCollection"];
16->17 [style = solid, label="env"];
14->10 [style = bold, label=""];
7->0 [style = bold, label=""];
16->17 [style = bold, label=""];
19->8 [style = bold, label=""];
8->16 [style = solid, label="resultCollection"];
9->6 [style = bold, label=""];
12->13 [style = bold, label=""];
6->5 [style = bold, label=""];
5->2 [style = bold, label=""];
14->10 [style = solid, label="sum"];
0->3 [style = solid, label="sum"];
9->2 [style = solid, label="env"];
15->9 [style = bold, label=""];
8->5 [style = solid, label="resultCollection"];
8->9 [style = bold, label=""];
4->8 [style = bold, label=""];
2->7 [style = bold, label=""];
13->14 [style = bold, label=""];
17->18 [style = bold, label=""];
10->11 [style = bold, label=""];
6->12 [style = bold, label=""];
}
