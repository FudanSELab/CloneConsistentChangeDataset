digraph {
121 [style = filled, label = "Assert.assertEquals(toSlaveMessage.getTgtName(),newMasterInstance)@@@78@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
106 [style = filled, label = "pipeline.handle(event)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
143 [style = filled, label = "String newMasterInstance = getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db,p),MasterSlaveSMD.States.MASTER.name())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(toSlaveMessage.getToState(),MasterSlaveSMD.States.SLAVE.name())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "Assert.assertNotNull(masterInstance)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(toSlaveMessage.getTgtName(),newMasterInstance)@@@110@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(toSlaveMessage.getTgtName(),masterInstance)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
140 [style = filled, label = "event.addAttribute(AttributeName.CURRENT_STATE.name(),new CurrentStateOutput())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
117 [style = filled, label = "Assert.assertEquals(toSlaveMessage.getToState(),MasterSlaveSMD.States.SLAVE.name())@@@80@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
60 [style = filled, label = "pipeline.addStage(new IntermediateStateCalcStage())@@@93@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "pipeline.addStage(new ResourceMessageGenerationPhase())@@@94@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
110 [style = filled, label = "currentStateOutput = populateCurrentStateFromBestPossible(bestPossibleStateOutput)@@@88@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assert.assertEquals(relayMessage.getFromState(),MasterSlaveSMD.States.SLAVE.name())@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
136 [style = filled, label = "p2pMessageEnabled@@@32@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "messages = messageOutput.getMessages(db,p)@@@99@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(messages.size(),0)@@@83@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
91 [style = filled, label = "currentStateOutput.setPendingMessage(db,p,masterInstance,toSlaveMessage)@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
105 [style = filled, label = "pipeline = new Pipeline(\"test\")@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
134 [style = filled, label = "Message relayMessage = message.getRelayMessage(newMasterInstance)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
104 [style = filled, label = "bestPossibleStateOutput.setState(db,p,instanceStateMap)@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
122 [style = filled, label = "Assert.assertEquals(relayMessage.getFromState(),MasterSlaveSMD.States.SLAVE.name())@@@86@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "currentStateOutput.setPendingRelayMessage(db,p,masterInstance,relayMessage)@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Map<String,String> instanceStateMap = bestPossibleStateOutput.getInstanceStateMap(db,p)@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "String masterInstance = getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db,p),MasterSlaveSMD.States.MASTER.name())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "pipeline.handle(event)@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
119 [style = filled, label = "Assert.assertEquals(relayMessage.getRelaySrcHost(),newMasterInstance)@@@85@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "Assert.assertEquals(toSlaveMessage.getFromState(),MasterSlaveSMD.States.MASTER.name())@@@111@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
82 [style = filled, label = "pipeline.handle(event)@@@97@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "messageOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name())@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "Assert.assertEquals(messages.size(),1)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
94 [style = filled, label = "List<Message> messages = messageOutput.getMessages(db,p)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "pipeline.handle(event)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(messages.size(),0)@@@54@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
71 [style = filled, label = "messageOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name())@@@98@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "event.addAttribute(AttributeName.ControllerDataProvider.name(),new ResourceControllerDataProvider())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
123 [style = filled, label = "Assert.assertNotNull(relayMessage)@@@82@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
65 [style = filled, label = "Assert.assertEquals(relayMessage.getTgtName(),newMasterInstance)@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
138 [style = filled, label = "CurrentStateOutput currentStateOutput = populateCurrentStateFromBestPossible(bestPossibleStateOutput)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
142 [style = filled, label = "Boolean p2pMessageEnabled@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "pipeline.addStage(new MessageThrottleStage())@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(toOfflineMessage.getTgtName(),masterInstance)@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
114 [style = filled, label = "testAvoidDuplicatedMessageWithP2PEnabled['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
135 [style = filled, label = "Map<String,Resource> resourceMap = getResourceMap(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@691049,numPartition,BuiltInStateModelDefinitions.MasterSlave.name(),clusterConfig,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "event.addAttribute(AttributeName.BEST_POSSIBLE_STATE.name(),bestPossibleStateOutput)@@@86@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "preSetup()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(toOfflineMessage.getToState(),MasterSlaveSMD.States.OFFLINE.name())@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "messageOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name())@@@74@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "Assert.assertTrue(message.getRelayMessages().entrySet().isEmpty())@@@44@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "Assert.assertEquals(message.getFromState(),MasterSlaveSMD.States.MASTER.name())@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "instanceStateMap.put(newMasterInstance,\"SLAVE\")@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "admin.enableInstance(_clusterName,masterInstance,false)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "Message toOfflineMessage = messages.get(0)@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "pipeline.addStage(new MessageThrottleStage())@@@92@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Assert.assertEquals(toSlaveMessage.getRelayMessages().entrySet().size(),1)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
120 [style = filled, label = "Assert.assertEquals(messages.size(),1)@@@76@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "currentStateOutput.setCurrentState(db,p,slaveInstance,\"SLAVE\")@@@99@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
118 [style = filled, label = "Assert.assertEquals(relayMessage.getTgtName(),slaveInstance)@@@84@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "Assert.assertNotNull(relayMessage)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "pipeline.addStage(new MessageSelectionStage())@@@95@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Assert.assertEquals(messages.size(),0)@@@96@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "pipeline = new Pipeline(\"test\")@@@92@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
141 [style = filled, label = "Assert.assertNotNull(relayMessage)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "currentStateOutput.setCurrentState(db,p,masterInstance,\"SLAVE\")@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "pipeline.addStage(new MessageThrottleStage())@@@96@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
115 [style = filled, label = "toSlaveMessage = messages.get(0)@@@77@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
47 [style = filled, label = "messageOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name())@@@94@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "pipeline.addStage(new IntermediateStateCalcStage())@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "ResourceControllerDataProvider cache = event.getAttribute(AttributeName.ControllerDataProvider.name())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "event.addAttribute(AttributeName.CURRENT_STATE.name(),currentStateOutput)@@@90@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
128 [style = filled, label = "event.addAttribute(AttributeName.RESOURCES.name(),resourceMap)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(),resourceMap)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
108 [style = filled, label = "pipeline.addStage(new MessageSelectionStage())@@@91@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "MessageOutput messageOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "pipeline = createPipeline()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Message message = messages.get(0)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "pipeline.handle(event)@@@73@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "Assert.assertEquals(message.getToState(),MasterSlaveSMD.States.SLAVE.name())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
139 [style = filled, label = "Assert.assertEquals(relayMessage.getMsgSubType(),Message.MessageType.RELAYED_MESSAGE.name())@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "pipeline.addStage(new IntermediateStateCalcStage())@@@89@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "pipeline.handle(event)@@@59@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
56 [style = filled, label = "Assert.assertEquals(messages.size(),1)@@@62@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
103 [style = filled, label = "currentStateOutput.setPendingMessage(db,p,newMasterInstance,relayMessage)@@@84@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "Assert.assertEquals(messages.size(),0)@@@100@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "event.addAttribute(AttributeName.CURRENT_STATE.name(),currentStateOutput)@@@85@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Message toSlaveMessage = messages.get(0)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
107 [style = filled, label = "cache = event.getAttribute(AttributeName.ControllerDataProvider.name())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
132 [style = filled, label = "testP2PMessage['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "cache.notifyDataChange(HelixConstants.ChangeType.INSTANCE_CONFIG)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
109 [style = filled, label = "Assert.assertEquals(toSlaveMessage.getFromState(),MasterSlaveSMD.States.MASTER.name())@@@79@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "event.addAttribute(AttributeName.BEST_POSSIBLE_STATE.name(),bestPossibleStateOutput)@@@91@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "messages = messageOutput.getMessages(db,p)@@@95@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertEquals(toSlaveMessage.getToState(),MasterSlaveSMD.States.SLAVE.name())@@@112@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
97 [style = filled, label = "pipeline.addStage(new MessageSelectionStage())@@@71@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
98 [style = filled, label = "event.addAttribute(AttributeName.CURRENT_STATE.name(),currentStateOutput)@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "toSlaveMessage = messages.get(0)@@@109@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
92 [style = filled, label = "Assert.assertEquals(toSlaveMessage.getFromState(),MasterSlaveSMD.States.MASTER.name())@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "pipeline.addStage(new ResourceMessageGenerationPhase())@@@90@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "instanceStateMap.put(slaveInstance,\"MASTER\")@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
99 [style = filled, label = "event.addAttribute(AttributeName.INTERMEDIATE_STATE.name(),bestPossibleStateOutput)@@@87@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
84 [style = filled, label = "pipeline.addStage(new ResourceMessageGenerationPhase())@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "messageOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name())@@@60@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
89 [style = filled, label = "currentStateOutput = populateCurrentStateFromBestPossible(bestPossibleStateOutput)@@@55@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
64 [style = filled, label = "event.addAttribute(AttributeName.CURRENT_STATE.name(),currentStateOutput)@@@58@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
101 [style = filled, label = "pipeline = new Pipeline(\"test\")@@@88@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(message.getTgtName(),masterInstance)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
116 [style = filled, label = "Assert.assertEquals(relayMessage.getMsgSubType(),Message.MessageType.RELAYED_MESSAGE.name())@@@83@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
124 [style = filled, label = "Assert.assertEquals(relayMessage.getToState(),MasterSlaveSMD.States.MASTER.name())@@@87@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "currentStateOutput.setCurrentState(db,p,masterInstance,\"SLAVE\")@@@56@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
129 [style = filled, label = "event.addAttribute(AttributeName.helixmanager.name(),manager)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ResourceControllerDataProvider cache = new ResourceControllerDataProvider()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
112 [style = filled, label = "currentStateOutput.setCurrentState(db,p,newMasterInstance,\"MASTER\")@@@65@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
87 [style = filled, label = "String slaveInstance = getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db,p),MasterSlaveSMD.States.SLAVE.name())@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
130 [style = filled, label = "Assert.assertEquals(relayMessage.getRelaySrcHost(),masterInstance)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "event.addAttribute(AttributeName.CURRENT_STATE.name(),currentStateOutput)@@@68@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
55 [style = filled, label = "messages = messageOutput.getMessages(db,p)@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "clusterConfig.enableP2PMessage(true)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
127 [style = filled, label = "currentStateOutput.setCurrentState(db,p,slaveInstance,\"SLAVE\")@@@66@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
95 [style = filled, label = "Assert.assertEquals(relayMessage.getRelaySrcHost(),masterInstance)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
111 [style = filled, label = "currentStateOutput.setPendingMessage(db,p,slaveInstance,relayMessage)@@@89@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
133 [style = filled, label = "Assert.assertEquals(message.getRelayMessages().entrySet().size(),1)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
100 [style = filled, label = "String newMasterInstance = getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db,p),MasterSlaveSMD.States.MASTER.name())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
102 [style = filled, label = "ClusterConfig clusterConfig = new ClusterConfig(_clusterName)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "cache.setAsyncTasksThreadPool(Executors.newSingleThreadExecutor())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
126 [style = filled, label = "currentStateOutput = populateCurrentStateFromBestPossible(bestPossibleStateOutput)@@@64@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "messages = messageOutput.getMessages(db,p)@@@75@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Pipeline pipeline = createPipeline()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "setClusterConfig(clusterConfig)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "currentStateOutput.setCurrentState(db,p,masterInstance,\"OFFLINE\")@@@67@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "event.addAttribute(AttributeName.BEST_POSSIBLE_STATE.name(),bestPossibleStateOutput)@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "Assert.assertEquals(toOfflineMessage.getFromState(),MasterSlaveSMD.States.SLAVE.name())@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "currentStateOutput.setPendingMessage(db,p,newMasterInstance,relayMessage)@@@57@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
125 [style = filled, label = "relayMessage = toSlaveMessage.getRelayMessage(slaveInstance)@@@81@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "Assert.assertEquals(relayMessage.getToState(),MasterSlaveSMD.States.MASTER.name())@@@41@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
137 [style = filled, label = "ClusterConfig clusterConfig@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "pipeline.handle(event)@@@93@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Partition p = new Partition(db + \"_0\")@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "event.addAttribute(AttributeName.CURRENT_STATE.name(),currentStateOutput)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
113 [style = filled, label = "event.addAttribute(AttributeName.CURRENT_STATE.name(),currentStateOutput)@@@67@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
131 [style = filled, label = "bestPossibleStateOutput = event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "Assert.assertEquals(relayMessage.getFromState(),MasterSlaveSMD.States.SLAVE.name())@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "event.addAttribute(AttributeName.ControllerDataProvider.name(),cache)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
96 [style = filled, label = "BestPossibleStateOutput bestPossibleStateOutput = event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testAvoidDuplicatedMessageWithP2PEnabled['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "messages = messageOutput.getMessages(db,p)@@@61@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
97->36 [style = bold, label=""];
12->53 [style = bold, label=""];
39->62 [style = bold, label=""];
55->72 [style = bold, label=""];
138->54 [style = bold, label=""];
65->11 [style = solid, label="relayMessage"];
136->43 [style = dotted, label="true"];
93->20 [style = bold, label=""];
142->136 [style = solid, label="p2pMessageEnabled"];
69->46 [style = bold, label=""];
136->134 [style = dotted, label="true"];
82->71 [style = bold, label=""];
46->89 [style = solid, label="bestPossibleStateOutput"];
136->73 [style = dotted, label="true"];
0->44 [style = dashed, label="0"];
115->121 [style = bold, label=""];
87->125 [style = solid, label="slaveInstance"];
11->64 [style = bold, label=""];
75->29 [style = bold, label=""];
96->138 [style = solid, label="bestPossibleStateOutput"];
100->65 [style = solid, label="newMasterInstance"];
24->73 [style = bold, label=""];
28->9 [style = bold, label=""];
58->60 [style = bold, label=""];
116->118 [style = bold, label=""];
143->134 [style = bold, label=""];
89->64 [style = solid, label="currentStateOutput"];
136->65 [style = dotted, label="true"];
45->82 [style = bold, label=""];
15->103 [style = bold, label=""];
68->85 [style = solid, label="masterInstance"];
100->43 [style = solid, label="newMasterInstance"];
51->86 [style = bold, label=""];
6->140 [style = bold, label=""];
78->95 [style = solid, label="masterInstance"];
65->134 [style = dashed, label="0"];
29->18 [style = bold, label=""];
78->106 [style = solid, label="masterInstance"];
4->20 [style = solid, label="cache"];
96->54 [style = bold, label=""];
44->51 [style = bold, label=""];
31->50 [style = bold, label=""];
34->80 [style = bold, label=""];
48->111 [style = solid, label="p"];
56->72 [style = bold, label=""];
33->105 [style = bold, label=""];
112->127 [style = bold, label=""];
15->120 [style = dashed, label="0"];
86->42 [style = bold, label=""];
21->83 [style = bold, label=""];
40->16 [style = bold, label=""];
48->78 [style = solid, label="p"];
104->33 [style = bold, label=""];
101->28 [style = bold, label=""];
50->55 [style = bold, label=""];
134->141 [style = bold, label=""];
141->139 [style = bold, label=""];
125->123 [style = solid, label="relayMessage"];
46->110 [style = solid, label="bestPossibleStateOutput"];
26->15 [style = bold, label=""];
17->143 [style = solid, label="p"];
18->32 [style = bold, label=""];
120->115 [style = bold, label=""];
46->126 [style = solid, label="bestPossibleStateOutput"];
136->83 [style = bold, label=""];
48->7 [style = solid, label="p"];
135->128 [style = solid, label="resourceMap"];
90->104 [style = bold, label=""];
126->113 [style = solid, label="currentStateOutput"];
88->48 [style = bold, label=""];
77->59 [style = bold, label=""];
100->19 [style = solid, label="newMasterInstance"];
48->34 [style = solid, label="p"];
143->134 [style = solid, label="newMasterInstance"];
48->103 [style = solid, label="p"];
78->7 [style = solid, label="masterInstance"];
87->90 [style = solid, label="slaveInstance"];
46->40 [style = solid, label="bestPossibleStateOutput"];
48->40 [style = solid, label="p"];
96->138 [style = bold, label=""];
132->142 [style = dotted, label="true"];
46->33 [style = solid, label="bestPossibleStateOutput"];
73->43 [style = bold, label=""];
7->11 [style = bold, label=""];
127->113 [style = bold, label=""];
124->110 [style = bold, label=""];
63->1 [style = bold, label=""];
131->27 [style = bold, label=""];
135->6 [style = solid, label="resourceMap"];
54->17 [style = bold, label=""];
68->44 [style = solid, label="masterInstance"];
17->68 [style = bold, label=""];
76->47 [style = bold, label=""];
48->18 [style = solid, label="p"];
92->51 [style = dashed, label="0"];
100->65 [style = bold, label=""];
136->133 [style = bold, label=""];
68->130 [style = solid, label="masterInstance"];
95->21 [style = bold, label=""];
92->30 [style = bold, label=""];
74->79 [style = bold, label=""];
100->119 [style = solid, label="newMasterInstance"];
19->25 [style = bold, label=""];
106->107 [style = bold, label=""];
118->119 [style = bold, label=""];
100->112 [style = solid, label="newMasterInstance"];
129->13 [style = bold, label=""];
122->124 [style = bold, label=""];
80->66 [style = bold, label=""];
108->2 [style = bold, label=""];
6->4 [style = bold, label=""];
71->34 [style = bold, label=""];
106->131 [style = bold, label=""];
85->88 [style = solid, label="currentStateOutput"];
125->123 [style = bold, label=""];
79->26 [style = bold, label=""];
78->35 [style = bold, label=""];
84->97 [style = bold, label=""];
87->127 [style = solid, label="slaveInstance"];
85->88 [style = bold, label=""];
48->51 [style = solid, label="p"];
3->104 [style = solid, label="instanceStateMap"];
137->135 [style = solid, label="clusterConfig"];
6->13 [style = solid, label="resourceMap"];
48->55 [style = solid, label="p"];
110->70 [style = solid, label="currentStateOutput"];
136->143 [style = dotted, label="true"];
91->5 [style = bold, label=""];
70->40 [style = bold, label=""];
59->56 [style = bold, label=""];
48->59 [style = solid, label="p"];
67->45 [style = bold, label=""];
114->52 [style = bold, label=""];
48->16 [style = solid, label="p"];
42->91 [style = solid, label="toSlaveMessage"];
100->8 [style = solid, label="newMasterInstance"];
48->127 [style = solid, label="p"];
94->69 [style = bold, label=""];
102->6 [style = solid, label="clusterConfig"];
72->23 [style = bold, label=""];
25->38 [style = bold, label=""];
46->44 [style = bold, label=""];
6->39 [style = solid, label="resourceMap"];
48->41 [style = solid, label="p"];
100->121 [style = solid, label="newMasterInstance"];
100->11 [style = solid, label="newMasterInstance"];
136->130 [style = dotted, label="true"];
136->83 [style = dotted, label="false"];
23->75 [style = bold, label=""];
20->13 [style = bold, label=""];
139->65 [style = bold, label=""];
5->98 [style = bold, label=""];
81->99 [style = bold, label=""];
113->105 [style = bold, label=""];
135->128 [style = bold, label=""];
78->0 [style = solid, label="masterInstance"];
33->126 [style = bold, label=""];
109->117 [style = bold, label=""];
78->5 [style = solid, label="masterInstance"];
130->73 [style = bold, label=""];
107->48 [style = dashed, label="0"];
13->39 [style = bold, label=""];
140->129 [style = bold, label=""];
46->70 [style = solid, label="bestPossibleStateOutput"];
66->19 [style = bold, label=""];
87->118 [style = solid, label="slaveInstance"];
0->92 [style = bold, label=""];
42->0 [style = bold, label=""];
121->109 [style = bold, label=""];
14->84 [style = bold, label=""];
48->26 [style = solid, label="p"];
89->32 [style = solid, label="currentStateOutput"];
68->85 [style = bold, label=""];
102->1 [style = solid, label="clusterConfig"];
1->6 [style = bold, label=""];
99->101 [style = bold, label=""];
78->35 [style = solid, label="masterInstance"];
17->94 [style = solid, label="p"];
3->8 [style = bold, label=""];
78->91 [style = solid, label="masterInstance"];
100->40 [style = solid, label="newMasterInstance"];
136->141 [style = dotted, label="true"];
46->99 [style = solid, label="bestPossibleStateOutput"];
48->91 [style = solid, label="p"];
42->46 [style = dashed, label="0"];
10->67 [style = bold, label=""];
87->3 [style = bold, label=""];
64->61 [style = bold, label=""];
37->52 [style = bold, label=""];
65->5 [style = solid, label="relayMessage"];
41->91 [style = bold, label=""];
65->103 [style = solid, label="relayMessage"];
48->87 [style = solid, label="p"];
126->112 [style = bold, label=""];
98->31 [style = bold, label=""];
9->108 [style = bold, label=""];
65->130 [style = bold, label=""];
48->78 [style = bold, label=""];
102->63 [style = bold, label=""];
48->12 [style = solid, label="p"];
46->81 [style = solid, label="bestPossibleStateOutput"];
65->24 [style = solid, label="relayMessage"];
143->65 [style = solid, label="newMasterInstance"];
83->41 [style = bold, label=""];
4->93 [style = bold, label=""];
16->58 [style = bold, label=""];
100->103 [style = solid, label="newMasterInstance"];
43->95 [style = bold, label=""];
30->86 [style = dashed, label="0"];
78->41 [style = solid, label="masterInstance"];
62->96 [style = bold, label=""];
49->81 [style = bold, label=""];
87->16 [style = solid, label="slaveInstance"];
57->100 [style = bold, label=""];
65->24 [style = bold, label=""];
125->111 [style = solid, label="relayMessage"];
89->7 [style = bold, label=""];
47->12 [style = bold, label=""];
2->76 [style = bold, label=""];
26->120 [style = bold, label=""];
105->14 [style = bold, label=""];
48->100 [style = solid, label="p"];
30->57 [style = bold, label=""];
35->106 [style = bold, label=""];
29->87 [style = bold, label=""];
89->49 [style = solid, label="currentStateOutput"];
8->90 [style = bold, label=""];
17->68 [style = solid, label="p"];
117->125 [style = bold, label=""];
138->54 [style = solid, label="currentStateOutput"];
48->11 [style = solid, label="p"];
86->136 [style = bold, label=""];
110->111 [style = bold, label=""];
132->135 [style = bold, label=""];
55->22 [style = bold, label=""];
133->143 [style = bold, label=""];
61->77 [style = bold, label=""];
119->122 [style = bold, label=""];
107->27 [style = bold, label=""];
36->74 [style = bold, label=""];
70->58 [style = solid, label="currentStateOutput"];
48->5 [style = solid, label="p"];
48->104 [style = solid, label="p"];
78->23 [style = solid, label="masterInstance"];
78->18 [style = solid, label="masterInstance"];
87->111 [style = solid, label="slaveInstance"];
68->88 [style = solid, label="masterInstance"];
136->139 [style = dotted, label="true"];
53->70 [style = bold, label=""];
22->89 [style = bold, label=""];
85->98 [style = solid, label="currentStateOutput"];
48->3 [style = solid, label="p"];
132->137 [style = dotted, label="true"];
134->141 [style = solid, label="relayMessage"];
52->102 [style = bold, label=""];
123->116 [style = bold, label=""];
60->10 [style = bold, label=""];
68->85 [style = solid, label="bestPossibleStateOutput"];
48->112 [style = solid, label="p"];
136->133 [style = dotted, label="true"];
103->49 [style = bold, label=""];
128->6 [style = bold, label=""];
27->94 [style = bold, label=""];
32->87 [style = bold, label=""];
111->70 [style = bold, label=""];
40->58 [style = bold, label=""];
}
