digraph {
2 [style = filled, label = "return new StringChecker(){@Override public boolean test(Object left,Object right){return ((String)left).compareToIgnoreCase((String)right) <= 0}}@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\",constructingFactory.getFunctionName(getClass()),fromValue.getClass().getSimpleName()))@@@22@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "constructChecker['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Object fromValue@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "null == fromValue@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "fromValue instanceof Number@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "fromValue instanceof String@@@14@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "constructChecker['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\",constructingFactory.getFunctionName(getClass())))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Object fromValue@@@2@@@['1', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "constructChecker['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "return new NumberChecker(){@Override public boolean test(Object left,Object right){return (new BigDecimal(left.toString())).compareTo(new BigDecimal(right.toString())) <= 0}}@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
8->6 [style = solid, label="fromValue"];
8->10 [style = dashed, label="0"];
10->1 [style = solid, label="fromValue"];
9->4 [style = bold, label=""];
11->4 [style = bold, label=""];
8->1 [style = solid, label="fromValue"];
4->7 [style = dotted, label="true"];
10->4 [style = solid, label="fromValue"];
8->4 [style = solid, label="fromValue"];
7->0 [style = bold, label=""];
6->0 [style = bold, label=""];
1->6 [style = dotted, label="false"];
3->4 [style = bold, label=""];
4->7 [style = bold, label=""];
6->2 [style = bold, label=""];
2->0 [style = bold, label=""];
6->2 [style = dotted, label="true"];
1->6 [style = bold, label=""];
5->0 [style = bold, label=""];
11->8 [style = dotted, label="true"];
4->1 [style = dotted, label="false"];
4->1 [style = bold, label=""];
3->8 [style = dotted, label="true"];
9->10 [style = dotted, label="true"];
10->6 [style = solid, label="fromValue"];
1->5 [style = dotted, label="true"];
}
