digraph {
22 [style = filled, label = "Map<String,String> payload = Maps.newHashMap()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(names.getNames(),Lists.newArrayList(\"test\"))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(instances.getServices().size(),1)@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "testRegisterService['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(names.getNames(),Lists.newArrayList(\"test\"))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "payload.put(\"three\",\"3\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "ServiceNames names = resource.path(\"/v1/service\").get()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "WebResource resource = client.resource(\"http://\" + HOST + \":\" + port)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "resource.path(\"/v1/service/test/\" + service.getId()).type(MediaType.APPLICATION_JSON_TYPE).put(service)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "payload.put(\"two\",\"2\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(instance,service)@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "payload.put(\"one\",\"1\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "ClientConfig config = new DefaultClientConfig(){@Override public Set<Object> getSingletons(){Set<Object> singletons = Sets.newHashSet()singletons.add(context)singletons.add(serviceNamesMarshaller)singletons.add(serviceInstanceMarshaller)singletons.add(serviceInstancesMarshaller)return singletons}}@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ServiceInstance<String> service = ServiceInstance.builder().name(\"test\").payload(\"From Test\").serviceType(ServiceType.STATIC).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "WebResource resource = client.resource(\"http://localhost:\" + port)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Client client = Client.create(config)@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "GenericType<ServiceInstance<Map<String,String>>> singleInstanceType = new GenericType<ServiceInstance<Map<String,String>>>(){}@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertEquals(instances.getServices().size(),1)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testRegisterService['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertEquals(instance,service)@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "Assert.assertEquals(instance,service)@@@35@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "ServiceInstance<Map<String,String>> instance = resource.path(\"/v1/service/test/\" + service.getId()).get(singleInstanceType)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "resource.path(\"/v1/service/test/\" + service.getId()).type(MediaType.APPLICATION_JSON_TYPE).put(service)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Client client = Client.create(config)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(instances.getServices().get(0),service)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "ServiceNames names = resource.path(\"/v1/service\").get()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "ServiceInstance<Map<String,String>> service = ServiceInstance.builder().name(\"test\").payload(payload).serviceType(ServiceType.STATIC).build()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ClientConfig config = new DefaultClientConfig(){@Override public Set<Object> getSingletons(){Set<Object> singletons = Sets.newHashSet()singletons.add(context)singletons.add(serviceNamesMarshaller)singletons.add(serviceInstanceMarshaller)singletons.add(serviceInstancesMarshaller)return singletons}}@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "GenericType<ServiceInstances<Map<String,String>>> type = new GenericType<ServiceInstances<Map<String,String>>>(){}@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertEquals(instances.getServices().get(0).getPayload(),payload)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(instances.getServices().size(),1)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "ServiceInstances<Map<String,String>> instances = resource.path(\"/v1/service/test\").get(type)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testRegisterService['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(instances.getServices().get(0),service)@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "GenericType<ServiceInstance<String>> singleInstanceType = new GenericType<ServiceInstance<String>>(){}@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(instances.getServices().get(0),service)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "WebResource resource = client.resource(\"http://localhost:\" + port)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
13->10 [style = bold, label=""];
22->25 [style = bold, label=""];
16->18 [style = bold, label=""];
27->36 [style = bold, label=""];
2->19 [style = dashed, label="0"];
9->11 [style = bold, label=""];
23->30 [style = bold, label=""];
3->31 [style = dashed, label="0"];
30->2 [style = solid, label="config"];
35->22 [style = bold, label=""];
17->9 [style = bold, label=""];
24->32 [style = bold, label=""];
1->15 [style = solid, label="service"];
36->28 [style = bold, label=""];
1->10 [style = solid, label="service"];
22->29 [style = solid, label="payload"];
12->17 [style = dashed, label="0"];
34->31 [style = bold, label=""];
0->29 [style = bold, label=""];
7->0 [style = bold, label=""];
1->18 [style = solid, label="service"];
23->0 [style = solid, label="service"];
23->24 [style = solid, label="service"];
20->1 [style = bold, label=""];
3->16 [style = bold, label=""];
11->19 [style = bold, label=""];
1->9 [style = solid, label="service"];
12->9 [style = bold, label=""];
23->28 [style = solid, label="service"];
10->7 [style = bold, label=""];
14->15 [style = dashed, label="0"];
5->34 [style = dashed, label="0"];
11->2 [style = bold, label=""];
0->15 [style = bold, label=""];
26->21 [style = bold, label=""];
3->34 [style = bold, label=""];
0->14 [style = solid, label="instance"];
33->0 [style = bold, label=""];
8->17 [style = bold, label=""];
19->5 [style = bold, label=""];
29->27 [style = bold, label=""];
6->8 [style = solid, label="config"];
0->14 [style = bold, label=""];
1->6 [style = bold, label=""];
34->31 [style = solid, label="type"];
5->24 [style = bold, label=""];
31->33 [style = bold, label=""];
6->8 [style = bold, label=""];
25->26 [style = bold, label=""];
27->36 [style = solid, label="singleInstanceType"];
13->16 [style = dashed, label="0"];
3->13 [style = bold, label=""];
4->1 [style = bold, label=""];
0->15 [style = solid, label="instance"];
30->2 [style = bold, label=""];
18->7 [style = bold, label=""];
5->3 [style = solid, label="type"];
0->36 [style = dashed, label="0"];
32->3 [style = bold, label=""];
7->0 [style = solid, label="singleInstanceType"];
1->14 [style = solid, label="service"];
8->12 [style = bold, label=""];
10->18 [style = dashed, label="0"];
2->5 [style = bold, label=""];
36->28 [style = solid, label="instance"];
21->23 [style = bold, label=""];
}
