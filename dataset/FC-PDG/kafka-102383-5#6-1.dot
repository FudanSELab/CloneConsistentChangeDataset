digraph {
12 [style = filled, label = "shouldGetExistingTaskLevelSensor['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "setupGetNewSensorTest(metrics,THREAD_ID + \".task.\" + TASK_ID,recordingLevel)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics,CLIENT_ID,VERSION,time)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final RecordingLevel recordingLevel = RecordingLevel.INFO@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "shouldGetNewTaskLevelSensor['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "final Metrics metrics = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final Sensor actualSensor = streamsMetrics.taskLevelSensor(THREAD_ID1,TASK_ID1,SENSOR_NAME_1,recordingLevel)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "verify(metrics)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final Sensor actualSensor = streamsMetrics.taskLevelSensor(THREAD_ID,TASK_ID,sensorName1,recordingLevel)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "setupGetNewSensorTest(metrics,recordingLevel)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "shouldGetNewTaskLevelSensor['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "setupGetExistingSensorTest(metrics,THREAD_ID + \".task.\" + TASK_ID)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(actualSensor,is(equalToObject(sensor)))@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
5->8 [style = bold, label=""];
6->3 [style = solid, label="recordingLevel"];
6->2 [style = solid, label="recordingLevel"];
8->7 [style = solid, label="actualSensor"];
12->1 [style = bold, label=""];
2->8 [style = dashed, label="0"];
0->7 [style = bold, label=""];
8->0 [style = bold, label=""];
2->7 [style = solid, label="actualSensor"];
11->5 [style = bold, label=""];
5->2 [style = bold, label=""];
3->5 [style = bold, label=""];
2->0 [style = bold, label=""];
1->6 [style = bold, label=""];
1->0 [style = solid, label="metrics"];
1->10 [style = solid, label="metrics"];
10->5 [style = bold, label=""];
6->8 [style = solid, label="recordingLevel"];
1->3 [style = solid, label="metrics"];
1->11 [style = solid, label="metrics"];
6->11 [style = bold, label=""];
6->10 [style = bold, label=""];
4->1 [style = bold, label=""];
3->10 [style = dashed, label="0"];
9->1 [style = bold, label=""];
1->5 [style = solid, label="metrics"];
6->10 [style = solid, label="recordingLevel"];
3->11 [style = dashed, label="0"];
}
