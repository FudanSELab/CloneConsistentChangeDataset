digraph {
7 [style = filled, label = "final RequestHandlerRegistry<FollowersChecker.FollowerCheckRequest> followerCheckHandler = (RequestHandlerRegistry<FollowersChecker.FollowerCheckRequest>)transport.getRequestHandler(FollowersChecker.FOLLOWER_CHECK_ACTION_NAME)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "startJoinHandler.processMessageReceived(new StartJoinRequest(node,term),new TestTransportChannel(new ActionListener<>(){@Override public void onResponse(TransportResponse transportResponse){}@Override public void onFailure(Exception e){fail()}}))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "followerCheckHandler.processMessageReceived(new FollowersChecker.FollowerCheckRequest(term,node),channel)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final TestTransportChannel channel = new TestTransportChannel(new ActionListener<>(){@Override public void onResponse(TransportResponse transportResponse){}@Override public void onFailure(Exception e){fail()}})@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "DiscoveryNode node@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "long term@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "handleStartJoinFrom['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "DiscoveryNode node@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "handleFollowerCheckFrom['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(coordinator.getMode(),equalTo(Coordinator.Mode.CANDIDATE))@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final RequestHandlerRegistry<StartJoinRequest> startJoinHandler = (RequestHandlerRegistry<StartJoinRequest>)transport.getRequestHandler(JoinHelper.START_JOIN_ACTION_NAME)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "deterministicTaskQueue.runAllRunnableTasks()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "DiscoveryNode node@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "long term@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(coordinator.getMode(),equalTo(Coordinator.Mode.FOLLOWER))@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final RequestHandlerRegistry<FollowersChecker.FollowerCheckRequest> followerCheckHandler = transport.getRequestHandlers().getHandler(FollowersChecker.FOLLOWER_CHECK_ACTION_NAME)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "handleFollowerCheckFrom['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0->3 [style = bold, label=""];
2->3 [style = solid, label="node"];
0->15 [style = dashed, label="0"];
6->3 [style = solid, label="term"];
11->9 [style = dotted, label="true"];
7->0 [style = bold, label=""];
15->16 [style = bold, label=""];
3->4 [style = bold, label=""];
1->7 [style = bold, label=""];
6->13 [style = dashed, label="0"];
8->5 [style = bold, label=""];
17->12 [style = dotted, label="true"];
0->3 [style = solid, label="channel"];
17->14 [style = bold, label=""];
11->10 [style = bold, label=""];
11->6 [style = dotted, label="true"];
9->3 [style = solid, label="node"];
10->0 [style = bold, label=""];
5->8 [style = dashed, label="0"];
4->8 [style = bold, label=""];
1->6 [style = dotted, label="true"];
7->10 [style = dashed, label="0"];
14->15 [style = bold, label=""];
12->15 [style = solid, label="term"];
16->4 [style = bold, label=""];
1->2 [style = dotted, label="true"];
13->15 [style = solid, label="node"];
17->13 [style = dotted, label="true"];
}
