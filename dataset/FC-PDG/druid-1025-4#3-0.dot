digraph {
12 [style = filled, label = "DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(\"nodetype\")).andReturn(druidNodeDiscovery)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "request.setContent(\"hello\".getBytes(StandardCharsets.UTF_8))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "request.setContent(\"hello\".getBytes(\"UTF-8\"))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Request request = druidLeaderClient.makeRequest(HttpMethod.POST,\"/simple/redirect\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "DruidLeaderClient druidLeaderClient = new DruidLeaderClient(httpClient,druidNodeDiscoveryProvider,\"nodetype\",\"/simple/leader\",EasyMock.createNiceMock())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(new DiscoveryDruidNode(new DruidNode(\"test\",\"dummyhost\",64231,null,true,false),\"test\",ImmutableMap.of())))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "ServerDiscoverySelector serverDiscoverySelector = EasyMock.createMock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "EasyMock.replay(serverDiscoverySelector,druidNodeDiscovery,druidNodeDiscoveryProvider)@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(NodeType.PEON)).andReturn(druidNodeDiscovery).anyTimes()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "druidLeaderClient.start()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(dummyNode))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "EasyMock.replay(serverDiscoverySelector,druidNodeDiscovery,druidNodeDiscoveryProvider)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "DruidLeaderClient druidLeaderClient = new DruidLeaderClient(httpClient,druidNodeDiscoveryProvider,NodeType.PEON,\"/simple/leader\",serverDiscoverySelector)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "DiscoveryDruidNode dummyNode = new DiscoveryDruidNode(new DruidNode(\"test\",\"dummyhost\",64231,null,true,false),NodeType.PEON,ImmutableMap.of())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "druidLeaderClient.start()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(\"hello\",druidLeaderClient.go(request).getContent())@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(\"hello\",druidLeaderClient.go(request).getContent())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(\"hello\",druidLeaderClient.go(request).getContent())@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "EasyMock.replay(druidNodeDiscovery,druidNodeDiscoveryProvider)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testServerFailureAndRedirect['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "Request request = druidLeaderClient.makeRequest(HttpMethod.POST,\"/simple/direct\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testSimple['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testServerFailureAndRedirect['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "EasyMock.expect(serverDiscoverySelector.pick()).andReturn(null).anyTimes()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
5->11 [style = solid, label="serverDiscoverySelector"];
17->15 [style = solid, label="dummyNode"];
10->8 [style = dashed, label="0"];
3->17 [style = dashed, label="0"];
21->19 [style = bold, label=""];
7->10 [style = bold, label=""];
9->2 [style = bold, label=""];
7->14 [style = dashed, label="0"];
23->4 [style = solid, label="druidNodeDiscovery"];
11->6 [style = bold, label=""];
7->18 [style = solid, label="druidNodeDiscoveryProvider"];
12->17 [style = bold, label=""];
7->4 [style = dashed, label="0"];
11->26 [style = dashed, label="0"];
9->27 [style = dashed, label="0"];
8->26 [style = bold, label=""];
23->8 [style = solid, label="druidNodeDiscovery"];
28->12 [style = bold, label=""];
24->23 [style = bold, label=""];
3->4 [style = bold, label=""];
27->6 [style = bold, label=""];
12->26 [style = solid, label="druidNodeDiscoveryProvider"];
11->18 [style = bold, label=""];
26->22 [style = bold, label=""];
8->7 [style = bold, label=""];
8->10 [style = solid, label="druidNodeDiscoveryProvider"];
7->14 [style = bold, label=""];
23->28 [style = bold, label=""];
7->11 [style = solid, label="druidNodeDiscoveryProvider"];
5->18 [style = solid, label="serverDiscoverySelector"];
2->0 [style = bold, label=""];
13->12 [style = bold, label=""];
5->10 [style = solid, label="serverDiscoverySelector"];
12->4 [style = bold, label=""];
22->27 [style = bold, label=""];
2->21 [style = dashed, label="0"];
2->21 [style = bold, label=""];
11->18 [style = dashed, label="0"];
15->20 [style = bold, label=""];
4->15 [style = dashed, label="0"];
5->13 [style = bold, label=""];
18->9 [style = bold, label=""];
17->15 [style = bold, label=""];
12->8 [style = solid, label="druidNodeDiscoveryProvider"];
16->5 [style = bold, label=""];
4->8 [style = bold, label=""];
12->10 [style = solid, label="druidNodeDiscovery"];
12->3 [style = bold, label=""];
6->9 [style = bold, label=""];
20->7 [style = bold, label=""];
14->11 [style = bold, label=""];
8->11 [style = solid, label="druidNodeDiscoveryProvider"];
12->11 [style = solid, label="druidNodeDiscovery"];
6->25 [style = bold, label=""];
10->11 [style = bold, label=""];
}
