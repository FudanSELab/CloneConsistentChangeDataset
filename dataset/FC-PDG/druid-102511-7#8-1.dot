digraph {
57 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@21@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "int i = numToAdd@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null,false))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "SegmentDescriptor desc3 = SD(task,\"2010/P1D\",0)@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "i++@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,checkpoint.getPartitionSequenceNumberMap())))))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint2 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,0L))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "kafkaProducer.send(record).get()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "SegmentDescriptor desc5 = SD(task,\"2011/P1D\",1)@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@62@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,true,null,null,false))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "int i = 0@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@38@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Assert.assertTrue(checkpoint2.getPartitionSequenceNumberMap().equals(nextOffsets))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Thread.sleep(10)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "Thread.sleep(10)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L,1,0L))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionSequenceNumberMap().equals(currentOffsets))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "i < numToAdd@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "SegmentDescriptor desc4 = SD(task,\"2011/P1D\",0)@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "intermediateHandoffPeriod = new Period().withSeconds(0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "i++@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L,1,0L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "SegmentDescriptor desc7 = SD(task,\"2013/P1D\",0)@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertTrue(checkpoint.getPartitionSequenceNumberMap().equals(currentOffsets))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,1L,1,0L))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,nextOffsets)))))@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int numToAdd = records.size() - 2@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "SegmentDescriptor desc6 = SD(task,\"2012/P1D\",0)@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testIncrementalHandOffMaxTotalRows['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "i < records.size()@@@34@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertEquals(2,task.getRunner().getRowIngestionMeters().getProcessed())@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "testTimeBasedIncrementalHandOff['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@30@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint1 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,3L,1,0L))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)))))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "maxTotalRows = 3L@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "final Map<Integer,Long> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,true,null,null,false))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66->67 [style = solid, label="desc1"];
16->6 [style = solid, label="desc4"];
14->24 [style = bold, label=""];
51->5 [style = bold, label=""];
32->22 [style = bold, label=""];
25->56 [style = dashed, label="0"];
65->67 [style = bold, label=""];
5->50 [style = solid, label="numToAdd"];
26->54 [style = solid, label="currentOffsets"];
25->33 [style = bold, label=""];
72->57 [style = bold, label=""];
57->33 [style = bold, label=""];
37->50 [style = solid, label="i"];
48->4 [style = bold, label=""];
29->52 [style = solid, label="desc3"];
56->29 [style = solid, label="task"];
25->14 [style = solid, label="task"];
20->65 [style = solid, label="task"];
9->47 [style = solid, label="i"];
33->28 [style = solid, label="currentOffsets"];
40->38 [style = bold, label=""];
30->29 [style = bold, label=""];
11->20 [style = solid, label="endPartitions"];
23->6 [style = solid, label="desc1"];
61->64 [style = bold, label=""];
8->0 [style = bold, label=""];
13->51 [style = bold, label=""];
50->27 [style = dotted, label="true"];
63->73 [style = bold, label=""];
1->28 [style = bold, label=""];
42->44 [style = bold, label=""];
25->30 [style = solid, label="task"];
36->28 [style = dashed, label="0"];
7->46 [style = solid, label="desc7"];
13->70 [style = bold, label=""];
73->61 [style = bold, label=""];
43->8 [style = bold, label=""];
9->47 [style = bold, label=""];
55->34 [style = bold, label=""];
56->16 [style = solid, label="task"];
4->8 [style = bold, label=""];
16->14 [style = bold, label=""];
26->17 [style = solid, label="currentOffsets"];
25->23 [style = solid, label="task"];
24->6 [style = solid, label="desc6"];
5->37 [style = bold, label=""];
64->58 [style = solid, label="startPartitions"];
39->56 [style = solid, label="consumerProps"];
10->50 [style = bold, label=""];
57->72 [style = dotted, label="true"];
3->46 [style = bold, label=""];
14->6 [style = solid, label="desc5"];
56->14 [style = solid, label="task"];
23->30 [style = bold, label=""];
19->12 [style = bold, label=""];
20->54 [style = solid, label="startPartitions"];
33->28 [style = bold, label=""];
54->17 [style = bold, label=""];
73->20 [style = solid, label="consumerProps"];
18->56 [style = bold, label=""];
34->42 [style = bold, label=""];
22->23 [style = bold, label=""];
50->39 [style = bold, label=""];
43->45 [style = bold, label=""];
59->68 [style = bold, label=""];
66->68 [style = solid, label="desc1"];
65->67 [style = solid, label="desc2"];
21->45 [style = bold, label=""];
18->56 [style = solid, label="endPartitions"];
30->6 [style = solid, label="desc2"];
2->48 [style = solid, label="nextOffsets"];
47->2 [style = bold, label=""];
7->6 [style = bold, label=""];
49->18 [style = bold, label=""];
65->23 [style = solid, label="desc2"];
50->10 [style = dotted, label="true"];
18->25 [style = bold, label=""];
38->47 [style = bold, label=""];
45->21 [style = bold, label=""];
25->24 [style = solid, label="task"];
20->66 [style = solid, label="task"];
2->17 [style = solid, label="nextOffsets"];
56->7 [style = solid, label="task"];
8->69 [style = bold, label=""];
47->38 [style = dotted, label="true"];
24->7 [style = bold, label=""];
56->33 [style = bold, label=""];
29->16 [style = bold, label=""];
14->53 [style = solid, label="desc5"];
49->11 [style = dashed, label="0"];
2->4 [style = solid, label="nextOffsets"];
36->43 [style = bold, label=""];
66->65 [style = bold, label=""];
54->58 [style = dashed, label="0"];
2->48 [style = bold, label=""];
44->25 [style = solid, label="baseSequenceName"];
58->43 [style = bold, label=""];
50->27 [style = bold, label=""];
47->40 [style = bold, label=""];
18->25 [style = solid, label="endPartitions"];
56->30 [style = solid, label="task"];
31->32 [style = bold, label=""];
29->6 [style = solid, label="desc3"];
20->56 [style = solid, label="startPartitions"];
39->25 [style = solid, label="consumerProps"];
28->26 [style = bold, label=""];
35->49 [style = bold, label=""];
0->26 [style = dashed, label="0"];
15->19 [style = bold, label=""];
28->1 [style = dotted, label="true"];
56->33 [style = solid, label="task"];
56->24 [style = solid, label="task"];
6->15 [style = bold, label=""];
38->47 [style = solid, label="i"];
32->69 [style = dashed, label="0"];
44->56 [style = solid, label="baseSequenceName"];
35->39 [style = dashed, label="0"];
24->3 [style = solid, label="desc6"];
33->1 [style = solid, label="currentOffsets"];
23->19 [style = solid, label="desc1"];
27->10 [style = bold, label=""];
26->43 [style = solid, label="currentOffsets"];
34->44 [style = bold, label=""];
7->6 [style = solid, label="desc7"];
62->34 [style = bold, label=""];
0->54 [style = bold, label=""];
37->10 [style = solid, label="i"];
56->23 [style = solid, label="task"];
69->66 [style = bold, label=""];
41->34 [style = bold, label=""];
45->9 [style = bold, label=""];
1->60 [style = bold, label=""];
44->20 [style = solid, label="baseSequenceName"];
11->20 [style = bold, label=""];
10->50 [style = solid, label="i"];
26->58 [style = bold, label=""];
52->53 [style = bold, label=""];
5->9 [style = solid, label="numToAdd"];
60->26 [style = bold, label=""];
17->31 [style = bold, label=""];
26->36 [style = bold, label=""];
53->3 [style = bold, label=""];
70->63 [style = bold, label=""];
28->1 [style = bold, label=""];
25->7 [style = solid, label="task"];
25->16 [style = solid, label="task"];
57->72 [style = bold, label=""];
64->39 [style = bold, label=""];
39->11 [style = bold, label=""];
25->29 [style = solid, label="task"];
31->8 [style = dashed, label="0"];
20->71 [style = bold, label=""];
64->20 [style = solid, label="startPartitions"];
20->71 [style = solid, label="task"];
26->36 [style = solid, label="currentOffsets"];
71->57 [style = bold, label=""];
30->12 [style = solid, label="desc2"];
9->38 [style = solid, label="i"];
34->42 [style = dotted, label="true"];
47->40 [style = dotted, label="true"];
16->53 [style = solid, label="desc4"];
44->13 [style = bold, label=""];
12->52 [style = bold, label=""];
45->21 [style = dotted, label="true"];
20->25 [style = solid, label="startPartitions"];
20->35 [style = bold, label=""];
25->33 [style = solid, label="task"];
37->50 [style = bold, label=""];
68->23 [style = bold, label=""];
67->59 [style = bold, label=""];
}
