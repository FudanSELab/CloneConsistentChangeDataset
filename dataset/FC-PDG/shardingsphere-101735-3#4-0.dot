digraph {
12 [style = filled, label = "Object valueFromInsertValueContext = insertValueContext.getValue(0)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertGetValueWhenLiteralExpressionSegment['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Object valueFromInsertValueContext = onDuplicateUpdateContext.getValue(0)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Object literalObject = new Object()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "OnDuplicateUpdateContext onDuplicateUpdateContext = new OnDuplicateUpdateContext(assignments,parameters,0)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Collection<AssignmentSegment> assignments = makeLiteralExpressionSegment(literalObject)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "List<Object> parameters = Collections.emptyList()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(valueFromInsertValueContext,is(literalObject))@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "InsertValueContext insertValueContext = new InsertValueContext(assignments,parameters,0)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertGetValueWhenLiteralExpressionSegment['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Collection<ExpressionSegment> assignments = makeLiteralExpressionSegment(literalObject)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Collection<AssignmentSegment> assignments = createLiteralExpressionSegment(literalObject)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertGetValueWhenLiteralExpressionSegment['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4->3 [style = bold, label=""];
3->5 [style = solid, label="literalObject"];
5->6 [style = solid, label="assignments"];
2->6 [style = solid, label="parameters"];
10->11 [style = solid, label="assignments"];
3->7 [style = solid, label="literalObject"];
2->6 [style = bold, label=""];
8->3 [style = bold, label=""];
6->11 [style = dashed, label="0"];
11->12 [style = bold, label=""];
6->0 [style = bold, label=""];
2->11 [style = solid, label="parameters"];
0->12 [style = dashed, label="0"];
12->1 [style = bold, label=""];
0->1 [style = solid, label="valueFromInsertValueContext"];
3->10 [style = solid, label="literalObject"];
3->10 [style = bold, label=""];
5->2 [style = bold, label=""];
3->5 [style = bold, label=""];
5->10 [style = dashed, label="0"];
3->7 [style = bold, label=""];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
9->3 [style = bold, label=""];
12->1 [style = solid, label="valueFromInsertValueContext"];
10->2 [style = bold, label=""];
5->7 [style = dashed, label="0"];
7->6 [style = solid, label="assignments"];
2->11 [style = bold, label=""];
3->1 [style = solid, label="literalObject"];
}
