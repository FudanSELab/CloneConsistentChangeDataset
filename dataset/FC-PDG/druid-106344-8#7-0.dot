digraph {
12 [style = filled, label = "Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(),actualEvent.get(\"duration\"))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(\"true\",actualEvent.get(\"hasFilters\"))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertEquals(\"xx\",actualEvent.get(DruidMetrics.DATASOURCE))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "SearchQuery query = Druids.newSearchQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.dayGran).intervals(QueryRunnerTestHelper.fullOnIntervalSpec).dimensions(new ListFilteredDimensionSpec(new DefaultDimensionSpec(\"tags\",\"tags\"),ImmutableSet.of(\"t3\"),null)).build()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "queryMetrics.query(query)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "SearchQueryMetrics queryMetrics = DefaultSearchQueryMetricsFactory.instance().makeMetrics(query)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Map<String,Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testDefaultSearchQueryMetricsQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertTrue(actualEvent.containsKey(\"timestamp\"))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(\"0\",actualEvent.get(\"numComplexMetrics\"))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(QueryRunnerTestHelper.DATA_SOURCE,actualEvent.get(DruidMetrics.DATASOURCE))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "Assert.assertEquals(\"1\",actualEvent.get(\"numMetrics\"))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "List<Interval> expectedIntervals = QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC.getIntervals()@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "queryMetrics.reportQueryTime(0).emit(serviceEmitter)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(\"5\",actualEvent.get(\"threshold\"))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ServiceEmitter serviceEmitter = new ServiceEmitter(\"\",\"\",cachingEmitter)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "CachingEmitter cachingEmitter = new CachingEmitter()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "DefaultTopNQueryMetrics queryMetrics = new DefaultTopNQueryMetrics(TestHelper.makeJsonMapper())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(12,actualEvent.size())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(\"query/time\",actualEvent.get(\"metric\"))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(\"tags\",actualEvent.get(\"dimension\"))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(QueryRunnerTestHelper.dataSource,actualEvent.get(DruidMetrics.DATASOURCE))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "List<String> expectedStringIntervals = expectedIntervals.stream().map(null).collect(Collectors.toList())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(\"\",actualEvent.get(\"host\"))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "SearchQuery query = Druids.newSearchQueryBuilder().dataSource(QueryRunnerTestHelper.DATA_SOURCE).granularity(QueryRunnerTestHelper.DAY_GRAN).intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC).dimensions(new ListFilteredDimensionSpec(new DefaultDimensionSpec(\"tags\",\"tags\"),ImmutableSet.of(\"t3\"),null)).build()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "testDefaultTopNQueryMetricsQuery['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(\"\",actualEvent.get(\"service\"))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(query.getType(),actualEvent.get(DruidMetrics.TYPE))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "TopNQuery query = new TopNQueryBuilder().dataSource(\"xx\").granularity(Granularities.ALL).dimension(new ListFilteredDimensionSpec(new DefaultDimensionSpec(\"tags\",\"tags\"),ImmutableSet.of(\"t3\"),null)).metric(\"count\").intervals(QueryRunnerTestHelper.fullOnIntervalSpec).aggregators(new CountAggregatorFactory(\"count\")).threshold(5).filters(new SelectorDimFilter(\"tags\",\"t3\",null)).build()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(\"\",actualEvent.get(DruidMetrics.ID))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(\"false\",actualEvent.get(\"hasFilters\"))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(expectedStringIntervals,actualEvent.get(DruidMetrics.INTERVAL))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "List<Interval> expectedIntervals = QueryRunnerTestHelper.fullOnIntervalSpec.getIntervals()@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testDefaultSearchQueryMetricsQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "Assert.assertEquals(16,actualEvent.size())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertTrue(actualEvent.containsKey(\"feed\"))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(0L,actualEvent.get(\"value\"))@@@28@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9->36 [style = dashed, label="0"];
31->13 [style = solid, label="query"];
4->10 [style = bold, label=""];
22->25 [style = bold, label=""];
23->20 [style = bold, label=""];
10->8 [style = solid, label="serviceEmitter"];
20->13 [style = bold, label=""];
7->23 [style = dashed, label="0"];
5->9 [style = bold, label=""];
27->12 [style = bold, label=""];
28->34 [style = bold, label=""];
11->3 [style = solid, label="expectedStringIntervals"];
34->1 [style = bold, label=""];
1->15 [style = bold, label=""];
31->13 [style = bold, label=""];
0->2 [style = bold, label=""];
18->11 [style = bold, label=""];
35->2 [style = bold, label=""];
2->18 [style = bold, label=""];
3->6 [style = bold, label=""];
7->20 [style = bold, label=""];
16->22 [style = bold, label=""];
26->4 [style = bold, label=""];
23->13 [style = solid, label="query"];
10->7 [style = bold, label=""];
25->2 [style = bold, label=""];
14->1 [style = bold, label=""];
3->27 [style = bold, label=""];
36->21 [style = bold, label=""];
4->10 [style = solid, label="cachingEmitter"];
22->0 [style = bold, label=""];
0->25 [style = dashed, label="0"];
8->5 [style = bold, label=""];
11->3 [style = bold, label=""];
6->27 [style = dashed, label="0"];
10->23 [style = bold, label=""];
24->11 [style = bold, label=""];
30->4 [style = bold, label=""];
29->32 [style = bold, label=""];
12->14 [style = bold, label=""];
9->21 [style = bold, label=""];
14->29 [style = bold, label=""];
33->31 [style = bold, label=""];
10->33 [style = bold, label=""];
7->20 [style = solid, label="query"];
19->4 [style = bold, label=""];
7->13 [style = solid, label="query"];
0->35 [style = dashed, label="0"];
2->24 [style = bold, label=""];
13->8 [style = bold, label=""];
22->35 [style = bold, label=""];
5->36 [style = bold, label=""];
32->28 [style = bold, label=""];
21->17 [style = bold, label=""];
17->16 [style = bold, label=""];
23->20 [style = solid, label="query"];
18->24 [style = dashed, label="0"];
6->12 [style = bold, label=""];
}
