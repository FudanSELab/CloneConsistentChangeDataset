digraph {
19 [style = filled, label = "!client.ready(node,time.milliseconds())@@@12@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "testQuotaMetrics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(this.senderMetricsRegistry.produceThrottleTimeMax)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "selector.delayedReceive(new DelayedReceive(node.idString(),new NetworkReceive(node.idString(),buffer)))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "NetworkClient client = new NetworkClient(selector,metadata,\"mock\",Integer.MAX_VALUE,1000,1000,64 * 1024,64 * 1024,1000,10 * 1000,127 * 1000,time,true,new ApiVersions(),throttleTimeSensor,logContext)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "ClientRequest request = client.newClientRequest(node.idString(),builder,time.milliseconds(),true)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "buffer = RequestTestUtils.serializeResponseWithHeader(response,ApiKeys.PRODUCE.latestVersion(),request.correlationId())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "builder.rackId(\"\")@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "FetchRequest.Builder builder = FetchRequest.Builder.forConsumer(100,100,new LinkedHashMap<>())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "NetworkClient client = new NetworkClient(selector,metadata,\"mock\",Integer.MAX_VALUE,1000,1000,64 * 1024,64 * 1024,1000,10 * 1000,127 * 1000,ClientDnsLookup.USE_ALL_DNS_IPS,time,true,new ApiVersions(),throttleTimeSensor,logContext)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "i++@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "selector.clear()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "int throttleTimeMs = 100 * i@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Sensor throttleTimeSensor = Fetcher.throttleTimeSensor(metrics,metricsRegistry)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "client.close()@@@36@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ApiVersionsResponse apiVersionsResponse = ApiVersionsResponse.defaultApiVersionsResponse(400,ApiMessageType.ListenerType.ZK_BROKER)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "int i = 1@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testQuotaMetrics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "client.send(request,time.milliseconds())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertEquals(250,(Double)avgMetric.metricValue(),EPSILON)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "client.close()@@@38@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ByteBuffer buffer = RequestTestUtils.serializeResponseWithHeader(apiVersionsResponse,ApiKeys.API_VERSIONS.latestVersion(),0)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "selector.clear()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "selector.completeReceive(new NetworkReceive(node.idString(),buffer))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "selector.completeReceive(new NetworkReceive(node.idString(),buffer))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "time.sleep(client.throttleDelayMs(node,time.milliseconds()))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "MockSelector selector = new MockSelector(time)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Sensor throttleTimeSensor = Sender.throttleTimeSensor(this.senderMetricsRegistry)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "buildFetcher()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "i <= 3@@@18@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertEquals(400,(Double)maxMetric.metricValue(),EPSILON)@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "buffer = RequestTestUtils.serializeResponseWithHeader(response,ApiKeys.FETCH.latestVersion(),request.correlationId())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "client.poll(1,time.milliseconds())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "FetchResponse response = fullFetchResponse(tp0,nextRecords,Errors.NONE,i,throttleTimeMs)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "time.sleep(client.throttleDelayMs(node,time.milliseconds()))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "ProduceRequest.Builder builder = ProduceRequest.forCurrentMagic(new ProduceRequestData().setTopicData(new ProduceRequestData.TopicProduceDataCollection()).setAcks((short)1).setTimeoutMs(1000))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ClientRequest request = client.newClientRequest(node.idString(),builder,time.milliseconds(),true)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Cluster cluster = TestUtils.singletonCluster(\"test\",1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchThrottleTimeMax))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "NetworkClient client = new NetworkClient(selector,metadata,\"mock\",Integer.MAX_VALUE,1000,1000,64 * 1024,64 * 1024,1000,10 * 1000,127 * 1000,ClientDnsLookup.USE_ALL_DNS_IPS,time,true,new ApiVersions(),throttleTimeSensor,new LogContext())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "client.poll(1,time.milliseconds())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(400,(Double)maxMetric.metricValue(),EPS)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(250,(Double)avgMetric.metricValue(),EPS)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Node node = cluster.nodes().get(0)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testQuotaMetrics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchThrottleTimeAvg))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "client.poll(1,time.milliseconds())@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42->41 [style = bold, label=""];
15->10 [style = bold, label=""];
12->5 [style = bold, label=""];
44->35 [style = bold, label=""];
17->14 [style = dotted, label="true"];
3->13 [style = solid, label="request"];
14->28 [style = bold, label=""];
25->14 [style = bold, label=""];
32->34 [style = bold, label=""];
17->8 [style = dotted, label="true"];
40->46 [style = solid, label="throttleTimeSensor"];
25->36 [style = dashed, label="0"];
17->2 [style = dotted, label="true"];
40->31 [style = bold, label=""];
17->27 [style = bold, label=""];
17->27 [style = dotted, label="true"];
4->36 [style = solid, label="i"];
17->39 [style = dotted, label="true"];
14->28 [style = solid, label="buffer"];
17->20 [style = dotted, label="true"];
17->38 [style = dotted, label="true"];
23->46 [style = solid, label="selector"];
48->37 [style = bold, label=""];
24->3 [style = solid, label="builder"];
21->19 [style = bold, label=""];
25->36 [style = bold, label=""];
26->1 [style = bold, label=""];
30->26 [style = bold, label=""];
18->15 [style = bold, label=""];
8->36 [style = solid, label="i"];
8->27 [style = solid, label="i"];
0->21 [style = bold, label=""];
19->21 [style = dotted, label="true"];
20->38 [style = bold, label=""];
19->6 [style = bold, label=""];
26->44 [style = dashed, label="0"];
17->3 [style = dotted, label="true"];
4->17 [style = solid, label="i"];
4->8 [style = solid, label="i"];
33->23 [style = bold, label=""];
18->42 [style = dashed, label="0"];
8->25 [style = solid, label="i"];
8->17 [style = bold, label=""];
13->29 [style = solid, label="request"];
16->34 [style = dashed, label="0"];
6->4 [style = bold, label=""];
23->16 [style = solid, label="selector"];
20->8 [style = bold, label=""];
19->0 [style = dotted, label="true"];
32->7 [style = solid, label="node"];
17->43 [style = dotted, label="true"];
12->5 [style = solid, label="apiVersionsResponse"];
5->22 [style = bold, label=""];
24->3 [style = bold, label=""];
32->46 [style = bold, label=""];
4->17 [style = bold, label=""];
27->43 [style = bold, label=""];
1->35 [style = dashed, label="0"];
22->19 [style = bold, label=""];
39->13 [style = bold, label=""];
35->42 [style = bold, label=""];
9->31 [style = bold, label=""];
31->32 [style = bold, label=""];
32->21 [style = solid, label="node"];
9->16 [style = solid, label="throttleTimeSensor"];
17->45 [style = dotted, label="true"];
7->20 [style = bold, label=""];
32->16 [style = bold, label=""];
45->2 [style = bold, label=""];
15->41 [style = dashed, label="0"];
19->0 [style = bold, label=""];
43->13 [style = solid, label="builder"];
5->22 [style = solid, label="buffer"];
17->25 [style = dotted, label="true"];
32->20 [style = solid, label="node"];
26->44 [style = bold, label=""];
14->45 [style = dashed, label="0"];
17->28 [style = dotted, label="true"];
27->24 [style = bold, label=""];
27->25 [style = solid, label="throttleTimeMs"];
38->8 [style = bold, label=""];
41->47 [style = bold, label=""];
17->29 [style = dotted, label="true"];
17->36 [style = dotted, label="true"];
43->39 [style = bold, label=""];
25->14 [style = solid, label="response"];
8->17 [style = solid, label="i"];
17->24 [style = dotted, label="true"];
17->26 [style = bold, label=""];
46->12 [style = bold, label=""];
27->36 [style = solid, label="throttleTimeMs"];
29->25 [style = bold, label=""];
1->18 [style = bold, label=""];
17->30 [style = bold, label=""];
4->27 [style = solid, label="i"];
34->12 [style = bold, label=""];
37->23 [style = bold, label=""];
4->25 [style = solid, label="i"];
16->46 [style = dashed, label="0"];
9->34 [style = solid, label="throttleTimeSensor"];
28->2 [style = bold, label=""];
13->29 [style = bold, label=""];
9->40 [style = dashed, label="0"];
45->2 [style = solid, label="buffer"];
23->40 [style = bold, label=""];
36->45 [style = solid, label="response"];
3->13 [style = bold, label=""];
17->7 [style = dotted, label="true"];
2->7 [style = bold, label=""];
36->45 [style = bold, label=""];
23->34 [style = solid, label="selector"];
17->13 [style = dotted, label="true"];
23->9 [style = bold, label=""];
11->23 [style = bold, label=""];
16->12 [style = bold, label=""];
}
