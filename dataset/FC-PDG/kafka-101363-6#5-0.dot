digraph {
27 [style = filled, label = "verifyInEquality(JoinWindows.of(3).until(90),JoinWindows.of(3).until(60))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "verifyInEquality(TimeWindows.of(ofMillis(9)),TimeWindows.of(ofMillis(3)))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "verifyInEquality(JoinWindows.of(3).before(1).after(9).grace(3).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "verifyInEquality(TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)).grace(ofMillis(2)).until(4),TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2)).until(4))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).grace(2).until(9),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "verifyInEquality(JoinWindows.of(3).before(1).after(2).grace(3).until(90),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertNotEquals(TimeWindows.of(3).advanceBy(2).grace(1).until(4),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "verifyInEquality(JoinWindows.of(3).before(1).after(2).grace(9).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "verifyInEquality(TimeWindows.of(9),TimeWindows.of(3))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "verifyInEquality(TimeWindows.of(3).advanceBy(1).grace(2).until(4),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "verifyInEquality(JoinWindows.of(9),JoinWindows.of(3))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "verifyInEquality(TimeWindows.of(ofMillis(3)).grace(ofMillis(2)),TimeWindows.of(ofMillis(3)).grace(ofMillis(1)))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "verifyInEquality(JoinWindows.of(3).before(9),JoinWindows.of(3).before(2))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "verifyInEquality(JoinWindows.of(3).grace(9),JoinWindows.of(3).grace(2))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "verifyInEquality(TimeWindows.of(3).until(9),TimeWindows.of(3).until(4))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertNotEquals(TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(1)).until(4),TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2)).until(4))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "verifyInEquality(TimeWindows.of(ofMillis(3)).until(9),TimeWindows.of(ofMillis(3)).until(4))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertNotEquals(TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2)).until(9),TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2)).until(4))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "verifyInEquality(TimeWindows.of(ofMillis(4)).advanceBy(ofMillis(2)).grace(ofMillis(2)).until(4),TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2)).until(4))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "verifyInEquality(JoinWindows.of(3).before(9).after(2).grace(3).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "verifyInEquality(JoinWindows.of(3).after(9),JoinWindows.of(3).after(2))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "verifyInEquality(TimeWindows.of(3).grace(2),TimeWindows.of(3).grace(1))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "verifyInEquality(TimeWindows.of(4).advanceBy(2).grace(2).until(4),TimeWindows.of(3).advanceBy(2).grace(2).until(4))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "verifyInEquality(TimeWindows.of(3).advanceBy(2),TimeWindows.of(3).advanceBy(1))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "verifyInEquality(TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)),TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5->3 [style = bold, label=""];
15->10 [style = bold, label=""];
8->10 [style = dashed, label="0"];
4->16 [style = dashed, label="0"];
22->19 [style = bold, label=""];
0->6 [style = bold, label=""];
7->17 [style = dashed, label="0"];
0->19 [style = dashed, label="0"];
5->9 [style = dashed, label="0"];
10->17 [style = bold, label=""];
11->12 [style = bold, label=""];
1->0 [style = bold, label=""];
7->4 [style = bold, label=""];
0->12 [style = dashed, label="0"];
6->14 [style = dashed, label="0"];
5->18 [style = dashed, label="0"];
3->13 [style = dashed, label="0"];
8->7 [style = bold, label=""];
2->15 [style = dashed, label="0"];
25->27 [style = bold, label=""];
6->5 [style = bold, label=""];
21->20 [style = bold, label=""];
3->2 [style = bold, label=""];
23->21 [style = bold, label=""];
6->26 [style = dashed, label="0"];
19->26 [style = bold, label=""];
12->14 [style = bold, label=""];
18->25 [style = bold, label=""];
9->13 [style = bold, label=""];
14->9 [style = bold, label=""];
27->23 [style = bold, label=""];
13->15 [style = bold, label=""];
20->24 [style = bold, label=""];
17->16 [style = bold, label=""];
2->8 [style = bold, label=""];
26->18 [style = bold, label=""];
3->25 [style = dashed, label="0"];
}
