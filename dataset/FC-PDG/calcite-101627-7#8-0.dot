digraph {
6 [style = filled, label = "testSource['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(mapping.getTarget(3),equalTo(0))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThrows(,null)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(mapping.getTarget(2),equalTo(4))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(integers,equalTo(Arrays.asList(null,1,null,0,2,3,null,null,4,null)))@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThrows(,null)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(mapping.getTarget(0),equalTo(3))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(mapping.getTargetCount(),equalTo(5))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(integers,equalTo(targets))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "final Mapping mapping = Mappings.source(targets,10)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "List<Integer> sources = Arrays.asList(3,1,4,5,8)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(inverse.toString(),equalTo(\"(size=5, sourceCount=10, targetCount=5, elements=(1:1, 3:0, 4:2, 5:3, 8:4((\"))@@@19@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "assertThat(mapping.getTarget(4),equalTo(2))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final Mapping inverse = mapping.inverse()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThrows(,null)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "testTarget['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(mapping.getTargetCount(),equalTo(10))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "List<Integer> targets = Arrays.asList(3,1,4,5,8)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThrows(,null)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final List<Integer> integers = Mappings.asList(mapping)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(\"Mappings.asList\" + mapping + \")\",integers,equalTo(targets))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertThat(mapping.getSourceCount(),equalTo(5))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(mapping.getTarget(1),equalTo(1))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThrows(,null)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testSource['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "final Mapping inverse = mapping.inverse()@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final Mapping mapping = Mappings.target(sources,10)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(\"Mappings.asListNonNull(\" + mapping + \")\",Mappings.asListNonNull(mapping),equalTo(targets))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "final List<Integer> integers = Mappings.asList(mapping)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThrows(,null)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(mapping.getSourceCount(),equalTo(10))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22->27 [style = solid, label="integers"];
8->10 [style = bold, label=""];
0->9 [style = bold, label=""];
2->26 [style = bold, label=""];
20->9 [style = bold, label=""];
7->17 [style = dashed, label="0"];
25->23 [style = bold, label=""];
13->29 [style = dashed, label="0"];
4->15 [style = bold, label=""];
1->3 [style = bold, label=""];
23->4 [style = bold, label=""];
7->0 [style = bold, label=""];
5->20 [style = solid, label="targets"];
24->29 [style = bold, label=""];
21->25 [style = bold, label=""];
12->1 [style = bold, label=""];
5->7 [style = solid, label="targets"];
26->21 [style = bold, label=""];
1->22 [style = bold, label=""];
7->27 [style = dashed, label="0"];
16->26 [style = dashed, label="0"];
19->5 [style = bold, label=""];
6->5 [style = bold, label=""];
29->2 [style = bold, label=""];
30->28 [style = bold, label=""];
9->18 [style = bold, label=""];
5->28 [style = dashed, label="0"];
28->24 [style = solid, label="sources"];
11->17 [style = solid, label="mapping"];
3->7 [style = bold, label=""];
22->27 [style = bold, label=""];
11->20 [style = solid, label="mapping"];
11->13 [style = bold, label=""];
5->17 [style = solid, label="targets"];
5->11 [style = solid, label="targets"];
11->24 [style = dashed, label="0"];
10->4 [style = bold, label=""];
28->24 [style = bold, label=""];
16->14 [style = bold, label=""];
3->17 [style = bold, label=""];
17->20 [style = bold, label=""];
14->21 [style = dashed, label="0"];
3->7 [style = solid, label="integers"];
5->11 [style = bold, label=""];
14->8 [style = bold, label=""];
3->17 [style = solid, label="integers"];
11->3 [style = solid, label="mapping"];
15->12 [style = bold, label=""];
24->22 [style = solid, label="mapping"];
13->2 [style = bold, label=""];
2->16 [style = bold, label=""];
}
