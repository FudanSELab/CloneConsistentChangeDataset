digraph {
33 [style = filled, label = "assertThat(docMapper.mappers().hasNested(),equalTo(true))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertThat(doc.docs().size(),equalTo(2))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME),equalTo(nested1Mapper.nestedTypePath()))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"value\").startObject(\"nested1\").field(\"field1\",\"1\").field(\"field2\",\"2\").endObject().endObject()),XContentType.JSON))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(doc.docs().get(0).get(\"nested1.field1\"),equalTo(\"1\"))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "version.before(Version.V_8_0_0)@@@10@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME),equalTo(nested1Mapper.nestedTypePath()))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"value\").startArray(\"nested1\").startObject().field(\"field1\",\"1\").field(\"field2\",\"2\").endObject().startObject().field(\"field1\",\"3\").field(\"field2\",\"4\").endObject().endArray().endObject()),XContentType.JSON))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(doc.docs().get(1).get(NestedPathFieldMapper.NAME),equalTo(nested1Mapper.nestedTypePath()))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(doc.docs().size(),equalTo(3))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testReorderParent['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "assertThat(doc.docs().size(),equalTo(3))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertThat(doc.docs().get(2).get(\"field\"),equalTo(\"value\"))@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(doc.docs().get(1).get(\"field\"),equalTo(\"value\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "doc = docMapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"value\").startArray(\"nested1\").startObject().field(\"field1\",\"1\").field(\"field2\",\"2\").endObject().startObject().field(\"field1\",\"3\").field(\"field2\",\"4\").endObject().endArray().endObject()),XContentType.JSON))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(doc.docs().get(0).get(TypeFieldType.NAME),equalTo(nested1Mapper.nestedTypePath()))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "testReorderParent['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(doc.docs().get(1).get(\"nested1.field2\"),equalTo(\"4\"))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(doc.docs().get(0).get(\"_type\"),equalTo(nested1Mapper.nestedTypePath()))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Version version = VersionUtils.randomIndexCompatibleVersion(random())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(doc.docs().get(0).get(\"nested1.field1\"),equalTo(\"1\"))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(doc.docs().get(1).get(\"nested1.field2\"),equalTo(\"4\"))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertThat(doc.docs().get(0).get(\"nested1.field2\"),equalTo(\"2\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME),equalTo(nested1Mapper.nestedTypePath()))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(doc.docs().get(0).get(\"nested1.field2\"),equalTo(\"2\"))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "DocumentMapper docMapper = createDocumentMapper(mapping(null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertThat(doc.docs().get(0).get(\"nested1.field2\"),equalTo(\"2\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "DocumentMapper docMapper = createDocumentMapper(version,mapping(null))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(nested1Mapper.nested().isNested(),equalTo(true))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(doc.docs().get(1).get(\"nested1.field1\"),equalTo(\"3\"))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertThat(doc.docs().get(0).get(\"nested1.field1\"),equalTo(\"1\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(doc.docs().get(1).get(\"nested1.field1\"),equalTo(\"3\"))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testSingleNested['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4->10 [style = bold, label=""];
17->10 [style = bold, label=""];
8->28 [style = bold, label=""];
30->24 [style = bold, label=""];
9->0 [style = dotted, label="true"];
26->32 [style = bold, label=""];
9->0 [style = bold, label=""];
33->3 [style = bold, label=""];
23->30 [style = bold, label=""];
28->20 [style = bold, label=""];
0->6 [style = bold, label=""];
20->26 [style = bold, label=""];
16->6 [style = bold, label=""];
21->33 [style = bold, label=""];
0->16 [style = dashed, label="0"];
3->11 [style = bold, label=""];
22->29 [style = bold, label=""];
10->13 [style = solid, label="version"];
12->6 [style = bold, label=""];
9->16 [style = bold, label=""];
9->12 [style = dotted, label="false"];
14->1 [style = bold, label=""];
6->14 [style = bold, label=""];
7->9 [style = bold, label=""];
18->22 [style = bold, label=""];
29->19 [style = bold, label=""];
13->3 [style = bold, label=""];
10->13 [style = bold, label=""];
8->5 [style = bold, label=""];
24->31 [style = bold, label=""];
2->15 [style = bold, label=""];
5->8 [style = dashed, label="0"];
11->8 [style = bold, label=""];
5->7 [style = bold, label=""];
27->23 [style = bold, label=""];
1->2 [style = bold, label=""];
9->12 [style = bold, label=""];
32->18 [style = bold, label=""];
9->16 [style = dotted, label="true"];
19->15 [style = bold, label=""];
15->27 [style = bold, label=""];
25->21 [style = bold, label=""];
}
