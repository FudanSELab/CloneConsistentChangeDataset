digraph {
4 [style = filled, label = "Builder test = Input.from(Files.newInputStream(path))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Builder control = Input.from(Files.newInputStream(xmlFile))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "exportFormat.export(databaseContext,path,charset,entries)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "@TempDir Path testFolder@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "testPerformExportForSingleEntry['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "String tempFilePath = tempFile.toAbsolutePath().toString()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Builder control = Input.from(Files.newInputStream(resourceDir.resolve(xmlFileName)))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testPerformExport['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "String xmlFileName = filename.replace(\".bib\",\".xml\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Path path = testFolder.resolve(\"ThisIsARandomlyNamedFile\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Path importFile = resourceDir.resolve(filename)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(test,CompareMatcher.isSimilarTo(control).withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "String filename@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "bibtexmlExportFormat.export(databaseContext,tempFile,charset,entries)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(test,CompareMatcher.isSimilarTo(control).withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure())@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Builder test = Input.from(Files.newInputStream(Paths.get(tempFilePath)))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "List<BibEntry> entries = testImporter.importDatabase(importFile,StandardCharsets.UTF_8).getDatabase().getEntries()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testPerformExportForSingleEntry['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "@TempDir Path testFolder@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
16->10 [style = bold, label=""];
18->11 [style = bold, label=""];
8->3 [style = bold, label=""];
3->4 [style = solid, label="path"];
1->3 [style = bold, label=""];
8->7 [style = dotted, label="true"];
3->6 [style = bold, label=""];
16->12 [style = solid, label="xmlFileName"];
15->16 [style = bold, label=""];
2->4 [style = bold, label=""];
4->0 [style = bold, label=""];
6->2 [style = bold, label=""];
15->17 [style = dotted, label="true"];
4->0 [style = solid, label="test"];
5->17 [style = dashed, label="0"];
10->13 [style = bold, label=""];
14->12 [style = bold, label=""];
12->18 [style = bold, label=""];
17->10 [style = solid, label="filename"];
9->14 [style = bold, label=""];
18->11 [style = solid, label="test"];
13->9 [style = bold, label=""];
5->7 [style = dashed, label="0"];
9->14 [style = solid, label="entries"];
13->18 [style = solid, label="tempFilePath"];
1->5 [style = dotted, label="true"];
3->6 [style = solid, label="path"];
}
