digraph {
9 [style = filled, label = "Assert.assertTrue(\"Should read: both_nan_and_null column contains no null values\",shouldRead)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(startsWith(\"all_nulls\",\"asad\"),SPEC,true).eval(FILE)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertTrue(\"Should read: column with some nulls contains a non-null value\",shouldRead)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testNoNulls['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Assert.assertTrue(\"Should read: at least one null value in all null column\",shouldRead)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertFalse(\"Should skip: non-null column contains no null values\",shouldRead)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(\"Should read: column with some nulls contains a null value\",shouldRead)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertTrue(\"Should read: non-null column contains a non-null value\",shouldRead)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(isNull(\"all_nulls\"),SPEC,true).eval(FILE)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(isNull(\"some_nulls\"),SPEC,true).eval(FILE)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertFalse(\"Should skip: startsWith on all null column\",shouldRead)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testNoNulls['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(isNull(\"both_nan_and_null\"),SPEC,true).eval(FILE)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(notNull(\"some_nulls\"),SPEC,true).eval(FILE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(notNull(\"all_nulls\"),SPEC,true).eval(FILE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testAllNulls['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertFalse(\"Should skip: no non-null value in all null column\",shouldRead)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(isNull(\"no_nulls\"),SPEC,true).eval(FILE)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(notNull(\"no_nulls\"),SPEC,true).eval(FILE)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(isNull(\"all_nulls_missing_nan\"),SPEC,true).eval(FILE)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7->1 [style = bold, label=""];
15->17 [style = solid, label="shouldRead"];
2->6 [style = bold, label=""];
18->15 [style = bold, label=""];
1->3 [style = bold, label=""];
14->11 [style = solid, label="shouldRead"];
11->12 [style = bold, label=""];
6->0 [style = bold, label=""];
6->0 [style = solid, label="shouldRead"];
19->16 [style = solid, label="shouldRead"];
3->2 [style = solid, label="shouldRead"];
10->9 [style = solid, label="shouldRead"];
8->7 [style = bold, label=""];
5->1 [style = solid, label="shouldRead"];
19->16 [style = bold, label=""];
6->12 [style = dashed, label="0"];
5->1 [style = bold, label=""];
15->17 [style = bold, label=""];
0->10 [style = bold, label=""];
13->19 [style = bold, label=""];
3->2 [style = bold, label=""];
1->16 [style = dashed, label="0"];
7->1 [style = solid, label="shouldRead"];
12->18 [style = bold, label=""];
0->18 [style = dashed, label="0"];
16->14 [style = bold, label=""];
2->11 [style = dashed, label="0"];
10->9 [style = bold, label=""];
5->7 [style = dashed, label="0"];
3->14 [style = dashed, label="0"];
5->19 [style = dashed, label="0"];
14->11 [style = bold, label=""];
4->5 [style = bold, label=""];
12->18 [style = solid, label="shouldRead"];
}
