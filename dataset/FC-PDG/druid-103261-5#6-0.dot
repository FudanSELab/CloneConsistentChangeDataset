digraph {
15 [style = filled, label = "Assert.assertEquals(expectedResults.size(),results.size())@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "raw == null@@@9@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testBloomFilterAggExtractionFn['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testQuery(\"SELECT\" + \"BLOOM_FILTER(dim1, 1000)\" + \"FROM numfoo\",ImmutableList.of(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE3).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new BloomFilterAggregatorFactory(\"a0:agg\",new DefaultDimensionSpec(\"dim1\",\"a0:dim1\"),TEST_NUM_ENTRIES))).context(BaseCalciteQueryTest.QUERY_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a58e0b))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "BloomKFilter expected1 = new BloomKFilter(TEST_NUM_ENTRIES)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final String sql = \"SELECT\" + \"BLOOM_FILTER(SUBSTRING(dim1, 1, 1), 1000)\" + \"FROM numfoo\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final String sql = \"SELECT\" + \"BLOOM_FILTER(dim1, 1000)\" + \"FROM numfoo\"@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "final List<Object((> expectedResults = ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a58e79)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int i = 0@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE3).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new BloomFilterAggregatorFactory(\"a0:agg\",new ExtractionDimensionSpec(\"dim1\",\"a0:dim1\",new SubstringDimExtractionFn(0,1)),TEST_NUM_ENTRIES))).context(BaseCalciteQueryTest.TIMESERIES_CONTEXT_DEFAULT).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "cannotVectorize()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "testBloomFilterAgg['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE3).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new BloomFilterAggregatorFactory(\"a0:agg\",new DefaultDimensionSpec(\"dim1\",\"a0:dim1\"),TEST_NUM_ENTRIES))).context(BaseCalciteQueryTest.TIMESERIES_CONTEXT_DEFAULT).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "testBloomFilterAgg['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertArrayEquals(expectedResults.get(i),results.get(i))@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "i < expectedResults.size()@@@21@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "expected1.addString(raw)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "final List<Object((> results = sqlLifecycle.runSimple(sql,BaseCalciteQueryTest.QUERY_CONTEXT_DEFAULT,CalciteTestBase.DEFAULT_PARAMETERS,authenticationResult).toList()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "expected1.addString(raw)@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "String raw = NullHandling.emptyToNullIfNeeded((String)row.getRaw(\"dim1\"))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "i++@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "raw == null || \"\".equals(raw)@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "expected1.addBytes(null,0,0)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "expected1.addString(raw.substring(0,1))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "raw == null@@@7@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "BloomKFilter expected1 = new BloomKFilter(TEST_NUM_ENTRIES)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6->3 [style = bold, label=""];
19->18 [style = bold, label=""];
2->26 [style = bold, label=""];
2->26 [style = solid, label="raw"];
7->10 [style = dotted, label="true"];
24->2 [style = bold, label=""];
0->6 [style = bold, label=""];
7->10 [style = bold, label=""];
1->9 [style = solid, label="i"];
3->18 [style = dashed, label="0"];
0->12 [style = bold, label=""];
11->4 [style = bold, label=""];
2->18 [style = bold, label=""];
26->24 [style = dotted, label="false"];
0->26 [style = dashed, label="0"];
3->15 [style = bold, label=""];
4->22 [style = dashed, label="0"];
5->14 [style = bold, label=""];
1->7 [style = solid, label="i"];
7->9 [style = dotted, label="true"];
9->7 [style = bold, label=""];
7->8 [style = bold, label=""];
26->6 [style = bold, label=""];
26->24 [style = bold, label=""];
1->7 [style = bold, label=""];
13->11 [style = bold, label=""];
22->5 [style = bold, label=""];
2->12 [style = solid, label="raw"];
9->10 [style = solid, label="i"];
14->19 [style = solid, label="raw"];
0->6 [style = dotted, label="true"];
6->2 [style = bold, label=""];
20->2 [style = bold, label=""];
14->3 [style = solid, label="expected1"];
12->2 [style = bold, label=""];
2->0 [style = bold, label=""];
19->14 [style = bold, label=""];
8->25 [style = dashed, label="0"];
12->24 [style = dashed, label="0"];
2->14 [style = bold, label=""];
1->10 [style = solid, label="i"];
11->22 [style = bold, label=""];
2->0 [style = solid, label="raw"];
0->12 [style = dotted, label="false"];
16->14 [style = bold, label=""];
20->2 [style = dotted, label="true"];
26->6 [style = dotted, label="true"];
14->20 [style = solid, label="raw"];
14->2 [style = bold, label=""];
12->3 [style = bold, label=""];
10->9 [style = bold, label=""];
7->25 [style = bold, label=""];
9->7 [style = solid, label="i"];
16->18 [style = solid, label="expected1"];
23->11 [style = bold, label=""];
20->19 [style = dotted, label="false"];
20->19 [style = bold, label=""];
4->5 [style = bold, label=""];
21->17 [style = bold, label=""];
24->3 [style = bold, label=""];
17->16 [style = bold, label=""];
14->20 [style = bold, label=""];
15->1 [style = bold, label=""];
}
