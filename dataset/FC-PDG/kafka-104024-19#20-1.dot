digraph {
2 [style = filled, label = "coordinator.invokeCompletedOffsetCommitCallbacks()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testCommitOffsetAsyncCoordinatorNotAvailable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(cb.exception instanceof RetriableCommitFailedException)@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "MockCommitCallback cb = new MockCommitCallback()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "coordinator.commitOffsetsAsync(singletonMap(t1p,new OffsetAndMetadata(100L)),cb)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "coordinator.ensureCoordinatorReady()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testCommitOffsetAsyncCoordinatorNotAvailable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "coordinator.ensureCoordinatorReady(Long.MAX_VALUE)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "client.prepareResponse(groupCoordinatorResponse(node,Errors.NONE))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testCommitOffsetAsyncNotCoordinator['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertTrue(coordinator.coordinatorUnknown())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "prepareOffsetCommitRequest(singletonMap(t1p,100L),Errors.COORDINATOR_NOT_AVAILABLE)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(1,cb.invoked)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
5->3 [style = bold, label=""];
8->1 [style = bold, label=""];
10->3 [style = bold, label=""];
0->9 [style = bold, label=""];
6->0 [style = bold, label=""];
5->10 [style = dashed, label="0"];
1->10 [style = bold, label=""];
12->1 [style = bold, label=""];
11->1 [style = bold, label=""];
7->2 [style = bold, label=""];
3->4 [style = bold, label=""];
2->6 [style = bold, label=""];
3->7 [style = solid, label="cb"];
4->7 [style = bold, label=""];
}
