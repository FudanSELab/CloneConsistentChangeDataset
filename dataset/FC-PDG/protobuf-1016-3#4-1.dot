digraph {
11 [style = filled, label = "ByteString cc = TestAllTypesLite.newBuilder().setOneofLazyNestedMessage(NestedMessage.newBuilder().setCc(22).build()).build().toByteString()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testParseLazy_oneOf['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ByteString concat = bb.concat(cc)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testParseLazy['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(message.getOptionalLazyMessage().getBb()).isEqualTo(11)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(11,message.getOneofLazyNestedMessage().getBb())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "TestAllTypesLite message = TestAllTypesLite.parseFrom(concat)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ByteString bb = TestAllTypesLite.newBuilder().setOptionalLazyMessage(NestedMessage.newBuilder().setBb(11).build()).build().toByteString()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ByteString cc = TestAllTypesLite.newBuilder().setOptionalLazyMessage(NestedMessage.newBuilder().setCc(22).build()).build().toByteString()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(22L,message.getOptionalLazyMessage().getCc())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertThat(message.getOptionalLazyMessage().getCc()).isEqualTo(22L)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertEquals(22L,message.getOneofLazyNestedMessage().getCc())@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ByteString bb = TestAllTypesLite.newBuilder().setOneofLazyNestedMessage(NestedMessage.newBuilder().setBb(11).build()).build().toByteString()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testParseLazy['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertEquals(11,message.getOptionalLazyMessage().getBb())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5->3 [style = bold, label=""];
6->9 [style = dashed, label="0"];
11->5 [style = solid, label="cc"];
3->6 [style = bold, label=""];
6->0 [style = bold, label=""];
1->10 [style = dashed, label="0"];
9->7 [style = bold, label=""];
5->3 [style = solid, label="concat"];
3->9 [style = bold, label=""];
8->1 [style = bold, label=""];
0->14 [style = dashed, label="0"];
2->5 [style = solid, label="cc"];
11->5 [style = bold, label=""];
12->10 [style = bold, label=""];
6->13 [style = dashed, label="0"];
3->13 [style = bold, label=""];
2->11 [style = dashed, label="0"];
1->2 [style = bold, label=""];
4->1 [style = bold, label=""];
0->7 [style = dashed, label="0"];
13->14 [style = bold, label=""];
2->5 [style = bold, label=""];
10->11 [style = bold, label=""];
}
