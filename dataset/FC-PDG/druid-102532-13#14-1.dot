digraph {
18 [style = filled, label = "testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "i++@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "!task.getRunner().getStatus().equals(Status.READING)@@@5@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Thread.sleep(25)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Thread.sleep(20)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,200L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,500L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "!task.getRunner().getStatus().equals(Status.READING)@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "runTask(task)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(200L,(long)task.getRunner().getCurrentOffsets().get(0))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,2L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null,INPUT_FORMAT))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testRunWithOffsetOutOfRangeExceptionAndPause['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "task.getRunner().pause()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "!task.getRunner().getStatus().equals(Status.PAUSED)@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "i < 5@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "int i = 0@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "insertData()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "resetOffsetAutomatically = true@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testRunWithOffsetOutOfRangeExceptionAndPause['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "runTask(task)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,2L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(Status.READING,task.getRunner().getStatus())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
16->15 [style = bold, label=""];
11->2 [style = solid, label="task"];
14->19 [style = dotted, label="true"];
10->14 [style = bold, label=""];
16->10 [style = bold, label=""];
19->14 [style = solid, label="i"];
2->1 [style = bold, label=""];
16->15 [style = dotted, label="true"];
18->12 [style = bold, label=""];
14->17 [style = bold, label=""];
9->8 [style = bold, label=""];
15->16 [style = bold, label=""];
3->4 [style = bold, label=""];
13->11 [style = bold, label=""];
11->2 [style = bold, label=""];
2->15 [style = dashed, label="0"];
14->20 [style = dotted, label="true"];
14->17 [style = dotted, label="true"];
12->13 [style = bold, label=""];
6->5 [style = bold, label=""];
7->5 [style = bold, label=""];
1->6 [style = bold, label=""];
19->14 [style = bold, label=""];
5->7 [style = dotted, label="true"];
3->4 [style = solid, label="task"];
3->8 [style = dashed, label="0"];
5->7 [style = bold, label=""];
8->4 [style = solid, label="task"];
4->1 [style = bold, label=""];
1->2 [style = bold, label=""];
8->4 [style = bold, label=""];
1->2 [style = dotted, label="true"];
10->14 [style = solid, label="i"];
20->19 [style = bold, label=""];
10->19 [style = solid, label="i"];
17->20 [style = bold, label=""];
2->16 [style = bold, label=""];
}
