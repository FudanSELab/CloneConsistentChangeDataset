digraph {
20 [style = filled, label = "List<MockSpan> spans = tracer.finishedSpans()@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "ADVICE.afterMethod(targetObject,executeMethod,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16b8677,new MethodInvocationResult())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertThat(fields.get(ErrorLogTagKeys.EVENT),is(\"error\"))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(fields.get(ErrorLogTagKeys.ERROR_KIND),is(\"java.io.IOException\"))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(tags.get(\"db.instance\"),is(\"mock.db\"))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(tags.get(\"db.statement\"),is(\"select 1\"))@@@29@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ADVICE.afterMethod(targetObject,executeMethod,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16b85c0,new MethodInvocationResult())@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "List<MockSpan.LogEntry> entries = span.logEntries()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(tags.get(\"span.kind\"),is(\"client\"))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertExceptionHandle['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "JDBCExecutionUnit executionUnit = mock()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertMethod['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "JDBCExecutionUnit executionUnit = mock()@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertThat(span.operationName(),is(\"/ShardingSphere/executeSQL/\"))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<MockSpan> spans = tracer.finishedSpans()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "MockSpan span = spans.get(0)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "MockAdviceTargetObject targetObject = new MockAdviceTargetObject()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Map<String,Object> extraMap = Collections.singletonMap(\"_root_span_\",null)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "when(executionUnit.getExecutionUnit()).thenReturn(new ExecutionUnit(\"mock.db\",new SQLUnit(\"select 1\",Lists.newArrayList())))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Map<String,Object> tags = span.tags()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Map<String,?> fields = entries.get(0).fields()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(span.operationName(),is(\"/ShardingSphere/executeSQL/\"))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertMethod['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "ADVICE.onThrowing(targetObject,executeMethod,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16b8669,new IOException())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Map<String,Object> extraMap = Maps.newHashMap()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "extraMap.put(\"_root_span_\",null)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(tags.get(\"db.type\"),is(\"sql\"))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(spans.size(),is(1))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ADVICE.beforeMethod(targetObject,executeMethod,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16b865b,new MethodInvocationResult())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
16->12 [style = solid, label="targetObject"];
14->3 [style = bold, label=""];
11->0 [style = solid, label="extraMap"];
18->3 [style = solid, label="extraMap"];
25->28 [style = bold, label=""];
16->18 [style = bold, label=""];
16->11 [style = bold, label=""];
4->17 [style = bold, label=""];
11->12 [style = solid, label="extraMap"];
22->16 [style = bold, label=""];
2->6 [style = bold, label=""];
19->20 [style = bold, label=""];
0->12 [style = bold, label=""];
26->25 [style = bold, label=""];
21->19 [style = solid, label="executionUnit"];
21->3 [style = solid, label="executionUnit"];
8->14 [style = bold, label=""];
5->15 [style = bold, label=""];
16->0 [style = solid, label="targetObject"];
24->13 [style = bold, label=""];
27->16 [style = bold, label=""];
13->1 [style = bold, label=""];
3->0 [style = bold, label=""];
20->4 [style = bold, label=""];
7->26 [style = bold, label=""];
17->7 [style = bold, label=""];
14->0 [style = solid, label="executionUnit"];
14->12 [style = solid, label="executionUnit"];
18->19 [style = solid, label="extraMap"];
6->5 [style = bold, label=""];
14->23 [style = solid, label="executionUnit"];
0->23 [style = bold, label=""];
10->16 [style = bold, label=""];
12->4 [style = bold, label=""];
3->19 [style = bold, label=""];
15->9 [style = bold, label=""];
11->18 [style = dashed, label="0"];
11->23 [style = solid, label="extraMap"];
13->2 [style = bold, label=""];
16->3 [style = solid, label="targetObject"];
28->24 [style = bold, label=""];
11->8 [style = bold, label=""];
23->12 [style = bold, label=""];
1->2 [style = bold, label=""];
18->21 [style = bold, label=""];
16->19 [style = solid, label="targetObject"];
16->23 [style = solid, label="targetObject"];
21->14 [style = bold, label=""];
}
