digraph {
4 [style = filled, label = "StreamObserver<Commands> responseObserver@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "collect['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "return new StreamObserver<SegmentObject>(){@Override public void onNext(SegmentObject segment){if (log.isDebugEnabled()) {log.debug(\"received segment in streaming\")}HistogramMetrics.Timer timer = histogram.createTimer()try {segmentParserService.send(segment)}catch (Exception e) {timer.finish()}}@Override public void onError(Throwable throwable){log.error(throwable.getMessage(),throwable)responseObserver.onCompleted()}@Override public void onCompleted(){responseObserver.onNext(Commands.newBuilder().build())responseObserver.onCompleted()}}@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "collect['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "return new StreamObserver<LogData>(){private void setServiceName(LogData.Builder builder){if (StringUtil.isEmpty(serviceName) && StringUtil.isNotEmpty(builder.getService())) {serviceName = builder.getService()}if (StringUtil.isNotEmpty(serviceName)) {builder.setService(serviceName)}}@Override public void onNext(final LogData logData){if (log.isDebugEnabled()) {log.debug(\"received log in streaming\")}HistogramMetrics.Timer timer = histogram.createTimer()try {LogData.Builder builder = logData.toBuilder()setServiceName(builder)logAnalyzerService.doAnalysis(builder,null)}catch (Exception e) {timer.finish()}}@Override public void onError(final Throwable throwable){log.error(throwable.getMessage(),throwable)responseObserver.onCompleted()}@Override public void onCompleted(){responseObserver.onNext(Commands.newBuilder().build())responseObserver.onCompleted()}}@@@3@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final StreamObserver<Commands> responseObserver@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "collect['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1->2 [style = dotted, label="true"];
2->4 [style = dashed, label="0"];
6->4 [style = dotted, label="true"];
3->0 [style = bold, label=""];
3->2 [style = dotted, label="true"];
0->5 [style = dashed, label="0"];
6->5 [style = bold, label=""];
1->0 [style = bold, label=""];
}
