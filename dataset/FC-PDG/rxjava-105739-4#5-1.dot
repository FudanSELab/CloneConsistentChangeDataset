digraph {
6 [style = filled, label = "verify(singleObserver,times(1)).onSuccess(expected)@@@33@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "mapped.subscribe(singleObserver)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "toMultimapWithCollectionFactory['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "verify(singleObserver,never()).onError(any())@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "expected.put(3,new HashSet<String>(Arrays.asList(\"eee\")))@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Supplier<Map<Integer,Collection<String>>> mapSupplier = new Supplier<Map<Integer,Collection<String>>>(){@Override public Map<Integer,Collection<String>> get(){return new HashMap<Integer,Collection<String>>()}}@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Map<Integer,Collection<String>> expected = new HashMap<Integer,Collection<String>>()@@@28@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expected.put(2,Arrays.asList(\"cc\",\"dd\"))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Function<Integer,Collection<String>> collectionFactory = new Function<Integer,Collection<String>>(){@Override public Collection<String> apply(Integer t1){if (t1 == 2) {return new ArrayList<String>()}{return new HashSet<String>()}}}@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expected.put(3,new HashSet<>(Arrays.asList(\"eee\")))@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Flowable<String> source = Flowable.just(\"cc\",\"dd\",\"eee\",\"eee\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Map<Integer,Collection<String>> expected = new HashMap<>()@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Function<String,String> identity = new Function<String,String>(){@Override public String apply(String v){return v}}@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "toMultimapWithCollectionFactory['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Single<Map<Integer,Collection<String>>> mapped = source.toMultimap(lengthFunc,identity,mapSupplier,collectionFactory)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Observable<String> source = Observable.just(\"cc\",\"dd\",\"eee\",\"eee\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "toMultimapWithCollectionFactory['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3->1 [style = solid, label="identity"];
16->8 [style = bold, label=""];
10->14 [style = bold, label=""];
7->14 [style = dashed, label="0"];
12->6 [style = solid, label="expected"];
8->1 [style = solid, label="collectionFactory"];
8->3 [style = bold, label=""];
0->16 [style = dashed, label="0"];
4->1 [style = solid, label="mapSupplier"];
2->10 [style = bold, label=""];
15->16 [style = bold, label=""];
3->4 [style = bold, label=""];
10->7 [style = bold, label=""];
7->9 [style = bold, label=""];
2->12 [style = dashed, label="0"];
11->0 [style = bold, label=""];
12->10 [style = bold, label=""];
5->6 [style = bold, label=""];
0->8 [style = bold, label=""];
1->12 [style = bold, label=""];
2->6 [style = solid, label="expected"];
9->5 [style = bold, label=""];
14->9 [style = bold, label=""];
1->2 [style = bold, label=""];
4->1 [style = bold, label=""];
13->0 [style = bold, label=""];
}
