digraph {
2 [style = filled, label = "final List<DimensionsSpec> expectedDimensionsSpec = getExpectedDimensionsSpecForAutoGeneration(keepSegmentGranularity)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(1,ingestionSpecs.size())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertIngestionSchema(ingestionSpecs,expectedDimensionsSpec,Collections.singletonList(COMPACTION_INTERVAL),Granularities.ALL)@@@12@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final List<IndexIngestionSpec> ingestionSpecs = CompactionTask.createIngestionSchema(toolbox,new SegmentProvider(DATA_SOURCE,COMPACTION_INTERVAL),new PartitionConfigurationManager(null,TUNING_CONFIG),null,null,keepSegmentGranularity,null,objectMapper)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "keepSegmentGranularity@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final List<IndexIngestionSpec> ingestionSpecs = CompactionTask.createIngestionSchema(toolbox,new SegmentProvider(SEGMENTS),new PartitionConfigurationManager(null,TUNING_CONFIG),null,keepSegmentGranularity,null,objectMapper)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertIngestionSchema(ingestionSpecs,expectedDimensionsSpec,AGGREGATORS,SEGMENT_INTERVALS,Granularities.MONTH)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "testCreateIngestionSchema['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertIngestionSchema(ingestionSpecs,expectedDimensionsSpec,AGGREGATORS,Collections.singletonList(COMPACTION_INTERVAL),Granularities.ALL)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "ingestionSpecs.sort(null)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final List<IndexIngestionSpec> ingestionSpecs = CompactionTask.createIngestionSchema(toolbox,new SegmentProvider(DATA_SOURCE,COMPACTION_INTERVAL),new PartitionConfigurationManager(null,TUNING_CONFIG),null,keepSegmentGranularity,null,objectMapper)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(6,ingestionSpecs.size())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testCreateIngestionSchemaWithCustomSegments['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertIngestionSchema(ingestionSpecs,expectedDimensionsSpec,SEGMENT_INTERVALS,Granularities.MONTH)@@@8@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testCreateIngestionSchema['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5->13 [style = dashed, label="0"];
0->3 [style = bold, label=""];
2->9 [style = solid, label="expectedDimensionsSpec"];
1->4 [style = bold, label=""];
5->7 [style = solid, label="ingestionSpecs"];
8->12 [style = dotted, label="false"];
8->7 [style = dotted, label="true"];
8->4 [style = dotted, label="false"];
2->7 [style = solid, label="expectedDimensionsSpec"];
10->12 [style = solid, label="ingestionSpecs"];
2->12 [style = solid, label="expectedDimensionsSpec"];
2->4 [style = solid, label="expectedDimensionsSpec"];
8->3 [style = dotted, label="true"];
4->12 [style = dashed, label="0"];
13->4 [style = solid, label="ingestionSpecs"];
8->0 [style = bold, label=""];
3->9 [style = bold, label=""];
8->1 [style = bold, label=""];
6->5 [style = bold, label=""];
5->2 [style = bold, label=""];
5->10 [style = dashed, label="0"];
3->7 [style = bold, label=""];
11->10 [style = bold, label=""];
7->9 [style = dashed, label="0"];
13->7 [style = solid, label="ingestionSpecs"];
1->12 [style = bold, label=""];
5->4 [style = solid, label="ingestionSpecs"];
10->2 [style = bold, label=""];
8->0 [style = dotted, label="true"];
8->9 [style = dotted, label="true"];
14->13 [style = bold, label=""];
8->1 [style = dotted, label="false"];
10->9 [style = solid, label="ingestionSpecs"];
2->8 [style = bold, label=""];
13->2 [style = bold, label=""];
}
