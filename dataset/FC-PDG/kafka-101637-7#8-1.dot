digraph {
3 [style = filled, label = "final TestKTableValueGetterSupplier<String,String> valueGetterSupplier = new TestKTableValueGetterSupplier<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final boolean leftJoin = true@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "processor.init(context)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "valueGetterSupplier.put(\"lhs1\",null)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final long(( oldHash = Murmur3.hash128(STRING_SERIALIZER.serialize(\"topic-join-resolver\",\"oldLhsValue\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "processor.process(\"lhs1\",new SubscriptionResponseWrapper<>(hash,null))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "shouldNotForwardWhenHashDoesNotMatch['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final org.apache.kafka.streams.processor.Processor<String,SubscriptionResponseWrapper<String>> processor = processorSupplier.get()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "final List<MockProcessorContext.CapturedForward> forwarded = context.forwarded()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final boolean leftJoin = false@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final Processor<String,SubscriptionResponseWrapper<String>> processor = processorSupplier.get()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(forwarded.size(),is(1))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final long(( hash = null@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "shouldEmitTombstoneForLeftJoinWhenRightIsNullAndLeftIsNull['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "context.setRecordMetadata(\"topic\",0,0,new RecordHeaders(),0)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final MockProcessorContext context = new MockProcessorContext()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "valueGetterSupplier.put(\"lhs1\",\"lhsValue\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(forwarded,empty())@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "processor.process(\"lhs1\",new SubscriptionResponseWrapper<>(oldHash,\"rhsValue\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(forwarded.get(0).keyValue(),is(new KeyValue<>(\"lhs1\",null)))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final SubscriptionResolverJoinProcessorSupplier<String,String,String,String> processorSupplier = new SubscriptionResolverJoinProcessorSupplier<>(valueGetterSupplier,STRING_SERIALIZER,null,JOINER,leftJoin)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "shouldNotForwardWhenHashDoesNotMatch['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9->20 [style = dashed, label="0"];
14->3 [style = bold, label=""];
18->3 [style = bold, label=""];
3->12 [style = solid, label="valueGetterSupplier"];
6->9 [style = solid, label="forwarded"];
21->19 [style = bold, label=""];
4->17 [style = dashed, label="0"];
7->12 [style = bold, label=""];
7->16 [style = dashed, label="0"];
2->3 [style = bold, label=""];
11->6 [style = bold, label=""];
21->19 [style = solid, label="hash"];
1->10 [style = solid, label="context"];
3->16 [style = bold, label=""];
19->6 [style = bold, label=""];
12->0 [style = bold, label=""];
13->1 [style = bold, label=""];
8->17 [style = bold, label=""];
6->20 [style = bold, label=""];
12->13 [style = bold, label=""];
16->12 [style = solid, label="leftJoin"];
10->8 [style = bold, label=""];
3->7 [style = bold, label=""];
11->19 [style = dashed, label="0"];
0->1 [style = bold, label=""];
0->13 [style = dashed, label="0"];
7->12 [style = solid, label="leftJoin"];
5->11 [style = bold, label=""];
8->4 [style = bold, label=""];
6->9 [style = bold, label=""];
1->10 [style = bold, label=""];
20->15 [style = bold, label=""];
4->5 [style = bold, label=""];
16->12 [style = bold, label=""];
17->21 [style = bold, label=""];
5->11 [style = solid, label="oldHash"];
}
