digraph {
14 [style = filled, label = "testBrokerOrderedScan['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(expectedNumRows - count,events.size())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(expectedNumRows,count)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "expectedNumRows - count >= batchSize@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "events.size() != batchSize@@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "int count = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "count += events.size()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "QueryPlus<ScanResultValue> queryPlus = QueryPlus.wrap(query)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "itr.hasNext()@@@8@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ScanQuery query = Druids.newScanQueryBuilder().limit(limit).order(ScanQuery.Order.DESCENDING).dataSource(\"some datasource\").batchSize(batchSize).intervals(QueryRunnerTestHelper.fullOnIntervalSpec).resultFormat(resultFormat).build()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "testBrokerOrderedScan['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "int expectedNumRows = Math.min(limit,NUM_ELEMENTS)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "count += events.size()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ScanResultValue curr = itr.next()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(1,events.size())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "List<Map<String,Object>> events = ScanQueryTestHelper.getEventsListResultFormat(curr)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ScanQuery query = Druids.newScanQueryBuilder().limit(limit).order(ScanQuery.Order.DESCENDING).dataSource(\"some datasource\").batchSize(batchSize).intervals(QueryRunnerTestHelper.fullOnIntervalSpec).resultFormat(resultFormat).context(ImmutableMap.of(ScanQuery.CTX_KEY_OUTERMOST,false)).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ScanQueryLimitRowIterator itr = new ScanQueryLimitRowIterator((null),queryPlus,ResponseContext.createEmpty())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testHistoricalOrderedScan['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "ScanQuery query = Druids.newScanQueryBuilder().limit(limit).order(ScanQuery.Order.DESCENDING).dataSource(\"some datasource\").batchSize(batchSize).intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC).resultFormat(RESULT_FORMAT).build()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(expectedNumRows,count)@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.fail(\"Batch size is incorrect\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->21 [style = solid, label="count"];
4->9 [style = bold, label=""];
16->15 [style = bold, label=""];
2->0 [style = solid, label="curr"];
11->12 [style = solid, label="count"];
3->21 [style = solid, label="expectedNumRows"];
7->12 [style = bold, label=""];
0->19 [style = bold, label=""];
9->12 [style = solid, label="count"];
8->2 [style = dotted, label="true"];
3->1 [style = solid, label="expectedNumRows"];
19->20 [style = bold, label=""];
20->21 [style = solid, label="count"];
8->7 [style = dotted, label="true"];
15->6 [style = bold, label=""];
18->6 [style = solid, label="query"];
13->6 [style = solid, label="query"];
12->1 [style = bold, label=""];
9->8 [style = bold, label=""];
13->15 [style = dashed, label="0"];
1->9 [style = bold, label=""];
7->12 [style = dotted, label="true"];
0->7 [style = bold, label=""];
11->5 [style = solid, label="count"];
7->9 [style = bold, label=""];
20->8 [style = bold, label=""];
2->0 [style = bold, label=""];
15->6 [style = solid, label="query"];
8->5 [style = bold, label=""];
8->2 [style = bold, label=""];
12->4 [style = bold, label=""];
11->3 [style = bold, label=""];
18->6 [style = bold, label=""];
12->1 [style = dotted, label="false"];
7->19 [style = dashed, label="0"];
3->8 [style = bold, label=""];
6->10 [style = bold, label=""];
8->21 [style = bold, label=""];
11->1 [style = solid, label="count"];
9->5 [style = solid, label="count"];
8->0 [style = dotted, label="true"];
12->4 [style = dotted, label="true"];
8->20 [style = dotted, label="true"];
9->1 [style = solid, label="count"];
14->13 [style = bold, label=""];
13->6 [style = bold, label=""];
3->5 [style = solid, label="expectedNumRows"];
8->9 [style = dotted, label="true"];
13->18 [style = dashed, label="0"];
6->10 [style = solid, label="queryPlus"];
17->18 [style = bold, label=""];
8->19 [style = dotted, label="true"];
3->12 [style = solid, label="expectedNumRows"];
10->11 [style = bold, label=""];
}
