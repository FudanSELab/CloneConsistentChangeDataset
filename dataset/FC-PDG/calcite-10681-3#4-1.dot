digraph {
7 [style = filled, label = "checkCnf(or(and(eq(xRef,literal1),eq(yRef,literal1),eq(zRef,literal1)),and(eq(xRef,literal2),eq(yRef,literal2),eq(aRef,literal2)),and(eq(xRef,literal3),eq(aRef,literal3),eq(bRef,literal3))),\"AND(\" + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.x, 3)), \" + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.a, 3)), \" + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.b, 3)), \" + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.x, 3)), \" + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.a, 3)), \" + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.b, 3)), \" + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.x, 3)), \" + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.a, 3)), \" + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.b, 3)), \" + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.x, 3)), \" + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.a, 3)), \" + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.b, 3)), \" + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.x, 3)), \" + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.a, 3)), \" + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.b, 3)), \" + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.x, 3)), \" + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.a, 3)), \" + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.b, 3)), \" + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.x, 3)), \" + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.a, 3)), \" + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.b, 3)), \" + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.x, 3)), \" + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.a, 3)), \" + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.b, 3)), \" + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.x, 3)), \" + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.a, 3)), \" + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.b, 3)))\")@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final RelDataType rowType = typeFactory.builder().add(\"x\",intType).add(\"y\",intType).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testThresholdCnf['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.valueOf(1))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final RexLiteral literal3 = rexBuilder.makeExactLiteral(BigDecimal.valueOf(3))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final RexLiteral literal2 = rexBuilder.makeExactLiteral(BigDecimal.valueOf(2))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "checkThresholdCnf(or(eq(xRef,literal1),eq(xRef,literal2),and(eq(xRef,literal3),eq(yRef,literal4))),8,\"OR(=(?0.x, 1), =(?0.x, 2), AND(=(?0.x, 3), =(?0.y, 4)))\")@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final RexNode aRef = rexBuilder.makeFieldAccess(range,3)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType,0)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final RexLiteral literal4 = rexBuilder.makeExactLiteral(BigDecimal.valueOf(4))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final RexNode xRef = rexBuilder.makeFieldAccess(range,0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final RexNode bRef = rexBuilder.makeFieldAccess(range,4)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testCnf2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final RelDataType rowType = typeFactory.builder().add(\"x\",intType).add(\"y\",intType).add(\"z\",intType).add(\"a\",intType).add(\"b\",intType).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "checkThresholdCnf(or(eq(xRef,literal1),and(eq(xRef,literal2),eq(yRef,literal3))),8,\"AND(OR(=(?0.x, 1), =(?0.x, 2)), OR(=(?0.x, 1), =(?0.y, 3)))\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testCnf2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "final RexNode zRef = rexBuilder.makeFieldAccess(range,2)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final RexNode yRef = rexBuilder.makeFieldAccess(range,1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->17 [style = solid, label="literal2"];
12->8 [style = solid, label="range"];
9->0 [style = bold, label=""];
3->1 [style = bold, label=""];
12->0 [style = solid, label="range"];
9->15 [style = solid, label="yRef"];
1->17 [style = solid, label="literal1"];
0->7 [style = solid, label="zRef"];
8->7 [style = solid, label="xRef"];
18->17 [style = bold, label=""];
0->11 [style = bold, label=""];
2->18 [style = bold, label=""];
12->3 [style = solid, label="range"];
5->14 [style = bold, label=""];
8->17 [style = solid, label="xRef"];
6->14 [style = dashed, label="0"];
12->11 [style = solid, label="range"];
3->7 [style = solid, label="bRef"];
18->15 [style = solid, label="literal4"];
9->7 [style = solid, label="yRef"];
1->15 [style = solid, label="literal1"];
2->17 [style = solid, label="literal3"];
6->12 [style = solid, label="rowType"];
5->6 [style = bold, label=""];
9->17 [style = solid, label="yRef"];
14->12 [style = solid, label="rowType"];
10->15 [style = solid, label="literal2"];
11->3 [style = bold, label=""];
2->7 [style = solid, label="literal3"];
2->15 [style = solid, label="literal3"];
12->8 [style = bold, label=""];
14->12 [style = bold, label=""];
17->15 [style = bold, label=""];
8->9 [style = bold, label=""];
13->5 [style = bold, label=""];
16->5 [style = bold, label=""];
8->15 [style = solid, label="xRef"];
10->2 [style = bold, label=""];
2->7 [style = bold, label=""];
10->7 [style = solid, label="literal2"];
9->1 [style = bold, label=""];
1->10 [style = bold, label=""];
4->5 [style = bold, label=""];
12->9 [style = solid, label="range"];
11->7 [style = solid, label="aRef"];
1->7 [style = solid, label="literal1"];
6->12 [style = bold, label=""];
}
