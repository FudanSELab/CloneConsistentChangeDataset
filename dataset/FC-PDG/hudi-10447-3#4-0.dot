digraph {
28 [style = filled, label = "final MergeOnReadTableState hoodieTableState = new MergeOnReadTableState(rowType,requiredRowType,tableAvroSchema.toString(),AvroSchemaConverter.convertToSchema(requiredRowType).toString(),Collections.emptyList(),conf.getString(FlinkOptions.RECORD_KEY_FIELD).split(\",\"))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "return baseFileOnlyInputFormat()@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "getBatchInputFormat['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "LOG.warn(\"No input splits generate for incremental read, returns empty collection instead\")@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "return MergeOnReadInputFormat.builder().config(this.conf).paths(FilePathUtils.toFlinkPaths(paths)).tableState(hoodieTableState).fieldTypes(rowDataType.getChildren()).defaultPartName(conf.getString(FlinkOptions.PARTITION_DEFAULT_NAME)).limit(this.limit).emitDelete(false).build()@@@24@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "final HoodieTableType tableType = HoodieTableType.valueOf(this.conf.getString(FlinkOptions.TABLE_TYPE))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "IncrementalInputSplits incrementalInputSplits = IncrementalInputSplits.builder().conf(conf).path(FilePathUtils.toFlinkPath(path)).maxCompactionMemoryInBytes(maxCompactionMemoryInBytes).requiredPartitions(getRequiredPartitionPaths()).build()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "final List<MergeOnReadInputSplit> inputSplits = buildFileIndex()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "final DataType rowDataType = AvroSchemaConverter.convertToDataType(tableAvroSchema)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "getBatchInputFormat['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "String errMsg = String.format(\"Invalid query type : '%s', options ('%s', '%s'( are supported now\",queryType,FlinkOptions.QUERY_TYPE_SNAPSHOT,FlinkOptions.QUERY_TYPE_READ_OPTIMIZED)@@@33@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "getStreamInputFormat['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "FlinkOptions.QUERY_TYPE_SNAPSHOT.equals(queryType)@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "org.apache.flink.core.fs.Path(( paths = new org.apache.flink.core.fs.Path((((@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "String errMsg = String.format(\"Invalid query type : '%s', options ('%s'( are supported now\",queryType,FlinkOptions.QUERY_TYPE_SNAPSHOT)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "FileInputFormat<RowData> format = new CopyOnWriteInputFormat(FilePathUtils.toFlinkPaths(paths),this.schema.getColumnNames().toArray(new String((((),this.schema.getColumnDataTypes().toArray(new DataType((((),this.requiredPos,this.conf.getString(FlinkOptions.PARTITION_DEFAULT_NAME),this.limit == NO_LIMIT_CONSTANT? Long.MAX_VALUE: this.limit,getParquetConf(this.conf,this.hadoopConf),this.conf.getBoolean(FlinkOptions.UTC_TIMEZONE))@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "final Path(( paths = getReadPaths()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "throw new HoodieException(errMsg)@@@29@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "return new CollectionInputFormat<>(Collections.emptyList(),null)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "throw new HoodieException(\"Unexpected table type: \" + this.conf.getString(FlinkOptions.TABLE_TYPE))@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "return baseFileOnlyInputFormat()@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "result.isEmpty()@@@23@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "inputSplits.size() == 0@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "return new CollectionInputFormat<>(Collections.emptyList(),null)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "return mergeOnReadInputFormat(rowType,requiredRowType,tableAvroSchema,rowDataType,result.getInputSplits(),false)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "return MergeOnReadInputFormat.builder().config(this.conf).paths(paths).tableState(hoodieTableState).fieldTypes(rowDataType.getChildren()).defaultPartName(conf.getString(FlinkOptions.PARTITION_DEFAULT_NAME)).limit(this.limit).emitDelete(true).build()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "format.setFilesFilter(new LatestFileFilter(this.hadoopConf))@@@31@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "String errMsg = String.format(\"Invalid query type : '%s', options ('%s', '%s', '%s'( are supported now\",queryType,FlinkOptions.QUERY_TYPE_SNAPSHOT,FlinkOptions.QUERY_TYPE_READ_OPTIMIZED,FlinkOptions.QUERY_TYPE_INCREMENTAL)@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "FileInputFormat<RowData> format = new CopyOnWriteInputFormat(FilePathUtils.toFlinkPaths(paths),this.schema.getColumnNames().toArray(new String((((),this.schema.getColumnDataTypes().toArray(new DataType((((),this.requiredPos,\"default\",this.limit == NO_LIMIT_CONSTANT? Long.MAX_VALUE: this.limit,getParquetConf(this.conf,this.hadoopConf),this.conf.getBoolean(FlinkOptions.UTC_TIMEZONE))@@@30@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "return EMPTY_INPUT_FORMAT@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
40 [style = filled, label = "final IncrementalInputSplits.Result result = incrementalInputSplits.inputSplits(metaClient,hadoopConf)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "final RowType requiredRowType = (RowType)getProducedDataType().notNull().getLogicalType()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final MergeOnReadTableState hoodieTableState2 = new MergeOnReadTableState(rowType,requiredRowType,tableAvroSchema.toString(),AvroSchemaConverter.convertToSchema(requiredRowType).toString(),Collections.emptyList(),conf.getString(FlinkOptions.RECORD_KEY_FIELD).split(\",\"))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "return format@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "tableType@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final HoodieTableType tableType = HoodieTableType.valueOf(this.conf.getString(FlinkOptions.TABLE_TYPE))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final List<MergeOnReadInputSplit> inputSplits = buildFileIndex(paths)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "return format@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "return new CollectionInputFormat<>(Collections.emptyList(),null)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "final String queryType = this.conf.getString(FlinkOptions.QUERY_TYPE)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "paths.length == 0@@@7@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
51 [style = filled, label = "throw new HoodieException(\"Unexpected table type: \" + this.conf.getString(FlinkOptions.TABLE_TYPE))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "tableType@@@10@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final MergeOnReadTableState hoodieTableState = new MergeOnReadTableState(rowType,requiredRowType,tableAvroSchema.toString(),AvroSchemaConverter.convertToSchema(requiredRowType).toString(),inputSplits,conf.getString(FlinkOptions.RECORD_KEY_FIELD).split(\",\"))@@@23@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "!partitionKeys.isEmpty() && getOrFetchPartitions().isEmpty()@@@3@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "LOG.warn(\"No input splits generate for MERGE_ON_READ input format, returns empty collection instead\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "return mergeOnReadInputFormat(rowType,requiredRowType,tableAvroSchema,rowDataType,inputSplits,false)@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "queryType@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "throw new HoodieException(errMsg)@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final Schema tableAvroSchema = getTableAvroSchema()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "final RowType rowType = (RowType)rowDataType.getLogicalType()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "return MergeOnReadInputFormat.builder().config(this.conf).paths(paths).tableState(hoodieTableState2).fieldTypes(rowDataType.getChildren()).defaultPartName(conf.getString(FlinkOptions.PARTITION_DEFAULT_NAME)).limit(this.limit).build()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "format.setFilesFilter(new LatestFileFilter(this.hadoopConf))@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
49 [style = filled, label = "Schema tableAvroSchema = this.metaClient == null? inferSchemaFromDdl(): getTableAvroSchema()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "throw new HoodieException(errMsg)@@@34@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "return new CollectionInputFormat<>(Collections.emptyList(),null)@@@21@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->24 [style = bold, label=""];
39->36 [style = dotted, label="true"];
9->11 [style = bold, label=""];
26->37 [style = dotted, label="true"];
48->4 [style = bold, label=""];
2->5 [style = solid, label="format"];
41->40 [style = solid, label="inputSplits"];
16->7 [style = bold, label=""];
7->35 [style = bold, label=""];
20->27 [style = dotted, label="true"];
5->15 [style = bold, label=""];
11->40 [style = dotted, label="true"];
13->29 [style = solid, label="requiredRowType"];
26->19 [style = dotted, label="true"];
6->4 [style = solid, label="tableAvroSchema"];
7->31 [style = bold, label=""];
32->6 [style = bold, label=""];
20->27 [style = bold, label=""];
11->34 [style = dotted, label="true"];
18->23 [style = solid, label="inputSplits"];
11->2 [style = dotted, label="true"];
49->47 [style = solid, label="tableAvroSchema"];
31->35 [style = bold, label=""];
50->48 [style = dotted, label="true"];
11->0 [style = dotted, label="true"];
2->14 [style = bold, label=""];
7->41 [style = dotted, label="true"];
50->45 [style = bold, label=""];
9->5 [style = solid, label="queryType"];
0->40 [style = bold, label=""];
11->15 [style = dotted, label="true"];
7->1 [style = dotted, label="true"];
28->34 [style = solid, label="rowType"];
12->22 [style = bold, label=""];
6->29 [style = solid, label="tableAvroSchema"];
11->7 [style = dotted, label="true"];
11->16 [style = bold, label=""];
7->1 [style = bold, label=""];
7->10 [style = dotted, label="true"];
6->34 [style = solid, label="tableAvroSchema"];
21->19 [style = bold, label=""];
55->9 [style = solid, label="rowType"];
4->51 [style = dotted, label="true"];
39->34 [style = bold, label=""];
11->14 [style = dotted, label="true"];
46->45 [style = solid, label="queryType"];
37->29 [style = bold, label=""];
9->42 [style = solid, label="queryType"];
52->9 [style = solid, label="requiredRowType"];
11->5 [style = dotted, label="true"];
7->0 [style = bold, label=""];
34->42 [style = bold, label=""];
28->29 [style = solid, label="rowType"];
24->40 [style = dashed, label="0"];
9->11 [style = solid, label="queryType"];
11->39 [style = dotted, label="true"];
24->5 [style = bold, label=""];
4->28 [style = dotted, label="true"];
4->34 [style = solid, label="rowDataType"];
7->29 [style = dotted, label="true"];
4->13 [style = dotted, label="true"];
9->54 [style = bold, label=""];
6->4 [style = bold, label=""];
21->37 [style = bold, label=""];
4->29 [style = solid, label="rowDataType"];
7->23 [style = dotted, label="true"];
22->20 [style = bold, label=""];
33->36 [style = bold, label=""];
42->38 [style = solid, label="errMsg"];
55->28 [style = solid, label="rowType"];
23->10 [style = bold, label=""];
11->16 [style = dotted, label="true"];
7->35 [style = dotted, label="true"];
48->4 [style = solid, label="tableType"];
7->8 [style = dotted, label="true"];
10->1 [style = bold, label=""];
11->30 [style = bold, label=""];
42->38 [style = bold, label=""];
11->24 [style = dotted, label="true"];
11->38 [style = dotted, label="true"];
25->0 [style = bold, label=""];
4->9 [style = bold, label=""];
22->18 [style = solid, label="paths"];
1->8 [style = bold, label=""];
52->46 [style = bold, label=""];
13->34 [style = solid, label="requiredRowType"];
11->30 [style = dotted, label="true"];
18->26 [style = bold, label=""];
7->26 [style = dotted, label="true"];
7->31 [style = dotted, label="true"];
4->54 [style = dotted, label="true"];
50->48 [style = bold, label=""];
7->0 [style = dotted, label="true"];
45->44 [style = bold, label=""];
39->33 [style = bold, label=""];
26->21 [style = bold, label=""];
53->50 [style = bold, label=""];
13->23 [style = solid, label="requiredRowType"];
11->5 [style = bold, label=""];
17->12 [style = bold, label=""];
40->39 [style = bold, label=""];
17->12 [style = dotted, label="true"];
51->45 [style = bold, label=""];
45->44 [style = solid, label="errMsg"];
7->18 [style = dotted, label="true"];
7->18 [style = bold, label=""];
18->28 [style = dashed, label="0"];
3->17 [style = bold, label=""];
7->41 [style = bold, label=""];
30->0 [style = bold, label=""];
13->9 [style = bold, label=""];
55->52 [style = bold, label=""];
4->51 [style = bold, label=""];
35->30 [style = bold, label=""];
36->34 [style = bold, label=""];
54->51 [style = bold, label=""];
50->4 [style = dotted, label="true"];
41->29 [style = solid, label="inputSplits"];
18->41 [style = dashed, label="0"];
26->29 [style = bold, label=""];
29->31 [style = bold, label=""];
0->2 [style = bold, label=""];
46->53 [style = bold, label=""];
22->2 [style = solid, label="paths"];
16->7 [style = solid, label="tableType"];
28->13 [style = bold, label=""];
20->6 [style = bold, label=""];
11->42 [style = bold, label=""];
17->22 [style = bold, label=""];
46->50 [style = solid, label="queryType"];
52->28 [style = solid, label="requiredRowType"];
5->15 [style = solid, label="errMsg"];
27->6 [style = bold, label=""];
11->42 [style = dotted, label="true"];
4->28 [style = bold, label=""];
11->2 [style = bold, label=""];
28->23 [style = solid, label="rowType"];
49->47 [style = bold, label=""];
11->0 [style = bold, label=""];
47->55 [style = bold, label=""];
26->21 [style = dotted, label="true"];
19->23 [style = bold, label=""];
26->23 [style = bold, label=""];
22->1 [style = solid, label="paths"];
1->25 [style = solid, label="format"];
7->25 [style = dotted, label="true"];
2->24 [style = solid, label="format"];
16->50 [style = dashed, label="0"];
43->49 [style = bold, label=""];
41->26 [style = bold, label=""];
4->9 [style = dotted, label="true"];
8->25 [style = bold, label=""];
39->33 [style = dotted, label="true"];
}
