digraph {
6 [style = filled, label = "testFetchShuffleBlocks['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "verify(blockResolver,times(1)).getBlockData(\"app0\",\"exec1\",0,0,0)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testFetchShuffleBlocks['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "verify(blockResolver,times(1)).getBlockData(\"app0\",\"exec1\",0,0,0)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "verify(blockResolver,times(1)).getBlockData(\"app0\",\"exec1\",0,0,1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "when(blockResolver.getBlockData(\"app0\",\"exec1\",0,0,0)).thenReturn(blockMarkers(0()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "FetchShuffleBlocks fetchShuffleBlocks = new FetchShuffleBlocks(\"app0\",\"exec1\",0,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a7a874,new int((((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a7a878)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "FetchShuffleBlocks fetchShuffleBlocks = new FetchShuffleBlocks(\"app0\",\"exec1\",0,new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a7a8cf,new int((((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a7a8d3)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "verify(blockResolver,times(1)).getBlockData(\"app0\",\"exec1\",0,0,1)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "checkOpenBlocksReceive(fetchShuffleBlocks,blockMarkers)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "verifyOpenBlockLatencyMetrics()@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "verifyOpenBlockLatencyMetrics()@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "checkOpenBlocksReceive(openBlocks,blockMarkers)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testCompatibilityWithOldVersion['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "when(blockResolver.getBlockData(\"app0\",\"exec1\",0,0,1)).thenReturn(blockMarkers(1()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "OpenBlocks openBlocks = new OpenBlocks(\"app0\",\"exec1\",new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a7a929)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->3 [style = bold, label=""];
8->2 [style = solid, label="fetchShuffleBlocks"];
15->13 [style = bold, label=""];
1->8 [style = bold, label=""];
9->0 [style = bold, label=""];
1->15 [style = bold, label=""];
15->13 [style = solid, label="openBlocks"];
12->11 [style = bold, label=""];
7->8 [style = dashed, label="0"];
6->0 [style = bold, label=""];
2->4 [style = bold, label=""];
1->7 [style = bold, label=""];
3->5 [style = bold, label=""];
13->12 [style = bold, label=""];
14->0 [style = bold, label=""];
8->2 [style = bold, label=""];
11->10 [style = bold, label=""];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
2->13 [style = dashed, label="0"];
7->15 [style = dashed, label="0"];
7->2 [style = solid, label="fetchShuffleBlocks"];
}
