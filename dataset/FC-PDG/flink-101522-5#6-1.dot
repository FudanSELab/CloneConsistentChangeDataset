digraph {
15 [style = filled, label = "assertEquals(Arrays.asList(1,2,5),resultSink.getSortedResult())@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testProcessAllWindowFunctionSideOutput['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "see.setParallelism(3)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "SingleOutputStreamOperator<Integer> windowOperator = dataStream.assignTimestampsAndWatermarks(new TestWatermarkAssigner()).windowAll(SlidingEventTimeWindows.of(Time.milliseconds(1),Time.milliseconds(1))).process(new ProcessAllWindowFunction<Integer,Integer,TimeWindow>(){@Override public void process(Context context,Iterable<Integer> elements,Collector<Integer> out){for (Integer e : elements){out.collect(e)context.output(sideOutputTag,\"sideout-\" + String.valueOf(e))}}})@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "OutputTag<String> sideOutputTag = new OutputTag<String>(\"side\"){}@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "windowOperator.getSideOutput(sideOutputTag).addSink(sideOutputResultSink)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testProcessdWindowFunctionSideOutput['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "DataStream<Integer> dataStream = see.fromCollection(elements)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "windowOperator.getSideOutput(sideOutputTag).addSink(sideOutputResultSink)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(Arrays.asList(\"sideout-1\",\"sideout-2\",\"sideout-5\"),sideOutputResultSink.getSortedResult())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "SingleOutputStreamOperator<Integer> windowOperator = dataStream.assignTimestampsAndWatermarks(new TestWatermarkAssigner()).keyBy(new TestKeySelector()).window(SlidingEventTimeWindows.of(Time.milliseconds(1),Time.milliseconds(1))).process(new ProcessWindowFunction<Integer,Integer,Integer,TimeWindow>(){@Override public void process(Integer integer,Context context,Iterable<Integer> elements,Collector<Integer> out){out.collect(integer)context.output(sideOutputTag,\"sideout-\" + String.valueOf(integer))}})@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "see.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testProcessdWindowFunctionSideOutput['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "see.setParallelism(1)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "TestListResultSink<Integer> resultSink = new TestListResultSink<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "windowOperator.addSink(resultSink)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "see.execute()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->3 [style = bold, label=""];
16->3 [style = bold, label=""];
17->5 [style = bold, label=""];
1->17 [style = solid, label="sideOutputTag"];
9->11 [style = bold, label=""];
0->13 [style = bold, label=""];
3->6 [style = solid, label="resultSink"];
8->3 [style = bold, label=""];
12->17 [style = dashed, label="0"];
3->5 [style = solid, label="resultSink"];
10->4 [style = solid, label="sideOutputResultSink"];
10->5 [style = solid, label="sideOutputResultSink"];
13->1 [style = bold, label=""];
1->17 [style = bold, label=""];
3->10 [style = bold, label=""];
11->0 [style = bold, label=""];
9->18 [style = bold, label=""];
5->6 [style = bold, label=""];
12->4 [style = bold, label=""];
7->2 [style = bold, label=""];
11->18 [style = dashed, label="0"];
11->13 [style = bold, label=""];
2->15 [style = bold, label=""];
1->12 [style = bold, label=""];
10->9 [style = bold, label=""];
6->7 [style = bold, label=""];
4->5 [style = bold, label=""];
18->0 [style = bold, label=""];
1->12 [style = solid, label="sideOutputTag"];
}
