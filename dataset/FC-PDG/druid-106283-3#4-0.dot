digraph {
14 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"tt\",\"foo\",\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"tt\",\"foot1, foot2, foot3\",\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"tt\",\"foot3, foot4, foot5\",\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"tt\",\"foot5, foot6, foot7\",\"count\",2L))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "GroupByQuery query = GroupByQuery.builder().setDataSource(\"xx\").setQuerySegmentSpec(new LegacySegmentSpec(\"1970/3000\")).setGranularity(Granularities.ALL).setDimensions(new DefaultDimensionSpec(\"tt\",\"tt\")).setVirtualColumns(new ExpressionVirtualColumn(\"tt\",\"array_to_string(map(tags  concat('foo', tags), tags), ', ')\",ValueType.STRING,TestExprMacroTable.INSTANCE)).setAggregatorSpecs(new CountAggregatorFactory(\"count\")).setContext(context).build()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testGroupByExpressionArrayFnArg['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "List<ResultRow> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970\",\"tt\",\"foo\",\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970\",\"tt\",\"t1foo\",\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970\",\"tt\",\"t2foo\",\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970\",\"tt\",\"t3foo\",\"count\",4L),GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970\",\"tt\",\"t4foo\",\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970\",\"tt\",\"t5foo\",\"count\",4L),GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970\",\"tt\",\"t6foo\",\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970\",\"tt\",\"t7foo\",\"count\",2L))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Sequence<ResultRow> result = helper.runQueryOnSegmentsObjs(ImmutableList.of(new QueryableIndexSegment(queryableIndex,SegmentId.dummy(\"sid1\")),new IncrementalIndexSegment(incrementalIndex,SegmentId.dummy(\"sid2\"))),query)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testGroupByExpressionAuto['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "expectedException.expectMessage(\"GroupBy v1 does not support dimension selectors with unknown cardinality.\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Sequence<Row> result = helper.runQueryOnSegmentsObjs(ImmutableList.of(new QueryableIndexSegment(queryableIndex,SegmentId.dummy(\"sid1\")),new IncrementalIndexSegment(incrementalIndex,SegmentId.dummy(\"sid2\"))),query)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"tt\",\"foo\",\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"tt\",\"t1foo\",\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"tt\",\"t2foo\",\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"tt\",\"t3foo\",\"count\",4L),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"tt\",\"t4foo\",\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"tt\",\"t5foo\",\"count\",4L),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"tt\",\"t6foo\",\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"tt\",\"t7foo\",\"count\",2L))@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "GroupByQuery query = GroupByQuery.builder().setDataSource(\"xx\").setQuerySegmentSpec(new LegacySegmentSpec(\"1970/3000\")).setGranularity(Granularities.ALL).setDimensions(new DefaultDimensionSpec(\"tt\",\"tt\")).setVirtualColumns(new ExpressionVirtualColumn(\"tt\",\"concat(tags, 'foo')\",ValueType.STRING,TestExprMacroTable.INSTANCE)).setAggregatorSpecs(new CountAggregatorFactory(\"count\")).setContext(context).build()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,result.toList(),\"expr-array-fn\")@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "expectedException.expect()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,result.toList(),\"expr-auto\")@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testGroupByExpressionAuto['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12->7 [style = bold, label=""];
8->9 [style = bold, label=""];
7->8 [style = dashed, label="0"];
1->12 [style = bold, label=""];
14->13 [style = bold, label=""];
9->0 [style = solid, label="expectedResults"];
11->1 [style = bold, label=""];
9->0 [style = bold, label=""];
1->6 [style = dotted, label="true"];
3->7 [style = bold, label=""];
12->7 [style = solid, label="query"];
0->13 [style = dashed, label="0"];
4->1 [style = bold, label=""];
7->14 [style = bold, label=""];
10->1 [style = bold, label=""];
1->3 [style = bold, label=""];
1->5 [style = dotted, label="true"];
2->14 [style = dashed, label="0"];
6->3 [style = bold, label=""];
2->0 [style = solid, label="expectedResults"];
3->8 [style = bold, label=""];
3->8 [style = solid, label="query"];
6->12 [style = bold, label=""];
3->7 [style = solid, label="query"];
2->0 [style = bold, label=""];
3->9 [style = solid, label="query"];
3->12 [style = dashed, label="0"];
5->6 [style = bold, label=""];
14->13 [style = solid, label="expectedResults"];
1->5 [style = bold, label=""];
7->2 [style = bold, label=""];
}
