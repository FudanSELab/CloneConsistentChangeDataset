digraph {
13 [style = filled, label = "workerTask.iteration()@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "sinkTask.preCommit(offsets)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "workerTask.iteration()@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "EasyMock.expectLastCall()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "expectConsumerPoll(1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "EasyMock.expectLastCall().andReturn(offsets)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "testWakeupInCommitSyncCausesRetry['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "consumer.commitSync(EasyMock.anyObject())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "EasyMock.expectLastCall()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "EasyMock.expectLastCall()@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte((,byte((>>(){@Override public ConsumerRecords<byte((,byte((> answer(){rebalanceListener.getValue().onPartitionsRevoked(partitions)return ConsumerRecords.empty()}})@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "consumer.commitSync(EasyMock.anyObject())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "PowerMock.verifyAll()@@@46@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "sinkTask.close(new HashSet<>(partitions))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "offsets.put(TOPIC_PARTITION,new OffsetAndMetadata(FIRST_OFFSET + 1))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "EasyMock.expectLastCall().andThrow(new WakeupException())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "EasyMock.expectLastCall()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "offsets.put(TOPIC_PARTITION2,new OffsetAndMetadata(FIRST_OFFSET))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "EasyMock.expectLastCall()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "EasyMock.expectLastCall()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "expectConversionAndTransformation(1)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "EasyMock.expectLastCall().andReturn(Collections.emptyMap())@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "expectPollInitialAssignment()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte((,byte((>>(){@Override public ConsumerRecords<byte((,byte((> answer(){rebalanceListener.getValue().onPartitionsRevoked(partitions)rebalanceListener.getValue().onPartitionsAssigned(partitions)return ConsumerRecords.empty()}})@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "RuntimeException e@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "sinkTask.open(partitions)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "workerTask.iteration()@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "consumer.resume(Collections.singleton(TOPIC_PARTITION2))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "workerTask.initialize(TASK_CONFIG)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "EasyMock.expectLastCall().andThrow(e)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expectRebalanceRevocationError['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "sinkTask.close(new HashSet<>(partitions))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "PowerMock.replayAll()@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "expectInitializeTask()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "statusListener.onResume(taskId)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "expectRebalanceRevocationError['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "sinkTask.put(EasyMock.anyObject())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "consumer.resume(Collections.singleton(TOPIC_PARTITION))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "final Map<TopicPartition,OffsetAndMetadata> offsets = new HashMap<>()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "sinkTask.preCommit(EasyMock.anyObject())@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "final List<TopicPartition> partitions = asList(TOPIC_PARTITION,TOPIC_PARTITION2)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "workerTask.initializeAndStart()@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "final List<TopicPartition> partitions = asList(TOPIC_PARTITION,TOPIC_PARTITION2)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "EasyMock.expectLastCall()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45->38 [style = bold, label=""];
38->32 [style = bold, label=""];
12->39 [style = bold, label=""];
43->11 [style = bold, label=""];
26->18 [style = bold, label=""];
17->27 [style = bold, label=""];
6->4 [style = bold, label=""];
3->33 [style = dashed, label="0"];
37->19 [style = solid, label="partitions"];
5->1 [style = solid, label="partitions"];
11->40 [style = bold, label=""];
2->5 [style = bold, label=""];
5->1 [style = bold, label=""];
29->35 [style = bold, label=""];
46->31 [style = bold, label=""];
36->10 [style = bold, label=""];
21->30 [style = bold, label=""];
31->22 [style = bold, label=""];
27->37 [style = bold, label=""];
8->6 [style = bold, label=""];
42->46 [style = solid, label="offsets"];
14->19 [style = bold, label=""];
13->24 [style = bold, label=""];
34->9 [style = bold, label=""];
19->33 [style = bold, label=""];
30->20 [style = bold, label=""];
25->28 [style = bold, label=""];
1->3 [style = bold, label=""];
37->34 [style = solid, label="partitions"];
42->12 [style = bold, label=""];
40->15 [style = bold, label=""];
41->26 [style = bold, label=""];
20->13 [style = bold, label=""];
32->17 [style = bold, label=""];
37->42 [style = bold, label=""];
37->36 [style = solid, label="partitions"];
22->25 [style = bold, label=""];
44->16 [style = bold, label=""];
15->41 [style = bold, label=""];
23->36 [style = bold, label=""];
10->43 [style = bold, label=""];
3->8 [style = bold, label=""];
37->23 [style = solid, label="partitions"];
18->21 [style = bold, label=""];
7->5 [style = bold, label=""];
9->23 [style = bold, label=""];
42->31 [style = solid, label="offsets"];
39->46 [style = bold, label=""];
7->0 [style = dotted, label="true"];
0->3 [style = solid, label="e"];
2->0 [style = dotted, label="true"];
28->14 [style = bold, label=""];
16->45 [style = bold, label=""];
35->34 [style = bold, label=""];
33->29 [style = bold, label=""];
3->4 [style = bold, label=""];
5->4 [style = solid, label="partitions"];
}
