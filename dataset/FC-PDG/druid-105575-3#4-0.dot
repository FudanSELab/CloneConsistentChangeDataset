digraph {
14 [style = filled, label = "int i = 0@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ColumnarInts columnarInts = supplierFromByteBuffer.get()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "i < vals.length@@@19@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "writer.writeTo(writeOutBytes,smoosher)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "CloseQuietly.close(columnarInts)@@@23@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(writtenLength,supplierFromList.getSerializedSize())@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "writer.addValue(val)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "CompressedVSizeColumnarIntsSupplier supplierFromByteBuffer = CompressedVSizeColumnarIntsSupplier.fromByteBuffer(ByteBuffer.wrap(IOUtils.toByteArray(writeOutBytes.asInputStream())),byteOrder)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "int chunkSize@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "checkSerializedSizeAndData['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "checkSerializedSizeAndData['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "CompressedVSizeColumnarIntsSerializer writer = new CompressedVSizeColumnarIntsSerializer(segmentWriteOutMedium,\"test\",vals.length > 0? Ints.max(vals): 0,chunkSize,byteOrder,compressionStrategy)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "int chunkFactor@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "checkSerializedSizeAndData['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "long writtenLength = writer.getSerializedSize()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "CompressedVSizeColumnarIntsSupplier supplierFromList = CompressedVSizeColumnarIntsSupplier.fromList(IntArrayList.wrap(vals),vals.length > 0? Ints.max(vals): 0,chunkSize,byteOrder,compressionStrategy,segmentWriteOutMedium.getCloser())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "++i@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(vals.length,columnarInts.size())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "FileSmoosher smoosher = new FileSmoosher(temporaryFolder.newFolder())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(vals(i(,columnarInts.get(i))@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final WriteOutBytes writeOutBytes = segmentWriteOutMedium.makeWriteOutBytes()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "CompressedColumnarIntsSupplier supplierFromList = CompressedColumnarIntsSupplier.fromList(IntArrayList.wrap(vals),chunkFactor,byteOrder,compressionStrategy,segmentWriteOutMedium.getCloser())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(writtenLength,supplierFromList.getSerializedSize())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "writer.open()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(vals(i(,columnarInts.get(i))@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "CompressedColumnarIntsSerializer writer = new CompressedColumnarIntsSerializer(segmentWriteOutMedium,\"test\",chunkFactor,byteOrder,compressionStrategy)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "CompressedColumnarIntsSupplier supplierFromByteBuffer = CompressedColumnarIntsSupplier.fromByteBuffer(ByteBuffer.wrap(IOUtils.toByteArray(writeOutBytes.asInputStream())),byteOrder)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "smoosher.close()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->16 [style = bold, label=""];
17->22 [style = dashed, label="0"];
2->17 [style = dotted, label="true"];
11->4 [style = bold, label=""];
22->23 [style = solid, label="chunkFactor"];
1->9 [style = bold, label=""];
14->3 [style = bold, label=""];
11->20 [style = bold, label=""];
20->10 [style = bold, label=""];
16->12 [style = solid, label="columnarInts"];
16->26 [style = bold, label=""];
23->24 [style = bold, label=""];
6->0 [style = bold, label=""];
3->21 [style = bold, label=""];
18->5 [style = bold, label=""];
13->6 [style = bold, label=""];
4->27 [style = bold, label=""];
9->15 [style = bold, label=""];
3->8 [style = dotted, label="true"];
3->21 [style = dotted, label="true"];
1->20 [style = solid, label="writtenLength"];
9->15 [style = solid, label="writeOutBytes"];
25->22 [style = dotted, label="true"];
25->18 [style = bold, label=""];
22->24 [style = solid, label="chunkFactor"];
18->23 [style = bold, label=""];
26->14 [style = bold, label=""];
0->1 [style = bold, label=""];
13->24 [style = dashed, label="0"];
5->13 [style = bold, label=""];
27->16 [style = bold, label=""];
8->21 [style = dashed, label="0"];
7->3 [style = bold, label=""];
2->18 [style = bold, label=""];
15->11 [style = bold, label=""];
14->8 [style = solid, label="i"];
17->5 [style = solid, label="chunkSize"];
3->12 [style = bold, label=""];
5->23 [style = dashed, label="0"];
1->4 [style = solid, label="writtenLength"];
16->14 [style = bold, label=""];
10->27 [style = dashed, label="0"];
3->8 [style = bold, label=""];
21->7 [style = bold, label=""];
4->10 [style = bold, label=""];
8->7 [style = bold, label=""];
17->13 [style = solid, label="chunkSize"];
19->17 [style = dotted, label="true"];
4->20 [style = dashed, label="0"];
3->7 [style = dotted, label="true"];
24->6 [style = bold, label=""];
19->18 [style = bold, label=""];
14->3 [style = solid, label="i"];
14->21 [style = solid, label="i"];
18->15 [style = solid, label="smoosher"];
}
