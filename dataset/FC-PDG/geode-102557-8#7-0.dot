digraph {
17 [style = filled, label = "verify(spyNioSslEngine,times(1)).expandWriteBuffer(any(),any(),any())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "ByteBuffer appData = ByteBuffer.allocate(outputSharing.getBuffer().capacity() + 100)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Arrays.fill(appBytes,(byte)0x1F)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(wrappedBuffer).isEqualTo(appData)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ByteBuffer appData = ByteBuffer.allocate(nioSslEngine.myNetData.capacity() + 100)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "byte(( appBytes = new byte((((@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "verify(spyNioSslEngine,times(1)).handleBlockingTasks()@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "appData.flip()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "wrapFails['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "wrap['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "appData.put(appBytes)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testEngine.addReturnResult(new SSLEngineResult(OK,NEED_TASK,appData.remaining(),appData.remaining()))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "wrapFails['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ByteBuffer wrappedBuffer = spyNioSslEngine.wrap(appData)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "appData.flip()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThatThrownBy(null).isInstanceOf().hasMessageContaining(\"Error encrypting data\")@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
5->4 [style = solid, label="testEngine"];
2->7 [style = solid, label="appBytes"];
15->1 [style = bold, label=""];
14->3 [style = bold, label=""];
8->5 [style = bold, label=""];
8->1 [style = solid, label="testEngine"];
3->2 [style = bold, label=""];
2->7 [style = bold, label=""];
3->13 [style = solid, label="appData"];
13->17 [style = bold, label=""];
7->9 [style = bold, label=""];
2->9 [style = solid, label="appBytes"];
5->1 [style = bold, label=""];
16->19 [style = bold, label=""];
3->16 [style = solid, label="appData"];
0->8 [style = bold, label=""];
9->0 [style = bold, label=""];
11->7 [style = bold, label=""];
6->3 [style = bold, label=""];
18->16 [style = bold, label=""];
7->0 [style = solid, label="appBytes"];
1->4 [style = bold, label=""];
4->10 [style = bold, label=""];
4->13 [style = dashed, label="0"];
12->11 [style = bold, label=""];
7->9 [style = solid, label="appBytes"];
5->15 [style = dashed, label="0"];
8->15 [style = bold, label=""];
1->13 [style = bold, label=""];
17->18 [style = bold, label=""];
}
