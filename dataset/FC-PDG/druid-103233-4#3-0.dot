digraph {
2 [style = filled, label = "expectLastCall().andThrow(exception).once().andVoid().once()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "verifyAll()@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "replayAll()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "killer.kill(dataSegment)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "killRetryWithErrorTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "storage.delete(EasyMock.eq(bucket),EasyMock.eq(descriptorPath))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "expectLastCall().andThrow(exception)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "EasyMock.expectLastCall().andThrow(exception).once().andVoid().once()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "final GoogleJsonResponseException exception = GoogleJsonResponseExceptionFactoryTesting.newMock(JacksonFactory.getDefaultInstance(),500,\"test\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "storage.delete(EasyMock.eq(bucket),EasyMock.eq(indexPath))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "killer.kill(DATA_SEGMENT)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "verifyAll()@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "GoogleDataSegmentKiller killer = new GoogleDataSegmentKiller(storage)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "expectLastCall().andThrow(exception).once().andVoid().once()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "killWithErrorTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final GoogleJsonResponseException exception = GoogleJsonResponseExceptionFactoryTesting.newMock(JacksonFactory.getDefaultInstance(),300,\"test\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "killer.kill(dataSegment)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "storage.delete(EasyMock.eq(BUCKET),EasyMock.eq(DESCRIPTOR_PATH))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "killRetryWithErrorTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "EasyMock.expectLastCall().andThrow(exception).once().andVoid().once()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "storage.delete(EasyMock.eq(BUCKET),EasyMock.eq(INDEX_PATH))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->3 [style = bold, label=""];
4->9 [style = bold, label=""];
15->13 [style = bold, label=""];
8->10 [style = dashed, label="0"];
10->15 [style = bold, label=""];
16->8 [style = bold, label=""];
8->18 [style = bold, label=""];
19->20 [style = bold, label=""];
3->16 [style = dashed, label="0"];
18->19 [style = bold, label=""];
8->6 [style = bold, label=""];
7->4 [style = bold, label=""];
14->7 [style = bold, label=""];
6->18 [style = dashed, label="0"];
1->13 [style = dashed, label="0"];
6->1 [style = bold, label=""];
3->10 [style = bold, label=""];
11->5 [style = bold, label=""];
2->14 [style = dashed, label="0"];
6->15 [style = dashed, label="0"];
3->8 [style = bold, label=""];
9->5 [style = bold, label=""];
9->11 [style = dashed, label="0"];
1->2 [style = bold, label=""];
12->3 [style = bold, label=""];
2->7 [style = bold, label=""];
20->7 [style = bold, label=""];
4->11 [style = bold, label=""];
16->18 [style = solid, label="exception"];
13->14 [style = bold, label=""];
17->16 [style = bold, label=""];
}
