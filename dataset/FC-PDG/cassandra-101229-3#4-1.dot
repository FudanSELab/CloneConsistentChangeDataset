digraph {
34 [style = filled, label = "iter.next()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertEquals(1,(int)iter.peek())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(iter.hasNext())@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertEquals(1,(int)iter.next())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "NoSuchElementException expected@@@39@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(1,(int)iter.next())@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "fail(\"peek() should still throw NoSuchElementException after next()\")@@@43@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertFalse(iter.hasNext())@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "NoSuchElementException expected@@@33@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertFalse(iter.hasNext())@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Iterator<Integer> iter = new AbstractIterator<Integer>(){@Override public Integer computeNext(){switch (rep++) {case 0:return 0case 1:return 1case 2:return endOfData()default:Assert.fail(\"Should not have been invoked again\")return null}}@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testDefaultBehaviorOfNextAndHasNext['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(iter.hasNext())@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertTrue(iter.hasNext())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertTrue(iter.hasNext())@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "Assert.assertTrue(iter.hasNext())@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Assert.fail(\"no exception thrown\")@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "iter.next()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testDefaultBehaviorOfNextAndHasNext['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "Assert.assertEquals(0,(int)iter.next())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Assert.assertTrue(iter.hasNext())@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "assertEquals(0,(int)iter.peek())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "testDefaultBehaviorOfPeek['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "iter.peek()@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "AbstractIterator<Integer> iter = new AbstractIterator<Integer>(){@Override public Integer computeNext(){switch (rep++) {case 0:return 0case 1:return 1case 2:return endOfData()default:fail(\"Should not have been invoked again\")return null}}@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "iter.peek()@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "{}@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertTrue(iter.hasNext())@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "fail(\"peek() should throw NoSuchElementException at end\")@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "{}@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(0,(int)iter.peek())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertTrue(iter.hasNext())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "{}@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(0,(int)iter.peek())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "fail(\"next() should throw NoSuchElementException as usual\")@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "fail(\"peek() should continue to throw NoSuchElementException at end\")@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertFalse(iter.hasNext())@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "NoSuchElementException expected@@@27@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "iter.peek()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "fail(\"no exception thrown\")@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "Assert.assertFalse(iter.hasNext())@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertEquals(0,(int)iter.next())@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35->31 [style = bold, label=""];
5->8 [style = bold, label=""];
4->3 [style = bold, label=""];
1->4 [style = bold, label=""];
36->40 [style = bold, label=""];
4->24 [style = bold, label=""];
29->30 [style = bold, label=""];
6->20 [style = dashed, label="0"];
22->37 [style = bold, label=""];
25->41 [style = bold, label=""];
28->39 [style = bold, label=""];
31->32 [style = bold, label=""];
30->27 [style = bold, label=""];
12->15 [style = bold, label=""];
23->4 [style = bold, label=""];
11->29 [style = bold, label=""];
3->6 [style = bold, label=""];
9->17 [style = bold, label=""];
38->31 [style = bold, label=""];
9->10 [style = bold, label=""];
8->14 [style = dashed, label="0"];
1->28 [style = dashed, label="0"];
1->13 [style = bold, label=""];
13->16 [style = bold, label=""];
11->2 [style = bold, label=""];
21->12 [style = bold, label=""];
7->9 [style = bold, label=""];
2->12 [style = dashed, label="0"];
6->5 [style = bold, label=""];
3->36 [style = bold, label=""];
40->11 [style = bold, label=""];
41->30 [style = bold, label=""];
27->34 [style = bold, label=""];
19->14 [style = bold, label=""];
18->1 [style = bold, label=""];
15->9 [style = bold, label=""];
0->1 [style = bold, label=""];
37->34 [style = bold, label=""];
6->36 [style = dashed, label="0"];
39->23 [style = bold, label=""];
10->17 [style = dashed, label="0"];
7->15 [style = dashed, label="0"];
33->38 [style = bold, label=""];
34->35 [style = bold, label=""];
2->7 [style = bold, label=""];
26->28 [style = bold, label=""];
4->13 [style = dashed, label="0"];
20->19 [style = bold, label=""];
16->20 [style = bold, label=""];
8->11 [style = bold, label=""];
5->19 [style = dashed, label="0"];
24->3 [style = bold, label=""];
10->35 [style = dashed, label="0"];
14->21 [style = bold, label=""];
3->16 [style = dashed, label="0"];
11->21 [style = dashed, label="0"];
}
