digraph {
4 [style = filled, label = "assertGetTracesReturnsEmpty(requestBuilder().minDuration(clientSpan.durationAsLong() + 1).build())@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(store().getTraces(requestBuilder().minDuration(CLIENT_SPAN.durationAsLong()).maxDuration(CLIENT_SPAN.durationAsLong()).build()).execute()).flatExtracting(null).contains(CLIENT_SPAN)@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(store().getTraces(requestBuilder().minDuration(CLIENT_SPAN.durationAsLong() + 1).build()).execute()).isEmpty()@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "getTraces_maxDuration['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "accept(clientSpan)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "getTraces_minDuration['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "getTraces_minDuration['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertThat(store().getTraces(requestBuilder().minDuration(CLIENT_SPAN.durationAsLong() - 2).maxDuration(CLIENT_SPAN.durationAsLong() - 1).build()).execute()).isEmpty()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Span clientSpan = newClientSpan(testSuffix)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "String testSuffix = testSuffix(testInfo)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertGetTracesReturns(requestBuilder().minDuration(clientSpan.durationAsLong()).build(),asList(clientSpan))@@@7@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "TestInfo testInfo@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertThat(store().getTraces(requestBuilder().minDuration(CLIENT_SPAN.durationAsLong()).build()).execute()).flatExtracting(null).contains(CLIENT_SPAN)@@@5@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "accept(CLIENT_SPAN)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->6 [style = solid, label="clientSpan"];
11->3 [style = bold, label=""];
13->12 [style = bold, label=""];
10->8 [style = bold, label=""];
8->7 [style = solid, label="clientSpan"];
4->7 [style = bold, label=""];
0->3 [style = bold, label=""];
8->6 [style = bold, label=""];
6->4 [style = bold, label=""];
10->8 [style = solid, label="testSuffix"];
2->12 [style = dashed, label="0"];
5->10 [style = solid, label="testInfo"];
1->2 [style = bold, label=""];
3->13 [style = bold, label=""];
9->5 [style = dotted, label="true"];
3->1 [style = bold, label=""];
1->13 [style = dashed, label="0"];
9->10 [style = bold, label=""];
}
