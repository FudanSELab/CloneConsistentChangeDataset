digraph {
2 [style = filled, label = "store.flush()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final HashMap<Integer,String> expectedContents = new HashMap<>()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "expectedContents.put(0,\"zero\")@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(expectedContents,getContents(store.range(2,4)))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"two\",store.get(2))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(null,driver.flushedEntryStored(5))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertEquals(\"zero\",driver.flushedEntryStored(0))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"four\",store.get(4))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "store.put(4,\"four\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(\"one\",store.get(1))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(5,driver.sizeOf(store))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(false,driver.flushedEntryRemoved(4))@@@22@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testPutGetRange['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertEquals(\"two\",driver.flushedEntryStored(2))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertTrue(driver.flushedEntryRemoved(5))@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertEquals(true,driver.flushedEntryRemoved(5))@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertEquals(false,driver.flushedEntryRemoved(1))@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(false,driver.flushedEntryRemoved(2))@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "store.put(0,\"zero\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testPutGetRange['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertFalse(driver.flushedEntryRemoved(1))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertNull(driver.flushedEntryStored(5))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "assertFalse(driver.flushedEntryRemoved(0))@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "assertNull(store.putIfAbsent(0,\"zero\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertNull(store.putIfAbsent(4,\"four\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "store.put(2,\"two\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"one\",driver.flushedEntryStored(1))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertNull(store.putIfAbsent(2,\"two\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "expectedContents.put(1,\"one\")@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "store.flush()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "assertFalse(driver.flushedEntryRemoved(4))@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "assertFalse(driver.flushedEntryRemoved(2))@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "assertEquals(\"four\",store.putIfAbsent(4,\"unexpected value\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "assertEquals(4,driver.sizeOf(store))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(4,driver.sizeOf(store))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(expectedContents,getContents(store.all()))@@@36@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertNull(store.putIfAbsent(1,\"one\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(false,driver.flushedEntryRemoved(0))@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertNull(store.get(3))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expectedContents.put(4,\"four\")@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(expectedContents,getContents(store.range(2,6)))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "store.put(1,\"one\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expectedContents.put(2,\"two\")@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "store.put(5,\"five\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(\"zero\",store.get(0))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(\"four\",driver.flushedEntryStored(4))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "store.delete(5)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\"five\",store.get(5))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "testPutIfAbsent['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28->29 [style = bold, label=""];
18->31 [style = bold, label=""];
14->24 [style = bold, label=""];
10->20 [style = bold, label=""];
39->16 [style = bold, label=""];
17->1 [style = bold, label=""];
5->9 [style = bold, label=""];
15->34 [style = bold, label=""];
47->48 [style = bold, label=""];
21->27 [style = bold, label=""];
31->32 [style = bold, label=""];
41->3 [style = bold, label=""];
25->3 [style = bold, label=""];
34->33 [style = bold, label=""];
16->24 [style = solid, label="expectedContents"];
10->38 [style = dashed, label="0"];
31->45 [style = dashed, label="0"];
42->47 [style = bold, label=""];
26->47 [style = dashed, label="0"];
9->10 [style = bold, label=""];
5->36 [style = dashed, label="0"];
27->22 [style = bold, label=""];
12->0 [style = bold, label=""];
32->26 [style = bold, label=""];
38->39 [style = bold, label=""];
11->2 [style = bold, label=""];
48->27 [style = bold, label=""];
9->37 [style = dashed, label="0"];
0->7 [style = bold, label=""];
26->21 [style = bold, label=""];
3->18 [style = bold, label=""];
2->23 [style = bold, label=""];
19->5 [style = bold, label=""];
35->40 [style = bold, label=""];
33->11 [style = bold, label=""];
1->28 [style = bold, label=""];
28->35 [style = bold, label=""];
18->44 [style = dashed, label="0"];
20->16 [style = bold, label=""];
29->19 [style = bold, label=""];
40->36 [style = bold, label=""];
7->2 [style = bold, label=""];
22->12 [style = bold, label=""];
37->38 [style = bold, label=""];
6->13 [style = bold, label=""];
16->30 [style = bold, label=""];
16->4 [style = solid, label="expectedContents"];
3->43 [style = dashed, label="0"];
32->42 [style = dashed, label="0"];
28->19 [style = bold, label=""];
21->48 [style = dashed, label="0"];
45->42 [style = bold, label=""];
30->14 [style = bold, label=""];
7->15 [style = bold, label=""];
23->17 [style = bold, label=""];
36->37 [style = bold, label=""];
8->4 [style = bold, label=""];
20->39 [style = dashed, label="0"];
13->8 [style = bold, label=""];
16->6 [style = solid, label="expectedContents"];
24->6 [style = bold, label=""];
44->45 [style = bold, label=""];
43->44 [style = bold, label=""];
19->40 [style = dashed, label="0"];
29->35 [style = dashed, label="0"];
15->33 [style = bold, label=""];
46->43 [style = bold, label=""];
}
