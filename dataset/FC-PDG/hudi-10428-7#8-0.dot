digraph {
47 [style = filled, label = "checkWrittenData(tempFile,expected,1)@@@40@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "checkInflightInstant(funcWrapper.getWriteClient())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "final OperatorEvent event = funcWrapper.getNextEvent()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "conf.setBoolean(FlinkOptions.INSERT_DEDUP,false)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "funcWrapper.checkpointComplete(1)@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
57 [style = filled, label = "int i = 0@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "checkInflightInstant(funcWrapper.getWriteClient())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "TestData.checkWrittenAllData(tempFile,expected,1)@@@24@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "TestData.checkWrittenAllData(tempFile,expected,1)@@@37@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event2)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "expected.put(\"par1\",\"(\" + \"id1,par1,id1,Danny,23,0,par1, \" + \"id1,par1,id1,Danny,23,1,par1, \" + \"id1,par1,id1,Danny,23,2,par1, \" + \"id1,par1,id1,Danny,23,3,par1, \" + \"id1,par1,id1,Danny,23,4,par1(\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Map<String,String> expected = new HashMap<>()@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "funcWrapper.checkpointFunction(2)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "checkWrittenData(tempFile,expected,1)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "i++@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "String instant = funcWrapper.getWriteClient().getLastPendingInstant(getTableType())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "String instant = funcWrapper.getWriteClient().getLastPendingInstant(getTableType())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(\"3 records expect to flush out as a mini-batch\",dataBuffer.values().stream().findFirst().map(null).orElse(-1),is(3))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "conf.setString(FlinkOptions.OPERATION,WriteOperationType.INSERT.value())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "funcWrapper.checkpointComplete(1)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "final OperatorEvent event = funcWrapper.getNextEvent()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "funcWrapper.checkpointFunction(1)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final OperatorEvent event2 = funcWrapper.getNextEvent()@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event3)@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event1)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "funcWrapper.checkpointFunction(1)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "i++@@@35@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "funcWrapper.checkpointComplete(2)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE,0.0006)@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertNotNull(funcWrapper.getEventBuffer()(0(,\"The coordinator missed the event\")@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
40 [style = filled, label = "funcWrapper.invoke(rowData)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event2)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
66 [style = filled, label = "testInsertWithSmallBufferSize['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testInsertAllowsDuplication['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "expected.put(\"par1\",\"(\" + \"id1,par1,id1,Danny,23,0,par1, \" + \"id1,par1,id1,Danny,23,0,par1, \" + \"id1,par1,id1,Danny,23,1,par1, \" + \"id1,par1,id1,Danny,23,1,par1, \" + \"id1,par1,id1,Danny,23,2,par1, \" + \"id1,par1,id1,Danny,23,2,par1, \" + \"id1,par1,id1,Danny,23,3,par1, \" + \"id1,par1,id1,Danny,23,3,par1, \" + \"id1,par1,id1,Danny,23,4,par1, \" + \"id1,par1,id1,Danny,23,4,par1(\")@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
46 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Map<String,String> expected = getMiniBatchExpected()@@@25@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final OperatorEvent event1 = funcWrapper.getNextEvent()@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
62 [style = filled, label = "conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE,200.0008)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "funcWrapper.invoke(rowData)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Map<String,List<HoodieRecord>> dataBuffer = funcWrapper.getDataBuffer()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "dataBuffer = funcWrapper.getDataBuffer()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "funcWrapper.checkpointComplete(2)@@@35@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(\"The operator expect to send an event\",event1,instanceOf())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertNotNull(funcWrapper.getEventBuffer()(0(,\"The coordinator missed the event\")@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "funcWrapper.openFunction()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "expected.put(\"par1\",\"(\" + \"id1,par1,id1,Danny,23,0,par1, \" + \"id1,par1,id1,Danny,23,0,par1, \" + \"id1,par1,id1,Danny,23,1,par1, \" + \"id1,par1,id1,Danny,23,1,par1, \" + \"id1,par1,id1,Danny,23,2,par1, \" + \"id1,par1,id1,Danny,23,2,par1, \" + \"id1,par1,id1,Danny,23,3,par1, \" + \"id1,par1,id1,Danny,23,3,par1, \" + \"id1,par1,id1,Danny,23,4,par1, \" + \"id1,par1,id1,Danny,23,4,par1(\")@@@36@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event)@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final OperatorEvent event2 = funcWrapper.getNextEvent()@@@25@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "i < 2@@@16@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "funcWrapper.checkpointFunction(2)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "InsertFunctionWrapper<RowData> funcWrapper = new InsertFunctionWrapper<>(tempFile.getAbsolutePath(),conf)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
58 [style = filled, label = "funcWrapper.checkpointComplete(2)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(),conf)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "funcWrapper.openFunction()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
59 [style = filled, label = "funcWrapper.invoke(rowData)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "TestData.checkWrittenAllData(tempFile,expected,1)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "checkInstantState(funcWrapper.getWriteClient(),HoodieInstant.State.COMPLETED,instant)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "int i = 0@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "assertThat(\"All data should be flushed out\",dataBuffer.size(),is(0))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "assertThat(\"Should have 1 data bucket\",dataBuffer.size(),is(1))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "assertThat(\"The operator expect to send an event\",event,instanceOf())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(\"The operator expect to send an event\",event2,instanceOf())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event4)@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "testInsertAllowsDuplication['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(),conf)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "i < 2@@@34@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2->26 [style = bold, label=""];
56->52 [style = bold, label=""];
11->65 [style = dotted, label="true"];
21->8 [style = solid, label="event2"];
21->8 [style = bold, label=""];
66->62 [style = bold, label=""];
12->56 [style = dotted, label="true"];
61->46 [style = bold, label=""];
25->6 [style = bold, label=""];
10->41 [style = bold, label=""];
46->48 [style = bold, label=""];
1->13 [style = bold, label=""];
28->14 [style = bold, label=""];
3->27 [style = bold, label=""];
49->55 [style = bold, label=""];
4->19 [style = solid, label="expected"];
12->20 [style = dotted, label="true"];
20->16 [style = bold, label=""];
15->11 [style = bold, label=""];
34->2 [style = bold, label=""];
17->14 [style = bold, label=""];
20->12 [style = solid, label="i"];
2->24 [style = bold, label=""];
20->22 [style = solid, label="event4"];
27->25 [style = bold, label=""];
18->0 [style = bold, label=""];
9->12 [style = solid, label="i"];
11->46 [style = dotted, label="true"];
53->29 [style = bold, label=""];
7->2 [style = solid, label="event1"];
0->3 [style = bold, label=""];
5->23 [style = bold, label=""];
55->59 [style = bold, label=""];
31->10 [style = solid, label="instant"];
4->47 [style = solid, label="expected"];
14->10 [style = bold, label=""];
31->29 [style = bold, label=""];
22->5 [style = bold, label=""];
42->40 [style = bold, label=""];
65->61 [style = solid, label="event"];
41->30 [style = bold, label=""];
60->57 [style = bold, label=""];
37->13 [style = solid, label="event1"];
39->7 [style = bold, label=""];
20->41 [style = dashed, label="0"];
59->63 [style = bold, label=""];
11->61 [style = dotted, label="true"];
65->61 [style = bold, label=""];
13->15 [style = bold, label=""];
15->64 [style = bold, label=""];
12->16 [style = solid, label="event3"];
37->13 [style = bold, label=""];
36->42 [style = bold, label=""];
64->44 [style = bold, label=""];
29->17 [style = bold, label=""];
34->9 [style = solid, label="expected"];
4->17 [style = bold, label=""];
30->33 [style = bold, label=""];
11->65 [style = bold, label=""];
35->39 [style = bold, label=""];
43->36 [style = bold, label=""];
10->41 [style = solid, label="event2"];
12->20 [style = bold, label=""];
30->9 [style = bold, label=""];
51->6 [style = bold, label=""];
45->53 [style = bold, label=""];
54->15 [style = bold, label=""];
57->11 [style = bold, label=""];
6->1 [style = bold, label=""];
24->26 [style = bold, label=""];
37->35 [style = solid, label="event1"];
26->31 [style = bold, label=""];
4->17 [style = solid, label="expected"];
0->62 [style = dashed, label="0"];
8->2 [style = bold, label=""];
17->49 [style = bold, label=""];
12->56 [style = bold, label=""];
48->11 [style = bold, label=""];
22->56 [style = dashed, label="0"];
23->19 [style = bold, label=""];
32->1 [style = bold, label=""];
56->52 [style = solid, label="event"];
1->54 [style = bold, label=""];
38->34 [style = bold, label=""];
40->32 [style = bold, label=""];
4->28 [style = solid, label="expected"];
9->12 [style = bold, label=""];
48->11 [style = solid, label="i"];
53->55 [style = solid, label="instant"];
10->30 [style = bold, label=""];
1->37 [style = bold, label=""];
12->10 [style = dashed, label="0"];
29->4 [style = bold, label=""];
63->9 [style = bold, label=""];
44->60 [style = bold, label=""];
11->45 [style = bold, label=""];
65->46 [style = solid, label="event"];
11->48 [style = dotted, label="true"];
16->22 [style = bold, label=""];
33->9 [style = bold, label=""];
52->20 [style = bold, label=""];
7->38 [style = bold, label=""];
17->28 [style = bold, label=""];
58->47 [style = bold, label=""];
57->48 [style = solid, label="i"];
34->26 [style = solid, label="expected"];
50->51 [style = bold, label=""];
20->12 [style = bold, label=""];
7->21 [style = bold, label=""];
62->50 [style = bold, label=""];
21->24 [style = solid, label="event2"];
2->65 [style = dashed, label="0"];
9->20 [style = solid, label="i"];
7->29 [style = solid, label="instant"];
13->35 [style = bold, label=""];
57->11 [style = solid, label="i"];
11->7 [style = bold, label=""];
12->58 [style = bold, label=""];
12->52 [style = dotted, label="true"];
}
