digraph {
3 [style = filled, label = "FuzzyQuery fuzzyQuery = (FuzzyQuery)query@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc*D\").field(STRING_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Query query = new QueryStringQueryBuilder(\"aBc*\").field(STRING_FIELD_NAME).analyzer(\"redspace\").toQuery(createShardContext())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "assertEquals(new WildcardQuery(new Term(TEXT_FIELD_NAME,\"aBc*D\")),query)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "FuzzyQuery expected = new FuzzyQuery(new Term(STRING_FIELD_NAME,\"aBc\"),1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(new WildcardQuery(new Term(STRING_FIELD_NAME,\"aBc*D\")),query)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "query = new SimpleQueryStringBuilder(\"aBc*\").field(STRING_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(new Term(TEXT_FIELD_NAME,\"aBc\"),fuzzyQuery.getTerm())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc~1\").field(TEXT_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "expected = new FuzzyQuery(new Term(STRING_FIELD_NAME,\"abc\"),1)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(new PrefixQuery(new Term(TEXT_FIELD_NAME,\"aBc\")),query)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertEquals(new TermRangeQuery(TEXT_FIELD_NAME,new BytesRef(\"aBc\"),new BytesRef(\"BcD\"),true,true),query)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertEquals(new TermRangeQuery(STRING_FIELD_NAME,new BytesRef(\"aBc\"),new BytesRef(\"BcD\"),true,true),query)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "fuzzyQuery = (FuzzyQuery)query@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc~1\").field(STRING_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc~1\").field(STRING_FIELD_NAME).analyzer(\"redspace\").toQuery(createShardContext())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "testExpandedTerms['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc*\").field(TEXT_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "assertEquals(new PrefixQuery(new Term(TEXT_FIELD_NAME,\"abc\")),query)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc*D\").field(STRING_FIELD_NAME).analyzer(\"redspace\").toQuery(createShardContext())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc*D\").field(TEXT_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "Query query = new SimpleQueryStringBuilder(\"aBc*\").field(STRING_FIELD_NAME).analyzer(\"whitespace\").toQuery(createShardContext())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME,\"abc\")),query)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Query query = new QueryStringQueryBuilder(\"aBc*\").field(TEXT_FIELD_NAME).analyzer(\"redspace\").toQuery(createShardContext())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertEquals(new Term(STRING_FIELD_NAME,\"abc\"),fuzzyQuery.getTerm())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertEquals(new WildcardQuery(new Term(TEXT_FIELD_NAME,\"abc*d\")),query)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc*D\").field(TEXT_FIELD_NAME).analyzer(\"redspace\").toQuery(createShardContext())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "query = new SimpleQueryStringBuilder(\"aBc~1\").field(STRING_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "assertEquals(expected,query)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "query = new SimpleQueryStringBuilder(\"aBc~1\").field(STRING_FIELD_NAME).analyzer(\"whitespace\").toQuery(createShardContext())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "query = new QueryStringQueryBuilder(\"(aBc TO BcD(\").field(STRING_FIELD_NAME).analyzer(\"redspace\").toQuery(createShardContext())@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "query = new QueryStringQueryBuilder(\"(aBc TO BcD(\").field(TEXT_FIELD_NAME).analyzer(\"redspace\").toQuery(createShardContext())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "query = new QueryStringQueryBuilder(\"(aBc TO BcD(\").field(STRING_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc~1\").field(TEXT_FIELD_NAME).analyzer(\"redspace\").toQuery(createShardContext())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc*\").field(STRING_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "assertEquals(expected,query)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(new Term(STRING_FIELD_NAME,\"aBc\"),fuzzyQuery.getTerm())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "assertEquals(new TermRangeQuery(TEXT_FIELD_NAME,new BytesRef(\"abc\"),new BytesRef(\"bcd\"),true,true),query)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testExpandedTerms['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testExpandedTerms['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertEquals(new WildcardQuery(new Term(STRING_FIELD_NAME,\"abc*d\")),query)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "assertEquals(new Term(TEXT_FIELD_NAME,\"abc\"),fuzzyQuery.getTerm())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME,\"aBc\")),query)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "query = new QueryStringQueryBuilder(\"(aBc TO BcD(\").field(TEXT_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(new TermRangeQuery(STRING_FIELD_NAME,new BytesRef(\"abc\"),new BytesRef(\"bcd\"),true,true),query)@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16->32 [style = dashed, label="0"];
12->35 [style = dashed, label="0"];
0->19 [style = dashed, label="0"];
40->10 [style = solid, label="query"];
1->27 [style = bold, label=""];
6->18 [style = solid, label="query"];
9->7 [style = bold, label=""];
29->31 [style = solid, label="query"];
38->39 [style = bold, label=""];
14->26 [style = dashed, label="0"];
8->0 [style = bold, label=""];
42->43 [style = solid, label="expected"];
19->1 [style = bold, label=""];
31->35 [style = bold, label=""];
17->20 [style = dashed, label="0"];
10->12 [style = bold, label=""];
14->44 [style = dashed, label="0"];
25->19 [style = bold, label=""];
8->25 [style = dashed, label="0"];
5->41 [style = dashed, label="0"];
19->1 [style = solid, label="query"];
4->10 [style = solid, label="query"];
14->16 [style = bold, label=""];
35->26 [style = solid, label="query"];
26->32 [style = bold, label=""];
12->37 [style = dashed, label="0"];
36->41 [style = bold, label=""];
23->24 [style = solid, label="query"];
34->33 [style = bold, label=""];
10->31 [style = dashed, label="0"];
30->34 [style = bold, label=""];
20->3 [style = bold, label=""];
13->40 [style = bold, label=""];
5->17 [style = bold, label=""];
27->22 [style = bold, label=""];
9->23 [style = dashed, label="0"];
6->22 [style = dashed, label="0"];
1->11 [style = bold, label=""];
33->29 [style = bold, label=""];
41->43 [style = solid, label="query"];
16->5 [style = solid, label="query"];
22->28 [style = solid, label="query"];
37->36 [style = solid, label="query"];
2->39 [style = dashed, label="0"];
12->14 [style = bold, label=""];
18->9 [style = bold, label=""];
13->33 [style = dashed, label="0"];
4->10 [style = bold, label=""];
39->13 [style = bold, label=""];
6->18 [style = bold, label=""];
22->28 [style = bold, label=""];
2->13 [style = solid, label="query"];
28->23 [style = bold, label=""];
0->1 [style = bold, label=""];
3->8 [style = bold, label=""];
20->3 [style = solid, label="query"];
32->21 [style = solid, label="query"];
9->7 [style = solid, label="query"];
17->3 [style = bold, label=""];
16->5 [style = bold, label=""];
37->44 [style = bold, label=""];
5->21 [style = dashed, label="0"];
18->28 [style = dashed, label="0"];
39->13 [style = solid, label="query"];
11->27 [style = dashed, label="0"];
35->26 [style = bold, label=""];
10->37 [style = bold, label=""];
40->10 [style = bold, label=""];
15->2 [style = bold, label=""];
32->21 [style = bold, label=""];
44->36 [style = bold, label=""];
42->43 [style = bold, label=""];
44->36 [style = solid, label="expected"];
3->25 [style = bold, label=""];
11->6 [style = bold, label=""];
29->31 [style = bold, label=""];
2->13 [style = bold, label=""];
17->3 [style = solid, label="query"];
23->24 [style = bold, label=""];
21->20 [style = bold, label=""];
12->14 [style = solid, label="query"];
0->1 [style = solid, label="query"];
7->24 [style = dashed, label="0"];
2->34 [style = dashed, label="0"];
34->33 [style = solid, label="query"];
4->29 [style = dashed, label="0"];
4->40 [style = dashed, label="0"];
13->4 [style = bold, label=""];
41->42 [style = bold, label=""];
}
