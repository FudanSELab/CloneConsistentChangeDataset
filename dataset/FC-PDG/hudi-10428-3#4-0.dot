digraph {
0 [style = filled, label = "final OperatorEvent event1 = funcWrapper.getNextEvent()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE,0.0006)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(),conf)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "i < 2@@@34@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "checkInstantState(funcWrapper.getWriteClient(),HoodieInstant.State.COMPLETED,instant)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "checkInstantState(funcWrapper.getWriteClient(),HoodieInstant.State.COMPLETED,instant)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "checkWrittenData(tempFile,expected,1)@@@40@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "i < 2@@@16@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event3)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testInsertAllowsDuplication['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event2)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "dataBuffer = funcWrapper.getDataBuffer()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "funcWrapper.openFunction()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "conf.setBoolean(FlinkOptions.INSERT_DEDUP,false)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event4)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertThat(\"All data should be flushed out\",dataBuffer.size(),is(0))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "funcWrapper.checkpointComplete(2)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "String instant = funcWrapper.getWriteClient().getLastPendingInstant(getTableType())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "funcWrapper.invoke(rowData)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "funcWrapper.checkpointComplete(1)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Map<String,String> expected = getMiniBatchExpected()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "funcWrapper.checkpointFunction(1)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "int i = 0@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event1)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "TestData.checkWrittenAllData(tempFile,expected,1)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "funcWrapper.checkpointFunction(1)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event)@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "testInsertAllowsDuplication['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertThat(\"Should have 1 data bucket\",dataBuffer.size(),is(1))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "checkInflightInstant(funcWrapper.getWriteClient())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertNotNull(funcWrapper.getEventBuffer()(0(,\"The coordinator missed the event\")@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "final OperatorEvent event = funcWrapper.getNextEvent()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertThat(\"The operator expect to send an event\",event2,instanceOf())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "TestData.checkWrittenAllData(tempFile,expected,1)@@@37@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "funcWrapper.checkpointComplete(2)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertNotNull(funcWrapper.getEventBuffer()(0(,\"The coordinator missed the event\")@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "funcWrapper.invoke(rowData)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final OperatorEvent event = funcWrapper.getNextEvent()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "testInsertWithSmallBufferSize['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE,200.0006)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "funcWrapper.invoke(rowData)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "checkInflightInstant(funcWrapper.getWriteClient())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertThat(\"The operator expect to send an event\",event,instanceOf())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "i++@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "checkWrittenData(tempFile,expected,1)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertThat(\"2 records expect to flush out as a mini-batch\",dataBuffer.values().stream().findFirst().map(null).orElse(-1),is(2))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "funcWrapper.checkpointFunction(2)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final OperatorEvent event2 = funcWrapper.getNextEvent()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Map<String,List<HoodieRecord>> dataBuffer = funcWrapper.getDataBuffer()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "i++@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "conf.setString(FlinkOptions.OPERATION,WriteOperationType.INSERT.value())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "String instant = funcWrapper.getWriteClient().getLastPendingInstant(getTableType())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "int i = 0@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "funcWrapper.openFunction()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expected.put(\"par1\",\"(\" + \"id1,par1,id1,Danny,23,0,par1, \" + \"id1,par1,id1,Danny,23,0,par1, \" + \"id1,par1,id1,Danny,23,1,par1, \" + \"id1,par1,id1,Danny,23,1,par1, \" + \"id1,par1,id1,Danny,23,2,par1, \" + \"id1,par1,id1,Danny,23,2,par1, \" + \"id1,par1,id1,Danny,23,3,par1, \" + \"id1,par1,id1,Danny,23,3,par1, \" + \"id1,par1,id1,Danny,23,4,par1, \" + \"id1,par1,id1,Danny,23,4,par1(\")@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22->29 [style = bold, label=""];
23->22 [style = bold, label=""];
1->36 [style = dashed, label="0"];
21->3 [style = bold, label=""];
29->36 [style = dotted, label="true"];
33->48 [style = bold, label=""];
20->52 [style = solid, label="i"];
24->10 [style = bold, label=""];
12->30 [style = bold, label=""];
6->21 [style = bold, label=""];
7->33 [style = solid, label="expected"];
4->19 [style = bold, label=""];
29->39 [style = dotted, label="true"];
37->42 [style = bold, label=""];
2->1 [style = bold, label=""];
5->18 [style = bold, label=""];
20->52 [style = bold, label=""];
49->52 [style = bold, label=""];
26->23 [style = bold, label=""];
47->3 [style = bold, label=""];
9->25 [style = bold, label=""];
20->0 [style = bold, label=""];
52->53 [style = bold, label=""];
36->35 [style = bold, label=""];
14->50 [style = dashed, label="0"];
50->54 [style = bold, label=""];
55->38 [style = bold, label=""];
7->38 [style = solid, label="expected"];
1->12 [style = bold, label=""];
11->26 [style = bold, label=""];
7->16 [style = bold, label=""];
48->44 [style = bold, label=""];
22->2 [style = solid, label="event3"];
52->43 [style = dotted, label="true"];
25->5 [style = bold, label=""];
5->53 [style = dashed, label="0"];
22->39 [style = solid, label="i"];
4->31 [style = bold, label=""];
10->34 [style = bold, label=""];
30->17 [style = bold, label=""];
28->7 [style = dashed, label="0"];
18->6 [style = bold, label=""];
29->55 [style = bold, label=""];
52->49 [style = dotted, label="true"];
46->20 [style = bold, label=""];
10->20 [style = bold, label=""];
19->51 [style = bold, label=""];
54->19 [style = bold, label=""];
43->49 [style = bold, label=""];
7->33 [style = bold, label=""];
36->35 [style = solid, label="event"];
29->2 [style = bold, label=""];
49->52 [style = solid, label="i"];
29->35 [style = dotted, label="true"];
32->14 [style = bold, label=""];
53->43 [style = solid, label="event"];
28->17 [style = solid, label="expected"];
27->11 [style = bold, label=""];
29->36 [style = bold, label=""];
51->40 [style = bold, label=""];
19->13 [style = bold, label=""];
28->16 [style = solid, label="expected"];
15->14 [style = bold, label=""];
16->27 [style = bold, label=""];
39->29 [style = bold, label=""];
52->53 [style = dotted, label="true"];
52->41 [style = dotted, label="true"];
13->8 [style = bold, label=""];
8->24 [style = bold, label=""];
53->41 [style = bold, label=""];
45->50 [style = bold, label=""];
31->19 [style = bold, label=""];
52->47 [style = bold, label=""];
44->26 [style = bold, label=""];
39->29 [style = solid, label="i"];
28->7 [style = bold, label=""];
9->18 [style = solid, label="event2"];
41->43 [style = bold, label=""];
0->9 [style = bold, label=""];
21->11 [style = solid, label="instant"];
35->39 [style = bold, label=""];
22->29 [style = solid, label="i"];
40->10 [style = bold, label=""];
42->46 [style = bold, label=""];
53->41 [style = solid, label="event"];
14->4 [style = bold, label=""];
3->28 [style = bold, label=""];
9->25 [style = solid, label="event2"];
34->37 [style = bold, label=""];
0->5 [style = solid, label="event1"];
20->49 [style = solid, label="i"];
3->44 [style = solid, label="instant"];
29->1 [style = solid, label="event4"];
}
