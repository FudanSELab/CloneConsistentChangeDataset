digraph {
4 [style = filled, label = "assertThat(SqlFunctions.plusAny(2,1L),is((Object)new BigDecimal(3)))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(SqlFunctions.plusAny(null,1),nullValue())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertThat(SqlFunctions.divideAny(new BigDecimal(5L),2),is((Object)new BigDecimal(2.5)))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertThat(SqlFunctions.divideAny(new BigDecimal(5L),new BigDecimal(2.0D)),is((Object)new BigDecimal(2.5)))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertNull(SqlFunctions.divideAny(null,null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertThat(SqlFunctions.divideAny(5,2L),is((Object)new BigDecimal(\"2.5\")))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(SqlFunctions.plusAny(new BigDecimal(2L),1L),is((Object)new BigDecimal(3)))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertNull(SqlFunctions.plusAny(null,null))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "testPlusAny['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(SqlFunctions.divideAny(5,2.0D),is((Object)new BigDecimal(\"2.5\")))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testPlusAny['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertThat(SqlFunctions.divideAny(new BigDecimal(5L),2.0D),is((Object)new BigDecimal(2.5)))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertNull(SqlFunctions.divideAny(null,1))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(SqlFunctions.plusAny(1,null),nullValue())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "SqlFunctions.divideAny(\"5\",2L)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "SqlFunctions.plusAny(\"2\",2L)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(SqlFunctions.plusAny(2L,1.0D),is((Object)new BigDecimal(3)))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertNull(SqlFunctions.plusAny(1,null))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "assertThat(SqlFunctions.divideAny(new BigDecimal(5L),2L),is((Object)new BigDecimal(2.5)))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "fail(\"'plus' on non-numeric type is not possible\")@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(SqlFunctions.plusAny(new BigDecimal(2L),1.0D),is((Object)new BigDecimal(3)))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(SqlFunctions.plusAny(null,null),nullValue())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertThat(SqlFunctions.divideAny(5L,2.0D),is((Object)new BigDecimal(\"2.5\")))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertNull(SqlFunctions.plusAny(null,1))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertThat(SqlFunctions.plusAny(2,1.0D),is((Object)new BigDecimal(3)))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "fail(\"'divide' on non-numeric type is not possible\")@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(SqlFunctions.plusAny(new BigDecimal(2L),1),is((Object)new BigDecimal(3)))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(SqlFunctions.plusAny(new BigDecimal(2L),new BigDecimal(1.0D)),is((Object)new BigDecimal(3)))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertNull(SqlFunctions.divideAny(1,null))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testDivideAny['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2->23 [style = dashed, label="0"];
28->29 [style = bold, label=""];
6->3 [style = bold, label=""];
8->10 [style = bold, label=""];
24->28 [style = bold, label=""];
22->25 [style = bold, label=""];
8->16 [style = dashed, label="0"];
7->1 [style = bold, label=""];
7->18 [style = dashed, label="0"];
11->15 [style = dashed, label="0"];
25->23 [style = bold, label=""];
0->12 [style = bold, label=""];
11->4 [style = bold, label=""];
1->21 [style = dashed, label="0"];
5->29 [style = dashed, label="0"];
26->19 [style = bold, label=""];
9->8 [style = bold, label=""];
0->22 [style = dashed, label="0"];
13->16 [style = bold, label=""];
3->0 [style = bold, label=""];
29->18 [style = bold, label=""];
4->28 [style = dashed, label="0"];
3->19 [style = dashed, label="0"];
21->26 [style = bold, label=""];
12->2 [style = bold, label=""];
1->6 [style = bold, label=""];
12->25 [style = dashed, label="0"];
6->26 [style = dashed, label="0"];
11->24 [style = dashed, label="0"];
15->4 [style = bold, label=""];
5->7 [style = bold, label=""];
16->14 [style = bold, label=""];
8->27 [style = dashed, label="0"];
14->15 [style = bold, label=""];
10->20 [style = dashed, label="0"];
18->21 [style = bold, label=""];
17->27 [style = bold, label=""];
20->24 [style = bold, label=""];
19->22 [style = bold, label=""];
4->5 [style = bold, label=""];
27->20 [style = bold, label=""];
10->14 [style = dashed, label="0"];
10->11 [style = bold, label=""];
}
