digraph {
6 [style = filled, label = "Configuration configuration = new Configuration()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testConfigurationForwarding['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "final TestPlanExecutor testPlanExecutor = new TestPlanExecutor()@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertTrue(env instanceof ScalaShellEnvironment)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "flinkILoop.createInterpreter()@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "Configuration forwardedConfiguration = env.getConfiguration()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertEquals(configuration,forwardedConfiguration)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Settings settings = new Settings()@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "FlinkILoop flinkILoop = new FlinkILoop(\"localhost\",6123,configuration,Option.empty())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ExecutionEnvironment env = flinkILoop.scalaBenv().getJavaEnv()@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertEquals(configuration,forwardedConfiguration)@@@11@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "((MutableSettings.BooleanSetting)settings.usejavacp()).value_$eq(true)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Configuration forwardedConfiguration = testPlanExecutor.getConfiguration()@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "assertTrue(streamEnv instanceof ScalaShellRemoteStreamEnvironment)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "PowerMockito.mockStatic()@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "BDDMockito.given(PlanExecutor.createRemoteExecutor(Matchers.anyString(),Matchers.anyInt(),Matchers.any())).willAnswer(new Answer<PlanExecutor>(){@Override public PlanExecutor answer(InvocationOnMock invocation){testPlanExecutor.setHost((String)invocation.getArguments()(0()testPlanExecutor.setPort((Integer)invocation.getArguments()(1()testPlanExecutor.setConfiguration((Configuration)invocation.getArguments()(2()return testPlanExecutor}})@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "FlinkILoop flinkILoop = new FlinkILoop(configuration,Option.empty())@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "configuration.setString(\"foobar\",\"foobar\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(configuration,forwardedConfiguration)@@@25@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "configuration.setString(JobManagerOptions.ADDRESS,\"localhost\")@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "ScalaShellRemoteStreamEnvironment remoteStreamEnv = (ScalaShellRemoteStreamEnvironment)streamEnv@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "configuration.setInteger(JobManagerOptions.PORT,6123)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "env.execute(\"Test job\")@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "testConfigurationForwarding['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "StreamExecutionEnvironment streamEnv = flinkILoop.scalaSenv().getJavaEnv()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Configuration forwardedConfiguration = remoteStreamEnv.getClientConfiguration()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ExecutionEnvironment env = flinkILoop.scalaBenv().getJavaEnv()@@@21@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "env.fromElements(1).output(new DiscardingOutputFormat<Integer>())@@@22@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testConfigurationForwardingStreamEnvironment['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "flinkILoop.settings_$eq(settings)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6->3 [style = bold, label=""];
4->14 [style = bold, label=""];
15->10 [style = bold, label=""];
16->18 [style = bold, label=""];
23->20 [style = bold, label=""];
13->9 [style = solid, label="forwardedConfiguration"];
6->18 [style = solid, label="configuration"];
17->6 [style = bold, label=""];
2->1 [style = bold, label=""];
1->15 [style = bold, label=""];
0->12 [style = bold, label=""];
26->29 [style = bold, label=""];
27->28 [style = bold, label=""];
12->11 [style = bold, label=""];
24->29 [style = solid, label="streamEnv"];
6->28 [style = solid, label="configuration"];
27->28 [style = solid, label="forwardedConfiguration"];
25->6 [style = bold, label=""];
7->8 [style = bold, label=""];
6->20 [style = solid, label="configuration"];
22->23 [style = bold, label=""];
11->2 [style = bold, label=""];
19->16 [style = bold, label=""];
21->22 [style = solid, label="env"];
24->26 [style = bold, label=""];
29->27 [style = bold, label=""];
7->24 [style = bold, label=""];
6->7 [style = solid, label="configuration"];
0->11 [style = solid, label="settings"];
5->6 [style = bold, label=""];
14->0 [style = bold, label=""];
10->13 [style = bold, label=""];
3->7 [style = bold, label=""];
3->19 [style = bold, label=""];
21->22 [style = bold, label=""];
6->9 [style = solid, label="configuration"];
23->20 [style = solid, label="forwardedConfiguration"];
13->9 [style = bold, label=""];
8->4 [style = bold, label=""];
18->21 [style = bold, label=""];
24->26 [style = solid, label="streamEnv"];
8->14 [style = solid, label="testPlanExecutor"];
10->23 [style = dashed, label="0"];
}
