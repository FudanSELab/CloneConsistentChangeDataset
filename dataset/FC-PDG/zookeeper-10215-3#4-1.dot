digraph {
9 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,true,DATA_TO_CLIENT)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Socket socket = connectWithoutSSL()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "socket.getOutputStream().flush()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "int bytesRead = socket.getInputStream().read(buf,0,buf.length)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "serverThread.start()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "testConnectWithoutSSLToNonStrictServer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "byte(( buf = new byte((((@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertArrayEquals(DATA_TO_CLIENT,buf)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "socket.getOutputStream().flush()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Thread.sleep(TIMEOUT / 2)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "{forceClose(socket)serverThread.shutdown(TIMEOUT)}@@@18@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "socket.getOutputStream().write(DATA_FROM_CLIENT)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,true,DATA_TO_CLIENT)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "socket.getOutputStream().write(DATA_FROM_CLIENT,2,DATA_FROM_CLIENT.length - 2)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testConnectWithoutSSLToNonStrictServerPartialWrite['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(buf.length,bytesRead)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "socket.getOutputStream().write(DATA_FROM_CLIENT,0,2)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testConnectWithoutSSLToNonStrictServer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertArrayEquals(DATA_TO_CLIENT,buf)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14->3 [style = bold, label=""];
8->16 [style = bold, label=""];
8->16 [style = solid, label="bytesRead"];
7->21 [style = dashed, label="0"];
10->1 [style = solid, label="buf"];
15->14 [style = bold, label=""];
21->0 [style = bold, label=""];
4->21 [style = bold, label=""];
18->17 [style = bold, label=""];
7->0 [style = bold, label=""];
2->9 [style = bold, label=""];
3->4 [style = bold, label=""];
13->11 [style = bold, label=""];
4->7 [style = bold, label=""];
20->10 [style = bold, label=""];
8->5 [style = solid, label="bytesRead"];
5->16 [style = dashed, label="0"];
12->13 [style = bold, label=""];
5->1 [style = bold, label=""];
1->12 [style = dashed, label="0"];
0->10 [style = bold, label=""];
1->6 [style = bold, label=""];
9->14 [style = dashed, label="0"];
6->13 [style = dashed, label="0"];
10->8 [style = bold, label=""];
8->5 [style = bold, label=""];
19->9 [style = bold, label=""];
6->11 [style = bold, label=""];
4->11 [style = solid, label="socket"];
10->12 [style = solid, label="buf"];
9->3 [style = bold, label=""];
0->18 [style = bold, label=""];
10->8 [style = solid, label="buf"];
16->12 [style = bold, label=""];
17->20 [style = bold, label=""];
}
