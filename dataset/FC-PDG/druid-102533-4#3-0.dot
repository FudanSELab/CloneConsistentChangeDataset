digraph {
13 [style = filled, label = "Thread.sleep(20)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Thread.sleep(25)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(Status.READING,task.getRunner().getStatus())@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "!task.getRunner().getStatus().equals(Status.READING)@@@6@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "testRunWithDuplicateRequest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "!task.getRunner().getStatus().equals(Status.PAUSED)@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "task.getRunner().setEndOffsets(ImmutableMap.of(0,500L),true)@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "runTask(task)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "task.getRunner().setEndOffsets(ImmutableMap.of(0,500L),true)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "task.getRunner().pause()@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "task.getRunner().pause()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "kafkaProducer.send(record).get()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(Status.READING,task.getRunner().getStatus())@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testRunWithDuplicateRequest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "runTask(task)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testRunWithOffsetOutOfRangeExceptionAndPause['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Thread.sleep(2000)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,200L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,500L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null,false))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "insertData()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null,false))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(Status.READING,task.getRunner().getStatus())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "!task.getRunner().getStatus().equals(Status.READING)@@@5@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "task.getRunner().pause()@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(Status.READING,task.getRunner().getStatus())@@@18@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,200L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,500L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4->10 [style = bold, label=""];
6->3 [style = bold, label=""];
16->3 [style = bold, label=""];
10->6 [style = dotted, label="true"];
9->10 [style = dashed, label="0"];
1->8 [style = bold, label=""];
15->14 [style = bold, label=""];
21->19 [style = bold, label=""];
12->15 [style = bold, label=""];
18->12 [style = bold, label=""];
12->15 [style = solid, label="task"];
14->10 [style = bold, label=""];
7->4 [style = bold, label=""];
22->23 [style = bold, label=""];
10->6 [style = bold, label=""];
11->2 [style = bold, label=""];
14->13 [style = dotted, label="true"];
5->20 [style = dashed, label="0"];
20->22 [style = bold, label=""];
0->7 [style = bold, label=""];
5->16 [style = bold, label=""];
3->9 [style = bold, label=""];
6->5 [style = bold, label=""];
22->20 [style = dotted, label="true"];
5->6 [style = bold, label=""];
22->20 [style = bold, label=""];
24->21 [style = bold, label=""];
6->10 [style = bold, label=""];
21->19 [style = solid, label="task"];
23->10 [style = bold, label=""];
4->10 [style = solid, label="task"];
14->13 [style = bold, label=""];
9->1 [style = bold, label=""];
8->11 [style = bold, label=""];
19->22 [style = bold, label=""];
13->14 [style = bold, label=""];
17->18 [style = bold, label=""];
6->5 [style = dotted, label="true"];
}
