digraph {
17 [style = filled, label = "BDDMockito.given(PlanExecutor.createRemoteExecutor(Matchers.anyString(),Matchers.anyInt(),Matchers.any())).willAnswer(new Answer<PlanExecutor>(){@Override public PlanExecutor answer(InvocationOnMock invocation){testPlanExecutor.setHost((String)invocation.getArguments()(0()testPlanExecutor.setPort((Integer)invocation.getArguments()(1()testPlanExecutor.setConfiguration((Configuration)invocation.getArguments()(2()return testPlanExecutor}})@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Configuration forwardedConfiguration = remoteStreamEnv.getClientConfiguration()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ExecutionEnvironment env = flinkILoop.scalaBenv().getJavaEnv()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "flinkILoop.createInterpreter()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testConfigurationForwardingStreamEnvironment['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final TestPlanExecutor testPlanExecutor = new TestPlanExecutor()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Settings settings = new Settings()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "env.execute(\"Test job\")@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "flinkILoop.settings_$eq(settings)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Configuration configuration = new Configuration()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "PowerMockito.mockStatic()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Configuration forwardedConfiguration = testPlanExecutor.getConfiguration()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(configuration,forwardedConfiguration)@@@25@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(configuration,forwardedConfiguration)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "((MutableSettings.BooleanSetting)settings.usejavacp()).value_$eq(true)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testConfigurationForwarding['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "configuration.setString(\"foobar\",\"foobar\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "RemoteStreamEnvironment remoteStreamEnv = (RemoteStreamEnvironment)streamEnv@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "env.fromElements(1).output(new DiscardingOutputFormat<Integer>())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "BDDMockito.given(PlanExecutor.createRemoteExecutor(Matchers.anyString(),Matchers.anyInt(),Matchers.any(),Matchers.any(),Matchers.any())).willAnswer(new Answer<PlanExecutor>(){@Override public PlanExecutor answer(InvocationOnMock invocation){testPlanExecutor.setHost((String)invocation.getArguments()(0()testPlanExecutor.setPort((Integer)invocation.getArguments()(1()testPlanExecutor.setConfiguration((Configuration)invocation.getArguments()(2()testPlanExecutor.setJars((List<String>)invocation.getArguments()(3()testPlanExecutor.setGlobalClasspaths((List<String>)invocation.getArguments()(4()return testPlanExecutor}})@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "FlinkILoop flinkILoop = new FlinkILoop(\"localhost\",6123,configuration,Option.empty())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertTrue(streamEnv instanceof RemoteStreamEnvironment)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "StreamExecutionEnvironment streamEnv = flinkILoop.scalaSenv().getJavaEnv()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testConfigurationForwarding['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8->10 [style = bold, label=""];
1->8 [style = bold, label=""];
11->14 [style = bold, label=""];
4->6 [style = bold, label=""];
8->17 [style = solid, label="testPlanExecutor"];
9->4 [style = bold, label=""];
2->3 [style = bold, label=""];
5->1 [style = solid, label="configuration"];
8->12 [style = solid, label="testPlanExecutor"];
12->11 [style = bold, label=""];
5->6 [style = solid, label="configuration"];
12->17 [style = dashed, label="0"];
5->15 [style = bold, label=""];
10->17 [style = bold, label=""];
22->20 [style = solid, label="streamEnv"];
14->7 [style = bold, label=""];
1->22 [style = bold, label=""];
20->21 [style = bold, label=""];
19->5 [style = bold, label=""];
5->23 [style = solid, label="configuration"];
18->20 [style = bold, label=""];
22->18 [style = bold, label=""];
15->1 [style = bold, label=""];
10->12 [style = bold, label=""];
7->2 [style = bold, label=""];
4->6 [style = solid, label="forwardedConfiguration"];
11->7 [style = solid, label="settings"];
3->13 [style = bold, label=""];
16->5 [style = bold, label=""];
22->18 [style = solid, label="streamEnv"];
13->9 [style = bold, label=""];
21->23 [style = solid, label="forwardedConfiguration"];
21->23 [style = bold, label=""];
0->5 [style = bold, label=""];
17->11 [style = bold, label=""];
}
