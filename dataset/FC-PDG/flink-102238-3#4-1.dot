digraph {
10 [style = filled, label = "result = format.nextRecord(result)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertTrue(format.reachedEnd())@@@29@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertEquals(\"\",result.getField(2))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "format.enableQuotedStringParsing('@')@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertNotNull(result)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(\"\",result.getField(1))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "RowCsvInputFormat format = new RowCsvInputFormat(PATH,fieldTypes,\"\",\"|\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "FileInputSplit split = createTempFile(fileContent)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "result = format.nextRecord(result)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "result = format.nextRecord(result)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "String fileContent = \"@a|b|c@|def|@ghijk@abc||@|hhg@|||\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "RowTypeInfo typeInfo = new RowTypeInfo(BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(\"a|b|c\",result.getField(0))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(\"abc\",result.getField(0))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "result = format.nextRecord(result)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "TypeInformation(( fieldTypes = new TypeInformation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b643d4@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "String fileContent = \"abc|def|ghijkabc||hhg|||\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "format.open(split)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Row result = new Row(3)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(\"\",result.getField(0))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertNotNull(result)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "RowCsvInputFormat format = new RowCsvInputFormat(PATH,typeInfo,\"\",\"|\")@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\"\",result.getField(1))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertNull(result)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(format.reachedEnd())@@@28@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "readStringFields['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"ghijk\",result.getField(2))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"def\",result.getField(1))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(\"|hhg\",result.getField(2))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "format.configure(new Configuration())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertNotNull(result)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "result = format.nextRecord(result)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "readMixedQuotedStringFields['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertNull(result)@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "readStringFields['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertEquals(\"abc\",result.getField(0))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25->1 [style = solid, label="fileContent"];
0->10 [style = solid, label="result"];
16->6 [style = solid, label="result"];
16->11 [style = solid, label="result"];
25->1 [style = bold, label=""];
26->7 [style = bold, label=""];
4->25 [style = bold, label=""];
24->15 [style = bold, label=""];
5->9 [style = solid, label="result"];
16->6 [style = bold, label=""];
2->3 [style = bold, label=""];
14->22 [style = bold, label=""];
11->27 [style = solid, label="result"];
21->8 [style = bold, label=""];
9->16 [style = solid, label="result"];
30->25 [style = bold, label=""];
28->26 [style = bold, label=""];
34->31 [style = bold, label=""];
31->1 [style = bold, label=""];
0->20 [style = solid, label="result"];
5->17 [style = bold, label=""];
7->24 [style = solid, label="result"];
13->11 [style = bold, label=""];
28->26 [style = solid, label="fieldTypes"];
15->5 [style = bold, label=""];
8->7 [style = bold, label=""];
19->0 [style = bold, label=""];
15->35 [style = bold, label=""];
24->15 [style = solid, label="result"];
33->0 [style = bold, label=""];
9->23 [style = bold, label=""];
22->18 [style = solid, label="result"];
9->23 [style = solid, label="result"];
7->24 [style = bold, label=""];
1->28 [style = bold, label=""];
1->24 [style = solid, label="split"];
22->18 [style = bold, label=""];
12->10 [style = bold, label=""];
32->8 [style = bold, label=""];
20->16 [style = bold, label=""];
23->33 [style = bold, label=""];
5->35 [style = dashed, label="0"];
22->0 [style = solid, label="result"];
10->13 [style = bold, label=""];
17->14 [style = bold, label=""];
23->19 [style = bold, label=""];
21->32 [style = bold, label=""];
1->8 [style = solid, label="split"];
2->3 [style = solid, label="typeInfo"];
31->1 [style = solid, label="fileContent"];
18->9 [style = bold, label=""];
35->17 [style = bold, label=""];
25->31 [style = dashed, label="0"];
3->21 [style = bold, label=""];
0->20 [style = bold, label=""];
1->2 [style = bold, label=""];
5->17 [style = solid, label="result"];
24->22 [style = solid, label="result"];
27->29 [style = bold, label=""];
10->13 [style = solid, label="result"];
19->33 [style = dashed, label="0"];
11->27 [style = bold, label=""];
15->5 [style = solid, label="result"];
6->12 [style = bold, label=""];
}
