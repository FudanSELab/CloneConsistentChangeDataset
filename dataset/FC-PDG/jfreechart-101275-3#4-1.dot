digraph {
0 [style = filled, label = "double(( y1End = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1db31b@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "double(( y1 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1db307@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "DefaultIntervalXYDataset dataset = new DefaultIntervalXYDataset()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "double(( x1 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1db2e9@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(0.9,r.getLowerBound(),EPSILON)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "DefaultIntervalXYDataset<String> dataset = new DefaultIntervalXYDataset<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertEquals(3.0,r.getUpperBound(),EPSILON)@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Range r = DatasetUtils.findDomainBounds(dataset,false)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(1.0,r.getLowerBound(),EPSILON)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testFindDomainBounds2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "dataset.addSeries(\"S1\",data1)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "double(( x1End = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1db2fd@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testFindDomainBounds3['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "double(( y1Start = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1db311@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "double(((( data1 = new double((((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1db325@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Range r = DatasetUtils.findDomainBounds(dataset)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testFindDomainBounds2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(3.1,r.getUpperBound(),EPSILON)@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "double(( x1Start = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1db2f3@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->10 [style = bold, label=""];
12->11 [style = solid, label="x1End"];
13->4 [style = solid, label="dataset"];
4->18 [style = dashed, label="0"];
1->4 [style = bold, label=""];
3->17 [style = dashed, label="0"];
12->5 [style = bold, label=""];
11->1 [style = bold, label=""];
5->11 [style = solid, label="y1"];
0->11 [style = bold, label=""];
10->3 [style = bold, label=""];
1->18 [style = bold, label=""];
6->0 [style = bold, label=""];
2->9 [style = bold, label=""];
16->17 [style = bold, label=""];
9->7 [style = bold, label=""];
7->8 [style = bold, label=""];
9->4 [style = solid, label="dataset"];
11->1 [style = solid, label="data1"];
9->18 [style = solid, label="dataset"];
5->6 [style = bold, label=""];
15->9 [style = bold, label=""];
13->7 [style = bold, label=""];
6->11 [style = solid, label="y1Start"];
9->13 [style = dashed, label="0"];
8->11 [style = solid, label="x1Start"];
10->16 [style = dashed, label="0"];
14->13 [style = bold, label=""];
0->11 [style = solid, label="y1End"];
7->11 [style = solid, label="x1"];
8->12 [style = bold, label=""];
18->16 [style = bold, label=""];
}
