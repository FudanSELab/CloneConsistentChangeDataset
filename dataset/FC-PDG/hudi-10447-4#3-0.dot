digraph {
32 [style = filled, label = "!partitionKeys.isEmpty() && getOrFetchPartitions().isEmpty()@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "getBatchInputFormat['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "FlinkOptions.QUERY_TYPE_SNAPSHOT.equals(queryType)@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Schema tableAvroSchema = this.metaClient == null? inferSchemaFromDdl(): getTableAvroSchema()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final List<MergeOnReadInputSplit> inputSplits = buildFileIndex(paths)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "return format@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "final Schema tableAvroSchema = getTableAvroSchema()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "return MergeOnReadInputFormat.builder().config(this.conf).paths(paths).tableState(hoodieTableState2).fieldTypes(rowDataType.getChildren()).defaultPartName(conf.getString(FlinkOptions.PARTITION_DEFAULT_NAME)).limit(this.limit).build()@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "tableType@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "return new CollectionInputFormat<>(Collections.emptyList(),null)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "org.apache.flink.core.fs.Path(( paths = new org.apache.flink.core.fs.Path((((@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "inputSplits.size() == 0@@@19@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "FileInputFormat<RowData> format = new CopyOnWriteInputFormat(FilePathUtils.toFlinkPaths(paths),this.schema.getColumnNames().toArray(new String((((),this.schema.getColumnDataTypes().toArray(new DataType((((),this.requiredPos,this.conf.getString(FlinkOptions.PARTITION_DEFAULT_NAME),this.limit == NO_LIMIT_CONSTANT? Long.MAX_VALUE: this.limit,getParquetConf(this.conf,this.hadoopConf),this.conf.getBoolean(FlinkOptions.UTC_TIMEZONE))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final DataType rowDataType = AvroSchemaConverter.convertToDataType(tableAvroSchema)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "throw new HoodieException(errMsg)@@@20@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "format.setFilesFilter(new LatestFileFilter(this.hadoopConf))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "final MergeOnReadTableState hoodieTableState = new MergeOnReadTableState(rowType,requiredRowType,tableAvroSchema.toString(),AvroSchemaConverter.convertToSchema(requiredRowType).toString(),inputSplits,conf.getString(FlinkOptions.RECORD_KEY_FIELD).split(\",\"))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "throw new HoodieException(errMsg)@@@34@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final RowType requiredRowType = (RowType)getProducedDataType().notNull().getLogicalType()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "String errMsg = String.format(\"Invalid query type : '%s', options ('%s'( are supported now\",queryType,FlinkOptions.QUERY_TYPE_SNAPSHOT)@@@19@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "boolean emitDelete = tableType == HoodieTableType.MERGE_ON_READ@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "queryType@@@15@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "FileInputFormat<RowData> format = new CopyOnWriteInputFormat(FilePathUtils.toFlinkPaths(paths),this.schema.getColumnNames().toArray(new String((((),this.schema.getColumnDataTypes().toArray(new DataType((((),this.requiredPos,\"default\",this.limit == NO_LIMIT_CONSTANT? Long.MAX_VALUE: this.limit,getParquetConf(this.conf,this.hadoopConf),this.conf.getBoolean(FlinkOptions.UTC_TIMEZONE))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "final Path(( paths = getReadPaths()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final RowType rowType = (RowType)rowDataType.getLogicalType()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final String queryType = this.conf.getString(FlinkOptions.QUERY_TYPE)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "format.setFilesFilter(new LatestFileFilter(this.hadoopConf))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "String errMsg = String.format(\"Invalid query type : '%s', options ('%s'( are supported now\",queryType,FlinkOptions.QUERY_TYPE_SNAPSHOT)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "throw new HoodieException(errMsg)@@@14@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "return mergeOnReadInputFormat(rowType,requiredRowType,tableAvroSchema,rowDataType,Collections.emptyList(),emitDelete)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "return MergeOnReadInputFormat.builder().config(this.conf).paths(FilePathUtils.toFlinkPaths(paths)).tableState(hoodieTableState).fieldTypes(rowDataType.getChildren()).defaultPartName(conf.getString(FlinkOptions.PARTITION_DEFAULT_NAME)).limit(this.limit).emitDelete(false).build()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "paths.length == 0@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final RowType rowType = (RowType)rowDataType.getLogicalType()@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final DataType rowDataType = AvroSchemaConverter.convertToDataType(tableAvroSchema)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "String errMsg = String.format(\"Invalid query type : '%s', options ('%s', '%s'( are supported now\",queryType,FlinkOptions.QUERY_TYPE_SNAPSHOT,FlinkOptions.QUERY_TYPE_READ_OPTIMIZED)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "return format@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "LOG.warn(\"No input splits generate for MERGE_ON_READ input format, returns empty collection instead\")@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "throw new HoodieException(\"Unexpected table type: \" + this.conf.getString(FlinkOptions.TABLE_TYPE))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "return new CollectionInputFormat<>(Collections.emptyList(),null)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final RowType requiredRowType = (RowType)getProducedDataType().notNull().getLogicalType()@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "final HoodieTableType tableType = HoodieTableType.valueOf(this.conf.getString(FlinkOptions.TABLE_TYPE))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "return new CollectionInputFormat<>(Collections.emptyList(),null)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final HoodieTableType tableType = HoodieTableType.valueOf(this.conf.getString(FlinkOptions.TABLE_TYPE))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "getStreamInputFormat['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "final String queryType = this.conf.getString(FlinkOptions.QUERY_TYPE)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "getStreamInputFormat['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "throw new HoodieException(\"Unexpected table type: \" + this.conf.getString(FlinkOptions.TABLE_TYPE))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42->23 [style = bold, label=""];
29->30 [style = bold, label=""];
4->7 [style = solid, label="queryType"];
25->35 [style = dotted, label="true"];
11->29 [style = solid, label="rowType"];
40->35 [style = solid, label="paths"];
39->6 [style = bold, label=""];
4->9 [style = solid, label="queryType"];
25->28 [style = dotted, label="true"];
25->29 [style = dotted, label="true"];
9->7 [style = bold, label=""];
25->35 [style = bold, label=""];
19->20 [style = solid, label="emitDelete"];
12->7 [style = bold, label=""];
21->17 [style = solid, label="errMsg"];
6->11 [style = bold, label=""];
9->21 [style = bold, label=""];
45->42 [style = bold, label=""];
3->20 [style = solid, label="rowType"];
1->20 [style = solid, label="requiredRowType"];
39->6 [style = solid, label="tableAvroSchema"];
9->5 [style = bold, label=""];
37->32 [style = bold, label=""];
45->42 [style = dotted, label="true"];
9->41 [style = dashed, label="0"];
27->33 [style = bold, label=""];
6->0 [style = dotted, label="true"];
6->11 [style = dotted, label="true"];
38->33 [style = dotted, label="true"];
3->14 [style = solid, label="rowType"];
7->13 [style = solid, label="errMsg"];
45->41 [style = bold, label=""];
46->42 [style = bold, label=""];
1->4 [style = bold, label=""];
45->23 [style = dotted, label="true"];
32->24 [style = dotted, label="true"];
44->43 [style = dotted, label="true"];
8->29 [style = solid, label="requiredRowType"];
19->20 [style = bold, label=""];
15->20 [style = solid, label="rowDataType"];
36->31 [style = bold, label=""];
3->11 [style = solid, label="rowType"];
26->29 [style = solid, label="inputSplits"];
24->40 [style = bold, label=""];
4->2 [style = bold, label=""];
2->9 [style = bold, label=""];
25->38 [style = dotted, label="true"];
33->29 [style = bold, label=""];
4->21 [style = solid, label="queryType"];
6->14 [style = dotted, label="true"];
40->42 [style = solid, label="paths"];
5->6 [style = bold, label=""];
34->36 [style = bold, label=""];
25->26 [style = bold, label=""];
6->19 [style = dashed, label="0"];
11->8 [style = bold, label=""];
6->12 [style = dotted, label="true"];
25->26 [style = dotted, label="true"];
45->31 [style = dotted, label="true"];
4->9 [style = bold, label=""];
3->1 [style = bold, label=""];
40->26 [style = solid, label="paths"];
38->27 [style = dotted, label="true"];
0->12 [style = bold, label=""];
45->36 [style = bold, label=""];
45->34 [style = dotted, label="true"];
38->27 [style = bold, label=""];
8->14 [style = bold, label=""];
22->28 [style = bold, label=""];
15->3 [style = bold, label=""];
45->41 [style = dotted, label="true"];
36->31 [style = solid, label="errMsg"];
5->19 [style = bold, label=""];
9->19 [style = dotted, label="true"];
30->35 [style = bold, label=""];
10->16 [style = bold, label=""];
6->8 [style = dotted, label="true"];
5->6 [style = solid, label="tableType"];
32->40 [style = bold, label=""];
9->20 [style = dotted, label="true"];
42->34 [style = solid, label="format"];
16->15 [style = solid, label="tableAvroSchema"];
1->14 [style = solid, label="requiredRowType"];
43->39 [style = bold, label=""];
35->28 [style = solid, label="format"];
40->44 [style = bold, label=""];
18->16 [style = bold, label=""];
7->13 [style = bold, label=""];
6->12 [style = bold, label=""];
9->5 [style = dotted, label="true"];
16->15 [style = bold, label=""];
5->19 [style = solid, label="tableType"];
35->22 [style = bold, label=""];
38->29 [style = bold, label=""];
1->11 [style = solid, label="requiredRowType"];
41->25 [style = solid, label="tableType"];
25->46 [style = bold, label=""];
14->45 [style = bold, label=""];
14->45 [style = solid, label="queryType"];
44->39 [style = bold, label=""];
9->6 [style = dotted, label="true"];
25->46 [style = dotted, label="true"];
44->43 [style = bold, label=""];
20->21 [style = bold, label=""];
6->14 [style = bold, label=""];
26->38 [style = bold, label=""];
28->46 [style = bold, label=""];
14->0 [style = bold, label=""];
42->36 [style = solid, label="format"];
45->25 [style = dotted, label="true"];
14->36 [style = solid, label="queryType"];
25->22 [style = dotted, label="true"];
23->34 [style = bold, label=""];
45->36 [style = dotted, label="true"];
41->25 [style = bold, label=""];
25->30 [style = dotted, label="true"];
32->24 [style = bold, label=""];
21->17 [style = bold, label=""];
16->20 [style = solid, label="tableAvroSchema"];
}
