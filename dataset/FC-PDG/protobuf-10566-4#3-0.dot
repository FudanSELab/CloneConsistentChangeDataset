digraph {
16 [style = filled, label = "assertEquals(\"Composite string must have same hashcode as literal string\",literalString.hashCode(),listString.hashCode())@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "byte(( referenceBytes = getTestBytes(77748,113344L)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ByteString concatenatedString = iter.next()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ByteString literalString = ByteString.copyFrom(referenceBytes)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(\"Concatenated string must have same hashcode as literal string\",literalString.hashCode(),concatenatedString.hashCode())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "testConcat['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<ByteString> pieces = makeConcretePieces(referenceBytes)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"Concatenated string must be equal to literal string\",literalString,concatenatedString)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "iter.hasNext()@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTrue(\"Concatenated string must be equal to literal string\",concatenatedString.equals(literalString))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Iterator<ByteString> iter = pieces.iterator()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ByteString listString = ByteString.copyFrom(pieces)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testCopyFromList['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(\"Concatenated string must have same hashcode as literal string\",literalString.hashCode(),concatenatedString.hashCode())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "testConcat['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "concatenatedString = concatenatedString.concat(iter.next())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(\"Composite string must be equal to literal string\",listString.equals(literalString))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
3->6 [style = solid, label="referenceBytes"];
4->9 [style = bold, label=""];
14->16 [style = bold, label=""];
6->5 [style = solid, label="literalString"];
15->14 [style = bold, label=""];
7->10 [style = bold, label=""];
4->15 [style = bold, label=""];
3->6 [style = bold, label=""];
1->10 [style = solid, label="concatenatedString"];
6->10 [style = solid, label="literalString"];
7->8 [style = bold, label=""];
1->7 [style = bold, label=""];
8->7 [style = bold, label=""];
6->4 [style = bold, label=""];
5->2 [style = bold, label=""];
8->10 [style = solid, label="concatenatedString"];
7->5 [style = bold, label=""];
13->3 [style = bold, label=""];
5->10 [style = dashed, label="0"];
2->11 [style = dashed, label="0"];
12->3 [style = bold, label=""];
3->4 [style = solid, label="referenceBytes"];
9->1 [style = bold, label=""];
7->8 [style = dotted, label="true"];
4->15 [style = solid, label="pieces"];
6->14 [style = solid, label="literalString"];
10->11 [style = bold, label=""];
}
