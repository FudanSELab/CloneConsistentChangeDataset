digraph {
6 [style = filled, label = "graphMapBuilder.put(node2,node1)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final ImmutableMultimap<Character,Character> graphMap = graphMapBuilder.build()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "checkArgument(edge.length() == 2,\"Expecting each edge to consist of 2 characters but got %s\",edge)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "!directed@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "createGraph['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "createGraph['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "graphMapBuilder.put(node1,node2)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ImmutableMultimap.Builder<Character,Character> graphMapBuilder = ImmutableMultimap.builder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "return new SuccessorsFunction<Character>(){@Override public Iterable<? extends Character> successors(Character node){return Ordering.natural().immutableSortedCopy(graphMap.get(node))}}@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "createGraph['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "String edges@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "boolean directed@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "String edges@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "char node1 = edge.charAt(0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "boolean directed@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "char node2 = edge.charAt(1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
0->9 [style = bold, label=""];
10->6 [style = dotted, label="true"];
7->1 [style = bold, label=""];
12->5 [style = bold, label=""];
10->3 [style = bold, label=""];
1->0 [style = bold, label=""];
9->10 [style = bold, label=""];
15->14 [style = dotted, label="true"];
10->7 [style = bold, label=""];
10->6 [style = bold, label=""];
15->5 [style = bold, label=""];
2->11 [style = dotted, label="true"];
12->11 [style = dotted, label="true"];
0->9 [style = solid, label="node2"];
12->13 [style = dotted, label="true"];
3->8 [style = bold, label=""];
2->4 [style = dotted, label="true"];
1->6 [style = solid, label="node1"];
15->11 [style = dotted, label="true"];
5->7 [style = bold, label=""];
1->9 [style = solid, label="node1"];
6->7 [style = bold, label=""];
0->6 [style = solid, label="node2"];
2->5 [style = bold, label=""];
}
