digraph {
13 [style = filled, label = "table = catalog.loadTable(tableIdent)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Table table = cachingCatalog.createTable(tableIdent,schema,spec,location,properties)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "HadoopCatalog catalog = new HadoopCatalog(conf,warehousePath)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(\"Table should have a spec with one void field\",v1Expected,table.spec())@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "Catalog cachingCatalog = CachingCatalog.wrap(catalog)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertNotNull(table.currentSnapshot())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(\"value2\",table.properties().get(\"key2\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "TableIdentifier tableIdent = TableIdentifier.of(DB_NAME,\"tbl\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "ImmutableMap<String,String> properties = ImmutableMap.of(\"key1\",\"value1\",\"key2\",\"value2\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(2,table.schema().columns().size())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Transaction createTxn = catalog.buildTable(tableIdent,SCHEMA).withPartitionSpec(SPEC).withProperty(\"key1\",\"value1\").createOrReplaceTransaction()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "createTxn.newAppend().appendFile(FILE_A).commit()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "String warehousePath = temp.newFolder().getAbsolutePath()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "{cachingCatalog.dropTable(tableIdent)}@@@17@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testReplaceTxnBuilder['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Transaction replaceTxn = catalog.buildTable(tableIdent,SCHEMA).withProperty(\"key2\",\"value2\").replaceTransaction()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "replaceTxn.commitTransaction()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testCreateTableWithCaching['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Schema schema = new Schema(required(1,\"id\",Types.IntegerType.get(),\"unique ID\"),required(2,\"data\",Types.StringType.get()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertNull(table.currentSnapshot())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Configuration conf = new Configuration()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testReplaceTxnBuilder['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "Assert.assertEquals(1,table.spec().fields().size())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "createTxn.commitTransaction()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Table table = catalog.loadTable(tableIdent)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(\"value2\",table.properties().get(\"key2\"))@@@19@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "PartitionSpec v1Expected = PartitionSpec.builderFor(table.schema()).alwaysNull(\"data\",\"data_bucket\").withSpecId(1).build()@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "String location = temp.newFolder(\"tbl\").toString()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(\"value1\",table.properties().get(\"key1\"))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TableIdentifier tableIdent = TableIdentifier.of(\"db\",\"ns1\",\"ns2\",\"tbl\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(location,table.location())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "PartitionSpec spec = PartitionSpec.builderFor(schema).bucket(\"data\",16).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertEquals(\"value1\",table.properties().get(\"key1\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertTrue(table.spec().isUnpartitioned())@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25->23 [style = bold, label=""];
29->21 [style = bold, label=""];
12->7 [style = bold, label=""];
8->14 [style = bold, label=""];
24->32 [style = bold, label=""];
24->28 [style = solid, label="schema"];
31->15 [style = solid, label="tableIdent"];
21->15 [style = bold, label=""];
8->14 [style = solid, label="warehousePath"];
22->24 [style = bold, label=""];
9->16 [style = bold, label=""];
27->28 [style = solid, label="properties"];
23->33 [style = bold, label=""];
14->12 [style = bold, label=""];
0->8 [style = bold, label=""];
12->13 [style = solid, label="tableIdent"];
30->28 [style = solid, label="location"];
11->17 [style = bold, label=""];
11->2 [style = bold, label=""];
5->13 [style = bold, label=""];
17->18 [style = solid, label="v1Expected"];
10->19 [style = bold, label=""];
30->27 [style = bold, label=""];
13->11 [style = bold, label=""];
16->28 [style = dashed, label="0"];
7->4 [style = bold, label=""];
32->31 [style = bold, label=""];
4->9 [style = bold, label=""];
3->0 [style = bold, label=""];
18->10 [style = bold, label=""];
27->26 [style = bold, label=""];
32->28 [style = solid, label="spec"];
30->25 [style = solid, label="location"];
16->6 [style = bold, label=""];
26->28 [style = bold, label=""];
31->30 [style = bold, label=""];
12->16 [style = solid, label="tableIdent"];
31->28 [style = solid, label="tableIdent"];
20->0 [style = bold, label=""];
6->25 [style = dashed, label="0"];
6->1 [style = bold, label=""];
15->10 [style = bold, label=""];
2->15 [style = bold, label=""];
28->25 [style = bold, label=""];
33->29 [style = bold, label=""];
0->14 [style = solid, label="conf"];
1->5 [style = bold, label=""];
17->18 [style = bold, label=""];
}
