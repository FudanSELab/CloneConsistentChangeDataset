digraph {
3 [style = filled, label = "final RecordCollector collector = new RecordCollectorImpl(logContext,taskId,new StreamsProducer(eosConfig,\"threadId\",new MockClientSupplier(){@Override public Producer<byte((,byte((> getProducer(final Map<String,Object> config){return mockProducer}},taskId,null,logContext),productionExceptionHandler,streamsMetrics)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "final RecordCollector collector = new RecordCollectorImpl(logContext,taskId,new StreamsProducer(eosConfig,processId + \"-StreamThread-1\",new MockClientSupplier(){@Override public Producer<byte((,byte((> getProducer(final Map<String,Object> config){return mockProducer}},taskId,processId,logContext),productionExceptionHandler,streamsMetrics)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "shouldNotCloseInternalProducerForEOS['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "shouldNotCloseInternalProducerForEOS['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "collector.closeClean()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "streamsProducer.flush()@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final Exception exception@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "getExceptionalStreamsProducerOnSend['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "return new StreamsProducer(config,\"threadId\",new MockClientSupplier(){@Override public Producer<byte((,byte((> getProducer(final Map<String,Object> config){return new MockProducer<byte((,byte((>(cluster,true,new DefaultPartitioner(),byteArraySerializer,byteArraySerializer){@Override public synchronized Future<RecordMetadata> send(final ProducerRecord<byte((,byte((> record,final Callback callback){callback.onCompletion(null,exception)return null}}}},null,null,logContext)@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3->5 [style = dashed, label="0"];
8->6 [style = solid, label="exception"];
3->6 [style = dashed, label="0"];
7->6 [style = bold, label=""];
5->0 [style = bold, label=""];
7->8 [style = dotted, label="true"];
4->5 [style = bold, label=""];
0->1 [style = bold, label=""];
3->0 [style = bold, label=""];
2->3 [style = bold, label=""];
}
