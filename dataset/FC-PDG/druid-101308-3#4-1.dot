digraph {
5 [style = filled, label = "PathSpec pathSpec = new DatasourcePathSpec(null,new DatasourceIngestionSpec(testDatasource,testDatasourceInterval,null,null,null,null,null,false,null),null,false)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "testUpdateSegmentListIfDatasourcePathSpecWithMatchingUserSegments['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "HadoopDruidIndexerConfig config = testRunUpdateSegmentListIfDatasourcePathSpecIsUsed(pathSpec,testDatasourceInterval)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "PathSpec pathSpec = new DatasourcePathSpec(jsonMapper,null,new DatasourceIngestionSpec(testDatasource,testDatasourceInterval,null,ImmutableList.of(SEGMENT),null,null,null,false,null),null,false)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(ImmutableList.of(WindowedDataSegment.of(SEGMENT)),((DatasourcePathSpec)config.getPathSpec()).getSegments())@@@5@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "PathSpec pathSpec = new DatasourcePathSpec(jsonMapper,null,new DatasourceIngestionSpec(testDatasource,testDatasourceInterval,null,null,null,null,null,false,null),null,false)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "testUpdateSegmentListIfDatasourcePathSpecIsUsedWithJustDatasourcePathSpec['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "testUpdateSegmentListIfDatasourcePathSpecIsUsedWithJustDatasourcePathSpec['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5->0 [style = solid, label="pathSpec"];
2->5 [style = dashed, label="0"];
2->0 [style = bold, label=""];
6->0 [style = bold, label=""];
6->0 [style = solid, label="pathSpec"];
3->2 [style = bold, label=""];
5->0 [style = bold, label=""];
2->0 [style = solid, label="pathSpec"];
4->5 [style = bold, label=""];
0->1 [style = bold, label=""];
7->6 [style = bold, label=""];
2->6 [style = dashed, label="0"];
}
