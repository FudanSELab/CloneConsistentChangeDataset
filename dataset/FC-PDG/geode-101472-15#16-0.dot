digraph {
18 [style = filled, label = "assertThat(regions.stream().map(null).collect(Collectors.toList())).containsExactlyInAnyOrder(\"group1\",\"group2\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "element = find(regions,REGION_IN_SINGLE_GROUP)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertThat(regions).hasSize(2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "listAll['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Region element = find(regions,\"customers\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "listAll['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "List<Region> regions = client.list(filter).getConfigResult()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "List<Region> regions = client.list(filter).getConfigResult()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(regions.stream().filter(null).map(null).collect(Collectors.toList())).containsExactlyInAnyOrder(\"group1\",\"group2\")@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertThat(element.getGroup()).isNull()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(regions.stream().filter(null).map(null).collect(Collectors.toList())).containsExactlyInAnyOrder(\"group1\",\"group2\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertThat(regions.stream().filter(null).map(null).collect(Collectors.toList())).containsExactlyInAnyOrder(\"group1\",\"group2\")@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertThat(regions.stream().map(null).map(null).collect(Collectors.toList())).containsExactlyInAnyOrder(RegionType.PARTITION,RegionType.PARTITION_PROXY)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(regions.stream().filter(null).map(null).collect(Collectors.toList())).containsExactlyInAnyOrder(RegionType.PARTITION,RegionType.PARTITION_PROXY)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Region element = find(regions,REGION_IN_CLUSTER)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "element = find(regions,\"customers1\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertThat(regions.stream().filter(null).map(null).collect(Collectors.toList())).containsExactlyInAnyOrder(RegionType.PARTITION,RegionType.PARTITION_PROXY)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertThat(element.getGroup()).isEqualTo(\"group1\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(regions.stream().filter(null).map(null).collect(Collectors.toList())).containsExactlyInAnyOrder(\"group1\",\"group2\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "filter.setName(\"customers2\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "listRegionByName2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0->9 [style = bold, label=""];
5->12 [style = dashed, label="0"];
15->14 [style = bold, label=""];
1->14 [style = dashed, label="0"];
7->12 [style = bold, label=""];
8->15 [style = dashed, label="0"];
11->4 [style = bold, label=""];
16->7 [style = bold, label=""];
1->3 [style = bold, label=""];
18->17 [style = bold, label=""];
14->10 [style = bold, label=""];
7->20 [style = dashed, label="0"];
4->13 [style = solid, label="regions"];
6->17 [style = dashed, label="0"];
6->0 [style = bold, label=""];
7->20 [style = bold, label=""];
4->12 [style = solid, label="regions"];
9->8 [style = bold, label=""];
12->6 [style = bold, label=""];
2->4 [style = bold, label=""];
4->0 [style = solid, label="regions"];
4->7 [style = bold, label=""];
19->16 [style = bold, label=""];
20->18 [style = bold, label=""];
8->1 [style = bold, label=""];
7->5 [style = bold, label=""];
5->6 [style = bold, label=""];
9->15 [style = bold, label=""];
6->13 [style = bold, label=""];
0->13 [style = dashed, label="0"];
4->5 [style = solid, label="regions"];
3->10 [style = dashed, label="0"];
13->9 [style = bold, label=""];
}
