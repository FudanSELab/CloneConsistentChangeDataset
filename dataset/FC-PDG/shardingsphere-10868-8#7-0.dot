digraph {
7 [style = filled, label = "PostgreSQLComCloseExecutor closeExecutor = new PostgreSQLComCloseExecutor(connectionContext,packet,backendConnection)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(connectionContext,bindPacket,backendConnection)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(actual.size(),is(1))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(actual.iterator().next(),is(instanceOf()))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "when(packet.getType()).thenReturn(PostgreSQLComClosePacket.Type.PREPARED_STATEMENT)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "when(packet.getName()).thenReturn(\"S_1\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertExecuteClosePreparedStatement['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(actual.iterator().next(),is(instanceOf()))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Collection<DatabasePacket<?>> actual = executor.execute()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(actual.size(),is(1))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "when(databaseCommunicationEngine.execute()).thenReturn(queryResponseHeader)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertExecuteBindPacketWithQuerySQLAndReturnEmptyResult['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "verify(queryResponseHeader).getQueryHeaders()@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(executor.getResponseType(),is(ResponseType.QUERY))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "setMockFieldIntoExecutor(executor)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "QueryResponseHeader queryResponseHeader = mock()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertExecuteClosePreparedStatement['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Collection<DatabasePacket<?>> actual = closeExecutor.execute()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "PostgreSQLComCloseExecutor closeExecutor = new PostgreSQLComCloseExecutor(packet,backendConnection)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "when(connectionContext.getDescribeExecutor()).thenReturn(Optional.of(describeExecutor))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->18 [style = bold, label=""];
9->13 [style = solid, label="executor"];
0->6 [style = bold, label=""];
10->19 [style = bold, label=""];
2->3 [style = bold, label=""];
6->11 [style = dashed, label="0"];
12->15 [style = bold, label=""];
18->17 [style = bold, label=""];
2->7 [style = dashed, label="0"];
1->7 [style = bold, label=""];
7->3 [style = bold, label=""];
3->0 [style = bold, label=""];
13->12 [style = bold, label=""];
15->11 [style = bold, label=""];
17->14 [style = bold, label=""];
11->10 [style = bold, label=""];
5->4 [style = bold, label=""];
14->9 [style = bold, label=""];
17->14 [style = solid, label="queryResponseHeader"];
1->2 [style = bold, label=""];
4->1 [style = bold, label=""];
8->4 [style = bold, label=""];
9->13 [style = bold, label=""];
}
