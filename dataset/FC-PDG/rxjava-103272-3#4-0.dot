digraph {
33 [style = filled, label = "Thread.sleep(20)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "InterruptedException e@@@43@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "refCountAsync['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "refCountAsyncActual()@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "final AtomicInteger nextCount = new AtomicInteger()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "d2.dispose()@@@46@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Thread.sleep(10)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final AtomicInteger receivedCount = new AtomicInteger()@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "int b = receivedCount.get()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Disposable d2 = r.subscribe()@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(nextCount.get(),receivedCount.get())@@@49@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "i < 10@@@4@@@['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "int a = nextCount.get()@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "{}@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "i++@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "{}@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Thread.sleep(260)@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "a > 10 && a < 20 && a == b@@@34@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "InterruptedException e@@@27@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Flowable<Long> r = Flowable.interval(0,20,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Subscription>(){@Override public void accept(Subscription s){subscribeCount.incrementAndGet()}}).doOnNext(new Consumer<Long>(){@Override public void accept(Long l){nextCount.incrementAndGet()}}).publish().refCount()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "int i = 0@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Disposable d1 = r.subscribe(new Consumer<Long>(){@Override public void accept(Long l){receivedCount.incrementAndGet()}})@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "a >= 20@@@37@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "System.out.println(\"onNext: \" + nextCount.get())@@@48@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "refCountAsync['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final AtomicInteger subscribeCount = new AtomicInteger()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "i == 9@@@11@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "return@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(1,subscribeCount.get())@@@50@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "d1.dispose()@@@47@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "throw ex@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Thread.sleep((int)(200 * (Math.random() * 10 + 1)))@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "AssertionError ex@@@10@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "refCountAsync['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Observable<Long> r = Observable.interval(0,25,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Disposable>(){@Override public void accept(Disposable d){subscribeCount.incrementAndGet()}}).doOnNext(new Consumer<Long>(){@Override public void accept(Long l){nextCount.incrementAndGet()}}).publish().refCount()@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "InterruptedException e@@@27@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
34->29 [style = bold, label=""];
33->3 [style = bold, label=""];
20->15 [style = solid, label="i"];
31->25 [style = solid, label="a"];
22->16 [style = bold, label=""];
20->21 [style = solid, label="i"];
21->15 [style = bold, label=""];
19->20 [style = bold, label=""];
29->31 [style = bold, label=""];
29->3 [style = bold, label=""];
8->3 [style = bold, label=""];
25->3 [style = bold, label=""];
24->17 [style = dotted, label="true"];
3->11 [style = bold, label=""];
25->32 [style = bold, label=""];
27->31 [style = bold, label=""];
30->25 [style = bold, label=""];
15->22 [style = dotted, label="true"];
15->21 [style = dotted, label="true"];
15->16 [style = dotted, label="true"];
12->6 [style = bold, label=""];
24->18 [style = bold, label=""];
32->33 [style = bold, label=""];
2->12 [style = bold, label=""];
30->25 [style = solid, label="b"];
15->22 [style = bold, label=""];
0->7 [style = bold, label=""];
14->26 [style = bold, label=""];
6->5 [style = bold, label=""];
23->24 [style = bold, label=""];
26->31 [style = bold, label=""];
13->27 [style = bold, label=""];
5->28 [style = dashed, label="0"];
23->18 [style = dotted, label="true"];
13->3 [style = bold, label=""];
11->10 [style = bold, label=""];
16->21 [style = bold, label=""];
10->0 [style = bold, label=""];
5->4 [style = bold, label=""];
24->17 [style = bold, label=""];
31->30 [style = bold, label=""];
31->32 [style = solid, label="a"];
33->31 [style = bold, label=""];
1->14 [style = bold, label=""];
4->1 [style = bold, label=""];
14->8 [style = bold, label=""];
21->15 [style = solid, label="i"];
18->21 [style = bold, label=""];
35->12 [style = bold, label=""];
32->3 [style = bold, label=""];
20->15 [style = bold, label=""];
23->24 [style = dotted, label="true"];
17->18 [style = bold, label=""];
28->4 [style = bold, label=""];
6->28 [style = bold, label=""];
9->13 [style = bold, label=""];
8->26 [style = dashed, label="0"];
}
