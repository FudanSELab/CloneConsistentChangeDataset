digraph {
7 [style = filled, label = "testNoPrimaryData['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "testAllocator.allocateUnassigned(allocation)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testAllocator.addData(node2,\"MATCH\",new StoreFileMetaData(\"file1\",10,\"MATCH_CHECKSUM\",MIN_SUPPORTED_LUCENE_VERSION))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "RoutingAllocation allocation = onePrimaryOnNode1And1Replica(yesAllocationDeciders())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED).get(0).shardId(),equalTo(shardId))@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testAllocator.addData(node1,\"MATCH\",new StoreFileMetaData(\"file1\",10,\"MATCH_CHECKSUM\",MIN_SUPPORTED_LUCENE_VERSION)).addData(node2,\"NO_MATCH\",new StoreFileMetaData(\"file1\",10,\"NO_MATCH_CHECKSUM\",MIN_SUPPORTED_LUCENE_VERSION))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testNoPrimaryData['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testAllocator.addData(node2,\"MATCH\",new StoreFileMetadata(\"file1\",10,\"MATCH_CHECKSUM\",MIN_SUPPORTED_LUCENE_VERSION))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED).size(),equalTo(1))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testNoMatchingFilesForReplicaOnAnyNode['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
3->8 [style = dashed, label="0"];
7->0 [style = bold, label=""];
3->6 [style = dashed, label="0"];
1->0 [style = bold, label=""];
9->0 [style = bold, label=""];
3->2 [style = bold, label=""];
8->2 [style = bold, label=""];
0->6 [style = bold, label=""];
0->2 [style = solid, label="allocation"];
5->4 [style = bold, label=""];
2->5 [style = bold, label=""];
6->2 [style = bold, label=""];
0->8 [style = bold, label=""];
}
