digraph {
4 [style = filled, label = "keysWithPrefixAsabcd.hasNext()@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "entries.add(new KeyValue<>(new Bytes(stringSerializer.serialize(null,\"abcd\")),stringSerializer.serialize(null,\"f\")))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final List<KeyValue<Bytes,byte((>> entries = new ArrayList<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "byteStore.putAll(entries)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final KeyValueIterator<Bytes,byte((> keysWithPrefixAsabcd = byteStore.prefixScan(\"abcd\",stringSerializer)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "numberOfKeysReturned++@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "rocksDBStore.flush()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertThat(numberOfKeysReturned,is(1))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "rocksDBStore.init((StateStoreContext)context,rocksDBStore)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "byteStore.flush()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "entries.add(new KeyValue<>(new Bytes(stringSerializer.serialize(null,\"abc\")),stringSerializer.serialize(null,\"f\")))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(numberOfKeysReturned,is(1))@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "numberOfKeysReturned++@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final KeyValueIterator<Bytes,byte((> keysWithPrefixAsabcd = rocksDBStore.prefixScan(\"abcd\",stringSerializer)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "keysWithPrefixAsabcd.next().key.get()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "rocksDBStore.putAll(entries)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "entries.add(new KeyValue<>(new Bytes(stringSerializer.serialize(null,\"abce\")),stringSerializer.serialize(null,\"f\")))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "int numberOfKeysReturned = 0@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->4 [style = bold, label=""];
4->17 [style = bold, label=""];
13->12 [style = dotted, label="true"];
2->1 [style = bold, label=""];
8->19 [style = bold, label=""];
4->13 [style = bold, label=""];
8->3 [style = bold, label=""];
4->10 [style = solid, label="numberOfKeysReturned"];
18->17 [style = solid, label="numberOfKeysReturned"];
9->8 [style = bold, label=""];
13->10 [style = dotted, label="true"];
13->11 [style = bold, label=""];
19->16 [style = bold, label=""];
0->7 [style = bold, label=""];
1->20 [style = dashed, label="0"];
7->9 [style = bold, label=""];
20->18 [style = bold, label=""];
18->12 [style = solid, label="numberOfKeysReturned"];
6->4 [style = bold, label=""];
4->13 [style = dotted, label="true"];
12->10 [style = bold, label=""];
1->6 [style = bold, label=""];
13->12 [style = bold, label=""];
18->4 [style = bold, label=""];
3->2 [style = bold, label=""];
10->13 [style = bold, label=""];
5->0 [style = bold, label=""];
14->0 [style = bold, label=""];
12->4 [style = bold, label=""];
2->16 [style = dashed, label="0"];
15->0 [style = bold, label=""];
4->11 [style = solid, label="numberOfKeysReturned"];
0->19 [style = solid, label="entries"];
0->2 [style = solid, label="entries"];
12->17 [style = solid, label="numberOfKeysReturned"];
4->12 [style = dotted, label="true"];
16->20 [style = bold, label=""];
10->11 [style = solid, label="numberOfKeysReturned"];
}
