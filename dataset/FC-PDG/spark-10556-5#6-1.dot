digraph {
13 [style = filled, label = "Assert.assertEquals(value.length,loc.getValueLength())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final Map<ByteBuffer,byte((> expected = new HashMap<ByteBuffer,byte((>()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final int size = 65536@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "randomizedTestWithRecordsLargerThanPageSize['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "final long pageSizeBytes = 128@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertTrue(loc.isDefined())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertTrue(loc.isDefined())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertTrue(arrayEquals(key,loc.getKeyAddress(),loc.getKeyLength()))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager,size,PAGE_SIZE_BYTES)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertTrue(arrayEquals(key,loc.getKeyAddress(),key.length))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final BytesToBytesMap.Location loc = map.lookup(key,Platform.BYTE_ARRAY_OFFSET,key.length)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "randomizedStressTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final byte(( key = entry.getKey().array()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertTrue(loc.putNewKey(key,Platform.BYTE_ARRAY_OFFSET,key.length,value,Platform.BYTE_ARRAY_OFFSET,value.length))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "i++@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final BytesToBytesMap.Location loc = map.lookup(key,Platform.BYTE_ARRAY_OFFSET,key.length)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final Map<ByteBuffer,byte((> expected = new HashMap<ByteBuffer,byte((>()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "int i = 0@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "expected.put(ByteBuffer.wrap(key),value)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "i++@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "{map.free()}@@@33@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertTrue(arrayEquals(value,loc.getValueAddress(),loc.getValueLength()))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final byte(( value = getRandomByteArray(rand.nextInt(512) + 1)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "{map.free()}@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "final byte(( key = getRandomByteArray(rand.nextInt(128))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "final byte(( value = getRandomByteArray(rand.nextInt(128))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(key.length,loc.getKeyLength())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "!expected.containsKey(ByteBuffer.wrap(key))@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final byte(( value = entry.getValue()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertFalse(loc.isDefined())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "i < 1000@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Assert.assertTrue(arrayEquals(value,loc.getValueAddress(),value.length))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "int i = 0@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "randomizedStressTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "!expected.containsKey(ByteBuffer.wrap(key))@@@12@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager,shuffleMemoryManager,64,pageSizeBytes)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final byte(( key = entry.getKey().array()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36->6 [style = dotted, label="true"];
22->36 [style = dashed, label="0"];
8->10 [style = bold, label=""];
35->3 [style = solid, label="key"];
9->14 [style = solid, label="key"];
20->9 [style = bold, label=""];
31->9 [style = bold, label=""];
2->32 [style = dashed, label="0"];
19->11 [style = bold, label=""];
20->5 [style = solid, label="key"];
22->36 [style = solid, label="i"];
15->21 [style = dotted, label="true"];
6->19 [style = dotted, label="true"];
32->6 [style = bold, label=""];
25->31 [style = bold, label=""];
7->26 [style = bold, label=""];
3->34 [style = bold, label=""];
0->14 [style = bold, label=""];
32->21 [style = solid, label="value"];
24->21 [style = bold, label=""];
0->31 [style = solid, label="value"];
11->13 [style = bold, label=""];
2->15 [style = bold, label=""];
23->36 [style = bold, label=""];
6->11 [style = dotted, label="true"];
6->3 [style = dotted, label="true"];
17->16 [style = bold, label=""];
36->9 [style = bold, label=""];
22->23 [style = dotted, label="true"];
21->19 [style = bold, label=""];
28->30 [style = bold, label=""];
1->22 [style = solid, label="i"];
15->24 [style = dotted, label="true"];
6->13 [style = dotted, label="true"];
23->13 [style = solid, label="key"];
23->35 [style = dashed, label="0"];
31->29 [style = bold, label=""];
22->23 [style = bold, label=""];
10->7 [style = bold, label=""];
5->25 [style = bold, label=""];
15->13 [style = dotted, label="true"];
15->3 [style = dotted, label="true"];
26->16 [style = bold, label=""];
6->4 [style = bold, label=""];
35->4 [style = solid, label="key"];
22->20 [style = bold, label=""];
16->1 [style = solid, label="i"];
15->12 [style = dotted, label="true"];
20->0 [style = solid, label="key"];
6->12 [style = dotted, label="true"];
36->35 [style = bold, label=""];
9->25 [style = solid, label="key"];
30->33 [style = solid, label="pageSizeBytes"];
6->24 [style = dotted, label="true"];
7->17 [style = bold, label=""];
30->33 [style = bold, label=""];
3->1 [style = bold, label=""];
2->24 [style = solid, label="value"];
6->23 [style = bold, label=""];
10->17 [style = solid, label="size"];
23->6 [style = solid, label="key"];
25->18 [style = bold, label=""];
10->26 [style = solid, label="size"];
35->32 [style = bold, label=""];
36->32 [style = dotted, label="true"];
12->24 [style = bold, label=""];
22->23 [style = solid, label="i"];
35->12 [style = solid, label="key"];
25->20 [style = bold, label=""];
22->1 [style = dotted, label="true"];
10->30 [style = dashed, label="0"];
23->4 [style = solid, label="key"];
27->10 [style = bold, label=""];
15->11 [style = dotted, label="true"];
4->12 [style = bold, label=""];
34->23 [style = bold, label=""];
23->2 [style = bold, label=""];
6->21 [style = dotted, label="true"];
36->23 [style = dotted, label="true"];
22->15 [style = dotted, label="true"];
35->21 [style = solid, label="key"];
33->17 [style = bold, label=""];
14->5 [style = bold, label=""];
15->1 [style = bold, label=""];
23->24 [style = solid, label="key"];
2->6 [style = solid, label="value"];
32->34 [style = solid, label="value"];
9->0 [style = bold, label=""];
2->3 [style = solid, label="value"];
16->22 [style = solid, label="i"];
15->6 [style = bold, label=""];
9->25 [style = solid, label="value"];
16->22 [style = bold, label=""];
17->22 [style = bold, label=""];
15->4 [style = dotted, label="true"];
32->4 [style = solid, label="value"];
22->2 [style = dotted, label="true"];
1->22 [style = bold, label=""];
10->22 [style = solid, label="size"];
13->3 [style = bold, label=""];
6->4 [style = dotted, label="true"];
15->19 [style = dotted, label="true"];
15->6 [style = dotted, label="true"];
22->36 [style = bold, label=""];
6->34 [style = dotted, label="true"];
17->26 [style = dashed, label="0"];
36->35 [style = dotted, label="true"];
23->36 [style = solid, label="i"];
}
