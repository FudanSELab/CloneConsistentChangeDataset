digraph {
15 [style = filled, label = "ZipExtraField(( ze = ExtraFieldUtils.parse(data,true,ExtraFieldUtils.UnparseableExtraField.SKIP)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(\"mode field 1\",040755,((AsiExtraField)ze(0().getMode())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ze = ExtraFieldUtils.parse(data2,true,ExtraFieldUtils.UnparseableExtraField.SKIP)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testParse['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "thrown.expectMessage(\"bad extra field starting at \" + (4 + aLocal.length) + \". Block length of 1 bytes exceeds remaining data of 0 bytes.\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertTrue(\"type field 1\",ze(0( instanceof AsiExtraField)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(\"type field 1\",ze(0(,instanceOf())@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "testParseWithSkip['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(\"number of fields\",2,ze.length)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "ZipExtraField(( ze = ExtraFieldUtils.parse(data)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ExtraFieldUtils.parse(data2)@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "byte(( data2 = new byte((((@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(\"type field 2\",ze(1(,instanceOf())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "testParse['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(\"mode field 1\",040755,((AsiExtraField)ze(0().getMode())@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(\"number of fields\",1,ze.length)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"data length field 2\",1,ze(1(.getLocalFileDataLength().getValue())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "System.arraycopy(data,0,data2,0,data2.length)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTrue(\"type field 2\",ze(1( instanceof UnrecognizedExtraField)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "thrown.expect()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(\"type field 1\",ze(0( instanceof AsiExtraField)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15->5 [style = solid, label="ze"];
14->7 [style = bold, label=""];
0->4 [style = bold, label=""];
1->9 [style = bold, label=""];
8->0 [style = solid, label="data2"];
9->8 [style = solid, label="ze"];
8->6 [style = solid, label="data2"];
2->5 [style = bold, label=""];
20->18 [style = bold, label=""];
17->19 [style = bold, label=""];
4->11 [style = bold, label=""];
6->0 [style = bold, label=""];
0->20 [style = solid, label="ze"];
13->6 [style = bold, label=""];
9->2 [style = bold, label=""];
10->8 [style = bold, label=""];
16->15 [style = bold, label=""];
8->13 [style = dashed, label="0"];
8->6 [style = bold, label=""];
5->10 [style = bold, label=""];
3->7 [style = bold, label=""];
4->20 [style = bold, label=""];
0->11 [style = solid, label="data2"];
12->10 [style = bold, label=""];
0->4 [style = solid, label="data2"];
11->0 [style = dashed, label="0"];
10->13 [style = bold, label=""];
9->13 [style = solid, label="ze"];
5->12 [style = dashed, label="0"];
19->2 [style = bold, label=""];
7->1 [style = bold, label=""];
9->5 [style = solid, label="ze"];
15->19 [style = solid, label="ze"];
9->12 [style = solid, label="ze"];
2->12 [style = bold, label=""];
15->17 [style = bold, label=""];
}
