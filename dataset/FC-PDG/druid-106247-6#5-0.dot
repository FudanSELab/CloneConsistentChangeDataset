digraph {
44 [style = filled, label = "final Sequence seq = chainedRunner.run(QueryPlus.wrap(query),context)@@@31@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "queriesInterrupted.await()@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertFalse(\"runner 1 not completed\",interrupted1.hasCompleted)@@@70@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ListenableFuture future = capturedFuture.getValue()@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertTrue(capturedFuture.hasCaptured())@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "interrupted1@@@55@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertFalse(\"runner 2 not completed\",interrupted2.hasCompleted)@@@71@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(\"test\").intervals(\"2014/2015\").aggregators(Collections.singletonList(new CountAggregatorFactory(\"count\"))).build()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "queriesStarted.await()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertTrue(\"runner 1 interrupted\",interrupted1.interrupted)@@@57@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Map<String,Object> context = ImmutableMap.of()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "QueryWatcher watcher = EasyMock.createStrictMock()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "testQueryCancellation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "cause = (QueryInterruptedException)e.getCause()@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Set<DyingQueryRunner> runners = Sets.newHashSet(new DyingQueryRunner(queriesStarted,queriesInterrupted,interrupted),new DyingQueryRunner(queriesStarted,queriesInterrupted,interrupted),new DyingQueryRunner(queriesStarted,queriesInterrupted,interrupted))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Capture<ListenableFuture> capturedFuture = EasyMock.newCapture()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Future resultFuture = Executors.newFixedThreadPool(1).submit(new Runnable(){@Override public void run(){seq.toList()}})@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ArrayBlockingQueue<DyingQueryRunner> interrupted = new ArrayBlockingQueue<>(3)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "watcher.registerQuery(EasyMock.anyObject(),EasyMock.and(EasyMock.anyObject(),EasyMock.capture(capturedFuture)))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final CountDownLatch queriesStarted = new CountDownLatch(2)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertTrue(\"runner 2 interrupted\",interrupted2.interrupted)@@@62@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertNotNull(cause)@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "HashMap<String,Object> context = new HashMap<String,Object>()@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "Assert.assertTrue(future.isCancelled())@@@53@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "DyingQueryRunner remainingRunner = runners.iterator().next()@@@66@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "EasyMock.expectLastCall().andAnswer(new IAnswer<Void>(){@Override public Void answer(){queryIsRegistered.countDown()return null}}).once()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "EasyMock.verify(watcher)@@@73@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ExecutorService exec = PrioritizedExecutorService.create(new Lifecycle(),new DruidProcessingConfig(){@Override public String getFormatString(){return \"test\"}@Override public int getNumThreads(){return 2}})@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "runners.remove(interrupted2)@@@65@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ChainedExecutionQueryRunner chainedRunner = new ChainedExecutionQueryRunner<>(exec,watcher,Lists.newArrayList(runners))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "EasyMock.replay(watcher)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertTrue(e.getCause() instanceof QueryInterruptedException)@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "runners.remove(interrupted1)@@@64@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertTrue(\"runner 2 started\",interrupted2.hasStarted)@@@61@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "ExecutionException e@@@47@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "future.cancel(true)@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Assert.assertTrue(\"runner 1 started\",interrupted1.hasStarted)@@@56@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "DyingQueryRunner interrupted2 = interrupted.poll()@@@59@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final CountDownLatch queryIsRegistered = new CountDownLatch(1)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(\"test\").intervals(\"2014/2015\").aggregators(Collections.singletonList(new CountAggregatorFactory(\"count\"))).context(ImmutableMap.of(QueryContexts.TIMEOUT_KEY,100,\"queryId\",\"test\")).build()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "final Sequence seq = chainedRunner.run(QueryPlus.wrap(query))@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "Assert.assertTrue(\"runner 3 should be interrupted or not have started\",!remainingRunner.hasStarted || remainingRunner.interrupted)@@@68@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "remainingRunner@@@67@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "DyingQueryRunner interrupted1 = interrupted.poll()@@@54@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertFalse(\"runner 3 not completed\",remainingRunner.hasCompleted)@@@72@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "testQueryTimeout['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "QueryInterruptedException cause = null@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final CountDownLatch queriesInterrupted = new CountDownLatch(2)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(\"Query timeout\",((QueryInterruptedException)e.getCause()).getErrorCode())@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "resultFuture.get()@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testQueryTimeout['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Capture<ListenableFuture> capturedFuture = Capture.newInstance()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "interrupted2@@@60@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "queryIsRegistered.await()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32->35 [style = bold, label=""];
53->24 [style = solid, label="capturedFuture"];
34->9 [style = bold, label=""];
21->15 [style = bold, label=""];
38->4 [style = bold, label=""];
49->51 [style = bold, label=""];
9->48 [style = solid, label="query"];
25->29 [style = bold, label=""];
25->29 [style = dotted, label="true"];
46->17 [style = solid, label="watcher"];
41->20 [style = bold, label=""];
36->11 [style = bold, label=""];
43->19 [style = bold, label=""];
45->12 [style = solid, label="interrupted1"];
13->23 [style = solid, label="queriesInterrupted"];
0->23 [style = solid, label="interrupted"];
37->43 [style = bold, label=""];
18->49 [style = bold, label=""];
12->20 [style = dotted, label="true"];
48->21 [style = bold, label=""];
11->33 [style = bold, label=""];
35->45 [style = bold, label=""];
30->39 [style = dotted, label="true"];
5->36 [style = bold, label=""];
8->53 [style = bold, label=""];
22->13 [style = bold, label=""];
45->37 [style = solid, label="interrupted1"];
8->28 [style = bold, label=""];
44->21 [style = bold, label=""];
16->32 [style = solid, label="cause"];
46->24 [style = bold, label=""];
51->44 [style = bold, label=""];
3->43 [style = solid, label="interrupted2"];
9->48 [style = bold, label=""];
20->3 [style = bold, label=""];
0->40 [style = solid, label="interrupted"];
0->26 [style = solid, label="interrupted"];
0->20 [style = solid, label="interrupted"];
29->26 [style = bold, label=""];
12->41 [style = bold, label=""];
0->23 [style = bold, label=""];
22->23 [style = solid, label="queriesStarted"];
15->31 [style = bold, label=""];
16->33 [style = bold, label=""];
1->16 [style = bold, label=""];
7->2 [style = bold, label=""];
9->44 [style = bold, label=""];
47->2 [style = bold, label=""];
18->9 [style = bold, label=""];
26->37 [style = bold, label=""];
14->6 [style = bold, label=""];
42->38 [style = bold, label=""];
25->26 [style = dotted, label="true"];
34->49 [style = dashed, label="0"];
27->40 [style = dotted, label="true"];
39->16 [style = bold, label=""];
4->17 [style = bold, label=""];
19->27 [style = solid, label="remainingRunner"];
18->34 [style = bold, label=""];
2->18 [style = solid, label="exec"];
44->48 [style = dashed, label="0"];
12->41 [style = dotted, label="true"];
9->51 [style = dashed, label="0"];
53->46 [style = bold, label=""];
10->5 [style = bold, label=""];
31->10 [style = bold, label=""];
39->1 [style = bold, label=""];
33->32 [style = bold, label=""];
23->18 [style = bold, label=""];
30->1 [style = dotted, label="true"];
23->18 [style = solid, label="runners"];
28->53 [style = dashed, label="0"];
3->25 [style = bold, label=""];
51->44 [style = solid, label="query"];
36->32 [style = solid, label="cause"];
6->0 [style = bold, label=""];
52->2 [style = bold, label=""];
46->18 [style = solid, label="watcher"];
24->14 [style = bold, label=""];
45->12 [style = bold, label=""];
28->46 [style = bold, label=""];
49->44 [style = solid, label="context"];
46->6 [style = solid, label="watcher"];
30->16 [style = dotted, label="true"];
50->36 [style = bold, label=""];
19->27 [style = bold, label=""];
34->44 [style = solid, label="context"];
30->39 [style = bold, label=""];
27->40 [style = bold, label=""];
28->24 [style = solid, label="capturedFuture"];
13->8 [style = bold, label=""];
2->22 [style = bold, label=""];
5->50 [style = bold, label=""];
3->25 [style = solid, label="interrupted2"];
40->42 [style = bold, label=""];
9->44 [style = solid, label="query"];
}
