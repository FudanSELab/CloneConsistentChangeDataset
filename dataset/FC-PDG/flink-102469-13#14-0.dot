digraph {
35 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpoint()),1,0)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Hello-0-0\",initialTime))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "TestHarnessUtil.assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expectedOutput.add(new CheckpointBarrier(0,0,CheckpointOptions.forFullCheckpoint()))@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "testCheckpointBarriers['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "testCheckpointBarriers['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forFullCheckpoint()),0,0)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpoint()),1,1)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forFullCheckpoint()),0,1)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testHarness.setupOutputForSingletonOperatorChain()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "expectedOutput.add(new CancelCheckpointMarker(0))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testHarness.processElement(new StreamRecord<String>(\"Hello-0-0\",initialTime),0,0)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "expectedOutput.add(new CheckpointBarrier(1,1,CheckpointOptions.forFullCheckpoint()))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testHarness.waitForTaskCompletion()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\",initialTime))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testHarness.processElement(new StreamRecord<String>(\"Hello-1-1\",initialTime),1,1)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forFullCheckpoint()),1,0)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "expectedOutput.add(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpoint()))@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forFullCheckpoint()),0,1)@@@33@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpoint()),0,1)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "testHarness.endInput()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forFullCheckpoint()),0,0)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final OneInputStreamTask<String,String> mapTask = new OneInputStreamTask<String,String>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forFullCheckpoint()),1,0)@@@34@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\",initialTime),0,0)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "TestHarnessUtil.assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput())@@@39@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final OneInputStreamTaskTestHarness<String,String> testHarness = new OneInputStreamTaskTestHarness<String,String>(mapTask,2,2,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "testOvertakingCheckpointBarriers['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\",initialTime))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testHarness.invoke()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpoint()),0,0)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "StreamMap<String,String> mapOperator = new StreamMap<String,String>(new IdentityMap())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forFullCheckpoint()),1,1)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "long initialTime = 0L@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "TestHarnessUtil.assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "testHarness.waitForInputProcessing()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\",initialTime))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "streamConfig.setOperatorID(new OperatorID())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Hello-1-1\",initialTime))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Hello-0-0\",initialTime))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forFullCheckpoint()),1,1)@@@35@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testHarness.waitForInputProcessing()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testHarness.waitForInputProcessing()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "StreamConfig streamConfig = testHarness.getStreamConfig()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\",initialTime),1,1)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testHarness.waitForTaskRunning()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "streamConfig.setStreamOperator(mapOperator)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27->13 [style = bold, label=""];
4->17 [style = solid, label="expectedOutput"];
11->28 [style = bold, label=""];
42->37 [style = bold, label=""];
30->1 [style = bold, label=""];
16->10 [style = solid, label="initialTime"];
8->23 [style = bold, label=""];
23->5 [style = bold, label=""];
25->34 [style = bold, label=""];
17->31 [style = bold, label=""];
16->15 [style = solid, label="initialTime"];
9->4 [style = bold, label=""];
0->2 [style = bold, label=""];
33->2 [style = bold, label=""];
23->32 [style = bold, label=""];
39->14 [style = bold, label=""];
5->15 [style = bold, label=""];
16->27 [style = solid, label="initialTime"];
46->39 [style = bold, label=""];
1->26 [style = bold, label=""];
16->24 [style = solid, label="initialTime"];
16->19 [style = bold, label=""];
16->6 [style = solid, label="initialTime"];
16->38 [style = solid, label="initialTime"];
7->8 [style = bold, label=""];
8->36 [style = dashed, label="0"];
21->18 [style = bold, label=""];
43->45 [style = bold, label=""];
19->25 [style = bold, label=""];
14->7 [style = bold, label=""];
20->27 [style = bold, label=""];
40->46 [style = bold, label=""];
4->22 [style = solid, label="expectedOutput"];
3->9 [style = bold, label=""];
5->32 [style = dashed, label="0"];
26->12 [style = bold, label=""];
25->20 [style = bold, label=""];
37->43 [style = bold, label=""];
18->22 [style = bold, label=""];
2->30 [style = solid, label="mapTask"];
31->35 [style = bold, label=""];
36->23 [style = bold, label=""];
10->29 [style = bold, label=""];
24->21 [style = bold, label=""];
4->39 [style = solid, label="expectedOutput"];
17->14 [style = bold, label=""];
23->21 [style = bold, label=""];
20->34 [style = dashed, label="0"];
16->13 [style = solid, label="initialTime"];
6->10 [style = bold, label=""];
15->24 [style = bold, label=""];
45->38 [style = bold, label=""];
16->45 [style = solid, label="initialTime"];
47->2 [style = bold, label=""];
44->41 [style = bold, label=""];
16->29 [style = solid, label="initialTime"];
32->15 [style = bold, label=""];
7->35 [style = dashed, label="0"];
28->17 [style = bold, label=""];
12->3 [style = bold, label=""];
17->44 [style = bold, label=""];
16->11 [style = solid, label="initialTime"];
13->6 [style = bold, label=""];
2->30 [style = bold, label=""];
35->36 [style = bold, label=""];
38->40 [style = bold, label=""];
12->3 [style = solid, label="mapOperator"];
29->11 [style = bold, label=""];
4->16 [style = bold, label=""];
34->27 [style = bold, label=""];
41->42 [style = bold, label=""];
14->31 [style = dashed, label="0"];
}
