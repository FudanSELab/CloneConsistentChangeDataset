digraph {
1 [style = filled, label = "testOwnedPartitionsAreInvalidatedForConsumerWithStaleGeneration['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "subscriptions.put(consumer2,buildSubscriptionWithGeneration(topics(topic,topic2),partitions(tp(topic,0),tp(topic,2),tp(topic2,1)),currentGeneration - 1))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "subscriptions.put(consumer2,buildSubscriptionWithGeneration(topics(topic,topic2),partitions(tp(topic,0),tp(topic,2),tp(topic2,1)),DEFAULT_GENERATION))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "partitionsPerTopic.put(topic,3)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(new HashSet<>(partitions(tp(topic,0),tp(topic,2),tp(topic2,1))),new HashSet<>(assignment.get(consumer1)))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Map<String,List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic,subscriptions)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "partitionsPerTopic.put(topic2,3)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "int currentGeneration = 10@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "subscriptions.put(consumer1,buildSubscriptionWithGeneration(topics(topic,topic2),partitions(tp(topic,0),tp(topic,2),tp(topic2,1)),currentGeneration))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTrue(isFullyBalanced(assignment))@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testOwnedPartitionsAreInvalidatedForConsumerWithNoGeneration['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(new HashSet<>(partitions(tp(topic,1),tp(topic2,0),tp(topic2,2))),new HashSet<>(assignment.get(consumer2)))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testOwnedPartitionsAreInvalidatedForConsumerWithStaleGeneration['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "verifyValidityAndBalance(subscriptions,assignment,partitionsPerTopic)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Map<String,Integer> partitionsPerTopic = new HashMap<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(assignor.partitionsTransferringOwnership.isEmpty())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4->14 [style = bold, label=""];
7->11 [style = bold, label=""];
1->8 [style = bold, label=""];
8->2 [style = solid, label="partitionsPerTopic"];
9->0 [style = bold, label=""];
3->6 [style = solid, label="currentGeneration"];
4->6 [style = bold, label=""];
6->14 [style = dashed, label="0"];
2->10 [style = bold, label=""];
3->4 [style = bold, label=""];
8->7 [style = bold, label=""];
2->0 [style = solid, label="assignment"];
6->2 [style = bold, label=""];
3->4 [style = solid, label="currentGeneration"];
11->3 [style = bold, label=""];
12->8 [style = bold, label=""];
8->0 [style = solid, label="partitionsPerTopic"];
2->5 [style = solid, label="assignment"];
10->9 [style = bold, label=""];
14->2 [style = bold, label=""];
15->8 [style = bold, label=""];
0->5 [style = bold, label=""];
13->0 [style = bold, label=""];
9->13 [style = bold, label=""];
}
