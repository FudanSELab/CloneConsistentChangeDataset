digraph {
16 [style = filled, label = "testCloning['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "s1.add(new Task(\"Task 1\",new Date(0L),new Date(1L)))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(d1.getClass() == d2.getClass())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertFalse(d1.equals(d2))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "TaskSeriesCollection<String,String> u1 = new TaskSeriesCollection<>()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "SlidingGanttCategoryDataset d2 = CloneUtils.clone(d1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(d1.equals(d2))@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertTrue(d1 != d2)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testCloning['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "TaskSeriesCollection<String,String> u2 = (TaskSeriesCollection)d2.getUnderlyingDataset()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "s2.add(new Task(\"Task 2\",new Date(10L),new Date(11L)))@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "TaskSeries<String> s2 = u2.getSeries(\"Series\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "SlidingGanttCategoryDataset d1 = new SlidingGanttCategoryDataset(u1,0,5)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "s1.add(new Task(\"Task 2\",new Date(10L),new Date(11L)))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testSerialization['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "TaskSeries<String> s1 = new TaskSeries<>(\"Series\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertTrue(d1.equals(d2))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(d1,d2)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertTrue(d1.equals(d2))@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "TaskSeriesCollection u2 = (TaskSeriesCollection)d2.getUnderlyingDataset()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "u1.add(s1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TaskSeriesCollection u1 = new TaskSeriesCollection()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "SlidingGanttCategoryDataset d2 = TestUtils.serialised(d1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "s2.add(new Task(\"Task 2\",new Date(10L),new Date(11L)))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->8 [style = bold, label=""];
14->5 [style = solid, label="d1"];
1->4 [style = bold, label=""];
22->23 [style = solid, label="d2"];
7->21 [style = dashed, label="0"];
14->7 [style = solid, label="d1"];
16->11 [style = bold, label=""];
21->19 [style = bold, label=""];
14->5 [style = bold, label=""];
15->18 [style = dashed, label="0"];
14->22 [style = bold, label=""];
3->11 [style = bold, label=""];
18->12 [style = bold, label=""];
22->21 [style = bold, label=""];
8->14 [style = bold, label=""];
23->4 [style = bold, label=""];
2->18 [style = bold, label=""];
5->7 [style = solid, label="d2"];
10->17 [style = bold, label=""];
11->8 [style = solid, label="s1"];
5->1 [style = solid, label="d2"];
4->2 [style = bold, label=""];
20->11 [style = bold, label=""];
12->9 [style = bold, label=""];
0->17 [style = dashed, label="0"];
17->14 [style = solid, label="u1"];
22->21 [style = solid, label="d2"];
0->14 [style = solid, label="u1"];
14->21 [style = solid, label="d1"];
6->1 [style = bold, label=""];
22->12 [style = solid, label="d2"];
11->10 [style = bold, label=""];
19->23 [style = bold, label=""];
10->0 [style = bold, label=""];
2->15 [style = bold, label=""];
7->6 [style = bold, label=""];
0->8 [style = bold, label=""];
5->13 [style = solid, label="d2"];
14->22 [style = solid, label="d1"];
5->7 [style = bold, label=""];
15->12 [style = bold, label=""];
5->2 [style = solid, label="d2"];
9->13 [style = bold, label=""];
5->22 [style = dashed, label="0"];
}
