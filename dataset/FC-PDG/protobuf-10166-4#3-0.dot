digraph {
9 [style = filled, label = "Message.Builder b2 = dynamicDefaultInstance.newBuilderForType()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "FieldDescriptor field = f(\"int32_to_int32_field\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertFalse(m1.equals(m2))@@@19@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Message dynamicDefaultInstance = DynamicMessage.getDefaultInstance(TestMap.getDescriptor())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Message m2 = b2.build()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testReflectionEqualsAndHashCode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "b1.addRepeatedField(field,newMapEntry(b1,\"int32_to_int32_field\",1,2))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "m2 = b2.build()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "b2.addRepeatedField(field,newMapEntry(b2,\"int32_to_int32_field\",3,4))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(m1).isNotEqualTo(m2)@@@19@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(m1,m2)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "b1.addRepeatedField(field,newMapEntry(b1,\"int32_to_int32_field\",5,6))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(m2).isEqualTo(m1)@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "testReflectionEqualsAndHashCode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(m1.hashCode(),m2.hashCode())@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Message.Builder b1 = dynamicDefaultInstance.newBuilderForType()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "b2.setRepeatedField(field,0,newMapEntry(b1,\"int32_to_int32_field\",0,0))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "b2.addRepeatedField(field,newMapEntry(b2,\"int32_to_int32_field\",5,6))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Message m1 = b1.build()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(m2.hashCode()).isEqualTo(m1.hashCode())@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "b1.addRepeatedField(field,newMapEntry(b1,\"int32_to_int32_field\",3,4))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "b2.addRepeatedField(field,newMapEntry(b2,\"int32_to_int32_field\",1,2))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testReflectionEqualsAndHashCode['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5->2 [style = bold, label=""];
5->6 [style = solid, label="field"];
15->0 [style = solid, label="m1"];
9->11 [style = bold, label=""];
15->9 [style = bold, label=""];
8->4 [style = bold, label=""];
5->10 [style = solid, label="field"];
5->12 [style = solid, label="field"];
7->10 [style = bold, label=""];
0->7 [style = bold, label=""];
5->17 [style = solid, label="field"];
22->16 [style = bold, label=""];
5->14 [style = solid, label="field"];
10->8 [style = bold, label=""];
11->6 [style = bold, label=""];
0->20 [style = dashed, label="0"];
2->17 [style = solid, label="b1"];
21->10 [style = bold, label=""];
3->20 [style = bold, label=""];
2->17 [style = bold, label=""];
8->18 [style = solid, label="m2"];
2->10 [style = solid, label="b1"];
8->18 [style = bold, label=""];
19->16 [style = bold, label=""];
20->21 [style = bold, label=""];
7->21 [style = dashed, label="0"];
9->11 [style = solid, label="b2"];
8->4 [style = solid, label="m2"];
5->13 [style = solid, label="field"];
12->3 [style = bold, label=""];
17->13 [style = bold, label=""];
3->0 [style = bold, label=""];
9->6 [style = solid, label="b2"];
6->12 [style = bold, label=""];
2->13 [style = solid, label="b1"];
9->12 [style = solid, label="b2"];
16->5 [style = bold, label=""];
4->18 [style = dashed, label="0"];
2->14 [style = solid, label="b1"];
15->20 [style = solid, label="m1"];
13->14 [style = bold, label=""];
1->16 [style = bold, label=""];
5->11 [style = solid, label="field"];
14->15 [style = bold, label=""];
3->0 [style = solid, label="m2"];
}
