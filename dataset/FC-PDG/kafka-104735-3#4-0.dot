digraph {
19 [style = filled, label = "EasyMock.expectLastCall()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "PowerMock.verifyAll()@@@36@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "EasyMock.expectLastCall().andThrow(new WakeupException())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final List<TopicPartition> partitions = asList(TOPIC_PARTITION,TOPIC_PARTITION2)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte((,byte((>>(){@Override public ConsumerRecords<byte((,byte((> answer(){rebalanceListener.getValue().onPartitionsRevoked(partitions)return ConsumerRecords.empty()}})@@@6@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "expectPollInitialAssignment()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "workerTask.initializeAndStart()@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "EasyMock.expectLastCall().andThrow(e)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "EasyMock.expectLastCall()@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "workerTask.poll(Long.MAX_VALUE)@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "workerTask.poll(Long.MAX_VALUE)@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "EasyMock.expectLastCall()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "workerTask.iteration()@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "consumer.commitSync(EasyMock.anyObject())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "sinkTask.open(partitions)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "consumer.commitSync(EasyMock.anyObject())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "consumer.resume(Collections.singleton(TOPIC_PARTITION))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "expectRebalanceRevocationError['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte((,byte((>>(){@Override public ConsumerRecords<byte((,byte((> answer(){rebalanceListener.getValue().onPartitionsRevoked(partitions)rebalanceListener.getValue().onPartitionsAssigned(partitions)return ConsumerRecords.empty()}})@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "sinkTask.flush(EasyMock.anyObject())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testWakeupInCommitSyncCausesRetry['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "consumer.resume(Collections.singleton(TOPIC_PARTITION2))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "PowerMock.replayAll()@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "EasyMock.expectLastCall()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "workerTask.initialize(TASK_CONFIG)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "workerTask.iteration()@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "testWakeupInCommitSyncCausesRetry['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "EasyMock.expectLastCall()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "RuntimeException e@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "EasyMock.expectLastCall()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "expectInitializeTask()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "sinkTask.close(new HashSet<>(partitions))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13->25 [style = solid, label="partitions"];
27->13 [style = bold, label=""];
10->22 [style = bold, label=""];
23->25 [style = bold, label=""];
17->26 [style = bold, label=""];
3->28 [style = dashed, label="0"];
31->33 [style = solid, label="partitions"];
32->34 [style = dotted, label="true"];
28->30 [style = bold, label=""];
20->9 [style = bold, label=""];
22->16 [style = bold, label=""];
15->21 [style = bold, label=""];
2->3 [style = bold, label=""];
3->6 [style = bold, label=""];
19->10 [style = bold, label=""];
5->14 [style = bold, label=""];
13->26 [style = solid, label="partitions"];
25->17 [style = bold, label=""];
33->13 [style = bold, label=""];
21->18 [style = bold, label=""];
14->13 [style = dashed, label="0"];
8->0 [style = bold, label=""];
7->24 [style = bold, label=""];
30->12 [style = bold, label=""];
13->20 [style = solid, label="partitions"];
16->1 [style = bold, label=""];
34->13 [style = solid, label="e"];
0->4 [style = bold, label=""];
31->33 [style = bold, label=""];
13->5 [style = bold, label=""];
9->19 [style = bold, label=""];
14->15 [style = bold, label=""];
1->2 [style = bold, label=""];
18->8 [style = bold, label=""];
6->30 [style = dashed, label="0"];
4->11 [style = bold, label=""];
29->24 [style = bold, label=""];
11->23 [style = bold, label=""];
2->28 [style = bold, label=""];
24->27 [style = bold, label=""];
32->31 [style = bold, label=""];
13->5 [style = solid, label="partitions"];
31->5 [style = solid, label="partitions"];
26->20 [style = bold, label=""];
6->12 [style = bold, label=""];
}
