digraph {
4 [style = filled, label = "Assert.assertEquals(0L,loadQueuePeon.getLoadQueueSize())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "loadQueuePeon.start()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "LoadQueuePeonTester['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "super(null,null,null,Execs.scheduledSingleThreaded(\"LoadQueuePeonTester--%d\"),null,new TestDruidCoordinatorConfig(null,null,null,new Duration(1),null,null,10,null,new Duration(\"PT1s\")))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "super(null,null,null,Execs.scheduledSingleThreaded(\"LoadQueuePeonTester--%d\"),null,new TestDruidCoordinatorConfig(null,null,null,null,new Duration(1),null,null,null,null,10,new Duration(\"PT1s\")))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "loadQueuePeon.loadSegment(segment,new LoadPeonCallback(){@Override public void execute(){segmentLoadedSignal.countDown()}})@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final CountDownLatch segmentLoadedSignal = new CountDownLatch(1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertTrue(timing.forWaiting().awaitLatch(segmentLoadedSignal))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "LoadQueuePeonTester['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testFailAssignForNonTimeoutFailures['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "loadQueuePeon = new CuratorLoadQueuePeon(curator,LOAD_QUEUE_PATH,null,Execs.scheduledSingleThreaded(\"test_load_queue_peon_scheduled-%d\"),Execs.singleThreaded(\"test_load_queue_peon-%d\"),new TestDruidCoordinatorConfig(null,null,null,new Duration(1),null,null,10,new Duration(\"PT1s\")))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final DataSegment segment = dataSegmentWithInterval(\"2014-10-22T00:00:00Z/P1D\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "loadQueueCache.start()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(0,loadQueuePeon.getTimedOutSegments().size())@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(0,loadQueuePeon.getSegmentsToLoad().size())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->14 [style = solid, label="segmentLoadedSignal"];
6->9 [style = solid, label="segment"];
13->12 [style = bold, label=""];
1->0 [style = bold, label=""];
0->3 [style = dashed, label="0"];
6->7 [style = bold, label=""];
7->8 [style = bold, label=""];
12->9 [style = bold, label=""];
14->11 [style = bold, label=""];
4->5 [style = bold, label=""];
10->6 [style = bold, label=""];
8->13 [style = bold, label=""];
2->3 [style = bold, label=""];
11->4 [style = bold, label=""];
9->14 [style = bold, label=""];
}
