digraph {
25 [style = filled, label = "verify(httpChannel,times(0)).close()@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testUnsupportedHttpMethod['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY),new NoneCircuitBreakerService())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "DefaultRestChannel channel = new DefaultRestChannel(httpChannel,request.getHttpRequest(),request,bigArrays,HttpHandlingSettings.fromSettings(Settings.EMPTY),threadPool.getThreadContext(),CorsHandler.fromSettings(Settings.EMPTY),null)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final BytesReference content = new ReleasableBytesReference(BytesReference.fromByteArray(byteArray,0),byteArray)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final RestRequest request = RestRequest.request(xContentRegistry(),new TestHttpRequest(httpVersion,null,\"/\"){@Override public HttpResponse createResponse(RestStatus status,BytesReference content){throw new IllegalArgumentException(\"test\")}},httpChannel)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "@SuppressWarnings(\"unchecked\") Class<ActionListener<Void>> listenerClass = (Class<ActionListener<Void>>)(Class<?>)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "final ByteArray byteArray = bigArrays.newByteArray(0,false)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "expectThrows(,null)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "ActionListener<Void> listener = listenerCaptor.getValue()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "listener.onFailure(new ClosedChannelException())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Class<ActionListener<Void>> listenerClass = (Class<ActionListener<Void>>)(Class)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "channel.sendResponse(new TestRestResponse(RestStatus.METHOD_NOT_ALLOWED,content))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "verify(httpChannel,times(1)).close()@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "randomBoolean()@@@22@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "listener.onResponse(null)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "close@@@28@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION,Collections.singletonList(httpConnectionHeaderValue))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "verify(httpChannel,times(1)).close()@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "verify(httpChannel,times(0)).close()@@@32@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testUnsupportedHttpMethod['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "final String httpConnectionHeaderValue = close? DefaultRestChannel.CLOSE: DefaultRestChannel.KEEP_ALIVE@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "verify(httpChannel).sendResponse(any(),listenerCaptor.capture())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ArgumentCaptor<ActionListener<Void>> listenerCaptor = ArgumentCaptor.forClass(listenerClass)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testCloseOnException['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final boolean close = randomBoolean()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "close@@@18@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final HttpRequest.HttpVersion httpVersion = close? HttpRequest.HttpVersion.HTTP_1_0: HttpRequest.HttpVersion.HTTP_1_1@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->8 [style = dotted, label="true"];
19->16 [style = solid, label="close"];
16->8 [style = bold, label=""];
22->19 [style = bold, label=""];
0->12 [style = solid, label="listenerClass"];
4->2 [style = solid, label="httpConnectionHeaderValue"];
5->18 [style = solid, label="content"];
19->20 [style = bold, label=""];
0->12 [style = bold, label=""];
17->9 [style = bold, label=""];
26->25 [style = bold, label=""];
16->7 [style = bold, label=""];
19->26 [style = solid, label="close"];
26->23 [style = dotted, label="true"];
19->8 [style = solid, label="close"];
5->18 [style = bold, label=""];
19->25 [style = solid, label="close"];
9->10 [style = bold, label=""];
15->5 [style = solid, label="byteArray"];
11->2 [style = bold, label=""];
6->15 [style = bold, label=""];
15->5 [style = bold, label=""];
20->4 [style = bold, label=""];
21->12 [style = bold, label=""];
19->23 [style = solid, label="close"];
12->13 [style = bold, label=""];
24->26 [style = bold, label=""];
13->17 [style = bold, label=""];
19->20 [style = solid, label="close"];
10->16 [style = bold, label=""];
3->19 [style = bold, label=""];
19->7 [style = solid, label="close"];
1->16 [style = bold, label=""];
0->21 [style = dashed, label="0"];
5->24 [style = bold, label=""];
26->23 [style = bold, label=""];
2->14 [style = bold, label=""];
20->11 [style = solid, label="httpVersion"];
9->1 [style = dotted, label="true"];
27->19 [style = bold, label=""];
21->12 [style = solid, label="listenerClass"];
16->7 [style = dotted, label="false"];
18->21 [style = bold, label=""];
9->1 [style = bold, label=""];
4->11 [style = bold, label=""];
19->4 [style = solid, label="close"];
9->10 [style = dotted, label="false"];
14->6 [style = bold, label=""];
18->0 [style = bold, label=""];
18->24 [style = dashed, label="0"];
11->14 [style = solid, label="request"];
26->25 [style = dotted, label="false"];
}
