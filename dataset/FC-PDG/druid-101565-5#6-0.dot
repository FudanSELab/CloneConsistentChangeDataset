digraph {
4 [style = filled, label = "testQuery(\"SELECT dim2, AVG(m2) FROM (SELECT * FROM foo AS t1 INNER JOIN foo AS t2 ON t1.m1 = t2.m1 LIMIT 10) AS t3 GROUP BY dim2\",ImmutableList.of(GroupByQuery.builder().setDataSource(newScanQueryBuilder().dataSource(join(new TableDataSource(CalciteTests.DATASOURCE1),new QueryDataSource(newScanQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).columns(ImmutableList.of(\"m1\")).resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST).context(QUERY_CONTEXT_DEFAULT).build()),\"j0.\",equalsCondition(DruidExpression.fromColumn(\"m1\"),DruidExpression.fromColumn(\"j0.m1\")),JoinType.INNER)).intervals(querySegmentSpec(Filtration.eternity())).limit(10).columns(\"dim2\",\"j0.m1\",\"m1\",\"m2\").context(QUERY_CONTEXT_DEFAULT).build()).setInterval(querySegmentSpec(Filtration.eternity())).setDimensions(new DefaultDimensionSpec(\"dim2\",\"d0\",ValueType.STRING)).setGranularity(Granularities.ALL).setAggregatorSpecs(useDefault? aggregators(new DoubleSumAggregatorFactory(\"a0:sum\",\"m2\"),new CountAggregatorFactory(\"a0:count\")): aggregators(new DoubleSumAggregatorFactory(\"a0:sum\",\"m2\"),new FilteredAggregatorFactory(new CountAggregatorFactory(\"a0:count\"),not(selector(\"m2\",null,null))))).setPostAggregatorSpecs(ImmutableList.of(new ArithmeticPostAggregator(\"a0\",\"quotient\",ImmutableList.of(new FieldAccessPostAggregator(null,\"a0:sum\"),new FieldAccessPostAggregator(null,\"a0:count\"))))).setContext(QUERY_CONTEXT_DEFAULT).build()),NullHandling.sqlCompatible()? ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@989d15,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@989d1a,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@989d1f,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@989d24): ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@989d2c,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@989d31,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@989d36))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testQuery(\"SELECT t1.dim2, AVG(t1.m2) FROM (SELECT * FROM foo LIMIT 10) AS t1 INNER JOIN foo AS t2 ON t1.m1 = t2.m1 GROUP BY t1.dim2\",ImmutableList.of(GroupByQuery.builder().setDataSource(join(new QueryDataSource(newScanQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).columns(\"dim2\",\"m1\",\"m2\").context(QUERY_CONTEXT_DEFAULT).limit(10).build()),new QueryDataSource(newScanQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).columns(ImmutableList.of(\"m1\")).resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST).context(QUERY_CONTEXT_DEFAULT).build()),\"j0.\",equalsCondition(DruidExpression.fromColumn(\"m1\"),DruidExpression.fromColumn(\"j0.m1\")),JoinType.INNER)).setInterval(querySegmentSpec(Filtration.eternity())).setDimensions(new DefaultDimensionSpec(\"dim2\",\"d0\",ValueType.STRING)).setGranularity(Granularities.ALL).setAggregatorSpecs(useDefault? aggregators(new DoubleSumAggregatorFactory(\"a0:sum\",\"m2\"),new CountAggregatorFactory(\"a0:count\")): aggregators(new DoubleSumAggregatorFactory(\"a0:sum\",\"m2\"),new FilteredAggregatorFactory(new CountAggregatorFactory(\"a0:count\"),not(selector(\"m2\",null,null))))).setPostAggregatorSpecs(ImmutableList.of(new ArithmeticPostAggregator(\"a0\",\"quotient\",ImmutableList.of(new FieldAccessPostAggregator(null,\"a0:sum\"),new FieldAccessPostAggregator(null,\"a0:count\"))))).setContext(QUERY_CONTEXT_DEFAULT).build()),NullHandling.sqlCompatible()? ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@989df1,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@989df6,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@989dfb,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@989e00): ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@989e08,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@989e0d,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@989e12))@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testQuery(\"SELECT dim2, AVG(m2) FROM (SELECT * FROM foo AS t1 INNER JOIN foo AS t2 ON t1.m1 = t2.m1 LIMIT 10) AS t3 GROUP BY dim2\",ImmutableList.of(GroupByQuery.builder().setDataSource(newScanQueryBuilder().dataSource(join(new TableDataSource(CalciteTests.DATASOURCE1),new QueryDataSource(newScanQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).columns(ImmutableList.of(\"m1\")).resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST).context(QUERY_CONTEXT_DEFAULT).build()),\"j0.\",equalsCondition(DruidExpression.fromColumn(\"m1\"),DruidExpression.fromColumn(\"j0.m1\")),JoinType.INNER)).intervals(querySegmentSpec(Filtration.eternity())).limit(10).columns(\"__time\",\"cnt\",\"dim1\",\"dim2\",\"dim3\",\"j0.m1\",\"m1\",\"m2\",\"unique_dim1\").context(QUERY_CONTEXT_DEFAULT).build()).setInterval(querySegmentSpec(Filtration.eternity())).setDimensions(new DefaultDimensionSpec(\"dim2\",\"d0\",ValueType.STRING)).setGranularity(Granularities.ALL).setAggregatorSpecs(useDefault? aggregators(new DoubleSumAggregatorFactory(\"a0:sum\",\"m2\"),new CountAggregatorFactory(\"a0:count\")): aggregators(new DoubleSumAggregatorFactory(\"a0:sum\",\"m2\"),new FilteredAggregatorFactory(new CountAggregatorFactory(\"a0:count\"),not(selector(\"m2\",null,null))))).setPostAggregatorSpecs(ImmutableList.of(new ArithmeticPostAggregator(\"a0\",\"quotient\",ImmutableList.of(new FieldAccessPostAggregator(null,\"a0:sum\"),new FieldAccessPostAggregator(null,\"a0:count\"))))).setContext(QUERY_CONTEXT_DEFAULT).build()),NullHandling.sqlCompatible()? ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@989c38,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@989c3d,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@989c42,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@989c47): ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@989c4f,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@989c54,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@989c59))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "testJoinOuterGroupByAndSubqueryHasLimit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testJoinOuterGroupByAndSubqueryHasLimit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "cannotVectorize()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testJoinWithLimitBeforeJoining['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1->4 [style = dashed, label="0"];
2->0 [style = bold, label=""];
5->0 [style = bold, label=""];
0->4 [style = bold, label=""];
0->6 [style = bold, label=""];
1->6 [style = dashed, label="0"];
0->1 [style = bold, label=""];
3->0 [style = bold, label=""];
}
