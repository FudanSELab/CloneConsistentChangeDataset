digraph {
12 [style = filled, label = "Provisioner provisioner = strategy.makeProvisioner(runner)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(0).times(1)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Assert.assertFalse(terminatedSomething)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.expect(runner.getLazyWorkers()).andReturn(new ArrayList<>()).times(2)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertTrue(provisioner.getStats().toList().size() == 1)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(0).times(2)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "RemoteTaskRunner runner = EasyMock.createMock()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(1).times(3)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "EasyMock.expect(runner.markWorkersLazy(EasyMock.anyObject(),EasyMock.anyInt())).andReturn(Collections.singletonList(new TestZkWorker(testTask).getWorker()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "EasyMock.expect(autoScaler.getMaxNumWorkers()).andReturn(1).times(2)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "EasyMock.verify(runner)@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertTrue(provisioner.getStats().toList().get(0).getEvent() == ScalingStats.EVENT.TERMINATE)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "EasyMock.expect(runner.getPendingTasks()).andReturn(Collections.singletonList(new RemoteTaskRunnerWorkItem(testTask.getId(),testTask.getType(),null,null,testTask.getDataSource()).withQueueInsertionTime(DateTimes.nowUtc()))).times(2)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "EasyMock.expect(autoScaler.terminate(EasyMock.anyObject())).andReturn(new AutoScalingData(Collections.singletonList(\"ip\")))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(provisioner.getStats().toList().get(0).getEvent() == ScalingStats.EVENT.TERMINATE)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testSomethingTerminating['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertTrue(terminatedSomething)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertTrue(provisioner.getStats().toList().size() == 1)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "EasyMock.expect(runner.getWorkers()).andReturn(Collections.singletonList(new TestZkWorker(testTask).toImmutable())).times(2)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "EasyMock.expect(runner.getWorkers()).andReturn(ImmutableList.of(new TestZkWorker(testTask).toImmutable(),new TestZkWorker(testTask).toImmutable(),new TestZkWorker(testTask).toImmutable())).times(2)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testSomethingTerminating['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "EasyMock.replay(runner)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "boolean terminatedSomething = provisioner.doTerminate()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testSomethingTerminating['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "EasyMock.verify(autoScaler)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "EasyMock.expect(autoScaler.ipToIdLookup(EasyMock.anyObject())).andReturn(Collections.singletonList(\"ip\")).times(2)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "EasyMock.expect(autoScaler.ipToIdLookup(EasyMock.anyObject())).andReturn(Collections.singletonList(\"ip\")).times(2)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EasyMock.replay(runner)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "EasyMock.replay(autoScaler)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "terminatedSomething = provisioner.doTerminate()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->10 [style = solid, label="runner"];
5->10 [style = bold, label=""];
27->18 [style = bold, label=""];
19->18 [style = bold, label=""];
9->0 [style = bold, label=""];
22->19 [style = bold, label=""];
4->6 [style = bold, label=""];
0->19 [style = bold, label=""];
5->26 [style = dashed, label="0"];
2->3 [style = bold, label=""];
12->15 [style = bold, label=""];
5->26 [style = bold, label=""];
11->12 [style = bold, label=""];
2->3 [style = solid, label="terminatedSomething"];
3->16 [style = bold, label=""];
13->7 [style = solid, label="runner"];
15->4 [style = solid, label="terminatedSomething"];
3->16 [style = solid, label="terminatedSomething"];
17->21 [style = dashed, label="0"];
1->13 [style = bold, label=""];
0->22 [style = dashed, label="0"];
26->11 [style = bold, label=""];
8->7 [style = bold, label=""];
6->2 [style = bold, label=""];
25->24 [style = bold, label=""];
13->17 [style = bold, label=""];
12->15 [style = solid, label="terminatedSomething"];
20->8 [style = bold, label=""];
23->22 [style = bold, label=""];
7->28 [style = bold, label=""];
18->1 [style = bold, label=""];
17->14 [style = bold, label=""];
13->11 [style = solid, label="runner"];
15->4 [style = bold, label=""];
21->14 [style = bold, label=""];
29->14 [style = bold, label=""];
17->28 [style = solid, label="runner"];
0->24 [style = dashed, label="0"];
17->11 [style = solid, label="runner"];
13->21 [style = bold, label=""];
16->20 [style = bold, label=""];
17->29 [style = bold, label=""];
24->27 [style = bold, label=""];
17->12 [style = solid, label="runner"];
14->5 [style = bold, label=""];
10->11 [style = bold, label=""];
}
