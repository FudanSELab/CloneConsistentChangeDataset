digraph {
17 [style = filled, label = "assertEquals(DocValuesType.NONE,fieldType.docValuesType())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(fieldType.omitNorms(),equalTo(true))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(fieldType.storeTermVectorOffsets(),equalTo(false))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(fieldType.indexOptions(),equalTo(IndexOptions.DOCS))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "ParsedDocument doc = mapper.parse(new SourceToParse(\"test\",\"type\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"1234\").endObject()),XContentType.JSON))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(new BytesRef(\"1234\"),fields(0(.binaryValue())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertFalse(fieldType.tokenized())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",\"keyword\").endObject().endObject().endObject().endObject())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "IndexableField(( fields = doc.rootDoc().getFields(\"field\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(fieldType.indexOptions(),equalTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(new BytesRef(\"1234\"),fields(1(.binaryValue())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertFalse(fieldType.stored())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(fieldType.omitNorms(),equalTo(false))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(fieldType.tokenized())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"1234\",fields(0(.stringValue())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(2,fields.length)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(fieldType.storeTermVectorPayloads(),equalTo(false))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(fieldType.storeTermVectorPositions(),equalTo(false))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(DocValuesType.SORTED_SET,fieldType.docValuesType())@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "IndexableFieldType fieldType = fields(0(.fieldType()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(mapping,mapper.mappingSource().toString())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testDefaults['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testDefaults['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "fieldType = fields(1(.fieldType()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(1,fields.length)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(fieldType.storeTermVectors(),equalTo(false))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "DocumentMapper mapper = parser.parse(\"type\",new CompressedXContent(mapping))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testDefaults['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertThat(fieldType.indexOptions(),equalTo(IndexOptions.NONE))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",\"text\").endObject().endObject().endObject().endObject())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ParsedDocument doc = mapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"1234\").endObject()),XContentType.JSON))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2->17 [style = bold, label=""];
9->20 [style = dashed, label="0"];
16->3 [style = bold, label=""];
8->16 [style = bold, label=""];
4->9 [style = bold, label=""];
22->25 [style = bold, label=""];
25->1 [style = bold, label=""];
12->23 [style = dashed, label="0"];
27->14 [style = bold, label=""];
11->14 [style = bold, label=""];
7->10 [style = bold, label=""];
28->20 [style = bold, label=""];
16->19 [style = dashed, label="0"];
8->19 [style = bold, label=""];
26->29 [style = bold, label=""];
30->23 [style = bold, label=""];
12->15 [style = bold, label=""];
23->15 [style = bold, label=""];
1->27 [style = bold, label=""];
18->12 [style = bold, label=""];
10->22 [style = dashed, label="0"];
9->7 [style = bold, label=""];
3->4 [style = bold, label=""];
1->11 [style = bold, label=""];
4->28 [style = dashed, label="0"];
6->2 [style = bold, label=""];
12->8 [style = solid, label="mapping"];
7->21 [style = solid, label="fieldType"];
7->22 [style = bold, label=""];
21->26 [style = bold, label=""];
3->28 [style = bold, label=""];
17->24 [style = bold, label=""];
13->12 [style = bold, label=""];
5->6 [style = bold, label=""];
0->25 [style = dashed, label="0"];
24->21 [style = bold, label=""];
0->1 [style = bold, label=""];
10->0 [style = bold, label=""];
11->27 [style = dashed, label="0"];
23->15 [style = solid, label="mapping"];
12->15 [style = solid, label="mapping"];
20->7 [style = bold, label=""];
23->8 [style = solid, label="mapping"];
19->3 [style = bold, label=""];
15->8 [style = bold, label=""];
14->5 [style = bold, label=""];
}
