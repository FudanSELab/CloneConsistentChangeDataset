digraph {
21 [style = filled, label = "SchemaInfo t = new SchemaInfo()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertOptional(t._enum()).isType().asJson().is(\"('foo','bar'(\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "t.addEnum(ASet.of(\"foo\",\"bar\"))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertObject(t._enum()).isType().asJson().is(\"('foo','bar'(\")@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "t._enum(ASet.of(\"foo\",\"bar\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertOptional(t._enum()).isNull()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertObject(t.getEnum()).isType().asJson().is(\"('foo','bar'(\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "t._enum((Collection<Object>)null)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertObject(t._enum()).isType().asJson().is(\"('foo','bar'(\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertObject(t.getEnum()).isType().asJson().is(\"('foo','bar','baz'(\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Items t = new Items()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "t.addEnum(null)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertObject(t._enum()).isType().asJson().is(\"('foo','bar','baz'(\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "t._enum(\"foo\",\"baz\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertObject(t._enum()).isType().asJson().is(\"('foo','bar','baz'(\")@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertObject(t.getEnum()).isType().asJson().is(\"('foo','bar','baz'(\")@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertObject(t._enum()).isType().asJson().is(\"((\")@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertObject(t._enum()).isNull()@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "t.addEnum(ASet.of(\"baz\"))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertOptional(t._enum()).isType().asJson().is(\"('foo','baz'(\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "a16_enum['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "t._enum(ASet.of())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "a19_enum['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "a16_enum['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertObject(t._enum()).isType().asJson().is(\"('foo','baz'(\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertOptional(t._enum()).isType().asJson().is(\"((\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1->5 [style = bold, label=""];
16->3 [style = bold, label=""];
9->0 [style = bold, label=""];
15->14 [style = bold, label=""];
3->21 [style = dashed, label="0"];
12->17 [style = bold, label=""];
22->21 [style = bold, label=""];
14->20 [style = dashed, label="0"];
11->23 [style = dashed, label="0"];
4->18 [style = bold, label=""];
6->17 [style = dashed, label="0"];
1->18 [style = dashed, label="0"];
2->9 [style = bold, label=""];
3->12 [style = bold, label=""];
13->19 [style = dashed, label="0"];
12->6 [style = bold, label=""];
7->3 [style = bold, label=""];
6->15 [style = bold, label=""];
19->8 [style = bold, label=""];
20->4 [style = bold, label=""];
21->12 [style = bold, label=""];
5->19 [style = bold, label=""];
6->4 [style = bold, label=""];
0->10 [style = bold, label=""];
0->25 [style = dashed, label="0"];
8->2 [style = bold, label=""];
10->23 [style = bold, label=""];
15->20 [style = bold, label=""];
18->5 [style = bold, label=""];
5->13 [style = bold, label=""];
9->25 [style = bold, label=""];
17->15 [style = bold, label=""];
25->10 [style = bold, label=""];
4->1 [style = bold, label=""];
2->24 [style = dashed, label="0"];
13->8 [style = bold, label=""];
24->9 [style = bold, label=""];
14->4 [style = bold, label=""];
10->11 [style = bold, label=""];
8->24 [style = bold, label=""];
}
