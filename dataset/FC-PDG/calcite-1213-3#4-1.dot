digraph {
10 [style = filled, label = "final List<Expression> literals = new ArrayList<Expression>()@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final List<Expression> expressions = new ArrayList<>()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "final List<RelDataTypeField> fields = rowType.getFieldList()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "implement['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "EnumerableRelImplementor implementor@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final Type rowClass = physType.getJavaRowType()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Implementor implementor@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final BlockBuilder builder = new BlockBuilder()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final JavaTypeFactory typeFactory = (JavaTypeFactory)getCluster().getTypeFactory()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "return implementor.result(physType,builder.toBlock())@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "literals.add(RexToLixTranslator.translateLiteral(pair.right,pair.left.getType(),typeFactory,RexImpTable.NullAs.NULL))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "implementSpark['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final PhysType physType = PhysTypeImpl.of(implementor.getTypeFactory(),getRowType(),JavaRowFormat.CUSTOM)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Prefer pref@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "implementSpark['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "final List<Expression> literals = new ArrayList<>()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "builder.add(Expressions.return_(null,Expressions.call(SparkMethod.ARRAY_TO_RDD.method,Expressions.call(SparkMethod.GET_SPARK_CONTEXT.method,implementor.getRootExpression()),Expressions.newArrayInit(Primitive.box(rowClass),expressions))))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "expressions.add(physType.record(literals))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final PhysType physType = PhysTypeImpl.of(implementor.getTypeFactory(),getRowType(),pref.preferCustom())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final List<Expression> expressions = new ArrayList<Expression>()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "builder.add(Expressions.return_(null,Expressions.call(BuiltInMethod.AS_ENUMERABLE.method,Expressions.newArrayInit(Primitive.box(rowClass),expressions))))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->13 [style = dashed, label="0"];
9->20 [style = dashed, label="0"];
17->8 [style = bold, label=""];
16->19 [style = dotted, label="true"];
4->3 [style = bold, label=""];
18->3 [style = bold, label=""];
4->18 [style = dashed, label="0"];
16->0 [style = bold, label=""];
11->14 [style = bold, label=""];
0->6 [style = bold, label=""];
6->18 [style = bold, label=""];
3->12 [style = solid, label="rowClass"];
16->20 [style = dotted, label="true"];
11->12 [style = bold, label=""];
7->0 [style = bold, label=""];
7->9 [style = dotted, label="true"];
10->11 [style = solid, label="literals"];
18->8 [style = solid, label="physType"];
13->1 [style = bold, label=""];
5->17 [style = solid, label="expressions"];
15->9 [style = dotted, label="true"];
13->12 [style = solid, label="expressions"];
5->12 [style = solid, label="expressions"];
6->4 [style = bold, label=""];
5->1 [style = bold, label=""];
3->5 [style = bold, label=""];
11->10 [style = bold, label=""];
12->8 [style = bold, label=""];
15->0 [style = bold, label=""];
3->13 [style = bold, label=""];
11->17 [style = bold, label=""];
10->2 [style = bold, label=""];
1->14 [style = bold, label=""];
14->2 [style = bold, label=""];
0->2 [style = solid, label="typeFactory"];
4->8 [style = solid, label="physType"];
1->10 [style = bold, label=""];
3->17 [style = solid, label="rowClass"];
2->11 [style = bold, label=""];
14->11 [style = solid, label="literals"];
10->14 [style = dashed, label="0"];
}
