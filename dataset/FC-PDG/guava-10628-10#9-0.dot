digraph {
15 [style = filled, label = "assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node))@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "directedGraph.addEdge(N1,N1,E11)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "directedGraph.addEdge(N1,N2,E12_A)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(transpose.edgeConnectingOrNull(N1,N2)).isEqualTo(E21)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "MutableNetwork<Integer,String> undirectedGraph = NetworkBuilder.undirected().allowsParallelEdges(true).allowsSelfLoops(true).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "AbstractNetworkTest.validateNetwork(transpose)@@@32@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "undirectedGraph.addEdge(N1,N2,E12_A)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node))@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertThat(transpose(transpose)).isSameAs(directedGraph)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "buildUndirectedNetwork['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "expectedTranspose.addEdge(N3,N1,E13)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "expectedTranspose.addEdge(N4,N3,E34)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "undirectedGraph.addEdge(N1,N1,E11)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Network<Integer,String> transpose = transpose(directedGraph)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "transpose_directedNetwork['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "assertThat(transpose.edgeConnecting(N1,N2).get()).isEqualTo(E21)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "expectedTranspose.addEdge(N1,N3,E31)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "directedGraph.addEdge(N3,N4,E34)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "expectedTranspose.addEdge(N1,N1,E11)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "return undirectedGraph@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "expectedTranspose.addEdge(N2,N1,E12)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(transpose.edgeConnecting(N1,N2).isPresent()).isFalse()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(transpose(transpose)).isSameInstanceAs(directedGraph)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "undirectedGraph.addEdge(N2,N1,E21)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "AbstractNetworkTest.validateNetwork(transpose)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "directedGraph.addEdge(N1,N2,E12)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "expectedTranspose.addEdge(N2,N1,E12_A)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(transpose.edgeConnectingOrNull(N1,N2)).isNull()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(transpose.edgesConnecting(N1,N2)).containsExactly(E21)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertThat(directedGraph.inDegree(node)).isSameInstanceAs(transpose.outDegree(node))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "directedGraph.addEdge(N3,N1,E31)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "undirectedGraph.addEdge(N1,N2,E12)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "transpose_directedNetwork['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertThat(directedGraph.outDegree(node)).isSameInstanceAs(transpose.inDegree(node))@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertThat(transpose.edgesConnecting(N1,N2)).isEmpty()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "MutableNetwork<Integer,String> expectedTranspose = NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(transpose).isEqualTo(expectedTranspose)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "directedGraph.addEdge(N1,N3,E13)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "directedGraph.addEdge(N2,N1,E21)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "MutableNetwork<Integer,String> directedGraph = NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "undirectedGraph.addEdge(N1,N1,E11_A)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23->38 [style = dashed, label="0"];
0->30 [style = bold, label=""];
0->9 [style = bold, label=""];
2->20 [style = bold, label=""];
6->26 [style = bold, label=""];
36->34 [style = bold, label=""];
14->34 [style = dashed, label="0"];
11->14 [style = bold, label=""];
17->10 [style = solid, label="transpose"];
31->32 [style = bold, label=""];
1->15 [style = bold, label=""];
1->31 [style = dashed, label="0"];
4->13 [style = bold, label=""];
12->17 [style = bold, label=""];
35->39 [style = bold, label=""];
25->40 [style = dashed, label="0"];
15->32 [style = dashed, label="0"];
15->6 [style = bold, label=""];
3->16 [style = bold, label=""];
7->8 [style = bold, label=""];
11->36 [style = dashed, label="0"];
8->0 [style = solid, label="expectedTranspose"];
32->6 [style = bold, label=""];
18->35 [style = dashed, label="0"];
19->25 [style = bold, label=""];
26->22 [style = bold, label=""];
20->21 [style = bold, label=""];
9->28 [style = bold, label=""];
5->19 [style = bold, label=""];
19->17 [style = solid, label="directedGraph"];
28->2 [style = bold, label=""];
13->12 [style = bold, label=""];
17->0 [style = bold, label=""];
30->28 [style = bold, label=""];
21->31 [style = bold, label=""];
14->23 [style = bold, label=""];
22->27 [style = bold, label=""];
29->19 [style = bold, label=""];
40->36 [style = bold, label=""];
25->11 [style = bold, label=""];
27->10 [style = bold, label=""];
21->1 [style = bold, label=""];
19->30 [style = solid, label="directedGraph"];
37->39 [style = solid, label="undirectedGraph"];
17->28 [style = solid, label="transpose"];
34->38 [style = bold, label=""];
9->30 [style = dashed, label="0"];
16->4 [style = bold, label=""];
18->7 [style = bold, label=""];
38->35 [style = bold, label=""];
33->37 [style = bold, label=""];
7->39 [style = dashed, label="0"];
19->9 [style = solid, label="directedGraph"];
24->3 [style = bold, label=""];
23->18 [style = bold, label=""];
32->31 [style = bold, label=""];
37->40 [style = bold, label=""];
19->37 [style = dashed, label="0"];
15->1 [style = bold, label=""];
8->24 [style = bold, label=""];
}
