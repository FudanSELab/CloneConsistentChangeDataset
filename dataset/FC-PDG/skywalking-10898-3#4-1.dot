digraph {
11 [style = filled, label = "Assert.assertEquals(\"127.0.0.1:8080\",serviceMeta.getName())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final ServiceRelation serviceRelation = (ServiceRelation)receivedSources.get(0)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(\"127.0.0.1:8080\",serviceRelation.getDestServiceName())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation)receivedSources.get(1)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(NodeType.Database,serviceMeta.getNodeType())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testExitSpanWithAlias['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "listener.build()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "SpanObject spanObject = SpanObject.newBuilder().setOperationName(\"/springMVC\").setStartTime(startTime).setEndTime(startTime + 1000L).setIsError(true).setSpanType(SpanType.Exit).setSpanLayer(SpanLayer.Database).setPeer(\"127.0.0.1:8080\").build()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(\"127.0.0.1:8080\",databaseAccess.getName())@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final ServiceMeta serviceMeta = (ServiceMeta)receivedSources.get(2)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final List<ISource> receivedSources = mockReceiver.getReceivedSources()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "Assert.assertEquals(2,receivedSources.size())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "listener.parseExit(spanObject,segment)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "SpanObject spanObject = SpanObject.newBuilder().setOperationName(\"/springMVC\").setStartTime(startTime).setEndTime(startTime + 1000L).setIsError(true).setSpanType(SpanType.Exit).setSpanLayer(SpanLayer.MQ).setPeer(\"127.0.0.1:8080\").build()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertEquals(\"target-service\",serviceRelation.getDestServiceName())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testExitSpanWithoutAlias['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(\"mock-service\",serviceRelation.getSourceServiceName())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(mockReceiver,CONFIG,CACHE,NAMING_CONTROL)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final List<Source> receivedSources = mockReceiver.getReceivedSources()@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final DatabaseAccess databaseAccess = (DatabaseAccess)receivedSources.get(3)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final SegmentObject segment = SegmentObject.newBuilder().setService(\"mock-service\").setServiceInstance(\"mock-instance\").addSpans(spanObject).build()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(4,receivedSources.size())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(\"127.0.0.1:8080\",serviceInstanceRelation.getDestServiceInstanceName())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(mockReceiver,CONFIG,CACHE2,NAMING_CONTROL)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(\"mock-instance\",serviceInstanceRelation.getSourceServiceInstanceName())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final long startTime = System.currentTimeMillis()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testExitSpanWithoutAlias['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "mockReceiver.clear()@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final MockReceiver mockReceiver = new MockReceiver()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(\"target-instance\",serviceInstanceRelation.getDestServiceInstanceName())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10->18 [style = bold, label=""];
24->12 [style = bold, label=""];
15->10 [style = bold, label=""];
19->13 [style = solid, label="spanObject"];
9->24 [style = dashed, label="0"];
20->9 [style = bold, label=""];
20->24 [style = solid, label="mockReceiver"];
20->9 [style = solid, label="mockReceiver"];
29->0 [style = bold, label=""];
8->14 [style = bold, label=""];
23->13 [style = solid, label="spanObject"];
5->25 [style = dashed, label="0"];
4->22 [style = dashed, label="0"];
8->28 [style = dashed, label="0"];
19->6 [style = bold, label=""];
3->22 [style = bold, label=""];
3->4 [style = bold, label=""];
11->2 [style = bold, label=""];
4->28 [style = bold, label=""];
14->1 [style = bold, label=""];
28->14 [style = bold, label=""];
1->17 [style = bold, label=""];
22->8 [style = bold, label=""];
21->20 [style = bold, label=""];
19->23 [style = dashed, label="0"];
13->3 [style = bold, label=""];
10->29 [style = bold, label=""];
0->25 [style = bold, label=""];
6->13 [style = bold, label=""];
23->6 [style = bold, label=""];
25->26 [style = bold, label=""];
17->15 [style = bold, label=""];
6->13 [style = solid, label="segment"];
4->8 [style = bold, label=""];
5->11 [style = bold, label=""];
12->23 [style = bold, label=""];
9->12 [style = bold, label=""];
2->7 [style = bold, label=""];
12->19 [style = bold, label=""];
20->24 [style = bold, label=""];
16->20 [style = bold, label=""];
1->10 [style = bold, label=""];
27->20 [style = bold, label=""];
18->0 [style = bold, label=""];
0->5 [style = bold, label=""];
18->29 [style = dashed, label="0"];
}
