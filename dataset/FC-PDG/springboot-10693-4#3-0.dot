digraph {
1 [style = filled, label = "assertMatcher(matcher,\"/actuator\",null).doesNotMatch(\"/actuator/baz\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertMatcher(matcher,\"/actuator\",\"/\").matches(\"/actuator/foo\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertMatcher(matcher,\"/actuator\",\"/\").matches(\"/actuator\")@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "toAnyEndpointWhenDispatcherServletPathProviderNotAvailableUsesEmptyPath['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertMatcher(matcher,\"/actuator\",null).matches(\"/actuator\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertMatcher(matcher,\"/actuator\",\"/\").matches(\"/actuator/bar\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertMatcher(matcher,\"/actuator\",null).matches(\"/actuator/bar\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "toAnyEndpointShouldMatchEndpointPath['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertMatcher(matcher,\"/actuator\").doesNotMatch(\"/actuator/baz\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertMatcher(matcher,\"/actuator\",\"/\").matches(\"/actuator/foo/zoo/\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertMatcher(matcher,\"/actuator\").matches(\"/actuator/bar\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertMatcher(matcher,\"/actuator\").matches(\"/actuator/foo\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "toAnyEndpointWhenDispatcherServletPathProviderNotAvailableUsesEmptyPath['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertMatcher(matcher,\"/actuator\").matches(\"/actuator\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertMatcher(matcher,\"/actuator\",\"/\").matches(\"/actuator/bar/baz\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "RequestMatcher matcher = EndpointRequest.toAnyEndpoint()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertMatcher(matcher,\"/actuator\",null).matches(\"/actuator/foo\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0->3 [style = bold, label=""];
5->9 [style = bold, label=""];
15->14 [style = bold, label=""];
12->15 [style = bold, label=""];
8->6 [style = bold, label=""];
0->12 [style = dashed, label="0"];
4->6 [style = dashed, label="0"];
9->8 [style = bold, label=""];
3->4 [style = bold, label=""];
10->5 [style = bold, label=""];
5->0 [style = bold, label=""];
5->12 [style = bold, label=""];
1->11 [style = dashed, label="0"];
11->13 [style = bold, label=""];
16->5 [style = bold, label=""];
3->15 [style = dashed, label="0"];
3->8 [style = dashed, label="0"];
4->14 [style = dashed, label="0"];
4->1 [style = bold, label=""];
0->9 [style = dashed, label="0"];
1->7 [style = dashed, label="0"];
6->7 [style = bold, label=""];
14->11 [style = bold, label=""];
2->5 [style = bold, label=""];
}
