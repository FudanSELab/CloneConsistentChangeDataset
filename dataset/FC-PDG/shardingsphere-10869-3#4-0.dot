digraph {
4 [style = filled, label = "assertNull(executor.getResponseType())@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "when(databaseCommunicationEngine.execute()).thenReturn(queryResponseHeader)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(actual.iterator().next(),is(instanceOf()))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(actual.iterator().next(),is(instanceOf()))@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertExecuteBindPacketWithQuerySQLAndReturnEmptyResult['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "verify(queryResponseHeader).getQueryHeaders()@@@11@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(actual.size(),is(2))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertThat(actualPackets.next(),is(instanceOf()))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertThat(actual.size(),is(1))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Collection<DatabasePacket<?>> actual = closeExecutor.execute()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "PostgreSQLComCloseExecutor closeExecutor = new PostgreSQLComCloseExecutor(packet,backendConnection)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "QueryResponseHeader queryResponseHeader = mock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "setMockFieldIntoExecutor(executor)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(actual.size(),is(1))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertExecuteBindPacketWithQuerySQLAndReturnEmptyResult['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(bindPacket,backendConnection)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Iterator<DatabasePacket<?>> actualPackets = actual.iterator()@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertThat(actualPackets.next(),is(instanceOf()))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertExecuteClosePortal['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Collection<DatabasePacket<?>> actual = executor.execute()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "verify(queryResponseHeader).getQueryHeaders()@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "when(packet.getType()).thenReturn(PostgreSQLComClosePacket.Type.PORTAL)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(executor.getResponseType(),is(ResponseType.QUERY))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10->14 [style = bold, label=""];
9->2 [style = bold, label=""];
19->20 [style = bold, label=""];
2->3 [style = bold, label=""];
1->7 [style = bold, label=""];
13->16 [style = bold, label=""];
12->7 [style = bold, label=""];
17->19 [style = bold, label=""];
3->0 [style = bold, label=""];
0->10 [style = dashed, label="0"];
20->21 [style = bold, label=""];
3->10 [style = bold, label=""];
9->2 [style = solid, label="executor"];
22->18 [style = bold, label=""];
15->11 [style = bold, label=""];
21->22 [style = bold, label=""];
11->13 [style = bold, label=""];
7->6 [style = bold, label=""];
0->8 [style = bold, label=""];
8->18 [style = dashed, label="0"];
14->15 [style = bold, label=""];
7->6 [style = solid, label="queryResponseHeader"];
8->4 [style = bold, label=""];
6->9 [style = bold, label=""];
4->5 [style = bold, label=""];
}
