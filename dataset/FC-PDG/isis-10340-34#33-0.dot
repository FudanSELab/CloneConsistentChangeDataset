digraph {
6 [style = filled, label = "mockAuthenticationSession = context.mock()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "mockAuthenticationSessionProvider = context.mock()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "mockPersistenceSessionServiceInternal = context.mock()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "setUp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR,facetedMethod.getOwningType(),facetedMethod.getMethod(),)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "mockTranslationService = context.mock()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "context.checking(new Expectations(){})@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "context.checking(new Expectations(){})@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "facetedMethod = FacetedMethod.createForProperty(,\"firstName\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "facetHolder = new IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(,\"firstName\"))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ServicesInjector.builderForTesting().addServices(_Lists.of(mockAuthenticationSessionProvider,mockSpecificationLoader,mockPersistenceSessionServiceInternal,mockTranslationService)).build()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "setUpFacetedMethodAndParameter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "methodRemover = new ProgrammableMethodRemover()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "stubServicesInjector = ServicesInjector.builderForTesting().addServices(_Lists.of(mockAuthenticationSessionProvider,mockSpecificationLoader,mockPersistenceSessionServiceInternal,mockTranslationService)).build()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(,\"firstName\"))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR,facetedMethod.getOwningType(),facetedMethod.getMethod(),)@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "facetedMethod = FacetedMethod.createForProperty(,\"firstName\")@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "setUp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a3e8d3@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "mockSpecificationLoader = context.mock()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->5 [style = bold, label=""];
4->9 [style = bold, label=""];
14->3 [style = bold, label=""];
10->3 [style = bold, label=""];
1->2 [style = bold, label=""];
11->0 [style = bold, label=""];
16->18 [style = bold, label=""];
8->4 [style = bold, label=""];
18->15 [style = bold, label=""];
5->6 [style = bold, label=""];
7->10 [style = bold, label=""];
2->11 [style = bold, label=""];
12->7 [style = bold, label=""];
19->16 [style = bold, label=""];
17->19 [style = bold, label=""];
10->14 [style = dashed, label="0"];
0->8 [style = bold, label=""];
13->2 [style = bold, label=""];
7->14 [style = bold, label=""];
6->12 [style = bold, label=""];
}
