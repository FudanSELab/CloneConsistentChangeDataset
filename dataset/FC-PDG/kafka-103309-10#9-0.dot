digraph {
2 [style = filled, label = "builder.close()@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "int sequence = 2342@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "MemoryRecords records = builder.build()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "List<MutableRecordBatch> batches = Utils.toList(records.batches().iterator())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "long pid = RecordBatch.NO_PRODUCER_ID@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "short epoch = 15@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(batches.get(0).isTransactional())@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "builder.append(System.currentTimeMillis(),\"foo\".getBytes(),\"bar\".getBytes())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer,RecordBatch.CURRENT_MAGIC_VALUE,compressionType,TimestampType.CREATE_TIME,0L,0L,pid,epoch,sequence,true,false,RecordBatch.NO_PARTITION_LEADER_EPOCH,buffer.capacity())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testWriteTransactionalWithInvalidPID['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThrows(,null)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testWriteTransactionalRecordSet['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "long pid = 9809@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(1,batches.size())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ByteBuffer buffer = ByteBuffer.allocate(128)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "buffer.position(bufferOffset)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testWriteTransactionalWithInvalidPID['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16->11 [style = bold, label=""];
15->7 [style = solid, label="pid"];
0->6 [style = bold, label=""];
5->7 [style = solid, label="epoch"];
1->7 [style = solid, label="sequence"];
9->4 [style = bold, label=""];
4->7 [style = solid, label="buffer"];
7->8 [style = bold, label=""];
2->8 [style = dashed, label="0"];
1->7 [style = bold, label=""];
3->4 [style = bold, label=""];
0->15 [style = bold, label=""];
15->5 [style = bold, label=""];
4->0 [style = bold, label=""];
7->14 [style = bold, label=""];
6->7 [style = solid, label="pid"];
5->1 [style = bold, label=""];
6->5 [style = bold, label=""];
12->10 [style = bold, label=""];
2->14 [style = dashed, label="0"];
10->16 [style = bold, label=""];
6->15 [style = dashed, label="0"];
7->2 [style = bold, label=""];
14->12 [style = bold, label=""];
13->4 [style = bold, label=""];
}
