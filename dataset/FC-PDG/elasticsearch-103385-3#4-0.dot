digraph {
7 [style = filled, label = "SpanNearQueryBuilder queryBuilder@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(spanOrQuery.getClauses().length,equalTo(queryBuilder.clauses().size()))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "SpanOrQuery spanOrQuery = (SpanOrQuery)query@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(query,either(instanceOf()).or(instanceOf()).or(instanceOf()).or(instanceOf()))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertThat(spanNearQuery.getClauses().length,equalTo(queryBuilder.clauses().size()))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(query,equalTo(queryBuilder.clauses().get(0).toQuery(context.getQueryShardContext())))@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "query instanceof SpanTermQuery || query instanceof SpanBoostQuery@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(spanNearQuery.isInOrder(),equalTo(queryBuilder.inOrder()))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "SpanNearQueryBuilder queryBuilder@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "assertThat(spanQuery,equalTo(spanQueryBuilderIterator.next().toQuery(context.getQueryShardContext())))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "SearchContext context@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "SpanNearQuery spanNearQuery = (SpanNearQuery)query@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "SpanOrQueryBuilder queryBuilder@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(query,either(instanceOf()).or(instanceOf()).or(instanceOf()).or(instanceOf()).or(instanceOf()))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "doAssertLuceneQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "spanNearQuery.getClauses()@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertThat(queryBuilder.clauses().size(),equalTo(1))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "query instanceof SpanNearQuery@@@4@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "SpanQuery spanQuery@@@10@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Query query@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "doAssertLuceneQuery['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Query query@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(spanQuery,equalTo(spanQueryBuilderIterator.next().toQuery(context.getQueryShardContext())))@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "SpanQuery spanQuery@@@10@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "doAssertLuceneQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "Query query@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "SearchContext context@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(query,instanceOf())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(spanNearQuery.getSlop(),equalTo(queryBuilder.slop()))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->20 [style = dotted, label="true"];
14->16 [style = bold, label=""];
28->29 [style = bold, label=""];
5->10 [style = bold, label=""];
30->24 [style = bold, label=""];
1->4 [style = bold, label=""];
12->11 [style = dotted, label="false"];
25->28 [style = bold, label=""];
27->22 [style = dotted, label="true"];
17->18 [style = dotted, label="true"];
29->30 [style = bold, label=""];
3->21 [style = dashed, label="0"];
12->8 [style = dotted, label="true"];
11->10 [style = dotted, label="true"];
27->26 [style = dotted, label="true"];
12->11 [style = bold, label=""];
12->2 [style = dotted, label="true"];
12->1 [style = dotted, label="true"];
27->23 [style = dotted, label="true"];
6->3 [style = solid, label="query"];
11->5 [style = dotted, label="true"];
3->12 [style = bold, label=""];
20->13 [style = solid, label="query"];
20->10 [style = solid, label="query"];
9->6 [style = dotted, label="true"];
6->10 [style = solid, label="query"];
4->0 [style = bold, label=""];
21->12 [style = bold, label=""];
12->13 [style = bold, label=""];
12->14 [style = dotted, label="true"];
11->5 [style = bold, label=""];
20->21 [style = solid, label="query"];
12->13 [style = dotted, label="true"];
17->15 [style = dotted, label="true"];
22->28 [style = solid, label="query"];
20->11 [style = solid, label="query"];
12->16 [style = dotted, label="true"];
20->12 [style = solid, label="query"];
16->1 [style = bold, label=""];
12->19 [style = dotted, label="true"];
12->28 [style = dashed, label="0"];
6->11 [style = solid, label="query"];
15->26 [style = dashed, label="0"];
6->12 [style = solid, label="query"];
12->0 [style = dotted, label="true"];
9->3 [style = bold, label=""];
9->15 [style = dotted, label="true"];
12->4 [style = dotted, label="true"];
22->25 [style = solid, label="query"];
9->7 [style = dotted, label="true"];
13->14 [style = bold, label=""];
17->21 [style = bold, label=""];
27->25 [style = bold, label=""];
6->13 [style = solid, label="query"];
}
