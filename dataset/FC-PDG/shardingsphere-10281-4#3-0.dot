digraph {
11 [style = filled, label = "assertFalse(dataSourceRuleConfig.isQueryConsistent())@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertThat(dataSourceRuleConfig.getReadDataSourceNames().size(),is(2))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(dataSourceRuleConfig.getLoadBalancerName(),is(\"random\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertReadwriteSplittingRuleConfiguration['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertReadwriteSplittingRuleConfiguration['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(config.getDataSources().contains(dataSourceRuleConfig))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(config.getDataSources().contains(dataSourceRuleConfig))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertTrue(config.getDataSources().stream().findFirst().isPresent())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(config.getLoadBalanceAlgorithms().containsKey(\"random\"))@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = config.getDataSources().stream().findFirst().get()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(dataSourceRuleConfig.getWriteDataSourceName(),is(\"write_ds\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(config.getLoadBalanceAlgorithms().size(),is(1))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(dataSourceRuleConfig.getDataSourceNames().size(),is(2))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "DatabaseDiscoveryDataSourceRuleConfiguration dataSourceRuleConfig = config.getDataSources().stream().findFirst().get()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(config.getDataSources().size(),is(1))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertHARuleConfiguration['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(dataSourceRuleConfig.getName(),is(\"pr_ds\"))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->2 [style = bold, label=""];
3->10 [style = bold, label=""];
3->11 [style = bold, label=""];
5->13 [style = dashed, label="0"];
5->10 [style = solid, label="dataSourceRuleConfig"];
7->15 [style = dashed, label="0"];
9->4 [style = bold, label=""];
8->0 [style = bold, label=""];
2->7 [style = bold, label=""];
10->9 [style = bold, label=""];
1->8 [style = bold, label=""];
7->6 [style = bold, label=""];
0->13 [style = bold, label=""];
13->16 [style = solid, label="dataSourceRuleConfig"];
11->10 [style = bold, label=""];
6->3 [style = bold, label=""];
14->8 [style = bold, label=""];
15->16 [style = bold, label=""];
0->5 [style = bold, label=""];
13->2 [style = bold, label=""];
12->8 [style = bold, label=""];
2->15 [style = bold, label=""];
}
