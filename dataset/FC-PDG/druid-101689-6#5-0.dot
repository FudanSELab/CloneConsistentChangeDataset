digraph {
1 [style = filled, label = "testQuery(\"SELECT COALESCE(dim2, ?, ?), COUNT(*) FROM druid.foo GROUP BY 1\",ImmutableList.of(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(querySegmentSpec(Filtration.eternity())).setGranularity(Granularities.ALL).setVirtualColumns(expressionVirtualColumn(\"v0\",\"case_searched(notnull(\"dim2\"),\"dim2\",'parameter')\",ValueType.STRING)).setDimensions(dimensions(new DefaultDimensionSpec(\"v0\",\"d0\",ValueType.STRING))).setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\"))).setContext(QUERY_CONTEXT_DEFAULT).build()),NullHandling.replaceWithDefault()? ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a85413,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a85418,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a8541d): ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a85425,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a8542a,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a8542f,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a85434),ImmutableList.of(new SqlParameter(SqlType.VARCHAR,\"parameter\"),new SqlParameter(SqlType.VARCHAR,null)))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testQuery(\"SELECT COALESCE(dim2, ?, ?), COUNT(*) FROM druid.foo GROUP BY 1\",ImmutableList.of(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(querySegmentSpec(Filtration.eternity())).setGranularity(Granularities.ALL).setVirtualColumns(expressionVirtualColumn(\"v0\",\"case_searched(notnull(\"dim2\"),\"dim2\",'parameter')\",ValueType.STRING)).setDimensions(dimensions(new DefaultDimensionSpec(\"v0\",\"d0\",ValueType.STRING))).setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\"))).setContext(QUERY_CONTEXT_DEFAULT).build()),NullHandling.replaceWithDefault()? ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a8548a,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a8548f,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a85494): ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a8549c,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a854a1,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a854a6,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a854ab),ImmutableList.of(new SqlParameter(SqlType.VARCHAR,null),new SqlParameter(SqlType.VARCHAR,\"parameter\")))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "testNullParameter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "testQuery(\"SELECT COALESCE(dim2, ?, ?), COUNT(*) FROM druid.foo GROUP BY 1\",ImmutableList.of(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(querySegmentSpec(Filtration.eternity())).setGranularity(Granularities.ALL).setVirtualColumns(expressionVirtualColumn(\"v0\",\"case_searched(notnull(\"dim2\"),\"dim2\",'parameter')\",ValueType.STRING)).setDimensions(dimensions(new DefaultDimensionSpec(\"v0\",\"v0\",ValueType.STRING))).setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\"))).setContext(QUERY_CONTEXT_DEFAULT).build()),NullHandling.replaceWithDefault()? ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a85395,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a8539a,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a8539f): ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a853a7,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a853ac,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a853b1,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a853b6),ImmutableList.of(new SqlParameter(SqlType.VARCHAR,null),new SqlParameter(SqlType.VARCHAR,\"parameter\")))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "cannotVectorize()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testQuery(\"SELECT CAST((EXTRACT(MONTH FROM __time) - 1 ) / 3 + 1 AS INTEGER) AS quarter, COUNT(*)\" + \"FROM foo\" + \"GROUP BY CAST((EXTRACT(MONTH FROM __time) - 1 ) / 3 + 1 AS INTEGER)\",ImmutableList.of(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(querySegmentSpec(Filtration.eternity())).setGranularity(Granularities.ALL).setVirtualColumns(expressionVirtualColumn(\"v0\",\"(((timestamp_extract(\"__time\",'MONTH','UTC') - 1) / 3) + 1)\",ValueType.LONG)).setDimensions(dimensions(new DefaultDimensionSpec(\"v0\",\"d0\",ValueType.LONG))).setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\"))).setContext(QUERY_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a85508))@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testNullParameter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testSillyQuarters['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
4->3 [style = bold, label=""];
3->6 [style = bold, label=""];
1->0 [style = bold, label=""];
3->1 [style = bold, label=""];
0->5 [style = dashed, label="0"];
1->6 [style = dashed, label="0"];
7->3 [style = bold, label=""];
2->3 [style = bold, label=""];
}
