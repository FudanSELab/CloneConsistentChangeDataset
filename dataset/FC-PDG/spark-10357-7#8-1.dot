digraph {
3 [style = filled, label = "int ordinal@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "array.pointTo(baseObject,baseOffset + offset,size)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "getArray['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "map.pointTo(baseObject,baseOffset + offset,size)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "getArray['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final UnsafeArrayData array = new UnsafeArrayData()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final UnsafeMapData map = new UnsafeMapData()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "getMap['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "return null@@@4@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "int ordinal@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "return array@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "return map@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "isNullAt(ordinal)@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final int size = (int)(offsetAndSize & ((1L << 32) - 1))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final int size = (int)offsetAndSize@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5->10 [style = bold, label=""];
2->10 [style = solid, label="offsetAndSize"];
10->8 [style = solid, label="size"];
2->5 [style = bold, label=""];
1->8 [style = bold, label=""];
0->12 [style = solid, label="size"];
7->12 [style = dotted, label="false"];
1->15 [style = dashed, label="0"];
8->12 [style = dashed, label="0"];
7->9 [style = dotted, label="true"];
3->7 [style = solid, label="ordinal"];
0->15 [style = bold, label=""];
0->10 [style = dashed, label="0"];
16->2 [style = solid, label="ordinal"];
14->7 [style = bold, label=""];
15->13 [style = solid, label="map"];
14->16 [style = dotted, label="true"];
1->4 [style = solid, label="array"];
7->9 [style = bold, label=""];
12->13 [style = bold, label=""];
7->0 [style = dotted, label="false"];
5->8 [style = solid, label="offset"];
16->7 [style = solid, label="ordinal"];
0->8 [style = solid, label="size"];
5->0 [style = bold, label=""];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
7->8 [style = dotted, label="false"];
7->4 [style = dotted, label="false"];
7->2 [style = dotted, label="false"];
2->0 [style = solid, label="offsetAndSize"];
7->10 [style = dotted, label="false"];
3->2 [style = solid, label="ordinal"];
7->13 [style = dotted, label="false"];
15->12 [style = bold, label=""];
8->4 [style = bold, label=""];
7->1 [style = dotted, label="false"];
7->5 [style = dotted, label="false"];
6->3 [style = dotted, label="true"];
6->7 [style = bold, label=""];
11->3 [style = dotted, label="true"];
7->15 [style = dotted, label="false"];
10->1 [style = bold, label=""];
4->13 [style = dashed, label="0"];
11->7 [style = bold, label=""];
3->16 [style = dashed, label="0"];
5->12 [style = solid, label="offset"];
2->5 [style = solid, label="offsetAndSize"];
}
