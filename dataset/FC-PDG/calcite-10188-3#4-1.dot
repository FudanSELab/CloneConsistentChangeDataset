digraph {
9 [style = filled, label = "expectUnordered['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final List<String> expectedLines = Ordering.natural().immutableSortedCopy(Arrays.asList(expected))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "return new Function<ResultSet,Void>(){public Void apply(ResultSet resultSet){try {final List<String> lines = new ArrayList<>()CsvTest.collect(lines,resultSet)Assert.assertEquals(Arrays.asList(expected),lines)}catch (SQLException e) return null}}@@@3@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "return null@@@3@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "String expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "expect['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "return new Function<ResultSet,Void>(){public Void apply(ResultSet resultSet){try {final List<String> lines = new ArrayList<>()CsvTest.collect(lines,resultSet)Collections.sort(lines)Assert.assertEquals(expectedLines,lines)}catch (SQLException e) return null}}@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final String expected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "expect['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final String expected@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
2->0 [style = solid, label="expected"];
4->5 [style = dotted, label="true"];
4->3 [style = bold, label=""];
2->5 [style = dashed, label="0"];
1->0 [style = bold, label=""];
9->7 [style = dotted, label="true"];
1->2 [style = dotted, label="true"];
7->6 [style = solid, label="expected"];
2->7 [style = dashed, label="0"];
6->8 [style = solid, label="expectedLines"];
6->8 [style = bold, label=""];
9->6 [style = bold, label=""];
}
