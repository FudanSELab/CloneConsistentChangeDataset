digraph {
22 [style = filled, label = "assertThat(input.getTotalBytesRead()).isEqualTo(0)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "input.readRawByte()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(16,input.getTotalBytesRead())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "input.resetSizeCounter()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "input.setSizeLimit(16)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(input.getTotalBytesRead()).isEqualTo(16)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "input.readRawBytes(16)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testSizeLimit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testResetSizeCounter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "CodedInputStream input = CodedInputStream.newInstance(new SmallBlockInputStream(TestUtil.getAllSet().toByteArray(),16))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "fail(\"Should have thrown an exception!\")@@@7@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertWithMessage(\"Should have thrown an exception!\").fail()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "input.readRawBytes(17)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(0,input.getTotalBytesRead())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "fail(\"Should have thrown an exception!\")@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertThat(input.getTotalBytesRead()).isEqualTo(16)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "input.resetSizeCounter()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(0,input.getTotalBytesRead())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertThat(input.getTotalBytesRead()).isEqualTo(0)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "CodedInputStream input = CodedInputStream.newInstance(new SmallBlockInputStream(new byte((((,8))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "input.resetSizeCounter()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "input.readRawByte()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "checkSizeLimitExceeded(expected)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "TestAllTypes.parseFrom(input)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testResetSizeCounter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "input.readRawBytes(16)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertWithMessage(\"Should have thrown an exception!\").fail()@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertEquals(16,input.getTotalBytesRead())@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "InvalidProtocolBufferException expected@@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
15->23 [style = dashed, label="0"];
9->11 [style = bold, label=""];
26->27 [style = solid, label="input"];
4->6 [style = bold, label=""];
6->20 [style = dashed, label="0"];
6->18 [style = bold, label=""];
0->19 [style = dashed, label="0"];
11->21 [style = bold, label=""];
26->1 [style = bold, label=""];
12->15 [style = bold, label=""];
16->7 [style = bold, label=""];
18->19 [style = bold, label=""];
23->4 [style = bold, label=""];
1->27 [style = bold, label=""];
4->27 [style = dashed, label="0"];
28->26 [style = bold, label=""];
9->22 [style = dashed, label="0"];
5->25 [style = dashed, label="0"];
2->10 [style = bold, label=""];
17->21 [style = dashed, label="0"];
13->26 [style = dashed, label="0"];
27->6 [style = bold, label=""];
13->1 [style = bold, label=""];
8->22 [style = bold, label=""];
21->2 [style = bold, label=""];
20->18 [style = bold, label=""];
16->7 [style = dotted, label="true"];
10->5 [style = bold, label=""];
17->2 [style = bold, label=""];
10->25 [style = bold, label=""];
3->8 [style = bold, label=""];
4->20 [style = bold, label=""];
15->4 [style = bold, label=""];
1->12 [style = bold, label=""];
8->9 [style = bold, label=""];
7->18 [style = bold, label=""];
11->17 [style = bold, label=""];
12->23 [style = bold, label=""];
14->13 [style = bold, label=""];
19->3 [style = bold, label=""];
18->0 [style = bold, label=""];
22->11 [style = bold, label=""];
24->13 [style = bold, label=""];
}
