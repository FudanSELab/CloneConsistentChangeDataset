digraph {
4 [style = filled, label = "queryContext = withLeftDirectAccessEnabled(queryContext)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Map<String,Object> queryContext@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testCorrelatedSubqueryWithCorrelatedQueryFilter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "cannotVectorize()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testCorrelatedSubqueryWithCorrelatedQueryFilter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testCorrelatedSubqueryWithCorrelatedQueryFilter_Scan['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testQuery(\"select country, ANY_VALUE(\" + \" select max(\"users\") from (\" + \" select floor(__time to day), count(user) \"users\" from visits f where f.country = visits.country and f.city = 'A' group by 1\" + \" )\" + \" ) as \"dailyVisits\"\" + \"from visits \" + \" where city = 'B'\" + \" group by 1\",queryContext,ImmutableList.of(GroupByQuery.builder().setDataSource(join(new TableDataSource(\"visits\"),new QueryDataSource(GroupByQuery.builder().setDataSource(GroupByQuery.builder().setDataSource(\"visits\").setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY)).setVirtualColumns(new ExpressionVirtualColumn(\"v0\",\"timestamp_floor(\"__time\",'P1D',null,'UTC')\",ValueType.LONG,TestExprMacroTable.INSTANCE)).setDimensions(new DefaultDimensionSpec(\"v0\",\"d0\",ValueType.LONG),new DefaultDimensionSpec(\"country\",\"d1\")).setAggregatorSpecs(new FilteredAggregatorFactory(new CountAggregatorFactory(\"a0\"),not(selector(\"user\",null,null)))).setDimFilter(and(selector(\"city\",\"A\",null),not(selector(\"country\",null,null)))).setContext(queryContext).setGranularity(new AllGranularity()).build()).setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY)).setDimensions(new DefaultDimensionSpec(\"d1\",\"_d0\")).setAggregatorSpecs(new LongMaxAggregatorFactory(\"_a0\",\"a0\")).setGranularity(new AllGranularity()).setContext(queryContext).build()),\"j0.\",equalsCondition(DruidExpression.fromColumn(\"country\"),DruidExpression.fromColumn(\"j0._d0\")),JoinType.LEFT,selector(\"city\",\"B\",null))).setQuerySegmentSpec(querySegmentSpec(Intervals.ETERNITY)).setDimensions(new DefaultDimensionSpec(\"country\",\"d0\")).setAggregatorSpecs(new LongAnyAggregatorFactory(\"a0\",\"j0._a0\")).setGranularity(new AllGranularity()).setContext(queryContext).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@92a9ae))@@@4@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Map<String,Object> queryContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
6->1 [style = bold, label=""];
5->1 [style = bold, label=""];
1->4 [style = bold, label=""];
2->4 [style = solid, label="queryContext"];
1->0 [style = bold, label=""];
2->0 [style = solid, label="queryContext"];
3->1 [style = bold, label=""];
4->0 [style = solid, label="queryContext"];
2->7 [style = dashed, label="0"];
3->2 [style = dotted, label="true"];
4->0 [style = bold, label=""];
5->2 [style = dotted, label="true"];
7->0 [style = solid, label="queryContext"];
6->7 [style = dotted, label="true"];
}
