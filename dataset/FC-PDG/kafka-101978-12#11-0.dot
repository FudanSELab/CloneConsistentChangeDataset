digraph {
59 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@100@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(task00.state(),is(Task.State.CREATED))@@@75@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertThat(task01.state(),is(Task.State.CLOSED))@@@94@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(task02.state(),is(Task.State.CREATED))@@@77@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId02))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "shouldCloseActiveTasksAndIgnoreExceptionsOnUncleanShutdown['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "taskManager.handleAssignment(assignment,emptyMap())@@@74@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "replay(activeTaskCreator,standbyTaskCreator,changeLogReader)@@@73@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "final Map<TaskId,Set<TopicPartition>> assignment = mkMap(mkEntry(taskId00,taskId00Partitions),mkEntry(taskId01,taskId01Partitions),mkEntry(taskId02,taskId02Partitions),mkEntry(taskId03,taskId03Partitions))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever 1\"))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertThat(task00.state(),is(Task.State.CLOSED))@@@93@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "resetToStrict(changeLogReader)@@@59@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId03))@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "assertThat(task03.state(),is(Task.State.CREATED))@@@78@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "verify(activeTaskCreator,changeLogReader)@@@101@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(task02.state(),is(Task.State.RUNNING))@@@82@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "expectLastCall()@@@71@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId00))@@@62@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(assignment))).andReturn(asList(task00,task01,task02)).anyTimes()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.equalTo(mkMap(mkEntry(taskId00,task00),mkEntry(taskId01,task01),mkEntry(taskId02,task02),mkEntry(taskId03,task03))))@@@84@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.anEmptyMap())@@@99@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever all\"))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "final AtomicBoolean prepareClosedDirtyTask02 = new AtomicBoolean(false)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "final AtomicBoolean closedDirtyTask01 = new AtomicBoolean(false)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(task00.state(),is(Task.State.RESTORING))@@@80@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "expectLastCall()@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final TopicPartition changelog = new TopicPartition(\"changelog\",0)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "assertThat(prepareClosedDirtyTask03.get(),is(true))@@@91@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertThat(closedDirtyTask03.get(),is(true))@@@92@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(task02.state(),is(Task.State.CLOSED))@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final Task task02 = new StateMachineTask(taskId02,taskId02Partitions,true){@Override public void prepareCloseClean(){throw new RuntimeException(\"oops\")}@Override public void prepareCloseDirty(){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@c951eeprepareClosedDirtyTask02.set(true)}@Override public void closeDirty(){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@c951f8closedDirtyTask02.set(true)}}@@@31@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId02))@@@66@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes()@@@72@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.anEmptyMap())@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@53@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
42 [style = filled, label = "assertThat(closedDirtyTask01.get(),is(true))@@@88@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever 0\"))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever 2\"))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final Task task00 = new StateMachineTask(taskId00,taskId00Partitions,true){@Override public Collection<TopicPartition> changelogPartitions(){return singletonList(changelog)}}@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "shouldCloseActiveTasksAndPropagateExceptionsOnCleanShutdown['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "assertThat(task03.state(),is(Task.State.CLOSED))@@@96@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "final AtomicBoolean closedDirtyTask02 = new AtomicBoolean(false)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId01))@@@64@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "assertThat(task02.state(),is(Task.State.CLOSED))@@@95@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "resetToStrict(changeLogReader)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "assertThat(exception.getCause().getMessage(),is(\"oops\"))@@@98@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "final AtomicBoolean prepareClosedDirtyTask01 = new AtomicBoolean(false)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final Map<TaskId,Set<TopicPartition>> assignment = mkMap(mkEntry(taskId00,taskId00Partitions),mkEntry(taskId01,taskId01Partitions),mkEntry(taskId02,taskId02Partitions))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "expectLastCall()@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "assertThat(prepareClosedDirtyTask01.get(),is(true))@@@87@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "assertThat(closedDirtyTask02.get(),is(true))@@@90@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "final Task task03 = new StateMachineTask(taskId03,taskId03Partitions,true){@Override public Map<TopicPartition,OffsetAndMetadata> committableOffsetsAndMetadata(){throw new RuntimeException(\"oops\")}@Override public void prepareCloseDirty(){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@c95212prepareClosedDirtyTask03.set(true)}@Override public void closeDirty(){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@c9521cclosedDirtyTask03.set(true)}}@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@85@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "final Task task02 = new StateMachineTask(taskId02,taskId02Partitions,true){@Override public void suspend(){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@c95025throw new RuntimeException(\"oops\")}}@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "shouldCloseActiveTasksAndIgnoreExceptionsOnUncleanShutdown['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "expect(changeLogReader.completedChangelogs()).andReturn(emptySet())@@@60@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "final AtomicBoolean prepareClosedDirtyTask03 = new AtomicBoolean(false)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "expectLastCall()@@@69@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "final AtomicBoolean closedDirtyTask03 = new AtomicBoolean(false)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "assertThat(exception.getMessage(),is(\"Unexpected exception while closing task\"))@@@97@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(task01.state(),is(Task.State.RUNNING))@@@81@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "final RuntimeException exception = assertThrows(,null)@@@86@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "assertThat(task03.state(),is(Task.State.RUNNING))@@@83@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.equalTo(mkMap(mkEntry(taskId00,task00),mkEntry(taskId01,task01),mkEntry(taskId02,task02))))@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "assertThat(prepareClosedDirtyTask02.get(),is(true))@@@89@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "verify(activeTaskCreator,changeLogReader)@@@54@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
56 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(assignment))).andReturn(asList(task00,task01,task02,task03)).anyTimes()@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(task01.state(),is(Task.State.CREATED))@@@76@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(task00.state(),is(Task.State.CLOSED))@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final Task task01 = new StateMachineTask(taskId01,taskId01Partitions,true){@Override public void prepareCloseClean(){throw new TaskMigratedException(\"migrated\",new RuntimeException(\"cause\"))}@Override public void prepareCloseDirty(){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@c951caprepareClosedDirtyTask01.set(true)}@Override public void closeDirty(){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@c951d4closedDirtyTask01.set(true)}}@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "taskManager.tryToCompleteRestoration()@@@79@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(task01.state(),is(Task.State.CLOSED))@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "activeTaskCreator.closeThreadProducerIfNeeded()@@@70@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "expectLastCall()@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->62 [style = solid, label="task00"];
19->3 [style = bold, label=""];
16->74 [style = bold, label=""];
5->14 [style = bold, label=""];
60->61 [style = bold, label=""];
10->30 [style = bold, label=""];
4->70 [style = dashed, label="0"];
8->39 [style = bold, label=""];
33->17 [style = bold, label=""];
4->35 [style = solid, label="assignment"];
8->11 [style = solid, label="task01"];
52->55 [style = bold, label=""];
51->59 [style = bold, label=""];
53->62 [style = solid, label="task03"];
2->1 [style = bold, label=""];
28->18 [style = bold, label=""];
17->23 [style = bold, label=""];
36->24 [style = bold, label=""];
29->38 [style = bold, label=""];
41->72 [style = bold, label=""];
35->26 [style = bold, label=""];
66->58 [style = bold, label=""];
19->69 [style = bold, label=""];
11->52 [style = dashed, label="0"];
39->14 [style = bold, label=""];
64->34 [style = bold, label=""];
9->1 [style = solid, label="task02"];
56->33 [style = bold, label=""];
71->40 [style = bold, label=""];
20->15 [style = bold, label=""];
22->41 [style = bold, label=""];
16->8 [style = bold, label=""];
13->31 [style = bold, label=""];
8->62 [style = solid, label="task01"];
0->11 [style = bold, label=""];
27->20 [style = bold, label=""];
42->68 [style = bold, label=""];
30->6 [style = bold, label=""];
10->41 [style = dashed, label="0"];
12->19 [style = bold, label=""];
11->13 [style = bold, label=""];
74->63 [style = bold, label=""];
47->54 [style = bold, label=""];
72->64 [style = bold, label=""];
8->1 [style = solid, label="task01"];
48->66 [style = bold, label=""];
9->32 [style = bold, label=""];
9->53 [style = bold, label=""];
22->10 [style = bold, label=""];
7->35 [style = bold, label=""];
33->49 [style = bold, label=""];
6->73 [style = dashed, label="0"];
53->32 [style = bold, label=""];
34->73 [style = bold, label=""];
67->62 [style = bold, label=""];
1->0 [style = bold, label=""];
61->51 [style = bold, label=""];
14->56 [style = dashed, label="0"];
15->29 [style = bold, label=""];
58->60 [style = bold, label=""];
5->56 [style = bold, label=""];
23->25 [style = bold, label=""];
4->16 [style = bold, label=""];
3->2 [style = bold, label=""];
46->48 [style = bold, label=""];
34->7 [style = bold, label=""];
4->28 [style = solid, label="assignment"];
24->4 [style = bold, label=""];
38->37 [style = bold, label=""];
16->1 [style = solid, label="task00"];
40->46 [style = bold, label=""];
65->8 [style = bold, label=""];
50->71 [style = bold, label=""];
54->65 [style = bold, label=""];
49->23 [style = bold, label=""];
63->45 [style = bold, label=""];
26->28 [style = bold, label=""];
16->11 [style = solid, label="task00"];
23->44 [style = bold, label=""];
25->44 [style = dashed, label="0"];
73->35 [style = bold, label=""];
59->57 [style = bold, label=""];
43->24 [style = bold, label=""];
9->62 [style = solid, label="task02"];
8->9 [style = bold, label=""];
31->52 [style = bold, label=""];
32->5 [style = bold, label=""];
69->3 [style = bold, label=""];
70->28 [style = solid, label="assignment"];
17->49 [style = dashed, label="0"];
55->42 [style = bold, label=""];
45->47 [style = bold, label=""];
21->24 [style = bold, label=""];
70->16 [style = bold, label=""];
0->67 [style = bold, label=""];
68->50 [style = bold, label=""];
6->34 [style = bold, label=""];
14->33 [style = bold, label=""];
24->70 [style = bold, label=""];
18->12 [style = bold, label=""];
25->22 [style = bold, label=""];
62->31 [style = bold, label=""];
31->27 [style = bold, label=""];
44->22 [style = bold, label=""];
24->16 [style = solid, label="changelog"];
39->11 [style = solid, label="task02"];
}
