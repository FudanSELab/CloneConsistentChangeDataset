digraph {
20 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Job.READ,Job.CONFIGURE,Jenkins.READ).invokeWithArgs(\"aProject1\",\"aProject2\",\"aProject1\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(project2.scheduleBuild2(0).get().getLog(),containsString(\"echo 2\"))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "project2.getBuildersList().add(new Shell(\"echo 1\"))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "changeProjectOnTheDisc(project1,\"echo 1\",\"echo 2\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "reloadJobManyShouldFailIfLastJobDoesNotExist['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "FreeStyleProject project2 = j.createFreeStyleProject(\"aProject2\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(project1.scheduleBuild2(0).get().getLog(),containsString(\"echo 2\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(result,failedWith(5))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "project2.getBuildersList().add(createScriptBuilder(\"echo 1\"))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertThat(project1.scheduleBuild2(0).get().getLog(),containsString(\"echo 2\"))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "changeProjectOnTheDisc(project2,\"echo 1\",\"echo 2\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "FreeStyleProject project1 = j.createFreeStyleProject(\"aProject1\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(project2.scheduleBuild2(0).get().getLog(),containsString(\"echo 1\"))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(result,succeededSilently())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Job.READ,Job.CONFIGURE,Jenkins.READ).invokeWithArgs(\"aProject1\",\"aProject2\",\"never_created\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "reloadJobManyShouldFailIfLastJobDoesNotExist['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "reloadJobManyShouldSucceedEvenAJobIsSpecifiedTwice['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(project1.scheduleBuild2(0).get().getLog(),containsString(\"echo 1\"))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(project2.scheduleBuild2(0).get().getLog(),containsString(\"echo 2\"))@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(result.stderr(),containsString(\"never_created: No such job ‘never_created’ exists.\"))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "project1.getBuildersList().add(createScriptBuilder(\"echo 1\"))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "project1.getBuildersList().add(new Shell(\"echo 1\"))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->18 [style = bold, label=""];
15->10 [style = bold, label=""];
17->1 [style = bold, label=""];
16->10 [style = bold, label=""];
5->23 [style = dashed, label="0"];
9->4 [style = bold, label=""];
2->3 [style = bold, label=""];
18->11 [style = bold, label=""];
12->11 [style = bold, label=""];
22->21 [style = bold, label=""];
7->20 [style = dashed, label="0"];
11->6 [style = solid, label="project2"];
19->10 [style = bold, label=""];
7->5 [style = solid, label="result"];
1->13 [style = bold, label=""];
4->0 [style = bold, label=""];
20->23 [style = solid, label="result"];
3->9 [style = bold, label=""];
8->1 [style = bold, label=""];
6->20 [style = bold, label=""];
5->2 [style = bold, label=""];
7->5 [style = bold, label=""];
23->22 [style = bold, label=""];
20->23 [style = bold, label=""];
10->12 [style = bold, label=""];
10->14 [style = solid, label="project1"];
8->17 [style = dashed, label="0"];
11->8 [style = bold, label=""];
11->17 [style = bold, label=""];
12->18 [style = dashed, label="0"];
6->7 [style = bold, label=""];
7->2 [style = solid, label="result"];
13->14 [style = bold, label=""];
14->6 [style = bold, label=""];
}
