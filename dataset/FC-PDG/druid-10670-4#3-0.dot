digraph {
7 [style = filled, label = "testQuery(query,ImmutableList.of(ExpectedQuery.cluster(expectedClusterQuery)),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@af3132))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(1,scheduler.getTotalAcquired().get())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testTimeseriesOnAutomaticGlobalTable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(1,scheduler.getTotalRun().get())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final TimeseriesQuery query = (TimeseriesQuery)Druids.newTimeseriesQueryBuilder().dataSource(GLOBAL).granularity(Granularities.ALL).intervals(Collections.singletonList(INTERVAL)).aggregators(new LongSumAggregatorFactory(\"sum\",\"n\")).context(ImmutableMap.of(TimeseriesQuery.CTX_GRAND_TOTAL,false)).build().withId(\"queryId\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(1,scheduler.getTotalReleased().get())@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testQuery(query,ImmutableList.of(ExpectedQuery.cluster(query)),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@af3199))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final TimeseriesQuery expectedClusterQuery = Druids.newTimeseriesQueryBuilder().dataSource(new GlobalTableDataSource(GLOBAL)).granularity(Granularities.ALL).intervals(Collections.singletonList(INTERVAL)).aggregators(new LongSumAggregatorFactory(\"sum\",\"n\")).context(ImmutableMap.of(TimeseriesQuery.CTX_GRAND_TOTAL,false)).build()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "final TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(GLOBAL).granularity(Granularities.ALL).intervals(Collections.singletonList(INTERVAL)).aggregators(new LongSumAggregatorFactory(\"sum\",\"n\")).context(ImmutableMap.of(TimeseriesQuery.CTX_GRAND_TOTAL,false)).build()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "final TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(FOO).granularity(Granularities.ALL).intervals(Collections.singletonList(INTERVAL)).aggregators(new LongSumAggregatorFactory(\"sum\",\"n\")).context(ImmutableMap.of(TimeseriesQuery.CTX_GRAND_TOTAL,false)).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(1,scheduler.getTotalReleased().get())@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final TimeseriesQuery expectedClusterQuery = (TimeseriesQuery)Druids.newTimeseriesQueryBuilder().dataSource(new GlobalTableDataSource(GLOBAL)).granularity(Granularities.ALL).intervals(Collections.singletonList(INTERVAL)).aggregators(new LongSumAggregatorFactory(\"sum\",\"n\")).context(ImmutableMap.of(TimeseriesQuery.CTX_GRAND_TOTAL,false)).build().withId(\"queryId\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Assert.assertEquals(1,scheduler.getTotalPrioritizedAndLaned().get())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testTimeseriesOnTable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testTimeseriesOnAutomaticGlobalTable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5->3 [style = bold, label=""];
5->12 [style = dashed, label="0"];
7->1 [style = bold, label=""];
11->14 [style = bold, label=""];
0->6 [style = bold, label=""];
5->7 [style = solid, label="query"];
12->11 [style = bold, label=""];
5->9 [style = dashed, label="0"];
1->0 [style = bold, label=""];
9->10 [style = bold, label=""];
10->7 [style = bold, label=""];
14->1 [style = bold, label=""];
12->11 [style = solid, label="query"];
6->2 [style = bold, label=""];
13->12 [style = bold, label=""];
3->7 [style = bold, label=""];
8->9 [style = bold, label=""];
9->7 [style = solid, label="query"];
10->7 [style = solid, label="expectedClusterQuery"];
3->10 [style = dashed, label="0"];
4->5 [style = bold, label=""];
3->7 [style = solid, label="expectedClusterQuery"];
}
