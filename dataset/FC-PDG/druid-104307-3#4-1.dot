digraph {
19 [style = filled, label = "Assert.assertEquals(0,remoteTaskRunner.getBlackListedWorkers().size())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TestRealtimeTask task3 = new TestRealtimeTask(\"realtime3\",new TaskResource(\"realtime3\",1),\"foo\",TaskStatus.running(\"realtime3\"),jsonMapper)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "makeWorker()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testBlacklistZKWorkers['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(1,remoteTaskRunner.getBlackListedWorkers().size())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "RemoteTaskRunnerConfig rtrConfig = new TestRemoteTaskRunnerConfig(timeoutPeriod)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(1,remoteTaskRunner.getBlackListedWorkers().size())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertTrue(taskFuture3.get().isSuccess())@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "remoteTaskRunner.checkBlackListedNodes()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "TestRealtimeTask task2 = new TestRealtimeTask(\"realtime2\",new TaskResource(\"realtime2\",1),\"foo\",TaskStatus.success(\"realtime2\"),jsonMapper)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "mockWorkerCompleteSuccessfulTask(task2)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "remoteTaskRunner.checkBlackListedNodes()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "mockWorkerRunningTask(task3)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertTrue(taskFuture1.get(TIMEOUT_SECONDS,TimeUnit.SECONDS).isFailure())@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(1,remoteTaskRunner.getBlackListedWorkers().size())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(0,remoteTaskRunner.getBlackListedWorkers().size())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Future<TaskStatus> taskFuture2 = remoteTaskRunner.run(task2)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "testBlacklistZKWorkers['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "TestRealtimeTask task2 = new TestRealtimeTask(\"realtime2\",new TaskResource(\"realtime2\",1),\"foo\",TaskStatus.running(\"realtime2\"),jsonMapper)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "mockWorkerCompleteFailedTask(task1)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Future<TaskStatus> taskFuture3 = remoteTaskRunner.run(task3)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "mockWorkerCompleteFailedTask(task3)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(2,remoteTaskRunner.findWorkerRunningTask(task2.getId()).getContinuouslyFailedTasksCount())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "mockWorkerRunningTask(task1)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "mockWorkerCompleteFailedTask(task2)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "((RemoteTaskRunnerTestUtils.TestableRemoteTaskRunner)remoteTaskRunner).setCurrentTimeMillis(System.currentTimeMillis())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testSuccessfulTaskOnBlacklistedWorker['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "mockWorkerRunningTask(task2)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(1,remoteTaskRunner.findWorkerRunningTask(task1.getId()).getContinuouslyFailedTasksCount())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "makeRemoteTaskRunner(rtrConfig)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertTrue(taskAnnounced(task3.getId()))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "rtrConfig.setMaxPercentageBlacklistWorkers(100)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertTrue(taskAnnounced(task1.getId()))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(taskFuture2.get(TIMEOUT_SECONDS,TimeUnit.SECONDS).isFailure())@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "Assert.assertTrue(taskFuture2.get().isFailure())@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "Assert.assertTrue(taskFuture1.get().isFailure())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "mockWorkerCompleteSuccessfulTask(task3)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertTrue(taskAnnounced(task2.getId()))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TestRealtimeTask task1 = new TestRealtimeTask(\"realtime1\",new TaskResource(\"realtime1\",1),\"foo\",TaskStatus.success(\"realtime1\"),jsonMapper)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "((RemoteTaskRunnerTestUtils.TestableRemoteTaskRunner)remoteTaskRunner).setCurrentTimeMillis(System.currentTimeMillis() + 2 * timeoutPeriod.toStandardDuration().getMillis())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Future<TaskStatus> taskFuture1 = remoteTaskRunner.run(task1)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Assert.assertEquals(0,remoteTaskRunner.getBlackListedWorkers().size())@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertTrue(taskFuture3.get(TIMEOUT_SECONDS,TimeUnit.SECONDS).isSuccess())@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(0,remoteTaskRunner.getBlackListedWorkers().size())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Period timeoutPeriod = Period.millis(1000)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Assert.assertTrue(taskFuture3.get(TIMEOUT_SECONDS,TimeUnit.SECONDS).isFailure())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(0,remoteTaskRunner.findWorkerRunningTask(task3.getId()).getContinuouslyFailedTasksCount())@@@38@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(0,remoteTaskRunner.findWorkerRunningTask(task2.getId()).getContinuouslyFailedTasksCount())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "TestRealtimeTask task3 = new TestRealtimeTask(\"realtime3\",new TaskResource(\"realtime3\",1),\"foo\",TaskStatus.success(\"realtime3\"),jsonMapper)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "Assert.assertTrue(taskFuture2.get(TIMEOUT_SECONDS,TimeUnit.SECONDS).isSuccess())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49->45 [style = bold, label=""];
41->0 [style = bold, label=""];
42->18 [style = bold, label=""];
0->20 [style = solid, label="timeoutPeriod"];
31->23 [style = bold, label=""];
30->13 [style = bold, label=""];
36->9 [style = bold, label=""];
9->31 [style = solid, label="task3"];
8->1 [style = solid, label="task1"];
21->19 [style = bold, label=""];
28->34 [style = bold, label=""];
47->48 [style = bold, label=""];
32->7 [style = solid, label="task2"];
12->21 [style = bold, label=""];
8->18 [style = bold, label=""];
9->31 [style = bold, label=""];
24->0 [style = bold, label=""];
42->31 [style = solid, label="task3"];
43->42 [style = bold, label=""];
40->0 [style = bold, label=""];
8->6 [style = solid, label="task1"];
10->35 [style = bold, label=""];
27->31 [style = bold, label=""];
16->25 [style = bold, label=""];
21->37 [style = dashed, label="0"];
8->43 [style = bold, label=""];
29->49 [style = bold, label=""];
32->16 [style = bold, label=""];
2->38 [style = dashed, label="0"];
3->4 [style = bold, label=""];
45->44 [style = bold, label=""];
9->29 [style = solid, label="task3"];
39->26 [style = bold, label=""];
12->37 [style = bold, label=""];
21->45 [style = dashed, label="0"];
48->46 [style = bold, label=""];
23->29 [style = bold, label=""];
35->28 [style = bold, label=""];
25->27 [style = bold, label=""];
26->16 [style = bold, label=""];
5->1 [style = bold, label=""];
7->38 [style = bold, label=""];
32->16 [style = solid, label="task2"];
0->14 [style = bold, label=""];
29->12 [style = bold, label=""];
1->6 [style = bold, label=""];
20->13 [style = solid, label="rtrConfig"];
42->29 [style = solid, label="task3"];
43->27 [style = solid, label="task2"];
12->49 [style = dashed, label="0"];
7->2 [style = bold, label=""];
11->39 [style = dashed, label="0"];
18->5 [style = bold, label=""];
6->11 [style = bold, label=""];
34->17 [style = bold, label=""];
27->7 [style = bold, label=""];
43->16 [style = solid, label="task2"];
22->10 [style = bold, label=""];
43->47 [style = solid, label="task2"];
17->3 [style = bold, label=""];
33->32 [style = bold, label=""];
4->36 [style = bold, label=""];
37->19 [style = bold, label=""];
13->8 [style = bold, label=""];
2->22 [style = bold, label=""];
20->30 [style = bold, label=""];
19->15 [style = bold, label=""];
38->22 [style = bold, label=""];
26->33 [style = bold, label=""];
6->39 [style = bold, label=""];
44->47 [style = bold, label=""];
8->18 [style = solid, label="task1"];
42->49 [style = solid, label="task3"];
32->27 [style = solid, label="task2"];
14->20 [style = bold, label=""];
11->26 [style = bold, label=""];
9->12 [style = solid, label="task3"];
}
