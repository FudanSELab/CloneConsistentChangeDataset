digraph {
11 [style = filled, label = "setExecutionGroups(Arrays.asList(preparedStatement1,preparedStatement2))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "PreparedStatement preparedStatement2 = getPreparedStatement()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "PreparedStatement preparedStatement1 = getPreparedStatement()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(actual.executeBatch(sqlStatementContext),is(new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16b8b29))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "SQLException ex = new SQLException(\"\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertExecuteBatchForMultiplePreparedStatementsFailure['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "SQLException ex = new SQLException(\"\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "when(preparedStatement1.executeBatch()).thenThrow(ex)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "actual.executeBatch(sqlStatementContext)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "verify(preparedStatement1).executeBatch()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "verify(preparedStatement).executeBatch()@@@8@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertExecuteBatchForSinglePreparedStatementFailure['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "verify(preparedStatement2).executeBatch()@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(actual.executeBatch(sqlStatementContext),is(new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16b8b9a))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertExecuteBatchForSinglePreparedStatementFailure['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "verify(preparedStatement).executeBatch()@@@10@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "PreparedStatement preparedStatement = getPreparedStatement()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "when(preparedStatement2.executeBatch()).thenThrow(ex)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "setExecutionGroups(Collections.singletonList(preparedStatement))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->16 [style = solid, label="ex"];
0->3 [style = bold, label=""];
13->10 [style = bold, label=""];
0->9 [style = bold, label=""];
16->11 [style = bold, label=""];
10->14 [style = bold, label=""];
1->15 [style = solid, label="ex"];
1->15 [style = dashed, label="0"];
1->15 [style = bold, label=""];
12->17 [style = bold, label=""];
0->16 [style = dashed, label="0"];
18->12 [style = bold, label=""];
1->0 [style = bold, label=""];
9->7 [style = bold, label=""];
15->16 [style = bold, label=""];
14->11 [style = solid, label="preparedStatement2"];
11->18 [style = bold, label=""];
14->1 [style = bold, label=""];
5->1 [style = bold, label=""];
6->4 [style = bold, label=""];
2->12 [style = dashed, label="0"];
3->2 [style = bold, label=""];
3->9 [style = dashed, label="0"];
5->1 [style = solid, label="ex"];
10->11 [style = solid, label="preparedStatement1"];
4->0 [style = solid, label="preparedStatement"];
8->4 [style = bold, label=""];
4->10 [style = dashed, label="0"];
4->5 [style = bold, label=""];
}
