digraph {
3 [style = filled, label = "final String path = \"/a/b/v\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "byte(( qdata = zk.getData(statPath,false,new Stat())@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "zk.create(\"/a\",\"some\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "i < 600@@@19@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "ZooKeeperServer server = serverFactory.getZooKeeperServer()@@@25@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(qst.getBytes() == 8L,\"bytes are set\")@@@19@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "StatsTrack st = new StatsTrack(new String(data))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "quota.setCountHardLimit(4)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
69 [style = filled, label = "assertTrue(st.getCount() == 301,\"num count is set\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "startServer()@@@33@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertTrue(st.getCount() == 10,\"num count is set\")@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
71 [style = filled, label = "i < 300@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertTrue(qst.getCount() == 2,\"count is set\")@@@20@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "startServer()@@@22@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "stopServer()@@@32@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
46 [style = filled, label = "assertTrue(ost.getCount() == 4,\"num count is set\")@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
66 [style = filled, label = "i++@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "zk.setData(\"/\",\"some\".getBytes(),-1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "SetQuotaCommand.createQuota(zk,path,5L,10)@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final ZooKeeper zk = createClient()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "assertNotNull(server.getZKDatabase().getDataTree().getMaxPrefixWithQuota(path) != null,\"Quota is still set\")@@@35@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "assertTrue(st.getCount() == 4,\"num count is set\")@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
50 [style = filled, label = "testQuota['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
58 [style = filled, label = "ZooKeeper zk = createClient()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "String statPath = Quotas.quotaZookeeper + \"/a\" + \"/\" + Quotas.statNode@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "SetQuotaCommand.createQuota(zk,\"/a\",1000L,5000)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "zk.create(\"/a/\" + i,\"some\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertTrue(st.getBytes() == 1204L,\"bytes are set\")@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "byte(( data = zk.getData(absolutePath,false,new Stat())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "quota.setCount(4)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
55 [style = filled, label = "testQuotaWithQuorum['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "StatsTrack st = new StatsTrack(data)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
65 [style = filled, label = "i = 0@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "assertTrue(st.getCountHardLimit() == 4,\"count hard limit is set\")@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "SetQuotaCommand.createQuota(zk,path,quota)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "stopServer()@@@30@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "StatsTrack quota = new StatsTrack()@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertTrue(st.getBytes() == 5L,\"bytes are set\")@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "quota.setBytes(9L)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "int i = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "StatsTrack st = new StatsTrack(new String(data))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertNotNull(server.getZKDatabase().getDataTree().getMaxPrefixWithQuota(path) != null,\"Quota is still set\")@@@26@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "quota.setByteHardLimit(15L)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "OldStatsTrack ost = new OldStatsTrack(new String(data))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "ZooKeeperServer server = serverFactory.getZooKeeperServer()@@@34@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
52 [style = filled, label = "assertTrue(st.getCount() == 601,\"num count is set\")@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "i++@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertTrue(ost.getBytes() == 9L,\"bytes are set\")@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
61 [style = filled, label = "data = zk.getData(statPath,false,new Stat())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "zk.create(\"/a/\" + i,\"some\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertTrue(qst.getBytes() == 8L,\"bytes are set\")@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "zk.create(\"/a/b/v\",\"some\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertTrue(qst.getCount() == 2,\"count is set\")@@@29@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "assertTrue(st.getByteHardLimit() == 15L,\"byte hard limit is set\")@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "String absolutePath = Quotas.limitPath(path)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "zk.create(\"/a/b/v/d\",\"some\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertTrue(st.getBytes() == 9L,\"bytes are set\")@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
68 [style = filled, label = "assertTrue(st.getBytes() == 2404L,\"bytes are set\")@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "startServer()@@@24@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "byte(( data = zk.getData(absolutePath,false,new Stat())@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "i = 300@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "zk.create(\"/a/b\",\"some\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "String absolutePath = Quotas.quotaZookeeper + path + \"/\" + Quotas.limitNode@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "StatsTrack qst = new StatsTrack(new String(qdata))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "testQuota['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "StatsTrack qst = new StatsTrack(qdata)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "byte(( data = zk.getData(statPath,false,new Stat())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "st = new StatsTrack(new String(data))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "startServer()@@@31@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "stopServer()@@@21@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "String statPath = Quotas.statPath(path)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "stopServer()@@@23@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15->58 [style = dashed, label="0"];
57->70 [style = solid, label="i"];
63->56 [style = solid, label="statPath"];
70->66 [style = bold, label=""];
9->20 [style = solid, label="statPath"];
35->41 [style = bold, label=""];
71->62 [style = bold, label=""];
60->71 [style = bold, label=""];
63->56 [style = bold, label=""];
47->37 [style = bold, label=""];
30->49 [style = bold, label=""];
61->59 [style = bold, label=""];
16->70 [style = dashed, label="0"];
46->48 [style = bold, label=""];
71->60 [style = dotted, label="true"];
56->54 [style = bold, label=""];
71->67 [style = bold, label=""];
3->5 [style = bold, label=""];
0->42 [style = dashed, label="0"];
9->69 [style = bold, label=""];
48->43 [style = bold, label=""];
66->64 [style = bold, label=""];
21->1 [style = bold, label=""];
32->25 [style = bold, label=""];
41->45 [style = bold, label=""];
15->11 [style = solid, label="zk"];
13->22 [style = bold, label=""];
3->9 [style = solid, label="path"];
66->70 [style = solid, label="i"];
20->34 [style = solid, label="data"];
10->11 [style = bold, label=""];
65->62 [style = solid, label="i"];
19->12 [style = bold, label=""];
20->34 [style = bold, label=""];
3->48 [style = solid, label="path"];
43->51 [style = bold, label=""];
62->60 [style = bold, label=""];
3->4 [style = solid, label="path"];
50->3 [style = bold, label=""];
24->51 [style = dashed, label="0"];
27->31 [style = bold, label=""];
34->42 [style = bold, label=""];
57->64 [style = solid, label="i"];
59->68 [style = bold, label=""];
3->11 [style = solid, label="path"];
26->27 [style = bold, label=""];
56->54 [style = solid, label="data"];
57->66 [style = solid, label="i"];
33->47 [style = bold, label=""];
20->36 [style = solid, label="data"];
44->20 [style = bold, label=""];
29->32 [style = bold, label=""];
25->26 [style = bold, label=""];
18->9 [style = bold, label=""];
48->43 [style = solid, label="statPath"];
3->39 [style = solid, label="path"];
5->7 [style = bold, label=""];
38->46 [style = bold, label=""];
31->28 [style = bold, label=""];
43->51 [style = solid, label="qdata"];
3->6 [style = solid, label="path"];
3->44 [style = solid, label="path"];
2->17 [style = bold, label=""];
68->52 [style = bold, label=""];
60->71 [style = solid, label="i"];
61->59 [style = solid, label="data"];
65->71 [style = solid, label="i"];
28->39 [style = bold, label=""];
49->44 [style = bold, label=""];
23->15 [style = bold, label=""];
45->36 [style = bold, label=""];
8->14 [style = bold, label=""];
65->60 [style = solid, label="i"];
9->20 [style = bold, label=""];
15->3 [style = bold, label=""];
65->71 [style = bold, label=""];
63->61 [style = solid, label="statPath"];
51->29 [style = bold, label=""];
60->62 [style = solid, label="i"];
58->53 [style = bold, label=""];
64->66 [style = dotted, label="true"];
67->63 [style = bold, label=""];
64->70 [style = dotted, label="true"];
22->10 [style = bold, label=""];
0->18 [style = bold, label=""];
40->30 [style = bold, label=""];
64->61 [style = bold, label=""];
1->2 [style = bold, label=""];
10->33 [style = bold, label=""];
33->49 [style = solid, label="quota"];
0->9 [style = dashed, label="0"];
8->14 [style = solid, label="data"];
7->13 [style = bold, label=""];
66->64 [style = solid, label="i"];
3->49 [style = solid, label="path"];
57->64 [style = bold, label=""];
14->34 [style = dashed, label="0"];
53->5 [style = bold, label=""];
11->6 [style = bold, label=""];
18->69 [style = dashed, label="0"];
69->57 [style = bold, label=""];
44->20 [style = solid, label="absolutePath"];
17->19 [style = bold, label=""];
18->35 [style = dashed, label="0"];
7->65 [style = bold, label=""];
42->35 [style = bold, label=""];
71->62 [style = dotted, label="true"];
58->67 [style = solid, label="zk"];
24->16 [style = bold, label=""];
20->24 [style = solid, label="qdata"];
14->0 [style = bold, label=""];
12->4 [style = bold, label=""];
16->21 [style = bold, label=""];
6->8 [style = bold, label=""];
54->9 [style = bold, label=""];
6->8 [style = solid, label="absolutePath"];
36->38 [style = bold, label=""];
20->24 [style = bold, label=""];
55->58 [style = bold, label=""];
37->40 [style = bold, label=""];
64->70 [style = bold, label=""];
}
