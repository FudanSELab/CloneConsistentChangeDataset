digraph {
1 [style = filled, label = "sb.append(\",\")@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "expression.addParameter(\"<stream>\")@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "toExpression['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "toExpression['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "throw new IOException(\"This HashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "StreamFactory factory@@@2@@@['1', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "expression.addParameter(new StreamExpressionNamedParameter(\"hashed\",((Expressible)hashStream).toExpression(factory)))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "StreamFactory factory@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "return expression@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expression.addParameter(((Expressible)fullStream).toExpression(factory))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "sb.length() > 0@@@13@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "StringBuilder sb = new StringBuilder()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "includeStreams@@@4@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "throw new IOException(\"This OuterHashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "expression.addParameter(\"hashed=<stream>\")@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "boolean includeStreams@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "hashStream instanceof Expressible && fullStream instanceof Expressible@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expression.addParameter(new StreamExpressionNamedParameter(\"on\",sb.toString()))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "sb.append(part)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "toExpression['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4->20 [style = dotted, label="false"];
12->7 [style = bold, label=""];
14->13 [style = solid, label="includeStreams"];
11->4 [style = bold, label=""];
13->4 [style = dotted, label="true"];
10->2 [style = bold, label=""];
11->9 [style = solid, label="expression"];
1->10 [style = bold, label=""];
13->4 [style = bold, label=""];
4->3 [style = dotted, label="true"];
6->3 [style = solid, label="factory"];
7->10 [style = bold, label=""];
13->17 [style = bold, label=""];
4->5 [style = bold, label=""];
8->6 [style = dotted, label="true"];
7->1 [style = dotted, label="true"];
0->3 [style = bold, label=""];
6->0 [style = solid, label="factory"];
4->0 [style = dotted, label="true"];
4->20 [style = bold, label=""];
13->17 [style = dotted, label="false"];
8->11 [style = bold, label=""];
2->9 [style = bold, label=""];
10->7 [style = bold, label=""];
4->5 [style = dotted, label="false"];
13->18 [style = dotted, label="false"];
19->11 [style = bold, label=""];
15->11 [style = bold, label=""];
3->12 [style = bold, label=""];
16->0 [style = solid, label="factory"];
6->16 [style = dashed, label="0"];
5->20 [style = dashed, label="0"];
11->13 [style = bold, label=""];
15->16 [style = dotted, label="true"];
5->12 [style = bold, label=""];
7->1 [style = bold, label=""];
16->3 [style = solid, label="factory"];
18->12 [style = bold, label=""];
15->14 [style = dotted, label="true"];
19->6 [style = dotted, label="true"];
20->12 [style = bold, label=""];
4->0 [style = bold, label=""];
17->18 [style = bold, label=""];
}
