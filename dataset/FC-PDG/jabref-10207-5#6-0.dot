digraph {
34 [style = filled, label = "assertEquals(Optional.of(\"Applied Physics Letters\"),first.getField(StandardField.JOURNAL))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertEquals(Optional.of(\"Second harmonic generation of continuous wave ultraviolet light and production of beta -BaB$_2$O$_4$ optical waveguides\"),first.getField(\"title\"))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertEquals(\"article\",second.getType())@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertEquals(Optional.of(\"Lorem ipsum abstract\"),first.getField(\"abstract\"))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "assertEquals(Optional.of(\"89\"),first.getField(StandardField.VOLUME))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(Optional.of(\"Degl'Innocenti, R. and Guarino, A. and Poberaj, G. and Gunter, P.\"),first.getField(\"author\"))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertEquals(Optional.of(\"89\"),first.getField(\"volume\"))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "first.getField(StandardField.TITLE).equals(Optional.of(\"Optical and photoelectric spectroscopy of photorefractive Sn$_2$P$_2$S$_6$ crystals\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertEquals(Optional.of(\"2006\"),first.getField(StandardField.YEAR))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertEquals(Optional.of(\"Lorem ipsum abstract\"),first.getField(StandardField.ABSTRACT))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "first = second@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(Optional.of(\"Optical and photoelectric spectroscopy of photorefractive Sn$_2$P$_2$S$_6$ crystals\"),second.getField(StandardField.TITLE))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertEquals(Optional.of(\"4\"),first.getField(StandardField.NUMBER))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertEquals(StandardEntryType.Article,first.getType())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertEquals(Optional.of(\"#jul#\"),first.getField(\"month\"))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "assertEquals(Optional.of(\"Aip\"),first.getField(StandardField.PUBLISHER))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertEquals(Optional.of(\"Applied Physics Letters\"),first.getField(\"journal\"))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "BibEntry second = entries.get(1)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(2,entries.size())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(Optional.of(\"#jul#\"),first.getField(StandardField.MONTH))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "BibEntry tmp = first@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "first.getField(\"title\").equals(Optional.of(\"Optical and photoelectric spectroscopy of photorefractive Sn$_2$P$_2$S$_6$ crystals\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "BibEntry first = entries.get(0)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(1,entries.size())@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(Optional.of(\"Optical and photoelectric spectroscopy of photorefractive Sn$_2$P$_2$S$_6$ crystals\"),second.getField(\"title\"))@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertEquals(StandardEntryType.Article,second.getType())@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testImportEntriesINSPEC['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testImportEntriesINSPEC['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "List<BibEntry> entries = importer.importDatabase(file,StandardCharsets.UTF_8).getDatabase().getEntries()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(Optional.of(\"2006\"),first.getField(\"year\"))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "assertEquals(Optional.of(\"Degl'Innocenti, R. and Guarino, A. and Poberaj, G. and Gunter, P.\"),first.getField(StandardField.AUTHOR))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertEquals(Optional.of(\"4\"),first.getField(\"number\"))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertEquals(Optional.of(\"Aip\"),first.getField(\"publisher\"))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "second = tmp@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(Optional.of(\"Second harmonic generation of continuous wave ultraviolet light and production of beta -BaB$_2$O$_4$ optical waveguides\"),first.getField(StandardField.TITLE))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "Path file = Paths.get(.getResource(\"IsiImporterTestEmpty.isi\").toURI())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Path file = Paths.get(.getResource(\"IsiImporterTestInspec.isi\").toURI())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"article\",first.getType())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "testImportEntriesEmpty['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7->13 [style = bold, label=""];
21->10 [style = bold, label=""];
5->8 [style = bold, label=""];
22->25 [style = bold, label=""];
29->8 [style = bold, label=""];
8->37 [style = dashed, label="0"];
11->38 [style = bold, label=""];
37->11 [style = bold, label=""];
10->14 [style = bold, label=""];
17->24 [style = dashed, label="0"];
0->23 [style = dashed, label="0"];
28->15 [style = dotted, label="true"];
35->33 [style = bold, label=""];
4->21 [style = bold, label=""];
28->16 [style = dotted, label="true"];
4->27 [style = dashed, label="0"];
30->32 [style = bold, label=""];
32->27 [style = bold, label=""];
28->1 [style = bold, label=""];
6->19 [style = bold, label=""];
2->9 [style = bold, label=""];
28->19 [style = dotted, label="true"];
12->30 [style = dashed, label="0"];
21->22 [style = dashed, label="0"];
15->16 [style = bold, label=""];
25->35 [style = bold, label=""];
27->22 [style = bold, label=""];
3->4 [style = bold, label=""];
34->30 [style = bold, label=""];
6->19 [style = dotted, label="true"];
11->2 [style = bold, label=""];
2->38 [style = dashed, label="0"];
31->34 [style = bold, label=""];
1->17 [style = bold, label=""];
9->6 [style = bold, label=""];
33->23 [style = bold, label=""];
17->7 [style = bold, label=""];
9->28 [style = bold, label=""];
6->1 [style = bold, label=""];
24->26 [style = bold, label=""];
6->28 [style = dashed, label="0"];
26->31 [style = bold, label=""];
13->31 [style = dashed, label="0"];
16->1 [style = bold, label=""];
20->34 [style = dashed, label="0"];
18->33 [style = dashed, label="0"];
1->24 [style = bold, label=""];
20->12 [style = bold, label=""];
28->19 [style = bold, label=""];
14->35 [style = dashed, label="0"];
14->18 [style = bold, label=""];
19->16 [style = solid, label="tmp"];
12->3 [style = bold, label=""];
36->37 [style = bold, label=""];
2->19 [style = solid, label="first"];
6->15 [style = dotted, label="true"];
3->32 [style = dashed, label="0"];
19->15 [style = bold, label=""];
7->26 [style = dashed, label="0"];
8->11 [style = bold, label=""];
9->15 [style = solid, label="second"];
18->0 [style = bold, label=""];
10->25 [style = dashed, label="0"];
6->16 [style = dotted, label="true"];
13->20 [style = bold, label=""];
}
