digraph {
17 [style = filled, label = "testOffer2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "clients(i( = createClient()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testOffer2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "String dir = \"/testTake1\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testTake1['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final int numClients = 2@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "queueHandles(i( = new DistributedQueue(clients(i(,dir,null)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "byte(( dequeuedBytes = queueHandles(0(.take()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "i++@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "DistributedQueue(( queueHandles = new DistributedQueue((((@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "queueHandles(0(.offer(testString.getBytes())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ZooKeeper(( clients = new ZooKeeper((((@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "int i = 0@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "String testString = \"Hello World\"@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "int i = 0@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "DistributedQueue(( queueHandles = new DistributedQueue((((@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "i < clients.length@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final int num_clients = 1@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "ZooKeeper(( clients = new ZooKeeper((((@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertEquals(new String(dequeuedBytes),testString)@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "String dir = \"/testOffer2\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "byte(( dequeuedBytes = queueHandles(1(.remove()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final int num_clients = 2@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "i++@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18->9 [style = solid, label="i"];
0->3 [style = bold, label=""];
13->10 [style = bold, label=""];
8->16 [style = bold, label=""];
23->20 [style = bold, label=""];
4->13 [style = solid, label="clients"];
1->14 [style = dashed, label="0"];
17->6 [style = bold, label=""];
11->1 [style = bold, label=""];
11->16 [style = dashed, label="0"];
2->6 [style = bold, label=""];
6->20 [style = dashed, label="0"];
0->19 [style = dashed, label="0"];
9->4 [style = bold, label=""];
4->13 [style = bold, label=""];
6->13 [style = solid, label="dir"];
11->22 [style = dashed, label="0"];
14->19 [style = bold, label=""];
1->0 [style = bold, label=""];
12->7 [style = bold, label=""];
21->7 [style = solid, label="dequeuedBytes"];
12->21 [style = dashed, label="0"];
8->22 [style = bold, label=""];
12->7 [style = solid, label="dequeuedBytes"];
3->9 [style = bold, label=""];
5->21 [style = bold, label=""];
13->18 [style = solid, label="i"];
13->10 [style = solid, label="i"];
20->8 [style = bold, label=""];
8->7 [style = solid, label="testString"];
3->9 [style = solid, label="i"];
15->9 [style = solid, label="i"];
5->12 [style = bold, label=""];
20->13 [style = solid, label="dir"];
15->9 [style = bold, label=""];
9->13 [style = dotted, label="true"];
6->8 [style = bold, label=""];
18->9 [style = bold, label=""];
9->5 [style = bold, label=""];
9->4 [style = dotted, label="true"];
21->7 [style = bold, label=""];
16->14 [style = bold, label=""];
9->18 [style = dotted, label="true"];
10->9 [style = solid, label="i"];
3->15 [style = dashed, label="0"];
10->9 [style = bold, label=""];
22->1 [style = bold, label=""];
19->15 [style = bold, label=""];
9->10 [style = dotted, label="true"];
8->11 [style = bold, label=""];
10->18 [style = dashed, label="0"];
13->18 [style = bold, label=""];
}
