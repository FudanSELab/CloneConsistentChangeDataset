digraph {
30 [style = filled, label = "countEvents(task) != 2@@@13@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "kafkaProducer.initTransactions()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "final QuerySegmentSpec endInterval = objectMapper.readValue(\"\"2008/2049\"\",)@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "Iterable<ScanResultValue> scanResultValues = scanData(task,firstInterval)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "kafkaProducer.flush()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2011/P1D\",0)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(Status.READING,task.getRunner().getStatus())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "kafkaProducer.beginTransaction()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "kafkaProducer.commitTransaction()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "kafkaProducer.commitTransaction()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,2L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,6L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "kafkaProducer.beginTransaction()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(2,countEvents(task))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "Assert.assertEquals(2,Iterables.size(scanResultValues))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc4))@@@60@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "final QuerySegmentSpec rollbackedInterval = objectMapper.readValue(\"\"2010/2012\"\",)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "SegmentDescriptor desc4 = sd(task,\"2049/P1D\",0)@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "final QuerySegmentSpec firstInterval = objectMapper.readValue(\"\"2008/2010\"\",)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Iterable<ScanResultValue> scanResultValues1 = scanData(task,endInterval)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4),publishedDescriptors())@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "kafkaProducer.initTransactions()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "kafkaProducer.abortTransaction()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "kafkaProducer.beginTransaction()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "kafkaProducer.send(record).get()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "TimeoutException e@@@35@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "TimeoutException e@@@35@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,13L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "kafkaProducer.beginTransaction()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "kafkaProducer.flush()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(2,Iterables.size(scanResultValues1))@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "{}@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2010/P1D\",0)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,13L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Thread.sleep(25)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.fail(\"Task completed when it should have been paused\")@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testRunWithPauseAndResume['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,6L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@47@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "Assert.assertEquals(Status.READING,task.getRunner().getStatus())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "future.get(10,TimeUnit.SECONDS)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Map<Integer,Long> currentOffsets = objectMapper.readValue(task.getRunner().pause().getEntity().toString(),new TypeReference<Map<Integer,Long>>(){})@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "kafkaProducer.send(record).get()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "scanResultValues = scanData(task,rollbackedInterval)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "kafkaProducer.send(record).get()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "kafkaProducer.initTransactions()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "kafkaProducer.initTransactions()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "Assert.assertEquals(task.getRunner().getEndOffsets(),task.getRunner().getCurrentOffsets())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,6L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(Status.PAUSED,task.getRunner().getStatus())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",desc2))@@@49@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc3))@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2013/P1D\",0)@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc1))@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "kafkaProducer.commitTransaction()@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(0,Iterables.size(scanResultValues))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "Assert.assertEquals(2,countEvents(task))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "kafkaProducer.send(record).get()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,6L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@47@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
51 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getProcessed())@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testRunWithPauseAndResume['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "testRunTransactionModeRollback['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getProcessed())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65->67 [style = bold, label=""];
52->64 [style = bold, label=""];
61->43 [style = bold, label=""];
30->20 [style = bold, label=""];
27->28 [style = bold, label=""];
55->40 [style = bold, label=""];
37->9 [style = solid, label="task"];
10->17 [style = bold, label=""];
25->9 [style = solid, label="task"];
49->60 [style = solid, label="task"];
59->71 [style = bold, label=""];
19->47 [style = dashed, label="0"];
69->68 [style = bold, label=""];
49->9 [style = solid, label="task"];
1->30 [style = bold, label=""];
67->52 [style = solid, label="scanResultValues"];
60->41 [style = solid, label="desc3"];
54->53 [style = solid, label="endInterval"];
70->44 [style = bold, label=""];
37->3 [style = bold, label=""];
14->7 [style = bold, label=""];
8->1 [style = bold, label=""];
44->51 [style = bold, label=""];
33->11 [style = bold, label=""];
29->6 [style = bold, label=""];
25->30 [style = solid, label="task"];
65->67 [style = solid, label="firstInterval"];
35->37 [style = bold, label=""];
0->25 [style = bold, label=""];
63->41 [style = bold, label=""];
37->12 [style = solid, label="task"];
12->18 [style = bold, label=""];
60->63 [style = bold, label=""];
54->53 [style = bold, label=""];
66->60 [style = bold, label=""];
25->37 [style = dashed, label="0"];
26->28 [style = bold, label=""];
49->40 [style = solid, label="task"];
67->52 [style = bold, label=""];
18->38 [style = bold, label=""];
25->12 [style = solid, label="task"];
50->69 [style = bold, label=""];
10->31 [style = bold, label=""];
66->41 [style = solid, label="desc2"];
22->43 [style = dashed, label="0"];
57->44 [style = solid, label="desc1"];
25->3 [style = bold, label=""];
60->62 [style = solid, label="desc3"];
12->66 [style = dashed, label="0"];
53->42 [style = solid, label="scanResultValues1"];
49->57 [style = solid, label="task"];
71->61 [style = bold, label=""];
47->57 [style = bold, label=""];
49->66 [style = solid, label="task"];
13->12 [style = bold, label=""];
43->47 [style = bold, label=""];
19->13 [style = bold, label=""];
16->33 [style = bold, label=""];
56->50 [style = bold, label=""];
13->57 [style = dashed, label="0"];
49->3 [style = bold, label=""];
12->7 [style = solid, label="desc2"];
34->14 [style = bold, label=""];
22->54 [style = bold, label=""];
37->3 [style = solid, label="task"];
13->14 [style = solid, label="desc1"];
49->53 [style = solid, label="task"];
41->70 [style = bold, label=""];
21->4 [style = bold, label=""];
6->26 [style = bold, label=""];
45->55 [style = bold, label=""];
51->62 [style = bold, label=""];
22->19 [style = bold, label=""];
18->34 [style = bold, label=""];
57->66 [style = bold, label=""];
31->24 [style = bold, label=""];
66->51 [style = solid, label="desc2"];
53->42 [style = bold, label=""];
30->9 [style = bold, label=""];
25->49 [style = dashed, label="0"];
68->48 [style = bold, label=""];
49->3 [style = solid, label="task"];
13->18 [style = solid, label="desc1"];
32->8 [style = bold, label=""];
49->30 [style = solid, label="task"];
40->39 [style = bold, label=""];
7->70 [style = dashed, label="0"];
63->41 [style = solid, label="desc4"];
30->20 [style = dotted, label="true"];
32->1 [style = bold, label=""];
49->48 [style = solid, label="task"];
3->21 [style = bold, label=""];
23->2 [style = bold, label=""];
55->40 [style = solid, label="rollbackedInterval"];
42->59 [style = bold, label=""];
12->18 [style = solid, label="desc2"];
14->41 [style = dashed, label="0"];
25->13 [style = solid, label="task"];
57->41 [style = solid, label="desc1"];
37->13 [style = solid, label="task"];
31->22 [style = bold, label=""];
28->10 [style = bold, label=""];
34->38 [style = dashed, label="0"];
17->31 [style = bold, label=""];
46->49 [style = bold, label=""];
62->58 [style = bold, label=""];
49->63 [style = solid, label="task"];
63->58 [style = solid, label="desc4"];
15->16 [style = bold, label=""];
24->22 [style = bold, label=""];
25->3 [style = solid, label="task"];
39->28 [style = bold, label=""];
38->14 [style = bold, label=""];
49->67 [style = solid, label="task"];
37->30 [style = solid, label="task"];
48->45 [style = bold, label=""];
64->56 [style = bold, label=""];
36->27 [style = bold, label=""];
9->15 [style = bold, label=""];
5->27 [style = bold, label=""];
15->65 [style = bold, label=""];
20->30 [style = bold, label=""];
2->29 [style = bold, label=""];
11->23 [style = bold, label=""];
40->39 [style = solid, label="scanResultValues"];
4->32 [style = bold, label=""];
16->28 [style = solid, label="currentOffsets"];
}
