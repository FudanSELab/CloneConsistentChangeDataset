digraph {
19 [style = filled, label = "TestParsingMerge.RepeatedFieldsGenerator.Group2 repeatedG2 = TestParsingMerge.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg2).build()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "TestAllTypes.Builder builder = TestAllTypes.newBuilder()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TestParsingMerge.RepeatedFieldsGenerator.Group1 optionalG3 = TestParsingMerge.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg3).build()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TestParsingMerge.RepeatedFieldsGenerator.Group2 repeatedG3 = TestParsingMerge.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg3).build()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "UnittestLite.registerAllExtensions(registry)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "TestParsingMergeLite.RepeatedFieldsGenerator.Group1 optionalG1 = TestParsingMergeLite.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg1).build()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertMessageMerged(parsingMerge.getRequiredAllTypes())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "TestParsingMergeLite parsingMerge = TestParsingMergeLite.parser().parseFrom(data,registry)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(3,parsingMerge.getExtensionCount(TestParsingMerge.repeatedExt))@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "builder.clear()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "TestParsingMerge parsingMerge = TestParsingMerge.parser().parseFrom(data,registry)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "ByteString data = TestParsingMergeLite.RepeatedFieldsGenerator.newBuilder().addField1(msg1).addField1(msg2).addField1(msg3).addField2(msg1).addField2(msg2).addField2(msg3).addField3(msg1).addField3(msg2).addField3(msg3).addGroup1(optionalG1).addGroup1(optionalG2).addGroup1(optionalG3).addGroup2(repeatedG1).addGroup2(repeatedG2).addGroup2(repeatedG3).addExt1(msg1).addExt1(msg2).addExt1(msg3).addExt2(msg1).addExt2(msg2).addExt2(msg3).build().toByteString()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "TestParsingMergeLite.RepeatedFieldsGenerator.Group2 repeatedG3 = TestParsingMergeLite.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg3).build()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "ExtensionRegistry registry = ExtensionRegistry.newInstance()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "TestParsingMerge.RepeatedFieldsGenerator.Group2 repeatedG1 = TestParsingMerge.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg1).build()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(3,parsingMerge.getRepeatedGroupCount())@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "TestParsingMergeLite.RepeatedFieldsGenerator.Group1 optionalG2 = TestParsingMergeLite.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg2).build()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testParsingMerge['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ByteString data = TestParsingMerge.RepeatedFieldsGenerator.newBuilder().addField1(msg1).addField1(msg2).addField1(msg3).addField2(msg1).addField2(msg2).addField2(msg3).addField3(msg1).addField3(msg2).addField3(msg3).addGroup1(optionalG1).addGroup1(optionalG2).addGroup1(optionalG3).addGroup2(repeatedG1).addGroup2(repeatedG2).addGroup2(repeatedG3).addExt1(msg1).addExt1(msg2).addExt1(msg3).addExt2(msg1).addExt2(msg2).addExt2(msg3).build().toByteString()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(parsingMerge.getExtensionCount(TestParsingMerge.repeatedExt)).isEqualTo(3)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "TestParsingMergeLite.RepeatedFieldsGenerator.Group2 repeatedG2 = TestParsingMergeLite.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg2).build()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "TestParsingMergeLite.RepeatedFieldsGenerator.Group2 repeatedG1 = TestParsingMergeLite.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg1).build()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "TestParsingMergeLite.RepeatedFieldsGenerator.Group1 optionalG3 = TestParsingMergeLite.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg3).build()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertMessageMerged(parsingMerge.getOptionalGroup().getOptionalGroupAllTypes())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TestAllTypes msg1 = builder.setOptionalInt32(1).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "TestParsingMerge.RepeatedFieldsGenerator.Group1 optionalG2 = TestParsingMerge.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg2).build()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertMessageMerged(parsingMerge.getExtension(TestParsingMerge.optionalExt))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "ExtensionRegistryLite registry = ExtensionRegistryLite.newInstance()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(3,parsingMerge.getRepeatedAllTypesCount())@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TestAllTypes msg3 = builder.setOptionalInt32(3).setOptionalString(\"hello\").build()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testParsingMerge['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "TestAllTypesLite.Builder builder = TestAllTypesLite.newBuilder()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "testParsingMergeLite['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "UnittestProto.registerAllExtensions(registry)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertMessageMerged(parsingMerge.getOptionalAllTypes())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TestParsingMerge.RepeatedFieldsGenerator.Group1 optionalG1 = TestParsingMerge.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg1).build()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(parsingMerge.getRepeatedGroupCount()).isEqualTo(3)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "TestAllTypesLite msg3 = builder.setOptionalInt32(3).setOptionalString(\"hello\").build()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertMessageMerged(parsingMerge.getExtension(TestParsingMergeLite.optionalExt))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "builder.clear()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(parsingMerge.getRepeatedAllTypesCount()).isEqualTo(3)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "TestAllTypesLite msg2 = builder.setOptionalInt64(2).build()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "TestAllTypesLite msg1 = builder.setOptionalInt32(1).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(3,parsingMerge.getExtensionCount(TestParsingMergeLite.repeatedExt))@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "TestAllTypes msg2 = builder.setOptionalInt64(2).build()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18->38 [style = bold, label=""];
14->16 [style = bold, label=""];
36->35 [style = solid, label="registry"];
8->37 [style = dashed, label="0"];
7->1 [style = bold, label=""];
13->43 [style = dashed, label="0"];
10->15 [style = bold, label=""];
40->6 [style = bold, label=""];
21->34 [style = dashed, label="0"];
19->12 [style = bold, label=""];
14->28 [style = dashed, label="0"];
3->31 [style = dashed, label="0"];
20->40 [style = dashed, label="0"];
12->21 [style = bold, label=""];
6->23 [style = bold, label=""];
17->31 [style = bold, label=""];
37->17 [style = bold, label=""];
35->39 [style = bold, label=""];
16->42 [style = dashed, label="0"];
15->30 [style = dashed, label="0"];
31->18 [style = bold, label=""];
5->39 [style = dashed, label="0"];
38->41 [style = bold, label=""];
20->6 [style = bold, label=""];
30->37 [style = bold, label=""];
1->41 [style = dashed, label="0"];
16->19 [style = bold, label=""];
20->25 [style = bold, label=""];
1->13 [style = bold, label=""];
27->15 [style = bold, label=""];
4->0 [style = bold, label=""];
21->2 [style = bold, label=""];
22->4 [style = bold, label=""];
3->18 [style = bold, label=""];
43->28 [style = bold, label=""];
39->22 [style = bold, label=""];
8->17 [style = bold, label=""];
23->29 [style = bold, label=""];
25->24 [style = bold, label=""];
11->5 [style = bold, label=""];
24->26 [style = bold, label=""];
36->39 [style = solid, label="registry"];
21->5 [style = solid, label="data"];
2->36 [style = dashed, label="0"];
6->25 [style = dashed, label="0"];
9->29 [style = dashed, label="0"];
23->24 [style = dashed, label="0"];
34->36 [style = bold, label=""];
7->38 [style = dashed, label="0"];
9->26 [style = dashed, label="0"];
44->34 [style = bold, label=""];
17->3 [style = bold, label=""];
42->32 [style = bold, label=""];
32->44 [style = bold, label=""];
33->30 [style = bold, label=""];
12->44 [style = dashed, label="0"];
0->20 [style = bold, label=""];
0->40 [style = bold, label=""];
19->32 [style = dashed, label="0"];
28->42 [style = bold, label=""];
36->35 [style = bold, label=""];
18->7 [style = bold, label=""];
2->11 [style = solid, label="registry"];
5->22 [style = bold, label=""];
23->9 [style = bold, label=""];
13->14 [style = bold, label=""];
41->43 [style = bold, label=""];
15->8 [style = bold, label=""];
2->11 [style = bold, label=""];
34->39 [style = solid, label="data"];
11->35 [style = dashed, label="0"];
2->5 [style = solid, label="registry"];
}
