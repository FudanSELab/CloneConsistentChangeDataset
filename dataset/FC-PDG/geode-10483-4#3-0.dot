digraph {
25 [style = filled, label = "cqDUnitTest.closeServer(server)@@@40@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "final String host0 = NetworkUtils.getServerHostName(server.getHost())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "VM client = VM.getVM(1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "client.invoke(new CacheSerializableRunnable(\"Validate CQs\"){public void run2(){logger.info(\"### Validating CQ. ### \" + cqName)QueryService cqService = getCache().getQueryService()CqQuery cQuery = cqService.getCq(cqName)assertThat(cQuery).isNotNull()}})@@@29@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "cqDUnitTest.createClient(client,port,host0)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "VM server = VM.getVM(0)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "Wait.pause(10 * 60 * 1000)@@@66@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final int size = 50@@@44@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testCQPerf['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Wait.pause(10 * 60 * 1000)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "VM client = host.getVM(1)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "cqDUnitTest.closeServer(server)@@@68@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "vm.invoke(new CacheSerializableRunnable(\"Close CQ :\" + cqName){public void run2(){LogWriterUtils.getLogWriter().info(\"### Close CQ. ###\" + cqName)QueryService cqService = nulltry {cqService = getCache().getQueryService()}catch (Exception cqe) CqQuery cq1 = nulltry {cq1 = cqService.getCq(cqName)cq1.close()}catch (Exception ex) assertTrue(\"Close CQ state mismatch\",cq1.getState().isClosed())}})@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Wait.pause(5000)@@@46@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final Host host = Host.getHost(0)@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "VM server = host.getVM(0)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "final int size = 50@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "cqDUnitTest.createValuesWithTime(client,cqDUnitTest.regions(0(,size)@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "Wait.pause(5000)@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "cqDUnitTest.closeClient(client)@@@67@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "client.invoke(null)@@@10@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "cqDUnitTest.closeClient(client)@@@39@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "cqDUnitTest.createServer(server)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "final String cqName = \"testCQPerf_0\"@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "closeCQ['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final String host0 = NetworkUtils.getServerHostName()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "VM vm@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "client.invoke(new CacheSerializableRunnable(\"Create CQ :\" + cqName){public void run2(){LogWriterUtils.getLogWriter().info(\"### Create CQ. ###\" + cqName)QueryService cqService = nulltry {cqService = getCache().getQueryService()}catch (Exception cqe) CqAttributesFactory cqf = new CqAttributesFactory()CqListener(( cqListeners = {new CqTimeTestListener(LogWriterUtils.getLogWriter())}((CqTimeTestListener)cqListeners(0().cqName = cqNamecqf.initCqListeners(cqListeners)CqAttributes cqa = cqf.create()try {CqQuery cq1 = cqService.newCq(cqName,cqDUnitTest.cqs(0(,cqa)assertTrue(\"newCq() state mismatch\",cq1.getState().isStopped())cq1.execute()}catch (Exception ex) }})@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "final int port = server.invoke(null)@@@6@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "final int port = server.invoke(null)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "cqDUnitTest.createValuesWithTime(client,cqDUnitTest.regions(0(,size)@@@47@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "cqDUnitTest.createValuesWithTime(client,cqDUnitTest.regions(0(,size)@@@45@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testCQPerf['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "cqDUnitTest.createValuesWithTime(client,cqDUnitTest.regions(0(,size)@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "final String cqName@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
15->3 [style = solid, label="server"];
14->3 [style = bold, label=""];
4->1 [style = solid, label="cqName"];
9->13 [style = solid, label="size"];
17->5 [style = bold, label=""];
18->24 [style = bold, label=""];
15->23 [style = dashed, label="0"];
6->26 [style = bold, label=""];
11->14 [style = solid, label="client"];
1->6 [style = solid, label="cqName"];
28->30 [style = bold, label=""];
11->13 [style = solid, label="client"];
30->20 [style = bold, label=""];
33->34 [style = solid, label="cqName"];
26->25 [style = bold, label=""];
11->7 [style = solid, label="client"];
29->0 [style = bold, label=""];
19->25 [style = solid, label="server"];
4->21 [style = bold, label=""];
18->24 [style = solid, label="host0"];
8->7 [style = solid, label="port"];
5->15 [style = bold, label=""];
1->4 [style = dashed, label="0"];
22->28 [style = bold, label=""];
32->34 [style = bold, label=""];
7->4 [style = bold, label=""];
20->6 [style = bold, label=""];
23->26 [style = solid, label="client"];
2->10 [style = bold, label=""];
8->0 [style = dashed, label="0"];
10->6 [style = bold, label=""];
11->10 [style = solid, label="client"];
12->7 [style = bold, label=""];
12->7 [style = solid, label="host0"];
1->9 [style = bold, label=""];
23->30 [style = solid, label="client"];
32->33 [style = dotted, label="true"];
23->29 [style = bold, label=""];
15->0 [style = solid, label="server"];
21->30 [style = solid, label="size"];
11->0 [style = bold, label=""];
23->22 [style = solid, label="client"];
15->11 [style = bold, label=""];
19->29 [style = solid, label="server"];
21->22 [style = bold, label=""];
6->16 [style = bold, label=""];
19->23 [style = bold, label=""];
0->8 [style = bold, label=""];
23->24 [style = solid, label="client"];
9->13 [style = bold, label=""];
16->14 [style = bold, label=""];
0->18 [style = bold, label=""];
21->22 [style = solid, label="size"];
12->18 [style = dashed, label="0"];
4->1 [style = bold, label=""];
27->19 [style = bold, label=""];
7->20 [style = solid, label="cqName"];
0->24 [style = solid, label="port"];
24->7 [style = bold, label=""];
9->10 [style = solid, label="size"];
8->12 [style = bold, label=""];
32->31 [style = dotted, label="true"];
13->2 [style = bold, label=""];
}
