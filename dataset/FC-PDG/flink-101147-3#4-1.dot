digraph {
4 [style = filled, label = "testRestoreStateAndSnapshot['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(actual.get(0),equalTo(input.get(0)))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(actual.get(0).getCheckpointId(),is(2L))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "acknowledgeOnCheckpoint.restoreState(input)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(actual.get(0).getAcknowledgeIds(),containsInAnyOrder(\"ackId\",\"ackId2\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "List<AcknowledgeIdsForCheckpoint<String>> actual = acknowledgeOnCheckpoint.snapshotState(2,100)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "acknowledgeOnCheckpoint.addAcknowledgeId(\"ackId\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testAddMultipleAcknowledgeIds['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(actual.get(1),equalTo(input.get(1)))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testRestoreStateAndSnapshot['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "acknowledgeOnCheckpoint.addAcknowledgeId(\"ackId2\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "List<AcknowledgeIdsForCheckpoint<String>> actual = acknowledgeOnCheckpoint.snapshotState(2,100)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(acknowledgeOnCheckpoint.numberOfOutstandingAcknowledgements(),is(4))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "input.add(new AcknowledgeIdsForCheckpoint<>(1,asList(\"idsFor1\",\"moreIdsFor1\")))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "AcknowledgeOnCheckpoint<String> acknowledgeOnCheckpoint = new AcknowledgeOnCheckpoint<>(mockedAcknowledger)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(acknowledgeOnCheckpoint.numberOfOutstandingAcknowledgements(),is(2))@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "List<AcknowledgeIdsForCheckpoint<String>> input = new ArrayList<>()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "input.add(new AcknowledgeIdsForCheckpoint<>(0,asList(\"idsFor0\",\"moreIdsFor0\")))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(actual.get(2).getAcknowledgeIds(),hasSize(0))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(actual.get(2).getCheckpointId(),is(2L))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->3 [style = bold, label=""];
9->11 [style = bold, label=""];
2->6 [style = bold, label=""];
8->3 [style = solid, label="actual"];
18->11 [style = bold, label=""];
8->3 [style = bold, label=""];
6->3 [style = dashed, label="0"];
7->0 [style = bold, label=""];
11->19 [style = bold, label=""];
12->9 [style = bold, label=""];
13->1 [style = bold, label=""];
19->16 [style = bold, label=""];
3->19 [style = dashed, label="0"];
6->5 [style = bold, label=""];
15->17 [style = bold, label=""];
10->8 [style = bold, label=""];
3->2 [style = bold, label=""];
1->10 [style = solid, label="input"];
17->14 [style = bold, label=""];
11->10 [style = bold, label=""];
2->16 [style = dashed, label="0"];
1->12 [style = bold, label=""];
5->7 [style = bold, label=""];
14->18 [style = bold, label=""];
4->1 [style = bold, label=""];
10->14 [style = dashed, label="0"];
}
