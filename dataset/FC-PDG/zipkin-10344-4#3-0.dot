digraph {
5 [style = filled, label = "AssertionError e@@@11@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "AssertionError e@@@12@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "List<Call<Void>> calls = new ArrayList<>()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "exceptionsInvalidate_enqueue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "callFactory.maybeAdd(\"foo\",calls)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testFactory.maybeAdd(\"foo\",calls)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertThat(calls).isNotEmpty()@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "{}@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "callFactory.maybeAdd(\"foo\",calls)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(testFactory.values).containsExactly(\"bar\",\"foo\")@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "testFactory.maybeAdd(\"foo\",calls)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "calls.get(1).enqueue(assertFailOnError)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "callFactory.maybeAdd(\"bar\",calls)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "callFactory.maybeAdd(\"bar\",calls)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "calls.get(0).enqueue(assertFailOnError)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "callFactory.maybeAdd(\"bar\",calls)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "failValue.set(\"foo\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "testFactory.failValue.set(\"foo\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "exceptionsInvalidate_enqueue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "calls.get(0).enqueue(assertFailOnError)@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "dedupesSameCalls['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(testFactory.values).containsExactly(\"bar\")@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "calls.clear()@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "TestFactory testFactory = new TestFactory()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertThat(calls).hasSize(2)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "failBecauseExceptionWasNotThrown()@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "call.execute()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testFactory.maybeAdd(\"bar\",calls)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "{}@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "calls.get(0).enqueue(assertFailOnError)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(calls).isNotEmpty()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "calls.get(1).enqueue(assertFailOnError)@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertThat(values).containsExactly(\"foo\",\"bar\")@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24->10 [style = bold, label=""];
4->3 [style = bold, label=""];
0->30 [style = bold, label=""];
16->0 [style = bold, label=""];
17->26 [style = bold, label=""];
15->23 [style = dashed, label="0"];
2->6 [style = bold, label=""];
10->19 [style = bold, label=""];
12->15 [style = bold, label=""];
1->29 [style = dashed, label="0"];
18->12 [style = bold, label=""];
1->20 [style = bold, label=""];
27->31 [style = bold, label=""];
30->32 [style = bold, label=""];
25->14 [style = bold, label=""];
3->12 [style = bold, label=""];
9->10 [style = bold, label=""];
3->32 [style = solid, label="calls"];
11->9 [style = bold, label=""];
3->12 [style = solid, label="calls"];
22->23 [style = bold, label=""];
10->6 [style = bold, label=""];
13->16 [style = bold, label=""];
12->25 [style = solid, label="calls"];
26->13 [style = bold, label=""];
14->1 [style = bold, label=""];
21->18 [style = bold, label=""];
0->7 [style = bold, label=""];
7->14 [style = bold, label=""];
32->29 [style = bold, label=""];
8->0 [style = bold, label=""];
1->20 [style = dashed, label="0"];
29->27 [style = bold, label=""];
5->2 [style = bold, label=""];
23->24 [style = bold, label=""];
3->0 [style = solid, label="calls"];
15->11 [style = bold, label=""];
19->13 [style = bold, label=""];
0->25 [style = dashed, label="0"];
12->22 [style = solid, label="calls"];
0->25 [style = bold, label=""];
6->13 [style = bold, label=""];
15->0 [style = bold, label=""];
11->24 [style = dashed, label="0"];
12->22 [style = dashed, label="0"];
13->16 [style = dashed, label="0"];
3->30 [style = solid, label="calls"];
12->23 [style = solid, label="calls"];
28->3 [style = bold, label=""];
13->8 [style = bold, label=""];
12->22 [style = bold, label=""];
3->15 [style = solid, label="calls"];
}
