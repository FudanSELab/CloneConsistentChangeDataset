digraph {
10 [style = filled, label = "verifyIntersection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "List<Integer> expected@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "List<ImmutableConciseSet> sets@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "List<Integer> expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(expected,actual)@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "List<Integer> expected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "verifyUnion['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "IntSet.IntIterator itr = set.iterator()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "List<Integer> actual = Lists.newArrayList()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "actual.add(itr.next())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "List<ImmutableConciseSet> sets@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "itr.hasNext()@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ImmutableConciseSet set = ImmutableConciseSet.intersection(sets)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ImmutableConciseSet set = ImmutableConciseSet.union(sets)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "List<Integer> actual = new ArrayList<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "verifyIntersection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15->13 [style = solid, label="sets"];
6->3 [style = bold, label=""];
3->7 [style = dotted, label="true"];
0->8 [style = solid, label="expected"];
2->0 [style = dotted, label="true"];
12->5 [style = bold, label=""];
4->6 [style = bold, label=""];
1->15 [style = dashed, label="0"];
5->8 [style = solid, label="actual"];
11->4 [style = bold, label=""];
11->8 [style = solid, label="actual"];
12->15 [style = dotted, label="true"];
9->8 [style = solid, label="expected"];
10->9 [style = dotted, label="true"];
7->3 [style = bold, label=""];
1->4 [style = solid, label="sets"];
12->14 [style = dotted, label="true"];
5->11 [style = dashed, label="0"];
3->7 [style = bold, label=""];
2->1 [style = dotted, label="true"];
3->8 [style = bold, label=""];
5->13 [style = bold, label=""];
5->4 [style = bold, label=""];
14->8 [style = solid, label="expected"];
10->1 [style = dotted, label="true"];
13->6 [style = bold, label=""];
4->13 [style = dashed, label="0"];
2->5 [style = bold, label=""];
10->11 [style = bold, label=""];
}
