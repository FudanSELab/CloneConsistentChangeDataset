digraph {
1 [style = filled, label = "verify(singleObserver,times(1)).onError(any())@@@28@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expected.put(2,\"bb\")@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Map<Integer,String> expected = new LinkedHashMap<Integer,String>()@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "verify(singleObserver,never()).onSuccess(expected)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Supplier<Map<Integer,String>> mapFactory = new Supplier<Map<Integer,String>>(){@Override public Map<Integer,String> get(){throw new RuntimeException(\"Forced failure\")}}@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "expected.put(3,\"ccc\")@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "expected.put(4,\"dddd\")@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "toMapWithErrorThrowingFactory['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Function<String,Integer> lengthFunc = new Function<String,Integer>(){@Override public Integer apply(String t1){return t1.length()}}@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "toMapWithErrorThrowingFactory['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Observable<String> source = Observable.just(\"a\",\"bb\",\"ccc\",\"dddd\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Single<Map<Integer,String>> mapped = source.toMap(lengthFunc,new Function<String,String>(){@Override public String apply(String v){return v}},mapFactory)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "toMapWithErrorThrowingFactory['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "mapped.subscribe(singleObserver)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Flowable<String> source = Flowable.just(\"a\",\"bb\",\"ccc\",\"dddd\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Map<Integer,String> expected = new LinkedHashMap<>()@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4->3 [style = bold, label=""];
9->0 [style = bold, label=""];
13->5 [style = solid, label="expected"];
2->6 [style = bold, label=""];
0->2 [style = bold, label=""];
0->6 [style = solid, label="mapFactory"];
7->4 [style = bold, label=""];
10->13 [style = dashed, label="0"];
11->9 [style = bold, label=""];
12->9 [style = bold, label=""];
8->7 [style = bold, label=""];
10->5 [style = solid, label="expected"];
5->1 [style = bold, label=""];
3->5 [style = bold, label=""];
10->8 [style = bold, label=""];
15->0 [style = bold, label=""];
6->10 [style = bold, label=""];
6->13 [style = bold, label=""];
14->15 [style = bold, label=""];
13->8 [style = bold, label=""];
2->6 [style = solid, label="lengthFunc"];
9->15 [style = dashed, label="0"];
}
