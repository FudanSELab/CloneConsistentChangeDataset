digraph {
1 [style = filled, label = "final MyRelMetadataQuery mq1 = rel.getCluster().getMetadataQuery()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(colType(mq,input,1),equalTo(\"EXPR$1-agg\"))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final RelNode input = rel.getInput(0)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(buf.size(),equalTo(5))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(buf.size(),equalTo(3))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testCustomProviderWithRelMetadataQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertThat(buf.size(),equalTo(5))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "((MockRelOptPlanner)planner).setRelMetadataTimestamp(timestamp + 1)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertThat(buf.size(),equalTo(7))@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertThat(buf.size(),equalTo(7))@@@42@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(colType(mq,rel,1),equalTo(\"EXPR$1-rel\"))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(rel.getCluster().getMetadataQuery(),instanceOf())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final List<String> buf = new ArrayList<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(buf.size(),equalTo(4))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testCustomProviderWithRelMetadataFactory['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertThat(buf.size(),equalTo(6))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "final RelOptPlanner planner = rel.getCluster().getPlanner()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertThat(buf.size(),equalTo(6))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final RelNode rel = root.rel@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(colType(mq,input,1),equalTo(\"EXPR$1-agg\"))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertThat(buf.size(),equalTo(3))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "rel.getCluster().setMetadataProvider(new CachingRelMetadataProvider(rel.getCluster().getMetadataProvider(),planner))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "testCustomProviderWithRelMetadataQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertThat(timestamp,equalTo(0L))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "ColTypeImpl.THREAD_LIST.set(buf)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "rel.getCluster().invalidateMetadataQuery()@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final MyRelMetadataQuery mq = rel.getCluster().getMetadataQuery()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(buf.size(),equalTo(4))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertThat(buf.size(),equalTo(6))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertThat(colType(mq1,input,0),equalTo(\"DEPTNO-agg\"))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(input,instanceOf())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(colType(mq,input,1),equalTo(\"EXPR$1-agg\"))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(colType(mq1,input,0),equalTo(\"DEPTNO-agg\"))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(buf.size(),equalTo(4))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "assertThat(colType(mq,input,1),equalTo(\"EXPR$1-agg\"))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final String sql = \"select deptno, count(*) from emp where deptno > 10 \" + \"group by deptno having count(*) = 0\"@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "long timestamp = planner.getRelMetadataTimestamp(rel)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "assertThat(colType(mq,rel,0),equalTo(\"DEPTNO-rel\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(buf.toString(),equalTo(\"(DEPTNO-rel, EXPR$1-rel, DEPTNO-agg(\"))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(rel.getCluster().getMetadataQuery(),instanceOf())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "final RelMetadataQuery mq = rel.getCluster().getMetadataQuery()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "final RelRoot root = tester.withClusterFactory(null).convertSqlToRel(sql)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(rel,instanceOf())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(buf.size(),equalTo(3))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48->37 [style = solid, label="mq"];
9->18 [style = solid, label="input"];
17->21 [style = bold, label=""];
14->9 [style = solid, label="input"];
36->45 [style = solid, label="timestamp"];
14->46 [style = solid, label="input"];
40->49 [style = bold, label=""];
11->16 [style = bold, label=""];
10->28 [style = bold, label=""];
1->23 [style = bold, label=""];
13->24 [style = bold, label=""];
46->40 [style = bold, label=""];
9->10 [style = solid, label="input"];
3->1 [style = bold, label=""];
9->30 [style = solid, label="input"];
1->30 [style = solid, label="mq1"];
45->46 [style = bold, label=""];
48->19 [style = solid, label="mq"];
48->47 [style = solid, label="mq"];
39->47 [style = bold, label=""];
48->18 [style = solid, label="mq"];
32->0 [style = bold, label=""];
48->16 [style = solid, label="mq"];
36->38 [style = bold, label=""];
33->24 [style = bold, label=""];
14->47 [style = solid, label="input"];
31->34 [style = bold, label=""];
48->51 [style = solid, label="mq"];
22->48 [style = bold, label=""];
47->43 [style = bold, label=""];
20->32 [style = solid, label="sql"];
14->49 [style = solid, label="input"];
0->22 [style = bold, label=""];
0->36 [style = solid, label="rel"];
6->11 [style = bold, label=""];
48->49 [style = solid, label="mq"];
20->32 [style = bold, label=""];
48->46 [style = solid, label="mq"];
26->4 [style = bold, label=""];
28->27 [style = bold, label=""];
11->14 [style = solid, label="mq"];
44->19 [style = bold, label=""];
14->7 [style = solid, label="input"];
14->37 [style = solid, label="input"];
0->51 [style = solid, label="rel"];
14->41 [style = solid, label="input"];
11->8 [style = solid, label="mq"];
12->29 [style = bold, label=""];
9->8 [style = solid, label="input"];
9->29 [style = solid, label="input"];
51->16 [style = bold, label=""];
24->25 [style = bold, label=""];
14->18 [style = solid, label="input"];
9->23 [style = solid, label="input"];
11->29 [style = solid, label="mq"];
38->45 [style = bold, label=""];
50->36 [style = bold, label=""];
24->25 [style = solid, label="buf"];
15->30 [style = bold, label=""];
9->26 [style = solid, label="input"];
23->15 [style = bold, label=""];
22->6 [style = bold, label=""];
29->2 [style = bold, label=""];
11->17 [style = solid, label="mq"];
14->15 [style = solid, label="input"];
14->9 [style = bold, label=""];
48->15 [style = solid, label="mq"];
31->34 [style = solid, label="planner"];
15->44 [style = bold, label=""];
9->17 [style = solid, label="input"];
11->16 [style = solid, label="mq"];
34->41 [style = bold, label=""];
1->23 [style = solid, label="mq1"];
49->42 [style = bold, label=""];
21->7 [style = bold, label=""];
4->10 [style = bold, label=""];
5->3 [style = bold, label=""];
35->24 [style = bold, label=""];
27->31 [style = bold, label=""];
36->38 [style = solid, label="timestamp"];
9->18 [style = bold, label=""];
19->39 [style = bold, label=""];
6->48 [style = dashed, label="0"];
9->27 [style = solid, label="input"];
8->12 [style = bold, label=""];
48->51 [style = bold, label=""];
0->16 [style = solid, label="rel"];
2->5 [style = bold, label=""];
25->20 [style = bold, label=""];
11->10 [style = solid, label="mq"];
31->8 [style = bold, label=""];
26->31 [style = bold, label=""];
0->14 [style = solid, label="rel"];
7->26 [style = bold, label=""];
43->37 [style = bold, label=""];
37->50 [style = bold, label=""];
0->22 [style = solid, label="rel"];
41->29 [style = bold, label=""];
16->14 [style = bold, label=""];
11->26 [style = solid, label="mq"];
14->19 [style = solid, label="input"];
11->27 [style = solid, label="mq"];
30->15 [style = dashed, label="0"];
29->15 [style = bold, label=""];
18->17 [style = bold, label=""];
48->7 [style = solid, label="mq"];
30->19 [style = bold, label=""];
48->41 [style = solid, label="mq"];
}
