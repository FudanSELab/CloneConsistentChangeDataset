digraph {
11 [style = filled, label = "nodes.hasNext()@@@7@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "ELNode node = nodes.next()@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "boolean checkDeferred@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "isExpression['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() && ((ELNode.Root)node).getType() == '#'@@@13@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "String value@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\")) || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")))@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Node n@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "!runtimeExpression && !pageInfo.isELIgnored()@@@5@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "node instanceof ELNode.Root@@@9@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Hashtable<String,Object> tagDataAttrs@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "checkXmlAttributes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "((ELNode.Root)node).getType() == '$'@@@10@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "Node.CustomTag n@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "boolean checkDeferred@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "boolean elExpression = false@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "elExpression = true@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "elExpression = true@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "return runtimeExpression || elExpression@@@19@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "String value@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "isExpression['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Iterator<ELNode> nodes = ELParser.parse(value).iterator()@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "Node.JspAttribute(( jspAttrs@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
19->21 [style = dotted, label="true"];
18->15 [style = dotted, label="true"];
18->3 [style = dotted, label="true"];
2->3 [style = dotted, label="true"];
11->4 [style = bold, label=""];
8->12 [style = bold, label=""];
6->16 [style = solid, label="runtimeExpression"];
12->13 [style = dotted, label="false"];
13->17 [style = bold, label=""];
9->7 [style = dotted, label="true"];
5->16 [style = solid, label="elExpression"];
9->16 [style = bold, label=""];
9->11 [style = dotted, label="true"];
14->9 [style = bold, label=""];
4->8 [style = bold, label=""];
11->16 [style = bold, label=""];
17->16 [style = solid, label="elExpression"];
7->11 [style = bold, label=""];
13->17 [style = dotted, label="true"];
14->16 [style = solid, label="elExpression"];
19->20 [style = dotted, label="true"];
4->8 [style = solid, label="node"];
12->5 [style = dotted, label="true"];
12->13 [style = bold, label=""];
2->1 [style = dotted, label="true"];
8->11 [style = bold, label=""];
11->8 [style = dotted, label="true"];
12->5 [style = bold, label=""];
13->11 [style = bold, label=""];
6->14 [style = bold, label=""];
15->13 [style = solid, label="checkDeferred"];
5->11 [style = bold, label=""];
19->22 [style = dotted, label="true"];
17->11 [style = bold, label=""];
18->10 [style = dotted, label="true"];
11->4 [style = dotted, label="true"];
2->0 [style = dotted, label="true"];
18->6 [style = bold, label=""];
8->12 [style = dotted, label="true"];
9->7 [style = bold, label=""];
}
