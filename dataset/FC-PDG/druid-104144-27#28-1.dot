digraph {
29 [style = filled, label = "System.currentTimeMillis() > startTime + 10 * 1000@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(\"segment1 datasource\",\"foo\",publishedSegments.get(0).getDataSource())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final List<DataSegment> publishedSegments = BY_INTERVAL_ORDERING.sortedCopy(mdc.getPublished())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final List<DataSegment> loggedSegments = BY_INTERVAL_ORDERING.sortedCopy(tsqa.getInsertedSegments(indexTask.getId()))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(\"segment2 interval\",Intervals.of(\"2010-01-02/P1D\"),publishedSegments.get(1).getInterval())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(\"segment1 dimensions\",ImmutableList.of(\"dim1\",\"dim2\"),publishedSegments.get(0).getDimensions())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(\"merged statusCode\",TaskState.SUCCESS,mergedStatus.getStatusCode())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(taskLocation,status.getLocation())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(taskLocation,status.getLocation())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(\"segment1 metrics\",ImmutableList.of(\"met\"),publishedSegments.get(0).getMetrics())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertTrue(\"pre run task status not present\",!preRunTaskStatus.isPresent())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Thread.sleep(100)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(\"num segments nuked\",0,mdc.getNuked().size())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(\"segment1 interval\",Intervals.of(\"2010-01-01/P1D\"),publishedSegments.get(0).getInterval())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final long startTime = System.currentTimeMillis()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "throw new ISE(\"Where did the task go?!: %s\",indexTask.getId())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "tsqa.getStatus(indexTask.getId()).get().isRunnable()@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(\"statusCode\",TaskState.SUCCESS,status.getStatusCode())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final Optional<TaskStatus> preRunTaskStatus = tsqa.getStatus(indexTask.getId())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(\"statusCode\",TaskState.SUCCESS,status.getStatusCode())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testResumeTasks['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testIndexTask['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(\"segment2 datasource\",\"foo\",publishedSegments.get(1).getDataSource())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final TaskStatus mergedStatus = runTask(indexTask)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(\"segment1 dimensions\",ImmutableList.of(\"dim1\",\"dim2\"),publishedSegments.get(0).getDimensions())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final TaskStatus status = taskStorage.getStatus(indexTask.getId()).get()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(\"segments logged vs published\",loggedSegments,publishedSegments)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final List<DataSegment> publishedSegments = BY_INTERVAL_ORDERING.sortedCopy(mdc.getPublished())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(\"segment2 metrics\",ImmutableList.of(\"met\"),publishedSegments.get(1).getMetrics())@@@30@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testIndexTask['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "taskQueue.start()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "taskStorage.insert(indexTask,TaskStatus.running(indexTask.getId()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(\"segment2 dimensions\",ImmutableList.of(\"dim1\",\"dim2\"),publishedSegments.get(1).getDimensions())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final List<DataSegment> loggedSegments = BY_INTERVAL_ORDERING.sortedCopy(tsqa.getInsertedSegments(indexTask.getId()))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final Task indexTask = new IndexTask(null,null,new IndexIngestionSpec(new DataSchema(\"foo\",new TimestampSpec(null,null,null),DimensionsSpec.EMPTY,new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@906c7d,new UniformGranularitySpec(Granularities.DAY,null,ImmutableList.of(Intervals.of(\"2010-01-01/P2D\"))),null),new IndexIOConfig(null,new MockInputSource(),new NoopInputFormat(),false),new IndexTuningConfig(null,10000,null,10,null,null,null,null,null,null,indexSpec,null,null,null,null,null,null,null,null,null,null,null)),null)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final TaskStatus status = taskStorage.getStatus(indexTask.getId()).get()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(\"num segments published\",2,mdc.getPublished().size())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->1 [style = bold, label=""];
1->8 [style = bold, label=""];
28->36 [style = bold, label=""];
31->23 [style = bold, label=""];
27->29 [style = solid, label="startTime"];
29->34 [style = dotted, label="true"];
25->30 [style = bold, label=""];
0->12 [style = bold, label=""];
1->21 [style = solid, label="loggedSegments"];
3->14 [style = bold, label=""];
22->9 [style = bold, label=""];
18->5 [style = solid, label="loggedSegments"];
7->21 [style = solid, label="publishedSegments"];
19->10 [style = bold, label=""];
30->26 [style = dotted, label="true"];
2->9 [style = bold, label=""];
29->34 [style = bold, label=""];
36->33 [style = bold, label=""];
30->29 [style = bold, label=""];
12->7 [style = bold, label=""];
15->5 [style = bold, label=""];
29->26 [style = bold, label=""];
26->30 [style = bold, label=""];
9->27 [style = bold, label=""];
23->35 [style = bold, label=""];
17->5 [style = solid, label="publishedSegments"];
32->9 [style = bold, label=""];
30->29 [style = dotted, label="true"];
30->21 [style = bold, label=""];
8->20 [style = bold, label=""];
20->16 [style = bold, label=""];
0->25 [style = dashed, label="0"];
34->26 [style = bold, label=""];
11->3 [style = bold, label=""];
16->21 [style = bold, label=""];
24->25 [style = bold, label=""];
9->25 [style = solid, label="indexTask"];
10->0 [style = bold, label=""];
15->4 [style = bold, label=""];
18->13 [style = bold, label=""];
9->19 [style = bold, label=""];
33->31 [style = bold, label=""];
27->24 [style = bold, label=""];
5->11 [style = bold, label=""];
13->15 [style = bold, label=""];
21->17 [style = bold, label=""];
4->5 [style = bold, label=""];
14->6 [style = bold, label=""];
17->18 [style = bold, label=""];
9->0 [style = solid, label="indexTask"];
6->28 [style = bold, label=""];
}
