digraph {
16 [style = filled, label = "simplifyIsNull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "RexUtil.isNull(a)@@@6@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Strong.policy(a.getKind())@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "RexNode a@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final List<RexNode> operands = new ArrayList<>()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "simplified == null@@@14@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "((RexCall)a).getOperands()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "return rexBuilder.makeLiteral(false)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "operands.add(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL,operand))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "simplifyIsNotNull['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "return rexBuilder.makeLiteral(false)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "simplifyIsNull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final RexNode simplified = simplifyIsNull(operand)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "a.getKind()@@@25@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "return RexUtil.composeConjunction(rexBuilder,operands,false)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "return RexUtil.composeDisjunction(rexBuilder,operands,false)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "predicates.pulledUpPredicates.contains(a)@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "return rexBuilder.makeLiteral(true)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "return null@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "RexNode operand@@@12@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "return rexBuilder.makeLiteral(false)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "!a.getType().isNullable()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final RexNode simplified = simplifyIsNotNull(operand)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "return rexBuilder.makeLiteral(true)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "simplified.isAlwaysFalse()@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "((RexCall)a).getOperands()@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "((RexCall)a).getOperands()@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "operands.add(rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL,operand))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "operands.add(simplified)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "throw new AssertionError(\"every CUSTOM policy needs a handler, \" + a.getKind())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "return rexBuilder.makeLiteral(true)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "return rexBuilder.makeLiteral(true)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "RexNode a@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "return null@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "return rexBuilder.makeLiteral(!((RexLiteral)a).isNull())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->0 [style = dotted, label="true"];
22->10 [style = solid, label="simplified"];
10->23 [style = bold, label=""];
14->5 [style = dotted, label="true"];
16->2 [style = dotted, label="true"];
14->32 [style = bold, label=""];
19->8 [style = bold, label=""];
15->18 [style = dotted, label="true"];
10->11 [style = bold, label=""];
14->19 [style = bold, label=""];
3->13 [style = bold, label=""];
10->3 [style = bold, label=""];
23->3 [style = dotted, label="false"];
16->1 [style = bold, label=""];
14->28 [style = dotted, label="true"];
8->20 [style = solid, label="operands"];
14->8 [style = bold, label=""];
24->27 [style = bold, label=""];
7->1 [style = bold, label=""];
4->34 [style = dashed, label="0"];
10->11 [style = dotted, label="true"];
0->22 [style = dashed, label="0"];
23->29 [style = bold, label=""];
14->5 [style = bold, label=""];
10->33 [style = dotted, label="true"];
2->25 [style = dashed, label="0"];
20->32 [style = bold, label=""];
11->33 [style = dashed, label="0"];
33->20 [style = bold, label=""];
31->26 [style = bold, label=""];
1->14 [style = bold, label=""];
14->32 [style = dotted, label="true"];
32->24 [style = dotted, label="true"];
25->31 [style = solid, label="a"];
31->26 [style = dotted, label="true"];
8->22 [style = bold, label=""];
11->13 [style = bold, label=""];
1->15 [style = bold, label=""];
1->4 [style = bold, label=""];
14->20 [style = dotted, label="true"];
14->22 [style = dotted, label="true"];
10->23 [style = dotted, label="false"];
3->22 [style = bold, label=""];
23->29 [style = dotted, label="true"];
22->10 [style = bold, label=""];
31->14 [style = bold, label=""];
1->4 [style = dotted, label="true"];
1->34 [style = bold, label=""];
13->5 [style = bold, label=""];
14->17 [style = dotted, label="true"];
7->2 [style = dotted, label="true"];
0->10 [style = solid, label="simplified"];
1->31 [style = bold, label=""];
8->0 [style = bold, label=""];
15->18 [style = bold, label=""];
11->0 [style = bold, label=""];
14->12 [style = bold, label=""];
26->14 [style = bold, label=""];
14->6 [style = dotted, label="true"];
14->13 [style = dotted, label="true"];
15->14 [style = bold, label=""];
34->31 [style = bold, label=""];
1->34 [style = dotted, label="true"];
30->25 [style = dotted, label="true"];
13->20 [style = dashed, label="0"];
30->1 [style = bold, label=""];
18->14 [style = bold, label=""];
12->8 [style = bold, label=""];
29->20 [style = bold, label=""];
14->9 [style = dotted, label="true"];
14->27 [style = bold, label=""];
23->3 [style = bold, label=""];
8->13 [style = solid, label="operands"];
14->27 [style = dotted, label="true"];
14->8 [style = dotted, label="true"];
21->24 [style = bold, label=""];
14->12 [style = dotted, label="true"];
3->20 [style = bold, label=""];
32->21 [style = bold, label=""];
10->3 [style = dotted, label="false"];
0->10 [style = bold, label=""];
33->22 [style = bold, label=""];
32->21 [style = dotted, label="true"];
12->19 [style = dashed, label="0"];
3->0 [style = bold, label=""];
14->10 [style = dotted, label="true"];
14->19 [style = dotted, label="true"];
4->14 [style = bold, label=""];
29->22 [style = bold, label=""];
4->15 [style = bold, label=""];
0->3 [style = solid, label="simplified"];
10->33 [style = bold, label=""];
22->3 [style = solid, label="simplified"];
2->15 [style = solid, label="a"];
32->24 [style = bold, label=""];
}
