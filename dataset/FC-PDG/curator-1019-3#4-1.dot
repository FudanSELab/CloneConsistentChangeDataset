digraph {
1 [style = filled, label = "ACLProvider badAclProvider = new ACLProvider(){@Override public List<ACL> getDefaultAcl(){if (aclProviderCalled.getAndSet(true)) {throw new UnsupportedOperationException()}{return new ArrayList<>()}}@Override public List<ACL> getAclForPath(String path){if (aclProviderCalled.getAndSet(true)) {throw new UnsupportedOperationException()}{return new ArrayList<>()}}}@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final AtomicBoolean aclProviderCalled = new AtomicBoolean(false)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "UnhandledErrorListener listener = null@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertTrue(new Timing().awaitLatch(errorLatch))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(new Timing().awaitLatch(errorLatch))@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testErrorListener['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "testErrorListener['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertTrue(new Timing().awaitLatch(errorLatch))@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "testErrorListener['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).aclProvider(badAclProvider).build()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "async.with(listener).create().forPath(\"/foo\")@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final CountDownLatch errorLatch = new CountDownLatch(1)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "client.start()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@37@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "UnhandledErrorListener listener = new UnhandledErrorListener(){@Override public void unhandledError(String message,Throwable e){if (e instanceof UnsupportedOperationException) {errorLatch.countDown()}}}@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "client.create().inBackground().withUnhandledErrorListener(listener).forPath(\"/foo\")@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@38@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
5->8 [style = bold, label=""];
4->3 [style = bold, label=""];
6->3 [style = solid, label="errorLatch"];
15->13 [style = bold, label=""];
9->0 [style = bold, label=""];
2->6 [style = bold, label=""];
5->2 [style = solid, label="client"];
8->6 [style = bold, label=""];
6->11 [style = solid, label="errorLatch"];
7->4 [style = bold, label=""];
5->10 [style = solid, label="client"];
12->0 [style = bold, label=""];
13->16 [style = bold, label=""];
6->15 [style = bold, label=""];
3->10 [style = bold, label=""];
17->0 [style = bold, label=""];
8->2 [style = bold, label=""];
11->10 [style = bold, label=""];
5->14 [style = solid, label="client"];
0->1 [style = bold, label=""];
7->15 [style = dashed, label="0"];
16->14 [style = bold, label=""];
3->11 [style = dashed, label="0"];
6->7 [style = bold, label=""];
4->11 [style = bold, label=""];
4->13 [style = dashed, label="0"];
6->16 [style = solid, label="errorLatch"];
}
