digraph {
7 [style = filled, label = "Assert.assertEquals(3,results.size())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(expectedRow2,results.get(2))@@@22@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testPartialLimitPushDownMerge['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Row expectedRow1 = GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"dimA\",\"foo\",\"metA\",200L)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Row expectedRow0 = GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"dimA\",\"zortaxx\",\"metA\",999L)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Sequence<Row> queryResult = theRunner3.run(QueryPlus.wrap(query),new HashMap<>())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "QueryRunner<Row> theRunner = new FinalizeResultsQueryRunner<>(toolChest.mergeResults(groupByFactory.mergeRunners(executorService,getRunner1())),(QueryToolChest)toolChest)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "GroupByQuery query = GroupByQuery.builder().setDataSource(\"blah\").setQuerySegmentSpec(intervalSpec).setDimensions(new DefaultDimensionSpec(\"dimA\",null)).setAggregatorSpecs(new LongSumAggregatorFactory(\"metA\",\"metA\")).setLimitSpec(new DefaultLimitSpec(Collections.singletonList(new OrderByColumnSpec(\"dimA\",OrderByColumnSpec.Direction.DESCENDING)),3)).setGranularity(Granularities.ALL).build()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Row expectedRow2 = GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"dimA\",\"world\",\"metA\",150L)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "QueryToolChest<Row,GroupByQuery> toolChest = groupByFactory.getToolchest()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "List<Row> results = queryResult.toList()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Row expectedRow2 = GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"dimA\",\"mango\",\"metA\",190L)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testPartialLimitPushDownMerge['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Sequence<Row> queryResult = theRunner3.run(QueryPlus.wrap(query),Maps.newHashMap())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "GroupByQuery query = GroupByQuery.builder().setDataSource(\"blah\").setQuerySegmentSpec(intervalSpec).setDimensions(new DefaultDimensionSpec(\"dimA\",null)).setAggregatorSpecs(new LongSumAggregatorFactory(\"metA\",\"metA\")).setLimitSpec(new DefaultLimitSpec(Collections.singletonList(new OrderByColumnSpec(\"metA\",OrderByColumnSpec.Direction.DESCENDING,StringComparators.NUMERIC)),3)).setGranularity(Granularities.ALL).setContext(ImmutableMap.of(GroupByQueryConfig.CTX_KEY_FORCE_LIMIT_PUSH_DOWN,true)).build()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "QuerySegmentSpec intervalSpec = new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.utc(0,1000000)))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Row expectedRow1 = GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"dimA\",\"zebra\",\"metA\",180L)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "QueryRunner<Row> theRunner2 = new FinalizeResultsQueryRunner<>(toolChest.mergeResults(tooSmallGroupByFactory.mergeRunners(executorService,getRunner2())),(QueryToolChest)toolChest)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(expectedRow1,results.get(1))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testPartialLimitPushDownMergeForceAggs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "QueryRunner<Row> theRunner3 = new FinalizeResultsQueryRunner<>(toolChest.mergeResults(new QueryRunner<Row>(){@Override public Sequence<Row> run(QueryPlus<Row> queryPlus,Map<String,Object> responseContext){return Sequences.simple(ImmutableList.of(theRunner.run(queryPlus,responseContext),theRunner2.run(queryPlus,responseContext))).flatMerge(Function.identity(),queryPlus.getQuery().getResultOrdering())}}),(QueryToolChest)toolChest)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(expectedRow0,results.get(0))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12->17 [style = solid, label="query"];
14->3 [style = bold, label=""];
9->6 [style = solid, label="expectedRow1"];
12->20 [style = dashed, label="0"];
15->7 [style = bold, label=""];
5->9 [style = bold, label=""];
2->6 [style = bold, label=""];
15->1 [style = solid, label="expectedRow2"];
20->0 [style = bold, label=""];
12->17 [style = bold, label=""];
15->18 [style = dashed, label="0"];
0->11 [style = bold, label=""];
12->0 [style = bold, label=""];
0->17 [style = dashed, label="0"];
21->18 [style = bold, label=""];
21->6 [style = solid, label="expectedRow1"];
12->0 [style = solid, label="query"];
5->21 [style = bold, label=""];
3->10 [style = bold, label=""];
6->1 [style = bold, label=""];
11->5 [style = bold, label=""];
14->10 [style = solid, label="toolChest"];
14->3 [style = solid, label="toolChest"];
8->20 [style = bold, label=""];
19->14 [style = bold, label=""];
9->21 [style = dashed, label="0"];
9->15 [style = bold, label=""];
7->2 [style = bold, label=""];
5->2 [style = solid, label="expectedRow0"];
10->4 [style = bold, label=""];
14->4 [style = solid, label="toolChest"];
4->8 [style = bold, label=""];
16->14 [style = bold, label=""];
18->1 [style = solid, label="expectedRow2"];
20->0 [style = solid, label="query"];
18->7 [style = bold, label=""];
13->14 [style = bold, label=""];
8->12 [style = bold, label=""];
17->11 [style = bold, label=""];
}
