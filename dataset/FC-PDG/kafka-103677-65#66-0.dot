digraph {
42 [style = filled, label = "assertEquals(400,maxMetric.value(),EPSILON)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "testQuotaMetrics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "ClientRequest request = client.newClientRequest(node.idString(),builder,time.milliseconds(),true)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "client.close()@@@36@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(this.senderMetricsRegistry.produceThrottleTimeAvg)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "buffer = response.serialize(ApiKeys.FETCH.latestVersion(),new ResponseHeader(request.correlationId()))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "FetchResponse response = fullFetchResponse(tp0,nextRecords,Errors.NONE,i,throttleTimeMs)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ProduceRequest.Builder builder = ProduceRequest.Builder.forCurrentMagic((short)1,1000,Collections.emptyMap())@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "time.sleep(client.throttleDelayMs(node,time.milliseconds()))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "i++@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "selector.clear()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testQuotaMetrics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "MockSelector selector = new MockSelector(time)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "buffer = response.serialize(ApiKeys.PRODUCE.latestVersion(),new ResponseHeader(request.correlationId()))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "client.poll(1,time.milliseconds())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "!client.ready(node,time.milliseconds())@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchThrottleTimeAvg))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "client.poll(1,time.milliseconds())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Cluster cluster = TestUtils.singletonCluster(\"test\",1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "FetchRequest.Builder builder = FetchRequest.Builder.forConsumer(100,100,new LinkedHashMap<TopicPartition,PartitionData>())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(250,avgMetric.value(),EPS)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "NetworkClient client = new NetworkClient(selector,metadata,\"mock\",Integer.MAX_VALUE,1000,1000,64 * 1024,64 * 1024,1000,time,true,new ApiVersions(),throttleTimeSensor,logContext)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "selector.delayedReceive(new DelayedReceive(node.idString(),new NetworkReceive(node.idString(),buffer)))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "time.sleep(client.throttleDelayMs(node,time.milliseconds()))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ByteBuffer buffer = ApiVersionsResponse.createApiVersionsResponse(400,RecordBatch.CURRENT_MAGIC_VALUE).serialize(apiVersionsResponseVersion,new ResponseHeader(0))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Sensor throttleTimeSensor = Sender.throttleTimeSensor(this.senderMetricsRegistry)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(this.senderMetricsRegistry.produceThrottleTimeMax)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "client.poll(1,time.milliseconds())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "i <= 3@@@17@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "ProduceRequest.Builder builder = ProduceRequest.Builder.forCurrentMagic((short)1,1000,Collections.emptyMap())@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "short apiVersionsResponseVersion = ApiKeys.API_VERSIONS.latestVersion()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "client.send(request,time.milliseconds())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "selector.clear()@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchThrottleTimeMax))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "ProduceResponse response = produceResponse(tp0,i,Errors.NONE,throttleTimeMs)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(400,maxMetric.value(),EPS)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "NetworkClient client = new NetworkClient(selector,metadata,\"mock\",Integer.MAX_VALUE,1000,1000,64 * 1024,64 * 1024,1000,time,true,new ApiVersions(),throttleTimeSensor,new LogContext())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "testQuotaMetrics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "assertEquals(250,avgMetric.value(),EPSILON)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Node node = cluster.nodes().get(0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ClientRequest request = client.newClientRequest(node.idString(),builder,time.milliseconds(),true,null)@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "selector.completeReceive(new NetworkReceive(node.idString(),buffer))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "int throttleTimeMs = 100 * i@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "int i = 1@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Sensor throttleTimeSensor = Fetcher.throttleTimeSensor(metrics,metricsRegistry)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->30 [style = bold, label=""];
31->37 [style = bold, label=""];
34->20 [style = bold, label=""];
25->43 [style = solid, label="i"];
0->8 [style = solid, label="node"];
12->25 [style = solid, label="i"];
11->29 [style = bold, label=""];
25->14 [style = bold, label=""];
4->39 [style = dashed, label="0"];
7->8 [style = bold, label=""];
17->41 [style = dashed, label="0"];
28->0 [style = bold, label=""];
14->21 [style = dotted, label="true"];
14->39 [style = dotted, label="true"];
14->7 [style = dotted, label="true"];
27->17 [style = bold, label=""];
4->21 [style = solid, label="buffer"];
29->43 [style = bold, label=""];
14->11 [style = dotted, label="true"];
35->11 [style = solid, label="request"];
19->15 [style = bold, label=""];
2->25 [style = bold, label=""];
14->18 [style = dotted, label="true"];
20->45 [style = bold, label=""];
20->30 [style = solid, label="selector"];
18->33 [style = dashed, label="0"];
12->31 [style = solid, label="i"];
24->28 [style = bold, label=""];
14->2 [style = dotted, label="true"];
37->1 [style = bold, label=""];
4->21 [style = bold, label=""];
6->42 [style = dashed, label="0"];
25->9 [style = solid, label="i"];
13->40 [style = bold, label=""];
30->36 [style = dashed, label="0"];
22->23 [style = bold, label=""];
18->1 [style = solid, label="builder"];
0->36 [style = bold, label=""];
1->11 [style = bold, label=""];
25->14 [style = solid, label="i"];
0->23 [style = solid, label="node"];
24->45 [style = dashed, label="0"];
12->14 [style = solid, label="i"];
18->1 [style = bold, label=""];
14->37 [style = dotted, label="true"];
31->33 [style = bold, label=""];
45->36 [style = solid, label="throttleTimeSensor"];
14->25 [style = dotted, label="true"];
19->22 [style = dotted, label="true"];
12->14 [style = bold, label=""];
44->41 [style = bold, label=""];
21->7 [style = bold, label=""];
15->12 [style = bold, label=""];
14->1 [style = dotted, label="true"];
14->4 [style = dotted, label="true"];
19->22 [style = bold, label=""];
13->10 [style = bold, label=""];
32->16 [style = solid, label="apiVersionsResponseVersion"];
38->20 [style = bold, label=""];
6->26 [style = bold, label=""];
1->35 [style = dashed, label="0"];
17->6 [style = bold, label=""];
30->32 [style = bold, label=""];
32->16 [style = bold, label=""];
25->31 [style = solid, label="i"];
9->43 [style = dashed, label="0"];
5->19 [style = bold, label=""];
39->21 [style = bold, label=""];
31->43 [style = solid, label="throttleTimeMs"];
10->40 [style = dashed, label="0"];
8->2 [style = bold, label=""];
39->21 [style = solid, label="buffer"];
23->19 [style = bold, label=""];
14->31 [style = bold, label=""];
14->8 [style = dotted, label="true"];
16->5 [style = bold, label=""];
24->30 [style = solid, label="throttleTimeSensor"];
27->44 [style = dashed, label="0"];
14->13 [style = bold, label=""];
43->39 [style = bold, label=""];
20->36 [style = solid, label="selector"];
33->35 [style = solid, label="builder"];
12->43 [style = solid, label="i"];
40->44 [style = bold, label=""];
1->11 [style = solid, label="request"];
42->26 [style = bold, label=""];
12->9 [style = solid, label="i"];
33->35 [style = bold, label=""];
14->33 [style = dotted, label="true"];
10->27 [style = bold, label=""];
9->4 [style = bold, label=""];
37->1 [style = solid, label="builder"];
29->9 [style = bold, label=""];
16->5 [style = solid, label="buffer"];
19->23 [style = dotted, label="true"];
36->32 [style = bold, label=""];
31->18 [style = bold, label=""];
14->43 [style = dotted, label="true"];
45->28 [style = bold, label=""];
31->9 [style = solid, label="throttleTimeMs"];
3->20 [style = bold, label=""];
35->11 [style = bold, label=""];
14->29 [style = dotted, label="true"];
14->31 [style = dotted, label="true"];
14->9 [style = dotted, label="true"];
14->35 [style = dotted, label="true"];
20->24 [style = bold, label=""];
41->42 [style = bold, label=""];
}
