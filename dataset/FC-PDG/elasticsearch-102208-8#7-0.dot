digraph {
14 [style = filled, label = "ShardRouting shardRouting = TestShardRouting.newShardRouting(new ShardId(idx,shardId),null,true,ShardRoutingState.UNASSIGNED,RecoverySource.LocalShardsRecoverySource.INSTANCE)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Metadata metadata = metaBuilder.build()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "MetaData metaData = metaBuilder.build()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "String allowedNode = clusterState.getRoutingTable().index(\"source\").shard(sourceShardId).primaryShard().currentNodeId()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "int sourceShardId = IndexMetadata.selectSplitShard(shardId,clusterState.metadata().index(\"source\"),4).id()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(\"source primary is allocated on another node\",resizeAllocationDecider.canAllocate(shardRouting,clusterState.getRoutingNodes().node(\"node2\"),routingAllocation).getExplanation())@@@30@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "\"node1\".equals(allowedNode)@@@18@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "int shardId = randomIntBetween(0,3)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "MetaData.Builder metaBuilder = MetaData.builder(clusterState.metaData())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "RoutingAllocation routingAllocation = new RoutingAllocation(null,clusterState.getRoutingNodes(),clusterState,null,0)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "routingTableBuilder.addAsNew(metaData.index(\"target\"))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "ResizeAllocationDecider resizeAllocationDecider = new ResizeAllocationDecider()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(Decision.NO,resizeAllocationDecider.canAllocate(shardRouting,clusterState.getRoutingNodes().node(\"node2\"),routingAllocation))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testSourcePrimaryActive['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "assertEquals(Decision.ALWAYS,resizeAllocationDecider.canAllocate(shardRouting,clusterState.getRoutingNodes().node(\"node1\"),routingAllocation))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(\"source primary is allocated on this node\",resizeAllocationDecider.canAllocate(shardRouting,clusterState.getRoutingNodes().node(\"node2\"),routingAllocation).getExplanation())@@@34@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "clusterState = ClusterState.builder(clusterState).routingTable(routingTableBuilder.build()).metaData(metaData).build()@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "RoutingAllocation routingAllocation = new RoutingAllocation(null,null,clusterState,null,0)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(Decision.YES,resizeAllocationDecider.canAllocate(shardRouting,clusterState.getRoutingNodes().node(\"node1\"),routingAllocation))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(\"source primary is allocated on this node\",resizeAllocationDecider.canAllocate(shardRouting,clusterState.getRoutingNodes().node(\"node1\"),routingAllocation).getExplanation())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "\"node1\".equals(allowedNode)@@@28@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "RoutingTable.Builder routingTableBuilder = RoutingTable.builder(clusterState.routingTable())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "ShardRouting shardRouting = TestShardRouting.newShardRouting(\"non-resize\",0,null,true,ShardRoutingState.UNASSIGNED)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testSourcePrimaryActive['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "routingTableBuilder.addAsNew(metadata.index(\"target\"))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(\"source primary is active\",resizeAllocationDecider.canAllocate(shardRouting,routingAllocation).getExplanation())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "testNonResizeRouting['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "clusterState = ClusterState.builder(clusterState).routingTable(routingTableBuilder.build()).metadata(metadata).build()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertEquals(Decision.YES,resizeAllocationDecider.canAllocate(shardRouting,routingAllocation))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ClusterState clusterState = createInitialClusterState(true)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Index idx = clusterState.metadata().index(\"target\").getIndex()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "Index idx = clusterState.metaData().index(\"target\").getIndex()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "routingAllocation.debugDecision(true)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Metadata.Builder metaBuilder = Metadata.builder(clusterState.metadata())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "int sourceShardId = IndexMetaData.selectSplitShard(shardId,clusterState.metaData().index(\"source\"),4).id()@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertEquals(\"source primary is allocated on another node\",resizeAllocationDecider.canAllocate(shardRouting,clusterState.getRoutingNodes().node(\"node1\"),routingAllocation).getExplanation())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "metaBuilder.put(IndexMetadata.builder(\"target\").settings(settings(Version.CURRENT).put(IndexMetadata.INDEX_RESIZE_SOURCE_NAME.getKey(),\"source\").put(IndexMetadata.INDEX_RESIZE_SOURCE_UUID_KEY,IndexMetadata.INDEX_UUID_NA_VALUE)).numberOfShards(4).numberOfReplicas(0))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "metaBuilder.put(IndexMetaData.builder(\"target\").settings(settings(Version.CURRENT).put(IndexMetaData.INDEX_RESIZE_SOURCE_NAME.getKey(),\"source\").put(IndexMetaData.INDEX_RESIZE_SOURCE_UUID_KEY,IndexMetaData.INDEX_UUID_NA_VALUE)).numberOfShards(4).numberOfReplicas(0))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "assertEquals(Decision.ALWAYS,resizeAllocationDecider.canAllocate(shardRouting,routingAllocation))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(Decision.NO,resizeAllocationDecider.canAllocate(shardRouting,clusterState.getRoutingNodes().node(\"node1\"),routingAllocation))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(Decision.YES,resizeAllocationDecider.canAllocate(shardRouting,clusterState.getRoutingNodes().node(\"node2\"),routingAllocation))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->3 [style = bold, label=""];
17->10 [style = bold, label=""];
23->20 [style = bold, label=""];
2->29 [style = dashed, label="0"];
35->16 [style = bold, label=""];
10->15 [style = bold, label=""];
16->37 [style = solid, label="clusterState"];
8->23 [style = bold, label=""];
14->22 [style = solid, label="shardRouting"];
12->37 [style = dashed, label="0"];
8->33 [style = dashed, label="0"];
12->3 [style = solid, label="routingAllocation"];
10->22 [style = dotted, label="false"];
26->29 [style = bold, label=""];
28->31 [style = bold, label=""];
11->6 [style = bold, label=""];
5->1 [style = dotted, label="true"];
22->21 [style = bold, label=""];
5->11 [style = dotted, label="false"];
16->34 [style = bold, label=""];
38->36 [style = bold, label=""];
13->14 [style = solid, label="shardId"];
13->30 [style = bold, label=""];
38->36 [style = solid, label="shardRouting"];
16->19 [style = bold, label=""];
27->31 [style = dashed, label="0"];
37->36 [style = solid, label="routingAllocation"];
1->7 [style = bold, label=""];
36->39 [style = bold, label=""];
37->39 [style = solid, label="routingAllocation"];
19->25 [style = bold, label=""];
14->0 [style = solid, label="shardRouting"];
8->12 [style = solid, label="clusterState"];
38->39 [style = solid, label="shardRouting"];
23->32 [style = dashed, label="0"];
10->15 [style = dotted, label="true"];
25->27 [style = bold, label=""];
12->13 [style = bold, label=""];
5->1 [style = bold, label=""];
26->2 [style = bold, label=""];
34->28 [style = bold, label=""];
31->26 [style = bold, label=""];
29->33 [style = bold, label=""];
17->10 [style = solid, label="allowedNode"];
33->12 [style = solid, label="clusterState"];
40->16 [style = bold, label=""];
19->34 [style = dashed, label="0"];
12->15 [style = solid, label="routingAllocation"];
24->21 [style = bold, label=""];
32->14 [style = solid, label="idx"];
5->6 [style = dotted, label="false"];
14->24 [style = solid, label="shardRouting"];
5->7 [style = dotted, label="true"];
37->38 [style = bold, label=""];
10->24 [style = dotted, label="true"];
15->24 [style = bold, label=""];
0->22 [style = bold, label=""];
10->0 [style = bold, label=""];
12->24 [style = solid, label="routingAllocation"];
20->12 [style = bold, label=""];
14->3 [style = solid, label="shardRouting"];
20->37 [style = bold, label=""];
9->14 [style = bold, label=""];
14->15 [style = solid, label="shardRouting"];
10->0 [style = dotted, label="false"];
30->14 [style = bold, label=""];
3->17 [style = bold, label=""];
33->32 [style = bold, label=""];
5->11 [style = bold, label=""];
13->9 [style = bold, label=""];
25->28 [style = dashed, label="0"];
23->14 [style = solid, label="idx"];
16->20 [style = bold, label=""];
17->5 [style = solid, label="allowedNode"];
12->22 [style = solid, label="routingAllocation"];
4->5 [style = bold, label=""];
32->20 [style = bold, label=""];
12->0 [style = solid, label="routingAllocation"];
9->30 [style = dashed, label="0"];
2->8 [style = bold, label=""];
21->4 [style = bold, label=""];
27->26 [style = bold, label=""];
18->16 [style = bold, label=""];
}
