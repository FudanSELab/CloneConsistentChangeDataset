digraph {
11 [style = filled, label = "Assert.assertFalse(\"Should not match: range may not overlap data\",shouldRead)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "boolean shouldRead = new StrictMetricsEvaluator(SCHEMA,and(greaterThan(\"id\",5),lessThanOrEqual(\"id\",30))).eval(FILE)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "shouldRead = new StrictMetricsEvaluator(SCHEMA,and(lessThan(\"id\",5),greaterThanOrEqual(\"id\",0))).eval(FILE)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "boolean shouldRead = new StrictMetricsEvaluator(SCHEMA,or(lessThan(\"id\",5),greaterThanOrEqual(\"id\",80))).eval(FILE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "shouldRead = new StrictMetricsEvaluator(SCHEMA,or(lessThan(\"id\",5),greaterThanOrEqual(\"id\",30))).eval(FILE)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "shouldRead = new StrictMetricsEvaluator(SCHEMA,or(lessThan(\"id\",5),greaterThanOrEqual(\"id\",60))).eval(FILE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertFalse(\"Should not match: range overlaps data\",shouldRead)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "shouldRead = new StrictMetricsEvaluator(SCHEMA,and(lessThan(\"id\",INT_MAX_VALUE + 6),greaterThanOrEqual(\"id\",INT_MIN_VALUE - 30))).eval(FILE)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertFalse(\"Should match: range does not overlap data\",shouldRead)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Assert.assertFalse(\"Should not match: range does not overlap data\",shouldRead)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testAnd['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Assert.assertTrue(\"Should match: all values match > 30\",shouldRead)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "shouldRead = new StrictMetricsEvaluator(SCHEMA,and(lessThan(\"id\",85),greaterThanOrEqual(\"id\",0))).eval(FILE)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Assert.assertFalse(\"Should not match: no matching values\",shouldRead)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testAnd['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertFalse(\"Should not match: some values do not match\",shouldRead)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testOr['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertTrue(\"Should match: range includes all data\",shouldRead)@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "shouldRead = new StrictMetricsEvaluator(SCHEMA,and(lessThan(\"id\",INT_MIN_VALUE - 25),greaterThanOrEqual(\"id\",INT_MIN_VALUE - 30))).eval(FILE)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "boolean shouldRead = new StrictMetricsEvaluator(SCHEMA,and(greaterThan(\"id\",INT_MIN_VALUE - 25),lessThanOrEqual(\"id\",INT_MIN_VALUE))).eval(FILE)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2->5 [style = solid, label="shouldRead"];
1->4 [style = bold, label=""];
3->1 [style = bold, label=""];
7->10 [style = solid, label="shouldRead"];
4->6 [style = bold, label=""];
7->10 [style = bold, label=""];
6->7 [style = dashed, label="0"];
0->2 [style = bold, label=""];
8->11 [style = solid, label="shouldRead"];
1->4 [style = solid, label="shouldRead"];
6->0 [style = bold, label=""];
6->0 [style = solid, label="shouldRead"];
6->14 [style = dashed, label="0"];
16->19 [style = bold, label=""];
2->17 [style = dashed, label="0"];
0->10 [style = dashed, label="0"];
13->17 [style = bold, label=""];
16->19 [style = solid, label="shouldRead"];
19->14 [style = bold, label=""];
2->9 [style = dashed, label="0"];
12->8 [style = bold, label=""];
1->16 [style = dashed, label="0"];
0->13 [style = dashed, label="0"];
17->15 [style = bold, label=""];
9->5 [style = bold, label=""];
4->19 [style = dashed, label="0"];
9->5 [style = solid, label="shouldRead"];
1->8 [style = dashed, label="0"];
10->9 [style = bold, label=""];
14->13 [style = bold, label=""];
4->11 [style = dashed, label="0"];
14->13 [style = solid, label="shouldRead"];
5->15 [style = dashed, label="0"];
17->15 [style = solid, label="shouldRead"];
8->11 [style = bold, label=""];
11->7 [style = bold, label=""];
2->5 [style = bold, label=""];
18->16 [style = bold, label=""];
}
