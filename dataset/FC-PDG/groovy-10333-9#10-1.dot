digraph {
13 [style = filled, label = "Class fooClass = loadClass(classNode)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "classNode.addMethod(new MethodNode(\"oneParamDemo\",ACC_PUBLIC,ClassHelper.VOID_TYPE,parameters,ClassNode.EMPTY_ARRAY,statement))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "classNode.addMethod(new MethodNode(\"manyParamDemo\",ACC_PUBLIC,ClassHelper.VOID_TYPE,parameters,ClassNode.EMPTY_ARRAY,statement))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testNonLoop['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Statement statement = createPrintlnStatement(new VariableExpression(\"coll\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(\"Loaded a new class\",fooClass != null)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "statement.addStatement(createPrintlnStatement(new VariableExpression(\"coll2\")))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "System.out.println(\"Caught: \" + e.getCause())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "System.out.println(\"Caught: \" + e.getCause())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "statement.addStatement(createPrintlnStatement(new VariableExpression(\"coll3\")))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Class fooClass = loadClass(classNode)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "fail(\"Should not have thrown an exception\")@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "e.getCause().printStackTrace()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "InvokerInvocationException e@@@24@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "statement.addStatement(createPrintlnStatement(new VariableExpression(\"coll1\")))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Object bean = fooClass.newInstance()@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertTrue(\"Loaded a new class\",fooClass != null)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "fail(\"Should not have thrown an exception\")@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "classNode.addConstructor(new ConstructorNode(ACC_PUBLIC,null))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "BlockStatement statement = new BlockStatement()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "InvokerHelper.invokeMethod(bean,\"oneParamDemo\",new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16144b0)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ClassNode classNode = new ClassNode(\"Foo\",ACC_PUBLIC,ClassHelper.OBJECT_TYPE)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Object bean = fooClass.getDeclaredConstructor().newInstance()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Parameter(( parameters = {new Parameter(ClassHelper.OBJECT_TYPE,\"coll1\"),new Parameter(ClassHelper.OBJECT_TYPE,\"coll2\"),new Parameter(ClassHelper.OBJECT_TYPE,\"coll3\")}@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "System.out.println(\"################ Done\")@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "InvokerHelper.invokeMethod(bean,\"manyParamDemo\",array)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "testManyParam['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "InvokerInvocationException e@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Object(( array = {new Integer(1000 * 1000),\"foo-\",\"bar~\"}@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Object bean = fooClass.newInstance()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testNonLoop['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "System.out.println(\"################ Now about to invoke a method with many parameters\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertTrue(\"Managed to create bean\",bean != null)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "e.getCause().printStackTrace()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
28->29 [style = bold, label=""];
11->5 [style = solid, label="classNode"];
25->28 [style = solid, label="array"];
22->21 [style = dotted, label="true"];
15->10 [style = bold, label=""];
23->20 [style = bold, label=""];
25->28 [style = bold, label=""];
22->33 [style = bold, label=""];
33->16 [style = bold, label=""];
19->5 [style = solid, label="bean"];
9->11 [style = bold, label=""];
17->6 [style = bold, label=""];
7->12 [style = bold, label=""];
14->28 [style = dashed, label="0"];
8->19 [style = bold, label=""];
7->2 [style = solid, label="parameters"];
18->11 [style = bold, label=""];
1->3 [style = bold, label=""];
22->33 [style = dotted, label="true"];
30->25 [style = bold, label=""];
15->10 [style = dotted, label="true"];
3->16 [style = bold, label=""];
5->17 [style = bold, label=""];
12->2 [style = solid, label="statement"];
26->27 [style = solid, label="statement"];
2->13 [style = bold, label=""];
0->7 [style = bold, label=""];
7->26 [style = bold, label=""];
6->14 [style = bold, label=""];
4->5 [style = solid, label="bean"];
19->5 [style = bold, label=""];
19->14 [style = solid, label="bean"];
5->17 [style = solid, label="fooClass"];
6->28 [style = solid, label="bean"];
12->2 [style = bold, label=""];
15->3 [style = dotted, label="true"];
11->0 [style = bold, label=""];
6->14 [style = solid, label="value"];
21->29 [style = bold, label=""];
6->31 [style = bold, label=""];
6->31 [style = solid, label="bean"];
6->25 [style = dashed, label="0"];
12->26 [style = dashed, label="0"];
16->21 [style = bold, label=""];
15->1 [style = dotted, label="true"];
22->16 [style = dotted, label="true"];
26->23 [style = bold, label=""];
31->30 [style = bold, label=""];
11->13 [style = solid, label="classNode"];
4->19 [style = dashed, label="0"];
8->4 [style = bold, label=""];
27->5 [style = bold, label=""];
13->8 [style = bold, label=""];
20->24 [style = bold, label=""];
10->1 [style = bold, label=""];
32->11 [style = bold, label=""];
13->8 [style = solid, label="fooClass"];
17->30 [style = dashed, label="0"];
4->5 [style = bold, label=""];
24->27 [style = bold, label=""];
7->27 [style = solid, label="parameters"];
4->14 [style = solid, label="bean"];
}
