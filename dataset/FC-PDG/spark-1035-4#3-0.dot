digraph {
14 [style = filled, label = "Assert.assertEquals(hasher.hashUnsafeWordsBlock(mb),hasher.hashUnsafeWordsBlock(mb))@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "System.arraycopy(strBytes,0,paddedBytes,0,strBytes.length)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize),hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "int i = 0@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Set<Long> hashcodes = new HashSet<>()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "i++@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "randomizedStressTestPaddedStrings['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "MemoryBlock mb = ByteArrayMemoryBlock.fromArray(paddedBytes)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "randomizedStressTestPaddedStrings['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95d)@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "byte(( paddedBytes = new byte((((@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "byte(( strBytes = String.valueOf(i).getBytes(StandardCharsets.UTF_8)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "int size = 64000@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95d)@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "i < size@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "hashcodes.add(hasher.hashUnsafeWordsBlock(mb))@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "int byteArrSize = 8@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "hashcodes.add(hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Set<Integer> hashcodes = new HashSet<>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "randomizedStressTestPaddedStrings['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0->19 [style = dashed, label="0"];
3->20 [style = dashed, label="0"];
10->13 [style = dotted, label="true"];
10->1 [style = dotted, label="true"];
9->6 [style = solid, label="paddedBytes"];
14->16 [style = bold, label=""];
18->4 [style = bold, label=""];
8->4 [style = bold, label=""];
10->12 [style = dotted, label="true"];
4->3 [style = solid, label="size"];
7->10 [style = bold, label=""];
11->1 [style = solid, label="byteArrSize"];
1->14 [style = dashed, label="0"];
12->1 [style = bold, label=""];
6->13 [style = bold, label=""];
13->14 [style = solid, label="mb"];
10->11 [style = bold, label=""];
2->10 [style = bold, label=""];
7->10 [style = solid, label="i"];
5->9 [style = bold, label=""];
2->10 [style = solid, label="i"];
10->7 [style = dotted, label="true"];
5->6 [style = solid, label="strBytes"];
10->3 [style = bold, label=""];
9->12 [style = solid, label="paddedBytes"];
9->13 [style = solid, label="paddedBytes"];
9->6 [style = bold, label=""];
10->16 [style = dotted, label="true"];
17->4 [style = bold, label=""];
4->19 [style = bold, label=""];
2->7 [style = solid, label="i"];
6->12 [style = bold, label=""];
13->16 [style = solid, label="mb"];
4->10 [style = solid, label="size"];
11->12 [style = solid, label="byteArrSize"];
16->7 [style = bold, label=""];
10->6 [style = dotted, label="true"];
4->15 [style = solid, label="size"];
10->15 [style = bold, label=""];
19->2 [style = bold, label=""];
0->2 [style = bold, label=""];
1->7 [style = bold, label=""];
13->14 [style = bold, label=""];
10->11 [style = dotted, label="true"];
10->14 [style = dotted, label="true"];
4->20 [style = solid, label="size"];
10->9 [style = dotted, label="true"];
4->0 [style = bold, label=""];
11->5 [style = bold, label=""];
10->5 [style = dotted, label="true"];
9->1 [style = solid, label="paddedBytes"];
10->20 [style = bold, label=""];
}
