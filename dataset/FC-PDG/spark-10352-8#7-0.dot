digraph {
2 [style = filled, label = "PlatformDependent.copyMemory(baseObject,baseOffset + offset,bytes,PlatformDependent.BYTE_ARRAY_OFFSET,size)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final int size = (int)(offsetAndSize & ((1L << 32) - 1))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "isNullAt(ordinal)@@@4@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final int stringSizeInBytes = (int)PlatformDependent.UNSAFE.getLong(baseObject,baseOffset + offsetToStringSize)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "getBinary['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertIndexIsValid(ordinal)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "PlatformDependent.copyMemory(baseObject,baseOffset + offsetToStringSize + 8,strBytes,PlatformDependent.BYTE_ARRAY_OFFSET,stringSizeInBytes)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "getUTF8String['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final byte(( strBytes = new byte((((@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "int i@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final long offsetToStringSize = getLong(i)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "return UTF8String.fromBytes(strBytes)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "return null@@@5@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final byte(( bytes = new byte((((@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "int ordinal@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "return bytes@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "getBinary['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertIndexIsValid(i)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertIndexIsValid(ordinal)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->3 [style = bold, label=""];
8->4 [style = solid, label="offsetAndSize"];
14->19 [style = dotted, label="true"];
9->0 [style = solid, label="ordinal"];
0->8 [style = dotted, label="false"];
0->6 [style = dotted, label="false"];
2->1 [style = bold, label=""];
6->1 [style = solid, label="bytes"];
0->4 [style = dotted, label="false"];
0->2 [style = dotted, label="false"];
11->9 [style = dotted, label="true"];
7->0 [style = bold, label=""];
11->12 [style = bold, label=""];
16->17 [style = bold, label=""];
0->1 [style = dotted, label="false"];
9->10 [style = solid, label="ordinal"];
7->9 [style = dotted, label="true"];
12->0 [style = bold, label=""];
4->2 [style = solid, label="offset"];
17->18 [style = solid, label="strBytes"];
5->2 [style = solid, label="size"];
6->2 [style = bold, label=""];
9->19 [style = dashed, label="0"];
19->20 [style = solid, label="i"];
0->10 [style = bold, label=""];
9->8 [style = solid, label="ordinal"];
20->16 [style = solid, label="offsetToStringSize"];
20->16 [style = bold, label=""];
5->6 [style = bold, label=""];
10->8 [style = bold, label=""];
15->20 [style = bold, label=""];
6->2 [style = solid, label="bytes"];
20->13 [style = solid, label="offsetToStringSize"];
0->8 [style = bold, label=""];
9->12 [style = solid, label="ordinal"];
0->5 [style = dotted, label="false"];
14->15 [style = bold, label=""];
17->13 [style = bold, label=""];
0->3 [style = dotted, label="true"];
8->4 [style = bold, label=""];
19->15 [style = solid, label="i"];
17->13 [style = solid, label="strBytes"];
16->13 [style = solid, label="stringSizeInBytes"];
8->5 [style = solid, label="offsetAndSize"];
4->5 [style = bold, label=""];
13->18 [style = bold, label=""];
0->10 [style = dotted, label="false"];
}
