digraph {
10 [style = filled, label = "Assert.assertEquals(\"There should be 10 values in the set\",10,values.size())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(\"should have max=999\",999L,values.get(\"max_test\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "testValues['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(\"sum_key2_test should =14\",14L,values.get(\"sum_key2_test\"))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "testValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\"cnt_key1_test should =2\",2L,values.get(\"cnt_key1_test\"))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertEquals(\"min_key1_test should =0\",0L,values.get(\"min_key1_test\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(\"avg_key1_test should =0.5\",0.5D,values.get(\"avg_key1_test\"))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertEquals(\"avg_key1_test should =0.5\",0.5D,values.get(\"avg_key1_test\"))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "Assert.assertEquals(\"should have min=0\",0L,values.get(\"min_test\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(\"min_key1_test should =0\",0L,values.get(\"min_key1_test\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(\"max_key1_test should =1\",1L,values.get(\"max_key1_test\"))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "testValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertEquals(\"max_key1_test should =1\",1L,values.get(\"max_key1_test\"))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Assert.assertEquals(\"sum_key1_test should =1\",1L,values.get(\"sum_key1_test\"))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertEquals(\"sum_key1_test should =1\",1L,values.get(\"sum_key1_test\"))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertEquals(\"sum_key2_test should =14\",14L,values.get(\"sum_key2_test\"))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Assert.assertEquals(\"min_key2_test should =2\",2L,values.get(\"min_key2_test\"))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(\"should have sum=999*500\",999 * 500L,values.get(\"sum_test\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Map<String,Object> values = testCounter.values()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertEquals(\"should have p95=950\",950L,values.get(\"p95_test\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertEquals(\"There should be 9 values in the set\",9,values.size())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(\"should avg=499.5\",999D / 2,values.get(\"avg_test\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(\"cnt_key2_test should =4\",4L,values.get(\"cnt_key2_test\"))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Assert.assertEquals(\"cnt_key1_test should =2\",2L,values.get(\"cnt_key1_test\"))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Map<String,Object> values = testCounterSet.values()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(\"max_key2_test should =5\",5L,values.get(\"max_key2_test\"))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(\"should have p50=500\",500L,values.get(\"p50_test\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertEquals(\"should have p99=990\",990L,values.get(\"p99_test\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(\"max_key2_test should =5\",5L,values.get(\"max_key2_test\"))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "addDataPoints()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(\"should have cnt=1000\",1000L,values.get(\"cnt_test\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(\"cnt_key2_test should =4\",4L,values.get(\"cnt_key2_test\"))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(\"should have p999=999\",999L,values.get(\"p999_test\"))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"avg_key2_test should =3.5\",3.5,values.get(\"avg_key2_test\"))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertEquals(\"min_key2_test should =2\",2L,values.get(\"min_key2_test\"))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertEquals(\"There should be 10 values in the set\",10,values.size())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(\"avg_key2_test should =3.5\",3.5,values.get(\"avg_key2_test\"))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4->18 [style = dashed, label="0"];
8->19 [style = dashed, label="0"];
23->16 [style = bold, label=""];
9->16 [style = dashed, label="0"];
7->17 [style = dashed, label="0"];
1->26 [style = dashed, label="0"];
25->23 [style = bold, label=""];
8->33 [style = dashed, label="0"];
1->15 [style = dashed, label="0"];
18->15 [style = bold, label=""];
12->20 [style = bold, label=""];
37->29 [style = bold, label=""];
27->31 [style = bold, label=""];
11->29 [style = dashed, label="0"];
14->19 [style = bold, label=""];
30->32 [style = bold, label=""];
11->23 [style = dashed, label="0"];
5->25 [style = dashed, label="0"];
7->4 [style = bold, label=""];
3->12 [style = bold, label=""];
11->9 [style = bold, label=""];
32->26 [style = bold, label=""];
6->22 [style = dashed, label="0"];
19->25 [style = bold, label=""];
15->22 [style = bold, label=""];
2->31 [style = dashed, label="0"];
0->7 [style = bold, label=""];
6->2 [style = bold, label=""];
20->21 [style = bold, label=""];
3->34 [style = bold, label=""];
4->32 [style = dashed, label="0"];
36->30 [style = bold, label=""];
26->27 [style = bold, label=""];
12->10 [style = bold, label=""];
1->6 [style = bold, label=""];
2->14 [style = dashed, label="0"];
8->5 [style = bold, label=""];
13->3 [style = bold, label=""];
6->27 [style = dashed, label="0"];
0->21 [style = dashed, label="0"];
31->33 [style = bold, label=""];
7->30 [style = dashed, label="0"];
10->0 [style = bold, label=""];
10->20 [style = dashed, label="0"];
4->1 [style = bold, label=""];
5->11 [style = bold, label=""];
28->3 [style = bold, label=""];
34->35 [style = bold, label=""];
35->36 [style = bold, label=""];
0->36 [style = dashed, label="0"];
22->14 [style = bold, label=""];
33->37 [style = bold, label=""];
12->34 [style = dashed, label="0"];
21->17 [style = bold, label=""];
24->3 [style = bold, label=""];
10->35 [style = dashed, label="0"];
17->18 [style = bold, label=""];
5->37 [style = dashed, label="0"];
2->8 [style = bold, label=""];
}
