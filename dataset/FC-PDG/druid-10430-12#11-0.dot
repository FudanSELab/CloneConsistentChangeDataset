digraph {
10 [style = filled, label = "final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(ImmutableList.of(\"large_source\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertFalse(holderOfSmallSegment.getPeon().getSegmentsToLoad().contains(smallSegment))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertTrue(druidCluster.getAllServers().stream().allMatch(null))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "testBroadcastToAllServers['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertFalse(stats.hasPerTierStats())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(6L,stats.getGlobalStat(LoadRule.ASSIGNED_COUNT))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "testBroadcastToSingleDataSource['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(null)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertTrue(holdersOfLargeSegments2.stream().noneMatch(null))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertTrue(druidCluster.getAllServers().stream().allMatch(null))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "testBroadcastToAllServers['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Assert.assertEquals(3L,stats.getGlobalStat(LoadRule.ASSIGNED_COUNT))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(5L,stats.getGlobalStat(LoadRule.ASSIGNED_COUNT))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "CoordinatorStats stats = rule.run(null,makeCoordinartorRuntimeParams(druidCluster,smallSegment,largeSegments.get(0),largeSegments.get(1),largeSegments.get(2),largeSegments2.get(0),largeSegments2.get(1)),smallSegment)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertTrue(holdersOfLargeSegments.stream().allMatch(null))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
1->3 [style = bold, label=""];
10->3 [style = bold, label=""];
8->6 [style = bold, label=""];
1->10 [style = dashed, label="0"];
5->14 [style = bold, label=""];
2->7 [style = dashed, label="0"];
3->4 [style = bold, label=""];
11->15 [style = bold, label=""];
3->9 [style = bold, label=""];
4->9 [style = dashed, label="0"];
5->2 [style = bold, label=""];
12->10 [style = bold, label=""];
2->14 [style = dashed, label="0"];
1->6 [style = dashed, label="0"];
0->1 [style = bold, label=""];
13->5 [style = bold, label=""];
9->5 [style = bold, label=""];
3->13 [style = bold, label=""];
5->7 [style = bold, label=""];
4->13 [style = dashed, label="0"];
14->11 [style = bold, label=""];
4->5 [style = bold, label=""];
}
