digraph {
16 [style = filled, label = "Assert.assertEquals(result.toString(),Doubles.tryParse(expectedIndex(count().doubleValue(),value.getDoubleMetric(\"index\").doubleValue(),value.getDoubleMetric(\"index\").doubleValue() * 1e-6)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(gran).intervals(QueryRunnerTestHelper.fullOnIntervalSpec).aggregators(QueryRunnerTestHelper.rowsCount,QueryRunnerTestHelper.indexDoubleSum,QueryRunnerTestHelper.qualityUniques).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).descending(descending).context(makeContext()).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final DateTime expectedLast = descending? QueryRunnerTestHelper.EARLIEST: QueryRunnerTestHelper.LAST@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "Assert.assertEquals(result.toString(),QueryRunnerTestHelper.skippedDay.equals(current)? 0L: 13L,value.getLongMetric(\"rows\").longValue())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Result lastResult = null@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(gran).intervals(QueryRunnerTestHelper.fullOnIntervalSpec).descending(descending).context(makeContext()).build()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(ImmutableMap.of(),result.getValue().getBaseObject())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "int count = 0@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(lastResult.toString(),expectedLast,lastResult.getTimestamp())@@@35@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testTimeseriesNoAggregators['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final String(( expectedIndex = descending? QueryRunnerTestHelper.expectedFullOnIndexValuesDesc: QueryRunnerTestHelper.expectedFullOnIndexValues@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testFullOnTimeseries['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertEquals(0.0D,value.getDoubleMetric(\"uniques\"),0.02)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertFalse(StringUtils.format(\"Timestamp(%s( > expectedLast(%s(\",current,expectedLast),descending? current.isBefore(expectedLast): current.isAfter(expectedLast))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final DateTime expectedLast = descending? QueryRunnerTestHelper.earliest: QueryRunnerTestHelper.last@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(value.getDoubleMetric(\"uniques\"),0.0d,0.02)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(lastResult.toString(),expectedLast,lastResult.getTimestamp())@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "lastResult = result@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Granularity gran = Granularities.DAY@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(result.toString(),0.0D,value.getDoubleMetric(\"index\").doubleValue(),value.getDoubleMetric(\"index\").doubleValue() * 1e-6)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(result.toString(),new Double(expectedIndex(count() + 13L + 1L,value.getDoubleMetric(\"addRowsIndexConstant\"),value.getDoubleMetric(\"addRowsIndexConstant\") * 1e-6)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.DATA_SOURCE).granularity(gran).intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC).descending(descending).context(makeContext()).build()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "!QueryRunnerTestHelper.skippedDay.equals(current)@@@15@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "final TimeseriesResultValue value = result.getValue()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testTimeseriesNoAggregators['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "Assert.assertEquals(result.toString(),new Double(expectedIndex(count() + 1L,value.getDoubleMetric(\"addRowsIndexConstant\"),value.getDoubleMetric(\"addRowsIndexConstant\") * 1e-6)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertNull(result.toString(),value.getDoubleMetric(\"addRowsIndexConstant\"))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "DateTime current = result.getTimestamp()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "NullHandling.replaceWithDefault()@@@21@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Iterable<Result<TimeseriesResultValue>> results = runner.run(QueryPlus.wrap(query)).toList()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "lastResult = result@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(value.getDoubleMetric(\"uniques\"),9.0d,0.02)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "++count@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertNull(result.toString(),value.getDoubleMetric(\"index\"))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30->17 [style = bold, label=""];
28->18 [style = bold, label=""];
10->31 [style = bold, label=""];
13->3 [style = solid, label="expectedLast"];
31->17 [style = solid, label="expectedIndex"];
24->25 [style = dotted, label="true"];
20->21 [style = dotted, label="false"];
20->17 [style = dotted, label="true"];
6->23 [style = bold, label=""];
33->28 [style = bold, label=""];
6->15 [style = solid, label="expectedLast"];
18->15 [style = bold, label=""];
16->25 [style = bold, label=""];
6->0 [style = bold, label=""];
17->33 [style = bold, label=""];
2->9 [style = bold, label=""];
9->10 [style = bold, label=""];
7->22 [style = solid, label="current"];
23->17 [style = solid, label="count"];
23->0 [style = bold, label=""];
3->4 [style = bold, label=""];
10->6 [style = bold, label=""];
32->10 [style = bold, label=""];
11->2 [style = bold, label=""];
7->3 [style = bold, label=""];
2->12 [style = bold, label=""];
24->16 [style = dotted, label="true"];
24->20 [style = dotted, label="false"];
20->27 [style = dotted, label="false"];
0->7 [style = bold, label=""];
20->27 [style = bold, label=""];
24->20 [style = bold, label=""];
13->1 [style = solid, label="expectedLast"];
9->32 [style = dashed, label="0"];
24->16 [style = bold, label=""];
5->1 [style = bold, label=""];
21->26 [style = bold, label=""];
12->10 [style = bold, label=""];
6->1 [style = solid, label="expectedLast"];
31->6 [style = bold, label=""];
20->33 [style = dotted, label="true"];
6->13 [style = dashed, label="0"];
8->2 [style = bold, label=""];
10->13 [style = bold, label=""];
20->30 [style = dotted, label="true"];
31->25 [style = solid, label="expectedIndex"];
25->19 [style = bold, label=""];
7->3 [style = solid, label="current"];
5->7 [style = bold, label=""];
24->19 [style = dotted, label="true"];
23->25 [style = solid, label="count"];
14->2 [style = bold, label=""];
9->12 [style = dashed, label="0"];
2->32 [style = bold, label=""];
19->28 [style = bold, label=""];
29->22 [style = bold, label=""];
22->24 [style = bold, label=""];
26->28 [style = bold, label=""];
18->7 [style = bold, label=""];
20->30 [style = bold, label=""];
6->3 [style = solid, label="expectedLast"];
4->29 [style = dashed, label="0"];
27->21 [style = bold, label=""];
20->26 [style = dotted, label="false"];
4->5 [style = bold, label=""];
3->29 [style = bold, label=""];
13->0 [style = bold, label=""];
}
