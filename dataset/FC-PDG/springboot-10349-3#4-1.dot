digraph {
7 [style = filled, label = "assertThat(tracedPrincipal.getName()).isEqualTo(\"alice\")@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "filterCapturesPrincipal['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(this.repository.findAll()).hasSize(1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Principal principal = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Session session = this.repository.findAll().get(0).getSession()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(session).isNull()@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(tracedPrincipal).isNotNull()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "filterDoesNotCaptureIdOfUnusedSession['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "this.filter.filter(new ServerWebExchangeDecorator(MockServerWebExchange.from(MockServerHttpRequest.get(\"https://api.example.com\"))){@Override public Mono<Principal> getPrincipal(){return Mono.just(principal)}},new WebFilterChain(){@Override public Mono<Void> filter(ServerWebExchange exchange){exchange.getSession().block().getAttributes().put(\"a\",\"alpha\")return Mono.empty()}}).block()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "filterDoesNotCaptureIdOfUnusedSession['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "given(principal.getName()).willReturn(\"alice\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(this.repository.findAll()).hasSize(1)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "org.springframework.boot.actuate.trace.http.HttpTrace.Principal tracedPrincipal = this.repository.findAll().get(0).getPrincipal()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "this.filter.filter(MockServerWebExchange.from(MockServerHttpRequest.get(\"https://api.example.com\")),new WebFilterChain(){@Override public Mono<Void> filter(ServerWebExchange exchange){exchange.getSession().block(Duration.ofSeconds(30))return Mono.empty()}}).block(Duration.ofSeconds(30))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->3 [style = bold, label=""];
13->10 [style = bold, label=""];
5->1 [style = bold, label=""];
4->1 [style = bold, label=""];
2->0 [style = bold, label=""];
8->6 [style = bold, label=""];
3->2 [style = bold, label=""];
11->9 [style = bold, label=""];
10->7 [style = bold, label=""];
2->13 [style = dashed, label="0"];
0->10 [style = dashed, label="0"];
9->13 [style = bold, label=""];
12->11 [style = bold, label=""];
6->12 [style = bold, label=""];
}
