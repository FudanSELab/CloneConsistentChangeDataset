digraph {
6 [style = filled, label = "exec.shutdown()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "mockEmptyPeon()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "EasyMock.expectLastCall().atLeastOnce()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EasyMock.expect(databaseRuleManager.getRulesWithDefault(EasyMock.anyObject())).andReturn(Lists.newArrayList(new IntervalLoadRule(Intervals.of(\"2012-01-01T00:00:00.000Z/2012-01-01T12:00:00.000Z\"),ImmutableMap.of(\"hot\",1)),new IntervalDropRule(Intervals.of(\"2012-01-01T00:00:00.000Z/2012-01-02T00:00:00.000Z\")))).atLeastOnce()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "server1.addDataSegment(usedSegments.get(0))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "BalancerStrategy balancerStrategy = new CostBalancerStrategyFactory().createBalancerStrategy(exec)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "DruidCoordinatorRuntimeParams params = createCoordinatorRuntimeParams(druidCluster).withDynamicConfigs(COORDINATOR_CONFIG_WITH_ZERO_LEADING_TIME_BEFORE_CAN_MARK_AS_UNUSED_OVERSHADOWED_SEGMENTS).withSegmentReplicantLookup(segmentReplicantLookup).withBalancerStrategy(balancerStrategy).build()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "DruidServer server1 = new DruidServer(\"server1\",\"host1\",null,1000,ServerType.HISTORICAL,\"hot\",0)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertTrue(stats.getTiers(\"droppedCount\").isEmpty())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testDontDropInDifferentTiers['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "ListeningExecutorService exec = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(1))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "EasyMock.replay(databaseRuleManager)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "mockPeon.loadSegment(EasyMock.anyObject(),EasyMock.anyObject())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testDropTooManyInDifferentTiers['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "EasyMock.verify(mockPeon)@@@24@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "DruidCluster druidCluster = DruidClusterBuilder.newBuilder().addTier(\"hot\",new ServerHolder(server1.toImmutableDruidServer(),mockPeon)).addTier(\"normal\",new ServerHolder(server2.toImmutableDruidServer(),mockPeon)).build()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "server2.addDataSegment(segment)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(12L,stats.getGlobalStat(\"deletedCount\"))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "mockCoordinator()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "EasyMock.expectLastCall().atLeastOnce()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(1L,stats.getTieredStat(\"droppedCount\",\"normal\"))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "mockPeon.dropSegment(EasyMock.anyObject(),EasyMock.anyObject())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "SegmentReplicantLookup segmentReplicantLookup = SegmentReplicantLookup.make(druidCluster)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "DruidCoordinatorRuntimeParams afterParams = ruleRunner.run(params)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "DruidServer server2 = new DruidServer(\"serverNorm2\",\"hostNorm2\",null,1000,ServerType.HISTORICAL,\"normal\",0)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "CoordinatorStats stats = afterParams.getCoordinatorStats()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "SegmentReplicantLookup segmentReplicantLookup = SegmentReplicantLookup.make(druidCluster,false)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testDropTooManyInDifferentTiers['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27->18 [style = bold, label=""];
15->10 [style = bold, label=""];
22->19 [style = bold, label=""];
1->15 [style = bold, label=""];
19->20 [style = bold, label=""];
11->6 [style = bold, label=""];
20->0 [style = bold, label=""];
25->18 [style = bold, label=""];
12->24 [style = bold, label=""];
16->22 [style = bold, label=""];
15->3 [style = bold, label=""];
12->7 [style = solid, label="druidCluster"];
12->7 [style = bold, label=""];
26->11 [style = bold, label=""];
14->26 [style = dashed, label="0"];
21->2 [style = bold, label=""];
2->13 [style = bold, label=""];
7->9 [style = bold, label=""];
9->23 [style = bold, label=""];
3->10 [style = bold, label=""];
10->5 [style = bold, label=""];
22->0 [style = bold, label=""];
21->2 [style = solid, label="params"];
23->21 [style = bold, label=""];
5->12 [style = bold, label=""];
7->24 [style = dashed, label="0"];
0->4 [style = bold, label=""];
13->26 [style = bold, label=""];
6->8 [style = bold, label=""];
12->24 [style = solid, label="druidCluster"];
4->1 [style = bold, label=""];
9->23 [style = solid, label="exec"];
14->11 [style = bold, label=""];
13->14 [style = bold, label=""];
17->18 [style = bold, label=""];
24->9 [style = bold, label=""];
18->16 [style = bold, label=""];
}
