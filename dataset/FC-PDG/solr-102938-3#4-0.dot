digraph {
36 [style = filled, label = "assertEquals(\" string4 \",d.getFieldValue(\"bar_HOSS_s\"))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "testTrimExclusions['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(\" string3 \",d.getFieldValue(\"bar_dt\"))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(\"string1\",d.getFieldValue(\"foo_t\"))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "d = processAdd(\"trim-some\",doc(f(\"id\",\"1111\"),f(\"foo_t\",\" string1 \"),f(\"foo_s\",\" string2 \"),f(\"bar_dt\",\" string3 \"),f(\"bar_HOSS_s\",\" string4 \"),f(\"foo_pdt\",\" string5 \"),f(\"foo_HOSS_pdt\",\" string6 \")))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertEquals(\"string3\",d.getFieldValue(\"bar_dt\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertNotNull(d)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "d = processAdd(\"trim-most\",doc(f(\"id\",\"1111\"),f(\"foo_t\",\" string1 \"),f(\"foo_s\",\" string2 \"),f(\"bar_dt\",\" string3 \"),f(\"foo_pdt\",\" string4 \")))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "d = processAdd(\"trim-many\",doc(f(\"id\",\"1111\"),f(\"foo_t\",\" string1 \"),f(\"foo_s\",\" string2 \"),f(\"bar_dt\",\" string3 \"),f(\"bar_HOSS_s\",\" string4 \"),f(\"foo_pdt\",\" string5 \"),f(\"foo_HOSS_pdt\",\" string6 \")))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertNotNull(d)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"string5\",d.getFieldValue(\"foo_pdt\"))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(\"string1\",d.getFieldValue(\"foo_t\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(\"string2\",d.getFieldValue(\"foo_s\"))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "SolrInputDocument d = null@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"string2\",d.getFieldValue(\"foo_s\"))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testTrimMultipleRules['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "d = processAdd(\"trim-multi\",doc(f(\"id\",\"1111\"),f(\"foo_t\",\" string1 \"),f(\"foo_s\",\" string2 \"),f(\"bar_dt\",\" string3 \"),f(\"foo_pdt\",\" string4 \")))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "d = processAdd(\"trim-multi\",doc(f(\"id\",\"1111\"),f(\"foo_t\",\" string1 \"),f(\"foo_s\",\" string2 \"),f(\"bar_dt\",\" string3 \")))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertEquals(\" string6 \",d.getFieldValue(\"foo_HOSS_pdt\"))@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(\"string5\",d.getFieldValue(\"foo_pdt\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertNotNull(d)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(\"string4\",d.getFieldValue(\"foo_pdt\"))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\" string1 \",d.getFieldValue(\"foo_t\"))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(\"string2\",d.getFieldValue(\"foo_s\"))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(\" string4 \",d.getFieldValue(\"bar_HOSS_s\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(\" string5 \",d.getFieldValue(\"foo_pdt\"))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(\" string3 \",d.getFieldValue(\"bar_dt\"))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(\" string6 \",d.getFieldValue(\"foo_HOSS_pdt\"))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(\"string3\",d.getFieldValue(\"bar_dt\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(\" string6 \",d.getFieldValue(\"foo_HOSS_pdt\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testTrimMultipleRules['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertEquals(\"string1\",d.getFieldValue(\"foo_t\"))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "d = processAdd(\"trim-few\",doc(f(\"id\",\"1111\"),f(\"foo_t\",\" string1 \"),f(\"foo_s\",\" string2 \"),f(\"bar_dt\",\" string3 \"),f(\"bar_HOSS_s\",\" string4 \"),f(\"foo_pdt\",\" string5 \"),f(\"foo_HOSS_pdt\",\" string6 \")))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(\"string2\",d.getFieldValue(\"foo_s\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(\"string4\",d.getFieldValue(\"bar_HOSS_s\"))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(\"string3\",d.getFieldValue(\"bar_dt\"))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertNotNull(d)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
27->32 [style = bold, label=""];
17->11 [style = solid, label="d"];
9->0 [style = bold, label=""];
14->30 [style = bold, label=""];
3->1 [style = bold, label=""];
5->23 [style = bold, label=""];
25->22 [style = bold, label=""];
10->0 [style = solid, label="d"];
0->6 [style = bold, label=""];
7->0 [style = solid, label="d"];
19->29 [style = bold, label=""];
31->24 [style = bold, label=""];
34->13 [style = bold, label=""];
12->15 [style = bold, label=""];
9->0 [style = solid, label="d"];
7->0 [style = bold, label=""];
20->31 [style = bold, label=""];
4->2 [style = bold, label=""];
2->9 [style = bold, label=""];
15->19 [style = bold, label=""];
2->10 [style = bold, label=""];
28->16 [style = bold, label=""];
11->18 [style = bold, label=""];
1->17 [style = bold, label=""];
29->28 [style = bold, label=""];
3->23 [style = dashed, label="0"];
36->21 [style = bold, label=""];
24->36 [style = bold, label=""];
6->5 [style = bold, label=""];
13->26 [style = solid, label="d"];
8->2 [style = bold, label=""];
18->27 [style = bold, label=""];
13->26 [style = bold, label=""];
7->9 [style = dashed, label="0"];
22->34 [style = bold, label=""];
10->0 [style = bold, label=""];
32->25 [style = bold, label=""];
23->1 [style = bold, label=""];
16->14 [style = bold, label=""];
7->10 [style = dashed, label="0"];
2->7 [style = bold, label=""];
21->35 [style = bold, label=""];
33->2 [style = bold, label=""];
35->12 [style = bold, label=""];
26->20 [style = bold, label=""];
12->15 [style = solid, label="d"];
17->11 [style = bold, label=""];
}
