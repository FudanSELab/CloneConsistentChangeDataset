digraph {
2 [style = filled, label = "assertThat(processNode.getManagedMemoryOperatorScopeUseCaseWeights(),equalTo(expectedOperatorWeights))@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(processNode.getManagedMemorySlotScopeUseCases(),equalTo(Collections.singleton(ManagedMemoryUseCase.STATE_BACKEND)))@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "graphGenerator.setRuntimeExecutionMode(RuntimeExecutionMode.BATCH)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final Map<ManagedMemoryUseCase,Integer> expectedOperatorWeights = new HashMap<>()@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "DataStreamSink<Integer> sink = process.addSink(new DiscardingSink<>())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "configuration.set(ExecutionOptions.SORT_INPUTS,false)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Configuration configuration = new Configuration()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(processNode.getManagedMemoryOperatorScopeUseCaseWeights(),equalTo(expectedOperatorWeights))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "StreamGraph graph = graphGenerator.generate()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "final Configuration configuration = new Configuration()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "expectedOperatorWeights.put(ManagedMemoryUseCase.OPERATOR,42)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testDisablingSortingInputsWithoutBatchStateBackendOneInputTransformation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "SingleOutputStreamOperator<Integer> process = env.fromElements(1,2).keyBy(null).process(DUMMY_PROCESS_FUNCTION)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "StreamGraph graph = getStreamGraphInBatchMode(sink,configuration)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "expectedException.expectMessage(\"Batch state backend requires the sorted inputs to be enabled!\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "configuration.set(ExecutionOptions.SORTED_INPUTS_MEMORY,MemorySize.ofMebiBytes(42))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "StreamGraphGenerator graphGenerator = new StreamGraphGenerator(Collections.singletonList(sink.getTransformation()),env.getConfig(),env.getCheckpointConfig(),configuration)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "graphGenerator.generate()@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testCustomManagedMemoryWeights['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertThat(processNode.getManagedMemorySlotScopeUseCases(),equalTo(Collections.singleton(ManagedMemoryUseCase.STATE_BACKEND)))@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "StreamNode processNode = graph.getStreamNode(process.getId())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "testCustomManagedMemoryWeights['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "expectedException.expect()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->9 [style = bold, label=""];
16->3 [style = bold, label=""];
23->5 [style = bold, label=""];
15->14 [style = bold, label=""];
10->15 [style = solid, label="configuration"];
11->4 [style = bold, label=""];
1->20 [style = bold, label=""];
14->17 [style = bold, label=""];
9->2 [style = solid, label="expectedOperatorWeights"];
7->0 [style = bold, label=""];
17->9 [style = solid, label="expectedOperatorWeights"];
22->5 [style = solid, label="configuration"];
10->22 [style = dashed, label="0"];
22->23 [style = bold, label=""];
10->6 [style = bold, label=""];
21->18 [style = bold, label=""];
6->15 [style = bold, label=""];
1->11 [style = bold, label=""];
10->5 [style = solid, label="configuration"];
20->21 [style = bold, label=""];
5->1 [style = bold, label=""];
6->5 [style = bold, label=""];
12->2 [style = bold, label=""];
0->10 [style = bold, label=""];
13->3 [style = bold, label=""];
3->7 [style = bold, label=""];
0->22 [style = bold, label=""];
0->15 [style = solid, label="sink"];
9->12 [style = bold, label=""];
19->3 [style = bold, label=""];
17->4 [style = bold, label=""];
6->23 [style = dashed, label="0"];
2->8 [style = bold, label=""];
}
