digraph {
11 [style = filled, label = "ConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "List<ConfigDataLocation> locations = Arrays.asList(LOCATION_1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "existingPropertySource.setProperty(\"test\",\"springboot\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "MockPropertySource propertySource = new MockPropertySource()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,this.bootstrapContext,Arrays.asList(existingContributor,contributor))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(locations),anyBoolean())).willReturn(imported)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "ConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor.ofExisting(existingPropertySource)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "verify(this.importer).resolveAndLoad(any(),this.locationResolverContext.capture(),any(),any(),anyBoolean())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertThat(context.getBootstrapContext()).isSameAs(this.bootstrapContext)@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "MockPropertySource existingPropertySource = new MockPropertySource()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(locations))).willReturn(imported)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "contributors.withProcessedImports(this.importer,this.activationContext)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ConfigDataLoaderContext context = this.loaderContext.getValue()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "withProcessedImportsProvidesLoaderContextWithAccessToBootstrapRegistry['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ConfigDataLocationResolverContext context = this.locationResolverContext.getValue()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "verify(this.importer).resolveAndLoad(any(),any(),this.loaderContext.capture(),any())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Map<ConfigDataResolutionResult,ConfigData> imported = new LinkedHashMap<>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "this.importer = mock()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "imported.put(new ConfigDataResolutionResult(LOCATION_1,new TestConfigDataResource(\"a'\"),false),new ConfigData(Arrays.asList(propertySource)))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "verify(this.importer).resolveAndLoad(any(),this.locationResolverContext.capture(),any(),any())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13->14 [style = solid, label="importer"];
5->3 [style = solid, label="existingContributor"];
17->6 [style = bold, label=""];
9->2 [style = bold, label=""];
7->17 [style = dashed, label="0"];
1->15 [style = bold, label=""];
18->11 [style = bold, label=""];
3->14 [style = bold, label=""];
7->20 [style = dashed, label="0"];
14->17 [style = bold, label=""];
2->10 [style = bold, label=""];
15->5 [style = bold, label=""];
10->8 [style = solid, label="imported"];
14->7 [style = bold, label=""];
6->4 [style = bold, label=""];
16->1 [style = bold, label=""];
11->3 [style = bold, label=""];
10->12 [style = bold, label=""];
12->8 [style = bold, label=""];
0->1 [style = bold, label=""];
5->13 [style = bold, label=""];
21->1 [style = bold, label=""];
7->6 [style = bold, label=""];
6->19 [style = dashed, label="0"];
12->18 [style = bold, label=""];
10->18 [style = solid, label="imported"];
2->12 [style = solid, label="propertySource"];
8->18 [style = dashed, label="0"];
1->5 [style = solid, label="existingPropertySource"];
13->9 [style = bold, label=""];
19->4 [style = bold, label=""];
11->3 [style = solid, label="contributor"];
20->19 [style = bold, label=""];
8->11 [style = bold, label=""];
14->20 [style = bold, label=""];
}
