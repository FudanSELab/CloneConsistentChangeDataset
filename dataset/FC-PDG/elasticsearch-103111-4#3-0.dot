digraph {
4 [style = filled, label = "testNoDocValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testNotIndexed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(mapping,mapper.mappingSource().toString())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "IndexableField dvField = fields(0(@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(1230,dvField.numericValue().longValue())@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(1230,pointField.numericValue().longValue())@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(1,pointField.fieldType().pointDataDimensionCount())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertEquals(DocValuesType.SORTED_NUMERIC,dvField.fieldType().docValuesType())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(1,fields.length)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "IndexableField(( fields = doc.rootDoc().getFields(\"field\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(1,pointField.fieldType().pointDimensionCount())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",\"scaled_float\").field(\"doc_values\",false).field(\"scaling_factor\",10.0).endObject().endObject().endObject().endObject())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\",\"type\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",123).endObject()),XContentType.JSON))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "IndexableField pointField = fields(0(@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",\"scaled_float\").field(\"index\",false).field(\"scaling_factor\",10.0).endObject().endObject().endObject().endObject())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testNoDocValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "DocumentMapper mapper = parser.parse(\"type\",new CompressedXContent(mapping))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->7 [style = solid, label="mapping"];
3->1 [style = bold, label=""];
1->14 [style = dashed, label="0"];
0->6 [style = bold, label=""];
16->7 [style = bold, label=""];
3->11 [style = bold, label=""];
5->7 [style = solid, label="mapping"];
12->16 [style = bold, label=""];
7->8 [style = bold, label=""];
3->13 [style = dashed, label="0"];
11->2 [style = bold, label=""];
2->15 [style = dashed, label="0"];
8->0 [style = bold, label=""];
5->16 [style = dashed, label="0"];
16->8 [style = solid, label="mapping"];
10->5 [style = bold, label=""];
5->8 [style = solid, label="mapping"];
1->11 [style = dashed, label="0"];
9->3 [style = bold, label=""];
5->7 [style = bold, label=""];
14->15 [style = bold, label=""];
1->2 [style = bold, label=""];
6->9 [style = bold, label=""];
6->3 [style = solid, label="fields"];
4->5 [style = bold, label=""];
13->14 [style = bold, label=""];
6->13 [style = solid, label="fields"];
9->13 [style = bold, label=""];
}
