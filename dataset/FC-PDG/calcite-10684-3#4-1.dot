digraph {
20 [style = filled, label = "final RangeSet<Integer> setGt0 = ImmutableRangeSet.of(Range.greaterThan(0))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(RangeSets.minus(setComplex,Range.singleton(3)),isRangeSet(\"((0..2(, (5..+∞)(\"))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertThat(RangeSets.minus(setComplex,Range.closed(2,3)).toString(),is(\"((0‥2), (5‥+∞)(\"))@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final RangeSet<Integer> setGt2 = ImmutableRangeSet.of(Range.greaterThan(2))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final RangeSet<Integer> setGt1 = ImmutableRangeSet.of(Range.greaterThan(1))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(RangeSets.minus(setNone,Range.singleton(1)),is(setNone))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(RangeSets.minus(setGe1,Range.singleton(1)),is(setGt1))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(RangeSets.minus(setComplex,Range.singleton(1)).toString(),is(\"((0‥1), (1‥2(, (3‥3(, (5‥+∞)(\"))@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(setComplex.toString(),is(\"((0‥2(, (3‥3(, (5‥+∞)(\"))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(RangeSets.minus(setAll,Range.singleton(1)).toString(),is(\"((-∞‥1), (1‥+∞)(\"))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(RangeSets.minus(setGt0,Range.singleton(1)),isRangeSet(\"((0..1), (1..+∞)(\"))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertThat(RangeSets.minus(setComplex,Range.closed(2,7)),isRangeSet(\"((0..2), (7..+∞)(\"))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "final RangeSet<Integer> setAll = setNone.complement()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(RangeSets.minus(setAll,Range.singleton(1)),isRangeSet(\"((-∞..1), (1..+∞)(\"))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertThat(setComplex,isRangeSet(\"((0..2(, (3..3(, (5..+∞)(\"))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertThat(RangeSets.minus(setComplex,Range.open(2,3)).toString(),is(\"((0‥2(, (3‥3(, (5‥+∞)(\"))@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(RangeSets.minus(setComplex,Range.singleton(2)),isRangeSet(\"((0..2), (3..3(, (5..+∞)(\"))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "testRangeSetMinus['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(RangeSets.minus(setGt2,Range.singleton(1)),is(setGt2))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(RangeSets.minus(setComplex,Range.singleton(3)).toString(),is(\"((0‥2(, (5‥+∞)(\"))@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testRangeSetMinus['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(RangeSets.minus(setComplex,Range.closed(2,7)).toString(),is(\"((0‥2), (7‥+∞)(\"))@@@22@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testRangeSetMinus['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertThat(RangeSets.minus(setComplex,Range.singleton(2)).toString(),is(\"((0‥2), (3‥3(, (5‥+∞)(\"))@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final RangeSet<Integer> setGe1 = ImmutableRangeSet.of(Range.atLeast(1))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final RangeSet<Integer> setComplex = ImmutableRangeSet.builder().add(Range.closed(0,2)).add(Range.singleton(3)).add(Range.greaterThan(5)).build()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(RangeSets.minus(setGt1,Range.singleton(1)),is(setGt1))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(RangeSets.minus(setComplex,Range.singleton(1)),isRangeSet(\"((0..1), (1..2(, (3..3(, (5..+∞)(\"))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertThat(RangeSets.minus(setComplex,Range.closed(2,3)),isRangeSet(\"((0..2), (5..+∞)(\"))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "final RangeSet<Integer> setNone = ImmutableRangeSet.of()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertThat(RangeSets.minus(setComplex,Range.open(2,3)),isRangeSet(\"((0..2(, (3..3(, (5..+∞)(\"))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertThat(RangeSets.minus(setGt0,Range.singleton(1)).toString(),is(\"((0‥1), (1‥+∞)(\"))@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->10 [style = bold, label=""];
15->27 [style = solid, label="setComplex"];
15->2 [style = bold, label=""];
16->18 [style = bold, label=""];
1->8 [style = bold, label=""];
9->11 [style = bold, label=""];
9->24 [style = dashed, label="0"];
5->23 [style = dashed, label="0"];
10->19 [style = bold, label=""];
0->12 [style = bold, label=""];
27->30 [style = bold, label=""];
26->29 [style = bold, label=""];
30->23 [style = bold, label=""];
1->24 [style = solid, label="setAll"];
7->17 [style = solid, label="setGt1"];
15->23 [style = solid, label="setComplex"];
28->26 [style = bold, label=""];
2->9 [style = bold, label=""];
20->25 [style = solid, label="setGt0"];
12->1 [style = bold, label=""];
14->27 [style = dashed, label="0"];
31->12 [style = bold, label=""];
8->7 [style = bold, label=""];
15->22 [style = bold, label=""];
4->28 [style = dashed, label="0"];
21->12 [style = bold, label=""];
23->28 [style = bold, label=""];
6->20 [style = bold, label=""];
25->27 [style = bold, label=""];
16->26 [style = dashed, label="0"];
12->11 [style = solid, label="setNone"];
15->30 [style = solid, label="setComplex"];
19->14 [style = bold, label=""];
15->22 [style = solid, label="setComplex"];
11->3 [style = bold, label=""];
10->25 [style = bold, label=""];
6->10 [style = solid, label="setGe1"];
24->11 [style = bold, label=""];
5->4 [style = bold, label=""];
7->6 [style = bold, label=""];
15->29 [style = solid, label="setComplex"];
13->5 [style = bold, label=""];
3->17 [style = bold, label=""];
8->3 [style = solid, label="setGt2"];
19->25 [style = dashed, label="0"];
14->13 [style = bold, label=""];
22->24 [style = bold, label=""];
7->10 [style = solid, label="setGt1"];
15->26 [style = solid, label="setComplex"];
20->15 [style = bold, label=""];
15->28 [style = solid, label="setComplex"];
2->22 [style = dashed, label="0"];
13->30 [style = dashed, label="0"];
4->16 [style = bold, label=""];
18->29 [style = dashed, label="0"];
}
