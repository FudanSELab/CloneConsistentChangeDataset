digraph {
4 [style = filled, label = "assertEquals(\"*\",filter.toCQLString())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "\"3.0\".equals(clusterMinVersion)@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testRoundTrips(filter)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertCellFetchedQueried(false,false,filter,s2,path0,path1,path2,path3,path4)@@@29@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertFetchedQueried(true,true,filter,v2)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertCellFetchedQueried(false,false,filter,s2,path0,path1,path2,path3,path4)@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "check.accept(ColumnFilter.allRegularColumnsBuilder(metadata).add(v1).build())@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertCellFetchedQueried(true,true,filter,s2,path0,path1,path2,path3,path4)@@@11@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "assertCellFetchedQueried(true,false,filter,s2,path0,path1,path2,path3,path4)@@@20@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertCellFetchedQueried(true,false,filter,v2,path0,path2,path3,path4)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "\"3.11\".equals(clusterMinVersion)@@@14@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "assertCellFetchedQueried(true,true,filter,v2,path0,path1,path2,path3,path4)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertFetchedQueried(false,false,filter,s1,s2)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "\"3.11\".equals(clusterMinVersion) || (returnStaticContentOnPartitionWithNoRows && \"4.0\".equals(clusterMinVersion))@@@13@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(\"*/*\",filter.toString())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertCellFetchedQueried(true,false,filter,v2,path0,path2,path3,path4)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertCellFetchedQueried(true,true,filter,v2,path1)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "assertEquals(\"*/(v2(1((\",filter.toString())@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "check.accept(ColumnFilter.selection(metadata,RegularAndStaticColumns.builder().add(v1).build()))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertFetchedQueried(true,false,filter,v1)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Consumer<ColumnFilter> check = null@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(\"v2(1(\",filter.toCQLString())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "boolean returnStaticContentOnPartitionWithNoRows@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "ColumnFilter filter = ColumnFilter.allRegularColumnsBuilder(metadata).select(v2,path1).build()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertFetchedQueried(true,true,filter,s1,s2,v1)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertCellFetchedQueried(true,true,filter,v2,path1)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertCellFetchedQueried(true,true,filter,v2,path1)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertCellFetchedQueried(true,false,filter,v2,path0,path2,path3,path4)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "testSelectCellWithMetadata['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "testSelectSimpleColumnWithMetadata['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(\"<all regulars>/(v2(1((\",filter.toString())@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertCellFetchedQueried(true,true,filter,s2,path0,path1,path2,path3,path4)@@@12@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "ColumnFilter filter = ColumnFilter.allRegularColumnsBuilder(metadata,returnStaticContentOnPartitionWithNoRows).select(v2,path1).build()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertFetchedQueried(true,false,filter,s1,s2,v1)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(\"v2(1(\",filter.toCQLString())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertCellFetchedQueried(true,false,filter,s2,path0,path1,path2,path3,path4)@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testSelectCellWithMetadata['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
32->22 [style = dotted, label="false"];
30->15 [style = solid, label="filter"];
32->7 [style = dotted, label="false"];
17->6 [style = dotted, label="true"];
24->7 [style = solid, label="filter"];
10->24 [style = bold, label=""];
28->25 [style = dotted, label="true"];
19->11 [style = bold, label=""];
24->30 [style = dashed, label="0"];
12->21 [style = dotted, label="true"];
32->0 [style = dotted, label="false"];
24->6 [style = solid, label="filter"];
17->8 [style = dotted, label="true"];
24->3 [style = solid, label="filter"];
12->9 [style = dotted, label="false"];
12->20 [style = dotted, label="true"];
12->22 [style = dotted, label="false"];
16->14 [style = bold, label=""];
30->19 [style = solid, label="filter"];
30->18 [style = solid, label="filter"];
14->20 [style = bold, label=""];
17->26 [style = dotted, label="true"];
12->7 [style = dotted, label="false"];
12->23 [style = dotted, label="true"];
28->30 [style = bold, label=""];
32->2 [style = dotted, label="true"];
4->19 [style = bold, label=""];
12->2 [style = dotted, label="true"];
32->1 [style = dotted, label="false"];
27->16 [style = bold, label=""];
22->7 [style = bold, label=""];
24->20 [style = solid, label="filter"];
29->26 [style = bold, label=""];
24->19 [style = solid, label="filter"];
7->5 [style = bold, label=""];
2->21 [style = bold, label=""];
17->32 [style = dotted, label="false"];
33->36 [style = bold, label=""];
30->14 [style = solid, label="filter"];
12->3 [style = dotted, label="false"];
34->35 [style = bold, label=""];
24->8 [style = solid, label="filter"];
30->21 [style = solid, label="filter"];
30->26 [style = solid, label="filter"];
9->1 [style = bold, label=""];
32->31 [style = bold, label=""];
17->12 [style = dotted, label="false"];
30->15 [style = bold, label=""];
21->23 [style = bold, label=""];
30->29 [style = solid, label="filter"];
30->2 [style = solid, label="filter"];
17->4 [style = dotted, label="true"];
19->29 [style = bold, label=""];
31->0 [style = bold, label=""];
12->32 [style = dashed, label="0"];
24->18 [style = solid, label="filter"];
32->20 [style = dotted, label="true"];
32->27 [style = bold, label=""];
32->14 [style = dotted, label="true"];
32->31 [style = dotted, label="false"];
24->21 [style = solid, label="filter"];
30->1 [style = solid, label="filter"];
24->11 [style = solid, label="filter"];
17->12 [style = bold, label=""];
24->15 [style = solid, label="filter"];
12->1 [style = dotted, label="false"];
17->19 [style = dotted, label="true"];
30->9 [style = solid, label="filter"];
17->13 [style = bold, label=""];
17->29 [style = dotted, label="true"];
32->5 [style = dotted, label="false"];
30->7 [style = solid, label="filter"];
30->22 [style = solid, label="filter"];
24->5 [style = solid, label="filter"];
30->5 [style = solid, label="filter"];
24->22 [style = solid, label="filter"];
17->11 [style = dotted, label="true"];
24->15 [style = bold, label=""];
0->9 [style = bold, label=""];
32->9 [style = dotted, label="false"];
32->21 [style = dotted, label="true"];
30->20 [style = solid, label="filter"];
11->6 [style = bold, label=""];
12->0 [style = dotted, label="false"];
35->33 [style = bold, label=""];
18->17 [style = bold, label=""];
11->29 [style = dashed, label="0"];
12->16 [style = bold, label=""];
17->32 [style = bold, label=""];
12->0 [style = bold, label=""];
15->18 [style = bold, label=""];
12->5 [style = dotted, label="false"];
24->23 [style = solid, label="filter"];
20->2 [style = bold, label=""];
1->22 [style = bold, label=""];
12->14 [style = dotted, label="true"];
32->27 [style = dotted, label="true"];
12->16 [style = dotted, label="true"];
24->1 [style = solid, label="filter"];
24->2 [style = solid, label="filter"];
6->8 [style = bold, label=""];
25->32 [style = solid, label="returnStaticContentOnPartitionWithNoRows"];
17->13 [style = dotted, label="true"];
32->16 [style = dotted, label="true"];
13->4 [style = bold, label=""];
}
