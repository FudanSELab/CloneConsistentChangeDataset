digraph {
4 [style = filled, label = "++j@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(CLASSNAME + \" must capture the right bytes as Bytes\",stillEqual)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(CLASSNAME + \" iterable character count\",BYTES.length,j)@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testByteIterable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "boolean stillEqual = true@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "stillEqual = (BYTES(j( == quantum)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testByteIterable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testByteIterable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "stillEqual = (referenceBytes(j( == quantum)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertTrue(classUnderTest + \" must capture the right bytes as Bytes\",stillEqual)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(classUnderTest + \" iterable character count\",referenceBytes.length,j)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "int j = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->4 [style = bold, label=""];
9->11 [style = bold, label=""];
1->11 [style = dashed, label="0"];
6->11 [style = solid, label="j"];
6->0 [style = bold, label=""];
2->9 [style = dashed, label="0"];
0->10 [style = dashed, label="0"];
0->2 [style = solid, label="stillEqual"];
8->3 [style = bold, label=""];
4->2 [style = bold, label=""];
3->6 [style = bold, label=""];
6->10 [style = bold, label=""];
7->3 [style = bold, label=""];
10->4 [style = bold, label=""];
4->9 [style = bold, label=""];
10->9 [style = solid, label="stillEqual"];
2->1 [style = bold, label=""];
4->10 [style = bold, label=""];
6->1 [style = solid, label="j"];
5->3 [style = bold, label=""];
4->0 [style = bold, label=""];
6->10 [style = solid, label="j"];
6->0 [style = solid, label="j"];
}
