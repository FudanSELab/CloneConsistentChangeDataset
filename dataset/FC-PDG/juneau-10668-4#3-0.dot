digraph {
15 [style = filled, label = "t.addEnum(ASet.of(\"foo\",\"bar\"))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertObject(t._enum()).isType().asJson().is(\"((\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "t._enum(\"foo\",\"bar\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertObject(t._enum()).isType().asJson().is(\"('foo','bar','baz'(\")@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertObject(t._enum()).isNull()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "t.addEnum(null)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "t.addEnum(ASet.of(\"baz\"))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertObject(t.getEnum()).isType().asJson().is(\"('foo','bar','baz'(\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertObject(t._enum()).isType().asJson().is(\"('foo','bar'(\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "t._enum(ASet.of(\"foo\",\"bar\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertObject(t._enum()).isType().asJson().is(\"('foo','bar','baz'(\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "SchemaInfo t = new SchemaInfo()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertObject(t.getEnum()).isType().asJson().is(\"('foo','bar','baz'(\")@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "t._enum(ASet.of())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertObject(t._enum()).isType().asJson().is(\"('foo','bar'(\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "t._enum((Collection<Object>)null)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "t._enum(new Object(((()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertObject(t._enum()).isType().asJson().is(\"((\")@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "a17_enum['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertObject(t._enum()).isType().asJson().is(\"('foo','bar'(\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "t.addEnum(ASet.of(\"foo\",\"bar\"))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "HeaderInfo t = new HeaderInfo()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "a19_enum['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "a17_enum['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertObject(t.getEnum()).isType().asJson().is(\"('foo','bar'(\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertObject(t._enum()).isNull()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14->16 [style = bold, label=""];
3->1 [style = bold, label=""];
16->8 [style = bold, label=""];
24->2 [style = bold, label=""];
0->19 [style = bold, label=""];
19->11 [style = bold, label=""];
4->18 [style = bold, label=""];
10->17 [style = bold, label=""];
16->23 [style = dashed, label="0"];
9->10 [style = bold, label=""];
23->8 [style = bold, label=""];
2->12 [style = bold, label=""];
9->6 [style = bold, label=""];
20->10 [style = bold, label=""];
8->0 [style = bold, label=""];
12->13 [style = bold, label=""];
6->5 [style = bold, label=""];
15->11 [style = bold, label=""];
18->10 [style = bold, label=""];
14->23 [style = bold, label=""];
0->25 [style = dashed, label="0"];
17->14 [style = bold, label=""];
1->24 [style = dashed, label="0"];
18->20 [style = dashed, label="0"];
5->4 [style = bold, label=""];
21->1 [style = bold, label=""];
4->20 [style = bold, label=""];
25->19 [style = bold, label=""];
7->15 [style = bold, label=""];
1->2 [style = bold, label=""];
13->9 [style = bold, label=""];
22->24 [style = bold, label=""];
19->7 [style = bold, label=""];
8->25 [style = bold, label=""];
}
