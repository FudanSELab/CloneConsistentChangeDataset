digraph {
12 [style = filled, label = "verify(listener,times(1)).onBlockPushSuccess(eq(\"shufflePush_0_0_0\"),any())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "LinkedHashMap<String,ManagedBuffer> blocks = Maps.newLinkedHashMap()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "verify(listener,times(1)).onBlockFetchSuccess(eq(\"shufflePush_0_0_0\"),any())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "verify(listener,times(0)).onBlockPushSuccess(not(eq(\"shufflePush_0_0_0\")),any())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "verify(listener,times(2)).onBlockPushFailure(eq(\"shufflePush_0_2_0\"),any())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "blocks.put(\"shufflePush_0_2_0\",new NioManagedBuffer(ByteBuffer.wrap(new byte(((()))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testHandlingRetriableFailures['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "blocks.put(\"shufflePush_0_1_0\",new NioManagedBuffer(ByteBuffer.wrap(new byte(((()))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "String(( blockIds = blocks.keySet().toArray(new String(((()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "verify(listener,times(2)).onBlockFetchFailure(eq(\"shufflePush_0_2_0\"),any())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "blocks.put(\"shufflePush_0_0_0\",new NioManagedBuffer(ByteBuffer.wrap(new byte(((()))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "verify(listener,times(1)).onBlockPushFailure(eq(\"shufflePush_0_1_0\"),any())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "verify(listener,times(0)).onBlockFetchFailure(eq(\"shufflePush_0_0_0\"),any())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "verify(listener,times(1)).onBlockFetchFailure(eq(\"shufflePush_0_1_0\"),any())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testServerFailures['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "BlockFetchingListener listener = pushBlocks(blocks,blockIds,Arrays.asList(new PushBlockStream(\"app-id\",0,0,0,0,0),new PushBlockStream(\"app-id\",0,0,1,0,1),new PushBlockStream(\"app-id\",0,0,2,0,2)))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testHandlingRetriableFailures['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "verify(listener,times(0)).onBlockPushFailure(eq(\"shufflePush_0_0_0\"),any())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "verify(listener,times(0)).onBlockFetchSuccess(not(eq(\"shufflePush_0_0_0\")),any())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "blocks.put(\"shufflePush_0_1_0\",null)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "verify(listener,times(1)).onBlockFetchFailure(eq(\"shufflePush_0_2_0\"),any())@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "BlockPushingListener listener = pushBlocks(blocks,blockIds,Arrays.asList(new PushBlockStream(\"app-id\",0,0,0,0,0),new PushBlockStream(\"app-id\",0,0,1,0,1),new PushBlockStream(\"app-id\",0,0,2,0,2)))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5->3 [style = bold, label=""];
4->10 [style = bold, label=""];
16->15 [style = bold, label=""];
15->13 [style = bold, label=""];
2->20 [style = bold, label=""];
0->14 [style = solid, label="blockIds"];
9->11 [style = bold, label=""];
1->4 [style = solid, label="blocks"];
12->17 [style = bold, label=""];
10->12 [style = dashed, label="0"];
3->16 [style = dashed, label="0"];
8->20 [style = dashed, label="0"];
19->11 [style = bold, label=""];
1->14 [style = solid, label="blocks"];
1->7 [style = bold, label=""];
8->13 [style = dashed, label="0"];
2->15 [style = dashed, label="0"];
9->19 [style = dashed, label="0"];
7->9 [style = bold, label=""];
6->1 [style = bold, label=""];
0->14 [style = bold, label=""];
11->0 [style = bold, label=""];
10->5 [style = bold, label=""];
5->17 [style = dashed, label="0"];
3->2 [style = bold, label=""];
18->1 [style = bold, label=""];
0->4 [style = bold, label=""];
14->12 [style = bold, label=""];
21->1 [style = bold, label=""];
0->4 [style = solid, label="blockIds"];
10->2 [style = bold, label=""];
4->14 [style = dashed, label="0"];
7->19 [style = bold, label=""];
17->16 [style = bold, label=""];
2->8 [style = bold, label=""];
}
