digraph {
10 [style = filled, label = "List<BufferOrEvent> buffers = new ArrayList<>(2)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(0,output.getNumberOfEmittedRecords())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testNoDataProcessedAfterCheckpointBarrier['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertHasNextElement(input,output)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testIsAvailableWithBufferedDataInDeserializer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "StreamTaskNetworkInput<Long> input = createStreamTaskNetworkInput(buffers)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testIsAvailableWithBufferedDataInDeserializer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "VerifyRecordsDataOutput output = new VerifyRecordsDataOutput<>()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "StreamTaskNetworkInput input = createStreamTaskNetworkInput(buffers)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "buffers.add(new BufferOrEvent(barrier,new InputChannelInfo(0,0)))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "List<BufferOrEvent> buffers = Collections.singletonList(createDataBuffer())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "VerifyRecordsDataOutput output = new VerifyRecordsDataOutput<>()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "CheckpointBarrier barrier = new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "buffers.add(createDataBuffer())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "StreamTaskNetworkInput input = createStreamTaskNetworkInput(buffers)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertHasNextElement(input,output)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "VerifyRecordsDataOutput<Long> output = new VerifyRecordsDataOutput<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->3 [style = bold, label=""];
4->16 [style = solid, label="output"];
16->11 [style = bold, label=""];
7->4 [style = solid, label="output"];
9->2 [style = bold, label=""];
8->6 [style = solid, label="input"];
3->6 [style = bold, label=""];
8->6 [style = bold, label=""];
7->8 [style = bold, label=""];
0->6 [style = solid, label="output"];
0->4 [style = solid, label="output"];
6->4 [style = bold, label=""];
5->2 [style = bold, label=""];
2->0 [style = bold, label=""];
12->10 [style = bold, label=""];
2->3 [style = solid, label="buffers"];
12->13 [style = solid, label="barrier"];
10->1 [style = solid, label="buffers"];
10->13 [style = bold, label=""];
1->16 [style = solid, label="input"];
1->16 [style = bold, label=""];
3->6 [style = solid, label="input"];
3->8 [style = dashed, label="0"];
3->4 [style = solid, label="input"];
4->1 [style = bold, label=""];
15->12 [style = bold, label=""];
2->7 [style = bold, label=""];
4->11 [style = dashed, label="0"];
0->7 [style = dashed, label="0"];
7->6 [style = solid, label="output"];
13->14 [style = bold, label=""];
2->8 [style = solid, label="buffers"];
8->4 [style = solid, label="input"];
14->4 [style = bold, label=""];
}
