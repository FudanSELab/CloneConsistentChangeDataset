digraph {
3 [style = filled, label = "Flowable<Object> f = Flowable.zip(observables,new Function<Object((,Object>(){@Override public Object apply(final Object(( args){assertEquals(\"No argument should have been passed\",0,args.length)return invoked}})@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "startEmptyList['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TestObserver<Object> to = new TestObserver<Object>()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "TestSubscriber<Object> ts = new TestSubscriber<>()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "o.subscribe(to)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "TestSubscriber<Object> ts = new TestSubscriber<Object>()@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "startEmptyList['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ts.assertNoValues()@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final Object invoked = new Object()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Observable<Object> o = Observable.zip(observables,new Function<Object((,Object>(){@Override public Object apply(final Object(( args){assertEquals(\"No argument should have been passed\",0,args.length)return invoked}})@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Collection<Observable<Object>> observables = Collections.emptyList()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "f.subscribe(ts)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "startEmptyList['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Collection<Flowable<Object>> observables = Collections.emptyList()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "to.assertNoValues()@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "ts.awaitDone(200,TimeUnit.MILLISECONDS)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "to.awaitDone(200,TimeUnit.MILLISECONDS)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->3 [style = bold, label=""];
5->14 [style = dashed, label="0"];
11->14 [style = bold, label=""];
9->2 [style = bold, label=""];
0->16 [style = dashed, label="0"];
7->0 [style = bold, label=""];
8->6 [style = bold, label=""];
12->16 [style = bold, label=""];
2->4 [style = bold, label=""];
5->6 [style = solid, label="ts"];
4->3 [style = solid, label="observables"];
3->5 [style = bold, label=""];
14->13 [style = solid, label="to"];
15->11 [style = solid, label="observables"];
13->12 [style = bold, label=""];
6->13 [style = dashed, label="0"];
5->6 [style = bold, label=""];
15->11 [style = bold, label=""];
4->15 [style = dashed, label="0"];
3->8 [style = bold, label=""];
8->6 [style = solid, label="ts"];
2->15 [style = bold, label=""];
7->12 [style = dashed, label="0"];
5->8 [style = dashed, label="0"];
10->2 [style = bold, label=""];
1->2 [style = bold, label=""];
2->3 [style = solid, label="invoked"];
14->13 [style = bold, label=""];
2->11 [style = solid, label="invoked"];
6->7 [style = bold, label=""];
3->11 [style = dashed, label="0"];
}
