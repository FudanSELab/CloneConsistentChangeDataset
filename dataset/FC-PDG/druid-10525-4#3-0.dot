digraph {
27 [style = filled, label = "Mockito.verify(mockJacksonConfigManager,Mockito.times(4)).convertByteToConfig(ArgumentMatchers.eq(originalCurrentConfigBytes),ArgumentMatchers.eq(),ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Mockito.verify(mockServiceEmitter).emit(emittedEventCaptor.capture())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Mockito.verify(mockJacksonConfigManager,Mockito.times(4)).watch(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY),ArgumentMatchers.eq(),ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(KillCompactionConfig.COUNT_METRIC,emittedEventCaptor.getValue().build(ImmutableMap.of()).toMap().get(\"metric\"))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertEquals(0,emittedEventCaptor.getValue().build(ImmutableMap.of()).toMap().get(\"value\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Mockito.verify(mockJacksonConfigManager,Mockito.times(4)).set(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY),ArgumentMatchers.any(),ArgumentMatchers.any(),ArgumentMatchers.any())@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "killCompactionConfig = new KillCompactionConfig(druidCoordinatorConfig,mockSqlSegmentsMetadataManager,mockJacksonConfigManager,mockConnector,mockConnectorConfig)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "Mockito.when(mockJacksonConfigManager.set(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY),ArgumentMatchers.any(),ArgumentMatchers.any(),ArgumentMatchers.any())).thenAnswer(new Answer(){@Override public Object answer(InvocationOnMock invocation){if (count++ < 3) {return ConfigManager.SetResult.fail(new Exception(),true)}{return ConfigManager.SetResult.ok()}}})@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "testRunDoNothingIfCurrentConfigIsEmpty['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "killCompactionConfig.run(mockDruidCoordinatorRuntimeParams)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testRunRetryForRetryableException['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "Mockito.verify(mockJacksonConfigManager,Mockito.times(4)).set(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY),ArgumentMatchers.any(),ArgumentMatchers.any(),ArgumentMatchers.any())@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "Mockito.when(mockConnector.lookup(ArgumentMatchers.anyString(),ArgumentMatchers.eq(\"name\"),ArgumentMatchers.eq(\"payload\"),ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY))).thenReturn(originalCurrentConfigBytes)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "killCompactionConfig = new KillCompactionConfig(druidCoordinatorConfig,mockSqlSegmentsMetadataManager,mockJacksonConfigManager)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "TestDruidCoordinatorConfig druidCoordinatorConfig = new TestDruidCoordinatorConfig(null,null,null,new Duration(\"PT5S\"),null,null,null,null,null,null,null,new Duration(\"PT6S\"),null,null,null,null,10,null)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Mockito.when(mockSqlSegmentsMetadataManager.retrieveAllDataSourceNames()).thenReturn(ImmutableSet.of())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Mockito.verifyNoMoreInteractions(mockJacksonConfigManager)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "final ArgumentCaptor<ServiceEventBuilder> emittedEventCaptor = ArgumentCaptor.forClass()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "TestDruidCoordinatorConfig druidCoordinatorConfig = new TestDruidCoordinatorConfig(null,null,null,new Duration(\"PT5S\"),null,null,null,null,null,null,null,new Duration(\"PT6S\"),null,null,null,null,10,null)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Mockito.verifyNoMoreInteractions(mockJacksonConfigManager)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Mockito.verify(mockSqlSegmentsMetadataManager,Mockito.times(4)).retrieveAllDataSourceNames()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Mockito.verify(mockJacksonConfigManager).watch(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY),ArgumentMatchers.eq(),ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Mockito.when(mockDruidCoordinatorRuntimeParams.getEmitter()).thenReturn(mockServiceEmitter)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Mockito.when(mockJacksonConfigManager.set(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY),ArgumentMatchers.any(),ArgumentMatchers.any(),ArgumentMatchers.any())).thenAnswer(new Answer(){@Override public Object answer(InvocationOnMock invocation){if (count++ < 3) {return ConfigManager.SetResult.fail(new Exception(),true)}{return ConfigManager.SetResult.ok()}}})@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "Mockito.verify(mockServiceEmitter).emit(emittedEventCaptor.capture())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(1,emittedEventCaptor.getValue().build(ImmutableMap.of()).toMap().get(\"value\"))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(KillCompactionConfig.COUNT_METRIC,emittedEventCaptor.getValue().build(ImmutableMap.of()).toMap().get(\"metric\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "byte(( originalCurrentConfigBytes = {1,2,3}@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "CoordinatorCompactionConfig originalCurrentConfig = CoordinatorCompactionConfig.from(ImmutableList.of(inactiveDatasourceConfig))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Mockito.verifyNoMoreInteractions(mockJacksonConfigManager)@@@30@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final ArgumentCaptor<ServiceEventBuilder> emittedEventCaptor = ArgumentCaptor.forClass()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testRunRetryForRetryableException['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "String inactiveDatasourceName = \"inactive_datasource\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Mockito.when(mockJacksonConfigManager.convertByteToConfig(ArgumentMatchers.eq(originalCurrentConfigBytes),ArgumentMatchers.eq(),ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))).thenReturn(originalCurrentConfig)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "DataSourceCompactionConfig inactiveDatasourceConfig = new DataSourceCompactionConfig(inactiveDatasourceName,null,500L,null,new Period(3600),null,new UserCompactionTaskGranularityConfig(Granularities.HOUR,null),null,ImmutableMap.of(\"key\",\"val\"))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Mockito.verifyNoMoreInteractions(mockSqlSegmentsMetadataManager)@@@37@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "Mockito.when(mockJacksonConfigManager.watch(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY),ArgumentMatchers.eq(),ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))).thenReturn(new AtomicReference<>(CoordinatorCompactionConfig.empty()))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "killCompactionConfig.run(mockDruidCoordinatorRuntimeParams)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Mockito.verify(mockConnector,Mockito.times(4)).lookup(ArgumentMatchers.anyString(),ArgumentMatchers.eq(\"name\"),ArgumentMatchers.eq(\"payload\"),ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY))@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Mockito.when(mockJacksonConfigManager.watch(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY),ArgumentMatchers.eq(),ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))).thenReturn(new AtomicReference<>(originalCurrentConfig))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "killCompactionConfig = new KillCompactionConfig(druidCoordinatorConfig,mockSqlSegmentsMetadataManager,mockJacksonConfigManager)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Mockito.verifyZeroInteractions(mockSqlSegmentsMetadataManager)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39->37 [style = bold, label=""];
32->35 [style = bold, label=""];
8->37 [style = dashed, label="0"];
28->27 [style = solid, label="originalCurrentConfigBytes"];
4->25 [style = bold, label=""];
36->41 [style = bold, label=""];
15->1 [style = solid, label="inactiveDatasourceName"];
24->15 [style = bold, label=""];
22->16 [style = bold, label=""];
5->26 [style = dashed, label="0"];
37->30 [style = bold, label=""];
29->9 [style = bold, label=""];
12->17 [style = bold, label=""];
8->3 [style = bold, label=""];
9->32 [style = bold, label=""];
35->33 [style = bold, label=""];
3->26 [style = bold, label=""];
4->18 [style = solid, label="druidCoordinatorConfig"];
4->18 [style = bold, label=""];
30->9 [style = bold, label=""];
25->14 [style = bold, label=""];
16->2 [style = bold, label=""];
10->27 [style = dashed, label="0"];
9->8 [style = bold, label=""];
0->20 [style = dashed, label="0"];
1->19 [style = solid, label="inactiveDatasourceConfig"];
26->4 [style = bold, label=""];
38->39 [style = bold, label=""];
17->11 [style = bold, label=""];
20->22 [style = bold, label=""];
0->7 [style = bold, label=""];
23->29 [style = bold, label=""];
4->25 [style = solid, label="druidCoordinatorConfig"];
19->8 [style = solid, label="originalCurrentConfig"];
3->5 [style = bold, label=""];
30->9 [style = solid, label="druidCoordinatorConfig"];
10->40 [style = dashed, label="0"];
19->9 [style = bold, label=""];
41->40 [style = bold, label=""];
11->10 [style = bold, label=""];
28->23 [style = bold, label=""];
2->21 [style = bold, label=""];
34->36 [style = bold, label=""];
5->4 [style = bold, label=""];
10->0 [style = bold, label=""];
7->16 [style = bold, label=""];
11->41 [style = dashed, label="0"];
9->3 [style = bold, label=""];
28->23 [style = solid, label="originalCurrentConfigBytes"];
13->15 [style = bold, label=""];
19->29 [style = solid, label="originalCurrentConfig"];
19->28 [style = bold, label=""];
40->31 [style = bold, label=""];
1->19 [style = bold, label=""];
33->34 [style = bold, label=""];
27->20 [style = bold, label=""];
18->14 [style = bold, label=""];
14->6 [style = bold, label=""];
18->25 [style = dashed, label="0"];
11->27 [style = bold, label=""];
15->1 [style = bold, label=""];
6->12 [style = bold, label=""];
}
