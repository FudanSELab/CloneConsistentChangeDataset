digraph {
3 [style = filled, label = "params.set(\"routingPreference\",\"1\")@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "List<Replica> replicas = getBasicReplicaList()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(\"node3\",getHost(replicas.get(1).getNodeName()))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "replicas.add(new Replica(\"node5\",map(ZkStateReader.NODE_NAME_PROP,\"node5:8983_solr\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"PULL\"),\"c1\",\"s1\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"node3\",getHost(replicas.get(4).getNodeName()))@@@25@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ModifiableSolrParams params = new ModifiableSolrParams()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "rlt.transform(replicas)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(0).getNodeName()))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ReplicaListTransformer rlt = generator.getReplicaListTransformer(params)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "rlt = generator.getReplicaListTransformer(params)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "params.set(\"routingPreference\",\"2\")@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "replicas.add(new Replica(\"node4\",Map.of(ZkStateReader.NODE_NAME_PROP,\"node4:8983_solr\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"TLOG\"),\"c1\",\"s1\"))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertEquals(\"node3\",getHost(replicas.get(3).getNodeName()))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"node4\",getHost(replicas.get(2).getNodeName()))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(2).getNodeName()))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "rlt = generator.getReplicaListTransformer(params)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(1).getNodeName()))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "replicaTypeAndReplicaBase['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "replicaTypeAndReplicaBase['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "assertEquals(\"node5\",getHost(replicas.get(3).getNodeName()))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertEquals(\"node3\",getHost(replicas.get(2).getNodeName()))@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "rlt.transform(replicas)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(0).getNodeName()))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "replicas.add(new Replica(\"node5\",Map.of(ZkStateReader.NODE_NAME_PROP,\"node5:8983_solr\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"PULL\"),\"c1\",\"s1\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(1).getNodeName()))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(2).getNodeName()))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(0).getNodeName()))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(\"node3\",getHost(replicas.get(2).getNodeName()))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "params.set(\"routingPreference\",\"3\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "replicas.add(new Replica(\"node4\",map(ZkStateReader.NODE_NAME_PROP,\"node4:8983_solr\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"TLOG\"),\"c1\",\"s1\"))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "rlt.transform(replicas)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(2).getNodeName()))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "rlt.transform(replicas)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(1).getNodeName()))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\"@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(\"node5\",getHost(replicas.get(4).getNodeName()))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\"node4\",getHost(replicas.get(1).getNodeName()))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "params.add(\"routingPreference\",\"0\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "params.add(ShardParams.SHARDS_PREFERENCE,rulesParam)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "rlt = generator.getReplicaListTransformer(params)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(\"node3\",getHost(replicas.get(0).getNodeName()))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\"@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "testNodePreferenceRulesBase['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(0).getNodeName()))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->40 [style = bold, label=""];
18->30 [style = solid, label="replicas"];
21->40 [style = solid, label="params"];
18->33 [style = solid, label="replicas"];
10->20 [style = bold, label=""];
18->24 [style = bold, label=""];
35->16 [style = bold, label=""];
7->17 [style = bold, label=""];
8->15 [style = bold, label=""];
32->37 [style = bold, label=""];
17->1 [style = bold, label=""];
42->13 [style = bold, label=""];
37->27 [style = bold, label=""];
21->36 [style = solid, label="params"];
21->16 [style = solid, label="params"];
29->39 [style = bold, label=""];
18->19 [style = solid, label="replicas"];
21->37 [style = solid, label="params"];
9->4 [style = bold, label=""];
2->3 [style = bold, label=""];
28->38 [style = bold, label=""];
18->27 [style = solid, label="replicas"];
18->12 [style = bold, label=""];
27->31 [style = bold, label=""];
16->19 [style = bold, label=""];
21->9 [style = solid, label="params"];
22->5 [style = bold, label=""];
21->18 [style = bold, label=""];
26->13 [style = bold, label=""];
1->23 [style = bold, label=""];
15->23 [style = dashed, label="0"];
38->32 [style = bold, label=""];
6->2 [style = bold, label=""];
34->28 [style = bold, label=""];
44->23 [style = bold, label=""];
20->19 [style = solid, label="rulesParam"];
36->30 [style = bold, label=""];
25->20 [style = bold, label=""];
18->29 [style = bold, label=""];
12->10 [style = bold, label=""];
3->36 [style = bold, label=""];
40->33 [style = bold, label=""];
20->16 [style = bold, label=""];
19->14 [style = bold, label=""];
3->7 [style = bold, label=""];
24->25 [style = bold, label=""];
39->35 [style = bold, label=""];
15->0 [style = bold, label=""];
0->22 [style = bold, label=""];
11->13 [style = bold, label=""];
21->14 [style = solid, label="params"];
12->24 [style = dashed, label="0"];
31->43 [style = bold, label=""];
29->35 [style = solid, label="rulesParam"];
4->8 [style = bold, label=""];
43->41 [style = bold, label=""];
7->2 [style = dashed, label="0"];
18->4 [style = solid, label="replicas"];
8->44 [style = dashed, label="0"];
13->21 [style = bold, label=""];
23->9 [style = bold, label=""];
33->34 [style = bold, label=""];
14->6 [style = bold, label=""];
18->6 [style = solid, label="replicas"];
10->25 [style = dashed, label="0"];
30->44 [style = bold, label=""];
}
