digraph {
18 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(2)))@@@38@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "SegmentDescriptor desc2 = sd(\"2009/P1D\",0)@@@27@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "SegmentDescriptor desc1 = sd(\"2008/P1D\",0)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@14@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors()@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "testIncrementalHandOff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "SegmentDescriptor desc7 = sd(\"2013/P1D\",0)@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "testIncrementalHandOff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(0)))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@34@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "SegmentDescriptor desc5 = sd(\"2011/P1D\",1)@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "testTimeBasedIncrementalHandOff['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "SegmentDescriptor desc4 = sd(\"2011/P1D\",0)@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@27@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "Assert.assertEquals(checkpoint.getPartitionSequenceNumberMap(),currentOffsets)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "SegmentDescriptor desc6 = sd(\"2012/P1D\",0)@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
48 [style = filled, label = "final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "intermediateHandoffPeriod = new Period().withSeconds(0)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(0)))@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
52 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,2L,1,0L))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(1)))@@@32@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2),publishedDescriptors())@@@28@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "SegmentDescriptor desc1 = sd(\"2008/P1D\",0)@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(5)))@@@40@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,2L,1,0L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "insertData()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(3))) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(4)))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(3))) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",publishedDescriptors.get(4)))))@@@39@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "insertData()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Thread.sleep(10)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions))))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(2,task.getRunner().getRowIngestionMeters().getProcessed())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,0L),ImmutableSet.of())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,1L,1,0L))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(1)))@@@37@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(6)))@@@41@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "maxRowsPerSegment = 2@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint2 = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,4L,1,2L))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(sdd(\"2008/P1D\",0,ImmutableList.of(\"a\")),sdd(\"2009/P1D\",0,ImmutableList.of(\"b\")),sdd(\"2010/P1D\",0,ImmutableList.of(\"c\")),sdd(\"2011/P1D\",0,ImmutableList.of(\"d\",\"e\"),ImmutableList.of(\"d\",\"h\")),sdd(\"2011/P1D\",1,ImmutableList.of(\"h\"),ImmutableList.of(\"e\")),sdd(\"2012/P1D\",0,ImmutableList.of(\"g\")),sdd(\"2013/P1D\",0,ImmutableList.of(\"f\"))),publishedDescriptors())@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32->53 [style = bold, label=""];
40->2 [style = bold, label=""];
28->20 [style = solid, label="startPartitions"];
32->12 [style = bold, label=""];
20->26 [style = bold, label=""];
17->27 [style = solid, label="endPartitions"];
27->18 [style = solid, label="task"];
24->12 [style = solid, label="currentOffsets"];
24->32 [style = bold, label=""];
2->43 [style = solid, label="baseSequenceName"];
29->46 [style = dashed, label="0"];
7->31 [style = bold, label=""];
24->32 [style = solid, label="currentOffsets"];
43->18 [style = bold, label=""];
8->36 [style = solid, label="desc5"];
38->39 [style = bold, label=""];
45->34 [style = solid, label="desc1"];
31->36 [style = solid, label="desc7"];
19->24 [style = bold, label=""];
49->55 [style = bold, label=""];
34->36 [style = solid, label="desc3"];
30->52 [style = dashed, label="0"];
23->22 [style = bold, label=""];
50->5 [style = bold, label=""];
43->18 [style = solid, label="task"];
33->25 [style = bold, label=""];
47->51 [style = bold, label=""];
15->43 [style = solid, label="startPartitions"];
1->36 [style = solid, label="desc4"];
9->36 [style = solid, label="desc2"];
17->27 [style = bold, label=""];
46->50 [style = bold, label=""];
4->16 [style = bold, label=""];
48->49 [style = bold, label=""];
6->36 [style = solid, label="desc1"];
42->2 [style = bold, label=""];
21->19 [style = bold, label=""];
14->47 [style = dashed, label="0"];
36->4 [style = bold, label=""];
18->19 [style = bold, label=""];
26->14 [style = bold, label=""];
26->47 [style = bold, label=""];
34->54 [style = bold, label=""];
14->38 [style = bold, label=""];
19->21 [style = dotted, label="true"];
12->37 [style = bold, label=""];
38->6 [style = bold, label=""];
35->28 [style = bold, label=""];
3->2 [style = bold, label=""];
16->33 [style = bold, label=""];
38->51 [style = dashed, label="0"];
13->5 [style = bold, label=""];
39->41 [style = bold, label=""];
28->27 [style = solid, label="startPartitions"];
22->11 [style = bold, label=""];
27->18 [style = bold, label=""];
30->17 [style = bold, label=""];
1->8 [style = bold, label=""];
37->10 [style = bold, label=""];
2->27 [style = solid, label="baseSequenceName"];
15->44 [style = bold, label=""];
31->36 [style = bold, label=""];
5->27 [style = solid, label="consumerProps"];
29->13 [style = bold, label=""];
53->37 [style = bold, label=""];
52->43 [style = bold, label=""];
51->45 [style = bold, label=""];
9->34 [style = solid, label="desc2"];
5->35 [style = bold, label=""];
45->9 [style = bold, label=""];
19->21 [style = bold, label=""];
2->46 [style = bold, label=""];
10->20 [style = bold, label=""];
28->15 [style = bold, label=""];
25->23 [style = bold, label=""];
34->1 [style = bold, label=""];
24->53 [style = solid, label="currentOffsets"];
52->43 [style = solid, label="endPartitions"];
54->48 [style = bold, label=""];
15->44 [style = dashed, label="0"];
15->30 [style = bold, label=""];
8->7 [style = bold, label=""];
11->0 [style = bold, label=""];
7->36 [style = solid, label="desc6"];
44->52 [style = bold, label=""];
6->9 [style = bold, label=""];
2->29 [style = bold, label=""];
35->43 [style = solid, label="consumerProps"];
15->20 [style = solid, label="startPartitions"];
6->39 [style = dashed, label="0"];
9->34 [style = bold, label=""];
}
