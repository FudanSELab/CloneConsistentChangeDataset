digraph {
14 [style = filled, label = "int i = 0@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "assertEquals(1,copartitionGroups.size())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(streamTopic,tableTopic)),copartitionGroups.iterator().next())@@@5@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "driver.process(topic1,null,\"SomeVal\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "final MockProcessorSupplier<Integer,String> supplier = new MockProcessorSupplier<>()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "i < 2@@@58@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "checkJoinedValues(getter,kv(0,\"X0+YY0\"),kv(1,\"X1+YY1\"),kv(2,\"X2+YY2\"),kv(3,\"X3+YY3\"))@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "checkJoinedValues(getter,kv(0,\"X0+YY0\"),kv(1,\"X1+YY1\"),kv(2,\"X2+YY2\"),kv(3,\"X3+YY3\"))@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testJoin['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "driver.flushState()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "int i = 0@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "getter.init(driver.context())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final KTableValueGetter<Integer,String> getter = getterSupplier.get()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+Y0\",\"1:X1+Y1\",\"2:X2+null\",\"3:X3+null\")@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "i < 2@@@31@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "i++@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "driver.flushState()@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "shouldRequireCopartitionedStreams['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "driver.process(topic1,expectedKey,\"X\" + expectedKey)@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(topic1,topic2)),copartitionGroups.iterator().next())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+null\",\"1:X1+null\")@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "driver.setUp(builder,stateDir)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "checkJoinedValues(getter,kv(0,\"X0+Y0\"),kv(1,\"X1+Y1\"),kv(2,\"X2+null\"),kv(3,\"X3+null\"))@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "i < 2@@@22@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "i++@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "driver.flushState()@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "shouldRequireCopartitionedStreams['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+YY0\",\"1:X1+YY1\",\"2:X2+YY2\",\"3:X3+YY3\")@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "final StreamsBuilder builder = new StreamsBuilder()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "driver.process(topic2,expectedKeys(i(,\"Y\" + expectedKeys(i()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "checkJoinedValues(getter,kv(0,\"X0+null\"),kv(1,\"X1+null\"),kv(2,null),kv(3,null))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final KTable<Integer,String> table1 = builder.table(topic1,consumed)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+null\",\"1:X1+null\")@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "final KTableValueGetterSupplier<Integer,String> getterSupplier = ((KTableImpl<Integer,String,String>)joined).valueGetterSupplier()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "driver.flushState()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "driver.process(topic1,expectedKey,\"X\" + expectedKey)@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "driver.flushState()@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final KTable<Integer,String> table2 = builder.table(topic2,consumed)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+YY0\",\"1:X1+YY1\",\"2:X2+YY2\",\"3:X3+YY3\")@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "driver.process(topic2,expectedKey,\"YY\" + expectedKey)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "checkJoinedValues(getter,kv(0,\"X0+Y0\"),kv(1,\"X1+Y1\"),kv(2,null),kv(3,null))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "checkJoinedValues(getter,kv(0,\"X0+null\"),kv(1,\"X1+null\"),kv(2,\"X2+YY2\"),kv(3,\"X3+YY3\"))@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final Collection<Set<String>> copartitionGroups = TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "driver.process(topic1,expectedKeys(i(,\"X\" + expectedKeys(i()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "i++@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "final MockProcessor<Integer,String> processor = supplier.theCapturedProcessor()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "driver.flushState()@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "final int(( expectedKeys = new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ba9219@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "driver.process(topic1,expectedKey,\"XX\" + expectedKey)@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "final KTable<Integer,String> joined = table1.leftJoin(table2,MockValueJoiner.TOSTRING_JOINER)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+Y0\",\"1:X1+Y1\")@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "driver.setTime(0L)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "driver.process(topic2,expectedKeys(i(,null)@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "driver.process(topic2,null,\"AnotherVal\")@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "joined.toStream().process(supplier)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "processor.checkAndClearProcessResult(\"0:XX0+null\",\"1:XX1+null\",\"2:XX2+YY2\",\"3:XX3+YY3\")@@@69@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "int i = 0@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "driver.flushState()@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "checkJoinedValues(getter,kv(0,\"XX0+null\"),kv(1,\"XX1+null\"),kv(2,\"XX2+YY2\"),kv(3,\"XX3+YY3\"))@@@70@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(1,copartitionGroups.size())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32->22 [style = bold, label=""];
37->49 [style = bold, label=""];
13->55 [style = bold, label=""];
41->58 [style = solid, label="i"];
13->32 [style = solid, label="getter"];
45->33 [style = bold, label=""];
51->53 [style = bold, label=""];
13->42 [style = solid, label="getter"];
30->18 [style = bold, label=""];
41->59 [style = solid, label="i"];
43->19 [style = bold, label=""];
28->51 [style = solid, label="i"];
36->24 [style = bold, label=""];
38->56 [style = bold, label=""];
56->8 [style = bold, label=""];
31->30 [style = bold, label=""];
22->51 [style = solid, label="i"];
60->45 [style = solid, label="supplier"];
58->59 [style = bold, label=""];
10->57 [style = bold, label=""];
41->58 [style = bold, label=""];
15->49 [style = solid, label="i"];
34->37 [style = solid, label="i"];
8->11 [style = bold, label=""];
39->49 [style = solid, label="expectedKeys"];
17->35 [style = bold, label=""];
9->40 [style = bold, label=""];
12->28 [style = bold, label=""];
26->43 [style = bold, label=""];
1->0 [style = bold, label=""];
37->49 [style = dotted, label="true"];
46->39 [style = bold, label=""];
3->4 [style = dashed, label="0"];
33->50 [style = bold, label=""];
7->6 [style = bold, label=""];
15->37 [style = solid, label="i"];
51->28 [style = dotted, label="true"];
17->35 [style = solid, label="table2"];
14->58 [style = solid, label="i"];
34->49 [style = solid, label="i"];
13->20 [style = solid, label="getter"];
15->34 [style = solid, label="i"];
54->7 [style = bold, label=""];
58->59 [style = dotted, label="true"];
3->1 [style = bold, label=""];
52->61 [style = bold, label=""];
37->10 [style = bold, label=""];
51->12 [style = bold, label=""];
2->3 [style = bold, label=""];
13->48 [style = solid, label="getter"];
51->12 [style = dotted, label="true"];
14->58 [style = bold, label=""];
14->41 [style = solid, label="i"];
48->26 [style = bold, label=""];
13->31 [style = solid, label="getter"];
0->52 [style = dashed, label="0"];
47->29 [style = bold, label=""];
39->21 [style = bold, label=""];
22->51 [style = bold, label=""];
19->32 [style = bold, label=""];
13->38 [style = solid, label="getter"];
5->4 [style = bold, label=""];
55->15 [style = bold, label=""];
25->42 [style = bold, label=""];
53->23 [style = bold, label=""];
4->1 [style = bold, label=""];
37->34 [style = dotted, label="true"];
35->60 [style = bold, label=""];
15->37 [style = bold, label=""];
28->12 [style = solid, label="i"];
14->59 [style = solid, label="i"];
40->44 [style = bold, label=""];
16->46 [style = bold, label=""];
58->41 [style = dotted, label="true"];
46->9 [style = solid, label="builder"];
39->59 [style = solid, label="expectedKeys"];
11->20 [style = bold, label=""];
13->24 [style = solid, label="getter"];
22->12 [style = solid, label="i"];
29->25 [style = bold, label=""];
61->9 [style = bold, label=""];
28->51 [style = bold, label=""];
49->34 [style = bold, label=""];
50->52 [style = bold, label=""];
24->14 [style = bold, label=""];
60->45 [style = bold, label=""];
46->33 [style = solid, label="builder"];
58->47 [style = bold, label=""];
39->12 [style = solid, label="expectedKeys"];
6->31 [style = bold, label=""];
34->37 [style = bold, label=""];
18->27 [style = bold, label=""];
23->38 [style = bold, label=""];
57->36 [style = bold, label=""];
27->48 [style = bold, label=""];
44->13 [style = bold, label=""];
22->28 [style = solid, label="i"];
42->54 [style = bold, label=""];
21->17 [style = bold, label=""];
59->41 [style = bold, label=""];
}
