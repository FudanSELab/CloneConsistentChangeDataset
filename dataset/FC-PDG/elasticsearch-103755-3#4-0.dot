digraph {
0 [style = filled, label = "testNoMatchingFilesForReplicaOnAnyNode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testAllocator.addData(node1,\"MATCH\",new StoreFileMetaData(\"file1\",10,\"MATCH_CHECKSUM\",MIN_SUPPORTED_LUCENE_VERSION)).addData(node2,\"NO_MATCH\",new StoreFileMetaData(\"file1\",10,\"MATCH_CHECKSUM\",MIN_SUPPORTED_LUCENE_VERSION)).addData(node3,\"MATCH\",new StoreFileMetaData(\"file1\",10,\"MATCH_CHECKSUM\",MIN_SUPPORTED_LUCENE_VERSION))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testCancelRecoveryBetterSyncId['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testAllocator.processExistingRecoveries(allocation)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testAllocator.addData(node1,\"MATCH\",new StoreFileMetaData(\"file1\",10,\"MATCH_CHECKSUM\",MIN_SUPPORTED_LUCENE_VERSION)).addData(node2,\"NO_MATCH\",new StoreFileMetaData(\"file1\",10,\"NO_MATCH_CHECKSUM\",MIN_SUPPORTED_LUCENE_VERSION))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "RoutingAllocation allocation = onePrimaryOnNode1And1Replica(yesAllocationDeciders())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testAllocator.addData(node1,\"MATCH\",new StoreFileMetadata(\"file1\",10,\"MATCH_CHECKSUM\",MIN_SUPPORTED_LUCENE_VERSION)).addData(node2,\"NO_MATCH\",new StoreFileMetadata(\"file1\",10,\"NO_MATCH_CHECKSUM\",MIN_SUPPORTED_LUCENE_VERSION))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertThat(allocation.routingNodesChanged(),equalTo(true))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED).size(),equalTo(1))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testNoMatchingFilesForReplicaOnAnyNode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "RoutingAllocation allocation = onePrimaryOnNode1And1ReplicaRecovering(yesAllocationDeciders())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED).get(0).shardId(),equalTo(shardId))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED).size(),equalTo(1))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testAllocator.allocateUnassigned(allocation)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->3 [style = bold, label=""];
6->1 [style = bold, label=""];
12->13 [style = bold, label=""];
5->8 [style = bold, label=""];
1->12 [style = dashed, label="0"];
2->11 [style = dashed, label="0"];
9->12 [style = bold, label=""];
10->5 [style = bold, label=""];
3->2 [style = bold, label=""];
3->13 [style = dashed, label="0"];
2->4 [style = bold, label=""];
4->5 [style = bold, label=""];
0->1 [style = bold, label=""];
1->7 [style = bold, label=""];
7->2 [style = bold, label=""];
13->11 [style = bold, label=""];
11->10 [style = bold, label=""];
12->11 [style = solid, label="allocation"];
3->7 [style = dashed, label="0"];
1->2 [style = solid, label="allocation"];
}
