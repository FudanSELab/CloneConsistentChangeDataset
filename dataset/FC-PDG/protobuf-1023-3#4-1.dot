digraph {
3 [style = filled, label = "fail(\"Result was: \" + Arrays.toString(result))@@@13@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "result(result.length - CodedOutputStream.computeTagSize(RecursiveMessage.PAYLOAD_FIELD_NUMBER) - CodedOutputStream.computeLengthDelimitedFieldSize(1)( = 0@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testParseFromArray_manyNestedMessagesError['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "testParseFromArray_manyNestedMessagesError['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int i = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertWithMessage(\"Result was: \" + Arrays.toString(result)).fail()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "RecursiveMessage.parseFrom(result)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "RecursiveMessage.Builder recursiveMessage = RecursiveMessage.newBuilder().setPayload(ByteString.copyFrom(new byte(((())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "RecursiveMessage.parseFrom(CodedInputStream.newInstance(new ByteArrayInputStream(result)))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "i++@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testParseFromStream_manyNestedMessagesError['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "i < 20@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "recursiveMessage = RecursiveMessage.newBuilder().setRecurse(recursiveMessage.build())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "byte(( result = recursiveMessage.build().toByteArray()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->4 [style = bold, label=""];
9->11 [style = bold, label=""];
5->2 [style = solid, label="i"];
0->2 [style = bold, label=""];
0->5 [style = solid, label="i"];
4->0 [style = bold, label=""];
5->2 [style = bold, label=""];
6->9 [style = solid, label="result"];
8->5 [style = bold, label=""];
6->12 [style = solid, label="result"];
7->6 [style = bold, label=""];
10->4 [style = bold, label=""];
9->3 [style = bold, label=""];
12->3 [style = bold, label=""];
9->12 [style = dashed, label="0"];
2->7 [style = bold, label=""];
6->3 [style = solid, label="result"];
6->9 [style = bold, label=""];
2->5 [style = dotted, label="true"];
3->11 [style = dashed, label="0"];
6->12 [style = bold, label=""];
2->8 [style = dotted, label="true"];
2->8 [style = bold, label=""];
13->4 [style = bold, label=""];
0->2 [style = solid, label="i"];
}
