digraph {
38 [style = filled, label = "PropertyAnalyzer.analyzeBloomFilterColumns(properties,columns,KeysType.AGG_KEYS)@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "testBfColumns['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertTrue(e.getMessage().contains(\"column does not exist in table\"))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertEquals(Sets.newHashSet(\"k1\"),bfColumns)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "PropertyAnalyzer.analyzeBloomFilterColumns(properties,columns)@@@42@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "PropertyAnalyzer.analyzeBloomFilterColumns(properties,columns)@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "PropertyAnalyzer.analyzeBloomFilterColumns(properties,columns,KeysType.AGG_KEYS)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "columns.add(new Column(\"k3\",PrimitiveType.BOOLEAN))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS,\"k1,K1\")@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.fail()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "PropertyAnalyzer.analyzeBloomFilterColumns(properties,columns)@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "PropertyAnalyzer.analyzeBloomFilterColumns(properties,columns,KeysType.AGG_KEYS)@@@42@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "PropertyAnalyzer.analyzeBloomFilterColumns(properties,columns)@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "AnalysisException e@@@16@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testBfColumnsError['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS,\"k1\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "testBfColumnsError['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "Assert.assertTrue(e.getMessage().contains(\"Bloom filter index only used in\"))@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "columns.get(1).setIsKey(true)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "PropertyAnalyzer.analyzeBloomFilterColumns(properties,columns,KeysType.AGG_KEYS)@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "Assert.assertEquals(Sets.newHashSet(),PropertyAnalyzer.analyzeBloomFilterColumns(properties,columns))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "columns.get(0).setIsKey(true)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "AnalysisException e@@@30@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "columns.add(new Column(\"v2\",ScalarType.createType(PrimitiveType.BIGINT),false,AggregateType.SUM,\"0\",\"\"))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "columns.add(new Column(\"v1\",ScalarType.createType(PrimitiveType.VARCHAR),false,AggregateType.REPLACE,\"\",\"\"))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertTrue(e.getMessage().contains(\"TINYINT is not supported\"))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "columns.add(new Column(\"k2\",PrimitiveType.TINYINT))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS,\"k4\")@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS,\"k2\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "AnalysisException e@@@23@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "AnalysisException e@@@37@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS,\"\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "PropertyAnalyzer.analyzeBloomFilterColumns(properties,columns,KeysType.AGG_KEYS)@@@49@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "Assert.assertEquals(Sets.newHashSet(),PropertyAnalyzer.analyzeBloomFilterColumns(properties,columns,KeysType.AGG_KEYS))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS,\"k3\")@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Map<String,String> properties = Maps.newHashMap()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "AnalysisException e@@@44@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS,\"v2\")@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "List<Column> columns = Lists.newArrayList()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Set<String> bfColumns = PropertyAnalyzer.analyzeBloomFilterColumns(properties,columns)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertTrue(e.getMessage().contains(\"BOOLEAN is not supported\"))@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "PropertyAnalyzer.analyzeBloomFilterColumns(properties,columns)@@@49@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "columns.add(new Column(\"k1\",PrimitiveType.INT))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42->41 [style = bold, label=""];
16->32 [style = dashed, label="0"];
11->29 [style = bold, label=""];
5->15 [style = bold, label=""];
24->34 [style = bold, label=""];
31->34 [style = solid, label="columns"];
3->38 [style = bold, label=""];
31->1 [style = solid, label="columns"];
4->34 [style = solid, label="properties"];
4->33 [style = solid, label="properties"];
19->5 [style = bold, label=""];
4->0 [style = solid, label="properties"];
21->36 [style = bold, label=""];
15->11 [style = bold, label=""];
4->16 [style = solid, label="properties"];
39->31 [style = bold, label=""];
27->7 [style = bold, label=""];
21->1 [style = bold, label=""];
22->38 [style = dashed, label="0"];
42->41 [style = solid, label="bfColumns"];
0->34 [style = dashed, label="0"];
31->20 [style = bold, label=""];
2->25 [style = bold, label=""];
13->14 [style = bold, label=""];
35->31 [style = bold, label=""];
22->25 [style = bold, label=""];
17->5 [style = bold, label=""];
33->3 [style = bold, label=""];
30->41 [style = dashed, label="0"];
12->23 [style = dotted, label="true"];
24->0 [style = bold, label=""];
37->21 [style = bold, label=""];
23->3 [style = bold, label=""];
18->28 [style = bold, label=""];
7->33 [style = bold, label=""];
31->36 [style = solid, label="columns"];
31->38 [style = solid, label="columns"];
28->24 [style = bold, label=""];
38->25 [style = bold, label=""];
20->19 [style = bold, label=""];
14->21 [style = bold, label=""];
31->32 [style = solid, label="columns"];
31->10 [style = solid, label="columns"];
8->2 [style = dotted, label="true"];
16->24 [style = bold, label=""];
31->33 [style = solid, label="columns"];
4->42 [style = solid, label="properties"];
19->17 [style = bold, label=""];
6->40 [style = dashed, label="0"];
25->16 [style = bold, label=""];
1->7 [style = bold, label=""];
9->27 [style = bold, label=""];
6->37 [style = bold, label=""];
30->21 [style = bold, label=""];
26->31 [style = bold, label=""];
31->37 [style = solid, label="columns"];
8->2 [style = bold, label=""];
31->0 [style = solid, label="columns"];
4->22 [style = solid, label="properties"];
13->14 [style = dotted, label="true"];
4->38 [style = solid, label="properties"];
31->22 [style = solid, label="columns"];
4->30 [style = solid, label="properties"];
4->40 [style = bold, label=""];
30->37 [style = dashed, label="0"];
29->4 [style = bold, label=""];
31->16 [style = solid, label="columns"];
4->32 [style = solid, label="properties"];
4->6 [style = bold, label=""];
7->10 [style = bold, label=""];
25->32 [style = bold, label=""];
10->3 [style = bold, label=""];
10->33 [style = dashed, label="0"];
3->22 [style = bold, label=""];
4->36 [style = solid, label="properties"];
31->30 [style = solid, label="columns"];
9->27 [style = dotted, label="true"];
4->37 [style = solid, label="properties"];
1->36 [style = dashed, label="0"];
36->7 [style = bold, label=""];
18->28 [style = dotted, label="true"];
4->1 [style = solid, label="properties"];
4->10 [style = solid, label="properties"];
12->23 [style = bold, label=""];
32->24 [style = bold, label=""];
40->42 [style = bold, label=""];
31->42 [style = solid, label="columns"];
6->30 [style = bold, label=""];
}
