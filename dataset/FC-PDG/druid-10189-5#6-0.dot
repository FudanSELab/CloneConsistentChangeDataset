digraph {
7 [style = filled, label = "testNextRowWithRawParseable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "InputRow row = Iterables.getOnlyElement(rowPlusRaw.getInputRows())@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertRowValue(VALUE_0,row)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertNull(rowPlusRaw.getParseException())@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "expected.put(\"timestamp\",TIMESTAMP_0)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "InputRow row = rowPlusRaw.getInputRow()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Map<String,Object> raw = rowPlusRaw.getRawValues()@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assert.assertNull(row)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "InputRowListPlusRawValues rowPlusRaw = target.nextRowWithRaw()@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "final String data = NOT_PARSEABLE@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testNextRowWithRawNotParseable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(expected,raw)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testNextRowWithRawParseable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "final String data = PARSEABLE@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "InputRowListPlusJson rowPlusRaw = target.nextRowWithRaw()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "byte(( raw = rowPlusRaw.getRaw()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Map<String,Object> expected = new HashMap<>()@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "InlineFirehose target = create(data)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertRawValue(data,raw)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertNull(rowPlusRaw.getParseException())@@@10@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "expected.put(\"value\",VALUE_0)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Assert.assertNotNull(rowPlusRaw.getParseException())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3->5 [style = solid, label="data"];
5->14 [style = bold, label=""];
14->17 [style = bold, label=""];
4->14 [style = dashed, label="0"];
15->9 [style = bold, label=""];
18->5 [style = solid, label="data"];
18->1 [style = solid, label="data"];
2->11 [style = bold, label=""];
12->15 [style = bold, label=""];
9->16 [style = bold, label=""];
20->18 [style = bold, label=""];
18->5 [style = bold, label=""];
4->8 [style = bold, label=""];
1->6 [style = bold, label=""];
17->2 [style = solid, label="row"];
8->21 [style = solid, label="row"];
0->1 [style = bold, label=""];
3->5 [style = bold, label=""];
5->4 [style = bold, label=""];
8->2 [style = solid, label="row"];
8->21 [style = bold, label=""];
10->12 [style = bold, label=""];
7->3 [style = bold, label=""];
10->9 [style = solid, label="expected"];
8->2 [style = bold, label=""];
11->10 [style = bold, label=""];
0->11 [style = dashed, label="0"];
1->19 [style = bold, label=""];
3->18 [style = dashed, label="0"];
13->3 [style = bold, label=""];
2->21 [style = dashed, label="0"];
0->1 [style = solid, label="raw"];
2->0 [style = bold, label=""];
6->19 [style = dashed, label="0"];
11->9 [style = solid, label="raw"];
21->0 [style = bold, label=""];
3->1 [style = solid, label="data"];
8->17 [style = dashed, label="0"];
17->2 [style = bold, label=""];
}
