digraph {
28 [style = filled, label = "assertEquals(1,client().prepareGet(\"test\",\"4\").get().getVersion())@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "int expectedSlices = expectedSliceStatuses(slices,\"test\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"test\",\"1\").get().getVersion())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"4\").get().getVersion())@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "indexRandom(true,client().prepareIndex(\"test\",\"test\",\"1\").setSource(\"foo\",\"a\"),client().prepareIndex(\"test\",\"test\",\"2\").setSource(\"foo\",\"a\"),client().prepareIndex(\"test\",\"test\",\"3\").setSource(\"foo\",\"b\"),client().prepareIndex(\"test\",\"test\",\"4\").setSource(\"foo\",\"c\"))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"4\").get().getVersion())@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"test\",\"3\").get().getVersion())@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"test\",\"4\").get().getVersion())@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(3,client().prepareGet(\"test\",\"test\",\"1\").get().getVersion())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertThat(updateByQuery().source(\"test\").refresh(true).get(),matcher().updated(4))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(updateByQuery().source(\"test\").refresh(true).setSlices(slices).get(),matcher().updated(4).slices(hasSize(expectedSlices)))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testBasics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertEquals(4,client().prepareGet(\"test\",\"test\",\"1\").get().getVersion())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(updateByQuery().source(\"test\").filter(termQuery(\"foo\",\"a\")).refresh(true).get(),matcher().updated(2))@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(3,client().prepareGet(\"test\",\"2\").get().getVersion())@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "assertEquals(3,client().prepareGet(\"test\",\"test\",\"2\").get().getVersion())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testSlices['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(1,client().prepareGet(\"test\",\"1\").get().getVersion())@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "request.source().addSort(\"foo.keyword\",SortOrder.ASC)@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(updateByQuery().source(\"test\").filter(termQuery(\"foo\",\"a\")).refresh(true).setSlices(slices).get(),matcher().updated(2).slices(hasSize(expectedSlices)))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(3,client().prepareGet(\"test\",\"1\").get().getVersion())@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"4\").get().getVersion())@@@19@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertHitCount(client().prepareSearch(\"test\").setSize(0).get(),4)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(1,client().prepareGet(\"test\",\"test\",\"4\").get().getVersion())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"test\",\"4\").get().getVersion())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testSlices['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"test\",\"4\").get().getVersion())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(1,client().prepareGet(\"test\",\"test\",\"1\").get().getVersion())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"1\").get().getVersion())@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"test\",\"1\").get().getVersion())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "UpdateByQueryRequestBuilder request = updateByQuery().source(\"test\").size(3).refresh(true)@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "int slices = randomSlices(2,10)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"test\",\"4\").get().getVersion())@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(updateByQuery().source(\"test\").filter(termQuery(\"foo\",\"no_match\")).setSlices(slices).refresh(true).get(),matcher().updated(0).slices(hasSize(expectedSlices)))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(updateByQuery().source(\"test\").filter(termQuery(\"foo\",\"no_match\")).refresh(true).get(),matcher().updated(0))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertEquals(3,client().prepareGet(\"test\",\"test\",\"3\").get().getVersion())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertThat(request.get(),matcher().updated(3))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"1\").get().getVersion())@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertEquals(4,client().prepareGet(\"test\",\"test\",\"2\").get().getVersion())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(2,client().prepareGet(\"test\",\"3\").get().getVersion())@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
10->16 [style = bold, label=""];
5->14 [style = bold, label=""];
13->28 [style = dashed, label="0"];
14->7 [style = bold, label=""];
7->38 [style = bold, label=""];
0->26 [style = dashed, label="0"];
0->33 [style = bold, label=""];
23->15 [style = bold, label=""];
8->36 [style = bold, label=""];
8->4 [style = bold, label=""];
30->37 [style = bold, label=""];
24->23 [style = bold, label=""];
27->28 [style = bold, label=""];
4->25 [style = bold, label=""];
9->4 [style = solid, label="slices"];
2->5 [style = bold, label=""];
10->25 [style = dashed, label="0"];
11->0 [style = bold, label=""];
29->35 [style = bold, label=""];
36->10 [style = bold, label=""];
9->2 [style = bold, label=""];
13->31 [style = bold, label=""];
11->21 [style = dashed, label="0"];
17->20 [style = dashed, label="0"];
3->27 [style = bold, label=""];
3->1 [style = bold, label=""];
20->19 [style = bold, label=""];
7->23 [style = dashed, label="0"];
37->34 [style = bold, label=""];
8->19 [style = dashed, label="0"];
1->27 [style = dashed, label="0"];
14->24 [style = dashed, label="0"];
33->39 [style = bold, label=""];
5->24 [style = bold, label=""];
21->26 [style = bold, label=""];
2->4 [style = solid, label="expectedSlices"];
16->22 [style = dashed, label="0"];
6->3 [style = bold, label=""];
2->15 [style = solid, label="expectedSlices"];
38->17 [style = bold, label=""];
32->6 [style = bold, label=""];
19->4 [style = bold, label=""];
9->5 [style = solid, label="slices"];
17->8 [style = bold, label=""];
15->20 [style = bold, label=""];
4->10 [style = bold, label=""];
9->15 [style = solid, label="slices"];
2->5 [style = solid, label="expectedSlices"];
7->15 [style = bold, label=""];
22->21 [style = bold, label=""];
13->9 [style = bold, label=""];
31->29 [style = bold, label=""];
15->14 [style = dashed, label="0"];
16->11 [style = bold, label=""];
25->22 [style = bold, label=""];
39->30 [style = bold, label=""];
35->14 [style = bold, label=""];
18->6 [style = bold, label=""];
9->2 [style = solid, label="slices"];
12->6 [style = bold, label=""];
28->9 [style = bold, label=""];
1->13 [style = bold, label=""];
15->17 [style = bold, label=""];
}
