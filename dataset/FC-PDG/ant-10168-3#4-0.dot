digraph {
15 [style = filled, label = "expectOutputAndError(\"testThreadCount\",\"\",\"\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "int pos = 0@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "buildRule.executeTarget(\"testBasic\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "testBasic['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "p.setUserProperty(\"test.direct\",DIRECT_MESSAGE)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Project p = getProject()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "pos = countThreads(log,pos)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "p.setUserProperty(\"test.delayed\",DELAYED_MESSAGE)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testBasic['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "testThreadCount['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "pos > -1@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(\"parallel tasks didn't output correct data\",log,DIRECT_MESSAGE + DELAYED_MESSAGE)@@@10@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertEquals(\"\",buildRule.getError())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertEquals(\"parallel tasks didn't output correct data\",log,DIRECT_MESSAGE + DELAYED_MESSAGE)@@@8@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"\",buildRule.getOutput())@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "String log = buildRule.getLog()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "String log = getLog()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expectOutputAndError(\"testBasic\",\"\",\"\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Project p = buildRule.getProject()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->3 [style = bold, label=""];
4->6 [style = bold, label=""];
9->4 [style = bold, label=""];
7->8 [style = solid, label="log"];
0->15 [style = dashed, label="0"];
14->17 [style = bold, label=""];
0->11 [style = dashed, label="0"];
6->0 [style = bold, label=""];
3->16 [style = bold, label=""];
18->2 [style = bold, label=""];
7->8 [style = bold, label=""];
15->3 [style = bold, label=""];
2->4 [style = bold, label=""];
12->7 [style = bold, label=""];
6->15 [style = bold, label=""];
14->17 [style = dotted, label="true"];
16->17 [style = solid, label="pos"];
3->5 [style = bold, label=""];
13->12 [style = bold, label=""];
16->14 [style = solid, label="pos"];
17->14 [style = bold, label=""];
2->9 [style = dashed, label="0"];
6->11 [style = bold, label=""];
11->13 [style = bold, label=""];
17->14 [style = solid, label="pos"];
3->5 [style = solid, label="log"];
16->14 [style = bold, label=""];
3->17 [style = solid, label="log"];
1->2 [style = bold, label=""];
10->9 [style = bold, label=""];
}
