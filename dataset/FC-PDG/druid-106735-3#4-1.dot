digraph {
1 [style = filled, label = "testExtraction['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<String> extracted = Lists.newArrayList()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "SearchQuerySpec spec = new FragmentSearchQuerySpec(Arrays.asList(\"tO\",\"yO\"))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "List<String> extracted = new ArrayList<>()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testExtraction['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "List<String> expected = ImmutableList.of(\"Kyoto\",\"Tokyo\",\"Toyokawa\",\"Yorktown\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "res != null@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ExtractionFn extractionFn = new SearchQuerySpecDimExtractionFn(spec)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "extracted.add(res)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "SearchQuerySpec spec = new FragmentSearchQuerySpec(Arrays.asList(\"To\",\"yo\"),true)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testCaseSensitiveExtraction2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "String res = extractionFn.apply(str)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(expected,extracted)@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "List<String> expected = ImmutableList.of(\"Tokyo\",\"Toyokawa\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->8 [style = bold, label=""];
4->8 [style = solid, label="extracted"];
9->2 [style = bold, label=""];
2->3 [style = bold, label=""];
0->7 [style = solid, label="res"];
12->11 [style = bold, label=""];
3->6 [style = bold, label=""];
10->8 [style = solid, label="extracted"];
7->0 [style = bold, label=""];
13->8 [style = solid, label="expected"];
7->8 [style = bold, label=""];
4->0 [style = bold, label=""];
6->4 [style = bold, label=""];
6->13 [style = dashed, label="0"];
5->0 [style = bold, label=""];
11->3 [style = bold, label=""];
5->7 [style = dotted, label="true"];
6->10 [style = bold, label=""];
10->0 [style = bold, label=""];
11->3 [style = solid, label="spec"];
3->13 [style = bold, label=""];
5->7 [style = bold, label=""];
2->11 [style = dashed, label="0"];
0->5 [style = solid, label="res"];
1->2 [style = bold, label=""];
4->10 [style = dashed, label="0"];
2->3 [style = solid, label="spec"];
6->8 [style = solid, label="expected"];
0->5 [style = bold, label=""];
13->4 [style = bold, label=""];
}
