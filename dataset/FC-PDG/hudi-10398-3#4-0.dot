digraph {
13 [style = filled, label = "beforeEach(HoodieTableType.MERGE_ON_READ,options)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "TestData.writeData(TestData.DATA_SET_INSERT_UPDATE_DELETE,conf)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testReadChangesUnMergedMOR['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final String actual = TestData.rowDataToString(result)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "InputFormat<RowData,?> inputFormat = this.tableSource.getInputFormat()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(actual,is(expected))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(inputFormat,instanceOf())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "options.put(FlinkOptions.CHANGELOG_ENABLED.key(),\"true\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testReadWithDeletesCOW['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TestData.writeData(TestData.DATA_SET_UPDATE_DELETE,conf)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "beforeEach(HoodieTableType.COPY_ON_WRITE)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final String actual = TestData.rowDataToString(result,true)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertThat(inputFormat,instanceOf())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Map<String,String> options = new HashMap<>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final String actual = TestData.rowDataToString(result,true)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final String expected = \"(\" + \"+I(id1,Danny,19,1970-01-01T00:00:00.001,par1), \" + \"-U(id1,Danny,19,1970-01-01T00:00:00.001,par1), \" + \"+U(id1,Danny,20,1970-01-01T00:00:00.002,par1), \" + \"-U(id1,Danny,20,1970-01-01T00:00:00.002,par1), \" + \"+U(id1,Danny,21,1970-01-01T00:00:00.003,par1), \" + \"-U(id1,Danny,21,1970-01-01T00:00:00.003,par1), \" + \"+U(id1,Danny,22,1970-01-01T00:00:00.004,par1), \" + \"-D(id1,Danny,22,1970-01-01T00:00:00.005,par1)(\"@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "InputFormat<RowData,?> inputFormat = this.tableSource.getInputFormat()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testReadWithDeletesCOW['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "List<RowData> result = readData(inputFormat)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final String expected = \"(\" + \"+I(id1, Danny, 24, 1970-01-01T00:00:00.001, par1(, \" + \"+I(id2, Stephen, 34, 1970-01-01T00:00:00.002, par1((\"@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7->10 [style = bold, label=""];
11->1 [style = bold, label=""];
2->7 [style = solid, label="inputFormat"];
9->4 [style = bold, label=""];
7->10 [style = solid, label="result"];
17->13 [style = solid, label="options"];
0->11 [style = dashed, label="0"];
12->16 [style = bold, label=""];
0->12 [style = dashed, label="0"];
7->3 [style = bold, label=""];
3->0 [style = bold, label=""];
19->0 [style = bold, label=""];
7->3 [style = solid, label="result"];
14->7 [style = bold, label=""];
3->1 [style = solid, label="actual"];
0->1 [style = solid, label="result"];
7->19 [style = solid, label="inputFormat"];
6->4 [style = bold, label=""];
15->17 [style = bold, label=""];
11->1 [style = solid, label="expected"];
8->2 [style = bold, label=""];
12->16 [style = solid, label="expected"];
0->1 [style = bold, label=""];
1->16 [style = solid, label="actual"];
18->13 [style = bold, label=""];
1->12 [style = bold, label=""];
0->1 [style = solid, label="expected"];
5->7 [style = bold, label=""];
4->8 [style = bold, label=""];
3->10 [style = dashed, label="0"];
10->1 [style = solid, label="actual"];
5->19 [style = dashed, label="0"];
7->19 [style = bold, label=""];
13->14 [style = bold, label=""];
2->5 [style = solid, label="inputFormat"];
17->18 [style = bold, label=""];
2->5 [style = bold, label=""];
7->0 [style = solid, label="inputFormat"];
10->11 [style = bold, label=""];
}
