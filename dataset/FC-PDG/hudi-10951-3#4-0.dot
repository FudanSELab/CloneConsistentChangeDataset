digraph {
16 [style = filled, label = "listOfGeneratedPaths.add(outerPath)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "byte(( actualBytes = new byte((((@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "startOffsetLengthPairs.add(Pair.of(startOffset,embeddedInlineBytes.length))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "OuterPathInfo toReturn = new OuterPathInfo()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "RANDOM.nextBytes(embeddedInlineBytes)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(1,actualFileStatuses.length)@@@39@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
48 [style = filled, label = "assertEquals(URI.create(InLineFileSystem.SCHEME),inlineFileSystem.getUri())@@@46@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "RANDOM.nextBytes(randomBytes)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Path outerPath = getRandomOuterFSPath()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "FSDataOutputStream wrappedOut = outerPath.getFileSystem(conf).create(outerPath,true)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "byte(( randomBytes = new byte((((@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "InLineFileSystem inlineFileSystem = (InLineFileSystem)inlinePath.getFileSystem(conf)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "RANDOM.nextBytes(randomBytes)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "byte(( expectedBytes = expectedByteArrays.get(i)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Path inlinePath = FileSystemTestUtils.getPhantomFile(outerPath,startOffsetLengthPair.getLeft(),startOffsetLengthPair.getRight())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "generateOuterFileAndGetInfo['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "RANDOM.nextBytes(randomBytes)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "return toReturn@@@22@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "toReturn.outerPath = outerPath@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "wrappedOut.close()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Pair<Long,Integer> startOffsetLengthPair = startOffsetLengthPairs.get(i)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "RANDOM.nextBytes(embeddedInlineBytes)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "wrappedOut.flush()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testReadInlineFile['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertEquals(1,actualFileStatuses.length)@@@39@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "int i = 0@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "FileStatus expectedFileStatus = outerPath.getFileSystem(conf).getFileStatus(outerPath)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "verifyFileStatus(expectedFileStatus,inlinePath,startOffsetLengthPair.getRight(),inlineFileSystem.getFileStatus(inlinePath))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "i++@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "wrappedOut.close()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertArrayEquals(expectedBytes,actualBytes)@@@43@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "assertTrue(inlineFileSystem.exists(inlinePath))@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "fsDataInputStream.readFully(0,actualBytes)@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "testReadInlineFile['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "i++@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "FSDataInputStream fsDataInputStream = inlineFileSystem.open(inlinePath)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "fsDataInputStream.close()@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "verifyFileStatus(expectedFileStatus,inlinePath,startOffsetLengthPair.getRight(),actualFileStatuses(0()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "randomBytes = new byte((((@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "int inlineContentSize@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "assertArrayEquals(expectedBytes,actualBytes)@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "FileStatus(( actualFileStatuses = inlineFileSystem.listStatus(inlinePath)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "i < totalSlices@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "List<byte((> expectedByteArrays = new ArrayList<>()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "i < totalSlices@@@10@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "byte(( embeddedInlineBytes = new byte((((@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "toReturn.expectedBytes = embeddedInlineBytes@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "toReturn.length = embeddedInlineBytes.length@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertEquals(InLineFileSystem.SCHEME,inlineFileSystem.getScheme())@@@45@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Path outerPath = getRandomOuterFSPath()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "wrappedOut.write(randomBytes)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertTrue(inlineFileSystem.exists(inlinePath))@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(InLineFileSystem.SCHEME,inlineFileSystem.getScheme())@@@45@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(URI.create(InLineFileSystem.SCHEME),inlineFileSystem.getUri())@@@46@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "wrappedOut.write(randomBytes)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "FSDataOutputStream wrappedOut = outerPath.getFileSystem(conf).create(outerPath,true)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "byte(( embeddedInlineBytes = new byte((((@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "wrappedOut.write(embeddedInlineBytes)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "toReturn.startOffset = wrappedOut.getPos()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "List<Pair<Long,Integer>> startOffsetLengthPairs = new ArrayList<>()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "byte(( randomBytes = new byte((((@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "byte(( randomBytes = new byte((((@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->24 [style = solid, label="randomBytes"];
16->51 [style = bold, label=""];
33->13 [style = solid, label="inlinePath"];
0->12 [style = dotted, label="true"];
56->52 [style = bold, label=""];
43->55 [style = bold, label=""];
32->22 [style = solid, label="embeddedInlineBytes"];
22->37 [style = bold, label=""];
39->9 [style = bold, label=""];
7->1 [style = solid, label="i"];
1->27 [style = bold, label=""];
1->31 [style = dotted, label="true"];
1->21 [style = dotted, label="true"];
26->1 [style = solid, label="i"];
38->41 [style = bold, label=""];
31->48 [style = dashed, label="0"];
9->21 [style = solid, label="expectedFileStatus"];
24->43 [style = bold, label=""];
40->38 [style = bold, label=""];
9->7 [style = bold, label=""];
8->44 [style = bold, label=""];
41->20 [style = bold, label=""];
45->48 [style = bold, label=""];
5->29 [style = solid, label="outerPath"];
1->34 [style = dotted, label="true"];
21->2 [style = bold, label=""];
13->46 [style = dashed, label="0"];
1->3 [style = dotted, label="true"];
3->35 [style = bold, label=""];
1->13 [style = dotted, label="true"];
54->29 [style = bold, label=""];
17->44 [style = solid, label="actualBytes"];
46->21 [style = bold, label=""];
18->22 [style = bold, label=""];
51->50 [style = bold, label=""];
37->60 [style = bold, label=""];
60->52 [style = solid, label="randomBytes"];
2->49 [style = bold, label=""];
0->24 [style = dotted, label="true"];
32->43 [style = dashed, label="0"];
0->40 [style = bold, label=""];
1->44 [style = dotted, label="true"];
19->28 [style = bold, label=""];
32->18 [style = bold, label=""];
58->22 [style = bold, label=""];
8->11 [style = bold, label=""];
59->54 [style = bold, label=""];
1->27 [style = dotted, label="true"];
54->20 [style = solid, label="toReturn"];
5->29 [style = bold, label=""];
1->35 [style = dotted, label="true"];
1->45 [style = dotted, label="true"];
7->1 [style = bold, label=""];
0->43 [style = dotted, label="true"];
25->36 [style = bold, label=""];
26->1 [style = bold, label=""];
43->32 [style = bold, label=""];
9->35 [style = solid, label="expectedFileStatus"];
42->31 [style = bold, label=""];
34->42 [style = bold, label=""];
4->12 [style = solid, label="randomBytes"];
43->55 [style = solid, label="embeddedInlineBytes"];
36->14 [style = bold, label=""];
40->38 [style = solid, label="randomBytes"];
5->14 [style = solid, label="outerPath"];
1->42 [style = dotted, label="true"];
1->26 [style = dotted, label="true"];
1->33 [style = dotted, label="true"];
43->22 [style = solid, label="embeddedInlineBytes"];
42->45 [style = dashed, label="0"];
26->27 [style = solid, label="i"];
33->21 [style = solid, label="inlinePath"];
43->30 [style = solid, label="startOffset"];
44->34 [style = bold, label=""];
0->37 [style = dotted, label="true"];
35->17 [style = bold, label=""];
7->27 [style = solid, label="i"];
20->39 [style = bold, label=""];
1->8 [style = dotted, label="true"];
32->37 [style = solid, label="embeddedInlineBytes"];
33->2 [style = solid, label="inlinePath"];
29->16 [style = bold, label=""];
14->6 [style = bold, label=""];
1->28 [style = dotted, label="true"];
60->56 [style = bold, label=""];
17->8 [style = bold, label=""];
43->58 [style = solid, label="embeddedInlineBytes"];
17->8 [style = solid, label="actualBytes"];
61->41 [style = bold, label=""];
1->10 [style = dotted, label="true"];
0->18 [style = dotted, label="true"];
1->17 [style = dotted, label="true"];
49->35 [style = bold, label=""];
52->61 [style = bold, label=""];
53->6 [style = solid, label="randomBytes"];
37->30 [style = bold, label=""];
2->3 [style = bold, label=""];
0->4 [style = dotted, label="true"];
11->44 [style = dashed, label="0"];
17->11 [style = solid, label="actualBytes"];
40->41 [style = solid, label="randomBytes"];
1->48 [style = dotted, label="true"];
16->0 [style = solid, label="totalSlices"];
12->24 [style = bold, label=""];
7->10 [style = solid, label="i"];
33->46 [style = solid, label="inlinePath"];
23->0 [style = bold, label=""];
0->30 [style = dotted, label="true"];
1->19 [style = dotted, label="true"];
48->26 [style = bold, label=""];
1->46 [style = dotted, label="true"];
31->26 [style = bold, label=""];
29->16 [style = solid, label="outerPath"];
33->28 [style = solid, label="inlinePath"];
32->18 [style = solid, label="embeddedInlineBytes"];
26->10 [style = solid, label="i"];
27->10 [style = bold, label=""];
47->5 [style = bold, label=""];
10->44 [style = solid, label="expectedBytes"];
5->33 [style = solid, label="outerPath"];
4->12 [style = bold, label=""];
10->33 [style = bold, label=""];
0->23 [style = dotted, label="true"];
0->32 [style = dotted, label="true"];
53->12 [style = solid, label="randomBytes"];
33->19 [style = bold, label=""];
6->12 [style = bold, label=""];
30->37 [style = dashed, label="0"];
6->23 [style = solid, label="i"];
29->51 [style = solid, label="outerPath"];
51->50 [style = solid, label="outerPath"];
23->0 [style = solid, label="i"];
34->45 [style = bold, label=""];
1->11 [style = dotted, label="true"];
30->23 [style = bold, label=""];
28->13 [style = bold, label=""];
16->25 [style = bold, label=""];
6->0 [style = bold, label=""];
15->5 [style = bold, label=""];
0->22 [style = dotted, label="true"];
6->0 [style = solid, label="i"];
1->49 [style = dotted, label="true"];
28->46 [style = bold, label=""];
11->34 [style = bold, label=""];
0->4 [style = bold, label=""];
3->49 [style = dashed, label="0"];
53->6 [style = bold, label=""];
5->9 [style = solid, label="outerPath"];
60->56 [style = solid, label="randomBytes"];
59->57 [style = dotted, label="true"];
10->11 [style = solid, label="expectedBytes"];
2->35 [style = solid, label="actualFileStatuses"];
1->2 [style = dotted, label="true"];
13->21 [style = bold, label=""];
7->26 [style = solid, label="i"];
50->53 [style = bold, label=""];
55->58 [style = bold, label=""];
43->24 [style = dashed, label="0"];
16->1 [style = solid, label="totalSlices"];
33->35 [style = solid, label="inlinePath"];
37->22 [style = dashed, label="0"];
}
