digraph {
8 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag),ERROR_MESSAGE)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "dagManager.addDag(dag,true)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "return@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(null,ERROR_MESSAGE)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(null,ERROR_MESSAGE)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag),ERROR_MESSAGE)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.fail(\"Job cancellation was not triggered.\")@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Long flowExecutionId = System.currentTimeMillis() - TimeUnit.SECONDS.toMillis(10)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "dagManager.addDag(dag,true,true)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testFlowSlaWithoutConfig['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testOrphanFlowKill['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(null,ERROR_MESSAGE)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testFlowSlaWithoutConfig['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "String dagId = DagManagerUtils.generateDagId(dag)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(dagManager.dagManagerThreads(queue(.dagToSLA.get(dagId).longValue(),DagManagerUtils.DEFAULT_FLOW_SLA_MILLIS)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int queue = DagManagerUtils.getDagQueueId(dag,dagNumThreads)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "dagManager.addDag(dag,true)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "jobConfig = jobConfig.withValue(ConfigurationKeys.GOBBLIN_JOB_START_SLA_TIME,ConfigValueFactory.fromAnyRef(\"7\")).withValue(ConfigurationKeys.GOBBLIN_JOB_START_SLA_TIME_UNIT,ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"3\",flowExecutionId,\"FINISH_RUNNING\",1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(null,ERROR_MESSAGE)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Mockito.doReturn(DagManagerTest.getMockJobStatus(\"flow6\",\"group6\",flowExecutionId,\"group6\",\"job0\",String.valueOf(ExecutionStatus.ORCHESTRATED))).when(dagManager.getJobStatusRetriever()).getJobStatusesForFlowExecution(\"flow6\",\"group6\",flowExecutionId,\"job0\",\"group6\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"6\",flowExecutionId,\"FINISH_RUNNING\",1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "when(this.dagManager.getJobStatusRetriever().getLatestExecutionIdsForFlow(eq(\"flow3\"),eq(\"group3\"),anyInt())).thenReturn(Collections.singletonList(flowExecutionId))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "long flowExecutionId = System.currentTimeMillis()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(null,ERROR_MESSAGE)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17->25 [style = bold, label=""];
8->24 [style = bold, label=""];
25->12 [style = solid, label="dag"];
12->5 [style = bold, label=""];
18->23 [style = bold, label=""];
25->8 [style = solid, label="dag"];
16->6 [style = bold, label=""];
0->12 [style = bold, label=""];
11->6 [style = bold, label=""];
25->3 [style = bold, label=""];
21->8 [style = bold, label=""];
26->18 [style = bold, label=""];
12->20 [style = bold, label=""];
18->23 [style = solid, label="jobConfig"];
6->17 [style = dashed, label="0"];
9->13 [style = solid, label="dag"];
8->10 [style = dotted, label="true"];
6->9 [style = solid, label="flowExecutionId"];
17->25 [style = solid, label="flowExecutionId"];
25->7 [style = solid, label="dag"];
4->0 [style = bold, label=""];
17->19 [style = solid, label="flowExecutionId"];
7->14 [style = bold, label=""];
7->26 [style = bold, label=""];
9->3 [style = solid, label="dag"];
8->1 [style = bold, label=""];
8->1 [style = dotted, label="true"];
9->7 [style = solid, label="dag"];
3->7 [style = bold, label=""];
6->14 [style = solid, label="flowExecutionId"];
25->3 [style = solid, label="dag"];
4->15 [style = dashed, label="0"];
5->13 [style = bold, label=""];
15->0 [style = bold, label=""];
9->25 [style = dashed, label="0"];
13->2 [style = bold, label=""];
9->4 [style = solid, label="dag"];
9->3 [style = bold, label=""];
22->17 [style = bold, label=""];
10->2 [style = bold, label=""];
14->15 [style = bold, label=""];
23->12 [style = bold, label=""];
6->9 [style = bold, label=""];
20->19 [style = bold, label=""];
1->10 [style = bold, label=""];
9->15 [style = solid, label="dag"];
14->4 [style = bold, label=""];
19->21 [style = bold, label=""];
}
