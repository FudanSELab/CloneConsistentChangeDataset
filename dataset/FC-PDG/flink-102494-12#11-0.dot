digraph {
1 [style = filled, label = "testHarness.waitForTaskRunning()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "verify(environment,times(1)).declineCheckpoint(eq(2L),argThat(new BarrierBufferTestBase.CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)))@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "streamConfig.setOperatorID(new OperatorID())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertNotNull(\"nothing emitted\",result)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testDeclineCallOnCancelBarrierTwoInputs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "testDeclineCallOnCancelBarrierTwoInputs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Object result = testHarness.getOutput().poll()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "StreamMockEnvironment environment = spy(testHarness.createEnvironment())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "verify(environment,times(1)).declineCheckpoint(eq(2L),argThat(new CheckpointBarrierAlignerTestBase.CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)))@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "testHarness.waitForTaskCompletion()@@@21@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testHarness.waitForInputProcessing()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testHarness.processEvent(new CancelCheckpointMarker(2L),0,1)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "CoStreamMap<String,String,String> op = new CoStreamMap<>(new UnionCoMap())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "StreamMap<String,String> mapOperator = new StreamMap<>(new IdentityMap())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "streamConfig.setStreamOperator(op)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testDeclineCallOnCancelBarrierOneInput['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testHarness.processEvent(new CancelCheckpointMarker(2L),0,0)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "streamConfig.setStreamOperator(mapOperator)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "StreamConfig streamConfig = testHarness.getStreamConfig()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TwoInputStreamTaskTestHarness<String,String,String> testHarness = new TwoInputStreamTaskTestHarness<>(null,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(\"wrong type emitted\",result instanceof CancelCheckpointMarker)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(\"wrong checkpoint id\",2L,((CancelCheckpointMarker)result).getCheckpointId())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testHarness.invoke(environment)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testHarness.endInput()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testHarness.processEvent(new CancelCheckpointMarker(2L),1,0)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testHarness.setupOutputForSingletonOperatorChain()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "OneInputStreamTaskTestHarness<String,String> testHarness = new OneInputStreamTaskTestHarness<>(null,1,2,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22->11 [style = bold, label=""];
26->22 [style = bold, label=""];
7->0 [style = solid, label="environment"];
14->12 [style = solid, label="result"];
8->14 [style = bold, label=""];
21->14 [style = bold, label=""];
10->6 [style = bold, label=""];
15->16 [style = solid, label="op"];
24->23 [style = bold, label=""];
17->19 [style = bold, label=""];
12->4 [style = bold, label=""];
9->13 [style = bold, label=""];
1->18 [style = bold, label=""];
14->12 [style = bold, label=""];
25->18 [style = bold, label=""];
6->8 [style = bold, label=""];
5->26 [style = bold, label=""];
0->1 [style = bold, label=""];
1->25 [style = bold, label=""];
2->17 [style = bold, label=""];
4->2 [style = bold, label=""];
11->7 [style = bold, label=""];
8->21 [style = dashed, label="0"];
26->22 [style = solid, label="mapOperator"];
6->21 [style = bold, label=""];
23->13 [style = bold, label=""];
16->22 [style = dashed, label="0"];
18->10 [style = bold, label=""];
7->0 [style = bold, label=""];
3->9 [style = bold, label=""];
15->16 [style = bold, label=""];
14->4 [style = solid, label="result"];
9->23 [style = dashed, label="0"];
20->9 [style = bold, label=""];
16->11 [style = bold, label=""];
15->26 [style = dashed, label="0"];
13->5 [style = bold, label=""];
18->6 [style = bold, label=""];
5->15 [style = bold, label=""];
}
