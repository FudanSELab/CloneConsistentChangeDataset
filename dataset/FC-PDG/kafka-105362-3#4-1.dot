digraph {
28 [style = filled, label = "assertEquals(64L,(long)transformedStruct.getInt64(\"A.B.int64\"))@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertArrayEquals(\"bytes\".getBytes(),transformedStruct.getBytes(\"A.B.bytes\"))@@@48@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "builder.field(\"int16\",Schema.INT16_SCHEMA)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "supportedTypes.put(\"float64\",64.)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Struct supportedTypes = new Struct(supportedTypesSchema)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "SourceRecord transformed = xform.apply(new SourceRecord(null,null,\"topic\",0,oneLevelNestedSchema,oneLevelNestedStruct))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "testNestedStruct['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "SourceRecord transformed = xform.apply(new SourceRecord(null,null,\"topic\",0,twoLevelNestedSchema,twoLevelNestedStruct))@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
55 [style = filled, label = "Struct supportedTypes = new Struct(supportedTypesSchema)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "supportedTypes.put(\"string\",\"stringy\")@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "supportedTypes.put(\"int32\",32)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "builder.field(\"int32\",Schema.INT32_SCHEMA)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertEquals(\"stringy\",transformedStruct.getString(\"A.B.string\"))@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Schema supportedTypesSchema = builder.build()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "SchemaBuilder builder = SchemaBuilder.struct()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "SchemaBuilder builder = SchemaBuilder.struct()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Struct transformedStruct = (Struct)transformed.value()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "twoLevelNestedStruct.put(\"A\",oneLevelNestedStruct)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "builder.field(\"A\",oneLevelNestedSchema)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(16,(short)transformedStruct.getInt16(\"A.B.int16\"))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "builder.field(\"bytes\",Schema.BYTES_SCHEMA)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(9,transformedStruct.schema().fields().size())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "builder.field(\"int64\",Schema.INT64_SCHEMA)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertEquals(64.,transformedStruct.getFloat64(\"A.B.float64\"),0.)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "Schema supportedTypesSchema = builder.build()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertNull(transformedStruct.get(\"B.opt_int32\"))@@@18@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(32.f,transformedStruct.getFloat32(\"A.B.float32\"),0.f)@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertArrayEquals(\"bytes\".getBytes(),transformedStruct.getBytes(\"A.B.bytes\"))@@@47@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "supportedTypes.put(\"int16\",(short)16)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "builder.field(\"string\",Schema.STRING_SCHEMA)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "Schema oneLevelNestedSchema = builder.build()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "builder.field(\"opt_int32\",Schema.OPTIONAL_INT32_SCHEMA)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "supportedTypes.put(\"opt_int32\",null)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "supportedTypes.put(\"int8\",(byte)8)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(true,transformedStruct.getBoolean(\"A.B.boolean\"))@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "supportedTypes.put(\"float32\",32.f)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertEquals(Schema.Type.STRUCT,transformed.valueSchema().type())@@@36@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "Struct twoLevelNestedStruct = new Struct(twoLevelNestedSchema)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(32,(int)transformedStruct.getInt32(\"A.B.int32\"))@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "supportedTypes.put(\"int64\",(long)64)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "testOptionalFieldStruct['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "builder.field(\"float64\",Schema.FLOAT64_SCHEMA)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "xformValue.configure(Collections.emptyMap())@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
54 [style = filled, label = "builder.field(\"B\",supportedTypesSchema)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "builder = SchemaBuilder.struct()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Struct transformedStruct = (Struct)transformed.value()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "supportedTypes.put(\"boolean\",true)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "builder.field(\"float32\",Schema.FLOAT32_SCHEMA)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "oneLevelNestedStruct.put(\"B\",supportedTypes)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(Schema.Type.STRUCT,transformed.valueSchema().type())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Struct oneLevelNestedStruct = new Struct(oneLevelNestedSchema)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(8,(byte)transformedStruct.getInt8(\"A.B.int8\"))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "final Flatten<SourceRecord> xform = new Flatten.Value<>()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "Struct oneLevelNestedStruct = new Struct(oneLevelNestedSchema)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "supportedTypes.put(\"bytes\",\"bytes\".getBytes())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "SourceRecord transformed = xformValue.apply(new SourceRecord(null,null,\"topic\",0,twoLevelNestedSchema,twoLevelNestedStruct))@@@35@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "Schema twoLevelNestedSchema = builder.build()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "oneLevelNestedStruct.put(\"B\",supportedTypes)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "testNestedStruct['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "xform.configure(Collections.emptyMap())@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "builder.field(\"boolean\",Schema.BOOLEAN_SCHEMA)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54->56 [style = bold, label=""];
6->35 [style = bold, label=""];
41->15 [style = bold, label=""];
8->45 [style = solid, label="oneLevelNestedSchema"];
29->30 [style = bold, label=""];
4->9 [style = solid, label="twoLevelNestedSchema"];
51->53 [style = bold, label=""];
16->12 [style = solid, label="oneLevelNestedSchema"];
53->54 [style = bold, label=""];
5->28 [style = bold, label=""];
33->9 [style = solid, label="twoLevelNestedStruct"];
47->11 [style = bold, label=""];
21->2 [style = bold, label=""];
33->0 [style = bold, label=""];
12->40 [style = bold, label=""];
52->60 [style = bold, label=""];
13->8 [style = dashed, label="0"];
12->33 [style = solid, label="oneLevelNestedStruct"];
34->26 [style = bold, label=""];
10->12 [style = bold, label=""];
9->21 [style = bold, label=""];
48->21 [style = bold, label=""];
27->33 [style = bold, label=""];
3->27 [style = solid, label="supportedTypes"];
13->25 [style = bold, label=""];
4->3 [style = bold, label=""];
56->60 [style = solid, label="oneLevelNestedSchema"];
7->11 [style = bold, label=""];
35->16 [style = solid, label="supportedTypesSchema"];
6->36 [style = solid, label="supportedTypesSchema"];
11->44 [style = bold, label=""];
17->41 [style = bold, label=""];
14->10 [style = bold, label=""];
45->0 [style = solid, label="twoLevelNestedSchema"];
20->14 [style = bold, label=""];
26->6 [style = bold, label=""];
50->49 [style = bold, label=""];
35->3 [style = solid, label="supportedTypesSchema"];
44->38 [style = bold, label=""];
24->20 [style = bold, label=""];
40->0 [style = solid, label="oneLevelNestedStruct"];
38->18 [style = bold, label=""];
44->58 [style = dashed, label="0"];
58->51 [style = bold, label=""];
59->35 [style = bold, label=""];
9->0 [style = dashed, label="0"];
0->48 [style = bold, label=""];
36->16 [style = bold, label=""];
42->22 [style = bold, label=""];
56->35 [style = solid, label="oneLevelNestedSchema"];
51->54 [style = solid, label="supportedTypesSchema"];
11->58 [style = bold, label=""];
46->43 [style = bold, label=""];
16->8 [style = bold, label=""];
51->55 [style = solid, label="supportedTypesSchema"];
32->52 [style = dashed, label="0"];
16->19 [style = solid, label="oneLevelNestedSchema"];
4->40 [style = solid, label="supportedTypes"];
8->40 [style = solid, label="oneLevelNestedSchema"];
31->34 [style = bold, label=""];
43->7 [style = bold, label=""];
19->45 [style = bold, label=""];
4->33 [style = solid, label="twoLevelNestedSchema"];
30->31 [style = bold, label=""];
40->27 [style = bold, label=""];
32->1 [style = bold, label=""];
28->17 [style = bold, label=""];
22->39 [style = bold, label=""];
57->43 [style = bold, label=""];
25->5 [style = bold, label=""];
55->52 [style = bold, label=""];
1->37 [style = bold, label=""];
0->9 [style = bold, label=""];
8->19 [style = bold, label=""];
45->27 [style = solid, label="twoLevelNestedSchema"];
60->59 [style = bold, label=""];
37->23 [style = bold, label=""];
45->4 [style = bold, label=""];
2->13 [style = bold, label=""];
49->47 [style = bold, label=""];
6->4 [style = solid, label="supportedTypesSchema"];
18->29 [style = bold, label=""];
23->24 [style = bold, label=""];
60->35 [style = solid, label="oneLevelNestedStruct"];
15->42 [style = bold, label=""];
27->0 [style = solid, label="twoLevelNestedStruct"];
35->36 [style = bold, label=""];
3->32 [style = bold, label=""];
55->59 [style = solid, label="supportedTypes"];
56->55 [style = bold, label=""];
33->35 [style = dashed, label="0"];
}
