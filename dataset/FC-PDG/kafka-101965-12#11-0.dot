digraph {
31 [style = filled, label = "shouldNotCommitNonRunningNonCorruptedTasks['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "verify(consumer)@@@25@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "consumer.seek(t1p0,offsetAndMetadata)@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertTrue(nonCorruptedTask.commitPrepared)@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "replay(stateManager)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "consumer.pause(taskId00Partitions)@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "expectRestoreToBeCompleted(consumer,changeLogReader)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "expect(consumer.assignment()).andReturn(taskId00Partitions)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "nonCorruptedTask.setCommitNeeded()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "taskManager.handleAssignment(assignment,emptyMap())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(nonRunningNonCorruptedTask.state(),is(Task.State.CREATED))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final StateMachineTask nonRunningNonCorruptedTask = new StateMachineTask(taskId01,taskId01Partitions,true,stateManager)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertThat(nonCorruptedTask.state(),is(Task.State.RUNNING))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "taskManager.setPartitionResetter(null)@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "shouldNotCommitNonRunningNonCorruptedTasks['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertFalse(nonRunningNonCorruptedTask.commitPrepared)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(assignment))).andStubReturn(asList(corruptedTask,nonRunningNonCorruptedTask))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "topologyBuilder.addSubscribedTopicsFromAssignment(anyObject(),anyString())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "taskManager.handleCorruption(singletonMap(taskId00,taskId00Partitions))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "stateManager.markChangelogAsCorrupted(taskId00Partitions)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "consumer.commitSync(eq(emptyMap()))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "expectLastCall()@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "final StateMachineTask nonCorruptedTask = new StateMachineTask(taskId01,taskId01Partitions,true,stateManager)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "expectLastCall().anyTimes()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "verify(activeTaskCreator)@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "assignment.putAll(taskId01Assignment)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "shouldCommitNonCorruptedTasksOnTaskCorruptedException['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "expectLastCall()@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "final StateMachineTask corruptedTask = new StateMachineTask(taskId00,taskId00Partitions,true,stateManager)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "verify(consumer)@@@23@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final Map<TaskId,Set<TopicPartition>> assignment = new HashMap<>(taskId00Assignment)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "verify(consumer)@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertThat(nonCorruptedTask.partitionsForOffsetReset,equalTo(Collections.emptySet()))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertThat(corruptedTask.partitionsForOffsetReset,equalTo(taskId00Partitions))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "replay(activeTaskCreator,topologyBuilder,consumer,changeLogReader)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "nonRunningNonCorruptedTask.setCommitNeeded()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "taskManager.handleCorruption(singletonMap(taskId00,taskId00Partitions))@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "expect(consumer.committed(taskId00Partitions)).andReturn(singletonMap(t1p0,offsetAndMetadata))@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "final OffsetAndMetadata offsetAndMetadata = new OffsetAndMetadata(0L)@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(),null),is(true))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final ProcessorStateManager stateManager = EasyMock.createStrictMock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(assignment))).andStubReturn(asList(corruptedTask,nonCorruptedTask))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(nonRunningNonCorruptedTask.partitionsForOffsetReset,equalTo(Collections.emptySet()))@@@19@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->25 [style = bold, label=""];
22->29 [style = bold, label=""];
21->9 [style = solid, label="assignment"];
5->14 [style = bold, label=""];
26->24 [style = bold, label=""];
42->39 [style = bold, label=""];
29->28 [style = solid, label="offsetAndMetadata"];
6->13 [style = solid, label="stateManager"];
10->37 [style = bold, label=""];
7->8 [style = bold, label=""];
9->42 [style = bold, label=""];
35->4 [style = bold, label=""];
32->16 [style = solid, label="assignment"];
34->6 [style = bold, label=""];
2->11 [style = bold, label=""];
13->17 [style = bold, label=""];
17->41 [style = dashed, label="0"];
33->11 [style = bold, label=""];
20->4 [style = bold, label=""];
29->28 [style = bold, label=""];
9->3 [style = bold, label=""];
30->9 [style = bold, label=""];
41->32 [style = bold, label=""];
28->23 [style = bold, label=""];
0->3 [style = dashed, label="0"];
29->23 [style = solid, label="offsetAndMetadata"];
11->16 [style = bold, label=""];
9->0 [style = bold, label=""];
17->12 [style = solid, label="nonRunningNonCorruptedTask"];
15->6 [style = bold, label=""];
21->10 [style = bold, label=""];
13->41 [style = bold, label=""];
4->1 [style = bold, label=""];
27->16 [style = bold, label=""];
32->21 [style = bold, label=""];
24->1 [style = bold, label=""];
10->12 [style = bold, label=""];
13->12 [style = solid, label="corruptedTask"];
13->10 [style = solid, label="corruptedTask"];
41->10 [style = solid, label="nonCorruptedTask"];
0->20 [style = bold, label=""];
6->8 [style = solid, label="stateManager"];
37->19 [style = bold, label=""];
12->10 [style = dashed, label="0"];
31->6 [style = bold, label=""];
3->0 [style = bold, label=""];
6->17 [style = solid, label="stateManager"];
0->26 [style = bold, label=""];
12->19 [style = bold, label=""];
8->13 [style = bold, label=""];
1->5 [style = bold, label=""];
3->36 [style = bold, label=""];
18->21 [style = bold, label=""];
20->36 [style = dashed, label="0"];
39->40 [style = bold, label=""];
38->33 [style = bold, label=""];
19->2 [style = bold, label=""];
16->30 [style = bold, label=""];
6->7 [style = bold, label=""];
6->41 [style = solid, label="stateManager"];
40->3 [style = bold, label=""];
25->22 [style = bold, label=""];
2->38 [style = bold, label=""];
36->35 [style = bold, label=""];
23->27 [style = bold, label=""];
16->9 [style = bold, label=""];
17->18 [style = bold, label=""];
}
