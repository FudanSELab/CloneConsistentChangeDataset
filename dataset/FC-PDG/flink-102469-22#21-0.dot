digraph {
42 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"Ciao-0-0\",initialTime))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"Hello-0-0\",initialTime))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"Hello-1-1\",initialTime))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()),1,1)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testHarness.waitForInputProcessing()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testHarness.endInput()@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testHarness.waitForInputProcessing()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "expectedOutput.add(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()),1,0)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "TestHarnessUtil.assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testHarness.waitForTaskCompletion()@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testHarness.processElement(new StreamRecord<>(\"Hello-0-0\",initialTime),0,0)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testHarness.processElement(new StreamRecord<>(\"Ciao-0-0\",initialTime),0,0)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testHarness.invoke()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "expectedOutput.add(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testHarness.waitForTaskRunning()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()),0,1)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "streamConfig.setStreamOperator(mapOperator)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()),0,0)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "long initialTime = 0L@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TestHarnessUtil.assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput())@@@31@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation()),0,0)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),0,1)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testHarness.processElement(new StreamRecord<>(\"Ciao-1-1\",initialTime),1,1)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "StreamConfig streamConfig = testHarness.getStreamConfig()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "StreamMap<String,String> mapOperator = new StreamMap<>(new IdentityMap())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final OneInputStreamTaskTestHarness<String,String> testHarness = new OneInputStreamTaskTestHarness<>(null,2,2,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),1,1)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "expectedOutput.add(new CancelCheckpointMarker(0))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testCheckpointBarriers['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testOvertakingCheckpointBarriers['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"Hello-0-0\",initialTime))@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "testHarness.processElement(new StreamRecord<>(\"Hello-1-1\",initialTime),1,1)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "testOvertakingCheckpointBarriers['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "TestHarnessUtil.assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),0,0)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"Ciao-1-1\",initialTime))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testHarness.waitForInputProcessing()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testHarness.setupOutputForSingletonOperatorChain()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "streamConfig.setOperatorID(new OperatorID())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),1,0)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expectedOutput.add(new StreamRecord<>(\"Ciao-0-0\",initialTime))@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10->18 [style = bold, label=""];
6->18 [style = solid, label="initialTime"];
15->1 [style = solid, label="expectedOutput"];
35->18 [style = bold, label=""];
24->2 [style = bold, label=""];
25->22 [style = bold, label=""];
16->8 [style = bold, label=""];
27->12 [style = bold, label=""];
11->1 [style = bold, label=""];
6->2 [style = solid, label="initialTime"];
29->31 [style = bold, label=""];
42->8 [style = bold, label=""];
36->15 [style = bold, label=""];
12->17 [style = bold, label=""];
5->14 [style = solid, label="mapOperator"];
6->9 [style = solid, label="initialTime"];
37->29 [style = bold, label=""];
34->7 [style = bold, label=""];
15->6 [style = bold, label=""];
6->0 [style = bold, label=""];
10->26 [style = bold, label=""];
7->4 [style = bold, label=""];
5->14 [style = bold, label=""];
32->16 [style = bold, label=""];
22->5 [style = bold, label=""];
6->24 [style = solid, label="initialTime"];
2->12 [style = bold, label=""];
20->10 [style = bold, label=""];
6->42 [style = solid, label="initialTime"];
17->34 [style = bold, label=""];
13->19 [style = bold, label=""];
30->21 [style = bold, label=""];
21->37 [style = bold, label=""];
21->29 [style = bold, label=""];
23->33 [style = bold, label=""];
15->34 [style = solid, label="expectedOutput"];
6->13 [style = solid, label="initialTime"];
31->27 [style = bold, label=""];
3->7 [style = bold, label=""];
33->25 [style = bold, label=""];
39->40 [style = bold, label=""];
6->40 [style = solid, label="initialTime"];
26->35 [style = bold, label=""];
6->35 [style = solid, label="initialTime"];
18->9 [style = bold, label=""];
3->21 [style = bold, label=""];
0->20 [style = bold, label=""];
27->24 [style = bold, label=""];
16->39 [style = bold, label=""];
28->3 [style = bold, label=""];
19->28 [style = bold, label=""];
41->33 [style = bold, label=""];
38->33 [style = bold, label=""];
3->30 [style = bold, label=""];
8->11 [style = bold, label=""];
40->42 [style = bold, label=""];
6->19 [style = solid, label="initialTime"];
4->32 [style = bold, label=""];
6->26 [style = solid, label="initialTime"];
9->13 [style = bold, label=""];
15->3 [style = solid, label="expectedOutput"];
14->36 [style = bold, label=""];
}
