digraph {
7 [style = filled, label = "jobConfigBuilders.add(new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(testDbName).setTargetPartitionStates(Collections.singleton(\"SLAVE\")))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "cfgBuilder.setAllowOverlapJobAssignment(false)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "i < _numNodes@@@4@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "JobQueue queue = queueBuild.build()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "i++@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertTrue(verifier.verifyByPolling())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "int i = 0@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver,queueName))@@@37@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "_driver.resume(queueName)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testWhenAllowOverlapJobAssignment['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ClusterLiveNodesVerifier verifier = new ClusterLiveNodesVerifier(_gZkClient,CLUSTER_NAME,Collections.singletonList(_participants(0(.getInstanceName()))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int j = 0@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "int i = 1@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "List<TaskConfig> taskConfigs = new ArrayList<TaskConfig>()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "_driver.stop(queueName)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "JobQueue.Builder queueBuild = new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "_driver.enqueueJob(queueName,\"job_\" + (i + 1),jobConfigBuilders.get(i))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "_driver.enqueueJob(queueName,\"job_\" + (i + 1),jobConfigBuilders.get(i))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "i < PARALLEL_COUNT@@@19@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "_participants(i(.syncStop()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "_driver.stop(queueName)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "i++@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Thread.sleep(2000)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "testWhenDisallowOverlapJobAssignment['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver,queueName))@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Thread.sleep(2000)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "String queueName = TestHelper.getTestMethodName()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "++i@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "i < jobConfigBuilders.size()@@@31@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "i < jobConfigBuilders.size()@@@16@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "cfgBuilder.setParallelJobs(PARALLEL_COUNT)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "cfgBuilder.setAllowOverlapJobAssignment(true)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "jobConfigBuilders.add(new JobConfig.Builder().addTaskConfigs(taskConfigs))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testWhenAllowOverlapJobAssignment['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "taskConfigs.add(new TaskConfig.Builder().setTaskId(\"task_\" + j).setCommand(MockTask.TASK_COMMAND).build())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "_driver.resume(queueName)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "j < TASK_COUNT@@@23@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "_driver.createQueue(queue)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertTrue(verifier.verify())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "int i = 0@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "++i@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "j++@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "int i = 0@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
41->37 [style = solid, label="queue"];
42->43 [style = solid, label="queueName"];
13->20 [style = solid, label="queueName"];
38->44 [style = bold, label=""];
17->1 [style = dotted, label="true"];
10->31 [style = dotted, label="true"];
28->10 [style = solid, label="queue"];
14->11 [style = solid, label="i"];
12->25 [style = solid, label="i"];
19->11 [style = bold, label=""];
45->31 [style = bold, label=""];
40->38 [style = bold, label=""];
42->3 [style = solid, label="queueName"];
2->14 [style = bold, label=""];
13->15 [style = solid, label="queueName"];
25->15 [style = bold, label=""];
19->11 [style = solid, label="i"];
14->11 [style = bold, label=""];
22->13 [style = bold, label=""];
13->1 [style = solid, label="queueName"];
13->8 [style = solid, label="queueName"];
12->24 [style = solid, label="i"];
11->16 [style = bold, label=""];
13->21 [style = solid, label="queueName"];
10->31 [style = bold, label=""];
8->18 [style = bold, label=""];
41->37 [style = bold, label=""];
16->19 [style = bold, label=""];
26->24 [style = bold, label=""];
33->13 [style = bold, label=""];
25->27 [style = bold, label=""];
7->5 [style = bold, label=""];
30->1 [style = solid, label="i"];
42->45 [style = solid, label="queueName"];
10->45 [style = bold, label=""];
6->0 [style = solid, label="j"];
44->41 [style = bold, label=""];
25->6 [style = dotted, label="true"];
11->16 [style = dotted, label="true"];
5->38 [style = dashed, label="0"];
11->19 [style = dotted, label="true"];
20->7 [style = bold, label=""];
37->13 [style = bold, label=""];
4->22 [style = bold, label=""];
25->26 [style = dotted, label="true"];
17->8 [style = bold, label=""];
29->17 [style = bold, label=""];
30->17 [style = bold, label=""];
17->1 [style = bold, label=""];
34->40 [style = bold, label=""];
10->43 [style = bold, label=""];
6->23 [style = solid, label="j"];
35->42 [style = bold, label=""];
22->33 [style = dashed, label="0"];
11->4 [style = bold, label=""];
30->17 [style = solid, label="i"];
32->14 [style = bold, label=""];
25->24 [style = dotted, label="true"];
10->45 [style = dotted, label="true"];
28->10 [style = solid, label="i"];
4->33 [style = bold, label=""];
23->0 [style = bold, label=""];
31->12 [style = bold, label=""];
3->28 [style = bold, label=""];
42->36 [style = solid, label="queueName"];
31->10 [style = bold, label=""];
24->25 [style = bold, label=""];
0->23 [style = dotted, label="true"];
17->29 [style = dotted, label="true"];
18->21 [style = bold, label=""];
1->29 [style = bold, label=""];
43->39 [style = bold, label=""];
0->9 [style = dotted, label="true"];
42->34 [style = bold, label=""];
0->9 [style = bold, label=""];
0->26 [style = bold, label=""];
28->10 [style = bold, label=""];
25->0 [style = dotted, label="true"];
27->26 [style = solid, label="taskConfigs"];
6->0 [style = bold, label=""];
15->30 [style = bold, label=""];
27->6 [style = bold, label=""];
7->3 [style = bold, label=""];
9->23 [style = bold, label=""];
23->0 [style = solid, label="j"];
28->45 [style = solid, label="i"];
14->19 [style = solid, label="i"];
13->7 [style = bold, label=""];
12->25 [style = bold, label=""];
42->34 [style = solid, label="queueName"];
25->27 [style = dotted, label="true"];
39->36 [style = bold, label=""];
24->25 [style = solid, label="i"];
13->20 [style = bold, label=""];
}
