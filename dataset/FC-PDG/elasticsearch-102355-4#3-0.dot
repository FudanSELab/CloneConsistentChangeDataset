digraph {
25 [style = filled, label = "FutureUtils.get(futNode1)@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "DiscoveryNode node2 = newNode(2,true)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertTrue(clusterStateHasNode(node1))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertTrue(clusterStateHasNode(node2))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "handleStartJoinFrom(node1,newTerm)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "long initialTerm = randomLongBetween(1,10)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "deterministicTaskQueue.runAllRunnableTasks()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "SimpleFuture futNode1 = joinNodeAsync(new JoinRequest(node1,Optional.of(new Join(node1,node0,newTerm,initialTerm,initialVersion))))@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "coordinator.becomeFollower(\"test\",node1)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "FutureUtils.get(futNode0)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(expectThrows(,null).getMessage(),containsString(\"join target is a follower\"))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "assertFalse(futNode0.isDone())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "setupFakeMasterServiceAndCoordinator(initialTerm,initialState(node0,initialTerm,initialVersion,new VotingConfiguration(Collections.singleton(node0.getId()))))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testJoinFollowerFails['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "setupFakeMasterServiceAndCoordinator(initialTerm,initialState(node0,initialTerm,initialVersion,new VotingConfiguration(Collections.singleton(node2.getId()))))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertFalse(futNode1.isDone())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "deterministicTaskQueue.runAllRunnableTasks()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "long initialVersion = randomLongBetween(1,10)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "handleFollowerCheckFrom(node1,newTerm)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "testJoinFollowerFails['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "SimpleFuture futNode0 = joinNodeAsync(new JoinRequest(node0,Optional.of(new Join(node0,node0,newTerm,initialTerm,initialVersion))))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "DiscoveryNode node0 = newNode(0,true)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertTrue(isLocalNodeElectedMaster())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "coordinator.mutex@@@10@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "DiscoveryNode node1 = newNode(1,true)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testJoinAccumulation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "long newTerm = initialTerm + randomLongBetween(1,10)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "joinNodeAndRun(new JoinRequest(node2,Optional.of(new Join(node2,node0,newTerm,initialTerm,initialVersion))))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "long newTerm = initialTerm + randomLongBetween(1,10)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
9->22 [style = bold, label=""];
0->3 [style = bold, label=""];
7->11 [style = solid, label="node0"];
8->28 [style = bold, label=""];
1->4 [style = bold, label=""];
7->9 [style = solid, label="node0"];
8->4 [style = solid, label="node1"];
23->30 [style = bold, label=""];
5->9 [style = bold, label=""];
34->19 [style = bold, label=""];
3->31 [style = bold, label=""];
3->24 [style = solid, label="initialVersion"];
10->24 [style = solid, label="newTerm"];
27->9 [style = bold, label=""];
10->26 [style = solid, label="newTerm"];
16->7 [style = bold, label=""];
3->11 [style = bold, label=""];
31->29 [style = bold, label=""];
32->27 [style = bold, label=""];
0->10 [style = solid, label="initialTerm"];
10->26 [style = bold, label=""];
30->34 [style = bold, label=""];
1->4 [style = dotted, label="true"];
3->26 [style = solid, label="initialVersion"];
10->9 [style = solid, label="newTerm"];
8->30 [style = solid, label="node1"];
3->9 [style = solid, label="initialVersion"];
7->8 [style = bold, label=""];
2->10 [style = bold, label=""];
11->2 [style = bold, label=""];
19->25 [style = bold, label=""];
20->33 [style = bold, label=""];
0->26 [style = solid, label="initialTerm"];
9->25 [style = solid, label="futNode1"];
2->13 [style = bold, label=""];
26->21 [style = bold, label=""];
8->0 [style = bold, label=""];
28->0 [style = bold, label=""];
0->11 [style = solid, label="initialTerm"];
15->17 [style = bold, label=""];
7->24 [style = solid, label="node0"];
28->34 [style = solid, label="node2"];
22->20 [style = bold, label=""];
0->31 [style = solid, label="initialTerm"];
17->14 [style = bold, label=""];
11->31 [style = dashed, label="0"];
33->24 [style = bold, label=""];
2->13 [style = solid, label="newTerm"];
7->31 [style = solid, label="node0"];
21->32 [style = bold, label=""];
26->19 [style = solid, label="futNode0"];
0->24 [style = solid, label="initialTerm"];
3->31 [style = solid, label="initialVersion"];
29->10 [style = bold, label=""];
9->12 [style = bold, label=""];
13->15 [style = bold, label=""];
7->26 [style = solid, label="node0"];
0->2 [style = solid, label="initialTerm"];
8->9 [style = solid, label="node1"];
6->7 [style = bold, label=""];
18->7 [style = bold, label=""];
10->1 [style = bold, label=""];
3->11 [style = solid, label="initialVersion"];
2->10 [style = solid, label="newTerm"];
8->13 [style = solid, label="node1"];
4->5 [style = bold, label=""];
8->10 [style = solid, label="node1"];
2->15 [style = solid, label="newTerm"];
8->15 [style = solid, label="node1"];
28->24 [style = solid, label="node2"];
0->9 [style = solid, label="initialTerm"];
24->23 [style = bold, label=""];
}
