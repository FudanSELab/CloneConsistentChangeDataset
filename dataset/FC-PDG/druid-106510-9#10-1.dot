digraph {
7 [style = filled, label = "Assert.assertEquals(Functions.identity(),query.getLimitSpec().build(query))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testGroupByFloatColumn['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "List<ResultRow> expectedResults = Arrays.asList(makeRow(query,\"2011-04-01\",\"qf_alias\",17000.0f,\"rows\",2L,\"idx\",175L),makeRow(query,\"2011-04-01\",\"qf_alias\",12000.0f,\"rows\",2L,\"idx\",324L))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new DefaultDimensionSpec(\"index\",\"index_alias\",ValueType.FLOAT)).setDimFilter(new SelectorDimFilter(\"quality\",\"entertainment\",null)).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).addOrderByColumn(new OrderByColumnSpec(\"index_alias\",OrderByColumnSpec.Direction.ASCENDING,StringComparators.NUMERIC)).setGranularity(QueryRunnerTestHelper.dayGran).build()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "expectedException.expectMessage(\"GroupBy v1 only supports dimensions with an outputType of STRING.\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<ResultRow> expectedResults = Arrays.asList(makeRow(query,\"2011-04-01\",\"index_alias\",158.747224f,\"rows\",1L,\"idx\",158L),makeRow(query,\"2011-04-02\",\"index_alias\",166.016049f,\"rows\",1L,\"idx\",166L))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertNotEquals(Functions.identity(),query.getLimitSpec().build(query))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD).setDimensions(new DefaultDimensionSpec(\"index\",\"index_alias\",ValueType.FLOAT)).setDimFilter(new SelectorDimFilter(\"quality\",\"entertainment\",null)).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT,new LongSumAggregatorFactory(\"idx\",\"index\")).addOrderByColumn(new OrderByColumnSpec(\"index_alias\",OrderByColumnSpec.Direction.ASCENDING,StringComparators.NUMERIC)).setGranularity(QueryRunnerTestHelper.DAY_GRAN).build()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testGroupByFloatColumnDescending['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testGroupByFloatColumn['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"float\")@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "expectedException.expect()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new DefaultDimensionSpec(\"qualityFloat\",\"qf_alias\",ValueType.FLOAT)).setDimFilter(new InDimFilter(\"quality\",Arrays.asList(\"entertainment\",\"technology\"),null)).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).addOrderByColumn(new OrderByColumnSpec(\"qf_alias\",OrderByColumnSpec.Direction.DESCENDING,StringComparators.NUMERIC)).setGranularity(QueryRunnerTestHelper.allGran).build()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->6 [style = dotted, label="true"];
13->5 [style = solid, label="query"];
4->9 [style = bold, label=""];
9->5 [style = solid, label="query"];
1->8 [style = bold, label=""];
4->1 [style = dotted, label="true"];
4->6 [style = bold, label=""];
11->14 [style = bold, label=""];
0->2 [style = solid, label="expectedResults"];
5->2 [style = solid, label="results"];
8->0 [style = solid, label="query"];
4->13 [style = bold, label=""];
7->11 [style = dashed, label="0"];
13->11 [style = solid, label="query"];
7->0 [style = bold, label=""];
9->0 [style = solid, label="query"];
9->7 [style = bold, label=""];
3->4 [style = bold, label=""];
1->13 [style = bold, label=""];
13->11 [style = bold, label=""];
1->9 [style = bold, label=""];
8->7 [style = bold, label=""];
8->7 [style = solid, label="query"];
8->13 [style = dashed, label="0"];
8->9 [style = dashed, label="0"];
0->14 [style = dashed, label="0"];
6->1 [style = bold, label=""];
5->2 [style = bold, label=""];
12->4 [style = bold, label=""];
8->5 [style = solid, label="query"];
13->14 [style = solid, label="query"];
9->7 [style = solid, label="query"];
10->4 [style = bold, label=""];
4->8 [style = bold, label=""];
14->2 [style = solid, label="expectedResults"];
0->5 [style = bold, label=""];
14->5 [style = bold, label=""];
}
