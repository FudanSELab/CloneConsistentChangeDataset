digraph {
24 [style = filled, label = "KeyedMultipleInputTransformation<Integer> multipleInputTransformation = new KeyedMultipleInputTransformation<>(\"operator\",selectableOperator,BasicTypeInfo.INT_TYPE_INFO,1,BasicTypeInfo.INT_TYPE_INFO)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "KeyedMultipleInputTransformation<Integer> multipleInputTransformation = new KeyedMultipleInputTransformation<>(\"operator\",selectableOperator,BasicTypeInfo.INT_TYPE_INFO,1,BasicTypeInfo.INT_TYPE_INFO)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(operatorNode.getInputRequirements().get(1),equalTo(StreamConfig.InputRequirement.SORTED))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertThat(operatorNode.getOperatorFactory().getChainingStrategy(),equalTo(ChainingStrategy.HEAD))@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "StreamGraphGenerator graphGenerator = new StreamGraphGenerator(Collections.singletonList(sink.getTransformation()),env.getConfig(),env.getCheckpointConfig())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(operatorNode.getInputRequirements().get(0),equalTo(StreamConfig.InputRequirement.SORTED))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "testInputSelectableMultiInputTransformation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "graphGenerator.generate()@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(operatorNode.getSortedInputs(),equalTo(true))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertThat(graph.getTimerServiceProvider(),notNullValue())@@@21@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "StreamGraphGenerator graphGenerator = new StreamGraphGenerator(Collections.singletonList(sink.getTransformation()),env.getConfig(),env.getCheckpointConfig())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "MultipleInputOperatorFactory selectableOperator = new MultipleInputOperatorFactory(3,false)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "StreamGraph graph = graphGenerator.generate()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "multipleInputTransformation.addInput(elements2.getTransformation(),null)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testMultiInputTransformation['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "expectedException.expect()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "DataStreamSource<Integer> elements2 = env.fromElements(1,2)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "multipleInputTransformation.addInput(elements3.getTransformation(),null)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testMultiInputTransformation['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "DataStreamSource<Integer> elements3 = env.fromElements(1,2)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "MultipleInputOperatorFactory selectableOperator = new MultipleInputOperatorFactory(3,true)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "expectedException.expectMessage(\"Batch state backend and sorting inputs are not supported in graphs with an InputSelectable operator.\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "multipleInputTransformation.addInput(elements1.getTransformation(),null)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(graph.getStateBackend(),instanceOf())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "DataStreamSink<Integer> sink = new MultipleConnectedStreams(env).transform(multipleInputTransformation).addSink(new DiscardingSink<>())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "graphGenerator.setRuntimeExecutionMode(RuntimeExecutionMode.BATCH)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "StreamNode operatorNode = graph.getStreamNode(multipleInputTransformation.getId())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "DataStreamSource<Integer> elements1 = env.fromElements(1,2)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(operatorNode.getOperatorFactory().getChainingStrategy(),equalTo(ChainingStrategy.HEAD))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->10 [style = bold, label=""];
8->15 [style = bold, label=""];
6->18 [style = bold, label=""];
11->6 [style = bold, label=""];
18->26 [style = bold, label=""];
26->9 [style = bold, label=""];
20->3 [style = bold, label=""];
2->9 [style = bold, label=""];
18->2 [style = bold, label=""];
9->8 [style = bold, label=""];
12->7 [style = bold, label=""];
7->3 [style = bold, label=""];
1->23 [style = bold, label=""];
24->5 [style = bold, label=""];
15->22 [style = bold, label=""];
1->17 [style = bold, label=""];
4->0 [style = bold, label=""];
28->14 [style = bold, label=""];
25->27 [style = bold, label=""];
17->10 [style = solid, label="selectableOperator"];
23->24 [style = bold, label=""];
10->5 [style = bold, label=""];
19->14 [style = bold, label=""];
22->20 [style = bold, label=""];
0->1 [style = bold, label=""];
9->25 [style = bold, label=""];
12->22 [style = dashed, label="0"];
3->13 [style = bold, label=""];
16->14 [style = bold, label=""];
5->11 [style = bold, label=""];
15->12 [style = bold, label=""];
17->23 [style = dashed, label="0"];
27->29 [style = bold, label=""];
2->26 [style = dashed, label="0"];
13->21 [style = bold, label=""];
23->24 [style = solid, label="selectableOperator"];
10->24 [style = dashed, label="0"];
14->4 [style = bold, label=""];
}
