digraph {
2 [style = filled, label = "checkMemoize['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "checkMemoize['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertEquals(20,(int)memoizedSupplier.get())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Thread.sleep(150)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(20,(int)memoizedSupplier.get())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(2,countingSupplier.calls)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "CountingSupplier countingSupplier@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertEquals(0,countingSupplier.calls)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "CountingSupplier countingSupplier@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "checkExpiration['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(10,(int)memoizedSupplier.get())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Supplier<Integer> memoizedSupplier@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertEquals(1,countingSupplier.calls)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Supplier<Integer> memoizedSupplier@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(2,countingSupplier.calls)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "CountingSupplier countingSupplier@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(10,(int)memoizedSupplier.get())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Supplier<Integer> memoizedSupplier@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertEquals(1,countingSupplier.calls)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
5->7 [style = bold, label=""];
14->17 [style = bold, label=""];
12->13 [style = dotted, label="true"];
8->9 [style = dotted, label="true"];
4->16 [style = dashed, label="0"];
15->11 [style = bold, label=""];
8->5 [style = bold, label=""];
12->5 [style = bold, label=""];
8->10 [style = dotted, label="true"];
12->16 [style = dotted, label="true"];
4->10 [style = dashed, label="0"];
2->1 [style = dotted, label="true"];
18->14 [style = bold, label=""];
0->15 [style = bold, label=""];
11->18 [style = bold, label=""];
3->0 [style = bold, label=""];
7->6 [style = bold, label=""];
2->5 [style = bold, label=""];
2->4 [style = dotted, label="true"];
}
