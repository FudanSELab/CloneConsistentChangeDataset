digraph {
20 [style = filled, label = "assertEquals(999D / 2,values.get(\"avg_test\"),\"should avg=499.5\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Map<String,Object> values = testCounter.values()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(\"should have p95=950\",950L,values.get(\"p95_test\"))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "testValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(\"max_key1_test should =999\",999L,values.get(\"max_key1_test\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(0L,values.get(\"min_test\"),\"should have min=0\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertEquals(9,values.size(),\"There should be 9 values in the set\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertEquals(\"should have max=999\",999L,values.get(\"max_test\"))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "assertEquals(\"cnt_key1_test should =1000\",1000L,values.get(\"cnt_key1_test\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(999L,values.get(\"p999_test\"),\"should have p999=999\")@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "testValues['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertEquals(\"p99_key1_test should have p99=990\",990L,values.get(\"p99_key1_test\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(1000L,values.get(\"cnt_test\"),\"should have cnt=1000\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertEquals(\"sum_key2_test should =14\",2999 * 500L,values.get(\"sum_key2_test\"))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(999L,values.get(\"max_test\"),\"should have max=999\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(\"should have p999=999\",999L,values.get(\"p999_test\"))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertEquals(\"should have p50=500\",500L,values.get(\"p50_test\"))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertEquals(\"should have cnt=1000\",1000L,values.get(\"cnt_test\"))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertEquals(950L,values.get(\"p95_test\"),\"should have p95=950\")@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertEquals(\"p999_key2_test should have p999=1999\",1999L,values.get(\"p999_key2_test\"))@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(\"should avg=499.5\",999D / 2,values.get(\"avg_test\"))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "testValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "assertEquals(\"avg_key2_test should =3.5\",1000 + 999D / 2,values.get(\"avg_key2_test\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertEquals(\"p95_key2_test should have p95=1950\",1950L,values.get(\"p95_key2_test\"))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertEquals(\"p95_key1_test should have p95=950\",950L,values.get(\"p95_key1_test\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(\"p50_key1_test should have p50=500\",500L,values.get(\"p50_key1_test\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(500L,values.get(\"p50_test\"),\"should have p50=500\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "assertEquals(\"min_key2_test should =2\",1000L,values.get(\"min_key2_test\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(\"There should be 9 values in the set\",9,values.size())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "assertEquals(\"sum_key1_test should =999*500\",999 * 500L,values.get(\"sum_key1_test\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(\"p99_key2_test should have p99=1990\",1990L,values.get(\"p99_key2_test\"))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(999 * 500L,values.get(\"sum_test\"),\"should have sum=999*500\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertEquals(\"min_key1_test should =0\",0L,values.get(\"min_key1_test\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertEquals(\"max_key2_test should =5\",1999L,values.get(\"max_key2_test\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(\"cnt_key2_test should =4\",1000L,values.get(\"cnt_key2_test\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(\"avg_key1_test should =499.5\",999D / 2,values.get(\"avg_key1_test\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(\"should have sum=999*500\",999 * 500L,values.get(\"sum_test\"))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "assertEquals(\"p50_key2_test should have p50=1500\",1500L,values.get(\"p50_key2_test\"))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(\"should have min=0\",0L,values.get(\"min_test\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "assertEquals(\"There should be 18 values in the set\",18,values.size())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertEquals(\"p999_key1_test should have p999=999\",999L,values.get(\"p999_key1_test\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "addDataPoints()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"should have p99=990\",990L,values.get(\"p99_test\"))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "Map<String,Object> values = testCounterSet.values()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(990L,values.get(\"p99_test\"),\"should have p99=990\")@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2->23 [style = dashed, label="0"];
36->6 [style = bold, label=""];
32->35 [style = bold, label=""];
6->3 [style = bold, label=""];
34->29 [style = bold, label=""];
2->42 [style = dashed, label="0"];
6->43 [style = bold, label=""];
16->18 [style = bold, label=""];
42->37 [style = bold, label=""];
9->0 [style = bold, label=""];
25->39 [style = bold, label=""];
24->42 [style = bold, label=""];
7->10 [style = bold, label=""];
7->17 [style = dashed, label="0"];
10->34 [style = dashed, label="0"];
8->33 [style = dashed, label="0"];
21->15 [style = bold, label=""];
30->27 [style = bold, label=""];
1->29 [style = dashed, label="0"];
0->15 [style = dashed, label="0"];
29->25 [style = bold, label=""];
14->19 [style = bold, label=""];
4->39 [style = dashed, label="0"];
2->9 [style = bold, label=""];
8->14 [style = dashed, label="0"];
11->2 [style = bold, label=""];
39->33 [style = bold, label=""];
9->37 [style = dashed, label="0"];
38->32 [style = bold, label=""];
26->38 [style = bold, label=""];
12->25 [style = dashed, label="0"];
20->16 [style = bold, label=""];
5->6 [style = bold, label=""];
12->4 [style = bold, label=""];
3->7 [style = bold, label=""];
23->21 [style = bold, label=""];
11->19 [style = dashed, label="0"];
9->21 [style = dashed, label="0"];
1->16 [style = dashed, label="0"];
33->24 [style = bold, label=""];
19->23 [style = bold, label=""];
3->43 [style = dashed, label="0"];
27->41 [style = bold, label=""];
44->34 [style = bold, label=""];
11->24 [style = dashed, label="0"];
18->13 [style = bold, label=""];
1->12 [style = bold, label=""];
40->26 [style = bold, label=""];
4->8 [style = bold, label=""];
3->17 [style = bold, label=""];
10->20 [style = dashed, label="0"];
41->31 [style = bold, label=""];
12->18 [style = dashed, label="0"];
7->44 [style = dashed, label="0"];
31->28 [style = bold, label=""];
4->13 [style = dashed, label="0"];
10->1 [style = bold, label=""];
0->40 [style = dashed, label="0"];
8->11 [style = bold, label=""];
43->44 [style = bold, label=""];
13->14 [style = bold, label=""];
35->30 [style = bold, label=""];
37->40 [style = bold, label=""];
22->6 [style = bold, label=""];
17->20 [style = bold, label=""];
}
