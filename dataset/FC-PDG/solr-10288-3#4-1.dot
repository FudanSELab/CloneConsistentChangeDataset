digraph {
9 [style = filled, label = "expression.addParameter(\"\"\" + collection + \"\"\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "toExpression['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "method != null@@@56@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "toExpression['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "{StringBuilder builder = new StringBuilder()for (FieldComparator sort : bucketSorts){if (0 != builder.length()) {builder.append(\",\")}builder.append(sort.toExpression(factory))}expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\",builder.toString()))}@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "bucketSizeLimit == Integer.MAX_VALUE@@@34@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "expression.addParameter(metric.toExpression(factory))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\",Integer.toString(-1)))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "expression.addParameter(new StreamExpressionNamedParameter(\"offset\",Integer.toString(offset)))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "expression.addParameter(new StreamExpressionNamedParameter(\"method\",this.method))@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),val))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "serializeBucketSizeLimit@@@33@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "return expression@@@60@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "overfetch == Integer.MAX_VALUE@@@49@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "expression.addParameter(new StreamExpressionNamedParameter(\"rows\",Integer.toString(-1)))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "StreamExpression expression = new StreamExpression(\"search\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\",Integer.toString(-1)))@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\",zkHost))@@@59@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\",Integer.toString(overfetch)))@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),val.replace(\"\"\",\"\\\"\")))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "expression.addParameter(new StreamExpressionNamedParameter(\"rows\",Integer.toString(rows)))@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\",Integer.toString(bucketSizeLimit)))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "{StringBuilder builder = new StringBuilder()for (Bucket bucket : buckets){if (0 != builder.length()) {builder.append(\",\")}builder.append(bucket.toString())}expression.addParameter(new StreamExpressionNamedParameter(\"buckets\",builder.toString()))}@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "rows == Integer.MAX_VALUE@@@42@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "StreamFactory factory@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "expression.addParameter(collection)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "collection.indexOf(',') > -1@@@4@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "toExpression['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6->13 [style = solid, label="factory"];
0->3 [style = bold, label=""];
14->16 [style = bold, label=""];
24->28 [style = bold, label=""];
1->4 [style = bold, label=""];
13->24 [style = bold, label=""];
3->1 [style = bold, label=""];
21->15 [style = dotted, label="true"];
22->16 [style = bold, label=""];
11->12 [style = dotted, label="false"];
28->14 [style = dotted, label="false"];
7->3 [style = dotted, label="false"];
21->15 [style = bold, label=""];
0->23 [style = dashed, label="0"];
16->17 [style = dotted, label="true"];
23->3 [style = bold, label=""];
10->26 [style = bold, label=""];
11->12 [style = bold, label=""];
28->19 [style = dotted, label="true"];
16->17 [style = bold, label=""];
7->9 [style = dotted, label="true"];
1->18 [style = dashed, label="0"];
15->16 [style = bold, label=""];
24->28 [style = dotted, label="true"];
7->3 [style = bold, label=""];
28->14 [style = bold, label=""];
26->13 [style = bold, label=""];
19->16 [style = bold, label=""];
0->7 [style = bold, label=""];
3->18 [style = bold, label=""];
8->0 [style = bold, label=""];
7->9 [style = bold, label=""];
25->27 [style = bold, label=""];
24->27 [style = dotted, label="false"];
2->0 [style = bold, label=""];
11->25 [style = dotted, label="true"];
8->6 [style = dotted, label="true"];
20->23 [style = bold, label=""];
18->10 [style = bold, label=""];
21->22 [style = bold, label=""];
2->6 [style = dotted, label="true"];
24->11 [style = bold, label=""];
28->19 [style = bold, label=""];
23->5 [style = solid, label="expression"];
6->26 [style = solid, label="factory"];
0->5 [style = solid, label="expression"];
16->4 [style = bold, label=""];
9->1 [style = bold, label=""];
27->21 [style = bold, label=""];
21->22 [style = dotted, label="false"];
4->5 [style = bold, label=""];
12->27 [style = bold, label=""];
17->4 [style = bold, label=""];
24->21 [style = dotted, label="false"];
20->6 [style = dotted, label="true"];
11->25 [style = bold, label=""];
24->11 [style = dotted, label="false"];
}
