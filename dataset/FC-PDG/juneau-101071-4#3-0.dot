digraph {
4 [style = filled, label = "c.get().header(of(null)).run().assertBody().is(VALUE)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "a01_basic['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "c.get().header(of(null)).run().assertBody().isEmpty()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "c.get().header(new AcceptEncoding(VALUE)).run().assertBody().is(VALUE)@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "a01_basic['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "a01_basic['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "c.get().header(new TransferEncoding(VALUE)).run().assertBody().is(VALUE)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "c.get().header(of((String)null)).run().assertBody().isEmpty()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "c.get().header(acceptEncoding(null)).run().assertBody().is(\"gzip,deflate\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "RestClient c = client().build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "c.get().header(acceptEncoding(VALUE)).run().assertBody().is(VALUE)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "c.get().header(of(null)).run().assertBody().is(\"gzip,deflate\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "c.get().header(of(new StringBuilder(VALUE))).run().assertBody().is(VALUE)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "c.get().header(acceptEncoding((Object)null)).run().assertBody().is(\"gzip,deflate\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "c.get().header(of((Supplier<?>)null)).run().assertBody().isEmpty()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "c.get().header(acceptEncoding(VALUE)).run().assertBody().is(VALUE)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "c.get().header(of((Supplier<?>)null)).run().assertBody().is(\"gzip,deflate\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "c.get().header(acceptEncoding((Supplier<?>)null)).run().assertBody().is(\"gzip,deflate\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "c.get().header(of(VALUE)).run().assertBody().is(VALUE)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "c.get().header(acceptEncoding(new StringBuilder(VALUE))).run().assertBody().is(VALUE)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "c.get().header(of((Object)null)).run().assertBody().isEmpty()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "c.get().header(of((Object)null)).run().assertBody().is(\"gzip,deflate\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "c.get().header(of(VALUE)).run().assertBody().is(VALUE)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "c.get().header(acceptEncoding(null)).run().assertBody().is(VALUE)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "c.get().header(acceptEncoding((String)null)).run().assertBody().is(\"gzip,deflate\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "c.get().header(of((String)null)).run().assertBody().is(\"gzip,deflate\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25->0 [style = bold, label=""];
9->20 [style = dashed, label="0"];
6->21 [style = dashed, label="0"];
5->10 [style = bold, label=""];
0->16 [style = bold, label=""];
8->16 [style = dashed, label="0"];
19->18 [style = bold, label=""];
4->6 [style = bold, label=""];
1->15 [style = dashed, label="0"];
1->3 [style = bold, label=""];
18->12 [style = bold, label=""];
4->21 [style = bold, label=""];
7->0 [style = bold, label=""];
8->24 [style = dashed, label="0"];
15->19 [style = bold, label=""];
12->6 [style = bold, label=""];
2->4 [style = bold, label=""];
22->23 [style = bold, label=""];
4->12 [style = dashed, label="0"];
20->22 [style = bold, label=""];
3->19 [style = dashed, label="0"];
24->20 [style = bold, label=""];
9->14 [style = dashed, label="0"];
3->2 [style = bold, label=""];
5->11 [style = dashed, label="0"];
0->24 [style = bold, label=""];
0->8 [style = bold, label=""];
17->15 [style = bold, label=""];
8->9 [style = bold, label=""];
10->17 [style = dashed, label="0"];
9->5 [style = bold, label=""];
23->1 [style = bold, label=""];
2->18 [style = dashed, label="0"];
16->14 [style = bold, label=""];
11->17 [style = bold, label=""];
10->1 [style = bold, label=""];
14->11 [style = bold, label=""];
10->23 [style = dashed, label="0"];
13->0 [style = bold, label=""];
5->22 [style = dashed, label="0"];
}
