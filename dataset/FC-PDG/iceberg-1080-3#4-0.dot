digraph {
70 [style = filled, label = "testListOfStructsProjection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "TestHelpers.assertEmptyAvroField(projected,\"points\")@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
53 [style = filled, label = "Assert.assertNotNull(\"Should project points list\",projected.get(\"points\"))@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertNull(\"Should not project points list\",projected.get(\"points\"))@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "projectedP2 = points.get(1)@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "testListOfStructsProjection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "Schema writeSchema = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()),Types.NestedField.optional(22,\"points\",Types.ListType.ofOptional(21,Types.StructType.of(Types.NestedField.required(19,\"x\",Types.IntegerType.get()),Types.NestedField.optional(18,\"y\",Types.IntegerType.get())))))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertNotNull(\"Should project points list\",projected.get(\"points\"))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Assert.assertNull(\"Should project null z\",projectedP2.get(\"z\"))@@@55@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
51 [style = filled, label = "Assert.assertEquals(\"Should project z\",2,(int)projectedP1.get(\"z\"))@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "TestHelpers.assertEmptyAvroField(projectedP1,\"x\")@@@49@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "p1.put(\"x\",1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "TestHelpers.assertEmptyAvroField(projectedP1,\"y\")@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "Assert.assertEquals(\"Should read 2 points\",2,points.size())@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "TestHelpers.assertEmptyAvroField(projectedP2,\"y\")@@@54@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "projectedP1 = points.get(0)@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Record projectedP2 = points.get(1)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertNull(\"Should not project y\",projectedP2.get(\"y\"))@@@54@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertNotNull(\"Should project points list\",projected.get(\"points\"))@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "p2.put(\"y\",null)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "TestHelpers.assertEmptyAvroField(projectedP1,\"y\")@@@50@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "List<Record> points = (List<Record>)projected.get(\"points\")@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "projectedP1 = points.get(0)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "TestHelpers.assertEmptyAvroField(projectedP1,\"x\")@@@37@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "Assert.assertNull(\"Should not project x\",projectedP1.get(\"x\"))@@@37@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertNull(\"Should not project y\",projectedP2.get(\"y\"))@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "p2.put(\"x\",3)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(\"Should project y\",2,(int)projectedP1.get(\"y\"))@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Schema idOnly = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(\"Should project null z\",null,projectedP2.get(\"z\"))@@@55@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "projected = writeAndRead(\"x_only\",writeSchema,writeSchema.select(\"points.x\"),record)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "record.put(\"points\",ImmutableList.of(p1,p2))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertNull(\"Should not project y\",projectedP1.get(\"y\"))@@@27@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "points = (List<Record>)projected.get(\"points\")@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertNull(\"Should not project x\",projectedP2.get(\"x\"))@@@40@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "p1.put(\"y\",2)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "TestHelpers.assertEmptyAvroField(projectedP2,\"x\")@@@53@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
69 [style = filled, label = "Assert.assertNull(\"Should project null y\",projectedP2.get(\"y\"))@@@41@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@32@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Record projected = writeAndRead(\"id_only\",writeSchema,idOnly,record)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "projectedP2 = points.get(1)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Record p1 = new Record(AvroSchemaUtil.fromOption(AvroSchemaUtil.fromOption(record.getSchema().getField(\"points\").schema()).getElementType()))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertNull(\"Should not project x\",projectedP2.get(\"x\"))@@@53@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "TestHelpers.assertEmptyAvroField(projectedP2,\"y\")@@@30@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Assert.assertEquals(\"Should project points list\",record.get(\"points\"),projected.get(\"points\"))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(\"Should project x\",1,(int)projectedP1.get(\"x\"))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Record record = new Record(AvroSchemaUtil.convert(writeSchema,\"table\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "points = (List<Record>)projected.get(\"points\")@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "record.put(\"id\",34L)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(\"Should read 2 points\",2,points.size())@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertNull(\"Should not project y\",projectedP1.get(\"y\"))@@@50@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Schema yRenamed = new Schema(Types.NestedField.optional(22,\"points\",Types.ListType.ofOptional(21,Types.StructType.of(Types.NestedField.optional(18,\"z\",Types.IntegerType.get())))))@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "Assert.assertEquals(\"Should project null y\",null,projectedP2.get(\"y\"))@@@41@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "projected = writeAndRead(\"all_points\",writeSchema,writeSchema.select(\"points\"),record)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Record projectedP1 = points.get(0)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "TestHelpers.assertEmptyAvroField(projected,\"id\")@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
40 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@44@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "TestHelpers.assertEmptyAvroField(projectedP2,\"x\")@@@40@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
67 [style = filled, label = "TestHelpers.assertEmptyAvroField(projected,\"id\")@@@32@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "projected = writeAndRead(\"y_only\",writeSchema,writeSchema.select(\"points.y\"),record)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testListOfStructsProjection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(\"Should project x\",3,(int)projectedP2.get(\"x\"))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(\"Should read 2 points\",2,points.size())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertNull(\"Should not project x\",projectedP1.get(\"x\"))@@@49@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "TestHelpers.assertEmptyAvroField(projected,\"id\")@@@44@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "Record p2 = new Record(p1.getSchema())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.get(\"id\"))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "projected = writeAndRead(\"y_renamed\",writeSchema,yRenamed,record)@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "TestHelpers.assertEmptyAvroField(projected,\"id\")@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24->21 [style = bold, label=""];
61->48 [style = bold, label=""];
59->68 [style = bold, label=""];
8->48 [style = bold, label=""];
56->15 [style = bold, label=""];
1->47 [style = bold, label=""];
25->26 [style = bold, label=""];
49->68 [style = solid, label="projectedP2"];
2->34 [style = bold, label=""];
16->63 [style = solid, label="projectedP2"];
21->22 [style = solid, label="record"];
53->31 [style = bold, label=""];
49->59 [style = solid, label="projectedP2"];
7->36 [style = bold, label=""];
4->24 [style = bold, label=""];
48->56 [style = bold, label=""];
46->65 [style = solid, label="projectedP1"];
58->62 [style = bold, label=""];
32->51 [style = bold, label=""];
51->49 [style = bold, label=""];
55->16 [style = bold, label=""];
34->29 [style = bold, label=""];
70->24 [style = bold, label=""];
31->3 [style = bold, label=""];
50->22 [style = bold, label=""];
24->48 [style = solid, label="writeSchema"];
36->54 [style = bold, label=""];
65->7 [style = bold, label=""];
18->58 [style = solid, label="projectedP1"];
50->22 [style = solid, label="idOnly"];
40->1 [style = bold, label=""];
27->33 [style = bold, label=""];
43->6 [style = bold, label=""];
37->45 [style = solid, label="yRenamed"];
45->60 [style = solid, label="projected"];
3->46 [style = bold, label=""];
38->18 [style = bold, label=""];
2->64 [style = solid, label="projected"];
22->41 [style = bold, label=""];
15->2 [style = bold, label=""];
21->45 [style = solid, label="record"];
21->48 [style = solid, label="record"];
12->9 [style = bold, label=""];
69->37 [style = bold, label=""];
14->30 [style = bold, label=""];
24->2 [style = solid, label="writeSchema"];
47->38 [style = bold, label=""];
37->45 [style = bold, label=""];
29->10 [style = bold, label=""];
18->62 [style = solid, label="projectedP1"];
39->19 [style = bold, label=""];
41->61 [style = bold, label=""];
52->69 [style = dashed, label="0"];
66->24 [style = bold, label=""];
24->19 [style = solid, label="writeSchema"];
62->51 [style = bold, label=""];
23->15 [style = bold, label=""];
49->59 [style = bold, label=""];
45->40 [style = bold, label=""];
20->33 [style = solid, label="p1"];
68->57 [style = bold, label=""];
2->64 [style = bold, label=""];
25->33 [style = solid, label="p2"];
46->65 [style = bold, label=""];
17->20 [style = bold, label=""];
16->42 [style = bold, label=""];
19->13 [style = bold, label=""];
63->19 [style = bold, label=""];
0->43 [style = bold, label=""];
33->50 [style = bold, label=""];
21->2 [style = solid, label="record"];
60->1 [style = bold, label=""];
11->57 [style = dashed, label="0"];
41->8 [style = bold, label=""];
24->22 [style = solid, label="writeSchema"];
43->55 [style = solid, label="projectedP1"];
21->19 [style = solid, label="record"];
6->55 [style = bold, label=""];
36->54 [style = solid, label="projectedP2"];
10->0 [style = bold, label=""];
28->7 [style = bold, label=""];
24->21 [style = solid, label="writeSchema"];
42->39 [style = bold, label=""];
5->52 [style = bold, label=""];
22->61 [style = solid, label="projected"];
67->53 [style = bold, label=""];
9->11 [style = bold, label=""];
52->37 [style = bold, label=""];
54->69 [style = bold, label=""];
21->17 [style = bold, label=""];
44->32 [style = bold, label=""];
36->5 [style = bold, label=""];
48->56 [style = solid, label="projected"];
30->25 [style = bold, label=""];
26->27 [style = bold, label=""];
35->16 [style = bold, label=""];
24->45 [style = solid, label="writeSchema"];
13->53 [style = bold, label=""];
46->28 [style = bold, label=""];
18->44 [style = bold, label=""];
42->63 [style = bold, label=""];
48->23 [style = bold, label=""];
45->60 [style = bold, label=""];
6->35 [style = bold, label=""];
20->14 [style = bold, label=""];
19->67 [style = bold, label=""];
49->12 [style = bold, label=""];
19->67 [style = solid, label="projected"];
64->29 [style = bold, label=""];
18->58 [style = bold, label=""];
}
