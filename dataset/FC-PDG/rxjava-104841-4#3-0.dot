digraph {
7 [style = filled, label = "assertTrue(generated1.get() >= Flowable.bufferSize() * 2 && generated1.get() <= Flowable.bufferSize() * 3)@@@21@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Observable<Integer> o1 = createInfiniteObservable(generated1).subscribeOn(Schedulers.computation())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testSubscriber.assertNoErrors()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "System.out.println(onNextEvents)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "TestObserverEx<Integer> testObserver = new TestObserverEx<Integer>(){@Override public void onNext(Integer t){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1780401t}}@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testSubscriber.errors().get(0).printStackTrace()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "System.out.println(\"Generated 1: \" + generated1.get() + \" / received: \" + onNextEvents.size())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testObserver.awaitDone(5,TimeUnit.SECONDS)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "List<Integer> onNextEvents = testSubscriber.values()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "backpressureUpstream2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testObserver.errors().size() > 0@@@16@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Flowable<Integer> f1 = createInfiniteFlowable(generated1).subscribeOn(Schedulers.computation())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testSubscriber.errors().size() > 0@@@16@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testObserver.assertNoErrors()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testObserver.errors().get(0).printStackTrace()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Observable.merge(o1.take(Flowable.bufferSize() * 2),Observable.just(-99)).subscribe(testObserver)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(Flowable.bufferSize() * 2 + 1,onNextEvents.size())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Flowable.merge(f1.take(Flowable.bufferSize() * 2),Flowable.just(-99)).subscribe(testSubscriber)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testSubscriber.awaitDone(5,TimeUnit.SECONDS)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "testSubscriber.awaitDone(10,TimeUnit.SECONDS)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "backpressureUpstream2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "TestSubscriberEx<Integer> testSubscriber = new TestSubscriberEx<Integer>(){@Override public void onNext(Integer t){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@178035et}}@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "backpressureUpstream2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final AtomicInteger generated1 = new AtomicInteger()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "List<Integer> onNextEvents = testObserver.values()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8->16 [style = dashed, label="0"];
3->1 [style = bold, label=""];
19->12 [style = bold, label=""];
4->17 [style = dashed, label="0"];
0->6 [style = bold, label=""];
6->20 [style = dashed, label="0"];
12->21 [style = bold, label=""];
5->23 [style = dashed, label="0"];
9->18 [style = dashed, label="0"];
8->15 [style = dashed, label="0"];
11->4 [style = bold, label=""];
8->3 [style = bold, label=""];
3->22 [style = dashed, label="0"];
4->2 [style = bold, label=""];
16->22 [style = bold, label=""];
9->8 [style = bold, label=""];
15->3 [style = bold, label=""];
12->0 [style = bold, label=""];
22->10 [style = solid, label="onNextEvents"];
20->18 [style = bold, label=""];
23->24 [style = bold, label=""];
5->11 [style = dotted, label="true"];
13->12 [style = bold, label=""];
21->20 [style = bold, label=""];
10->5 [style = bold, label=""];
6->9 [style = solid, label="testSubscriber"];
17->2 [style = bold, label=""];
20->18 [style = solid, label="testObserver"];
10->23 [style = bold, label=""];
9->15 [style = bold, label=""];
0->21 [style = dashed, label="0"];
14->12 [style = bold, label=""];
5->4 [style = bold, label=""];
11->24 [style = dashed, label="0"];
24->17 [style = bold, label=""];
23->17 [style = bold, label=""];
5->11 [style = bold, label=""];
22->1 [style = bold, label=""];
2->7 [style = bold, label=""];
6->9 [style = bold, label=""];
1->10 [style = bold, label=""];
23->24 [style = dotted, label="true"];
3->10 [style = solid, label="onNextEvents"];
18->16 [style = bold, label=""];
}
