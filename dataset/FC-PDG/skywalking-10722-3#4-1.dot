digraph {
28 [style = filled, label = "Assert.assertEquals(50L,t1.getSummation().get(\"\"),0.0)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertEquals(3L,t3Cn.getSummation().get(\"10.0.0.1\"),0.0)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ImmutableMap<String,SampleFamily> input = ImmutableMap.of(\"http_success_request\",SampleFamilyBuilder.newBuilder(Sample.builder().labels(of(\"idc\",\"t1\")).value(50).build(),Sample.builder().labels(of(\"idc\",\"t3\",\"region\",\"cn\",\"svc\",\"catalog\")).value(51).build(),Sample.builder().labels(of(\"idc\",\"t1\",\"region\",\"us\",\"svc\",\"product\")).value(50).build(),Sample.builder().labels(of(\"idc\",\"t1\",\"region\",\"us\",\"instance\",\"10.0.0.1\")).value(100).build(),Sample.builder().labels(of(\"idc\",\"t3\",\"region\",\"cn\",\"instance\",\"10.0.0.1\")).value(3).build()).build())@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(1L,t1.getCount().get(\"\"),0.0)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(1L,t1Us.getCount().get(\"10.0.0.1\"),0.0)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testSingle['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "testLabeled['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "AvgFunction t1 = actValues.get(IDManager.ServiceInstanceID.buildId(IDManager.ServiceID.buildId(\"t1\",true),\"\"))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "analyzer = Analyzer.build(\"sum_service_instance_labels\",\"http_success_request.sum(('region', 'idc' , 'instance'().instance(('idc'( , ('region'()\",meterSystem)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "AvgLabeledFunction t1Us = actValues.get(IDManager.ServiceInstanceID.buildId(IDManager.ServiceID.buildId(\"t1\",true),\"us\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Map<String,AvgFunction> actValues = new HashMap<>()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Map<String,AvgLabeledFunction> actValues = new HashMap<>()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(100L,t1Us.getSummation().get(\"10.0.0.1\"),0.0)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testSingle['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ImmutableMap<String,SampleFamily> input = ImmutableMap.of(\"http_success_request\",SampleFamilyBuilder.newBuilder(Sample.builder().labels(of(\"idc\",\"t1\")).value(50).build(),Sample.builder().labels(of(\"idc\",\"t3\",\"region\",\"cn\",\"svc\",\"catalog\")).value(51).name(\"http_success_request\").build(),Sample.builder().labels(of(\"idc\",\"t1\",\"region\",\"us\",\"svc\",\"product\")).value(50).name(\"http_success_request\").build(),Sample.builder().labels(of(\"idc\",\"t1\",\"region\",\"us\",\"instance\",\"10.0.0.1\")).value(100).name(\"http_success_request\").build(),Sample.builder().labels(of(\"idc\",\"t3\",\"region\",\"cn\",\"instance\",\"10.0.0.1\")).value(3).name(\"http_success_request\").build()).build())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "Assert.assertEquals(1L,t3Cn.getCount().get(\"10.0.0.1\"),0.0)@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(54L,t3Cn.getSummation(),0.0)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(50L,t1Us.getSummation().get(\"\"),0.0)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(1L,t1Us.getCount().get(\"\"),0.0)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(50L,t1.getSummation(),0.0)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(51L,t3Cn.getSummation().get(\"\"),0.0)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "analyzer.analyse(input)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(1L,t3Cn.getCount(),0.0)@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "doAnswer(null).when(meterSystem).doStreamingCalculation(any())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "analyzer = Analyzer.build(\"sum_service_instance\",\"http_success_request.sum(('region', 'idc'().instance(('idc'( , ('region'()\",meterSystem)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "AvgLabeledFunction t3Cn = actValues.get(IDManager.ServiceInstanceID.buildId(IDManager.ServiceID.buildId(\"t3\",true),\"cn\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(150L,t1Us.getSummation(),0.0)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "AvgFunction t3Cn = actValues.get(IDManager.ServiceInstanceID.buildId(IDManager.ServiceID.buildId(\"t3\",true),\"cn\"))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(1L,t1Us.getCount(),0.0)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(1L,t3Cn.getCount().get(\"\"),0.0)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "AvgLabeledFunction t1 = actValues.get(IDManager.ServiceInstanceID.buildId(IDManager.ServiceID.buildId(\"t1\",true),\"\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "AvgFunction t1Us = actValues.get(IDManager.ServiceInstanceID.buildId(IDManager.ServiceID.buildId(\"t1\",true),\"us\"))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(1L,t1.getCount(),0.0)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->10 [style = bold, label=""];
1->4 [style = bold, label=""];
0->9 [style = bold, label=""];
30->17 [style = bold, label=""];
18->23 [style = bold, label=""];
28->30 [style = bold, label=""];
9->18 [style = dashed, label="0"];
16->6 [style = bold, label=""];
12->11 [style = bold, label=""];
11->29 [style = bold, label=""];
27->31 [style = bold, label=""];
7->20 [style = dashed, label="0"];
10->26 [style = bold, label=""];
22->28 [style = bold, label=""];
3->22 [style = dashed, label="0"];
0->17 [style = dashed, label="0"];
10->6 [style = bold, label=""];
7->3 [style = bold, label=""];
15->5 [style = bold, label=""];
8->7 [style = bold, label=""];
20->22 [style = bold, label=""];
5->16 [style = bold, label=""];
13->28 [style = dashed, label="0"];
29->20 [style = bold, label=""];
26->12 [style = bold, label=""];
14->0 [style = bold, label=""];
31->10 [style = bold, label=""];
6->26 [style = dashed, label="0"];
24->25 [style = bold, label=""];
23->19 [style = bold, label=""];
14->30 [style = dashed, label="0"];
21->32 [style = bold, label=""];
5->31 [style = dashed, label="0"];
3->13 [style = bold, label=""];
11->8 [style = bold, label=""];
4->19 [style = dashed, label="0"];
19->21 [style = bold, label=""];
10->16 [style = dashed, label="0"];
10->11 [style = solid, label="input"];
9->1 [style = bold, label=""];
16->11 [style = solid, label="input"];
32->24 [style = bold, label=""];
1->23 [style = dashed, label="0"];
13->14 [style = bold, label=""];
8->29 [style = dashed, label="0"];
17->18 [style = bold, label=""];
2->5 [style = bold, label=""];
6->12 [style = bold, label=""];
}
