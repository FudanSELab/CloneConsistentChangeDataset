digraph {
43 [style = filled, label = "++i@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(((Index)indexesUsed.iterator().next()).getName(),\"PortFolioID\")@@@82@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "final List indexUsed = new ArrayList()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Region rgn = CacheUtils.getRegion(\"/pos\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final boolean(( actualUnionCallback = new boolean((((@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "testRangeQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "testRangeQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(expectedProjectionCallabck(i(,actualProjectionCallback(i()@@@79@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "pf.setCreateTime(10l)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(expectedUnionCallback(i(,actualUnionCallback(i()@@@75@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "ObjectType(( expectedTypes = new ObjectType((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10b1a5@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Portfolio pf = new Portfolio(i)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "i < 200@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "CacheUtils.compareResultsOfWithAndWithoutIndex(sr,this)@@@83@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "sr(i((0( = (SelectResults)q.execute()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "rgn.put(\"\" + i,pf)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Query q = qs.newQuery(queries(i()@@@73@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final boolean(( actualIntersectionCallback = new boolean((((@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "i < 10000@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(expectedIndexUsed(i(,actualIndexUsed(i()@@@77@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "qs.createIndex(\"Status\",IndexType.FUNCTIONAL,\"status\",\"/pos\")@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final List indexesUsed = new ArrayList()@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "qs.createIndex(\"Type\",IndexType.FUNCTIONAL,\"\"type\"\",\"/pos\")@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertEquals(((Index)indexUsed.iterator().next()).getName(),\"CreateTime\")@@@82@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "i < queries.length@@@71@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final boolean(( expectedIndexUsed = new boolean((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10b16d@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(indexesUsed.size(),1)@@@81@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "int i = 0@@@70@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "++i@@@72@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "int i = 100@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "SelectResults(((( sr = new SelectResults((((((@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "qs.createIndex(\"CreateTime\",IndexType.FUNCTIONAL,\"createTime\",\"/pos\")@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "QueryService qs = CacheUtils.getQueryService()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "i < queries.length@@@17@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final boolean(( expectedProjectionCallabck = new boolean((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10b17d@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "testProjectionEvaluationOnORJunction_NOT_IMPLEMENTED['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "assertEquals(indexUsed.size(),3)@@@81@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "++i@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Query q = qs.newQuery(queries(i()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "QueryObserverHolder.setInstance(new QueryObserverAdapter(){public void invokedQueryUtilsUnion(SelectResults r1,SelectResults r2){actualUnionCallback(i( = true}public void invokedQueryUtilsIntersection(SelectResults r1,SelectResults r2){actualIntersectionCallback(i( = true}public void beforeIndexLookup(Index index,int oper,Object key){actualIndexUsed(i( = trueindexUsed.add(index)}public void beforeApplyingProjectionOnFilterEvaluatedResults(Object preProjectionApplied){actualProjectionCallback(i( = true}public void afterQueryEvaluation(Object result){++i}})@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "String(( queries = new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10b10a@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "qs.createIndex(\"PortFolioID\",IndexType.FUNCTIONAL,\"ID\",\"/pos\")@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final boolean(( expectedUnionCallback = {false}@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "int i = 0@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(expectedIntersectionCallback(i(,actualIntersectionCallback(i()@@@78@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final boolean(( expectedIntersectionCallback = {false}@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "sr(i((1( = (SelectResults)q.execute()@@@74@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final boolean(( actualIndexUsed = new boolean((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10b175@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(expectedTypes(i(,sr(i((1(.getCollectionType().getElementType())@@@76@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final boolean(( actualProjectionCallback = new boolean((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10b185@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->38 [style = dotted, label="true"];
32->43 [style = dotted, label="true"];
26->37 [style = dotted, label="true"];
20->26 [style = bold, label=""];
20->10 [style = solid, label="i"];
32->11 [style = dotted, label="true"];
38->12 [style = solid, label="i"];
41->9 [style = bold, label=""];
5->7 [style = solid, label="sr"];
18->23 [style = solid, label="actualProjectionCallback"];
38->24 [style = solid, label="i"];
4->33 [style = dotted, label="true"];
14->7 [style = bold, label=""];
13->33 [style = solid, label="expectedIntersectionCallback"];
23->29 [style = bold, label=""];
20->36 [style = solid, label="i"];
45->0 [style = bold, label=""];
38->23 [style = solid, label="i"];
4->8 [style = bold, label=""];
19->11 [style = solid, label="i"];
4->24 [style = dotted, label="true"];
32->11 [style = bold, label=""];
26->36 [style = dotted, label="true"];
20->45 [style = bold, label=""];
4->16 [style = bold, label=""];
25->40 [style = bold, label=""];
4->46 [style = bold, label=""];
13->25 [style = bold, label=""];
15->13 [style = bold, label=""];
10->31 [style = bold, label=""];
21->19 [style = bold, label=""];
26->45 [style = dashed, label="0"];
4->23 [style = dotted, label="true"];
34->4 [style = solid, label="i"];
43->32 [style = bold, label=""];
0->21 [style = bold, label=""];
3->33 [style = bold, label=""];
47->39 [style = bold, label=""];
5->11 [style = solid, label="i"];
32->5 [style = dotted, label="true"];
8->46 [style = dashed, label="0"];
17->42 [style = bold, label=""];
48->17 [style = bold, label=""];
44->17 [style = bold, label=""];
19->32 [style = solid, label="i"];
6->2 [style = bold, label=""];
33->23 [style = bold, label=""];
26->0 [style = bold, label=""];
35->17 [style = bold, label=""];
39->41 [style = bold, label=""];
38->3 [style = solid, label="i"];
36->37 [style = bold, label=""];
40->12 [style = solid, label="expectedTypes"];
30->15 [style = bold, label=""];
45->31 [style = dotted, label="true"];
9->22 [style = bold, label=""];
24->12 [style = bold, label=""];
38->24 [style = bold, label=""];
37->10 [style = bold, label=""];
18->34 [style = bold, label=""];
45->36 [style = bold, label=""];
8->14 [style = bold, label=""];
0->11 [style = solid, label="queries"];
18->3 [style = solid, label="actualIndexUsed"];
4->29 [style = dotted, label="true"];
31->26 [style = bold, label=""];
11->5 [style = bold, label=""];
26->31 [style = dotted, label="true"];
1->6 [style = bold, label=""];
30->24 [style = solid, label="expectedUnionCallback"];
19->32 [style = bold, label=""];
4->3 [style = dotted, label="true"];
20->26 [style = solid, label="i"];
15->28 [style = bold, label=""];
21->7 [style = solid, label="sr"];
49->7 [style = bold, label=""];
32->39 [style = bold, label=""];
12->3 [style = bold, label=""];
4->12 [style = dotted, label="true"];
18->33 [style = solid, label="actualIntersectionCallback"];
34->16 [style = solid, label="i"];
0->16 [style = solid, label="queries"];
27->1 [style = bold, label=""];
29->4 [style = bold, label=""];
20->45 [style = solid, label="i"];
6->23 [style = solid, label="expectedProjectionCallabck"];
45->10 [style = dotted, label="true"];
38->4 [style = solid, label="i"];
26->36 [style = bold, label=""];
46->49 [style = bold, label=""];
45->37 [style = dotted, label="true"];
42->20 [style = bold, label=""];
28->13 [style = bold, label=""];
40->18 [style = bold, label=""];
27->3 [style = solid, label="expectedIndexUsed"];
38->16 [style = solid, label="i"];
5->32 [style = solid, label="i"];
5->43 [style = bold, label=""];
32->47 [style = bold, label=""];
22->27 [style = bold, label=""];
18->24 [style = solid, label="actualUnionCallback"];
26->10 [style = dotted, label="true"];
38->33 [style = solid, label="i"];
38->7 [style = solid, label="sr"];
45->36 [style = dotted, label="true"];
34->4 [style = bold, label=""];
36->10 [style = solid, label="pf"];
4->16 [style = dotted, label="true"];
14->49 [style = dashed, label="0"];
2->30 [style = bold, label=""];
31->45 [style = bold, label=""];
16->38 [style = bold, label=""];
}
