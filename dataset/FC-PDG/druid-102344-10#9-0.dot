digraph {
39 [style = filled, label = "i++@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "recordSupplier.assign(partitions)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "EasyMock.expect(getRecordsResult1.getMillisBehindLatest()).andReturn(SHARD1_LAG_MILLIS).once()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "i++@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "recordSupplier.seekToLatest(partitions)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "EasyMock.expect(kinesis.getRecords(generateGetRecordsReq(SHARD0_ITERATOR,recordsPerFetch))).andReturn(getRecordsResult0).anyTimes()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Thread.sleep(100)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "EasyMock.expect(kinesis.getShardIterator(EasyMock.anyObject(),EasyMock.eq(SHARD_ID0),EasyMock.anyString(),EasyMock.anyString())).andReturn(getShardIteratorResult0).anyTimes()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "EasyMock.expect(kinesis.getShardIterator(EasyMock.anyObject(),EasyMock.eq(SHARD_ID1),EasyMock.anyString(),EasyMock.anyString())).andReturn(getShardIteratorResult1).anyTimes()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Thread.sleep(100)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "verifyAll()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "testSeekToLatest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "verifyAll()@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "EasyMock.expect(getRecordsResult0.getMillisBehindLatest()).andReturn(SHARD0_LAG_MILLIS).once()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "EasyMock.expect(getRecordsResult0.getNextShardIterator()).andReturn(null).anyTimes()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "recordSupplier.start()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "StreamPartition<String> shard0 = StreamPartition.of(STREAM,SHARD_ID0)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "EasyMock.expect(getShardIteratorResult0.getShardIterator()).andReturn(SHARD0_ITERATOR).anyTimes()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Set<StreamPartition<String>> partitions = ImmutableSet.of(StreamPartition.of(STREAM,SHARD_ID0),StreamPartition.of(STREAM,SHARD_ID1))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(SHARDS_LAG_MILLIS,recordSupplier.getPartitionResourcesTimeLag())@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "EasyMock.expect(getRecordsResult1.getNextShardIterator()).andReturn(null).anyTimes()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "recordsPerFetch = 100@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testPollDeaggregate['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testPollDeaggregate['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "EasyMock.expect(getShardIteratorResult0.getShardIterator()).andReturn(null).once()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,recordsPerFetch,0,2,false,100,5000,5000,60000,100)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "recordSupplier.assign(partitions)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "i < 10 && recordSupplier.bufferSize() < 12@@@23@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Set<StreamPartition<String>> partitions = ImmutableSet.of(shard0,shard1)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "EasyMock.expect(getShardIteratorResult1.getShardIterator()).andReturn(SHARD1_ITERATOR).anyTimes()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "EasyMock.expect(kinesis.getRecords(generateGetRecordsReq(SHARD1_ITERATOR,recordsPerFetch))).andReturn(getRecordsResult1).anyTimes()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertTrue(polledRecords.containsAll(ALL_RECORDS))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "int i = 0@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,recordsPerFetch,0,2,true,100,5000,5000,60000,100)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "EasyMock.expect(getRecordsResult1.getRecords()).andReturn(SHARD1_RECORDS).once()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(SHARDS_LAG_MILLIS,recordSupplier.getPartitionTimeLag())@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "List<OrderedPartitionableRecord<String,String>> polledRecords = cleanRecords(recordSupplier.poll(POLL_TIMEOUT_MILLIS))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "EasyMock.expect(getShardIteratorResult1.getShardIterator()).andReturn(null).once()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "int i = 0@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,recordsPerFetch,0,2,true,100,5000,5000,60000,100,true)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "i < 10 && recordSupplier.bufferSize() < 2@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(Collections.emptyList(),cleanRecords(recordSupplier.poll(POLL_TIMEOUT_MILLIS)))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "replayAll()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "StreamPartition<String> shard1 = StreamPartition.of(STREAM,SHARD_ID1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(partitions,recordSupplier.getAssignment())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EasyMock.expect(getRecordsResult0.getRecords()).andReturn(SHARD0_RECORDS).once()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "recordSupplier.seekToEarliest(partitions)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22->1 [style = solid, label="recordsPerFetch"];
21->0 [style = dashed, label="0"];
16->3 [style = bold, label=""];
4->9 [style = bold, label=""];
27->18 [style = bold, label=""];
21->10 [style = bold, label=""];
4->9 [style = solid, label="i"];
43->38 [style = dotted, label="true"];
30->17 [style = bold, label=""];
10->15 [style = bold, label=""];
17->6 [style = bold, label=""];
36->44 [style = bold, label=""];
39->43 [style = solid, label="i"];
8->19 [style = bold, label=""];
1->30 [style = dashed, label="0"];
39->43 [style = bold, label=""];
28->9 [style = bold, label=""];
6->0 [style = bold, label=""];
12->16 [style = bold, label=""];
25->14 [style = bold, label=""];
13->30 [style = bold, label=""];
20->31 [style = bold, label=""];
18->2 [style = bold, label=""];
5->28 [style = bold, label=""];
19->43 [style = solid, label="i"];
28->9 [style = solid, label="i"];
38->39 [style = bold, label=""];
18->35 [style = dashed, label="0"];
22->7 [style = bold, label=""];
32->33 [style = bold, label=""];
13->1 [style = bold, label=""];
26->22 [style = bold, label=""];
27->35 [style = bold, label=""];
1->17 [style = bold, label=""];
42->40 [style = bold, label=""];
4->28 [style = solid, label="i"];
40->45 [style = solid, label="partitions"];
22->36 [style = solid, label="recordsPerFetch"];
33->40 [style = solid, label="shard0"];
0->41 [style = bold, label=""];
19->39 [style = solid, label="i"];
9->43 [style = dashed, label="0"];
13->6 [style = solid, label="partitions"];
43->38 [style = bold, label=""];
43->39 [style = dotted, label="true"];
19->13 [style = bold, label=""];
6->45 [style = dashed, label="0"];
40->36 [style = bold, label=""];
0->4 [style = bold, label=""];
15->20 [style = bold, label=""];
3->8 [style = bold, label=""];
33->42 [style = bold, label=""];
22->30 [style = solid, label="recordsPerFetch"];
24->31 [style = dashed, label="0"];
9->21 [style = bold, label=""];
2->34 [style = dashed, label="0"];
7->27 [style = bold, label=""];
9->5 [style = bold, label=""];
13->33 [style = dashed, label="0"];
43->0 [style = bold, label=""];
34->32 [style = bold, label=""];
23->12 [style = bold, label=""];
13->17 [style = solid, label="partitions"];
40->44 [style = solid, label="partitions"];
45->37 [style = bold, label=""];
37->19 [style = bold, label=""];
29->22 [style = bold, label=""];
13->15 [style = solid, label="partitions"];
42->40 [style = solid, label="shard1"];
35->34 [style = bold, label=""];
20->24 [style = bold, label=""];
2->25 [style = bold, label=""];
44->45 [style = bold, label=""];
14->11 [style = bold, label=""];
11->23 [style = bold, label=""];
19->43 [style = bold, label=""];
9->28 [style = dotted, label="true"];
46->22 [style = bold, label=""];
9->5 [style = dotted, label="true"];
}
