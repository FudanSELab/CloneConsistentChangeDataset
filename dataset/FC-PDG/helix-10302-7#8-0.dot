digraph {
8 [style = filled, label = "Set<AssignableReplica> assignmentSet = generateReplicas(testCache)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "context.addPartitionToFaultZone(_testFaultZoneId,_resourceNames.get(0),_partitionNames.get(0))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "expectedFaultZoneMap.get(_testFaultZoneId).get(_resourceNames.get(0)).remove(_partitionNames.get(0))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(context.getEstimatedMaxPartitionCount(),4)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "testDuplicateAssign['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(context.getAssignmentForFaultZoneMap(),expectedFaultZoneMap)@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ResourceControllerDataProvider testCache = setupClusterDataCache()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(context.getEstimatedMaxPartitionByResource(resourceName),2)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertTrue(context.removePartitionFromFaultZone(_testFaultZoneId,_resourceNames.get(0),_partitionNames.get(0)))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ClusterContext context = new ClusterContext(assignmentSet,2,new HashMap<>(),new HashMap<>())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(context.getAssignmentForFaultZoneMap(),expectedFaultZoneMap)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(context.getAssignmentForFaultZoneMap(),Collections.emptyMap())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Map<String,Map<String,Set<String>>> expectedFaultZoneMap = Collections.singletonMap(_testFaultZoneId,assignmentSet.stream().collect(Collectors.groupingBy(null,Collectors.mapping(null,Collectors.toSet()))))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "context.addPartitionToFaultZone(_testFaultZoneId,_resourceNames.get(0),_partitionNames.get(0))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "ClusterContext context = new ClusterContext(assignmentSet,generateNodes(testCache),new HashMap<>(),new HashMap<>())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assert.assertEquals(context.getEstimatedMaxPartitionCount(),3)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(context.getEstimatedMaxTopStateCount(),2)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(context.getPartitionsForResourceAndFaultZone(_testFaultZoneId,resourceName),Collections.emptySet())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testNormalUsage['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "testNormalUsage['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assignmentSet.stream().forEach(null)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->9 [style = bold, label=""];
8->16 [style = bold, label=""];
5->8 [style = bold, label=""];
4->3 [style = bold, label=""];
8->2 [style = solid, label="assignmentSet"];
0->9 [style = bold, label=""];
2->19 [style = bold, label=""];
3->14 [style = solid, label="expectedFaultZoneMap"];
19->20 [style = bold, label=""];
9->4 [style = bold, label=""];
11->6 [style = bold, label=""];
5->16 [style = solid, label="testCache"];
3->12 [style = bold, label=""];
16->17 [style = bold, label=""];
5->8 [style = solid, label="testCache"];
8->16 [style = solid, label="assignmentSet"];
2->10 [style = bold, label=""];
14->1 [style = bold, label=""];
15->5 [style = bold, label=""];
1->11 [style = bold, label=""];
7->5 [style = bold, label=""];
3->6 [style = solid, label="expectedFaultZoneMap"];
8->2 [style = bold, label=""];
10->13 [style = bold, label=""];
18->5 [style = bold, label=""];
2->16 [style = dashed, label="0"];
12->14 [style = bold, label=""];
10->17 [style = dashed, label="0"];
17->13 [style = bold, label=""];
13->0 [style = bold, label=""];
}
