digraph {
12 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",15),Long.MAX_VALUE))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",4),initialTime + 3999))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",4),Long.MAX_VALUE))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "testDeltaEvictorEvictAfter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
40 [style = filled, label = "EvictingWindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator = new EvictingWindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new ReduceApplyWindowFunction<>(new SumReducer(),new PassThroughWindowFunction<String,GlobalWindow,Tuple2<String,Integer>>())),CountTrigger.of(windowSlide),CountEvictor.of(windowSize),0,null)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",5),initialTime + 1998))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "final int windowSlide = 2@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testHarness.close()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",9),initialTime + 10999))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final int triggerCount = 2@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "TypeInformation<Tuple2<String,Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "long initialTime = 0L@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",10),initialTime + 1000))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testDeltaEvictorEvictAfter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) TypeSerializer<StreamRecord<Tuple2<String,Integer>>> streamRecordSerializer = (TypeSerializer<StreamRecord<Tuple2<String,Integer>>>)new StreamElementSerializer(STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testHarness.close()@@@32@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",22),Long.MAX_VALUE))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 20))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",4),Long.MAX_VALUE))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "EvictingWindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator = new EvictingWindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),CountTrigger.of(triggerCount),DeltaEvictor.of(threshold,new DeltaFunction<Tuple2<String,Integer>>(){@Override public double getDelta(Tuple2<String,Integer> oldDataPoint,Tuple2<String,Integer> newDataPoint){return newDataPoint.f1 - oldDataPoint.f1}},evictAfter),0,null)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",2),Long.MAX_VALUE))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) TypeSerializer<StreamRecord<Tuple2<String,Integer>>> streamRecordSerializer = (TypeSerializer<StreamRecord<Tuple2<String,Integer>>>)new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",2),Long.MAX_VALUE))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "ListStateDescriptor<StreamRecord<Tuple2<String,Integer>>> stateDesc = new ListStateDescriptor<>(\"window-contents\",streamRecordSerializer)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final int threshold = 2@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3999))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "testHarness.open()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "testCountTrigger['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",5),initialTime + 999))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",5),Long.MAX_VALUE))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final boolean evictAfter = true@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1999))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 10999))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "AtomicInteger closeCalled = new AtomicInteger(0)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1998))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final int windowSize = 4@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",6),initialTime + 1999))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3000))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",16),Long.MAX_VALUE))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "TypeInformation<Tuple2<String,Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",4),Long.MAX_VALUE))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(\"Close was not called.\",1,closeCalled.get())@@@39@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 999))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41->40 [style = solid, label="windowSlide"];
16->15 [style = dashed, label="0"];
30->13 [style = bold, label=""];
6->22 [style = bold, label=""];
31->9 [style = bold, label=""];
20->40 [style = dashed, label="0"];
38->44 [style = solid, label="initialTime"];
18->30 [style = bold, label=""];
0->15 [style = solid, label="initialTime"];
14->28 [style = bold, label=""];
38->10 [style = solid, label="initialTime"];
1->10 [style = dashed, label="0"];
7->0 [style = dashed, label="0"];
38->42 [style = bold, label=""];
46->48 [style = bold, label=""];
10->8 [style = solid, label="expectedOutput"];
3->27 [style = bold, label=""];
29->6 [style = bold, label=""];
36->40 [style = solid, label="windowSize"];
49->39 [style = bold, label=""];
35->37 [style = bold, label=""];
12->18 [style = bold, label=""];
21->16 [style = bold, label=""];
40->24 [style = bold, label=""];
48->18 [style = bold, label=""];
38->39 [style = solid, label="initialTime"];
43->44 [style = bold, label=""];
5->29 [style = bold, label=""];
7->1 [style = bold, label=""];
0->22 [style = solid, label="initialTime"];
0->29 [style = solid, label="initialTime"];
36->41 [style = bold, label=""];
24->20 [style = solid, label="stateDesc"];
22->43 [style = bold, label=""];
34->33 [style = bold, label=""];
16->26 [style = bold, label=""];
9->20 [style = solid, label="closeCalled"];
24->38 [style = bold, label=""];
2->50 [style = dashed, label="0"];
22->7 [style = bold, label=""];
21->45 [style = dashed, label="0"];
40->24 [style = solid, label="operator"];
1->11 [style = bold, label=""];
24->20 [style = bold, label=""];
13->44 [style = dashed, label="0"];
38->33 [style = solid, label="initialTime"];
10->25 [style = bold, label=""];
0->5 [style = solid, label="initialTime"];
38->0 [style = solid, label="initialTime"];
44->45 [style = bold, label=""];
14->20 [style = solid, label="threshold"];
35->37 [style = solid, label="streamRecordSerializer"];
14->4 [style = bold, label=""];
4->24 [style = bold, label=""];
0->6 [style = solid, label="initialTime"];
45->15 [style = bold, label=""];
8->3 [style = bold, label=""];
26->8 [style = bold, label=""];
0->21 [style = solid, label="initialTime"];
0->1 [style = solid, label="initialTime"];
32->9 [style = bold, label=""];
12->6 [style = dashed, label="0"];
17->0 [style = bold, label=""];
19->14 [style = bold, label=""];
51->36 [style = bold, label=""];
39->17 [style = bold, label=""];
23->19 [style = bold, label=""];
11->25 [style = dashed, label="0"];
25->5 [style = bold, label=""];
41->47 [style = bold, label=""];
33->49 [style = bold, label=""];
38->45 [style = solid, label="initialTime"];
38->17 [style = solid, label="initialTime"];
38->25 [style = solid, label="initialTime"];
42->43 [style = solid, label="expectedOutput"];
19->20 [style = solid, label="evictAfter"];
42->34 [style = bold, label=""];
15->2 [style = bold, label=""];
20->17 [style = bold, label=""];
50->6 [style = bold, label=""];
38->49 [style = solid, label="initialTime"];
42->48 [style = solid, label="expectedOutput"];
0->13 [style = solid, label="initialTime"];
23->20 [style = solid, label="triggerCount"];
4->24 [style = solid, label="streamRecordSerializer"];
10->30 [style = solid, label="expectedOutput"];
0->11 [style = solid, label="initialTime"];
0->7 [style = solid, label="initialTime"];
47->35 [style = bold, label=""];
2->12 [style = bold, label=""];
11->15 [style = bold, label=""];
20->17 [style = solid, label="operator"];
9->23 [style = bold, label=""];
0->10 [style = bold, label=""];
15->46 [style = bold, label=""];
23->41 [style = dashed, label="0"];
29->49 [style = dashed, label="0"];
5->50 [style = bold, label=""];
13->21 [style = bold, label=""];
37->40 [style = solid, label="stateDesc"];
38->5 [style = solid, label="initialTime"];
37->40 [style = bold, label=""];
28->4 [style = bold, label=""];
26->46 [style = dashed, label="0"];
}
