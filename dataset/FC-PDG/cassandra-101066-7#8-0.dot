digraph {
22 [style = filled, label = "SortedMap<Long,LongSet> tokenMap@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "generateTree['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final File treeFile = File.createTempFile(\"token-tree-iterate-test1\",\"tt\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Map.Entry<Long,LongSet> listNext = listIterator.next()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "final Iterator<Token> tokenIterator = tokenTree.iterator(KeyConverter.instance)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "writer.sync()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final Iterator<Map.Entry<Long,KeyOffsets>> listIterator = tokenMap.entrySet().iterator()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(listNext.getKey(),treeNext.get())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "builder.finish()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "reader.close()@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "treeFile.deleteOnExit()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final RandomAccessReader reader = RandomAccessReader.open(treeFile)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "RandomAccessReader reader = null@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Token treeNext = tokenIterator.next()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final Iterator<Map.Entry<Long,LongSet>> listIterator = tokenMap.entrySet().iterator()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "{FileUtils.closeQuietly(reader)}@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "final long maxToken@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "SortedMap<Long,KeyOffsets> tokenMap@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "TokenTreeBuilder builder@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final SortedMap<Long,KeyOffsets> toks = new TreeMap<Long,KeyOffsets>(){}@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "final TokenTreeBuilder builder = isStatic? new StaticTokenTreeBuilder(new FakeCombinedTerm(toks)): new DynamicTokenTreeBuilder(toks)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "reader = RandomAccessReader.open(treeFile)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final Iterator<Token> tokenIterator = tokenTree.iterator(KEY_CONVERTER)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "builder.write(writer)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "builder.finish()@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "TokenTreeBuilder builder@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "final File treeFile = File.createTempFile(\"token-tree-get-test\",\"tt\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "return new TokenTree(new MappedBuffer(reader))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final long minToken@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "boolean isStatic@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "writer.sync()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final TokenTree tokenTree = new TokenTree(new MappedBuffer(reader))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "tokenIterator.hasNext() && listIterator.hasNext()@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "buildSerializeAndIterate['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "buildSerializeAndIterate['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "builder.write(writer)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "treeFile.deleteOnExit()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->24 [style = bold, label=""];
14->3 [style = solid, label="treeNext"];
13->24 [style = dotted, label="true"];
13->18 [style = dotted, label="true"];
31->36 [style = solid, label="reader"];
7->17 [style = bold, label=""];
1->10 [style = dotted, label="true"];
21->20 [style = dotted, label="true"];
13->3 [style = dotted, label="true"];
4->6 [style = bold, label=""];
25->23 [style = bold, label=""];
18->15 [style = bold, label=""];
28->31 [style = solid, label="treeFile"];
31->36 [style = bold, label=""];
21->22 [style = dotted, label="true"];
11->12 [style = bold, label=""];
27->29 [style = solid, label="isStatic"];
3->16 [style = bold, label=""];
10->22 [style = dashed, label="0"];
8->28 [style = dashed, label="0"];
9->8 [style = bold, label=""];
15->3 [style = bold, label=""];
2->4 [style = bold, label=""];
36->33 [style = bold, label=""];
31->33 [style = solid, label="reader"];
13->16 [style = bold, label=""];
12->7 [style = bold, label=""];
18->28 [style = bold, label=""];
1->9 [style = bold, label=""];
29->18 [style = bold, label=""];
34->26 [style = dotted, label="true"];
32->29 [style = bold, label=""];
4->25 [style = dashed, label="0"];
5->19 [style = bold, label=""];
21->9 [style = bold, label=""];
34->27 [style = dotted, label="true"];
17->2 [style = bold, label=""];
34->35 [style = dotted, label="true"];
23->13 [style = bold, label=""];
30->31 [style = bold, label=""];
32->29 [style = solid, label="toks"];
6->13 [style = bold, label=""];
8->17 [style = solid, label="treeFile"];
3->13 [style = bold, label=""];
16->5 [style = bold, label=""];
14->18 [style = bold, label=""];
34->32 [style = bold, label=""];
13->15 [style = dotted, label="true"];
28->3 [style = bold, label=""];
5->30 [style = bold, label=""];
1->0 [style = dotted, label="true"];
13->14 [style = dotted, label="true"];
2->25 [style = bold, label=""];
8->11 [style = bold, label=""];
17->2 [style = solid, label="reader"];
13->14 [style = bold, label=""];
17->30 [style = dashed, label="0"];
6->23 [style = dashed, label="0"];
18->24 [style = dashed, label="0"];
24->15 [style = bold, label=""];
}
