digraph {
12 [style = filled, label = "AnalyzeAction.Request request = new AnalyzeAction.Request()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "assertEquals(\"foxbar\",tokens.get(2).getTerm())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "assertEquals(3,tokens.size())@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "request.addCharFilter(Map.of(\"type\",\"append\"))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "request = new AnalyzeAction.Request()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "tokens = analyze.getTokens()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,null,maxTokenCount)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "request = new AnalyzeAction.Request()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "request.tokenizer(\"standard\")@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "assertEquals(\"brown\",tokens.get(1).getTerm())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "tokens = analyze.getTokens()@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,null,maxTokenCount)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "tokens = analyze.getTokens()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "request.text(\"the qu1ck brown fox\")@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "request.text(\"ABc\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "List<AnalyzeAction.AnalyzeToken> tokens = analyze.getTokens()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "request.text(\"the qu1ck brown fox\")@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "assertEquals(\"the\",tokens.get(0).getTerm())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "request.tokenizer(\"standard\")@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "AnalyzeAction.Response analyze = TransportAnalyzeAction.analyze(request,registry,null,maxTokenCount)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "request.text(\"Wi-fi\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "request.addTokenFilter(\"mock\")@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testNoIndexAnalyzers['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "AnalyzeAction.Request request = new AnalyzeAction.Request(\"index\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(\"foxfoo\",tokens.get(3).getTerm())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(\"wi-fi\",tokens.get(0).getTerm())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "assertEquals(\"fox\",tokens.get(2).getTerm())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,null,maxTokenCount)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "request.tokenizer(\"standard\")@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testNormalizerWithIndex['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "request.text(\"the qu1ck brown fox\")@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "request.text(\"the qu1ck brown fox\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "request.addCharFilter(Map.of(\"type\",\"append\",\"suffix\",\"baz\"))@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "request = new AnalyzeAction.Request()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertEquals(\"foxbaz\",tokens.get(2).getTerm())@@@51@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"qu1ck\",tokens.get(1).getTerm())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "tokens = analyze.getTokens()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(4,tokens.size())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "request.addCharFilter(\"append\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testNormalizerWithIndex['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
54 [style = filled, label = "assertEquals(\"the\",tokens.get(0).getTerm())@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "request.analyzer(\"standard\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "request.addTokenFilter(Map.of(\"type\",\"mock\",\"stopword\",\"brown\"))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,null,maxTokenCount)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "request.addTokenFilter(Map.of(\"type\",\"mock\",\"stopword\",\"brown\"))@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(3,tokens.size())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "request.tokenizer(\"standard\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "request.text(\"the quick brown fox\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(\"qu1ck\",tokens.get(1).getTerm())@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "AnalyzeAction.Response analyze = TransportAnalyzeAction.analyze(request,registry,mockIndexService(),maxTokenCount)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "request = new AnalyzeAction.Request()@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertEquals(\"brown\",tokens.get(2).getTerm())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "request.normalizer(\"my_normalizer\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(\"qu1ck\",tokens.get(0).getTerm())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "assertEquals(3,tokens.size())@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "assertEquals(4,tokens.size())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(\"qu1ck\",tokens.get(1).getTerm())@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertEquals(\"the\",tokens.get(0).getTerm())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(1,tokens.size())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"abc\",tokens.get(0).getTerm())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1->5 [style = bold, label=""];
58->36 [style = bold, label=""];
12->50 [style = bold, label=""];
43->39 [style = solid, label="request"];
29->17 [style = bold, label=""];
6->8 [style = dashed, label="0"];
55->41 [style = bold, label=""];
13->55 [style = bold, label=""];
0->6 [style = bold, label=""];
7->10 [style = bold, label=""];
9->2 [style = bold, label=""];
21->53 [style = bold, label=""];
53->57 [style = bold, label=""];
39->48 [style = solid, label="analyze"];
59->55 [style = solid, label="request"];
34->48 [style = solid, label="request"];
1->30 [style = dashed, label="0"];
18->11 [style = bold, label=""];
43->20 [style = bold, label=""];
35->33 [style = bold, label=""];
34->15 [style = bold, label=""];
40->25 [style = bold, label=""];
38->27 [style = bold, label=""];
17->45 [style = bold, label=""];
4->2 [style = bold, label=""];
48->44 [style = bold, label=""];
19->59 [style = bold, label=""];
36->14 [style = bold, label=""];
45->48 [style = bold, label=""];
51->39 [style = solid, label="analyze"];
50->49 [style = bold, label=""];
7->3 [style = bold, label=""];
28->32 [style = bold, label=""];
27->42 [style = bold, label=""];
56->51 [style = bold, label=""];
20->22 [style = bold, label=""];
2->1 [style = solid, label="request"];
6->49 [style = dashed, label="0"];
8->1 [style = bold, label=""];
6->1 [style = bold, label=""];
5->19 [style = bold, label=""];
26->52 [style = bold, label=""];
39->21 [style = bold, label=""];
57->23 [style = bold, label=""];
2->0 [style = bold, label=""];
44->46 [style = bold, label=""];
54->24 [style = bold, label=""];
12->30 [style = solid, label="request"];
2->12 [style = dashed, label="0"];
33->39 [style = bold, label=""];
46->54 [style = bold, label=""];
49->30 [style = bold, label=""];
30->5 [style = bold, label=""];
7->19 [style = dashed, label="0"];
42->56 [style = bold, label=""];
24->37 [style = bold, label=""];
0->8 [style = bold, label=""];
52->31 [style = bold, label=""];
51->18 [style = bold, label=""];
23->47 [style = bold, label=""];
55->51 [style = solid, label="analyze"];
31->43 [style = bold, label=""];
5->7 [style = bold, label=""];
30->55 [style = solid, label="analyze"];
3->10 [style = dashed, label="0"];
59->28 [style = bold, label=""];
47->34 [style = bold, label=""];
32->13 [style = bold, label=""];
41->58 [style = bold, label=""];
22->35 [style = bold, label=""];
0->50 [style = dashed, label="0"];
16->12 [style = bold, label=""];
38->51 [style = solid, label="request"];
14->40 [style = bold, label=""];
15->29 [style = bold, label=""];
11->26 [style = bold, label=""];
25->38 [style = bold, label=""];
}
