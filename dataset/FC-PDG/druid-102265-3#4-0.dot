digraph {
1 [style = filled, label = "KinesisIndexTask task1 = captured.getValues().get(0)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "expectLastCall().anyTimes()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "expect(supervisorRecordSupplier.getPartitionIds(stream)).andReturn(ImmutableSet.of(shardId1,shardId0)).anyTimes()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(null)).anyTimes()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER,task1.getIOConfig().getEndPartitions().getPartitionSequenceNumberMap().get(shardId0))@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "Capture<KinesisIndexTask> captured = Capture.newInstance(CaptureType.ALL)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Assert.assertTrue(\"maximumMessageTime\",task1.getIOConfig().getMaximumMessageTime().get().minusMinutes(61 + 60).isBeforeNow())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "verifyAll()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(\"0\",task2.getIOConfig().getStartPartitions().getPartitionSequenceNumberMap().get(shardId0))@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "supervisor = getSupervisor(2,1,true,\"PT1H\",null,null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertEquals(\"0\",task1.getIOConfig().getStartSequenceNumbers().getPartitionSequenceNumberMap().get(shardId0))@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "Assert.assertEquals(\"0\",task2.getIOConfig().getStartSequenceNumbers().getPartitionSequenceNumberMap().get(shardId1))@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
51 [style = filled, label = "supervisor = getSupervisor(2,1,true,\"PT1H\",null,new Period(\"PT1H\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertEquals(KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,task2.getIOConfig().getEndSequenceNumbers().getPartitionSequenceNumberMap().get(shardId1))@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "Assert.assertEquals(2,task2.getIOConfig().getStartSequenceNumbers().getPartitionSequenceNumberMap().size())@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "supervisorRecordSupplier.seekToLatest(anyObject())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER,task2.getIOConfig().getEndPartitions().getPartitionSequenceNumberMap().get(shardId1))@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "Assert.assertEquals(\"0\",task1.getIOConfig().getStartSequenceNumbers().getPartitionSequenceNumberMap().get(shardId1))@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "Assert.assertEquals(2,task1.getIOConfig().getEndSequenceNumbers().getPartitionSequenceNumberMap().size())@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "Assert.assertEquals(SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER,task1.getIOConfig().getEndPartitions().getPartitionSequenceNumberMap().get(shardId1))@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "expect(supervisorRecordSupplier.getEarliestSequenceNumber(anyObject())).andReturn(\"0\").anyTimes()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "supervisor.runInternal()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "Assert.assertTrue(\"maximumMessageTime\",task1.getIOConfig().getMaximumMessageTime().get().minusMinutes(59 + 60).isAfterNow())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testReplicas['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(\"0\",task1.getIOConfig().getStartPartitions().getPartitionSequenceNumberMap().get(shardId1))@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(\"0\",task2.getIOConfig().getStartPartitions().getPartitionSequenceNumberMap().get(shardId1))@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "expectLastCall().anyTimes()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Assert.assertEquals(KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,task1.getIOConfig().getEndSequenceNumbers().getPartitionSequenceNumberMap().get(shardId1))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.absent()).anyTimes()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "testEarlyMessageRejectionPeriod['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(2,task2.getIOConfig().getStartPartitions().getPartitionSequenceNumberMap().size())@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(\"0\",task1.getIOConfig().getStartPartitions().getPartitionSequenceNumberMap().get(shardId0))@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "Assert.assertEquals(KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,task2.getIOConfig().getEndSequenceNumbers().getPartitionSequenceNumberMap().get(shardId0))@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "testReplicas['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(shard1Partition,shard0Partition)).anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Assert.assertEquals(task1.getIOConfig().getMaximumMessageTime().get(),task2.getIOConfig().getMaximumMessageTime().get())@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(2,task2.getIOConfig().getEndPartitions().getPartitionSequenceNumberMap().size())@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "supervisor.start()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "expectLastCall().anyTimes()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(\"0\",task2.getIOConfig().getStartSequenceNumbers().getPartitionSequenceNumberMap().get(shardId0))@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "replayAll()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(2,task1.getIOConfig().getStartSequenceNumbers().getPartitionSequenceNumberMap().size())@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "Assert.assertEquals(2,task2.getIOConfig().getEndSequenceNumbers().getPartitionSequenceNumberMap().size())@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "supervisorRecordSupplier.seek(anyObject(),anyString())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "supervisorRecordSupplier.assign(anyObject())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(captured))).andReturn(true).times(2)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "KinesisIndexTask task2 = captured.getValues().get(1)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,task1.getIOConfig().getEndSequenceNumbers().getPartitionSequenceNumberMap().get(shardId0))@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(2,task1.getIOConfig().getStartPartitions().getPartitionSequenceNumberMap().size())@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(2,task1.getIOConfig().getEndPartitions().getPartitionSequenceNumberMap().size())@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER,task2.getIOConfig().getEndPartitions().getPartitionSequenceNumberMap().get(shardId0))@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9->22 [style = bold, label=""];
8->33 [style = bold, label=""];
5->8 [style = bold, label=""];
11->20 [style = bold, label=""];
2->26 [style = bold, label=""];
36->40 [style = bold, label=""];
26->32 [style = bold, label=""];
3->52 [style = bold, label=""];
12->37 [style = dashed, label="0"];
28->30 [style = bold, label=""];
10->36 [style = dashed, label="0"];
52->49 [style = bold, label=""];
3->25 [style = bold, label=""];
16->6 [style = bold, label=""];
17->9 [style = bold, label=""];
29->31 [style = bold, label=""];
10->19 [style = bold, label=""];
34->51 [style = dashed, label="0"];
23->15 [style = bold, label=""];
25->18 [style = bold, label=""];
1->3 [style = bold, label=""];
49->48 [style = bold, label=""];
1->42 [style = bold, label=""];
39->45 [style = bold, label=""];
22->28 [style = bold, label=""];
24->29 [style = bold, label=""];
20->3 [style = bold, label=""];
47->37 [style = bold, label=""];
25->43 [style = dashed, label="0"];
51->16 [style = bold, label=""];
18->35 [style = dashed, label="0"];
26->41 [style = dashed, label="0"];
0->34 [style = bold, label=""];
20->46 [style = dashed, label="0"];
30->21 [style = bold, label=""];
13->12 [style = bold, label=""];
42->44 [style = bold, label=""];
19->13 [style = bold, label=""];
18->10 [style = bold, label=""];
31->27 [style = bold, label=""];
43->35 [style = bold, label=""];
33->24 [style = bold, label=""];
50->51 [style = bold, label=""];
34->16 [style = bold, label=""];
7->23 [style = bold, label=""];
21->1 [style = bold, label=""];
40->47 [style = bold, label=""];
15->4 [style = bold, label=""];
27->17 [style = bold, label=""];
44->41 [style = bold, label=""];
38->34 [style = bold, label=""];
14->42 [style = dashed, label="0"];
32->39 [style = dashed, label="0"];
10->48 [style = dashed, label="0"];
1->14 [style = bold, label=""];
14->2 [style = bold, label=""];
3->43 [style = bold, label=""];
2->44 [style = dashed, label="0"];
45->46 [style = bold, label=""];
13->47 [style = dashed, label="0"];
35->36 [style = bold, label=""];
41->39 [style = bold, label=""];
6->7 [style = bold, label=""];
32->11 [style = bold, label=""];
4->5 [style = bold, label=""];
19->40 [style = dashed, label="0"];
46->3 [style = bold, label=""];
11->45 [style = dashed, label="0"];
}
