digraph {
30 [style = filled, label = "i++@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
53 [style = filled, label = "startServer()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "String statPath = Quotas.quotaZookeeper + path + \"/\" + Quotas.statNode@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "byte(( qdata = zk.getData(statPath,false,new Stat())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "String statPath = Quotas.quotaZookeeper + \"/a\" + \"/\" + Quotas.statNode@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Assert.assertTrue(\"num count is set\",st.getCount() == 601)@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "zk.create(\"/a/b\",\"some\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "zk.create(\"/a\",\"some\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "i++@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "String statPath = Quotas.quotaZookeeper + \"/a\" + \"/\" + Quotas.statNode@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "byte(( data = zk.getData(statPath,false,new Stat())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "i = 300@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "StatsTrack qst = new StatsTrack(new String(qdata))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "i++@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "i = 300@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "final String path = \"/a/b/v\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "stopServer()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertTrue(\"bytes are set\",st.getBytes() == 2404L)@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "stopServer()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "testQuotaWithQuorum['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "Assert.assertTrue(\"num count is set\",st.getCount() == 10)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertTrue(\"num count is set\",st.getCount() == 301)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "i < 600@@@19@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "data = zk.getData(statPath,false,new Stat())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "zk.create(\"/a/b/v/d\",\"some\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "zk.setData(\"/\",\"some\".getBytes(),-1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "String absolutePath = Quotas.quotaZookeeper + path + \"/\" + Quotas.limitNode@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "StatsTrack st = new StatsTrack(new String(data))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testQuotaWithQuorum['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "ZooKeeperServer server = serverFactory.getZooKeeperServer()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertTrue(\"num count is set\",st.getCount() == 601)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertTrue(\"num count is set\",st.getCount() == 301)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "ZooKeeper zk = createClient()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "SetQuotaCommand.createQuota(zk,\"/a\",1000L,5000)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "zk.setData(\"/\",\"some\".getBytes(),-1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final ZooKeeper zk = createClient()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "byte(( data = zk.getData(absolutePath,false,new Stat())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "zk.create(\"/a/b/v\",\"some\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "st = new StatsTrack(new String(data))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertTrue(\"bytes are set\",st.getBytes() == 1204L)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
51 [style = filled, label = "SetQuotaCommand.createQuota(zk,path,5L,10)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertTrue(\"bytes are set\",qst.getBytes() == 8L)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "testQuota['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "StatsTrack st = new StatsTrack(new String(data))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertTrue(\"count is set\",qst.getCount() == 2)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "Assert.assertNotNull(\"Quota is still set\",server.getZKDatabase().getDataTree().getMaxPrefixWithQuota(path) != null)@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertTrue(\"bytes are set\",st.getBytes() == 2404L)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
48 [style = filled, label = "startServer()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Assert.assertTrue(\"bytes are set\",st.getBytes() == 5L)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "i < 300@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "zk.create(\"/a/\" + i,\"some\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "zk.create(\"/a/\" + i,\"some\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "i = 0@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "i = 0@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40->49 [style = bold, label=""];
25->1 [style = bold, label=""];
49->45 [style = solid, label="data"];
41->19 [style = bold, label=""];
7->30 [style = bold, label=""];
35->41 [style = bold, label=""];
4->14 [style = solid, label="i"];
38->51 [style = bold, label=""];
16->35 [style = dashed, label="0"];
27->9 [style = bold, label=""];
52->47 [style = solid, label="qdata"];
41->51 [style = solid, label="path"];
11->29 [style = bold, label=""];
36->12 [style = bold, label=""];
3->16 [style = bold, label=""];
47->33 [style = bold, label=""];
46->48 [style = bold, label=""];
30->7 [style = solid, label="i"];
4->2 [style = solid, label="i"];
21->30 [style = dashed, label="0"];
12->26 [style = dashed, label="0"];
28->0 [style = bold, label=""];
52->47 [style = bold, label=""];
15->25 [style = dashed, label="0"];
5->28 [style = dashed, label="0"];
0->21 [style = dotted, label="true"];
5->0 [style = bold, label=""];
27->9 [style = solid, label="i"];
48->43 [style = bold, label=""];
2->14 [style = bold, label=""];
11->13 [style = bold, label=""];
45->42 [style = bold, label=""];
25->1 [style = solid, label="statPath"];
14->9 [style = bold, label=""];
1->8 [style = solid, label="data"];
16->20 [style = solid, label="zk"];
17->36 [style = dashed, label="0"];
20->15 [style = bold, label=""];
43->44 [style = bold, label=""];
27->2 [style = solid, label="i"];
10->24 [style = dashed, label="0"];
0->7 [style = dotted, label="true"];
34->53 [style = bold, label=""];
6->32 [style = bold, label=""];
28->0 [style = solid, label="i"];
35->51 [style = solid, label="zk"];
21->0 [style = bold, label=""];
9->2 [style = bold, label=""];
13->29 [style = dashed, label="0"];
18->19 [style = bold, label=""];
19->6 [style = bold, label=""];
20->25 [style = bold, label=""];
0->7 [style = bold, label=""];
30->0 [style = solid, label="i"];
39->35 [style = bold, label=""];
0->20 [style = bold, label=""];
17->23 [style = dashed, label="0"];
22->11 [style = bold, label=""];
32->50 [style = bold, label=""];
9->22 [style = bold, label=""];
28->30 [style = solid, label="i"];
4->9 [style = bold, label=""];
13->10 [style = bold, label=""];
49->45 [style = bold, label=""];
4->9 [style = solid, label="i"];
16->18 [style = bold, label=""];
1->8 [style = bold, label=""];
25->22 [style = solid, label="statPath"];
41->44 [style = solid, label="path"];
12->17 [style = bold, label=""];
4->27 [style = dashed, label="0"];
5->7 [style = solid, label="i"];
28->7 [style = solid, label="i"];
21->7 [style = solid, label="i"];
0->30 [style = dotted, label="true"];
14->9 [style = solid, label="i"];
51->40 [style = bold, label=""];
6->5 [style = bold, label=""];
53->46 [style = bold, label=""];
15->1 [style = solid, label="statPath"];
12->42 [style = dashed, label="0"];
41->12 [style = solid, label="path"];
30->0 [style = bold, label=""];
33->37 [style = bold, label=""];
17->4 [style = bold, label=""];
8->12 [style = bold, label=""];
15->22 [style = solid, label="statPath"];
15->1 [style = bold, label=""];
23->27 [style = bold, label=""];
40->49 [style = solid, label="absolutePath"];
31->16 [style = bold, label=""];
5->21 [style = solid, label="i"];
42->36 [style = bold, label=""];
9->14 [style = dotted, label="true"];
27->14 [style = solid, label="i"];
12->52 [style = solid, label="statPath"];
50->38 [style = bold, label=""];
22->11 [style = solid, label="data"];
37->34 [style = bold, label=""];
9->2 [style = dotted, label="true"];
26->23 [style = bold, label=""];
41->40 [style = solid, label="path"];
5->0 [style = solid, label="i"];
7->21 [style = bold, label=""];
12->52 [style = bold, label=""];
29->24 [style = bold, label=""];
21->0 [style = solid, label="i"];
14->2 [style = solid, label="i"];
6->28 [style = bold, label=""];
8->26 [style = bold, label=""];
}
