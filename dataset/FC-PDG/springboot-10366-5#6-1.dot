digraph {
12 [style = filled, label = "couchbaseClusterIsUp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "List<EndpointHealth> endpoints = Arrays.asList(new EndpointHealth(ServiceType.BINARY,LifecycleState.CONNECTED,new InetSocketAddress(0),new InetSocketAddress(0),1234,\"endpoint-1\"))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(health.getDetails()).containsKey(\"endpoints\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "given(cluster.diagnostics()).willReturn(diagnostics)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat((List<Map<String,Object>>)health.getDetails().get(\"endpoints\")).hasSize(1)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(health.getStatus()).isEqualTo(Status.UP)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(health.getStatus()).isEqualTo(Status.DOWN)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "CouchbaseReactiveHealthIndicator healthIndicator = new CouchbaseReactiveHealthIndicator(cluster)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "DiagnosticsReport diagnostics = new DiagnosticsReport(endpoints,\"test-sdk\",\"test-id\",null)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Health health = healthIndicator.health().block(Duration.ofSeconds(30))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "verify(cluster).diagnostics()@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "couchbaseClusterIsDown['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "List<EndpointHealth> endpoints = Arrays.asList(new EndpointHealth(ServiceType.BINARY,LifecycleState.CONNECTED,new InetSocketAddress(0),new InetSocketAddress(0),1234,\"endpoint-1\"),new EndpointHealth(ServiceType.BINARY,LifecycleState.CONNECTING,new InetSocketAddress(0),new InetSocketAddress(0),1234,\"endpoint-2\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(health.getDetails()).containsEntry(\"sdk\",\"test-sdk\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Cluster cluster = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "couchbaseClusterIsUp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat((List<Map<String,Object>>)health.getDetails().get(\"endpoints\")).hasSize(2)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->10 [style = bold, label=""];
15->10 [style = bold, label=""];
8->16 [style = dashed, label="0"];
5->2 [style = solid, label="diagnostics"];
3->1 [style = bold, label=""];
0->13 [style = bold, label=""];
2->6 [style = bold, label=""];
9->4 [style = bold, label=""];
16->7 [style = bold, label=""];
0->11 [style = bold, label=""];
1->0 [style = solid, label="cluster"];
1->0 [style = bold, label=""];
11->5 [style = solid, label="endpoints"];
12->1 [style = bold, label=""];
14->1 [style = bold, label=""];
8->7 [style = bold, label=""];
7->9 [style = bold, label=""];
11->5 [style = bold, label=""];
5->2 [style = bold, label=""];
11->13 [style = dashed, label="0"];
5->10 [style = solid, label="diagnostics"];
6->16 [style = bold, label=""];
9->15 [style = bold, label=""];
4->15 [style = dashed, label="0"];
6->8 [style = bold, label=""];
13->5 [style = bold, label=""];
13->5 [style = solid, label="endpoints"];
}
