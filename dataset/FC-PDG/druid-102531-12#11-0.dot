digraph {
19 [style = filled, label = "SegmentDescriptor desc3 = sd(\"2013/P1D\",0)@@@53@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(Status.READING,task.getRunner().getStatus())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "Assert.assertEquals(Status.PAUSED,task.getRunner().getStatus())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "final QuerySegmentSpec endInterval = OBJECT_MAPPER.readValue(\"\"2008/2049\"\",)@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(1)))@@@59@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(0)))@@@58@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
71 [style = filled, label = "kafkaProducer.send(record).get()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(task.getRunner().getEndOffsets(),task.getRunner().getCurrentOffsets())@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "SegmentDescriptor desc1 = sd(\"2010/P1D\",0)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "kafkaProducer.initTransactions()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Thread.sleep(25)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "kafkaProducer.commitTransaction()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "task.getRunner().resume()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertEquals(2,Iterables.size(scanResultValues))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "kafkaProducer.beginTransaction()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "testRunTransactionModeRollback['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
48 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,13L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@52@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "testRunTransactionModeRollback['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "SegmentDescriptor desc2 = sd(\"2011/P1D\",0)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "Assert.fail(\"Task completed when it should have been paused\")@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,13L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@57@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "SegmentDescriptor desc4 = sd(\"2049/P1D\",0)@@@54@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "countEvents(task) != 2@@@14@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2,desc3,desc4),publishedDescriptors)@@@56@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "kafkaProducer.initTransactions()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,2L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,6L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(sdd(\"2008/P1D\",0,ImmutableList.of(\"a\")),sdd(\"2009/P1D\",0,ImmutableList.of(\"b\")),sdd(\"2013/P1D\",0,ImmutableList.of(\"f\")),sdd(\"2049/P1D\",0,ImmutableList.of(\"f\"))),publishedDescriptors())@@@51@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "Iterable<ScanResultValue> scanResultValues1 = scanData(task,endInterval)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "testRunWithPauseAndResume['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(currentOffsets,task.getRunner().getCurrentOffsets())@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(2,countEvents(task))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final QuerySegmentSpec rollbackedInterval = OBJECT_MAPPER.readValue(\"\"2010/2012\"\",)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors()@@@55@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(0,Iterables.size(scanResultValues))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Assert.assertEquals(2,countEvents(task))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "kafkaProducer.beginTransaction()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "SegmentDescriptor desc1 = sd(\"2008/P1D\",0)@@@51@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Iterable<ScanResultValue> scanResultValues = scanData(task,firstInterval)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors()@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "kafkaProducer.send(record).get()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(3)))@@@61@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "kafkaProducer.abortTransaction()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "kafkaProducer.flush()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "kafkaProducer.initTransactions()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "kafkaProducer.flush()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,6L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getProcessed())@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "SegmentDescriptor desc2 = sd(\"2009/P1D\",0)@@@52@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "kafkaProducer.send(record).get()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "future.get(10,TimeUnit.SECONDS)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "TimeoutException e@@@35@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getProcessed())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "kafkaProducer.commitTransaction()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable())@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "Map<Integer,Long> currentOffsets = OBJECT_MAPPER.readValue(task.getRunner().pause().getEntity().toString(),new TypeReference<Map<Integer,Long>>(){})@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(2)))@@@60@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "{}@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(2,Iterables.size(scanResultValues1))@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(1)))@@@50@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,13L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(0)))@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "final QuerySegmentSpec firstInterval = OBJECT_MAPPER.readValue(\"\"2008/2010\"\",)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "scanResultValues = scanData(task,rollbackedInterval)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(task.getRunner().getEndOffsets(),task.getRunner().getCurrentOffsets())@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(Status.READING,task.getRunner().getStatus())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "kafkaProducer.beginTransaction()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2),publishedDescriptors)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40->4 [style = bold, label=""];
17->25 [style = bold, label=""];
39->19 [style = bold, label=""];
20->52 [style = dashed, label="0"];
7->30 [style = bold, label=""];
64->3 [style = bold, label=""];
51->58 [style = solid, label="desc1"];
10->24 [style = bold, label=""];
46->2 [style = bold, label=""];
34->17 [style = solid, label="desc4"];
27->35 [style = solid, label="task"];
10->24 [style = solid, label="scanResultValues"];
27->46 [style = solid, label="task"];
60->71 [style = bold, label=""];
49->48 [style = bold, label=""];
51->53 [style = bold, label=""];
1->17 [style = solid, label="desc1"];
47->27 [style = bold, label=""];
27->63 [style = dashed, label="0"];
0->15 [style = bold, label=""];
69->55 [style = bold, label=""];
27->5 [style = solid, label="task"];
1->49 [style = dashed, label="0"];
39->17 [style = solid, label="desc2"];
52->67 [style = bold, label=""];
45->0 [style = bold, label=""];
2->36 [style = bold, label=""];
56->8 [style = bold, label=""];
37->17 [style = solid, label="publishedDescriptors"];
33->45 [style = bold, label=""];
32->70 [style = bold, label=""];
8->57 [style = bold, label=""];
9->40 [style = bold, label=""];
55->60 [style = bold, label=""];
18->31 [style = bold, label=""];
43->16 [style = bold, label=""];
19->34 [style = bold, label=""];
30->41 [style = bold, label=""];
29->9 [style = solid, label="firstInterval"];
26->7 [style = bold, label=""];
27->12 [style = bold, label=""];
72->52 [style = bold, label=""];
5->6 [style = dotted, label="true"];
54->62 [style = bold, label=""];
16->32 [style = bold, label=""];
8->22 [style = bold, label=""];
28->23 [style = solid, label="endInterval"];
20->18 [style = bold, label=""];
5->6 [style = bold, label=""];
42->56 [style = bold, label=""];
70->21 [style = bold, label=""];
66->51 [style = bold, label=""];
41->46 [style = bold, label=""];
14->61 [style = bold, label=""];
61->3 [style = solid, label="currentOffsets"];
38->33 [style = bold, label=""];
24->3 [style = bold, label=""];
39->53 [style = dashed, label="0"];
1->39 [style = bold, label=""];
71->54 [style = bold, label=""];
50->58 [style = bold, label=""];
27->23 [style = solid, label="task"];
68->63 [style = bold, label=""];
42->8 [style = bold, label=""];
61->69 [style = bold, label=""];
1->51 [style = dashed, label="0"];
22->28 [style = bold, label=""];
35->14 [style = bold, label=""];
3->42 [style = bold, label=""];
29->61 [style = dashed, label="0"];
25->72 [style = dashed, label="0"];
27->9 [style = solid, label="task"];
9->40 [style = solid, label="scanResultValues"];
53->50 [style = bold, label=""];
21->5 [style = bold, label=""];
63->12 [style = bold, label=""];
6->5 [style = bold, label=""];
25->20 [style = bold, label=""];
58->72 [style = bold, label=""];
13->27 [style = bold, label=""];
22->66 [style = bold, label=""];
31->44 [style = bold, label=""];
28->23 [style = bold, label=""];
50->58 [style = solid, label="publishedDescriptors"];
14->29 [style = bold, label=""];
53->58 [style = solid, label="desc2"];
19->17 [style = solid, label="desc3"];
12->43 [style = bold, label=""];
23->11 [style = bold, label=""];
59->3 [style = bold, label=""];
5->35 [style = bold, label=""];
36->10 [style = bold, label=""];
15->1 [style = bold, label=""];
62->59 [style = bold, label=""];
15->49 [style = bold, label=""];
27->12 [style = solid, label="task"];
32->21 [style = bold, label=""];
11->38 [style = bold, label=""];
17->58 [style = dashed, label="0"];
65->64 [style = bold, label=""];
29->9 [style = bold, label=""];
37->17 [style = bold, label=""];
4->26 [style = bold, label=""];
27->10 [style = solid, label="task"];
36->10 [style = solid, label="rollbackedInterval"];
23->11 [style = solid, label="scanResultValues1"];
0->22 [style = dashed, label="0"];
63->12 [style = solid, label="task"];
34->37 [style = bold, label=""];
15->66 [style = dashed, label="0"];
57->22 [style = bold, label=""];
63->35 [style = solid, label="task"];
18->67 [style = dashed, label="0"];
63->5 [style = solid, label="task"];
}
