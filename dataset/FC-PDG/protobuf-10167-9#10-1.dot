digraph {
1 [style = filled, label = "assertEquals(1,message.getInt32ToEnumField().size())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(TestMap.EnumValue.BAR,message.getInt32ToEnumField().get(1))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(1,messageWithUnknownEnums.getInt32ToInt32Field().get(1).intValue())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ByteString data = TestUnknownEnumValue.newBuilder().putInt32ToInt32Field(1,1).putInt32ToInt32Field(2,54321).build().toByteString()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(2,messageWithUnknownEnums.getInt32ToInt32FieldMap().size())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertEquals(1,message.getInt32ToEnumFieldMap().size())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "TestUnknownEnumValue messageWithUnknownEnums = TestUnknownEnumValue.parseFrom(data)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(2,messageWithUnknownEnums.getInt32ToInt32Field().size())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "TestMap message = TestMap.parseFrom(data)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testUnknownEnumValues['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(1,messageWithUnknownEnums.getInt32ToInt32FieldMap().get(1).intValue())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "ByteString data = builder.build().toByteString()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(54321,messageWithUnknownEnums.getInt32ToInt32Field().get(2).intValue())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "data = message.toByteString()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(54321,messageWithUnknownEnums.getInt32ToInt32FieldMap().get(2).intValue())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "TestUnknownEnumValue.Builder builder = TestUnknownEnumValue.newBuilder().putInt32ToInt32Field(1,1).putInt32ToInt32Field(2,54321)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(54321,messageWithUnknownEnums.getInt32ToInt32Field().get(2).intValue())@@@11@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testUnknownEnumValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testUnknownEnumValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertEquals(TestMap.EnumValue.BAR,message.getInt32ToEnumFieldMap().get(1))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertFalse(message.getUnknownFields().asMap().isEmpty())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19->20 [style = solid, label="data"];
5->3 [style = bold, label=""];
16->15 [style = bold, label=""];
12->5 [style = bold, label=""];
3->1 [style = bold, label=""];
3->1 [style = solid, label="data"];
9->2 [style = bold, label=""];
2->6 [style = bold, label=""];
7->16 [style = dashed, label="0"];
19->20 [style = bold, label=""];
8->15 [style = dashed, label="0"];
18->19 [style = bold, label=""];
20->1 [style = bold, label=""];
7->8 [style = bold, label=""];
0->17 [style = dashed, label="0"];
1->7 [style = bold, label=""];
4->0 [style = bold, label=""];
6->14 [style = bold, label=""];
11->5 [style = bold, label=""];
13->17 [style = bold, label=""];
8->2 [style = bold, label=""];
1->16 [style = bold, label=""];
15->9 [style = bold, label=""];
6->10 [style = bold, label=""];
8->9 [style = bold, label=""];
10->4 [style = bold, label=""];
14->13 [style = bold, label=""];
8->2 [style = solid, label="data"];
4->13 [style = dashed, label="0"];
2->6 [style = solid, label="data"];
5->19 [style = dashed, label="0"];
10->14 [style = dashed, label="0"];
}
