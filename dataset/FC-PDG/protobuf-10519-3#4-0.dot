digraph {
3 [style = filled, label = "assertTrue(CLASSNAME + \".asReadOnlyByteBuffer() must give back the same bytes\",Arrays.equals(BYTES,roundTripBytes))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "byte(( roundTripBytes = new byte((((@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(byteBuffer.isReadOnly())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "byteBuffer.get(roundTripBytes)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testAsReadOnlyByteBuffer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "testAsReadOnlyByteBuffer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ByteBuffer byteBuffer = testString.asReadOnlyByteBuffer()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertTrue(byteBuffer.remaining() == referenceBytes.length)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testAsReadOnlyByteBuffer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "byte(( roundTripBytes = new byte((((@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(classUnderTest + \".asReadOnlyByteBuffer() must give back the same bytes\",Arrays.equals(referenceBytes,roundTripBytes))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "ByteBuffer byteBuffer = stringUnderTest.asReadOnlyByteBuffer()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ByteBuffer byteBuffer = TEST_STRING.asReadOnlyByteBuffer()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertTrue(byteBuffer.remaining() == BYTES.length)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->13 [style = dashed, label="0"];
13->10 [style = bold, label=""];
6->3 [style = bold, label=""];
1->4 [style = bold, label=""];
13->6 [style = solid, label="roundTripBytes"];
4->6 [style = bold, label=""];
1->10 [style = dashed, label="0"];
7->8 [style = bold, label=""];
12->9 [style = bold, label=""];
13->11 [style = solid, label="roundTripBytes"];
5->6 [style = solid, label="roundTripBytes"];
5->3 [style = solid, label="roundTripBytes"];
5->1 [style = bold, label=""];
2->0 [style = bold, label=""];
8->5 [style = bold, label=""];
6->11 [style = bold, label=""];
10->4 [style = bold, label=""];
0->8 [style = dashed, label="0"];
0->9 [style = dashed, label="0"];
3->11 [style = dashed, label="0"];
0->5 [style = bold, label=""];
9->13 [style = bold, label=""];
}
