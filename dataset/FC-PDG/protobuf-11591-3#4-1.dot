digraph {
21 [style = filled, label = "final int byte1@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "{throw new AssertionError()}@@@13@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "byte(( bytes@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "byte(( bytes@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "unsafeIncompleteStateFor['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "{return incompleteStateFor(byte1)}@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "unsafeIncompleteStateFor['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "return incompleteStateFor(byte1,UnsafeUtil.getByte(bytes,offset))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "int remaining@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "return incompleteStateFor(byte1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "int byte1@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "int remaining@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "long offset@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "{return incompleteStateFor(byte1,UnsafeUtil.getByte(address),UnsafeUtil.getByte(address + 1))}@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "long offset@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "int remaining@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "{return incompleteStateFor(byte1,UnsafeUtil.getByte(address))}@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "long address@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "throw new AssertionError()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "remaining@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "unsafeIncompleteStateFor['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "int byte1@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "return incompleteStateFor(byte1,UnsafeUtil.getByte(bytes,offset),UnsafeUtil.getByte(bytes,offset + 1))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6->17 [style = bold, label=""];
22->21 [style = dotted, label="true"];
6->3 [style = bold, label=""];
13->12 [style = solid, label="byte1"];
9->0 [style = dotted, label="true"];
22->19 [style = dotted, label="true"];
21->7 [style = solid, label="byte1"];
3->1 [style = bold, label=""];
8->1 [style = solid, label="byte1"];
11->6 [style = solid, label="remaining"];
15->18 [style = dotted, label="true"];
5->7 [style = solid, label="bytes"];
14->17 [style = bold, label=""];
15->10 [style = dotted, label="true"];
15->6 [style = bold, label=""];
0->7 [style = solid, label="offset"];
12->16 [style = bold, label=""];
8->21 [style = dashed, label="0"];
1->7 [style = bold, label=""];
6->17 [style = dotted, label="true"];
9->6 [style = bold, label=""];
5->1 [style = solid, label="bytes"];
15->13 [style = dotted, label="true"];
6->2 [style = bold, label=""];
4->6 [style = solid, label="remaining"];
6->14 [style = bold, label=""];
13->14 [style = solid, label="byte1"];
18->17 [style = solid, label="offset"];
21->3 [style = solid, label="byte1"];
8->7 [style = solid, label="byte1"];
6->1 [style = bold, label=""];
0->1 [style = solid, label="offset"];
9->5 [style = dotted, label="true"];
17->12 [style = bold, label=""];
6->14 [style = dotted, label="true"];
22->20 [style = dotted, label="true"];
8->3 [style = solid, label="byte1"];
9->8 [style = dotted, label="true"];
6->16 [style = bold, label=""];
10->12 [style = solid, label="bytes"];
21->1 [style = solid, label="byte1"];
7->2 [style = bold, label=""];
15->11 [style = dotted, label="true"];
20->7 [style = solid, label="address"];
9->4 [style = dotted, label="true"];
8->18 [style = dashed, label="0"];
6->12 [style = dotted, label="true"];
13->17 [style = solid, label="byte1"];
3->14 [style = dashed, label="0"];
6->7 [style = bold, label=""];
20->1 [style = solid, label="address"];
19->6 [style = solid, label="remaining"];
10->17 [style = solid, label="bytes"];
18->12 [style = solid, label="offset"];
6->16 [style = dotted, label="true"];
22->6 [style = bold, label=""];
6->12 [style = bold, label=""];
}
