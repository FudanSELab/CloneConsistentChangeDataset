digraph {
8 [style = filled, label = "Assert.assertArrayEquals(new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@14c98,availableBeIds.stream().mapToLong(null).sorted().toArray())@@@58@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testGetAvailableBeIds['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "@Mocked Backend myBackend3@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "System.out.println(unavailableBeIds)@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "@Mocked Backend myBackend4@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "@Mocked Backend myBackend4@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "System.out.println(availableBeIds)@@@103@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "@Mocked Backend myBackend7@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "new Expectations(){}@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "Assert.assertArrayEquals(new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@14d34,unavailableBeIds.stream().mapToLong(null).sorted().toArray())@@@60@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "@Mocked Backend myBackend2@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "Set<Long> unavailableBeIds = Deencapsulation.invoke(balancer,\"getUnavailableBeIdsInGroup\",infoService,colocateTableIndex,groupId)@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "new Expectations(){}@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "@Mocked Backend myBackend4@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "@Mocked Backend myBackend5@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "GroupId groupId = new GroupId(10000,10001)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "testGetUnavailableBeIdsInGroup['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "@Mocked SystemInfoService infoService@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "@Mocked SystemInfoService infoService@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testGetAvailableBeIds['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "@Mocked ColocateTableIndex colocateTableIndex@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "@Mocked Backend myBackend6@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "@Mocked Backend myBackend2@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "new Expectations(){}@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "@Mocked Backend myBackend5@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "List<Long> availableBeIds = Deencapsulation.invoke(balancer,\"getAvailableBeIds\",\"cluster1\",infoService)@@@57@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "@Mocked Backend myBackend3@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Assert.assertArrayEquals(new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@14ce6,availableBeIds.stream().mapToLong(null).sorted().toArray())@@@104@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "List<Long> clusterBackendIds = Lists.newArrayList(1L,2L,3L,4L,5L)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "@Mocked Backend myBackend3@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "@Mocked Backend myBackend5@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Set<Long> allBackendsInGroup = Sets.newHashSet(1L,2L,3L,4L,5L)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "@Mocked Backend myBackend2@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "List<Long> availableBeIds = Deencapsulation.invoke(balancer,\"getAvailableBeIds\",\"cluster1\",Tag.DEFAULT_BACKEND_TAG,Sets.newHashSet(999L),infoService)@@@102@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "@Mocked SystemInfoService infoService@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
5->3 [style = bold, label=""];
4->9 [style = bold, label=""];
4->18 [style = dashed, label="0"];
31->30 [style = solid, label="colocateTableIndex"];
7->21 [style = dashed, label="0"];
7->31 [style = dashed, label="0"];
34->24 [style = dotted, label="true"];
11->10 [style = dotted, label="true"];
5->1 [style = dotted, label="true"];
11->12 [style = dotted, label="true"];
18->19 [style = bold, label=""];
11->17 [style = dotted, label="true"];
5->6 [style = dotted, label="true"];
34->29 [style = dotted, label="true"];
32->27 [style = bold, label=""];
5->0 [style = dotted, label="true"];
9->8 [style = bold, label=""];
3->4 [style = bold, label=""];
34->26 [style = dotted, label="true"];
3->18 [style = bold, label=""];
7->9 [style = solid, label="infoService"];
9->19 [style = dashed, label="0"];
16->19 [style = solid, label="infoService"];
11->20 [style = dotted, label="true"];
34->22 [style = dotted, label="true"];
34->31 [style = dotted, label="true"];
30->28 [style = bold, label=""];
19->14 [style = bold, label=""];
26->30 [style = solid, label="infoService"];
11->3 [style = bold, label=""];
32->30 [style = solid, label="groupId"];
28->23 [style = bold, label=""];
5->7 [style = dotted, label="true"];
19->14 [style = solid, label="availableBeIds"];
30->28 [style = solid, label="unavailableBeIds"];
33->30 [style = bold, label=""];
11->16 [style = dotted, label="true"];
34->32 [style = bold, label=""];
27->33 [style = bold, label=""];
14->13 [style = bold, label=""];
11->21 [style = dotted, label="true"];
11->15 [style = dotted, label="true"];
34->25 [style = dotted, label="true"];
9->30 [style = dashed, label="0"];
5->2 [style = dotted, label="true"];
}
