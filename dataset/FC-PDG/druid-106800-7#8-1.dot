digraph {
0 [style = filled, label = "testTimeSeriesWithFilteredAggDimensionNotPresentNotNullValue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertExpectedResults(expectedResults,actualResults)@@@6@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<Result<TimeseriesResultValue>> expectedResults = Collections.singletonList(new Result<>(DateTimes.of(\"2011-04-01\"),new TimeseriesResultValue(ImmutableMap.of(\"filteredAgg\",0L,\"addRowsIndexConstant\",12486.361190795898d,\"index\",12459.361190795898d,\"uniques\",9.019833517963864d,\"rows\",26L))))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.allGran).intervals(QueryRunnerTestHelper.firstToThird).aggregators(Lists.newArrayList(Iterables.concat(aggregatorFactoryList,Collections.singletonList(new FilteredAggregatorFactory(new CountAggregatorFactory(\"filteredAgg\"),new SelectorDimFilter(\"abraKaDabra\",\"Lol\",null)))))).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).descending(descending).context(makeContext()).build()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Iterable<Result<TimeseriesResultValue>> actualResults = runner.run(QueryPlus.wrap(query)).toList()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testTimeSeriesWithFilteredAggDimensionNotPresentNotNullValue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.allGran).intervals(QueryRunnerTestHelper.firstToThird).aggregators(Lists.newArrayList(Iterables.concat(aggregatorFactoryList,Collections.singletonList(new FilteredAggregatorFactory(new CountAggregatorFactory(\"filteredAgg\"),new NotDimFilter(new SelectorDimFilter(QueryRunnerTestHelper.marketDimension,null,null))))))).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).descending(descending).context(makeContext()).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "List<Result<TimeseriesResultValue>> expectedResults = Collections.singletonList(new Result<>(DateTimes.of(\"2011-04-01\"),new TimeseriesResultValue(ImmutableMap.of(\"filteredAgg\",26L,\"addRowsIndexConstant\",12486.361190795898d,\"index\",12459.361190795898d,\"uniques\",9.019833517963864d,\"rows\",26L))))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testTimeSeriesWithFilteredAggInvertedNullValue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.DATA_SOURCE).granularity(QueryRunnerTestHelper.ALL_GRAN).intervals(QueryRunnerTestHelper.FIRST_TO_THIRD).aggregators(Lists.newArrayList(Iterables.concat(aggregatorFactoryList,Collections.singletonList(new FilteredAggregatorFactory(new CountAggregatorFactory(\"filteredAgg\"),new SelectorDimFilter(\"abraKaDabra\",\"Lol\",null)))))).postAggregators(QueryRunnerTestHelper.ADD_ROWS_INDEX_CONSTANT).descending(descending).context(makeContext()).build()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3->8 [style = dashed, label="0"];
6->5 [style = bold, label=""];
5->2 [style = bold, label=""];
1->2 [style = bold, label=""];
3->4 [style = solid, label="expectedResults"];
8->4 [style = solid, label="expectedResults"];
8->4 [style = bold, label=""];
1->5 [style = dashed, label="0"];
1->7 [style = dashed, label="0"];
9->7 [style = bold, label=""];
3->4 [style = bold, label=""];
0->1 [style = bold, label=""];
7->2 [style = bold, label=""];
2->4 [style = solid, label="actualResults"];
2->3 [style = bold, label=""];
2->8 [style = bold, label=""];
}
