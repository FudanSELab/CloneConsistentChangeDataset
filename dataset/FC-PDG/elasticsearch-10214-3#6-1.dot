digraph {
25 [style = filled, label = "mappers.put(IpFieldMapper.CONTENT_TYPE,new IpFieldMapper.TypeParser())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "mappers.put(FeatureVectorFieldMapper.CONTENT_TYPE,new FeatureVectorFieldMapper.TypeParser())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "throw new IllegalArgumentException(\"Mapper (\" + entry.getKey() + \"( is already registered\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "mappers.put(type.typeName(),new RangeFieldMapper.TypeParser(type))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "mappers.put(KeywordFieldMapper.CONTENT_TYPE,new KeywordFieldMapper.TypeParser())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "List<MapperPlugin> mapperPlugins@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "getMappers['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "mappers.put(type.typeName(),new NumberFieldMapper.TypeParser(type))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "getMappers['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "mappers.put(ObjectMapper.NESTED_CONTENT_TYPE,new ObjectMapper.TypeParser())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "mappers.put(GeoPointFieldMapper.CONTENT_TYPE,new GeoPointFieldMapper.TypeParser())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "mappers.put(GeoShapeFieldMapper.CONTENT_TYPE,new GeoShapeFieldMapper.TypeParser())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "mappers.put(BinaryFieldMapper.CONTENT_TYPE,new BinaryFieldMapper.TypeParser())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "getMappers['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "return Collections.unmodifiableMap(mappers)@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "mappers.put(ScaledFloatFieldMapper.CONTENT_TYPE,new ScaledFloatFieldMapper.TypeParser())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "return Collections.unmodifiableMap(mappers)@@@30@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "mappers.put(ObjectMapper.CONTENT_TYPE,new ObjectMapper.TypeParser())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "mappers.put(entry.getKey(),entry.getValue()) != null@@@25@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "mappers.put(CompletionFieldMapper.CONTENT_TYPE,new CompletionFieldMapper.TypeParser())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "mappers.put(TextFieldMapper.CONTENT_TYPE,new TextFieldMapper.TypeParser())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Map<String,Mapper.TypeParser> mappers = new LinkedHashMap<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ShapesAvailability.JTS_AVAILABLE && ShapesAvailability.SPATIAL4J_AVAILABLE@@@20@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "mappers.put(BooleanFieldMapper.CONTENT_TYPE,new BooleanFieldMapper.TypeParser())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "mappers.put(FeatureFieldMapper.CONTENT_TYPE,new FeatureFieldMapper.TypeParser())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "mappers.put(TokenCountFieldMapper.CONTENT_TYPE,new TokenCountFieldMapper.TypeParser())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "mappers.put(DateFieldMapper.CONTENT_TYPE,new DateFieldMapper.TypeParser())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->3 [style = bold, label=""];
3->1 [style = bold, label=""];
4->6 [style = bold, label=""];
15->21 [style = bold, label=""];
0->23 [style = dashed, label="0"];
2->3 [style = bold, label=""];
18->15 [style = bold, label=""];
12->11 [style = bold, label=""];
12->20 [style = bold, label=""];
10->17 [style = bold, label=""];
1->0 [style = bold, label=""];
15->21 [style = dotted, label="true"];
26->19 [style = bold, label=""];
3->11 [style = solid, label="mappers"];
7->3 [style = bold, label=""];
19->25 [style = bold, label=""];
8->22 [style = bold, label=""];
21->12 [style = bold, label=""];
24->26 [style = bold, label=""];
6->5 [style = bold, label=""];
3->23 [style = bold, label=""];
22->18 [style = bold, label=""];
12->20 [style = dotted, label="true"];
0->4 [style = bold, label=""];
16->14 [style = dotted, label="true"];
20->12 [style = bold, label=""];
3->5 [style = solid, label="mappers"];
25->10 [style = bold, label=""];
17->13 [style = bold, label=""];
15->12 [style = bold, label=""];
13->8 [style = bold, label=""];
23->9 [style = bold, label=""];
4->5 [style = bold, label=""];
9->24 [style = bold, label=""];
20->11 [style = bold, label=""];
}
