digraph {
28 [style = filled, label = "calls.get(1).enqueue(assertFailOnError)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "dedupesSameCalls['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "testFactory.maybeAdd(\"bar\",calls)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertThat(calls).hasSize(2)@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "failValue.set(\"foo\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(testFactory.values).containsExactly(\"foo\",\"bar\")@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "callFactory.maybeAdd(\"bar\",calls)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(values).containsExactly(\"bar\",\"foo\")@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "callFactory.maybeAdd(\"foo\",calls)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testFactory.maybeAdd(\"bar\",calls)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "List<Call<Void>> calls = new ArrayList<>()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "exceptionsInvalidate_enqueue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "calls.clear()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "callFactory.maybeAdd(\"foo\",calls)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "dedupesSameCalls['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "failBecauseExceptionWasNotThrown()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "AssertionError e@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testFactory.maybeAdd(\"foo\",calls)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "testFactory.maybeAdd(\"foo\",calls)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "callFactory.maybeAdd(\"bar\",calls)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "callFactory.maybeAdd(\"foo\",calls)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "calls.get(0).enqueue(assertFailOnError)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "calls.get(0).enqueue(assertFailOnError)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "call.execute()@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "call.execute()@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "TestFactory testFactory = new TestFactory()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testFactory.maybeAdd(\"bar\",calls)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertThat(values).containsExactly(\"bar\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(values).containsExactly(\"foo\",\"bar\")@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "callFactory.maybeAdd(\"bar\",calls)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "assertThat(calls).isNotEmpty()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(calls).hasSize(2)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "{}@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->14 [style = solid, label="calls"];
1->5 [style = bold, label=""];
6->3 [style = bold, label=""];
16->15 [style = bold, label=""];
7->2 [style = solid, label="calls"];
7->29 [style = solid, label="calls"];
31->25 [style = bold, label=""];
28->30 [style = bold, label=""];
30->27 [style = bold, label=""];
7->0 [style = solid, label="calls"];
14->10 [style = bold, label=""];
0->15 [style = dashed, label="0"];
8->6 [style = bold, label=""];
10->17 [style = bold, label=""];
22->28 [style = bold, label=""];
19->2 [style = bold, label=""];
32->7 [style = bold, label=""];
7->5 [style = solid, label="calls"];
7->4 [style = solid, label="calls"];
9->7 [style = bold, label=""];
2->4 [style = bold, label=""];
15->18 [style = bold, label=""];
2->15 [style = solid, label="calls"];
13->11 [style = bold, label=""];
20->22 [style = bold, label=""];
5->16 [style = dashed, label="0"];
21->26 [style = bold, label=""];
1->17 [style = dashed, label="0"];
2->14 [style = dashed, label="0"];
5->0 [style = bold, label=""];
23->21 [style = bold, label=""];
7->1 [style = solid, label="calls"];
24->31 [style = bold, label=""];
7->2 [style = bold, label=""];
2->14 [style = bold, label=""];
2->10 [style = solid, label="calls"];
0->8 [style = bold, label=""];
18->13 [style = bold, label=""];
4->1 [style = bold, label=""];
26->28 [style = bold, label=""];
27->29 [style = bold, label=""];
3->11 [style = dashed, label="0"];
2->17 [style = solid, label="calls"];
12->19 [style = bold, label=""];
29->24 [style = bold, label=""];
4->10 [style = dashed, label="0"];
2->16 [style = solid, label="calls"];
4->23 [style = bold, label=""];
17->16 [style = bold, label=""];
}
