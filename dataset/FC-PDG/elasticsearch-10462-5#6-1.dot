digraph {
7 [style = filled, label = "testBuildMissingField['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "testBuildMissingField['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "config.put(\"patterns\",Collections.singletonList(\"(?<foo>\w+)\"))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "config.put(\"field\",\"foo\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Map<String,Object> config = new HashMap<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "GrokProcessor.Factory factory = new GrokProcessor.Factory(Collections.emptyMap(),ThreadWatchdog.noop())@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(e.getMessage(),equalTo(\"(patterns( required property is missing\"))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ElasticsearchParseException e = expectThrows(,null)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "GrokProcessor.Factory factory = new GrokProcessor.Factory(Collections.emptyMap(),MatcherWatchdog.noop())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "testBuildMissingPatterns['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(e.getMessage(),equalTo(\"(field( required property is missing\"))@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9->5 [style = bold, label=""];
3->9 [style = bold, label=""];
6->3 [style = bold, label=""];
5->1 [style = bold, label=""];
5->10 [style = bold, label=""];
7->6 [style = bold, label=""];
1->10 [style = dashed, label="0"];
8->2 [style = bold, label=""];
4->5 [style = bold, label=""];
3->4 [style = bold, label=""];
2->3 [style = bold, label=""];
0->2 [style = bold, label=""];
2->6 [style = dashed, label="0"];
}
