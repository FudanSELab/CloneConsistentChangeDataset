digraph {
12 [style = filled, label = "assertEquals(1,count.get())@@@58@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "i++@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Function<Supplier<Boolean>,Supplier<Boolean>> memoizer@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final AtomicReference<Throwable> thrown = new AtomicReference<>(null)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "final Thread(( threads = new Thread((((@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "i < numThreads@@@40@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testSupplierThreadSafe['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final long timeout = TimeUnit.SECONDS.toNanos(60)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final Supplier<Boolean> supplier = new Supplier<Boolean>(){boolean isWaiting(Thread thread){switch (thread.getState()) {case BLOCKED:case WAITING:case TIMED_WAITING:return truedefault:return false}int waitingThreads(){int waitingThreads = 0for (Thread thread : threads){if (isWaiting(thread)) {waitingThreads++}}return waitingThreads}@Override public Boolean get(){long t0 = System.nanoTime()while (waitingThreads() != numThreads - 1) {if (System.nanoTime() - t0 > timeout) {thrown.set(new TimeoutException(\"timed out waiting for other threads to block\" + \" synchronizing on supplier\"))break}Thread.yield()}count.getAndIncrement()return Boolean.TRUE}}@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "t.start()@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final Supplier<Boolean> memoizedSupplier = memoizer.apply(supplier)@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "thrown.get() != null@@@55@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "throw thrown.get()@@@56@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "threads(i( = new Thread(){@Override public void run(){assertSame(Boolean.TRUE,memoizedSupplier.get())}}@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final AtomicInteger count = new AtomicInteger(0)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "int i = 0@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final AtomicReference<Throwable> thrown = new AtomicReference<Throwable>(null)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final int numThreads = 3@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "t.join()@@@53@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testSupplierThreadSafe['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "testSupplierThreadSafe['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2->17 [style = bold, label=""];
14->16 [style = bold, label=""];
13->10 [style = bold, label=""];
17->8 [style = bold, label=""];
5->17 [style = solid, label="numThreads"];
13->10 [style = solid, label="timeout"];
7->17 [style = bold, label=""];
5->9 [style = bold, label=""];
17->6 [style = bold, label=""];
16->19 [style = dashed, label="0"];
0->12 [style = bold, label=""];
4->0 [style = dotted, label="true"];
14->19 [style = bold, label=""];
20->14 [style = bold, label=""];
11->2 [style = bold, label=""];
6->15 [style = bold, label=""];
8->7 [style = bold, label=""];
4->0 [style = bold, label=""];
1->3 [style = dotted, label="true"];
19->5 [style = bold, label=""];
17->8 [style = dotted, label="true"];
7->17 [style = solid, label="i"];
9->10 [style = solid, label="threads"];
18->3 [style = dotted, label="true"];
15->4 [style = bold, label=""];
16->5 [style = bold, label=""];
4->12 [style = bold, label=""];
20->3 [style = dotted, label="true"];
1->14 [style = bold, label=""];
17->7 [style = dotted, label="true"];
10->11 [style = solid, label="supplier"];
5->10 [style = solid, label="numThreads"];
2->17 [style = solid, label="i"];
8->7 [style = solid, label="i"];
18->14 [style = bold, label=""];
9->13 [style = bold, label=""];
10->11 [style = bold, label=""];
}
