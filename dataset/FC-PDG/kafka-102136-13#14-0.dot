digraph {
12 [style = filled, label = "createClient(p3,1)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "final StickyTaskAssignor taskAssignor = createTaskAssignor(1,TASK_0_0,TASK_0_2,TASK_0_1,TASK_0_3)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "createClient(UUID_1,1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "c2.addPreviousStandbyTasks(Utils.mkSet(task01,task02))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "shouldNotHaveSameAssignmentOnAnyTwoHostsWhenThereArePreviousStandbyTasks['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "c1.addPreviousStandbyTasks(Utils.mkSet(task03,task00))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "j != i@@@18@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(\"clients shouldn't have same task assignment\",clients.get(otherUUID).assignedTasks(),not(equalTo(taskIds)))@@@14@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "i <= p4@@@12@@@['1', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "createClient(p4,1)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "i++@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "createClient(p2,1)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "createClient(UUID_2,1)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "final StickyTaskAssignor<Integer> taskAssignor = createTaskAssignor(1,task00,task02,task01,task03)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final Set<TaskId> taskIds = clients.get(uuid).assignedTasks()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "final List<UUID> allUUIDs = asList(UUID_1,UUID_2,UUID_3,UUID_4)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "final ClientState c2 = createClientWithPreviousActiveTasks(p2,1,task03,task00)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "createClient(UUID_4,1)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "j++@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "createClient(p3,1)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final Set<TaskId> taskIds = clients.get(i).assignedTasks()@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "createClient(p1,1)@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "createClient(p4,1)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "shouldNotHaveSameAssignmentOnAnyTwoHosts['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "shouldNotHaveSameAssignmentOnAnyTwoHosts['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "!uuid.equals(otherUUID)@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "taskAssignor.assign()@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "int j = p1@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "j <= p4@@@16@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final ClientState c1 = createClientWithPreviousActiveTasks(p1,1,task01,task02)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "createClient(UUID_3,1)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "int i = p1@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(\"clients shouldn't have same task assignment\",clients.get(j).assignedTasks(),not(equalTo(taskIds)))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
6->3 [style = bold, label=""];
23->24 [style = solid, label="taskIds"];
2->9 [style = solid, label="i"];
3->15 [style = solid, label="j"];
15->10 [style = bold, label=""];
9->14 [style = solid, label="i"];
15->10 [style = solid, label="j"];
12->21 [style = dashed, label="0"];
9->6 [style = bold, label=""];
2->23 [style = bold, label=""];
15->11 [style = bold, label=""];
9->6 [style = solid, label="i"];
6->8 [style = solid, label="taskIds"];
2->14 [style = bold, label=""];
9->14 [style = bold, label=""];
14->3 [style = dotted, label="true"];
21->16 [style = bold, label=""];
14->9 [style = bold, label=""];
11->8 [style = dotted, label="true"];
10->30 [style = solid, label="taskIds"];
26->28 [style = bold, label=""];
6->11 [style = dotted, label="true"];
30->8 [style = bold, label=""];
6->3 [style = dotted, label="true"];
8->11 [style = bold, label=""];
6->15 [style = dotted, label="true"];
10->11 [style = bold, label=""];
23->25 [style = bold, label=""];
27->30 [style = bold, label=""];
3->10 [style = solid, label="j"];
31->29 [style = bold, label=""];
8->11 [style = solid, label="j"];
7->0 [style = bold, label=""];
32->7 [style = bold, label=""];
16->17 [style = bold, label=""];
15->8 [style = solid, label="j"];
8->27 [style = solid, label="j"];
3->10 [style = bold, label=""];
25->24 [style = bold, label=""];
18->20 [style = bold, label=""];
15->11 [style = solid, label="j"];
29->32 [style = bold, label=""];
2->14 [style = solid, label="i"];
11->8 [style = bold, label=""];
20->19 [style = bold, label=""];
27->8 [style = bold, label=""];
14->6 [style = bold, label=""];
8->15 [style = bold, label=""];
22->2 [style = bold, label=""];
28->31 [style = bold, label=""];
3->6 [style = bold, label=""];
25->24 [style = dotted, label="true"];
1->28 [style = dashed, label="0"];
3->6 [style = solid, label="i"];
6->10 [style = dotted, label="true"];
12->13 [style = bold, label=""];
14->23 [style = dashed, label="0"];
2->11 [style = solid, label="i"];
11->27 [style = dotted, label="true"];
11->3 [style = bold, label=""];
10->11 [style = dotted, label="true"];
24->25 [style = bold, label=""];
6->10 [style = bold, label=""];
10->9 [style = bold, label=""];
4->1 [style = bold, label=""];
5->19 [style = dashed, label="0"];
13->16 [style = dashed, label="0"];
24->23 [style = bold, label=""];
14->6 [style = dotted, label="true"];
19->21 [style = bold, label=""];
3->11 [style = solid, label="j"];
10->15 [style = bold, label=""];
3->27 [style = solid, label="i"];
25->23 [style = bold, label=""];
0->2 [style = bold, label=""];
15->27 [style = solid, label="j"];
17->22 [style = bold, label=""];
14->10 [style = dotted, label="true"];
11->15 [style = bold, label=""];
9->11 [style = solid, label="i"];
10->15 [style = dotted, label="true"];
27->30 [style = dotted, label="true"];
5->12 [style = bold, label=""];
13->7 [style = bold, label=""];
14->9 [style = dotted, label="true"];
9->27 [style = solid, label="i"];
9->3 [style = solid, label="i"];
11->27 [style = bold, label=""];
}
