digraph {
15 [style = filled, label = "final KeyValue<Bytes,LRUCacheEntry> next = iterator.next()@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "assertEquals(5,bytesIndex)@@@17@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "int bytesIndex = 1@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertArrayEquals(bytes(bytesIndex(,peekedKey.get())@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "iterator.hasNext()@@@10@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertArrayEquals(bytes(bytesIndex(,next.key.get())@@@42@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final ThreadCache cache = setupThreadCache(0,10,10000L,false)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "final ThreadCache.MemoryLRUCacheBytesIterator iterator = cache.range(namespace,Bytes.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@bc747d),Bytes.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@bc7484))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "final Bytes peekedKey = iterator.peekNextKey()@@@39@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "bytesIndex++@@@43@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "iterator.hasNext()@@@38@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(4,bytesIndex)@@@45@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final ThreadCache cache = new ThreadCache(logContext,10000L,new MockStreamsMetrics(new Metrics()))@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "shouldSkipToEntryWhentoInclusiveIsFalseInRange['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "shouldPeekAndIterateOverRange['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(5,bytesIndex)@@@45@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "shouldPeekAndIterateOverRange['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "final ThreadCache.MemoryLRUCacheBytesIterator iterator = cache.range(namespace,Bytes.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@bc7504),Bytes.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@bc750b),false)@@@32@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertArrayEquals(bytes(bytesIndex(,next.key.get())@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "final byte(((( bytes = {{0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10}}@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "cache.put(namespace,Bytes.wrap(aByte),dirtyEntry(aByte))@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertArrayEquals(bytes(bytesIndex(,peekedKey.get())@@@41@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final Bytes peekedKey = iterator.peekNextKey()@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "final KeyValue<Bytes,LRUCacheEntry> next = iterator.next()@@@40@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int bytesIndex = 1@@@37@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "bytesIndex++@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6->3 [style = bold, label=""];
24->12 [style = bold, label=""];
13->17 [style = solid, label="bytesIndex"];
7->1 [style = bold, label=""];
17->21 [style = solid, label="bytesIndex"];
14->19 [style = dotted, label="true"];
17->19 [style = solid, label="bytesIndex"];
8->2 [style = solid, label="bytesIndex"];
13->16 [style = solid, label="bytesIndex"];
9->7 [style = solid, label="bytesIndex"];
5->1 [style = dotted, label="true"];
5->6 [style = dotted, label="true"];
0->11 [style = bold, label=""];
8->25 [style = solid, label="bytesIndex"];
4->1 [style = solid, label="bytes"];
19->17 [style = bold, label=""];
5->3 [style = dotted, label="true"];
16->19 [style = bold, label=""];
15->16 [style = bold, label=""];
13->21 [style = solid, label="bytesIndex"];
8->1 [style = solid, label="bytesIndex"];
1->9 [style = bold, label=""];
5->25 [style = bold, label=""];
4->0 [style = bold, label=""];
13->19 [style = solid, label="bytesIndex"];
14->20 [style = dotted, label="true"];
14->16 [style = dotted, label="true"];
14->17 [style = dotted, label="true"];
14->15 [style = dotted, label="true"];
5->2 [style = bold, label=""];
18->22 [style = bold, label=""];
4->7 [style = solid, label="bytes"];
5->6 [style = bold, label=""];
8->5 [style = bold, label=""];
12->4 [style = bold, label=""];
3->7 [style = bold, label=""];
17->14 [style = bold, label=""];
10->12 [style = bold, label=""];
5->7 [style = dotted, label="true"];
9->1 [style = solid, label="bytesIndex"];
9->2 [style = solid, label="bytesIndex"];
17->16 [style = solid, label="bytesIndex"];
9->25 [style = solid, label="bytesIndex"];
2->25 [style = dashed, label="0"];
9->5 [style = bold, label=""];
5->9 [style = dotted, label="true"];
11->8 [style = bold, label=""];
12->18 [style = dashed, label="0"];
8->9 [style = solid, label="bytesIndex"];
20->15 [style = bold, label=""];
13->14 [style = bold, label=""];
23->18 [style = bold, label=""];
14->21 [style = bold, label=""];
22->13 [style = bold, label=""];
14->20 [style = bold, label=""];
8->7 [style = solid, label="bytesIndex"];
}
