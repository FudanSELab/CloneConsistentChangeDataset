digraph {
4 [style = filled, label = "final Exchange exchange = call.rel(0)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "distributionKeys.size() != exchange.getDistribution().getKeys().size()@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "distributionKeys = simplifyDistributionKeys(sortExchange.getDistribution(),constants)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "call.getPlanner().prune(sortExchange)@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "RelOptPredicateList.isEmpty(predicates)@@@7@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "final RelMetadataQuery mq = call.getMetadataQuery()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final List<RelFieldCollation> fieldCollations = sortExchange.getCollation().getFieldCollations().stream().filter(null).collect(Collectors.toList())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "predicates == null@@@7@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "RelOptRuleCall call@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "predicates.constantMap.keySet().forEach(null)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "matchExchange['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "matchSortExchange['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "RelOptRuleCall call@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "call.transformTo(call.builder().push(exchange.getInput()).exchange(distributionKeys.isEmpty()? RelDistributions.SINGLETON: RelDistributions.hash(distributionKeys)).build())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "List<Integer> distributionKeys = new ArrayList<>()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "RelCollation collation = collationSimplified? RelCollations.of(fieldCollations): sortExchange.getCollation()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "call.getPlanner().prune(exchange)@@@23@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "boolean hashDistribution = sortExchange.getDistribution().getType() == RelDistribution.Type.HASH_DISTRIBUTED@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "hashDistribution@@@23@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "return@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final SortExchange sortExchange = call.rel(0)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final List<Integer> distributionKeys = simplifyDistributionKeys(exchange.getDistribution(),constants)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final Set<Integer> constants = new HashSet<>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final RelNode input = exchange.getInput()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "matchExchange['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "RelOptRuleCall call@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "distributionSimplified || collationSimplified@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "ExchangeRemoveConstantKeysRule rule@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "boolean distributionSimplified = false@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "return@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "boolean collationSimplified = fieldCollations.size() != sortExchange.getCollation().getFieldCollations().size()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "call.transformTo(call.builder().push(sortExchange.getInput()).sortExchange(distribution,collation).build())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final RelOptPredicateList predicates = mq.getPulledUpPredicates(input)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "RelDistribution distribution = distributionSimplified? (distributionKeys.isEmpty()? RelDistributions.SINGLETON: RelDistributions.hash(distributionKeys)): sortExchange.getDistribution()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "distributionSimplified = distributionKeys.size() != sortExchange.getDistribution().getKeys().size()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "final RelNode input = sortExchange.getInput()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ExchangeRemoveConstantKeysRule rule@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "constants.isEmpty()@@@17@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23->31 [style = bold, label=""];
14->6 [style = solid, label="input"];
6->19 [style = solid, label="predicates"];
7->11 [style = bold, label=""];
3->35 [style = dashed, label="0"];
10->15 [style = bold, label=""];
5->9 [style = bold, label=""];
25->34 [style = bold, label=""];
17->18 [style = dotted, label="true"];
7->10 [style = bold, label=""];
27->26 [style = solid, label="distributionSimplified"];
37->30 [style = bold, label=""];
33->24 [style = solid, label="collationSimplified"];
25->35 [style = dotted, label="true"];
6->5 [style = solid, label="predicates"];
7->37 [style = bold, label=""];
11->37 [style = bold, label=""];
27->31 [style = bold, label=""];
21->24 [style = bold, label=""];
6->19 [style = bold, label=""];
26->22 [style = dotted, label="true"];
32->6 [style = solid, label="input"];
24->22 [style = bold, label=""];
16->3 [style = dotted, label="true"];
32->6 [style = bold, label=""];
34->0 [style = bold, label=""];
17->3 [style = dotted, label="true"];
4->0 [style = bold, label=""];
33->26 [style = bold, label=""];
26->21 [style = bold, label=""];
30->26 [style = solid, label="distributionSimplified"];
23->29 [style = bold, label=""];
29->27 [style = bold, label=""];
6->5 [style = bold, label=""];
30->21 [style = solid, label="distributionSimplified"];
0->14 [style = bold, label=""];
13->10 [style = solid, label="constants"];
13->29 [style = solid, label="constants"];
30->28 [style = bold, label=""];
14->32 [style = dashed, label="0"];
15->8 [style = dotted, label="true"];
19->13 [style = bold, label=""];
27->21 [style = solid, label="distributionSimplified"];
7->11 [style = dotted, label="true"];
19->9 [style = bold, label=""];
16->1 [style = dotted, label="true"];
34->36 [style = solid, label="sortExchange"];
11->10 [style = bold, label=""];
12->8 [style = bold, label=""];
28->23 [style = bold, label=""];
31->33 [style = bold, label=""];
5->13 [style = bold, label=""];
22->36 [style = bold, label=""];
29->21 [style = solid, label="distributionKeys"];
33->26 [style = solid, label="collationSimplified"];
19->9 [style = dotted, label="true"];
23->27 [style = dotted, label="true"];
26->24 [style = dotted, label="true"];
25->20 [style = dotted, label="true"];
4->34 [style = dashed, label="0"];
9->13 [style = bold, label=""];
5->9 [style = dotted, label="true"];
15->12 [style = dotted, label="true"];
4->8 [style = solid, label="exchange"];
10->37 [style = dashed, label="0"];
15->12 [style = bold, label=""];
2->7 [style = bold, label=""];
0->32 [style = bold, label=""];
16->4 [style = bold, label=""];
37->21 [style = solid, label="distributionKeys"];
23->29 [style = dotted, label="true"];
26->21 [style = dotted, label="true"];
5->19 [style = dashed, label="0"];
28->23 [style = solid, label="hashDistribution"];
14->6 [style = bold, label=""];
17->4 [style = bold, label=""];
31->24 [style = solid, label="fieldCollations"];
26->36 [style = dotted, label="true"];
13->2 [style = bold, label=""];
}
