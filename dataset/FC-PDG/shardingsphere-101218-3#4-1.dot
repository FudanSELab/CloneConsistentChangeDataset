digraph {
14 [style = filled, label = "PostgreSQLInt2BinaryProtocolValue actual = new PostgreSQLInt2BinaryProtocolValue()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "PostgreSQLTimeBinaryProtocolValue actual = new PostgreSQLTimeBinaryProtocolValue()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Timestamp timestamp = new Timestamp(System.currentTimeMillis())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(actual.getColumnLength(null),equalTo(2))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "actual.write(payload,timestamp)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertNewInstance['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "verify(payload).writeInt2(1)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "when(payload.readInt2()).thenReturn(1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(actual.read(payload),is(1L))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertThat(actual.getColumnLength(null),equalTo(8))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertThat(actual.read(payload),is(1))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "when(payload.readInt8()).thenReturn(1L)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "actual.write(payload,1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(actual.read(payload,8),is(1L))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertNewInstance['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertNewInstance['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "verify(payload).writeInt8(timestamp.getTime())@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(actual.getColumnLength(null),is(8))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1->4 [style = bold, label=""];
7->1 [style = bold, label=""];
4->16 [style = dashed, label="0"];
11->14 [style = bold, label=""];
12->15 [style = bold, label=""];
1->9 [style = bold, label=""];
3->0 [style = bold, label=""];
0->7 [style = bold, label=""];
6->2 [style = bold, label=""];
8->0 [style = bold, label=""];
0->14 [style = dashed, label="0"];
4->9 [style = dashed, label="0"];
13->17 [style = bold, label=""];
0->10 [style = bold, label=""];
1->17 [style = dashed, label="0"];
5->6 [style = bold, label=""];
6->15 [style = dashed, label="0"];
7->13 [style = dashed, label="0"];
9->5 [style = bold, label=""];
7->10 [style = dashed, label="0"];
14->13 [style = bold, label=""];
10->1 [style = bold, label=""];
5->6 [style = solid, label="timestamp"];
4->5 [style = bold, label=""];
16->12 [style = bold, label=""];
17->16 [style = bold, label=""];
}
