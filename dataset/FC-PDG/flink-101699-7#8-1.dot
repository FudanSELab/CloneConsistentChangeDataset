digraph {
15 [style = filled, label = "assertArrayEquals(reducedArguments,programOptions.getProgramArgs())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(arguments(4(,options.getJarFilePath())@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ExecutionConfigAccessor executionOptions = ExecutionConfigAccessor.fromProgramOptions(programOptions)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "assertEquals(arguments(0(,options.getJarFilePath())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertArrayEquals(new String((((,options.getProgramArgs())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "RunOptions options = CliFrontendParser.parseRunCommand(arguments)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(arguments(4(,executionOptions.getJarFilePath())@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "testNonExistingFileWithoutArguments['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "fail(\"Should fail with an exception\")@@@20@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertArrayEquals(classpath,options.getClasspaths().toArray())@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "String(( reducedArguments = {\"--debug\",\"true\",\"arg1\",\"arg2\"}@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertArrayEquals(classpath,executionOptions.getClasspaths().toArray())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testNonExistingFileWithArguments['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "frontend.buildProgram(programOptions,executionOptions)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "CommandLine commandLine = CliFrontendParser.parse(CliFrontendParser.RUN_OPTIONS,arguments,true)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "frontend.buildProgram(options)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "fail(\"Should fail with an exception\")@@@18@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testNonExistingFileWithArguments['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "frontend.buildProgram(options)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "URL(( classpath = new URL((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b0725a@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ProgramOptions programOptions = new ProgramOptions(commandLine)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertArrayEquals(reducedArguments,options.getProgramArgs())@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "String(( arguments = {\"/some/none/existing/path\"}@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->18 [style = solid, label="programOptions"];
0->3 [style = bold, label=""];
4->9 [style = bold, label=""];
0->9 [style = solid, label="arguments"];
18->14 [style = solid, label="executionOptions"];
0->9 [style = bold, label=""];
9->16 [style = dashed, label="0"];
7->21 [style = dashed, label="0"];
7->1 [style = bold, label=""];
4->15 [style = solid, label="reducedArguments"];
9->19 [style = solid, label="options"];
15->14 [style = bold, label=""];
22->19 [style = bold, label=""];
20->0 [style = bold, label=""];
0->21 [style = solid, label="arguments"];
18->12 [style = bold, label=""];
14->10 [style = bold, label=""];
6->0 [style = bold, label=""];
16->17 [style = bold, label=""];
8->14 [style = dashed, label="0"];
9->7 [style = bold, label=""];
3->4 [style = bold, label=""];
1->22 [style = dashed, label="0"];
4->2 [style = solid, label="reducedArguments"];
12->13 [style = bold, label=""];
11->0 [style = bold, label=""];
9->8 [style = solid, label="options"];
8->5 [style = bold, label=""];
0->7 [style = solid, label="arguments"];
0->16 [style = solid, label="arguments"];
21->22 [style = bold, label=""];
16->17 [style = solid, label="commandLine"];
17->14 [style = solid, label="programOptions"];
9->21 [style = bold, label=""];
0->12 [style = solid, label="arguments"];
1->2 [style = bold, label=""];
13->15 [style = bold, label=""];
3->1 [style = solid, label="classpath"];
3->13 [style = solid, label="classpath"];
17->18 [style = bold, label=""];
4->16 [style = bold, label=""];
2->8 [style = bold, label=""];
}
