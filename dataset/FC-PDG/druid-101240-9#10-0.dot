digraph {
14 [style = filled, label = "final long requestStartTimeNs = System.nanoTime()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final QueryPlus<T> queryPlus@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "retVal = Sequences.map(retVal,toolChest.makePreComputeManipulatorFn(query,MetricManipulatorFns.deserializing()))@@@234@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final AtomicLong totalBytesGathered = (AtomicLong)context.get(QUERY_TOTAL_BYTES_GATHERED)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "throw new RuntimeException(e)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "future = httpClient.go(new Request(HttpMethod.POST,new URL(url)).setContent(objectMapper.writeValueAsBytes(QueryContexts.withTimeout(query,timeLeft))).setHeader(HttpHeaders.Names.CONTENT_TYPE,isSmile? SmileMediaTypes.APPLICATION_JACKSON_SMILE: MediaType.APPLICATION_JSON),responseHandler,Duration.millis(timeLeft))@@@197@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final long timeoutAt = query.getContextValue(QUERY_FAIL_TIME)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final QueryPlus<T> queryPlus@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "queryWatcher.registerQuery(query,future)@@@198@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "return retVal@@@236@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "QueryToolChest<T,Query<T>> toolChest = warehouse.getToolChest(query)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "timeLeft <= 0@@@194@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final Query<T> query = queryPlus.getQuery()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final String cancelUrl = StringUtils.format(\"%s://%s/druid/v2/%s\",scheme,host,query.getId())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "byteCount.addAndGet(response.getContent().readableBytes())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "run['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final ListenableFuture<InputStream> future@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "TrafficCop trafficCop@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final long maxScatterGatherBytes = QueryContexts.getMaxScatterGatherBytes(query)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final JavaType queryResultType = isBySegment? toolChest.getBySegmentResultType(): toolChest.getBaseResultType()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "throw new RE(\"Query(%s( url(%s( timed out.\",query.getId(),url)@@@195@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "HttpResponse response@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "return ClientResponse.finished(new SequenceInputStream(new Enumeration<InputStream>(){@Override public boolean hasMoreElements(){synchronized (done) {return !done.get() || !queue.isEmpty()}}@Override public InputStream nextElement(){try {return queue.take()}catch (InterruptedException e) }}))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "final Map<String,Object> context@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "handleResponse['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "IOException e@@@221@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Sequence<T> retVal = new BaseSequence<>(new BaseSequence.IteratorMaker<T,JsonParserIterator<T>>(){@Override public JsonParserIterator<T> make(){return new JsonParserIterator<T>(queryResultType,future,url,query,host,objectMapper,null)}@Override public void cleanup(JsonParserIterator<T> iterFromMake){CloseQuietly.close(iterFromMake)}})@@@224@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final HttpResponseHandler<InputStream,InputStream> responseHandler = new HttpResponseHandler<InputStream,InputStream>(){private QueryMetrics<? super Query<T>> acquireResponseMetrics(){if (queryMetrics == null) {queryMetrics = toolChest.makeMetrics(query)queryMetrics.server(host)}return queryMetrics}private boolean enqueue(ChannelBuffer buffer,long chunkNum){final InputStreamHolder holder = InputStreamHolder.fromChannelBuffer(buffer,chunkNum)final long currentQueuedByteCount = queuedByteCount.addAndGet(holder.getLength())queue.put(holder)return !usingBackpressure || currentQueuedByteCount < maxQueuedBytes}private InputStream dequeue(){final InputStreamHolder holder = queue.poll(checkQueryTimeout(),TimeUnit.MILLISECONDS)if (holder == null) {throw new RE(\"Query(%s( url(%s( timed out.\",query.getId(),url)}final long currentQueuedByteCount = queuedByteCount.addAndGet(-holder.getLength())if (usingBackpressure && currentQueuedByteCount < maxQueuedBytes) {long backPressureTime = Preconditions.checkNotNull(trafficCopRef.get(),\"No TrafficCop, how can this be?\").resume(holder.getChunkNum())channelSuspendedTime.addAndGet(backPressureTime)}return holder.getStream()}@Override public ClientResponse<InputStream> handleResponse(HttpResponse response,TrafficCop trafficCop){trafficCopRef.set(trafficCop)checkQueryTimeout()checkTotalBytesLimit(response.getContent().readableBytes())log.debug(\"Initial response from url(%s( for queryId(%s(\",url,query.getId())responseStartTimeNs = System.nanoTime()acquireResponseMetrics().reportNodeTimeToFirstByte(responseStartTimeNs - requestStartTimeNs).emit(emitter)final boolean continueReadingtry {final String responseContext = response.headers().get(\"X-Druid-Response-Context\")if (responseContext != null) {context.putAll(objectMapper.readValue(responseContext,JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT))}continueReading = enqueue(response.getContent(),0L)}catch (final IOException e) catch (InterruptedException e) totalByteCount.addAndGet(response.getContent().readableBytes())return ClientResponse.finished(new SequenceInputStream(new Enumeration<InputStream>(){@Override public boolean hasMoreElements(){if (fail.get() != null) {throw new RE(fail.get())}checkQueryTimeout()synchronized (done) {return !done.get() || !queue.isEmpty()}}@Override public InputStream nextElement(){if (fail.get() != null) {throw new RE(fail.get())}try {return dequeue()}catch (InterruptedException e) }}),continueReading)}@Override public ClientResponse<InputStream> handleChunk(ClientResponse<InputStream> clientResponse,HttpChunk chunk,long chunkNum){checkQueryTimeout()final ChannelBuffer channelBuffer = chunk.getContent()final int bytes = channelBuffer.readableBytes()checkTotalBytesLimit(bytes)boolean continueReading = trueif (bytes > 0) {try {continueReading = enqueue(channelBuffer,chunkNum)}catch (InterruptedException e) totalByteCount.addAndGet(bytes)}return ClientResponse.finished(clientResponse.getObj(),continueReading)}@Override public ClientResponse<InputStream> done(ClientResponse<InputStream> clientResponse){long stopTimeNs = System.nanoTime()long nodeTimeNs = stopTimeNs - requestStartTimeNsfinal long nodeTimeMs = TimeUnit.NANOSECONDS.toMillis(nodeTimeNs)log.debug(\"Completed queryId(%s( request to url(%s( with %,d bytes returned in %,d millis (%,f b/s(.\",query.getId(),url,totalByteCount.get(),nodeTimeMs,totalByteCount.get() / (0.001 * nodeTimeMs))QueryMetrics<? super Query<T>> responseMetrics = acquireResponseMetrics()responseMetrics.reportNodeTime(nodeTimeNs)responseMetrics.reportNodeBytes(totalByteCount.get())if (usingBackpressure) {responseMetrics.reportBackPressureTime(channelSuspendedTime.get())}responseMetrics.emit(emitter)synchronized (done) {try {queue.put(InputStreamHolder.fromChannelBuffer(ChannelBuffers.EMPTY_BUFFER,Long.MAX_VALUE))}catch (InterruptedException e) {done.set(true)}}return ClientResponse.finished(clientResponse.getObj())}@Override public void exceptionCaught(final ClientResponse<InputStream> clientResponse,final Throwable e){String msg = StringUtils.format(\"Query(%s( url(%s( failed with exception msg (%s(\",query.getId(),url,e.getMessage())setupResponseReadFailure(msg,e)}private void setupResponseReadFailure(String msg,Throwable th){fail.set(msg)queue.clear()queue.offer(InputStreamHolder.fromStream(new InputStream(){@Override public int read(){if (th != null) {throw new IOException(msg,th)}{throw new IOException(msg)}}},-1,0))}private long checkQueryTimeout(){long timeLeft = timeoutAt - System.currentTimeMillis()if (timeLeft <= 0) {String msg = StringUtils.format(\"Query(%s( url(%s( timed out.\",query.getId(),url)setupResponseReadFailure(msg,null)throw new RE(msg)}{return timeLeft}}private void checkTotalBytesLimit(long bytes){if (maxScatterGatherBytes < Long.MAX_VALUE && totalBytesGathered.addAndGet(bytes) > maxScatterGatherBytes) {String msg = StringUtils.format(\"Query(%s( url(%s( max scatter-gather bytes limit reached.\",query.getId(),url)setupResponseReadFailure(msg,null)throw new RE(msg)}}}@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final long maxQueuedBytes = QueryContexts.getMaxQueuedBytes(query,0)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "queue.put(new ChannelBufferInputStream(response.getContent()))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "throw new RuntimeException(e)@@@222@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "run['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "boolean isBySegment = QueryContexts.isBySegment(query)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "log.error(e,\"Queue appending interrupted\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "openConnections.getAndIncrement()@@@199@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final boolean usingBackpressure = maxQueuedBytes > 0@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "long timeLeft = timeoutAt - System.currentTimeMillis()@@@193@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Thread.currentThread().interrupt()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "InterruptedException e@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "!isBySegment@@@233@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Futures.addCallback(future,new FutureCallback<InputStream>(){@Override public void onSuccess(InputStream result){openConnections.getAndDecrement()}@Override public void onFailure(Throwable t){openConnections.getAndDecrement()if (future.isCancelled()) {try {StatusResponseHolder res = httpClient.go(new Request(HttpMethod.DELETE,new URL(cancelUrl)).setContent(objectMapper.writeValueAsBytes(query)).setHeader(HttpHeaders.Names.CONTENT_TYPE,isSmile? SmileMediaTypes.APPLICATION_JACKSON_SMILE: MediaType.APPLICATION_JSON),StatusResponseHandler.getInstance(),Duration.standardSeconds(1)).get(1,TimeUnit.SECONDS)if (res.getStatus().getCode() >= 500) {throw new RE(\"Error cancelling query(%s(: queriable node returned status(%d( (%s(.\",res.getStatus().getCode(),res.getStatus().getReasonPhrase())}}catch (IOException|ExecutionException|InterruptedException|TimeoutException e) }}})@@@200@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "log.debug(\"Querying queryId(%s( url(%s(\",query.getId(),url)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final String url = StringUtils.format(\"%s://%s/druid/v2/\",scheme,host)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->22 [style = dotted, label="true"];
5->12 [style = solid, label="isBySegment"];
12->25 [style = bold, label=""];
35->33 [style = bold, label=""];
16->24 [style = bold, label=""];
36->37 [style = bold, label=""];
16->11 [style = solid, label="query"];
10->23 [style = bold, label=""];
8->4 [style = bold, label=""];
19->30 [style = bold, label=""];
16->27 [style = solid, label="query"];
19->30 [style = solid, label="timeLeft"];
4->2 [style = solid, label="responseHandler"];
2->11 [style = bold, label=""];
1->28 [style = bold, label=""];
11->0 [style = bold, label=""];
9->16 [style = bold, label=""];
12->21 [style = solid, label="queryResultType"];
32->31 [style = dotted, label="true"];
30->2 [style = bold, label=""];
23->8 [style = solid, label="maxQueuedBytes"];
16->5 [style = solid, label="query"];
38->39 [style = bold, label=""];
21->28 [style = solid, label="retVal"];
17->20 [style = solid, label="url"];
25->17 [style = bold, label=""];
3->13 [style = bold, label=""];
2->11 [style = solid, label="future"];
26->1 [style = dotted, label="true"];
38->41 [style = dotted, label="true"];
7->14 [style = bold, label=""];
6->27 [style = bold, label=""];
39->36 [style = bold, label=""];
40->34 [style = dotted, label="true"];
1->28 [style = solid, label="retVal"];
30->20 [style = bold, label=""];
16->1 [style = solid, label="query"];
4->19 [style = bold, label=""];
14->4 [style = solid, label="requestStartTimeNs"];
23->4 [style = solid, label="maxQueuedBytes"];
6->4 [style = solid, label="timeoutAt"];
16->4 [style = solid, label="query"];
40->33 [style = dotted, label="true"];
21->26 [style = bold, label=""];
21->1 [style = solid, label="retVal"];
40->35 [style = dotted, label="true"];
23->8 [style = bold, label=""];
27->10 [style = bold, label=""];
26->1 [style = bold, label=""];
40->34 [style = bold, label=""];
16->24 [style = solid, label="query"];
2->21 [style = solid, label="future"];
14->6 [style = bold, label=""];
29->7 [style = bold, label=""];
26->28 [style = bold, label=""];
32->16 [style = bold, label=""];
18->21 [style = bold, label=""];
32->22 [style = dotted, label="true"];
5->12 [style = bold, label=""];
16->23 [style = solid, label="query"];
9->15 [style = dotted, label="true"];
17->21 [style = solid, label="url"];
16->21 [style = solid, label="query"];
6->19 [style = solid, label="timeoutAt"];
17->4 [style = solid, label="url"];
19->2 [style = solid, label="timeLeft"];
20->2 [style = bold, label=""];
27->4 [style = solid, label="maxScatterGatherBytes"];
24->5 [style = bold, label=""];
2->18 [style = solid, label="future"];
34->35 [style = bold, label=""];
38->42 [style = dotted, label="true"];
33->36 [style = bold, label=""];
8->4 [style = solid, label="usingBackpressure"];
17->29 [style = bold, label=""];
0->18 [style = bold, label=""];
3->13 [style = dotted, label="true"];
30->20 [style = dotted, label="true"];
17->7 [style = solid, label="url"];
13->21 [style = bold, label=""];
}
