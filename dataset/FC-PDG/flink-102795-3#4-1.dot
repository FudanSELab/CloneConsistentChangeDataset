digraph {
14 [style = filled, label = "testNoEventTimeGarbageCollectionTimerForLongMax['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertEquals(1,testHarness.numProcessingTimeTimers())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testHarness.setProcessingTime(Long.MAX_VALUE - 10)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Arrays.asList(new TimeWindow(0,Long.MAX_VALUE - 10)))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(0,testHarness.numProcessingTimeTimers())@@@20@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Trigger<Integer,TimeWindow> mockTrigger = mockTrigger()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(0,testHarness.numKeyedStateEntries())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testHarness.open()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "WindowAssigner<Integer,TimeWindow> mockAssigner = mockTimeWindowAssigner()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(0,testHarness.numEventTimeTimers())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Integer,Void> testHarness = createWindowOperator(mockAssigner,mockTrigger,20L,mockWindowFunction)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "testHarness.processElement(new StreamRecord<>(0,0L))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(0,testHarness.numEventTimeTimers())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testProcessingTimeGarbageCollectionTimerIsAlwaysWindowMaxTimestamp['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "verify(mockTrigger,never()).clear(anyTimeWindow(),anyTriggerContext())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "when(mockAssigner.isEventTime()).thenReturn(false)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testNoEventTimeGarbageCollectionTimerForLongMax['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Integer,Void> testHarness = createWindowOperator(mockAssigner,mockTrigger,20L,intListDescriptor,mockWindowFunction)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "InternalWindowFunction<Iterable<Integer>,Void,Integer,TimeWindow> mockWindowFunction = mockWindowFunction()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "verify(mockTrigger,times(1)).clear(anyTimeWindow(),anyTriggerContext())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(0,testHarness.getOutput().size())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(1,testHarness.numKeyedStateEntries())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->15 [style = bold, label=""];
11->13 [style = solid, label="mockTrigger"];
1->4 [style = bold, label=""];
3->1 [style = bold, label=""];
2->6 [style = bold, label=""];
0->12 [style = bold, label=""];
8->3 [style = bold, label=""];
18->12 [style = bold, label=""];
7->0 [style = bold, label=""];
10->2 [style = solid, label="mockWindowFunction"];
5->17 [style = bold, label=""];
15->18 [style = bold, label=""];
4->7 [style = bold, label=""];
5->13 [style = solid, label="mockAssigner"];
19->16 [style = bold, label=""];
21->5 [style = bold, label=""];
11->2 [style = solid, label="mockTrigger"];
10->13 [style = bold, label=""];
11->10 [style = bold, label=""];
2->13 [style = dashed, label="0"];
10->13 [style = solid, label="mockWindowFunction"];
6->8 [style = bold, label=""];
9->5 [style = bold, label=""];
0->20 [style = bold, label=""];
10->2 [style = bold, label=""];
5->11 [style = bold, label=""];
13->6 [style = bold, label=""];
20->19 [style = bold, label=""];
5->2 [style = solid, label="mockAssigner"];
14->5 [style = bold, label=""];
17->11 [style = bold, label=""];
}
