digraph {
3 [style = filled, label = "return cosineSimilarity(d1,d2)@@@21@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "!(first instanceof List)@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "double indexOfMaxValue = -1@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "null == second@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "double(( convolution = MathArrays.convolve(firstArray,secondArray)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) double(( secondArray = StreamSupport.stream(Spliterators.spliteratorUnknownSize(((LinkedList)((List)second).stream().collect(Collectors.toCollection(null))).descendingIterator(),Spliterator.ORDERED),false).mapToDouble(null).toArray()@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "!(second instanceof List)@@@12@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) double(( firstArray = ((List)first).stream().mapToDouble(null).toArray()@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "double(( d1 = ((List<?>)first).stream().mapToDouble(null).toArray()@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Object first@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory),first.getClass().getSimpleName()))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "doWork['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "maxValue = abs@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "return (indexOfMaxValue + 1) - secondArray.length@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "double maxValue = -Double.MAX_VALUE@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "double(( d2 = ((List<?>)second).stream().mapToDouble(null).toArray()@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "indexOfMaxValue = idx@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "idx < convolution.length@@@25@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "doWork['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "double abs = Math.abs(convolution(idx()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "null == first@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Object second@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory),first.getClass().getSimpleName()))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Object first@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "return cosineSimilarity(d1,d2)@@@17@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "int idx = 0@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "abs > maxValue@@@28@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "doWork['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Object second@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "++idx@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9->3 [style = solid, label="d1"];
4->9 [style = bold, label=""];
6->3 [style = bold, label=""];
8->10 [style = bold, label=""];
0->12 [style = dotted, label="true"];
10->18 [style = bold, label=""];
16->15 [style = bold, label=""];
30->24 [style = bold, label=""];
23->25 [style = bold, label=""];
31->23 [style = bold, label=""];
9->22 [style = solid, label="firstArray"];
23->30 [style = bold, label=""];
27->26 [style = solid, label="indexOfMaxValue"];
6->22 [style = bold, label=""];
19->24 [style = solid, label="idx"];
0->12 [style = bold, label=""];
27->30 [style = bold, label=""];
24->31 [style = dotted, label="true"];
12->11 [style = bold, label=""];
22->21 [style = bold, label=""];
17->14 [style = dotted, label="true"];
0->11 [style = bold, label=""];
24->30 [style = dotted, label="true"];
4->18 [style = bold, label=""];
13->7 [style = dotted, label="true"];
31->25 [style = solid, label="abs"];
21->23 [style = solid, label="maxValue"];
9->6 [style = bold, label=""];
19->24 [style = bold, label=""];
7->2 [style = solid, label="first"];
28->29 [style = dotted, label="true"];
14->2 [style = solid, label="first"];
25->27 [style = bold, label=""];
13->1 [style = dotted, label="true"];
24->26 [style = bold, label=""];
28->2 [style = bold, label=""];
2->0 [style = bold, label=""];
25->23 [style = solid, label="maxValue"];
21->20 [style = bold, label=""];
22->31 [style = solid, label="convolution"];
19->31 [style = solid, label="idx"];
31->23 [style = solid, label="abs"];
18->15 [style = solid, label="d1"];
24->23 [style = dotted, label="true"];
5->0 [style = bold, label=""];
17->2 [style = bold, label=""];
11->10 [style = bold, label=""];
6->22 [style = solid, label="secondArray"];
20->26 [style = solid, label="indexOfMaxValue"];
24->31 [style = bold, label=""];
28->7 [style = dotted, label="true"];
23->27 [style = dotted, label="true"];
13->2 [style = bold, label=""];
10->4 [style = bold, label=""];
11->8 [style = bold, label=""];
11->8 [style = dotted, label="true"];
17->7 [style = dotted, label="true"];
10->9 [style = bold, label=""];
1->0 [style = solid, label="second"];
10->4 [style = dotted, label="true"];
2->5 [style = dotted, label="true"];
20->19 [style = bold, label=""];
29->2 [style = solid, label="first"];
19->27 [style = solid, label="idx"];
23->25 [style = dotted, label="true"];
16->15 [style = solid, label="d2"];
7->0 [style = solid, label="second"];
2->5 [style = bold, label=""];
6->3 [style = solid, label="d2"];
18->16 [style = bold, label=""];
}
