digraph {
12 [style = filled, label = "kafkaProducer.initTransactions()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future2.get().getStatusCode())@@@37@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,6L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@38@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "task1.getRunner().getStatus() != Status.PAUSED@@@18@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors()@@@41@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
48 [style = filled, label = "final KafkaIndexTask task1 = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L)),consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "kafkaProducer.commitTransaction()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "task1.stopGracefully(toolboxFactory.build(task1).getConfig())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "SegmentDescriptor desc5 = sd(\"2010/P1D\",0)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "SegmentDescriptor desc1 = sd(\"2008/P1D\",0)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final KafkaIndexTask task1 = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,2L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,6L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "unlockAppenderatorBasePersistDirForTask(task1)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "Assert.assertEquals(checkpoint.getPartitionSequenceNumberMap(),currentOffsets)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "Assert.assertEquals(5,task1.getRunner().getRowIngestionMeters().getProcessed())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final ListenableFuture<TaskStatus> future2 = runTask(task2)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "kafkaProducer.initTransactions()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(sdd(\"2010/P1D\",0,ImmutableList.of(\"c\")),sdd(\"2011/P1D\",0,ImmutableList.of(\"d\",\"e\"))),publishedDescriptors())@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "kafkaProducer.commitTransaction()@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testRestore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertEquals(4,task2.getRunner().getRowIngestionMeters().getProcessed())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getUnparseable())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "unlockAppenderatorBasePersistDirForTask(task1)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "kafkaProducer.send(record).get()@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@52@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future1.get().getStatusCode())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "kafkaProducer.beginTransaction()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task1.getRunner().getCurrentOffsets())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "maxRowsPerSegment = 2@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final ListenableFuture<TaskStatus> future2 = runTask(task2)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(1,task2.getRunner().getRowIngestionMeters().getProcessed())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final KafkaIndexTask task2 = createTask(task1.getId(),new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L)),consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future1.get().getStatusCode())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "SegmentDescriptor desc3 = sd(\"2009/P1D\",0)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getUnparseable())@@@39@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getThrownAway())@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "SegmentDescriptor desc6 = sd(\"2011/P1D\",0)@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "kafkaProducer.initTransactions()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "countEvents(task1) != 2@@@13@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "records = generateSinglePartitionRecords(topic)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final ListenableFuture<TaskStatus> future1 = runTask(task1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "testRestoreAfterPersistingSequences['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "SegmentDescriptor desc2 = sd(\"2011/P1D\",0)@@@38@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "testRestore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "SegmentDescriptor desc7 = sd(\"2012/P1D\",0)@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "SegmentDescriptor desc2 = sd(\"2008/P1D\",1)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "kafkaProducer.beginTransaction()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final ListenableFuture<TaskStatus> future1 = runTask(task1)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "task1.stopGracefully(toolboxFactory.build(task1).getConfig())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Thread.sleep(10)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "kafkaProducer.beginTransaction()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getThrownAway())@@@43@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final KafkaIndexTask task2 = createTask(task1.getId(),new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,2L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,6L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "kafkaProducer.initTransactions()@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "SegmentDescriptor desc4 = sd(\"2009/P1D\",1)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "task1.getRunner().setEndOffsets(ImmutableMap.of(0,5L),false)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getUnparseable())@@@42@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "kafkaProducer.send(record).get()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> checkpoint = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,5L),ImmutableSet.of(0))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getThrownAway())@@@40@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58->28 [style = bold, label=""];
50->55 [style = solid, label="currentOffsets"];
25->33 [style = bold, label=""];
15->25 [style = bold, label=""];
38->41 [style = dotted, label="true"];
21->15 [style = bold, label=""];
57->8 [style = bold, label=""];
44->45 [style = solid, label="desc5"];
39->6 [style = bold, label=""];
51->53 [style = bold, label=""];
38->41 [style = bold, label=""];
5->28 [style = bold, label=""];
48->39 [style = bold, label=""];
9->37 [style = bold, label=""];
17->41 [style = dashed, label="0"];
38->50 [style = bold, label=""];
28->0 [style = bold, label=""];
48->54 [style = solid, label="task1"];
55->57 [style = bold, label=""];
20->38 [style = dashed, label="0"];
50->55 [style = bold, label=""];
53->45 [style = solid, label="desc2"];
0->40 [style = bold, label=""];
32->11 [style = bold, label=""];
4->16 [style = bold, label=""];
21->13 [style = bold, label=""];
17->20 [style = bold, label=""];
16->3 [style = bold, label=""];
23->30 [style = bold, label=""];
47->48 [style = bold, label=""];
24->38 [style = bold, label=""];
13->40 [style = dashed, label="0"];
25->7 [style = bold, label=""];
52->42 [style = bold, label=""];
7->5 [style = bold, label=""];
0->23 [style = bold, label=""];
1->51 [style = bold, label=""];
11->2 [style = solid, label="task1"];
45->56 [style = bold, label=""];
41->38 [style = bold, label=""];
7->51 [style = dashed, label="0"];
13->15 [style = bold, label=""];
59->43 [style = bold, label=""];
19->22 [style = bold, label=""];
3->29 [style = bold, label=""];
22->6 [style = bold, label=""];
60->44 [style = bold, label=""];
44->61 [style = bold, label=""];
10->18 [style = bold, label=""];
49->45 [style = solid, label="desc3"];
11->24 [style = solid, label="task1"];
27->14 [style = bold, label=""];
20->17 [style = dotted, label="true"];
12->20 [style = bold, label=""];
42->47 [style = bold, label=""];
36->45 [style = solid, label="desc7"];
26->8 [style = bold, label=""];
29->21 [style = bold, label=""];
61->36 [style = bold, label=""];
27->37 [style = dashed, label="0"];
60->45 [style = solid, label="desc4"];
12->46 [style = bold, label=""];
11->10 [style = solid, label="task1"];
24->31 [style = bold, label=""];
51->45 [style = solid, label="desc1"];
31->10 [style = bold, label=""];
27->14 [style = solid, label="task2"];
49->60 [style = bold, label=""];
42->48 [style = solid, label="consumerProps"];
3->21 [style = bold, label=""];
40->30 [style = bold, label=""];
8->54 [style = bold, label=""];
61->45 [style = solid, label="desc6"];
6->12 [style = bold, label=""];
33->35 [style = bold, label=""];
2->19 [style = bold, label=""];
20->17 [style = bold, label=""];
7->58 [style = bold, label=""];
30->1 [style = bold, label=""];
15->7 [style = bold, label=""];
5->28 [style = solid, label="desc2"];
48->6 [style = solid, label="task1"];
3->58 [style = dashed, label="0"];
9->4 [style = bold, label=""];
11->20 [style = solid, label="task1"];
43->52 [style = bold, label=""];
42->37 [style = solid, label="consumerProps"];
11->2 [style = bold, label=""];
34->11 [style = bold, label=""];
37->4 [style = bold, label=""];
5->53 [style = dashed, label="0"];
14->26 [style = bold, label=""];
53->49 [style = bold, label=""];
17->24 [style = bold, label=""];
23->44 [style = dashed, label="0"];
18->27 [style = bold, label=""];
54->9 [style = bold, label=""];
8->9 [style = bold, label=""];
7->33 [style = dashed, label="0"];
36->45 [style = bold, label=""];
7->28 [style = solid, label="desc1"];
20->24 [style = bold, label=""];
46->17 [style = bold, label=""];
37->4 [style = solid, label="task2"];
}
