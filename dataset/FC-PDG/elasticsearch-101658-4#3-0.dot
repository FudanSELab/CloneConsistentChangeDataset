digraph {
2 [style = filled, label = "InboundChannelBuffer.Page(( pages = channelBuffer.sliceAndRetainPagesTo(PAGE_SIZE * 2)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "i < 1@@@24@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertFalse(closedRef.get())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(closedRef.get())@@@34@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int i = 0@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testCloseRetainedPages['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(closedRef.get())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testCloseRetainedPages['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "expectThrows(,null)@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertFalse(closedRef.get())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "++i@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "channelBuffer.close()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "pages(0(.close()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Supplier<InboundChannelBuffer.Page> supplier = null@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "pages(1(.close()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ConcurrentLinkedQueue<AtomicBoolean> queue = new ConcurrentLinkedQueue<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "channelBuffer.ensureCapacity(PAGE_SIZE * 4)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Supplier<Page> supplier = null@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertFalse(closedRef.get())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(4,queue.size())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testClose['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "InboundChannelBuffer channelBuffer = new InboundChannelBuffer(supplier)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Page(( pages = channelBuffer.sliceAndRetainPagesTo(PAGE_SIZE * 2)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11->16 [style = bold, label=""];
4->3 [style = bold, label=""];
1->4 [style = bold, label=""];
15->13 [style = bold, label=""];
7->11 [style = bold, label=""];
20->9 [style = bold, label=""];
11->1 [style = bold, label=""];
2->6 [style = bold, label=""];
22->9 [style = bold, label=""];
9->17 [style = bold, label=""];
1->4 [style = solid, label="i"];
12->9 [style = bold, label=""];
8->7 [style = bold, label=""];
3->5 [style = bold, label=""];
0->14 [style = bold, label=""];
4->3 [style = dotted, label="true"];
5->0 [style = bold, label=""];
17->15 [style = solid, label="supplier"];
18->6 [style = bold, label=""];
7->2 [style = bold, label=""];
16->21 [style = bold, label=""];
6->10 [style = bold, label=""];
5->4 [style = bold, label=""];
17->15 [style = bold, label=""];
2->18 [style = dashed, label="0"];
16->5 [style = bold, label=""];
9->19 [style = bold, label=""];
7->18 [style = bold, label=""];
5->21 [style = dashed, label="0"];
19->15 [style = solid, label="supplier"];
13->8 [style = bold, label=""];
19->15 [style = bold, label=""];
4->16 [style = dotted, label="false"];
4->16 [style = bold, label=""];
17->19 [style = dashed, label="0"];
10->11 [style = bold, label=""];
}
