digraph {
1 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(newToken)))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "List<UUID> hostIds = new ArrayList<UUID>()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(tmd.getMovingEndpoints().isEmpty())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(2))))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "newToken = positionToken(8)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Token newToken = positionToken(7)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(newToken)))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(keyTokens.get(2),tmd.getToken(hosts.get(2)))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "ArrayList<Token> endpointTokens = new ArrayList<Token>()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(newToken)))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.left(Collections.singleton(keyTokens.get(2)),Gossiper.computeExpireTime()))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.moving(newToken))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "IPartitioner partitioner = new RandomPartitioner()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(keyTokens.get(4),tmd.getToken(hosts.get(2)))@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "List<InetAddress> hosts = new ArrayList<InetAddress>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(keyTokens.get(2))))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.moving(newToken))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(endpointTokens.get(2),tmd.getToken(hosts.get(2)))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ArrayList<Token> keyTokens = new ArrayList<Token>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(tmd.getLeavingEndpoints().isEmpty())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(4))))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "TokenMetadata tmd = ss.getTokenMetadata()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().isEmpty())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testStateJumpToNormal['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(newToken)))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testStateJumpToNormal['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "testStateJumpToNormal['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertTrue(tmd.getMovingEndpoints().isEmpty())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "StorageService ss = StorageService.instance@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "tmd.clearUnsafe()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertTrue(tmd.getLeavingEndpoints().isEmpty())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(Collections.singleton(keyTokens.get(2))))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(newToken,tmd.getToken(hosts.get(2)))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Util.createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,hostIds,6)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(Collections.singleton(endpointTokens.get(2))))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertTrue(tmd.isMoving(hosts.get(2)))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertTrue(tmd.isLeaving(hosts.get(2)))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(newToken,tmd.getToken(hosts.get(2)))@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(keyTokens.get(4))))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23->2 [style = solid, label="hostIds"];
28->13 [style = bold, label=""];
23->2 [style = bold, label=""];
3->36 [style = dashed, label="0"];
22->38 [style = bold, label=""];
0->20 [style = solid, label="newToken"];
26->18 [style = bold, label=""];
7->29 [style = dashed, label="0"];
36->37 [style = bold, label=""];
9->11 [style = bold, label=""];
15->9 [style = bold, label=""];
8->5 [style = bold, label=""];
21->22 [style = bold, label=""];
24->18 [style = bold, label=""];
19->5 [style = solid, label="newToken"];
0->25 [style = solid, label="newToken"];
11->17 [style = solid, label="partitioner"];
19->1 [style = solid, label="newToken"];
1->22 [style = dashed, label="0"];
25->20 [style = bold, label=""];
4->2 [style = solid, label="keyTokens"];
25->37 [style = dashed, label="0"];
39->27 [style = bold, label=""];
34->36 [style = bold, label=""];
17->14 [style = bold, label=""];
0->3 [style = bold, label=""];
11->17 [style = bold, label=""];
12->23 [style = bold, label=""];
37->32 [style = bold, label=""];
1->6 [style = bold, label=""];
6->8 [style = bold, label=""];
33->18 [style = bold, label=""];
19->6 [style = solid, label="newToken"];
0->7 [style = solid, label="newToken"];
20->32 [style = dashed, label="0"];
27->22 [style = bold, label=""];
12->2 [style = solid, label="hosts"];
14->2 [style = solid, label="endpointTokens"];
38->30 [style = bold, label=""];
19->16 [style = bold, label=""];
8->30 [style = dashed, label="0"];
2->19 [style = bold, label=""];
5->0 [style = bold, label=""];
16->21 [style = bold, label=""];
20->13 [style = bold, label=""];
10->7 [style = bold, label=""];
15->11 [style = bold, label=""];
5->35 [style = dashed, label="0"];
32->28 [style = bold, label=""];
3->25 [style = bold, label=""];
13->29 [style = bold, label=""];
4->12 [style = bold, label=""];
2->31 [style = bold, label=""];
11->2 [style = solid, label="partitioner"];
30->35 [style = bold, label=""];
14->4 [style = bold, label=""];
31->39 [style = bold, label=""];
13->10 [style = bold, label=""];
6->38 [style = dashed, label="0"];
18->2 [style = solid, label="ss"];
22->1 [style = bold, label=""];
35->34 [style = bold, label=""];
10->13 [style = dashed, label="0"];
0->3 [style = solid, label="newToken"];
19->16 [style = solid, label="newToken"];
18->15 [style = bold, label=""];
}
