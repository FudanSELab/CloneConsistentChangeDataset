digraph {
3 [style = filled, label = "TableReference pti = TableReference.parse(path)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertNull(pti.timestamp())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "noMarkings['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assertions.assertThat(pti.timestamp()).isNull()@@@7@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "pti = TableReference.parse(path + \"@\" + branch)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertNull(pti.timestamp())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(path,pti.tableIdentifier().name())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assertions.assertThat(path).isEqualTo(pti.tableIdentifier().name())@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "TableReference pti = TableReference.parse(path)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertNull(pti.reference())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "String path = \"foo\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String branch = \"bar \"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(path,pti.tableIdentifier().name())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assertions.assertThat(pti.reference()).isNull()@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "noMarkings['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "String path = \"foo \"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(branch,pti.reference())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "whitespace['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5->1 [style = solid, label="path"];
14->16 [style = bold, label=""];
3->2 [style = bold, label=""];
13->3 [style = solid, label="path"];
11->10 [style = solid, label="branch"];
12->14 [style = bold, label=""];
5->1 [style = bold, label=""];
4->5 [style = bold, label=""];
7->6 [style = bold, label=""];
13->12 [style = solid, label="path"];
6->8 [style = bold, label=""];
5->11 [style = dashed, label="0"];
3->7 [style = dashed, label="0"];
13->2 [style = solid, label="path"];
10->12 [style = bold, label=""];
2->6 [style = dashed, label="0"];
1->3 [style = bold, label=""];
15->11 [style = bold, label=""];
11->13 [style = bold, label=""];
0->17 [style = bold, label=""];
13->10 [style = solid, label="path"];
13->3 [style = bold, label=""];
2->0 [style = bold, label=""];
1->7 [style = bold, label=""];
9->5 [style = bold, label=""];
5->3 [style = solid, label="path"];
0->8 [style = dashed, label="0"];
17->10 [style = bold, label=""];
11->14 [style = solid, label="branch"];
}
