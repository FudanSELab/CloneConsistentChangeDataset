digraph {
28 [style = filled, label = "System.out.println(\"Test Error: \" + testErr)@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
40 [style = filled, label = "Double testErr = 1.0 * predictionAndLabel.filter(new Function<Tuple2<Double,Double>,Boolean>(){@Override public Boolean call(Tuple2<Double,Double> pl){return !pl._1().equals(pl._2())}}).count() / testData.count()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "jsc.stop()@@@35@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "double testErr = predictionAndLabel.filter(null).count() / (double)testData.count()@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "GradientBoostedTreesModel sameModel = GradientBoostedTreesModel.load(jsc.sc(),\"target/tmp/myGradientBoostingClassificationModel\")@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "model.save(jsc.sc(),\"target/tmp/myGradientBoostingClassificationModel\")@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "System.out.println(\"Test Error: \" + testErr)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "JavaRDD<LabeledPoint> testData = splits(1(@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "main['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "final DecisionTreeModel model = DecisionTree.trainClassifier(trainingData,numClasses,categoricalFeaturesInfo,impurity,maxDepth,maxBins)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Integer maxBins = 32@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "JavaSparkContext jsc = new JavaSparkContext(sparkConf)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "BoostingStrategy boostingStrategy = BoostingStrategy.defaultParams(\"Classification\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "main['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Integer numClasses = 2@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "model.save(jsc.sc(),\"target/tmp/myDecisionTreeClassificationModel\")@@@32@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "boostingStrategy.getTreeStrategy().setMaxDepth(5)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "JavaPairRDD<Double,Double> predictionAndLabel = testData.mapToPair(new PairFunction<LabeledPoint,Double,Double>(){@Override public Tuple2<Double,Double> call(LabeledPoint p){return new Tuple2<>(model.predict(p.features()),p.label())}})@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "JavaPairRDD<Double,Double> predictionAndLabel = testData.mapToPair(new PairFunction<LabeledPoint,Double,Double>(){@Override public Tuple2<Double,Double> call(LabeledPoint p){return new Tuple2<>(model.predict(p.features()),p.label())}})@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "JavaRDD<LabeledPoint> trainingData = splits(0(@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "SparkConf sparkConf = new SparkConf().setAppName(\"JavaDecisionTreeClassificationExample\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "String impurity = \"gini\"@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Map<Integer,Integer> categoricalFeaturesInfo = new HashMap<>()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "GradientBoostedTreesModel sameModel = GradientBoostedTreesModel.load(jsc.sc(),\"target/tmp/myGradientBoostingClassificationModel\")@@@34@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "GradientBoostedTreesModel model = GradientBoostedTrees.train(trainingData,boostingStrategy)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "JavaPairRDD<Double,Double> predictionAndLabel = testData.mapToPair(null)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "boostingStrategy.setNumIterations(3)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "jsc.stop()@@@25@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Double testErr = 1.0 * predictionAndLabel.filter(new Function<Tuple2<Double,Double>,Boolean>(){@Override public Boolean call(Tuple2<Double,Double> pl){return !pl._1().equals(pl._2())}}).count() / testData.count()@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "DecisionTreeModel sameModel = DecisionTreeModel.load(jsc.sc(),\"target/tmp/myDecisionTreeClassificationModel\")@@@33@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "boostingStrategy.getTreeStrategy().setNumClasses(2)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "String(( args@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "System.out.println(\"Learned classification tree model:\" + model.toDebugString())@@@31@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "JavaRDD<LabeledPoint> data = MLUtils.loadLibSVMFile(jsc.sc(),datapath).toJavaRDD()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "SparkConf sparkConf = new SparkConf().setAppName(\"JavaGradientBoostedTreesClassificationExample\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "boostingStrategy.treeStrategy().setCategoricalFeaturesInfo(categoricalFeaturesInfo)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "JavaRDD<LabeledPoint>(( splits = data.randomSplit(new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a7b0ff)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "main['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "System.out.println(\"Learned classification GBT model:\" + model.toDebugString())@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "Integer maxDepth = 5@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "String datapath = \"data/mllib/sample_libsvm_data.txt\"@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final GradientBoostedTreesModel model = GradientBoostedTrees.train(trainingData,boostingStrategy)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13->5 [style = dashed, label="0"];
23->28 [style = solid, label="testErr"];
16->3 [style = bold, label=""];
7->11 [style = solid, label="trainingData"];
21->10 [style = bold, label=""];
12->5 [style = solid, label="testErr"];
4->14 [style = bold, label=""];
22->15 [style = bold, label=""];
1->8 [style = bold, label=""];
12->5 [style = bold, label=""];
29->30 [style = bold, label=""];
37->6 [style = solid, label="sparkConf"];
35->34 [style = solid, label="numClasses"];
18->30 [style = dashed, label="0"];
7->34 [style = solid, label="trainingData"];
9->4 [style = bold, label=""];
30->23 [style = bold, label=""];
35->39 [style = bold, label=""];
2->34 [style = bold, label=""];
18->12 [style = bold, label=""];
11->29 [style = dashed, label="0"];
0->11 [style = bold, label=""];
0->29 [style = bold, label=""];
21->17 [style = dotted, label="true"];
37->6 [style = bold, label=""];
26->24 [style = bold, label=""];
8->1 [style = dashed, label="0"];
10->6 [style = bold, label=""];
32->33 [style = bold, label=""];
7->29 [style = solid, label="trainingData"];
11->18 [style = bold, label=""];
13->1 [style = bold, label=""];
25->31 [style = bold, label=""];
1->13 [style = dashed, label="0"];
23->28 [style = bold, label=""];
19->22 [style = solid, label="splits"];
7->22 [style = bold, label=""];
2->34 [style = solid, label="maxBins"];
40->41 [style = solid, label="testErr"];
2->0 [style = bold, label=""];
31->26 [style = bold, label=""];
8->20 [style = bold, label=""];
15->29 [style = solid, label="boostingStrategy"];
3->19 [style = bold, label=""];
33->34 [style = solid, label="maxDepth"];
36->17 [style = dotted, label="true"];
6->16 [style = bold, label=""];
2->0 [style = solid, label="categoricalFeaturesInfo"];
15->9 [style = bold, label=""];
5->13 [style = bold, label=""];
27->10 [style = bold, label=""];
39->32 [style = bold, label=""];
40->41 [style = bold, label=""];
15->11 [style = solid, label="boostingStrategy"];
28->25 [style = bold, label=""];
10->37 [style = dashed, label="0"];
10->6 [style = solid, label="sparkConf"];
14->2 [style = bold, label=""];
36->37 [style = bold, label=""];
19->7 [style = solid, label="splits"];
32->34 [style = solid, label="impurity"];
34->38 [style = bold, label=""];
27->17 [style = dotted, label="true"];
22->35 [style = bold, label=""];
38->40 [style = bold, label=""];
19->7 [style = bold, label=""];
33->2 [style = bold, label=""];
39->34 [style = solid, label="categoricalFeaturesInfo"];
41->5 [style = bold, label=""];
}
