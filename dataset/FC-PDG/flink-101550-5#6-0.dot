digraph {
18 [style = filled, label = "Assert.assertEquals(DriverStrategy.FLAT_MAP,map.getDriverStrategy())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "checkStandardStrategies['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "return true@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(LocalStrategy.COMBININGSORT,reducer.getInput().getLocalStrategy())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "SingleInputPlanNode combiner@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "combiner != null@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(set0,join.getInput1().getLocalStrategyKeys())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Assert.assertEquals(set01,reducer.getInput().getLocalStrategyKeys())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "return false@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "SingleInputPlanNode map@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "DualInputPlanNode join@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "SingleInputPlanNode reducer@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(ShipStrategyType.FORWARD,sink.getInput().getShipStrategy())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(set01,reducer.getKeys(0))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(set0,join.getKeysForInput1())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(DriverStrategy.NONE,sink.getDriverStrategy())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(DriverStrategy.SORTED_GROUP_REDUCE,reducer.getDriverStrategy())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "checkBroadcastMergeJoin['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertTrue(Arrays.equals(reducer.getInput().getLocalStrategySortOrder(),reducer.getSortOrders(0)))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertEquals(LocalStrategy.SORT,join.getInput1().getLocalStrategy())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "checkStandardStrategies['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "Assert.assertTrue(Arrays.equals(join.getInput1().getLocalStrategySortOrder(),join.getInput2().getLocalStrategySortOrder()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(ShipStrategyType.FORWARD,map.getInput().getShipStrategy())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "SinkPlanNode sink@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(LocalStrategy.NONE,combiner.getInput().getLocalStrategy())@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "DualInputPlanNode join@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "DualInputPlanNode join@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(DriverStrategy.COLLECTOR_MAP,map.getDriverStrategy())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(set0,join.getKeysForInput2())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(DriverStrategy.SORTED_GROUP_COMBINE,combiner.getDriverStrategy())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "SingleInputPlanNode reducer@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "DriverStrategy.INNER_MERGE == join.getDriverStrategy()@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(LocalStrategy.SORT,join.getInput2().getLocalStrategy())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "SingleInputPlanNode combiner@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "Assert.assertEquals(set0,join.getInput2().getLocalStrategyKeys())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "SingleInputPlanNode map@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "SinkPlanNode sink@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
35->29 [style = dotted, label="true"];
31->22 [style = dotted, label="true"];
34->29 [style = bold, label=""];
19->14 [style = dotted, label="true"];
0->9 [style = bold, label=""];
27->32 [style = bold, label=""];
3->25 [style = dashed, label="0"];
29->30 [style = bold, label=""];
35->24 [style = dotted, label="true"];
19->17 [style = dotted, label="true"];
2->1 [style = bold, label=""];
5->10 [style = dotted, label="true"];
35->36 [style = dotted, label="true"];
11->0 [style = solid, label="combiner"];
17->0 [style = solid, label="combiner"];
5->6 [style = dotted, label="true"];
35->26 [style = dotted, label="true"];
9->27 [style = dashed, label="0"];
8->32 [style = dashed, label="0"];
35->21 [style = dotted, label="true"];
30->36 [style = bold, label=""];
21->24 [style = bold, label=""];
19->13 [style = dotted, label="true"];
1->0 [style = bold, label=""];
1->21 [style = dashed, label="0"];
3->12 [style = bold, label=""];
18->2 [style = bold, label=""];
19->15 [style = dotted, label="true"];
9->8 [style = bold, label=""];
35->33 [style = dotted, label="true"];
31->20 [style = dotted, label="true"];
35->30 [style = dotted, label="true"];
32->33 [style = bold, label=""];
7->3 [style = bold, label=""];
5->4 [style = dotted, label="true"];
35->25 [style = bold, label=""];
3->18 [style = bold, label=""];
0->8 [style = dotted, label="true"];
12->26 [style = dashed, label="0"];
35->23 [style = dotted, label="false"];
35->23 [style = bold, label=""];
12->2 [style = bold, label=""];
5->13 [style = dotted, label="true"];
28->21 [style = bold, label=""];
5->11 [style = dotted, label="true"];
35->27 [style = dotted, label="true"];
31->35 [style = bold, label=""];
25->26 [style = bold, label=""];
2->28 [style = dashed, label="0"];
19->16 [style = dotted, label="true"];
35->34 [style = dotted, label="true"];
5->7 [style = bold, label=""];
35->28 [style = dotted, label="true"];
12->18 [style = dashed, label="0"];
26->28 [style = bold, label=""];
33->34 [style = bold, label=""];
19->7 [style = bold, label=""];
24->27 [style = bold, label=""];
0->9 [style = dotted, label="true"];
13->22 [style = dashed, label="0"];
35->25 [style = dotted, label="true"];
35->32 [style = dotted, label="true"];
}
