digraph {
27 [style = filled, label = "when(dom.getName()).thenReturn(\"domain\")@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "testImplementURIException['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "when(res.getDomain()).thenReturn(dom)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "verify(agentmgr,times(1)).easySend(eq(NETWORK_ID),(Command)any())@@@45@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "when(dest.getDataCenter()).thenReturn(dc)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "when(nvpdao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NiciraNvpDeviceVO((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@7cc8f5))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final PhysicalNetworkVO physnet = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final DeployDestination dest = mock()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "when(offering.getTrafficType()).thenReturn(TrafficType.Guest)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "when(network.getName()).thenReturn(\"testnetwork\")@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "when(niciraHost.getDetail(\"transportzoneisotype\")).thenReturn(\"stt\")@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "final Account acc = mock()@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertTrue(designednetwork.getBroadcastDomainType() == BroadcastDomainType.Lswitch)@@@25@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "final HostVO niciraHost = mock()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "final DataCenter dc = mock()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "when(nosd.areServicesSupportedByNetworkOffering(NETWORK_ID,Service.Connectivity)).thenReturn(true)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "when(res.getAccount()).thenReturn(acc)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "when(network.getState()).thenReturn(State.Implementing)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "final CreateLogicalSwitchAnswer answer = mock()@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "when(netmodel.findPhysicalNetworkId(anyLong(),(String)any(),(TrafficType)any())).thenReturn(NETWORK_ID)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "when(physnet.getId()).thenReturn(NETWORK_ID)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "when(nosd.areServicesSupportedByNetworkOffering(NETWORK_ID,Service.Connectivity)).thenReturn(false)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "final ReservationContext res = mock()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "when(answer.getResult()).thenReturn(true)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "when(network.getPhysicalNetworkId()).thenReturn(NETWORK_ID)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final Network designednetwork = guru.design(offering,plan,network,account)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testDesign['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "mock()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "when(niciraHost.getId()).thenReturn(NETWORK_ID)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final Account account = mock()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final NiciraNvpDeviceVO device = mock()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final NetworkOffering offering = mock()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "when(agentmgr.easySend(eq(NETWORK_ID),(Command)any())).thenReturn(answer)@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertTrue(implementednetwork == null)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "final NetworkVO network = mock()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "when(netmodel.listNetworkOfferingServices(NETWORK_ID)).thenReturn(Arrays.asList(Service.Connectivity))@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "when(offering.getGuestType()).thenReturn(GuestType.Isolated)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final DeploymentPlan plan = mock()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final Network implementednetwork = guru.implement(network,offering,dest,res)@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "when(physnetdao.findById((Long)any())).thenReturn(physnet)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "when(offering.getId()).thenReturn(NETWORK_ID)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testDesign['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "when(niciraHost.getDetail(\"transportzoneuuid\")).thenReturn(\"aaaa\")@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "when(device.getId()).thenReturn(1L)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "when(hostdao.findById(anyLong())).thenReturn(niciraHost)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "when(acc.getAccountName()).thenReturn(\"accountname\")@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final Network network = mock()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(designednetwork != null)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final Domain dom = mock()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "when(physnet.getIsolationMethods()).thenReturn(Arrays.asList(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@7cc8d5))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46->37 [style = solid, label="niciraHost"];
32->43 [style = bold, label=""];
18->4 [style = solid, label="account"];
25->47 [style = bold, label=""];
20->6 [style = bold, label=""];
48->42 [style = bold, label=""];
42->31 [style = bold, label=""];
41->6 [style = bold, label=""];
0->7 [style = bold, label=""];
37->35 [style = bold, label=""];
5->1 [style = bold, label=""];
39->45 [style = solid, label="dc"];
19->8 [style = bold, label=""];
1->8 [style = bold, label=""];
6->10 [style = solid, label="physnet"];
2->40 [style = dashed, label="0"];
49->36 [style = bold, label=""];
8->29 [style = dashed, label="0"];
31->38 [style = solid, label="dom"];
27->32 [style = bold, label=""];
4->17 [style = bold, label=""];
7->11 [style = bold, label=""];
24->30 [style = bold, label=""];
38->22 [style = bold, label=""];
40->26 [style = solid, label="network"];
33->26 [style = solid, label="res"];
49->21 [style = solid, label="answer"];
39->45 [style = bold, label=""];
6->10 [style = bold, label=""];
7->11 [style = solid, label="device"];
36->21 [style = bold, label=""];
16->12 [style = bold, label=""];
26->25 [style = bold, label=""];
3->26 [style = solid, label="offering"];
12->5 [style = bold, label=""];
44->34 [style = bold, label=""];
2->4 [style = solid, label="network"];
15->0 [style = bold, label=""];
8->2 [style = bold, label=""];
2->18 [style = bold, label=""];
45->46 [style = bold, label=""];
46->37 [style = bold, label=""];
21->26 [style = bold, label=""];
1->28 [style = dashed, label="0"];
32->22 [style = solid, label="acc"];
22->49 [style = bold, label=""];
17->9 [style = bold, label=""];
8->4 [style = solid, label="plan"];
26->25 [style = solid, label="implementednetwork"];
11->13 [style = bold, label=""];
14->6 [style = bold, label=""];
34->26 [style = solid, label="dest"];
1->19 [style = bold, label=""];
35->23 [style = bold, label=""];
23->48 [style = bold, label=""];
3->4 [style = solid, label="offering"];
13->3 [style = bold, label=""];
33->38 [style = bold, label=""];
4->17 [style = solid, label="designednetwork"];
10->15 [style = bold, label=""];
34->39 [style = bold, label=""];
3->16 [style = bold, label=""];
5->28 [style = bold, label=""];
30->44 [style = bold, label=""];
40->24 [style = bold, label=""];
43->33 [style = bold, label=""];
31->27 [style = bold, label=""];
28->29 [style = bold, label=""];
18->4 [style = bold, label=""];
29->40 [style = bold, label=""];
}
