digraph {
1 [style = filled, label = "KafkaBasedLog<String,byte((> kafkaBasedLog = mock()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "readConnectorState['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(status,store.get(CONNECTOR))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "store.read(consumerRecord(0,\"status-connector-conn\",value))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Converter converter = mock()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "replayAll()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(status,store.get(TASK))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "store.read(consumerRecord(0,\"status-task-conn-0\",value))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "statusMap.put(\"state\",\"RUNNING\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "TaskStatus status = new TaskStatus(TASK,TaskStatus.State.RUNNING,WORKER_ID,0)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "KafkaStatusBackingStore store = new KafkaStatusBackingStore(new MockTime(),converter,STATUS_TOPIC,kafkaBasedLog)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Map<String,Object> statusMap = new HashMap<>()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "byte(( value = new byte((((@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "statusMap.put(\"generation\",0L)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "verifyAll()@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "readConnectorState['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "readTaskState['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "statusMap.put(\"worker_id\",WORKER_ID)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ConnectorStatus status = new ConnectorStatus(CONNECTOR,ConnectorStatus.State.RUNNING,WORKER_ID,0)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expect(converter.toConnectData(STATUS_TOPIC,value)).andReturn(new SchemaAndValue(null,statusMap))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->10 [style = bold, label=""];
19->18 [style = bold, label=""];
7->11 [style = bold, label=""];
4->19 [style = solid, label="value"];
1->0 [style = bold, label=""];
0->7 [style = solid, label="converter"];
16->2 [style = bold, label=""];
12->9 [style = bold, label=""];
3->4 [style = bold, label=""];
11->5 [style = solid, label="statusMap"];
0->7 [style = bold, label=""];
6->2 [style = bold, label=""];
9->19 [style = dashed, label="0"];
6->16 [style = dashed, label="0"];
14->6 [style = solid, label="status"];
10->8 [style = bold, label=""];
8->5 [style = bold, label=""];
5->12 [style = bold, label=""];
11->13 [style = bold, label=""];
15->4 [style = bold, label=""];
9->14 [style = bold, label=""];
4->9 [style = solid, label="value"];
4->1 [style = bold, label=""];
14->18 [style = dashed, label="0"];
12->19 [style = bold, label=""];
4->11 [style = bold, label=""];
18->16 [style = solid, label="status"];
14->6 [style = bold, label=""];
17->4 [style = bold, label=""];
1->7 [style = solid, label="kafkaBasedLog"];
18->16 [style = bold, label=""];
}
