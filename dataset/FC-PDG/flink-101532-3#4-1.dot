digraph {
4 [style = filled, label = "Collections.sort(expectedResult)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "env.execute(\"Join Test\")@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(expectedResult,testResults)@@@38@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "List<String> expectedResult = Arrays.asList(\"(a,x,0):(a,u,0)\",\"(a,x,0):(a,w,1)\",\"(a,y,1):(a,u,0)\",\"(a,y,1):(a,w,1)\",\"(a,z,2):(a,u,0)\",\"(a,z,2):(a,w,1)\",\"(b,u,3):(b,i,3)\",\"(b,u,3):(b,k,5)\",\"(b,w,5):(b,i,3)\",\"(b,w,5):(b,k,5)\",\"(a,i,6):(a,x,6)\",\"(a,i,6):(a,z,8)\",\"(a,j,7):(a,x,6)\",\"(a,j,7):(a,z,8)\",\"(a,k,8):(a,x,6)\",\"(a,k,8):(a,z,8)\")@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testJoin['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "source1.join(source1).where(new Tuple3KeyExtractor()).equalTo(new Tuple3KeyExtractor()).window(TumblingEventTimeWindows.of(Time.of(3,TimeUnit.MILLISECONDS))).apply(new JoinFunction<Tuple3<String,String,Integer>,Tuple3<String,String,Integer>,String>(){@Override public String join(Tuple3<String,String,Integer> first,Tuple3<String,String,Integer> second){return first + \":\" + second}}).addSink(new SinkFunction<String>(){@Override public void invoke(String value){testResults.add(value)}})@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testResults = new ArrayList<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "env.execute(\"Self-Join Test\")@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testSelfJoin['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Collections.sort(testResults)@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "List<String> expectedResult = Arrays.asList(\"(a,x,0):(a,x,0)\",\"(a,x,0):(a,y,1)\",\"(a,x,0):(a,z,2)\",\"(a,y,1):(a,x,0)\",\"(a,y,1):(a,y,1)\",\"(a,y,1):(a,z,2)\",\"(a,z,2):(a,x,0)\",\"(a,z,2):(a,y,1)\",\"(a,z,2):(a,z,2)\",\"(b,u,3):(b,u,3)\",\"(b,u,3):(b,w,5)\",\"(b,w,5):(b,u,3)\",\"(b,w,5):(b,w,5)\",\"(a,i,6):(a,i,6)\",\"(a,i,6):(a,j,7)\",\"(a,i,6):(a,k,8)\",\"(a,j,7):(a,i,6)\",\"(a,j,7):(a,j,7)\",\"(a,j,7):(a,k,8)\",\"(a,k,8):(a,i,6)\",\"(a,k,8):(a,j,7)\",\"(a,k,8):(a,k,8)\")@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testJoin['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "env.setParallelism(1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "source1.join(source2).where(new Tuple3KeyExtractor()).equalTo(new Tuple3KeyExtractor()).window(TumblingEventTimeWindows.of(Time.of(3,TimeUnit.MILLISECONDS))).apply(new JoinFunction<Tuple3<String,String,Integer>,Tuple3<String,String,Integer>,String>(){@Override public String join(Tuple3<String,String,Integer> first,Tuple3<String,String,Integer> second){return first + \":\" + second}}).addSink(new SinkFunction<String>(){@Override public void invoke(String value){testResults.add(value)}})@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "DataStream<Tuple3<String,String,Integer>> source1 = env.addSource(new SourceFunction<Tuple3<String,String,Integer>>(){@Override public void run(SourceContext<Tuple3<String,String,Integer>> ctx){ctx.collect(Tuple3.of(\"a\",\"x\",0))ctx.collect(Tuple3.of(\"a\",\"y\",1))ctx.collect(Tuple3.of(\"a\",\"z\",2))ctx.collect(Tuple3.of(\"b\",\"u\",3))ctx.collect(Tuple3.of(\"b\",\"w\",5))ctx.collect(Tuple3.of(\"a\",\"i\",6))ctx.collect(Tuple3.of(\"a\",\"j\",7))ctx.collect(Tuple3.of(\"a\",\"k\",8))}@Override public void cancel(){}}).assignTimestampsAndWatermarks(new Tuple3TimestampExtractor())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "DataStream<Tuple3<String,String,Integer>> source2 = env.addSource(new SourceFunction<Tuple3<String,String,Integer>>(){@Override public void run(SourceContext<Tuple3<String,String,Integer>> ctx){ctx.collect(Tuple3.of(\"a\",\"u\",0))ctx.collect(Tuple3.of(\"a\",\"w\",1))ctx.collect(Tuple3.of(\"b\",\"i\",3))ctx.collect(Tuple3.of(\"b\",\"k\",5))ctx.collect(Tuple3.of(\"a\",\"x\",6))ctx.collect(Tuple3.of(\"a\",\"z\",8))}@Override public void cancel(){}}).assignTimestampsAndWatermarks(new Tuple3TimestampExtractor())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->17 [style = bold, label=""];
5->9 [style = bold, label=""];
1->14 [style = dashed, label="0"];
9->2 [style = bold, label=""];
16->6 [style = bold, label=""];
7->4 [style = bold, label=""];
15->3 [style = solid, label="expectedResult"];
12->6 [style = bold, label=""];
1->7 [style = bold, label=""];
6->3 [style = solid, label="testResults"];
7->4 [style = solid, label="expectedResult"];
0->10 [style = bold, label=""];
2->0 [style = bold, label=""];
8->5 [style = bold, label=""];
11->3 [style = bold, label=""];
17->14 [style = bold, label=""];
6->11 [style = solid, label="testResults"];
15->4 [style = solid, label="expectedResult"];
6->8 [style = bold, label=""];
15->4 [style = bold, label=""];
8->9 [style = bold, label=""];
10->17 [style = dashed, label="0"];
14->15 [style = bold, label=""];
13->6 [style = bold, label=""];
4->11 [style = bold, label=""];
10->1 [style = bold, label=""];
7->3 [style = solid, label="expectedResult"];
}
