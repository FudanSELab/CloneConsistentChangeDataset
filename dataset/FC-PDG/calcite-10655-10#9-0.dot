digraph {
19 [style = filled, label = "SqlNode validate = planner.validate(parse)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "RuleSet ruleSet = RuleSets.ofList(SortRemoveRule.INSTANCE,EnumerableRules.ENUMERABLE_PROJECT_RULE,EnumerableRules.ENUMERABLE_SORT_RULE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "RelTraitSet traitSet = convert.getTraitSet().replace(EnumerableConvention.INSTANCE)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "SqlNode parse = planner.parse(\"select * from \"emps\" \" + \"order by \"emps\".\"deptno\"\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "RelTraitSet traitSet = planner.getEmptyTraitSet().replace(EnumerableConvention.INSTANCE)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "testPlanWithExplicitTraitDefs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertThat(toString(transform),equalTo(\"EnumerableProject(empid=($0(, deptno=($1(, name=($2(, salary=($3(, commission=($4()\" + \" EnumerableTableScan(table=((hr, emps(()\"))@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "RelTraitSet traitSet = convert.getTraitSet().replace(EnumerableConvention.INSTANCE)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "traitDefs.add(RelCollationTraitDef.INSTANCE)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testPlanWithExplicitTraitDefs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "RelNode transform = planner.transform(0,traitSet,convert)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(toString(transform),equalTo(\"EnumerableSort(sort0=($1(, dir0=(ASC()\" + \" EnumerableProject(empid=($0(, deptno=($1(, name=($2(, salary=($3(, commission=($4()\" + \" EnumerableTableScan(table=((hr, emps(()\"))@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "RuleSet ruleSet = RuleSets.ofList(FilterMergeRule.INSTANCE,EnumerableRules.ENUMERABLE_FILTER_RULE,EnumerableRules.ENUMERABLE_PROJECT_RULE)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testSortPlan['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "traitDefs.add(ConventionTraitDef.INSTANCE)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "SqlNode parse = planner.parse(\"select * from \"emps\"\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final List<RelTraitDef> traitDefs = new ArrayList<>()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "RelNode transform = planner.transform(0,traitSet,convert)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Planner planner = getPlanner(traitDefs,Programs.of(ruleSet))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Planner planner = getPlanner(null,Programs.of(ruleSet))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "RelNode convert = planner.rel(validate).project()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->9 [style = solid, label="transform"];
0->3 [style = bold, label=""];
4->9 [style = bold, label=""];
9->10 [style = dashed, label="0"];
17->19 [style = solid, label="parse"];
20->2 [style = solid, label="traitSet"];
2->10 [style = solid, label="transform"];
18->15 [style = bold, label=""];
8->20 [style = dashed, label="0"];
3->11 [style = bold, label=""];
0->15 [style = dashed, label="0"];
0->5 [style = solid, label="ruleSet"];
6->0 [style = bold, label=""];
16->17 [style = bold, label=""];
2->10 [style = bold, label=""];
15->16 [style = bold, label=""];
12->0 [style = bold, label=""];
17->19 [style = bold, label=""];
13->4 [style = solid, label="traitSet"];
8->13 [style = dashed, label="0"];
20->2 [style = bold, label=""];
5->1 [style = bold, label=""];
14->2 [style = solid, label="convert"];
7->5 [style = bold, label=""];
19->14 [style = bold, label=""];
10->8 [style = bold, label=""];
10->13 [style = bold, label=""];
3->5 [style = solid, label="traitDefs"];
10->4 [style = solid, label="convert"];
15->16 [style = solid, label="ruleSet"];
1->2 [style = bold, label=""];
8->4 [style = bold, label=""];
1->2 [style = solid, label="parse"];
11->7 [style = bold, label=""];
14->20 [style = bold, label=""];
8->4 [style = solid, label="traitSet"];
13->4 [style = bold, label=""];
}
