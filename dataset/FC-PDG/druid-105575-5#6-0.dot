digraph {
6 [style = filled, label = "int i = 0@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "CloseQuietly.close(columnarInts)@@@23@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "int chunkFactor@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(writtenLength,supplierFromList.getSerializedSize())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "FileSmoosher smoosher = new FileSmoosher(temporaryFolder.newFolder())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "writer.addValue(val)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "i < vals.length@@@19@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(vals(i(,columnarInts.get(i))@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "++i@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "CompressedColumnarIntsSupplier supplierFromList = CompressedColumnarIntsSupplier.fromList(IntArrayList.wrap(vals),chunkFactor,byteOrder,compressionStrategy,segmentWriteOutMedium.getCloser())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "CompressedColumnarIntsSupplier supplierFromByteBuffer = CompressedColumnarIntsSupplier.fromByteBuffer(ByteBuffer.wrap(IOUtils.toByteArray(writeOutBytes.asInputStream())),byteOrder)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "CompressedColumnarIntsSerializer writer = new CompressedColumnarIntsSerializer(segmentWriteOutMedium,\"test\",chunkFactor,byteOrder,compressionStrategy)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "CloseQuietly.close(columnarInts)@@@23@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "final String columnName = \"test\"@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "CompressedVSizeColumnarIntsSupplier supplierFromList = CompressedVSizeColumnarIntsSupplier.fromList(IntArrayList.wrap(vals),vals.length > 0? Ints.max(vals): 0,chunkSize,byteOrder,compressionStrategy,segmentWriteOutMedium.getCloser())@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "long writtenLength = writer.getSerializedSize()@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "writer.writeTo(writeOutBytes,smoosher)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final WriteOutBytes writeOutBytes = segmentWriteOutMedium.makeWriteOutBytes()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ColumnarInts columnarInts = supplierFromByteBuffer.get()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "CompressedVSizeColumnarIntsSerializer writer = new CompressedVSizeColumnarIntsSerializer(segmentWriteOutMedium,\"test\",vals.length > 0? Ints.max(vals): 0,chunkSize,byteOrder,compressionStrategy)@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "CompressedVSizeColumnarIntsSerializer writer = new CompressedVSizeColumnarIntsSerializer(columnName,segmentWriteOutMedium,\"test\",vals.length > 0? Ints.max(vals): 0,chunkSize,byteOrder,compressionStrategy)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "checkSerializedSizeAndData['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Assert.assertEquals(vals(i(,columnarInts.get(i))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "writer.open()@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "writer.addValue(val)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "int chunkSize@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(vals.length,columnarInts.size())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(writtenLength,supplierFromList.getSerializedSize())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "writer.open()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "checkSerializedSizeAndData['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "smoosher.close()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "checkSerializedSizeAndData['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9->18 [style = bold, label=""];
27->30 [style = dotted, label="true"];
2->23 [style = dotted, label="true"];
0->14 [style = dotted, label="true"];
12->28 [style = bold, label=""];
13->15 [style = bold, label=""];
26->18 [style = bold, label=""];
13->7 [style = bold, label=""];
8->9 [style = bold, label=""];
11->20 [style = bold, label=""];
24->14 [style = dotted, label="true"];
11->31 [style = bold, label=""];
3->29 [style = dashed, label="0"];
2->13 [style = bold, label=""];
1->16 [style = solid, label="writeOutBytes"];
5->1 [style = bold, label=""];
4->5 [style = bold, label=""];
6->7 [style = solid, label="i"];
24->11 [style = bold, label=""];
6->13 [style = bold, label=""];
12->15 [style = solid, label="columnarInts"];
9->26 [style = dashed, label="0"];
17->3 [style = bold, label=""];
27->11 [style = bold, label=""];
7->2 [style = bold, label=""];
31->26 [style = bold, label=""];
0->11 [style = bold, label=""];
13->2 [style = solid, label="i"];
14->30 [style = dashed, label="0"];
11->16 [style = solid, label="smoosher"];
20->19 [style = bold, label=""];
21->25 [style = bold, label=""];
6->13 [style = solid, label="i"];
14->8 [style = solid, label="chunkSize"];
14->19 [style = solid, label="chunkSize"];
28->6 [style = bold, label=""];
13->2 [style = dotted, label="true"];
25->5 [style = bold, label=""];
6->22 [style = solid, label="columnarInts"];
5->3 [style = solid, label="writtenLength"];
11->8 [style = bold, label=""];
10->4 [style = bold, label=""];
3->12 [style = bold, label=""];
4->17 [style = solid, label="writtenLength"];
18->10 [style = bold, label=""];
5->1 [style = solid, label="writeOutBytes"];
30->31 [style = solid, label="chunkFactor"];
2->22 [style = bold, label=""];
23->7 [style = bold, label=""];
13->23 [style = solid, label="i"];
18->21 [style = bold, label=""];
14->18 [style = solid, label="chunkSize"];
8->31 [style = dashed, label="0"];
29->12 [style = bold, label=""];
16->17 [style = bold, label=""];
11->1 [style = solid, label="smoosher"];
1->16 [style = bold, label=""];
13->2 [style = bold, label=""];
19->18 [style = bold, label=""];
30->26 [style = solid, label="chunkFactor"];
13->7 [style = dotted, label="true"];
14->9 [style = solid, label="chunkSize"];
17->29 [style = bold, label=""];
2->23 [style = bold, label=""];
12->6 [style = bold, label=""];
2->7 [style = dotted, label="true"];
20->19 [style = solid, label="columnName"];
}
