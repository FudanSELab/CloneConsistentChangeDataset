digraph {
5 [style = filled, label = "DefaultIntervalXYDataset dataset = new DefaultIntervalXYDataset()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(-5.0,r.getLowerBound(),EPSILON)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "double(((( data1 = new double((((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1e2004@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(3.2,r.getUpperBound(),EPSILON)@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "double(( x1End = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1e1fda@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testIterateToFindDomainBounds_IntervalXYDataset['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(0.8,r.getLowerBound(),EPSILON)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testIterateToFindRangeBounds_IntervalXYDataset['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "dataset.addSeries(\"S1\",data1)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Range r = DatasetUtils.iterateToFindDomainBounds(dataset,Arrays.asList(\"S1\"),true)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "double(( x1Start = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1e1fd0@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "double(( y1End = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1e1ffa@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "double(( y1Start = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1e1ff0@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(6.0,r.getUpperBound(),EPSILON)@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testIterateToFindDomainBounds_IntervalXYDataset['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "Range r = DatasetUtils.iterateToFindRangeBounds(dataset,Arrays.asList(\"S1\"),new Range(0.0,4.0),true)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "double(( y1 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1e1fe4@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "DefaultIntervalXYDataset<String> dataset = new DefaultIntervalXYDataset<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "double(( x1 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1e1fc6@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->15 [style = bold, label=""];
17->5 [style = bold, label=""];
0->1 [style = solid, label="x1End"];
5->14 [style = dashed, label="0"];
1->3 [style = solid, label="data1"];
7->1 [style = solid, label="y1Start"];
1->3 [style = bold, label=""];
5->2 [style = solid, label="dataset"];
2->10 [style = bold, label=""];
4->7 [style = bold, label=""];
9->1 [style = solid, label="y1End"];
3->18 [style = bold, label=""];
7->9 [style = bold, label=""];
11->0 [style = bold, label=""];
5->6 [style = bold, label=""];
3->2 [style = bold, label=""];
8->5 [style = bold, label=""];
0->4 [style = bold, label=""];
10->12 [style = bold, label=""];
6->11 [style = bold, label=""];
2->18 [style = dashed, label="0"];
12->15 [style = dashed, label="0"];
10->16 [style = dashed, label="0"];
14->2 [style = solid, label="dataset"];
11->1 [style = solid, label="x1Start"];
9->1 [style = bold, label=""];
6->1 [style = solid, label="x1"];
4->1 [style = solid, label="y1"];
13->14 [style = bold, label=""];
14->6 [style = bold, label=""];
5->18 [style = solid, label="dataset"];
18->16 [style = bold, label=""];
}
