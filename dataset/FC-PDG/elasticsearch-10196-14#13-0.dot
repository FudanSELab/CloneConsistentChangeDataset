digraph {
21 [style = filled, label = "ParsedDocument doc = mapper.parse(source(null))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertThat(fieldType.storeTermVectorOffsets(),equalTo(false))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(fieldType.storeTermVectorPayloads(),equalTo(false))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "IndexableFieldType fieldType = fields(0(.fieldType()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "IndexableField(( fields = doc.rootDoc().getFields(\"field\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ParsedDocument doc = mapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"AbC\").endObject()),XContentType.JSON))@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "ParsedDocument doc = mapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"1234\").endObject()),XContentType.JSON))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(fieldType.storeTermVectorOffsets(),equalTo(false))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(fieldType.indexOptions(),equalTo(IndexOptions.NONE))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "IndexableFieldType fieldType = fields(0(.fieldType()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(fieldType.storeTermVectors(),equalTo(false))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "DocumentMapper mapper = parser.parse(\"type\",new CompressedXContent(mapping))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(DocValuesType.SORTED_SET,fieldType.docValuesType())@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(2,fields.length)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(1,fields.length)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertThat(fieldType.omitNorms(),equalTo(false))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(DocValuesType.NONE,fieldType.docValuesType())@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testNormalizer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "DocumentMapper mapper = createDocumentMapper(fieldMapping(null))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testNormalizer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "assertTrue(fieldType.tokenized())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(fieldType.indexOptions(),equalTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "testDefaults['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(fieldType.storeTermVectorPositions(),equalTo(false))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(fieldType.indexOptions(),equalTo(IndexOptions.DOCS))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertFalse(fieldType.stored())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "IndexableField(( fields = doc.rootDoc().getFields(\"field\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(fieldType.omitNorms(),equalTo(true))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(\"1234\",fields(0(.stringValue())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(mapping,mapper.mappingSource().toString())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",\"text\").endObject().endObject().endObject().endObject())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertFalse(fieldType.stored())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23->28 [style = solid, label="mapping"];
12->25 [style = bold, label=""];
19->25 [style = dashed, label="0"];
11->4 [style = bold, label=""];
23->27 [style = solid, label="mapping"];
11->26 [style = dashed, label="0"];
4->26 [style = bold, label=""];
17->21 [style = bold, label=""];
2->5 [style = bold, label=""];
9->0 [style = bold, label=""];
1->6 [style = bold, label=""];
3->13 [style = bold, label=""];
0->1 [style = bold, label=""];
4->30 [style = dashed, label="0"];
8->3 [style = solid, label="fieldType"];
0->24 [style = bold, label=""];
27->29 [style = bold, label=""];
28->27 [style = bold, label=""];
8->11 [style = bold, label=""];
18->9 [style = bold, label=""];
6->14 [style = bold, label=""];
22->4 [style = bold, label=""];
30->0 [style = bold, label=""];
21->7 [style = bold, label=""];
14->2 [style = bold, label=""];
20->17 [style = bold, label=""];
16->7 [style = bold, label=""];
29->12 [style = bold, label=""];
23->28 [style = bold, label=""];
5->3 [style = bold, label=""];
7->19 [style = bold, label=""];
24->6 [style = bold, label=""];
13->10 [style = bold, label=""];
26->30 [style = bold, label=""];
17->16 [style = bold, label=""];
19->12 [style = bold, label=""];
12->8 [style = bold, label=""];
25->22 [style = bold, label=""];
12->22 [style = dashed, label="0"];
9->24 [style = dashed, label="0"];
31->23 [style = bold, label=""];
4->18 [style = bold, label=""];
15->17 [style = bold, label=""];
}
