digraph {
4 [style = filled, label = "JsonConfigProvider.bind(binder,\"druid.indexer.auditlog\",)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final boolean standalone@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Binder binder@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "binder.bind().to().in()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "bindTaskConfigAndClients['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "return ImmutableList.of(new Module(){@Override public void configure(Binder binder){if (standalone) {binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(IndexingServiceSelectorConfig.DEFAULT_SERVICE_NAME)binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(8090)binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(8290)}JsonConfigProvider.bind(binder,\"druid.coordinator.asOverlord\",)JsonConfigProvider.bind(binder,\"druid.indexer.queue\",)JsonConfigProvider.bind(binder,\"druid.indexer.tasklock\",)JsonConfigProvider.bind(binder,\"druid.indexer.task\",)JsonConfigProvider.bind(binder,\"druid.indexer.auditlog\",)binder.bind().in()binder.bind().to()binder.bind().to().in()binder.bind(new TypeLiteral<List<TaskLogStreamer>>(){}).toProvider(new ListProvider<TaskLogStreamer>().add().add()).in()binder.bind().to().in()binder.bind().in()binder.bind().in()binder.bind().in()binder.bind().in()binder.bind().in()binder.bind().to().in()binder.bind(new TypeLiteral<IndexTaskClientFactory<ParallelIndexSupervisorTaskClient>>(){}).toProvider(Providers.of(null))binder.bind().toProvider(Providers.of(null))PolyBind.createChoice(binder,\"druid.indexer.task.rowIngestionMeters.type\",Key.get(),Key.get())final MapBinder<String,RowIngestionMetersFactory> rowIngestionMetersHandlerProviderBinder = PolyBind.optionBinder(binder,Key.get())rowIngestionMetersHandlerProviderBinder.addBinding(\"dropwizard\").to().in()binder.bind().in()configureTaskStorage(binder)configureAutoscale(binder)configureRunners(binder)configureOverlordHelpers(binder)binder.bind().toProvider().in()if (standalone) {binder.bind().in()binder.bind().to().in()binder.bind().to().in()}Jerseys.addResource(binder,)Jerseys.addResource(binder,)Jerseys.addResource(binder,)binder.bind().to().in()if (standalone) {LifecycleModule.register(binder,)}bindAnnouncer(binder,,DiscoverySideEffectsProvider.builder(NodeType.OVERLORD).build())}private void configureTaskStorage(Binder binder){JsonConfigProvider.bind(binder,\"druid.indexer.storage\",)PolyBind.createChoice(binder,\"druid.indexer.storage.type\",Key.get(),Key.get())final MapBinder<String,TaskStorage> storageBinder = PolyBind.optionBinder(binder,Key.get())storageBinder.addBinding(\"local\").to()binder.bind().in()storageBinder.addBinding(\"metadata\").to().in()binder.bind().in()}private void configureRunners(Binder binder){JsonConfigProvider.bind(binder,\"druid.worker\",)PolyBind.createChoice(binder,\"druid.indexer.runner.type\",Key.get(),Key.get())final MapBinder<String,TaskRunnerFactory> biddy = PolyBind.optionBinder(binder,Key.get())IndexingServiceModuleHelper.configureTaskRunnerConfigs(binder)biddy.addBinding(\"local\").to()binder.bind().in()biddy.addBinding(RemoteTaskRunnerFactory.TYPE_NAME).to().in()binder.bind().in()biddy.addBinding(HttpRemoteTaskRunnerFactory.TYPE_NAME).to().in()binder.bind().in()JacksonConfigProvider.bind(binder,WorkerBehaviorConfig.CONFIG_KEY,,null)}private void configureAutoscale(Binder binder){JsonConfigProvider.bind(binder,\"druid.indexer.autoscale\",)JsonConfigProvider.bind(binder,\"druid.indexer.autoscale\",)JsonConfigProvider.bind(binder,\"druid.indexer.autoscale\",)PolyBind.createChoice(binder,\"druid.indexer.autoscale.strategy.type\",Key.get(),Key.get())final MapBinder<String,ProvisioningStrategy> biddy = PolyBind.optionBinder(binder,Key.get())biddy.addBinding(\"simple\").to()biddy.addBinding(\"pendingTaskBased\").to()}private void configureOverlordHelpers(Binder binder){JsonConfigProvider.bind(binder,\"druid.indexer.logs.kill\",)Multibinder.newSetBinder(binder,).addBinding().to()}},new IndexingServiceFirehoseModule(),new IndexingServiceInputSourceModule(),new IndexingServiceTaskLogsModule(),new SupervisorModule(),new LookupSerdeModule(),new SamplerModule())@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "JsonConfigProvider.bind(binder,\"druid.peon.taskActionClient.retry\",)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "configureTaskActionClient(binder)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Binder binder@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "binder.bind().in()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "JsonConfigProvider.bind(binder,\"druid.indexer.task\",)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "bindTaskConfigAndClients['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "getModules['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "binder.bind(new TypeLiteral<IndexTaskClientFactory<ParallelIndexSupervisorTaskClient>>(){}).to().in()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "binder.bind().in()@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14->12 [style = dotted, label="true"];
1->4 [style = solid, label="binder"];
11->10 [style = dotted, label="true"];
10->5 [style = solid, label="binder"];
2->3 [style = bold, label=""];
0->2 [style = bold, label=""];
1->3 [style = solid, label="binder"];
10->3 [style = solid, label="binder"];
10->8 [style = solid, label="binder"];
1->10 [style = dashed, label="0"];
9->7 [style = bold, label=""];
3->4 [style = bold, label=""];
11->2 [style = bold, label=""];
12->13 [style = solid, label="standalone"];
10->4 [style = solid, label="binder"];
5->6 [style = bold, label=""];
8->5 [style = bold, label=""];
1->5 [style = solid, label="binder"];
1->8 [style = solid, label="binder"];
4->8 [style = bold, label=""];
14->13 [style = bold, label=""];
6->9 [style = bold, label=""];
0->1 [style = dotted, label="true"];
}
