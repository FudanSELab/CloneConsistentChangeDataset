digraph {
33 [style = filled, label = "IncrementalIndex index = new IncrementalIndex.Builder().setSimpleTestingIndexSchema(new CountAggregatorFactory(\"cnt\")).setMaxRowCount(10000).setMaxBytesInMemory(1000).buildOnheap()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertTrue(comparator.compare(ir4,ir6) > 0)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertTrue(comparator.compare(ir3,ir2) < 0)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testIncrementalIndexRowSizeArr['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(0,comparator.compare(ir1,ir1))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "IncrementalIndexRow ir1 = index.toIncrementalIndexRow(toMapRow(time,\"billy\",\"A\",\"joe\",\"B\")).getIncrementalIndexRow()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "IncrementalIndex<?> index = new IncrementalIndex.Builder().setSimpleTestingIndexSchema(new CountAggregatorFactory(\"cnt\")).setMaxRowCount(1000).buildOnheap()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(comparator.compare(ir5,ir4) > 0)@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "Assert.assertTrue(comparator.compare(ir6,ir2) > 0)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "IncrementalIndex.IncrementalIndexRowResult tndResult = index.toIncrementalIndexRow(toMapRow(time + 1,\"billy\",\"A\",\"joe\",Arrays.asList(\"A\",\"B\")))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "long time = System.currentTimeMillis()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertTrue(comparator.compare(ir5,ir6) > 0)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "IncrementalIndexRow ir5 = index.toIncrementalIndexRow(toMapRow(time + 1,\"billy\",\"A\",\"joe\",Arrays.asList(\"A\",\"B\"))).getIncrementalIndexRow()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(comparator.compare(ir6,ir3) > 0)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertTrue(comparator.compare(ir4,ir5) < 0)@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "Assert.assertTrue(comparator.compare(ir5,ir4) < 0)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Assert.assertTrue(comparator.compare(ir6,ir1) > 0)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "IncrementalIndexRow ir4 = index.toIncrementalIndexRow(toMapRow(time + 1,\"billy\",\"A\",\"joe\",\"B\")).getIncrementalIndexRow()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(0,comparator.compare(ir3,ir3))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "IncrementalIndexRow td1 = tndResult.getIncrementalIndexRow()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "IncrementalIndexRow ir3 = index.toIncrementalIndexRow(toMapRow(time,\"billy\",\"A\")).getIncrementalIndexRow()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertTrue(comparator.compare(ir2,ir1) < 0)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(0,comparator.compare(ir2,ir2))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testBasic['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Assert.assertTrue(comparator.compare(ir1,ir2) > 0)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertTrue(comparator.compare(ir2,ir3) > 0)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertTrue(comparator.compare(ir1,ir3) > 0)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Comparator<IncrementalIndexRow> comparator = index.dimsComparator()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(50,td1.estimateBytesInMemory())@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertTrue(comparator.compare(ir4,ir5) > 0)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "IncrementalIndexRow ir2 = index.toIncrementalIndexRow(toMapRow(time,\"billy\",\"A\",\"joe\",\"A\")).getIncrementalIndexRow()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testBasic['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "IncrementalIndexRow ir6 = index.toIncrementalIndexRow(toMapRow(time + 1)).getIncrementalIndexRow()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertTrue(comparator.compare(ir3,ir1) < 0)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25->0 [style = bold, label=""];
5->3 [style = bold, label=""];
22->26 [style = bold, label=""];
18->1 [style = solid, label="ir2"];
17->5 [style = bold, label=""];
4->24 [style = bold, label=""];
8->15 [style = bold, label=""];
0->13 [style = bold, label=""];
29->30 [style = bold, label=""];
6->22 [style = bold, label=""];
24->33 [style = dashed, label="0"];
3->25 [style = bold, label=""];
21->29 [style = solid, label="time"];
18->30 [style = dashed, label="0"];
18->3 [style = solid, label="ir2"];
10->13 [style = solid, label="ir6"];
16->5 [style = solid, label="ir3"];
20->0 [style = solid, label="ir1"];
11->12 [style = bold, label=""];
19->2 [style = solid, label="ir4"];
9->10 [style = bold, label=""];
19->26 [style = solid, label="ir4"];
16->19 [style = bold, label=""];
20->12 [style = solid, label="ir1"];
32->33 [style = bold, label=""];
20->1 [style = solid, label="ir1"];
20->13 [style = solid, label="ir1"];
16->0 [style = solid, label="ir3"];
1->17 [style = bold, label=""];
9->14 [style = solid, label="ir5"];
14->26 [style = dashed, label="0"];
20->29 [style = dashed, label="0"];
20->18 [style = bold, label=""];
18->17 [style = solid, label="ir2"];
9->2 [style = solid, label="ir5"];
16->25 [style = solid, label="ir3"];
20->17 [style = solid, label="ir1"];
10->11 [style = bold, label=""];
21->20 [style = bold, label=""];
21->29 [style = bold, label=""];
18->23 [style = solid, label="ir2"];
19->6 [style = solid, label="ir4"];
16->7 [style = solid, label="ir3"];
24->21 [style = bold, label=""];
19->9 [style = bold, label=""];
19->28 [style = solid, label="ir4"];
30->31 [style = bold, label=""];
12->8 [style = bold, label=""];
16->3 [style = solid, label="ir3"];
9->26 [style = solid, label="ir5"];
7->6 [style = bold, label=""];
18->8 [style = solid, label="ir2"];
10->23 [style = solid, label="ir6"];
10->22 [style = solid, label="ir6"];
13->23 [style = bold, label=""];
2->28 [style = dashed, label="0"];
19->14 [style = solid, label="ir4"];
27->24 [style = bold, label=""];
14->2 [style = bold, label=""];
23->7 [style = bold, label=""];
10->7 [style = solid, label="ir6"];
26->28 [style = bold, label=""];
9->28 [style = solid, label="ir5"];
22->14 [style = bold, label=""];
33->21 [style = bold, label=""];
18->5 [style = solid, label="ir2"];
20->25 [style = solid, label="ir1"];
9->22 [style = solid, label="ir5"];
16->15 [style = solid, label="ir3"];
10->6 [style = solid, label="ir6"];
15->1 [style = bold, label=""];
18->16 [style = bold, label=""];
}
