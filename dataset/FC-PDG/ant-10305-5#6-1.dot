digraph {
11 [style = filled, label = "testReplaceRegex['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "testReplaceRegex['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertNotContains(\"This is a line with digits\",contents)@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "buildRule.executeTarget(\"hasregex\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertContains(\"World here\",contents)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertContains(\"dog Cat dog\",contents)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertContains(\"hello world\",contents)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregex\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertNotContains(\"this is the moon\",contents)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assumeTrue(\"Regex not present\",getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "buildRule.executeTarget(\"containsregex\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testContainsRegex['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertContains(\"found WhiteSpace\",contents)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertContains(\"moon Sun Sun\",contents)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertContains(\"world world world world\",contents)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "buildRule.executeTarget(\"replaceregex\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/containsregex\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertContains(\"Found digits (1234(\",contents)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assume.assumeTrue(\"Regex not present\",getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->6 [style = solid, label="contents"];
16->13 [style = bold, label=""];
8->4 [style = solid, label="contents"];
8->0 [style = solid, label="contents"];
7->16 [style = dashed, label="0"];
2->3 [style = bold, label=""];
10->12 [style = dashed, label="0"];
8->6 [style = bold, label=""];
4->2 [style = bold, label=""];
9->10 [style = bold, label=""];
6->14 [style = dashed, label="0"];
7->8 [style = bold, label=""];
11->9 [style = bold, label=""];
8->3 [style = solid, label="contents"];
10->7 [style = bold, label=""];
13->15 [style = solid, label="contents"];
2->17 [style = dashed, label="0"];
12->7 [style = bold, label=""];
1->9 [style = bold, label=""];
8->13 [style = dashed, label="0"];
6->4 [style = bold, label=""];
15->17 [style = bold, label=""];
3->5 [style = bold, label=""];
8->5 [style = solid, label="contents"];
10->16 [style = bold, label=""];
5->0 [style = bold, label=""];
4->15 [style = dashed, label="0"];
13->14 [style = solid, label="contents"];
8->2 [style = solid, label="contents"];
18->9 [style = bold, label=""];
13->17 [style = solid, label="contents"];
14->15 [style = bold, label=""];
9->12 [style = bold, label=""];
13->14 [style = bold, label=""];
}
