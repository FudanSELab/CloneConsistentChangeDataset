digraph {
6 [style = filled, label = "Assert.assertEquals(\"EphemeralType.getMaxTTL() should succeed\",r.getErr(),Code.OK.intValue())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "response = new CreateResponse()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(\"An invalid CreateTTLRequest should throw BadArguments\",r.getErr(),Code.BADARGUMENTS.intValue())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "r = zk.submitRequest(h,request,response,null)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "RequestHeader h = new RequestHeader(1,ZooDefs.OpCode.createTTL)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testMaxTTLs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "String path = \"/bad_ttl\"@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(\"An invalid CreateTTLRequest should throw BadArguments\",r.getErr(),Code.BADARGUMENTS.intValue())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "CreateTTLRequest request = new CreateTTLRequest(path,new byte((((,ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_WITH_TTL.toFlag(),-100)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testMaxTTLs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertEquals(\"EphemeralType.getMaxTTL() should succeed\",r.getErr(),Code.OK.intValue())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "testBadTTLs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertNotNull(\"Node should exist\",zk.exists(path,false))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "CreateResponse response = new CreateResponse()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertNull(\"An invalid CreateTTLRequest should not result in znode creation\",zk.exists(path,false))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertNull(\"An invalid CreateTTLRequest should not result in znode creation\",zk.exists(path,false))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "request = new CreateTTLRequest(path,new byte((((,ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_WITH_TTL.toFlag(),EphemeralType.TTL.maxValue() + 1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ReplyHeader r = zk.submitRequest(h,request,response,null)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertNotNull(\"Node should exist\",zk.exists(path,false))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "CreateTTLRequest request = new CreateTTLRequest(path,new byte((((,ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_WITH_TTL.toFlag(),EphemeralType.TTL.maxValue())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15->14 [style = solid, label="response"];
0->16 [style = bold, label=""];
15->14 [style = bold, label=""];
0->6 [style = bold, label=""];
9->2 [style = bold, label=""];
5->13 [style = solid, label="path"];
5->7 [style = solid, label="path"];
5->8 [style = solid, label="path"];
11->12 [style = bold, label=""];
4->2 [style = bold, label=""];
16->17 [style = bold, label=""];
18->2 [style = bold, label=""];
7->3 [style = bold, label=""];
3->0 [style = bold, label=""];
7->0 [style = solid, label="request"];
13->14 [style = solid, label="request"];
6->10 [style = dashed, label="0"];
5->19 [style = bold, label=""];
6->1 [style = bold, label=""];
0->10 [style = bold, label=""];
5->1 [style = solid, label="path"];
6->16 [style = dashed, label="0"];
1->17 [style = dashed, label="0"];
10->8 [style = bold, label=""];
7->19 [style = dashed, label="0"];
3->0 [style = solid, label="response"];
19->0 [style = solid, label="request"];
5->19 [style = solid, label="path"];
2->0 [style = solid, label="h"];
5->7 [style = bold, label=""];
2->14 [style = solid, label="h"];
1->8 [style = dashed, label="0"];
17->13 [style = bold, label=""];
5->17 [style = solid, label="path"];
13->15 [style = bold, label=""];
14->11 [style = bold, label=""];
19->3 [style = bold, label=""];
5->12 [style = solid, label="path"];
2->5 [style = bold, label=""];
}
