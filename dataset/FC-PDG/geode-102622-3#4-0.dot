digraph {
2 [style = filled, label = "out.flush()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testByte['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testDateObject['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testDateObject['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "DataSerializer.writeByte(value,out)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "DataInput in = getDataInput()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Date date = new Date()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Byte value = new Byte((byte)getRandom().nextInt())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Date date2 = DataSerializer.readObject(in)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertEquals(date,date2)@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Byte value2 = DataSerializer.readByte(in)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Date date2 = (Date)DataSerializer.readObject(in)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "DataOutputStream out = getDataOutput()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "DataSerializer.writeObject(date,out)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(value,value2)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
11->13 [style = solid, label="value2"];
7->11 [style = bold, label=""];
0->3 [style = solid, label="date2"];
12->5 [style = bold, label=""];
1->14 [style = dashed, label="0"];
4->6 [style = bold, label=""];
8->3 [style = bold, label=""];
6->1 [style = solid, label="date"];
7->0 [style = solid, label="in"];
7->0 [style = bold, label=""];
0->11 [style = dashed, label="0"];
5->14 [style = bold, label=""];
7->8 [style = bold, label=""];
3->13 [style = dashed, label="0"];
5->1 [style = solid, label="out"];
9->6 [style = bold, label=""];
5->14 [style = solid, label="out"];
7->11 [style = solid, label="in"];
6->12 [style = dashed, label="0"];
5->1 [style = bold, label=""];
6->5 [style = bold, label=""];
12->14 [style = solid, label="value"];
10->12 [style = bold, label=""];
8->3 [style = solid, label="date2"];
11->13 [style = bold, label=""];
6->3 [style = solid, label="date"];
0->8 [style = dashed, label="0"];
1->2 [style = bold, label=""];
14->2 [style = bold, label=""];
2->7 [style = bold, label=""];
12->13 [style = solid, label="value"];
7->8 [style = solid, label="in"];
}
