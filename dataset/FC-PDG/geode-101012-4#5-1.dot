digraph {
1 [style = filled, label = "commandRule.executeCommandWithInstance(spy,startLocatorCommand)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "commandRule.executeAndAssertThat(spy,startLocatorCommand)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "verify(spy).createStartLocatorCommandLine(any(),any(),any(),gemfirePropertiesCaptor.capture(),any(),any(),any(),any(),any())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(gemfireProperties).containsKey(JMX_MANAGER_HOSTNAME_FOR_CLIENTS)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "startServerRespectsJmxManagerHostnameForClients['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ArgumentCaptor<Properties> gemfirePropertiesCaptor = ArgumentCaptor.forClass()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "verify(spy).createStartServerCommandLine(any(),any(),any(),gemfirePropertiesCaptor.capture(),any(),any(),any(),any(),any(),any())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Properties gemfireProperties = gemfirePropertiesCaptor.getValue()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String startServerCommand = new CommandStringBuilder(\"start server\").addOption(JMX_MANAGER_HOSTNAME_FOR_CLIENTS,FAKE_HOSTNAME).toString()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "commandRule.executeCommandWithInstance(spy,startServerCommand)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "startLocatorRespectsJmxManagerHostnameForClients['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertThat(gemfireProperties.get(JMX_MANAGER_HOSTNAME_FOR_CLIENTS)).isEqualTo(FAKE_HOSTNAME)@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "String startLocatorCommand = new CommandStringBuilder(\"start locator\").addOption(JMX_MANAGER_HOSTNAME_FOR_CLIENTS,FAKE_HOSTNAME).toString()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "startLocatorRespectsJmxManagerHostnameForClients['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0->9 [style = bold, label=""];
2->3 [style = bold, label=""];
0->9 [style = solid, label="startLocatorCommand"];
1->9 [style = dashed, label="0"];
7->4 [style = bold, label=""];
12->6 [style = bold, label=""];
0->10 [style = dashed, label="0"];
9->6 [style = bold, label=""];
6->2 [style = bold, label=""];
8->0 [style = bold, label=""];
1->12 [style = dashed, label="0"];
0->1 [style = solid, label="startLocatorCommand"];
1->6 [style = bold, label=""];
13->3 [style = bold, label=""];
5->0 [style = bold, label=""];
3->7 [style = bold, label=""];
10->12 [style = bold, label=""];
11->10 [style = bold, label=""];
0->1 [style = bold, label=""];
2->13 [style = dashed, label="0"];
6->13 [style = bold, label=""];
10->12 [style = solid, label="startServerCommand"];
}
