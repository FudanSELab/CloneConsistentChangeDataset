digraph {
55 [style = filled, label = "Iterable<ScanResultValue> scanResultValues1 = scanData(task,endInterval)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "testRunTransactionModeRollback['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "kafkaProducer.beginTransaction()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2),publishedDescriptors)@@@47@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "kafkaProducer.initTransactions()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "SegmentDescriptor desc4 = sd(\"2049/P1D\",0)@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors()@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2,desc3,desc4),publishedDescriptors)@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "countEvents(task) != 2@@@13@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "future.get(10,TimeUnit.SECONDS)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "kafkaProducer.send(record).get()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "SegmentDescriptor desc2 = sd(\"2011/P1D\",0)@@@45@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,6L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@45@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "testRunWithPauseAndResume['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
72 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(2)))@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "scanResultValues = scanData(task,rollbackedInterval)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "kafkaProducer.commitTransaction()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "kafkaProducer.beginTransaction()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "Assert.assertEquals(2,Iterables.size(scanResultValues1))@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "kafkaProducer.flush()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "TimeoutException e@@@35@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
48 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,13L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(0)))@@@49@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors()@@@46@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "kafkaProducer.send(record).get()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(1)))@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,13L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getProcessed())@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "{}@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(2,countEvents(task))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(Status.READING,task.getRunner().getStatus())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "kafkaProducer.abortTransaction()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "final QuerySegmentSpec rollbackedInterval = OBJECT_MAPPER.readValue(\"\"2010/2012\"\",)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "SegmentDescriptor desc1 = sd(\"2008/P1D\",0)@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "SegmentDescriptor desc3 = sd(\"2013/P1D\",0)@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Thread.sleep(25)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "kafkaProducer.flush()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testRunWithPauseAndResume['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(3)))@@@61@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "Assert.assertEquals(0,Iterables.size(scanResultValues))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,6L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@48@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "kafkaProducer.commitTransaction()@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "kafkaProducer.initTransactions()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(sdd(\"2010/P1D\",0,ImmutableList.of(\"c\")),sdd(\"2011/P1D\",0,ImmutableList.of(\"d\",\"e\"))),publishedDescriptors())@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "Assert.assertEquals(Status.READING,task.getRunner().getStatus())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "{}@@@35@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(0)))@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "SegmentDescriptor desc1 = sd(\"2010/P1D\",0)@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
61 [style = filled, label = "final QuerySegmentSpec endInterval = OBJECT_MAPPER.readValue(\"\"2008/2049\"\",)@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "Assert.assertEquals(2,Iterables.size(scanResultValues))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "SegmentDescriptor desc2 = sd(\"2009/P1D\",0)@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "kafkaProducer.initTransactions()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(1)))@@@50@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "kafkaProducer.beginTransaction()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "kafkaProducer.initTransactions()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "kafkaProducer.commitTransaction()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(Status.PAUSED,task.getRunner().getStatus())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "Assert.assertEquals(task.getRunner().getEndOffsets(),task.getRunner().getCurrentOffsets())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.fail(\"Task completed when it should have been paused\")@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,2L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,6L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "kafkaProducer.beginTransaction()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getProcessed())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertEquals(2,countEvents(task))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "Iterable<ScanResultValue> scanResultValues = scanData(task,firstInterval)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Map<Integer,Long> currentOffsets = OBJECT_MAPPER.readValue(task.getRunner().pause().getEntity().toString(),new TypeReference<Map<Integer,Long>>(){})@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "kafkaProducer.send(record).get()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "final QuerySegmentSpec firstInterval = OBJECT_MAPPER.readValue(\"\"2008/2010\"\",)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "kafkaProducer.send(record).get()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63->72 [style = bold, label=""];
39->19 [style = bold, label=""];
40->49 [style = bold, label=""];
25->33 [style = bold, label=""];
72->41 [style = bold, label=""];
26->10 [style = bold, label=""];
27->9 [style = bold, label=""];
53->63 [style = bold, label=""];
73->54 [style = bold, label=""];
64->70 [style = solid, label="desc2"];
49->51 [style = bold, label=""];
69->55 [style = solid, label="task"];
0->32 [style = solid, label="desc1"];
22->30 [style = bold, label=""];
68->73 [style = bold, label=""];
20->27 [style = bold, label=""];
1->32 [style = solid, label="desc2"];
23->73 [style = dashed, label="0"];
32->70 [style = dashed, label="0"];
21->31 [style = bold, label=""];
34->26 [style = bold, label=""];
11->13 [style = bold, label=""];
52->69 [style = bold, label=""];
67->57 [style = bold, label=""];
23->36 [style = bold, label=""];
28->3 [style = bold, label=""];
19->28 [style = bold, label=""];
0->36 [style = dashed, label="0"];
66->28 [style = bold, label=""];
2->28 [style = bold, label=""];
54->70 [style = solid, label="desc1"];
1->4 [style = bold, label=""];
30->68 [style = dashed, label="0"];
44->70 [style = solid, label="desc4"];
19->2 [style = bold, label=""];
12->35 [style = bold, label=""];
58->70 [style = bold, label=""];
0->54 [style = dashed, label="0"];
69->20 [style = bold, label=""];
33->13 [style = bold, label=""];
13->11 [style = bold, label=""];
18->28 [style = bold, label=""];
61->55 [style = solid, label="endInterval"];
55->50 [style = solid, label="scanResultValues1"];
58->70 [style = solid, label="publishedDescriptors"];
24->20 [style = bold, label=""];
61->55 [style = bold, label=""];
51->43 [style = solid, label="rollbackedInterval"];
43->66 [style = bold, label=""];
3->7 [style = bold, label=""];
22->17 [style = bold, label=""];
36->37 [style = bold, label=""];
59->44 [style = bold, label=""];
46->40 [style = bold, label=""];
6->63 [style = dashed, label="0"];
24->20 [style = solid, label="task"];
65->46 [style = bold, label=""];
14->6 [style = bold, label=""];
71->56 [style = bold, label=""];
69->47 [style = solid, label="task"];
54->64 [style = bold, label=""];
8->33 [style = bold, label=""];
16->18 [style = bold, label=""];
24->13 [style = solid, label="task"];
38->24 [style = bold, label=""];
69->13 [style = solid, label="task"];
42->65 [style = bold, label=""];
64->59 [style = bold, label=""];
23->0 [style = bold, label=""];
45->47 [style = solid, label="firstInterval"];
47->62 [style = bold, label=""];
31->34 [style = bold, label=""];
57->68 [style = bold, label=""];
7->22 [style = bold, label=""];
50->60 [style = bold, label=""];
1->64 [style = dashed, label="0"];
0->1 [style = bold, label=""];
34->28 [style = solid, label="currentOffsets"];
13->11 [style = dotted, label="true"];
51->43 [style = bold, label=""];
55->50 [style = bold, label=""];
32->5 [style = bold, label=""];
35->16 [style = bold, label=""];
24->69 [style = dashed, label="0"];
14->53 [style = dashed, label="0"];
30->61 [style = bold, label=""];
30->23 [style = bold, label=""];
24->21 [style = solid, label="task"];
43->66 [style = solid, label="scanResultValues"];
69->20 [style = solid, label="task"];
17->30 [style = bold, label=""];
48->53 [style = bold, label=""];
59->70 [style = solid, label="desc3"];
5->14 [style = bold, label=""];
3->22 [style = bold, label=""];
56->42 [style = bold, label=""];
70->48 [style = bold, label=""];
60->67 [style = bold, label=""];
29->12 [style = bold, label=""];
62->71 [style = bold, label=""];
5->48 [style = dashed, label="0"];
10->29 [style = bold, label=""];
47->62 [style = solid, label="scanResultValues"];
69->21 [style = solid, label="task"];
9->25 [style = bold, label=""];
4->32 [style = solid, label="publishedDescriptors"];
15->24 [style = bold, label=""];
45->47 [style = bold, label=""];
25->8 [style = bold, label=""];
44->58 [style = bold, label=""];
13->21 [style = bold, label=""];
31->45 [style = bold, label=""];
69->40 [style = solid, label="task"];
69->43 [style = solid, label="task"];
4->32 [style = bold, label=""];
}
