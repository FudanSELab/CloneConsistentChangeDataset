digraph {
1 [style = filled, label = "int rightJoinIndex = deptRow.getFieldNames().indexOf(\"DEPTNO\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "RexNode joinCond = relBuilder.or(relBuilder.equals(leftKeyInputRef,rightKeyInputRef),relBuilder.call(SqlStdOperatorTable.AND,relBuilder.isNull(leftKeyInputRef),relBuilder.isNull(rightKeyInputRef)))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "RexNode joinCond = relBuilder.call(SqlStdOperatorTable.OR,relBuilder.call(SqlStdOperatorTable.EQUALS,leftKeyInputRef,rightKeyInputRef),relBuilder.call(SqlStdOperatorTable.AND,relBuilder.call(SqlStdOperatorTable.IS_NULL,leftKeyInputRef),relBuilder.call(SqlStdOperatorTable.IS_NULL,rightKeyInputRef)))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "testSplitJoinConditionExpandedIsNotDistinctFrom['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testSplitJoinConditionExpandedIsNotDistinctFrom['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "int leftJoinIndex = empScan.getRowType().getFieldNames().indexOf(\"DEPTNO\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testSplitJoinConditionExpandedIsNotDistinctFromUsingCase2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "RexInputRef leftKeyInputRef = RexInputRef.of(leftJoinIndex,empDeptJoinRelFields)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "RexInputRef rightKeyInputRef = RexInputRef.of(empRow.getFieldCount() + rightJoinIndex,empDeptJoinRelFields)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "splitJoinConditionHelper(joinCond,Collections.singletonList(leftJoinIndex),Collections.singletonList(rightJoinIndex),Collections.singletonList(false),relBuilder.literal(true))@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "RexNode joinCond = relBuilder.call(SqlStdOperatorTable.CASE,relBuilder.call(SqlStdOperatorTable.IS_NULL,leftKeyInputRef),relBuilder.call(SqlStdOperatorTable.IS_NULL,rightKeyInputRef),relBuilder.call(SqlStdOperatorTable.IS_NULL,rightKeyInputRef),relBuilder.call(SqlStdOperatorTable.IS_NULL,leftKeyInputRef),relBuilder.call(SqlStdOperatorTable.EQUALS,leftKeyInputRef,rightKeyInputRef))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10->4 [style = solid, label="joinCond"];
3->2 [style = solid, label="rightKeyInputRef"];
6->3 [style = bold, label=""];
2->4 [style = solid, label="joinCond"];
9->0 [style = bold, label=""];
0->4 [style = solid, label="leftJoinIndex"];
1->4 [style = solid, label="rightJoinIndex"];
6->2 [style = solid, label="leftKeyInputRef"];
3->10 [style = solid, label="rightKeyInputRef"];
7->4 [style = bold, label=""];
6->10 [style = solid, label="leftKeyInputRef"];
2->7 [style = dashed, label="0"];
2->4 [style = bold, label=""];
3->7 [style = solid, label="rightKeyInputRef"];
2->10 [style = dashed, label="0"];
8->0 [style = bold, label=""];
3->10 [style = bold, label=""];
1->6 [style = bold, label=""];
3->2 [style = bold, label=""];
5->0 [style = bold, label=""];
3->7 [style = bold, label=""];
0->1 [style = bold, label=""];
10->4 [style = bold, label=""];
6->7 [style = solid, label="leftKeyInputRef"];
7->4 [style = solid, label="joinCond"];
1->3 [style = solid, label="rightJoinIndex"];
0->6 [style = solid, label="leftJoinIndex"];
}
