digraph {
6 [style = filled, label = "stream.transformValues(valueTransformerSupplier).process(supplier)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertArrayEquals(expected,supplier.theCapturedProcessor().processed.toArray())@@@35@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "stream = builder.stream(topicName,Consumed.with(Serdes.Integer(),Serdes.Integer()))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "driver.pipeInput(recordFactory.create(topicName,expectedKey,expectedKey * 10,0L))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final int(( expectedKeys = {1,10,100,1000}@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "KStream<Integer,Integer> stream@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testTransform['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final KStream<Integer,Integer> stream@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "final StreamsBuilder builder = new StreamsBuilder()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "String(( expected = {\"1:11\",\"10:121\",\"100:1221\",\"1000:12221\"}@@@32@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testTransformWithKey['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ValueTransformerSupplier<Number,Integer> valueTransformerSupplier = new ValueTransformerSupplier<Number,Integer>(){public ValueTransformer<Number,Integer> get(){return new ValueTransformer<Number,Integer>(){@Override public void init(ProcessorContext context){}@Override public Integer transform(Number value){total += value.intValue()return total}@Override public void close(){}}}}@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "testTransform['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "StreamsBuilder builder = new StreamsBuilder()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ValueTransformerWithKeySupplier<Integer,Number,Integer> valueTransformerSupplier = new ValueTransformerWithKeySupplier<Integer,Number,Integer>(){public ValueTransformerWithKey<Integer,Number,Integer> get(){return new ValueTransformerWithKey<Integer,Number,Integer>(){@Override public void init(final ProcessorContext context){}@Override public Integer transform(final Integer readOnlyKey,final Number value){total += value.intValue() + readOnlyKeyreturn total}@Override public void close(){}}}}@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final ValueTransformerSupplier<Number,Integer> valueTransformerSupplier = new ValueTransformerSupplier<Number,Integer>(){public ValueTransformer<Number,Integer> get(){return new ValueTransformer<Number,Integer>(){@Override public void init(final ProcessorContext context){}@Override public Integer transform(final Number value){total += value.intValue()return total}@Override public void close(){}}}}@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "final String(( expected = {\"1:10\",\"10:110\",\"100:1110\",\"1000:11110\"}@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->9 [style = bold, label=""];
15->7 [style = bold, label=""];
16->8 [style = bold, label=""];
10->14 [style = bold, label=""];
1->2 [style = solid, label="expected"];
7->14 [style = dashed, label="0"];
11->2 [style = solid, label="expected"];
0->12 [style = dashed, label="0"];
12->9 [style = bold, label=""];
3->13 [style = dashed, label="0"];
11->2 [style = bold, label=""];
7->3 [style = bold, label=""];
9->6 [style = bold, label=""];
8->0 [style = bold, label=""];
0->9 [style = solid, label="stream"];
6->4 [style = bold, label=""];
1->11 [style = dashed, label="0"];
3->8 [style = bold, label=""];
7->16 [style = bold, label=""];
5->7 [style = bold, label=""];
4->1 [style = bold, label=""];
1->2 [style = bold, label=""];
14->13 [style = bold, label=""];
13->8 [style = bold, label=""];
4->11 [style = bold, label=""];
12->9 [style = solid, label="stream"];
8->12 [style = bold, label=""];
3->16 [style = dashed, label="0"];
}
