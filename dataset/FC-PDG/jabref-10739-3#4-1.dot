digraph {
3 [style = filled, label = "assertEquals(Collections.singletonList(expected),importer.importAnnotations(Path.of(\"src/test/resources/pdfs/minimal-popup.pdf\")))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "popupNoteMinimal['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "popupNoteMinimal['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(Collections.singletonList(expected),importer.importAnnotations(Paths.get(\"src/test/resources/pdfs/minimal-polygon.pdf\")))@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final FileAnnotation expected = new FileAnnotation(\"Linus Dietz\",LocalDateTime.of(2017,3,16,9,21,1),1,\"polygon annotation\",FileAnnotationType.POLYGON,Optional.empty())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(Collections.singletonList(expected),importer.importAnnotations(Paths.get(\"src/test/resources/pdfs/minimal-popup.pdf\")))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "final FileAnnotation expected = new FileAnnotation(\"Linus Dietz\",LocalDateTime.of(2017,3,12,20,17,24),1,\"A simple pop-up note\",FileAnnotationType.TEXT,Optional.empty())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "polygonNoNoteMinimal['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1->3 [style = bold, label=""];
7->5 [style = solid, label="expected"];
4->1 [style = bold, label=""];
7->5 [style = bold, label=""];
0->3 [style = dashed, label="0"];
1->0 [style = bold, label=""];
1->7 [style = dashed, label="0"];
6->7 [style = bold, label=""];
0->5 [style = dashed, label="0"];
2->1 [style = bold, label=""];
1->3 [style = solid, label="expected"];
1->0 [style = solid, label="expected"];
}
