digraph {
15 [style = filled, label = "testLeaderPerformAssignment2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(Collections.emptyList(),leaderAssignment.tasks())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(Collections.singletonList(taskId1x1),memberAssignment.tasks())@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Map<String,ByteBuffer> configs = new HashMap<>()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "EasyMock.expect(configStorage.snapshot()).andReturn(configState1)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(Collections.emptyList(),memberAssignment.connectors())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "ConnectProtocol.Assignment leaderAssignment = ConnectProtocol.deserializeAssignment(result.get(\"leader\"))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ConnectProtocol.Assignment memberAssignment = ConnectProtocol.deserializeAssignment(result.get(\"member\"))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(1,memberAssignment.offset())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "PowerMock.verifyAll()@@@22@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(false,leaderAssignment.failed())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(Arrays.asList(taskId1x0,taskId2x0),leaderAssignment.tasks())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertEquals(1,leaderAssignment.offset())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "EasyMock.expect(configStorage.snapshot()).andReturn(configState2)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "PowerMock.replayAll()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(Collections.singletonList(taskId0),memberAssignment.tasks())@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(Collections.singletonList(connectorId1),leaderAssignment.connectors())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "testLeaderPerformAssignment2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertEquals(Arrays.asList(taskId1,taskId2),leaderAssignment.tasks())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertEquals(Collections.singletonList(connectorId2),memberAssignment.connectors())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"leader\",leaderAssignment.leader())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "configs.put(\"leader\",ConnectProtocol.serializeMetadata(new ConnectProtocol.WorkerState(LEADER_URL,1L)))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "configs.put(\"member\",ConnectProtocol.serializeMetadata(new ConnectProtocol.WorkerState(MEMBER_URL,1L)))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testLeaderPerformAssignment1['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Map<String,ByteBuffer> result = Whitebox.invokeMethod(coordinator,\"performAssignment\",\"leader\",WorkerCoordinator.DEFAULT_SUBPROTOCOL,configs)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(Collections.singletonList(connectorId),leaderAssignment.connectors())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "coordinator.metadata()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(false,memberAssignment.failed())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(\"leader\",memberAssignment.leader())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->17 [style = bold, label=""];
5->10 [style = bold, label=""];
0->9 [style = bold, label=""];
4->14 [style = bold, label=""];
25->28 [style = bold, label=""];
16->8 [style = bold, label=""];
2->1 [style = bold, label=""];
6->23 [style = bold, label=""];
24->0 [style = bold, label=""];
11->26 [style = dashed, label="0"];
28->9 [style = bold, label=""];
9->20 [style = bold, label=""];
8->6 [style = bold, label=""];
11->19 [style = bold, label=""];
1->26 [style = bold, label=""];
26->19 [style = bold, label=""];
0->28 [style = dashed, label="0"];
1->11 [style = bold, label=""];
22->3 [style = bold, label=""];
27->4 [style = bold, label=""];
7->5 [style = bold, label=""];
13->21 [style = dashed, label="0"];
13->27 [style = dashed, label="0"];
23->21 [style = bold, label=""];
10->12 [style = bold, label=""];
15->0 [style = bold, label=""];
12->18 [style = bold, label=""];
11->22 [style = bold, label=""];
17->13 [style = bold, label=""];
14->2 [style = bold, label=""];
17->23 [style = dashed, label="0"];
17->27 [style = bold, label=""];
20->7 [style = bold, label=""];
7->12 [style = solid, label="configs"];
19->3 [style = bold, label=""];
19->22 [style = dashed, label="0"];
21->4 [style = bold, label=""];
13->4 [style = bold, label=""];
18->16 [style = bold, label=""];
}
