digraph {
12 [style = filled, label = "{ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()env.setParallelism(4)env.setRestartStrategy(RestartStrategies.noRestart())try {env.generateSequence(1,10).rebalance().map(new FailingMapper1<>()).reduce(null).collect()fail(\"The program should have failed, but run successfully\")}catch (JobExecutionException e) }@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "{FailingMapper1.failuresBeforeSuccess = 1}@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "{ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()env.setParallelism(4)env.setRestartStrategy(RestartStrategies.noRestart())List<Long> resultCollection = env.generateSequence(1,10).rebalance().map(new FailingMapper1<>()).reduce((ReduceFunction<Long>)null).collect()long sum = 0for (long l : resultCollection){sum += l}assertEquals(55,sum)}@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testFailedRunThenSuccessfulRun['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "List<Long> resultCollection = env.generateSequence(1,10).rebalance().map(new FailingMapper3<>()).reduce(null).collect()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testRestartMultipleTimes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "env.setRestartStrategy(RestartStrategies.fixedDelayRestart(5,100))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "env.setParallelism(4)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "long sum = 0@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "{FailingMapper3.failuresBeforeSuccess = 3}@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(55,sum)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "sum += l@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testRestartMultipleTimes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
4->3 [style = bold, label=""];
4->1 [style = bold, label=""];
6->7 [style = bold, label=""];
5->0 [style = bold, label=""];
3->1 [style = bold, label=""];
8->2 [style = bold, label=""];
0->6 [style = solid, label="sum"];
2->4 [style = bold, label=""];
0->6 [style = bold, label=""];
9->2 [style = bold, label=""];
10->12 [style = bold, label=""];
11->13 [style = bold, label=""];
12->11 [style = bold, label=""];
}
