digraph {
11 [style = filled, label = "assertEquals(\"InputStream.available()\",stringSize - skipped1 - 1,input.available())@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertWithMessage(\"InputStream.reset() succeeded\").that(input.available()).isEqualTo(stringSize - skipped1)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "InputStream input = stringUnderTest.newInput()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertWithMessage(\"InputStream.reset(), read()\").that(input.read()).isEqualTo(testString.byteAt(nearEndIndex) & 0xFF)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "InputStream input = testString.newInput()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertWithMessage(\"InputStream.skip() incomplete\").that(skipped2).isEqualTo(stringSize - skipped1 - 1)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertWithMessage(\"InputStream.available()\").that(input.available()).isEqualTo(stringSize - skipped1 - 1)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(\"InputStream.reset() succeeded\",stringSize - skipped1,input.available())@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertThat(input.read(new byte((((,0,0)).isEqualTo(-1)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(\"InputStream.skip(), read()\",stringUnderTest.byteAt(nearEndIndex) & 0xFF,input.read())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(\"InputStream.skip()\",skipped1,nearEndIndex)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testNewInput_skip['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(\"InputStream.skip(), no more input\",-1,input.read())@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "input.reset()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(\"InputStream.reset(), read()\",testString.byteAt(nearEndIndex) & 0xFF,input.read())@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "assertWithMessage(\"InputStream.available()\").that(input.available()).isEqualTo(stringSize - skipped1)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "int nearEndIndex = stringSize * 2 / 3@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertWithMessage(\"InputStream.skip(), no more input\").that(input.available()).isEqualTo(0)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertEquals(\"InputStream.skip() incomplete\",skipped2,stringSize - skipped1 - 1)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(\"InputStream.available()\",stringSize - skipped1,input.available())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "long skipped1 = input.skip(nearEndIndex)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertWithMessage(\"InputStream.mark() is available\").that(input.markSupported()).isTrue()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertTrue(\"InputStream.mark() is available\",input.markSupported())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testNewInput_skip['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertWithMessage(\"InputStream.skip(), no more input\").that(input.read()).isEqualTo(-1)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertWithMessage(\"InputStream.skip()\").that(skipped1).isEqualTo(nearEndIndex)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "testNewInput_skip['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"InputStream.skip(), no more input\",0,input.available())@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertThat(input.skip(1)).isEqualTo(0)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(\"InputStream.reset(), read()\",stringUnderTest.byteAt(nearEndIndex) & 0xFF,input.read())@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "int stringSize = stringUnderTest.size()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "int stringSize = testString.size()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"InputStream.skip(), read()\",testString.byteAt(nearEndIndex) & 0xFF,input.read())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "long skipped2 = input.skip(stringSize)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "input.mark(0)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertWithMessage(\"InputStream.skip(), read()\").that(input.read()).isEqualTo(testString.byteAt(nearEndIndex) & 0xFF)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21->10 [style = bold, label=""];
29->10 [style = solid, label="stringSize"];
16->31 [style = dashed, label="0"];
0->19 [style = dashed, label="0"];
10->17 [style = bold, label=""];
29->11 [style = solid, label="stringSize"];
12->28 [style = solid, label="nearEndIndex"];
0->15 [style = bold, label=""];
1->13 [style = solid, label="stringSize"];
20->27 [style = bold, label=""];
5->34 [style = bold, label=""];
6->21 [style = solid, label="skipped1"];
3->5 [style = bold, label=""];
17->20 [style = dashed, label="0"];
17->14 [style = bold, label=""];
1->12 [style = bold, label=""];
12->31 [style = solid, label="nearEndIndex"];
27->19 [style = bold, label=""];
13->31 [style = bold, label=""];
13->18 [style = dashed, label="0"];
19->15 [style = bold, label=""];
7->26 [style = dashed, label="0"];
16->28 [style = dashed, label="0"];
4->23 [style = dashed, label="0"];
29->17 [style = solid, label="stringSize"];
7->34 [style = dashed, label="0"];
11->21 [style = dashed, label="0"];
15->13 [style = bold, label=""];
7->11 [style = bold, label=""];
6->24 [style = solid, label="skipped1"];
33->15 [style = bold, label=""];
22->9 [style = bold, label=""];
1->11 [style = solid, label="stringSize"];
4->2 [style = bold, label=""];
13->16 [style = bold, label=""];
18->28 [style = bold, label=""];
1->20 [style = solid, label="stringSize"];
6->4 [style = bold, label=""];
6->2 [style = solid, label="skipped1"];
12->23 [style = solid, label="nearEndIndex"];
10->17 [style = solid, label="skipped2"];
5->7 [style = bold, label=""];
2->24 [style = dashed, label="0"];
9->1 [style = bold, label=""];
6->13 [style = solid, label="skipped1"];
6->23 [style = bold, label=""];
2->3 [style = bold, label=""];
5->26 [style = bold, label=""];
30->32 [style = bold, label=""];
6->20 [style = solid, label="skipped1"];
1->24 [style = solid, label="stringSize"];
9->32 [style = dashed, label="0"];
26->21 [style = bold, label=""];
12->7 [style = solid, label="nearEndIndex"];
12->6 [style = solid, label="nearEndIndex"];
11->10 [style = bold, label=""];
24->25 [style = bold, label=""];
29->12 [style = solid, label="stringSize"];
1->2 [style = solid, label="stringSize"];
25->5 [style = bold, label=""];
1->17 [style = solid, label="stringSize"];
1->21 [style = solid, label="stringSize"];
6->18 [style = solid, label="skipped1"];
10->20 [style = bold, label=""];
12->4 [style = solid, label="nearEndIndex"];
1->10 [style = solid, label="stringSize"];
12->34 [style = solid, label="nearEndIndex"];
35->33 [style = bold, label=""];
1->29 [style = dashed, label="0"];
6->4 [style = solid, label="skipped1"];
6->17 [style = solid, label="skipped1"];
1->18 [style = solid, label="stringSize"];
12->6 [style = bold, label=""];
14->27 [style = dashed, label="0"];
15->18 [style = bold, label=""];
6->11 [style = solid, label="skipped1"];
34->11 [style = bold, label=""];
32->29 [style = bold, label=""];
23->24 [style = bold, label=""];
29->12 [style = bold, label=""];
14->0 [style = bold, label=""];
1->12 [style = solid, label="stringSize"];
8->9 [style = bold, label=""];
0->35 [style = bold, label=""];
12->16 [style = solid, label="nearEndIndex"];
29->2 [style = solid, label="stringSize"];
29->13 [style = solid, label="stringSize"];
12->26 [style = solid, label="nearEndIndex"];
3->25 [style = dashed, label="0"];
}
