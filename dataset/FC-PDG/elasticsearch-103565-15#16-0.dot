digraph {
31 [style = filled, label = "final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(Settings.EMPTY,transportService,clusterService,indicesService,threadPool,shardStateAction,new ActionFilters(Collections.emptySet()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final ShardId shardId = new ShardId(index,id)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final TransportReplicationAction.ReplicaResult result = listener.actionGet()@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "final IndexShard indexShard = mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "when(indexService.getShard(id)).thenReturn(indexShard)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertTrue(success.get())@@@22@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "final IndexService indexService = mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "action.dispatchedShardOperationOnReplica(request,indexShard,listener)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "action.shardOperationOnPrimary(request,indexShard,new LatchedActionListener<>(ActionTestUtils.assertNoFailureListener(null),latch))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final int id = randomIntBetween(0,4)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(Settings.EMPTY,transportService,clusterService,indicesService,threadPool,shardStateAction,new ActionFilters(Collections.emptySet()),new WriteMemoryLimits())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "verify(indexShard).persistRetentionLeases()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "PlainActionFuture<TransportReplicationAction.ReplicaResult> listener = PlainActionFuture.newFuture()@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "latch.await()@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "result.runPostReplicaActions(ActionListener.wrap(null,null))@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(Settings.EMPTY,transportService,clusterService,indicesService,threadPool,shardStateAction,new ActionFilters(Collections.emptySet()))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "final RetentionLeaseSyncAction.Request request = new RetentionLeaseSyncAction.Request(indexShard.shardId(),retentionLeases)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final Index index = new Index(\"index\",\"uuid\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final CountDownLatch latch = new CountDownLatch(1)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases)@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testRetentionLeaseBackgroundSyncActionOnPrimary['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "verify(indexShard).persistRetentionLeases()@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "when(indexShard.shardId()).thenReturn(shardId)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final AtomicBoolean success = new AtomicBoolean()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testRetentionLeaseSyncActionOnReplica['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "when(indicesService.indexServiceSafe(index)).thenReturn(indexService)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final IndicesService indicesService = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final TransportWriteAction.WriteReplicaResult<RetentionLeaseSyncAction.Request> result = action.shardOperationOnReplica(request,indexShard)@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final RetentionLeases retentionLeases = mock()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final RetentionLeaseBackgroundSyncAction.Request request = new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(),retentionLeases)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testRetentionLeaseSyncActionOnReplica['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5->10 [style = solid, label="index"];
16->15 [style = solid, label="request"];
10->18 [style = bold, label=""];
16->15 [style = bold, label=""];
18->31 [style = bold, label=""];
7->17 [style = bold, label=""];
12->28 [style = bold, label=""];
15->7 [style = bold, label=""];
5->9 [style = bold, label=""];
21->19 [style = bold, label=""];
28->30 [style = bold, label=""];
11->22 [style = solid, label="indicesService"];
9->2 [style = bold, label=""];
16->24 [style = bold, label=""];
30->29 [style = solid, label="latch"];
16->21 [style = solid, label="request"];
12->28 [style = solid, label="retentionLeases"];
14->10 [style = bold, label=""];
10->16 [style = solid, label="shardId"];
12->16 [style = bold, label=""];
10->28 [style = solid, label="shardId"];
0->10 [style = solid, label="id"];
12->7 [style = solid, label="retentionLeases"];
3->4 [style = bold, label=""];
31->12 [style = bold, label=""];
30->29 [style = bold, label=""];
12->16 [style = solid, label="retentionLeases"];
29->26 [style = bold, label=""];
11->31 [style = solid, label="indicesService"];
11->5 [style = bold, label=""];
2->0 [style = bold, label=""];
18->22 [style = bold, label=""];
13->12 [style = bold, label=""];
8->20 [style = bold, label=""];
24->21 [style = solid, label="listener"];
20->23 [style = bold, label=""];
27->11 [style = bold, label=""];
13->31 [style = dashed, label="0"];
24->21 [style = bold, label=""];
28->29 [style = solid, label="request"];
25->11 [style = bold, label=""];
0->1 [style = bold, label=""];
22->12 [style = bold, label=""];
6->11 [style = bold, label=""];
10->18 [style = solid, label="shardId"];
1->14 [style = solid, label="indexShard"];
12->3 [style = solid, label="retentionLeases"];
1->15 [style = solid, label="indexShard"];
18->13 [style = bold, label=""];
17->3 [style = bold, label=""];
1->29 [style = solid, label="indexShard"];
4->8 [style = bold, label=""];
1->14 [style = bold, label=""];
16->28 [style = dashed, label="0"];
13->22 [style = dashed, label="0"];
19->3 [style = bold, label=""];
11->13 [style = solid, label="indicesService"];
1->21 [style = solid, label="indexShard"];
9->2 [style = solid, label="indexService"];
}
