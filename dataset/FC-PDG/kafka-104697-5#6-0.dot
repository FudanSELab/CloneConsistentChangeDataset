digraph {
2 [style = filled, label = "assertEquals(expectedConfigs,Worker.producerConfigs(TASK_ID,\"connector-producer-\" + TASK_ID,config,connectorConfig,null,noneConnectorClientConfigOverridePolicy,CLUSTER_ID))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testProducerConfigsWithoutOverrides['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testConsumerConfigsWithoutOverrides['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "expectedConfigs.put(\"group.id\",\"connect-test\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "expectedConfigs.put(\"client.id\",\"connector-producer-job-0\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.expect(connectorConfig.originalsWithPrefix(ConnectorConfig.CONNECTOR_CLIENT_PRODUCER_OVERRIDES_PREFIX)).andReturn(new HashMap<String,Object>())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "expectedConfigs.put(\"metrics.context.connect.kafka.cluster.id\",CLUSTER_ID)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "EasyMock.expect(connectorConfig.originalsWithPrefix(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX)).andReturn(new HashMap<>())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Map<String,String> expectedConfigs = new HashMap<>(defaultProducerConfigs)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "expectedConfigs.put(\"client.id\",\"connector-consumer-test-1\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Map<String,String> expectedConfigs = new HashMap<>(defaultConsumerConfigs)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testProducerConfigsWithoutOverrides['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "EasyMock.expect(connectorConfig.originalsWithPrefix(ConnectorConfig.CONNECTOR_CLIENT_PRODUCER_OVERRIDES_PREFIX)).andReturn(new HashMap<>())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "PowerMock.replayAll()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "PowerMock.replayAll()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(expectedConfigs,Worker.consumerConfigs(new ConnectorTaskId(\"test\",1),config,connectorConfig,null,noneConnectorClientConfigOverridePolicy,CLUSTER_ID))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5->8 [style = dashed, label="0"];
6->1 [style = bold, label=""];
15->10 [style = solid, label="expectedConfigs"];
1->4 [style = bold, label=""];
3->5 [style = bold, label=""];
8->6 [style = bold, label=""];
13->9 [style = bold, label=""];
12->10 [style = bold, label=""];
14->15 [style = bold, label=""];
1->2 [style = solid, label="expectedConfigs"];
5->6 [style = bold, label=""];
15->11 [style = bold, label=""];
9->0 [style = bold, label=""];
7->8 [style = bold, label=""];
11->13 [style = bold, label=""];
0->12 [style = bold, label=""];
4->0 [style = bold, label=""];
0->2 [style = bold, label=""];
}
