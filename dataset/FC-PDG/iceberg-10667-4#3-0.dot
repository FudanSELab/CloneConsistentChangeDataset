digraph {
15 [style = filled, label = "DataWriteResult result = writer.result()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testClusteredDataWriterOutOfOrderPartitions['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "FileWriterFactory<T> writerFactory = newWriterFactory(table.schema())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testClusteredDataWriterOutOfOrderPartitions['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "writer.close()@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "AssertHelpers.assertThrows(\"Should fail to write out of order partitions\",,\"Encountered records that belong to already closed files\",null)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "PartitionSpec spec = table.spec()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "AssertHelpers.assertThrows(\"Should fail to write out of order partitions\",,\"Encountered records that belong to already closed files\",null)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "List<T> expectedRows = ImmutableList.of(toRow(1,\"aaa\"),toRow(2,\"aaa\"),toRow(3,\"bbb\"),toRow(4,\"bbb\"),toRow(5,\"ccc\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "writer.write(toRow(5,\"ccc\"),spec,partitionKey(spec,\"ccc\"))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "writer.write(toRow(4,\"bbb\"),spec,partitionKey(spec,\"bbb\"))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "result.dataFiles().forEach(null)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "table.updateSpec().addField(Expressions.ref(\"data\")).commit()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "writer.write(toRow(1,\"aaa\"),spec,partitionKey(spec,\"aaa\"))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "RowDelta rowDelta = table.newRowDelta()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "rowDelta.commit()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "writer.write(toRow(2,\"aaa\"),spec,partitionKey(spec,\"aaa\"))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ClusteredDataWriter<T> writer = new ClusteredDataWriter<>(writerFactory,fileFactory,table.io(),fileFormat,TARGET_FILE_SIZE)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testClusteredDataWriterMultiplePartitions['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(\"Records should match\",toSet(expectedRows),actualRowSet(\"*\"))@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "writer.close()@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "Assert.assertEquals(\"Must be 3 data files\",3,result.dataFiles().size())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "writer.write(toRow(3,\"bbb\"),spec,partitionKey(spec,\"bbb\"))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
1->8 [style = bold, label=""];
8->15 [style = bold, label=""];
16->22 [style = solid, label="expectedRows"];
15->21 [style = bold, label=""];
11->6 [style = bold, label=""];
3->4 [style = solid, label="writerFactory"];
11->7 [style = solid, label="spec"];
19->17 [style = bold, label=""];
16->22 [style = bold, label=""];
9->8 [style = bold, label=""];
3->4 [style = bold, label=""];
11->9 [style = solid, label="spec"];
7->9 [style = bold, label=""];
1->12 [style = dashed, label="0"];
2->0 [style = bold, label=""];
11->5 [style = solid, label="spec"];
21->20 [style = bold, label=""];
10->5 [style = bold, label=""];
6->10 [style = bold, label=""];
11->6 [style = solid, label="spec"];
12->14 [style = bold, label=""];
5->7 [style = bold, label=""];
9->12 [style = bold, label=""];
9->1 [style = bold, label=""];
4->11 [style = bold, label=""];
20->19 [style = bold, label=""];
18->0 [style = bold, label=""];
17->16 [style = bold, label=""];
13->0 [style = bold, label=""];
11->10 [style = solid, label="spec"];
}
