digraph {
14 [style = filled, label = "assertTrue(to.await(100,TimeUnit.MILLISECONDS))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "to.awaitDone(100,TimeUnit.MILLISECONDS)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertTrue(to.await(5,TimeUnit.SECONDS))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "to1.onSubscribe(Disposable.empty())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "to.assertNoErrors()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final TestObserver<Integer> to1 = TestObserver.create()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertTrue(to.await(100,TimeUnit.MILLISECONDS))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "to1.await()@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "await['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "to.assertNotComplete()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "to1.onSubscribe(Disposable.empty())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(to.isDisposed())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "TestObserver<Integer> to = TestObserver.create()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final TestObserverEx<Integer> to1 = new TestObserverEx<>()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "to.onComplete()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Schedulers.single().scheduleDirect(new Runnable(){@Override public void run(){to1.onComplete()}},200,TimeUnit.MILLISECONDS)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "to.awaitDone(5,TimeUnit.SECONDS)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "to.await()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "to.assertNoErrors()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "TestObserverEx<Integer> to = new TestObserverEx<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "TestObserverEx<Integer> to = new TestObserverEx<Integer>()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "Schedulers.single().scheduleDirect(new Runnable(){@Override public void run(){to1.onComplete()}},200,TimeUnit.MILLISECONDS)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "await['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "to.onComplete()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertFalse(to.await(100,TimeUnit.MILLISECONDS))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "to.assertNotTerminated()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "to.onSubscribe(Disposable.empty())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "await['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertFalse(to.await(100,TimeUnit.MILLISECONDS))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "to1.await()@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "to.assertComplete()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
6->17 [style = bold, label=""];
22->26 [style = bold, label=""];
4->14 [style = bold, label=""];
0->9 [style = bold, label=""];
15->2 [style = bold, label=""];
16->18 [style = bold, label=""];
2->20 [style = dashed, label="0"];
23->30 [style = bold, label=""];
28->20 [style = bold, label=""];
3->25 [style = bold, label=""];
17->9 [style = bold, label=""];
18->11 [style = bold, label=""];
6->0 [style = bold, label=""];
3->12 [style = bold, label=""];
9->10 [style = bold, label=""];
0->17 [style = dashed, label="0"];
10->7 [style = bold, label=""];
30->29 [style = bold, label=""];
14->1 [style = bold, label=""];
25->27 [style = bold, label=""];
19->1 [style = bold, label=""];
12->25 [style = dashed, label="0"];
0->23 [style = bold, label=""];
5->6 [style = bold, label=""];
13->3 [style = bold, label=""];
12->4 [style = bold, label=""];
24->21 [style = bold, label=""];
21->22 [style = bold, label=""];
2->18 [style = dashed, label="0"];
11->8 [style = bold, label=""];
27->19 [style = bold, label=""];
29->24 [style = bold, label=""];
2->11 [style = bold, label=""];
6->23 [style = dashed, label="0"];
8->13 [style = bold, label=""];
20->11 [style = bold, label=""];
}
