digraph {
24 [style = filled, label = "testSearchWithSplitRoaring['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "int i = 0@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "tree.insert(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8ed2cd,i)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "RTree tree = new RTree(2,new LinearGutmanSplitStrategy(0,50,bf),bf)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Random rand = ThreadLocalRandom.current()@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertTrue(expected.contains(iter.next()))@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Set<Integer> expected = Sets.newHashSet(1,2,3,4,5)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "iter.hasNext()@@@36@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "BitmapFactory bf = new ConciseBitmapFactory()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "tree.insert(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8ed283,1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "BitmapFactory bf = new RoaringBitmapFactory()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testSearchWithSplit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "tree.insert(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8ed28d,2)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "tree.insert(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8ed2a1,4)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testSearchWithSplit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Random rand = new Random()@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "i++@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "tree.insert(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8ed2ab,5)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "IntIterator iter = finalSet.iterator()@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "i < 95@@@22@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "tree.insert(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8ed297,3)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ImmutableBitmap finalSet = bf.union(points)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(finalSet.size() >= 5)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Iterable<ImmutableBitmap> points = searchTree.search(new RadiusBound(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8ed2fa,5))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->8 [style = bold, label=""];
0->16 [style = bold, label=""];
22->2 [style = bold, label=""];
3->1 [style = bold, label=""];
13->14 [style = solid, label="tree"];
20->9 [style = bold, label=""];
7->10 [style = bold, label=""];
8->18 [style = bold, label=""];
2->3 [style = bold, label=""];
3->14 [style = bold, label=""];
18->15 [style = bold, label=""];
16->7 [style = bold, label=""];
4->19 [style = bold, label=""];
11->22 [style = dashed, label="0"];
6->19 [style = bold, label=""];
0->16 [style = solid, label="points"];
23->13 [style = solid, label="bf"];
5->17 [style = bold, label=""];
10->6 [style = bold, label=""];
2->3 [style = solid, label="i"];
11->2 [style = bold, label=""];
9->23 [style = dashed, label="0"];
15->22 [style = bold, label=""];
9->13 [style = solid, label="bf"];
21->9 [style = bold, label=""];
15->11 [style = bold, label=""];
14->0 [style = bold, label=""];
23->13 [style = bold, label=""];
19->4 [style = dotted, label="true"];
3->12 [style = dotted, label="true"];
2->12 [style = solid, label="i"];
2->1 [style = solid, label="i"];
12->1 [style = solid, label="i"];
1->12 [style = bold, label=""];
13->5 [style = bold, label=""];
12->3 [style = bold, label=""];
19->4 [style = bold, label=""];
12->3 [style = solid, label="i"];
3->1 [style = dotted, label="true"];
9->13 [style = bold, label=""];
24->23 [style = bold, label=""];
}
