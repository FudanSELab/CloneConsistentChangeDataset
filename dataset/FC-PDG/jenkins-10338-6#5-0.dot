digraph {
1 [style = filled, label = "FreeStyleBuild b = r.buildAndAssertSuccess(p)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "System.out.println(raw.getContent())@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "consoleAnnotationFilterOut['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertEquals(1,DomNodeUtil.selectNodes(rsp,\"//B(@class='demo'(\").size())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "completedStatelessLogAnnotation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(xml,3,xml.split(\"ooo\").length)@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "TextPage raw = (TextPage)r.createWebClient().goTo(b.getUrl() + \"consoleText\",\"text/plain\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "String xml = rsp.asXml()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "TextPage raw = (TextPage)r.createWebClient().goTo(b.getUrl() + \"consoleText\",\"text/plain\")@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String nl = System.getProperty(\"line.separator\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(raw.getContent(),containsString(\"abcdef\"))@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "p.getBuildersList().add(new TestBuilder(){public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener){listener.getLogger().println(\"---\")listener.getLogger().println(\"ooo\")listener.getLogger().println(\"ooo\")return true}})@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "FreeStyleProject p = r.createFreeStyleProject()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "consoleAnnotationFilterOut['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(raw.getContent().contains(nl + \"---\" + nl + \"ooo\" + nl + \"ooo\" + nl))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "FreeStyleBuild b = r.buildAndAssertSuccess(p)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "HtmlPage rsp = r.createWebClient().getPage(b,\"console\")@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->7 [style = bold, label=""];
8->9 [style = bold, label=""];
8->5 [style = bold, label=""];
2->1 [style = solid, label="b"];
16->15 [style = bold, label=""];
11->16 [style = solid, label="nl"];
11->16 [style = bold, label=""];
7->1 [style = solid, label="p"];
1->6 [style = bold, label=""];
6->8 [style = bold, label=""];
3->7 [style = bold, label=""];
0->11 [style = bold, label=""];
1->6 [style = solid, label="b"];
4->1 [style = bold, label=""];
4->2 [style = bold, label=""];
15->13 [style = solid, label="xml"];
6->12 [style = dashed, label="0"];
10->7 [style = bold, label=""];
5->0 [style = bold, label=""];
12->5 [style = bold, label=""];
7->4 [style = bold, label=""];
2->1 [style = bold, label=""];
15->13 [style = bold, label=""];
6->12 [style = bold, label=""];
7->2 [style = solid, label="p"];
5->9 [style = dashed, label="0"];
}
