digraph {
71 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testCanStartFromLaterThanEarliestOffset['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "i < records.size()@@@38@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "kafkaProducer.commitTransaction()@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@19@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "kafkaProducer.commitTransaction()@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "Assert.assertTrue(checkpoint2.getPartitionSequenceNumberMap().equals(nextOffsets))@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "i < numToAdd@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,1L),ImmutableSet.of())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
45 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "kafkaProducer.initTransactions()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,0L),ImmutableSet.of())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@25@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "i++@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,currentOffsets)))))@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Assert.assertEquals(checkpoint1.getPartitionSequenceNumberMap(),currentOffsets)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "kafkaProducer.beginTransaction()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "SegmentDescriptor desc4 = sd(task,\"2011/P1D\",0)@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@70@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testCanStartFromLaterThanEarliestOffset['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint2 = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,0L))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "maxTotalRows = null@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@69@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
69 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,3L,1,0L))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(topic,currentOffsets,ImmutableSet.of())),new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,nextOffsets)))))@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2010/P1D\",0)@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,1L),ImmutableSet.of())@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "kafkaProducer.beginTransaction()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "kafkaProducer.initTransactions()@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "i++@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Thread.sleep(10)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "SegmentDescriptor desc5 = sd(task,\"2011/P1D\",1)@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "int numToAdd = records.size() - 2@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "kafkaProducer.commitTransaction()@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "SegmentDescriptor desc6 = sd(task,\"2012/P1D\",0)@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@31@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "kafkaProducer.initTransactions()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "maxTotalRows = 3L@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
73 [style = filled, label = "final Map<Integer,Long> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "kafkaProducer.send(record).get()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "int i = numToAdd@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "int i = 0@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "insertData()@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@20@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
48 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "Thread.sleep(10)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49->55 [style = solid, label="desc3"];
76->47 [style = solid, label="desc4"];
29->30 [style = bold, label=""];
22->23 [style = solid, label="task"];
52->28 [style = dotted, label="true"];
74->72 [style = bold, label=""];
29->31 [style = solid, label="i"];
25->37 [style = solid, label="task"];
39->54 [style = bold, label=""];
75->35 [style = solid, label="desc7"];
3->13 [style = solid, label="task"];
38->73 [style = bold, label=""];
49->71 [style = solid, label="desc3"];
52->28 [style = bold, label=""];
26->74 [style = bold, label=""];
32->56 [style = solid, label="currentOffsets"];
3->36 [style = bold, label=""];
64->31 [style = bold, label=""];
28->52 [style = bold, label=""];
53->34 [style = bold, label=""];
25->45 [style = solid, label="task"];
33->46 [style = bold, label=""];
54->40 [style = solid, label="i"];
76->55 [style = solid, label="desc4"];
31->30 [style = bold, label=""];
76->37 [style = bold, label=""];
75->47 [style = bold, label=""];
63->75 [style = bold, label=""];
9->14 [style = bold, label=""];
78->71 [style = bold, label=""];
5->25 [style = solid, label="baseSequenceName"];
23->17 [style = bold, label=""];
68->78 [style = bold, label=""];
66->60 [style = bold, label=""];
43->29 [style = bold, label=""];
41->45 [style = bold, label=""];
62->40 [style = bold, label=""];
56->65 [style = bold, label=""];
60->66 [style = bold, label=""];
40->61 [style = bold, label=""];
36->69 [style = bold, label=""];
41->47 [style = solid, label="desc1"];
12->11 [style = bold, label=""];
37->47 [style = solid, label="desc5"];
37->50 [style = solid, label="desc5"];
63->47 [style = solid, label="desc6"];
32->24 [style = solid, label="currentOffsets"];
22->23 [style = bold, label=""];
40->62 [style = dotted, label="true"];
50->67 [style = bold, label=""];
32->42 [style = solid, label="currentOffsets"];
2->25 [style = solid, label="consumerProps"];
20->18 [style = bold, label=""];
32->65 [style = solid, label="currentOffsets"];
76->50 [style = solid, label="desc4"];
5->6 [style = bold, label=""];
37->55 [style = solid, label="desc5"];
21->22 [style = bold, label=""];
7->2 [style = bold, label=""];
1->3 [style = solid, label="consumerProps"];
44->68 [style = bold, label=""];
57->5 [style = bold, label=""];
37->63 [style = bold, label=""];
66->51 [style = bold, label=""];
59->55 [style = bold, label=""];
41->55 [style = solid, label="desc1"];
62->40 [style = solid, label="i"];
25->76 [style = solid, label="task"];
16->20 [style = bold, label=""];
32->42 [style = bold, label=""];
67->35 [style = bold, label=""];
13->0 [style = bold, label=""];
7->3 [style = solid, label="startPartitions"];
54->40 [style = bold, label=""];
66->60 [style = dotted, label="true"];
36->56 [style = solid, label="startPartitions"];
73->26 [style = solid, label="nextOffsets"];
1->8 [style = bold, label=""];
73->65 [style = solid, label="nextOffsets"];
24->66 [style = bold, label=""];
2->3 [style = bold, label=""];
11->4 [style = bold, label=""];
75->55 [style = solid, label="desc7"];
18->22 [style = solid, label="startPartitions"];
5->3 [style = solid, label="baseSequenceName"];
42->24 [style = bold, label=""];
47->59 [style = bold, label=""];
25->63 [style = solid, label="task"];
45->47 [style = solid, label="desc2"];
63->55 [style = solid, label="desc6"];
19->16 [style = bold, label=""];
30->64 [style = bold, label=""];
58->53 [style = bold, label=""];
10->5 [style = bold, label=""];
8->2 [style = bold, label=""];
2->3 [style = solid, label="endPartitions"];
73->26 [style = bold, label=""];
21->22 [style = solid, label="endPartitions"];
6->33 [style = bold, label=""];
69->27 [style = bold, label=""];
9->19 [style = bold, label=""];
51->43 [style = bold, label=""];
4->1 [style = bold, label=""];
18->21 [style = bold, label=""];
12->39 [style = bold, label=""];
70->56 [style = bold, label=""];
49->47 [style = solid, label="desc3"];
61->62 [style = bold, label=""];
45->78 [style = solid, label="desc2"];
30->31 [style = dotted, label="true"];
30->38 [style = bold, label=""];
16->22 [style = solid, label="consumerProps"];
49->76 [style = bold, label=""];
46->12 [style = bold, label=""];
29->30 [style = solid, label="i"];
46->29 [style = solid, label="numToAdd"];
72->70 [style = bold, label=""];
45->49 [style = bold, label=""];
63->67 [style = solid, label="desc6"];
34->41 [style = bold, label=""];
48->25 [style = solid, label="endPartitions"];
45->55 [style = solid, label="desc2"];
15->5 [style = bold, label=""];
8->7 [style = bold, label=""];
9->33 [style = dashed, label="0"];
25->77 [style = solid, label="task"];
25->49 [style = solid, label="task"];
41->68 [style = solid, label="desc1"];
30->64 [style = dotted, label="true"];
55->44 [style = bold, label=""];
5->22 [style = solid, label="baseSequenceName"];
73->74 [style = solid, label="nextOffsets"];
25->41 [style = solid, label="task"];
65->58 [style = bold, label=""];
31->30 [style = solid, label="i"];
71->50 [style = bold, label=""];
52->32 [style = bold, label=""];
54->62 [style = solid, label="i"];
77->52 [style = bold, label=""];
14->12 [style = bold, label=""];
36->25 [style = solid, label="startPartitions"];
25->75 [style = solid, label="task"];
27->48 [style = bold, label=""];
48->25 [style = bold, label=""];
3->13 [style = bold, label=""];
46->40 [style = solid, label="numToAdd"];
25->77 [style = bold, label=""];
6->9 [style = bold, label=""];
75->47 [style = solid, label="desc7"];
7->36 [style = dashed, label="0"];
40->8 [style = bold, label=""];
40->61 [style = dotted, label="true"];
}
