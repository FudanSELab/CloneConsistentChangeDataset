digraph {
0 [style = filled, label = "startLocatorWorksWithNoOptions['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Properties gemfireProperties = gemfirePropertiesCaptor.getValue()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(gemfireProperties.get(JMX_MANAGER_HOSTNAME_FOR_CLIENTS)).isEqualTo(FAKE_HOSTNAME)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "commandRule.executeAndAssertThat(spy,\"start locator\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertThat(gemfireProperties).containsKey(JMX_MANAGER_HOSTNAME_FOR_CLIENTS)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ArgumentCaptor<Properties> gemfirePropertiesCaptor = ArgumentCaptor.forClass()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Properties gemfireProperties = gemfirePropertiesCaptor.getValue()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ArgumentCaptor<Properties> gemfirePropertiesCaptor = ArgumentCaptor.forClass()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String startServerCommand = new CommandStringBuilder(\"start server\").addOption(JMX_MANAGER_HOSTNAME_FOR_CLIENTS,FAKE_HOSTNAME).toString()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "startLocatorWorksWithNoOptions['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "verify(spy).createStartServerCommandLine(any(),any(),any(),gemfirePropertiesCaptor.capture(),any(),any(),any(),any(),any(),any())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(gemfireProperties.get(ENABLE_CLUSTER_CONFIGURATION)).isEqualTo(\"true\")@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "commandRule.executeCommandWithInstance(spy,startServerCommand)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "startServerRespectsJmxManagerHostnameForClients['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "commandRule.executeCommandWithInstance(spy,\"start locator\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0->3 [style = bold, label=""];
3->8 [style = dashed, label="0"];
14->10 [style = bold, label=""];
5->1 [style = bold, label=""];
1->12 [style = dashed, label="0"];
1->4 [style = bold, label=""];
3->5 [style = bold, label=""];
13->9 [style = bold, label=""];
10->11 [style = bold, label=""];
6->13 [style = dashed, label="0"];
8->5 [style = bold, label=""];
7->8 [style = bold, label=""];
12->6 [style = bold, label=""];
4->6 [style = bold, label=""];
11->1 [style = bold, label=""];
10->11 [style = solid, label="startServerCommand"];
2->9 [style = dashed, label="0"];
6->13 [style = bold, label=""];
1->12 [style = bold, label=""];
6->2 [style = bold, label=""];
}
