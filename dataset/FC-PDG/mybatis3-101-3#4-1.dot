digraph {
20 [style = filled, label = "shouldCheckSetterExistance['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertTrue(meta.hasSetter(\"richProperty\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(meta.hasGetter(\"richMap\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "shouldCheckGetterExistance['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertTrue(meta.hasSetter(\"richType.richProperty\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertTrue(meta.hasSetter(\"richType.richField\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(meta.hasGetter(\"richType.richList(0(\"))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(meta.hasGetter(\"richType.richList\"))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "MetaClass meta = MetaClass.forClass(,reflectorFactory)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertTrue(meta.hasSetter(\"richType.richMap\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertTrue(meta.hasGetter(\"richType.richField\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertTrue(meta.hasSetter(\"richList(0(\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertFalse(meta.hasGetter(\"(0(\"))@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "assertFalse(meta.hasSetter(\"(0(\"))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(meta.hasGetter(\"richType\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertTrue(meta.hasSetter(\"richList\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(meta.hasGetter(\"richField\"))@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ReflectorFactory reflectorFactory = new DefaultReflectorFactory()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "shouldCheckGetterExistance['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertTrue(meta.hasGetter(\"richType.richMap\"))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertTrue(meta.hasGetter(\"richType.richProperty\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertTrue(meta.hasSetter(\"richType\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "MetaClass meta = MetaClass.forClass()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(meta.hasGetter(\"richList\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertTrue(meta.hasSetter(\"richType.richList(0(\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertTrue(meta.hasGetter(\"richList(0(\"))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(meta.hasGetter(\"richProperty\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertTrue(meta.hasSetter(\"richField\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertTrue(meta.hasGetter(\"richField\"))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(meta.hasSetter(\"richMap\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertTrue(meta.hasSetter(\"richType.richList\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->23 [style = dashed, label="0"];
30->22 [style = bold, label=""];
23->30 [style = bold, label=""];
0->13 [style = bold, label=""];
3->24 [style = dashed, label="0"];
7->0 [style = bold, label=""];
1->21 [style = dashed, label="0"];
12->9 [style = bold, label=""];
15->16 [style = bold, label=""];
0->22 [style = dashed, label="0"];
11->2 [style = bold, label=""];
13->1 [style = bold, label=""];
5->25 [style = bold, label=""];
1->17 [style = bold, label=""];
20->5 [style = bold, label=""];
19->24 [style = bold, label=""];
9->19 [style = dashed, label="0"];
4->25 [style = dashed, label="0"];
25->27 [style = bold, label=""];
3->10 [style = bold, label=""];
24->26 [style = bold, label=""];
6->5 [style = bold, label=""];
11->28 [style = dashed, label="0"];
22->18 [style = bold, label=""];
10->26 [style = dashed, label="0"];
29->19 [style = bold, label=""];
28->23 [style = bold, label=""];
7->30 [style = dashed, label="0"];
5->4 [style = bold, label=""];
12->29 [style = dashed, label="0"];
9->3 [style = bold, label=""];
4->8 [style = bold, label=""];
16->14 [style = bold, label=""];
16->14 [style = solid, label="reflectorFactory"];
8->27 [style = dashed, label="0"];
14->8 [style = bold, label=""];
26->28 [style = bold, label=""];
2->7 [style = bold, label=""];
27->29 [style = bold, label=""];
18->21 [style = bold, label=""];
13->18 [style = dashed, label="0"];
8->12 [style = bold, label=""];
10->11 [style = bold, label=""];
}
