digraph {
8 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new ExtractionDimensionSpec(\"quality\",\"alias\",new LookupExtractionFn(new MapLookupExtractor(map,false),true,null,true,false))).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(QueryRunnerTestHelper.dayGran).build()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "map.put(\"business\",\"business0\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "map.put(\"news\",\"news0\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "map.put(\"mezzanine\",\"mezzanine0\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testGroupByWithSimpleRename['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "map.put(\"entertainment\",\"entertainment0\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "map.put(\"premium\",\"premium0\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"simple-rename\")@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "map.put(\"automotive\",\"automotive0\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testGroupByWithSimpleRenameRetainMissing['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"retain-missing\")@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Map<String,String> map = new HashMap<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "map.put(\"health\",\"health0\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new ExtractionDimensionSpec(\"quality\",\"alias\",new LookupExtractionFn(new MapLookupExtractor(map,false),true,null,true,false))).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(QueryRunnerTestHelper.dayGran).build()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testGroupByWithSimpleRenameRetainMissing['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "List<ResultRow> expectedResults = Arrays.asList(makeRow(query,\"2011-04-01\",\"alias\",\"automotive0\",\"rows\",1L,\"idx\",135L),makeRow(query,\"2011-04-01\",\"alias\",\"business0\",\"rows\",1L,\"idx\",118L),makeRow(query,\"2011-04-01\",\"alias\",\"entertainment0\",\"rows\",1L,\"idx\",158L),makeRow(query,\"2011-04-01\",\"alias\",\"health0\",\"rows\",1L,\"idx\",120L),makeRow(query,\"2011-04-01\",\"alias\",\"mezzanine0\",\"rows\",3L,\"idx\",2870L),makeRow(query,\"2011-04-01\",\"alias\",\"news0\",\"rows\",1L,\"idx\",121L),makeRow(query,\"2011-04-01\",\"alias\",\"premium0\",\"rows\",3L,\"idx\",2900L),makeRow(query,\"2011-04-01\",\"alias\",\"technology0\",\"rows\",1L,\"idx\",78L),makeRow(query,\"2011-04-01\",\"alias\",\"travel0\",\"rows\",1L,\"idx\",119L),makeRow(query,\"2011-04-02\",\"alias\",\"automotive0\",\"rows\",1L,\"idx\",147L),makeRow(query,\"2011-04-02\",\"alias\",\"business0\",\"rows\",1L,\"idx\",112L),makeRow(query,\"2011-04-02\",\"alias\",\"entertainment0\",\"rows\",1L,\"idx\",166L),makeRow(query,\"2011-04-02\",\"alias\",\"health0\",\"rows\",1L,\"idx\",113L),makeRow(query,\"2011-04-02\",\"alias\",\"mezzanine0\",\"rows\",3L,\"idx\",2447L),makeRow(query,\"2011-04-02\",\"alias\",\"news0\",\"rows\",1L,\"idx\",114L),makeRow(query,\"2011-04-02\",\"alias\",\"premium0\",\"rows\",3L,\"idx\",2505L),makeRow(query,\"2011-04-02\",\"alias\",\"technology0\",\"rows\",1L,\"idx\",97L),makeRow(query,\"2011-04-02\",\"alias\",\"travel0\",\"rows\",1L,\"idx\",126L))@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "map.put(\"technology\",\"technology0\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new ExtractionDimensionSpec(\"quality\",\"alias\",new LookupExtractionFn(new MapLookupExtractor(map,false),false,null,true,false))).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(QueryRunnerTestHelper.dayGran).build()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "map.put(\"travel\",\"travel0\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"automotive0\",\"rows\",1L,\"idx\",135L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"business0\",\"rows\",1L,\"idx\",118L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"entertainment0\",\"rows\",1L,\"idx\",158L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"health0\",\"rows\",1L,\"idx\",120L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"mezzanine0\",\"rows\",3L,\"idx\",2870L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"news0\",\"rows\",1L,\"idx\",121L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"premium0\",\"rows\",3L,\"idx\",2900L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"technology0\",\"rows\",1L,\"idx\",78L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"travel0\",\"rows\",1L,\"idx\",119L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"automotive0\",\"rows\",1L,\"idx\",147L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"business0\",\"rows\",1L,\"idx\",112L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"entertainment0\",\"rows\",1L,\"idx\",166L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"health0\",\"rows\",1L,\"idx\",113L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"mezzanine0\",\"rows\",3L,\"idx\",2447L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"news0\",\"rows\",1L,\"idx\",114L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"premium0\",\"rows\",3L,\"idx\",2505L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"technology0\",\"rows\",1L,\"idx\",97L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"travel0\",\"rows\",1L,\"idx\",126L))@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->3 [style = solid, label="results"];
2->3 [style = solid, label="expectedResults"];
16->15 [style = bold, label=""];
0->9 [style = bold, label=""];
7->17 [style = bold, label=""];
11->15 [style = dashed, label="0"];
16->3 [style = solid, label="expectedResults"];
4->13 [style = bold, label=""];
8->20 [style = dashed, label="0"];
11->19 [style = solid, label="results"];
6->0 [style = bold, label=""];
7->20 [style = bold, label=""];
5->14 [style = bold, label=""];
9->10 [style = bold, label=""];
11->19 [style = bold, label=""];
7->8 [style = bold, label=""];
15->3 [style = bold, label=""];
10->7 [style = bold, label=""];
14->1 [style = bold, label=""];
15->3 [style = solid, label="results"];
3->19 [style = dashed, label="0"];
20->2 [style = bold, label=""];
1->6 [style = bold, label=""];
18->4 [style = bold, label=""];
20->11 [style = solid, label="query"];
8->2 [style = bold, label=""];
12->4 [style = bold, label=""];
11->3 [style = bold, label=""];
2->19 [style = solid, label="expectedResults"];
17->16 [style = solid, label="query"];
13->5 [style = bold, label=""];
8->17 [style = dashed, label="0"];
17->15 [style = solid, label="query"];
8->11 [style = solid, label="query"];
2->11 [style = bold, label=""];
17->16 [style = bold, label=""];
21->4 [style = bold, label=""];
}
