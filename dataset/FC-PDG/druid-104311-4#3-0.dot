digraph {
8 [style = filled, label = "EasyMock.expect(workerHolder.getContinuouslyFailedTasksCount()).andReturn(0)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(task.getId(),Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "EasyMock.verify(rogueWorkerHolder)@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "EasyMock.verify(workerHolder)@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<Object> listenerNotificationsAccumulator = new ArrayList<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(task,TaskStatus.failure(task.getId()),TaskLocation.create(\"rogue-worker\",1,2)),rogueWorkerHolder)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "rogueWorkerHolder = EasyMock.createMock()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "testTaskAddedOrUpdated1['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(task,TaskStatus.success(task.getId()),TaskLocation.create(\"worker\",1,2)),workerHolder)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "EasyMock.expect(rogueWorkerHolder.getWorker()).andReturn(new Worker(\"http\",\"rogue-worker\",\"127.0.0.1\",5,\"v1\")).anyTimes()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "EasyMock.verify(rogueWorkerHolder)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "EasyMock.replay(rogueWorkerHolder)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "EasyMock.replay(rogueWorkerHolder)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "rogueWorkerHolder.shutdownTask(task.getId())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "rogueWorkerHolder = EasyMock.createMock()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Worker worker = new Worker(\"http\",\"localhost\",\"127.0.0.1\",1,\"v1\",WorkerConfig.DEFAULT_CATEGORY)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Future<TaskStatus> future = taskRunner.run(task)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(task,TaskStatus.running(task.getId()),TaskLocation.create(\"worker\",1000,1001)),workerHolder)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Worker worker = new Worker(\"http\",\"localhost\",\"127.0.0.1\",1,\"v1\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "EasyMock.expect(workerHolder.getWorker()).andReturn(worker).anyTimes()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "EasyMock.verify(rogueWorkerHolder)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "EasyMock.expect(rogueWorkerHolder.getWorker()).andReturn(new Worker(\"http\",\"rogue-worker\",\"127.0.0.1\",5,\"v1\")).anyTimes()@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "EasyMock.verify(rogueWorkerHolder)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testTaskAddedOrUpdated2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "EasyMock.replay(workerHolder)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testTaskAddedOrUpdated2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "Assert.assertEquals(task.getId(),Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "EasyMock.expect(rogueWorkerHolder.getWorker()).andReturn(new Worker(\"http\",\"rogue-worker\",\"127.0.0.1\",5,\"v1\")).anyTimes()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "workerHolder.resetContinuouslyFailedTasksCount()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "WorkerHolder rogueWorkerHolder = EasyMock.createMock()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "EasyMock.replay(rogueWorkerHolder)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(task,TaskStatus.running(task.getId()),TaskLocation.create(\"worker\",1,2)),workerHolder)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "rogueWorkerHolder = EasyMock.createMock()@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "rogueWorkerHolder.shutdownTask(task.getId())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "WorkerHolder workerHolder = EasyMock.createMock()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "workerHolder.setLastCompletedTaskTime(EasyMock.anyObject())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Assert.assertEquals(task.getId(),Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "HttpRemoteTaskRunner taskRunner = createTaskRunnerForTestTaskAddedOrUpdated(EasyMock.createStrictMock(),listenerNotificationsAccumulator)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Task task = NoopTask.create(\"task\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(task.getId(),Iterables.getOnlyElement(taskRunner.getPendingTasks()).getTaskId())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(task,TaskStatus.running(task.getId()),TaskLocation.create(\"worker\",1,2)),workerHolder)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Assert.assertEquals(task.getId(),Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "EasyMock.expect(workerHolder.getWorker()).andReturn(new Worker(\"http\",\"worker\",\"127.0.0.1\",1,\"v1\")).anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "Assert.assertEquals(task.getId(),Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "EasyMock.expect(rogueWorkerHolder.getWorker()).andReturn(new Worker(\"http\",\"rogue-worker\",\"127.0.0.1\",5,\"v1\")).anyTimes()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(task.getId(),Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId())@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(task,TaskStatus.running(task.getId()),TaskLocation.create(\"rogue-worker\",1,2)),rogueWorkerHolder)@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(task,TaskStatus.running(task.getId()),TaskLocation.create(\"rogue-worker\",1,2)),rogueWorkerHolder)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "Assert.assertEquals(task.getId(),Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertEquals(task.getId(),Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "EasyMock.replay(rogueWorkerHolder)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(task,TaskStatus.failure(task.getId()),TaskLocation.create(\"rogue-worker\",1,2)),rogueWorkerHolder)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(listenerNotificationsAccumulator,ImmutableList.of(ImmutableList.of(task.getId(),TaskLocation.create(\"worker\",1,2)),ImmutableList.of(task.getId(),TaskStatus.success(task.getId()))))@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(listenerNotificationsAccumulator,ImmutableList.of(ImmutableList.of(task.getId(),TaskLocation.create(\"worker\",1000,1001)),ImmutableList.of(task.getId(),TaskLocation.create(\"worker\",1,2)),ImmutableList.of(task.getId(),TaskStatus.success(task.getId()))))@@@51@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13->11 [style = solid, label="workerHolder"];
37->49 [style = bold, label=""];
55->47 [style = bold, label=""];
48->53 [style = solid, label="rogueWorkerHolder"];
14->17 [style = bold, label=""];
3->38 [style = bold, label=""];
45->31 [style = bold, label=""];
40->23 [style = bold, label=""];
10->38 [style = solid, label="task"];
21->28 [style = bold, label=""];
6->35 [style = dashed, label="0"];
9->19 [style = dashed, label="0"];
3->5 [style = bold, label=""];
12->10 [style = bold, label=""];
39->51 [style = bold, label=""];
24->11 [style = bold, label=""];
43->24 [style = bold, label=""];
53->32 [style = bold, label=""];
47->26 [style = bold, label=""];
48->21 [style = bold, label=""];
29->43 [style = bold, label=""];
13->5 [style = solid, label="workerHolder"];
41->45 [style = bold, label=""];
33->22 [style = solid, label="rogueWorkerHolder"];
10->27 [style = solid, label="task"];
10->41 [style = solid, label="task"];
16->9 [style = bold, label=""];
23->44 [style = bold, label=""];
42->46 [style = bold, label=""];
31->5 [style = bold, label=""];
22->41 [style = bold, label=""];
16->19 [style = bold, label=""];
1->11 [style = bold, label=""];
15->50 [style = dashed, label="0"];
19->13 [style = bold, label=""];
13->38 [style = solid, label="workerHolder"];
7->2 [style = bold, label=""];
10->0 [style = bold, label=""];
20->51 [style = solid, label="rogueWorkerHolder"];
13->15 [style = bold, label=""];
10->5 [style = solid, label="task"];
10->46 [style = solid, label="task"];
26->42 [style = solid, label="rogueWorkerHolder"];
10->2 [style = solid, label="task"];
13->7 [style = solid, label="workerHolder"];
17->8 [style = bold, label=""];
0->16 [style = bold, label=""];
16->13 [style = bold, label=""];
0->6 [style = solid, label="listenerNotificationsAccumulator"];
10->36 [style = solid, label="task"];
13->36 [style = solid, label="workerHolder"];
15->14 [style = bold, label=""];
26->43 [style = solid, label="rogueWorkerHolder"];
1->48 [style = bold, label=""];
2->3 [style = bold, label=""];
20->49 [style = solid, label="rogueWorkerHolder"];
0->16 [style = solid, label="listenerNotificationsAccumulator"];
50->14 [style = bold, label=""];
48->47 [style = solid, label="rogueWorkerHolder"];
13->23 [style = solid, label="workerHolder"];
46->29 [style = bold, label=""];
13->50 [style = bold, label=""];
10->32 [style = solid, label="task"];
27->39 [style = bold, label=""];
18->10 [style = bold, label=""];
5->4 [style = bold, label=""];
25->42 [style = bold, label=""];
4->1 [style = bold, label=""];
26->46 [style = solid, label="rogueWorkerHolder"];
38->40 [style = bold, label=""];
44->36 [style = bold, label=""];
28->53 [style = bold, label=""];
0->35 [style = solid, label="listenerNotificationsAccumulator"];
48->32 [style = solid, label="rogueWorkerHolder"];
11->6 [style = bold, label=""];
26->25 [style = bold, label=""];
33->41 [style = solid, label="rogueWorkerHolder"];
33->31 [style = solid, label="rogueWorkerHolder"];
54->20 [style = bold, label=""];
52->10 [style = bold, label=""];
49->27 [style = bold, label=""];
30->37 [style = bold, label=""];
11->35 [style = bold, label=""];
8->7 [style = bold, label=""];
34->22 [style = bold, label=""];
20->27 [style = solid, label="rogueWorkerHolder"];
32->55 [style = bold, label=""];
10->23 [style = solid, label="task"];
36->54 [style = bold, label=""];
20->30 [style = bold, label=""];
33->34 [style = bold, label=""];
9->13 [style = bold, label=""];
51->33 [style = bold, label=""];
}
