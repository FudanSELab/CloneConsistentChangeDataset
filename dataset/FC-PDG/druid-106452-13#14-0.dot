digraph {
9 [style = filled, label = "List<ResultRow> expectedResults = Collections.singletonList(makeRow(query,\"1970-01-01\",\"rows\",837L))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "final GroupByQuery query = makeQueryBuilder().setDataSource(subquery).setQuerySegmentSpec(QueryRunnerTestHelper.fullOnIntervalSpec).setDimensions(Collections.emptyList()).setDimFilter(firstDaysFilter).setAggregatorSpecs(new FilteredAggregatorFactory(QueryRunnerTestHelper.rowsCount,fridayFilter)).setGranularity(QueryRunnerTestHelper.dayGran).build()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"subquery-time-filter\")@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testSubqueryWithOuterTimeFilter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final DimFilter fridayFilter = new SelectorDimFilter(ColumnHolder.TIME_COLUMN_NAME,\"Friday\",new TimeFormatExtractionFn(\"EEEE\",null,null,null,false))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testSubqueryWithOuterFilterAggregator['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "final DimFilter firstDaysFilter = new InDimFilter(ColumnHolder.TIME_COLUMN_NAME,ImmutableList.of(\"1\",\"2\",\"3\"),new TimeFormatExtractionFn(\"d\",null,null,null,false))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testSubqueryWithOuterFilterAggregator['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final GroupByQuery query = makeQueryBuilder().setDataSource(subquery).setQuerySegmentSpec(QueryRunnerTestHelper.fullOnIntervalSpec).setDimensions(Collections.emptyList()).setAggregatorSpecs(new FilteredAggregatorFactory(QueryRunnerTestHelper.rowsCount,filter)).setGranularity(QueryRunnerTestHelper.allGran).build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final DimFilter filter = new SelectorDimFilter(\"market\",\"spot\",null)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-02-01\",\"rows\",0L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-02-02\",\"rows\",0L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-02-03\",\"rows\",0L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-03-01\",\"rows\",0L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-03-02\",\"rows\",0L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-03-03\",\"rows\",0L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"rows\",13L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"rows\",0L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-03\",\"rows\",0L))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final GroupByQuery subquery = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.fullOnIntervalSpec).setDimensions(new DefaultDimensionSpec(\"market\",\"market\"),new DefaultDimensionSpec(\"quality\",\"quality\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"index\",\"index\")).setGranularity(QueryRunnerTestHelper.dayGran).build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<Row> expectedResults = Collections.singletonList(GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01\",\"rows\",837L))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10->3 [style = solid, label="query"];
3->11 [style = solid, label="results"];
1->9 [style = solid, label="query"];
2->3 [style = bold, label=""];
8->3 [style = solid, label="results"];
0->2 [style = bold, label=""];
4->15 [style = bold, label=""];
8->3 [style = bold, label=""];
3->11 [style = bold, label=""];
2->3 [style = solid, label="results"];
1->0 [style = bold, label=""];
7->4 [style = bold, label=""];
9->8 [style = bold, label=""];
2->8 [style = dashed, label="0"];
0->3 [style = solid, label="expectedResults"];
1->8 [style = solid, label="query"];
1->9 [style = bold, label=""];
5->1 [style = bold, label=""];
6->4 [style = bold, label=""];
12->10 [style = bold, label=""];
13->3 [style = bold, label=""];
10->13 [style = bold, label=""];
13->11 [style = solid, label="expectedResults"];
1->2 [style = solid, label="query"];
15->12 [style = bold, label=""];
0->9 [style = dashed, label="0"];
5->15 [style = dashed, label="0"];
4->5 [style = bold, label=""];
3->11 [style = dashed, label="0"];
14->4 [style = bold, label=""];
9->3 [style = solid, label="expectedResults"];
}
