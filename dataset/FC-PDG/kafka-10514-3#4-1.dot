digraph {
2 [style = filled, label = "replay(mockedKeyValueTimestampStore)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "verify(mockedKeyValueTimestampStore,times(2)).isOpen()@@@6@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "replay(mockedWindowTimestampStore)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(keyValueStoreFacade.isOpen(),is(false))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "when(mockedKeyValueTimestampStore.isOpen()).thenReturn(true,false)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "shouldReturnIsOpen['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "shouldReturnIsOpen['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "shouldReturnIsPersistent['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "expect(mockedKeyValueTimestampStore.isOpen()).andReturn(true).andReturn(false)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "verify(mockedWindowTimestampStore)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(keyValueStoreFacade.isOpen(),is(true))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertThat(windowStoreFacade.persistent(),is(true))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "verify(mockedKeyValueTimestampStore)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertThat(windowStoreFacade.persistent(),is(false))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "expect(mockedWindowTimestampStore.persistent()).andReturn(true).andReturn(false)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12->14 [style = bold, label=""];
5->1 [style = bold, label=""];
4->9 [style = dashed, label="0"];
0->11 [style = dashed, label="0"];
7->6 [style = bold, label=""];
13->9 [style = bold, label=""];
8->4 [style = bold, label=""];
9->12 [style = bold, label=""];
0->6 [style = dashed, label="0"];
1->5 [style = dashed, label="0"];
5->12 [style = dashed, label="0"];
11->13 [style = bold, label=""];
1->14 [style = dashed, label="0"];
2->4 [style = bold, label=""];
4->5 [style = bold, label=""];
2->13 [style = dashed, label="0"];
3->0 [style = bold, label=""];
6->8 [style = bold, label=""];
0->2 [style = bold, label=""];
10->11 [style = bold, label=""];
}
