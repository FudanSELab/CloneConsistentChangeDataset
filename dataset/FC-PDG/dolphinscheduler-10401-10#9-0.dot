digraph {
61 [style = filled, label = "Map<String,Object> proejctAuthFailRes = processInstanceService.queryProcessInstanceList(loginUser,projectName,46,\"2020-01-01 00:00:00\",\"2020-01-02 00:00:00\",\"\",\"test_user\",ExecutionStatus.SUBMITTED_SUCCESS,\"192.168.xx.xx\",1,10)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Project project = getProject(projectName)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Assert.assertEquals(Status.SUCCESS,executorEmptyRes.get(Constants.STATUS))@@@34@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "putMsg(result,Status.SUCCESS,projectName)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "when(projectService.checkProjectAndAuth(loginUser,null,projectName)).thenReturn(result)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "List<ProcessInstance> processInstanceList = new ArrayList<>()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "when(projectMapper.queryByName(projectName)).thenReturn(project)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Map<String,Object> successRes = processInstanceService.queryProcessInstanceList(loginUser,projectName,1,\"2020-01-01 00:00:00\",\"2020-01-02 00:00:00\",\"\",loginUser.getUserName(),ExecutionStatus.SUBMITTED_SUCCESS,\"192.168.xx.xx\",1,10)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Map<String,Object> executorErrorEndDateRes = taskInstanceService.queryTaskListPaging(loginUser,projectName,1,\"\",\"\",\"\",null,\"error date\",\"\",ExecutionStatus.SUCCESS,\"192.168.xx.xx\",1,20)@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "String projectName = \"project_test1\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(Status.SUCCESS,executorExistRes.get(Constants.STATUS))@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "User loginUser = getAdminUser()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(),eq(project.getId()),eq(1),eq(\"\"),eq(\"\"),eq(\"\"),eq(0),Mockito.any(),eq(\"192.168.xx.xx\"),any(),any())).thenReturn(pageReturn)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Map<String,Object> executorNullRes = taskInstanceService.queryTaskListPaging(loginUser,projectName,1,\"\",\"\",\"test_user\",\"2020-01-01 00:00:00\",\"2020-01-02 00:00:00\",\"\",ExecutionStatus.SUCCESS,\"192.168.xx.xx\",1,20)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "Map<String,Object> executorEmptyRes = processInstanceService.queryProcessInstanceList(loginUser,projectName,1,\"2020-01-01 00:00:00\",\"2020-01-02 00:00:00\",\"\",\"\",ExecutionStatus.SUBMITTED_SUCCESS,\"192.168.xx.xx\",1,10)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(Status.PROJECT_NOT_FOUNT,proejctAuthFailRes.get(Constants.STATUS))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "when(projectService.checkProjectAndAuth(loginUser,project,projectName)).thenReturn(result)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "when(processService.findProcessInstanceDetailById(taskInstance.getProcessInstanceId())).thenReturn(processInstance)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "putMsg(result,Status.SUCCESS,projectName)@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "when(projectMapper.queryByName(Mockito.anyString())).thenReturn(project)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(),eq(project.getId()),eq(1),eq(\"\"),eq(\"\"),eq(\"\"),eq(0),Mockito.any(),eq(\"192.168.xx.xx\"),eq(start),eq(end))).thenReturn(pageReturn)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "when(usersService.queryUser(loginUser.getId())).thenReturn(null)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(),eq(project.getId()),eq(1),eq(\"\"),eq(-1),Mockito.any(),eq(\"192.168.xx.xx\"),eq(start),eq(end))).thenReturn(pageReturn)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ProcessInstance processInstance = getProcessInstance()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR,executorErrorEndDateRes.get(Constants.STATUS))@@@49@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(),eq(project.getId()),eq(1),eq(\"\"),eq(\"\"),eq(\"\"),eq(0),Mockito.any(),eq(\"192.168.xx.xx\"),any(),any())).thenReturn(pageReturn)@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR,executorErrorStartDateRes.get(Constants.STATUS))@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "queryTaskListPaging['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Map<String,Object> executorEmptyRes = taskInstanceService.queryTaskListPaging(loginUser,projectName,1,\"\",\"\",\"\",\"2020-01-01 00:00:00\",\"2020-01-02 00:00:00\",\"\",ExecutionStatus.SUCCESS,\"192.168.xx.xx\",1,20)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "Assert.assertEquals(Status.SUCCESS,successRes.get(Constants.STATUS))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "pageReturn.setRecords(processInstanceList)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "Page<ProcessInstance> pageReturn = new Page<>(1,10)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "taskInstanceList.add(taskInstance)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "when(projectMapper.queryByName(Mockito.anyString())).thenReturn(project)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR,dataParameterRes.get(Constants.STATUS))@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
55 [style = filled, label = "when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(),eq(project.getId()),eq(1),eq(\"\"),eq(0),Mockito.any(),eq(\"192.168.xx.xx\"),eq(start),eq(end))).thenReturn(pageReturn)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "processInstanceList.add(processInstance)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "Map<String,Object> dataParameterRes = taskInstanceService.queryTaskListPaging(loginUser,projectName,1,\"\",\"\",\"test_user\",\"20200101 00:00:00\",\"2020-01-02 00:00:00\",\"\",ExecutionStatus.SUCCESS,\"192.168.xx.xx\",1,20)@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "Map<String,Object> executorExistRes = processInstanceService.queryProcessInstanceList(loginUser,projectName,1,\"2020-01-01 00:00:00\",\"2020-01-02 00:00:00\",\"\",\"admin\",ExecutionStatus.SUBMITTED_SUCCESS,\"192.168.xx.xx\",1,10)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Map<String,Object> executorErrorStartDateRes = taskInstanceService.queryTaskListPaging(loginUser,projectName,1,\"\",\"\",\"\",\"error date\",null,\"\",ExecutionStatus.SUCCESS,\"192.168.xx.xx\",1,20)@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Map<String,Object> successRes = taskInstanceService.queryTaskListPaging(loginUser,projectName,1,\"\",\"\",\"test_user\",\"2020-01-01 00:00:00\",\"2020-01-02 00:00:00\",\"\",ExecutionStatus.SUCCESS,\"192.168.xx.xx\",1,20)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "when(projectService.checkProjectAndAuth(loginUser,project,projectName)).thenReturn(result)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "List<TaskInstance> taskInstanceList = new ArrayList<>()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(Status.SUCCESS,executorNullRes.get(Constants.STATUS))@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(),eq(project.getId()),eq(1),eq(\"\"),eq(\"\"),eq(\"\"),eq(0),Mockito.any(),eq(\"192.168.xx.xx\"),eq(start),eq(end))).thenReturn(pageReturn)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "testQueryProcessInstanceList['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "pageReturn.setRecords(taskInstanceList)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "queryTaskListPaging['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "Map<String,Object> result = new HashMap<>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "TaskInstance taskInstance = getTaskInstance()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(Status.SUCCESS,executorNullDateRes.get(Constants.STATUS))@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Map<String,Object> executorNullDateRes = taskInstanceService.queryTaskListPaging(loginUser,projectName,1,\"\",\"\",\"\",null,null,\"\",ExecutionStatus.SUCCESS,\"192.168.xx.xx\",1,20)@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "when(projectMapper.queryByName(projectName)).thenReturn(null)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "putMsg(result,Status.PROJECT_NOT_FOUNT,projectName)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(Status.SUCCESS,executorEmptyRes.get(Constants.STATUS))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Page<TaskInstance> pageReturn = new Page<>(1,10)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\")@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Map<String,Object> proejctAuthFailRes = taskInstanceService.queryTaskListPaging(loginUser,\"project_test1\",0,\"\",\"\",\"test_user\",\"2019-02-26 19:48:00\",\"2019-02-26 19:48:22\",\"\",null,\"\",1,20)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->34 [style = bold, label=""];
46->47 [style = bold, label=""];
56->53 [style = bold, label=""];
17->35 [style = solid, label="projectName"];
41->15 [style = bold, label=""];
38->61 [style = solid, label="loginUser"];
9->51 [style = bold, label=""];
17->45 [style = solid, label="projectName"];
38->34 [style = solid, label="loginUser"];
38->12 [style = solid, label="loginUser"];
38->1 [style = solid, label="loginUser"];
38->3 [style = solid, label="loginUser"];
33->30 [style = solid, label="result"];
51->62 [style = solid, label="processInstanceList"];
39->41 [style = bold, label=""];
59->55 [style = solid, label="pageReturn"];
51->59 [style = bold, label=""];
17->56 [style = solid, label="projectName"];
34->4 [style = bold, label=""];
45->46 [style = bold, label=""];
22->62 [style = dashed, label="0"];
5->41 [style = solid, label="pageReturn"];
8->25 [style = bold, label=""];
2->31 [style = bold, label=""];
57->62 [style = bold, label=""];
5->2 [style = solid, label="pageReturn"];
58->17 [style = bold, label=""];
28->11 [style = bold, label=""];
15->8 [style = bold, label=""];
43->44 [style = bold, label=""];
59->14 [style = solid, label="pageReturn"];
31->21 [style = bold, label=""];
17->29 [style = solid, label="projectName"];
55->56 [style = bold, label=""];
17->15 [style = solid, label="projectName"];
9->57 [style = solid, label="processInstance"];
5->13 [style = solid, label="pageReturn"];
20->18 [style = bold, label=""];
38->25 [style = solid, label="loginUser"];
12->61 [style = dashed, label="0"];
27->20 [style = solid, label="project"];
10->6 [style = dashed, label="0"];
17->47 [style = solid, label="projectName"];
1->39 [style = bold, label=""];
9->24 [style = bold, label=""];
38->29 [style = solid, label="loginUser"];
49->39 [style = bold, label=""];
12->19 [style = bold, label=""];
47->23 [style = bold, label=""];
62->60 [style = bold, label=""];
38->35 [style = solid, label="loginUser"];
5->22 [style = bold, label=""];
17->31 [style = solid, label="projectName"];
27->43 [style = solid, label="project"];
38->33 [style = bold, label=""];
38->45 [style = solid, label="loginUser"];
35->25 [style = dashed, label="0"];
0->14 [style = bold, label=""];
38->31 [style = solid, label="loginUser"];
17->25 [style = solid, label="projectName"];
33->47 [style = solid, label="result"];
17->26 [style = solid, label="projectName"];
14->54 [style = bold, label=""];
33->18 [style = solid, label="result"];
19->37 [style = bold, label=""];
27->60 [style = solid, label="project"];
22->16 [style = bold, label=""];
33->37 [style = solid, label="result"];
24->22 [style = solid, label="taskInstance"];
35->10 [style = bold, label=""];
30->61 [style = bold, label=""];
9->21 [style = solid, label="processInstance"];
17->34 [style = solid, label="projectName"];
38->18 [style = solid, label="loginUser"];
10->13 [style = bold, label=""];
50->18 [style = bold, label=""];
30->12 [style = bold, label=""];
33->44 [style = solid, label="result"];
36->16 [style = solid, label="taskInstanceList"];
40->9 [style = bold, label=""];
14->2 [style = bold, label=""];
23->40 [style = bold, label=""];
13->3 [style = bold, label=""];
21->1 [style = bold, label=""];
38->0 [style = solid, label="loginUser"];
6->55 [style = bold, label=""];
52->49 [style = bold, label=""];
25->6 [style = bold, label=""];
39->25 [style = bold, label=""];
48->17 [style = bold, label=""];
59->57 [style = bold, label=""];
54->31 [style = bold, label=""];
33->50 [style = solid, label="result"];
38->15 [style = solid, label="loginUser"];
13->55 [style = dashed, label="0"];
29->42 [style = bold, label=""];
31->52 [style = bold, label=""];
17->27 [style = solid, label="projectName"];
24->36 [style = bold, label=""];
17->38 [style = bold, label=""];
37->27 [style = bold, label=""];
38->56 [style = solid, label="loginUser"];
61->19 [style = bold, label=""];
17->37 [style = solid, label="projectName"];
44->45 [style = bold, label=""];
27->23 [style = bold, label=""];
36->5 [style = bold, label=""];
17->1 [style = solid, label="projectName"];
60->50 [style = bold, label=""];
17->3 [style = solid, label="projectName"];
5->11 [style = solid, label="pageReturn"];
32->17 [style = bold, label=""];
2->14 [style = dashed, label="0"];
33->26 [style = solid, label="result"];
27->43 [style = bold, label=""];
16->20 [style = bold, label=""];
26->7 [style = bold, label=""];
17->61 [style = solid, label="projectName"];
38->54 [style = solid, label="loginUser"];
6->35 [style = bold, label=""];
4->29 [style = bold, label=""];
28->53 [style = dashed, label="0"];
3->28 [style = bold, label=""];
7->30 [style = bold, label=""];
33->26 [style = bold, label=""];
18->0 [style = bold, label=""];
}
