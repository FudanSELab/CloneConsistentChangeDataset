digraph {
16 [style = filled, label = "assertCellFetchedQueried(true,false,filter,s2,path0,path1,path2,path3,path4)@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertCellFetchedQueried(false,false,filter,s2,path0,path1,path2,path3,path4)@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testSelectCellWithMetadata['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"v2(1(\",filter.toCQLString())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "\"3.11\".equals(clusterMinVersion) || (returnStaticContentOnPartitionWithNoRows && \"4.0\".equals(clusterMinVersion))@@@13@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertCellFetchedQueried(true,true,filter,v2,path1)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertCellFetchedQueried(true,true,filter,v2,path0,path1,path2,path3,path4)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "\"3.11\".equals(clusterMinVersion)@@@14@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"*\",filter.toCQLString())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertFetchedQueried(false,false,filter,s1,s2)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testSelectCellWithMetadata['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "assertEquals(\"*/(v2(1((\",filter.toString())@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertCellFetchedQueried(true,true,filter,v2,path1)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "\"3.0\".equals(clusterMinVersion)@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertFetchedQueried(true,true,filter,s1,s2,v1)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"*/*\",filter.toString())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testSelectStaticColumnWithMetadata['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "ColumnFilter filter = ColumnFilter.allRegularColumnsBuilder(metadata).select(v2,path1).build()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertCellFetchedQueried(false,false,filter,s2,path0,path1,path2,path3,path4)@@@29@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertFetchedQueried(true,true,filter,v2)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "check.accept(ColumnFilter.allRegularColumnsBuilder(metadata).add(s1).build())@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertCellFetchedQueried(true,false,filter,v2,path0,path2,path3,path4)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "boolean returnStaticContentOnPartitionWithNoRows@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertFetchedQueried(true,false,filter,s1,s2,v1)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertCellFetchedQueried(true,false,filter,v2,path0,path2,path3,path4)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertFetchedQueried(true,false,filter,v1)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\"v2(1(\",filter.toCQLString())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Consumer<ColumnFilter> check = null@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertCellFetchedQueried(true,true,filter,v2,path1)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertCellFetchedQueried(true,true,filter,s2,path0,path1,path2,path3,path4)@@@11@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "check.accept(ColumnFilter.selection(metadata,RegularAndStaticColumns.builder().add(s1).build()))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testRoundTrips(filter)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertCellFetchedQueried(true,false,filter,v2,path0,path2,path3,path4)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "ColumnFilter filter = ColumnFilter.allRegularColumnsBuilder(metadata,returnStaticContentOnPartitionWithNoRows).select(v2,path1).build()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertCellFetchedQueried(true,false,filter,s2,path0,path1,path2,path3,path4)@@@20@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertCellFetchedQueried(true,true,filter,s2,path0,path1,path2,path3,path4)@@@12@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(\"<all regulars>/(v2(1((\",filter.toString())@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15->4 [style = solid, label="filter"];
29->22 [style = solid, label="filter"];
30->17 [style = dotted, label="false"];
29->23 [style = solid, label="filter"];
9->30 [style = dotted, label="false"];
36->33 [style = bold, label=""];
32->6 [style = bold, label=""];
2->23 [style = bold, label=""];
8->1 [style = bold, label=""];
15->2 [style = solid, label="filter"];
29->2 [style = bold, label=""];
5->11 [style = dotted, label="true"];
5->22 [style = dotted, label="true"];
1->21 [style = bold, label=""];
9->5 [style = bold, label=""];
5->20 [style = dotted, label="false"];
29->25 [style = solid, label="filter"];
15->12 [style = solid, label="filter"];
15->1 [style = solid, label="filter"];
15->11 [style = solid, label="filter"];
21->0 [style = bold, label=""];
30->7 [style = dotted, label="true"];
1->31 [style = dashed, label="0"];
30->26 [style = bold, label=""];
18->15 [style = bold, label=""];
30->6 [style = dotted, label="true"];
15->22 [style = solid, label="filter"];
26->14 [style = bold, label=""];
5->6 [style = dotted, label="true"];
9->31 [style = dotted, label="true"];
5->17 [style = dotted, label="false"];
15->29 [style = dashed, label="0"];
5->24 [style = dotted, label="false"];
9->21 [style = dotted, label="true"];
29->24 [style = solid, label="filter"];
30->20 [style = dotted, label="false"];
5->14 [style = dotted, label="false"];
9->8 [style = dotted, label="true"];
24->20 [style = bold, label=""];
29->4 [style = solid, label="filter"];
5->6 [style = bold, label=""];
5->7 [style = dotted, label="true"];
30->4 [style = dotted, label="false"];
30->24 [style = dotted, label="false"];
9->13 [style = dotted, label="true"];
30->32 [style = dotted, label="true"];
29->2 [style = solid, label="filter"];
34->35 [style = bold, label=""];
27->29 [style = bold, label=""];
6->7 [style = bold, label=""];
15->8 [style = solid, label="filter"];
9->3 [style = dotted, label="true"];
5->30 [style = dashed, label="0"];
9->0 [style = dotted, label="true"];
31->25 [style = bold, label=""];
5->12 [style = dotted, label="false"];
4->17 [style = bold, label=""];
15->21 [style = solid, label="filter"];
8->31 [style = bold, label=""];
30->14 [style = dotted, label="false"];
22->16 [style = bold, label=""];
30->10 [style = dotted, label="true"];
5->10 [style = dotted, label="true"];
14->19 [style = bold, label=""];
30->32 [style = bold, label=""];
30->26 [style = dotted, label="false"];
15->16 [style = solid, label="filter"];
30->19 [style = dotted, label="false"];
15->23 [style = solid, label="filter"];
3->8 [style = bold, label=""];
5->16 [style = dotted, label="true"];
9->1 [style = dotted, label="true"];
29->7 [style = solid, label="filter"];
29->20 [style = solid, label="filter"];
5->4 [style = dotted, label="false"];
10->22 [style = bold, label=""];
15->20 [style = solid, label="filter"];
15->2 [style = bold, label=""];
5->19 [style = dotted, label="false"];
16->11 [style = bold, label=""];
29->31 [style = solid, label="filter"];
7->10 [style = bold, label=""];
15->0 [style = solid, label="filter"];
15->17 [style = solid, label="filter"];
29->8 [style = solid, label="filter"];
9->30 [style = bold, label=""];
5->14 [style = bold, label=""];
29->16 [style = solid, label="filter"];
9->25 [style = dotted, label="true"];
15->24 [style = solid, label="filter"];
27->28 [style = dotted, label="true"];
29->19 [style = solid, label="filter"];
17->24 [style = bold, label=""];
13->3 [style = bold, label=""];
30->16 [style = dotted, label="true"];
15->10 [style = solid, label="filter"];
29->10 [style = solid, label="filter"];
20->12 [style = bold, label=""];
9->5 [style = dotted, label="false"];
28->30 [style = solid, label="returnStaticContentOnPartitionWithNoRows"];
19->4 [style = bold, label=""];
30->22 [style = dotted, label="true"];
23->9 [style = bold, label=""];
29->17 [style = solid, label="filter"];
33->34 [style = bold, label=""];
9->13 [style = bold, label=""];
}
