digraph {
10 [style = filled, label = "Assert.assertTrue(Files.exists(zipDestination))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Path homeDir = install.createDist(configuration)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "File homeDir = install.createDist(configuration)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "createTestZip(zipDestination)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "configuration.setAlwaysUnpack(true)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(mavenHomeDir,homeDir)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testCreateDist['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "Assert.assertEquals(distributionDir,localDistribution.getDistributionDir())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(distributionDir,localDistribution.getDistributionDir())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "File garbage = new File(mavenHomeDir,\"garbage\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertTrue(Files.isDirectory(homeDir))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Assert.assertTrue(zipDestination.exists())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertFalse(new File(homeDir,\"garbage\").exists())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertTrue(homeDir.isDirectory())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "testCreateDist['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertTrue(new File(homeDir,\"bin/mvn\").exists())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(localDistribution,pathAssembler.getDistribution(configuration))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testCreateDistWithExistingZipAndDistAndAlwaysDownloadTrue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertTrue(mavenHomeDir.isDirectory())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertTrue(Files.exists(homeDir.resolve(\"bin/mvn\")))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "File homeDir = install.createDist(configuration)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(new File(homeDir,\"bin/mvn\").exists())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(mavenHomeDir,homeDir)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(zipDestination,localDistribution.getZipFile())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "FileUtils.touch(garbage)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->4 [style = bold, label=""];
14->23 [style = solid, label="garbage"];
23->16 [style = bold, label=""];
8->10 [style = dashed, label="0"];
7->18 [style = dashed, label="0"];
3->1 [style = bold, label=""];
16->8 [style = bold, label=""];
22->19 [style = bold, label=""];
9->4 [style = bold, label=""];
12->11 [style = bold, label=""];
1->4 [style = solid, label="homeDir"];
1->9 [style = dashed, label="0"];
7->0 [style = bold, label=""];
0->11 [style = dashed, label="0"];
5->18 [style = bold, label=""];
18->2 [style = bold, label=""];
4->7 [style = bold, label=""];
6->2 [style = bold, label=""];
15->17 [style = bold, label=""];
10->5 [style = bold, label=""];
5->6 [style = bold, label=""];
8->5 [style = bold, label=""];
14->23 [style = bold, label=""];
24->21 [style = bold, label=""];
11->10 [style = bold, label=""];
9->4 [style = solid, label="homeDir"];
0->8 [style = bold, label=""];
7->12 [style = dashed, label="0"];
4->12 [style = bold, label=""];
8->5 [style = solid, label="homeDir"];
17->20 [style = bold, label=""];
13->9 [style = bold, label=""];
19->15 [style = bold, label=""];
2->22 [style = bold, label=""];
9->12 [style = solid, label="homeDir"];
21->14 [style = bold, label=""];
}
