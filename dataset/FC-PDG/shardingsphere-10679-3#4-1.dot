digraph {
16 [style = filled, label = "selectStatement.setProjections(new ProjectionsSegment(0,0))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "GroupByRowComparator groupByRowComparator = new GroupByRowComparator(selectStatementContext,caseSensitives)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "SelectStatementContext selectStatementContext = new SelectStatementContext(Collections.singletonMap(DefaultSchema.LOGIC_NAME,metaData),Collections.emptyList(),selectStatement,DefaultSchema.LOGIC_NAME)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "MemoryQueryResultRow o2 = new MemoryQueryResultRow(mockQueryResult(\"1\",\"2\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertCompareToForDecsWithOrderByItems['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ShardingSphereMetaData metaData = mock()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "MemoryQueryResultRow o1 = new MemoryQueryResultRow(mockQueryResult(\"1\",\"2\"))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "when(metaData.getSchema()).thenReturn(mock())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertCompareToForDecsWithOrderByItems['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "SelectStatementContext selectStatementContext = new SelectStatementContext(selectStatement,new GroupByContext(Arrays.asList(createOrderByItem(new IndexOrderByItemSegment(0,0,1,OrderDirection.ASC,OrderDirection.ASC)),createOrderByItem(new IndexOrderByItemSegment(0,0,2,OrderDirection.ASC,OrderDirection.ASC)))),new OrderByContext(Arrays.asList(createOrderByItem(new IndexOrderByItemSegment(0,0,1,OrderDirection.DESC,OrderDirection.ASC)),createOrderByItem(new IndexOrderByItemSegment(0,0,2,OrderDirection.DESC,OrderDirection.ASC))),false),new ProjectionsContext(0,0,false,Collections.emptyList()),new PaginationContext(null,null,Collections.emptyList()))@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "SelectStatementContext selectStatementContext = new SelectStatementContext(selectStatement,new GroupByContext(Arrays.asList(createOrderByItem(new IndexOrderByItemSegment(0,0,1,OrderDirection.DESC,OrderDirection.ASC)),createOrderByItem(new IndexOrderByItemSegment(0,0,2,OrderDirection.ASC,OrderDirection.ASC)))),new OrderByContext(Arrays.asList(createOrderByItem(new IndexOrderByItemSegment(0,0,1,OrderDirection.ASC,OrderDirection.ASC)),createOrderByItem(new IndexOrderByItemSegment(0,0,2,OrderDirection.DESC,OrderDirection.ASC))),false),new ProjectionsContext(0,0,false,Collections.emptyList()),new PaginationContext(null,null,Collections.emptyList()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertTrue(groupByRowComparator.compare(o1,o2) > 0)@@@7@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "selectStatement.setOrderBy(new OrderBySegment(0,0,Arrays.asList(new IndexOrderByItemSegment(0,0,1,OrderDirection.DESC,OrderDirection.ASC),new IndexOrderByItemSegment(0,0,2,OrderDirection.DESC,OrderDirection.ASC))))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "GroupByRowComparator groupByRowComparator = new GroupByRowComparator(selectStatementContext,caseSensitives)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "MemoryQueryResultRow o2 = new MemoryQueryResultRow(mockQueryResult(\"3\",\"4\"))@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final SelectStatement selectStatement@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final SelectStatement selectStatement@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertCompareToForEqualWithOrderByItems['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "selectStatement.setGroupBy(new GroupBySegment(0,0,Arrays.asList(new IndexOrderByItemSegment(0,0,1,OrderDirection.ASC,OrderDirection.ASC),new IndexOrderByItemSegment(0,0,2,OrderDirection.ASC,OrderDirection.ASC))))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "MemoryQueryResultRow o2 = new MemoryQueryResultRow(mockQueryResult(\"3\",\"4\"))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "MemoryQueryResultRow o1 = new MemoryQueryResultRow(mockQueryResult(\"1\",\"2\"))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(groupByRowComparator.compare(o1,o2) > 0)@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "assertThat(groupByRowComparator.compare(o1,o2),is(0))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11->15 [style = solid, label="o1"];
9->7 [style = solid, label="metaData"];
8->15 [style = bold, label=""];
7->12 [style = bold, label=""];
8->15 [style = solid, label="o2"];
12->11 [style = bold, label=""];
16->7 [style = bold, label=""];
4->19 [style = bold, label=""];
7->12 [style = solid, label="selectStatementContext"];
1->6 [style = solid, label="selectStatementContext"];
3->22 [style = dashed, label="0"];
20->6 [style = bold, label=""];
9->10 [style = bold, label=""];
5->2 [style = solid, label="o2"];
20->6 [style = solid, label="selectStatementContext"];
1->20 [style = dashed, label="0"];
6->4 [style = bold, label=""];
19->21 [style = solid, label="o2"];
3->7 [style = solid, label="selectStatement"];
5->2 [style = bold, label=""];
13->17 [style = bold, label=""];
1->6 [style = bold, label=""];
18->20 [style = bold, label=""];
4->2 [style = solid, label="o1"];
10->13 [style = bold, label=""];
2->21 [style = dashed, label="0"];
22->20 [style = solid, label="selectStatement"];
3->1 [style = solid, label="selectStatement"];
0->1 [style = bold, label=""];
14->3 [style = dotted, label="true"];
11->8 [style = bold, label=""];
14->9 [style = bold, label=""];
18->22 [style = dotted, label="true"];
4->21 [style = solid, label="o1"];
0->3 [style = dotted, label="true"];
5->19 [style = dashed, label="0"];
4->5 [style = bold, label=""];
17->16 [style = bold, label=""];
19->21 [style = bold, label=""];
}
