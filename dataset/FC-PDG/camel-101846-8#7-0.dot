digraph {
24 [style = filled, label = "assertEquals(tagCreated,true)@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "Git git = getGitTestRepository()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "Iterable<RevCommit> revCommits = template.requestBody(\"direct:log\",\"\",)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "refInternal.getName().equals(\"refs/tags/\" + tagTest)@@@18@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
48 [style = filled, label = "branchCreated = true@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "git.add().addFilepattern(filenameToAdd).call()@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "assertEquals(gitDir.exists(),true)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "template.send(\"direct:commit\",new Processor(){@Override public void process(Exchange exchange){exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE,commitMessage)}})@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "File fileToAdd = new File(gitLocalRepo,filenameToAdd)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "tagCreated = true@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
52 [style = filled, label = "template.send(\"direct:commit-all-branch\",new Processor(){@Override public void process(Exchange exchange){exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE,commitMessageAll)}})@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "tagConsumerTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "tagCreated = true@@@28@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "template.sendBody(\"direct:create-branch\",\"\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(\"refs/tags/\" + tagTest,exchange.getOut().getBody().getName())@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "MockEndpoint added = getMockEndpoint(\"mock:result-tag\")@@@32@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "git.tag().setName(tagTest).call()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "count++@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(gitDir.exists(),true)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "List<Ref> ref = git.branchList().call()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "refInternal.getName().equals(\"refs/heads/\" + branchTest)@@@31@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Exchange exchange = mockResultTag.getExchanges().get(0)@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
59 [style = filled, label = "assertEquals(rev.getShortMessage(),commitMessage)@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Git git = new Git(repository)@@@27@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "List<Ref> ref = git.tagList().call()@@@24@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "template.send(\"direct:add\",new Processor(){@Override public void process(Exchange exchange){exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME,filenameToAdd)}})@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "mockResultTag.expectedMessageCount(1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
57 [style = filled, label = "File fileToAddDifferent = new File(gitLocalRepo,filenameBranchToAdd)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "assertEquals(rev.getShortMessage(),commitMessage)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "template.sendBody(\"direct:create-tag\",\"\")@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
55 [style = filled, label = "assertEquals(branchCreated,true)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "git.close()@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Repository repository = getTestRepository()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "revCommits = template.requestBody(\"direct:log-branch\",\"\",)@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertTrue(status.getAdded().contains(filenameToAdd))@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "fileToAdd.createNewFile()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "repository.close()@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "File gitDir = new File(gitLocalRepo,\".git\")@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Status status = template.requestBody(\"direct:status\",\"\",)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "git.commit().setMessage(commitMessage).call()@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "refInternal.getName().equals(\"refs/tags/\" + tagTest)@@@27@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertEquals(rev.getShortMessage(),commitMessageAll)@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "boolean branchCreated = false@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "boolean tagCreated = false@@@25@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "boolean tagCreated = false@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertEquals(added.getExchanges().size(),1)@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "fileToAddDifferent.createNewFile()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "int count = 0@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "count == 0@@@53@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "count == 1@@@56@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "template.send(\"direct:add-on-branch\",new Processor(){@Override public void process(Exchange exchange){exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME,filenameBranchToAdd)}})@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "tagConsumerTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "fileToAdd.createNewFile()@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "logBranchTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "mockResultTag.assertIsSatisfied()@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "File gitDir = new File(gitLocalRepo,\".git\")@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Thread.sleep(1 * 5000)@@@33@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Status status = git.status().call()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertTrue(status.getAdded().contains(filenameToAdd))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "MockEndpoint mockResultTag = getMockEndpoint(\"mock:result-tag\")@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
46 [style = filled, label = "repository.close()@@@61@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(tagCreated,true)@@@31@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
61->45 [style = bold, label=""];
12->0 [style = solid, label="tagCreated"];
9->12 [style = dotted, label="true"];
61->43 [style = bold, label=""];
36->29 [style = bold, label=""];
17->9 [style = bold, label=""];
17->0 [style = solid, label="tagCreated"];
51->55 [style = solid, label="branchCreated"];
12->9 [style = bold, label=""];
55->57 [style = bold, label=""];
45->43 [style = bold, label=""];
24->21 [style = bold, label=""];
0->55 [style = dashed, label="0"];
58->53 [style = solid, label="count"];
51->47 [style = bold, label=""];
43->53 [style = bold, label=""];
21->35 [style = bold, label=""];
0->3 [style = bold, label=""];
22->33 [style = bold, label=""];
47->48 [style = bold, label=""];
54->60 [style = bold, label=""];
40->52 [style = bold, label=""];
4->19 [style = bold, label=""];
22->33 [style = dotted, label="true"];
34->31 [style = bold, label=""];
41->6 [style = bold, label=""];
19->2 [style = bold, label=""];
43->59 [style = dotted, label="true"];
56->51 [style = bold, label=""];
8->17 [style = bold, label=""];
53->43 [style = solid, label="count"];
52->42 [style = bold, label=""];
30->24 [style = solid, label="tagCreated"];
48->55 [style = bold, label=""];
18->37 [style = dashed, label="0"];
26->37 [style = bold, label=""];
58->43 [style = solid, label="count"];
49->5 [style = bold, label=""];
6->7 [style = bold, label=""];
12->48 [style = dashed, label="0"];
14->6 [style = bold, label=""];
13->10 [style = bold, label=""];
10->18 [style = bold, label=""];
58->61 [style = bold, label=""];
43->59 [style = bold, label=""];
31->25 [style = bold, label=""];
47->48 [style = dotted, label="true"];
16->8 [style = bold, label=""];
6->5 [style = solid, label="repository"];
38->27 [style = bold, label=""];
48->55 [style = solid, label="branchCreated"];
20->1 [style = bold, label=""];
53->61 [style = solid, label="count"];
59->53 [style = bold, label=""];
60->49 [style = bold, label=""];
5->16 [style = bold, label=""];
53->46 [style = bold, label=""];
42->58 [style = bold, label=""];
28->23 [style = bold, label=""];
33->24 [style = bold, label=""];
1->54 [style = bold, label=""];
11->25 [style = dashed, label="0"];
7->15 [style = bold, label=""];
32->39 [style = bold, label=""];
9->12 [style = bold, label=""];
35->26 [style = bold, label=""];
2->11 [style = bold, label=""];
58->61 [style = solid, label="count"];
33->22 [style = bold, label=""];
11->20 [style = bold, label=""];
53->61 [style = bold, label=""];
29->4 [style = bold, label=""];
27->36 [style = bold, label=""];
30->22 [style = bold, label=""];
9->0 [style = bold, label=""];
5->56 [style = bold, label=""];
11->50 [style = dashed, label="0"];
50->20 [style = bold, label=""];
25->32 [style = bold, label=""];
44->40 [style = bold, label=""];
39->11 [style = bold, label=""];
12->0 [style = bold, label=""];
2->50 [style = bold, label=""];
4->28 [style = bold, label=""];
9->47 [style = dashed, label="0"];
10->26 [style = dashed, label="0"];
47->55 [style = bold, label=""];
33->24 [style = solid, label="tagCreated"];
48->47 [style = bold, label=""];
15->4 [style = bold, label=""];
3->13 [style = bold, label=""];
23->34 [style = bold, label=""];
57->44 [style = bold, label=""];
61->45 [style = dotted, label="true"];
22->24 [style = bold, label=""];
20->30 [style = bold, label=""];
}
