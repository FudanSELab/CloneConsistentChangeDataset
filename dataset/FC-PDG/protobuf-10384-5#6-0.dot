digraph {
14 [style = filled, label = "input.readRawByte()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertWithMessage(\"Should have thrown an exception!\").fail()@@@7@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertEquals(0,input.getTotalBytesRead())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "CodedInputStream input = CodedInputStream.newInstance(new SmallBlockInputStream(TestUtil.getAllSet().toByteArray(),16))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(16,input.getTotalBytesRead())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "fail(\"Should have thrown an exception!\")@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "input.resetSizeCounter()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "input.readRawBytes(17)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TestAllTypes.parseFrom(input)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "input.resetSizeCounter()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(16,input.getTotalBytesRead())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "input.setSizeLimit(16)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "input.resetSizeCounter()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testSizeLimit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertEquals(0,input.getTotalBytesRead())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "checkSizeLimitExceeded(expected)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testResetSizeCounter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "input.readRawByte()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "fail(\"Should have thrown an exception!\")@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "input.readRawBytes(16)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testSizeLimit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "CodedInputStream input = CodedInputStream.newInstance(new SmallBlockInputStream(new byte((((,8))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "input.readRawBytes(16)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "InvalidProtocolBufferException expected@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
22->11 [style = bold, label=""];
0->19 [style = dashed, label="0"];
23->9 [style = bold, label=""];
10->21 [style = bold, label=""];
18->20 [style = bold, label=""];
14->3 [style = bold, label=""];
7->17 [style = dotted, label="true"];
19->1 [style = bold, label=""];
0->2 [style = solid, label="input"];
2->5 [style = bold, label=""];
1->12 [style = bold, label=""];
16->19 [style = bold, label=""];
6->0 [style = bold, label=""];
20->8 [style = bold, label=""];
15->22 [style = bold, label=""];
3->18 [style = bold, label=""];
0->1 [style = bold, label=""];
12->13 [style = bold, label=""];
2->3 [style = bold, label=""];
11->23 [style = bold, label=""];
7->17 [style = bold, label=""];
13->14 [style = bold, label=""];
3->5 [style = dashed, label="0"];
1->2 [style = bold, label=""];
8->15 [style = bold, label=""];
4->0 [style = bold, label=""];
9->10 [style = bold, label=""];
17->18 [style = bold, label=""];
}
