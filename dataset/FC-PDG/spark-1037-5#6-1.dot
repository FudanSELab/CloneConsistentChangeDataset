digraph {
0 [style = filled, label = "int size = 65536@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95)@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "Assert.assertEquals(hasher.hashUnsafeWordsBlock(mb),hasher.hashUnsafeWordsBlock(mb))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "hashcodes.add(HiveHasher.hashUnsafeBytes(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "rand.nextBytes(bytes)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "byte(( bytes = new byte((((@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "randomizedStressTestBytes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "MemoryBlock mb = ByteArrayMemoryBlock.fromArray(bytes)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95)@@@16@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int i = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(HiveHasher.hashUnsafeBytesBlock(mb),HiveHasher.hashUnsafeBytesBlock(mb))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "randomizedStressTestBytes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "i < size@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "randomizedStressTestBytes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Set<Long> hashcodes = new HashSet<>()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "int byteArrSize = rand.nextInt(100) * 8@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "hashcodes.add(hasher.hashUnsafeWordsBlock(mb))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "i++@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "hashcodes.add(HiveHasher.hashUnsafeBytesBlock(mb))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "Set<Integer> hashcodes = new HashSet<>()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95d)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Random rand = new Random()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(HiveHasher.hashUnsafeBytes(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize),HiveHasher.hashUnsafeBytes(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1->5 [style = bold, label=""];
5->3 [style = bold, label=""];
4->9 [style = bold, label=""];
13->10 [style = bold, label=""];
4->6 [style = dotted, label="true"];
4->5 [style = dotted, label="true"];
4->14 [style = bold, label=""];
6->4 [style = solid, label="i"];
21->6 [style = bold, label=""];
17->6 [style = bold, label=""];
0->12 [style = solid, label="size"];
0->14 [style = solid, label="size"];
1->21 [style = solid, label="mb"];
4->10 [style = dotted, label="true"];
4->1 [style = dotted, label="true"];
3->21 [style = dashed, label="0"];
4->20 [style = dotted, label="true"];
1->20 [style = bold, label=""];
0->11 [style = bold, label=""];
3->6 [style = bold, label=""];
4->18 [style = bold, label=""];
13->16 [style = solid, label="bytes"];
7->4 [style = bold, label=""];
16->17 [style = bold, label=""];
0->18 [style = solid, label="size"];
22->7 [style = bold, label=""];
7->4 [style = solid, label="i"];
8->7 [style = bold, label=""];
19->0 [style = bold, label=""];
5->20 [style = dashed, label="0"];
20->21 [style = bold, label=""];
1->5 [style = solid, label="mb"];
1->3 [style = solid, label="mb"];
6->4 [style = bold, label=""];
4->13 [style = dotted, label="true"];
4->21 [style = dotted, label="true"];
8->22 [style = dashed, label="0"];
2->0 [style = bold, label=""];
4->3 [style = dotted, label="true"];
5->17 [style = dashed, label="0"];
10->16 [style = bold, label=""];
15->0 [style = bold, label=""];
11->22 [style = bold, label=""];
4->12 [style = bold, label=""];
11->8 [style = bold, label=""];
12->18 [style = dashed, label="0"];
7->6 [style = solid, label="i"];
13->10 [style = solid, label="bytes"];
4->16 [style = dotted, label="true"];
0->4 [style = solid, label="size"];
4->9 [style = dotted, label="true"];
13->1 [style = solid, label="bytes"];
9->17 [style = solid, label="byteArrSize"];
10->1 [style = bold, label=""];
13->17 [style = solid, label="bytes"];
4->17 [style = dotted, label="true"];
9->16 [style = solid, label="byteArrSize"];
1->20 [style = solid, label="mb"];
9->13 [style = bold, label=""];
}
