digraph {
23 [style = filled, label = "Assert.assertNull(pti.reference())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertNull(pti.timestamp())@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "String path = \"/%\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "String branch = \"bar\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "String branch = \"bar \"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertNull(pti.timestamp())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assertions.assertThat(pti.timestamp()).isNull()@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "Assert.assertEquals(path,pti.tableIdentifier().name())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(path,pti.tableIdentifier().name())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assertions.assertThat(pti.timestamp()).isNull()@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Assertions.assertThat(path).isEqualTo(pti.tableIdentifier().name())@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assert.assertEquals(path,pti.tableIdentifier().name())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertNull(pti.timestamp())@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TableReference pti = TableReference.parse(path)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertNull(pti.timestamp())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assertions.assertThat(pti.reference()).isNull()@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Assertions.assertThat(path).isEqualTo(pti.tableIdentifier().name())@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "Assert.assertEquals(branch,pti.reference())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assertions.assertThat(branch).isEqualTo(pti.reference())@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "pti = TableReference.parse(path)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "strangeCharacters['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "String path = \"foo \"@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "pti = TableReference.parse(path + \"@\" + branch)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertNull(pti.reference())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "whitespace['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "whitespace['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "path = \"&&\"@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(path,pti.tableIdentifier().name())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "pti = TableReference.parse(path + \"@\" + branch)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(branch,pti.reference())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->6 [style = bold, label=""];
29->21 [style = bold, label=""];
26->22 [style = bold, label=""];
20->23 [style = bold, label=""];
9->11 [style = dashed, label="0"];
13->15 [style = bold, label=""];
18->20 [style = bold, label=""];
10->2 [style = bold, label=""];
5->4 [style = solid, label="branch"];
24->18 [style = bold, label=""];
8->4 [style = bold, label=""];
10->17 [style = dashed, label="0"];
15->4 [style = bold, label=""];
1->8 [style = bold, label=""];
24->22 [style = solid, label="path"];
19->6 [style = solid, label="path"];
7->19 [style = dashed, label="0"];
4->17 [style = bold, label=""];
17->14 [style = bold, label=""];
19->0 [style = bold, label=""];
24->18 [style = solid, label="path"];
7->6 [style = solid, label="path"];
16->13 [style = bold, label=""];
14->11 [style = bold, label=""];
3->5 [style = bold, label=""];
7->0 [style = solid, label="path"];
19->0 [style = solid, label="path"];
1->13 [style = dashed, label="0"];
2->9 [style = bold, label=""];
12->5 [style = bold, label=""];
9->24 [style = bold, label=""];
21->19 [style = bold, label=""];
19->4 [style = solid, label="path"];
7->10 [style = solid, label="path"];
21->28 [style = solid, label="branch"];
2->14 [style = dashed, label="0"];
24->26 [style = solid, label="path"];
7->4 [style = solid, label="path"];
8->15 [style = dashed, label="0"];
7->0 [style = bold, label=""];
27->26 [style = bold, label=""];
22->28 [style = bold, label=""];
6->16 [style = dashed, label="0"];
5->21 [style = dashed, label="0"];
4->10 [style = bold, label=""];
21->4 [style = solid, label="branch"];
21->2 [style = solid, label="branch"];
24->20 [style = solid, label="path"];
6->1 [style = bold, label=""];
5->2 [style = solid, label="branch"];
28->25 [style = bold, label=""];
5->7 [style = bold, label=""];
21->26 [style = solid, label="branch"];
19->10 [style = solid, label="path"];
23->27 [style = bold, label=""];
0->16 [style = bold, label=""];
}
