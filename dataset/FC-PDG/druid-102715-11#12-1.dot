digraph {
6 [style = filled, label = "addToHolder(holder1,raw1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final List<Object((> expectedResults = ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8e273a)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "VarianceAggregatorCollector holder2 = new VarianceAggregatorCollector()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Object raw3 = row.getRaw(\"l1\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final String sql = \"SELECT\" + \"STDDEV_POP(d1),\" + \"STDDEV_POP(f1),\" + \"STDDEV_POP(l1)\" + \"FROM numfoo\"@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "final String sql = \"SELECT\" + \"STDDEV_SAMP(d1),\" + \"STDDEV_SAMP(f1),\" + \"STDDEV_SAMP(l1)\" + \"FROM numfoo\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final List<Object((> expectedResults = ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8e2816)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "addToHolder(holder2,raw2)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testStdDevPop['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE3).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new VarianceAggregatorFactory(\"a0:agg\",\"d1\",\"sample\",\"double\"),new VarianceAggregatorFactory(\"a1:agg\",\"f1\",\"sample\",\"float\"),new VarianceAggregatorFactory(\"a2:agg\",\"l1\",\"sample\",\"long\"))).postAggregators(new StandardDeviationPostAggregator(\"a0\",\"a0:agg\",\"sample\"),new StandardDeviationPostAggregator(\"a1\",\"a1:agg\",\"sample\"),new StandardDeviationPostAggregator(\"a2\",\"a2:agg\",\"sample\")).context(BaseCalciteQueryTest.TIMESERIES_CONTEXT_DEFAULT).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "VarianceAggregatorCollector holder1 = new VarianceAggregatorCollector()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertResultsEquals(sql,expectedResults,results)@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Object raw2 = row.getRaw(\"f1\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testQuery(\"SELECT\" + \"STDDEV_POP(d1),\" + \"STDDEV_POP(f1),\" + \"STDDEV_POP(l1)\" + \"FROM numfoo\",ImmutableList.of(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE3).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new VarianceAggregatorFactory(\"a0:agg\",\"d1\",\"population\",\"double\"),new VarianceAggregatorFactory(\"a1:agg\",\"f1\",\"population\",\"float\"),new VarianceAggregatorFactory(\"a2:agg\",\"l1\",\"population\",\"long\"))).postAggregators(ImmutableList.of(new StandardDeviationPostAggregator(\"a0\",\"a0:agg\",\"population\"),new StandardDeviationPostAggregator(\"a1\",\"a1:agg\",\"population\"),new StandardDeviationPostAggregator(\"a2\",\"a2:agg\",\"population\"))).context(BaseCalciteQueryTest.QUERY_CONTEXT_DEFAULT).build()),expectedResults)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "VarianceAggregatorCollector holder3 = new VarianceAggregatorCollector()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testStdDevSamp['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "addToHolder(holder3,raw3)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Object raw1 = row.getRaw(\"d1\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testStdDevPop['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "final List<Object((> results = getSqlLifecycle().runSimple(sql,BaseCalciteQueryTest.QUERY_CONTEXT_DEFAULT,CalciteTestBase.DEFAULT_PARAMETERS,AUTH_RESULT).toList()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE3).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new VarianceAggregatorFactory(\"a0:agg\",\"d1\",\"population\",\"double\"),new VarianceAggregatorFactory(\"a1:agg\",\"f1\",\"population\",\"float\"),new VarianceAggregatorFactory(\"a2:agg\",\"l1\",\"population\",\"long\"))).postAggregators(ImmutableList.of(new StandardDeviationPostAggregator(\"a0\",\"a0:agg\",\"population\"),new StandardDeviationPostAggregator(\"a1\",\"a1:agg\",\"population\"),new StandardDeviationPostAggregator(\"a2\",\"a2:agg\",\"population\"))).context(BaseCalciteQueryTest.TIMESERIES_CONTEXT_DEFAULT).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5->3 [style = bold, label=""];
17->8 [style = bold, label=""];
16->15 [style = bold, label=""];
8->6 [style = solid, label="holder1"];
11->12 [style = solid, label="sql"];
16->15 [style = solid, label="expectedResults"];
0->12 [style = bold, label=""];
0->16 [style = dashed, label="0"];
3->6 [style = solid, label="raw1"];
7->0 [style = bold, label=""];
12->9 [style = bold, label=""];
7->3 [style = bold, label=""];
4->7 [style = bold, label=""];
13->12 [style = solid, label="results"];
18->12 [style = solid, label="sql"];
9->19 [style = dashed, label="0"];
20->18 [style = bold, label=""];
3->10 [style = bold, label=""];
6->4 [style = bold, label=""];
1->6 [style = bold, label=""];
0->12 [style = solid, label="expectedResults"];
8->2 [style = bold, label=""];
1->7 [style = solid, label="raw3"];
11->18 [style = dashed, label="0"];
11->13 [style = bold, label=""];
7->16 [style = bold, label=""];
18->13 [style = bold, label=""];
12->15 [style = dashed, label="0"];
2->4 [style = solid, label="holder2"];
13->8 [style = bold, label=""];
12->19 [style = bold, label=""];
10->1 [style = bold, label=""];
5->7 [style = solid, label="holder3"];
14->11 [style = bold, label=""];
10->4 [style = solid, label="raw2"];
2->5 [style = bold, label=""];
}
