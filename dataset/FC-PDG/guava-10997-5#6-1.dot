digraph {
4 [style = filled, label = "assertThat(graph.nodeOrder()).isEqualTo(ElementOrder.insertion())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "addEdges(graph)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "MutableNetwork<Integer,String> graph = NetworkBuilder.directed().edgeOrder(ElementOrder.sorted(Ordering.natural().reverse())).build()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertThat(graph.nodeOrder()).isEqualTo(unordered())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(graph.nodes()).containsExactly(4,1,3)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "addEdges(network)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "MutableNetwork<Integer,String> network = NetworkBuilder.directed().edgeOrder(ElementOrder.sorted(Ordering.natural().reverse())).build()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "edgeOrder_sorted['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertThat(graph.edges()).containsExactly(\"p\",\"i\",\"e\").inOrder()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(network.edgeOrder()).isEqualTo(ElementOrder.sorted(Ordering.natural().reverse()))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertThat(network.edges()).containsExactly(\"p\",\"i\",\"e\").inOrder()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertThat(graph.edgeOrder()).isEqualTo(ElementOrder.sorted(Ordering.natural().reverse()))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "edgeOrder_sorted['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "MutableNetwork<Integer,String> graph = NetworkBuilder.directed().nodeOrder(unordered()).edgeOrder(ElementOrder.sorted(Ordering.natural().reverse())).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(network.nodeOrder()).isEqualTo(ElementOrder.insertion())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "nodeOrderUnorderedandEdgesSorted['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2->3 [style = bold, label=""];
0->15 [style = dashed, label="0"];
8->6 [style = bold, label=""];
3->12 [style = bold, label=""];
15->1 [style = solid, label="graph"];
9->8 [style = bold, label=""];
4->6 [style = dashed, label="0"];
3->4 [style = bold, label=""];
10->7 [style = bold, label=""];
10->7 [style = solid, label="network"];
0->10 [style = dashed, label="0"];
4->12 [style = dashed, label="0"];
7->9 [style = bold, label=""];
12->13 [style = bold, label=""];
5->0 [style = bold, label=""];
2->9 [style = dashed, label="0"];
11->10 [style = bold, label=""];
0->1 [style = bold, label=""];
3->8 [style = dashed, label="0"];
14->15 [style = bold, label=""];
1->2 [style = bold, label=""];
1->7 [style = dashed, label="0"];
0->1 [style = solid, label="graph"];
15->1 [style = bold, label=""];
}
