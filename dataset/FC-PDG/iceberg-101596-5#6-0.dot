digraph {
2 [style = filled, label = "TableIdentifier identifier = TableIdentifier.of(\"default\",\"customers\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" + \"'\" + InputFormatConfig.EXTERNAL_TABLE_PURGE + \"'='FALSE')\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(SPEC,icebergTable.spec())@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testDeleteBackingTable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "!Catalogs.hiveCatalog(shell.getHiveConf())@@@5@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "org.apache.hadoop.hive.metastore.api.Table hmsTable = shell.metastore().getTable(\"default\",\"customers\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testTables.loadTable(identifier)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "AssertHelpers.assertThrows(\"should throw exception\",,\"Table does not exist\",null)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" + \"'\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(PartitionSpec.unpartitioned()) + \"', \" + \"'\" + InputFormatConfig.CATALOG_NAME + \"'='\" + Catalogs.ICEBERG_DEFAULT_CATALOG_NAME + \"')\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testCreateTableWithUnpartitionedSpec['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Assert.assertEquals(1,fs.listStatus(hmsTableLocation).length)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(1,fs.listStatus(new Path(hmsTableLocation,\"metadata\")).length)@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testCreateTableWithUnpartitionedSpec['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "org.apache.iceberg.Table icebergTable = testTables.loadTable(identifier)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Path hmsTableLocation = new Path(hmsTable.getSd().getLocation())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "FileSystem fs = Util.getFs(hmsTableLocation,shell.getHiveConf())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" + \"'\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(PartitionSpec.unpartitioned()) + \"')\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2->6 [style = solid, label="identifier"];
10->8 [style = dotted, label="true"];
2->8 [style = solid, label="identifier"];
2->6 [style = bold, label=""];
17->9 [style = bold, label=""];
15->16 [style = solid, label="hmsTableLocation"];
14->10 [style = bold, label=""];
6->0 [style = bold, label=""];
18->2 [style = bold, label=""];
4->6 [style = dashed, label="0"];
7->8 [style = bold, label=""];
15->12 [style = solid, label="hmsTableLocation"];
2->4 [style = bold, label=""];
10->7 [style = bold, label=""];
9->16 [style = bold, label=""];
11->15 [style = bold, label=""];
10->15 [style = dotted, label="false"];
4->0 [style = bold, label=""];
2->0 [style = solid, label="identifier"];
12->13 [style = bold, label=""];
10->12 [style = dotted, label="false"];
5->2 [style = bold, label=""];
15->17 [style = bold, label=""];
2->14 [style = solid, label="identifier"];
10->11 [style = dotted, label="false"];
3->2 [style = bold, label=""];
0->1 [style = bold, label=""];
10->17 [style = dotted, label="false"];
2->14 [style = bold, label=""];
10->13 [style = dotted, label="false"];
10->7 [style = dotted, label="true"];
10->9 [style = dotted, label="false"];
4->14 [style = dashed, label="0"];
10->16 [style = dotted, label="false"];
2->4 [style = solid, label="identifier"];
16->12 [style = bold, label=""];
15->13 [style = solid, label="hmsTableLocation"];
10->11 [style = bold, label=""];
}
