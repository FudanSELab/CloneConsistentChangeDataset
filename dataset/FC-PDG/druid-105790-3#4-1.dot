digraph {
13 [style = filled, label = "final IndexableAdapter incrementalAdapter = new IncrementalIndexAdapter(toPersist1.getInterval(),toPersist1,indexSpec.getBitmapSerdeFactory().getBitmapFactory())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertArrayEquals(getCombiningAggregators(mergedAggregators),merged.getMetadata().getAggregators())@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(Arrays.asList(\"dim1\",\"dim2\"),Lists.newArrayList(index1.getAvailableDimensions()))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "QueryableIndex index1 = closer.closeLater(indexIO.loadIndex(indexMerger.append(ImmutableList.of(incrementalAdapter),null,tempDir1,indexSpec,null)))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(Arrays.asList(\"dim1\",\"dim2\"),Lists.newArrayList(merged.getAvailableDimensions()))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertArrayEquals(IncrementalIndexTest.getDefaultCombiningAggregatorFactories(),index1.getMetadata().getAggregators())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final long timestamp = System.currentTimeMillis()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testAppendRetainsValues['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(2,index1.getColumnHolder(ColumnHolder.TIME_COLUMN_NAME).getLength())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Assert.assertEquals(2,index1.getColumn(Column.TIME_COLUMN_NAME).getLength())@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(2,merged.getColumn(Column.TIME_COLUMN_NAME).getLength())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(3,merged.getColumnNames().size())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final File mergedDir = temporaryFolder.newFolder()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertDimCompression(merged,indexSpec.getDimensionCompression())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(3,index1.getColumnNames().size())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testMergeRetainsValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "final File tempDir1 = temporaryFolder.newFolder()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "QueryableIndex merged = closer.closeLater(indexIO.loadIndex(indexMerger.mergeQueryableIndex(ImmutableList.of(index1),true,mergedAggregators,mergedDir,indexSpec,null)))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "AggregatorFactory(( mergedAggregators = new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9032f1@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "indexIO.validateTwoSegments(tempDir1,mergedDir)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "indexIO.validateTwoSegments(incrementalAdapter,queryableAdapter)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testMergeRetainsValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertDimCompression(index1,indexSpec.getDimensionCompression())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(2,merged.getColumnHolder(ColumnHolder.TIME_COLUMN_NAME).getLength())@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "IncrementalIndex toPersist1 = IncrementalIndexTest.createIndex(null)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "QueryableIndex index1 = closer.closeLater(indexIO.loadIndex(indexMerger.persist(toPersist1,tempDir1,indexSpec,null)))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "QueryableIndex merged = closer.closeLater(indexIO.loadIndex(indexMerger.mergeQueryableIndex(ImmutableList.of(index1),true,new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@903220,mergedDir,indexSpec,null)))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(Arrays.asList(\"dim1\",\"dim2\"),Lists.newArrayList(merged.getAvailableDimensions()))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "IncrementalIndexTest.populateIndex(timestamp,toPersist1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final IndexableAdapter queryableAdapter = new QueryableIndexIndexableAdapter(index1)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(2,merged.getColumn(Column.TIME_COLUMN_NAME).getLength())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9->22 [style = bold, label=""];
5->3 [style = bold, label=""];
18->3 [style = solid, label="mergedDir"];
30->17 [style = bold, label=""];
21->0 [style = bold, label=""];
9->2 [style = bold, label=""];
0->19 [style = bold, label=""];
15->21 [style = bold, label=""];
2->1 [style = bold, label=""];
13->30 [style = solid, label="incrementalAdapter"];
11->4 [style = solid, label="tempDir1"];
11->30 [style = solid, label="tempDir1"];
18->4 [style = solid, label="mergedDir"];
11->3 [style = solid, label="tempDir1"];
16->7 [style = bold, label=""];
26->25 [style = solid, label="mergedAggregators"];
29->25 [style = bold, label=""];
13->30 [style = bold, label=""];
7->13 [style = solid, label="toPersist1"];
26->24 [style = bold, label=""];
12->0 [style = bold, label=""];
28->16 [style = bold, label=""];
8->17 [style = solid, label="index1"];
12->21 [style = dashed, label="0"];
11->18 [style = bold, label=""];
30->24 [style = solid, label="index1"];
18->9 [style = solid, label="mergedDir"];
26->24 [style = solid, label="mergedAggregators"];
9->3 [style = solid, label="merged"];
7->14 [style = bold, label=""];
23->29 [style = bold, label=""];
8->17 [style = bold, label=""];
6->4 [style = bold, label=""];
3->23 [style = bold, label=""];
1->6 [style = bold, label=""];
20->16 [style = bold, label=""];
17->15 [style = solid, label="queryableAdapter"];
10->16 [style = bold, label=""];
8->5 [style = solid, label="index1"];
19->9 [style = bold, label=""];
8->9 [style = solid, label="index1"];
19->27 [style = bold, label=""];
13->15 [style = solid, label="incrementalAdapter"];
30->17 [style = solid, label="index1"];
24->29 [style = solid, label="merged"];
17->15 [style = bold, label=""];
18->13 [style = bold, label=""];
16->14 [style = solid, label="timestamp"];
7->8 [style = solid, label="toPersist1"];
11->8 [style = solid, label="tempDir1"];
7->14 [style = solid, label="toPersist1"];
18->24 [style = solid, label="mergedDir"];
8->30 [style = dashed, label="0"];
15->12 [style = bold, label=""];
22->1 [style = bold, label=""];
13->8 [style = bold, label=""];
24->6 [style = bold, label=""];
2->22 [style = dashed, label="0"];
14->11 [style = bold, label=""];
4->5 [style = bold, label=""];
30->23 [style = solid, label="index1"];
27->26 [style = bold, label=""];
}
