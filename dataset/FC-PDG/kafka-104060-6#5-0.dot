digraph {
7 [style = filled, label = "testJoinGroupRequestWithGroupInstanceIdNotFound['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testJoinGroupRequestWithFencedInstanceIdException['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "coordinator.ensureCoordinatorReady(mockTime.timer(0))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertFalse(future.isRetriable())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "mockClient.prepareResponse(groupCoordinatorResponse(node,Errors.NONE))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(coordinator.hasUnknownGeneration())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertEquals(Errors.FENCED_INSTANCE_ID.message(),future.exception().getMessage())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "RequestFuture<ByteBuffer> future = coordinator.sendJoinGroupRequest()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "mockClient.prepareResponse(joinGroupFollowerResponse(defaultGeneration,memberId,JoinGroupResponse.UNKNOWN_MEMBER_ID,Errors.UNKNOWN_MEMBER_ID))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testJoinGroupRequestWithGroupInstanceIdNotFound['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "setupCoordinator()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(coordinator.rejoinNeededOrPending())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(coordinator.hasMatchingGenerationId(defaultGeneration))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertEquals(Errors.UNKNOWN_MEMBER_ID.message(),future.exception().getMessage())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(consumerClient.poll(future,mockTime.timer(REQUEST_TIMEOUT_MS)))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "mockClient.prepareResponse(joinGroupFollowerResponse(defaultGeneration,memberId,JoinGroupResponse.UNKNOWN_MEMBER_ID,Errors.FENCED_INSTANCE_ID))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
3->9 [style = bold, label=""];
4->8 [style = bold, label=""];
5->2 [style = bold, label=""];
1->4 [style = bold, label=""];
2->0 [style = bold, label=""];
12->2 [style = bold, label=""];
7->1 [style = bold, label=""];
0->14 [style = bold, label=""];
14->15 [style = bold, label=""];
9->10 [style = bold, label=""];
8->5 [style = bold, label=""];
5->12 [style = dashed, label="0"];
3->14 [style = dashed, label="0"];
11->1 [style = bold, label=""];
8->12 [style = bold, label=""];
13->1 [style = bold, label=""];
9->6 [style = bold, label=""];
6->10 [style = dashed, label="0"];
2->0 [style = solid, label="future"];
}
