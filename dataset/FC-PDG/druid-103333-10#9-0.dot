digraph {
11 [style = filled, label = "NullHandling.replaceWithDefault()@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "int i = 0@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "i++@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "i < expectedResults.size()@@@19@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(expectedResults.size(),results.size())@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testQuantileOnInnerQuery['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "SqlLifecycle sqlLifecycle = getSqlLifecycle()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "expectedResults = ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9d18b3)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries())@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "expectedResults = ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9d18a6)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertArrayEquals(expectedResults.get(i),results.get(i))@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testQuery(\"SELECT AVG(x), APPROX_QUANTILE_FIXED_BUCKETS(x, 0.98, 100, 0.0, 100.0)\" + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\",ImmutableList.of(GroupByQuery.builder().setDataSource(new QueryDataSource(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).setGranularity(Granularities.ALL).setDimensions(new DefaultDimensionSpec(\"dim2\",\"d0\")).setAggregatorSpecs(ImmutableList.of(new DoubleSumAggregatorFactory(\"a0\",\"m1\"))).setContext(QUERY_CONTEXT_DEFAULT).build())).setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).setGranularity(Granularities.ALL).setAggregatorSpecs(new DoubleSumAggregatorFactory(\"_a0:sum\",\"a0\"),new CountAggregatorFactory(\"_a0:count\"),new FixedBucketsHistogramAggregatorFactory(\"_a1:agg\",\"a0\",100,0,100.0d,FixedBucketsHistogram.OutlierHandlingMode.IGNORE,false)).setPostAggregatorSpecs(ImmutableList.of(new ArithmeticPostAggregator(\"_a0\",\"quotient\",ImmutableList.of(new FieldAccessPostAggregator(null,\"_a0:sum\"),new FieldAccessPostAggregator(null,\"_a0:count\"))),new QuantilePostAggregator(\"_a1\",\"_a1:agg\",0.98f))).setContext(QUERY_CONTEXT_DEFAULT).build()),expectedResults)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testQuantileOnInnerQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "final List<Object((> results = sqlLifecycle.runSimple(sql,QUERY_CONTEXT_DEFAULT,DEFAULT_PARAMETERS,AUTH_RESULT).toList()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Query expected = GroupByQuery.builder().setDataSource(new QueryDataSource(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).setGranularity(Granularities.ALL).setDimensions(new DefaultDimensionSpec(\"dim2\",\"d0\")).setAggregatorSpecs(ImmutableList.of(new DoubleSumAggregatorFactory(\"a0\",\"m1\"))).setContext(QUERY_CONTEXT_DEFAULT).build())).setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).setGranularity(Granularities.ALL).setAggregatorSpecs(new DoubleSumAggregatorFactory(\"_a0:sum\",\"a0\"),new CountAggregatorFactory(\"_a0:count\"),new FixedBucketsHistogramAggregatorFactory(\"_a1:agg\",\"a0\",100,0,100.0d,FixedBucketsHistogram.OutlierHandlingMode.IGNORE,false)).setPostAggregatorSpecs(ImmutableList.of(new ArithmeticPostAggregator(\"_a0\",\"quotient\",ImmutableList.of(new FieldAccessPostAggregator(null,\"_a0:sum\"),new FieldAccessPostAggregator(null,\"_a0:count\"))),new QuantilePostAggregator(\"_a1\",\"_a1:agg\",0.98f))).setContext(QUERY_CONTEXT_DEFAULT).build()@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(GroupByQuery.builder().setDataSource(new QueryDataSource(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).setGranularity(Granularities.ALL).setDimensions(new DefaultDimensionSpec(\"dim2\",\"d0\")).setAggregatorSpecs(ImmutableList.of(new DoubleSumAggregatorFactory(\"a0\",\"m1\"))).setContext(QUERY_CONTEXT_DEFAULT).build())).setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).setGranularity(Granularities.ALL).setAggregatorSpecs(new DoubleSumAggregatorFactory(\"_a0:sum\",\"a0\"),new CountAggregatorFactory(\"_a0:count\"),new ApproximateHistogramAggregatorFactory(\"_a1:agg\",\"a0\",null,null,null,null,false)).setPostAggregatorSpecs(ImmutableList.of(new ArithmeticPostAggregator(\"_a0\",\"quotient\",ImmutableList.of(new FieldAccessPostAggregator(null,\"_a0:sum\"),new FieldAccessPostAggregator(null,\"_a0:count\"))),new QuantilePostAggregator(\"_a1\",\"_a1:agg\",0.98f))).setContext(QUERY_CONTEXT_DEFAULT).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final String sql = \"SELECT AVG(x), APPROX_QUANTILE_FIXED_BUCKETS(x, 0.98, 100, 0.0, 100.0)\" + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\"@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(expected,actual)@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "final String sql = \"SELECT AVG(x), APPROX_QUANTILE(x, 0.98)\" + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testQuantileOnInnerQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final List<Object((> expectedResults@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12->9 [style = solid, label="i"];
2->20 [style = bold, label=""];
4->6 [style = bold, label=""];
7->10 [style = bold, label=""];
10->19 [style = dashed, label="0"];
1->9 [style = solid, label="i"];
2->3 [style = bold, label=""];
11->4 [style = bold, label=""];
0->11 [style = bold, label=""];
3->15 [style = bold, label=""];
10->5 [style = solid, label="actual"];
11->13 [style = dotted, label="true"];
7->9 [style = dotted, label="true"];
1->7 [style = solid, label="i"];
18->2 [style = bold, label=""];
1->7 [style = bold, label=""];
13->16 [style = bold, label=""];
12->7 [style = bold, label=""];
11->4 [style = dotted, label="false"];
7->9 [style = bold, label=""];
8->5 [style = solid, label="expected"];
6->16 [style = dashed, label="0"];
17->0 [style = bold, label=""];
10->8 [style = bold, label=""];
8->5 [style = bold, label=""];
15->0 [style = bold, label=""];
11->13 [style = bold, label=""];
3->20 [style = dashed, label="0"];
12->1 [style = solid, label="i"];
14->2 [style = bold, label=""];
13->6 [style = bold, label=""];
9->1 [style = bold, label=""];
7->1 [style = dotted, label="true"];
20->15 [style = bold, label=""];
7->19 [style = bold, label=""];
12->7 [style = solid, label="i"];
13->16 [style = solid, label="expectedResults"];
4->16 [style = bold, label=""];
4->16 [style = solid, label="expectedResults"];
6->12 [style = bold, label=""];
}
