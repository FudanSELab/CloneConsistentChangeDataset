digraph {
8 [style = filled, label = "b1 = new DialBackground()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testSerialization['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertEquals(b1,b2)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(b1.getClass() == b2.getClass())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "b1.setPaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.green))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(b1.hasListener(l1))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "b1.setPaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.GREEN))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "b2 = TestUtils.serialised(b1)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testSerialization['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "b1.addChangeListener(l1)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "DialBackground b1 = new DialBackground()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertTrue(b1.getClass() == b2.getClass())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertTrue(b1.equals(b2))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertTrue(b1 != b2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "DialBackground b2 = (DialBackground)b1.clone()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "MyDialLayerChangeListener l1 = new MyDialLayerChangeListener()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "b1.setGradientPaintTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.CENTER_VERTICAL))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testCloning['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "b2 = (DialBackground)TestUtils.serialised(b1)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "DialBackground b2 = TestUtils.serialised(b1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertTrue(b1.equals(b2))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "DialBackground b2 = (DialBackground)TestUtils.serialised(b1)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "assertTrue(b1 != b2)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "b2 = (DialBackground)b1.clone()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertFalse(b2.hasListener(l1))@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "b1 = new DialBackground()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25->0 [style = bold, label=""];
14->16 [style = bold, label=""];
0->4 [style = solid, label="b1"];
4->3 [style = bold, label=""];
0->10 [style = solid, label="b1"];
9->1 [style = solid, label="b2"];
22->15 [style = bold, label=""];
21->15 [style = solid, label="b2"];
0->2 [style = solid, label="b1"];
18->14 [style = solid, label="l1"];
18->13 [style = solid, label="l1"];
0->12 [style = bold, label=""];
0->2 [style = bold, label=""];
3->5 [style = solid, label="b1"];
7->20 [style = dashed, label="0"];
8->24 [style = solid, label="b1"];
5->9 [style = dashed, label="0"];
6->0 [style = bold, label=""];
21->24 [style = bold, label=""];
20->1 [style = bold, label=""];
7->8 [style = bold, label=""];
2->4 [style = solid, label="b2"];
2->4 [style = bold, label=""];
24->22 [style = bold, label=""];
15->18 [style = bold, label=""];
17->19 [style = bold, label=""];
19->8 [style = bold, label=""];
2->10 [style = dashed, label="0"];
0->23 [style = solid, label="b1"];
3->9 [style = solid, label="b1"];
5->1 [style = bold, label=""];
2->12 [style = dashed, label="0"];
0->10 [style = bold, label=""];
11->0 [style = bold, label=""];
8->20 [style = bold, label=""];
8->5 [style = bold, label=""];
3->7 [style = bold, label=""];
1->24 [style = dashed, label="0"];
1->21 [style = bold, label=""];
3->1 [style = solid, label="b1"];
8->9 [style = bold, label=""];
18->13 [style = bold, label=""];
10->4 [style = bold, label=""];
5->21 [style = dashed, label="0"];
23->17 [style = bold, label=""];
18->16 [style = solid, label="l1"];
12->23 [style = bold, label=""];
9->1 [style = bold, label=""];
12->23 [style = solid, label="b2"];
4->23 [style = dashed, label="0"];
10->4 [style = solid, label="b2"];
21->24 [style = solid, label="b2"];
13->14 [style = bold, label=""];
12->19 [style = solid, label="b2"];
5->1 [style = solid, label="b2"];
}
