digraph {
6 [style = filled, label = "assertEquals(standbyTasks,decoded.standbyTasks())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"localhost:80\",decoded.userEndPoint())@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final SubscriptionInfo info = new SubscriptionInfo(2,LATEST_SUPPORTED_VERSION,processId,activeTasks,standbyTasks,\"localhost:80\")@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(processId,decoded.processId())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final SubscriptionInfo decoded = SubscriptionInfo.decode(info.encode())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final SubscriptionInfo info = new SubscriptionInfo(2,LATEST_SUPPORTED_VERSION,processId,\"localhost:80\",TASK_OFFSET_SUMS)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "shouldEncodeAndDecodeVersion2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(activeTasks,decoded.prevTasks())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(ACTIVE_TASKS,decoded.prevTasks())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "final LegacySubscriptionInfoSerde decoded = LegacySubscriptionInfoSerde.decode(buffer)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(2,decoded.version())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(2,decoded.version())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(STANDBY_TASKS,decoded.standbyTasks())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "generatedVersion2ShouldBeDecodableByLegacyLogic['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final ByteBuffer buffer = info.encode()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(SubscriptionInfo.UNKNOWN,decoded.latestSupportedVersion())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "shouldEncodeAndDecodeVersion2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16->13 [style = bold, label=""];
2->3 [style = bold, label=""];
3->16 [style = bold, label=""];
11->9 [style = bold, label=""];
15->3 [style = bold, label=""];
1->7 [style = bold, label=""];
9->6 [style = bold, label=""];
6->14 [style = bold, label=""];
3->12 [style = dashed, label="0"];
8->5 [style = bold, label=""];
5->0 [style = bold, label=""];
0->4 [style = bold, label=""];
10->12 [style = bold, label=""];
12->8 [style = bold, label=""];
1->11 [style = dashed, label="0"];
3->8 [style = bold, label=""];
7->9 [style = dashed, label="0"];
7->6 [style = bold, label=""];
16->13 [style = solid, label="buffer"];
4->1 [style = bold, label=""];
4->11 [style = bold, label=""];
13->0 [style = bold, label=""];
}
