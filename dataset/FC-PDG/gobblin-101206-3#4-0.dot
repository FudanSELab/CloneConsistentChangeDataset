digraph {
6 [style = filled, label = "Assert.assertTrue(columnTypes.get(0).equals(\"string\"))@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testOrcSchemaLiteral['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Assert.assertTrue(registrationUnit.getSerDeProps().getProp(HiveOrcSerDeManager.SCHEMA_LITERAL).contains(\"name:string,timestamp:bigint\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertTrue(registrationUnit.getSerDeProps().getProp(HiveAvroSerDeManager.SCHEMA_LITERAL).contains(\"example.avro\"))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "manager.addSerDeProperties(this.testBasePath,registrationUnit)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertTrue(columnTypes.get(1).equals(\"bigint\"))@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Assert.assertTrue(columns.get(0).equals(\"name\"))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "HiveOrcSerDeManager manager = new HiveOrcSerDeManager(state)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testSchemaLiteral['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testOrcSchemaLiteral['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "List<String> columns = Arrays.asList(registrationUnit.getSerDeProps().getProp(serdeConstants.LIST_COLUMNS).split(\",\"))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "List<String> columnTypes = Arrays.asList(registrationUnit.getSerDeProps().getProp(serdeConstants.LIST_COLUMN_TYPES).split(\",\"))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "HiveRegistrationUnit registrationUnit = (new HiveTable.Builder()).withDbName(TEST_DB).withTableName(TEST_TABLE).build()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "State state = new State()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "manager.addSerDeProperties(this.testRegisterPath,registrationUnit)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "HiveAvroSerDeManager manager = new HiveAvroSerDeManager(state)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertTrue(columns.get(1).equals(\"timestamp\"))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
3->16 [style = solid, label="state"];
4->0 [style = solid, label="registrationUnit"];
4->14 [style = solid, label="registrationUnit"];
8->9 [style = bold, label=""];
9->11 [style = bold, label=""];
16->4 [style = bold, label=""];
3->1 [style = solid, label="state"];
14->13 [style = bold, label=""];
0->14 [style = dashed, label="0"];
11->6 [style = bold, label=""];
10->3 [style = bold, label=""];
3->1 [style = bold, label=""];
1->4 [style = bold, label=""];
15->3 [style = bold, label=""];
4->14 [style = bold, label=""];
1->16 [style = dashed, label="0"];
5->3 [style = bold, label=""];
3->16 [style = bold, label=""];
0->2 [style = bold, label=""];
6->7 [style = bold, label=""];
4->0 [style = bold, label=""];
12->8 [style = bold, label=""];
2->12 [style = bold, label=""];
2->13 [style = dashed, label="0"];
}
