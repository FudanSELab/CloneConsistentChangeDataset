digraph {
13 [style = filled, label = "log.info(\"Starting HttpServerInventoryView.\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "DruidNodeDiscovery druidNodeDiscovery = druidNodeDiscoveryProvider.getForService(DataNodeService.DISCOVERY_SERVICE_KEY)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "throw new ISE(\"can't start.\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "return new Worker(node.getDruidNode().getServiceScheme(),node.getDruidNode().getHostAndPortToUse(),((WorkerNodeService)node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getIp(),((WorkerNodeService)node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getCapacity(),((WorkerNodeService)node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getVersion())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "executor = ScheduledExecutors.fixed(config.getNumThreads(),\"HttpServerInventoryView-%s\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "start['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "lifecycleLock@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "toWorker['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "scheduleSyncMonitoring()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "lifecycleLock.started()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "log.info(\"Started HttpServerInventoryView.\")@@@35@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "DiscoveryDruidNode node@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "toWorker['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "{lifecycleLock.exitStart()}@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "return new Worker(node.getDruidNode().getServiceScheme(),node.getDruidNode().getHostAndPortToUse(),((WorkerNodeService)node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getIp(),((WorkerNodeService)node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getCapacity(),((WorkerNodeService)node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getVersion(),((WorkerNodeService)node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getCategory())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "!lifecycleLock.canStart()@@@4@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "druidNodeDiscovery.registerListener(new DruidNodeDiscovery.Listener(){@Override public void nodesAdded(Collection<DiscoveryDruidNode> nodes){nodes.forEach(null)}@Override public void nodesRemoved(Collection<DiscoveryDruidNode> nodes){nodes.forEach(null)}@Override public void nodeViewInitialized(){if (!initialized.getAndSet(true)) {executor.execute(null)}}private DruidServer toDruidServer(DiscoveryDruidNode node){return new DruidServer(node.getDruidNode().getHostAndPortToUse(),node.getDruidNode().getHostAndPort(),node.getDruidNode().getHostAndTlsPort(),((DataNodeService)node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getMaxSize(),((DataNodeService)node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getType(),((DataNodeService)node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getTier(),((DataNodeService)node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getPriority())}})@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10->8 [style = dotted, label="true"];
4->3 [style = bold, label=""];
10->6 [style = dotted, label="true"];
10->12 [style = dotted, label="true"];
2->0 [style = dotted, label="true"];
1->3 [style = dashed, label="0"];
12->5 [style = bold, label=""];
11->14 [style = bold, label=""];
2->1 [style = bold, label=""];
16->6 [style = bold, label=""];
4->0 [style = dotted, label="true"];
11->14 [style = dotted, label="true"];
9->10 [style = bold, label=""];
7->8 [style = bold, label=""];
10->5 [style = dotted, label="true"];
10->15 [style = dotted, label="true"];
5->16 [style = bold, label=""];
10->13 [style = dotted, label="true"];
10->11 [style = dotted, label="true"];
11->13 [style = bold, label=""];
15->12 [style = bold, label=""];
13->15 [style = bold, label=""];
14->13 [style = bold, label=""];
6->7 [style = bold, label=""];
10->16 [style = dotted, label="true"];
10->11 [style = bold, label=""];
}
