digraph {
11 [style = filled, label = "int shardCount = randomIntBetween(1,10)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "verifyUnchangedOnAbort(noDataMasterSettings,matcher,verbose)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testCleanupShardData['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "new NodeEnvironment(noDataMasterSettings,environment).close()@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testCleanupShardData['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "verifySuccess(noDataMasterSettings,matcher,verbose)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertManifestIdenticalExceptIndices(manifest,newManifest)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "checkCleanupAll(not(containsString(PRE_V7_MESSAGE)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(newManifest.getIndexGenerations().entrySet(),hasSize(1))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertThat(newManifest.getIndexGenerations().entrySet(),hasSize(0))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testCleanupAll['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertManifestIdenticalExceptIndices(oldManifest,newManifest)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "expectThrows(,null)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "boolean verbose = randomBoolean()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Manifest manifest = randomBoolean()? createManifest(INDEX): null@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "createIndexDataFiles(dataMasterSettings,shardCount)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "Manifest newManifest = loadManifest()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "boolean hasClusterState = randomBoolean()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "manifest != null@@@12@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "Manifest oldManifest = createManifest(INDEX)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Manifest newManifest = loadManifest()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "createIndexDataFiles(dataMasterSettings,shardCount,hasClusterState)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Matcher<String> matcher = allOf(containsString(NodeRepurposeCommand.shardMessage(environment.dataFiles().length * shardCount,1)),conditionalNot(containsString(\"testUUID\"),verbose == false),conditionalNot(containsString(\"testIndex\"),verbose == false || hasClusterState == false),conditionalNot(containsString(\"no name for uuid: testUUID\"),verbose == false || hasClusterState))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Matcher<String> matcher = allOf(containsString(NodeRepurposeCommand.shardMessage(environment.dataFiles().length * shardCount,1)),conditionalNot(containsString(\"testUUID\"),verbose == false),conditionalNot(containsString(\"testIndex\"),verbose == false))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1->3 [style = solid, label="manifest"];
6->21 [style = dashed, label="0"];
4->3 [style = bold, label=""];
7->11 [style = bold, label=""];
8->10 [style = solid, label="verbose"];
23->21 [style = solid, label="oldManifest"];
11->15 [style = solid, label="shardCount"];
9->4 [style = bold, label=""];
8->2 [style = solid, label="verbose"];
0->15 [style = dashed, label="0"];
1->0 [style = bold, label=""];
16->2 [style = bold, label=""];
10->9 [style = solid, label="matcher"];
15->16 [style = bold, label=""];
12->6 [style = bold, label=""];
3->6 [style = dotted, label="true"];
22->23 [style = bold, label=""];
20->21 [style = solid, label="newManifest"];
11->0 [style = solid, label="shardCount"];
2->13 [style = bold, label=""];
11->10 [style = solid, label="shardCount"];
8->17 [style = bold, label=""];
8->1 [style = bold, label=""];
18->20 [style = bold, label=""];
0->10 [style = bold, label=""];
3->5 [style = bold, label=""];
16->9 [style = solid, label="matcher"];
3->5 [style = dotted, label="true"];
1->17 [style = dashed, label="0"];
12->19 [style = dashed, label="0"];
5->12 [style = bold, label=""];
8->16 [style = solid, label="verbose"];
3->12 [style = dotted, label="true"];
10->2 [style = solid, label="matcher"];
17->15 [style = bold, label=""];
11->8 [style = bold, label=""];
10->2 [style = bold, label=""];
13->9 [style = bold, label=""];
5->6 [style = solid, label="newManifest"];
10->16 [style = dashed, label="0"];
20->19 [style = bold, label=""];
8->9 [style = solid, label="verbose"];
14->11 [style = bold, label=""];
11->16 [style = solid, label="shardCount"];
17->15 [style = solid, label="hasClusterState"];
23->18 [style = bold, label=""];
17->16 [style = solid, label="hasClusterState"];
16->2 [style = solid, label="matcher"];
1->6 [style = solid, label="manifest"];
19->21 [style = bold, label=""];
}
