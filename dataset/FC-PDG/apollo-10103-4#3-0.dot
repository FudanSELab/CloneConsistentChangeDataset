digraph {
29 [style = filled, label = "verify(restTemplate).getForObject(serviceOne + \"/\" + path,)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "when(restTemplate.getForObject(serviceTwo + \"/\" + path,)).thenReturn(result)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "when(serviceAddressLocator.getServiceList(any())).thenReturn(Arrays.asList(mockService(serviceOne),mockService(serviceTwo),mockService(serviceThree)))@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "when(someEntity.getBody()).thenReturn(result)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "verify(restTemplate).postForEntity(serviceOne + \"/\" + path,request,)@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "when(restTemplate.getForObject(serviceOne + \"/\" + path,)).thenThrow(socketTimeoutException)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "verify(restTemplate,times(0)).getForObject(serviceThree + \"/\" + path,)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "testOneServerDown['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "exception = ex@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "Object o = retryableRestTemplate.get(Env.DEV,path,)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "ResponseEntity someEntity = mock()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "verify(restTemplate,never()).exchange(eq(serviceTwo + \"/\" + path),eq(HttpMethod.POST),any(),eq())@@@19@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "verify(restTemplate,times(0)).postForEntity(serviceTwo + \"/\" + path,request,)@@@8@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testPostSocketTimeoutNotRetry['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Throwable exception = null@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertNull(actualResult)@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "when(serviceAddressLocator.getServiceList(any())).thenReturn(Arrays.asList(mockService(serviceOne),mockService(serviceTwo),mockService(serviceThree)))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "verify(restTemplate).getForObject(serviceTwo + \"/\" + path,)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertSame(socketTimeoutException,exception)@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "Assert.assertEquals(result,o)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "when(restTemplate.exchange(eq(serviceTwo + \"/\" + path),eq(HttpMethod.POST),any(),eq())).thenReturn(someEntity)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "Throwable ex@@@13@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "Object result = new Object()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "retryableRestTemplate.post(Env.DEV,path,request,)@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Object actualResult = null@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "actualResult = retryableRestTemplate.post(Env.DEV,path,request,)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testPostSocketTimeoutNotRetry['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "when(restTemplate.postForEntity(serviceTwo + \"/\" + path,request,)).thenReturn(entity)@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "verify(restTemplate,times(1)).exchange(eq(serviceOne + \"/\" + path),eq(HttpMethod.POST),any(),eq())@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "when(restTemplate.getForObject(serviceThree + \"/\" + path,)).thenThrow(connectTimeoutException)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "when(serviceAddressLocator.getServiceList(any())).thenReturn(Arrays.asList(mockService(serviceOne),mockService(serviceTwo),mockService(serviceThree)))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "when(restTemplate.exchange(eq(serviceOne + \"/\" + path),eq(HttpMethod.POST),any(),eq())).thenThrow(socketTimeoutException)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4->29 [style = dashed, label="0"];
7->8 [style = bold, label=""];
2->4 [style = bold, label=""];
26->28 [style = solid, label="o"];
12->20 [style = solid, label="exception"];
3->2 [style = bold, label=""];
22->6 [style = bold, label=""];
11->9 [style = solid, label="actualResult"];
9->20 [style = bold, label=""];
16->19 [style = bold, label=""];
6->0 [style = bold, label=""];
5->1 [style = bold, label=""];
10->20 [style = solid, label="exception"];
3->27 [style = dashed, label="0"];
30->22 [style = bold, label=""];
11->9 [style = bold, label=""];
17->12 [style = bold, label=""];
6->24 [style = bold, label=""];
0->3 [style = bold, label=""];
14->11 [style = bold, label=""];
1->6 [style = bold, label=""];
22->25 [style = solid, label="result"];
29->23 [style = bold, label=""];
22->28 [style = solid, label="result"];
16->8 [style = solid, label="someEntity"];
23->31 [style = bold, label=""];
12->9 [style = bold, label=""];
0->25 [style = dashed, label="0"];
20->21 [style = bold, label=""];
17->12 [style = dotted, label="true"];
27->26 [style = bold, label=""];
6->24 [style = dashed, label="0"];
15->16 [style = bold, label=""];
24->25 [style = bold, label=""];
25->27 [style = bold, label=""];
31->28 [style = bold, label=""];
19->18 [style = bold, label=""];
10->14 [style = bold, label=""];
8->10 [style = bold, label=""];
26->29 [style = bold, label=""];
21->13 [style = bold, label=""];
18->7 [style = bold, label=""];
}
