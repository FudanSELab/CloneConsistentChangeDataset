digraph {
5 [style = filled, label = "i++@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "stream2 = builder.stream(topic2,consumed)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+null\",\"1:X1+null\")@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "i < 2@@@27@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "int i = 0@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "i < 2@@@45@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+Y0\",\"1:X1+Y1\")@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "i++@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "driver.pipeInput(recordFactory.create(topic2,expectedKeys(i(,\"YYY\" + expectedKeys(i())@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "i < 2@@@21@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "testOuterJoin['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "driver.pipeInput(recordFactory.create(topic1,expectedKey,\"XX\" + expectedKey))@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "joined.process(supplier)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+Y0\",\"1:X1+Y1\")@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "processor.checkAndClearProcessResult()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "stream1 = builder.stream(topic1,consumed)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(topic1,topic2)),copartitionGroups.iterator().next())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final KStream<Integer,String> stream1@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testJoin['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "joined = stream1.outerJoin(stream2,MockValueJoiner.TOSTRING_JOINER,JoinWindows.of(100),Joined.with(Serdes.Integer(),Serdes.String(),Serdes.String()))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final int(( expectedKeys = new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b54657@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "driver.pipeInput(recordFactory.create(topic1,expectedKey,\"X\" + expectedKey))@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final KStream<Integer,String> stream2@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "int i = 0@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final Collection<Set<String>> copartitionGroups = TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "int i = 0@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "joined = stream1.join(stream2,MockValueJoiner.TOSTRING_JOINER,JoinWindows.of(100),Joined.with(Serdes.Integer(),Serdes.String(),Serdes.String()))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+Y0\",\"1:X1+Y1\",\"2:X2+null\",\"3:X3+null\")@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "final MockProcessor<Integer,String> processor = supplier.theCapturedProcessor()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final StreamsBuilder builder = new StreamsBuilder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final KStream<Integer,String> joined@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "driver.pipeInput(recordFactory.create(topic1,expectedKeys(i(,\"X\" + expectedKeys(i())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testJoin['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "processor.checkAndClearProcessResult(\"0:XX0+Y0\",\"0:XX0+YY0\",\"1:XX1+Y1\",\"1:XX1+YY1\",\"2:XX2+YY2\",\"3:XX3+YY3\")@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "i++@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "driver.pipeInput(recordFactory.create(topic2,expectedKeys(i(,\"Y\" + expectedKeys(i())@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "driver.pipeInput(recordFactory.create(topic2,expectedKey,\"YY\" + expectedKey))@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+YYY0\",\"0:X0+YYY0\",\"0:XX0+YYY0\",\"1:X1+YYY1\",\"1:X1+YYY1\",\"1:XX1+YYY1\")@@@49@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(1,copartitionGroups.size())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "processor.checkAndClearProcessResult(\"0:X0+YY0\",\"0:X0+YY0\",\"1:X1+YY1\",\"1:X1+YY1\",\"2:X2+YY2\",\"3:X3+YY3\")@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final MockProcessorSupplier<Integer,String> supplier = new MockProcessorSupplier<>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33->14 [style = bold, label=""];
15->2 [style = bold, label=""];
5->16 [style = solid, label="i"];
30->40 [style = dashed, label="0"];
4->7 [style = solid, label="builder"];
40->6 [style = bold, label=""];
6->26 [style = solid, label="i"];
12->0 [style = solid, label="i"];
35->15 [style = bold, label=""];
10->39 [style = dashed, label="0"];
24->35 [style = bold, label=""];
35->41 [style = bold, label=""];
10->27 [style = bold, label=""];
19->29 [style = bold, label=""];
12->8 [style = solid, label="i"];
22->9 [style = bold, label=""];
8->3 [style = bold, label=""];
36->4 [style = bold, label=""];
18->19 [style = bold, label=""];
38->4 [style = bold, label=""];
17->40 [style = bold, label=""];
28->13 [style = bold, label=""];
17->30 [style = bold, label=""];
33->14 [style = dotted, label="true"];
29->34 [style = bold, label=""];
39->27 [style = bold, label=""];
30->6 [style = bold, label=""];
5->17 [style = bold, label=""];
41->2 [style = bold, label=""];
13->11 [style = bold, label=""];
33->26 [style = dotted, label="true"];
31->12 [style = bold, label=""];
8->3 [style = dotted, label="true"];
22->16 [style = solid, label="expectedKeys"];
3->0 [style = bold, label=""];
21->28 [style = bold, label=""];
20->4 [style = bold, label=""];
15->41 [style = dashed, label="0"];
25->31 [style = bold, label=""];
5->17 [style = solid, label="i"];
17->16 [style = dotted, label="true"];
9->23 [style = bold, label=""];
14->26 [style = bold, label=""];
8->1 [style = bold, label=""];
22->14 [style = solid, label="expectedKeys"];
22->3 [style = solid, label="expectedKeys"];
27->37 [style = bold, label=""];
6->33 [style = solid, label="i"];
11->39 [style = solid, label="stream2"];
23->21 [style = bold, label=""];
11->10 [style = bold, label=""];
12->8 [style = bold, label=""];
6->33 [style = bold, label=""];
33->24 [style = bold, label=""];
34->17 [style = bold, label=""];
27->7 [style = bold, label=""];
0->3 [style = solid, label="i"];
32->25 [style = bold, label=""];
0->8 [style = bold, label=""];
0->8 [style = solid, label="i"];
37->18 [style = bold, label=""];
7->18 [style = bold, label=""];
16->5 [style = bold, label=""];
11->39 [style = bold, label=""];
28->27 [style = solid, label="supplier"];
7->37 [style = dashed, label="0"];
8->0 [style = dotted, label="true"];
2->32 [style = bold, label=""];
26->33 [style = solid, label="i"];
34->5 [style = solid, label="i"];
12->3 [style = solid, label="i"];
26->33 [style = bold, label=""];
11->10 [style = solid, label="stream2"];
34->17 [style = solid, label="i"];
4->22 [style = bold, label=""];
6->14 [style = solid, label="i"];
17->16 [style = bold, label=""];
26->14 [style = solid, label="i"];
34->16 [style = solid, label="i"];
17->5 [style = dotted, label="true"];
}
