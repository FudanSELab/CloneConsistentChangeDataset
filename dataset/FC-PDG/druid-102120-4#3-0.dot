digraph {
20 [style = filled, label = "assertEquals(\"0.8\",rows.get(0).getDimension(\"subtype\").get(0))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testDate2038['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Assert.assertEquals(\"2038-12-25T00:00:00.000Z\",rows.get(0).getDimension(\"date\").get(0))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertEquals(\"1.2\",rows.get(0).getDimension(\"decimal1\").get(0))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(1,rows.get(0).getDimensions().size())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "testOrcSplitElim['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(4,rows.get(0).getDimensions().size())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(DateTimes.of(\"2038-05-05T12:34:56.1Z\"),rows.get(0).getTimestamp())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(\"foo\",rows.get(0).getDimension(\"string1\").get(0))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "HadoopDruidIndexerConfig config = loadHadoopDruidIndexerConfig(\"example/orc_split_elim_hadoop_job.json\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(DateTimes.of(\"1969-12-31T16:00:00.0Z\"),rows.get(0).getTimestamp())@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "HadoopDruidIndexerConfig config = loadHadoopDruidIndexerConfig(\"example/testDate2038_hadoop_job.json\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "config.intoConfiguration(job)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "List<InputRow> rows = (List<InputRow>)config.getParser().parseBatch(data)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "OrcStruct data = getFirstRow(job,((StaticPathSpec)config.getPathSpec()).getPaths())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(\"2038-12-25T00:00:00.000Z\",rows.get(0).getDimension(\"date\").get(0))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertEquals(DateTimes.of(\"2038-05-05T12:34:56.1Z\"),rows.get(0).getTimestamp())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertEquals(\"2\",rows.get(0).getDimension(\"userid\").get(0))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testDate2038['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(1,rows.get(0).getDimensions().size())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Job job = Job.getInstance(new Configuration())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18->3 [style = bold, label=""];
5->12 [style = dashed, label="0"];
8->10 [style = dashed, label="0"];
3->1 [style = solid, label="job"];
7->12 [style = bold, label=""];
9->2 [style = bold, label=""];
0->19 [style = dashed, label="0"];
2->3 [style = bold, label=""];
12->11 [style = bold, label=""];
20->14 [style = bold, label=""];
0->11 [style = dashed, label="0"];
16->19 [style = bold, label=""];
3->4 [style = bold, label=""];
1->7 [style = bold, label=""];
3->4 [style = solid, label="job"];
8->13 [style = dashed, label="0"];
6->2 [style = bold, label=""];
5->16 [style = dashed, label="0"];
1->7 [style = solid, label="data"];
7->5 [style = bold, label=""];
19->13 [style = bold, label=""];
5->0 [style = bold, label=""];
11->10 [style = bold, label=""];
7->16 [style = bold, label=""];
0->8 [style = bold, label=""];
2->18 [style = dashed, label="0"];
14->15 [style = bold, label=""];
4->1 [style = bold, label=""];
17->18 [style = bold, label=""];
13->20 [style = bold, label=""];
}
