digraph {
0 [style = filled, label = "Query barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertEquals(3.0,((BoostQuery)q).getBoost(),1e-15)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(5.0,((BoostQuery)fooClause).getBoost(),1e-15)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "fooClause = ((BooleanQuery)dmq.getDisjuncts().stream().filter(null).findFirst().get()).clauses().iterator().next().getQuery()@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "List<Query> qa = ((DisjunctionMaxQuery)clauses(0(.getQuery()).getDisjuncts()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(2,qa.size())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(\"text:foo\",qa.get(0).toString())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertTrue(clauses(0(.getQuery() instanceof DisjunctionMaxQuery)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(2,clauses.length)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery()@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "clauses = clauses(q)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "q = parse(\"foo bar\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(2.0,((BoostQuery)fooClause).getBoost(),1e-15)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(0.0,((DisjunctionMaxQuery)clauses(0(.getQuery()).getTieBreakerMultiplier(),1e-15)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertFalse(q instanceof BoostQuery)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "q = parse(\"foo^3.0\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testPureMax['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "clauses = clauses(q)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Query fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery()@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertEquals(6.0,((BoostQuery)barClause).getBoost(),1e-15)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertTrue(clauses(0(.getQuery() instanceof DisjunctionMaxQuery)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testBoost['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertFalse(barClause instanceof BoostQuery)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(7.0,((BoostQuery)clauses(1(.getQuery()).getBoost(),1e-15)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(3.0,((BoostQuery)q).getBoost(),1e-15)@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "q = parse(\"(foo^2.0 bar)^3.0\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Query barClause = ((BooleanQuery)dmq.getDisjuncts().stream().filter(null).findFirst().get()).clauses().iterator().next().getQuery()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "testBoost['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "barClause = ((BooleanQuery)dmq.getDisjuncts().stream().filter(null).findFirst().get()).clauses().iterator().next().getQuery()@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "assertEquals(1,clauses.length)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "q = parse(\"foo^5.0 bar^6.0 +baz^7\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery()@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "Query fooClause = ((BooleanQuery)dmq.getDisjuncts().stream().filter(null).findFirst().get()).clauses().iterator().next().getQuery()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "DisjunctionMaxQuery dmq = ((DisjunctionMaxQuery)clauses(0(.getQuery())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "dmq = ((DisjunctionMaxQuery)clauses(0(.getQuery())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(q instanceof BoostQuery)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35->31 [style = bold, label=""];
29->8 [style = bold, label=""];
15->10 [style = bold, label=""];
4->23 [style = solid, label="q"];
8->19 [style = solid, label="q"];
20->13 [style = bold, label=""];
22->2 [style = bold, label=""];
30->33 [style = bold, label=""];
5->9 [style = bold, label=""];
16->8 [style = bold, label=""];
8->19 [style = bold, label=""];
21->15 [style = bold, label=""];
1->3 [style = bold, label=""];
1->20 [style = bold, label=""];
7->24 [style = solid, label="q"];
22->28 [style = bold, label=""];
4->1 [style = solid, label="q"];
0->27 [style = dashed, label="0"];
21->25 [style = bold, label=""];
28->12 [style = bold, label=""];
12->0 [style = bold, label=""];
10->6 [style = bold, label=""];
11->18 [style = bold, label=""];
2->12 [style = bold, label=""];
26->21 [style = bold, label=""];
9->23 [style = bold, label=""];
11->26 [style = bold, label=""];
7->24 [style = bold, label=""];
17->34 [style = bold, label=""];
15->25 [style = dashed, label="0"];
11->1 [style = dashed, label="0"];
19->14 [style = bold, label=""];
25->10 [style = solid, label="barClause"];
31->30 [style = solid, label="q"];
32->1 [style = bold, label=""];
31->30 [style = bold, label=""];
2->28 [style = dashed, label="0"];
3->17 [style = bold, label=""];
33->32 [style = bold, label=""];
25->10 [style = bold, label=""];
1->24 [style = solid, label="clauses"];
4->1 [style = bold, label=""];
23->7 [style = bold, label=""];
13->22 [style = bold, label=""];
18->21 [style = bold, label=""];
27->5 [style = bold, label=""];
8->31 [style = dashed, label="0"];
21->17 [style = dashed, label="0"];
12->27 [style = bold, label=""];
24->3 [style = bold, label=""];
15->10 [style = solid, label="barClause"];
18->26 [style = dashed, label="0"];
0->5 [style = bold, label=""];
14->4 [style = bold, label=""];
17->11 [style = bold, label=""];
}
