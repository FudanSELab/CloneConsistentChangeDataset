digraph {
25 [style = filled, label = "taskConfigs.add(new TaskConfig.Builder().setTaskId(\"task_\" + j).setCommand(MockTask.TASK_COMMAND).build())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "cfgBuilder.setAllowOverlapJobAssignment(true)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "int i = 0@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Thread.sleep(1000L)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "Assert.assertTrue(verifier.verifyByPolling())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "i < PARALLEL_COUNT@@@19@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "cfgBuilder.setParallelJobs(PARALLEL_COUNT)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Thread.sleep(2000)@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver,queueName))@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "_participants(i(.syncStop()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testWhenDisallowOverlapJobAssignment['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "_driver.createQueue(queue)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String queueName = TestHelper.getTestMethodName()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "_driver.resume(queueName)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "i++@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "String queueName = TestHelper.getTestMethodName()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "int i = 0@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testWhenAllowOverlapJobAssignment['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "JobQueue.Builder queueBuild = new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "jobConfigBuilders.add(new JobConfig.Builder().addTaskConfigs(taskConfigs))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "JobQueue.Builder queueBuild = new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testWhenDisallowOverlapJobAssignment['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver,queueName))@@@37@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "j < TASK_COUNT@@@23@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "_driver.enqueueJob(queueName,\"job_\" + (i + 1),jobConfigBuilders.get(i))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "_driver.enqueueJob(queueName,\"job_\" + (i + 1),jobConfigBuilders.get(i))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "jobConfigBuilders.add(new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(testDbName).setTargetPartitionStates(Collections.singleton(\"SLAVE\")).setJobCommandConfigMap(Collections.singletonMap(MockTask.JOB_DELAY,\"1000\")))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "int j = 0@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "List<TaskConfig> taskConfigs = new ArrayList<TaskConfig>()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "int i = 1@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "JobQueue queue = queueBuild.build()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "j++@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "++i@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "cfgBuilder.setAllowOverlapJobAssignment(false)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "i < _numNodes@@@4@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "i++@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "_driver.stop(queueName)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "_driver.resume(queueName)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "ClusterLiveNodesVerifier verifier = new ClusterLiveNodesVerifier(_gZkClient,CLUSTER_NAME,Collections.singletonList(_participants(0(.getInstanceName()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "_driver.createQueue(queue)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "JobQueue queue = queueBuild.build()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "cfgBuilder.setParallelJobs(PARALLEL_COUNT)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Thread.sleep(2000)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "i < jobConfigBuilders.size()@@@31@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
3->27 [style = solid, label="queueName"];
6->3 [style = bold, label=""];
37->28 [style = bold, label=""];
41->15 [style = bold, label=""];
25->22 [style = bold, label=""];
26->45 [style = dotted, label="true"];
3->34 [style = solid, label="queueName"];
26->34 [style = bold, label=""];
45->33 [style = bold, label=""];
44->26 [style = solid, label="i"];
19->11 [style = bold, label=""];
10->17 [style = bold, label=""];
31->21 [style = bold, label=""];
40->23 [style = bold, label=""];
24->30 [style = bold, label=""];
45->22 [style = dotted, label="true"];
7->14 [style = bold, label=""];
3->18 [style = bold, label=""];
12->43 [style = dashed, label="0"];
45->25 [style = bold, label=""];
8->20 [style = bold, label=""];
32->33 [style = solid, label="taskConfigs"];
2->14 [style = bold, label=""];
9->5 [style = bold, label=""];
39->37 [style = solid, label="i"];
1->4 [style = bold, label=""];
43->16 [style = bold, label=""];
11->5 [style = solid, label="queueName"];
26->32 [style = bold, label=""];
42->46 [style = bold, label=""];
23->3 [style = bold, label=""];
38->45 [style = bold, label=""];
12->1 [style = bold, label=""];
3->46 [style = solid, label="queueName"];
21->37 [style = bold, label=""];
26->32 [style = dotted, label="true"];
34->36 [style = bold, label=""];
11->10 [style = solid, label="queueName"];
4->6 [style = solid, label="queue"];
36->42 [style = bold, label=""];
39->37 [style = bold, label=""];
16->13 [style = bold, label=""];
26->33 [style = dotted, label="true"];
22->45 [style = bold, label=""];
11->16 [style = solid, label="queueName"];
21->37 [style = solid, label="i"];
28->39 [style = bold, label=""];
36->46 [style = solid, label="i"];
13->7 [style = solid, label="i"];
0->11 [style = bold, label=""];
3->30 [style = solid, label="queueName"];
38->45 [style = solid, label="j"];
11->8 [style = solid, label="queueName"];
46->29 [style = bold, label=""];
17->12 [style = bold, label=""];
21->39 [style = solid, label="i"];
13->2 [style = solid, label="i"];
26->38 [style = dotted, label="true"];
11->10 [style = bold, label=""];
29->42 [style = bold, label=""];
3->41 [style = bold, label=""];
15->43 [style = bold, label=""];
42->27 [style = bold, label=""];
2->14 [style = dotted, label="true"];
27->24 [style = bold, label=""];
14->2 [style = bold, label=""];
22->45 [style = solid, label="j"];
26->35 [style = dotted, label="true"];
11->7 [style = solid, label="queueName"];
42->29 [style = dotted, label="true"];
35->26 [style = bold, label=""];
3->41 [style = solid, label="queueName"];
13->2 [style = bold, label=""];
18->16 [style = bold, label=""];
13->2 [style = solid, label="queue"];
9->20 [style = dashed, label="0"];
44->35 [style = solid, label="i"];
33->35 [style = bold, label=""];
36->42 [style = solid, label="i"];
4->6 [style = bold, label=""];
15->18 [style = dashed, label="0"];
3->15 [style = bold, label=""];
15->16 [style = bold, label=""];
14->44 [style = bold, label=""];
35->26 [style = solid, label="i"];
20->5 [style = bold, label=""];
32->38 [style = bold, label=""];
44->26 [style = bold, label=""];
38->22 [style = solid, label="j"];
2->7 [style = dotted, label="true"];
37->39 [style = dotted, label="true"];
45->25 [style = dotted, label="true"];
8->9 [style = bold, label=""];
37->28 [style = dotted, label="true"];
2->7 [style = bold, label=""];
42->46 [style = dotted, label="true"];
37->40 [style = bold, label=""];
2->8 [style = bold, label=""];
}
