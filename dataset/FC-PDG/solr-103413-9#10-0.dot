digraph {
0 [style = filled, label = "System.clearProperty(RandomTestDictionaryFactory.RandomTestDictionary.getEnabledSysProp(\"longRandomAnalyzingInfixSuggester\"))@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "System.clearProperty(RandomTestDictionaryFactory.RandomTestDictionary.getEnabledSysProp(\"longRandomAnalyzingInfixSuggester\"))@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "String expectedMessage = \"SolrCoreState already closed.\"@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertNotNull(\"Should have thrown exception\",job.get())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "System.clearProperty(RandomTestDictionaryFactory.RandomTestDictionary.getEnabledSysProp(\"longRandomAnalyzingInfixSuggester\"))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "expected.put(,Arrays.asList(,,,))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Future<?> job = executor.submit(null)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertTrue(\"Expected wrapped SolrException message to contain '\" + expectedMessage + \"' but message is '\" + wrappedException.getMessage() + \"'\",wrappedException.getMessage().contains(expectedMessage))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testReloadDuringBuild['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testReloadDuringBuild['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "{ExecutorUtil.shutdownAndAwaitTermination(executor)}@@@12@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final Throwable(( outerException = new Throwable((((@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "h.close()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "{ExecutorUtil.shutdownAndAwaitTermination(executor)initCore(\"solrconfig-infixsuggesters.xml\",\"schema.xml\")}@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "@SuppressWarnings({\"rawtypes\"}) Future job = executor.submit(null)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(\"Expected wrapped IllegalStateException message to contain '\" + expectedMessage + \"' but message is '\" + wrappedException.getMessage() + \"'\",wrappedException.getMessage().contains(expectedMessage))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "wrappedException instanceof IllegalStateException && !(wrappedException instanceof SolrCoreState.CoreIsClosedException)@@@20@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "job.get()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Thread.sleep(100)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "h.reload()@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "String expectedMessage = \"Cannot commit on an closed writer. Add documents first\"@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "LinkedHashMap<Class<? extends Throwable>,List<Class<? extends Throwable>>> expected = new LinkedHashMap<>()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\"InfixSuggesterTest\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testShutdownDuringBuild['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "wrappedException instanceof SolrException@@@16@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Throwable wrappedException = outerException(0(.getCause()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "{ExecutorUtil.shutdownAndAwaitTermination(executor)}@@@10@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
0->6 [style = bold, label=""];
21->16 [style = solid, label="expectedMessage"];
19->21 [style = dotted, label="true"];
20->23 [style = bold, label=""];
23->25 [style = bold, label=""];
2->4 [style = bold, label=""];
4->12 [style = solid, label="executor"];
17->13 [style = solid, label="expectedMessage"];
8->4 [style = bold, label=""];
7->10 [style = bold, label=""];
4->11 [style = bold, label=""];
4->5 [style = bold, label=""];
24->15 [style = bold, label=""];
21->16 [style = bold, label=""];
19->22 [style = bold, label=""];
22->17 [style = bold, label=""];
14->26 [style = bold, label=""];
26->19 [style = solid, label="wrappedException"];
4->20 [style = bold, label=""];
15->6 [style = bold, label=""];
10->3 [style = bold, label=""];
11->7 [style = bold, label=""];
26->19 [style = bold, label=""];
16->12 [style = bold, label=""];
19->21 [style = bold, label=""];
19->16 [style = dotted, label="true"];
13->12 [style = bold, label=""];
6->14 [style = bold, label=""];
25->5 [style = bold, label=""];
5->24 [style = bold, label=""];
6->3 [style = dashed, label="0"];
17->13 [style = bold, label=""];
3->0 [style = bold, label=""];
3->9 [style = bold, label=""];
4->9 [style = solid, label="executor"];
26->22 [style = solid, label="wrappedException"];
22->13 [style = dotted, label="true"];
5->3 [style = bold, label=""];
19->22 [style = dotted, label="false"];
22->12 [style = bold, label=""];
4->1 [style = solid, label="executor"];
22->17 [style = dotted, label="true"];
6->1 [style = bold, label=""];
18->4 [style = bold, label=""];
}
