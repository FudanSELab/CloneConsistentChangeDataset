digraph {
40 [style = filled, label = "graph.getTargetVertex(edge).getOperatorName().equals(\"IterForwardMap\")@@@26@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "itSink1 = vertex@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "DataStream<Integer> head2 = iter1.map(noOpIntMap).setParallelism(parallelism / 2).name(\"shuffle\").rebalance()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(1,graph.getIterationSourceSinkPairs().size())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertTrue(edge.getSelectedNames().contains(\"even\"))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "DataStream<Integer> head1 = iter1.map(noOpIntMap).name(\"map1\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "DataStreamSink<Integer> head3 = iter1.map(noOpIntMap).setParallelism(parallelism / 2).addSink(new ReceiveCheckNoOpSink<Integer>())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "DataStream<Integer> head2 = iter1.map(noOpIntMap).name(\"IterForwardMap\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "JobVertex itSink1 = null@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(3,itSink.getInEdges().size())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof ShufflePartitioner)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "JobVertex itSink1 = null@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "IterativeStream<Integer> iter1 = source1.union(source2).iterate()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertEquals(2,edge.getTargetVertex().getParallelism())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "JobVertex itSource1 = null@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(4,itSource.getOutEdges().size())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "SplitStream<Integer> source3 = env.fromElements(1,2,3,4,5).map(noOpIntMap).name(\"EvenOddSourceMap\").split(new EvenOddOutputSelector())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "StreamNode itSink = sourceSinkPair.f1@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof ShufflePartitioner)@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "testmultipleHeadsTailsWithTailPartitioning['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "edge.getTargetVertex().getOperatorName().equals(\"IterForwardMap\")@@@26@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "JobGraph jg = graph.getJobGraph()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(itSink1.getCoLocationGroup() != null)@@@56@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Tuple2<StreamNode,StreamNode> sourceSinkPair = graph.getIterationSourceSinkPairs().iterator().next()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "String tailName = edge.getSourceVertex().getOperatorName()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "tailName.equals(\"bc\")@@@38@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "itSource1 = vertex@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "edge.getTargetVertex().getOperatorName().equals(\"IterRebalanceMap\")@@@23@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "JobVertex itSource1 = null@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "DataStream<Integer> head1 = iter1.map(noOpIntMap).name(\"IterRebalanceMap\").setParallelism(parallelism / 2)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "edge.getTargetVertex().getOperatorName().equals(\"map1\")@@@23@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "assertTrue(itSource1.getCoLocationGroup() != null)@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "edge.getTargetVertex().getOperatorName().equals(\"shuffle\")@@@27@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testmultipleHeadsTailsSimple['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "assertEquals(4,edge.getTargetVertex().getParallelism())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "vertex.getName().contains(\"IterationSink\")@@@51@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "tailName.equals(\"split\")@@@34@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "DataStream<Integer> source1 = env.fromElements(1,2,3,4,5).shuffle().map(noOpIntMap)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "iter1.closeWith(source3.select(\"even\").union(head1.rebalance().map(noOpIntMap).broadcast(),head2.shuffle()))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "graph.getStreamNode(edge.getSourceId()).getOperatorName().equals(\"ParallelizeMapForward\")@@@34@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "graph.getTargetVertex(edge).getOperatorName().equals(\"IterRebalanceMap\")@@@23@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "DataStream<Integer> source1 = env.fromElements(1,2,3,4,5).shuffle().map(noOpIntMap).name(\"ParallelizeMapShuffle\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "DataStreamSink<Integer> head4 = iter1.map(noOpIntMap).addSink(new ReceiveCheckNoOpSink<Integer>())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "tailName.equals(\"shuffle\")@@@41@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "DataStream<Integer> source2 = env.fromElements(1,2,3,4,5).map(noOpIntMap).name(\"ParallelizeMapRebalance\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "itSource1 = vertex@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "StreamNode itSource = sourceSinkPair.f0@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(itSource.getParallelism(),itSink.getParallelism())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "vertex.getName().contains(\"IterationSource\")@@@48@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "DataStreamSink<Integer> head3 = iter1.map(noOpIntMap).setParallelism(parallelism / 2).addSink(new ReceiveCheckNoOpSink<Integer>())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "DataStream<Integer> source2 = env.fromElements(1,2,3,4,5).map(noOpIntMap)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "iter1.closeWith(source3.select(\"even\").union(head1.map(noOpIntMap).name(\"bc\").broadcast(),head2.map(noOpIntMap).shuffle()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "SplitStream<Integer> source3 = env.fromElements(1,2,3,4,5).map(noOpIntMap).name(\"split\").split(new EvenOddOutputSelector())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "StreamGraph graph = env.getStreamGraph()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testmultipleHeadsTailsSimple['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(itSource1.getCoLocationGroup(),itSink1.getCoLocationGroup())@@@57@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "itSink1 = vertex@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "graph.getStreamNode(edge.getSourceId()).getOperatorName().equals(\"ParallelizeMapShuffle\")@@@31@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertTrue(edge.getSelectedNames().contains(\"even\"))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27->32 [style = bold, label=""];
2->26 [style = bold, label=""];
24->60 [style = bold, label=""];
45->65 [style = bold, label=""];
9->64 [style = dotted, label="true"];
12->44 [style = bold, label=""];
63->48 [style = bold, label=""];
2->51 [style = bold, label=""];
57->33 [style = bold, label=""];
54->63 [style = bold, label=""];
62->54 [style = bold, label=""];
12->2 [style = dotted, label="false"];
61->19 [style = bold, label=""];
55->2 [style = bold, label=""];
38->12 [style = bold, label=""];
55->51 [style = bold, label=""];
22->4 [style = bold, label=""];
50->65 [style = bold, label=""];
12->2 [style = bold, label=""];
26->12 [style = bold, label=""];
12->38 [style = bold, label=""];
32->8 [style = dotted, label="true"];
33->42 [style = bold, label=""];
2->44 [style = bold, label=""];
28->27 [style = dotted, label="true"];
48->9 [style = dotted, label="false"];
46->50 [style = bold, label=""];
50->63 [style = bold, label=""];
25->21 [style = bold, label=""];
7->29 [style = bold, label=""];
9->64 [style = bold, label=""];
45->63 [style = bold, label=""];
44->3 [style = bold, label=""];
9->31 [style = dotted, label="true"];
24->18 [style = bold, label=""];
39->4 [style = bold, label=""];
34->40 [style = dashed, label="0"];
40->35 [style = dotted, label="true"];
12->51 [style = bold, label=""];
6->49 [style = dashed, label="0"];
35->28 [style = bold, label=""];
18->20 [style = bold, label=""];
46->63 [style = bold, label=""];
60->57 [style = bold, label=""];
35->62 [style = dotted, label="true"];
21->11 [style = bold, label=""];
35->54 [style = dotted, label="true"];
20->57 [style = dashed, label="0"];
59->35 [style = bold, label=""];
10->0 [style = bold, label=""];
33->30 [style = bold, label=""];
54->59 [style = bold, label=""];
34->35 [style = bold, label=""];
52->51 [style = bold, label=""];
6->7 [style = bold, label=""];
53->43 [style = bold, label=""];
22->4 [style = dotted, label="true"];
66->49 [style = bold, label=""];
9->10 [style = dotted, label="true"];
4->22 [style = bold, label=""];
14->6 [style = bold, label=""];
43->59 [style = bold, label=""];
40->35 [style = bold, label=""];
9->31 [style = bold, label=""];
26->3 [style = bold, label=""];
16->24 [style = bold, label=""];
2->3 [style = bold, label=""];
4->39 [style = bold, label=""];
47->61 [style = bold, label=""];
35->39 [style = bold, label=""];
51->12 [style = bold, label=""];
9->46 [style = bold, label=""];
58->24 [style = bold, label=""];
14->66 [style = dashed, label="0"];
42->47 [style = bold, label=""];
48->56 [style = dotted, label="true"];
39->40 [style = dotted, label="false"];
51->12 [style = dotted, label="true"];
48->45 [style = dotted, label="true"];
51->55 [style = dotted, label="false"];
22->59 [style = dashed, label="0"];
38->3 [style = bold, label=""];
35->59 [style = bold, label=""];
37->12 [style = bold, label=""];
15->22 [style = bold, label=""];
28->32 [style = bold, label=""];
59->53 [style = bold, label=""];
9->28 [style = bold, label=""];
34->28 [style = bold, label=""];
32->9 [style = bold, label=""];
18->60 [style = dashed, label="0"];
13->19 [style = bold, label=""];
32->8 [style = bold, label=""];
56->45 [style = bold, label=""];
40->39 [style = bold, label=""];
19->14 [style = bold, label=""];
19->66 [style = bold, label=""];
65->52 [style = bold, label=""];
30->42 [style = dashed, label="0"];
34->35 [style = dotted, label="true"];
30->5 [style = bold, label=""];
31->10 [style = bold, label=""];
39->40 [style = bold, label=""];
5->13 [style = bold, label=""];
64->65 [style = bold, label=""];
59->53 [style = dotted, label="true"];
46->50 [style = dotted, label="true"];
49->7 [style = bold, label=""];
35->63 [style = bold, label=""];
9->46 [style = dotted, label="false"];
43->63 [style = bold, label=""];
3->17 [style = bold, label=""];
2->26 [style = dotted, label="true"];
22->34 [style = dotted, label="false"];
59->35 [style = dotted, label="false"];
10->28 [style = bold, label=""];
48->56 [style = bold, label=""];
9->0 [style = bold, label=""];
0->37 [style = bold, label=""];
41->24 [style = bold, label=""];
5->47 [style = dashed, label="0"];
35->22 [style = bold, label=""];
13->61 [style = dashed, label="0"];
36->15 [style = bold, label=""];
64->63 [style = bold, label=""];
29->25 [style = bold, label=""];
48->9 [style = bold, label=""];
55->2 [style = dotted, label="true"];
40->28 [style = bold, label=""];
12->38 [style = dotted, label="true"];
1->36 [style = bold, label=""];
15->59 [style = bold, label=""];
4->28 [style = bold, label=""];
2->12 [style = bold, label=""];
20->33 [style = bold, label=""];
34->22 [style = bold, label=""];
55->44 [style = bold, label=""];
39->4 [style = dotted, label="true"];
51->55 [style = bold, label=""];
59->43 [style = dotted, label="true"];
22->34 [style = bold, label=""];
15->39 [style = bold, label=""];
35->62 [style = bold, label=""];
8->9 [style = bold, label=""];
22->39 [style = dashed, label="0"];
23->1 [style = bold, label=""];
28->27 [style = bold, label=""];
46->65 [style = bold, label=""];
11->23 [style = bold, label=""];
}
