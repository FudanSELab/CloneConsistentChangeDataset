digraph {
11 [style = filled, label = "assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED),empty())@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testDoNotCancelForBrokenNode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(allocation.routingNodesChanged(),equalTo(false))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testAllocator.addData(node1,Collections.singletonList(newRetentionLease(node3,randomNonNegativeLong())),\"MATCH\",new StoreFileMetadata(\"file1\",10,\"MATCH_CHECKSUM\",MIN_SUPPORTED_LUCENE_VERSION))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(allocation.routingNodesChanged(),equalTo(false))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testNotCancelIfPrimaryDoesNotHaveValidRetentionLease['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "failedNodes.add(node3.getId())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testDoNotCancelForBrokenNode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "testAllocator.addData(node3,\"NOT_MATCH\",new StoreFileMetadata(\"file1\",10,\"MATCH_CHECKSUM\",MIN_SUPPORTED_LUCENE_VERSION))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testAllocator.addData(node1,retentionLeases,\"MATCH\",new StoreFileMetadata(\"file1\",10,\"MATCH_CHECKSUM\",MIN_SUPPORTED_LUCENE_VERSION)).addData(node2,randomSyncId(),new StoreFileMetadata(\"file1\",10,\"MATCH_CHECKSUM\",MIN_SUPPORTED_LUCENE_VERSION)).addData(node3,randomSyncId(),new StoreFileMetadata(\"file1\",10,\"MATCH_CHECKSUM\",MIN_SUPPORTED_LUCENE_VERSION))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "UnassignedInfo unassignedInfo = new UnassignedInfo(UnassignedInfo.Reason.ALLOCATION_FAILED,null,null,randomIntBetween(failedNodes.size(),10),System.nanoTime(),System.currentTimeMillis(),false,UnassignedInfo.AllocationStatus.NO_ATTEMPT,failedNodes)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Set<String> failedNodes = new HashSet<>()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testAllocator.processExistingRecoveries(allocation)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "RoutingAllocation allocation = onePrimaryOnNode1And1ReplicaRecovering(yesAllocationDeciders())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testAllocator.addData(node2,\"NOT_MATCH\",new StoreFileMetadata(\"file1\",10,\"MATCH_CHECKSUM\",MIN_SUPPORTED_LUCENE_VERSION))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "long retainingSeqNoOnPrimary = randomLongBetween(0,Long.MAX_VALUE)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "randomBoolean()@@@5@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<RetentionLease> retentionLeases = Arrays.asList(newRetentionLease(node1,retainingSeqNoOnPrimary),newRetentionLease(node3,retainingSeqNoOnPrimary))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "RoutingAllocation allocation = onePrimaryOnNode1And1ReplicaRecovering(yesAllocationDeciders(),unassignedInfo)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "UnassignedInfo unassignedInfo = new UnassignedInfo(UnassignedInfo.Reason.ALLOCATION_FAILED,null,null,randomIntBetween(failedNodes.size(),10),System.nanoTime(),System.currentTimeMillis(),false,UnassignedInfo.AllocationStatus.NO_ATTEMPT,failedNodes,null)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "failedNodes.add(\"node4\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED).size(),equalTo(0))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testAllocator.processExistingRecoveries(allocation)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->10 [style = bold, label=""];
16->18 [style = bold, label=""];
20->17 [style = bold, label=""];
3->1 [style = bold, label=""];
22->19 [style = bold, label=""];
0->6 [style = bold, label=""];
8->2 [style = dotted, label="true"];
21->15 [style = bold, label=""];
1->13 [style = solid, label="failedNodes"];
12->11 [style = bold, label=""];
6->9 [style = solid, label="allocation"];
1->0 [style = solid, label="failedNodes"];
17->22 [style = bold, label=""];
7->8 [style = bold, label=""];
15->16 [style = bold, label=""];
1->7 [style = bold, label=""];
0->6 [style = solid, label="unassignedInfo"];
14->1 [style = bold, label=""];
2->13 [style = bold, label=""];
13->6 [style = solid, label="unassignedInfo"];
8->0 [style = bold, label=""];
6->5 [style = bold, label=""];
2->0 [style = bold, label=""];
8->2 [style = bold, label=""];
17->15 [style = solid, label="allocation"];
11->18 [style = dashed, label="0"];
5->4 [style = bold, label=""];
0->13 [style = dashed, label="0"];
10->9 [style = bold, label=""];
9->12 [style = bold, label=""];
13->6 [style = bold, label=""];
5->4 [style = solid, label="retainingSeqNoOnPrimary"];
8->13 [style = bold, label=""];
19->21 [style = bold, label=""];
}
