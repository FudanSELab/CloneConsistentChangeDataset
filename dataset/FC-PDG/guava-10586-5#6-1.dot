digraph {
14 [style = filled, label = "assertThat(transpose).isEqualTo(expectedTranspose)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "expectedTranspose.putEdge(N2,N1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(directedGraph.inDegree(node)).isSameInstanceAs(transpose.outDegree(node))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "transpose_directedGraph['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "directedGraph.putEdge(N1,N1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "AbstractGraphTest.validateGraph(transpose)@@@26@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "transpose_directedGraph['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "directedGraph.putEdge(N2,N1)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(transpose.successors(N1)).contains(N2)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(true).build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "directedGraph.putEdge(N1,N3)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "MutableGraph<Integer> expectedTranspose = GraphBuilder.directed().allowsSelfLoops(true).build()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "directedGraph.putEdge(N1,N2)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(transpose(transpose)).isSameInstanceAs(directedGraph)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "expectedTranspose.putEdge(N4,N3)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "directedGraph.putEdge(N3,N4)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node))@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "directedGraph.putEdge(N3,N1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node))@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "expectedTranspose.putEdge(N1,N1)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(directedGraph.outDegree(node)).isSameInstanceAs(transpose.inDegree(node))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertThat(transpose(transpose)).isSameAs(directedGraph)@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "expectedTranspose.putEdge(N3,N1)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Graph<Integer> transpose = transpose(directedGraph)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(transpose.successors(N1)).doesNotContain(N2)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "expectedTranspose.putEdge(N1,N3)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "transpose_directedGraph['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "AbstractGraphTest.validateGraph(transpose)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19->18 [style = bold, label=""];
8->15 [style = bold, label=""];
5->20 [style = bold, label=""];
26->25 [style = bold, label=""];
22->9 [style = bold, label=""];
27->9 [style = bold, label=""];
8->23 [style = dashed, label="0"];
23->15 [style = bold, label=""];
11->26 [style = dashed, label="0"];
9->8 [style = solid, label="directedGraph"];
7->0 [style = bold, label=""];
21->14 [style = solid, label="expectedTranspose"];
0->21 [style = bold, label=""];
20->3 [style = bold, label=""];
13->17 [style = solid, label="transpose"];
1->7 [style = bold, label=""];
11->2 [style = bold, label=""];
9->6 [style = bold, label=""];
15->26 [style = bold, label=""];
6->4 [style = bold, label=""];
15->11 [style = bold, label=""];
18->10 [style = bold, label=""];
10->13 [style = bold, label=""];
14->23 [style = bold, label=""];
9->13 [style = solid, label="directedGraph"];
25->26 [style = bold, label=""];
2->25 [style = dashed, label="0"];
9->23 [style = solid, label="directedGraph"];
21->16 [style = bold, label=""];
3->17 [style = bold, label=""];
25->5 [style = bold, label=""];
4->1 [style = bold, label=""];
14->8 [style = bold, label=""];
13->15 [style = solid, label="transpose"];
12->19 [style = bold, label=""];
16->12 [style = bold, label=""];
13->14 [style = bold, label=""];
2->11 [style = bold, label=""];
24->9 [style = bold, label=""];
2->5 [style = bold, label=""];
}
