digraph {
1 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression,workersStr))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "StreamFactory factory@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'n' parameter of type positive integer but didn't find one\",expression))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression,\"n\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "StreamExpression expression@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\",expression))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression,nStr))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression,workersStr))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "expression.getParameters().size() != streamExpressions.size() + 2@@@6@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "ParallelStream['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression,,)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression,\"workers\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "String zkHost = null@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "workersInt = Integer.parseInt(workersStr)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "NumberFormatException e@@@20@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "init(zkHost,collectionName,stream,workersInt,comp)@@@48@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "RankStream['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "TupleStream stream = factory.constructStream(streamExpressions.get(0))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression,\"sort\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "StreamExpression expression@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "null == zkHost@@@42@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression,streamExpressions.size()))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "int nInt = 0@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression,,)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "zkHostExpression.getParameter() instanceof StreamExpressionValue@@@39@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Comparator<Tuple> comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(),)@@@46@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)@@@32@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "zkHost = factory.getCollectionZkHost(collectionName)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)@@@26@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "null == nParam || null == nParam.getParameter() || !(nParam.getParameter() instanceof StreamExpressionValue)@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "null == zkHostExpression@@@36@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "objectSerialize = false@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression? 1: 0)@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "nInt <= 0@@@16@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "1 != streamExpressions.size()@@@23@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "StreamExpression expression@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\",expression))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "workersInt <= 0@@@22@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression,nStr))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "null == collectionName@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "String collectionName = factory.getValueOperand(expression,0)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Comparator<Tuple> comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(),)@@@46@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression,\"zkHost\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workersParam' parameter of type positive integer but didn't find one\",expression))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "init(stream,nInt,comp)@@@31@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ParallelStream['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "StreamFactory factory@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Comparator<Tuple> comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(),)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression,\"sort\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "nInt = Integer.parseInt(nStr)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "streamFactory = factory@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "TupleStream stream = factory.constructStream(streamExpressions.get(0))@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int workersInt = 0@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)@@@15@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17->4 [style = solid, label="collectionName"];
40->39 [style = dotted, label="true"];
19->32 [style = solid, label="workersStr"];
3->23 [style = solid, label="comp"];
39->30 [style = solid, label="expression"];
20->27 [style = dotted, label="true"];
6->51 [style = dashed, label="0"];
53->59 [style = dotted, label="true"];
58->47 [style = dotted, label="true"];
34->2 [style = dotted, label="true"];
2->47 [style = dashed, label="0"];
36->21 [style = dotted, label="true"];
32->34 [style = bold, label=""];
25->6 [style = bold, label=""];
42->35 [style = solid, label="stream"];
15->57 [style = bold, label=""];
1->44 [style = dashed, label="0"];
26->23 [style = solid, label="zkHost"];
45->47 [style = solid, label="expression"];
12->35 [style = dotted, label="true"];
39->21 [style = solid, label="expression"];
20->27 [style = bold, label=""];
14->23 [style = solid, label="zkHost"];
16->23 [style = solid, label="stream"];
19->5 [style = bold, label=""];
48->52 [style = bold, label=""];
0->14 [style = bold, label=""];
22->0 [style = bold, label=""];
38->23 [style = solid, label="comp"];
34->2 [style = bold, label=""];
10->18 [style = solid, label="expression"];
6->11 [style = bold, label=""];
55->41 [style = solid, label="nStr"];
1->12 [style = bold, label=""];
14->29 [style = solid, label="zkHost"];
17->23 [style = solid, label="collectionName"];
28->42 [style = bold, label=""];
55->47 [style = solid, label="nStr"];
10->21 [style = solid, label="expression"];
41->58 [style = bold, label=""];
15->57 [style = dotted, label="true"];
17->26 [style = solid, label="collectionName"];
4->16 [style = bold, label=""];
60->51 [style = bold, label=""];
16->3 [style = bold, label=""];
45->52 [style = solid, label="expression"];
9->33 [style = dotted, label="true"];
39->17 [style = solid, label="expression"];
10->30 [style = solid, label="expression"];
47->48 [style = bold, label=""];
35->20 [style = bold, label=""];
3->38 [style = dashed, label="0"];
18->19 [style = bold, label=""];
22->0 [style = dotted, label="false"];
19->2 [style = solid, label="workersStr"];
41->35 [style = solid, label="nInt"];
27->31 [style = bold, label=""];
57->60 [style = bold, label=""];
48->50 [style = bold, label=""];
0->29 [style = bold, label=""];
10->17 [style = solid, label="expression"];
20->31 [style = bold, label=""];
32->41 [style = dashed, label="0"];
12->35 [style = bold, label=""];
39->37 [style = solid, label="expression"];
21->25 [style = bold, label=""];
54->41 [style = bold, label=""];
9->8 [style = bold, label=""];
45->56 [style = solid, label="expression"];
56->60 [style = solid, label="nParam"];
11->18 [style = bold, label=""];
50->28 [style = bold, label=""];
34->58 [style = dashed, label="0"];
26->29 [style = solid, label="zkHost"];
39->2 [style = solid, label="expression"];
32->23 [style = solid, label="workersInt"];
8->17 [style = bold, label=""];
45->28 [style = solid, label="expression"];
60->55 [style = bold, label=""];
36->25 [style = bold, label=""];
17->25 [style = solid, label="collectionName"];
45->49 [style = solid, label="expression"];
12->35 [style = solid, label="comp"];
25->6 [style = dotted, label="true"];
33->13 [style = solid, label="factory"];
0->14 [style = dotted, label="true"];
39->6 [style = solid, label="expression"];
24->7 [style = bold, label=""];
53->43 [style = bold, label=""];
9->10 [style = dotted, label="true"];
29->16 [style = bold, label=""];
30->15 [style = bold, label=""];
39->27 [style = solid, label="expression"];
46->44 [style = bold, label=""];
24->20 [style = solid, label="sortExpression"];
22->26 [style = bold, label=""];
10->24 [style = solid, label="expression"];
29->4 [style = dotted, label="true"];
37->24 [style = bold, label=""];
48->52 [style = dotted, label="true"];
13->35 [style = dashed, label="0"];
39->7 [style = solid, label="expression"];
25->60 [style = dashed, label="0"];
12->20 [style = bold, label=""];
10->27 [style = solid, label="expression"];
53->45 [style = dotted, label="true"];
28->1 [style = dotted, label="true"];
5->32 [style = bold, label=""];
58->48 [style = bold, label=""];
50->42 [style = bold, label=""];
22->26 [style = dotted, label="true"];
50->28 [style = dotted, label="true"];
10->6 [style = solid, label="expression"];
10->15 [style = solid, label="expression"];
10->4 [style = solid, label="expression"];
14->29 [style = bold, label=""];
49->50 [style = solid, label="sortExpression"];
49->15 [style = bold, label=""];
52->50 [style = bold, label=""];
10->7 [style = solid, label="expression"];
39->35 [style = solid, label="expression"];
10->35 [style = solid, label="expression"];
7->36 [style = bold, label=""];
60->51 [style = dotted, label="true"];
15->60 [style = bold, label=""];
29->4 [style = bold, label=""];
56->49 [style = bold, label=""];
31->22 [style = bold, label=""];
40->33 [style = dotted, label="true"];
30->11 [style = solid, label="workersParam"];
15->37 [style = dashed, label="0"];
26->29 [style = bold, label=""];
31->29 [style = solid, label="zkHost"];
17->30 [style = bold, label=""];
46->44 [style = dotted, label="true"];
45->43 [style = solid, label="expression"];
28->1 [style = bold, label=""];
42->12 [style = bold, label=""];
10->2 [style = solid, label="expression"];
30->37 [style = bold, label=""];
11->19 [style = bold, label=""];
34->12 [style = bold, label=""];
39->4 [style = solid, label="expression"];
11->18 [style = dotted, label="true"];
2->12 [style = bold, label=""];
45->57 [style = solid, label="expression"];
36->21 [style = bold, label=""];
7->22 [style = solid, label="zkHostExpression"];
39->18 [style = solid, label="expression"];
41->58 [style = solid, label="nInt"];
58->47 [style = bold, label=""];
7->36 [style = solid, label="zkHostExpression"];
51->55 [style = bold, label=""];
25->11 [style = bold, label=""];
44->48 [style = bold, label=""];
15->24 [style = bold, label=""];
13->23 [style = bold, label=""];
45->51 [style = solid, label="expression"];
3->13 [style = bold, label=""];
27->28 [style = dashed, label="0"];
39->24 [style = solid, label="expression"];
32->34 [style = solid, label="workersInt"];
33->59 [style = dashed, label="0"];
31->23 [style = solid, label="zkHost"];
55->54 [style = bold, label=""];
38->13 [style = bold, label=""];
43->56 [style = bold, label=""];
16->38 [style = bold, label=""];
40->8 [style = bold, label=""];
}
