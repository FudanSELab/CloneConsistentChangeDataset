digraph {
21 [style = filled, label = "Assert.assertFalse(selector.isNull())@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(0L,selector.getLong())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "NullHandling.replaceWithDefault()@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertTrue(selector.isNull())@@@30@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(4L,selector.getLong())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final BaseLongColumnValueSelector selector = Z_CONCAT_X.makeColumnValueSelector(\"expr\",COLUMN_SELECTOR_FACTORY)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "testLongSelectorUsingStringFunction['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "Assert.assertEquals(2L,selector.getLong())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "CURRENT_ROW.set(ROW1)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "CURRENT_ROW.set(ROW3)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(0L,selector.getLong())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final BaseLongColumnValueSelector selector = ZCONCATX.makeColumnValueSelector(\"expr\",COLUMN_SELECTOR_FACTORY)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "NullHandling.replaceWithDefault()@@@19@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertTrue(selector.isNull())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertTrue(selector.isNull())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(selector.isNull())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertTrue(selector.isNull())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "CURRENT_ROW.set(ROW0)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testLongSelectorUsingStringFunction['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "NullHandling.replaceWithDefault()@@@26@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "NullHandling.replaceWithDefault()@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final BaseLongColumnValueSelector selector = CONSTANT_NULL_ARITHMETIC.makeColumnValueSelector(\"expr\",COLUMN_SELECTOR_FACTORY)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(0L,selector.getLong())@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testLongSelectorWithConstantNullArithmetic['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "CURRENT_ROW.set(ROW2)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15->10 [style = bold, label=""];
19->18 [style = bold, label=""];
15->20 [style = dashed, label="0"];
8->11 [style = dotted, label="false"];
12->23 [style = dashed, label="0"];
12->17 [style = bold, label=""];
15->18 [style = dashed, label="0"];
16->7 [style = bold, label=""];
3->6 [style = bold, label=""];
2->23 [style = dotted, label="true"];
2->21 [style = dotted, label="true"];
9->8 [style = bold, label=""];
5->17 [style = bold, label=""];
8->4 [style = dotted, label="true"];
0->15 [style = bold, label=""];
13->1 [style = bold, label=""];
2->12 [style = bold, label=""];
20->10 [style = bold, label=""];
24->20 [style = bold, label=""];
7->9 [style = bold, label=""];
2->23 [style = bold, label=""];
6->1 [style = bold, label=""];
3->6 [style = dotted, label="false"];
18->10 [style = bold, label=""];
23->21 [style = bold, label=""];
1->16 [style = bold, label=""];
2->22 [style = dotted, label="false"];
2->5 [style = dotted, label="false"];
16->14 [style = dotted, label="true"];
17->3 [style = bold, label=""];
3->13 [style = bold, label=""];
2->12 [style = dotted, label="true"];
16->14 [style = bold, label=""];
14->9 [style = bold, label=""];
10->2 [style = bold, label=""];
16->7 [style = dotted, label="false"];
8->4 [style = bold, label=""];
2->22 [style = bold, label=""];
8->11 [style = bold, label=""];
3->13 [style = dotted, label="true"];
2->5 [style = bold, label=""];
}
