digraph {
11 [style = filled, label = "IntegerPartitionChunk<OvershadowableInteger> lhs = make(null,10,0,1)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertTrue(lhs.abuts(IntegerPartitionChunk.make(10,null,1,2)))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "testAbuts['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertFalse(lhs.abuts(StringPartitionChunk.make(null,null,3,4)))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testAbuts['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Assert.assertFalse(StringPartitionChunk.make(null,null,0,1).abuts(StringPartitionChunk.make(null,null,1,2)))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "IntegerPartitionChunk<Integer> lhs = IntegerPartitionChunk.make(null,10,0,1)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Assert.assertTrue(lhs.abuts(StringPartitionChunk.make(\"10\",null,1,2)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testAbuts['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertFalse(lhs.abuts(IntegerPartitionChunk.make(null,null,3,4)))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Assert.assertFalse(lhs.abuts(make(null,null,3,4)))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertFalse(lhs.abuts(IntegerPartitionChunk.make(11,null,2,3)))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "Assert.assertTrue(lhs.abuts(make(10,null,1,2)))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Assert.assertFalse(make(null,null,0,1).abuts(make(null,null,1,2)))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Assert.assertFalse(lhs.abuts(StringPartitionChunk.make(\"11\",null,2,3)))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertFalse(IntegerPartitionChunk.make(null,null,0,1).abuts(IntegerPartitionChunk.make(null,null,1,2)))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Assert.assertFalse(lhs.abuts(make(11,null,2,3)))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "StringPartitionChunk<Integer> lhs = StringPartitionChunk.make(null,\"10\",0,1)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
15->13 [style = bold, label=""];
3->6 [style = dashed, label="0"];
5->12 [style = dashed, label="0"];
4->16 [style = dashed, label="0"];
12->17 [style = bold, label=""];
2->4 [style = bold, label=""];
0->17 [style = dashed, label="0"];
13->16 [style = bold, label=""];
8->7 [style = bold, label=""];
9->6 [style = bold, label=""];
7->9 [style = bold, label=""];
5->0 [style = bold, label=""];
17->14 [style = bold, label=""];
2->13 [style = dashed, label="0"];
4->8 [style = dashed, label="0"];
11->8 [style = bold, label=""];
2->11 [style = dashed, label="0"];
1->2 [style = bold, label=""];
0->9 [style = dashed, label="0"];
5->7 [style = dashed, label="0"];
3->14 [style = dashed, label="0"];
4->5 [style = bold, label=""];
16->12 [style = bold, label=""];
10->11 [style = bold, label=""];
}
