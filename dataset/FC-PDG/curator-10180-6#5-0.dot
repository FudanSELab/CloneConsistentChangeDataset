digraph {
26 [style = filled, label = "queue.put(2L,System.currentTimeMillis())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(consumer.size(),0)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Timing timing = new Timing()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testBasic['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "queue.put(1L,System.currentTimeMillis() + Integer.MAX_VALUE)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "DistributedDelayQueue<Long> queue = null@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "BlockingQueueConsumer<Long> consumer = new BlockingQueueConsumer<Long>(Mockito.mock())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Long value = consumer.take(1,TimeUnit.SECONDS)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Long value = consumer.take(timing.forWaiting().seconds(),TimeUnit.SECONDS)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "queue.start()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "client.start()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(value,Long.valueOf(1))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "Assert.assertNull(value)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "{CloseableUtils.closeQuietly(queue)CloseableUtils.closeQuietly(client)}@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "queue.put(1L,System.currentTimeMillis() + 1000)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "value = consumer.take(1,TimeUnit.SECONDS)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertNull(value)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(value,Long.valueOf(1))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(value,Long.valueOf(2))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(consumer.size(),0)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "testBasic['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "queue = QueueBuilder.builder(client,consumer,new LongSerializer(),\"/test\").buildDelayQueue()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Thread.sleep(100)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "{CloseableUtils.closeQuietly(queue)CloseableUtils.closeQuietly(client)}@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),timing.session(),timing.connection(),new RetryOneTime(1))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testLateAddition['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "value = consumer.take(timing.seconds(),TimeUnit.SECONDS)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10->15 [style = dashed, label="0"];
19->18 [style = solid, label="value"];
11->1 [style = solid, label="value"];
16->13 [style = bold, label=""];
19->18 [style = bold, label=""];
4->17 [style = bold, label=""];
11->14 [style = solid, label="value"];
1->14 [style = dashed, label="0"];
11->14 [style = bold, label=""];
11->1 [style = bold, label=""];
25->13 [style = bold, label=""];
2->6 [style = solid, label="client"];
2->21 [style = solid, label="client"];
8->3 [style = bold, label=""];
12->15 [style = bold, label=""];
18->26 [style = bold, label=""];
20->22 [style = solid, label="value"];
23->24 [style = solid, label="value"];
3->4 [style = bold, label=""];
22->23 [style = bold, label=""];
17->19 [style = bold, label=""];
20->22 [style = bold, label=""];
23->24 [style = bold, label=""];
2->0 [style = bold, label=""];
12->10 [style = bold, label=""];
1->6 [style = bold, label=""];
5->17 [style = dashed, label="0"];
15->11 [style = bold, label=""];
3->6 [style = solid, label="queue"];
5->12 [style = bold, label=""];
24->21 [style = bold, label=""];
7->2 [style = bold, label=""];
13->7 [style = bold, label=""];
0->8 [style = bold, label=""];
3->21 [style = solid, label="queue"];
4->5 [style = bold, label=""];
14->6 [style = bold, label=""];
10->18 [style = dashed, label="0"];
26->20 [style = bold, label=""];
9->13 [style = bold, label=""];
10->11 [style = bold, label=""];
}
