digraph {
2 [style = filled, label = "AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(false,broadcastedPriorityEvent.get())@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "MockEnvironment mockEnvironment = MockEnvironment.builder().build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final long checkpointId = 42L@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(true,broadcastedPriorityEvent.get())@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final OperatorChain<?,?> operatorChain = new OperatorChain(new MockStreamTaskBuilder(mockEnvironment).build(),new NonRecordWriter<>(),false){@Override public void broadcastEvent(AbstractEvent event,boolean isPriorityEvent){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1afcd9deventisPriorityEventbroadcastedPriorityEvent.set(isPriorityEvent)coordinator.getChannelStateWriter().addOutputData(checkpointId,new ResultSubpartitionInfo(0,0),0,BufferBuilderTestUtils.buildSomeBuffer(500))}}@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testForceAlignedCheckpointResultingInPriorityEvents['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "coordinator.checkpointState(new CheckpointMetaData(0,0),new CheckpointOptions(SAVEPOINT,CheckpointStorageLocationReference.getDefault()),new CheckpointMetricsBuilder(),operatorChain,null)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testSavepointNotResultingInPriorityEvents['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "testSavepointNotResultingInPriorityEvents['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "coordinator.checkpointState(new CheckpointMetaData(0,0),new CheckpointOptions(SAVEPOINT,CheckpointStorageLocationReference.getDefault()),new CheckpointMetricsBuilder(),operatorChain,false,null)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "coordinator.checkpointState(new CheckpointMetaData(checkpointId,0),forcedAlignedOptions,new CheckpointMetricsBuilder(),operatorChain,null)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "CheckpointOptions forcedAlignedOptions = CheckpointOptions.unaligned(CheckpointStorageLocationReference.getDefault()).withUnalignedUnsupported()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "MockEnvironment mockEnvironment = MockEnvironment.builder().build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
4->3 [style = bold, label=""];
0->2 [style = bold, label=""];
12->11 [style = solid, label="checkpointId"];
14->11 [style = solid, label="forcedAlignedOptions"];
2->9 [style = bold, label=""];
2->4 [style = bold, label=""];
12->9 [style = solid, label="checkpointId"];
7->3 [style = bold, label=""];
2->4 [style = solid, label="operatorChain"];
6->5 [style = bold, label=""];
12->10 [style = bold, label=""];
5->0 [style = bold, label=""];
4->7 [style = dashed, label="0"];
11->13 [style = bold, label=""];
9->14 [style = bold, label=""];
9->11 [style = solid, label="operatorChain"];
2->7 [style = solid, label="operatorChain"];
10->2 [style = bold, label=""];
4->14 [style = dashed, label="0"];
2->7 [style = bold, label=""];
14->11 [style = bold, label=""];
8->12 [style = bold, label=""];
}
