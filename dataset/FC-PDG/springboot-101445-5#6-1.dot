digraph {
6 [style = filled, label = "ExampleValueBean bean = new ExampleValueBean()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "source.put(\"foo.int-value\",\"12\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(bean.getLongValue()).isEqualTo(0)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "MockConfigurationPropertySource source = new MockConfigurationPropertySource()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(boundBean).isSameAs(bean)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(bean.getEnumValue()).isEqualTo(ExampleEnum.FOO_BAR)@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "IgnoreErrorsBindHandler handler = new IgnoreErrorsBindHandler()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "ExampleValueBean bean = this.binder.bind(\"foo\",Bindable.of(),handler).get()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "this.sources.add(source)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "source.put(\"foo.long-value\",\"bang\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "bindToInstanceShouldBindToInstance['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ExampleValueBean boundBean = this.binder.bind(\"foo\",Bindable.of().withExistingValue(bean)).get()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(bean.getStringValue()).isEqualTo(\"foo\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "bindToClassWhenPropertyCannotBeConvertedAndIgnoreErrorsShouldNotSetValue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "bindToInstanceShouldBindToInstance['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertThat(bean.getIntValue()).isEqualTo(12)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(bean.getLongValue()).isEqualTo(34)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "source.put(\"foo.enum-value\",\"foo-bar\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "source.put(\"foo.string-value\",\"foo\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(bean.getEnumValue()).isEqualTo(ExampleEnum.FOO_BAR)@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "source.put(\"foo.long-value\",\"34\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->18 [style = bold, label=""];
4->3 [style = bold, label=""];
0->9 [style = bold, label=""];
12->10 [style = solid, label="source"];
9->2 [style = bold, label=""];
11->16 [style = dashed, label="0"];
11->4 [style = bold, label=""];
8->20 [style = dashed, label="0"];
7->0 [style = bold, label=""];
6->5 [style = solid, label="bean"];
12->1 [style = bold, label=""];
10->6 [style = bold, label=""];
1->11 [style = bold, label=""];
3->10 [style = bold, label=""];
18->20 [style = bold, label=""];
17->12 [style = bold, label=""];
13->12 [style = bold, label=""];
8->5 [style = bold, label=""];
1->16 [style = bold, label=""];
15->9 [style = bold, label=""];
14->12 [style = bold, label=""];
6->8 [style = bold, label=""];
5->7 [style = bold, label=""];
7->15 [style = bold, label=""];
16->4 [style = bold, label=""];
20->19 [style = bold, label=""];
0->7 [style = dashed, label="0"];
19->7 [style = bold, label=""];
}
