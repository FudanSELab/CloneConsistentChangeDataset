digraph {
15 [style = filled, label = "pass = false@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "double(( ends_S1 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@25733f@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "d1.setEndValue(2,\"Category 2\",new Double(99.9))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "DefaultIntervalCategoryDataset d1 = new DefaultIntervalCategoryDataset(starts,ends)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "double(((( ends = new double((((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@25735c@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(new Double(99.9),d1.getEndValue(\"Series 1\",\"Category 2\"))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "double(((( starts = new double((((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@257353@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "DefaultIntervalCategoryDataset d2 = (DefaultIntervalCategoryDataset)TestUtils.serialised(d1)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "d1.setEndValue(0,\"Category 2\",new Double(99.9))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "IllegalArgumentException e@@@40@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testSerialization['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "pass = true@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "double(( ends_S2 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@257349@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "DefaultIntervalCategoryDataset d1 = new DefaultIntervalCategoryDataset(new Comparable((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@257367,new Comparable((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@25736c,DataUtils.createNumberArray2D(starts),DataUtils.createNumberArray2D(ends))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testSetEndValue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "double(( starts_S2 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@257335@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(pass)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testSerialization['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "pass = true@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "DefaultIntervalCategoryDataset d2 = (DefaultIntervalCategoryDataset)TestUtilities.serialised(d1)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "IllegalArgumentException e@@@32@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "double(( starts_S1 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@25732b@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "d1.setEndValue(-1,\"Category 2\",new Double(99.9))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "boolean pass = false@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(d1,d2)@@@23@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(pass)@@@43@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2->5 [style = solid, label="d2"];
6->3 [style = bold, label=""];
3->7 [style = solid, label="ends_S1"];
23->20 [style = bold, label=""];
7->1 [style = bold, label=""];
20->13 [style = bold, label=""];
15->14 [style = bold, label=""];
15->17 [style = solid, label="pass"];
4->7 [style = solid, label="ends_S2"];
16->24 [style = bold, label=""];
7->1 [style = solid, label="ends"];
6->0 [style = solid, label="starts_S2"];
14->17 [style = bold, label=""];
21->22 [style = dotted, label="true"];
22->17 [style = solid, label="pass"];
3->4 [style = bold, label=""];
4->0 [style = bold, label=""];
1->11 [style = bold, label=""];
9->6 [style = bold, label=""];
0->7 [style = bold, label=""];
0->1 [style = solid, label="starts"];
7->25 [style = solid, label="ends"];
11->5 [style = bold, label=""];
24->13 [style = solid, label="pass"];
23->13 [style = solid, label="pass"];
1->2 [style = solid, label="d1"];
25->12 [style = bold, label=""];
21->22 [style = bold, label=""];
1->11 [style = solid, label="d1"];
19->23 [style = bold, label=""];
8->9 [style = bold, label=""];
18->9 [style = bold, label=""];
9->0 [style = solid, label="starts_S1"];
22->17 [style = bold, label=""];
2->11 [style = dashed, label="0"];
1->2 [style = bold, label=""];
10->9 [style = bold, label=""];
7->25 [style = bold, label=""];
13->15 [style = bold, label=""];
1->5 [style = solid, label="d1"];
11->5 [style = solid, label="d2"];
12->19 [style = bold, label=""];
0->25 [style = solid, label="starts"];
1->25 [style = dashed, label="0"];
16->24 [style = dotted, label="true"];
2->5 [style = bold, label=""];
24->13 [style = bold, label=""];
}
