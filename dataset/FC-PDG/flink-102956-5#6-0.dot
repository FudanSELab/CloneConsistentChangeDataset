digraph {
12 [style = filled, label = "final SingleInputGate inputGate = new SingleInputGateBuilder().setChannelFactory(null).setNumberOfChannels(numberOfChannels).build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(DEFAULT_CHECKPOINT_ID,invokable.getAbortedCheckpointId())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(DEFAULT_CHECKPOINT_ID,handler.getLatestCheckpointId())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(DEFAULT_CHECKPOINT_ID,handler.getLatestCheckpointId())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(numberOfChannels,handler.getNumOpenChannels())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final ValidatingCheckpointInvokable invokable = new ValidatingCheckpointInvokable()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertFalse(handler.isCheckpointPending())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "handler.processEndOfPartition(new InputChannelInfo(0,0))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final SingleCheckpointBarrierHandler handler = SingleCheckpointBarrierHandler.createUnalignedCheckpointBarrierHandler(TestSubtaskCheckpointCoordinator.INSTANCE,\"test\",invokable,SystemClock.getInstance(),inputGate)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "handler.processBarrier(buildCheckpointBarrier(DEFAULT_CHECKPOINT_ID),new InputChannelInfo(0,0))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final SingleCheckpointBarrierHandler handler = SingleCheckpointBarrierHandler.createUnalignedCheckpointBarrierHandler(TestSubtaskCheckpointCoordinator.INSTANCE,\"test\",invokable,SystemClock.getInstance(),inputGate)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "testEndOfStreamWithPendingCheckpoint['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final ValidatingCheckpointInvokable invokable = new ValidatingCheckpointInvokable()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final int numberOfChannels = 2@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final SingleCheckpointBarrierHandler handler = SingleCheckpointBarrierHandler.createUnalignedCheckpointBarrierHandler(TestSubtaskCheckpointCoordinator.INSTANCE,\"test\",invokable,SystemClock.getInstance(),true,inputGate)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "testProcessCancellationBarrierAfterProcessBarrier['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertTrue(handler.isCheckpointPending())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testProcessCancellationBarrierAfterProcessBarrier['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertEquals(numberOfChannels - 1,handler.getNumOpenChannels())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->4 [style = bold, label=""];
0->9 [style = bold, label=""];
16->0 [style = bold, label=""];
15->13 [style = bold, label=""];
0->4 [style = solid, label="invokable"];
3->1 [style = solid, label="invokable"];
0->12 [style = bold, label=""];
9->4 [style = bold, label=""];
2->3 [style = bold, label=""];
8->3 [style = bold, label=""];
14->10 [style = bold, label=""];
1->9 [style = dashed, label="0"];
0->12 [style = dashed, label="0"];
6->15 [style = bold, label=""];
3->0 [style = bold, label=""];
1->6 [style = solid, label="handler"];
0->1 [style = solid, label="inputGate"];
13->17 [style = bold, label=""];
12->4 [style = bold, label=""];
0->9 [style = solid, label="inputGate"];
17->14 [style = bold, label=""];
16->15 [style = solid, label="numberOfChannels"];
0->1 [style = bold, label=""];
7->6 [style = bold, label=""];
3->6 [style = solid, label="invokable"];
9->6 [style = solid, label="handler"];
16->10 [style = solid, label="numberOfChannels"];
12->4 [style = solid, label="inputGate"];
5->7 [style = bold, label=""];
4->5 [style = bold, label=""];
3->9 [style = solid, label="invokable"];
10->11 [style = bold, label=""];
18->16 [style = bold, label=""];
}
