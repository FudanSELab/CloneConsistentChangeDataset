digraph {
20 [style = filled, label = "Assert.assertTrue(\"maximumMessageTime\",task1.getIOConfig().getMaximumMessageTime().get().minusMinutes(61 + 60).isBeforeNow())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "supervisor = getTestableSupervisor(2,1,true,\"PT1H\",null,new Period(\"PT1H\"))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "addSomeEvents(1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(captured))).andReturn(true).times(2)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "supervisorRecordSupplier.seekToLatest(anyObject())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "replayAll()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "verifyAll()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "supervisorRecordSupplier.seekToLatest(EasyMock.anyObject())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "supervisorRecordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "expect(supervisorRecordSupplier.getPartitionIds(stream)).andReturn(ImmutableSet.of(shardId1,shardId0)).anyTimes()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "KinesisIndexTask task1 = captured.getValues().get(0)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "expectLastCall().anyTimes()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
47 [style = filled, label = "supervisor.runInternal()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "expectLastCall().anyTimes()@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "Assert.assertTrue(\"minimumMessageTime\",task1.getIOConfig().getMinimumMessageTime().get().plusMinutes(59).isBeforeNow())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Capture<KinesisIndexTask> captured = Capture.newInstance(CaptureType.ALL)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "expect(taskMaster.getTaskRunner()).andReturn(Optional.absent()).anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(task1.getIOConfig().getMaximumMessageTime().get(),task2.getIOConfig().getMaximumMessageTime().get())@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testEarlyMessageRejectionPeriod['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(shard1Partition,shard0Partition)).anyTimes()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "expect(supervisorRecordSupplier.getEarliestSequenceNumber(anyObject())).andReturn(\"0\").anyTimes()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(null)).anyTimes()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "testLateMessageRejectionPeriod['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "Capture<KafkaIndexTask> captured = Capture.newInstance(CaptureType.ALL)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getPartitionIds(stream)).andReturn(ImmutableSet.of(shardId1,shardId0)).anyTimes()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "supervisor.start()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "supervisorRecordSupplier.assign(anyObject())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "testEarlyMessageRejectionPeriod['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "Assert.assertTrue(\"maximumMessageTime\",task1.getIOConfig().getMaximumMessageTime().get().minusMinutes(59 + 60).isAfterNow())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "expectLastCall().anyTimes()@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "supervisorRecordSupplier.seek(anyObject(),anyString())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "KafkaIndexTask task1 = captured.getValues().get(0)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "expect(taskQueue.add(capture(captured))).andReturn(true).times(2)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "supervisor.start()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "supervisorRecordSupplier.assign(EasyMock.anyObject())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(shard1Partition,shard0Partition)).anyTimes()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.absent()).anyTimes()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertTrue(\"minimumMessageTime\",task1.getIOConfig().getMinimumMessageTime().get().plusMinutes(61).isAfterNow())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "verifyAll()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "supervisor = getTestableSupervisor(2,1,true,\"PT1H\",new Period(\"PT1H\"),null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "supervisor.runInternal()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "KafkaIndexTask task2 = captured.getValues().get(1)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(task1.getIOConfig().getMinimumMessageTime().get(),task2.getIOConfig().getMinimumMessageTime().get())@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "KinesisIndexTask task2 = captured.getValues().get(1)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18->43 [style = dashed, label="0"];
0->3 [style = bold, label=""];
5->13 [style = dashed, label="0"];
49->45 [style = bold, label=""];
22->25 [style = bold, label=""];
44->42 [style = bold, label=""];
24->27 [style = dashed, label="0"];
1->8 [style = bold, label=""];
39->46 [style = bold, label=""];
47->48 [style = bold, label=""];
20->40 [style = dashed, label="0"];
8->18 [style = bold, label=""];
31->32 [style = bold, label=""];
27->28 [style = bold, label=""];
0->32 [style = dashed, label="0"];
4->15 [style = bold, label=""];
30->26 [style = bold, label=""];
34->33 [style = bold, label=""];
23->4 [style = bold, label=""];
38->41 [style = bold, label=""];
32->34 [style = bold, label=""];
12->24 [style = bold, label=""];
11->9 [style = bold, label=""];
46->47 [style = bold, label=""];
40->13 [style = bold, label=""];
25->17 [style = bold, label=""];
21->36 [style = dashed, label="0"];
17->19 [style = bold, label=""];
8->41 [style = dashed, label="0"];
9->6 [style = bold, label=""];
19->16 [style = bold, label=""];
20->5 [style = bold, label=""];
21->12 [style = bold, label=""];
6->2 [style = bold, label=""];
33->29 [style = bold, label=""];
43->40 [style = bold, label=""];
2->31 [style = dashed, label="0"];
7->22 [style = bold, label=""];
18->20 [style = bold, label=""];
29->27 [style = bold, label=""];
26->31 [style = bold, label=""];
2->0 [style = bold, label=""];
3->34 [style = dashed, label="0"];
10->11 [style = bold, label=""];
48->38 [style = bold, label=""];
51->36 [style = bold, label=""];
7->28 [style = dashed, label="0"];
21->33 [style = dashed, label="0"];
6->26 [style = dashed, label="0"];
35->11 [style = bold, label=""];
50->51 [style = bold, label=""];
12->29 [style = dashed, label="0"];
13->23 [style = bold, label=""];
16->14 [style = bold, label=""];
3->21 [style = bold, label=""];
42->49 [style = bold, label=""];
52->50 [style = bold, label=""];
1->38 [style = dashed, label="0"];
11->42 [style = dashed, label="0"];
36->37 [style = bold, label=""];
14->13 [style = bold, label=""];
9->30 [style = dashed, label="0"];
24->7 [style = bold, label=""];
45->52 [style = bold, label=""];
41->43 [style = bold, label=""];
11->30 [style = bold, label=""];
37->39 [style = bold, label=""];
28->22 [style = bold, label=""];
15->1 [style = bold, label=""];
}
