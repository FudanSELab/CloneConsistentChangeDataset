digraph {
5 [style = filled, label = "i < numRequests@@@21@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "replayAll()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expectedUrls.add(new URL(StringUtils.format(URL_FORMATTER,TEST_HOST,TEST_PORT,testId,StringUtils.format(\"offsets/end?finish=%s\",true))))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testSetEndOffsetsAsync['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "List<URL> expectedUrls = new ArrayList<>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final int numRequests = TEST_IDS.size()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testSetEndOffsetsAsync['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "final Map<Integer,Long> endOffsets = ImmutableMap.of(0,15L,1,120L)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testSetEndOffsetsAsync['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "List<Boolean> responses = Futures.allAsList(futures).get()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "expect(httpClient.go(EasyMock.capture(captured),EasyMock.anyObject(),EasyMock.eq(TEST_HTTP_TIMEOUT))).andReturn(Futures.immediateFuture(responseHolder)).times(numRequests)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertTrue(\"unexpectedURL\",expectedUrls.contains(requests.get(i).getUrl()))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Capture<Request> captured = Capture.newInstance(CaptureType.ALL)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "i++@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "EasyMock.expect(responseHolder.getStatus()).andReturn(HttpResponseStatus.OK).anyTimes()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "EasyMock.expect(httpClient.go(EasyMock.capture(captured),EasyMock.anyObject(),EasyMock.eq(TEST_HTTP_TIMEOUT))).andReturn(Futures.immediateFuture(responseHolder)).times(numRequests)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Assert.assertTrue(responses.get(i))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "futures.add(client.setEndOffsetsAsync(testId,endOffsets,true))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(numRequests,responses.size())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "List<Request> requests = captured.getValues()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(HttpMethod.POST,requests.get(i).getMethod())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "verifyAll()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Map<String,String> endOffsets = ImmutableMap.of(\"0\",\"15L\",\"1\",\"120L\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "int i = 0@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<ListenableFuture<Boolean>> futures = new ArrayList<>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "expect(responseHolder.getStatus()).andReturn(HttpResponseStatus.OK).anyTimes()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(numRequests,requests.size())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->17 [style = dotted, label="true"];
0->3 [style = bold, label=""];
16->13 [style = bold, label=""];
10->20 [style = bold, label=""];
0->23 [style = solid, label="numRequests"];
7->17 [style = bold, label=""];
9->11 [style = bold, label=""];
0->4 [style = solid, label="numRequests"];
17->6 [style = bold, label=""];
0->11 [style = solid, label="numRequests"];
0->5 [style = solid, label="numRequests"];
4->19 [style = bold, label=""];
5->6 [style = dotted, label="true"];
14->10 [style = bold, label=""];
24->13 [style = bold, label=""];
15->5 [style = solid, label="i"];
21->22 [style = dashed, label="0"];
3->22 [style = bold, label=""];
22->23 [style = bold, label=""];
5->15 [style = dotted, label="true"];
13->26 [style = dashed, label="0"];
11->18 [style = bold, label=""];
15->5 [style = bold, label=""];
6->15 [style = bold, label=""];
0->9 [style = solid, label="numRequests"];
15->6 [style = solid, label="i"];
20->10 [style = bold, label=""];
18->15 [style = solid, label="i"];
18->5 [style = solid, label="i"];
19->1 [style = bold, label=""];
12->2 [style = bold, label=""];
26->0 [style = bold, label=""];
5->7 [style = dotted, label="true"];
18->5 [style = bold, label=""];
23->19 [style = bold, label=""];
25->26 [style = bold, label=""];
20->12 [style = bold, label=""];
8->9 [style = bold, label=""];
13->20 [style = solid, label="endOffsets"];
5->7 [style = bold, label=""];
3->21 [style = bold, label=""];
1->14 [style = bold, label=""];
4->23 [style = dashed, label="0"];
26->20 [style = solid, label="endOffsets"];
18->6 [style = solid, label="i"];
2->8 [style = bold, label=""];
13->0 [style = bold, label=""];
21->4 [style = bold, label=""];
}
