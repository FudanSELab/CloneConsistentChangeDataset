digraph {
7 [style = filled, label = "s1.toFlowable().subscribe(ts)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(unsubscribed.get())@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "unsubscribeViaReturnedSubscription['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final CountDownLatch latch = new CountDownLatch(2)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTrue(interrupted.get())@@@40@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final AtomicBoolean interrupted = new AtomicBoolean()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Single<String> s1 = Single.unsafeCreate(new SingleSource<String>(){@Override public void subscribe(final SingleObserver<? super String> observer){SerialDisposable sd = new SerialDisposable()observer.onSubscribe(sd)final Thread t = new Thread(new Runnable(){@Override public void run(){try {Thread.sleep(5000)observer.onSuccess(\"success\")}catch (InterruptedException e) }})sd.replace(Disposable.fromRunnable(new Runnable(){@Override public void run(){unsubscribed.set(true)t.interrupt()latch.countDown()}}))t.start()}})@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(interrupted.get())@@@41@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "fail(\"timed out waiting for latch\")@@@43@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Single<String> s1 = Single.unsafeCreate(new SingleSource<String>(){@Override public void subscribe(final SingleObserver<? super String> observer){SerialDisposable sd = new SerialDisposable()observer.onSubscribe(sd)final Thread t = new Thread(new Runnable(){@Override public void run(){try {Thread.sleep(5000)observer.onSuccess(\"success\")}catch (InterruptedException e) }})sd.replace(Disposable.fromRunnable(new Runnable(){@Override public void run(){unsubscribed.set(true)t.interrupt()latch.countDown()}}))t.start()}})@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "TestSubscriber<String> ts = new TestSubscriber<String>()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "subscription.dispose()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "unsubscribe['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "fail(\"timed out waiting for latch\")@@@44@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Thread.sleep(100)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "unsubscribe['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "ts.cancel()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Disposable subscription = s1.subscribe()@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "latch.await(1000,TimeUnit.MILLISECONDS)@@@38@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "TestSubscriber<String> ts = new TestSubscriber<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "final AtomicBoolean unsubscribed = new AtomicBoolean()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->17 [style = bold, label=""];
6->3 [style = bold, label=""];
0->12 [style = dotted, label="true"];
1->4 [style = bold, label=""];
0->9 [style = bold, label=""];
3->6 [style = dashed, label="0"];
7->11 [style = bold, label=""];
0->5 [style = dotted, label="true"];
4->6 [style = bold, label=""];
7->17 [style = dashed, label="0"];
18->15 [style = bold, label=""];
14->7 [style = solid, label="ts"];
10->7 [style = solid, label="ts"];
18->15 [style = dotted, label="false"];
2->10 [style = bold, label=""];
11->18 [style = bold, label=""];
14->1 [style = bold, label=""];
19->16 [style = bold, label=""];
8->0 [style = bold, label=""];
0->9 [style = dotted, label="false"];
3->7 [style = bold, label=""];
5->12 [style = bold, label=""];
16->1 [style = bold, label=""];
18->0 [style = dotted, label="true"];
11->8 [style = bold, label=""];
17->20 [style = bold, label=""];
18->5 [style = dotted, label="true"];
8->11 [style = dashed, label="0"];
10->1 [style = bold, label=""];
13->14 [style = bold, label=""];
18->0 [style = bold, label=""];
10->14 [style = dashed, label="0"];
0->5 [style = bold, label=""];
20->11 [style = bold, label=""];
}
