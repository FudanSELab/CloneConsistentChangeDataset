digraph {
14 [style = filled, label = "request.settings(builder().put(IndexMetadata.SETTING_NUMBER_OF_SHARDS,\"0\").put(\"index.shard.check_on_startup\",\"blargh\").build())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(throwables.size(),1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testIndexTemplateValidationAccumulatesValidationErrors['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "request.settings(builder().put(IndexMetadata.SETTING_NUMBER_OF_SHARDS,\"0\").build())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<Throwable> throwables = putTemplate(xContentRegistry(),request)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(throwables.get(0).getMessage(),containsString(\"unknown value for (index.shard.check_on_startup( \" + \"must be one of (true, false, checksum( but was: blargh\"))@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "PutRequest request = new PutRequest(\"test\",\"test_shards\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(throwables.get(0),instanceOf())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(throwables.get(0).getMessage(),containsString(\"template must not start with '_'\"))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "PutRequest request = new PutRequest(\"test\",\"putTemplate shards\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(throwables.get(0).getMessage(),containsString(\"name must not contain a space\"))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(throwables.get(0).getMessage(),containsString(\"Failed to parse value (0( for setting (index.number_of_shards( must be >= 1\"))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testIndexTemplateInvalidNumberOfShards['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "request.patterns(singletonList(\"test_shards*\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testIndexTemplateValidationAccumulatesValidationErrors['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(throwables.get(0).getMessage(),containsString(\"index_pattern (_test_shards*( must not start with '_'\"))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "request.patterns(singletonList(\"_test_shards*\"))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->10 [style = bold, label=""];
9->4 [style = bold, label=""];
2->3 [style = bold, label=""];
8->15 [style = dashed, label="0"];
15->16 [style = bold, label=""];
3->0 [style = bold, label=""];
0->7 [style = bold, label=""];
7->9 [style = bold, label=""];
5->1 [style = bold, label=""];
14->0 [style = bold, label=""];
8->2 [style = bold, label=""];
8->0 [style = solid, label="request"];
5->10 [style = dashed, label="0"];
2->16 [style = dashed, label="0"];
6->8 [style = bold, label=""];
1->12 [style = bold, label=""];
11->8 [style = bold, label=""];
16->14 [style = bold, label=""];
15->0 [style = solid, label="request"];
13->15 [style = bold, label=""];
3->14 [style = dashed, label="0"];
9->1 [style = bold, label=""];
10->1 [style = bold, label=""];
4->5 [style = bold, label=""];
}
