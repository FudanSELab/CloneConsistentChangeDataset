digraph {
16 [style = filled, label = "Assert.assertEquals(4,persistentFields.size())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testEndpointAnalysis['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "testEndpointAnalysis['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(3,source.size())@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(\"\"/service/prod/save\"\",filterExpression.getRight())@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(\"combine\",method.getMethodName())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testFilterAnalysis['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "result.setPackageName(\"endpoint.endpointavg\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(\"(long)(1)\",method.getArgsExpressions().get(1))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "EntryMethod method = result.getEntryMethod()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(\"source.getName()\",filterExpression.getLeft())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(\"(long)(source.getLatency())\",method.getArgsExpressions().get(0))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "DeepAnalysis analysis = new DeepAnalysis()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(2,source.size())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "expression.setAttribute(\"name\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "result = analysis.analysis(result)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "result.setAggregationFunctionName(\"longAvg\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(1,filterExpressions.size())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "List<SourceColumn> source = result.getFieldsFromSource()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "expression.setExpressionType(\"stringMatch\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "result.addFilterExpressionsParserResult(expression)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Expression filterExpression = filterExpressions.get(0)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "result.setSourceName(\"Endpoint\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expression.setValue(\"\"/service/prod/save\"\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "ConditionExpression expression = new ConditionExpression()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "result.setMetricsName(\"EndpointAvg\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(\"EqualMatch\",filterExpression.getExpressionObject())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "AnalysisResult result = new AnalysisResult()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "result.setSourceAttribute(\"latency\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<DataColumn> persistentFields = result.getPersistentFields()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "List<Expression> filterExpressions = result.getFilterExpressions()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15->10 [style = bold, label=""];
28->10 [style = bold, label=""];
23->27 [style = bold, label=""];
29->30 [style = bold, label=""];
20->29 [style = bold, label=""];
1->15 [style = bold, label=""];
16->24 [style = bold, label=""];
26->25 [style = bold, label=""];
9->2 [style = solid, label="result"];
11->17 [style = dashed, label="0"];
3->16 [style = bold, label=""];
15->22 [style = bold, label=""];
9->6 [style = bold, label=""];
7->14 [style = bold, label=""];
8->17 [style = bold, label=""];
6->5 [style = bold, label=""];
30->28 [style = bold, label=""];
27->26 [style = bold, label=""];
5->0 [style = bold, label=""];
12->4 [style = bold, label=""];
11->3 [style = bold, label=""];
22->20 [style = bold, label=""];
24->21 [style = bold, label=""];
19->9 [style = bold, label=""];
0->1 [style = bold, label=""];
14->12 [style = bold, label=""];
18->9 [style = bold, label=""];
17->3 [style = bold, label=""];
4->8 [style = bold, label=""];
10->2 [style = bold, label=""];
13->9 [style = bold, label=""];
10->2 [style = solid, label="analysis"];
2->7 [style = bold, label=""];
8->11 [style = bold, label=""];
22->28 [style = solid, label="expression"];
21->23 [style = bold, label=""];
}
