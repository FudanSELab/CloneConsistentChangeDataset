digraph {
21 [style = filled, label = "Assert.assertTrue(finishedLatch.await(10,TimeUnit.SECONDS))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final Semaphore semaphore = new Semaphore(0)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final CountDownLatch startedLatch = new CountDownLatch(2)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "semaphore.release(3)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "ensurePath.ensure(curator)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "when(client.exists(Mockito.any(),anyBoolean())).thenAnswer(new Answer<Stat>(){@Override public Stat answer(InvocationOnMock invocation){semaphore.acquire()return fakeStat}})@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final EnsurePath ensurePath = new EnsurePath(\"/one/two/three\")@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertTrue(startedLatch.await(10,TimeUnit.SECONDS))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final Stat fakeStat = mock()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "++i@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ensurePath.ensure(curator)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "when(curator.getConnectionHandlingPolicy()).thenReturn(new StandardConnectionHandlingPolicy())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "RetryLoop retryLoop = new RetryLoopImpl(retryPolicy,null)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "when(curator.newRetryLoop()).thenReturn(retryLoop)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "verify(client,times(3)).exists(Mockito.any(),anyBoolean())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "verifyNoMoreInteractions(client)@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testBasic['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "ensurePath.ensure(curator)@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "when(curator.getZooKeeper()).thenReturn(client)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "RetryPolicy retryPolicy = new RetryOneTime(1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final CountDownLatch finishedLatch = new CountDownLatch(2)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "verifyNoMoreInteractions(client)@@@44@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "final CuratorZookeeperClient curator = mock()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Stat fakeStat = mock()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ZooKeeper client = mock(,Mockito.RETURNS_MOCKS)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testBasic['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "service.submit(new Callable<Void>(){@Override public Void call(){startedLatch.countDown()ensurePath.ensure(curator)finishedLatch.countDown()return null}})@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "testSimultaneous['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "when(client.exists(Mockito.any(),anyBoolean())).thenReturn(fakeStat)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "ExecutorService service = Executors.newCachedThreadPool()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "verifyNoMoreInteractions(client)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "verify(client,times(3)).exists(Mockito.any(),anyBoolean())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "CuratorZookeeperClient curator = mock()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "verifyNoMoreInteractions(client)@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "EnsurePath ensurePath = new EnsurePath(\"/one/two/three\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ensurePath.ensure(curator)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "int i = 0@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "i < 2@@@25@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "ensurePath.ensure(curator)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "when(curator.getRetryPolicy()).thenReturn(retryPolicy)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->8 [style = bold, label=""];
25->28 [style = bold, label=""];
32->23 [style = bold, label=""];
10->15 [style = bold, label=""];
34->20 [style = bold, label=""];
15->7 [style = bold, label=""];
31->22 [style = bold, label=""];
23->30 [style = bold, label=""];
12->15 [style = solid, label="client"];
26->28 [style = solid, label="fakeStat"];
11->1 [style = bold, label=""];
0->10 [style = solid, label="retryPolicy"];
8->3 [style = bold, label=""];
8->3 [style = solid, label="fakeStat"];
18->12 [style = bold, label=""];
5->26 [style = bold, label=""];
37->39 [style = solid, label="curator"];
14->2 [style = solid, label="curator"];
22->32 [style = bold, label=""];
34->20 [style = solid, label="i"];
36->12 [style = bold, label=""];
20->38 [style = bold, label=""];
3->16 [style = bold, label=""];
37->6 [style = bold, label=""];
26->19 [style = bold, label=""];
20->39 [style = dotted, label="true"];
12->0 [style = bold, label=""];
14->1 [style = solid, label="curator"];
10->6 [style = bold, label=""];
35->21 [style = bold, label=""];
6->15 [style = bold, label=""];
1->17 [style = bold, label=""];
2->13 [style = bold, label=""];
19->24 [style = bold, label=""];
29->20 [style = bold, label=""];
0->10 [style = bold, label=""];
7->5 [style = bold, label=""];
21->31 [style = bold, label=""];
14->0 [style = bold, label=""];
17->2 [style = bold, label=""];
12->13 [style = solid, label="client"];
12->32 [style = solid, label="client"];
12->17 [style = solid, label="client"];
20->29 [style = dotted, label="true"];
24->25 [style = bold, label=""];
14->4 [style = solid, label="curator"];
12->14 [style = bold, label=""];
20->39 [style = bold, label=""];
12->30 [style = solid, label="client"];
37->22 [style = solid, label="curator"];
10->5 [style = solid, label="retryLoop"];
9->12 [style = bold, label=""];
28->27 [style = bold, label=""];
27->33 [style = bold, label=""];
16->4 [style = bold, label=""];
0->7 [style = solid, label="retryPolicy"];
4->11 [style = bold, label=""];
38->35 [style = bold, label=""];
37->23 [style = solid, label="curator"];
33->34 [style = bold, label=""];
39->29 [style = bold, label=""];
10->37 [style = bold, label=""];
8->26 [style = dashed, label="0"];
}
