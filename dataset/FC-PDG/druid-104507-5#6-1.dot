digraph {
2 [style = filled, label = "final List<IndexIngestionSpec> ingestionSpecs = CompactionTask.createIngestionSchema(toolbox,new SegmentProvider(DATA_SOURCE,COMPACTION_INTERVAL),new PartitionConfigurationManager(null,tuningConfig),null,keepSegmentGranularity,objectMapper)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertIngestionSchema(ingestionSpecs,expectedDimensionsSpec,Collections.singletonList(COMPACTION_INTERVAL),tuningConfig,Granularities.ALL)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertIngestionSchema(ingestionSpecs,expectedDimensionsSpec,SEGMENT_INTERVALS,tuningConfig)@@@9@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final IndexTuningConfig tuningConfig = new IndexTuningConfig(5,500000,1000000L,null,null,null,null,new IndexSpec(new RoaringBitmapSerdeFactory(true),CompressionStrategy.LZ4,CompressionStrategy.LZF,LongEncodingStrategy.LONGS),5000,true,false,true,false,null,100L,null,null,null,null)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "ingestionSpecs.sort(null)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testCreateIngestionSchemaWithMaxTotalRows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(5,ingestionSpecs.size())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final List<DimensionsSpec> expectedDimensionsSpec = getExpectedDimensionsSpecForAutoGeneration(keepSegmentGranularity)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final List<IndexIngestionSpec> ingestionSpecs = CompactionTask.createIngestionSchema(toolbox,new SegmentProvider(DATA_SOURCE,COMPACTION_INTERVAL),new PartitionConfigurationManager(null,tuningConfig),null,keepSegmentGranularity,null,objectMapper)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testCreateIngestionSchemaWithTargetPartitionSize['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "final IndexTuningConfig tuningConfig = new IndexTuningConfig(null,500000,1000000L,5L,null,null,null,new IndexSpec(new RoaringBitmapSerdeFactory(true),CompressionStrategy.LZ4,CompressionStrategy.LZF,LongEncodingStrategy.LONGS),5000,true,false,true,false,null,100L,null,null,null,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(1,ingestionSpecs.size())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final IndexTuningConfig tuningConfig = new IndexTuningConfig(6,500000,1000000L,null,null,null,null,new IndexSpec(new RoaringBitmapSerdeFactory(true),CompressionStrategy.LZ4,CompressionStrategy.LZF,LongEncodingStrategy.LONGS),5000,true,false,true,false,null,100L,null,null,null,null)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertIngestionSchema(ingestionSpecs,expectedDimensionsSpec,SEGMENT_INTERVALS,tuningConfig,Granularities.MONTH)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testCreateIngestionSchemaWithTargetPartitionSize['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertIngestionSchema(ingestionSpecs,expectedDimensionsSpec,Collections.singletonList(COMPACTION_INTERVAL),tuningConfig)@@@13@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "keepSegmentGranularity@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(6,ingestionSpecs.size())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7->13 [style = bold, label=""];
9->14 [style = solid, label="expectedDimensionsSpec"];
5->3 [style = bold, label=""];
4->6 [style = dotted, label="true"];
12->13 [style = solid, label="tuningConfig"];
8->10 [style = bold, label=""];
17->1 [style = solid, label="tuningConfig"];
12->14 [style = solid, label="tuningConfig"];
3->17 [style = dashed, label="0"];
4->7 [style = dotted, label="false"];
1->14 [style = dashed, label="0"];
10->14 [style = bold, label=""];
4->1 [style = dotted, label="true"];
11->14 [style = solid, label="ingestionSpecs"];
4->10 [style = dotted, label="true"];
9->4 [style = bold, label=""];
12->11 [style = bold, label=""];
4->8 [style = dotted, label="true"];
8->6 [style = bold, label=""];
7->0 [style = bold, label=""];
2->9 [style = bold, label=""];
2->1 [style = solid, label="ingestionSpecs"];
16->17 [style = bold, label=""];
4->14 [style = dotted, label="true"];
3->1 [style = solid, label="tuningConfig"];
11->9 [style = bold, label=""];
4->13 [style = dotted, label="false"];
9->0 [style = solid, label="expectedDimensionsSpec"];
4->7 [style = bold, label=""];
6->10 [style = dashed, label="0"];
6->1 [style = bold, label=""];
9->1 [style = solid, label="expectedDimensionsSpec"];
12->11 [style = solid, label="tuningConfig"];
11->13 [style = solid, label="ingestionSpecs"];
17->0 [style = solid, label="tuningConfig"];
3->12 [style = dashed, label="0"];
3->2 [style = bold, label=""];
17->2 [style = bold, label=""];
2->0 [style = solid, label="ingestionSpecs"];
0->13 [style = dashed, label="0"];
3->2 [style = solid, label="tuningConfig"];
9->13 [style = solid, label="expectedDimensionsSpec"];
4->8 [style = bold, label=""];
2->11 [style = dashed, label="0"];
3->0 [style = solid, label="tuningConfig"];
15->12 [style = bold, label=""];
17->2 [style = solid, label="tuningConfig"];
4->0 [style = dotted, label="false"];
}
