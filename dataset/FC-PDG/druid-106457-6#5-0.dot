digraph {
5 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"time-extraction\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testGroupByTimeExtraction['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "expectedException.expectMessage(\"'__time' cannot be used as an output name for dimensions, aggregators, or post-aggregators.\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01\",\"dayOfWeek\",\"Friday\",\"market\",\"spot\",\"index\",13219.574157714844,\"rows\",117L,\"addRowsIndexConstant\",13337.574157714844),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01\",\"dayOfWeek\",\"Monday\",\"market\",\"spot\",\"index\",13557.738830566406,\"rows\",117L,\"addRowsIndexConstant\",13675.738830566406),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01\",\"dayOfWeek\",\"Saturday\",\"market\",\"spot\",\"index\",13493.751281738281,\"rows\",117L,\"addRowsIndexConstant\",13611.751281738281),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01\",\"dayOfWeek\",\"Sunday\",\"market\",\"spot\",\"index\",13585.541015625,\"rows\",117L,\"addRowsIndexConstant\",13703.541015625),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01\",\"dayOfWeek\",\"Thursday\",\"market\",\"spot\",\"index\",14279.127197265625,\"rows\",126L,\"addRowsIndexConstant\",14406.127197265625),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01\",\"dayOfWeek\",\"Tuesday\",\"market\",\"spot\",\"index\",13199.471435546875,\"rows\",117L,\"addRowsIndexConstant\",13317.471435546875),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01\",\"dayOfWeek\",\"Wednesday\",\"market\",\"spot\",\"index\",14271.368591308594,\"rows\",126L,\"addRowsIndexConstant\",14398.368591308594),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01\",\"dayOfWeek\",\"Friday\",\"market\",\"upfront\",\"index\",27297.8623046875,\"rows\",26L,\"addRowsIndexConstant\",27324.8623046875),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01\",\"dayOfWeek\",\"Monday\",\"market\",\"upfront\",\"index\",27619.58447265625,\"rows\",26L,\"addRowsIndexConstant\",27646.58447265625),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01\",\"dayOfWeek\",\"Saturday\",\"market\",\"upfront\",\"index\",27820.83154296875,\"rows\",26L,\"addRowsIndexConstant\",27847.83154296875),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01\",\"dayOfWeek\",\"Sunday\",\"market\",\"upfront\",\"index\",24791.223876953125,\"rows\",26L,\"addRowsIndexConstant\",24818.223876953125),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01\",\"dayOfWeek\",\"Thursday\",\"market\",\"upfront\",\"index\",28562.748901367188,\"rows\",28L,\"addRowsIndexConstant\",28591.748901367188),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01\",\"dayOfWeek\",\"Tuesday\",\"market\",\"upfront\",\"index\",26968.280639648438,\"rows\",26L,\"addRowsIndexConstant\",26995.280639648438),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01\",\"dayOfWeek\",\"Wednesday\",\"market\",\"upfront\",\"index\",28985.5751953125,\"rows\",28L,\"addRowsIndexConstant\",29014.5751953125))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.fullOnInterval).setDimensions(new DefaultDimensionSpec(\"market\",\"market\"),new ExtractionDimensionSpec(ColumnHolder.TIME_COLUMN_NAME,ColumnHolder.TIME_COLUMN_NAME,new TimeFormatExtractionFn(\"EEEE\",null,null,null,false))).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,QueryRunnerTestHelper.indexDoubleSum).setPostAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.addRowsIndexConstant)).setGranularity(QueryRunnerTestHelper.allGran).setDimFilter(new OrDimFilter(Arrays.asList(new SelectorDimFilter(\"market\",\"spot\",null),new SelectorDimFilter(\"market\",\"upfront\",null)))).setLimitSpec(new DefaultLimitSpec(ImmutableList.of(),1)).build()@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "testGroupByTimeExtractionNamedUnderUnderTime['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "expectedException.expect()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testGroupByTimeExtraction['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "GroupByQuery query = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.fullOnInterval).setDimensions(new DefaultDimensionSpec(\"market\",\"market\"),new ExtractionDimensionSpec(ColumnHolder.TIME_COLUMN_NAME,\"dayOfWeek\",new TimeFormatExtractionFn(\"EEEE\",null,null,null,false))).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,QueryRunnerTestHelper.indexDoubleSum).setPostAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.addRowsIndexConstant)).setGranularity(QueryRunnerTestHelper.allGran).setDimFilter(new OrDimFilter(Arrays.asList(new SelectorDimFilter(\"market\",\"spot\",null),new SelectorDimFilter(\"market\",\"upfront\",null)))).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
4->1 [style = bold, label=""];
2->1 [style = solid, label="query"];
1->0 [style = bold, label=""];
1->10 [style = dashed, label="0"];
3->2 [style = bold, label=""];
0->5 [style = dashed, label="0"];
9->7 [style = bold, label=""];
2->4 [style = bold, label=""];
7->10 [style = bold, label=""];
1->0 [style = solid, label="results"];
4->5 [style = solid, label="expectedResults"];
4->0 [style = solid, label="expectedResults"];
1->5 [style = solid, label="results"];
8->9 [style = bold, label=""];
6->2 [style = bold, label=""];
}
