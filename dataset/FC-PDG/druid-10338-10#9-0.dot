digraph {
22 [style = filled, label = "int maxSegments@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "j++@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "String serverName = \"DruidServer_Name_\" + i@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "EasyMock.expect(druidServer.getSegment(segment.getId())).andReturn(segment).anyTimes()@@@26@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "serverHolderList.add(new ServerHolder(druidServer,fromPeon))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "segments.put(segment.getId(),segment)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "return serverHolderList@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "List<DataSegment> segments = IntStream.range(0,maxSegments).mapToObj(null).collect(Collectors.toList())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "LoadQueuePeonTester fromPeon = new LoadQueuePeonTester()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "setupDummyCluster['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ImmutableDruidServer druidServer = EasyMock.createMock()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "setupDummyCluster['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "int serverCount@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "ImmutableDruidServer druidServer = EasyMock.createMock()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "serverHolderList.add(serverHolder)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "EasyMock.replay(druidServer)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "LoadQueuePeonTester fromPeon = new LoadQueuePeonTester()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "int serverCount@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "EasyMock.expect(druidServer.getLazyAllSegments()).andReturn(segments.values()).anyTimes()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "int maxSegments@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "DataSegment segment = getSegment(j)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "serverHolderList.add(new ServerHolder(druidServer,fromPeon))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "j < (maxSegments - 2)@@@22@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "EasyMock.replay(druidServer)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "serverHolderList.add(new ServerHolder(new ImmutableDruidServer(new DruidServerMetadata(\"DruidServer_Name_\" + i,\"localhost\",null,10000000L,ServerType.HISTORICAL,\"hot\",1),3000L,ImmutableMap.of(\"DUMMY\",dataSource),segments.size()),fromPeon))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "List<ServerHolder> serverHolderList = new ArrayList<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "int j = 0@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "DataSegment segment = getSegment(j)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "ImmutableDruidServerTests.expectSegments(druidServer,segments)@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "i++@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "int i = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "EasyMock.expect(druidServer.getMaxSize()).andReturn(10000000L).anyTimes()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "setupDummyCluster['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "ServerHolder serverHolder = new ServerHolder(new ImmutableDruidServer(new DruidServerMetadata(serverName,\"localhost\",null,10000000L,ServerType.HISTORICAL,\"hot\",1),3000L,ImmutableMap.of(\"DUMMY\",dataSource),segments.size()),fromPeon)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Map<SegmentId,DataSegment> segments = new HashMap<>()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "LoadQueuePeonTester fromPeon = new LoadQueuePeonTester()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "List<DataSegment> segments = new ArrayList<>()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ImmutableDruidDataSource dataSource = new ImmutableDruidDataSource(\"DUMMY\",Collections.emptyMap(),segments)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "j < maxSegments@@@20@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "i < serverCount@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11->29 [style = bold, label=""];
35->33 [style = bold, label=""];
8->14 [style = bold, label=""];
25->11 [style = solid, label="maxSegments"];
38->8 [style = bold, label=""];
23->10 [style = bold, label=""];
0->36 [style = dashed, label="0"];
10->29 [style = solid, label="druidServer"];
19->0 [style = bold, label=""];
7->36 [style = bold, label=""];
42->2 [style = bold, label=""];
3->15 [style = solid, label="j"];
21->18 [style = bold, label=""];
8->2 [style = solid, label="serverHolderList"];
2->31 [style = bold, label=""];
26->23 [style = bold, label=""];
15->34 [style = bold, label=""];
24->27 [style = bold, label=""];
7->1 [style = bold, label=""];
31->39 [style = bold, label=""];
11->5 [style = dotted, label="true"];
19->31 [style = solid, label="druidServer"];
16->22 [style = dotted, label="true"];
20->9 [style = solid, label="i"];
26->9 [style = dotted, label="true"];
34->42 [style = bold, label=""];
14->26 [style = solid, label="i"];
26->13 [style = bold, label=""];
36->4 [style = bold, label=""];
26->21 [style = dotted, label="true"];
6->15 [style = bold, label=""];
0->7 [style = bold, label=""];
22->11 [style = solid, label="maxSegments"];
9->20 [style = bold, label=""];
23->27 [style = solid, label="fromPeon"];
16->8 [style = bold, label=""];
4->3 [style = solid, label="j"];
11->17 [style = bold, label=""];
11->6 [style = bold, label=""];
25->34 [style = solid, label="maxSegments"];
18->33 [style = solid, label="dataSource"];
20->26 [style = solid, label="i"];
5->37 [style = bold, label=""];
26->40 [style = dotted, label="true"];
1->41 [style = dashed, label="0"];
17->15 [style = bold, label=""];
14->9 [style = solid, label="i"];
41->3 [style = bold, label=""];
12->19 [style = bold, label=""];
15->5 [style = bold, label=""];
10->24 [style = solid, label="druidServer"];
6->42 [style = dashed, label="0"];
1->4 [style = bold, label=""];
14->35 [style = solid, label="i"];
3->11 [style = solid, label="j"];
26->12 [style = bold, label=""];
14->20 [style = solid, label="i"];
34->6 [style = dotted, label="true"];
8->39 [style = solid, label="serverHolderList"];
11->3 [style = dotted, label="true"];
5->37 [style = solid, label="segment"];
30->28 [style = dotted, label="true"];
34->5 [style = dotted, label="true"];
20->35 [style = solid, label="i"];
26->13 [style = dotted, label="true"];
6->24 [style = bold, label=""];
11->17 [style = dotted, label="true"];
28->26 [style = solid, label="serverCount"];
33->40 [style = bold, label=""];
18->9 [style = bold, label=""];
12->31 [style = solid, label="fromPeon"];
30->25 [style = dotted, label="true"];
13->9 [style = solid, label="fromPeon"];
26->33 [style = dotted, label="true"];
11->15 [style = dotted, label="true"];
3->5 [style = solid, label="j"];
5->3 [style = bold, label=""];
4->11 [style = solid, label="j"];
25->26 [style = solid, label="serverCount"];
11->34 [style = dashed, label="0"];
1->29 [style = solid, label="segments"];
18->35 [style = bold, label=""];
17->15 [style = solid, label="segment"];
38->25 [style = dotted, label="true"];
19->2 [style = solid, label="druidServer"];
35->33 [style = solid, label="serverName"];
3->11 [style = bold, label=""];
33->40 [style = solid, label="serverHolder"];
34->5 [style = bold, label=""];
4->11 [style = bold, label=""];
38->32 [style = dotted, label="true"];
26->18 [style = dotted, label="true"];
14->26 [style = bold, label=""];
10->12 [style = bold, label=""];
15->37 [style = dashed, label="0"];
4->41 [style = bold, label=""];
3->17 [style = solid, label="j"];
37->6 [style = bold, label=""];
15->34 [style = solid, label="j"];
18->9 [style = solid, label="dataSource"];
3->34 [style = solid, label="j"];
34->37 [style = dotted, label="true"];
4->17 [style = solid, label="j"];
21->18 [style = solid, label="segments"];
34->15 [style = dotted, label="true"];
16->25 [style = dotted, label="true"];
26->20 [style = dotted, label="true"];
29->24 [style = bold, label=""];
30->8 [style = bold, label=""];
10->27 [style = solid, label="druidServer"];
13->33 [style = solid, label="fromPeon"];
40->20 [style = bold, label=""];
20->26 [style = bold, label=""];
32->26 [style = solid, label="serverCount"];
26->35 [style = dotted, label="true"];
3->34 [style = bold, label=""];
27->2 [style = bold, label=""];
15->5 [style = solid, label="j"];
13->21 [style = bold, label=""];
}
