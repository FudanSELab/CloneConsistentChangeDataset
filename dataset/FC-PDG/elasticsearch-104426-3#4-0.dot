digraph {
3 [style = filled, label = "assertEquals(1,releasable1.refCount())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertTrue(header.needsToReadVariableHeader())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testDecodeHandshakeCompatibility['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "OutboundMessage message = new OutboundMessage.Request(threadContext,new TestRequest(randomAlphaOfLength(100)),handshakeCompat,action,requestId,true,null)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "int totalHeaderSize = TcpHeader.headerSize(handshakeCompat)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(totalHeaderSize,bytesConsumed)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "threadContext.putHeader(headerKey,headerValue)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final String headerKey = randomAlphaOfLength(10)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(requestId,header.getRequestId())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "int bytesConsumed = decoder.decode(releasable1,null)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "InboundDecoder decoder = new InboundDecoder(Version.CURRENT,PageCacheRecycler.NON_RECYCLING_INSTANCE)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final BytesReference bytes = message.serialize(new BytesStreamOutput())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final ArrayList<Object> fragments = new ArrayList<>()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Version handshakeCompat = Version.CURRENT.minimumCompatibilityVersion().minimumCompatibilityVersion()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertFalse(header.isCompressed())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testCompressedDecodeHandshakeCompatibility['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertTrue(header.isCompressed())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testDecodeHandshakeCompatibility['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "String action = \"test-request\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final ReleasableBytesReference releasable1 = ReleasableBytesReference.wrap(bytes)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(handshakeCompat,header.getVersion())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final Header header = (Header)fragments.get(0)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final String headerValue = randomAlphaOfLength(20)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "OutboundMessage message = new OutboundMessage.Request(threadContext,new TestRequest(randomAlphaOfLength(100)),handshakeCompat,action,requestId,true,false)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertTrue(header.isHandshake())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertTrue(header.isRequest())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "fragments.clear()@@@25@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "long requestId = randomNonNegativeLong()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "OutboundMessage message = new OutboundMessage.Request(threadContext,new TestRequest(randomAlphaOfLength(100)),handshakeCompat,action,requestId,true,true)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->15 [style = bold, label=""];
0->16 [style = bold, label=""];
17->5 [style = bold, label=""];
20->17 [style = bold, label=""];
7->14 [style = solid, label="releasable1"];
25->13 [style = bold, label=""];
15->25 [style = bold, label=""];
15->9 [style = solid, label="handshakeCompat"];
11->21 [style = bold, label=""];
28->11 [style = bold, label=""];
14->22 [style = bold, label=""];
15->26 [style = solid, label="handshakeCompat"];
9->22 [style = solid, label="totalHeaderSize"];
0->16 [style = solid, label="headerValue"];
12->26 [style = solid, label="requestId"];
1->28 [style = dashed, label="0"];
5->28 [style = bold, label=""];
2->4 [style = bold, label=""];
15->25 [style = solid, label="handshakeCompat"];
21->18 [style = bold, label=""];
26->13 [style = bold, label=""];
1->11 [style = bold, label=""];
15->26 [style = bold, label=""];
4->8 [style = solid, label="action"];
7->14 [style = bold, label=""];
22->3 [style = bold, label=""];
4->26 [style = solid, label="action"];
5->1 [style = bold, label=""];
27->4 [style = bold, label=""];
13->7 [style = solid, label="bytes"];
12->10 [style = bold, label=""];
3->20 [style = bold, label=""];
24->4 [style = bold, label=""];
12->25 [style = solid, label="requestId"];
12->17 [style = solid, label="requestId"];
18->6 [style = bold, label=""];
19->23 [style = bold, label=""];
10->0 [style = bold, label=""];
14->22 [style = solid, label="bytesConsumed"];
4->12 [style = bold, label=""];
9->19 [style = bold, label=""];
15->5 [style = solid, label="handshakeCompat"];
8->25 [style = dashed, label="0"];
4->25 [style = solid, label="action"];
12->8 [style = solid, label="requestId"];
15->8 [style = solid, label="handshakeCompat"];
23->7 [style = bold, label=""];
13->9 [style = bold, label=""];
15->8 [style = bold, label=""];
8->13 [style = bold, label=""];
8->26 [style = dashed, label="0"];
10->16 [style = solid, label="headerKey"];
}
