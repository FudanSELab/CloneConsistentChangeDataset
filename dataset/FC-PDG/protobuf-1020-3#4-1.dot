digraph {
1 [style = filled, label = "TestAllTypesLite.parseFrom(CodedInputStream.newInstance(new InputStream(){@Override public int read(){throw readException}}))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TestAllTypesLite.parseDelimitedFrom(new InputStream(){@Override public int read(){throw readException}})@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final IOException readException = new IOException()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testParseDelimitedFromStream_IOExceptionNotLost['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertWithMessage(\"expected exception\").fail()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testParseFromStream_IOExceptionNotLost['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "testParseFromStream_IOExceptionNotLost['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "fail()@@@11@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2->4 [style = dashed, label="0"];
1->4 [style = bold, label=""];
1->2 [style = bold, label=""];
6->0 [style = bold, label=""];
1->7 [style = dashed, label="0"];
0->1 [style = solid, label="readException"];
5->0 [style = bold, label=""];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
3->0 [style = bold, label=""];
0->7 [style = solid, label="readException"];
0->7 [style = bold, label=""];
}
