digraph {
20 [style = filled, label = "assertEquals(,meta.getSetterType(\"richType\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(,meta.getSetterType(\"richType.richList\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(,meta.getSetterType(\"richType.richMap\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(,meta.getGetterType(\"richList(0(\"))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(,meta.getSetterType(\"richList\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "MetaClass meta = MetaClass.forClass(,reflectorFactory)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "MetaClass meta = MetaClass.forClass()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(,meta.getSetterType(\"richType.richField\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(,meta.getGetterType(\"richType.richList(0(\"))@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "shouldCheckTypeForEachSetter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(,meta.getGetterType(\"richList\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(,meta.getGetterType(\"richField\"))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "shouldCheckTypeForEachGetter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "shouldCheckTypeForEachGetter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "ReflectorFactory reflectorFactory = new DefaultReflectorFactory()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertEquals(,meta.getSetterType(\"richField\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(,meta.getGetterType(\"richType.richMap\"))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(,meta.getGetterType(\"richType\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(,meta.getSetterType(\"richMap\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(,meta.getGetterType(\"richType.richProperty\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(,meta.getGetterType(\"richProperty\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(,meta.getSetterType(\"richList(0(\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(,meta.getGetterType(\"richMap\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(,meta.getGetterType(\"richField\"))@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(,meta.getSetterType(\"richType.richList(0(\"))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(,meta.getSetterType(\"richType.richProperty\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(,meta.getSetterType(\"richProperty\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(,meta.getGetterType(\"richType.richField\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(,meta.getGetterType(\"richType.richList\"))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->21 [style = dashed, label="0"];
22->25 [style = bold, label=""];
19->18 [style = bold, label=""];
3->17 [style = dashed, label="0"];
10->19 [style = dashed, label="0"];
11->26 [style = dashed, label="0"];
1->3 [style = bold, label=""];
0->11 [style = bold, label=""];
5->15 [style = bold, label=""];
11->12 [style = bold, label=""];
0->27 [style = dashed, label="0"];
2->10 [style = bold, label=""];
12->6 [style = bold, label=""];
26->24 [style = bold, label=""];
13->16 [style = bold, label=""];
18->28 [style = bold, label=""];
4->7 [style = bold, label=""];
3->0 [style = bold, label=""];
1->17 [style = bold, label=""];
20->22 [style = bold, label=""];
6->4 [style = bold, label=""];
5->28 [style = dashed, label="0"];
21->20 [style = bold, label=""];
10->8 [style = bold, label=""];
8->5 [style = bold, label=""];
14->0 [style = bold, label=""];
24->21 [style = bold, label=""];
4->20 [style = dashed, label="0"];
7->2 [style = bold, label=""];
12->24 [style = dashed, label="0"];
25->19 [style = bold, label=""];
2->25 [style = dashed, label="0"];
23->1 [style = bold, label=""];
16->14 [style = solid, label="reflectorFactory"];
16->14 [style = bold, label=""];
8->18 [style = dashed, label="0"];
17->27 [style = bold, label=""];
9->1 [style = bold, label=""];
7->22 [style = dashed, label="0"];
27->26 [style = bold, label=""];
}
