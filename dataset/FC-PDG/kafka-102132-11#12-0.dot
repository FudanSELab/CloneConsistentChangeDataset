digraph {
0 [style = filled, label = "createClientWithPreviousActiveTasks(UUID_1,1,TASK_0_1)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(clients.get(UUID_2).activeTasks(),hasItems(TASK_0_2,TASK_0_3))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(allActiveTasks(),equalTo(asList(TASK_0_0,TASK_0_1,TASK_0_2)))@@@17@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(allActiveTasks(),equalTo(asList(TASK_0_0,TASK_0_1,TASK_0_2)))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "shouldNotMigrateActiveTaskToOtherProcess['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(assign(TASK_0_0,TASK_0_1,TASK_0_2),is(false))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "final StickyTaskAssignor secondAssignor = createTaskAssignor(TASK_0_0,TASK_0_1,TASK_0_2)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "createClientWithPreviousActiveTasks(UUID_2,1,TASK_0_2,TASK_0_3)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(clients.get(UUID_2).activeTasks(),hasItems(TASK_0_1))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(clients.get(UUID_1).activeTasks(),hasItems(TASK_0_0,TASK_0_1))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "createClientWithPreviousActiveTasks(UUID_1,1,TASK_0_0,TASK_0_1)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "createClientWithPreviousActiveTasks(UUID_2,1,TASK_0_2)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "firstAssignor.assign()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "createClientWithPreviousActiveTasks(UUID_1,1,TASK_0_0)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final StickyTaskAssignor firstAssignor = createTaskAssignor(TASK_0_0,TASK_0_1,TASK_0_2)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "taskAssignor.assign()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(assign(TASK_0_0,TASK_0_1,TASK_0_2),is(false))@@@12@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertThat(clients.get(UUID_2).activeTasks(),hasItems(TASK_0_2))@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(clients.get(UUID_2).activeTasks(),hasItems(TASK_0_2))@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertThat(clients.get(UUID_1).activeTasks(),hasItems(TASK_0_0))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "final StickyTaskAssignor taskAssignor = createTaskAssignor(TASK_0_3,TASK_0_1,TASK_0_4,TASK_0_2,TASK_0_0,TASK_0_5)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "shouldNotMoveAnyTasksWhenNewTasksAdded['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "secondAssignor.assign()@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "createClientWithPreviousActiveTasks(UUID_2,1,TASK_0_1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(clients.get(UUID_1).activeTasks(),hasItems(TASK_0_1))@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "clients.clear()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(allActiveTasks(),equalTo(asList(TASK_0_0,TASK_0_1,TASK_0_2)))@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "shouldNotMigrateActiveTaskToOtherProcess['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15->2 [style = bold, label=""];
10->21 [style = dashed, label="0"];
0->13 [style = bold, label=""];
21->27 [style = bold, label=""];
10->19 [style = dashed, label="0"];
17->9 [style = bold, label=""];
3->27 [style = dashed, label="0"];
18->17 [style = bold, label=""];
10->3 [style = bold, label=""];
8->6 [style = bold, label=""];
5->18 [style = bold, label=""];
6->19 [style = bold, label=""];
5->14 [style = bold, label=""];
12->0 [style = bold, label=""];
3->4 [style = bold, label=""];
14->5 [style = dashed, label="0"];
1->22 [style = dashed, label="0"];
19->16 [style = bold, label=""];
14->7 [style = bold, label=""];
26->21 [style = bold, label=""];
7->9 [style = bold, label=""];
20->8 [style = bold, label=""];
23->22 [style = bold, label=""];
9->15 [style = bold, label=""];
24->25 [style = bold, label=""];
6->26 [style = dashed, label="0"];
6->10 [style = bold, label=""];
25->26 [style = bold, label=""];
1->12 [style = bold, label=""];
13->5 [style = bold, label=""];
11->8 [style = bold, label=""];
8->25 [style = dashed, label="0"];
27->23 [style = bold, label=""];
4->1 [style = bold, label=""];
16->4 [style = bold, label=""];
4->23 [style = dashed, label="0"];
}
