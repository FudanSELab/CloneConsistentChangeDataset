digraph {
12 [style = filled, label = "assertEquals(\"0123456789\".charAt(i),ioBuffer.get())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "IoBuffer ioBuffer = new IoBuffer()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "i++@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(10,ioBuffer.capacity())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testAddHeapBuffers['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "fail()@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "testAddHeapBuffersOneEmpty['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "i < 7@@@16@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertFalse(ioBuffer.hasRemaining())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "ByteBuffer bb2 = ByteBuffer.allocate(0)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "bb3.put(\"3456\".getBytes())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "bb3.flip()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "i++@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertTrue(ioBuffer.hasRemaining())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "i < 10@@@19@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testAddHeapBuffers['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "bb1.flip()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "int i = 0@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "bb1.put(\"012\".getBytes())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "bb3.put(\"6789\".getBytes())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "bb2.flip()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(10,ioBuffer.limit())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "ByteBuffer bb3 = ByteBuffer.allocate(5)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(7,ioBuffer.limit())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ByteBuffer bb2 = ByteBuffer.allocate(5)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "ioBuffer.get()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "IoBuffer ioBuffer = IoBuffer.newInstance()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertEquals(0,ioBuffer.position())@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "bb2.put(\"345\".getBytes())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(\"0123456\".charAt(i),ioBuffer.get())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ByteBuffer bb1 = ByteBuffer.allocate(5)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(ioBuffer.hasRemaining())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(ioBuffer.hasRemaining())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "fail()@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ioBuffer.add(bb1,bb2).add(bb3)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ioBuffer.get()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(7,ioBuffer.capacity())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28->30 [style = solid, label="i"];
14->2 [style = dashed, label="0"];
32->22 [style = bold, label=""];
34->30 [style = solid, label="i"];
10->28 [style = bold, label=""];
35->3 [style = bold, label=""];
5->23 [style = bold, label=""];
28->30 [style = bold, label=""];
10->14 [style = bold, label=""];
34->27 [style = solid, label="i"];
9->5 [style = solid, label="i"];
30->27 [style = dotted, label="true"];
8->33 [style = dashed, label="0"];
6->32 [style = dashed, label="0"];
1->3 [style = bold, label=""];
22->29 [style = bold, label=""];
15->33 [style = bold, label=""];
36->32 [style = bold, label=""];
28->27 [style = solid, label="i"];
30->9 [style = bold, label=""];
12->16 [style = bold, label=""];
6->19 [style = bold, label=""];
19->17 [style = bold, label=""];
9->16 [style = solid, label="i"];
5->12 [style = dotted, label="true"];
2->10 [style = bold, label=""];
30->34 [style = dotted, label="true"];
13->11 [style = bold, label=""];
34->30 [style = bold, label=""];
25->2 [style = bold, label=""];
0->15 [style = bold, label=""];
17->25 [style = dashed, label="0"];
3->0 [style = bold, label=""];
19->25 [style = bold, label=""];
5->4 [style = dotted, label="true"];
14->7 [style = bold, label=""];
22->2 [style = solid, label="bb3"];
9->27 [style = bold, label=""];
20->18 [style = bold, label=""];
28->34 [style = solid, label="i"];
31->26 [style = bold, label=""];
21->9 [style = bold, label=""];
18->22 [style = bold, label=""];
27->34 [style = bold, label=""];
8->20 [style = bold, label=""];
16->5 [style = solid, label="i"];
29->19 [style = bold, label=""];
17->2 [style = bold, label=""];
23->13 [style = bold, label=""];
30->31 [style = bold, label=""];
5->30 [style = dashed, label="0"];
33->36 [style = bold, label=""];
5->4 [style = bold, label=""];
5->16 [style = dotted, label="true"];
12->27 [style = dashed, label="0"];
9->5 [style = bold, label=""];
7->21 [style = bold, label=""];
16->5 [style = bold, label=""];
4->12 [style = bold, label=""];
16->12 [style = solid, label="i"];
30->9 [style = dotted, label="true"];
7->10 [style = dashed, label="0"];
36->19 [style = solid, label="bb3"];
24->3 [style = bold, label=""];
15->8 [style = bold, label=""];
9->12 [style = solid, label="i"];
22->6 [style = bold, label=""];
}
