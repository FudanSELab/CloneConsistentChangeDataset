digraph {
8 [style = filled, label = "node.moveAllChildrenTo(root,0)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(Arrays.asList(child1,child2,node),root.getChildren())@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(root,child1.getParent().get())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(root,child2.getParent().get())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "TreeNodeMock child2 = new TreeNodeMock()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "TreeNodeMock child1 = new TreeNodeMock()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "node.addChild(child1)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TreeNodeTestData.TreeNodeMock node = new TreeNodeTestData.TreeNodeMock()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "moveAllChildrenToAddsAtSpecifiedPosition['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "node.addChild(child2)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TreeNodeTestData.TreeNodeMock child2 = new TreeNodeTestData.TreeNodeMock()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "TreeNodeTestData.TreeNodeMock root = new TreeNodeTestData.TreeNodeMock()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "TreeNodeMock root = new TreeNodeMock()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "TreeNodeTestData.TreeNodeMock child1 = new TreeNodeTestData.TreeNodeMock()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "TreeNodeMock node = new TreeNodeMock()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "moveAllChildrenToChangesParent['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "moveAllChildrenToAddsAtSpecifiedPosition['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "root.addChild(node)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->10 [style = bold, label=""];
5->12 [style = dashed, label="0"];
8->15 [style = bold, label=""];
1->9 [style = solid, label="child2"];
1->14 [style = dashed, label="0"];
11->14 [style = bold, label=""];
0->6 [style = bold, label=""];
5->0 [style = solid, label="node"];
2->3 [style = bold, label=""];
3->16 [style = solid, label="root"];
6->11 [style = dashed, label="0"];
3->8 [style = solid, label="root"];
0->11 [style = bold, label=""];
6->4 [style = solid, label="child1"];
1->4 [style = solid, label="child2"];
14->4 [style = solid, label="child2"];
9->8 [style = bold, label=""];
15->16 [style = bold, label=""];
12->0 [style = bold, label=""];
1->7 [style = bold, label=""];
11->4 [style = solid, label="child1"];
14->7 [style = bold, label=""];
10->8 [style = solid, label="root"];
7->9 [style = bold, label=""];
6->1 [style = bold, label=""];
3->5 [style = bold, label=""];
5->0 [style = bold, label=""];
10->12 [style = bold, label=""];
5->4 [style = solid, label="node"];
17->3 [style = bold, label=""];
14->9 [style = solid, label="child2"];
12->0 [style = solid, label="node"];
3->10 [style = dashed, label="0"];
8->4 [style = bold, label=""];
3->15 [style = solid, label="root"];
6->7 [style = solid, label="child1"];
12->4 [style = solid, label="node"];
11->7 [style = solid, label="child1"];
}
