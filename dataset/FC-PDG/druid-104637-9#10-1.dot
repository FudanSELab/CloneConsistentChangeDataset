digraph {
8 [style = filled, label = "return new WorkerTaskMonitor(jsonMapper,new SingleTaskBackgroundRunner(new TaskToolboxFactory(taskConfig,taskActionClientFactory,null,null,null,null,null,null,null,notifierFactory,null,null,null,new SegmentLoaderFactory(null,jsonMapper),jsonMapper,indexIO,null,null,null,indexMergerV9,null,null,null,null,new NoopTestTaskReportFileWriter()),taskConfig,new NoopServiceEmitter(),DUMMY_NODE,new ServerConfig()),taskConfig,cf,workerCuratorCoordinator,EasyMock.createNiceMock())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "final TaskConfig taskConfig = new TaskConfig(Files.createTempDir().toString(),null,null,0,null,false,null,null,null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "EasyMock.replay(taskActionClientFactory,taskActionClient,notifierFactory)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "createWorkerTaskManager['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "SegmentHandoffNotifierFactory notifierFactory = EasyMock.createNiceMock()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TaskConfig taskConfig = new TaskConfig(Files.createTempDir().toString(),null,null,0,null,false,null,null,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "return new WorkerTaskMonitor(jsonMapper,new SingleTaskBackgroundRunner(new TaskToolboxFactory(taskConfig,taskActionClientFactory,null,null,null,null,null,null,null,notifierFactory,null,null,null,new SegmentLoaderFactory(null,jsonMapper),jsonMapper,indexIO,null,null,null,indexMergerV9,null,null,null,null,new NoopTestTaskFileWriter()),taskConfig,new NoopServiceEmitter(),DUMMY_NODE,new ServerConfig()),taskConfig,cf,workerCuratorCoordinator,EasyMock.createNiceMock())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "final SegmentLoaderConfig loaderConfig = new SegmentLoaderConfig(){@Override public List<StorageLocationConfig> getLocations(){return Collections.emptyList()}}@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "createTaskMonitor['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "EasyMock.expect(taskActionClientFactory.create(EasyMock.anyObject())).andReturn(taskActionClient).anyTimes()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "createTaskMonitor['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "TaskActionClientFactory taskActionClientFactory = EasyMock.createNiceMock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "return new WorkerTaskManager(jsonMapper,new TestTaskRunner(new TaskToolboxFactory(taskConfig,taskActionClientFactory,null,null,null,null,null,null,null,notifierFactory,null,null,null,new SegmentLoaderFactory(null,jsonMapper),jsonMapper,indexIO,null,null,null,indexMergerV9,null,null,null,null,new NoopTestTaskFileWriter()),taskConfig,location),taskConfig,EasyMock.createNiceMock()){@Override protected void taskStarted(String taskId){}@Override protected void taskAnnouncementChanged(TaskAnnouncement announcement){}}@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "TaskActionClient taskActionClient = EasyMock.createNiceMock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->1 [style = bold, label=""];
1->8 [style = bold, label=""];
12->5 [style = bold, label=""];
4->6 [style = bold, label=""];
2->3 [style = bold, label=""];
7->13 [style = solid, label="notifierFactory"];
4->1 [style = solid, label="taskActionClient"];
11->12 [style = bold, label=""];
5->1 [style = solid, label="taskActionClientFactory"];
1->0 [style = bold, label=""];
3->0 [style = solid, label="taskConfig"];
5->8 [style = solid, label="taskActionClientFactory"];
12->13 [style = solid, label="taskConfig"];
3->5 [style = bold, label=""];
5->13 [style = solid, label="taskActionClientFactory"];
7->1 [style = solid, label="notifierFactory"];
5->0 [style = solid, label="taskActionClientFactory"];
3->12 [style = dashed, label="0"];
10->13 [style = bold, label=""];
7->8 [style = solid, label="notifierFactory"];
5->4 [style = bold, label=""];
3->8 [style = solid, label="taskConfig"];
9->3 [style = bold, label=""];
0->8 [style = dashed, label="0"];
6->7 [style = bold, label=""];
1->10 [style = bold, label=""];
7->0 [style = solid, label="notifierFactory"];
}
