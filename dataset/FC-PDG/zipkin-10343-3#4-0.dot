digraph {
9 [style = filled, label = "call.execute()@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "call.enqueue(assertFailOnError)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testFactory.maybeAdd(\"foo\",calls)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertThat(testFactory.values).containsExactly(\"foo\",\"bar\")@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testFactory.maybeAdd(\"bar\",calls)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "callFactory.maybeAdd(\"foo\",calls)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "testFactory.maybeAdd(\"bar\",calls)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertThat(calls).hasSize(2)@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "dedupesSameCalls['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "callFactory.maybeAdd(\"bar\",calls)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testFactory.maybeAdd(\"bar\",calls)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "callFactory.maybeAdd(\"bar\",calls)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "TestFactory testFactory = new TestFactory()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "testFactory.maybeAdd(\"foo\",calls)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "callFactory.maybeAdd(\"bar\",calls)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertThat(values).containsExactly(\"foo\",\"bar\")@@@9@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<Call<Void>> calls = new ArrayList<>()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "dedupesSameCalls['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "callFactory.maybeAdd(\"foo\",calls)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "call.execute()@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "enqueuesInOrder['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(calls).hasSize(2)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5->13 [style = dashed, label="0"];
9->20 [style = dashed, label="0"];
7->15 [style = solid, label="calls"];
15->13 [style = bold, label=""];
2->5 [style = solid, label="calls"];
3->17 [style = dashed, label="0"];
1->8 [style = bold, label=""];
9->0 [style = bold, label=""];
3->1 [style = bold, label=""];
7->12 [style = bold, label=""];
16->10 [style = bold, label=""];
8->15 [style = dashed, label="0"];
20->0 [style = bold, label=""];
12->17 [style = bold, label=""];
1->19 [style = dashed, label="0"];
0->11 [style = dashed, label="0"];
7->13 [style = solid, label="calls"];
4->2 [style = bold, label=""];
2->7 [style = solid, label="calls"];
10->7 [style = bold, label=""];
17->19 [style = bold, label=""];
7->3 [style = bold, label=""];
21->2 [style = bold, label=""];
7->17 [style = solid, label="calls"];
3->20 [style = bold, label=""];
5->6 [style = bold, label=""];
8->5 [style = bold, label=""];
2->8 [style = solid, label="calls"];
7->12 [style = dashed, label="0"];
7->12 [style = solid, label="calls"];
2->7 [style = bold, label=""];
7->19 [style = solid, label="calls"];
6->9 [style = bold, label=""];
19->15 [style = bold, label=""];
2->3 [style = solid, label="calls"];
14->11 [style = bold, label=""];
18->14 [style = bold, label=""];
2->1 [style = solid, label="calls"];
13->18 [style = bold, label=""];
}
