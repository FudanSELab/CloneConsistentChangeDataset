digraph {
18 [style = filled, label = "lifecycleManager = new SqlLifecycleManager(){@Override public void add(String sqlQueryId,SqlLifecycle lifecycle){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@abd922sqlQueryIdlifecycleif (lifecycleAddLatch != null) {lifecycleAddLatch.countDown()}}}@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "EasyMock.expect(req.getRemoteAddr()).andReturn(null).once()@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "setUp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).anyTimes()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "walker = CalciteTests.createMockWalker(conglomerate,temporaryFolder.newFolder(),scheduler)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EasyMock.replay(req)@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(authenticationResult).anyTimes()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "EasyMock.replay(req)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED,true)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "return req@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "AuthenticationResult authenticationResult@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).anyTimes()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "req = EasyMock.createStrictMock()@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "makeExpectedReq['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final ExprMacroTable macroTable = CalciteTests.createExprMacroTable()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final ServiceEmitter emitter = new NoopServiceEmitter()@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(authenticationResult).anyTimes()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes()@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).anyTimes()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "HttpServletRequest req = EasyMock.createStrictMock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "EasyMock.expect(req.getRemoteAddr()).andReturn(null).once()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final DruidSchemaCatalog rootSchema = CalciteTests.createMockRootSchema(conglomerate,walker,plannerConfig,CalciteTests.TEST_AUTHORIZER_MAPPER)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).anyTimes()@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "resource = new SqlResource(JSON_MAPPER,CalciteTests.TEST_AUTHORIZER_MAPPER,new SqlLifecycleFactory(plannerFactory,emitter,testRequestLogger,scheduler){@Override public SqlLifecycle factorize(){return new TestSqlLifecycle(plannerFactory,emitter,testRequestLogger,scheduler,System.currentTimeMillis(),System.nanoTime(),validateAndAuthorizeLatchSupplier,planLatchSupplier,executeLatchSupplier,sequenceMapFnSupplier)}},lifecycleManager)@@@52@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testRequestLogger = new TestRequestLogger()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "setUp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "executorService = MoreExecutors.listeningDecorator(Execs.multiThreaded(8,\"test_sql_resource_%s\"))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final QueryScheduler scheduler = new QueryScheduler(5,ManualQueryPrioritizationStrategy.INSTANCE,new HiLoQueryLaningStrategy(40),new ServerConfig()){@Override public Sequence<T> run(Query<?> query,Sequence<T> resultSequence){return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@abd83aquerynew LazySequence<T>(null)}}@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(authenticationResult).anyTimes()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final PlannerConfig plannerConfig = new PlannerConfig(){@Override public boolean shouldSerializeComplexValues(){return false}}@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final SchemaPlus rootSchema = CalciteTests.createMockRootSchema(conglomerate,walker,plannerConfig,CalciteTests.TEST_AUTHORIZER_MAPPER)@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED,true)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final PlannerFactory plannerFactory = new PlannerFactory(rootSchema,CalciteTests.createMockQueryLifecycleFactory(walker,conglomerate),operatorTable,macroTable,plannerConfig,CalciteTests.TEST_AUTHORIZER_MAPPER,CalciteTests.getJsonMapper(),CalciteTests.DRUID_SCHEMA_NAME)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24->10 [style = bold, label=""];
35->31 [style = bold, label=""];
34->29 [style = bold, label=""];
12->4 [style = solid, label="emitter"];
17->13 [style = solid, label="walker"];
15->13 [style = bold, label=""];
3->26 [style = dashed, label="0"];
25->34 [style = bold, label=""];
29->30 [style = bold, label=""];
7->10 [style = bold, label=""];
24->13 [style = solid, label="rootSchema"];
20->13 [style = solid, label="plannerConfig"];
15->4 [style = solid, label="testRequestLogger"];
21->8 [style = bold, label=""];
1->3 [style = bold, label=""];
18->12 [style = bold, label=""];
36->28 [style = bold, label=""];
0->11 [style = bold, label=""];
31->36 [style = bold, label=""];
9->17 [style = bold, label=""];
2->13 [style = solid, label="macroTable"];
35->29 [style = solid, label="req"];
16->19 [style = bold, label=""];
16->11 [style = solid, label="req"];
3->22 [style = bold, label=""];
27->37 [style = dotted, label="true"];
22->5 [style = bold, label=""];
32->26 [style = bold, label=""];
21->36 [style = dashed, label="0"];
27->35 [style = bold, label=""];
11->15 [style = bold, label=""];
18->4 [style = solid, label="lifecycleManager"];
28->32 [style = bold, label=""];
2->16 [style = bold, label=""];
8->1 [style = bold, label=""];
17->7 [style = solid, label="walker"];
10->13 [style = solid, label="operatorTable"];
20->7 [style = solid, label="plannerConfig"];
5->0 [style = bold, label=""];
12->4 [style = bold, label=""];
33->25 [style = bold, label=""];
6->17 [style = solid, label="scheduler"];
13->4 [style = solid, label="plannerFactory"];
7->24 [style = dashed, label="0"];
35->30 [style = solid, label="req"];
23->6 [style = bold, label=""];
17->24 [style = solid, label="walker"];
0->34 [style = dashed, label="0"];
10->2 [style = bold, label=""];
20->24 [style = solid, label="plannerConfig"];
7->13 [style = solid, label="rootSchema"];
20->7 [style = bold, label=""];
6->9 [style = bold, label=""];
20->24 [style = bold, label=""];
26->33 [style = bold, label=""];
14->6 [style = bold, label=""];
13->18 [style = bold, label=""];
6->4 [style = solid, label="scheduler"];
17->20 [style = bold, label=""];
19->21 [style = bold, label=""];
}
