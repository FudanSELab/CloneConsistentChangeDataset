digraph {
22 [style = filled, label = "assertEquals(2,testHarness.numKeyedStateEntries())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testHarness.open()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Trigger<Integer,TimeWindow> mockTrigger = mockTrigger()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(0,testHarness.numKeyedStateEntries())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "InternalWindowFunction<Iterable<Integer>,Void,Integer,TimeWindow> mockWindowFunction = mockWindowFunction()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testOnElementFire['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "verify(mockTrigger,never()).clear(anyTimeWindow(),anyTriggerContext())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "WindowAssigner<Integer,TimeWindow> mockAssigner = mockTimeWindowAssigner()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "verify(mockWindowFunction,times(1)).apply(eq(0),eq(new TimeWindow(2,4)),intIterable(0),WindowOperatorContractTest.anyCollector())@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testOnElementFire['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "verify(mockWindowFunction,times(1)).process(eq(0),eq(new TimeWindow(2,4)),anyInternalWindowContext(),intIterable(0),WindowOperatorContractTest.anyCollector())@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Integer,Void> testHarness = createWindowOperator(mockAssigner,mockTrigger,0L,mockWindowFunction)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(0,testHarness.getOutput().size())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "verify(mockWindowFunction,times(1)).apply(eq(0),eq(new TimeWindow(0,2)),intIterable(0),WindowOperatorContractTest.anyCollector())@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "verify(mockWindowFunction,times(2)).apply(eq(0),anyTimeWindow(),anyIntIterable(),WindowOperatorContractTest.anyCollector())@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "verify(mockWindowFunction,times(1)).process(eq(0),eq(new TimeWindow(0,2)),anyInternalWindowContext(),intIterable(0),WindowOperatorContractTest.anyCollector())@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "verify(mockWindowFunction,times(2)).process(eq(0),anyTimeWindow(),anyInternalWindowContext(),anyIntIterable(),WindowOperatorContractTest.anyCollector())@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Arrays.asList(new TimeWindow(2,4),new TimeWindow(0,2)))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testHarness.processElement(new StreamRecord<>(0,0L))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testOnElementFireAndPurge['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(4,testHarness.numEventTimeTimers())@@@27@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(4,testHarness.numKeyedStateEntries())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "doAnswer(new Answer<TriggerResult>(){@Override public TriggerResult answer(InvocationOnMock invocation){TimeWindow window = (TimeWindow)invocation.getArguments()(2(Trigger.TriggerContext context = (Trigger.TriggerContext)invocation.getArguments()(3(context.registerEventTimeTimer(window.getEnd())context.getPartitionedState(valueStateDescriptor).update(\"hello\")return TriggerResult.FIRE_AND_PURGE}}).when(mockTrigger).onElement(Matchers.anyObject(),anyLong(),anyTimeWindow(),anyTriggerContext())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19->18 [style = bold, label=""];
4->8 [style = solid, label="mockAssigner"];
15->7 [style = bold, label=""];
7->12 [style = bold, label=""];
6->22 [style = bold, label=""];
2->8 [style = solid, label="mockWindowFunction"];
8->3 [style = bold, label=""];
6->0 [style = bold, label=""];
12->16 [style = bold, label=""];
20->6 [style = bold, label=""];
16->18 [style = dashed, label="0"];
1->13 [style = bold, label=""];
0->22 [style = dashed, label="0"];
11->2 [style = bold, label=""];
5->20 [style = dashed, label="0"];
3->9 [style = bold, label=""];
18->20 [style = bold, label=""];
0->10 [style = bold, label=""];
5->6 [style = bold, label=""];
12->19 [style = dashed, label="0"];
11->8 [style = solid, label="mockTrigger"];
22->10 [style = bold, label=""];
16->5 [style = bold, label=""];
13->15 [style = bold, label=""];
21->4 [style = bold, label=""];
9->1 [style = bold, label=""];
4->11 [style = bold, label=""];
7->19 [style = bold, label=""];
17->4 [style = bold, label=""];
2->8 [style = bold, label=""];
14->4 [style = bold, label=""];
}
