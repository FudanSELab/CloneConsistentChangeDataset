digraph {
11 [style = filled, label = "assertThat(new MySQLVarcharBinlogProtocolValue().read(columnDef,payload),is(expected))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "columnDef.setColumnMeta(MySQLColumnType.MYSQL_TYPE_STRING.getValue() << 8)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertThat(new MySQLStringBinlogProtocolValue().read(columnDef,payload),is(expected))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "when(payload.getByteBuf()).thenReturn(byteBuf)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "when(byteBuf.readUnsignedByte()).thenReturn((short)expected.length())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "String expected = \"test_value\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "columnDef.setColumnMeta(MySQLBinaryColumnType.MYSQL_TYPE_STRING.getValue() << 8)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertReadStringValue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertReadVarcharValueWithMeta1['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "when(payload.readStringFix(expected.length())).thenReturn(expected)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "columnDef.setColumnMeta(10)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertReadStringValue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0->11 [style = solid, label="expected"];
5->8 [style = dashed, label="0"];
4->3 [style = bold, label=""];
6->4 [style = bold, label=""];
5->2 [style = bold, label=""];
0->10 [style = bold, label=""];
7->0 [style = bold, label=""];
10->2 [style = bold, label=""];
1->0 [style = bold, label=""];
9->0 [style = bold, label=""];
8->2 [style = bold, label=""];
4->11 [style = bold, label=""];
5->10 [style = dashed, label="0"];
2->6 [style = bold, label=""];
0->4 [style = solid, label="expected"];
0->3 [style = solid, label="expected"];
3->11 [style = dashed, label="0"];
0->5 [style = bold, label=""];
0->8 [style = bold, label=""];
}
