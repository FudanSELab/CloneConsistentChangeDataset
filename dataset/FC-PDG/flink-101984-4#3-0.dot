digraph {
43 [style = filled, label = "assertEquals(i,row.getDouble(0),0)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ParquetColumnarRowInputFormat format = ParquetColumnarRowInputFormat.createPartitionedFormat(new Configuration(),RowType.of(fieldTypes,IntStream.range(0,28).mapToObj(null).toArray(null)),partitionKeys,\"my_default_value\",new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c07d59,PartitionValueConverter.DEFAULT,500,false,true)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "RowType producedType = new RowType(Arrays.stream(projected).mapToObj(null).collect(Collectors.toList()))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "ColumnarRowData row = reader.nextRecord()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "List<String> partitionKeys@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "innerTestPartitionValues['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "int(( projected = new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c07e00@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "Path testPath@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(DecimalData.fromBigDecimal(new BigDecimal(26),20,0),row.getDecimal(14,20,0))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "int i = 0@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "reader.close()@@@39@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "j < 16@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "AtomicInteger cnt = new AtomicInteger(0)@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ParquetColumnarRowInputFormat format = ParquetColumnarRowInputFormat.createPartitionedFormat(new Configuration(),producedType,partitionKeys,\"my_default_value\",PartitionValueConverter.DEFAULT,500,false,true)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "ParquetColumnarRowSplitReader reader = ParquetSplitReaderUtil.genPartColumnarRowReader(false,true,new Configuration(),IntStream.range(0,28).mapToObj(null).toArray(null),Arrays.stream(fieldTypes).map(null).toArray(null),partSpec,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c07ecf,rowGroupSize,new Path(testPath.getPath()),0,Long.MAX_VALUE)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertEquals(DecimalData.fromBigDecimal(new BigDecimal(24),5,0),row.getDecimal(12,5,0))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "int j = 3@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(12,row.getLong(7))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertEquals(DecimalData.fromBigDecimal(new BigDecimal(25),15,0),row.getDecimal(13,15,0))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "AtomicInteger cnt = new AtomicInteger(0)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "List<String> partitionKeys@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "forEachRemaining(format.createReader(EMPTY_CONF,testPath,0,Long.MAX_VALUE),null)@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "assertEquals(LocalDateTime.of(1999,1,1,1,1),row.getTimestamp(11,9).toLocalDateTime())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals((byte)i,row.getByte(1))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "assertEquals(i,row.getInt(2))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(11,row.getInt(6))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "innerTestPartitionValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Path testPath@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "assertTrue(row.getBoolean(3))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "nullPartValue@@@15@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "LogicalType(( fieldTypes = new LogicalType((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c07e59@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "innerTestPartitionValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "boolean nullPartValue@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "!reader.reachedEnd()@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(13,row.getFloat(8),0)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(SqlDateTimeUtils.dateToInternal(Date.valueOf(\"2020-11-23\")),row.getInt(10))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "RowType rowType = RowType.of(fieldTypes,IntStream.range(0,28).mapToObj(null).toArray(null))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertTrue(row.isNullAt(j))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(6.6,row.getDouble(9),0)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(9,row.getByte(4))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Map<String,Object> partSpec@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "boolean nullPartValue@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(10,row.getShort(5))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "assertEquals(\"f27\",row.getString(15).toString())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "i++@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "boolean nullPartValue@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "j++@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "forEachRemaining(format.createReader(EMPTY_CONF,testPath,0,Long.MAX_VALUE),null)@@@10@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17->25 [style = bold, label=""];
8->10 [style = bold, label=""];
21->42 [style = bold, label=""];
24->18 [style = solid, label="partSpec"];
25->34 [style = bold, label=""];
4->1 [style = dotted, label="true"];
2->6 [style = bold, label=""];
2->8 [style = solid, label="fieldTypes"];
4->7 [style = dotted, label="true"];
17->45 [style = bold, label=""];
38->31 [style = bold, label=""];
40->38 [style = bold, label=""];
12->9 [style = bold, label=""];
17->33 [style = dotted, label="false"];
36->39 [style = dotted, label="true"];
43->35 [style = bold, label=""];
36->2 [style = bold, label=""];
17->25 [style = dotted, label="false"];
14->7 [style = dotted, label="true"];
36->24 [style = dotted, label="true"];
32->20 [style = bold, label=""];
30->35 [style = solid, label="i"];
10->11 [style = bold, label=""];
0->3 [style = bold, label=""];
11->16 [style = bold, label=""];
21->42 [style = dotted, label="true"];
22->33 [style = bold, label=""];
6->8 [style = dashed, label="0"];
2->6 [style = solid, label="fieldTypes"];
47->35 [style = solid, label="i"];
21->41 [style = bold, label=""];
2->18 [style = bold, label=""];
21->17 [style = dotted, label="true"];
45->20 [style = solid, label="j"];
4->2 [style = bold, label=""];
17->34 [style = dotted, label="false"];
33->23 [style = bold, label=""];
6->18 [style = dashed, label="0"];
26->27 [style = bold, label=""];
7->3 [style = solid, label="testPath"];
30->43 [style = solid, label="i"];
21->30 [style = dotted, label="true"];
11->16 [style = solid, label="producedType"];
17->38 [style = dotted, label="false"];
29->40 [style = bold, label=""];
27->29 [style = bold, label=""];
7->39 [style = dashed, label="0"];
17->23 [style = dotted, label="false"];
20->19 [style = bold, label=""];
21->35 [style = dotted, label="true"];
17->44 [style = dotted, label="false"];
17->28 [style = dotted, label="false"];
19->20 [style = solid, label="j"];
44->30 [style = bold, label=""];
19->32 [style = solid, label="j"];
4->5 [style = dotted, label="true"];
17->29 [style = dotted, label="false"];
47->43 [style = solid, label="i"];
18->47 [style = bold, label=""];
21->46 [style = dotted, label="true"];
32->20 [style = dotted, label="true"];
45->32 [style = bold, label=""];
13->9 [style = solid, label="testPath"];
17->45 [style = dotted, label="true"];
47->46 [style = solid, label="i"];
5->6 [style = solid, label="partitionKeys"];
32->30 [style = bold, label=""];
36->37 [style = dotted, label="true"];
34->28 [style = bold, label=""];
17->22 [style = dotted, label="false"];
30->21 [style = bold, label=""];
19->32 [style = bold, label=""];
31->44 [style = bold, label=""];
47->30 [style = solid, label="i"];
14->2 [style = bold, label=""];
47->21 [style = bold, label=""];
28->22 [style = bold, label=""];
21->43 [style = dotted, label="true"];
30->46 [style = solid, label="i"];
42->43 [style = bold, label=""];
17->31 [style = dotted, label="false"];
23->26 [style = bold, label=""];
17->27 [style = dotted, label="false"];
6->0 [style = bold, label=""];
17->32 [style = dotted, label="true"];
14->13 [style = dotted, label="true"];
17->40 [style = dotted, label="false"];
14->15 [style = dotted, label="true"];
15->16 [style = solid, label="partitionKeys"];
45->32 [style = solid, label="j"];
45->19 [style = solid, label="j"];
17->26 [style = dotted, label="false"];
46->17 [style = bold, label=""];
16->12 [style = bold, label=""];
32->19 [style = dotted, label="true"];
2->8 [style = bold, label=""];
35->46 [style = bold, label=""];
}
