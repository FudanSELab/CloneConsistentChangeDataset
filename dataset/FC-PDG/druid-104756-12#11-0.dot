digraph {
0 [style = filled, label = "final Set<DataSegment> pushedSegments = generateAndPushSegments(toolbox,taskClient,inputSource,tmpDir)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "allSegments.addAll(pushedSegments)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "return TaskStatus.success(getId())@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "runTask['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final Set<DataSegment> oldSegments = timeline.findFullyOvershadowed().stream().flatMap(null).map(null).collect(Collectors.toSet())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "final TaskToolbox toolbox@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final Set<DataSegment> oldSegments = FluentIterable.from(timeline.findFullyOvershadowed()).transformAndConcat(null).transform(null).toSet()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "return TaskStatus.success(getId())@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "missingIntervalsInOverwriteMode@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final ParallelIndexSupervisorTaskClient taskClient = taskClientFactory.build(new ClientBasedTaskInfoProvider(indexingServiceClient),getId(),1,ingestionSchema.getTuningConfig().getChatHandlerTimeout(),ingestionSchema.getTuningConfig().getChatHandlerNumRetries())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "TaskToolbox toolbox@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "FileUtils.forceMkdir(tmpDir)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final Set<DataSegment> allSegments = new HashSet<>(getTaskLockHelper().getLockedExistingSegments())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final VersionedIntervalTimeline<String,DataSegment> timeline = VersionedIntervalTimeline.forSegments(allSegments)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "runTask['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "taskClient.report(supervisorTaskId,new PushedSegmentsReport(getId(),oldSegments,pushedSegments))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "taskClient.report(supervisorTaskId,createGeneratedPartitionsReport(toolbox,segments))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final File tmpDir = toolbox.getIndexingTmpDir()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "runTask['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "LOG.warn(\"Intervals are missing in granularitySpec while this task is potentially overwriting existing segments. \" + \"Forced to use timeChunk lock.\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final List<DataSegment> segments = generateSegments(toolbox,taskClient,inputSource,tmpDir)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final InputSource inputSource = ingestionSchema.getIOConfig().getNonNullInputSource(ingestionSchema.getDataSchema().getParser())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
16->3 [style = bold, label=""];
6->3 [style = bold, label=""];
1->0 [style = solid, label="tmpDir"];
14->0 [style = solid, label="inputSource"];
16->3 [style = solid, label="oldSegments"];
7->2 [style = solid, label="allSegments"];
17->5 [style = solid, label="toolbox"];
9->11 [style = bold, label=""];
11->14 [style = bold, label=""];
7->12 [style = bold, label=""];
21->19 [style = bold, label=""];
2->6 [style = bold, label=""];
20->17 [style = dotted, label="true"];
9->11 [style = dotted, label="true"];
13->17 [style = dashed, label="0"];
0->1 [style = dashed, label="0"];
21->19 [style = solid, label="tmpDir"];
14->1 [style = solid, label="taskClient"];
1->5 [style = solid, label="segments"];
21->1 [style = solid, label="tmpDir"];
14->1 [style = bold, label=""];
4->0 [style = bold, label=""];
15->13 [style = dotted, label="true"];
0->7 [style = bold, label=""];
0->12 [style = solid, label="pushedSegments"];
20->18 [style = bold, label=""];
12->2 [style = bold, label=""];
6->3 [style = solid, label="oldSegments"];
6->16 [style = dashed, label="0"];
19->14 [style = bold, label=""];
10->13 [style = dotted, label="true"];
15->9 [style = bold, label=""];
3->8 [style = bold, label=""];
5->4 [style = bold, label=""];
1->5 [style = solid, label="tmpDir"];
9->14 [style = bold, label=""];
17->1 [style = solid, label="toolbox"];
10->9 [style = bold, label=""];
18->21 [style = bold, label=""];
13->0 [style = solid, label="toolbox"];
4->0 [style = solid, label="taskClient"];
0->3 [style = solid, label="pushedSegments"];
18->1 [style = solid, label="inputSource"];
2->16 [style = bold, label=""];
}
