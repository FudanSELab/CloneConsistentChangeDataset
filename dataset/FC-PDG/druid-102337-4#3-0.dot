digraph {
0 [style = filled, label = "replayAll()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Thread.sleep(100)@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "expect(getRecordsResult0.getRecords()).andReturn(shard0Records).once()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "expect(kinesis.getRecords(generateGetRecordsReq(shard0Iterator,recordsPerFetch))).andReturn(getRecordsResult0).anyTimes()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "recordSupplier.start()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EasyMock.expect(getShardIteratorResult0.getShardIterator()).andReturn(null).once()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "EasyMock.expect(kinesis.getShardIterator(EasyMock.anyObject(),EasyMock.eq(SHARD_ID1),EasyMock.anyString(),EasyMock.anyString())).andReturn(getShardIteratorResult1).anyTimes()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "Assert.assertEquals(partitions,recordSupplier.getAssignment())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "expect(getRecordsResult1.getNextShardIterator()).andReturn(null).anyTimes()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "testPoll['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,recordsPerFetch,0,2,false,100,5000,5000,60000,100)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "recordSupplier.bufferSize() < 12@@@20@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Assert.assertTrue(polledRecords.containsAll(allRecords))@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "expect(kinesis.getShardIterator(anyObject(),eq(shardId0),anyString(),anyString())).andReturn(getShardIteratorResult0).anyTimes()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "verifyAll()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "recordSupplier.start()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "expect(getShardIteratorResult1.getShardIterator()).andReturn(null).once()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "List<OrderedPartitionableRecord<String,String>> polledRecords = cleanRecords(recordSupplier.poll(poll_timeout_millis))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "i < 10 && recordSupplier.bufferSize() < 2@@@17@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "EasyMock.expect(kinesis.getShardIterator(EasyMock.anyObject(),EasyMock.eq(SHARD_ID0),EasyMock.anyString(),EasyMock.anyString())).andReturn(getShardIteratorResult0).anyTimes()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "expect(getShardIteratorResult0.getShardIterator()).andReturn(shard0Iterator).anyTimes()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "expect(getRecordsResult1.getRecords()).andReturn(shard1Records).once()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "recordSupplier.assign(partitions)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "StreamPartition<String> shard0 = StreamPartition.of(stream,SHARD_ID0)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "Assert.assertEquals(Collections.emptyList(),cleanRecords(recordSupplier.poll(POLL_TIMEOUT_MILLIS)))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "expect(getRecordsResult0.getNextShardIterator()).andReturn(null).anyTimes()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "expect(kinesis.getRecords(generateGetRecordsReq(shard1Iterator,recordsPerFetch))).andReturn(getRecordsResult1).anyTimes()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "expect(kinesis.getShardIterator(anyObject(),eq(shardId1),anyString(),anyString())).andReturn(getShardIteratorResult1).anyTimes()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "int i = 0@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "StreamPartition<String> shard0 = StreamPartition.of(stream,shardId0)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "StreamPartition<String> shard1 = StreamPartition.of(stream,SHARD_ID1)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "expect(getShardIteratorResult0.getShardIterator()).andReturn(null).once()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "EasyMock.expect(getShardIteratorResult1.getShardIterator()).andReturn(null).once()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "expect(getShardIteratorResult1.getShardIterator()).andReturn(shard1Iterator).anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "verifyAll()@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "recordSupplier.seekToEarliest(partitions)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testSeekToLatest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Set<StreamPartition<String>> partitions = ImmutableSet.of(shard0,shard1)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "recordsPerFetch = 100@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Set<StreamPartition<String>> partitions = ImmutableSet.of(StreamPartition.of(stream,shardId0),StreamPartition.of(stream,shardId1))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "StreamPartition<String> shard1 = StreamPartition.of(stream,shardId1)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "testSeekToLatest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "replayAll()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "recordSupplier.assign(partitions)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,recordsPerFetch,0,2,false,100,5000,5000,60000,100)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
11->16 [style = bold, label=""];
27->13 [style = bold, label=""];
5->29 [style = bold, label=""];
44->42 [style = bold, label=""];
6->43 [style = bold, label=""];
16->13 [style = bold, label=""];
15->14 [style = solid, label="i"];
9->14 [style = solid, label="i"];
22->2 [style = bold, label=""];
26->7 [style = bold, label=""];
41->42 [style = solid, label="partitions"];
15->14 [style = bold, label=""];
14->12 [style = dotted, label="true"];
21->27 [style = bold, label=""];
7->10 [style = bold, label=""];
16->27 [style = dashed, label="0"];
25->23 [style = bold, label=""];
6->20 [style = dashed, label="0"];
6->18 [style = bold, label=""];
11->13 [style = solid, label="shard0"];
36->15 [style = bold, label=""];
12->15 [style = bold, label=""];
19->29 [style = dashed, label="0"];
7->8 [style = solid, label="recordsPerFetch"];
0->15 [style = dashed, label="0"];
13->0 [style = solid, label="partitions"];
43->6 [style = dotted, label="true"];
5->25 [style = dashed, label="0"];
38->31 [style = bold, label=""];
30->37 [style = bold, label=""];
1->32 [style = dashed, label="0"];
32->30 [style = bold, label=""];
27->13 [style = solid, label="shard1"];
21->13 [style = solid, label="shard0"];
41->36 [style = solid, label="partitions"];
42->40 [style = bold, label=""];
34->0 [style = bold, label=""];
4->7 [style = bold, label=""];
43->6 [style = bold, label=""];
9->15 [style = solid, label="i"];
43->28 [style = bold, label=""];
41->15 [style = solid, label="partitions"];
1->22 [style = dashed, label="0"];
8->17 [style = bold, label=""];
5->19 [style = bold, label=""];
3->9 [style = bold, label=""];
20->18 [style = bold, label=""];
19->1 [style = bold, label=""];
7->24 [style = bold, label=""];
0->41 [style = bold, label=""];
14->15 [style = dotted, label="true"];
6->28 [style = dashed, label="0"];
17->0 [style = bold, label=""];
23->22 [style = bold, label=""];
10->5 [style = bold, label=""];
19->23 [style = dashed, label="0"];
2->21 [style = bold, label=""];
24->25 [style = bold, label=""];
29->32 [style = bold, label=""];
37->38 [style = bold, label=""];
14->12 [style = bold, label=""];
31->33 [style = bold, label=""];
16->13 [style = solid, label="shard1"];
7->39 [style = solid, label="recordsPerFetch"];
9->14 [style = bold, label=""];
28->44 [style = bold, label=""];
11->41 [style = dashed, label="0"];
13->17 [style = solid, label="partitions"];
1->2 [style = bold, label=""];
15->12 [style = bold, label=""];
12->43 [style = bold, label=""];
13->8 [style = bold, label=""];
41->39 [style = bold, label=""];
33->34 [style = bold, label=""];
39->36 [style = bold, label=""];
35->7 [style = bold, label=""];
2->11 [style = bold, label=""];
14->6 [style = bold, label=""];
10->24 [style = dashed, label="0"];
14->20 [style = bold, label=""];
11->21 [style = dashed, label="0"];
}
