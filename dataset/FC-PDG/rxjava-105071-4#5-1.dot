digraph {
1 [style = filled, label = "ts.assertError()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "onErrorThrows['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "ts.assertNoValues()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "List<Throwable> exceptions = ex.getExceptions()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "onErrorThrows['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "to.assertError()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(2,exceptions.size())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "to.assertNoValues()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "TestObserverEx<Object> to = new TestObserverEx<Object>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "to.assertNotComplete()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "TestSubscriberEx<Object> ts = new TestSubscriberEx<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "onErrorThrows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Observable.error(new TestException()).doOnError(new Consumer<Throwable>(){@Override public void accept(Throwable e){throw new TestException()}}).subscribe(to)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertTrue(exceptions.get(0) instanceof TestException)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TestSubscriberEx<Object> ts = new TestSubscriberEx<Object>()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(exceptions.get(1) instanceof TestException)@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "CompositeException ex = (CompositeException)to.errors().get(0)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "ts.assertNotComplete()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Flowable.error(new TestException()).doOnError(new Consumer<Throwable>(){@Override public void accept(Throwable e){throw new TestException()}}).subscribe(ts)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "CompositeException ex = (CompositeException)ts.errors().get(0)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->15 [style = dashed, label="0"];
4->9 [style = bold, label=""];
7->1 [style = bold, label=""];
1->14 [style = dashed, label="0"];
0->6 [style = bold, label=""];
7->17 [style = dashed, label="0"];
8->3 [style = bold, label=""];
0->16 [style = dashed, label="0"];
11->12 [style = bold, label=""];
0->12 [style = dashed, label="0"];
0->6 [style = solid, label="ts"];
16->19 [style = bold, label=""];
12->6 [style = bold, label=""];
10->7 [style = bold, label=""];
3->4 [style = bold, label=""];
15->17 [style = bold, label=""];
5->0 [style = bold, label=""];
17->14 [style = bold, label=""];
2->13 [style = dashed, label="0"];
6->10 [style = bold, label=""];
6->19 [style = dashed, label="0"];
1->2 [style = bold, label=""];
14->13 [style = bold, label=""];
13->8 [style = bold, label=""];
19->15 [style = bold, label=""];
12->6 [style = solid, label="ts"];
16->19 [style = solid, label="to"];
2->8 [style = bold, label=""];
18->16 [style = bold, label=""];
}
