digraph {
1 [style = filled, label = "createBuilder.withProtection().withMode(CreateMode.EPHEMERAL_SEQUENTIAL).inBackground(callback).forPath(\"/\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final BlockingQueue<String> queue = Queues.newArrayBlockingQueue(1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "BackgroundCallback callback = new BackgroundCallback(){@Override public void processResult(CuratorFramework client,CuratorEvent event){queue.put(event.getPath())}}@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testMissedResponseOnESCreate['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testMissedResponseOnBackgroundESCreate['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertFalse(createBuilder.failNextCreateForTesting)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "String ourPath = createBuilder.withProtection().withMode(CreateMode.EPHEMERAL_SEQUENTIAL).forPath(\"/\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "createBuilder.failNextCreateForTesting = true@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertFalse(createBuilder.failNextCreateForTesting)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "CreateBuilderImpl createBuilder = (CreateBuilderImpl)client.create()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertTrue(ourPath.startsWith(ZKPaths.makePath(\"/\",ProtectedUtils.PROTECTED_PREFIX)))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertTrue(ourPath.startsWith(ZKPaths.makePath(\"/\",ProtectedUtils.PROTECTED_PREFIX)))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Assert.assertTrue(ourPath.startsWith(ZKPaths.makePath(\"/\",ProtectedUtils.PROTECTED_PREFIX)))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testMissedResponseOnBackgroundESCreate['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertFalse(createBuilder.failNextCreateForTesting)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "String ourPath = queue.poll(timing.forWaiting().seconds(),TimeUnit.SECONDS)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),timing.session(),timing.connection(),new RetryOneTime(1))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "client.start()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->3 [style = bold, label=""];
5->14 [style = dashed, label="0"];
9->0 [style = bold, label=""];
3->1 [style = bold, label=""];
0->6 [style = bold, label=""];
11->12 [style = dashed, label="0"];
2->4 [style = bold, label=""];
17->19 [style = bold, label=""];
14->7 [style = bold, label=""];
19->16 [style = bold, label=""];
6->2 [style = bold, label=""];
9->16 [style = solid, label="client"];
9->7 [style = solid, label="client"];
11->5 [style = bold, label=""];
15->17 [style = bold, label=""];
10->12 [style = bold, label=""];
2->5 [style = solid, label="failNextCreateForTesting"];
2->19 [style = solid, label="failNextCreateForTesting"];
2->15 [style = bold, label=""];
12->14 [style = bold, label=""];
18->9 [style = bold, label=""];
8->9 [style = bold, label=""];
5->7 [style = bold, label=""];
13->9 [style = bold, label=""];
1->10 [style = bold, label=""];
2->14 [style = solid, label="failNextCreateForTesting"];
10->11 [style = bold, label=""];
}
