digraph {
1 [style = filled, label = "t.consumes(ASet.of(MediaType.of(\"text/foo\")))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "t.addConsumes(ASet.of())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "t.consumes((Collection<MediaType>)null)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertOptional(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertObject(t.consumes()).isNull()@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "a06_consumes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "t.consumes(ASet.of())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertObject(t.consumes()).isType().asJson().is(\"((\")@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertOptional(t.consumes()).isType().asJson().is(\"((\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertObject(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Operation t = new Operation()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertOptional(t.consumes()).isNull()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "a06_consumes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "a06_consumes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertObject(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@15@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertOptional(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertObject(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "t.addConsumes(null)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Swagger t = new Swagger()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "t.addConsumes(ASet.of(MediaType.of(\"text/foo\")))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertOptional(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertOptional(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertObject(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->10 [style = bold, label=""];
4->9 [style = bold, label=""];
16->13 [style = bold, label=""];
2->19 [style = bold, label=""];
1->8 [style = bold, label=""];
20->9 [style = bold, label=""];
7->12 [style = bold, label=""];
0->19 [style = dashed, label="0"];
12->11 [style = bold, label=""];
1->18 [style = bold, label=""];
9->22 [style = dashed, label="0"];
15->5 [style = bold, label=""];
11->15 [style = bold, label=""];
8->7 [style = bold, label=""];
7->14 [style = bold, label=""];
5->16 [style = bold, label=""];
13->17 [style = bold, label=""];
3->5 [style = bold, label=""];
2->0 [style = bold, label=""];
6->16 [style = dashed, label="0"];
12->14 [style = dashed, label="0"];
5->6 [style = bold, label=""];
17->2 [style = bold, label=""];
11->3 [style = bold, label=""];
21->22 [style = bold, label=""];
6->13 [style = bold, label=""];
10->17 [style = dashed, label="0"];
3->15 [style = dashed, label="0"];
8->18 [style = dashed, label="0"];
10->2 [style = bold, label=""];
22->1 [style = bold, label=""];
9->1 [style = bold, label=""];
18->7 [style = bold, label=""];
14->11 [style = bold, label=""];
}
