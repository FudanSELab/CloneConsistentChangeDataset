digraph {
7 [style = filled, label = "assertThrows(\"Value not present\",,null)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertValuePredicateNoMatch['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertValuePredicateNoMatch['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Observable.just(1).subscribe(to)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertValuePredicateMatch['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "thrown.expect()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "TestObserver<Integer> to = new TestObserver<>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "to.assertValue(new Predicate<Integer>(){@Override public boolean test(final Integer o){return o == 1}})@@@5@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "thrown.expectMessage(\"Value not present\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "TestObserverEx<Integer> to = new TestObserverEx<>()@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->3 [style = bold, label=""];
5->1 [style = bold, label=""];
1->8 [style = dashed, label="0"];
2->0 [style = bold, label=""];
3->2 [style = bold, label=""];
6->7 [style = bold, label=""];
1->3 [style = solid, label="to"];
9->8 [style = bold, label=""];
0->4 [style = bold, label=""];
3->4 [style = bold, label=""];
8->3 [style = solid, label="to"];
8->3 [style = bold, label=""];
}
