digraph {
0 [style = filled, label = "assertThat(requests,notNullValue())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest = new TransportReplicationAction.ConcreteShardRequest<>(request,primaryShard.allocationId().getId(),primaryTerm)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(\"primary request was not delegated to relocation target\",requests.get(0).action,equalTo(\"internal:testAction2(p(\"))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertFalse(request.isRetrySet.get())@@@48@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "final long primaryTerm = state.metadata().index(index).primaryTerm(shardId.id())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "isRelocated.set(true)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "new AsyncPrimaryAction(primaryRequest,listener,task)new TestAction(Settings.EMPTY,\"internal:testAction2\",transportService,clusterService,shardStateAction,threadPool){@Override protected void shardOperationOnPrimary(Request shardRequest,IndexShard primary,ActionListener<PrimaryResult<Request,TestResponse>> listener){assertPhase(task,\"primary\")assertFalse(executed.getAndSet(true))super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13e67d8shardRequestprimarylistener}}.run()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "final ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ClusterState state = stateWithActivePrimary(index,true,randomInt(5))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "setState(clusterService,state)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "@SuppressWarnings(\"unchecked\") final TransportReplicationAction.ConcreteShardRequest<Request> concreteShardRequest = (TransportReplicationAction.ConcreteShardRequest<Request>)requests.get(0).request@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "final List<CapturingTransport.CapturedRequest> requests = transport.capturedRequestsByTargetNode().get(primaryShard.relocatingNodeId())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertPhase(task,\"finished\")@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "transport.handleResponse(requests.get(0).requestId,new TestResponse())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertFalse(request.isRetrySet.get())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "listener.actionGet()@@@28@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "new AsyncPrimaryAction(primaryRequest,listener,task)new TestAction(Settings.EMPTY,\"internal:testAction2\",transportService,clusterService,shardStateAction,threadPool){@Override protected void shardOperationOnPrimary(Request shardRequest,IndexShard primary,ActionListener<PrimaryResult<Request,TestResponse>> listener){assertPhase(task,\"primary\")assertFalse(executed.getAndSet(true))super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13e6697shardRequestprimarylistener}}.run()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertFalse(request.isRetrySet.get())@@@32@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ReplicationTask task = maybeTask()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "listener.get()@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertFalse(executed.get())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(requests.size(),equalTo(1))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertThat(\"primary term not properly set on primary delegation\",concreteShardRequest.getPrimaryTerm(),equalTo(primaryTerm))@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertTrue(listener.isDone())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Request request = new Request(shardId).timeout(\"1ms\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertThat(executed.get(),equalTo(true))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "PlainActionFuture<TestResponse> listener = new PlainActionFuture<>()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(listener.isDone())@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertTrue(listener.isDone())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "setState(clusterService,state)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final TransportReplicationAction.ConcreteShardRequest<Request> concreteShardRequest = (TransportReplicationAction.ConcreteShardRequest<Request>)requests.get(0).request@@@41@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest = new TransportReplicationAction.ConcreteShardRequest<>(request,primaryShard.allocationId().getRelocationId(),primaryTerm)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertPhase(task,\"primary_delegation\")@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertIndexShardCounter(0)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertPhase(task,\"finished\")@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "executeOnPrimary = false@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Request request = new Request(shardId).timeout(\"1ms\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final ShardId shardId = new ShardId(index,\"_na_\",0)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertPhase(task,\"finished\")@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final String index = \"test\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ReplicationTask task = maybeTask()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "AtomicBoolean executed = new AtomicBoolean()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "String primaryTargetNodeId = primaryShard.relocatingNodeId()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "PlainActionFuture<TestResponse> listener = new PlainActionFuture<>()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "state = ClusterState.builder(state).nodes(DiscoveryNodes.builder(state.nodes()).localNodeId(primaryTargetNodeId)).build()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "ClusterState state = state(index,true,ShardRoutingState.RELOCATING)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "listener.get()@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44->8 [style = bold, label=""];
7->30 [style = bold, label=""];
25->48 [style = dashed, label="0"];
25->29 [style = dotted, label="false"];
36->28 [style = bold, label=""];
9->25 [style = solid, label="executeOnPrimary"];
6->15 [style = solid, label="primaryTerm"];
1->13 [style = bold, label=""];
6->36 [style = solid, label="primaryTerm"];
19->1 [style = bold, label=""];
45->25 [style = bold, label=""];
21->36 [style = bold, label=""];
5->0 [style = bold, label=""];
25->22 [style = dotted, label="false"];
40->47 [style = bold, label=""];
32->25 [style = bold, label=""];
47->16 [style = solid, label="state"];
24->3 [style = dotted, label="true"];
9->24 [style = bold, label=""];
4->16 [style = bold, label=""];
31->14 [style = bold, label=""];
22->33 [style = bold, label=""];
48->49 [style = bold, label=""];
0->17 [style = bold, label=""];
25->33 [style = dotted, label="false"];
19->39 [style = bold, label=""];
22->12 [style = dashed, label="0"];
25->12 [style = dotted, label="true"];
5->0 [style = solid, label="requests"];
8->39 [style = solid, label="index"];
25->7 [style = bold, label=""];
13->11 [style = bold, label=""];
46->41 [style = bold, label=""];
25->34 [style = dotted, label="false"];
23->10 [style = bold, label=""];
29->38 [style = bold, label=""];
8->1 [style = solid, label="index"];
9->49 [style = solid, label="task"];
4->28 [style = solid, label="task"];
25->26 [style = dotted, label="true"];
47->16 [style = bold, label=""];
49->45 [style = bold, label=""];
1->39 [style = dashed, label="0"];
39->46 [style = bold, label=""];
11->15 [style = solid, label="request"];
25->31 [style = dotted, label="true"];
2->3 [style = bold, label=""];
21->38 [style = dashed, label="0"];
25->10 [style = dotted, label="false"];
25->28 [style = dotted, label="false"];
29->21 [style = bold, label=""];
3->25 [style = solid, label="executeOnPrimary"];
11->38 [style = solid, label="request"];
4->33 [style = solid, label="task"];
26->31 [style = bold, label=""];
41->40 [style = bold, label=""];
30->5 [style = bold, label=""];
28->23 [style = bold, label=""];
1->13 [style = solid, label="state"];
25->0 [style = dotted, label="false"];
25->5 [style = dotted, label="false"];
18->8 [style = bold, label=""];
14->27 [style = bold, label=""];
37->8 [style = bold, label=""];
24->42 [style = bold, label=""];
24->15 [style = bold, label=""];
10->22 [style = bold, label=""];
11->20 [style = bold, label=""];
8->19 [style = solid, label="index"];
42->43 [style = bold, label=""];
24->2 [style = bold, label=""];
35->6 [style = bold, label=""];
8->19 [style = bold, label=""];
43->48 [style = bold, label=""];
25->36 [style = dotted, label="false"];
38->36 [style = bold, label=""];
3->15 [style = bold, label=""];
25->14 [style = dotted, label="true"];
12->26 [style = bold, label=""];
20->4 [style = bold, label=""];
35->42 [style = solid, label="request"];
25->17 [style = dotted, label="false"];
25->21 [style = dotted, label="false"];
41->42 [style = solid, label="primaryTerm"];
25->12 [style = bold, label=""];
4->14 [style = solid, label="task"];
25->7 [style = dotted, label="false"];
25->38 [style = dotted, label="false"];
11->21 [style = solid, label="request"];
24->2 [style = dotted, label="true"];
16->35 [style = bold, label=""];
6->9 [style = bold, label=""];
25->23 [style = dotted, label="false"];
25->27 [style = dotted, label="true"];
15->32 [style = bold, label=""];
17->29 [style = bold, label=""];
33->34 [style = bold, label=""];
25->30 [style = dotted, label="false"];
}
