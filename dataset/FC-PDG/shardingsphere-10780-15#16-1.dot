digraph {
4 [style = filled, label = "SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(,Collections.singletonList(algorithmProvidedRuleConfig)).get(algorithmProvidedRuleConfig)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(builder.build(new ShardingSphereRulesBuilderMaterials(\"\",Collections.emptyList(),mock(),Collections.emptyMap(),new ConfigurationProperties(new Properties())),algorithmProvidedRuleConfig,Collections.emptyList()),instanceOf())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "DatabaseDiscoveryDataSourceRuleConfiguration ruleConfig = new DatabaseDiscoveryDataSourceRuleConfiguration(\"name\",Collections.singletonList(\"name\"),\"discoveryTypeName\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\"name\",\"pr_ds\",\"writeDataSourceName\",Collections.singletonList(\"name\"),\"loadBalancerName\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertBuild['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "AlgorithmProvidedDatabaseDiscoveryRuleConfiguration algorithmProvidedRuleConfig = mock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "when(algorithmProvidedRuleConfig.getDataSources()).thenReturn(Collections.singletonList(ruleConfig))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(builder.build(new SchemaRulesBuilderMaterials(\"\",Collections.emptyList(),mock(),Collections.emptyMap(),new ConfigurationProperties(new Properties())),algorithmProvidedRuleConfig,Collections.emptyList()),instanceOf())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(,Collections.singletonList(ruleConfig)).get(ruleConfig)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertBuild['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ReadwriteSplittingRuleConfiguration ruleConfig = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(builder.build(new ShardingSphereRulesBuilderMaterials(\"\",Collections.emptyList(),mock(),Collections.emptyMap(),new ConfigurationProperties(new Properties())),ruleConfig,Collections.emptyList()),instanceOf())@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertBuild['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8->10 [style = bold, label=""];
1->2 [style = solid, label="algorithmProvidedRuleConfig"];
11->10 [style = solid, label="ruleConfig"];
5->12 [style = dashed, label="0"];
0->5 [style = solid, label="ruleConfig"];
3->1 [style = bold, label=""];
9->12 [style = solid, label="dataSourceRuleConfig"];
1->0 [style = bold, label=""];
4->2 [style = bold, label=""];
2->7 [style = dashed, label="0"];
11->9 [style = bold, label=""];
13->11 [style = bold, label=""];
4->7 [style = bold, label=""];
2->10 [style = dashed, label="0"];
6->1 [style = bold, label=""];
1->4 [style = solid, label="algorithmProvidedRuleConfig"];
12->8 [style = bold, label=""];
5->4 [style = bold, label=""];
4->8 [style = dashed, label="0"];
1->7 [style = solid, label="algorithmProvidedRuleConfig"];
9->12 [style = bold, label=""];
0->9 [style = dashed, label="0"];
11->8 [style = solid, label="ruleConfig"];
0->5 [style = bold, label=""];
}
