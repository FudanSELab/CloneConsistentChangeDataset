digraph {
7 [style = filled, label = "assertThat(health.getDetails().get(\"total\")).isEqualTo(THRESHOLD_BYTES * 10)@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Health health = this.healthIndicator.health()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "diskSpaceIsUp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertThat(health.getDetails().get(\"free\")).isEqualTo(THRESHOLD_BYTES + 10)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "diskSpaceIsUp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "diskSpaceIsDown['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(health.getDetails().get(\"free\")).isEqualTo(THRESHOLD_BYTES - 10)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "given(this.fileMock.getUsableSpace()).willReturn(THRESHOLD_BYTES - 10)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(health.getDetails().get(\"threshold\")).isEqualTo(THRESHOLD_BYTES)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "given(this.fileMock.getTotalSpace()).willReturn(THRESHOLD_BYTES * 10)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(health.getStatus()).isEqualTo(Status.UP)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(health.getStatus()).isEqualTo(Status.DOWN)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "given(this.fileMock.getUsableSpace()).willReturn(THRESHOLD_BYTES + 10)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->1 [style = bold, label=""];
10->3 [style = bold, label=""];
2->10 [style = dashed, label="0"];
3->5 [style = bold, label=""];
5->11 [style = bold, label=""];
12->10 [style = bold, label=""];
1->9 [style = dashed, label="0"];
4->11 [style = dashed, label="0"];
6->9 [style = bold, label=""];
8->2 [style = bold, label=""];
9->7 [style = bold, label=""];
4->6 [style = bold, label=""];
1->7 [style = bold, label=""];
5->4 [style = bold, label=""];
2->3 [style = bold, label=""];
11->6 [style = bold, label=""];
0->2 [style = bold, label=""];
}
