digraph {
36 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE3).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new BloomFilterAggregatorFactory(\"a0:agg\",new DefaultDimensionSpec(\"dim1\",\"a0:dim1\"),TEST_NUM_ENTRIES))).context(BaseCalciteQueryTest.TIMESERIES_CONTEXT_DEFAULT).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testQuery(\"SELECT\" + \"BLOOM_FILTER(dim1, 1000),\" + \"BLOOM_FILTER(dim2, 1000)\" + \"FROM numfoo\",ImmutableList.of(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE3).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new BloomFilterAggregatorFactory(\"a0:agg\",new DefaultDimensionSpec(\"dim1\",\"a0:dim1\"),TEST_NUM_ENTRIES),new BloomFilterAggregatorFactory(\"a1:agg\",new DefaultDimensionSpec(\"dim2\",\"a1:dim2\"),TEST_NUM_ENTRIES))).context(BaseCalciteQueryTest.QUERY_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a5b349))@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "expected2.addBytes(null,0,0)@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "String raw = NullHandling.emptyToNullIfNeeded((String)row.getRaw(\"dim1\"))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "raw == null@@@9@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "i < expectedResults.size()@@@21@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expected1.addBytes(null,0,0)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "expected2.addBytes(null,0,0)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "raw == null@@@8@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "expected1.addString(raw)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "lst.size() == 0@@@15@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "expected2.addString(val)@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "BloomKFilter expected1 = new BloomKFilter(TEST_NUM_ENTRIES)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "expected2.addString(val)@@@26@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "int i = 0@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testBloomFilterTwoAggs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final List<Object((> expectedResults = ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a5b3b5)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(expectedResults.size(),results.size())@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "BloomKFilter expected2 = new BloomKFilter(TEST_NUM_ENTRIES)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "final String sql = \"SELECT\" + \"BLOOM_FILTER(dim1, 1000)\" + \"FROM numfoo\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "testBloomFilterAgg['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "expected1.addString(raw)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Assert.assertArrayEquals(expectedResults.get(i),results.get(i))@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "String raw = NullHandling.emptyToNullIfNeeded((String)row.getRaw(\"dim1\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "expected2.addBytes(null,0,0)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "i++@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testBloomFilterTwoAggs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "val == null@@@22@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "val == null@@@20@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "final List<Object((> results = sqlLifecycle.runSimple(sql,BaseCalciteQueryTest.QUERY_CONTEXT_DEFAULT,CalciteTestBase.DEFAULT_PARAMETERS,authenticationResult).toList()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "BloomKFilter expected1 = new BloomKFilter(TEST_NUM_ENTRIES)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "expected2.addBytes(null,0,0)@@@23@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "String val = NullHandling.emptyToNullIfNeeded(s)@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "final String sql = \"SELECT\" + \"BLOOM_FILTER(dim1, 1000),\" + \"BLOOM_FILTER(dim2, 1000)\" + \"FROM numfoo\"@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE3).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new BloomFilterAggregatorFactory(\"a0:agg\",new DefaultDimensionSpec(\"dim1\",\"a0:dim1\"),TEST_NUM_ENTRIES),new BloomFilterAggregatorFactory(\"a1:agg\",new DefaultDimensionSpec(\"dim2\",\"a1:dim2\"),TEST_NUM_ENTRIES))).context(BaseCalciteQueryTest.TIMESERIES_CONTEXT_DEFAULT).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@39@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "cannotVectorize()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "lst.size() == 0@@@17@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14->3 [style = bold, label=""];
4->25 [style = bold, label=""];
20->0 [style = dotted, label="true"];
20->0 [style = bold, label=""];
12->17 [style = solid, label="expected2"];
24->34 [style = bold, label=""];
14->17 [style = bold, label=""];
34->33 [style = solid, label="val"];
13->10 [style = dotted, label="true"];
16->10 [style = solid, label="i"];
26->28 [style = dotted, label="false"];
19->1 [style = bold, label=""];
15->17 [style = bold, label=""];
2->36 [style = dashed, label="0"];
10->8 [style = bold, label=""];
1->21 [style = bold, label=""];
4->9 [style = solid, label="val"];
13->36 [style = bold, label=""];
9->14 [style = bold, label=""];
23->12 [style = bold, label=""];
9->15 [style = dotted, label="true"];
26->28 [style = bold, label=""];
23->17 [style = solid, label="expected1"];
12->28 [style = solid, label="raw"];
27->25 [style = bold, label=""];
12->26 [style = solid, label="raw"];
3->22 [style = solid, label="raw"];
0->3 [style = bold, label=""];
11->16 [style = bold, label=""];
7->6 [style = dotted, label="true"];
33->4 [style = dotted, label="true"];
27->12 [style = bold, label=""];
5->23 [style = bold, label=""];
0->17 [style = bold, label=""];
9->14 [style = dotted, label="false"];
3->20 [style = solid, label="raw"];
37->1 [style = bold, label=""];
34->33 [style = bold, label=""];
31->29 [style = bold, label=""];
1->35 [style = bold, label=""];
23->3 [style = bold, label=""];
24->18 [style = bold, label=""];
33->27 [style = bold, label=""];
26->3 [style = dotted, label="true"];
35->5 [style = bold, label=""];
6->4 [style = bold, label=""];
22->18 [style = bold, label=""];
29->32 [style = bold, label=""];
7->6 [style = bold, label=""];
22->17 [style = bold, label=""];
18->7 [style = bold, label=""];
16->8 [style = solid, label="i"];
24->18 [style = dotted, label="true"];
14->4 [style = bold, label=""];
4->9 [style = bold, label=""];
13->10 [style = bold, label=""];
16->13 [style = bold, label=""];
20->22 [style = dotted, label="false"];
18->34 [style = bold, label=""];
26->3 [style = bold, label=""];
33->4 [style = bold, label=""];
7->4 [style = bold, label=""];
15->3 [style = bold, label=""];
32->30 [style = bold, label=""];
17->25 [style = dashed, label="0"];
21->5 [style = bold, label=""];
30->12 [style = bold, label=""];
27->34 [style = bold, label=""];
13->8 [style = dotted, label="true"];
8->10 [style = solid, label="i"];
4->12 [style = bold, label=""];
0->18 [style = bold, label=""];
12->3 [style = bold, label=""];
21->35 [style = dashed, label="0"];
4->14 [style = solid, label="val"];
33->27 [style = dotted, label="false"];
4->34 [style = bold, label=""];
28->22 [style = bold, label=""];
8->13 [style = bold, label=""];
13->2 [style = bold, label=""];
12->26 [style = bold, label=""];
3->22 [style = bold, label=""];
8->13 [style = solid, label="i"];
20->22 [style = bold, label=""];
34->27 [style = solid, label="val"];
22->3 [style = bold, label=""];
3->20 [style = bold, label=""];
30->25 [style = solid, label="expected2"];
9->15 [style = bold, label=""];
15->4 [style = bold, label=""];
16->13 [style = solid, label="i"];
22->24 [style = bold, label=""];
32->25 [style = solid, label="expected1"];
17->11 [style = bold, label=""];
}
