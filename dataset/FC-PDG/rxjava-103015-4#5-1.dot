digraph {
1 [style = filled, label = "manyIteratorThrows['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Observable.just(1).withLatestFrom(new CrashingMappedIterable<Observable<Integer>>(1,100,100,new Function<Integer,Observable<Integer>>(){@Override public Observable<Integer> apply(Integer v){return Observable.just(2)}}),new Function<Object((,Object>(){@Override public Object apply(Object(( a){return a}}).to(TestHelper.testConsumer()).assertFailureAndMessage(,\"iterator()\")@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Flowable.just(1).withLatestFrom(new CrashingMappedIterable<Flowable<Integer>>(1,100,100,new Function<Integer,Flowable<Integer>>(){@Override public Flowable<Integer> apply(Integer v){return Flowable.just(2)}}),new Function<Object((,Object>(){@Override public Object apply(Object(( a){return a}}).to(TestHelper.testConsumer()).assertFailureAndMessage(,\"iterator()\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Flowable.just(1).withLatestFrom(new CrashingMappedIterable<>(1,100,100,new Function<Integer,Flowable<Integer>>(){@Override public Flowable<Integer> apply(Integer v){return Flowable.just(2)}}),new Function<Object((,Object>(){@Override public Object apply(Object(( a){return a}}).to(TestHelper.testConsumer()).assertFailureAndMessage(,\"iterator()\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "manyIteratorThrows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "manyIteratorThrows['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0->2 [style = dashed, label="0"];
0->4 [style = dashed, label="0"];
1->0 [style = bold, label=""];
3->2 [style = bold, label=""];
5->4 [style = bold, label=""];
}
