digraph {
14 [style = filled, label = "assertThat(executor.getResponseType(),is(ResponseType.UPDATE))@@@9@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "when(databaseCommunicationEngine.execute()).thenReturn(new UpdateResponseHeader(mock()))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Collection<DatabasePacket<?>> actual = executor.execute()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(executor.getResponseType(),is(ResponseType.QUERY))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(actualPackets.next(),is(instanceOf()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertExecuteBindPacketWithQuerySQLAndReturnEmptyResult['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertExecuteBindPacketWithUpdateSQL['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "when(databaseCommunicationEngine.execute()).thenReturn(queryResponseHeader)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(actual.size(),is(2))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "verify(queryResponseHeader).getQueryHeaders()@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(executor.getResponseType(),is(ResponseType.UPDATE))@@@11@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(actualPackets.next(),is(instanceOf()))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(bindPacket,backendConnection)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(connectionContext,bindPacket,backendConnection)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Iterator<DatabasePacket<?>> actualPackets = actual.iterator()@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(actual.size(),is(1))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "setMockFieldIntoExecutor(executor)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(bindPacket,backendConnection)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(actual.iterator().next(),is(instanceOf()))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "QueryResponseHeader queryResponseHeader = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertExecuteBindPacketWithUpdateSQL['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
16->18 [style = bold, label=""];
7->17 [style = bold, label=""];
0->13 [style = bold, label=""];
7->17 [style = dashed, label="0"];
8->20 [style = dashed, label="0"];
3->6 [style = bold, label=""];
11->12 [style = bold, label=""];
18->2 [style = bold, label=""];
9->7 [style = bold, label=""];
7->8 [style = bold, label=""];
1->2 [style = solid, label="executor"];
4->0 [style = bold, label=""];
19->16 [style = bold, label=""];
13->2 [style = solid, label="executor"];
1->13 [style = dashed, label="0"];
6->12 [style = dashed, label="0"];
16->18 [style = solid, label="queryResponseHeader"];
0->1 [style = bold, label=""];
10->0 [style = bold, label=""];
12->14 [style = bold, label=""];
13->2 [style = bold, label=""];
1->2 [style = bold, label=""];
5->11 [style = bold, label=""];
6->9 [style = bold, label=""];
20->15 [style = bold, label=""];
2->5 [style = solid, label="executor"];
3->11 [style = dashed, label="0"];
2->5 [style = bold, label=""];
17->20 [style = bold, label=""];
}
