digraph {
1 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getDb(),CoreMatchers.is(expected.getDb()))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertIs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertIs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getPassword(),is(expected.getPassword()))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getHostName(),CoreMatchers.is(expected.getHostName()))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "final ExpectedDatabaseDiscoveryRule expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getUser(),CoreMatchers.is(expected.getUser()))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),is(expected.getName()))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getPort(),is(expected.getPort()))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "final DataSourceSegment actual@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getPort(),CoreMatchers.is(expected.getPort()))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSources(),is(expected.getDataSources()))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getDb(),is(expected.getDb()))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),CoreMatchers.is(expected.getName()))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "null == expected@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final DatabaseDiscoveryRuleSegment actual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getUrl(),is(expected.getUrl()))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual dataSource should exist.\"),actual)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getUser(),is(expected.getUser()))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "final DataSourceSegment actual@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final ExpectedDataSource expected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDiscoveryTypeName(),is(expected.getDiscoveryTypeName()))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),is(expected.getName()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getPassword(),CoreMatchers.is(expected.getPassword()))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getUrl(),CoreMatchers.is(expected.getUrl()))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getHostName(),is(expected.getHostName()))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertProps(assertContext,actual.getProps(),expected.getProps())@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "PropertiesAssert.assertIs(assertContext,actual.getProperties(),expected.getProps())@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertDatabaseDiscoveryRule['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertNull(assertContext.getText(\"Actual dataSource should not exist.\"),actual)@@@4@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4->10 [style = bold, label=""];
12->11 [style = dotted, label="false"];
12->23 [style = dotted, label="false"];
12->17 [style = dotted, label="false"];
24->19 [style = bold, label=""];
12->10 [style = dotted, label="false"];
12->21 [style = dotted, label="false"];
10->14 [style = bold, label=""];
12->2 [style = dotted, label="false"];
15->6 [style = solid, label="assertContext"];
12->4 [style = dotted, label="false"];
13->20 [style = dashed, label="0"];
0->12 [style = bold, label=""];
26->25 [style = bold, label=""];
12->6 [style = dotted, label="false"];
30->26 [style = bold, label=""];
28->31 [style = bold, label=""];
5->24 [style = dashed, label="0"];
1->19 [style = dashed, label="0"];
9->4 [style = solid, label="actual"];
18->17 [style = bold, label=""];
12->31 [style = dashed, label="0"];
11->17 [style = dashed, label="0"];
20->6 [style = bold, label=""];
29->25 [style = solid, label="assertContext"];
8->7 [style = solid, label="actual"];
12->19 [style = dotted, label="false"];
12->7 [style = bold, label=""];
9->32 [style = dashed, label="0"];
12->5 [style = dotted, label="false"];
12->20 [style = dotted, label="false"];
2->13 [style = bold, label=""];
0->8 [style = dotted, label="true"];
9->7 [style = solid, label="actual"];
28->29 [style = dotted, label="true"];
5->1 [style = bold, label=""];
11->5 [style = bold, label=""];
17->24 [style = bold, label=""];
8->4 [style = solid, label="actual"];
28->32 [style = dotted, label="true"];
21->20 [style = bold, label=""];
12->4 [style = bold, label=""];
2->21 [style = dashed, label="0"];
12->24 [style = dotted, label="false"];
12->1 [style = dotted, label="false"];
22->12 [style = bold, label=""];
22->16 [style = dotted, label="true"];
7->30 [style = dashed, label="0"];
31->30 [style = bold, label=""];
9->12 [style = solid, label="expected"];
1->2 [style = bold, label=""];
19->21 [style = bold, label=""];
0->3 [style = dotted, label="true"];
28->27 [style = dotted, label="true"];
13->6 [style = bold, label=""];
16->12 [style = solid, label="expected"];
22->9 [style = dotted, label="true"];
12->7 [style = dotted, label="true"];
12->14 [style = dotted, label="false"];
10->23 [style = dashed, label="0"];
22->15 [style = dotted, label="true"];
0->9 [style = dotted, label="true"];
14->11 [style = bold, label=""];
14->18 [style = dashed, label="0"];
23->18 [style = bold, label=""];
3->6 [style = solid, label="assertContext"];
4->23 [style = bold, label=""];
12->18 [style = dotted, label="false"];
12->13 [style = dotted, label="false"];
}
