digraph {
39 [style = filled, label = "assertEquals(expectedNumberRepartitionTopics,getCountOfRepartitionTopicsFound(topologyString))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "mappedStream.filter(null,Named.as(\"process-filter\")).mapValues(null,Named.as(\"process-mapValues\")).process(null,Named.as(\"process\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(EXPECTED_UNOPTIMIZED_TOPOLOGY,topologyString)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final Topology topology = builder.build(streamsConfiguration)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "inputTopicB.pipeKeyValueList(getKeyValues())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final TestOutputTopic<String,String> joinedOutputTopic = topologyTestDriver.createOutputTopic(JOINED_TOPIC,stringDeserializer,stringDeserializer)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final KStream<String,String> sourceAStream = builder.stream(INPUT_A_TOPIC,Consumed.with(Serdes.String(),Serdes.String()).withName(\"sourceAStream\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "countStream.to(COUNT_TOPIC,Produced.with(Serdes.String(),Serdes.Long()).withName(\"count-to\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final String topologyString = topology.describe().toString()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(aggregationOutputTopic.readKeyValuesToMap(),equalTo(keyValueListToMap(expectedAggKeyValues)))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(EXPECTED_OPTIMIZED_TOPOLOGY,topologyString)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(countOutputTopic.readKeyValuesToMap(),equalTo(keyValueListToMap(expectedCountKeyValues)))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "runTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "final TestOutputTopic<String,String> stringCountOutputTopic = topologyTestDriver.createOutputTopic(STRING_COUNT_TOPIC,stringDeserializer,stringDeserializer)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertThat(reduceOutputTopic.readKeyValuesToMap(),equalTo(keyValueListToMap(expectedReduceKeyValues)))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "inputTopicA.pipeKeyValueList(getKeyValues())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final int expectedNumberRepartitionTopics@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "topologyTestDriver = new TopologyTestDriver(topology,streamsConfiguration)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final KStream<String,String> mappedStream = sourceStream.map(null,Named.as(\"source-map\"))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(EXPECTED_UNOPTIMIZED_TOPOLOGY,topologyString)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(processorValueCollector,equalTo(expectedCollectedProcessorValues))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "mappedStream.groupByKey(Grouped.as(\"aggregate-groupByKey\")).aggregate(initializer,aggregator,Named.as(\"aggregate\"),Materialized.as(Stores.inMemoryKeyValueStore(\"aggregate-store\")).withKeySerde(Serdes.String()).withValueSerde(Serdes.Integer())).toStream(Named.as(\"aggregate-toStream\")).to(AGGREGATION_TOPIC,Produced.with(Serdes.String(),Serdes.Integer()).withName(\"reduce-to\"))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final TestOutputTopic<String,Long> countOutputTopic = topologyTestDriver.createOutputTopic(COUNT_TOPIC,stringDeserializer,new LongDeserializer())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "mappedStream.filter(null,Named.as(\"join-filter\")).join(countStream,null,JoinWindows.of(ofMillis(5000)),StreamJoined.with(Stores.inMemoryWindowStore(\"join-store\",ofDays(1),ofMillis(10000),true),Stores.inMemoryWindowStore(\"other-join-store\",ofDays(1),ofMillis(10000),true)).withName(\"join\").withKeySerde(Serdes.String()).withValueSerde(Serdes.String()).withOtherValueSerde(Serdes.Long())).to(JOINED_TOPIC,Produced.as(\"join-to\"))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "final KStream<String,String> mappedBStream = sourceBStream.map(null,Named.as(\"mappedBStream\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "optimizationConfig.equals(StreamsConfig.OPTIMIZE)@@@21@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "streamsConfiguration.setProperty(StreamsConfig.TOPOLOGY_OPTIMIZATION_CONFIG,optimizationConfig)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final KStream<String,Long> countStream = mappedStream.groupByKey(Grouped.as(\"count-groupByKey\")).count(Named.as(\"count\"),Materialized.as(Stores.inMemoryKeyValueStore(\"count-store\")).withKeySerde(Serdes.String()).withValueSerde(Serdes.Long())).toStream(Named.as(\"count-toStream\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final int expectedNumberRepartitionTopics@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final String optimizationConfig@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "final TestInputTopic<String,String> inputTopicB = topologyTestDriver.createInputTopic(INPUT_B_TOPIC,stringSerializer,stringSerializer)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "final KStream<String,String> mergedStream = mappedAStream.merge(mappedBStream,Named.as(\"mergedStream\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "final KStream<String,String> mappedAStream = sourceAStream.map(null,Named.as(\"mappedAStream\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "runTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(EXPECTED_OPTIMIZED_TOPOLOGY,topologyString)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(stringCountOutputTopic.readKeyValuesToMap(),equalTo(keyValueListToMap(expectedStringCountKeyValues)))@@@29@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "mappedStream.filter(null,Named.as(\"reduce-filter\")).peek(null,Named.as(\"reduce-peek\")).groupByKey(Grouped.as(\"reduce-groupByKey\")).reduce(reducer,Named.as(\"reducer\"),Materialized.as(Stores.inMemoryKeyValueStore(\"reduce-store\"))).toStream(Named.as(\"reduce-toStream\")).to(REDUCE_TOPIC,Produced.with(Serdes.String(),Serdes.String()))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(joinedOutputTopic.readKeyValuesToMap(),equalTo(keyValueListToMap(expectedJoinKeyValues)))@@@34@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "final StreamsBuilder builder = new StreamsBuilder()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "final StreamsBuilder builder = new StreamsBuilder()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final TestOutputTopic<String,String> reduceOutputTopic = topologyTestDriver.createOutputTopic(REDUCE_TOPIC,stringDeserializer,stringDeserializer)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "mergedStream.groupByKey(Grouped.as(\"long-groupByKey\")).count(Named.as(\"long-count\"),Materialized.as(Stores.inMemoryKeyValueStore(\"long-store\"))).toStream(Named.as(\"long-toStream\")).to(COUNT_TOPIC,Produced.with(Serdes.String(),Serdes.Long()).withName(\"long-to\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "mappedStream.filter(null,Named.as(\"join-filter\")).join(countStream,null,JoinWindows.of(ofMillis(5000)),StreamJoined.with(Stores.inMemoryWindowStore(\"join-store\",ofDays(1).plus(ofMillis(10000)),ofMillis(10000),true),Stores.inMemoryWindowStore(\"other-join-store\",ofDays(1).plus(ofMillis(10000)),ofMillis(10000),true)).withName(\"join\").withKeySerde(Serdes.String()).withValueSerde(Serdes.String()).withOtherValueSerde(Serdes.Long())).to(JOINED_TOPIC,Produced.as(\"join-to\"))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "runTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
46 [style = filled, label = "final TestInputTopic<String,String> inputTopicA = topologyTestDriver.createInputTopic(INPUT_A_TOPIC,stringSerializer,stringSerializer)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "inputTopicA.pipeKeyValueList(getKeyValues())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "mergedStream.groupByKey(Grouped.as(\"string-groupByKey\")).count(Named.as(\"string-count\"),Materialized.as(Stores.inMemoryKeyValueStore(\"string-store\"))).toStream(Named.as(\"string-toStream\")).mapValues(null,Named.as(\"string-mapValues\")).to(STRING_COUNT_TOPIC,Produced.with(Serdes.String(),Serdes.String()).withName(\"string-to\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "final TestOutputTopic<String,Long> countOutputTopic = topologyTestDriver.createOutputTopic(COUNT_TOPIC,stringDeserializer,new LongDeserializer())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "final String optimizationConfig@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(countOutputTopic.readKeyValuesToMap(),equalTo(keyValueListToMap(expectedCountKeyValues)))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final KStream<String,String> sourceStream = builder.stream(INPUT_TOPIC,Consumed.with(Serdes.String(),Serdes.String()).withName(\"sourceStream\"))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "final KStream<String,String> sourceBStream = builder.stream(INPUT_B_TOPIC,Consumed.with(Serdes.String(),Serdes.String()).withName(\"sourceBStream\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final TestInputTopic<String,String> inputTopicA = topologyTestDriver.createInputTopic(INPUT_TOPIC,stringSerializer,stringSerializer)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46->44 [style = bold, label=""];
44->30 [style = bold, label=""];
28->29 [style = bold, label=""];
27->18 [style = bold, label=""];
0->9 [style = bold, label=""];
3->20 [style = solid, label="topology"];
4->24 [style = bold, label=""];
22->15 [style = solid, label="topologyString"];
22->39 [style = solid, label="topologyString"];
35->3 [style = bold, label=""];
5->39 [style = bold, label=""];
38->51 [style = bold, label=""];
50->37 [style = bold, label=""];
2->3 [style = bold, label=""];
33->34 [style = dotted, label="true"];
20->46 [style = bold, label=""];
39->8 [style = bold, label=""];
5->11 [style = dotted, label="false"];
5->15 [style = bold, label=""];
31->4 [style = bold, label=""];
17->32 [style = dashed, label="0"];
47->43 [style = bold, label=""];
19->17 [style = bold, label=""];
16->23 [style = bold, label=""];
1->0 [style = bold, label=""];
45->2 [style = bold, label=""];
51->35 [style = bold, label=""];
20->25 [style = bold, label=""];
32->2 [style = bold, label=""];
42->38 [style = solid, label="mappedBStream"];
22->5 [style = bold, label=""];
12->7 [style = bold, label=""];
13->1 [style = bold, label=""];
21->8 [style = solid, label="expectedNumberRepartitionTopics"];
2->50 [style = bold, label=""];
22->8 [style = solid, label="topologyString"];
22->49 [style = bold, label=""];
26->30 [style = bold, label=""];
36->39 [style = bold, label=""];
30->47 [style = dashed, label="0"];
9->28 [style = bold, label=""];
43->40 [style = bold, label=""];
22->11 [style = solid, label="topologyString"];
7->22 [style = bold, label=""];
48->52 [style = bold, label=""];
52->42 [style = bold, label=""];
6->14 [style = dotted, label="true"];
3->20 [style = bold, label=""];
6->31 [style = bold, label=""];
19->32 [style = bold, label=""];
33->21 [style = dotted, label="true"];
17->2 [style = bold, label=""];
10->12 [style = bold, label=""];
49->36 [style = dotted, label="false"];
41->2 [style = solid, label="optimizationConfig"];
23->19 [style = bold, label=""];
37->48 [style = bold, label=""];
25->26 [style = bold, label=""];
9->13 [style = dashed, label="0"];
34->2 [style = solid, label="optimizationConfig"];
30->10 [style = bold, label=""];
40->22 [style = bold, label=""];
25->46 [style = dashed, label="0"];
33->31 [style = bold, label=""];
22->36 [style = solid, label="topologyString"];
11->8 [style = bold, label=""];
45->41 [style = dotted, label="true"];
5->11 [style = bold, label=""];
30->47 [style = bold, label=""];
49->5 [style = dotted, label="true"];
22->5 [style = solid, label="topologyString"];
45->21 [style = dotted, label="true"];
6->21 [style = dotted, label="true"];
49->5 [style = bold, label=""];
5->15 [style = dotted, label="true"];
21->2 [style = solid, label="optimizationConfig"];
24->27 [style = bold, label=""];
15->8 [style = bold, label=""];
21->39 [style = solid, label="expectedNumberRepartitionTopics"];
42->38 [style = bold, label=""];
49->36 [style = bold, label=""];
8->13 [style = bold, label=""];
14->8 [style = solid, label="expectedNumberRepartitionTopics"];
18->16 [style = bold, label=""];
}
