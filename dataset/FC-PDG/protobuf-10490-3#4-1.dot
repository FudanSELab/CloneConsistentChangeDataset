digraph {
6 [style = filled, label = "testGetBuilderForExtensionField['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(fieldBuilder.build().getField(field)).isEqualTo(expected)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "testGetBuilderForExtensionField['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "FieldDescriptor field = NestedMessage.getDescriptor().findFieldByNumber(NestedMessage.BB_FIELD_NUMBER)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Message.Builder fieldBuilder = builder.newBuilderForField(UnittestProto.optionalNestedMessageExtension.getDescriptor())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "fieldBuilder.setField(field,expected)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "DynamicMessage.Builder builder = DynamicMessage.newBuilder(TestAllExtensions.getDescriptor())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testGetBuilderForExtensionField['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(expected,fieldBuilder.build().getField(field))@@@8@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final int expected = 7432@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "TestAllExtensions.Builder builder = TestAllExtensions.newBuilder()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->1 [style = solid, label="field"];
2->5 [style = solid, label="expected"];
6->3 [style = bold, label=""];
5->1 [style = bold, label=""];
5->8 [style = bold, label=""];
1->8 [style = dashed, label="0"];
10->9 [style = bold, label=""];
9->0 [style = bold, label=""];
4->5 [style = solid, label="field"];
3->9 [style = dashed, label="0"];
2->4 [style = bold, label=""];
4->5 [style = bold, label=""];
2->1 [style = solid, label="expected"];
7->3 [style = bold, label=""];
3->0 [style = bold, label=""];
0->2 [style = bold, label=""];
2->8 [style = solid, label="expected"];
}
