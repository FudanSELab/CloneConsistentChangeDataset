digraph {
0 [style = filled, label = "subscriptions.seek(tp0,0)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "int v = 0@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "KafkaMetric fetchSizeAverage = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchSizeAvg))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "builder.appendWithOffset(v,RecordBatch.NO_TIMESTAMP,\"key\".getBytes(),(\"value-\" + v).getBytes())@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "fetchRecords(tp0,records,Errors.NONE,100L,0)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "v++@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(expectedBytes,(Double)fetchSizeAverage.metricValue(),EPSILON)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "record.offset() >= 1@@@16@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertEquals(2,(Double)recordsCountAverage.metricValue(),EPSILON)@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "testFetchResponseMetricsWithOnePartitionAtTheWrongOffset['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "testFetchResponseMetricsWithOnePartitionAtTheWrongOffset['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assignFromUser(singleton(tp0))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assignFromUser(Utils.mkSet(tp0,tp1))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "buildFetcher()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "client.prepareResponse(FetchResponse.of(Errors.NONE,0,INVALID_SESSION_ID,new LinkedHashMap<>(partitions),topicIds))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "builder.appendWithOffset(v,RecordBatch.NO_TIMESTAMP,\"key\".getBytes(),(\"value-\" + v).getBytes())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testFetchResponseMetricsPartialResponse['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "subscriptions.seek(tp1,5)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "int expectedBytes = 0@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "v < 3@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "MemoryRecordsBuilder builder = MemoryRecords.builder(ByteBuffer.allocate(1024),CompressionType.NONE,TimestampType.CREATE_TIME,0L)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "v++@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "client.prepareResponse(FetchResponse.of(Errors.NONE,0,INVALID_SESSION_ID,new LinkedHashMap<>(partitions)))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "int expectedBytes = 0@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "partitions.put(tp0,new FetchResponseData.PartitionData().setPartitionIndex(tp0.partition()).setHighWatermark(100).setLogStartOffset(0).setRecords(records))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "partitions.put(tp1,new FetchResponseData.PartitionData().setPartitionIndex(tp1.partition()).setHighWatermark(100).setLogStartOffset(0).setRecords(MemoryRecords.withRecords(CompressionType.NONE,new SimpleRecord(\"val\".getBytes()))))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Map<TopicPartition,FetchResponseData.PartitionData> partitions = new HashMap<>()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "expectedBytes += record.sizeInBytes()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "fetcher.fetchedRecords()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(3,(Double)recordsCountAverage.metricValue(),EPSILON)@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "expectedBytes += record.sizeInBytes()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(1,fetcher.sendFetches())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "KafkaMetric recordsCountAverage = allMetrics.get(metrics.metricInstance(metricsRegistry.recordsPerRequestAvg))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "MemoryRecords records = builder.build()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(expectedBytes,(Double)fetchSizeAverage.metricValue(),EPSILON)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "consumerClient.poll(time.timer(0))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "subscriptions.seek(tp0,1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "subscriptions.seek(tp1,0)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->35 [style = bold, label=""];
11->16 [style = bold, label=""];
21->10 [style = bold, label=""];
28->6 [style = bold, label=""];
18->14 [style = solid, label="v"];
27->14 [style = bold, label=""];
17->6 [style = bold, label=""];
23->17 [style = solid, label="partitions"];
31->18 [style = solid, label="v"];
9->31 [style = bold, label=""];
38->29 [style = bold, label=""];
23->15 [style = bold, label=""];
0->11 [style = bold, label=""];
31->18 [style = bold, label=""];
5->18 [style = bold, label=""];
29->37 [style = bold, label=""];
7->20 [style = bold, label=""];
29->33 [style = solid, label="expectedBytes"];
14->37 [style = solid, label="records"];
23->28 [style = solid, label="partitions"];
2->4 [style = bold, label=""];
10->7 [style = bold, label=""];
13->9 [style = solid, label="v"];
22->24 [style = solid, label="expectedBytes"];
14->9 [style = solid, label="v"];
9->14 [style = dotted, label="true"];
14->27 [style = solid, label="v"];
1->17 [style = bold, label=""];
4->0 [style = bold, label=""];
20->5 [style = bold, label=""];
12->33 [style = solid, label="expectedBytes"];
9->27 [style = bold, label=""];
9->27 [style = dotted, label="true"];
17->28 [style = dashed, label="0"];
26->2 [style = bold, label=""];
1->28 [style = bold, label=""];
12->38 [style = bold, label=""];
10->5 [style = bold, label=""];
8->2 [style = bold, label=""];
38->37 [style = bold, label=""];
18->27 [style = solid, label="v"];
16->21 [style = bold, label=""];
5->18 [style = solid, label="v"];
31->9 [style = solid, label="v"];
34->36 [style = bold, label=""];
14->12 [style = bold, label=""];
9->13 [style = dotted, label="true"];
18->9 [style = dotted, label="true"];
25->19 [style = bold, label=""];
18->9 [style = bold, label=""];
9->14 [style = bold, label=""];
13->14 [style = solid, label="v"];
12->15 [style = solid, label="records"];
36->16 [style = bold, label=""];
0->34 [style = dashed, label="0"];
33->32 [style = bold, label=""];
14->9 [style = bold, label=""];
29->38 [style = bold, label=""];
12->23 [style = bold, label=""];
5->9 [style = solid, label="v"];
9->12 [style = bold, label=""];
13->9 [style = bold, label=""];
14->13 [style = bold, label=""];
22->24 [style = bold, label=""];
30->2 [style = bold, label=""];
35->34 [style = bold, label=""];
37->33 [style = bold, label=""];
18->31 [style = dotted, label="true"];
38->29 [style = dotted, label="true"];
3->32 [style = dashed, label="0"];
19->22 [style = bold, label=""];
24->3 [style = bold, label=""];
18->14 [style = bold, label=""];
18->13 [style = solid, label="v"];
4->35 [style = dashed, label="0"];
5->31 [style = solid, label="v"];
6->25 [style = bold, label=""];
18->9 [style = solid, label="v"];
15->1 [style = bold, label=""];
}
