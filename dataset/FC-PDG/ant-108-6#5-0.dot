digraph {
15 [style = filled, label = "assertThat(\"type field 1\",ze(0(,instanceOf())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "testParse['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "System.arraycopy(data,0,data2,0,data2.length)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ZipExtraField(( ze = ExtraFieldUtils.parse(data)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(\"number of fields\",2,ze.length)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "thrown.expect()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "thrown.expectMessage(\"bad extra field starting at \" + (4 + aLocal.length) + \". Block length of 1 bytes exceeds remaining data of 0 bytes.\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(\"type field 1\",ze(0(,instanceOf())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertTrue(\"type field 1\",ze(0( instanceof AsiExtraField)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertTrue(\"type field 2\",ze(1( instanceof UnrecognizedExtraField)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "byte(( data2 = new byte((((@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testParseWithSkip['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertEquals(\"mode field 1\",040755,((AsiExtraField)ze(0().getMode())@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ZipExtraField(( ze = ExtraFieldUtils.parse(data,true,ExtraFieldUtils.UnparseableExtraField.SKIP)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ExtraFieldUtils.parse(data2)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testParseWithSkip['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(\"type field 1\",ze(0( instanceof AsiExtraField)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(\"data length field 2\",1,ze(1(.getLocalFileDataLength().getValue())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(\"type field 2\",ze(1(,instanceOf())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertEquals(\"number of fields\",2,ze.length)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(\"type field 1\",ze(0( instanceof AsiExtraField)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"mode field 1\",040755,((AsiExtraField)ze(0().getMode())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->3 [style = bold, label=""];
15->10 [style = bold, label=""];
9->16 [style = dashed, label="0"];
5->14 [style = dashed, label="0"];
16->8 [style = bold, label=""];
4->5 [style = solid, label="ze"];
11->15 [style = dashed, label="0"];
3->14 [style = bold, label=""];
18->12 [style = bold, label=""];
4->9 [style = solid, label="ze"];
18->0 [style = solid, label="ze"];
12->16 [style = bold, label=""];
6->19 [style = bold, label=""];
4->16 [style = solid, label="ze"];
12->9 [style = bold, label=""];
9->8 [style = bold, label=""];
2->4 [style = bold, label=""];
1->7 [style = bold, label=""];
0->7 [style = solid, label="data2"];
6->15 [style = bold, label=""];
4->14 [style = solid, label="ze"];
20->21 [style = bold, label=""];
8->0 [style = bold, label=""];
7->11 [style = solid, label="ze"];
3->5 [style = bold, label=""];
7->6 [style = solid, label="data2"];
5->12 [style = bold, label=""];
18->9 [style = solid, label="ze"];
7->19 [style = dashed, label="0"];
11->10 [style = bold, label=""];
0->1 [style = bold, label=""];
7->15 [style = solid, label="ze"];
6->11 [style = bold, label=""];
14->12 [style = bold, label=""];
7->6 [style = bold, label=""];
7->19 [style = solid, label="data2"];
21->17 [style = bold, label=""];
17->18 [style = bold, label=""];
0->1 [style = solid, label="data2"];
13->4 [style = bold, label=""];
}
