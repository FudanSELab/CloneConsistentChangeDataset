digraph {
14 [style = filled, label = "intValue < 1 || intValue > select.getSelectList().size()@@@24@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "node.equals(literal)@@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "return SqlUtil.stripAs(select.getSelectList().get(ordinal))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final int intValue = literal.intValue(false)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "return nthSelectItem(ordinal,literal.getParserPosition())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10daaceliteral@@@34@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10dab27literal@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "boolean isOrdinalLiteral = literal == root@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "operandList@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "throw newValidationError(literal,RESOURCE.orderByOrdinalOutOfRange())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "throw validator.newValidationError(literal,RESOURCE.orderByOrdinalOutOfRange())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "root instanceof SqlBasicCall@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<SqlNode> operandList = ((SqlBasicCall)root).getOperandList()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "visit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "literal.getTypeName()@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "visit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "int ordinal = intValue - 1@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "SqlNode node@@@10@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "int ordinal = intValue - 1@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10daa4fliteral@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "literal == root && config.sqlConformance().isSortByOrdinal()@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "intValue >= 0@@@23@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "intValue < 1 || intValue > aliasList.size()@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "isOrdinalLiteral@@@20@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "intValue >= 0@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "literal.getTypeName()@@@4@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "havingExpr || !validator.config().sqlConformance().isGroupByOrdinal()@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "root.getKind()@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "isOrdinalLiteral = true@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "visit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "SqlLiteral literal@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "operandList@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final int intValue = literal.intValue(false)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12->10 [style = dotted, label="true"];
25->23 [style = bold, label=""];
29->30 [style = bold, label=""];
5->19 [style = bold, label=""];
22->19 [style = bold, label=""];
8->14 [style = bold, label=""];
23->32 [style = bold, label=""];
10->13 [style = dotted, label="true"];
1->7 [style = solid, label="literal"];
29->1 [style = dotted, label="true"];
11->12 [style = bold, label=""];
3->15 [style = solid, label="ordinal"];
14->3 [style = bold, label=""];
11->12 [style = dotted, label="true"];
12->16 [style = dotted, label="true"];
10->9 [style = bold, label=""];
12->2 [style = bold, label=""];
1->27 [style = solid, label="literal"];
4->14 [style = solid, label="intValue"];
1->18 [style = solid, label="literal"];
32->27 [style = bold, label=""];
25->31 [style = solid, label="intValue"];
11->9 [style = bold, label=""];
1->10 [style = solid, label="literal"];
19->0 [style = bold, label=""];
2->10 [style = bold, label=""];
4->8 [style = bold, label=""];
17->4 [style = dotted, label="true"];
30->24 [style = dotted, label="true"];
23->32 [style = dotted, label="true"];
12->2 [style = dotted, label="true"];
12->20 [style = dotted, label="true"];
23->26 [style = dotted, label="true"];
9->17 [style = dotted, label="true"];
0->9 [style = solid, label="isOrdinalLiteral"];
32->27 [style = dotted, label="true"];
25->32 [style = solid, label="intValue"];
0->11 [style = bold, label=""];
15->7 [style = bold, label=""];
14->6 [style = dotted, label="true"];
31->26 [style = bold, label=""];
19->30 [style = dashed, label="0"];
12->9 [style = bold, label=""];
17->4 [style = bold, label=""];
8->15 [style = dotted, label="true"];
4->3 [style = solid, label="intValue"];
24->23 [style = dotted, label="true"];
23->31 [style = dotted, label="true"];
10->13 [style = bold, label=""];
14->32 [style = dashed, label="0"];
12->21 [style = dotted, label="true"];
9->17 [style = bold, label=""];
32->31 [style = bold, label=""];
6->3 [style = bold, label=""];
1->28 [style = solid, label="literal"];
22->1 [style = dotted, label="true"];
17->8 [style = dotted, label="true"];
14->6 [style = bold, label=""];
3->15 [style = bold, label=""];
26->28 [style = bold, label=""];
30->28 [style = bold, label=""];
1->6 [style = solid, label="literal"];
8->14 [style = dotted, label="true"];
8->7 [style = bold, label=""];
8->3 [style = dotted, label="true"];
5->1 [style = dotted, label="true"];
24->25 [style = dotted, label="true"];
13->9 [style = bold, label=""];
13->9 [style = solid, label="isOrdinalLiteral"];
17->7 [style = bold, label=""];
24->25 [style = bold, label=""];
23->28 [style = bold, label=""];
6->27 [style = dashed, label="0"];
1->0 [style = solid, label="literal"];
25->23 [style = solid, label="intValue"];
19->18 [style = bold, label=""];
1->30 [style = solid, label="literal"];
30->24 [style = bold, label=""];
27->31 [style = bold, label=""];
31->26 [style = solid, label="ordinal"];
4->8 [style = solid, label="intValue"];
18->0 [style = bold, label=""];
19->18 [style = dotted, label="true"];
9->7 [style = bold, label=""];
}
