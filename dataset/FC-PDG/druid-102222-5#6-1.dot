digraph {
6 [style = filled, label = "EasyMock.expect(responseHolder.getStatus()).andReturn(HttpResponseStatus.OK)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testGetStatus['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(status,results)@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "EasyMock.expect(responseHolder.getContent()).andReturn(StringUtils.format(\"\"%s\"\",status.toString())).anyTimes()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "verifyAll()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(new URL(\"http://test-host:1234/druid/worker/v1/chat/test-id/status\"),request.getUrl())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(null,request.getHeaders().get(\"X-Druid-Task-Id\").contains(\"test-id\"))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Request request = captured.getValue()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "EasyMock.expect(httpClient.go(EasyMock.capture(captured),EasyMock.anyObject(),EasyMock.eq(TEST_HTTP_TIMEOUT))).andReturn(Futures.immediateFuture(responseHolder))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Assert.assertEquals(HttpMethod.GET,request.getMethod())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testGetStatus['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Status status = Status.READING@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EasyMock.expect(httpClient.go(EasyMock.capture(captured),EasyMock.anyObject(),EasyMock.eq(TEST_HTTP_TIMEOUT))).andReturn(Futures.immediateFuture(responseHolder))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Capture<Request> captured = Capture.newInstance()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Status results = client.getStatus(TEST_ID)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testGetStatus['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "replayAll()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->3 [style = bold, label=""];
12->13 [style = bold, label=""];
1->5 [style = solid, label="status"];
3->6 [style = bold, label=""];
0->10 [style = bold, label=""];
11->0 [style = bold, label=""];
4->1 [style = bold, label=""];
10->5 [style = solid, label="results"];
6->9 [style = bold, label=""];
9->11 [style = bold, label=""];
10->8 [style = bold, label=""];
16->1 [style = bold, label=""];
7->12 [style = bold, label=""];
9->15 [style = bold, label=""];
11->15 [style = dashed, label="0"];
15->0 [style = bold, label=""];
14->1 [style = bold, label=""];
8->7 [style = bold, label=""];
2->5 [style = bold, label=""];
13->2 [style = bold, label=""];
}
