digraph {
11 [style = filled, label = "assertThat(representation.getString(\"extensions.x-isis-format\"),is(\"long\"))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "allowingObjectAdapterToReturn(Byte.valueOf((byte)123))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "allowingObjectSpecToReturnSpecIdFor()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "allowingObjectAdapterToReturn(12345678901234L)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "allowingObjectSpecToReturnSpecIdFor()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(representation.getString(\"format\"),is(\"int\"))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(representation.getString(\"extensions.x-isis-format\"),is(\"byte\"))@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "jsonValueEncoder.appendValueAndFormat(mockObjectAdapter,mockObjectSpec,representation,null,false)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "whenByteWrapper['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "allowingLogicalTypeReturnObjectTypeFor()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertThat(representation.getByte(\"value\"),is(Byte.valueOf((byte)123)))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "whenLongPrimitive['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "whenByteWrapper['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(representation.isIntegralNumber(\"value\"),is(true))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(representation.getLong(\"value\"),is(12345678901234L))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->13 [style = dashed, label="0"];
5->3 [style = bold, label=""];
9->3 [style = bold, label=""];
13->10 [style = bold, label=""];
10->0 [style = bold, label=""];
12->13 [style = bold, label=""];
5->9 [style = dashed, label="0"];
6->11 [style = dashed, label="0"];
3->10 [style = dashed, label="0"];
1->6 [style = bold, label=""];
7->1 [style = bold, label=""];
2->7 [style = bold, label=""];
1->11 [style = bold, label=""];
2->14 [style = bold, label=""];
4->5 [style = bold, label=""];
7->14 [style = dashed, label="0"];
3->0 [style = bold, label=""];
14->1 [style = bold, label=""];
0->2 [style = bold, label=""];
8->9 [style = bold, label=""];
}
