digraph {
12 [style = filled, label = "iterativeBackoff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "TestSubscriber<String> ts = new TestSubscriber<>(consumer)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "ts.assertNoErrors()@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "InOrder inOrder = inOrder(consumer)@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "inOrder.verify(consumer,times(1)).onNext(\"hello\")@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TestObserver<String> to = new TestObserver<>(consumer)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "inOrder.verify(consumer,times(1)).onComplete()@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "inOrder.verifyNoMoreInteractions()@@@50@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Observer<String> consumer = TestHelper.mockObserver()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Subscriber<String> consumer = TestHelper.mockSubscriber()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "inOrder.verify(consumer,never()).onError(any())@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Flowable<String> producer = Flowable.unsafeCreate(new Publisher<String>(){@Override public void subscribe(Subscriber<? super String> t1){t1.onSubscribe(new BooleanSubscription())System.out.println(count.get() + \" @ \" + String.valueOf(last - System.currentTimeMillis()))last = System.currentTimeMillis()if (count.getAndDecrement() == 0) {t1.onNext(\"hello\")t1.onComplete()}{t1.onError(new RuntimeException())}}})@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "to.awaitDone(5,TimeUnit.SECONDS)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ts.awaitDone(5,TimeUnit.SECONDS)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "producer.retryWhen(new Function<Flowable<? extends Throwable>,Flowable<Object>>(){@Override public Flowable<Object> apply(Flowable<? extends Throwable> attempts){return attempts.map(new Function<Throwable,Tuple>(){@Override public Tuple apply(Throwable n){return new Tuple(new Long(1),n)}}).scan(new BiFunction<Tuple,Tuple,Tuple>(){@Override public Tuple apply(Tuple t,Tuple n){return new Tuple(t.count + n.count,n.n)}}).flatMap(new Function<Tuple,Flowable<Object>>(){@Override public Flowable<Object> apply(Tuple t){System.out.println(\"Retry # \" + t.count)return t.count > 20? Flowable.error(t.n): Flowable.timer(t.count * 1L,TimeUnit.MILLISECONDS).cast()}})}}).subscribe(ts)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "to.assertNoErrors()@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "iterativeBackoff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Observable<String> producer = Observable.unsafeCreate(new ObservableSource<String>(){@Override public void subscribe(Observer<? super String> t1){t1.onSubscribe(Disposable.empty())System.out.println(count.get() + \" @ \" + String.valueOf(last - System.currentTimeMillis()))last = System.currentTimeMillis()if (count.getAndDecrement() == 0) {t1.onNext(\"hello\")t1.onComplete()}{t1.onError(new RuntimeException())}}})@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "producer.retryWhen(new Function<Observable<? extends Throwable>,Observable<Object>>(){@Override public Observable<Object> apply(Observable<? extends Throwable> attempts){return attempts.map(new Function<Throwable,Tuple>(){@Override public Tuple apply(Throwable n){return new Tuple(1L,n)}}).scan(new BiFunction<Tuple,Tuple,Tuple>(){@Override public Tuple apply(Tuple t,Tuple n){return new Tuple(t.count + n.count,n.n)}}).flatMap(new Function<Tuple,Observable<Long>>(){@Override public Observable<Long> apply(Tuple t){System.out.println(\"Retry # \" + t.count)return t.count > 20? Observable.error(t.n): Observable.timer(t.count * 1L,TimeUnit.MILLISECONDS)}}).cast()}}).subscribe(to)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "iterativeBackoff['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
5->8 [style = bold, label=""];
19->18 [style = bold, label=""];
13->10 [style = solid, label="consumer"];
4->6 [style = bold, label=""];
16->10 [style = bold, label=""];
9->18 [style = dashed, label="0"];
4->0 [style = solid, label="consumer"];
0->15 [style = dashed, label="0"];
6->0 [style = bold, label=""];
6->14 [style = dashed, label="0"];
15->19 [style = bold, label=""];
4->10 [style = solid, label="consumer"];
2->4 [style = bold, label=""];
0->3 [style = solid, label="to"];
8->7 [style = bold, label=""];
3->19 [style = dashed, label="0"];
3->9 [style = bold, label=""];
11->5 [style = bold, label=""];
12->4 [style = bold, label=""];
1->16 [style = dashed, label="0"];
13->15 [style = solid, label="consumer"];
14->15 [style = bold, label=""];
17->13 [style = bold, label=""];
15->19 [style = solid, label="ts"];
9->1 [style = bold, label=""];
4->13 [style = dashed, label="0"];
1->10 [style = bold, label=""];
13->14 [style = bold, label=""];
10->11 [style = bold, label=""];
18->16 [style = bold, label=""];
}
