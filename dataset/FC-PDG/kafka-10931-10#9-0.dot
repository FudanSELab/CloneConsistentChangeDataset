digraph {
5 [style = filled, label = "init()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",storeLevelGroup,threadIdTagKey,threadId,taskId.toString(),STORE_TYPE,ROLLUP_VALUE)))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)@@@7@@@['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "testMetrics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final JmxReporter reporter = new JmxReporter(\"kafka.streams\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "metrics.addReporter(reporter)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,thread-id=%s,task-id=%s,%s-state-id=%s\",\"scope\",Thread.currentThread().getName(),taskId.toString(),\"scope\",\"all\")))@@@7@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,thread-id=%s,task-id=%s,%s-state-id=%s\",\"scope\",threadId,taskId.toString(),\"scope\",\"all\")))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testMetrics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",storeLevelGroup,threadIdTagKey,threadId,taskId.toString(),STORE_TYPE,\"metered\")))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,thread-id=%s,task-id=%s,%s-state-id=%s\",\"scope\",threadId,taskId.toString(),\"scope\",\"metered\")))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,thread-id=%s,task-id=%s,%s-state-id=%s\",\"scope\",Thread.currentThread().getName(),taskId.toString(),\"scope\",\"metered\")))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "testMetrics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9->5 [style = bold, label=""];
0->11 [style = bold, label=""];
5->2 [style = bold, label=""];
3->5 [style = bold, label=""];
2->0 [style = bold, label=""];
4->1 [style = bold, label=""];
8->6 [style = bold, label=""];
1->10 [style = dashed, label="0"];
8->6 [style = dotted, label="true"];
12->5 [style = bold, label=""];
2->0 [style = solid, label="reporter"];
4->11 [style = dashed, label="0"];
7->8 [style = bold, label=""];
0->4 [style = bold, label=""];
11->10 [style = bold, label=""];
4->7 [style = dashed, label="0"];
0->7 [style = bold, label=""];
}
