digraph {
17 [style = filled, label = "tester.checkScalar(\"cardinality(multiset(1,2,3,2( multiset except distinct multiset(1()\",\"2\",\"INTEGER NOT NULL\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "tester.checkScalar(\"cardinality(multiset(1,2,3,2( multiset except all multiset(1()\",\"3\",\"INTEGER NOT NULL\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "tester.checkScalar(\"multiset(2( multiset intersect distinct multiset(1(\",\"((\",\"INTEGER NOT NULL MULTISET NOT NULL\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "tester.checkBoolean(\"(multiset(1,2,3( multiset except multiset(1() is empty\",Boolean.FALSE)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testIntersectOperator['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "tester.checkScalar(\"multiset(1( multiset intersect multiset(1(\",\"(1(\",\"INTEGER NOT NULL MULTISET NOT NULL\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "tester.setFor(SqlStdOperatorTable.MULTISET_INTERSECT,VM_EXPAND)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "tester.checkBoolean(\"(multiset(1,2,3,2( multiset except distinct multiset(1() submultiset of multiset(2, 3(\",Boolean.TRUE)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "tester.checkBoolean(\"(multiset(1,2,3,2( multiset except distinct multiset(1() submultiset of multiset(2, 3(\",Boolean.TRUE)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "tester.checkScalar(\"multiset(cast(null as integer), cast(null as integer)( \" + \"multiset intersect distinct multiset(cast(null as integer)(\",\"(null(\",\"INTEGER MULTISET NOT NULL\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "tester.checkScalar(\"multiset(cast(null as integer), cast(null as integer)( \" + \"multiset intersect distinct multiset(cast(null as integer)(\",\"(null(\",\"INTEGER MULTISET NOT NULL\")@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "tester.checkScalar(\"multiset(1,2,3( multiset except multiset(1(\",\"(2, 3(\",\"INTEGER NOT NULL MULTISET NOT NULL\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "tester.checkBoolean(\"(multiset(1,2,3,2( multiset except all multiset(1() submultiset of multiset(2, 2, 3(\",Boolean.TRUE)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "tester.checkScalar(\"multiset(2( multiset intersect all multiset(1(\",\"((\",\"INTEGER NOT NULL MULTISET NOT NULL\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "tester.checkScalar(\"multiset(1( multiset except multiset(1(\",\"((\",\"INTEGER NOT NULL MULTISET NOT NULL\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "tester.checkScalar(\"multiset(1, 1( multiset intersect distinct multiset(1, 1(\",\"(1(\",\"INTEGER NOT NULL MULTISET NOT NULL\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "tester.checkScalar(\"multiset(1( multiset except distinct multiset(1(\",\"((\",\"INTEGER NOT NULL MULTISET NOT NULL\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "tester.checkBoolean(\"(multiset(1( multiset except multiset(1() is empty\",Boolean.TRUE)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testIntersectOperator['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "tester.checkScalar(\"multiset(cast(null as integer), cast(null as integer)( \" + \"multiset intersect all multiset(cast(null as integer)(\",\"(null(\",\"INTEGER MULTISET NOT NULL\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "tester.checkScalar(\"multiset(1, 1( multiset intersect all multiset(1, 1(\",\"(1, 1(\",\"INTEGER NOT NULL MULTISET NOT NULL\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testExceptOperator['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "tester.checkScalar(\"multiset(2( multiset except multiset(1(\",\"(2(\",\"INTEGER NOT NULL MULTISET NOT NULL\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "tester.setFor(SqlStdOperatorTable.MULTISET_EXCEPT,VM_EXPAND)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "tester.checkScalar(\"multiset(1, 1( multiset intersect distinct multiset(1, 1(\",\"(1(\",\"INTEGER NOT NULL MULTISET NOT NULL\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->19 [style = dashed, label="0"];
16->18 [style = bold, label=""];
13->24 [style = bold, label=""];
3->1 [style = bold, label=""];
21->19 [style = bold, label=""];
6->20 [style = dashed, label="0"];
10->12 [style = dashed, label="0"];
12->20 [style = bold, label=""];
19->17 [style = bold, label=""];
2->9 [style = bold, label=""];
15->16 [style = bold, label=""];
4->21 [style = dashed, label="0"];
10->6 [style = bold, label=""];
0->22 [style = dashed, label="0"];
8->7 [style = bold, label=""];
24->14 [style = bold, label=""];
20->21 [style = bold, label=""];
6->4 [style = bold, label=""];
0->10 [style = bold, label=""];
11->0 [style = bold, label=""];
23->22 [style = bold, label=""];
5->0 [style = bold, label=""];
7->2 [style = bold, label=""];
22->12 [style = bold, label=""];
17->15 [style = bold, label=""];
18->13 [style = bold, label=""];
9->3 [style = bold, label=""];
4->8 [style = bold, label=""];
}
