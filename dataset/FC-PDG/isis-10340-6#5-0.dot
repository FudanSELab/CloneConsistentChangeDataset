digraph {
11 [style = filled, label = "setUp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "facetedMethod = FacetedMethod.createForProperty(,\"firstName\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "context.checking(new Expectations(){})@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "setUp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "setUpFacetedMethodAndParameter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(),facetedMethod.getMethod(),)@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "mockServicesInjector = context.mock()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "facetHolder = new IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(,\"firstName\"))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(,\"firstName\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "programmableReflector = new ProgrammableReflector()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "mockDeploymentCategoryProvider = context.mock()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "facetedMethod = FacetedMethod.createForProperty(,\"firstName\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "methodRemover = new ProgrammableMethodRemover()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "mockAuthenticationSessionProvider = context.mock()@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a3d5c5@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "context.checking(new Expectations(){})@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(),facetedMethod.getMethod(),)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "context.checking(new Expectations(){})@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "mockTranslationService = context.mock()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->10 [style = bold, label=""];
4->6 [style = bold, label=""];
5->0 [style = bold, label=""];
16->17 [style = bold, label=""];
7->12 [style = bold, label=""];
0->2 [style = bold, label=""];
1->7 [style = bold, label=""];
15->18 [style = bold, label=""];
8->9 [style = bold, label=""];
18->14 [style = bold, label=""];
12->3 [style = bold, label=""];
14->16 [style = bold, label=""];
9->1 [style = bold, label=""];
3->4 [style = bold, label=""];
13->5 [style = bold, label=""];
11->5 [style = bold, label=""];
2->8 [style = bold, label=""];
6->10 [style = bold, label=""];
7->3 [style = bold, label=""];
}
