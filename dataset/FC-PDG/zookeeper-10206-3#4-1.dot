digraph {
18 [style = filled, label = "testConnectWithSSLToNonStrictServer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "serverThread.start()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "secureClientSocket = connectWithSSL()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "secureClientSocket.getOutputStream().write(DATA_FROM_CLIENT)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "handshakeCompletedLock@@@16@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "byte(( buf = new byte((((@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "handshakeCompletedLock.wait(TIMEOUT)@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int bytesRead = sslSocket.getInputStream().read(buf,0,buf.length)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Socket secureClientSocket = null@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "byte(( buf = new byte((((@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "sslSocket.getOutputStream().write(DATA_FROM_CLIENT)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "!handshakeCompleted@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertTrue(handshakeCompleted)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertArrayEquals(DATA_TO_CLIENT,buf)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "badClientSocket = connectWithoutSSL()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(buf.length,bytesRead)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,true,DATA_TO_CLIENT)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,false,DATA_TO_CLIENT)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "{forceClose(badClientSocket)forceClose(secureClientSocket)serverThread.shutdown(TIMEOUT)}@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Socket sslSocket = connectWithSSL()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Socket badClientSocket = null@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "serverThread.start()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertArrayEquals(DATA_TO_CLIENT,buf)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Assert.assertTrue(handshakeCompleted)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testTLSDetectionNonBlockingStrictServerIdleClient['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertArrayEquals(DATA_TO_CLIENT,buf)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "secureClientSocket.getOutputStream().flush()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "sslSocket.getOutputStream().flush()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testConnectWithSSLToNonStrictServer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "!handshakeCompleted@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,true,DATA_TO_CLIENT)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "int bytesRead = secureClientSocket.getInputStream().read(buf,0,buf.length)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
11->20 [style = bold, label=""];
26->23 [style = solid, label="secureClientSocket"];
15->8 [style = solid, label="buf"];
5->9 [style = bold, label=""];
8->19 [style = bold, label=""];
0->19 [style = dashed, label="0"];
7->16 [style = dashed, label="0"];
16->6 [style = bold, label=""];
17->9 [style = bold, label=""];
2->3 [style = bold, label=""];
4->13 [style = bold, label=""];
11->4 [style = bold, label=""];
12->11 [style = bold, label=""];
27->30 [style = bold, label=""];
12->20 [style = bold, label=""];
18->17 [style = bold, label=""];
35->32 [style = bold, label=""];
25->4 [style = bold, label=""];
28->13 [style = bold, label=""];
6->24 [style = bold, label=""];
3->15 [style = bold, label=""];
29->23 [style = bold, label=""];
9->10 [style = bold, label=""];
8->24 [style = dashed, label="0"];
8->0 [style = solid, label="bytesRead"];
30->6 [style = bold, label=""];
4->14 [style = dotted, label="true"];
31->23 [style = solid, label="badClientSocket"];
15->7 [style = solid, label="buf"];
4->28 [style = bold, label=""];
28->14 [style = bold, label=""];
6->24 [style = solid, label="buf"];
34->22 [style = bold, label=""];
19->16 [style = bold, label=""];
0->7 [style = bold, label=""];
12->11 [style = dotted, label="true"];
20->21 [style = bold, label=""];
8->0 [style = bold, label=""];
6->20 [style = dotted, label="true"];
4->28 [style = dotted, label="true"];
31->26 [style = bold, label=""];
26->27 [style = bold, label=""];
13->21 [style = dashed, label="0"];
5->17 [style = dashed, label="0"];
6->4 [style = dotted, label="true"];
12->4 [style = bold, label=""];
24->11 [style = solid, label="bytesRead"];
4->20 [style = dashed, label="0"];
10->14 [style = solid, label="sslSocket"];
24->11 [style = bold, label=""];
7->6 [style = bold, label=""];
8->19 [style = solid, label="bytesRead"];
15->16 [style = solid, label="buf"];
14->29 [style = bold, label=""];
10->2 [style = bold, label=""];
6->25 [style = solid, label="buf"];
6->12 [style = dotted, label="true"];
22->35 [style = bold, label=""];
28->13 [style = dotted, label="true"];
33->34 [style = bold, label=""];
13->14 [style = bold, label=""];
15->8 [style = bold, label=""];
32->31 [style = bold, label=""];
11->25 [style = bold, label=""];
21->14 [style = bold, label=""];
6->12 [style = bold, label=""];
}
