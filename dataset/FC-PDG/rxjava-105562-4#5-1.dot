digraph {
2 [style = filled, label = "final int SIZE = 2000@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "withCombineLatestIssue1717['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "fail(\"timed out\")@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "withCombineLatestIssue1717['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Flowable<Long> timer = Flowable.interval(0,1,TimeUnit.MILLISECONDS).observeOn(Schedulers.newThread()).doOnEach(new Consumer<Notification<Long>>(){@Override public void accept(Notification<Long> n){if (count.incrementAndGet() >= SIZE) {latch.countDown()}}}).take(SIZE)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(SIZE,count.get())@@@24@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TestObserver<Long> to = new TestObserver<Long>()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "!latch.await(SIZE + 1000,TimeUnit.MILLISECONDS)@@@21@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Flowable.combineLatest(timer,Flowable.never(),new BiFunction<Long,Integer,Long>(){@Override public Long apply(Long t1,Integer t2){return t1}}).subscribe(ts)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final CountDownLatch latch = new CountDownLatch(1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Observable<Long> timer = Observable.interval(0,1,TimeUnit.MILLISECONDS).observeOn(Schedulers.newThread()).doOnEach(new Consumer<Notification<Long>>(){@Override public void accept(Notification<Long> n){if (count.incrementAndGet() >= SIZE) {latch.countDown()}}}).take(SIZE)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "TestSubscriber<Long> ts = new TestSubscriber<Long>()@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "TestSubscriber<Long> ts = new TestSubscriber<>()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "withCombineLatestIssue1717['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "!latch.await(SIZE + 2000,TimeUnit.MILLISECONDS)@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final AtomicInteger count = new AtomicInteger()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Observable.combineLatest(timer,Observable.never(),new BiFunction<Long,Integer,Long>(){@Override public Long apply(Long t1,Integer t2){return t1}}).subscribe(to)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->3 [style = bold, label=""];
4->3 [style = bold, label=""];
16->13 [style = bold, label=""];
9->16 [style = dashed, label="0"];
0->5 [style = dotted, label="true"];
9->0 [style = bold, label=""];
12->16 [style = solid, label="to"];
2->6 [style = bold, label=""];
10->3 [style = bold, label=""];
13->5 [style = dotted, label="true"];
12->16 [style = bold, label=""];
11->9 [style = bold, label=""];
1->9 [style = bold, label=""];
0->7 [style = bold, label=""];
11->9 [style = solid, label="ts"];
6->1 [style = bold, label=""];
1->12 [style = dashed, label="0"];
2->15 [style = solid, label="SIZE"];
2->7 [style = solid, label="SIZE"];
8->2 [style = bold, label=""];
6->15 [style = dashed, label="0"];
13->7 [style = bold, label=""];
1->11 [style = dashed, label="0"];
3->8 [style = bold, label=""];
6->11 [style = bold, label=""];
1->9 [style = solid, label="ts"];
2->15 [style = bold, label=""];
2->6 [style = solid, label="SIZE"];
0->13 [style = dashed, label="0"];
13->5 [style = bold, label=""];
5->7 [style = bold, label=""];
15->12 [style = bold, label=""];
0->5 [style = bold, label=""];
}
