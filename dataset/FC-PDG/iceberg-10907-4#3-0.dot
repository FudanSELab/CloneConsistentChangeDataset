digraph {
8 [style = filled, label = "Transaction replaceTxn = catalog.buildTable(tableIdent,schema).withProperty(\"key2\",\"value2\").withLocation(newLocation).replaceTransaction()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "PartitionSpec v1Expected = PartitionSpec.builderFor(table.schema()).alwaysNull(\"data\",\"data_bucket\").withSpecId(1).build()@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "Catalog cachingCatalog = CachingCatalog.wrap(catalog)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Table table = cachingCatalog.createTable(tableIdent,schema,spec,location,properties)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "ImmutableMap<String,String> properties = ImmutableMap.of(\"key1\",\"value1\",\"key2\",\"value2\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Table table = catalog.loadTable(tableIdent)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "replaceTxn.commitTransaction()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertNull(table.currentSnapshot())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "String location = temp.newFolder(\"tbl\").toString()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TableIdentifier tableIdent = TableIdentifier.of(DB_NAME,\"tbl\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Schema schema = new Schema(required(1,\"id\",Types.IntegerType.get(),\"unique ID\"),required(2,\"data\",Types.StringType.get()))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(\"Table should have a spec with one void field\",v1Expected,table.spec())@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "Assert.assertEquals(location,table.location())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(2,table.schema().columns().size())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testCreateTableWithCaching['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "createTxn.commitTransaction()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(\"value2\",table.properties().get(\"key2\"))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "String newLocation = temp.newFolder(\"tbl-2\").toString()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testReplaceTxnBuilder['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(1,table.spec().fields().size())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(\"value1\",table.properties().get(\"key1\"))@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "{cachingCatalog.dropTable(tableIdent)}@@@17@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "table = catalog.loadTable(tableIdent)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "PartitionSpec spec = PartitionSpec.builderFor(schema).bucket(\"data\",16).build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "{catalog.dropTable(tableIdent)}@@@23@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Assert.assertTrue(table.spec().isUnpartitioned())@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Transaction createTxn = catalog.buildTable(tableIdent,schema).withPartitionSpec(spec).withLocation(location).withProperty(\"key1\",\"value1\").createOrReplaceTransaction()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testReplaceTxnBuilder['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(\"value2\",table.properties().get(\"key2\"))@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Assert.assertEquals(newLocation,table.location())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->22 [style = solid, label="spec"];
5->19 [style = bold, label=""];
9->28 [style = solid, label="schema"];
25->3 [style = bold, label=""];
3->14 [style = bold, label=""];
19->22 [style = solid, label="v1Expected"];
18->2 [style = bold, label=""];
22->0 [style = bold, label=""];
7->9 [style = bold, label=""];
13->17 [style = bold, label=""];
4->11 [style = bold, label=""];
1->10 [style = solid, label="tableIdent"];
15->4 [style = bold, label=""];
28->26 [style = bold, label=""];
27->9 [style = bold, label=""];
19->22 [style = bold, label=""];
1->18 [style = bold, label=""];
14->11 [style = solid, label="newLocation"];
16->10 [style = bold, label=""];
5->13 [style = bold, label=""];
10->3 [style = bold, label=""];
9->6 [style = bold, label=""];
0->23 [style = bold, label=""];
23->21 [style = bold, label=""];
1->4 [style = solid, label="tableIdent"];
26->25 [style = bold, label=""];
3->17 [style = bold, label=""];
1->21 [style = solid, label="tableIdent"];
0->12 [style = bold, label=""];
14->8 [style = bold, label=""];
1->28 [style = solid, label="tableIdent"];
18->11 [style = solid, label="location"];
29->28 [style = solid, label="properties"];
2->16 [style = bold, label=""];
18->28 [style = solid, label="location"];
20->9 [style = bold, label=""];
29->24 [style = bold, label=""];
6->28 [style = solid, label="spec"];
24->28 [style = bold, label=""];
1->12 [style = solid, label="tableIdent"];
6->1 [style = bold, label=""];
17->0 [style = bold, label=""];
8->15 [style = bold, label=""];
11->5 [style = bold, label=""];
18->29 [style = bold, label=""];
18->26 [style = solid, label="location"];
}
