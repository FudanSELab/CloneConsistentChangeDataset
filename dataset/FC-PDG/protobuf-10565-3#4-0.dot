digraph {
18 [style = filled, label = "rng.nextBoolean()@@@13@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "output.write(bytes,position,count)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(\"size() returns the right value\",position,output.size())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testNewOutput_WriteChar['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "int count = 1 + rng.nextInt(bytes.length - position)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "ByteString byteString = output.toByteString()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testNewOutput_Mixed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "int(( bufferSizes = {0,1,128,256,length / 2,length - 1,length,length + 1,2 * length,3 * length}@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "output.write(bytes(position()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "position < bytes.length@@@12@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "byte(( bytes = getTestBytes()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ByteString.Output output = ByteString.newOutput(bufferSize)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "ByteString byteString = output.toByteString()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "byte(( bytes = getTestBytes()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(\"String built from newOutput() must contain the expected bytes\",isArrayRange(bytes,byteString.toByteArray(),0,bytes.length))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "position += count@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertWithMessage(\"String built from newOutput() must contain the expected bytes\").that(isArrayRange(bytes,byteString.toByteArray(),0,bytes.length)).isTrue()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "position++@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "output.write(byteValue)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(\"String built from newOutput() must contain the expected bytes\",isArrayRange(bytes,byteString.toByteArray(),0,bytes.length))@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "int length = bytes.length@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Random rng = new Random(1)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testNewOutput_WriteChar['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "int position = 0@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ByteString.Output output = ByteString.newOutput(bufferSize)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(\"newOutput() substring must have correct bytes\",isArrayRange(output.toByteString().toByteArray(),bytes,0,position))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->14 [style = solid, label="bytes"];
18->11 [style = dotted, label="true"];
0->3 [style = solid, label="length"];
16->15 [style = bold, label=""];
0->15 [style = solid, label="bytes"];
22->10 [style = solid, label="position"];
18->23 [style = dotted, label="false"];
15->13 [style = bold, label=""];
22->14 [style = solid, label="position"];
23->14 [style = solid, label="position"];
22->11 [style = solid, label="position"];
0->6 [style = bold, label=""];
25->13 [style = bold, label=""];
0->11 [style = solid, label="bytes"];
21->14 [style = solid, label="position"];
6->20 [style = solid, label="length"];
22->20 [style = solid, label="position"];
23->19 [style = solid, label="position"];
19->22 [style = solid, label="count"];
18->19 [style = dotted, label="true"];
18->19 [style = bold, label=""];
12->20 [style = bold, label=""];
23->20 [style = solid, label="position"];
6->25 [style = solid, label="length"];
19->11 [style = bold, label=""];
6->15 [style = solid, label="length"];
1->0 [style = bold, label=""];
23->12 [style = solid, label="position"];
7->3 [style = bold, label=""];
21->11 [style = solid, label="position"];
22->23 [style = solid, label="position"];
22->12 [style = solid, label="position"];
21->20 [style = solid, label="position"];
21->23 [style = solid, label="position"];
7->9 [style = bold, label=""];
8->1 [style = bold, label=""];
20->18 [style = bold, label=""];
6->5 [style = bold, label=""];
5->2 [style = bold, label=""];
3->5 [style = bold, label=""];
19->11 [style = solid, label="count"];
1->3 [style = solid, label="bytes"];
17->0 [style = bold, label=""];
21->20 [style = bold, label=""];
20->16 [style = bold, label=""];
21->19 [style = solid, label="position"];
14->23 [style = bold, label=""];
3->9 [style = dashed, label="0"];
0->12 [style = solid, label="bytes"];
10->12 [style = bold, label=""];
23->10 [style = solid, label="position"];
20->10 [style = dotted, label="true"];
24->17 [style = bold, label=""];
22->10 [style = bold, label=""];
0->6 [style = solid, label="length"];
11->22 [style = bold, label=""];
9->5 [style = bold, label=""];
23->10 [style = bold, label=""];
20->18 [style = dotted, label="true"];
4->1 [style = bold, label=""];
20->12 [style = dotted, label="true"];
18->22 [style = dotted, label="true"];
2->7 [style = bold, label=""];
13->21 [style = bold, label=""];
18->14 [style = bold, label=""];
18->14 [style = dotted, label="false"];
6->25 [style = bold, label=""];
6->19 [style = solid, label="length"];
22->19 [style = solid, label="position"];
23->11 [style = solid, label="position"];
}
