digraph {
6 [style = filled, label = "assume().that(graphIsMutable()).isTrue()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertThat(graph.removeEdge(N1,N3)).isTrue()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "removeEdge_oneOfMany['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "putEdge(N1,N2)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "putEdge(N1,N3)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "removeEdge_oneOfMany['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "removeEdge_oneOfMany['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "putEdge(N1,N4)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(graphAsMutableGraph.removeEdge(N1,N3)).isTrue()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertThat(graph.adjacentNodes(N1)).containsExactly(N2,N4)@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1->4 [style = bold, label=""];
7->5 [style = bold, label=""];
2->0 [style = bold, label=""];
8->6 [style = bold, label=""];
3->2 [style = bold, label=""];
9->2 [style = bold, label=""];
4->5 [style = bold, label=""];
0->1 [style = bold, label=""];
1->7 [style = bold, label=""];
4->7 [style = dashed, label="0"];
6->2 [style = bold, label=""];
}
