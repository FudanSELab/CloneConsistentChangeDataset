digraph {
8 [style = filled, label = "Assert.assertEquals(Meta.Frame.create(2,true,Lists.newArrayList(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@91ff0a,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@91ff17,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@91ff24,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@91ff31)),frame)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Meta.Frame frame = statement.execute().nextFrame(DruidStatement.START_OFFSET,6)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testSelectAllInFirstFrame['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "final DruidStatement statement = new DruidStatement(\"\",0,null,null).prepare(plannerFactory,sql,-1,AllowAllAuthenticator.ALLOW_ALL_RESULT)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final DruidStatement statement = new DruidStatement(\"\",0,null,sqlLifecycleFactory.factorize(),null).prepare(sql,-1,AllowAllAuthenticator.ALLOW_ALL_RESULT)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "final String sql = \"SELECT __time, cnt, dim1, dim2, m1 FROM druid.foo\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(statement.isDone())@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(Meta.Frame.create(0,true,Lists.newArrayList(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@91fe3d,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@91fe4a,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@91fe59,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@91fe66,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@91fe73,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@91fe80)),frame)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertTrue(statement.isDone())@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testSelectAllInFirstFrame['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testSelectSplitOverTwoFrames['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "frame = statement.nextFrame(2,10)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertFalse(statement.isDone())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(Meta.Frame.create(0,false,Lists.newArrayList(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@91fecf,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@91fedc)),frame)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Meta.Frame frame = statement.execute().nextFrame(DruidStatement.START_OFFSET,2)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
5->3 [style = bold, label=""];
6->3 [style = bold, label=""];
7->1 [style = bold, label=""];
0->2 [style = bold, label=""];
9->10 [style = bold, label=""];
11->9 [style = bold, label=""];
14->1 [style = bold, label=""];
3->0 [style = bold, label=""];
12->8 [style = solid, label="frame"];
1->6 [style = bold, label=""];
5->6 [style = dashed, label="0"];
10->12 [style = bold, label=""];
12->8 [style = bold, label=""];
1->5 [style = solid, label="sql"];
4->1 [style = bold, label=""];
5->11 [style = bold, label=""];
0->9 [style = dashed, label="0"];
3->0 [style = solid, label="frame"];
1->6 [style = solid, label="sql"];
3->11 [style = dashed, label="0"];
8->13 [style = bold, label=""];
11->9 [style = solid, label="frame"];
}
