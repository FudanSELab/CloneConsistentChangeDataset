digraph {
72 [style = filled, label = "TestOperator testOperator3 = new TestOperator()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testHarness2.processWatermark(10L)@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "testHarness2.processWatermark(0L)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "testHarness2.initializeState(snapshot)@@@39@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "testHarness2.setProcessingTime(20L)@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "KeyGroupRange subKeyGroupRange1 = new KeyGroupRange(0,(maxParallelism / 2) - 1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness1 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator1,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,2,0)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "testHarness2.initializeState(initState2)@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "testHarness.setProcessingTime(0L)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "testHarness1.processElement(new Tuple2<>(key1,\"SET_PROC_TIME_TIMER:30\"),0)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "testHarness3.setProcessingTime(30L)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "testHarness3.initializeState(repackagedState)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertTrue(extractResult(testHarness2).isEmpty())@@@51@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "testHarness.processWatermark(0L)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "testStateAndTimerStateShufflingScalingDown['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertThat(extractResult(testHarness1),contains(\"ON_PROC_TIME:HELLO\"))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "testHarness2.setup()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertTrue(extractResult(testHarness).isEmpty())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "testHarness3.setup()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testHarness1.setup()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testHarness1.setProcessingTime(20L)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "assertThat(extractResult(testHarness3),contains(\"ON_PROC_TIME:CIAO\"))@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testHarness2.processElement(new Tuple2<>(key2,\"SET_EVENT_TIME_TIMER:40\"),0)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(extractResult(testHarness2).isEmpty())@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testHarness.processElement(new Tuple2<>(key2,\"SET_PROC_TIME_TIMER:20\"),0)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "int key2 = getKeyInKeyGroupRange(subKeyGroupRange2,maxParallelism)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "OperatorSubtaskState initState2 = AbstractStreamOperatorTestHarness.repartitionOperatorState(snapshot,maxParallelism,1,2,1)@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "testHarness.processElement(new Tuple2<>(key1,\"SET_PROC_TIME_TIMER:10\"),0)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "OperatorSubtaskState initState1 = AbstractStreamOperatorTestHarness.repartitionOperatorState(snapshot,maxParallelism,1,2,0)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "assertThat(extractResult(testHarness3),contains(\"ON_PROC_TIME:HELLO\"))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "KeyGroupRange subKeyGroupRange2 = new KeyGroupRange(subKeyGroupRange1.getEndKeyGroup() + 1,maxParallelism - 1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testHarness.processElement(new Tuple2<>(key2,\"SET_STATE:CIAO\"),0)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testHarness2.processElement(new Tuple2<>(key2,\"SET_STATE:CIAO\"),0)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "testHarness.processElement(new Tuple2<>(key1,\"SET_STATE:HELLO\"),0)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness2 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator2,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,2,1)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testHarness2.processElement(new Tuple2<>(key2,\"SET_PROC_TIME_TIMER:40\"),0)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testHarness.processElement(new Tuple2<>(key1,\"SET_EVENT_TIME_TIMER:10\"),0)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testHarness.processElement(new Tuple2<>(key2,\"SET_EVENT_TIME_TIMER:20\"),0)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(testOperator,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,1,0)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "assertTrue(extractResult(testHarness3).isEmpty())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "testHarness3.open()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "TestOperator testOperator1 = new TestOperator()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness3 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator3,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,1,0)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(extractResult(testHarness2),contains(\"ON_EVENT_TIME:CIAO\"))@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "testHarness1.setProcessingTime(0L)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "testHarness.open()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "TestOperator testOperator = new TestOperator()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testHarness1.setProcessingTime(10L)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "assertThat(extractResult(testHarness3),contains(\"ON_EVENT_TIME:CIAO\"))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "testHarness2.setProcessingTime(0L)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "assertTrue(extractResult(testHarness3).isEmpty())@@@43@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertTrue(extractResult(testHarness2).isEmpty())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "final int maxParallelism = 10@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "testHarness3.setProcessingTime(40L)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "OperatorSubtaskState repackagedState = AbstractStreamOperatorTestHarness.repackageState(testHarness1.snapshot(0,0),testHarness2.snapshot(0,0))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "assertThat(extractResult(testHarness3),contains(\"ON_EVENT_TIME:HELLO\"))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "testHarness3.processWatermark(40L)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testStateAndTimerStateShufflingScalingUp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "OperatorSubtaskState snapshot = testHarness.snapshot(0,0)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testHarness1.processElement(new Tuple2<>(key1,\"SET_STATE:HELLO\"),0)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "int key1 = getKeyInKeyGroupRange(subKeyGroupRange1,maxParallelism)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testHarness1.open()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(extractResult(testHarness1),contains(\"ON_EVENT_TIME:HELLO\"))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testHarness1.processWatermark(20L)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "TestOperator testOperator2 = new TestOperator()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "testHarness1.processElement(new Tuple2<>(key1,\"SET_EVENT_TIME_TIMER:30\"),0)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testHarness2.setProcessingTime(10L)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "testHarness1.processWatermark(0L)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "testHarness3.processWatermark(30L)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "testHarness1.initializeState(initState1)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "testStateAndTimerStateShufflingScalingUp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
65 [style = filled, label = "testHarness2.open()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "assertTrue(extractResult(testHarness3).isEmpty())@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testHarness2.processWatermark(20L)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "testHarness1.initializeState(snapshot)@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
79 [style = filled, label = "assertTrue(extractResult(testHarness3).isEmpty())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "testHarness1.processWatermark(10L)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(extractResult(testHarness2),contains(\"ON_PROC_TIME:CIAO\"))@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59->54 [style = solid, label="testOperator2"];
15->25 [style = bold, label=""];
43->69 [style = solid, label="maxParallelism"];
20->0 [style = bold, label=""];
40->25 [style = bold, label=""];
33->20 [style = dashed, label="0"];
32->34 [style = bold, label=""];
69->68 [style = bold, label=""];
43->45 [style = solid, label="maxParallelism"];
0->7 [style = solid, label="testHarness2"];
11->9 [style = bold, label=""];
46->3 [style = solid, label="key2"];
36->81 [style = dashed, label="0"];
42->29 [style = bold, label=""];
8->0 [style = dashed, label="0"];
45->24 [style = bold, label=""];
49->22 [style = bold, label=""];
69->53 [style = solid, label="testHarness3"];
18->44 [style = bold, label=""];
10->12 [style = bold, label=""];
22->47 [style = bold, label=""];
79->61 [style = bold, label=""];
16->42 [style = bold, label=""];
73->56 [style = bold, label=""];
56->53 [style = bold, label=""];
75->78 [style = bold, label=""];
24->46 [style = bold, label=""];
46->13 [style = solid, label="key2"];
59->54 [style = bold, label=""];
17->20 [style = bold, label=""];
47->23 [style = solid, label="testHarness1"];
0->3 [style = bold, label=""];
8->28 [style = bold, label=""];
69->75 [style = solid, label="testHarness3"];
27->74 [style = dashed, label="0"];
25->36 [style = bold, label=""];
20->0 [style = solid, label="testOperator2"];
40->51 [style = dashed, label="0"];
54->77 [style = bold, label=""];
13->80 [style = bold, label=""];
65->66 [style = bold, label=""];
38->45 [style = bold, label=""];
12->35 [style = bold, label=""];
26->6 [style = bold, label=""];
34->49 [style = solid, label="snapshot"];
0->11 [style = solid, label="testHarness2"];
39->4 [style = bold, label=""];
46->16 [style = solid, label="key2"];
60->55 [style = bold, label=""];
7->33 [style = bold, label=""];
43->50 [style = solid, label="maxParallelism"];
69->70 [style = solid, label="testHarness3"];
46->29 [style = solid, label="key2"];
19->26 [style = bold, label=""];
29->32 [style = bold, label=""];
24->42 [style = solid, label="key1"];
31->41 [style = bold, label=""];
13->5 [style = bold, label=""];
51->25 [style = bold, label=""];
43->47 [style = solid, label="maxParallelism"];
48->13 [style = bold, label=""];
61->70 [style = bold, label=""];
37->13 [style = bold, label=""];
43->44 [style = solid, label="maxParallelism"];
33->8 [style = bold, label=""];
77->65 [style = bold, label=""];
2->43 [style = bold, label=""];
45->46 [style = solid, label="subKeyGroupRange2"];
44->30 [style = bold, label=""];
4->10 [style = bold, label=""];
23->31 [style = bold, label=""];
72->69 [style = bold, label=""];
3->37 [style = bold, label=""];
80->72 [style = bold, label=""];
34->49 [style = bold, label=""];
6->21 [style = bold, label=""];
62->75 [style = bold, label=""];
24->35 [style = solid, label="key1"];
53->79 [style = bold, label=""];
34->50 [style = solid, label="snapshot"];
34->37 [style = solid, label="snapshot"];
46->18 [style = bold, label=""];
46->12 [style = solid, label="key2"];
1->7 [style = bold, label=""];
80->57 [style = solid, label="repackagedState"];
43->54 [style = solid, label="maxParallelism"];
50->48 [style = solid, label="initState2"];
52->43 [style = bold, label=""];
49->51 [style = solid, label="initState1"];
17->50 [style = bold, label=""];
64->62 [style = bold, label=""];
43->38 [style = bold, label=""];
14->23 [style = bold, label=""];
22->47 [style = solid, label="testOperator1"];
18->44 [style = solid, label="testOperator"];
38->24 [style = solid, label="subKeyGroupRange1"];
74->60 [style = bold, label=""];
15->40 [style = bold, label=""];
43->0 [style = solid, label="maxParallelism"];
25->81 [style = bold, label=""];
36->19 [style = bold, label=""];
46->22 [style = bold, label=""];
21->14 [style = bold, label=""];
58->64 [style = bold, label=""];
24->20 [style = solid, label="key1"];
47->19 [style = solid, label="testHarness1"];
27->1 [style = bold, label=""];
35->16 [style = bold, label=""];
47->15 [style = bold, label=""];
55->20 [style = bold, label=""];
43->24 [style = solid, label="maxParallelism"];
37->48 [style = dashed, label="0"];
24->55 [style = solid, label="key1"];
28->11 [style = bold, label=""];
81->67 [style = bold, label=""];
50->20 [style = bold, label=""];
66->74 [style = bold, label=""];
57->73 [style = bold, label=""];
43->49 [style = solid, label="maxParallelism"];
70->63 [style = bold, label=""];
1->60 [style = dashed, label="0"];
9->80 [style = dashed, label="0"];
46->0 [style = solid, label="key2"];
28->3 [style = dashed, label="0"];
24->60 [style = solid, label="key1"];
34->22 [style = bold, label=""];
24->10 [style = solid, label="key1"];
43->38 [style = solid, label="maxParallelism"];
68->57 [style = bold, label=""];
41->17 [style = bold, label=""];
3->48 [style = bold, label=""];
71->43 [style = bold, label=""];
43->46 [style = solid, label="maxParallelism"];
72->69 [style = solid, label="testOperator3"];
63->76 [style = bold, label=""];
34->40 [style = solid, label="snapshot"];
3->13 [style = bold, label=""];
30->39 [style = bold, label=""];
5->66 [style = dashed, label="0"];
5->27 [style = bold, label=""];
76->58 [style = bold, label=""];
69->58 [style = solid, label="testHarness3"];
67->59 [style = bold, label=""];
15->51 [style = bold, label=""];
}
