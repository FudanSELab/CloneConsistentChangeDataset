digraph {
13 [style = filled, label = "KillSession.kill(curator.getZookeeperClient().getZooKeeper())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "testRecreatesNodeWhenItGetsDeleted['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Trigger createdWatchTrigger = Trigger.created()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "killSession(curator)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "node.waitForInitialCreate(timing.forWaiting().seconds(),TimeUnit.SECONDS)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testDeletesNodeWhenSessionDisconnects['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "testDeletesNodeWhenSessionDisconnects['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Trigger deletedTrigger = Trigger.deleted()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertNodeExists(curator,originalNode)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertTrue(deletedTrigger.firedWithin(timing.forWaiting().seconds(),TimeUnit.SECONDS))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "node.debugReconnectLatch = new CountDownLatch(1)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "{node.close()}@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertTrue(stat != null || createdWatchTrigger.firedWithin(timing.forWaiting().seconds(),TimeUnit.SECONDS))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "CuratorFramework observer = newCurator()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "{node.close()}@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertNodeExists(observer,node.getActualPath())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "PersistentEphemeralNode node = new PersistentEphemeralNode(curator,PersistentEphemeralNode.Mode.EPHEMERAL,PATH,new byte(((()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "curator.delete().forPath(originalNode)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "node.start()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "CuratorFramework curator = newCurator()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "node.debugReconnectLatch.countDown()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "String originalNode = node.getActualPath()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->10 [style = bold, label=""];
15->10 [style = bold, label=""];
10->2 [style = solid, label="curator"];
17->21 [style = solid, label="originalNode"];
21->19 [style = bold, label=""];
16->10 [style = bold, label=""];
0->12 [style = bold, label=""];
10->20 [style = solid, label="curator"];
8->14 [style = bold, label=""];
10->3 [style = bold, label=""];
17->20 [style = solid, label="originalNode"];
12->1 [style = bold, label=""];
3->0 [style = bold, label=""];
1->11 [style = bold, label=""];
6->2 [style = bold, label=""];
20->21 [style = bold, label=""];
11->5 [style = bold, label=""];
18->22 [style = bold, label=""];
5->17 [style = dashed, label="0"];
17->23 [style = solid, label="originalNode"];
0->1 [style = bold, label=""];
19->23 [style = bold, label=""];
6->13 [style = bold, label=""];
2->13 [style = dashed, label="0"];
10->0 [style = bold, label=""];
7->6 [style = bold, label=""];
8->9 [style = bold, label=""];
5->7 [style = bold, label=""];
11->17 [style = bold, label=""];
14->9 [style = bold, label=""];
23->18 [style = solid, label="stat"];
13->8 [style = bold, label=""];
10->0 [style = solid, label="curator"];
23->18 [style = bold, label=""];
3->5 [style = solid, label="observer"];
2->8 [style = bold, label=""];
17->20 [style = bold, label=""];
}
