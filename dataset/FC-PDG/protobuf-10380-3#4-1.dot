digraph {
2 [style = filled, label = "assertTrue(input.isAtEnd())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(value,input.readRawLittleEndian32())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertReadLittleEndian32['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "int value@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "int blockSize = 1@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "byte(( data@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "input = CodedInputStream.newInstance(new SmallBlockInputStream(data,blockSize))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertReadLittleEndian32['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "byte(( data@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "blockSize <= 16@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(input.isAtEnd())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int blockSize = 1@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(value,input.readRawLittleEndian64())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertReadLittleEndian64['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertTrue(inputType.name(),input.isAtEnd())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "long value@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(value,input.readRawLittleEndian32())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "int value@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(value,input.readRawLittleEndian64())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "blockSize *= 2@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "blockSize <= 16@@@5@@@['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "CodedInputStream input = CodedInputStream.newInstance(data)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->20 [style = dotted, label="true"];
7->2 [style = dotted, label="true"];
16->13 [style = bold, label=""];
20->1 [style = solid, label="data"];
15->13 [style = bold, label=""];
16->12 [style = dotted, label="true"];
11->8 [style = dashed, label="0"];
15->7 [style = bold, label=""];
17->1 [style = bold, label=""];
6->15 [style = solid, label="blockSize"];
13->7 [style = solid, label="blockSize"];
5->8 [style = solid, label="value"];
6->7 [style = solid, label="blockSize"];
8->14 [style = bold, label=""];
3->6 [style = bold, label=""];
0->11 [style = solid, label="value"];
4->18 [style = bold, label=""];
7->4 [style = bold, label=""];
5->4 [style = solid, label="data"];
18->2 [style = bold, label=""];
15->7 [style = dotted, label="true"];
7->8 [style = bold, label=""];
21->19 [style = solid, label="value"];
10->5 [style = dotted, label="true"];
15->14 [style = dotted, label="true"];
11->2 [style = bold, label=""];
1->9 [style = bold, label=""];
8->7 [style = bold, label=""];
6->15 [style = bold, label=""];
12->7 [style = solid, label="data"];
9->19 [style = dashed, label="0"];
21->18 [style = solid, label="value"];
20->4 [style = solid, label="data"];
15->8 [style = dotted, label="true"];
7->11 [style = dotted, label="true"];
2->14 [style = dashed, label="0"];
4->7 [style = dashed, label="0"];
11->18 [style = dashed, label="0"];
13->15 [style = solid, label="blockSize"];
15->6 [style = dotted, label="true"];
7->4 [style = dotted, label="true"];
16->5 [style = dotted, label="true"];
7->18 [style = dotted, label="true"];
5->21 [style = dashed, label="0"];
9->3 [style = bold, label=""];
6->4 [style = solid, label="blockSize"];
10->0 [style = dotted, label="true"];
8->4 [style = solid, label="blockSize"];
13->15 [style = bold, label=""];
8->7 [style = solid, label="blockSize"];
5->1 [style = solid, label="data"];
6->7 [style = bold, label=""];
4->11 [style = bold, label=""];
10->1 [style = bold, label=""];
1->19 [style = bold, label=""];
7->8 [style = dotted, label="true"];
17->21 [style = dotted, label="true"];
19->3 [style = bold, label=""];
14->6 [style = bold, label=""];
2->8 [style = bold, label=""];
0->9 [style = solid, label="value"];
}
