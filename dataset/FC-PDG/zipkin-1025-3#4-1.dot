digraph {
1 [style = filled, label = "String json = getAsString(\"/metrics\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "post(\"/api/v2/spans\",body)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "writeSpans_updatesMetrics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "double spansCount = registry.counter(\"zipkin_collector.spans\",\"transport\",\"http\").count()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(readDouble(json,\"$.('gauge.zipkin_collector.message_bytes.http'(\")).isEqualTo(body.length)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "byte(( body = SpanBytesEncoder.JSON_V2.encodeList(spans)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "double messagesDroppedCount = registry.counter(\"zipkin_collector.messages_dropped\",\"transport\",\"http\").count()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "double messagesCount = registry.counter(\"zipkin_collector.messages\",\"transport\",\"http\").count()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "writeSpans_updatesMetrics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "List<Span> spans = asList(LOTS_OF_SPANS(0(,LOTS_OF_SPANS(1(,LOTS_OF_SPANS(2()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "double messagesCount = registry.counter(\"zipkin_collector.messages\",\"transport\",\"http\").count()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(readDouble(json,\"$.('gauge.zipkin_collector.message_spans.http'(\")).isEqualTo(spans.size())@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "String json = getAsString(\"/metrics\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "writeSpans_malformedUpdatesMetrics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(readDouble(json,\"$.('counter.zipkin_collector.messages_dropped.http'(\")).isEqualTo(messagesDroppedCount + 1)@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "byte(( body = {'h','e','l','l','o'}@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(readDouble(json,\"$.('counter.zipkin_collector.spans.http'(\")).isEqualTo(spansCount + (spans.size() * 2))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(readDouble(json,\"$.('counter.zipkin_collector.messages.http'(\")).isEqualTo(messagesCount + 1)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "post(\"/api/v2/spans\",body)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(readDouble(json,\"$.('counter.zipkin_collector.bytes.http'(\")).isEqualTo(bytesCount + (body.length * 2))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12->7 [style = solid, label="bytesCount"];
17->16 [style = solid, label="body"];
0->9 [style = bold, label=""];
1->4 [style = bold, label=""];
7->11 [style = bold, label=""];
1->8 [style = bold, label=""];
7->18 [style = dashed, label="0"];
11->6 [style = bold, label=""];
19->18 [style = solid, label="messagesDroppedCount"];
4->18 [style = bold, label=""];
3->6 [style = solid, label="spansCount"];
4->7 [style = bold, label=""];
13->1 [style = bold, label=""];
19->16 [style = bold, label=""];
0->1 [style = solid, label="body"];
5->0 [style = solid, label="spans"];
17->12 [style = bold, label=""];
15->17 [style = bold, label=""];
12->19 [style = dashed, label="0"];
0->13 [style = solid, label="body"];
5->0 [style = bold, label=""];
16->1 [style = bold, label=""];
6->10 [style = bold, label=""];
9->4 [style = solid, label="messagesCount"];
3->13 [style = bold, label=""];
12->3 [style = bold, label=""];
9->12 [style = bold, label=""];
8->4 [style = bold, label=""];
12->19 [style = bold, label=""];
2->5 [style = bold, label=""];
14->5 [style = bold, label=""];
12->4 [style = solid, label="messagesCount"];
}
