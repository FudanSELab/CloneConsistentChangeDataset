digraph {
12 [style = filled, label = "expected.addAll(ars.getRangeAddresses(tmd.cloneOnlyTokenMap()).get(replica.range()).endpoints())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(expected,neighbors)@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Collection<Range<Token>> ranges = StorageService.instance.getLocalRanges(KEYSPACE5)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "TokenMetadata tmd = StorageService.instance.getTokenMetadata()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testGetNeighborsPlusOne['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "neighbors.addAll(ActiveRepairService.getNeighbors(KEYSPACE5,ranges,range,null,null))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "Set<InetAddressAndPort> neighbors = new HashSet<>()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "AbstractReplicationStrategy ars = Keyspace.open(KEYSPACE5).getReplicationStrategy()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(expected,neighbors)@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "addTokens(2 * Keyspace.open(KEYSPACE5).getReplicationStrategy().getReplicationFactor())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "neighbors.addAll(ActiveRepairService.getNeighbors(KEYSPACE5,ranges,range,null,null))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Set<InetAddressAndPort> expected = new HashSet<>()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Collection<Range<Token>> ranges = StorageService.instance.getLocalRanges(KEYSPACE5)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "expected.remove(FBUtilities.getBroadcastAddressAndPort())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "neighbors.addAll(ActiveRepairService.getNeighbors(KEYSPACE5,ranges,range,null,null).endpoints())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Set<InetAddressAndPort> neighbors = new HashSet<>()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testGetNeighborsTimesTwo['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "testGetNeighborsTimesTwo['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expected.addAll(ars.getRangeAddresses(tmd.cloneOnlyTokenMap()).get(replicaRange))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "addTokens(2 * Keyspace.open(KEYSPACE5).getReplicationStrategy().getReplicationFactor().allReplicas)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Set<InetAddressAndPort> expected = addTokens(1 + Keyspace.open(KEYSPACE5).getReplicationStrategy().getReplicationFactor())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Iterable<Range<Token>> ranges = StorageService.instance.getLocalReplicas(KEYSPACE5).ranges()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3->1 [style = solid, label="expected"];
10->15 [style = dashed, label="0"];
0->9 [style = bold, label=""];
16->18 [style = bold, label=""];
20->17 [style = bold, label=""];
21->19 [style = bold, label=""];
2->3 [style = bold, label=""];
7->11 [style = dashed, label="0"];
8->12 [style = dashed, label="0"];
3->12 [style = bold, label=""];
20->0 [style = solid, label="neighbors"];
12->0 [style = bold, label=""];
11->2 [style = bold, label=""];
6->15 [style = bold, label=""];
9->6 [style = bold, label=""];
19->16 [style = bold, label=""];
6->1 [style = solid, label="neighbors"];
8->0 [style = bold, label=""];
18->20 [style = bold, label=""];
0->14 [style = bold, label=""];
17->0 [style = bold, label=""];
9->14 [style = dashed, label="0"];
7->2 [style = bold, label=""];
3->8 [style = bold, label=""];
6->10 [style = bold, label=""];
13->5 [style = bold, label=""];
5->7 [style = bold, label=""];
5->11 [style = bold, label=""];
19->0 [style = solid, label="expected"];
18->17 [style = solid, label="ranges"];
10->1 [style = bold, label=""];
4->5 [style = bold, label=""];
14->6 [style = bold, label=""];
15->1 [style = bold, label=""];
9->10 [style = solid, label="ranges"];
}
