digraph {
10 [style = filled, label = "sharingValueMap.put(\"type\",Collections.singletonList(2))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "List<String> availableTargetNames = Lists.newArrayList(\"t_order_0_0\",\"t_order_0_1\",\"t_order_1_0\",\"t_order_1_1\")@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(actual.containsAll(availableTargetNames))@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertDoSharding['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertTrue(actual.size() == 1 && actual.contains(\"t_order_0_0\"))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "sharingValueMap.put(\"type\",Arrays.asList(1,2))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertDoShardingWithMultiValue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Collection<String> actual = complexInlineShardingAlgorithm.doSharding(availableTargetNames,shardingValue)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "List<String> availableTargetNames = Arrays.asList(\"t_order_0_0\",\"t_order_0_1\",\"t_order_1_0\",\"t_order_1_1\")@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "sharingValueMap.put(\"order_id\",Collections.singletonList(2))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ComplexKeysShardingValue<Comparable<?>> shardingValue = new ComplexKeysShardingValue<>(\"t_order\",sharingValueMap,Collections.emptyMap())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertDoShardingWithMultiValue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Map<String,Collection<Comparable<?>>> sharingValueMap = new HashMap<>(2,1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "sharingValueMap.put(\"order_id\",Arrays.asList(1,2))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->7 [style = solid, label="shardingValue"];
4->6 [style = bold, label=""];
0->4 [style = bold, label=""];
13->4 [style = bold, label=""];
3->10 [style = dashed, label="0"];
5->1 [style = bold, label=""];
8->2 [style = solid, label="availableTargetNames"];
11->1 [style = bold, label=""];
10->11 [style = bold, label=""];
8->6 [style = bold, label=""];
4->7 [style = solid, label="availableTargetNames"];
3->5 [style = bold, label=""];
5->11 [style = dashed, label="0"];
6->10 [style = bold, label=""];
7->12 [style = bold, label=""];
8->7 [style = solid, label="availableTargetNames"];
6->1 [style = solid, label="sharingValueMap"];
6->3 [style = bold, label=""];
4->8 [style = dashed, label="0"];
4->2 [style = solid, label="availableTargetNames"];
1->7 [style = bold, label=""];
9->8 [style = bold, label=""];
2->12 [style = dashed, label="0"];
7->2 [style = bold, label=""];
}
