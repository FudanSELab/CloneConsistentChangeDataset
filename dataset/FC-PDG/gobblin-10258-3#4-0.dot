digraph {
13 [style = filled, label = "testUpdateSpec['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertTrue(consumedEvent.size() == 1,\"Consumption did not match production\")@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "String updatedSpecUriString = \"/foo/bar/updatedSpec\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertTrue(consumedSpecAction.getValue() instanceof JobSpec,\"Expected JobSpec\")@@@18@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Thread.currentThread().interrupt()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "log.info(\"WriteResponse: \" + writeResponse)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Thread.sleep(1000)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertTrue(consumedSpecAction.getValue().getUri().toString().equals(specUriString),\"Expected URI did not match\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertTrue(consumedSpecAction.getValue().getUri().toString().equals(updatedSpecUriString),\"Expected URI did not match\")@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Spec spec = initJobSpec(updatedSpecUriString)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertTrue(consumedSpecAction.getKey().equals(SpecExecutor.Verb.UPDATE),\"Verb did not match\")@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testUpdateSpec['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Map.Entry<SpecExecutor.Verb,Spec> consumedSpecAction = consumedEvent.get(0)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testUpdateSpec['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "InterruptedException ex@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "WriteResponse writeResponse = (WriteResponse)_seip.updateSpec(spec).get()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String updatedSpecUriString = \"/foo/bar/addedSpec\"@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "List<Pair<SpecExecutor.Verb,Spec>> consumedEvent = _seic.changedSpecs().get()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
10->8 [style = solid, label="updatedSpecUriString"];
9->0 [style = bold, label=""];
16->8 [style = bold, label=""];
17->6 [style = bold, label=""];
7->10 [style = bold, label=""];
16->5 [style = solid, label="updatedSpecUriString"];
16->8 [style = solid, label="updatedSpecUriString"];
0->11 [style = bold, label=""];
15->6 [style = bold, label=""];
2->9 [style = bold, label=""];
13->16 [style = bold, label=""];
10->5 [style = solid, label="updatedSpecUriString"];
1->17 [style = bold, label=""];
6->2 [style = bold, label=""];
14->15 [style = dotted, label="true"];
1->6 [style = bold, label=""];
10->8 [style = bold, label=""];
12->4 [style = bold, label=""];
5->11 [style = dashed, label="0"];
11->3 [style = bold, label=""];
14->15 [style = bold, label=""];
4->1 [style = bold, label=""];
10->16 [style = dashed, label="0"];
8->4 [style = bold, label=""];
4->1 [style = solid, label="writeResponse"];
0->5 [style = bold, label=""];
}
