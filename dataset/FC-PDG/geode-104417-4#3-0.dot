digraph {
17 [style = filled, label = "connectionManager.start(backgroundProcessor)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "when(connection2.getEndpoint()).thenReturn(endpoint2)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "when(endpoint2.getLocation()).thenReturn(serverLocation2)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "connectionManager.close(false)@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Endpoint endpoint2 = mock()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "connectionManager = createDefaultConnectionManager()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Connection heldConnection2 = connectionManager.borrowConnection(serverLocation2,false)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "ServerLocation serverLocation2 = mock()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "when(connectionFactory.createClientToServerConnection(serverLocation1,false)).thenReturn(connection1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Connection connection1 = mock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "connectionManager.returnConnection(heldConnection1,true)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Connection heldConnection1 = connectionManager.borrowConnection(serverLocation1,false)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "when(connectionFactory.createClientToServerConnection(serverLocation2,false)).thenReturn(connection2)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(connectionManager.borrowConnection(timeout).getServer()).isEqualTo(connection2.getServer())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "heldConnection2 = connectionManager.exchangeConnection(heldConnection1,excluded)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "returnConnectionReturnsToHead['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "ServerLocation serverLocation1 = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "when(connection2.getServer()).thenReturn(serverLocation2)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "exchangeReturnsExistingConnectionIfOneExists['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertThat(heldConnection2.getServer()).isEqualTo(connection2.getServer())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "when(connection1.getServer()).thenReturn(serverLocation1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Connection connection2 = mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "heldConnection2 = connectionManager.exchangeConnection(heldConnection1,excluded,timeout)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Connection heldConnection1 = connectionManager.borrowConnection(serverLocation1,timeout,false)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "connectionManager.returnConnection(heldConnection2,true)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "exchangeReturnsExistingConnectionIfOneExists['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Connection heldConnection2 = connectionManager.borrowConnection(serverLocation2,timeout,false)@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "connectionManager.close(false)@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Set<ServerLocation> excluded = Collections.emptySet()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "connectionManager.returnConnection(heldConnection2)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(connectionManager.getConnectionCount()).isEqualTo(2)@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12->21 [style = solid, label="serverLocation2"];
16->3 [style = bold, label=""];
26->9 [style = solid, label="serverLocation1"];
16->18 [style = bold, label=""];
14->30 [style = bold, label=""];
10->19 [style = bold, label=""];
17->9 [style = bold, label=""];
12->15 [style = solid, label="serverLocation2"];
13->14 [style = solid, label="connection1"];
23->4 [style = bold, label=""];
26->14 [style = solid, label="serverLocation1"];
26->8 [style = bold, label=""];
10->0 [style = solid, label="connection2"];
7->20 [style = bold, label=""];
25->29 [style = bold, label=""];
1->5 [style = solid, label="heldConnection1"];
3->22 [style = bold, label=""];
2->4 [style = bold, label=""];
16->21 [style = dashed, label="0"];
18->28 [style = bold, label=""];
4->5 [style = solid, label="excluded"];
11->18 [style = bold, label=""];
19->0 [style = bold, label=""];
0->7 [style = bold, label=""];
30->0 [style = solid, label="serverLocation2"];
15->17 [style = bold, label=""];
3->5 [style = bold, label=""];
12->10 [style = bold, label=""];
30->12 [style = bold, label=""];
8->13 [style = solid, label="connection1"];
24->21 [style = bold, label=""];
18->6 [style = bold, label=""];
8->1 [style = solid, label="serverLocation1"];
1->16 [style = bold, label=""];
21->3 [style = solid, label="heldConnection2"];
1->24 [style = dashed, label="0"];
30->1 [style = solid, label="serverLocation2"];
16->3 [style = solid, label="heldConnection2"];
14->12 [style = bold, label=""];
4->22 [style = solid, label="excluded"];
10->7 [style = solid, label="endpoint2"];
28->25 [style = bold, label=""];
4->8 [style = bold, label=""];
12->7 [style = solid, label="serverLocation2"];
24->22 [style = solid, label="heldConnection1"];
9->18 [style = solid, label="heldConnection1"];
5->11 [style = bold, label=""];
8->24 [style = solid, label="serverLocation1"];
19->20 [style = solid, label="endpoint2"];
12->19 [style = solid, label="connection2"];
5->22 [style = dashed, label="0"];
30->20 [style = solid, label="serverLocation2"];
9->1 [style = bold, label=""];
12->16 [style = solid, label="serverLocation2"];
20->15 [style = bold, label=""];
13->14 [style = bold, label=""];
9->24 [style = bold, label=""];
22->11 [style = bold, label=""];
8->13 [style = bold, label=""];
21->3 [style = bold, label=""];
27->26 [style = bold, label=""];
1->28 [style = solid, label="heldConnection2"];
}
