digraph {
0 [style = filled, label = "final StreamExecutionEnvironment env = buildStreamEnv()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "env.fromCollection(SOURCE_DATA).sinkTo(TestSink.newBuilder().setDefaultCommitter((Supplier<Queue<String>>)null).build())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "GLOBAL_COMMIT_QUEUE.remove(END_OF_INPUT_STR)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "env.execute()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final StreamExecutionEnvironment env = buildBatchEnv()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "writerAndGlobalCommitterExecuteInStreamingMode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertThat(getSplittedGlobalCommittedData(),containsInAnyOrder(EXPECTED_GLOBAL_COMMITTED_DATA_IN_STREAMING_MODE.toArray()))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "writerAndGlobalCommitterExecuteInStreamingMode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(COMMIT_QUEUE,containsInAnyOrder(EXPECTED_COMMITTED_DATA_IN_BATCH_MODE.toArray()))@@@6@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "writerAndCommitterExecuteInBatchMode['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final FiniteTestSource<Integer> source = new FiniteTestSource<>(GLOBAL_COMMIT_QUEUE_RECEIVE_ALL_DATA,SOURCE_DATA)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "env.addSource(source,IntegerTypeInfo.INT_TYPE_INFO).sinkTo(TestSink.newBuilder().setCommittableSerializer(TestSink.StringCommittableSerializer.INSTANCE).setGlobalCommitter((Supplier<Queue<String>>)null).build())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->5 [style = bold, label=""];
0->1 [style = bold, label=""];
6->0 [style = bold, label=""];
8->11 [style = bold, label=""];
11->2 [style = bold, label=""];
9->10 [style = bold, label=""];
10->8 [style = bold, label=""];
1->3 [style = bold, label=""];
0->10 [style = dashed, label="0"];
5->2 [style = dashed, label="0"];
3->2 [style = bold, label=""];
2->7 [style = bold, label=""];
4->0 [style = bold, label=""];
2->5 [style = bold, label=""];
}
