digraph {
6 [style = filled, label = "fos1.close()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(TEST_STRING,new String(Files.readAllBytes(dstFile.toPath()),UTF_8))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "testAbortExistingFile['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "AtomicFileOutputStream fos2 = new AtomicFileOutputStream(dstFile)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "FileOutputStream fos1 = new FileOutputStream(dstFile)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testAbortExistingFile['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertEquals(TEST_STRING,ClientBase.readFile(dstFile))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(1,testDir.list().length)@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "fos2.write(TEST_STRING_2.getBytes())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "fos2.abort()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "fos2.flush()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "fos1.write(TEST_STRING.getBytes())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testAbortExistingFileAfterFlush['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9->5 [style = bold, label=""];
6->1 [style = bold, label=""];
5->7 [style = bold, label=""];
11->5 [style = bold, label=""];
10->2 [style = bold, label=""];
1->2 [style = bold, label=""];
2->0 [style = bold, label=""];
3->5 [style = bold, label=""];
12->10 [style = bold, label=""];
8->4 [style = bold, label=""];
0->8 [style = dashed, label="0"];
0->4 [style = bold, label=""];
7->6 [style = bold, label=""];
2->8 [style = bold, label=""];
1->12 [style = bold, label=""];
}
