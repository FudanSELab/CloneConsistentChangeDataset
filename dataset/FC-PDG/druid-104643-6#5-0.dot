digraph {
6 [style = filled, label = "Assert.assertTrue(factory.isSplittable())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testSimple['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(\"sum\",expectedSum,sum)@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "count++@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "int count = 0@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(\"count\",expectedCount,count)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final List<InputSplit<List<WindowedSegmentId>>> splits = factory.getSplits().collect(Collectors.toList())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "testSplit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(segmentCount,numSplits)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testSplit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "final InputRow row = firehose.nextRow()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "count++@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "firehose.hasMore()@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "sum += row.getMetric(METRICS(0().longValue()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(\"count\",expectedCount,count)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final int numSplits = factory.getNumSplits()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "sum += row.getMetric(METRICS(0().longValue()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(\"sum\",expectedSum,sum)@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final int numSplits = factory.getNumSplits(null)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "long sum = 0@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final InputRow row = firehose.nextRow()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final FiniteFirehoseFactory<InputRowParser,List<WindowedSegmentId>> splitFactory = factory.withSplit(split)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final List<InputSplit<List<WindowedSegmentId>>> splits = factory.getSplits(null).collect(Collectors.toList())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assert.assertEquals(numSplits,splits.size())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->16 [style = bold, label=""];
7->2 [style = dotted, label="true"];
19->14 [style = dotted, label="true"];
0->9 [style = bold, label=""];
1->8 [style = bold, label=""];
21->19 [style = bold, label=""];
10->14 [style = bold, label=""];
16->10 [style = bold, label=""];
17->6 [style = bold, label=""];
14->0 [style = solid, label="count"];
1->15 [style = dashed, label="0"];
5->0 [style = solid, label="count"];
11->4 [style = bold, label=""];
8->3 [style = bold, label=""];
12->9 [style = solid, label="sum"];
15->10 [style = solid, label="numSplits"];
7->0 [style = bold, label=""];
14->5 [style = solid, label="count"];
7->4 [style = bold, label=""];
11->19 [style = bold, label=""];
15->8 [style = solid, label="numSplits"];
12->7 [style = bold, label=""];
4->7 [style = bold, label=""];
6->15 [style = bold, label=""];
7->12 [style = dotted, label="true"];
1->10 [style = solid, label="numSplits"];
7->5 [style = dotted, label="true"];
20->21 [style = bold, label=""];
14->23 [style = solid, label="count"];
6->1 [style = bold, label=""];
3->10 [style = bold, label=""];
18->20 [style = bold, label=""];
21->7 [style = solid, label="sum"];
1->8 [style = solid, label="numSplits"];
20->23 [style = solid, label="count"];
5->12 [style = bold, label=""];
7->2 [style = bold, label=""];
19->11 [style = dotted, label="true"];
19->23 [style = bold, label=""];
19->22 [style = dotted, label="true"];
23->7 [style = bold, label=""];
13->6 [style = bold, label=""];
11->7 [style = solid, label="sum"];
22->14 [style = bold, label=""];
14->11 [style = bold, label=""];
19->22 [style = bold, label=""];
15->8 [style = bold, label=""];
20->14 [style = solid, label="count"];
3->16 [style = dashed, label="0"];
2->5 [style = bold, label=""];
11->9 [style = solid, label="sum"];
}
