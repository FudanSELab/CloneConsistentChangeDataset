digraph {
5 [style = filled, label = "assertThat(new DependencyLinker(logger).putTrace(singleHostSpans).link()).containsOnly(DependencyLink.newBuilder().parent(\"web\").child(\"app\").callCount(1L).build())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "missingSpan['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "List<Span> singleHostSpans = asList(span2(\"a\",null,\"a\",Kind.SERVER,\"web\",null,false),span2(\"a\",\"a\",\"b\",Kind.CLIENT,\"app\",null,false))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "linksSingleHostSpans['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<Span> singleHostSpans = asList(span(\"a\",null,\"a\",Kind.CLIENT,\"web\",null,false),span(\"a\",\"a\",\"b\",Kind.SERVER,\"app\",null,false))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertThat(messages).contains(\"detected missing link to client span\")@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(new DependencyLinker().putTrace(singleHostSpans).link()).containsOnly(DependencyLink.newBuilder().parent(\"web\").child(\"app\").callCount(1L).build())@@@4@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "linksSingleHostSpans['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "List<Span> singleHostSpans = asList(span2(\"a\",null,\"a\",Kind.CLIENT,\"web\",null,false),span2(\"a\",\"a\",\"b\",Kind.SERVER,\"app\",null,false))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5->7 [style = bold, label=""];
4->3 [style = bold, label=""];
1->8 [style = dashed, label="0"];
2->5 [style = dashed, label="0"];
1->2 [style = bold, label=""];
1->3 [style = dashed, label="0"];
8->5 [style = bold, label=""];
3->2 [style = bold, label=""];
0->1 [style = bold, label=""];
6->8 [style = bold, label=""];
}
