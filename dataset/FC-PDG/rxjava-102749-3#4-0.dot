digraph {
12 [style = filled, label = "assertNotNull(receivedException.get())@@@31@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "verify(observer,Mockito.never()).onNext(\"two\")@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "resumeNextWithSynchronousExecution['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "resumeNextWithSynchronousExecution['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "verify(observer,Mockito.never()).onError(any())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "resumeNextWithSynchronousExecution['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "verify(observer,Mockito.never()).onNext(\"three\")@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "verify(subscriber,times(1)).onComplete()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Flowable<String> w = Flowable.unsafeCreate(new Publisher<String>(){@Override public void subscribe(Subscriber<? super String> subscriber){subscriber.onSubscribe(new BooleanSubscription())subscriber.onNext(\"one\")subscriber.onError(new Throwable(\"injected failure\"))subscriber.onNext(\"two\")subscriber.onNext(\"three\")}})@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "verify(subscriber,times(1)).onNext(\"twoResume\")@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "verify(subscriber,Mockito.never()).onNext(\"two\")@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Function<Throwable,Observable<String>> resume = new Function<Throwable,Observable<String>>(){@Override public Observable<String> apply(Throwable t1){receivedException.set(t1)return Observable.just(\"twoResume\",\"threeResume\")}}@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Function<Throwable,Flowable<String>> resume = new Function<Throwable,Flowable<String>>(){@Override public Flowable<String> apply(Throwable t1){receivedException.set(t1)return Flowable.just(\"twoResume\",\"threeResume\")}}@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Observer<String> observer = TestHelper.mockObserver()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Observable<String> w = Observable.unsafeCreate(new ObservableSource<String>(){@Override public void subscribe(Observer<? super String> observer){observer.onSubscribe(Disposable.empty())observer.onNext(\"one\")observer.onError(new Throwable(\"injected failure\"))observer.onNext(\"two\")observer.onNext(\"three\")}})@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Observable<String> observable = w.onErrorResumeNext(resume)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "verify(subscriber,times(1)).onNext(\"one\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "verify(observer,times(1)).onComplete()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "verify(subscriber,times(1)).onNext(\"threeResume\")@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "verify(subscriber,Mockito.never()).onError(any())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "verify(observer,times(1)).onNext(\"twoResume\")@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "verify(subscriber,Mockito.never()).onNext(\"three\")@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "verify(observer,times(1)).onNext(\"threeResume\")@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Flowable<String> flowable = w.onErrorResumeNext(resume)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "verify(observer,times(1)).onNext(\"one\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "observable.subscribe(observer)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final AtomicReference<Throwable> receivedException = new AtomicReference<Throwable>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "flowable.subscribe(subscriber)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Subscriber<String> subscriber = TestHelper.mockSubscriber()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13->26 [style = dashed, label="0"];
26->21 [style = bold, label=""];
21->22 [style = bold, label=""];
20->16 [style = bold, label=""];
3->22 [style = dashed, label="0"];
24->20 [style = bold, label=""];
0->7 [style = bold, label=""];
16->19 [style = bold, label=""];
3->4 [style = solid, label="observer"];
13->8 [style = solid, label="resume"];
22->25 [style = solid, label="subscriber"];
26->21 [style = solid, label="resume"];
19->23 [style = bold, label=""];
11->19 [style = dashed, label="0"];
18->26 [style = bold, label=""];
11->2 [style = bold, label=""];
4->25 [style = dashed, label="0"];
8->3 [style = bold, label=""];
1->11 [style = bold, label=""];
14->1 [style = bold, label=""];
7->13 [style = bold, label=""];
8->21 [style = dashed, label="0"];
15->0 [style = bold, label=""];
6->14 [style = bold, label=""];
27->17 [style = bold, label=""];
22->25 [style = bold, label=""];
17->24 [style = bold, label=""];
23->12 [style = bold, label=""];
4->9 [style = bold, label=""];
14->20 [style = dashed, label="0"];
6->24 [style = dashed, label="0"];
2->23 [style = dashed, label="0"];
1->16 [style = dashed, label="0"];
13->8 [style = bold, label=""];
25->27 [style = bold, label=""];
5->6 [style = bold, label=""];
9->5 [style = bold, label=""];
5->17 [style = dashed, label="0"];
0->18 [style = bold, label=""];
3->4 [style = bold, label=""];
28->0 [style = bold, label=""];
10->0 [style = bold, label=""];
2->12 [style = bold, label=""];
9->27 [style = dashed, label="0"];
7->18 [style = dashed, label="0"];
}
