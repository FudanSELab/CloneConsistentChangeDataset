digraph {
25 [style = filled, label = "RexNode node2 = rexBuilder.makeCall(SqlStdOperatorTable.GREATER_THAN,i,rexBuilder.makeExactLiteral(new BigDecimal(30)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "RexNode node4 = rexBuilder.makeCall(SqlStdOperatorTable.GREATER_THAN_OR_EQUAL,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "checkNotImplies(node1,node3)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "RexNode node2 = rexBuilder.makeCall(SqlStdOperatorTable.NOT_EQUALS,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "f.checkImplies(node1,node1)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "RexNode node1 = rexBuilder.makeCall(SqlStdOperatorTable.GREATER_THAN,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "checkImplies(node2,node1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "RexNode node1 = rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,i,rexBuilder.makeExactLiteral(new BigDecimal(30)))@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final RexNode node1 = f.eq(f.i,f.literal(30))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "testSimpleEq['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "checkImplies(node1,node2)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "f.checkImplies(node1,node2)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "checkImplies(node5,node1)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "f.checkNotImplies(node2,node1)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "checkNotImplies(node4,node6)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "checkImplies(node3,node1)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final Fixture f = new Fixture()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "RexNode node3 = rexBuilder.makeCall(SqlStdOperatorTable.GREATER_THAN_OR_EQUAL,i,rexBuilder.makeExactLiteral(new BigDecimal(30)))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "RexNode node5 = rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,i,rexBuilder.makeExactLiteral(new BigDecimal(30)))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testSimpleEq['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final RexNode node2 = f.ne(f.i,f.literal(10))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "checkNotImplies(node1,node6)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "checkImplies(node1,node1)@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "checkNotImplies(node2,node1)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "RexNode node6 = rexBuilder.makeCall(SqlStdOperatorTable.NOT_EQUALS,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testSimpleGreaterCond['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "checkNotImplies(node1,node2)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "checkNotImplies(node1,node5)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27->18 [style = bold, label=""];
23->25 [style = bold, label=""];
0->2 [style = solid, label="node2"];
7->6 [style = solid, label="node1"];
23->17 [style = solid, label="node1"];
24->19 [style = bold, label=""];
23->13 [style = solid, label="node1"];
9->11 [style = bold, label=""];
24->16 [style = solid, label="node3"];
7->10 [style = bold, label=""];
23->15 [style = solid, label="node1"];
0->5 [style = solid, label="node2"];
4->5 [style = solid, label="node1"];
16->26 [style = bold, label=""];
22->21 [style = bold, label=""];
18->17 [style = bold, label=""];
10->11 [style = solid, label="node2"];
25->15 [style = solid, label="node2"];
19->20 [style = solid, label="node4"];
27->22 [style = solid, label="node5"];
18->20 [style = solid, label="node6"];
5->9 [style = dashed, label="0"];
4->1 [style = solid, label="node1"];
23->16 [style = solid, label="node1"];
15->16 [style = bold, label=""];
3->4 [style = bold, label=""];
10->6 [style = bold, label=""];
10->9 [style = solid, label="node2"];
12->7 [style = bold, label=""];
26->22 [style = bold, label=""];
4->0 [style = bold, label=""];
7->11 [style = solid, label="node1"];
25->24 [style = bold, label=""];
23->22 [style = solid, label="node1"];
14->23 [style = bold, label=""];
0->25 [style = dashed, label="0"];
21->13 [style = bold, label=""];
0->1 [style = bold, label=""];
19->27 [style = bold, label=""];
24->26 [style = solid, label="node3"];
17->15 [style = bold, label=""];
2->6 [style = dashed, label="0"];
18->13 [style = solid, label="node6"];
1->2 [style = bold, label=""];
7->9 [style = solid, label="node1"];
27->21 [style = solid, label="node5"];
6->9 [style = bold, label=""];
4->23 [style = dashed, label="0"];
8->12 [style = bold, label=""];
23->21 [style = solid, label="node1"];
23->26 [style = solid, label="node1"];
4->2 [style = solid, label="node1"];
2->5 [style = bold, label=""];
25->17 [style = solid, label="node2"];
13->20 [style = bold, label=""];
}
