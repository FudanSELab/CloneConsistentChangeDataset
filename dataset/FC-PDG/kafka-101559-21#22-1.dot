digraph {
3 [style = filled, label = "groupedStream.count(Materialized.as(\"count\").withKeySerde(Serdes.String()))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(count.get(\"3\"),equalTo(2L))@@@9@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "processData(driver)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "shouldCountAndMaterializeResults['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "processData(topic,driver)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "shouldCountAndMaterializeResults['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "{final KeyValueStore<String,Long> count = driver.getKeyValueStore(\"count\")assertThat(count.get(\"1\"),equalTo(3L))assertThat(count.get(\"2\"),equalTo(1L))assertThat(count.get(\"3\"),equalTo(2L))}@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertThat(count.get(\"2\"),equalTo(1L))@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(counts.get(\"2\"),equalTo(2L))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(count.get(\"1\"),equalTo(3L))@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "shouldCountAndMaterializeResults['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "builder.table(topic,Consumed.with(Serdes.String(),Serdes.String())).groupBy(MockMapper.selectValueKeyValueMapper(),Grouped.with(Serdes.String(),Serdes.String())).count(Materialized.as(\"count\").withKeySerde(Serdes.String()).withValueSerde(Serdes.Long()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final KeyValueStore<String,Long> counts = driver.getKeyValueStore(\"count\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(counts.get(\"1\"),equalTo(3L))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "{final KeyValueStore<String,ValueAndTimestamp<Long>> count = driver.getTimestampedKeyValueStore(\"count\")assertThat(count.get(\"1\"),equalTo(ValueAndTimestamp.make(3L,10L)))assertThat(count.get(\"2\"),equalTo(ValueAndTimestamp.make(1L,1L)))assertThat(count.get(\"3\"),equalTo(ValueAndTimestamp.make(2L,9L)))}@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "final KeyValueStore<String,Long> count = driver.getKeyValueStore(\"count\")@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
0->14 [style = dashed, label="0"];
3->6 [style = bold, label=""];
1->4 [style = bold, label=""];
14->15 [style = bold, label=""];
12->10 [style = bold, label=""];
6->0 [style = bold, label=""];
3->10 [style = dashed, label="0"];
6->13 [style = dashed, label="0"];
6->9 [style = bold, label=""];
15->11 [style = bold, label=""];
10->13 [style = bold, label=""];
9->8 [style = bold, label=""];
13->14 [style = bold, label=""];
1->11 [style = dashed, label="0"];
2->1 [style = bold, label=""];
7->3 [style = bold, label=""];
0->2 [style = bold, label=""];
2->15 [style = dashed, label="0"];
}
