digraph {
8 [style = filled, label = "return leaves.get(0).reader().getNormValues(field)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "getNormValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "boolean anyReal = false@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "FieldInfo fi = MultiFields.getMergedFieldInfos(r).fieldInfo(field)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "FieldInfo fieldInfo = leaf.reader().getFieldInfos().fieldInfo(field)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "anyReal = true@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "size == 1@@@8@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final String field@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "size == 0@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "DocValuesType dvType = fieldInfo.getDocValuesType()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "fieldInfo != null@@@14@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final int size = leaves.size()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final IndexReader r@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final String field@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "return null@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final IndexReader r@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "return null@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final IndexReader r@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "return null@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "dvType == DocValuesType.BINARY@@@16@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "getNormValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "getBinaryValues['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "fi == null || fi.hasNorms() == false@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "return new BinaryDocValues(){@Override public int nextDoc(){while (true) {while (currentValues == null) {if (nextLeaf == leaves.size()) {docID = NO_MORE_DOCSreturn docID}currentLeaf = leaves.get(nextLeaf)currentValues = currentLeaf.reader().getBinaryDocValues(field)nextLeaf++}int newDocID = currentValues.nextDoc()if (newDocID == NO_MORE_DOCS) {currentValues = nullcontinue}{docID = currentLeaf.docBase + newDocIDreturn docID}}}@Override public int docID(){return docID}@Override public int advance(int targetDocID){if (targetDocID <= docID) {throw new IllegalArgumentException(\"can only advance beyond current document: on docID=\" + docID + \" but targetDocID=\" + targetDocID)}int readerIndex = ReaderUtil.subIndex(targetDocID,leaves)if (readerIndex >= nextLeaf) {if (readerIndex == leaves.size()) {currentValues = nulldocID = NO_MORE_DOCSreturn docID}currentLeaf = leaves.get(readerIndex)currentValues = currentLeaf.reader().getBinaryDocValues(field)nextLeaf = readerIndex + 1if (currentValues == null) {return nextDoc()}}int newDocID = currentValues.advance(targetDocID - currentLeaf.docBase)if (newDocID == NO_MORE_DOCS) {currentValues = nullreturn nextDoc()}{docID = currentLeaf.docBase + newDocIDreturn docID}}@Override public boolean advanceExact(int targetDocID){if (targetDocID <= docID) {throw new IllegalArgumentException(\"can only advance beyond current document: on docID=\" + docID + \" but targetDocID=\" + targetDocID)}int readerIndex = ReaderUtil.subIndex(targetDocID,leaves)if (readerIndex >= nextLeaf) {if (readerIndex == leaves.size()) {throw new IllegalArgumentException(\"Out of range: \" + targetDocID)}currentLeaf = leaves.get(readerIndex)currentValues = currentLeaf.reader().getBinaryDocValues(field)nextLeaf = readerIndex + 1}docID = targetDocIDif (currentValues == null) {return false}return currentValues.advanceExact(targetDocID - currentLeaf.docBase)}@Override public BytesRef binaryValue(){return currentValues.binaryValue()}@Override public long cost(){return 0}}@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final List<LeafReaderContext> leaves = r.leaves()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "anyReal == false@@@22@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "return leaves.get(0).reader().getBinaryDocValues(field)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "return new NumericDocValues(){@Override public int nextDoc(){while (true) {if (currentValues == null) {if (nextLeaf == leaves.size()) {docID = NO_MORE_DOCSreturn docID}currentLeaf = leaves.get(nextLeaf)currentValues = currentLeaf.reader().getNormValues(field)nextLeaf++continue}int newDocID = currentValues.nextDoc()if (newDocID == NO_MORE_DOCS) {currentValues = nullcontinue}{docID = currentLeaf.docBase + newDocIDreturn docID}}}@Override public int docID(){return docID}@Override public int advance(int targetDocID){if (targetDocID <= docID) {throw new IllegalArgumentException(\"can only advance beyond current document: on docID=\" + docID + \" but targetDocID=\" + targetDocID)}int readerIndex = ReaderUtil.subIndex(targetDocID,leaves)if (readerIndex >= nextLeaf) {if (readerIndex == leaves.size()) {currentValues = nulldocID = NO_MORE_DOCSreturn docID}currentLeaf = leaves.get(readerIndex)currentValues = currentLeaf.reader().getNormValues(field)if (currentValues == null) {return nextDoc()}nextLeaf = readerIndex + 1}int newDocID = currentValues.advance(targetDocID - currentLeaf.docBase)if (newDocID == NO_MORE_DOCS) {currentValues = nullreturn nextDoc()}{docID = currentLeaf.docBase + newDocIDreturn docID}}@Override public boolean advanceExact(int targetDocID){if (targetDocID < docID) {throw new IllegalArgumentException(\"can only advance beyond current document: on docID=\" + docID + \" but targetDocID=\" + targetDocID)}int readerIndex = ReaderUtil.subIndex(targetDocID,leaves)if (readerIndex >= nextLeaf) {if (readerIndex == leaves.size()) {throw new IllegalArgumentException(\"Out of range: \" + targetDocID)}currentLeaf = leaves.get(readerIndex)currentValues = currentLeaf.reader().getNormValues(field)nextLeaf = readerIndex + 1}docID = targetDocIDif (currentValues == null) {return false}return currentValues.advanceExact(targetDocID - currentLeaf.docBase)}@Override public long longValue(){return currentValues.longValue()}@Override public long cost(){return 0}}@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13->10 [style = solid, label="field"];
8->10 [style = bold, label=""];
22->21 [style = solid, label="field"];
1->4 [style = bold, label=""];
23->25 [style = bold, label=""];
20->27 [style = solid, label="anyReal"];
2->0 [style = dotted, label="true"];
23->27 [style = bold, label=""];
13->4 [style = solid, label="field"];
15->27 [style = solid, label="anyReal"];
9->17 [style = dotted, label="true"];
5->21 [style = solid, label="size"];
6->12 [style = bold, label=""];
5->9 [style = solid, label="size"];
1->3 [style = bold, label=""];
11->21 [style = solid, label="leaves"];
12->15 [style = bold, label=""];
25->18 [style = bold, label=""];
18->19 [style = bold, label=""];
9->17 [style = bold, label=""];
6->9 [style = dotted, label="false"];
19->23 [style = solid, label="fieldInfo"];
27->24 [style = dotted, label="true"];
9->10 [style = bold, label=""];
18->20 [style = dotted, label="true"];
26->22 [style = dotted, label="true"];
15->19 [style = bold, label=""];
9->8 [style = bold, label=""];
4->21 [style = dashed, label="0"];
3->4 [style = bold, label=""];
5->6 [style = solid, label="size"];
26->11 [style = bold, label=""];
14->13 [style = dotted, label="true"];
20->27 [style = bold, label=""];
9->8 [style = dotted, label="true"];
1->3 [style = dotted, label="true"];
11->4 [style = solid, label="leaves"];
11->5 [style = bold, label=""];
18->20 [style = bold, label=""];
10->1 [style = solid, label="fi"];
22->19 [style = solid, label="field"];
12->10 [style = bold, label=""];
5->6 [style = bold, label=""];
23->18 [style = dotted, label="true"];
18->27 [style = bold, label=""];
24->21 [style = bold, label=""];
9->15 [style = bold, label=""];
19->23 [style = bold, label=""];
23->19 [style = bold, label=""];
2->7 [style = dotted, label="true"];
14->7 [style = dotted, label="true"];
5->4 [style = solid, label="size"];
7->8 [style = solid, label="field"];
17->15 [style = bold, label=""];
25->18 [style = solid, label="dvType"];
8->17 [style = dashed, label="0"];
27->24 [style = bold, label=""];
26->16 [style = dotted, label="true"];
6->12 [style = dotted, label="true"];
13->8 [style = solid, label="field"];
6->9 [style = bold, label=""];
10->1 [style = bold, label=""];
27->21 [style = bold, label=""];
14->11 [style = bold, label=""];
23->25 [style = dotted, label="true"];
2->11 [style = bold, label=""];
22->17 [style = solid, label="field"];
7->22 [style = dashed, label="0"];
7->4 [style = solid, label="field"];
7->10 [style = solid, label="field"];
}
