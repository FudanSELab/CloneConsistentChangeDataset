digraph {
2 [style = filled, label = "Map<String,ByteBuffer> result = coordinator.performAssignment(\"leader\",WorkerCoordinator.DEFAULT_SUBPROTOCOL,responseMembers)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"leader\",memberAssignment.leader())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ConnectProtocol.Assignment memberAssignment = ConnectProtocol.deserializeAssignment(result.get(\"member\"))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(1,leaderAssignment.offset())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "coordinator.metadata()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "EasyMock.expect(configStorage.snapshot()).andReturn(configState1)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"leader\",leaderAssignment.leader())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Map<String,ByteBuffer> result = coordinator.performAssignment(\"leader\",EAGER.protocol(),responseMembers)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "EasyMock.expect(configStorage.snapshot()).andReturn(configState2)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "List<JoinGroupResponseData.JoinGroupResponseMember> responseMembers = new ArrayList<>()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(Collections.singletonList(taskId1x1),memberAssignment.tasks())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(false,leaderAssignment.failed())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "responseMembers.add(new JoinGroupResponseData.JoinGroupResponseMember().setMemberId(\"member\").setMetadata(ConnectProtocol.serializeMetadata(new ConnectProtocol.WorkerState(MEMBER_URL,1L)).array()))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(1,memberAssignment.offset())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testLeaderPerformAssignment1['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertEquals(false,memberAssignment.failed())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(Collections.singletonList(taskId1x0),memberAssignment.tasks())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(Collections.emptyList(),leaderAssignment.tasks())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(Arrays.asList(taskId1x0,taskId2x0),leaderAssignment.tasks())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "ConnectProtocol.Assignment leaderAssignment = ConnectProtocol.deserializeAssignment(result.get(\"leader\"))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "PowerMock.verifyAll()@@@22@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "PowerMock.replayAll()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testLeaderPerformAssignment1['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(Collections.singletonList(connectorId2),memberAssignment.connectors())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(Collections.singletonList(connectorId1),leaderAssignment.connectors())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "responseMembers.add(new JoinGroupResponseData.JoinGroupResponseMember().setMemberId(\"leader\").setMetadata(ConnectProtocol.serializeMetadata(new ConnectProtocol.WorkerState(LEADER_URL,1L)).array()))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(Collections.emptyList(),memberAssignment.connectors())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testLeaderPerformAssignment2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7->13 [style = bold, label=""];
19->27 [style = dashed, label="0"];
14->2 [style = solid, label="responseMembers"];
20->17 [style = bold, label=""];
15->14 [style = bold, label=""];
21->19 [style = bold, label=""];
27->0 [style = bold, label=""];
26->10 [style = bold, label=""];
6->22 [style = bold, label=""];
22->16 [style = bold, label=""];
18->26 [style = bold, label=""];
9->10 [style = bold, label=""];
0->15 [style = bold, label=""];
14->1 [style = bold, label=""];
19->0 [style = bold, label=""];
24->5 [style = bold, label=""];
14->22 [style = solid, label="responseMembers"];
3->18 [style = bold, label=""];
6->2 [style = bold, label=""];
25->27 [style = bold, label=""];
23->24 [style = bold, label=""];
1->6 [style = bold, label=""];
9->26 [style = dashed, label="0"];
18->9 [style = bold, label=""];
13->23 [style = bold, label=""];
17->3 [style = bold, label=""];
8->4 [style = bold, label=""];
4->24 [style = dashed, label="0"];
13->8 [style = bold, label=""];
12->19 [style = bold, label=""];
16->20 [style = bold, label=""];
2->22 [style = dashed, label="0"];
4->5 [style = bold, label=""];
11->7 [style = bold, label=""];
8->23 [style = dashed, label="0"];
10->11 [style = bold, label=""];
2->16 [style = bold, label=""];
}
