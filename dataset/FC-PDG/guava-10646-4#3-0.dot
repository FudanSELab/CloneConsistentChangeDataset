digraph {
95 [style = filled, label = "E edge = edgesConnecting.iterator().next()@@@68@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
66 [style = filled, label = "assertThat(network.edgesConnecting(nodeU,nodeV)).contains(edge)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(network.isDirected()).isEqualTo(asGraph.isDirected())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertThat(network.edges().size()).isAtLeast(asGraph.edges().size())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(network.incidentEdges(node).size() + selfLoopCount).isEqualTo(network.inDegree(node) + network.outDegree(node))@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(network.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Graph<N> asGraph = network.asGraph()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "assertThat(network.successors(node).contains(otherNode)).isEqualTo(connected)@@@75@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(network.incidentNodes(edge)).isEqualTo(EndpointPair.of(network,node,otherNode))@@@78@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertThat(network.inEdges(node)).isEqualTo(network.incidentEdges(node))@@@57@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(networkString).contains(\"allowsSelfLoops: \" + network.allowsSelfLoops())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "assertThat(network.incidentEdges(nodeU)).contains(edge)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "validateNetwork['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertThat(network.inEdges(nodeV)).contains(edge)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "network.isDirected()@@@49@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "IllegalArgumentException expected@@@76@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
94 [style = filled, label = "edgesConnecting.size()@@@64@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
96 [style = filled, label = "assertThat(network.edgeConnecting(node,otherNode).isPresent()).isFalse()@@@66@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "!network.allowsSelfLoops() && isSelfLoop@@@72@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(network.predecessors(node)).isEqualTo(asGraph.predecessors(node))@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "network.isDirected() || !isSelfLoop@@@66@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertTrue(!network.edgesConnecting(node,adjacentNode).isEmpty() || !network.edgesConnecting(adjacentNode,node).isEmpty())@@@85@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(network.successors(node)).isEqualTo(network.adjacentNodes(node))@@@56@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(network.inEdges(network.incidentNodes(outEdge).adjacentNode(node))).contains(outEdge)@@@109@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "assertThat(network.edgeConnectingOrNull(node,otherNode)).isEqualTo(edge)@@@69@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertThat(networkString).contains(\"isDirected: \" + network.isDirected())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertThat(network.outDegree(node)).isEqualTo(network.degree(node))@@@60@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(network.predecessors(node).contains(adjacentNode) || network.successors(node).contains(adjacentNode))@@@84@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "N nodeV = endpointPair.nodeV()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertThat(network.incidentNodes(outEdge).source()).isEqualTo(node)@@@111@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(network.adjacentNodes(nodeV)).contains(nodeU)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "!network.allowsParallelEdges()@@@69@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "assertTrue(network.inEdges(node).contains(incidentEdge) || network.outEdges(node).contains(incidentEdge))@@@96@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "network.edgeConnecting(node,otherNode)@@@79@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertThat(connected).isFalse()@@@73@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(network.incidentNodes(incidentEdge)).contains(node)@@@98@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "assertThat(network.successors(predecessor)).contains(node)@@@88@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "{}@@@82@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertThat(network.inEdges(otherNode)).contains(edge)@@@80@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
92 [style = filled, label = "assertThat(network.edgeConnecting(node,otherNode).get()).isEqualTo(edge)@@@70@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "Set<E> edgesConnecting = sanityCheckSet(network.edgesConnecting(node,otherNode))@@@63@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertThat(network.incidentEdges(node)).contains(inEdge)@@@101@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "IllegalArgumentException expected@@@82@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
86 [style = filled, label = "fail()@@@74@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
74 [style = filled, label = "N nodeU = endpointPair.nodeU()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "int nodeStart = networkString.indexOf(\"nodes:\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertThat(network.edgesConnecting(predecessor,node)).isNotEmpty()@@@89@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "AbstractGraphTest.validateGraph(asGraph)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertStronglyEquivalent(network,ImmutableNetwork.copyOf(network))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "boolean isSelfLoop = node.equals(otherNode)@@@64@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "int selfLoopCount = network.edgesConnecting(node,node).size()@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertThat(network.incidentEdges(nodeV)).contains(edge)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "assertThat(network.incidentEdges(node)).contains(outEdge)@@@108@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(network.adjacentNodes(nodeU)).contains(nodeV)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(asGraph.edges()).contains(EndpointPair.of(network,nodeU,nodeV))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "assertThat(network.outEdges(node)).hasSize(network.outDegree(node))@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "assertThat(network.edgesConnecting(node,successor)).isNotEmpty()@@@93@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(network.predecessors(node)).isEqualTo(network.adjacentNodes(node))@@@55@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "assertThat(network.predecessors(nodeV)).contains(nodeU)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "String edgeString = networkString.substring(edgeStart)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "String nodeString = networkString.substring(nodeStart,edgeStart)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "assertThat(network.inEdges(node)).hasSize(network.inDegree(node))@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "int edgeStart = networkString.indexOf(\"edges:\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "assertThat(network.predecessors(successor)).contains(node)@@@92@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
91 [style = filled, label = "fail()@@@80@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "assertThat(edgeString).contains(edge.toString())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "assertThat(network.edgeConnectingOrNull(node,otherNode)).isNull()@@@65@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
69 [style = filled, label = "Network<N,E> network@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "network.isDirected()@@@103@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "assertStronglyEquivalent(network,Graphs.copyOf(network))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "validateNetwork['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "assertThat(network.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node))@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertThat(network.nodes()).isEqualTo(asGraph.nodes())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "String networkString = network.toString()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertThat(network.predecessors(otherNode).contains(node)).isEqualTo(connected)@@@76@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "assertThat(network.incidentNodes(inEdge).target()).isEqualTo(node)@@@104@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "network.isDirected()@@@110@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "{}@@@76@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertThat(network.outEdges(network.incidentNodes(inEdge).adjacentNode(node))).contains(inEdge)@@@102@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertThat(network.nodes()).contains(incidentNode)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "assertThat(network.incidentEdges(node).size() + selfLoopCount).isEqualTo(network.degree(node))@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertTrue(edge.equals(adjacentEdge) || network.adjacentEdges(edge).contains(adjacentEdge))@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertThat(network.outEdges(node)).isEqualTo(network.incidentEdges(node))@@@58@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(network.successors(node)).isEqualTo(asGraph.successors(node))@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "assertThat(network.edges()).contains(incidentEdge)@@@97@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
97 [style = filled, label = "validateNetwork['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "assertThat(edgesConnecting).isEqualTo(Sets.intersection(network.outEdges(node),network.inEdges(otherNode)))@@@67@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "boolean connected = !edgesConnecting.isEmpty()@@@65@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertThat(network.outEdges(node)).contains(edge)@@@79@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(network.outEdges(nodeU)).contains(edge)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertThat(network.nodeOrder()).isEqualTo(asGraph.nodeOrder())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(network.inDegree(node)).isEqualTo(network.degree(node))@@@59@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "EndpointPair<N> endpointPair = network.incidentNodes(edge)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "network.edgeConnectingOrNull(node,otherNode)@@@73@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
71 [style = filled, label = "assertThat(network.successors(nodeU)).contains(nodeV)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(networkString).contains(\"allowsParallelEdges: \" + network.allowsParallelEdges())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(edgesConnecting.size()).isAtMost(1)@@@70@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "assertThat(nodeString).contains(node.toString())@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40->79 [style = bold, label=""];
35->33 [style = bold, label=""];
27->7 [style = bold, label=""];
33->48 [style = bold, label=""];
28->72 [style = bold, label=""];
37->13 [style = dotted, label="true"];
53->5 [style = bold, label=""];
20->67 [style = bold, label=""];
62->46 [style = bold, label=""];
17->14 [style = bold, label=""];
65->80 [style = bold, label=""];
70->54 [style = solid, label="edgeStart"];
79->18 [style = bold, label=""];
94->91 [style = dotted, label="true"];
69->32 [style = solid, label="network"];
17->4 [style = bold, label=""];
0->31 [style = dotted, label="false"];
23->52 [style = bold, label=""];
95->87 [style = solid, label="edge"];
55->37 [style = bold, label=""];
71->30 [style = bold, label=""];
64->65 [style = bold, label=""];
93->72 [style = bold, label=""];
83->82 [style = bold, label=""];
38->59 [style = solid, label="asGraph"];
47->3 [style = bold, label=""];
5->12 [style = bold, label=""];
41->34 [style = bold, label=""];
89->67 [style = bold, label=""];
43->6 [style = solid, label="nodeV"];
94->95 [style = dotted, label="true"];
15->25 [style = bold, label=""];
72->32 [style = bold, label=""];
0->23 [style = dotted, label="false"];
54->1 [style = bold, label=""];
95->51 [style = solid, label="edge"];
4->36 [style = bold, label=""];
84->96 [style = bold, label=""];
57->61 [style = bold, label=""];
16->39 [style = bold, label=""];
67->42 [style = bold, label=""];
24->80 [style = bold, label=""];
43->6 [style = bold, label=""];
8->57 [style = bold, label=""];
42->45 [style = solid, label="connected"];
94->88 [style = bold, label=""];
36->4 [style = bold, label=""];
0->2 [style = dotted, label="false"];
0->22 [style = bold, label=""];
69->14 [style = solid, label="network"];
95->87 [style = bold, label=""];
41->75 [style = bold, label=""];
73->24 [style = bold, label=""];
32->53 [style = bold, label=""];
94->84 [style = bold, label=""];
28->69 [style = dotted, label="true"];
25->54 [style = solid, label="nodeStart"];
41->39 [style = bold, label=""];
74->61 [style = solid, label="nodeU"];
26->9 [style = bold, label=""];
13->44 [style = bold, label=""];
42->68 [style = bold, label=""];
37->13 [style = bold, label=""];
44->77 [style = bold, label=""];
44->19 [style = bold, label=""];
22->58 [style = bold, label=""];
75->76 [style = bold, label=""];
66->71 [style = bold, label=""];
20->94 [style = bold, label=""];
88->86 [style = bold, label=""];
97->72 [style = bold, label=""];
74->6 [style = solid, label="nodeU"];
85->83 [style = bold, label=""];
43->71 [style = solid, label="nodeV"];
95->92 [style = solid, label="edge"];
0->47 [style = dotted, label="false"];
68->37 [style = bold, label=""];
10->74 [style = bold, label=""];
94->87 [style = dotted, label="true"];
45->14 [style = bold, label=""];
80->73 [style = bold, label=""];
38->59 [style = bold, label=""];
18->29 [style = bold, label=""];
62->79 [style = bold, label=""];
78->50 [style = bold, label=""];
58->60 [style = bold, label=""];
77->45 [style = bold, label=""];
50->64 [style = bold, label=""];
76->27 [style = bold, label=""];
48->21 [style = bold, label=""];
29->79 [style = bold, label=""];
87->92 [style = bold, label=""];
70->54 [style = bold, label=""];
0->22 [style = dotted, label="true"];
63->56 [style = bold, label=""];
94->82 [style = dotted, label="true"];
43->30 [style = solid, label="nodeV"];
21->16 [style = bold, label=""];
56->0 [style = bold, label=""];
0->60 [style = dotted, label="true"];
94->92 [style = dotted, label="true"];
17->20 [style = bold, label=""];
46->11 [style = bold, label=""];
91->67 [style = bold, label=""];
81->46 [style = bold, label=""];
39->10 [style = bold, label=""];
0->52 [style = dotted, label="false"];
68->55 [style = dotted, label="true"];
3->31 [style = bold, label=""];
69->6 [style = solid, label="network"];
97->69 [style = dotted, label="true"];
34->41 [style = bold, label=""];
94->88 [style = dotted, label="true"];
31->20 [style = bold, label=""];
68->55 [style = bold, label=""];
62->81 [style = dotted, label="true"];
95->17 [style = solid, label="edge"];
74->43 [style = bold, label=""];
62->81 [style = bold, label=""];
59->35 [style = bold, label=""];
94->84 [style = dotted, label="true"];
52->47 [style = bold, label=""];
29->40 [style = bold, label=""];
42->77 [style = solid, label="connected"];
14->51 [style = bold, label=""];
19->77 [style = bold, label=""];
29->75 [style = bold, label=""];
7->63 [style = bold, label=""];
11->62 [style = bold, label=""];
37->44 [style = bold, label=""];
51->17 [style = bold, label=""];
12->15 [style = bold, label=""];
61->26 [style = bold, label=""];
67->44 [style = solid, label="isSelfLoop"];
94->95 [style = bold, label=""];
6->66 [style = bold, label=""];
29->40 [style = dotted, label="true"];
65->64 [style = bold, label=""];
44->19 [style = dotted, label="true"];
96->67 [style = bold, label=""];
86->82 [style = bold, label=""];
92->67 [style = bold, label=""];
60->20 [style = bold, label=""];
0->3 [style = dotted, label="false"];
50->78 [style = bold, label=""];
69->72 [style = solid, label="network"];
36->78 [style = bold, label=""];
9->49 [style = bold, label=""];
0->58 [style = dotted, label="true"];
94->96 [style = dotted, label="true"];
82->91 [style = bold, label=""];
93->69 [style = dotted, label="true"];
81->79 [style = bold, label=""];
1->38 [style = bold, label=""];
30->8 [style = bold, label=""];
0->2 [style = bold, label=""];
49->34 [style = bold, label=""];
24->46 [style = bold, label=""];
74->26 [style = solid, label="nodeU"];
94->86 [style = dotted, label="true"];
70->1 [style = solid, label="edgeStart"];
40->75 [style = bold, label=""];
25->70 [style = bold, label=""];
2->23 [style = bold, label=""];
90->89 [style = bold, label=""];
}
