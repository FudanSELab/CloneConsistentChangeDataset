digraph {
13 [style = filled, label = "List<List<String>> expectedResult = Arrays.asList(null,null,null,Arrays.asList(\"A-a-a\",\"A-a-a\"),Collections.singletonList(\"B-a-a\"),Arrays.asList(\"B-b-b\",\"B-b-b\"),Collections.singletonList(\"null-b-b\"),null,null,Arrays.asList(\"C-c-c\",\"C-c-c\"),Collections.singletonList((String)null),null,null,Arrays.asList(\"null-d-d\",\"null-d-d\"),Collections.singletonList(\"D-d-d\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "leftTable.outerJoin(rightTable,valueJoiner).join(rightTable,valueJoiner,materialized).toStream().to(OUTPUT_TOPIC)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG,appID + \"-inner-inner\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "runTest(expectedFinalMultiJoinResult,storeName)@@@6@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<List<String>> expectedResult = Arrays.asList(null,null,null,Arrays.asList(\"A-a-a\",\"A-a-a\"),Collections.singletonList(\"B-a-a\"),Arrays.asList(\"B-b-b\",\"B-b-b\"),Collections.singletonList((String)null),null,null,Arrays.asList(\"C-c-c\",\"C-c-c\"),Collections.singletonList((String)null),null,null,null,Collections.singletonList(\"D-d-d\"))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "runTest(expectedResult,storeName)@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testLeftInner['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final List<List<String>> expectedResult = Arrays.asList(null,null,null,Arrays.asList(\"A-a-a\",\"A-a-a\"),Collections.singletonList(\"B-a-a\"),Arrays.asList(\"B-b-b\",\"B-b-b\"),Collections.singletonList((String)null),null,null,Arrays.asList(\"C-c-c\",\"C-c-c\"),Collections.singletonList((String)null),null,null,null,Collections.singletonList(\"D-d-d\"))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testOuterInner['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "cacheEnabled@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "leftTable.outerJoin(rightTable,valueJoiner).join(rightTable,valueJoiner,materialized).toStream().peek(new CountingPeek(true)).to(OUTPUT_TOPIC)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "leftTable.leftJoin(rightTable,valueJoiner).join(rightTable,valueJoiner,materialized).toStream().peek(new CountingPeek(true)).to(OUTPUT_TOPIC)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "leftTable.leftJoin(rightTable,valueJoiner).join(rightTable,valueJoiner,materialized).toStream().to(OUTPUT_TOPIC)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testLeftInner['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6->4 [style = dotted, label="false"];
6->13 [style = dotted, label="false"];
6->0 [style = dotted, label="false"];
0->1 [style = solid, label="expectedResult"];
3->6 [style = bold, label=""];
10->3 [style = bold, label=""];
6->0 [style = bold, label=""];
12->1 [style = bold, label=""];
7->3 [style = bold, label=""];
4->12 [style = dashed, label="0"];
6->2 [style = bold, label=""];
6->12 [style = dotted, label="false"];
11->5 [style = bold, label=""];
6->2 [style = dotted, label="true"];
13->12 [style = bold, label=""];
6->8 [style = dotted, label="false"];
0->4 [style = bold, label=""];
6->13 [style = bold, label=""];
6->11 [style = bold, label=""];
0->13 [style = dashed, label="0"];
6->8 [style = bold, label=""];
9->3 [style = bold, label=""];
0->8 [style = dashed, label="0"];
2->11 [style = dashed, label="0"];
4->1 [style = bold, label=""];
8->4 [style = bold, label=""];
6->11 [style = dotted, label="true"];
13->1 [style = solid, label="expectedResult"];
6->1 [style = dotted, label="false"];
8->1 [style = solid, label="expectedResult"];
6->5 [style = dotted, label="true"];
2->5 [style = bold, label=""];
}
