digraph {
3 [style = filled, label = "StreamTask<Integer,StreamMap<Integer,Integer>> mockTask = createMockTask(streamConfig,environment)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "OperatorChain<Integer,StreamMap<Integer,Integer>> operatorChain = createOperatorChain(streamConfig,environment,mockTask)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "StreamMap<Integer,Integer> headOperator = streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "StreamTask<Integer,StreamMap<Integer,Integer>> mockTask = createMockTask(streamConfig,environment)@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertThat(sink2Results,contains(\"First 2: 1\"))@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "JobGraph jobGraph = env.getStreamGraph().getJobGraph()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "operator != null@@@31@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "headOperator.processElement(new StreamRecord<>(1))@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testMultiChaining['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "StreamMap<Integer,Integer> headOperator = streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "sink2Results = new ArrayList<>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertThat(sink1Results,contains(\"First 1: 1\"))@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "headOperator.setup(mockTask,streamConfig,operatorChain.getChainEntryPoint())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "StreamExecutionEnvironment env@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "JobGraph jobGraph = env.getStreamGraph().getJobGraph()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "operator.open()@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "operator != null@@@49@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(sink1Results,contains(\"First: 1\",\"First: 2\",\"First: 3\"))@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "headOperator.setup(mockTask,streamConfig,operatorChain.getChainEntryPoint())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "headOperator.processElement(new StreamRecord<>(3))@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "split.select(\"one\").map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink1Results.add(value)}})@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "StreamConfig streamConfig = new StreamConfig(configuration)@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testMultiChaining['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Configuration configuration = chainedVertex.getConfiguration()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "SplitStream<Integer> split = input.split(new OutputSelector<Integer>(){@Override public Iterable<String> select(Integer value){if (value.equals(1)) {return Collections.singletonList(\"one\")}{return Collections.singletonList(\"other\")}}})@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "sink3Results = new ArrayList<>()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "OperatorChain<Integer,StreamMap<Integer,Integer>> operatorChain = createOperatorChain(streamConfig,environment,mockTask)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "DataStream<Integer> input = env.fromElements(1,2,3)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "sink1Results = new ArrayList<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "headOperator.processElement(new StreamRecord<>(2))@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Configuration configuration = chainedVertex.getConfiguration()@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "input.map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink2Results.add(value)}})@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testMultiChainingWithSplit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "input.map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink1Results.add(value)}})@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(sink3Results,contains(\"Second: 2\",\"Second: 3\"))@@@58@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "split.select(\"one\").map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink2Results.add(value)}})@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "split.select(\"other\").map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink3Results.add(value)}})@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "env.setParallelism(2)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "input = input.map(null)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "StreamExecutionEnvironment env@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "StreamConfig streamConfig = new StreamConfig(configuration)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24->10 [style = bold, label=""];
22->21 [style = dotted, label="true"];
11->20 [style = bold, label=""];
35->31 [style = bold, label=""];
32->37 [style = bold, label=""];
15->7 [style = bold, label=""];
12->35 [style = dashed, label="0"];
26->10 [style = bold, label=""];
30->43 [style = bold, label=""];
0->27 [style = bold, label=""];
11->8 [style = solid, label="streamConfig"];
37->30 [style = bold, label=""];
4->35 [style = solid, label="sink1Results"];
42->39 [style = bold, label=""];
44->19 [style = bold, label=""];
34->15 [style = bold, label=""];
43->42 [style = bold, label=""];
31->29 [style = bold, label=""];
27->29 [style = solid, label="sink3Results"];
11->3 [style = solid, label="streamConfig"];
19->36 [style = bold, label=""];
20->3 [style = bold, label=""];
19->17 [style = bold, label=""];
13->40 [style = bold, label=""];
30->37 [style = bold, label=""];
23->41 [style = bold, label=""];
16->2 [style = bold, label=""];
3->5 [style = solid, label="mockTask"];
21->38 [style = dashed, label="0"];
5->17 [style = bold, label=""];
7->32 [style = solid, label="streamConfig"];
17->19 [style = bold, label=""];
9->16 [style = bold, label=""];
3->8 [style = solid, label="mockTask"];
1->9 [style = bold, label=""];
37->30 [style = dotted, label="true"];
4->0 [style = bold, label=""];
41->28 [style = bold, label=""];
23->14 [style = bold, label=""];
11->5 [style = solid, label="streamConfig"];
12->13 [style = bold, label=""];
25->24 [style = bold, label=""];
37->43 [style = bold, label=""];
26->38 [style = dotted, label="true"];
0->23 [style = bold, label=""];
28->33 [style = bold, label=""];
8->5 [style = bold, label=""];
18->1 [style = bold, label=""];
13->32 [style = solid, label="mockTask"];
13->31 [style = dashed, label="0"];
0->13 [style = solid, label="sink2Results"];
13->40 [style = solid, label="mockTask"];
3->8 [style = bold, label=""];
6->13 [style = bold, label=""];
39->35 [style = bold, label=""];
0->31 [style = solid, label="sink2Results"];
7->6 [style = bold, label=""];
7->40 [style = solid, label="streamConfig"];
2->11 [style = solid, label="configuration"];
17->15 [style = bold, label=""];
22->10 [style = bold, label=""];
10->4 [style = bold, label=""];
40->32 [style = bold, label=""];
4->12 [style = solid, label="sink1Results"];
17->19 [style = dotted, label="true"];
7->13 [style = solid, label="streamConfig"];
14->18 [style = bold, label=""];
27->23 [style = bold, label=""];
19->15 [style = bold, label=""];
33->44 [style = bold, label=""];
15->7 [style = solid, label="configuration"];
2->11 [style = bold, label=""];
36->34 [style = bold, label=""];
18->33 [style = dashed, label="0"];
25->21 [style = dotted, label="true"];
6->12 [style = bold, label=""];
}
