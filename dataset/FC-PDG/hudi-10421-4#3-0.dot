digraph {
6 [style = filled, label = "funcWrapper.invoke(rowData)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEmptyDataFiles()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "String instant = funcWrapper.getWriteClient().getInflightAndRequestedInstant(getTableType())@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "checkWrittenData(tempFile,EXPECTED2)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(\"The operator expect to send an event\",nextEvent,instanceOf())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "checkInstantState(funcWrapper.getWriteClient(),HoodieInstant.State.REQUESTED,instant)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "funcWrapper.checkpointComplete(2)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "funcWrapper.clearIndexState()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testIndexStateBootstrap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "testUpsert['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "checkWrittenData(tempFile,EXPECTED2)@@@27@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "funcWrapper.checkpointFunction(2)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "checkIndexLoaded(new HoodieKey(\"id1\",\"par1\"),new HoodieKey(\"id2\",\"par1\"),new HoodieKey(\"id3\",\"par2\"),new HoodieKey(\"id4\",\"par2\"),new HoodieKey(\"id5\",\"par3\"),new HoodieKey(\"id6\",\"par3\"),new HoodieKey(\"id7\",\"par4\"),new HoodieKey(\"id8\",\"par4\"))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(\"The operator expect to send an event\",nextEvent,instanceOf())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testIndexStateBootstrap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertFalse(funcWrapper.isAllPartitionsLoaded(),\"All partitions assume to be loaded into the index state\")@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,nextEvent)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,nextEvent)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertNotNull(funcWrapper.getEventBuffer()(0(,\"The coordinator missed the event\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "OperatorEvent nextEvent = funcWrapper.getNextEvent()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "funcWrapper.invoke(TestData.DATA_SET_INSERT.get(0))@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "String instant = funcWrapper.getWriteClient().getInflightAndRequestedInstant(\"COPY_ON_WRITE\")@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "checkInstantState(funcWrapper.getWriteClient(),HoodieInstant.State.COMPLETED,instant)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertNotNull(funcWrapper.getEventBuffer()(0(,\"The coordinator missed the event\")@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "funcWrapper.checkpointFunction(1)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "checkWrittenData(tempFile,EXPECTED1)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "funcWrapper.checkpointComplete(1)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "String instant = funcWrapper.getWriteClient().getInflightAndRequestedInstant(getTableType())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "funcWrapper.openFunction()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "nextEvent = funcWrapper.getNextEvent()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertTrue(funcWrapper.isAllPartitionsLoaded(),\"All partitions assume to be loaded into the index state\")@@@33@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "funcWrapper.invoke(rowData)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->16 [style = bold, label=""];
15->10 [style = bold, label=""];
15->22 [style = solid, label="instant"];
4->17 [style = bold, label=""];
30->22 [style = solid, label="instant"];
31->9 [style = bold, label=""];
11->4 [style = bold, label=""];
25->9 [style = bold, label=""];
18->15 [style = bold, label=""];
15->30 [style = dashed, label="0"];
18->30 [style = bold, label=""];
28->9 [style = bold, label=""];
10->2 [style = solid, label="nextEvent"];
15->29 [style = dashed, label="0"];
15->24 [style = solid, label="instant"];
29->24 [style = solid, label="instant"];
10->7 [style = bold, label=""];
1->11 [style = bold, label=""];
9->6 [style = bold, label=""];
3->27 [style = bold, label=""];
22->8 [style = bold, label=""];
14->26 [style = bold, label=""];
2->23 [style = bold, label=""];
6->1 [style = bold, label=""];
12->13 [style = bold, label=""];
30->24 [style = solid, label="instant"];
5->2 [style = bold, label=""];
7->5 [style = bold, label=""];
20->8 [style = bold, label=""];
18->29 [style = bold, label=""];
17->0 [style = bold, label=""];
23->22 [style = bold, label=""];
29->22 [style = solid, label="instant"];
19->13 [style = bold, label=""];
22->20 [style = bold, label=""];
13->26 [style = bold, label=""];
7->2 [style = bold, label=""];
4->17 [style = solid, label="nextEvent"];
30->10 [style = bold, label=""];
29->10 [style = bold, label=""];
3->21 [style = bold, label=""];
12->19 [style = bold, label=""];
27->21 [style = bold, label=""];
16->12 [style = bold, label=""];
13->14 [style = bold, label=""];
24->3 [style = bold, label=""];
4->0 [style = solid, label="nextEvent"];
10->7 [style = solid, label="nextEvent"];
26->18 [style = bold, label=""];
8->24 [style = bold, label=""];
}
