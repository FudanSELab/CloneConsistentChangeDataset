digraph {
16 [style = filled, label = "s1.add(1.0,Double.NaN)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertTrue(Double.isNaN(s1.getMinY()))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(3.3,s1.getMaxY(),EPSILON)@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "s1.updateByIndex(1,new Double(2.05))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "s1.updateByIndex(0,new Double(0.0))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(0.0,s1.getMinY(),EPSILON)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(1.0,s1.getMinY(),EPSILON)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(2.0,s1.getMinY(),EPSILON)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "s1.updateByIndex(1,2.05)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertEquals(2.0,s1.getMaxY(),EPSILON)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertTrue(Double.isNaN(s1.getMaxY()))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testUpdateByIndex3['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "s1.add(2.0,2.2)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "s1.add(1.0,1.1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "s1.updateByIndex(0,new Double(1.0))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(1.1,s1.getMinY(),EPSILON)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(2.0,s1.getMaxY(),EPSILON)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(1.0,s1.getMaxY(),EPSILON)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "s1.add(3.0,3.3)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testUpdateByIndex2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "s1.add(-1.0,-1.0)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testUpdateByIndex3['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "s1.updateByIndex(0,new Double(2.0))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "XYSeries s1 = new XYSeries(\"S1\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->22 [style = bold, label=""];
17->10 [style = bold, label=""];
16->13 [style = bold, label=""];
6->8 [style = dashed, label="0"];
0->6 [style = bold, label=""];
11->1 [style = bold, label=""];
21->15 [style = bold, label=""];
1->3 [style = bold, label=""];
18->19 [style = bold, label=""];
14->17 [style = bold, label=""];
6->17 [style = dashed, label="0"];
8->7 [style = bold, label=""];
3->5 [style = bold, label=""];
5->0 [style = bold, label=""];
22->20 [style = bold, label=""];
1->16 [style = bold, label=""];
7->2 [style = bold, label=""];
20->12 [style = bold, label=""];
0->8 [style = bold, label=""];
7->10 [style = dashed, label="0"];
4->1 [style = bold, label=""];
12->23 [style = bold, label=""];
6->7 [style = bold, label=""];
9->1 [style = bold, label=""];
2->22 [style = dashed, label="0"];
13->14 [style = bold, label=""];
23->18 [style = bold, label=""];
3->16 [style = dashed, label="0"];
19->21 [style = bold, label=""];
}
