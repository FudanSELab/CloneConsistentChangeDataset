digraph {
16 [style = filled, label = "int limit = input.pushLimit(1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "int limit = input.pushLimit(4)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(inputType.name(),2,input.readRawByte())@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "byte(( rawBytes = new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@383594@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "input.popLimit(limit)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(inputType.name(),5,input.readRawByte())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "testSkipRawBytesPastEndOfBufferWithLimit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "input.skipRawBytes(1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "CodedInputStream input = inputType.newDecoder(rawBytes)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertWithMessage(inputType.name()).that(input.readRawByte()).isEqualTo(5)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertWithMessage(inputType.name()).that(input.readRawByte()).isEqualTo(1)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "input.popLimit(limit)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testSkipRawBytesBug['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(inputType.name(),1,input.readRawByte())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertWithMessage(inputType.name()).that(input.isAtEnd()).isTrue()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertTrue(inputType.name(),input.isAtEnd())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "testSkipRawBytesPastEndOfBufferWithLimit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "input.skipRawBytes(3)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->1 [style = bold, label=""];
5->9 [style = bold, label=""];
15->14 [style = bold, label=""];
1->5 [style = solid, label="limit"];
6->9 [style = dashed, label="0"];
1->3 [style = bold, label=""];
0->7 [style = solid, label="rawBytes"];
4->2 [style = bold, label=""];
16->17 [style = bold, label=""];
6->14 [style = dashed, label="0"];
9->7 [style = bold, label=""];
3->4 [style = bold, label=""];
14->7 [style = bold, label=""];
0->7 [style = bold, label=""];
8->0 [style = bold, label=""];
11->5 [style = bold, label=""];
3->12 [style = dashed, label="0"];
5->6 [style = bold, label=""];
12->4 [style = bold, label=""];
1->16 [style = dashed, label="0"];
10->0 [style = bold, label=""];
7->16 [style = bold, label=""];
17->15 [style = bold, label=""];
1->12 [style = bold, label=""];
2->11 [style = dashed, label="0"];
13->0 [style = bold, label=""];
6->7 [style = bold, label=""];
4->11 [style = bold, label=""];
2->5 [style = bold, label=""];
16->15 [style = solid, label="limit"];
}
