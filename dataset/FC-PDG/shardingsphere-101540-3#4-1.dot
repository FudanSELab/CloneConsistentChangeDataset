digraph {
1 [style = filled, label = "return visit(ctx.predicate())@@@14@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ExpressionSegment right = new LiteralExpressionSegment(ctx.IS().getSymbol().getStopIndex() + 1,ctx.stop.getStopIndex(),new Interval(ctx.IS().getSymbol().getStopIndex() + 1,ctx.stop.getStopIndex()))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "return result@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "null != ctx.comparisonOperator() || null != ctx.SAFE_EQ_()@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final BooleanPrimaryContext ctx@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "visitBooleanPrimary['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(),ctx.stop.getStopIndex()))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "visitBooleanPrimary['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "visitBooleanPrimary['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "return new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "return visit(ctx.predicate())@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "null != ctx.IS()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "String operator = \"IS\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "return createCompareSegment(ctx)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ExpressionSegment left = (ExpressionSegment)visit(ctx.booleanPrimary())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "null != ctx.comparisonOperator() || null != ctx.SAFE_EQ_()@@@10@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
7->3 [style = solid, label="ctx"];
5->15 [style = solid, label="right"];
3->11 [style = dotted, label="true"];
12->3 [style = dotted, label="true"];
10->15 [style = bold, label=""];
5->9 [style = bold, label=""];
3->1 [style = bold, label=""];
16->8 [style = bold, label=""];
11->1 [style = bold, label=""];
8->2 [style = dotted, label="true"];
6->0 [style = solid, label="left"];
2->3 [style = bold, label=""];
0->2 [style = bold, label=""];
8->3 [style = bold, label=""];
3->14 [style = bold, label=""];
10->15 [style = solid, label="text"];
3->11 [style = bold, label=""];
4->7 [style = dotted, label="true"];
8->15 [style = dotted, label="true"];
0->15 [style = dashed, label="0"];
8->6 [style = bold, label=""];
13->7 [style = dotted, label="true"];
9->10 [style = bold, label=""];
8->10 [style = dotted, label="true"];
0->2 [style = solid, label="result"];
5->0 [style = solid, label="right"];
16->7 [style = dotted, label="true"];
6->5 [style = bold, label=""];
8->6 [style = dotted, label="true"];
8->5 [style = dotted, label="true"];
9->0 [style = solid, label="operator"];
10->0 [style = bold, label=""];
6->15 [style = solid, label="left"];
12->14 [style = bold, label=""];
4->8 [style = bold, label=""];
10->0 [style = solid, label="text"];
8->0 [style = dotted, label="true"];
15->12 [style = bold, label=""];
12->3 [style = bold, label=""];
8->9 [style = dotted, label="true"];
7->11 [style = solid, label="ctx"];
13->8 [style = bold, label=""];
9->15 [style = solid, label="operator"];
8->12 [style = bold, label=""];
}
