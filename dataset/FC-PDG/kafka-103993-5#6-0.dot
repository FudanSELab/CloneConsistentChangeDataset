digraph {
24 [style = filled, label = "assertEquals(initialPosition,truncation.fetchPosition)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertTrue(state.awaitingValidation(tp0))@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "state.assignFromUser(Collections.singleton(tp0))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Optional<LogTruncation> truncationOpt = state.maybeCompleteValidation(tp0,initialPosition,new OffsetForLeaderPartitionResult().setLeaderEpoch(EpochEndOffset.UNDEFINED_EPOCH).setEndOffset(EpochEndOffset.UNDEFINED_EPOCH_OFFSET))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Optional<LogTruncation> truncationOpt = state.maybeCompleteValidation(tp0,initialPosition,new OffsetForLeaderPartitionResult().setLeaderEpoch(initialOffsetEpoch).setEndOffset(initialOffset + 5))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "SubscriptionState.FetchPosition initialPosition = new SubscriptionState.FetchPosition(initialOffset,Optional.of(initialOffsetEpoch),new Metadata.LeaderAndEpoch(Optional.of(broker1),Optional.of(currentEpoch)))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int currentEpoch = 10@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "long initialOffset = 10L@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(Optional.empty(),truncation.divergentOffsetOpt)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "state.seekUnvalidated(tp0,initialPosition)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "LogTruncation truncation = truncationOpt.get()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertTrue(state.isOffsetResetNeeded(tp0))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Optional<LogTruncation> truncationOpt = state.maybeCompleteValidation(tp0,initialPosition,new EpochEndOffset().setLeaderEpoch(initialOffsetEpoch).setEndOffset(initialOffset + 5))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "state.requestOffsetReset(tp0)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testMaybeCompleteValidationAfterOffsetReset['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testMaybeCompleteValidationAfterOffsetReset['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "state = new SubscriptionState(new LogContext(),OffsetResetStrategy.NONE)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Node broker1 = new Node(1,\"localhost\",9092)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(state.awaitingValidation(tp0))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertFalse(state.awaitingValidation(tp0))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testTruncationDetectionUnknownDivergentOffsetWithoutResetPolicy['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertTrue(truncationOpt.isPresent())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(Optional.empty(),truncationOpt)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertNull(state.position(tp0))@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "int initialOffsetEpoch = 5@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->18 [style = dashed, label="0"];
7->20 [style = solid, label="initialPosition"];
0->9 [style = bold, label=""];
2->7 [style = solid, label="initialOffset"];
14->6 [style = solid, label="truncationOpt"];
11->20 [style = dashed, label="0"];
22->19 [style = bold, label=""];
11->14 [style = bold, label=""];
9->4 [style = bold, label=""];
2->3 [style = bold, label=""];
2->15 [style = solid, label="initialOffset"];
7->24 [style = solid, label="initialPosition"];
7->15 [style = solid, label="initialPosition"];
15->6 [style = bold, label=""];
6->0 [style = bold, label=""];
19->17 [style = bold, label=""];
24->18 [style = bold, label=""];
13->11 [style = bold, label=""];
14->15 [style = dashed, label="0"];
1->23 [style = bold, label=""];
11->15 [style = bold, label=""];
20->22 [style = bold, label=""];
7->5 [style = solid, label="initialPosition"];
7->5 [style = bold, label=""];
17->24 [style = bold, label=""];
2->14 [style = solid, label="initialOffset"];
1->7 [style = solid, label="broker1"];
8->2 [style = bold, label=""];
3->7 [style = bold, label=""];
16->1 [style = bold, label=""];
12->8 [style = bold, label=""];
5->13 [style = bold, label=""];
15->6 [style = solid, label="truncationOpt"];
21->1 [style = bold, label=""];
6->19 [style = dashed, label="0"];
1->12 [style = bold, label=""];
23->12 [style = bold, label=""];
7->14 [style = solid, label="initialPosition"];
8->7 [style = solid, label="currentEpoch"];
10->1 [style = bold, label=""];
14->6 [style = bold, label=""];
3->7 [style = solid, label="initialOffsetEpoch"];
13->20 [style = bold, label=""];
}
