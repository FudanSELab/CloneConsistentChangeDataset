digraph {
2 [style = filled, label = "assertEquals(expectedSink,actualSink)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testTableSink['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final DynamicTableSink expectedSink = createExpectedSink(SINK_SCHEMA.toPhysicalRowDataType(),keyEncodingFormat,valueEncodingFormat,SINK_KEY_FIELDS,SINK_VALUE_FIELDS,null,SINK_TOPIC,UPSERT_KAFKA_SINK_PROPERTIES,DeliveryGuarantee.AT_LEAST_ONCE,SinkBufferFlushMode.DISABLED,null)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "final SinkFunction<RowData> sinkFunction = sinkFunctionProvider.createSinkFunction()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "DynamicTableSink.SinkRuntimeProvider provider = actualUpsertKafkaSink.getSinkRuntimeProvider(new SinkRuntimeProviderContext(false))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final KafkaDynamicSink actualUpsertKafkaSink = (KafkaDynamicSink)actualSink@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testBufferedTableSink['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final DynamicTableSink actualSink = createTableSink(SINK_SCHEMA,getFullSinkOptions())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(sink,instanceOf())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertEquals(expectedSink,actualSink)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final KafkaDynamicSink actualUpsertKafkaSink = (KafkaDynamicSink)actualSink@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final SinkFunctionProvider sinkFunctionProvider = (SinkFunctionProvider)provider@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(sinkFunction,instanceOf())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "DynamicTableSink.SinkRuntimeProvider provider = actualUpsertKafkaSink.getSinkRuntimeProvider(new SinkRuntimeProviderContext(false))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(provider,instanceOf())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(provider,instanceOf())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "final Sink<RowData,?,?,?> sink = sinkFunctionProvider.createSink()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "final SinkProvider sinkFunctionProvider = (SinkProvider)provider@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "final DynamicTableSink expectedSink = createExpectedSink(SINK_SCHEMA.toPhysicalRowDataType(),keyEncodingFormat,valueEncodingFormat,SINK_KEY_FIELDS,SINK_VALUE_FIELDS,null,SINK_TOPIC,UPSERT_KAFKA_SINK_PROPERTIES,SinkBufferFlushMode.DISABLED,null)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "testTableSink['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "final DynamicTableSink actualSink = createTableSink(SINK_SCHEMA,getModifiedOptions(getFullSinkOptions(),null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(provider,instanceOf())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "final DynamicTableSink expectedSink = createExpectedSink(SINK_SCHEMA.toPhysicalRowDataType(),keyEncodingFormat,valueEncodingFormat,SINK_KEY_FIELDS,SINK_VALUE_FIELDS,null,SINK_TOPIC,UPSERT_KAFKA_SINK_PROPERTIES,new SinkBufferFlushMode(100,1000L),null)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
18->4 [style = solid, label="actualSink"];
7->9 [style = solid, label="expectedSink"];
2->6 [style = solid, label="sinkFunction"];
1->8 [style = bold, label=""];
5->9 [style = bold, label=""];
21->19 [style = bold, label=""];
6->21 [style = solid, label="provider"];
2->6 [style = bold, label=""];
6->21 [style = bold, label=""];
3->18 [style = dashed, label="0"];
3->9 [style = solid, label="actualSink"];
13->9 [style = solid, label="expectedSink"];
19->17 [style = bold, label=""];
4->2 [style = bold, label=""];
8->14 [style = dashed, label="0"];
15->3 [style = bold, label=""];
3->5 [style = solid, label="actualSink"];
2->10 [style = dashed, label="0"];
22->4 [style = bold, label=""];
6->12 [style = dashed, label="0"];
20->18 [style = bold, label=""];
7->5 [style = bold, label=""];
6->16 [style = dashed, label="0"];
18->22 [style = bold, label=""];
18->2 [style = solid, label="actualSink"];
3->7 [style = bold, label=""];
6->19 [style = solid, label="provider"];
11->10 [style = bold, label=""];
10->12 [style = bold, label=""];
17->16 [style = solid, label="sinkFunction"];
1->8 [style = solid, label="provider"];
1->11 [style = solid, label="provider"];
22->2 [style = solid, label="expectedSink"];
13->5 [style = bold, label=""];
3->13 [style = bold, label=""];
7->13 [style = dashed, label="0"];
1->14 [style = solid, label="provider"];
1->14 [style = bold, label=""];
8->4 [style = bold, label=""];
4->11 [style = dashed, label="0"];
9->1 [style = bold, label=""];
1->4 [style = solid, label="provider"];
10->12 [style = solid, label="sink"];
14->11 [style = bold, label=""];
17->16 [style = bold, label=""];
}
