digraph {
15 [style = filled, label = "LRUListWithSyncSorting list = new LRUListWithSyncSorting(controller)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "doesNotEvictNodeThatIsEvicted['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "when(recentlyUsedNode.previous()).thenReturn(list.head)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "when(recentlyUsedNode.next()).thenReturn(node).thenReturn(null)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "when(node.next()).thenReturn(list.tail)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "list.appendEntry(evictedNode)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "when(recentlyUsedNode.isRecentlyUsed()).thenReturn(true)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(list.size()).isZero()@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(list.getEvictableEntry()).isSameAs(node)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(list.size()).isOne()@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "LRUListWithSyncSorting list = new LRUListWithSyncSorting(stats,bucketRegion)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "EvictionNode node = mock()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(list.size()).isEqualTo(2)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "EvictionNode recentlyUsedNode = mock()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "verify(recentlyUsedNode,atLeast(1)).unsetRecentlyUsed()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "when(evictedNode.isEvicted()).thenReturn(true)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "EvictionNode evictedNode = mock()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(list.getEvictableEntry()).isSameAs(node)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "when(evictedNode.next()).thenReturn(node)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "doesNotEvictRecentlyUsed['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "LRUListWithAsyncSorting list = new LRUListWithAsyncSorting(stats,bucketRegion,executor)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "when(node.previous()).thenReturn(list.head)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "list.appendEntry(node)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "when(node.next()).thenReturn(list.tail)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "list.appendEntry(recentlyUsedNode)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "doesNotEvictRecentlyUsed['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "when(evictedNode.previous()).thenReturn(list.head)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->15 [style = bold, label=""];
15->10 [style = bold, label=""];
0->26 [style = bold, label=""];
21->0 [style = bold, label=""];
26->17 [style = bold, label=""];
19->12 [style = bold, label=""];
19->26 [style = solid, label="node"];
4->6 [style = bold, label=""];
12->21 [style = bold, label=""];
3->14 [style = bold, label=""];
18->19 [style = bold, label=""];
10->3 [style = bold, label=""];
9->10 [style = bold, label=""];
12->0 [style = bold, label=""];
24->18 [style = bold, label=""];
22->23 [style = bold, label=""];
25->2 [style = bold, label=""];
9->23 [style = dashed, label="0"];
5->25 [style = bold, label=""];
20->5 [style = bold, label=""];
10->2 [style = solid, label="recentlyUsedNode"];
5->1 [style = bold, label=""];
23->24 [style = bold, label=""];
0->4 [style = bold, label=""];
10->5 [style = solid, label="recentlyUsedNode"];
6->26 [style = dashed, label="0"];
6->13 [style = bold, label=""];
14->12 [style = bold, label=""];
19->21 [style = solid, label="node"];
8->9 [style = bold, label=""];
13->5 [style = bold, label=""];
12->0 [style = solid, label="node"];
1->2 [style = bold, label=""];
10->3 [style = solid, label="recentlyUsedNode"];
12->1 [style = solid, label="node"];
24->12 [style = solid, label="evictedNode"];
10->24 [style = dashed, label="0"];
2->11 [style = bold, label=""];
11->7 [style = bold, label=""];
9->15 [style = dashed, label="0"];
17->20 [style = bold, label=""];
19->25 [style = solid, label="node"];
}
