digraph {
4 [style = filled, label = "ticker.advance(1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ticker.advance(3)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(0,stopwatch.elapsedTime(NANOSECONDS))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "ticker.advance(2)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testReset_new['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(0,stopwatch.elapsed(NANOSECONDS))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "testReset_whileRunning['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertEquals(2,stopwatch.elapsed(NANOSECONDS))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "ticker.advance(2)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(2,stopwatch.elapsedTime(NANOSECONDS))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "stopwatch.reset()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(0,stopwatch.elapsedTime(NANOSECONDS))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "stopwatch.start()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "stopwatch.start()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ticker.advance(3)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(3,stopwatch.elapsedTime(NANOSECONDS))@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertFalse(stopwatch.isRunning())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(0,stopwatch.elapsed(NANOSECONDS))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "testReset_whileRunning['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5->13 [style = dashed, label="0"];
4->3 [style = bold, label=""];
9->10 [style = dashed, label="0"];
0->13 [style = bold, label=""];
4->6 [style = bold, label=""];
2->1 [style = bold, label=""];
11->4 [style = bold, label=""];
2->18 [style = bold, label=""];
8->12 [style = dashed, label="0"];
1->18 [style = dashed, label="0"];
7->4 [style = bold, label=""];
3->12 [style = bold, label=""];
15->16 [style = bold, label=""];
12->0 [style = bold, label=""];
1->9 [style = bold, label=""];
6->2 [style = bold, label=""];
8->0 [style = bold, label=""];
5->6 [style = bold, label=""];
3->8 [style = bold, label=""];
18->9 [style = bold, label=""];
9->14 [style = bold, label=""];
14->15 [style = bold, label=""];
13->6 [style = bold, label=""];
1->10 [style = bold, label=""];
17->4 [style = bold, label=""];
0->5 [style = bold, label=""];
}
