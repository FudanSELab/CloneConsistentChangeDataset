digraph {
0 [style = filled, label = "a.grant(Jenkins.READ).onRoot().to(\"anonymous\")@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "{webClient.setRedirectEnabled(false)webClient.setThrowExceptionOnFailingStatusCode(false)Page page = webClient.getPage(resourceResponseUrl.replace(\"readme.txt\",\"\"))Assert.assertEquals(\"directory listing response\",200,page.getWebResponse().getStatusCode())String responseContent = page.getWebResponse().getContentAsString()Assert.assertTrue(\"directory listing shown\",responseContent.contains(\"readme.txt\"))Assert.assertTrue(\"is HTML\",responseContent.contains(\"href=\"))}@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "JenkinsLocationConfiguration.get().setUrl(null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "String resourceResponseUrl@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "MockAuthorizationStrategy a = new MockAuthorizationStrategy()@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "{webClient.setThrowExceptionOnFailingStatusCode(false)Page page = webClient.getPage(resourceRootUrl)Assert.assertEquals(\"resource root URL response is 404\",404,page.getWebResponse().getStatusCode())}@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "secondDomainBasics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "j.jenkins.setSecurityRealm(j.createDummySecurityRealm())@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "{webClient.withRedirectEnabled(false).withThrowExceptionOnFailingStatusCode(false)Page page = webClient.getPage(resourceResponseUrl)resourceResponseUrl = page.getUrl().toString()Assert.assertEquals(\"resource response failed\",403,page.getWebResponse().getStatusCode())Assert.assertNull(\"no CSP headers\",page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"))Assert.assertTrue(\"Served from resource domain\",resourceResponseUrl.contains(RESOURCE_DOMAIN))}@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "JenkinsRule.WebClient webClient = j.createWebClient()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "clearRootUrl['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "{Page page = webClient.getPage(resourceResponseUrl)resourceResponseUrl = page.getUrl().toString()Assert.assertEquals(\"resource response success\",200,page.getWebResponse().getStatusCode())Assert.assertNull(\"no CSP headers\",page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"))Assert.assertTrue(\"Served from resource domain\",resourceResponseUrl.contains(RESOURCE_DOMAIN))Assert.assertTrue(\"Served from resource action\",resourceResponseUrl.contains(\"static-files\"))}@@@68@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "{Page page = webClient.getPage(resourceResponseUrl)resourceResponseUrl = page.getUrl().toString()Assert.assertEquals(\"resource response success\",200,page.getWebResponse().getStatusCode())Assert.assertNull(\"no CSP headers\",page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"))Assert.assertTrue(\"Served from resource domain\",resourceResponseUrl.contains(RESOURCE_DOMAIN))Assert.assertTrue(\"Served from resource action\",resourceResponseUrl.contains(\"static-files\"))}@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "JenkinsRule.WebClient webClient = j.createWebClient()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "String resourceResponseUrl@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "String resourceRootUrl = ResourceDomainConfiguration.get().getUrl()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "{webClient.setThrowExceptionOnFailingStatusCode(false)Page page = webClient.getPage(resourceRootUrl + \"/static-files/\")Assert.assertEquals(\"resource action index page response is 404\",404,page.getWebResponse().getStatusCode())}@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "{webClient.setRedirectEnabled(true)Page page = webClient.goTo(\"userContent/readme.txt\",\"text/plain\")resourceResponseUrl = page.getUrl().toString()Assert.assertEquals(\"resource response success\",200,page.getWebResponse().getStatusCode())Assert.assertNotNull(\"CSP headers set\",page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"))Assert.assertFalse(\"Not served from resource domain\",resourceResponseUrl.contains(RESOURCE_DOMAIN))Assert.assertFalse(\"Not served from resource action\",resourceResponseUrl.contains(\"static-files\"))Assert.assertTrue(\"Original URL\",resourceResponseUrl.contains(\"userContent/readme.txt\"))}@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "j.jenkins.setAuthorizationStrategy(a)@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "secondDomainBasics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "{webClient.setThrowExceptionOnFailingStatusCode(false)String uuid = UUID.randomUUID().toString()Page page = webClient.getPage(resourceRootUrl + \"static-files/\" + uuid)Assert.assertEquals(\"resource response is 404\",404,page.getWebResponse().getStatusCode())Assert.assertTrue(\"response URL is still the same\",page.getUrl().toString().contains(uuid))}@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19->3 [style = bold, label=""];
11->3 [style = bold, label=""];
5->14 [style = bold, label=""];
3->14 [style = bold, label=""];
6->15 [style = bold, label=""];
7->2 [style = solid, label="a"];
16->8 [style = solid, label="resourceResponseUrl"];
1->12 [style = bold, label=""];
16->0 [style = bold, label=""];
10->11 [style = bold, label=""];
0->8 [style = bold, label=""];
3->5 [style = bold, label=""];
4->1 [style = bold, label=""];
9->7 [style = bold, label=""];
14->4 [style = solid, label="resourceResponseUrl"];
12->13 [style = solid, label="resourceRootUrl"];
12->6 [style = solid, label="resourceRootUrl"];
18->19 [style = bold, label=""];
12->15 [style = solid, label="resourceRootUrl"];
15->13 [style = bold, label=""];
17->11 [style = bold, label=""];
2->16 [style = bold, label=""];
13->9 [style = bold, label=""];
14->4 [style = bold, label=""];
4->16 [style = solid, label="resourceResponseUrl"];
14->20 [style = bold, label=""];
12->6 [style = bold, label=""];
7->2 [style = bold, label=""];
}
