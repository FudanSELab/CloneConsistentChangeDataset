digraph {
5 [style = filled, label = "i < DATA_BYTES.length@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "i++@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testSkip_AtEnd['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(-1,in.read(bs,2,2))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int i = 0@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "byte(( expected = Arrays.copyOf(bs,bs.length)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testReadArrayOffsetLength_AtEndOfStream['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(0L,in.skip(2L))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(-1,in.read())@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertArrayEquals(expected,bs)@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "in.read()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testReadArrayOffsetLength_AtEndOfStream['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8->0 [style = bold, label=""];
5->3 [style = bold, label=""];
5->7 [style = bold, label=""];
1->4 [style = bold, label=""];
2->5 [style = bold, label=""];
6->0 [style = bold, label=""];
7->1 [style = bold, label=""];
9->11 [style = bold, label=""];
3->2 [style = bold, label=""];
7->4 [style = solid, label="expected"];
5->9 [style = bold, label=""];
5->3 [style = dotted, label="true"];
1->11 [style = dashed, label="0"];
2->5 [style = solid, label="i"];
5->2 [style = dotted, label="true"];
10->0 [style = bold, label=""];
0->5 [style = solid, label="i"];
0->5 [style = bold, label=""];
0->2 [style = solid, label="i"];
}
