digraph {
9 [style = filled, label = "assertNewInstance['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(actual.getWhere(),is(Optional.of(whereSegment)))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(actual.getTablesContext().getTables().stream().map(null).collect(Collectors.toList()),is(Arrays.asList(\"tbl_1\",\"tbl_2\")))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "joinTableSegment.setRight(table2)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(actual.getAllTables().stream().map(null).collect(Collectors.toList()),is(Arrays.asList(\"tbl_1\",\"tbl_2\")))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(actual.getAllTables().stream().map(null).collect(Collectors.toList()),is(Arrays.asList(\"tbl_1\",\"tbl_2\",\"tbl_2\")))@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "tableSegment.setRight(table2)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "UpdateStatement updateStatement = new MySQLUpdateStatement()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertNewInstance['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "joinTableSegment.setLeft(table1)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "JoinTableSegment joinTableSegment = new JoinTableSegment()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "List<SimpleTableSegment> tables = new LinkedList<>()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "DeleteStatementContext actual = new DeleteStatementContext(deleteStatement)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "SimpleTableSegment table1 = new SimpleTableSegment(0,0,new IdentifierValue(\"tbl_1\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "when(whereSegment.getExpr()).thenReturn(expression)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "when(columnSegment.getOwner()).thenReturn(Optional.of(new OwnerSegment(0,0,new IdentifierValue(\"tbl_2\"))))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "updateStatement.setSetAssignment(new SetAssignmentSegment(0,0,Collections.emptyList()))@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "tables.add(table1)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "SimpleTableSegment table2 = new SimpleTableSegment(0,0,new IdentifierValue(\"tbl_2\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "JoinTableSegment tableSegment = new JoinTableSegment()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertNewInstance['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "tableSegment.setLeft(table1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "when(whereSegment.getExpr()).thenReturn(mock())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "deleteStatement.setWhere(whereSegment)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "updateStatement.setTableSegment(joinTableSegment)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(actual.getWhere(),is(Optional.of(whereSegment)))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "UpdateStatementContext actual = new UpdateStatementContext(updateStatement)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "BinaryOperationExpression expression = new BinaryOperationExpression(0,0,columnSegment,null,null,null)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "deleteStatement.setTableSegment(tableSegment)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(actual.getTablesContext().getTables().stream().map(null).collect(Collectors.toList()),is(Arrays.asList(\"tbl_1\",\"tbl_2\")))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "tables.add(table2)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final DeleteStatement deleteStatement@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "updateStatement.setWhere(whereSegment)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->2 [style = bold, label=""];
14->17 [style = bold, label=""];
13->19 [style = bold, label=""];
23->24 [style = bold, label=""];
0->14 [style = solid, label="table2"];
16->18 [style = bold, label=""];
12->15 [style = bold, label=""];
0->29 [style = bold, label=""];
31->21 [style = dotted, label="true"];
22->27 [style = bold, label=""];
30->0 [style = solid, label="table1"];
14->29 [style = dashed, label="0"];
27->23 [style = bold, label=""];
4->22 [style = solid, label="tableSegment"];
1->0 [style = dashed, label="0"];
0->16 [style = solid, label="table2"];
15->7 [style = bold, label=""];
1->14 [style = bold, label=""];
31->26 [style = bold, label=""];
15->7 [style = solid, label="expression"];
21->27 [style = solid, label="deleteStatement"];
6->22 [style = dashed, label="0"];
3->25 [style = dashed, label="0"];
17->13 [style = solid, label="joinTableSegment"];
2->3 [style = bold, label=""];
28->4 [style = bold, label=""];
4->6 [style = solid, label="table1"];
0->10 [style = bold, label=""];
6->16 [style = bold, label=""];
10->1 [style = bold, label=""];
13->11 [style = bold, label=""];
29->32 [style = bold, label=""];
19->11 [style = bold, label=""];
17->6 [style = bold, label=""];
7->4 [style = bold, label=""];
8->13 [style = bold, label=""];
28->29 [style = solid, label="table2"];
32->22 [style = bold, label=""];
30->28 [style = bold, label=""];
24->25 [style = bold, label=""];
18->8 [style = bold, label=""];
18->11 [style = solid, label="updateStatement"];
26->30 [style = bold, label=""];
20->12 [style = bold, label=""];
4->1 [style = solid, label="table1"];
4->0 [style = bold, label=""];
11->5 [style = bold, label=""];
9->12 [style = bold, label=""];
}
