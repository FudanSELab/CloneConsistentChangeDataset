digraph {
24 [style = filled, label = "assertEquals(\"fox\",tokens.get(3).getTerm())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testWithIndexAnalyzers['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "request.analyzer(\"standard\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "tokens = analyze.getTokens()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(\"the\",tokens.get(0).getTerm())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testNonPreBuildTokenFilter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "List<AnalyzeResponse.AnalyzeToken> tokens = analyze.getTokens()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "request.tokenizer(\"redspace\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "testNonPreBuildTokenFilter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,\"text\",null,indexAnalyzers,registry,environment,maxTokenCount)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(\"quick\",tokens.get(0).getTerm())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "request.analyzer(null)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertEquals(\"brown\",tokens.get(1).getTerm())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "request.tokenizer(\"standard\")@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(\"brown\",tokens.get(1).getTerm())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(3,tokens.size())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,\"text\",null,indexAnalyzers,registry,environment,maxTokenCount)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "request.analyzer(\"custom_analyzer\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(4,tokens.size())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(\"quick\",tokens.get(1).getTerm())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "request.text(\"the quick brown fox\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(4,tokens.size())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "request.addTokenFilter(\"mock\")@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "AnalyzeRequest request = new AnalyzeRequest()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,\"text\",null,indexAnalyzers,registry,environment,maxTokenCount)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(\"fox\",tokens.get(2).getTerm())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(\"quick\",tokens.get(1).getTerm())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "request.addTokenFilter(\"stop\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "AnalyzeResponse analyze = TransportAnalyzeAction.analyze(request,\"text\",null,indexAnalyzers,registry,environment,maxTokenCount)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(\"the\",tokens.get(0).getTerm())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(\"fox\",tokens.get(2).getTerm())@@@35@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(\"fox\",tokens.get(3).getTerm())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "request.tokenizer(\"standard\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertEquals(\"brown\",tokens.get(2).getTerm())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "tokens = analyze.getTokens()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(\"brown\",tokens.get(2).getTerm())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "tokens = analyze.getTokens()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"quick\",tokens.get(0).getTerm())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(3,tokens.size())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->30 [style = bold, label=""];
20->13 [style = bold, label=""];
1->8 [style = bold, label=""];
18->23 [style = bold, label=""];
7->33 [style = solid, label="request"];
35->15 [style = bold, label=""];
0->6 [style = bold, label=""];
7->12 [style = bold, label=""];
7->13 [style = solid, label="request"];
38->16 [style = bold, label=""];
36->28 [style = bold, label=""];
32->14 [style = bold, label=""];
7->4 [style = bold, label=""];
9->10 [style = bold, label=""];
16->17 [style = bold, label=""];
26->19 [style = bold, label=""];
7->8 [style = bold, label=""];
12->1 [style = bold, label=""];
25->7 [style = bold, label=""];
27->35 [style = bold, label=""];
33->26 [style = bold, label=""];
34->22 [style = bold, label=""];
2->33 [style = solid, label="analyze"];
4->12 [style = dashed, label="0"];
24->20 [style = bold, label=""];
17->34 [style = bold, label=""];
29->33 [style = bold, label=""];
22->18 [style = bold, label=""];
23->37 [style = bold, label=""];
8->2 [style = bold, label=""];
5->0 [style = bold, label=""];
3->7 [style = bold, label=""];
10->29 [style = bold, label=""];
37->31 [style = bold, label=""];
31->27 [style = bold, label=""];
7->2 [style = solid, label="request"];
33->23 [style = solid, label="analyze"];
15->24 [style = bold, label=""];
23->13 [style = solid, label="analyze"];
21->32 [style = bold, label=""];
7->23 [style = solid, label="request"];
4->1 [style = bold, label=""];
6->9 [style = bold, label=""];
30->2 [style = bold, label=""];
13->21 [style = bold, label=""];
19->38 [style = bold, label=""];
11->7 [style = bold, label=""];
2->5 [style = bold, label=""];
14->36 [style = bold, label=""];
}
