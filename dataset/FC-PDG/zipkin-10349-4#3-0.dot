digraph {
12 [style = filled, label = "assertThat(rowCountForTraceByServiceSpan(storage)).isGreaterThanOrEqualTo(4L)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(getTagValue(storage,\"environment\")).isEqualTo(\"dev\")@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(rowCountForTraceByServiceSpan(storage)).isGreaterThanOrEqualTo(120L)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "accept(storage.spanConsumer(),trace)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "IntStream.range(0,100).forEach(null)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "skipsRedundantIndexingInATrace['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "insertTags_SelectTags_CalculateCount['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertThat(rowCountForTraceByServiceSpan(storage)).isGreaterThanOrEqualTo(120L)@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "trace(0( = TestObjects.CLIENT_SPAN.toBuilder().kind(Span.Kind.SERVER).build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(rowCountForTraceByServiceSpan(storage)).isGreaterThanOrEqualTo(4L)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "IntStream.range(0,100).forEach(null)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "IntStream.range(0,100).forEach(null)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "accept(storage.toBuilder().strictTraceId(false).build().spanConsumer(),trace)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "insertTags_SelectTags_CalculateCount['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Span(( trace = new Span((((@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(rowCountForTags(storage)).isEqualTo(1L)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
4->14 [style = bold, label=""];
1->8 [style = bold, label=""];
3->1 [style = bold, label=""];
1->4 [style = solid, label="trace"];
4->6 [style = bold, label=""];
12->11 [style = bold, label=""];
1->0 [style = bold, label=""];
6->14 [style = dashed, label="0"];
15->3 [style = bold, label=""];
0->10 [style = dashed, label="0"];
7->3 [style = bold, label=""];
6->2 [style = bold, label=""];
0->4 [style = bold, label=""];
14->12 [style = bold, label=""];
11->13 [style = bold, label=""];
10->4 [style = bold, label=""];
0->8 [style = dashed, label="0"];
13->9 [style = bold, label=""];
8->4 [style = bold, label=""];
1->10 [style = bold, label=""];
1->11 [style = solid, label="trace"];
}
