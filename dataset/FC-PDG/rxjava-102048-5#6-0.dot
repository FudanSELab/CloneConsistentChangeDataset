digraph {
2 [style = filled, label = "TestHelper.assertUndeliverable(errors,0,)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "windowCloseIngoresCancel['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "windowCloseIngoresCancel['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "{RxJavaPlugins.reset()}@@@26@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "List<Throwable> errors = TestHelper.trackPluginErrors()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "windowCloseIngoresCancel['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "BehaviorSubject.createDefault(1).window(BehaviorSubject.createDefault(1),new Function<Integer,Observable<Integer>>(){@Override public Observable<Integer> apply(Integer f){return new Observable<Integer>(){@Override protected void subscribeActual(Observer<? super Integer> observer){observer.onSubscribe(Disposable.empty())observer.onNext(1)observer.onNext(2)observer.onError(new TestException())}}}}).doOnNext(new Consumer<Observable<Integer>>(){@Override public void accept(Observable<Integer> w){w.subscribe(Functions.emptyConsumer(),Functions.emptyConsumer())}}).test().assertValueCount(1).assertNoErrors().assertNotComplete()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "BehaviorProcessor.createDefault(1).window(BehaviorProcessor.createDefault(1),new Function<Integer,Publisher<Integer>>(){@Override public Publisher<Integer> apply(Integer f){return new Flowable<Integer>(){@Override protected void subscribeActual(Subscriber<? super Integer> s){s.onSubscribe(new BooleanSubscription())s.onNext(1)s.onNext(2)s.onError(new TestException())}}}}).doOnNext(new Consumer<Flowable<Integer>>(){@Override public void accept(Flowable<Integer> w){w.subscribe(Functions.emptyConsumer(),Functions.emptyConsumer())}}).test().assertValueCount(1).assertNoErrors().assertNotComplete()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->1 [style = bold, label=""];
0->6 [style = dashed, label="0"];
0->2 [style = bold, label=""];
2->4 [style = bold, label=""];
1->6 [style = bold, label=""];
6->2 [style = bold, label=""];
3->1 [style = bold, label=""];
1->2 [style = solid, label="errors"];
1->0 [style = bold, label=""];
5->1 [style = bold, label=""];
}
