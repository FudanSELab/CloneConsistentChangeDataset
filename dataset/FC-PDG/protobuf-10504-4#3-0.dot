digraph {
2 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()assertEquals(builder.getFooInt(),0)assertFalse(builder.hasFooInt())assertTrue(builder.setFooInt(123).hasFooInt())assertEquals(builder.getFooInt(),123)TestOneof2 message = builder.buildPartial()assertTrue(message.hasFooInt())assertEquals(message.getFooInt(),123)assertFalse(builder.clearFooInt().hasFooInt())TestOneof2 message2 = builder.build()assertFalse(message2.hasFooInt())assertEquals(message2.getFooInt(),0)}@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testOneofTypes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()TestOneof2 message = builder.setFooString(\"foo\").build()TestOneof2 message2 = TestOneof2.newBuilder().mergeFrom(message).build()assertTrue(message2.hasFooString())assertEquals(\"foo\",message2.getFooString())}@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testOneofMerge['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testOneofMerge['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()assertEquals(builder.getFooString(),\"\")builder.setFooString(\"foo\")assertTrue(builder.hasFooString())assertEquals(builder.getFooString(),\"foo\")TestOneof2 message = builder.buildPartial()assertTrue(message.hasFooString())assertEquals(message.getFooString(),\"foo\")assertEquals(message.getFooStringBytes(),TestUtil.toBytes(\"foo\"))assertFalse(builder.clearFooString().hasFooString())TestOneof2 message2 = builder.buildPartial()assertFalse(message2.hasFooString())assertEquals(message2.getFooString(),\"\")assertEquals(message2.getFooStringBytes(),TestUtil.toBytes(\"\"))builder.setFooInt(123)assertEquals(builder.getFooString(),\"\")assertEquals(builder.getFooStringBytes(),TestUtil.toBytes(\"\"))assertEquals(123,builder.getFooInt())message = builder.build()assertEquals(message.getFooString(),\"\")assertEquals(message.getFooStringBytes(),TestUtil.toBytes(\"\"))assertEquals(123,message.getFooInt())}@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()assertEquals(builder.getFooEnum(),TestOneof2.NestedEnum.FOO)assertTrue(builder.setFooEnum(TestOneof2.NestedEnum.BAR).hasFooEnum())assertEquals(builder.getFooEnum(),TestOneof2.NestedEnum.BAR)TestOneof2 message = builder.buildPartial()assertTrue(message.hasFooEnum())assertEquals(message.getFooEnum(),TestOneof2.NestedEnum.BAR)assertFalse(builder.clearFooEnum().hasFooEnum())TestOneof2 message2 = builder.build()assertFalse(message2.hasFooEnum())assertEquals(message2.getFooEnum(),TestOneof2.NestedEnum.FOO)}@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()assertEquals(builder.getFooMessage().getQuxInt(),0)builder.setFooMessage(TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build())assertTrue(builder.hasFooMessage())assertEquals(builder.getFooMessage().getQuxInt(),234)TestOneof2 message = builder.buildPartial()assertTrue(message.hasFooMessage())assertEquals(message.getFooMessage().getQuxInt(),234)assertFalse(builder.clearFooMessage().hasFooString())message = builder.build()assertFalse(message.hasFooMessage())assertEquals(message.getFooMessage().getQuxInt(),0)builder = TestOneof2.newBuilder()assertSame(builder.getFooMessageOrBuilder(),TestOneof2.NestedMessage.getDefaultInstance())assertFalse(builder.hasFooMessage())builder.getFooMessageBuilder().setQuxInt(123)assertTrue(builder.hasFooMessage())assertEquals(builder.getFooMessage().getQuxInt(),123)message = builder.build()assertTrue(message.hasFooMessage())assertEquals(message.getFooMessage().getQuxInt(),123)}@@@86@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()assertEquals(builder.getFooStringPiece(),\"\")builder.setFooStringPiece(\"foo\")assertTrue(builder.hasFooStringPiece())assertEquals(builder.getFooStringPiece(),\"foo\")TestOneof2 message = builder.buildPartial()assertTrue(message.hasFooStringPiece())assertEquals(message.getFooStringPiece(),\"foo\")assertEquals(message.getFooStringPieceBytes(),TestUtil.toBytes(\"foo\"))assertFalse(builder.clearFooStringPiece().hasFooStringPiece())TestOneof2 message2 = builder.build()assertFalse(message2.hasFooStringPiece())assertEquals(message2.getFooStringPiece(),\"\")assertEquals(message2.getFooStringPieceBytes(),TestUtil.toBytes(\"\"))}@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()assertEquals(builder.getFooCord(),\"\")builder.setFooCord(\"foo\")assertTrue(builder.hasFooCord())assertEquals(builder.getFooCord(),\"foo\")TestOneof2 message = builder.buildPartial()assertTrue(message.hasFooCord())assertEquals(message.getFooCord(),\"foo\")assertEquals(message.getFooCordBytes(),TestUtil.toBytes(\"foo\"))assertFalse(builder.clearFooCord().hasFooCord())TestOneof2 message2 = builder.build()assertFalse(message2.hasFooCord())assertEquals(message2.getFooCord(),\"\")assertEquals(message2.getFooCordBytes(),TestUtil.toBytes(\"\"))}@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()TestOneof2 message = builder.setFooMessage(TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build()).build()TestOneof2 message2 = TestOneof2.newBuilder().mergeFrom(message).build()assertTrue(message2.hasFooMessage())assertEquals(234,message2.getFooMessage().getQuxInt())}@@@24@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5->2 [style = bold, label=""];
0->9 [style = bold, label=""];
2->0 [style = bold, label=""];
9->8 [style = bold, label=""];
0->4 [style = bold, label=""];
10->6 [style = bold, label=""];
2->1 [style = bold, label=""];
8->10 [style = bold, label=""];
3->2 [style = bold, label=""];
1->0 [style = bold, label=""];
7->2 [style = bold, label=""];
}
