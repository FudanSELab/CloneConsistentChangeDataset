digraph {
0 [style = filled, label = "StreamPartition<String> shard1 = StreamPartition.of(stream,shardId1)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "expect(getShardIteratorResult0.getShardIterator()).andReturn(shard0Iterator).anyTimes()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "verifyAll()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "expect(getRecordsResult0.getRecords()).andReturn(shard0Records).once()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "expect(getRecordsResult1.getNextShardIterator()).andReturn(null).anyTimes()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,1,0,2,false,100,5000,5000,60000,5)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,recordsPerFetch,0,2,true,100,5000,5000,60000,100)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Set<StreamPartition<String>> partitions = ImmutableSet.of(StreamPartition.of(stream,shardId0),StreamPartition.of(stream,shardId1))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Thread.sleep(100)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "expect(kinesis.getRecords(generateGetRecordsReq(shard1Iterator,recordsPerFetch))).andReturn(getRecordsResult1).anyTimes()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "expect(kinesis.getShardIterator(anyObject(),eq(shardId1),anyString(),anyString())).andReturn(getShardIteratorResult1).anyTimes()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Set<StreamPartition<String>> partitions = ImmutableSet.of(shard1)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "expect(getShardIteratorResult1.getShardIterator()).andReturn(shard1Iterator).anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "recordSupplier.start()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "StreamPartition<String> shard1 = StreamPartition.of(stream,SHARD_ID1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "recordSupplier.seekToEarliest(partitions)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testSeekUnassigned['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "recordsPerFetch = 100@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "recordSupplier.assign(partitions)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "StreamPartition<String> shard0 = StreamPartition.of(stream,SHARD_ID0)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "Assert.assertEquals(partitions,recordSupplier.getAssignment())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "i++@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testSeekUnassigned['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "recordSupplier.seekToEarliest(Collections.singleton(shard0))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "int i = 0@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "replayAll()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "i < 10 && recordSupplier.bufferSize() < 12@@@21@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "expect(getRecordsResult1.getRecords()).andReturn(shard1Records).once()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "expect(kinesis.getShardIterator(anyObject(),eq(shardId0),anyString(),anyString())).andReturn(getShardIteratorResult0).anyTimes()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertTrue(polledRecords.containsAll(allRecords))@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "recordSupplier.assign(partitions)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "expect(getRecordsResult0.getNextShardIterator()).andReturn(null).anyTimes()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "expect(kinesis.getRecords(generateGetRecordsReq(shard0Iterator,recordsPerFetch))).andReturn(getRecordsResult0).anyTimes()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "testPollDeaggregate['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "StreamPartition<String> shard0 = StreamPartition.of(stream,shardId0)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "List<OrderedPartitionableRecord<String,String>> polledRecords = cleanRecords(recordSupplier.poll(poll_timeout_millis))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
13->10 [style = bold, label=""];
10->18 [style = bold, label=""];
28->29 [style = bold, label=""];
11->16 [style = bold, label=""];
25->21 [style = solid, label="i"];
6->8 [style = dashed, label="0"];
30->13 [style = bold, label=""];
2->6 [style = bold, label=""];
25->35 [style = solid, label="i"];
19->20 [style = bold, label=""];
26->25 [style = bold, label=""];
8->1 [style = solid, label="shard0"];
34->33 [style = bold, label=""];
35->21 [style = solid, label="i"];
23->32 [style = bold, label=""];
14->34 [style = bold, label=""];
32->27 [style = bold, label=""];
6->0 [style = bold, label=""];
12->26 [style = bold, label=""];
0->3 [style = solid, label="shard1"];
16->22 [style = bold, label=""];
9->8 [style = bold, label=""];
18->28 [style = bold, label=""];
17->19 [style = bold, label=""];
7->3 [style = bold, label=""];
35->21 [style = bold, label=""];
8->7 [style = bold, label=""];
27->15 [style = bold, label=""];
24->14 [style = bold, label=""];
1->12 [style = dashed, label="0"];
3->5 [style = bold, label=""];
21->31 [style = bold, label=""];
31->35 [style = bold, label=""];
7->3 [style = solid, label="shard1"];
21->31 [style = dotted, label="true"];
22->12 [style = bold, label=""];
5->4 [style = bold, label=""];
6->1 [style = solid, label="shard0"];
11->27 [style = solid, label="partitions"];
11->12 [style = solid, label="partitions"];
13->16 [style = solid, label="recordsPerFetch"];
4->1 [style = bold, label=""];
3->4 [style = solid, label="partitions"];
29->24 [style = bold, label=""];
0->7 [style = dashed, label="0"];
21->35 [style = dotted, label="true"];
11->22 [style = solid, label="partitions"];
25->21 [style = bold, label=""];
33->17 [style = bold, label=""];
20->11 [style = bold, label=""];
21->23 [style = bold, label=""];
}
