digraph {
1 [style = filled, label = "collectInto['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Flowable.just(1,1,1,1,2).collectInto(new HashSet<Integer>(),new BiConsumer<HashSet<Integer>,Integer>(){@Override public void accept(HashSet<Integer> s,Integer v){s.add(v)}}).toFlowable().test().assertResult(new HashSet<Integer>(Arrays.asList(1,2)))@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "collectIntoFlowable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "collectInto['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Observable.just(1,1,1,1,2).collectInto(new HashSet<>(),new BiConsumer<HashSet<Integer>,Integer>(){@Override public void accept(HashSet<Integer> s,Integer v){s.add(v)}}).test().assertResult(new HashSet<>(Arrays.asList(1,2)))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Observable.just(1,1,1,1,2).collectInto(new HashSet<Integer>(),new BiConsumer<HashSet<Integer>,Integer>(){@Override public void accept(HashSet<Integer> s,Integer v){s.add(v)}}).test().assertResult(new HashSet<Integer>(Arrays.asList(1,2)))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0->2 [style = dashed, label="0"];
0->4 [style = dashed, label="0"];
1->0 [style = bold, label=""];
3->2 [style = bold, label=""];
5->4 [style = bold, label=""];
}
