digraph {
0 [style = filled, label = "ManifestFile manifest = writeManifest(FILE_A,FILE_B)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assertions.assertThat(obj).as(\"Should be a ManifestFile\").isInstanceOf()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "int i = 0@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "i < 3@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "out.writeObject(manifest)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "return (T)in.readObject()@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ByteArrayOutputStream bytes = new ByteArrayOutputStream()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "out.writeObject(manifest.copy())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testManifestFileJavaSerialization['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "roundTripSerialize['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Object obj = in.readObject()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "out.writeObject(type)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "checkManifestFile(manifest,(ManifestFile)obj)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "T type@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "i += 1@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(\"Should be a ManifestFile\",obj instanceof ManifestFile)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "testManifestFileJavaSerialization['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "out.writeObject(GenericManifestFile.copyOf(manifest).build())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
7->13 [style = bold, label=""];
6->17 [style = bold, label=""];
5->10 [style = bold, label=""];
10->8 [style = dotted, label="true"];
0->8 [style = solid, label="manifest"];
11->4 [style = bold, label=""];
8->3 [style = bold, label=""];
15->17 [style = solid, label="type"];
10->3 [style = dotted, label="true"];
0->11 [style = bold, label=""];
6->0 [style = bold, label=""];
0->11 [style = solid, label="manifest"];
11->17 [style = dashed, label="0"];
12->6 [style = bold, label=""];
10->7 [style = bold, label=""];
9->6 [style = bold, label=""];
3->10 [style = bold, label=""];
3->10 [style = solid, label="i"];
14->15 [style = dotted, label="true"];
7->8 [style = solid, label="obj"];
10->13 [style = dotted, label="true"];
10->2 [style = dotted, label="true"];
7->2 [style = bold, label=""];
2->13 [style = dashed, label="0"];
4->1 [style = bold, label=""];
7->2 [style = solid, label="obj"];
13->8 [style = bold, label=""];
5->10 [style = solid, label="i"];
14->6 [style = bold, label=""];
10->7 [style = dotted, label="true"];
17->16 [style = bold, label=""];
2->8 [style = bold, label=""];
}
