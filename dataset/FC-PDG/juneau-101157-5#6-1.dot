digraph {
19 [style = filled, label = "a05_builder_beanFactory['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "BeanStore bs = BeanStore.create().build()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertObject(ThrownStore.create().beanStore(bs).implClass().build()).isType()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "b05_builder_beanFactory['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertThrown(null).contains(\"Public constructor found but could not find prerequisites: B5a\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "BeanFactory bf = BeanFactory.create().build()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThrown(null).contains(\"Public constructor found but could not find prerequisites: B5a\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertObject(MethodExecStore.create().beanFactory(bf).implClass().build()).isType()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "bf.addBean(,new B5a())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertObject(ThrownStore.create().beanStore(bs).implClass().build()).isType()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "bf.addBean(,new A5a())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertObject(MethodExecStore.create().beanFactory(bf).implClass().build()).isType()@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertObject(MethodExecStore.create().beanFactory(bf).implClass().build()).isType()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertObject(ThrownStore.create().beanStore(bs).implClass().build()).isType()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "bs.addBean(,new B5a())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertObject(ThrownStore.create().beanFactory(bf).implClass().build()).isType()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertObject(ThrownStore.create().beanFactory(bf).implClass().build()).isType()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "b05_builder_beanFactory['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThrown(null).contains(\"Public constructor found but could not find prerequisites: A5a\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertObject(ThrownStore.create().beanFactory(bf).implClass().build()).isType()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7->13 [style = bold, label=""];
0->3 [style = bold, label=""];
4->18 [style = dashed, label="0"];
1->4 [style = bold, label=""];
9->11 [style = bold, label=""];
3->1 [style = bold, label=""];
1->14 [style = dashed, label="0"];
3->7 [style = dashed, label="0"];
2->6 [style = bold, label=""];
3->14 [style = bold, label=""];
18->15 [style = bold, label=""];
6->17 [style = dashed, label="0"];
16->17 [style = bold, label=""];
15->16 [style = bold, label=""];
2->8 [style = dashed, label="0"];
10->7 [style = bold, label=""];
6->12 [style = dashed, label="0"];
1->13 [style = dashed, label="0"];
4->9 [style = dashed, label="0"];
5->2 [style = bold, label=""];
5->11 [style = dashed, label="0"];
2->16 [style = dashed, label="0"];
11->8 [style = bold, label=""];
14->18 [style = bold, label=""];
13->9 [style = bold, label=""];
5->15 [style = dashed, label="0"];
4->5 [style = bold, label=""];
19->3 [style = bold, label=""];
8->12 [style = bold, label=""];
}
