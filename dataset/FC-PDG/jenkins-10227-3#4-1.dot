digraph {
5 [style = filled, label = "assertThat(result,failedWith(3))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1--', expected correct notation M,N or M-N\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(result,failedWith(3))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\",,2,3\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,,,3', expected correct notation M,N or M-N\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,2,,', expected correct notation M,N or M-N\"))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,2,,\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"--1\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"---\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(result,failedWith(3))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "dummyRangeNumberMultiShouldFailIfBuildNumberIsComma['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: \"---\" is not a valid option\"))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(result,failedWith(2))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: \"--1\" is not a valid option\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse ',,2,3', expected correct notation M,N or M-N\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(result,failedWith(2))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1--\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,,,3\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "dummyRangeNumberMultiShouldFailIfBuildNumberIsComma['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "dummyRangeRangeSingleShouldFailIfBuildRangeContainsHyphen['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11->10 [style = solid, label="result"];
6->21 [style = dashed, label="0"];
16->15 [style = bold, label=""];
21->7 [style = solid, label="result"];
22->14 [style = solid, label="result"];
0->9 [style = bold, label=""];
15->10 [style = bold, label=""];
12->20 [style = dashed, label="0"];
4->6 [style = bold, label=""];
7->12 [style = bold, label=""];
11->16 [style = dashed, label="0"];
3->8 [style = solid, label="result"];
0->17 [style = bold, label=""];
10->19 [style = bold, label=""];
11->2 [style = solid, label="result"];
6->5 [style = solid, label="result"];
16->10 [style = solid, label="result"];
3->22 [style = dashed, label="0"];
7->20 [style = bold, label=""];
8->14 [style = dashed, label="0"];
16->15 [style = solid, label="result"];
2->10 [style = bold, label=""];
13->11 [style = bold, label=""];
11->2 [style = bold, label=""];
1->11 [style = bold, label=""];
20->22 [style = bold, label=""];
2->15 [style = dashed, label="0"];
8->0 [style = bold, label=""];
21->5 [style = bold, label=""];
6->5 [style = bold, label=""];
18->16 [style = bold, label=""];
14->0 [style = bold, label=""];
22->0 [style = solid, label="result"];
3->0 [style = solid, label="result"];
21->5 [style = solid, label="result"];
6->7 [style = solid, label="result"];
3->8 [style = bold, label=""];
9->17 [style = dashed, label="0"];
10->4 [style = bold, label=""];
5->7 [style = bold, label=""];
4->19 [style = dashed, label="0"];
12->3 [style = bold, label=""];
22->14 [style = bold, label=""];
19->21 [style = bold, label=""];
}
