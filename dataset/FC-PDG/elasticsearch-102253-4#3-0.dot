digraph {
2 [style = filled, label = "new ImmutableOpenMapDriver<String>(){@Override protected boolean diffableValues(){return false}@Override protected String createValue(Integer key,boolean before){return String.valueOf(before? key: key + 1)}@Override protected MapDiff diff(ImmutableOpenMap<Integer,String> before,ImmutableOpenMap<Integer,String> after){return DiffableUtils.diff(before,after,keySerializer,nonDiffableValueSerializer())}@Override protected MapDiff readDiff(StreamInput in){return DiffableUtils.readImmutableOpenMapDiff(in,keySerializer,nonDiffableValueSerializer())}}.execute()@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testImmutableOpenMapDiff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "testImmutableOpenMapDiff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "new JdkMapDriver<TestDiffable>(){@Override protected boolean diffableValues(){return true}@Override protected TestDiffable createValue(Integer key,boolean before){return new TestDiffable(String.valueOf(before? key: key + 1))}@Override protected MapDiff diff(Map<Integer,TestDiffable> before,Map<Integer,TestDiffable> after){return DiffableUtils.diff(before,after,keySerializer)}@Override protected MapDiff readDiff(StreamInput in){return useProtoForDiffableSerialization? DiffableUtils.readJdkMapDiff(in,keySerializer,null,null): DiffableUtils.readJdkMapDiff(in,keySerializer,diffableValueSerializer())}}.execute()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testJKDMapDiff['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "new ImmutableOpenMapDriver<TestDiffable>(){@Override protected boolean diffableValues(){return true}@Override protected TestDiffable createValue(Integer key,boolean before){return new TestDiffable(String.valueOf(before? key: key + 1))}@Override protected MapDiff diff(ImmutableOpenMap<Integer,TestDiffable> before,ImmutableOpenMap<Integer,TestDiffable> after){return DiffableUtils.diff(before,after,keySerializer)}@Override protected MapDiff readDiff(StreamInput in){return useProtoForDiffableSerialization? DiffableUtils.readImmutableOpenMapDiff(in,keySerializer,new DiffableUtils.DiffableValueReader<>(null,null)): DiffableUtils.readImmutableOpenMapDiff(in,keySerializer,diffableValueSerializer())}}.execute()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "new JdkMapDriver<String>(){@Override protected boolean diffableValues(){return false}@Override protected String createValue(Integer key,boolean before){return String.valueOf(before? key: key + 1)}@Override protected MapDiff diff(Map<Integer,String> before,Map<Integer,String> after){return DiffableUtils.diff(before,after,keySerializer,nonDiffableValueSerializer())}@Override protected MapDiff readDiff(StreamInput in){return DiffableUtils.readJdkMapDiff(in,keySerializer,nonDiffableValueSerializer())}}.execute()@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2->4 [style = dashed, label="0"];
1->6 [style = dashed, label="0"];
6->4 [style = bold, label=""];
1->2 [style = bold, label=""];
0->1 [style = bold, label=""];
5->6 [style = bold, label=""];
3->1 [style = bold, label=""];
}
