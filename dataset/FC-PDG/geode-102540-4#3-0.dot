digraph {
2 [style = filled, label = "cos.write(9)@@@40@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@157783)@@@37@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream()@@@28@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream(streamOne)@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "final OutputStream streamTwo = mockContext.mock(,\"streamTwo\")@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertEquals(1,cos.size())@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(1,cos.size())@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1578bf)@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final Sequence seqStreamOne = mockContext.sequence(\"seqStreamOne\")@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertFalse(cos.isEmpty())@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "cos.close()@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
50 [style = filled, label = "cos.addOutputStream(streamTwo)@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "mockContext.checking(new Expectations(){})@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "cos.addOutputStream(streamOne)@@@31@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).close()@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "cos.addOutputStream(streamOne)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "cos.flush()@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(3)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertThat(cos.size()).isEqualTo(1)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(4)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1578ac,2,3)@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(2)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "cos.close()@@@42@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(1)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "cos.close()@@@66@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "mockContext.checking(new Expectations(){})@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "cos.write(9)@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertFalse(cos.isEmpty())@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "testAddOutputStreamWithOneStream['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1577d2,2,3)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(9)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "testAddOneOutputStreamWhenEmpty['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
45 [style = filled, label = "assertEquals(2,cos.size())@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertThat(cos.isEmpty()).isTrue()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1577e5)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@157770,2,3)@@@34@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final OutputStream streamOne = mock(,\"streamOne\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertThat(cos.size()).isEqualTo(0)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "cos.flush()@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "testAddOneOutputStreamWhenEmpty['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final OutputStream streamOne = mockContext.mock(,\"streamOne\")@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "InOrder inOrderStreams = inOrder(streamOne)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
48 [style = filled, label = "cos.write(9)@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
49 [style = filled, label = "final Sequence seqStreamTwo = mockContext.sequence(\"seqStreamTwo\")@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(0)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertTrue(cos.isEmpty())@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "inOrderStreams.verify(streamOne,times(2)).flush()@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertEquals(0,cos.size())@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "cos.flush()@@@41@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29->36 [style = bold, label=""];
14->3 [style = bold, label=""];
40->50 [style = bold, label=""];
7->1 [style = bold, label=""];
20->29 [style = bold, label=""];
27->19 [style = solid, label="streamOne"];
35->20 [style = bold, label=""];
18->34 [style = bold, label=""];
43->48 [style = bold, label=""];
30->27 [style = bold, label=""];
39->43 [style = bold, label=""];
3->42 [style = solid, label="streamOne"];
3->10 [style = solid, label="streamOne"];
13->49 [style = bold, label=""];
48->44 [style = bold, label=""];
16->17 [style = bold, label=""];
4->26 [style = dashed, label="0"];
15->16 [style = bold, label=""];
14->27 [style = dashed, label="0"];
26->22 [style = bold, label=""];
9->6 [style = bold, label=""];
49->47 [style = bold, label=""];
23->28 [style = bold, label=""];
11->5 [style = bold, label=""];
27->24 [style = solid, label="streamOne"];
0->14 [style = bold, label=""];
12->10 [style = bold, label=""];
6->16 [style = dashed, label="0"];
36->23 [style = bold, label=""];
28->33 [style = bold, label=""];
19->35 [style = bold, label=""];
25->26 [style = bold, label=""];
12->22 [style = dashed, label="0"];
50->45 [style = bold, label=""];
47->50 [style = solid, label="streamTwo"];
45->39 [style = bold, label=""];
3->13 [style = bold, label=""];
4->12 [style = bold, label=""];
47->41 [style = bold, label=""];
46->14 [style = bold, label=""];
34->32 [style = bold, label=""];
10->9 [style = bold, label=""];
1->2 [style = bold, label=""];
44->37 [style = bold, label=""];
8->4 [style = bold, label=""];
22->24 [style = bold, label=""];
13->8 [style = bold, label=""];
6->7 [style = bold, label=""];
33->21 [style = bold, label=""];
38->40 [style = bold, label=""];
27->25 [style = bold, label=""];
2->11 [style = bold, label=""];
32->31 [style = bold, label=""];
17->18 [style = bold, label=""];
31->19 [style = bold, label=""];
41->42 [style = bold, label=""];
42->38 [style = bold, label=""];
9->15 [style = dashed, label="0"];
24->15 [style = bold, label=""];
}
