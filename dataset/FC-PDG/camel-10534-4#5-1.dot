digraph {
11 [style = filled, label = "assertMockEndpointsSatisfied()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertNotNull(context.hasEndpoint(\"direct:start\"))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testAdvisedMockEndpointsWithPattern['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertNull(context.hasEndpoint(\"mock:direct:start\"))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertNotNull(context.hasEndpoint(\"mock:log:foo\"))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "template.sendBody(\"direct:start\",\"Hello World\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testAdvisedMockEndpointsWithPattern['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertNotNull(context.hasEndpoint(\"log:foo\"))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "AdviceWith.adviceWith(context.getRouteDefinitions().get(0),context,new AdviceWithRouteBuilder(){@Override public void configure(){mockEndpoints(\"log*\")}})@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertNotNull(context.hasEndpoint(\"direct:foo\"))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testAdvisedMockEndpointsWithPattern['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "getMockEndpoint(\"mock:log:foo\").expectedBodiesReceived(\"Bye World\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "RouteReifier.adviceWith(context.getRouteDefinitions().get(0),context,new AdviceWithRouteBuilder(){@Override public void configure(){mockEndpoints(\"log*\")}})@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "getMockEndpoint(\"mock:result\").expectedBodiesReceived(\"Bye World\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertNotNull(context.hasEndpoint(\"mock:result\"))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertNull(context.hasEndpoint(\"mock:direct:foo\"))@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7->14 [style = dashed, label="0"];
5->3 [style = bold, label=""];
4->9 [style = bold, label=""];
7->5 [style = bold, label=""];
15->7 [style = bold, label=""];
8->11 [style = bold, label=""];
11->10 [style = bold, label=""];
9->2 [style = bold, label=""];
2->6 [style = bold, label=""];
3->8 [style = bold, label=""];
6->12 [style = bold, label=""];
12->1 [style = bold, label=""];
13->14 [style = bold, label=""];
14->5 [style = bold, label=""];
0->7 [style = bold, label=""];
10->4 [style = bold, label=""];
}
