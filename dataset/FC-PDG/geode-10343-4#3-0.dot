digraph {
7 [style = filled, label = "RegionAttributesType attributesType = new RegionAttributesType()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "attributesType.setValueConstraint(\"foo\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "fromXmlWithAll['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "config.setName(\"test\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "attributesType.setPartitionAttributes(partitionAttributes)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "attributesType.setDiskStoreName(\"diskstore\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Region region = converter.fromXmlObject(config)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "attributesType.setKeyConstraint(\"bar\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(region.getType()).isEqualTo(RegionType.REPLICATE)@@@7@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "config.setRegionAttributes(attributesType)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(region.getName()).isEqualTo(\"test\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(region.getValueConstraint()).isEqualTo(\"foo\")@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "RegionAttributesType attributesType = config.getRegionAttributes()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertThat(region.getRedundantCopies()).isEqualTo(2)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "fromXmlWithNameType['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "config.setRegionAttributes(converter.createRegionAttributesByType(\"PARTITION\"))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertThat(region.getKeyConstraint()).isEqualTo(\"bar\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "fromXmlWithAll['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "config.setType(\"REPLICATE\")@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(region.getDiskStoreName()).isEqualTo(\"diskstore\")@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(region.getType()).isEqualTo(RegionType.PARTITION)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "RegionAttributesType.PartitionAttributes partitionAttributes = new RegionAttributesType.PartitionAttributes()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "partitionAttributes.setRedundantCopies(\"2\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->9 [style = bold, label=""];
16->11 [style = bold, label=""];
10->15 [style = bold, label=""];
11->1 [style = bold, label=""];
7->14 [style = dashed, label="0"];
20->0 [style = bold, label=""];
14->10 [style = solid, label="attributesType"];
1->3 [style = bold, label=""];
18->19 [style = bold, label=""];
0->21 [style = bold, label=""];
9->7 [style = bold, label=""];
13->11 [style = bold, label=""];
15->18 [style = bold, label=""];
4->0 [style = bold, label=""];
2->13 [style = bold, label=""];
19->5 [style = bold, label=""];
5->2 [style = bold, label=""];
12->10 [style = bold, label=""];
10->5 [style = bold, label=""];
22->0 [style = bold, label=""];
15->19 [style = solid, label="partitionAttributes"];
9->21 [style = dashed, label="0"];
7->6 [style = bold, label=""];
6->8 [style = bold, label=""];
13->16 [style = dashed, label="0"];
9->5 [style = bold, label=""];
3->17 [style = bold, label=""];
7->10 [style = solid, label="attributesType"];
14->6 [style = bold, label=""];
8->12 [style = bold, label=""];
21->14 [style = bold, label=""];
2->16 [style = bold, label=""];
}
