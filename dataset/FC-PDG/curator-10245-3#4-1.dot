digraph {
10 [style = filled, label = "Assert.assertEquals(max.get(),QTY)@@@47@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Future<Void> future = service.submit(new Callable<Void>(){@Override public Void call(){DistributedDoubleBarrier barrier = new DistributedDoubleBarrier(client,\"/barrier\",QTY)Assert.assertTrue(barrier.enter(timing.seconds(),TimeUnit.SECONDS))synchronized (this) {int thisCount = count.incrementAndGet()if (thisCount > max.get()) {max.set(thisCount)}}postEnterLatch.countDown()Assert.assertTrue(timing.awaitLatch(postEnterLatch))Assert.assertEquals(count.get(),QTY)Assert.assertTrue(barrier.leave(10,TimeUnit.SECONDS))count.decrementAndGet()postLeaveLatch.countDown()Assert.assertTrue(timing.awaitLatch(postLeaveLatch))return null}})@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final CountDownLatch postEnterLatch = new CountDownLatch(QTY)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final CountDownLatch postLeaveLatch = new CountDownLatch(QTY)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testMultiClient['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "ExecutorService service = Executors.newCachedThreadPool()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final List<Closeable> closeables = Lists.newArrayList()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(max.get(),QTY)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final Timing timing = new Timing()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "i < QTY@@@16@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "f.get()@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "client.start()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final AtomicInteger max = new AtomicInteger(0)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final AtomicInteger count = new AtomicInteger(0)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "closeables.add(client)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "futures.add(future)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "List<Future<Void>> futures = Lists.newArrayList()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testBasic['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),timing.session(),timing.connection(),new RetryOneTime(1))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "int i = 0@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "futures.add(future)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "f.get()@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "++i@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testMultiClient['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(count.get(),0)@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "{for (Closeable c : closeables){Closeables.closeQuietly(c)}}@@@47@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(count.get(),0)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->17 [style = bold, label=""];
14->2 [style = dotted, label="true"];
1->4 [style = bold, label=""];
2->5 [style = solid, label="future"];
19->22 [style = solid, label="closeables"];
0->13 [style = bold, label=""];
0->2 [style = solid, label="postEnterLatch"];
2->17 [style = solid, label="future"];
8->3 [style = bold, label=""];
4->19 [style = bold, label=""];
25->4 [style = bold, label=""];
3->12 [style = bold, label=""];
9->8 [style = bold, label=""];
26->24 [style = bold, label=""];
23->0 [style = bold, label=""];
26->24 [style = solid, label="client"];
13->2 [style = solid, label="postLeaveLatch"];
4->0 [style = bold, label=""];
7->14 [style = bold, label=""];
17->7 [style = bold, label=""];
20->18 [style = bold, label=""];
14->17 [style = dotted, label="true"];
14->5 [style = dotted, label="true"];
12->14 [style = solid, label="i"];
21->22 [style = bold, label=""];
15->9 [style = bold, label=""];
11->10 [style = bold, label=""];
19->26 [style = bold, label=""];
6->11 [style = bold, label=""];
14->7 [style = dotted, label="true"];
12->14 [style = bold, label=""];
5->7 [style = bold, label=""];
14->2 [style = bold, label=""];
13->15 [style = bold, label=""];
18->21 [style = bold, label=""];
16->4 [style = bold, label=""];
14->6 [style = bold, label=""];
14->20 [style = bold, label=""];
2->5 [style = bold, label=""];
26->2 [style = solid, label="client"];
24->23 [style = bold, label=""];
}
