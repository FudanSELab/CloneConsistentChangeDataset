digraph {
46 [style = filled, label = "assertEquals(i,messageType.getEnumTypes().get(i).getIndex())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertThat(enumType.getFile()).isEqualTo(UnittestProto.getDescriptor())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "assertThat(nestedType.getFullName()).isEqualTo(\"protobuf_unittest.TestAllTypes.NestedEnum\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "assertEquals(\"TestAllTypes\",messageType.toProto().getName())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "Descriptor nestedType = TestAllTypes.NestedMessage.getDescriptor()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testEnumDescriptor['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertThat(enumType.getOptions()).isEqualTo(DescriptorProtos.EnumOptions.getDefaultInstance())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertThat(value.getNumber()).isEqualTo(4)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "Descriptor messageType = TestAllTypes.getDescriptor()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(value,enumType.findValueByName(\"FOREIGN_FOO\"))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "assertThat(enumType.findValueByName(\"FOREIGN_FOO\")).isEqualTo(value)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertNull(enumType.getContainingType())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "assertEquals(i,enumType.getValues().get(i).getIndex())@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
51 [style = filled, label = "assertEquals(i,messageType.getNestedTypes().get(i).getIndex())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "assertEquals(\"protobuf_unittest.TestAllTypes.NestedMessage\",nestedType.getFullName())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "FieldDescriptor field = messageType.getFields().get(0)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "assertEquals(messageType,nestedType.getContainingType())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "assertEquals(\"NestedMessage\",nestedType.getName())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "assertEquals(field,messageType.findFieldByName(\"optional_int32\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "EnumValueDescriptor value = ForeignEnum.FOREIGN_FOO.getValueDescriptor()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertThat(enumType.getValues().get(i).getIndex()).isEqualTo(i)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertEquals(DescriptorProtos.EnumOptions.getDefaultInstance(),enumType.getOptions())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
56 [style = filled, label = "assertEquals(nestedType,messageType.getNestedTypes().get(0))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(value,enumType.getValues().get(0))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
65 [style = filled, label = "assertEquals(i,messageType.getFields().get(i).getIndex())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertThat(enumType.getName()).isEqualTo(\"ForeignEnum\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
64 [style = filled, label = "int i = 0@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "assertNull(messageType.findFieldByNumber(571283))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(UnittestProto.getDescriptor(),nestedType.getFile())@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertNull(enumType.findValueByName(\"NO_SUCH_VALUE\"))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"protobuf_unittest.ForeignEnum\",enumType.getFullName())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "assertThat(enumType.getValues().get(0)).isEqualTo(value)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertThat(enumType.findValueByNumber(4)).isEqualTo(value)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(\"protobuf_unittest.TestAllTypes.NestedEnum\",nestedType.getFullName())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"ForeignEnum\",enumType.getName())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "assertThat(enumType.findValueByName(\"NO_SUCH_VALUE\")).isNull()@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "testDescriptor['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "i < messageType.getNestedTypes().size()@@@30@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "assertEquals(UnittestProto.getDescriptor(),messageType.getFile())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "assertNull(messageType.getContainingType())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertThat(enumType.getContainingType()).isNull()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "EnumDescriptor enumType = ForeignEnum.getDescriptor()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertEquals(enumType,messageType.findEnumTypeByName(\"NestedEnum\"))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "int i = 0@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "int i = 0@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "int i = 0@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "i++@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertThat(nestedType.getName()).isEqualTo(\"NestedEnum\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
57 [style = filled, label = "EnumDescriptor enumType = TestAllTypes.NestedEnum.getDescriptor()@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "assertEquals(\"protobuf_unittest.TestAllTypes\",messageType.getFullName())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "i++@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(\"FOREIGN_FOO\",value.getName())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "assertThat(value.getName()).isEqualTo(\"FOREIGN_FOO\")@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
62 [style = filled, label = "assertNull(messageType.findEnumTypeByName(\"NoSuchType\"))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "i < messageType.getFields().size()@@@22@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "i++@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "assertNull(messageType.findNestedTypeByName(\"NoSuchType\"))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertThat(nestedType.getFile()).isEqualTo(UnittestProto.getDescriptor())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
63 [style = filled, label = "assertEquals(\"optional_int32\",field.getName())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertThat(enumType.getFullName()).isEqualTo(\"protobuf_unittest.ForeignEnum\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertEquals(UnittestProto.getDescriptor(),enumType.getFile())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
73 [style = filled, label = "assertNull(messageType.findFieldByName(\"no_such_field\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "EnumDescriptor nestedType = TestAllTypes.NestedEnum.getDescriptor()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertEquals(nestedType,messageType.findNestedTypeByName(\"NestedMessage\"))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "assertEquals(\"TestAllTypes\",messageType.getName())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(UnittestProto.getDescriptor(),nestedType.getFile())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"NestedEnum\",nestedType.getName())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertEquals(4,value.getNumber())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
76 [style = filled, label = "assertEquals(enumType,messageType.getEnumTypes().get(0))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertThat(nestedType.getContainingType()).isEqualTo(TestAllTypes.getDescriptor())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(\"FOREIGN_FOO\",value.toString())@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
70 [style = filled, label = "assertEquals(DescriptorProtos.MessageOptions.getDefaultInstance(),messageType.getOptions())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "testEnumDescriptor['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
42 [style = filled, label = "i < messageType.getEnumTypes().size()@@@39@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "assertEquals(field,messageType.findFieldByNumber(1))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(value,enumType.findValueByNumber(4))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "i++@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertThat(value.toString()).isEqualTo(\"FOREIGN_FOO\")@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21->41 [style = solid, label="value"];
9->36 [style = dashed, label="0"];
66->65 [style = solid, label="i"];
60->9 [style = bold, label=""];
15->10 [style = bold, label=""];
14->32 [style = dotted, label="true"];
22->15 [style = bold, label=""];
37->11 [style = bold, label=""];
35->41 [style = bold, label=""];
59->67 [style = solid, label="i"];
16->32 [style = solid, label="i"];
76->52 [style = bold, label=""];
43->42 [style = bold, label=""];
57->52 [style = solid, label="enumType"];
5->40 [style = dashed, label="0"];
21->24 [style = bold, label=""];
65->14 [style = bold, label=""];
71->60 [style = bold, label=""];
1->63 [style = dashed, label="0"];
18->55 [style = dashed, label="0"];
64->42 [style = bold, label=""];
24->30 [style = bold, label=""];
25->31 [style = bold, label=""];
55->48 [style = bold, label=""];
64->46 [style = solid, label="i"];
3->5 [style = bold, label=""];
9->69 [style = dashed, label="0"];
23->22 [style = bold, label=""];
30->28 [style = bold, label=""];
20->16 [style = bold, label=""];
9->69 [style = bold, label=""];
19->30 [style = dashed, label="0"];
6->26 [style = dashed, label="0"];
67->51 [style = dotted, label="true"];
54->50 [style = solid, label="nestedType"];
49->69 [style = solid, label="messageType"];
21->1 [style = bold, label=""];
9->21 [style = bold, label=""];
15->31 [style = dashed, label="0"];
67->57 [style = bold, label=""];
16->14 [style = bold, label=""];
20->32 [style = dashed, label="0"];
4->54 [style = dashed, label="0"];
44->47 [style = bold, label=""];
59->67 [style = bold, label=""];
10->20 [style = solid, label="i"];
14->20 [style = bold, label=""];
4->3 [style = bold, label=""];
12->77 [style = dashed, label="0"];
4->38 [style = bold, label=""];
22->25 [style = dashed, label="0"];
75->59 [style = bold, label=""];
42->46 [style = bold, label=""];
10->14 [style = bold, label=""];
50->75 [style = bold, label=""];
16->20 [style = solid, label="i"];
10->32 [style = solid, label="i"];
21->25 [style = solid, label="value"];
3->38 [style = dashed, label="0"];
14->72 [style = solid, label="i"];
7->0 [style = bold, label=""];
21->22 [style = solid, label="value"];
19->74 [style = dashed, label="0"];
11->49 [style = dashed, label="0"];
59->68 [style = solid, label="i"];
45->71 [style = bold, label=""];
8->17 [style = bold, label=""];
13->28 [style = dashed, label="0"];
29->27 [style = bold, label=""];
28->35 [style = bold, label=""];
10->16 [style = solid, label="i"];
19->13 [style = bold, label=""];
61->74 [style = solid, label="field"];
54->44 [style = bold, label=""];
73->55 [style = bold, label=""];
57->76 [style = bold, label=""];
21->23 [style = solid, label="value"];
56->50 [style = bold, label=""];
42->43 [style = dotted, label="true"];
0->33 [style = dashed, label="0"];
1->24 [style = dashed, label="0"];
67->51 [style = bold, label=""];
52->62 [style = bold, label=""];
7->39 [style = dashed, label="0"];
1->19 [style = bold, label=""];
10->14 [style = solid, label="i"];
61->63 [style = bold, label=""];
49->54 [style = bold, label=""];
14->72 [style = dashed, label="0"];
13->18 [style = bold, label=""];
68->51 [style = solid, label="i"];
40->29 [style = bold, label=""];
46->43 [style = bold, label=""];
66->72 [style = solid, label="i"];
17->70 [style = dashed, label="0"];
0->71 [style = dashed, label="0"];
18->23 [style = bold, label=""];
72->14 [style = dotted, label="true"];
11->4 [style = bold, label=""];
32->16 [style = bold, label=""];
63->74 [style = bold, label=""];
58->49 [style = bold, label=""];
72->65 [style = dotted, label="true"];
47->77 [style = bold, label=""];
39->33 [style = bold, label=""];
33->26 [style = bold, label=""];
77->53 [style = bold, label=""];
14->16 [style = dotted, label="true"];
27->34 [style = bold, label=""];
72->56 [style = bold, label=""];
72->65 [style = bold, label=""];
64->43 [style = solid, label="i"];
31->10 [style = bold, label=""];
12->8 [style = bold, label=""];
7->45 [style = dashed, label="0"];
34->39 [style = bold, label=""];
68->67 [style = solid, label="i"];
21->24 [style = solid, label="value"];
21->1 [style = solid, label="value"];
38->40 [style = bold, label=""];
14->32 [style = bold, label=""];
43->46 [style = solid, label="i"];
43->42 [style = solid, label="i"];
2->11 [style = bold, label=""];
70->45 [style = bold, label=""];
48->66 [style = bold, label=""];
54->56 [style = solid, label="nestedType"];
17->34 [style = dashed, label="0"];
68->67 [style = bold, label=""];
14->65 [style = solid, label="i"];
0->6 [style = bold, label=""];
61->55 [style = solid, label="field"];
5->47 [style = dashed, label="0"];
26->36 [style = bold, label=""];
64->42 [style = solid, label="i"];
57->76 [style = solid, label="enumType"];
74->73 [style = bold, label=""];
51->68 [style = bold, label=""];
3->44 [style = dashed, label="0"];
8->53 [style = dashed, label="0"];
62->64 [style = bold, label=""];
59->51 [style = solid, label="i"];
18->35 [style = dashed, label="0"];
69->61 [style = bold, label=""];
66->14 [style = solid, label="i"];
17->7 [style = bold, label=""];
14->20 [style = dotted, label="true"];
36->21 [style = bold, label=""];
14->72 [style = bold, label=""];
16->14 [style = solid, label="i"];
5->12 [style = bold, label=""];
53->70 [style = bold, label=""];
12->29 [style = dashed, label="0"];
66->72 [style = bold, label=""];
8->27 [style = dashed, label="0"];
23->41 [style = dashed, label="0"];
20->65 [style = dashed, label="0"];
41->25 [style = bold, label=""];
6->9 [style = bold, label=""];
42->46 [style = dotted, label="true"];
67->68 [style = dotted, label="true"];
}
