digraph {
21 [style = filled, label = "Mockito.lenient().when(host.getPodId()).thenReturn(1l)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertTrue(fencer.fenceOff(virtualMachine,host))@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Mockito.lenient().when(host.getDataCenterId()).thenReturn(1l)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "testWithHosts['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Mockito.when(host.getClusterId()).thenReturn(1l)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "FenceAnswer answer = new FenceAnswer(null,true,\"ok\")@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Mockito.when(host.getStatus()).thenReturn(Status.Up)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Mockito.when(secondHost.getStatus()).thenReturn(Status.Up)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "HostVO host = Mockito.mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testWithHosts['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Mockito.when(host.getId()).thenReturn(2l)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Mockito.lenient().when(secondHost.getDataCenterId()).thenReturn(1l)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Mockito.when(secondHost.getPodId()).thenReturn(1l)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertFalse(fencer.fenceOff(virtualMachine,host))@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Mockito.lenient().when(secondHost.getClusterId()).thenReturn(1l)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Mockito.when(host.getPodId()).thenReturn(1l)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "VirtualMachine virtualMachine = Mockito.mock()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Mockito.when(agentManager.send(Matchers.anyLong(),Matchers.any())).thenReturn(answer)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testWithFailingFence['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Mockito.when(host.getDataCenterId()).thenReturn(1l)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Mockito.when(host.getId()).thenReturn(1l)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Mockito.when(host.getHypervisorType()).thenReturn(HypervisorType.KVM)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Mockito.when(agentManager.send(Matchers.anyLong(),Matchers.any())).thenThrow(new AgentUnavailableException(2l))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Mockito.lenient().when(secondHost.getPodId()).thenReturn(1l)@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Mockito.when(secondHost.getClusterId()).thenReturn(1l)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Mockito.when(secondHost.getHypervisorType()).thenReturn(HypervisorType.KVM)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Mockito.when(resourceManager.listAllHostsInCluster(1l)).thenReturn(Arrays.asList(host,secondHost))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "HostVO secondHost = Mockito.mock()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Mockito.when(secondHost.getDataCenterId()).thenReturn(1l)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24->21 [style = bold, label=""];
16->26 [style = solid, label="virtualMachine"];
14->17 [style = bold, label=""];
19->9 [style = bold, label=""];
11->10 [style = solid, label="host"];
15->18 [style = bold, label=""];
0->21 [style = dashed, label="0"];
2->13 [style = bold, label=""];
1->20 [style = dashed, label="0"];
9->20 [style = bold, label=""];
18->5 [style = bold, label=""];
1->8 [style = bold, label=""];
10->27 [style = bold, label=""];
0->19 [style = bold, label=""];
20->8 [style = bold, label=""];
11->15 [style = bold, label=""];
23->11 [style = bold, label=""];
16->7 [style = solid, label="virtualMachine"];
22->17 [style = bold, label=""];
2->25 [style = bold, label=""];
16->10 [style = bold, label=""];
11->26 [style = solid, label="host"];
5->4 [style = bold, label=""];
10->3 [style = bold, label=""];
3->6 [style = bold, label=""];
8->2 [style = bold, label=""];
21->19 [style = bold, label=""];
11->7 [style = solid, label="host"];
13->25 [style = dashed, label="0"];
5->24 [style = bold, label=""];
27->26 [style = bold, label=""];
14->22 [style = dashed, label="0"];
12->11 [style = bold, label=""];
6->7 [style = bold, label=""];
28->11 [style = bold, label=""];
13->14 [style = bold, label=""];
9->10 [style = solid, label="secondHost"];
17->16 [style = bold, label=""];
9->1 [style = bold, label=""];
25->22 [style = bold, label=""];
4->0 [style = bold, label=""];
3->6 [style = solid, label="answer"];
4->24 [style = dashed, label="0"];
}
