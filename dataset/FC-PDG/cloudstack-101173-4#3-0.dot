digraph {
4 [style = filled, label = "volumeApiServiceImpl.expungeVolumesInSecondaryStorageIfNeeded(volumeVoMock)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Mockito.doReturn(null).when(volumeDataFactoryMock).getVolume(volumeMockId,DataStoreRole.Image)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Mockito.verify(asyncCallFutureVolumeapiResultMock,Mockito.times(0)).get()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Mockito.verify(resourceLimitServiceMock,Mockito.times(0)).decrementResourceCount(accountMockId,ResourceType.secondary_storage,volumeSizeMock)@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Mockito.lenient().doReturn(accountMockId).when(volumeInfoMock).getAccountId()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Mockito.doReturn(asyncCallFutureVolumeapiResultMock).when(volumeServiceMock).expungeVolumeAsync(volumeInfoMock)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Mockito.doReturn(volumeSizeMock).when(volumeInfoMock).getSize()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "expungeVolumesInSecondaryStorageIfNeededTestVolumeNotFoundInSecondaryStorage['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Mockito.verify(volumeServiceMock,Mockito.times(0)).expungeVolumeAsync(volumeInfoMock)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Mockito.lenient().doReturn(volumeSizeMock).when(volumeInfoMock).getSize()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Mockito.verify(volumeServiceMock,Mockito.times(1)).expungeVolumeAsync(volumeInfoMock)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Mockito.doReturn(volumeInfoMock).when(volumeDataFactoryMock).getVolume(volumeMockId,DataStoreRole.Primary)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Mockito.verify(asyncCallFutureVolumeapiResultMock,Mockito.times(1)).get()@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "expungeVolumesInSecondaryStorageIfNeededTestVolumeNotFoundInSecondaryStorage['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "volumeApiServiceImpl.expungeVolumesInPrimaryStorageIfNeeded(volumeVoMock)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Mockito.doNothing().when(resourceLimitServiceMock).decrementResourceCount(accountMockId,ResourceType.secondary_storage,volumeSizeMock)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Mockito.doReturn(accountMockId).when(volumeInfoMock).getAccountId()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "expungeVolumesInPrimaryStorageIfNeededTestVolumeInPrimaryDataStore['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Mockito.lenient().doNothing().when(resourceLimitServiceMock).decrementResourceCount(accountMockId,ResourceType.secondary_storage,volumeSizeMock)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Mockito.lenient().doReturn(asyncCallFutureVolumeapiResultMock).when(volumeServiceMock).expungeVolumeAsync(volumeInfoMock)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5->3 [style = bold, label=""];
13->10 [style = bold, label=""];
8->10 [style = dashed, label="0"];
9->0 [style = bold, label=""];
17->1 [style = bold, label=""];
1->15 [style = bold, label=""];
0->2 [style = bold, label=""];
12->11 [style = bold, label=""];
16->19 [style = bold, label=""];
11->9 [style = bold, label=""];
15->18 [style = bold, label=""];
1->9 [style = bold, label=""];
0->14 [style = dashed, label="0"];
6->1 [style = bold, label=""];
3->7 [style = bold, label=""];
1->11 [style = dashed, label="0"];
2->13 [style = dashed, label="0"];
2->16 [style = dashed, label="0"];
9->14 [style = bold, label=""];
10->4 [style = bold, label=""];
8->4 [style = bold, label=""];
14->13 [style = bold, label=""];
4->5 [style = bold, label=""];
2->8 [style = bold, label=""];
9->15 [style = dashed, label="0"];
18->16 [style = bold, label=""];
}
