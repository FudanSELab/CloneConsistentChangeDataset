digraph {
5 [style = filled, label = "Assert.assertArrayEquals(mapper.writeValueAsString(segment).getBytes(StandardCharsets.UTF_8),derbyConnector.lookup(derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\"id\",\"payload\",segment.getId().toString()))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Assert.assertEquals(0,metadataUpdateCounter.get())@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "coordinator.announceHistoricalSegments(segments)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "coordinator.announceHistoricalSegments(SEGMENTS)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertArrayEquals(mapper.writeValueAsString(segment).getBytes(\"UTF-8\"),derbyConnector.lookup(derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\"id\",\"payload\",segment.getIdentifier()))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(ImmutableList.of(defaultSegment.getIdentifier(),defaultSegment2.getIdentifier()),getUsedIdentifiers())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "additionalNumberedShardTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testSimpleAnnounce['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "testSimpleAnnounce['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(segments.stream().map(null).collect(Collectors.toList()),getUsedIdentifiers())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Set<DataSegment> segments@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(ImmutableList.of(defaultSegment.getId().toString(),defaultSegment2.getId().toString()),getUsedSegmentIds())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8->11 [style = dotted, label="true"];
6->1 [style = bold, label=""];
8->10 [style = bold, label=""];
4->9 [style = dashed, label="0"];
4->1 [style = bold, label=""];
2->0 [style = bold, label=""];
0->9 [style = bold, label=""];
5->6 [style = bold, label=""];
3->2 [style = bold, label=""];
9->1 [style = bold, label=""];
0->5 [style = dashed, label="0"];
4->6 [style = dashed, label="0"];
0->4 [style = bold, label=""];
11->10 [style = solid, label="segments"];
7->2 [style = bold, label=""];
10->0 [style = bold, label=""];
2->10 [style = dashed, label="0"];
2->5 [style = bold, label=""];
}
