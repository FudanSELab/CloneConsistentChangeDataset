digraph {
15 [style = filled, label = "testBrokerOrderedScan['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "expectedNumRows - count >= batchSize@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testBrokerOrderedScan['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "count += events.size()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(expectedNumRows - count,events.size())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "count += events.size()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.fail(\"Batch size is incorrect\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ScanQuery query = Druids.newScanQueryBuilder().limit(limit).order(ScanQuery.Order.DESCENDING).dataSource(\"some datasource\").batchSize(batchSize).intervals(QueryRunnerTestHelper.fullOnIntervalSpec).resultFormat(resultFormat).context(ImmutableMap.of(ScanQuery.CTX_KEY_OUTERMOST,false)).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "itr.hasNext()@@@8@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testHistoricalOrderedScan['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "QueryPlus<ScanResultValue> queryPlus = QueryPlus.wrap(query)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "int expectedNumRows = Math.min(limit,NUM_ELEMENTS)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ScanQuery query = Druids.newScanQueryBuilder().limit(limit).order(ScanQuery.Order.DESCENDING).dataSource(\"some datasource\").batchSize(batchSize).intervals(QueryRunnerTestHelper.fullOnIntervalSpec).resultFormat(resultFormat).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(1,events.size())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ScanResultValue curr = itr.next()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ScanQueryLimitRowIterator itr = new ScanQueryLimitRowIterator((null),queryPlus,ResponseContext.createEmpty())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "int count = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(expectedNumRows,count)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ScanQueryLimitRowIterator itr = new ScanQueryLimitRowIterator((null),queryPlus,ImmutableMap.of())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "List<Map<String,Object>> events = ScanQueryTestHelper.getEventsListResultFormat(curr)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(expectedNumRows,count)@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "events.size() != batchSize@@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
8->16 [style = bold, label=""];
7->1 [style = bold, label=""];
7->17 [style = bold, label=""];
12->20 [style = dashed, label="0"];
21->0 [style = bold, label=""];
9->2 [style = bold, label=""];
0->19 [style = bold, label=""];
4->7 [style = solid, label="curr"];
0->4 [style = dotted, label="true"];
9->2 [style = dotted, label="false"];
14->9 [style = solid, label="count"];
13->19 [style = solid, label="expectedNumRows"];
11->9 [style = solid, label="count"];
8->6 [style = bold, label=""];
9->10 [style = bold, label=""];
8->16 [style = solid, label="queryPlus"];
4->7 [style = bold, label=""];
1->9 [style = bold, label=""];
1->11 [style = bold, label=""];
13->2 [style = solid, label="expectedNumRows"];
6->14 [style = bold, label=""];
18->20 [style = bold, label=""];
20->8 [style = bold, label=""];
11->0 [style = bold, label=""];
6->16 [style = dashed, label="0"];
10->11 [style = bold, label=""];
1->17 [style = dashed, label="0"];
14->2 [style = solid, label="count"];
21->19 [style = solid, label="count"];
0->21 [style = dotted, label="true"];
5->12 [style = bold, label=""];
0->4 [style = bold, label=""];
12->8 [style = bold, label=""];
14->3 [style = solid, label="count"];
13->3 [style = solid, label="expectedNumRows"];
12->8 [style = solid, label="query"];
0->1 [style = dotted, label="true"];
1->9 [style = dotted, label="true"];
11->2 [style = solid, label="count"];
14->19 [style = solid, label="count"];
16->14 [style = bold, label=""];
0->17 [style = dotted, label="true"];
15->12 [style = bold, label=""];
14->13 [style = bold, label=""];
8->6 [style = solid, label="queryPlus"];
11->3 [style = solid, label="count"];
13->9 [style = solid, label="expectedNumRows"];
9->10 [style = dotted, label="true"];
0->11 [style = dotted, label="true"];
17->21 [style = bold, label=""];
2->11 [style = bold, label=""];
0->7 [style = dotted, label="true"];
13->0 [style = bold, label=""];
20->8 [style = solid, label="query"];
}
