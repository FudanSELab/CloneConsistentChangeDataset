digraph {
44 [style = filled, label = "operator.open()@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "headOperator.processElement(new StreamRecord<>(1))@@@33@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "headOperator.setup(mockTask,streamConfig,operatorChain.getChainEntryPoint())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "StreamConfig streamConfig = new StreamConfig(configuration)@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "env.setParallelism(2)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "StreamMap<Integer,Integer> headOperator = streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "sink3Results = new ArrayList<>()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "StreamMap<Integer,Integer> headOperator = streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "operator != null@@@31@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "SplitStream<Integer> split = input.split(new OutputSelector<Integer>(){@Override public Iterable<String> select(Integer value){if (value.equals(1)) {return Collections.singletonList(\"one\")}{return Collections.singletonList(\"other\")}}})@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "StreamConfig streamConfig = new StreamConfig(configuration)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "headOperator.processElement(new StreamRecord<>(1))@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertThat(sink1Results,contains(\"First 1: 1\"))@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "StreamTask<Integer,StreamMap<Integer,Integer>> mockTask = createMockTask(streamConfig,environment)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "JobGraph jobGraph = env.getStreamGraph().getJobGraph()@@@39@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "StreamExecutionEnvironment env@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "input = input.map(null)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(sink2Results,contains(\"Second: 1\",\"Second: 2\",\"Second: 3\"))@@@37@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "DataStream<Integer> input = env.fromElements(1,2,3)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "split.select(\"other\").map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink3Results.add(value)}})@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "testMultiChaining['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "headOperator.setup(mockTask,streamConfig,operatorChain.getChainEntryPoint())@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "input.map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink2Results.add(value)}})@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Configuration configuration = chainedVertex.getConfiguration()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "headOperator.processElement(new StreamRecord<>(2))@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "StreamTask<Integer,StreamMap<Integer,Integer>> mockTask = createMockTask(streamConfig,environment)@@@46@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertThat(sink2Results,contains(\"First 2: 1\"))@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "sink1Results = new ArrayList<>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "OperatorChain<Integer,StreamMap<Integer,Integer>> operatorChain = createOperatorChain(streamConfig,environment,mockTask)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "OperatorChain<Integer,StreamMap<Integer,Integer>> operatorChain = createOperatorChain(streamConfig,environment,mockTask)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "operator != null@@@50@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "sink2Results = new ArrayList<>()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "testMultiChainingWithSplit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertThat(sink3Results,contains(\"Second: 2\",\"Second: 3\"))@@@59@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testMultiChaining['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Configuration configuration = chainedVertex.getConfiguration()@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "split.select(\"one\").map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink1Results.add(value)}})@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "headOperator.processElement(new StreamRecord<>(3))@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "input.map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink1Results.add(value)}})@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "operatorWrapper.getStreamOperator().open()@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "StreamExecutionEnvironment env@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "JobGraph jobGraph = env.getStreamGraph().getJobGraph()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "split.select(\"one\").map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink2Results.add(value)}})@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39->37 [style = bold, label=""];
45->41 [style = bold, label=""];
17->8 [style = bold, label=""];
14->24 [style = bold, label=""];
44->30 [style = bold, label=""];
42->34 [style = bold, label=""];
10->20 [style = bold, label=""];
14->25 [style = bold, label=""];
16->11 [style = bold, label=""];
28->18 [style = bold, label=""];
0->10 [style = solid, label="configuration"];
22->19 [style = bold, label=""];
29->30 [style = bold, label=""];
3->31 [style = dashed, label="0"];
30->43 [style = bold, label=""];
11->8 [style = solid, label="streamConfig"];
24->25 [style = dashed, label="0"];
44->29 [style = bold, label=""];
23->21 [style = solid, label="sink1Results"];
41->29 [style = bold, label=""];
4->14 [style = solid, label="mockTask"];
8->41 [style = solid, label="mockTask"];
12->15 [style = bold, label=""];
21->8 [style = bold, label=""];
38->9 [style = bold, label=""];
43->32 [style = bold, label=""];
10->14 [style = solid, label="streamConfig"];
24->9 [style = dotted, label="true"];
3->6 [style = bold, label=""];
29->44 [style = dotted, label="true"];
1->18 [style = bold, label=""];
28->34 [style = solid, label="sink3Results"];
31->38 [style = bold, label=""];
11->45 [style = solid, label="streamConfig"];
4->2 [style = bold, label=""];
10->4 [style = solid, label="streamConfig"];
13->5 [style = dotted, label="true"];
27->16 [style = bold, label=""];
1->8 [style = solid, label="sink2Results"];
4->2 [style = solid, label="mockTask"];
46->33 [style = dotted, label="true"];
9->35 [style = bold, label=""];
9->16 [style = bold, label=""];
7->3 [style = bold, label=""];
26->22 [style = bold, label=""];
20->4 [style = bold, label=""];
8->42 [style = dashed, label="0"];
25->27 [style = bold, label=""];
24->16 [style = bold, label=""];
1->28 [style = bold, label=""];
0->10 [style = bold, label=""];
11->41 [style = solid, label="streamConfig"];
18->39 [style = bold, label=""];
37->31 [style = bold, label=""];
23->40 [style = solid, label="sink1Results"];
19->23 [style = bold, label=""];
15->0 [style = bold, label=""];
8->45 [style = bold, label=""];
2->14 [style = bold, label=""];
32->40 [style = bold, label=""];
10->2 [style = solid, label="streamConfig"];
8->45 [style = solid, label="mockTask"];
5->33 [style = dashed, label="0"];
21->40 [style = dashed, label="0"];
23->1 [style = bold, label=""];
36->16 [style = bold, label=""];
29->44 [style = bold, label=""];
11->17 [style = bold, label=""];
1->21 [style = solid, label="sink2Results"];
16->11 [style = solid, label="configuration"];
13->22 [style = bold, label=""];
35->36 [style = bold, label=""];
23->17 [style = solid, label="sink1Results"];
18->7 [style = bold, label=""];
17->21 [style = bold, label=""];
40->42 [style = bold, label=""];
9->24 [style = bold, label=""];
26->5 [style = dotted, label="true"];
24->9 [style = bold, label=""];
46->22 [style = bold, label=""];
1->42 [style = solid, label="sink2Results"];
6->12 [style = bold, label=""];
}
