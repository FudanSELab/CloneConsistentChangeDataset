digraph {
0 [style = filled, label = "Assert.assertEquals(\"UNKNOWN\",incoming.getSourceServiceName())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(\"ingress\",incoming.getDestServiceName())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(\"ingress\",outgoing.getSourceServiceName())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ServiceMeshMetric.Builder incoming = result.get(0)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testIngressMetric['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(DetectPoint.server,incoming.getDetectPoint())@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testIngressMetric['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "List<ServiceMeshMetric.Builder> result = this.analysis.analysis(new ArrayList<>(),requestBuilder.getIdentifier(),requestBuilder.getHttpLogs().getLogEntry(0),Role.PROXY)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertEquals(\"productpage\",outgoing.getDestServiceName())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(1,result.size())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "List<ServiceMeshMetric.Builder> result = this.analysis.analysis(requestBuilder.getIdentifier(),requestBuilder.getHttpLogs().getLogEntry(0),Role.PROXY)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "List<ServiceMeshMetric.Builder> result = this.analysis.analysis(requestBuilder.getIdentifier(),requestBuilder.getHttpLogs().getLogEntry(0),Role.SIDECAR)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(\"productpage\",incoming.getDestServiceName())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(2,result.size())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ServiceMeshMetric.Builder outgoing = result.get(1)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testIngress2SidecarMetric['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "JsonFormat.parser().merge(isr,requestBuilder)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(DetectPoint.client,outgoing.getDetectPoint())@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "StreamAccessLogsMessage.Builder requestBuilder = StreamAccessLogsMessage.newBuilder()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(\"\",incoming.getSourceServiceName())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8->19 [style = dashed, label="0"];
17->5 [style = bold, label=""];
2->3 [style = bold, label=""];
0->2 [style = bold, label=""];
18->15 [style = bold, label=""];
6->19 [style = bold, label=""];
7->4 [style = bold, label=""];
15->3 [style = bold, label=""];
12->0 [style = bold, label=""];
13->1 [style = bold, label=""];
19->16 [style = bold, label=""];
8->13 [style = dashed, label="0"];
2->15 [style = dashed, label="0"];
8->1 [style = bold, label=""];
3->10 [style = bold, label=""];
5->6 [style = bold, label=""];
1->16 [style = dashed, label="0"];
6->13 [style = bold, label=""];
6->8 [style = bold, label=""];
12->18 [style = bold, label=""];
5->6 [style = solid, label="requestBuilder"];
1->12 [style = bold, label=""];
9->5 [style = bold, label=""];
0->18 [style = dashed, label="0"];
16->12 [style = bold, label=""];
11->7 [style = bold, label=""];
14->5 [style = bold, label=""];
10->11 [style = bold, label=""];
}
