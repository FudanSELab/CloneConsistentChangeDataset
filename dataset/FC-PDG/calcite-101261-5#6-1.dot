digraph {
5 [style = filled, label = "testUnion1['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "testIntersect3['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final RelBuilder builder = RelBuilder.create(config().build())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final String expected = \"\" + \"LogicalIntersect(all=(true()\" + \" LogicalProject(DEPTNO=($0()\" + \" LogicalTableScan(table=((scott, DEPT(()\" + \" LogicalProject(EMPNO=($0()\" + \" LogicalTableScan(table=((scott, EMP(()\" + \" LogicalProject(DEPTNO=($7()\" + \" LogicalTableScan(table=((scott, EMP(()\"@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final String expected = \"LogicalProject(DEPTNO=($7()\" + \" LogicalTableScan(table=((scott, EMP(()\"@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "RelNode root = builder.scan(\"DEPT\").project(builder.field(\"DEPTNO\")).scan(\"EMP\").project(builder.field(\"EMPNO\")).scan(\"EMP\").project(builder.field(\"DEPTNO\")).intersect(true,3).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "RelNode root = builder.scan(\"DEPT\").project(builder.field(\"DEPTNO\")).scan(\"EMP\").project(builder.field(\"EMPNO\")).scan(\"EMP\").project(builder.field(\"DEPTNO\")).union(true,1).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(root,hasTree(expected))@@@6@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testUnion1['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1->3 [style = bold, label=""];
2->3 [style = solid, label="root"];
6->0 [style = bold, label=""];
1->7 [style = dashed, label="0"];
8->3 [style = solid, label="root"];
5->0 [style = bold, label=""];
1->3 [style = solid, label="expected"];
2->8 [style = dashed, label="0"];
7->3 [style = solid, label="expected"];
2->1 [style = bold, label=""];
7->3 [style = bold, label=""];
8->7 [style = bold, label=""];
4->0 [style = bold, label=""];
0->2 [style = bold, label=""];
0->8 [style = bold, label=""];
}
