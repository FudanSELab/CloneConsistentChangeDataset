digraph {
0 [style = filled, label = "testRunCompactionTwice['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "i++@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertTrue(resultPair.lhs.isSuccess())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "int i = 0@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final CompactionTask compactionTask2 = builder.interval(Intervals.of(\"2014-01-01/2014-01-02\")).build()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "i < 3@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(new NumberedOverwriteShardSpec(32768,0,2,(short)1,(short)1),segments.get(i).getShardSpec())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "i++@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "i < 3@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "int i = 0@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final CompactionTask compactionTask1 = builder.interval(Intervals.of(\"2014-01-01/2014-01-02\")).build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "List<DataSegment> segments = resultPair.rhs@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1),segments.get(i).getInterval())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(getDefaultCompactionState(Granularities.HOUR,Granularities.MINUTE,ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1))),segments.get(i).getLastCompactionState())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "resultPair = runTask(compactionTask2)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(new NumberedShardSpec(0,1),segments.get(i).getShardSpec())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(getDefaultCompactionState(Granularities.HOUR,Granularities.NONE,ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1))),segments.get(i).getLastCompactionState())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testRunCompactionTwice['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "lockGranularity == LockGranularity.SEGMENT@@@32@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "segments = resultPair.rhs@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(3,segments.size())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final Builder builder = new Builder(DATA_SOURCE,segmentLoaderFactory,RETRY_POLICY_FACTORY)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(getDefaultCompactionState(Granularities.HOUR,Granularities.MINUTE,ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1))),segments.get(i).getLastCompactionState())@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "Assert.assertTrue(resultPair.lhs.isSuccess())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Pair<TaskStatus,List<DataSegment>> resultPair = runTask(compactionTask1)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final CompactionTask compactionTask = builder.interval(Intervals.of(\"2014-01-01/2014-01-02\")).build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(3,segments.size())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1),segments.get(i).getInterval())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(new NumberedShardSpec(0,1),segments.get(i).getShardSpec())@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(TEST_ROWS,rowsFromSegment)@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(getDefaultCompactionState(Granularities.HOUR,Granularities.NONE,ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1))),segments.get(i).getLastCompactionState())@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 1,0,2,(short)2,(short)1),segments.get(i).getShardSpec())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID,0,2,(short)1,(short)1),segments.get(i).getShardSpec())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final Pair<TaskStatus,List<DataSegment>> resultPair = runTask(compactionTask)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "testRunWithDynamicPartitioning['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "runIndexTask()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final List<DataSegment> segments = resultPair.rhs@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "lockGranularity == LockGranularity.SEGMENT@@@15@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "List<String> rowsFromSegment = getCSVFormatRowsFromSegments(segments)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34->32 [style = solid, label="rowsFromSegment"];
4->14 [style = solid, label="i"];
37->34 [style = solid, label="segments"];
3->8 [style = solid, label="i"];
6->1 [style = dotted, label="true"];
4->29 [style = solid, label="i"];
8->6 [style = bold, label=""];
37->15 [style = bold, label=""];
19->36 [style = bold, label=""];
6->19 [style = dotted, label="true"];
7->16 [style = solid, label="i"];
7->14 [style = bold, label=""];
29->2 [style = bold, label=""];
23->22 [style = bold, label=""];
14->7 [style = dotted, label="true"];
34->32 [style = bold, label=""];
3->30 [style = solid, label="i"];
5->30 [style = bold, label=""];
2->28 [style = bold, label=""];
8->6 [style = solid, label="i"];
11->25 [style = bold, label=""];
10->11 [style = bold, label=""];
4->12 [style = solid, label="i"];
14->2 [style = dotted, label="true"];
22->33 [style = bold, label=""];
14->12 [style = dotted, label="true"];
33->35 [style = solid, label="compactionTask"];
19->36 [style = dotted, label="true"];
7->29 [style = solid, label="i"];
2->28 [style = dotted, label="true"];
20->18 [style = bold, label=""];
7->12 [style = solid, label="i"];
25->24 [style = bold, label=""];
5->1 [style = bold, label=""];
30->19 [style = bold, label=""];
12->29 [style = bold, label=""];
0->23 [style = bold, label=""];
18->4 [style = bold, label=""];
25->37 [style = bold, label=""];
2->21 [style = bold, label=""];
19->26 [style = bold, label=""];
21->7 [style = bold, label=""];
1->19 [style = bold, label=""];
27->20 [style = bold, label=""];
19->26 [style = dotted, label="true"];
4->7 [style = solid, label="i"];
17->8 [style = bold, label=""];
4->14 [style = bold, label=""];
6->34 [style = bold, label=""];
3->5 [style = solid, label="i"];
1->30 [style = dashed, label="0"];
3->6 [style = bold, label=""];
26->8 [style = bold, label=""];
19->17 [style = bold, label=""];
19->17 [style = dotted, label="false"];
15->3 [style = bold, label=""];
8->30 [style = solid, label="i"];
35->25 [style = bold, label=""];
3->6 [style = solid, label="i"];
14->16 [style = dotted, label="true"];
6->5 [style = bold, label=""];
24->37 [style = dashed, label="0"];
13->27 [style = bold, label=""];
4->16 [style = solid, label="i"];
6->8 [style = dotted, label="true"];
2->21 [style = dotted, label="false"];
22->10 [style = bold, label=""];
36->8 [style = bold, label=""];
7->14 [style = solid, label="i"];
24->15 [style = bold, label=""];
6->30 [style = dotted, label="true"];
33->35 [style = bold, label=""];
31->23 [style = bold, label=""];
10->11 [style = solid, label="compactionTask1"];
28->7 [style = bold, label=""];
38->23 [style = bold, label=""];
10->33 [style = dashed, label="0"];
3->1 [style = solid, label="i"];
12->16 [style = bold, label=""];
16->2 [style = bold, label=""];
8->5 [style = solid, label="i"];
8->1 [style = solid, label="i"];
14->12 [style = bold, label=""];
16->29 [style = dashed, label="0"];
14->29 [style = dotted, label="true"];
26->36 [style = dashed, label="0"];
6->9 [style = bold, label=""];
9->13 [style = solid, label="compactionTask2"];
11->35 [style = dashed, label="0"];
6->5 [style = dotted, label="true"];
9->13 [style = bold, label=""];
}
