digraph {
15 [style = filled, label = "Assert.assertEquals(\"Should project longitude\",-1.539054f,(float)projectedLocation.get(\"long\"),0.000001f)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "record.put(\"id\",34L)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(\"Should project longitude\",-1.539054f,(float)projectedLocation.get(\"long\"),0.000001f)@@@35@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Schema latOnly = new Schema(Types.NestedField.optional(3,\"location\",Types.StructType.of(Types.NestedField.required(1,\"lat\",Types.FloatType.get()))))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Schema writeSchema = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()),Types.NestedField.optional(3,\"location\",Types.StructType.of(Types.NestedField.required(1,\"lat\",Types.FloatType.get()),Types.NestedField.required(2,\"long\",Types.FloatType.get()))))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertNull(\"Should not project latitutde\",projectedLocation.get(\"lat\"))@@@27@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Record projectedLocation = (Record)projected.get(\"location\")@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "projectedLocation = (Record)projected.get(\"location\")@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "TestHelpers.assertEmptyAvroField(projected,\"id\")@@@31@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "TestHelpers.assertEmptyAvroField(projectedLocation,\"lat\")@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "projectedLocation = (Record)projected.get(\"location\")@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "projectedLocation = (Record)projected.get(\"location\")@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Record projectedLocation = (Record)projected.get(\"location\")@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Schema idOnly = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Record projected = writeAndRead(\"id_only\",writeSchema,idOnly,record)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.get(\"id\"))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "location.put(\"long\",-1.539054f)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "testNestedStructProjection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "projected = writeAndRead(\"latitude_only\",writeSchema,latOnly,record)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Schema longOnly = new Schema(Types.NestedField.optional(3,\"location\",Types.StructType.of(Types.NestedField.required(2,\"long\",Types.FloatType.get()))))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertNotNull(\"Should project location\",projected.get(\"location\"))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testNestedStructProjection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "TestHelpers.assertEmptyAvroField(projectedLocation,\"long\")@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "TestHelpers.assertEmptyAvroField(projected,\"id\")@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "testNestedStructProjection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "Record record = new Record(AvroSchemaUtil.convert(writeSchema,\"table\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "TestHelpers.assertEmptyAvroField(projected,\"id\")@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "Assert.assertNull(\"Should not project location\",projectedLocation)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertNotNull(\"Should project location\",projected.get(\"location\"))@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "record.put(\"location\",location)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertNull(\"Should not project longitude\",projectedLocation.get(\"long\"))@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@32@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(\"Should project latitude\",52.995143f,(float)projectedLocation.get(\"lat\"),0.000001f)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(\"Should project latitude\",52.995143f,(float)projectedLocation.get(\"lat\"),0.000001f)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Schema locationOnly = writeSchema.select(\"location\")@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertNotNull(\"Should project location\",projected.get(\"location\"))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "projected = writeAndRead(\"longitude_only\",writeSchema,longOnly,record)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "location.put(\"lat\",52.995143f)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "TestHelpers.assertEmptyAvroField(projected,\"location\")@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@25@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Record location = new Record(AvroSchemaUtil.fromOption(record.getSchema().getField(\"location\").schema()))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "projected = writeAndRead(\"location_only\",writeSchema,locationOnly,record)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22->41 [style = dashed, label="0"];
12->26 [style = bold, label=""];
21->20 [style = solid, label="record"];
13->30 [style = solid, label="projectedLocation"];
5->19 [style = bold, label=""];
31->29 [style = solid, label="longOnly"];
8->41 [style = bold, label=""];
26->21 [style = bold, label=""];
10->32 [style = bold, label=""];
23->15 [style = bold, label=""];
19->25 [style = solid, label="idOnly"];
41->6 [style = bold, label=""];
40->41 [style = solid, label="projectedLocation"];
4->16 [style = bold, label=""];
22->6 [style = bold, label=""];
24->20 [style = bold, label=""];
2->11 [style = bold, label=""];
13->17 [style = bold, label=""];
28->38 [style = bold, label=""];
28->37 [style = solid, label="projectedLocation"];
29->28 [style = bold, label=""];
9->3 [style = bold, label=""];
25->34 [style = bold, label=""];
18->33 [style = bold, label=""];
11->9 [style = bold, label=""];
17->14 [style = bold, label=""];
14->0 [style = bold, label=""];
15->24 [style = bold, label=""];
34->17 [style = bold, label=""];
3->27 [style = bold, label=""];
33->37 [style = bold, label=""];
10->40 [style = dashed, label="0"];
25->34 [style = solid, label="projected"];
20->36 [style = solid, label="projected"];
0->10 [style = bold, label=""];
36->9 [style = bold, label=""];
29->38 [style = solid, label="projected"];
19->25 [style = bold, label=""];
26->0 [style = solid, label="writeSchema"];
2->36 [style = bold, label=""];
24->20 [style = solid, label="locationOnly"];
16->1 [style = bold, label=""];
26->29 [style = solid, label="writeSchema"];
6->31 [style = bold, label=""];
32->8 [style = bold, label=""];
33->23 [style = bold, label=""];
8->22 [style = bold, label=""];
25->13 [style = bold, label=""];
0->35 [style = solid, label="projected"];
21->25 [style = solid, label="record"];
28->18 [style = bold, label=""];
23->37 [style = dashed, label="0"];
7->5 [style = bold, label=""];
0->40 [style = bold, label=""];
26->21 [style = solid, label="writeSchema"];
21->0 [style = solid, label="record"];
35->8 [style = bold, label=""];
38->33 [style = bold, label=""];
20->2 [style = bold, label=""];
26->20 [style = solid, label="writeSchema"];
1->7 [style = bold, label=""];
31->29 [style = bold, label=""];
40->35 [style = bold, label=""];
30->14 [style = bold, label=""];
16->5 [style = solid, label="location"];
17->30 [style = bold, label=""];
21->4 [style = bold, label=""];
37->15 [style = bold, label=""];
42->26 [style = bold, label=""];
14->0 [style = solid, label="latOnly"];
26->25 [style = solid, label="writeSchema"];
21->29 [style = solid, label="record"];
39->26 [style = bold, label=""];
}
