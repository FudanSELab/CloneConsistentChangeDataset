digraph {
6 [style = filled, label = "verify(someProperties,times(1)).getProperty(anotherKey)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(anotherValue,defaultConfig.getIntProperty(anotherKey,someDefaultValue))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Integer anotherValue = 3@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "when(someProperties.getProperty(someKey)).thenReturn(String.valueOf(someValue))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Integer someValue = 2@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "String anotherKey = \"anotherKey\"@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "verify(someProperties,times(1)).getProperty(someKey)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "verify(someProperties,times(1)).getProperty(someKey)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "DefaultConfig defaultConfig = new DefaultConfig(someNamespace,configRepository)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testGetIntPropertyMultipleTimesWithSmallCache['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "defineComponent(,)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "String someKey = \"someKey\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testGetIntPropertyMultipleTimesWithCache['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(anotherValue,defaultConfig.getIntProperty(anotherKey,someDefaultValue))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Integer someDefaultValue = -1@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "when(configRepository.getConfig()).thenReturn(someProperties)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "MockInjector.setInstance(,new MockConfigUtilWithSmallCache())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "when(someProperties.getProperty(anotherKey)).thenReturn(String.valueOf(anotherValue))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "someProperties = mock()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testGetIntPropertyMultipleTimesWithSmallCache['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "verify(someProperties,times(2)).getProperty(someKey)@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17->5 [style = bold, label=""];
19->18 [style = bold, label=""];
20->13 [style = bold, label=""];
9->11 [style = bold, label=""];
0->13 [style = bold, label=""];
16->8 [style = bold, label=""];
7->10 [style = bold, label=""];
2->3 [style = bold, label=""];
18->15 [style = solid, label="someDefaultValue"];
12->17 [style = bold, label=""];
13->16 [style = solid, label="someKey"];
18->12 [style = solid, label="someDefaultValue"];
14->10 [style = bold, label=""];
5->15 [style = bold, label=""];
13->23 [style = solid, label="someKey"];
11->12 [style = bold, label=""];
15->6 [style = bold, label=""];
12->16 [style = bold, label=""];
19->2 [style = bold, label=""];
16->23 [style = bold, label=""];
19->14 [style = solid, label="someValue"];
1->10 [style = solid, label="someProperties"];
4->21 [style = dashed, label="0"];
2->15 [style = solid, label="anotherKey"];
19->16 [style = solid, label="someValue"];
14->7 [style = bold, label=""];
3->18 [style = bold, label=""];
3->5 [style = solid, label="anotherValue"];
3->7 [style = solid, label="anotherValue"];
18->11 [style = solid, label="someDefaultValue"];
13->19 [style = bold, label=""];
3->15 [style = solid, label="anotherValue"];
13->17 [style = solid, label="someKey"];
18->4 [style = bold, label=""];
18->1 [style = bold, label=""];
2->5 [style = solid, label="anotherKey"];
6->16 [style = bold, label=""];
18->16 [style = solid, label="someDefaultValue"];
13->11 [style = solid, label="someKey"];
21->1 [style = bold, label=""];
13->8 [style = solid, label="someKey"];
2->6 [style = solid, label="anotherKey"];
18->5 [style = solid, label="someDefaultValue"];
1->14 [style = bold, label=""];
4->1 [style = bold, label=""];
10->9 [style = bold, label=""];
19->12 [style = solid, label="someValue"];
18->21 [style = bold, label=""];
13->12 [style = solid, label="someKey"];
19->11 [style = solid, label="someValue"];
22->13 [style = bold, label=""];
8->23 [style = dashed, label="0"];
}
