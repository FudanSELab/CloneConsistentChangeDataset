digraph {
8 [style = filled, label = "Assert.assertFalse(Functions.exists(empty,Functions.truePredicate1()))@@@7@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Assert.assertTrue(Functions.all(empty,Functions.truePredicate1()))@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testExists['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Assert.assertFalse(Functions.all(ints,new Predicate1<Integer>(){public boolean apply(Integer v1){return v1 > 20}}))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertFalse(Functions.exists(empty,Functions.falsePredicate1()))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "Assert.assertFalse(Functions.exists(ints,new Predicate1<Integer>(){public boolean apply(Integer v1){return v1 > 20}}))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Assert.assertFalse(Functions.exists(ints,null))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "testExists['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertTrue(Functions.all(empty,Functions.falsePredicate1()))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final List<Integer> ints = Arrays.asList(1,10,2)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertTrue(Functions.all(ints,new Predicate1<Integer>(){public boolean apply(Integer v1){return v1 < 20}}))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertFalse(Functions.exists(empty,Functions.truePredicate1()))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "final List<Integer> empty = Collections.emptyList()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertFalse(Functions.exists(empty,Functions.falsePredicate1()))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "testAll['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertFalse(Functions.all(ints,new Predicate1<Integer>(){public boolean apply(Integer v1){return v1 < 10}}))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15->2 [style = bold, label=""];
2->5 [style = solid, label="ints"];
3->13 [style = solid, label="empty"];
9->2 [style = bold, label=""];
2->3 [style = bold, label=""];
2->11 [style = solid, label="ints"];
3->11 [style = bold, label=""];
2->7 [style = solid, label="ints"];
11->12 [style = bold, label=""];
3->6 [style = solid, label="empty"];
2->12 [style = solid, label="ints"];
3->4 [style = solid, label="empty"];
2->10 [style = solid, label="ints"];
3->5 [style = bold, label=""];
12->10 [style = bold, label=""];
3->14 [style = solid, label="empty"];
5->0 [style = bold, label=""];
3->7 [style = bold, label=""];
10->13 [style = bold, label=""];
0->4 [style = bold, label=""];
5->11 [style = dashed, label="0"];
6->8 [style = bold, label=""];
7->6 [style = bold, label=""];
1->2 [style = bold, label=""];
5->7 [style = dashed, label="0"];
13->14 [style = bold, label=""];
3->0 [style = solid, label="empty"];
3->8 [style = solid, label="empty"];
}
