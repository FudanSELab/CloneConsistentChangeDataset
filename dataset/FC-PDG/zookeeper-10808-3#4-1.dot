digraph {
15 [style = filled, label = "testOffer1['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "int i = 0@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "byte dequeuedBytes = queueHandles(1(.remove()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "i < clients.length@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "byte dequeuedBytes = queueHandles(0(.remove()@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "final int num_clients = 1@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "i++@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "DistributedQueue queueHandles = new DistributedQueue((((@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(new String(dequeuedBytes),testString)@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "DistributedQueue(( queueHandles = new DistributedQueue((((@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "ZooKeeper clients = new ZooKeeper((((@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "clients(i( = createClient()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "byte(( dequeuedBytes = queueHandles(0(.remove()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "String dir = \"/testOffer2\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testOffer2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "queueHandles(i( = new DistributedQueue(clients(i(,dir,null)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "String testString = \"Hello World\"@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testOffer1['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "String dir = \"/testOffer1\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ZooKeeper(( clients = new ZooKeeper((((@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "final int num_clients = 2@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "queueHandles(0(.offer(testString.getBytes())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
13->10 [style = bold, label=""];
6->21 [style = dashed, label="0"];
4->3 [style = bold, label=""];
3->1 [style = bold, label=""];
11->4 [style = solid, label="i"];
4->1 [style = dotted, label="true"];
0->12 [style = bold, label=""];
11->4 [style = bold, label=""];
12->11 [style = bold, label=""];
0->16 [style = dashed, label="0"];
12->17 [style = dashed, label="0"];
14->10 [style = bold, label=""];
3->1 [style = solid, label="clients"];
8->6 [style = bold, label=""];
15->6 [style = bold, label=""];
16->17 [style = bold, label=""];
6->1 [style = solid, label="dir"];
2->4 [style = bold, label=""];
13->10 [style = solid, label="dequeuedBytes"];
4->7 [style = bold, label=""];
21->1 [style = solid, label="dir"];
19->0 [style = bold, label=""];
13->14 [style = dashed, label="0"];
7->14 [style = bold, label=""];
20->21 [style = bold, label=""];
5->16 [style = bold, label=""];
21->9 [style = bold, label=""];
4->3 [style = dotted, label="true"];
14->10 [style = solid, label="dequeuedBytes"];
18->10 [style = bold, label=""];
5->0 [style = bold, label=""];
18->10 [style = solid, label="dequeuedBytes"];
1->2 [style = solid, label="i"];
2->4 [style = solid, label="i"];
9->5 [style = bold, label=""];
9->19 [style = bold, label=""];
7->18 [style = bold, label=""];
1->2 [style = bold, label=""];
13->18 [style = dashed, label="0"];
6->9 [style = bold, label=""];
5->19 [style = dashed, label="0"];
4->2 [style = dotted, label="true"];
9->10 [style = solid, label="testString"];
17->11 [style = bold, label=""];
}
