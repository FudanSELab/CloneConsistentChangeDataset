digraph {
3 [style = filled, label = "assertTrue(CLASSNAME + \" CodedInputStream must now be exhausted\",cis.isAtEnd())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "byte(( roundTripBytes = cis.readRawBytes(BYTES.length)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(CLASSNAME + \" must give the same bytes back from the CodedInputStream\",Arrays.equals(BYTES,roundTripBytes))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertTrue(classUnderTest + \" must give the same bytes back from the CodedInputStream\",Arrays.equals(referenceBytes,roundTripBytes))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "byte(( roundTripBytes = cis.readRawBytes(referenceBytes.length)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertWithMessage(\"%s must give the same bytes back from the CodedInputStream\",CLASSNAME).that(Arrays.equals(BYTES,roundTripBytes)).isTrue()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertWithMessage(\"%s CodedInputStream must now be exhausted\",CLASSNAME).that(cis.isAtEnd()).isTrue()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "CodedInputStream cis = stringUnderTest.newCodedInput()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(classUnderTest + \" CodedInputStream must now be exhausted\",cis.isAtEnd())@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testNewCodedInput['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "CodedInputStream cis = testString.newCodedInput()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testNewCodedInput['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testNewCodedInput['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8->9 [style = bold, label=""];
4->3 [style = bold, label=""];
5->1 [style = bold, label=""];
1->8 [style = dashed, label="0"];
3->6 [style = dashed, label="0"];
9->12 [style = bold, label=""];
1->0 [style = bold, label=""];
0->9 [style = dashed, label="0"];
10->8 [style = bold, label=""];
9->12 [style = solid, label="roundTripBytes"];
0->4 [style = solid, label="roundTripBytes"];
0->4 [style = bold, label=""];
4->7 [style = dashed, label="0"];
2->1 [style = bold, label=""];
3->11 [style = dashed, label="0"];
7->6 [style = bold, label=""];
4->12 [style = dashed, label="0"];
0->7 [style = bold, label=""];
12->11 [style = bold, label=""];
}
