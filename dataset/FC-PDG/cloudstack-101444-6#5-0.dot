digraph {
21 [style = filled, label = "boolean isAccountSpecific = false@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "vlanRange == null@@@22@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "int resourceCountToBeDecrement = 0@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "final Account caller@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "domainVlan != null && !domainVlan.isEmpty()@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "ip.isOneToOneNat()@@@30@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "{_vlanDao.releaseFromLockTable(vlanDbId)if (resourceCountToBeDecrement > 0) {_resourceLimitMgr.decrementResourceCount(acctVln.get(0).getAccountId(),ResourceType.public_ip,new Long(resourceCountToBeDecrement))}}@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "sc.setParameters(\"vlanId\",vlanId)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "return userIpAddresVO.isForSystemVms()@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "isAccountSpecific@@@18@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "IPAddressVO userIpAddresVO = userIpAddressDao.findOneBy(sc)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "final long userId@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "deleteVlanAndPublicIpRange['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "final List<IPAddressVO> ips = _publicIpAddressDao.listByVlanId(vlanDbId)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "!success@@@42@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "_firewallDao.countRulesByIpId(ip.getId()) > 0@@@36@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "deleteVlanAndPublicIpRange['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "vlanRange == null@@@4@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "isForSystemVms['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "throw new InvalidParameterValueException(\"Can't delete account specific vlan \" + vlanDbId + \" as ip \" + ip + \" belonging to the range has firewall rules applied. Cleanup the rules first\")@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "final IPAddressVO ip@@@28@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
45 [style = filled, label = "return true@@@83@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "resourceCountToBeDecrement++@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "s_logger.warn(\"Some ip addresses failed to be released as a part of vlan \" + vlanDbId + \" removal\")@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "VlanVO vlanRange = _vlanDao.findById(vlanDbId)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ipAlias != null && vlanDbId == _publicIpAddressDao.findByIpAndSourceNetworkId(vlanRange.getNetworkId(),ipAlias.getIp4Address()).getVlanId()@@@60@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "throw new InvalidParameterValueException(\"Please specify a valid IP range id.\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final List<AccountVlanMapVO> acctVln = _accountVlanMapDao.listAccountVlanMapsByVlan(vlanRange.getId())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Transaction.execute(new TransactionCallbackNoReturn(){@Override public void doInTransactionWithoutResult(final TransactionStatus status){_publicIpAddressDao.deletePublicIPRange(vlanDbId)s_logger.debug(String.format(\"Delete Public IP Range (from user_ip_address, where vlan_db_d=%s)\",vlanDbId))_vlanDao.remove(vlanDbId)s_logger.debug(String.format(\"Mark vlan as Remove vlan (vlan_db_id=%s)\",vlanDbId))SearchBuilder<PodVlanMapVO> sb = podVlanMapDao.createSearchBuilder()sb.and(\"vlan_db_id\",sb.entity().getVlanDbId(),SearchCriteria.Op.EQ)SearchCriteria<PodVlanMapVO> sc = sb.create()sc.setParameters(\"vlan_db_id\",vlanDbId)podVlanMapDao.remove(sc)s_logger.debug(String.format(\"Delete vlan_db_id=%s in pod_vlan_map\",vlanDbId))}})@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "SearchBuilder<IPAddressVO> sb = userIpAddressDao.createSearchBuilder()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "throw new InvalidParameterValueException(allocIpCount + \" Ips are in use. Cannot delete this vlan\")@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "isAccountSpecific = true@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NET_IP_RELEASE,acctVln.get(0).getAccountId(),ip.getDataCenterId(),ip.getId(),ip.getAddress().toString(),ip.isSourceNat(),vlanRange.getVlanType().toString(),ip.getSystem(),ip.getClass().getName(),ip.getUuid())@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "final long vlanDbId@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "boolean success = true@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ip.getAllocatedTime() != null@@@39@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final IPAddressVO ip@@@28@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "long vlanId@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "sb.and(\"vlanId\",sb.entity().getVlanId(),SearchCriteria.Op.EQ)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "ips@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "throw new CloudRuntimeException(\"Unable to acquire vlan configuration: \" + vlanDbId)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "s_logger.isDebugEnabled()@@@25@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "isDomainSpecific = true@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "SearchCriteria<IPAddressVO> sc = sb.create()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "s_logger.debug(\"lock vlan \" + vlanDbId + \" is acquired\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final long vlanDbId@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final NicIpAliasVO ipAlias = _nicIpAliasDao.findByGatewayAndNetworkIdAndState(vlanRange.getVlanGateway(),vlanRange.getNetworkId(),NicIpAlias.State.active)@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "ip.isSourceNat()@@@33@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "throw new InvalidParameterValueException(\"Cannot delete vlan range \" + vlanDbId + \" as \" + ipAlias.getIp4Address() + \"is being used for providing dhcp service in this subnet. Delete all VMs in this subnet and try again\")@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final long allocIpCount = _publicIpAddressDao.countIPs(vlanRange.getDataCenterId(),vlanDbId,true)@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "throw new InvalidParameterValueException(\"Can't delete account specific vlan \" + vlanDbId + \" as ip \" + ip + \" belonging to the range is used for static nat purposes. Cleanup the rules first\")@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "throw new InvalidParameterValueException(\"Can't delete account specific vlan \" + vlanDbId + \" as ip \" + ip + \" belonging to the range is a source nat ip for the network id=\" + ip.getSourceNetworkId() + \". IP range with the source nat ip address can be removed either as a part of Network, or account removal\")@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "List<DomainVlanMapVO> domainVlan = _domainVlanMapDao.listDomainVlanMapsByVlan(vlanRange.getId())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "final long userId@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "acctVln != null && !acctVln.isEmpty()@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "allocIpCount > 0@@@64@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "vlanRange = _vlanDao.acquireInLockTable(vlanDbId,30)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "success = _ipAddrMgr.disassociatePublicIpAddress(ip.getId(),userId,caller)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "boolean isDomainSpecific = false@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49->30 [style = bold, label=""];
12->11 [style = solid, label="allocIpCount"];
25->3 [style = bold, label=""];
0->6 [style = dotted, label="true"];
34->40 [style = dotted, label="true"];
9->46 [style = bold, label=""];
43->45 [style = bold, label=""];
9->5 [style = dotted, label="true"];
16->2 [style = dotted, label="true"];
55->58 [style = bold, label=""];
18->32 [style = solid, label="vlanDbId"];
34->18 [style = dotted, label="true"];
46->3 [style = solid, label="resourceCountToBeDecrement"];
6->37 [style = bold, label=""];
18->27 [style = solid, label="vlanDbId"];
18->1 [style = solid, label="vlanDbId"];
5->32 [style = bold, label=""];
47->3 [style = solid, label="vlanDbId"];
47->33 [style = solid, label="vlanDbId"];
57->56 [style = bold, label=""];
9->10 [style = dotted, label="true"];
7->13 [style = bold, label=""];
5->17 [style = bold, label=""];
11->44 [style = bold, label=""];
9->50 [style = dotted, label="true"];
25->35 [style = bold, label=""];
30->7 [style = bold, label=""];
34->28 [style = dotted, label="true"];
18->30 [style = solid, label="vlanDbId"];
38->42 [style = bold, label=""];
46->17 [style = solid, label="resourceCountToBeDecrement"];
48->2 [style = solid, label="caller"];
16->5 [style = bold, label=""];
47->39 [style = solid, label="vlanDbId"];
1->36 [style = bold, label=""];
31->39 [style = bold, label=""];
24->29 [style = bold, label=""];
21->4 [style = bold, label=""];
35->26 [style = bold, label=""];
47->30 [style = solid, label="vlanDbId"];
47->27 [style = solid, label="vlanDbId"];
5->32 [style = dotted, label="true"];
4->20 [style = solid, label="acctVln"];
18->24 [style = solid, label="vlanDbId"];
47->32 [style = solid, label="vlanDbId"];
26->24 [style = bold, label=""];
44->43 [style = bold, label=""];
47->19 [style = solid, label="vlanDbId"];
18->41 [style = solid, label="vlanDbId"];
33->31 [style = bold, label=""];
3->43 [style = bold, label=""];
11->43 [style = bold, label=""];
39->35 [style = bold, label=""];
23->0 [style = solid, label="domainVlan"];
9->1 [style = dotted, label="true"];
7->13 [style = dotted, label="true"];
20->38 [style = dotted, label="true"];
18->39 [style = solid, label="vlanDbId"];
9->35 [style = dotted, label="true"];
1->36 [style = solid, label="vlanRange"];
22->27 [style = dotted, label="true"];
16->2 [style = bold, label=""];
54->57 [style = bold, label=""];
20->42 [style = bold, label=""];
18->3 [style = solid, label="vlanDbId"];
29->14 [style = dotted, label="true"];
40->2 [style = solid, label="caller"];
36->33 [style = dotted, label="true"];
46->1 [style = bold, label=""];
18->37 [style = solid, label="vlanDbId"];
30->7 [style = solid, label="vlanRange"];
29->14 [style = bold, label=""];
34->30 [style = bold, label=""];
47->12 [style = solid, label="vlanDbId"];
47->1 [style = solid, label="vlanDbId"];
8->19 [style = bold, label=""];
51->53 [style = dotted, label="true"];
14->22 [style = bold, label=""];
47->14 [style = solid, label="vlanDbId"];
0->6 [style = bold, label=""];
9->31 [style = dotted, label="true"];
42->23 [style = bold, label=""];
47->37 [style = solid, label="vlanDbId"];
22->16 [style = bold, label=""];
47->43 [style = solid, label="vlanDbId"];
53->54 [style = solid, label="vlanId"];
18->12 [style = solid, label="vlanDbId"];
23->0 [style = bold, label=""];
21->9 [style = solid, label="isAccountSpecific"];
17->3 [style = solid, label="resourceCountToBeDecrement"];
18->43 [style = solid, label="vlanDbId"];
9->8 [style = dotted, label="false"];
26->24 [style = dotted, label="true"];
17->25 [style = bold, label=""];
9->29 [style = dotted, label="true"];
28->2 [style = solid, label="userId"];
9->16 [style = dotted, label="true"];
36->33 [style = bold, label=""];
51->55 [style = bold, label=""];
49->40 [style = dotted, label="true"];
40->2 [style = solid, label="userId"];
19->41 [style = dotted, label="true"];
31->39 [style = dotted, label="true"];
37->9 [style = bold, label=""];
18->19 [style = solid, label="vlanDbId"];
26->29 [style = bold, label=""];
47->24 [style = solid, label="vlanDbId"];
9->11 [style = dotted, label="false"];
52->57 [style = solid, label="sc"];
9->22 [style = dotted, label="true"];
0->37 [style = bold, label=""];
5->25 [style = dotted, label="false"];
5->17 [style = dotted, label="false"];
2->5 [style = bold, label=""];
22->27 [style = bold, label=""];
12->44 [style = solid, label="allocIpCount"];
9->46 [style = dotted, label="true"];
7->21 [style = bold, label=""];
38->9 [style = solid, label="isAccountSpecific"];
18->33 [style = solid, label="vlanDbId"];
4->20 [style = bold, label=""];
41->12 [style = bold, label=""];
52->54 [style = bold, label=""];
9->19 [style = dotted, label="false"];
27->16 [style = bold, label=""];
31->35 [style = bold, label=""];
58->52 [style = bold, label=""];
9->26 [style = dotted, label="true"];
32->35 [style = bold, label=""];
9->36 [style = dotted, label="true"];
36->31 [style = bold, label=""];
11->44 [style = dotted, label="true"];
47->41 [style = solid, label="vlanDbId"];
32->3 [style = bold, label=""];
49->48 [style = dotted, label="true"];
20->38 [style = bold, label=""];
8->19 [style = solid, label="ipAlias"];
29->22 [style = bold, label=""];
19->41 [style = bold, label=""];
12->11 [style = bold, label=""];
9->15 [style = dotted, label="true"];
49->47 [style = dotted, label="true"];
9->8 [style = bold, label=""];
9->12 [style = dotted, label="false"];
19->12 [style = bold, label=""];
18->14 [style = solid, label="vlanDbId"];
13->21 [style = bold, label=""];
}
