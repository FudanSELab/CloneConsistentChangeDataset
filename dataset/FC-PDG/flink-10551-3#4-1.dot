digraph {
42 [style = filled, label = "initialDiscoveryShards.add(new StreamShardHandle(shardMetadata.getStreamName(),closedShard))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "MigrationTestUtil.restoreFromSnapshot(testHarness,\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-snapshot\",testMigrateVersion)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "assertEquals(1,consumerFunction.getRestoredState().size())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "newSplitShard1.setParentShardId(TEST_SHARD_ID)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "assertEquals(KinesisShardIdGenerator.generateFromShardOrder(1),restoredNewSplitShard1.getStreamShardHandle().getShard().getShardId())@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Shard closedShard = new Shard()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "newSplitShard2.setSequenceNumberRange(newSequenceNumberRange2)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final AbstractStreamOperatorTestHarness<String> testHarness = new AbstractStreamOperatorTestHarness<>(consumerOperator,1,1,0)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "sequenceNumberRange.withStartingSequenceNumber(\"1\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "newSplitShard1.setShardId(KinesisShardIdGenerator.generateFromShardOrder(1))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "SequenceNumberRange closedSequenceNumberRange = new SequenceNumberRange()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "assertEquals(TEST_SHARD_ID,restoredClosedShardState.getStreamShardHandle().getShard().getShardId())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertEquals(TEST_STREAM_NAME,restoredClosedShardState.getStreamShardHandle().getStreamName())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "initialDiscoveryShards.add(new StreamShardHandle(shardMetadata.getStreamName(),shard))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(TEST_SEQUENCE_NUMBER,fetcher.getSubscribedShardsState().get(0).getLastProcessedSequenceNum())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "assertEquals(SentinelSequenceNumber.SENTINEL_EARLIEST_SEQUENCE_NUM.get(),restoredNewSplitShard1.getLastProcessedSequenceNum())@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(1,fetcher.getSubscribedShardsState().size())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "consumerOperator.cancel()@@@55@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "assertEquals(3,fetcher.getSubscribedShardsState().size())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final List<StreamShardHandle> initialDiscoveryShards = new ArrayList<>(TEST_STATE.size())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "closedSequenceNumberRange.withStartingSequenceNumber(\"1\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final TestFetcher<String> fetcher = new TestFetcher<>(Collections.singletonList(TEST_STREAM_NAME),new TestSourceContext<>(),new TestRuntimeContext(true,1,0),TestUtils.getStandardProperties(),new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),null,initialDiscoveryShards)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final DummyFlinkKinesisConsumer<String> consumerFunction = new DummyFlinkKinesisConsumer<>(fetcher,new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final AbstractStreamOperatorTestHarness<String> testHarness = new AbstractStreamOperatorTestHarness<>(consumerOperator,1,1,0)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testRestore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertNotEquals(null,consumerFunction.getRestoredState())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "MigrationTestUtil.restoreFromSnapshot(testHarness,\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-snapshot\",testMigrateVersion)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "assertTrue(restoredClosedShardState.getStreamShardHandle().isClosed())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(1,consumerFunction.getRestoredState().size())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertNotEquals(null,consumerFunction.getRestoredState())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "KinesisStreamShardState restoredClosedShardState = fetcher.getSubscribedShardsState().get(0)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "SequenceNumberRange newSequenceNumberRange1 = new SequenceNumberRange()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "KinesisStreamShardState restoredNewSplitShard2 = fetcher.getSubscribedShardsState().get(2)@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "consumerFunction.run(new TestSourceContext<>())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "testRestoreWithReshardedStream['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "assertEquals(TEST_STATE,removeEquivalenceWrappers(consumerFunction.getRestoredState()))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testHarness.setup()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "closedSequenceNumberRange.withEndingSequenceNumber(\"1087654321\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "shard.setShardId(shardMetadata.getShardId())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final TestFetcher<String> fetcher = new TestFetcher<>(Collections.singletonList(TEST_STREAM_NAME),new TestSourceContext<>(),new TestRuntimeContext(true,1,0),TestUtils.getStandardProperties(),new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),null,initialDiscoveryShards)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "newSplitShard2.setShardId(KinesisShardIdGenerator.generateFromShardOrder(2))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testHarness.open()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Shard newSplitShard2 = new Shard()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "testHarness.open()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "Shard newSplitShard1 = new Shard()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "initialDiscoveryShards.add(new StreamShardHandle(shardMetadata.getStreamName(),newSplitShard2))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testHarness.setup()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "newSequenceNumberRange2.withStartingSequenceNumber(\"2087654322\")@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "initialDiscoveryShards.add(new StreamShardHandle(shardMetadata.getStreamName(),newSplitShard1))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final DummyFlinkKinesisConsumer<String> consumerFunction = new DummyFlinkKinesisConsumer<>(fetcher,new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(TEST_STATE,removeEquivalenceWrappers(consumerFunction.getRestoredState()))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(TEST_STREAM_NAME,restoredNewSplitShard2.getStreamShardHandle().getStreamName())@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "assertEquals(KinesisShardIdGenerator.generateFromShardOrder(2),restoredNewSplitShard2.getStreamShardHandle().getShard().getShardId())@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Shard shard = new Shard()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "newSplitShard2.setParentShardId(TEST_SHARD_ID)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "KinesisStreamShardState restoredNewSplitShard1 = fetcher.getSubscribedShardsState().get(1)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "assertEquals(TEST_STREAM_NAME,restoredNewSplitShard1.getStreamShardHandle().getStreamName())@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "assertEquals(SentinelSequenceNumber.SENTINEL_EARLIEST_SEQUENCE_NUM.get(),restoredNewSplitShard2.getLastProcessedSequenceNum())@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "testRestore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "testHarness.initializeState(OperatorSnapshotUtil.getResourceFilename(\"kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-snapshot\"))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
64 [style = filled, label = "newSplitShard1.setSequenceNumberRange(newSequenceNumberRange1)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(TEST_STREAM_NAME,restoredShardState.getStreamShardHandle().getStreamName())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "assertFalse(restoredNewSplitShard2.getStreamShardHandle().isClosed())@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "StreamSource<String,DummyFlinkKinesisConsumer<String>> consumerOperator = new StreamSource<>(consumerFunction)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "SequenceNumberRange sequenceNumberRange = new SequenceNumberRange()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "KinesisStreamShardState restoredShardState = fetcher.getSubscribedShardsState().get(0)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "assertFalse(restoredNewSplitShard1.getStreamShardHandle().isClosed())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "closedShard.setShardId(shardMetadata.getShardId())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "closedShard.setSequenceNumberRange(closedSequenceNumberRange)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "consumerOperator.close()@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "StreamSource<String,DummyFlinkKinesisConsumer<String>> consumerOperator = new StreamSource<>(consumerFunction)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "newSequenceNumberRange1.withStartingSequenceNumber(\"1087654322\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "SequenceNumberRange newSequenceNumberRange2 = new SequenceNumberRange()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "shard.setSequenceNumberRange(sequenceNumberRange)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "consumerFunction.run(new TestSourceContext<>())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "assertEquals(TEST_SEQUENCE_NUMBER,restoredClosedShardState.getLastProcessedSequenceNum())@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->9 [style = bold, label=""];
6->22 [style = bold, label=""];
12->31 [style = dashed, label="0"];
63->36 [style = bold, label=""];
1->13 [style = bold, label=""];
53->39 [style = bold, label=""];
12->7 [style = bold, label=""];
1->23 [style = bold, label=""];
43->74 [style = bold, label=""];
57->63 [style = bold, label=""];
2->44 [style = bold, label=""];
47->51 [style = bold, label=""];
32->66 [style = solid, label="closedSequenceNumberRange"];
50->66 [style = bold, label=""];
23->12 [style = bold, label=""];
64->33 [style = bold, label=""];
19->15 [style = bold, label=""];
23->1 [style = solid, label="shard"];
13->14 [style = bold, label=""];
52->35 [style = bold, label=""];
37->75 [style = bold, label=""];
14->16 [style = bold, label=""];
32->56 [style = bold, label=""];
35->31 [style = bold, label=""];
22->25 [style = bold, label=""];
48->41 [style = bold, label=""];
9->2 [style = bold, label=""];
59->73 [style = bold, label=""];
48->71 [style = solid, label="newSequenceNumberRange2"];
24->0 [style = bold, label=""];
4->13 [style = solid, label="initialDiscoveryShards"];
23->35 [style = dashed, label="0"];
18->17 [style = solid, label="testHarness"];
13->14 [style = solid, label="fetcher"];
42->72 [style = bold, label=""];
52->19 [style = bold, label=""];
14->16 [style = solid, label="consumerFunction"];
46->37 [style = bold, label=""];
67->61 [style = bold, label=""];
60->48 [style = bold, label=""];
36->58 [style = bold, label=""];
8->17 [style = bold, label=""];
7->24 [style = bold, label=""];
22->69 [style = dashed, label="0"];
38->65 [style = bold, label=""];
56->50 [style = bold, label=""];
34->62 [style = bold, label=""];
33->30 [style = bold, label=""];
54->59 [style = bold, label=""];
74->38 [style = bold, label=""];
41->71 [style = bold, label=""];
65->55 [style = bold, label=""];
26->46 [style = dashed, label="0"];
58->67 [style = bold, label=""];
0->50 [style = dashed, label="0"];
49->54 [style = bold, label=""];
4->23 [style = bold, label=""];
11->26 [style = bold, label=""];
35->42 [style = solid, label="closedShard"];
24->56 [style = dashed, label="0"];
30->52 [style = solid, label="newSplitShard2"];
15->75 [style = dashed, label="0"];
17->10 [style = bold, label=""];
16->18 [style = bold, label=""];
39->46 [style = bold, label=""];
4->19 [style = solid, label="initialDiscoveryShards"];
55->69 [style = bold, label=""];
31->32 [style = bold, label=""];
25->53 [style = dashed, label="0"];
72->70 [style = solid, label="newSplitShard1"];
9->44 [style = solid, label="testHarness"];
73->57 [style = bold, label=""];
26->19 [style = bold, label=""];
5->9 [style = solid, label="consumerOperator"];
61->34 [style = bold, label=""];
51->64 [style = bold, label=""];
0->1 [style = bold, label=""];
69->53 [style = bold, label=""];
66->42 [style = bold, label=""];
47->64 [style = solid, label="newSequenceNumberRange1"];
7->32 [style = dashed, label="0"];
29->10 [style = bold, label=""];
71->40 [style = bold, label=""];
18->8 [style = bold, label=""];
75->49 [style = bold, label=""];
40->70 [style = bold, label=""];
4->35 [style = bold, label=""];
21->6 [style = bold, label=""];
10->3 [style = bold, label=""];
16->18 [style = solid, label="consumerOperator"];
17->29 [style = dashed, label="0"];
15->5 [style = bold, label=""];
44->43 [style = bold, label=""];
45->4 [style = bold, label=""];
20->21 [style = bold, label=""];
27->4 [style = bold, label=""];
3->20 [style = bold, label=""];
25->11 [style = bold, label=""];
70->52 [style = bold, label=""];
68->47 [style = bold, label=""];
7->0 [style = solid, label="sequenceNumberRange"];
72->68 [style = bold, label=""];
19->15 [style = solid, label="fetcher"];
19->37 [style = dashed, label="0"];
8->29 [style = bold, label=""];
15->5 [style = solid, label="consumerFunction"];
28->4 [style = bold, label=""];
30->60 [style = bold, label=""];
}
