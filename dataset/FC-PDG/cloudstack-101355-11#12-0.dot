digraph {
0 [style = filled, label = "final AssignVMCmd cmd@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final Long vlanId@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Account callerAccount = CallContext.current().getCallingAccount()@@@90@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "moveVMToUser['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "throw e@@@108@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "return true@@@111@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "boolean createNetwork = pair.first()@@@84@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "ReservationContext context = new ReservationContextImpl(UUID.randomUUID().toString(),journal,callerUser,callerAccount)@@@93@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "throw new InvalidParameterValueException(\"Network \" + guestNetworkFinal + \" is not of a type \" + TrafficType.Guest)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "UserVO callerUser = _userDao.findById(CallContext.current().getCallingUserId())@@@91@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "associateIpAddressListToAccount['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "s_logger.warn(\"Failed to implement the network \" + guestNetwork)@@@98@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "throw new IllegalStateException(e1)@@@82@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Ternary<Boolean,List<NetworkOfferingVO>,Network> pair = null@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Journal journal = new Journal.LogJournal(\"Implementing \" + guestNetwork,s_logger)@@@92@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "DataCenter zone = _dcDao.findById(zoneId)@@@88@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "guestNetworkFinal != null && guestNetworkFinal.getTrafficType() != TrafficType.Guest@@@4@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "s_logger.warn(\"Failed to implement network \" + guestNetwork + \" elements and resources as a part of\" + \" network provision due to \",ex)@@@105@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "final Account owner = _accountMgr.getActiveAccountById(accountId)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "ExceptionUtil.rethrowRuntime(e1)@@@79@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network (with specified id)\" + \" elements and resources as a part of network provision for persistent network\")@@@106@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Exception e1@@@78@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "final Network guestNetworkFinal@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "s_logger.debug(\"Implementing network \" + guestNetwork + \" as a part of network provision for persistent network\")@@@94@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "implementedNetwork == null || implementedNetwork.first() == null@@@97@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Exception ex@@@104@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "createNetwork && requiredOfferings.get(0).isPersistent()@@@87@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "moveVMToUser['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "List<NetworkOfferingVO> requiredOfferings = pair.second()@@@85@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Pair<? extends NetworkGuru,? extends Network> implementedNetwork = _networkMgr.implementNetwork(guestNetwork.getId(),dest,context)@@@96@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "guestNetwork = implementedNetwork.second()@@@101@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "pair = Transaction.execute(new TransactionCallbackWithException<Ternary<Boolean,List<NetworkOfferingVO>,Network>,Exception>(){@Override public Ternary<Boolean,List<NetworkOfferingVO>,Network> doInTransaction(TransactionStatus status){boolean createNetwork = falseNetwork guestNetwork = guestNetworkFinalif (guestNetwork == null) {List<? extends Network> networks = getIsolatedNetworksWithSourceNATOwnedByAccountInZone(zoneId,owner)if (networks.size() == 0) {createNetwork = true}if (networks.size() == 1) {guestNetwork = networks.get(0)}{throw new InvalidParameterValueException(\"Error, more than 1 Guest Isolated Networks with SourceNAT \" + \"service enabled found for this account, cannot assosiate the IP range, please provide the network ID\")}}List<NetworkOfferingVO> requiredOfferings = _networkOfferingDao.listByAvailability(Availability.Required,false)if (requiredOfferings.size() < 1) {throw new CloudRuntimeException(\"Unable to find network offering with availability=\" + Availability.Required + \" to automatically create the network as part of createVlanIpRange\")}if (createNetwork) {if (requiredOfferings.get(0).getState() == NetworkOffering.State.Enabled) {long physicalNetworkId = _networkModel.findPhysicalNetworkId(zoneId,requiredOfferings.get(0).getTags(),requiredOfferings.get(0).getTrafficType())PhysicalNetwork physicalNetwork = _physicalNetworkDao.findById(physicalNetworkId)if (physicalNetwork == null) {throw new InvalidParameterValueException(\"Unable to find physical network with id: \" + physicalNetworkId + \" and tag: \" + requiredOfferings.get(0).getTags())}s_logger.debug(\"Creating network for account \" + owner + \" from the network offering id=\" + requiredOfferings.get(0).getId() + \" as a part of createVlanIpRange process\")guestNetwork = _networkMgr.createGuestNetwork(requiredOfferings.get(0).getId(),owner.getAccountName() + \"-network\",owner.getAccountName() + \"-network\",null,null,null,false,null,owner,null,physicalNetwork,zoneId,ACLType.Account,null,null,null,null,true,null,null,null)if (guestNetwork == null) {s_logger.warn(\"Failed to create default Virtual network for the account \" + accountId + \"in zone \" + zoneId)throw new CloudRuntimeException(\"Failed to create a Guest Isolated Networks with SourceNAT \" + \"service enabled as a part of createVlanIpRange, for the account \" + accountId + \"in zone \" + zoneId)}}{throw new CloudRuntimeException(\"Required network offering id=\" + requiredOfferings.get(0).getId() + \" is not in \" + NetworkOffering.State.Enabled)}}boolean allocateSourceNat = falseList<IPAddressVO> sourceNat = _ipAddressDao.listByAssociatedNetwork(guestNetwork.getId(),true)if (sourceNat.isEmpty()) {allocateSourceNat = true}List<IPAddressVO> ips = _ipAddressDao.listByVlanId(vlanId)boolean isSourceNatAllocated = falsefor (IPAddressVO addr : ips){if (addr.getState() != State.Allocated) {if (!isSourceNatAllocated && allocateSourceNat) {addr.setSourceNat(true)isSourceNatAllocated = true}{addr.setSourceNat(false)}addr.setAssociatedWithNetworkId(guestNetwork.getId())addr.setVpcId(guestNetwork.getVpcId())addr.setAllocatedTime(new Date())addr.setAllocatedInDomainId(owner.getDomainId())addr.setAllocatedToAccountId(owner.getId())addr.setSystem(false)addr.setState(IpAddress.State.Allocating)markPublicIpAsAllocated(addr)}}return new Ternary<Boolean,List<NetworkOfferingVO>,Network>(createNetwork,requiredOfferings,guestNetwork)}})@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "ExceptionUtil.rethrow(e1,)@@@80@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "implementedNetwork != null@@@100@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "DeployDestination dest = new DeployDestination(zone,null,null,null)@@@89@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "final long zoneId@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "ExceptionUtil.rethrow(e1,)@@@81@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "e.addProxyObject(guestNetwork.getUuid(),\"networkId\")@@@107@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "long userId@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "final long accountId@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Network guestNetwork = pair.third()@@@86@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24->13 [style = bold, label=""];
21->22 [style = bold, label=""];
1->0 [style = dotted, label="true"];
15->33 [style = bold, label=""];
37->35 [style = bold, label=""];
39->5 [style = bold, label=""];
7->6 [style = bold, label=""];
21->22 [style = dotted, label="true"];
5->6 [style = solid, label="guestNetwork"];
19->32 [style = dotted, label="true"];
28->9 [style = solid, label="accountId"];
26->4 [style = dotted, label="true"];
3->9 [style = bold, label=""];
21->7 [style = dotted, label="true"];
38->22 [style = solid, label="zoneId"];
10->15 [style = bold, label=""];
21->14 [style = dotted, label="true"];
24->7 [style = solid, label="callerUser"];
29->33 [style = bold, label=""];
34->9 [style = solid, label="owner"];
36->16 [style = bold, label=""];
11->10 [style = dotted, label="true"];
36->3 [style = bold, label=""];
8->14 [style = solid, label="dest"];
25->20 [style = dotted, label="true"];
21->24 [style = dotted, label="true"];
19->32 [style = bold, label=""];
21->17 [style = dotted, label="true"];
12->31 [style = bold, label=""];
6->14 [style = bold, label=""];
26->40 [style = dotted, label="true"];
7->14 [style = solid, label="context"];
17->24 [style = bold, label=""];
20->29 [style = bold, label=""];
21->29 [style = dotted, label="true"];
14->25 [style = solid, label="implementedNetwork"];
11->37 [style = bold, label=""];
14->29 [style = solid, label="implementedNetwork"];
38->9 [style = solid, label="zoneId"];
21->25 [style = dotted, label="true"];
11->35 [style = dotted, label="true"];
22->8 [style = solid, label="zone"];
21->33 [style = bold, label=""];
35->15 [style = solid, label="e"];
34->36 [style = bold, label=""];
18->33 [style = bold, label=""];
26->30 [style = dotted, label="true"];
28->34 [style = solid, label="accountId"];
35->10 [style = bold, label=""];
5->21 [style = bold, label=""];
19->12 [style = dotted, label="true"];
16->3 [style = bold, label=""];
26->34 [style = bold, label=""];
11->15 [style = dotted, label="true"];
14->25 [style = bold, label=""];
21->8 [style = dotted, label="true"];
21->6 [style = dotted, label="true"];
29->18 [style = bold, label=""];
0->40 [style = dashed, label="0"];
23->21 [style = solid, label="createNetwork"];
13->7 [style = solid, label="journal"];
32->12 [style = bold, label=""];
25->29 [style = bold, label=""];
13->7 [style = bold, label=""];
22->8 [style = bold, label=""];
36->16 [style = dotted, label="true"];
26->28 [style = dotted, label="true"];
26->38 [style = dotted, label="true"];
17->7 [style = solid, label="callerAccount"];
5->20 [style = solid, label="guestNetwork"];
25->20 [style = bold, label=""];
40->36 [style = solid, label="guestNetworkFinal"];
27->23 [style = bold, label=""];
23->39 [style = bold, label=""];
8->17 [style = bold, label=""];
19->31 [style = dotted, label="true"];
40->16 [style = solid, label="guestNetworkFinal"];
11->37 [style = dotted, label="true"];
40->9 [style = solid, label="guestNetworkFinal"];
5->13 [style = solid, label="guestNetwork"];
29->18 [style = dotted, label="true"];
9->23 [style = bold, label=""];
2->0 [style = dotted, label="true"];
30->9 [style = solid, label="vlanId"];
19->27 [style = dotted, label="true"];
31->27 [style = bold, label=""];
21->13 [style = dotted, label="true"];
}
