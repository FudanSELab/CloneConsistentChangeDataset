digraph {
0 [style = filled, label = "dropTarget.addDropListener(new DropTargetListener(){@Override public void dragEnter(DropTargetEvent event){handleDragEvent(event)}@Override public void dragLeave(DropTargetEvent event){handleDragEvent(event)}@Override public void dragOperationChanged(DropTargetEvent event){handleDragEvent(event)}@Override public void dragOver(DropTargetEvent event){handleDragEvent(event)}@Override public void drop(DropTargetEvent event){handleDragEvent(event)if (event.detail == DND.DROP_MOVE) {moveNodes(event)}}@Override public void dropAccept(DropTargetEvent event){handleDragEvent(event)}private void handleDragEvent(DropTargetEvent event){event.detail = isDropSupported(event)? DND.DROP_MOVE: DND.DROP_NONEevent.feedback = DND.FEEDBACK_SELECT}private boolean isDropSupported(DropTargetEvent event){if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {Object curObjectif (event.item instanceof Item) {curObject = event.item.getData()}{curObject = null}@SuppressWarnings(\"unchecked\") Collection<DBNNode> nodesToDrop = (Collection<DBNNode>)event.dataif (curObject instanceof DBNNode) {if (!CommonUtils.isEmpty(nodesToDrop)) {for (DBNNode node : nodesToDrop){if (!((DBNNode)curObject).supportsDrop(node)) {return false}}return true}{return ((DBNNode)curObject).supportsDrop(null)}}if (curObject == null) {if (!CommonUtils.isEmpty(nodesToDrop)) {for (DBNNode node : nodesToDrop){if (!(node instanceof DBNDataSource)) {return false}}return true}{Widget widget = event.widgetif (widget instanceof DropTarget) {widget = ((DropTarget)widget).getControl()}return widget == viewer.getControl()}}}return false}private void moveNodes(DropTargetEvent event){if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {Object curObjectif (event.item instanceof Item) {curObject = event.item.getData()}{curObject = null}if (curObject instanceof DBNNode) {Collection<DBNNode> nodesToDrop = TreeNodeTransfer.getInstance().getObject()try {((DBNNode)curObject).dropNodes(nodesToDrop)}catch (DBException e) }if (curObject == null) {for (DBNNode node : TreeNodeTransfer.getInstance().getObject()){if (node instanceof DBNDataSource) {if (viewer.getInput() instanceof DatabaseNavigatorContent) {DBNNode rootNode = ((DatabaseNavigatorContent)viewer.getInput()).getRootNode()if (rootNode != null && rootNode.getOwnerProject() != null) {((DBNDataSource)node).moveToFolder(rootNode.getOwnerProject(),null)}}}if (node instanceof DBNLocalFolder) {((DBNLocalFolder)node).getFolder().setParent(null)}{continue}DBNModel.updateConfigAndRefreshDatabases(node)}}}}})@@@81@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final DragSource source = new DragSource(viewer.getControl(),operations)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final Viewer viewer@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "boolean enableDrag@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "DropTarget dropTarget = new DropTarget(viewer.getControl(),DND.DROP_MOVE)@@@79@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "addDragAndDropSupport['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "boolean enableDrag@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "source.addDragListener(new DragSourceAdapter(){@Override public void dragStart(DragSourceEvent event){selection = (IStructuredSelection)viewer.getSelection()}@Override public void dragSetData(DragSourceEvent event){if (!selection.isEmpty()) {List<DBTTask> tasks = new ArrayList<>()StringBuilder buf = new StringBuilder()for (Object nextSelected : selection.toArray()){if (draggableChecker != null && !draggableChecker.select(nextSelected)) {continue}DBTTask task = nullif (nextSelected instanceof DBTTask) {task = (DBTTask)nextSelected}if (nextSelected instanceof DBTTaskReference) {task = ((DBTTaskReference)nextSelected).getTask()}if (task == null) {continue}tasks.add(task)String taskName = task.getName()if (buf.length() > 0) {buf.append(\", \")}buf.append(taskName)}if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {event.data = new DatabaseTaskTransfer.Data(viewer.getControl(),tasks)}if (TextTransfer.getInstance().isSupportedType(event.dataType)) {event.data = buf.toString()}}{if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {event.data = new DatabaseTaskTransfer.Data(viewer.getControl(),Collections.emptyList())}if (TextTransfer.getInstance().isSupportedType(event.dataType)) {event.data = \"\"}}}})@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Viewer viewer@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "IFilter draggableChecker@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "addDragSourceSupport['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "addDragAndDropSupport['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "dropTarget.setTransfer(TreeNodeTransfer.getInstance())@@@80@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "source.addDragListener(new DragSourceListener(){@Override public void dragStart(DragSourceEvent event){selection = (IStructuredSelection)viewer.getSelection()}@Override public void dragSetData(DragSourceEvent event){if (!selection.isEmpty()) {List<DBNNode> nodes = new ArrayList<>()List<DBPNamedObject> objects = new ArrayList<>()String lineSeparator = CommonUtils.getLineSeparator()StringBuilder buf = new StringBuilder()for (Iterator<?> i = selection.iterator() i.hasNext() ){Object nextSelected = i.next()if (!(nextSelected instanceof DBNNode)) {continue}nodes.add((DBNNode)nextSelected)String nodeNameif (nextSelected instanceof DBNDatabaseNode && !(nextSelected instanceof DBNDataSource)) {DBSObject object = ((DBNDatabaseNode)nextSelected).getObject()if (object == null) {continue}nodeName = DBUtils.getObjectFullName(object,DBPEvaluationContext.UI)objects.add(object)}if (nextSelected instanceof DBNDataSource) {DBPDataSourceContainer object = ((DBNDataSource)nextSelected).getDataSourceContainer()nodeName = object.getName()objects.add(object)}{nodeName = ((DBNNode)nextSelected).getNodeTargetName()}if (buf.length() > 0) {buf.append(lineSeparator)}buf.append(nodeName)}if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {event.data = nodes}if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {event.data = objects}if (TextTransfer.getInstance().isSupportedType(event.dataType)) {event.data = buf.toString()}}{if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {event.data = Collections.emptyList()}if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {event.data = Collections.emptyList()}if (TextTransfer.getInstance().isSupportedType(event.dataType)) {event.data = \"\"}}}@Override public void dragFinished(DragSourceEvent event){}})@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "enableDrop@@@78@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "enableDrag@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Transfer(( types = new Transfer((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b3361@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "source.setTransfer(types)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "boolean enableDrop@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "final Viewer viewer@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
13->4 [style = solid, label="enableDrag"];
2->3 [style = dotted, label="true"];
4->7 [style = bold, label=""];
10->2 [style = bold, label=""];
8->5 [style = bold, label=""];
11->12 [style = dotted, label="true"];
4->7 [style = dotted, label="true"];
2->9 [style = dotted, label="true"];
4->10 [style = dotted, label="true"];
12->4 [style = solid, label="enableDrag"];
7->6 [style = bold, label=""];
16->8 [style = bold, label=""];
16->14 [style = dotted, label="true"];
13->19 [style = dashed, label="0"];
9->0 [style = bold, label=""];
16->13 [style = dotted, label="true"];
6->20 [style = bold, label=""];
16->15 [style = dotted, label="true"];
5->4 [style = bold, label=""];
4->2 [style = bold, label=""];
2->3 [style = bold, label=""];
6->10 [style = bold, label=""];
8->6 [style = solid, label="types"];
10->0 [style = solid, label="data"];
18->17 [style = dotted, label="true"];
19->20 [style = solid, label="draggableChecker"];
11->8 [style = bold, label=""];
11->1 [style = dotted, label="true"];
3->9 [style = bold, label=""];
14->2 [style = solid, label="enableDrop"];
18->19 [style = dotted, label="true"];
13->2 [style = solid, label="enableDrop"];
18->8 [style = bold, label=""];
2->0 [style = dotted, label="true"];
11->13 [style = dotted, label="true"];
4->6 [style = dotted, label="true"];
10->20 [style = dashed, label="0"];
5->7 [style = bold, label=""];
5->7 [style = solid, label="operations"];
}
