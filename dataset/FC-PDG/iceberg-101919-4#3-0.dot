digraph {
11 [style = filled, label = "table.newRowDelta().addDeletes(unpartitionedPosDeletes(table.spec())).addDeletes(unpartitionedEqDeletes).commit()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(\"Should have one associated delete file\",1,task.deletes().size())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "table.newRowDelta().addDeletes(FILE_A_POS_1).addDeletes(FILE_A_EQ_1).commit()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "table.newAppend().appendFile(FILE_A).commit()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "table.newRowDelta().addDeletes(UNPARTITIONED_POS_DELETES).addDeletes(UNPARTITIONED_EQ_DELETES).commit()@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "FileScanTask task = tasks.get(0)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(\"Should have the correct data file path\",FILE_A.path(),task.file().path())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(\"Should have expected delete file\",unpartitionedEqDeletes.path(),task.deletes().get(0).path())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "testPartitionedTableScanWithGlobalDeletes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "List<FileScanTask> tasks = Lists.newArrayList(table.newScan().planFiles().iterator())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "table.ops().commit(base,base.updatePartitionSpec(PartitionSpec.unpartitioned()))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "DeleteFile unpartitionedEqDeletes = unpartitionedEqDeletes(table.spec())@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "Assert.assertEquals(\"Should have no delete files to apply\",0,task.deletes().size())@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testPartitionedTableScanWithGlobalDeletes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testPartitionedTableWithOlderPartitionDeletes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(\"Should have one task\",1,tasks.size())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<FileScanTask> tasks = Lists.newArrayList(table.newScan().planFiles().iterator())@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "table.newAppend().appendFile(FILE_A).commit()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
6->3 [style = bold, label=""];
16->15 [style = bold, label=""];
7->1 [style = bold, label=""];
9->2 [style = bold, label=""];
9->17 [style = bold, label=""];
1->0 [style = bold, label=""];
8->7 [style = solid, label="base"];
13->11 [style = bold, label=""];
2->12 [style = bold, label=""];
8->7 [style = bold, label=""];
3->9 [style = bold, label=""];
2->12 [style = dashed, label="0"];
11->5 [style = bold, label=""];
5->6 [style = bold, label=""];
8->5 [style = bold, label=""];
9->17 [style = dashed, label="0"];
10->4 [style = bold, label=""];
4->8 [style = bold, label=""];
15->8 [style = bold, label=""];
0->5 [style = bold, label=""];
14->4 [style = bold, label=""];
}
