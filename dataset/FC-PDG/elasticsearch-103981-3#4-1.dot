digraph {
11 [style = filled, label = "assertThat(filterPath.matches(),is(false))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "String input = \"f*o.bar\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final String input = \"foo.bar\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "FilterPath(( filterPaths = FilterPath.compile(singleton(input))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testFilterPathWithSubField['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(filterPath.getSegment(),isEmptyString())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "filterPath = filterPath.getNext()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(filterPath.getSegment(),equalTo(\"foo\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(filterPath.getSegment(),is(emptyString()))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "filterPath = filterPath.getNext()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(filterPath.matchProperty(\"foooo\"),notNullValue())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertThat(filterPath.matchProperty(\"boo\"),nullValue())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertThat(filterPath.matchProperty(\"flo\"),notNullValue())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "filterPath = filterPath.getNext()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(filterPath.matchProperty(\"foo\"),notNullValue())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertNotNull(filterPath)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testWildcardInNameFilterPath['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertSame(filterPath,FilterPath.EMPTY)@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertNotNull(filterPath)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(filterPath.getSegment(),equalTo(\"bar\"))@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(filterPath.getSegment(),equalTo(\"f*o\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertThat(filterPath.matches(),is(true))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(filterPath.matches(),is(false))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(filterPath.matches(),is(false))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertNotNull(filterPath)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testFilterPathWithSubField['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertNotNull(filterPath)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(filterPath.getSegment(),equalTo(\"bar\"))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "FilterPath filterPath = filterPaths(0(@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(filterPaths,arrayWithSize(1))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertNotNull(filterPaths)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24->10 [style = bold, label=""];
14->16 [style = bold, label=""];
5->3 [style = bold, label=""];
2->20 [style = bold, label=""];
10->16 [style = solid, label="filterPaths"];
16->8 [style = bold, label=""];
9->24 [style = dashed, label="0"];
0->6 [style = bold, label=""];
25->30 [style = bold, label=""];
26->25 [style = bold, label=""];
20->28 [style = bold, label=""];
23->26 [style = bold, label=""];
1->18 [style = bold, label=""];
9->10 [style = bold, label=""];
18->2 [style = bold, label=""];
22->23 [style = bold, label=""];
4->7 [style = bold, label=""];
3->0 [style = bold, label=""];
2->21 [style = solid, label="filterPath"];
9->10 [style = solid, label="input"];
2->20 [style = solid, label="filterPath"];
6->1 [style = bold, label=""];
12->2 [style = bold, label=""];
0->2 [style = solid, label="filterPath"];
7->5 [style = bold, label=""];
24->10 [style = solid, label="input"];
10->13 [style = bold, label=""];
19->9 [style = bold, label=""];
15->9 [style = bold, label=""];
1->12 [style = bold, label=""];
16->8 [style = solid, label="filterPath"];
11->22 [style = bold, label=""];
11->17 [style = bold, label=""];
12->18 [style = dashed, label="0"];
30->0 [style = bold, label=""];
28->27 [style = bold, label=""];
10->13 [style = solid, label="filterPaths"];
29->24 [style = bold, label=""];
8->11 [style = bold, label=""];
27->21 [style = bold, label=""];
13->14 [style = bold, label=""];
17->4 [style = bold, label=""];
4->7 [style = solid, label="filterPath"];
10->14 [style = solid, label="filterPaths"];
0->6 [style = solid, label="filterPath"];
17->22 [style = dashed, label="0"];
}
