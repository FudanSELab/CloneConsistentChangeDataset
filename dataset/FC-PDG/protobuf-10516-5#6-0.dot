digraph {
0 [style = filled, label = "testByteIterable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testByteIterable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertEquals(CLASSNAME + \" iterable character count\",BYTES.length,j)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "testByteIterable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "boolean stillEqual = true@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(classUnderTest + \" iterable character count\",referenceBytes.length,j)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertWithMessage(\"%s must capture the right bytes as Bytes\",CLASSNAME).that(stillEqual).isTrue()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertTrue(classUnderTest + \" must capture the right bytes as Bytes\",stillEqual)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "stillEqual = (BYTES(j( == quantum)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(CLASSNAME + \" must capture the right bytes as Bytes\",stillEqual)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "int j = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "++j@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "stillEqual = (referenceBytes(j( == quantum)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertWithMessage(\"%s iterable character count\",CLASSNAME).that(BYTES).hasLength(j)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4->3 [style = bold, label=""];
11->12 [style = solid, label="stillEqual"];
5->9 [style = bold, label=""];
3->7 [style = dashed, label="0"];
2->6 [style = bold, label=""];
6->11 [style = dashed, label="0"];
9->7 [style = bold, label=""];
3->13 [style = dashed, label="0"];
4->12 [style = dashed, label="0"];
8->1 [style = bold, label=""];
12->13 [style = bold, label=""];
2->11 [style = solid, label="j"];
6->5 [style = bold, label=""];
11->5 [style = bold, label=""];
2->7 [style = solid, label="j"];
4->9 [style = dashed, label="0"];
2->13 [style = solid, label="j"];
5->6 [style = bold, label=""];
5->12 [style = bold, label=""];
0->1 [style = bold, label=""];
5->4 [style = bold, label=""];
6->4 [style = solid, label="stillEqual"];
1->2 [style = bold, label=""];
5->11 [style = bold, label=""];
10->1 [style = bold, label=""];
2->11 [style = bold, label=""];
2->3 [style = solid, label="j"];
2->6 [style = solid, label="j"];
}
