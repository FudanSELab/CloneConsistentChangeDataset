digraph {
26 [style = filled, label = "assertThat(inputSharing.getBuffer().capacity()).isEqualTo(2 * initialFreeSpace + preexistingBytes)@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "unwrappedBuffer.position(unwrappedBuffer.capacity() - individualRead)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "ByteBuffer unwrappedBuffer = inputSharing.getBuffer()@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@29@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "readAtLeast['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "ByteBuffer unwrappedBuffer = ByteBuffer.allocate(initialUnwrappedBufferSize)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "verify(mockChannel,times(3)).read(isA())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "unwrappedBuffer.position(7).limit(preexistingBytes + 7)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final ByteBufferSharingImpl inputSharingImpl = (ByteBufferSharingImpl)inputSharing@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final int amountToRead = 150@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final int individualRead = 60@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "int initialUnwrappedBufferSize = 100@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "readAtLeastUsingSmallAppBuffer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "verify(mockChannel,times(3)).read(isA())@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "final int preexistingBytes = 10@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "SocketChannel mockChannel = mock()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ByteBuffer wrappedBuffer = ByteBuffer.allocate(1000)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ByteBuffer data = sharedBuffer.getBuffer()@@@27@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ByteBuffer unwrappedBuffer = nioSslEngine.peerAppData@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "int initialFreeSpace = initialUnwrappedBufferSize - preexistingBytes@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "unwrappedBuffer.limit(unwrappedBuffer.position() + preexistingBytes)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * 3 + preexistingBytes)@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "readAtLeast['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "inputSharingImpl.setBufferForTestingOnly(unwrappedBuffer)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->24 [style = dashed, label="0"];
12->17 [style = solid, label="individualRead"];
0->9 [style = bold, label=""];
30->29 [style = solid, label="initialUnwrappedBufferSize"];
1->8 [style = bold, label=""];
4->3 [style = solid, label="preexistingBytes"];
0->6 [style = solid, label="wrappedBuffer"];
12->1 [style = solid, label="individualRead"];
11->1 [style = bold, label=""];
16->10 [style = bold, label=""];
5->23 [style = dashed, label="0"];
6->18 [style = bold, label=""];
12->3 [style = solid, label="individualRead"];
12->8 [style = solid, label="individualRead"];
9->30 [style = bold, label=""];
19->2 [style = bold, label=""];
4->15 [style = solid, label="preexistingBytes"];
4->1 [style = solid, label="preexistingBytes"];
4->0 [style = bold, label=""];
12->11 [style = solid, label="individualRead"];
20->10 [style = bold, label=""];
29->26 [style = bold, label=""];
29->26 [style = solid, label="initialFreeSpace"];
22->3 [style = bold, label=""];
2->23 [style = bold, label=""];
4->26 [style = solid, label="preexistingBytes"];
18->22 [style = bold, label=""];
30->28 [style = bold, label=""];
9->6 [style = solid, label="mockChannel"];
5->6 [style = bold, label=""];
13->3 [style = bold, label=""];
12->4 [style = bold, label=""];
8->2 [style = bold, label=""];
3->7 [style = bold, label=""];
24->31 [style = bold, label=""];
10->12 [style = bold, label=""];
10->6 [style = solid, label="amountToRead"];
4->29 [style = solid, label="preexistingBytes"];
30->28 [style = solid, label="initialUnwrappedBufferSize"];
6->13 [style = bold, label=""];
23->6 [style = bold, label=""];
11->31 [style = dashed, label="0"];
9->21 [style = bold, label=""];
9->14 [style = bold, label=""];
7->15 [style = bold, label=""];
2->6 [style = solid, label="testSSLEngine"];
25->10 [style = bold, label=""];
27->24 [style = bold, label=""];
19->5 [style = solid, label="testSSLEngine"];
28->27 [style = bold, label=""];
1->19 [style = bold, label=""];
28->31 [style = solid, label="unwrappedBuffer"];
14->11 [style = bold, label=""];
21->17 [style = bold, label=""];
31->8 [style = bold, label=""];
4->27 [style = solid, label="preexistingBytes"];
15->29 [style = bold, label=""];
4->11 [style = solid, label="preexistingBytes"];
2->5 [style = bold, label=""];
12->15 [style = solid, label="individualRead"];
17->11 [style = bold, label=""];
}
