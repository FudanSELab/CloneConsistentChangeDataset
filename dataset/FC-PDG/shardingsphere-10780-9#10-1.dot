digraph {
2 [style = filled, label = "assertBuild['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "AlgorithmProvidedDatabaseDiscoveryRuleConfiguration algorithmProvidedRuleConfig = mock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "DatabaseDiscoveryDataSourceRuleConfiguration ruleConfig = new DatabaseDiscoveryDataSourceRuleConfiguration(\"name\",Collections.singletonList(\"name\"),\"discoveryTypeName\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertBuild['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(builder.build(\"\",Collections.emptyMap(),mock(),algorithmProvidedRuleConfig,Collections.emptyList()),instanceOf())@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ReadwriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\"name\",\"pr_ds\",\"writeDataSourceName\",Collections.singletonList(\"name\"),\"loadBalancerName\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(Collections.singletonList(ruleConfig),).get(ruleConfig)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertBuild['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "ReadwriteSplittingRuleConfiguration ruleConfig = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "when(algorithmProvidedRuleConfig.getDataSources()).thenReturn(Collections.singletonList(ruleConfig))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(Collections.singletonList(algorithmProvidedRuleConfig),).get(algorithmProvidedRuleConfig)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertThat(builder.build(\"\",Collections.emptyMap(),mock(),ruleConfig,Collections.emptyList()),instanceOf())@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(Collections.singletonList(algorithmProvidedRuleConfig),).get(algorithmProvidedRuleConfig)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0->6 [style = dashed, label="0"];
12->11 [style = bold, label=""];
1->3 [style = bold, label=""];
3->6 [style = bold, label=""];
13->10 [style = solid, label="ruleConfig"];
5->6 [style = solid, label="algorithmProvidedRuleConfig"];
9->10 [style = bold, label=""];
5->4 [style = solid, label="algorithmProvidedRuleConfig"];
11->9 [style = bold, label=""];
13->9 [style = solid, label="ruleConfig"];
3->0 [style = bold, label=""];
1->12 [style = dashed, label="0"];
5->1 [style = bold, label=""];
6->4 [style = bold, label=""];
7->5 [style = bold, label=""];
13->12 [style = bold, label=""];
0->4 [style = bold, label=""];
12->11 [style = solid, label="dataSourceRuleConfig"];
5->0 [style = solid, label="algorithmProvidedRuleConfig"];
1->3 [style = solid, label="ruleConfig"];
0->9 [style = dashed, label="0"];
4->10 [style = dashed, label="0"];
3->11 [style = dashed, label="0"];
8->13 [style = bold, label=""];
2->5 [style = bold, label=""];
}
