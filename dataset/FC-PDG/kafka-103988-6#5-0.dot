digraph {
2 [style = filled, label = "state = new SubscriptionState(new LogContext(),OffsetResetStrategy.NONE)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertTrue(state.awaitingValidation(tp0))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(truncationOpt.isPresent())@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "testTruncationDetectionWithoutResetPolicy['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(state.awaitingValidation(tp0))@@@19@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "Optional<OffsetAndMetadata> divergentOffsetMetadataOpt = state.maybeCompleteValidation(tp0,initialPosition,new EpochEndOffset(initialOffsetEpoch,initialOffset + 5))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testMaybeCompleteValidation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "state.seekUnvalidated(tp0,initialPosition)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "SubscriptionState.FetchPosition initialPosition = new SubscriptionState.FetchPosition(initialOffset,Optional.of(initialOffsetEpoch),new Metadata.LeaderAndEpoch(Optional.of(broker1),Optional.of(currentEpoch)))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(Optional.empty(),divergentOffsetMetadataOpt)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "int divergentOffsetEpoch = 7@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(Optional.of(new OffsetAndMetadata(divergentOffset,Optional.of(divergentOffsetEpoch),\"\")),divergentOffsetMetadata)@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Optional<LogTruncation> truncationOpt = state.maybeCompleteValidation(tp0,initialPosition,new EpochEndOffset(divergentOffsetEpoch,divergentOffset))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "LogTruncation truncation = truncationOpt.get()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "state.assignFromUser(Collections.singleton(tp0))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "long initialOffset = 10L@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testTruncationDetectionWithoutResetPolicy['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "assertEquals(Optional.of(new OffsetAndMetadata(divergentOffset,Optional.of(divergentOffsetEpoch),\"\")),truncation.divergentOffsetOpt)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertTrue(state.awaitingValidation(tp0))@@@16@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int currentEpoch = 10@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertFalse(state.awaitingValidation(tp0))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Node broker1 = new Node(1,\"localhost\",9092)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(initialPosition,state.position(tp0))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(initialPosition,truncation.fetchPosition)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "int initialOffsetEpoch = 5@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "long divergentOffset = 5L@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Optional<OffsetAndMetadata> divergentOffsetMetadata = state.maybeCompleteValidation(tp0,initialPosition,new EpochEndOffset(divergentOffsetEpoch,divergentOffset))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8->7 [style = solid, label="divergentOffsetMetadata"];
23->25 [style = bold, label=""];
20->17 [style = bold, label=""];
9->18 [style = solid, label="initialPosition"];
1->8 [style = bold, label=""];
11->21 [style = solid, label="divergentOffsetEpoch"];
24->0 [style = bold, label=""];
11->8 [style = solid, label="divergentOffsetEpoch"];
0->2 [style = bold, label=""];
8->20 [style = dashed, label="0"];
1->20 [style = bold, label=""];
26->22 [style = solid, label="divergentOffsetMetadataOpt"];
10->26 [style = solid, label="initialOffsetEpoch"];
7->4 [style = bold, label=""];
11->20 [style = solid, label="divergentOffsetEpoch"];
1->26 [style = bold, label=""];
11->9 [style = bold, label=""];
13->11 [style = bold, label=""];
22->23 [style = bold, label=""];
17->19 [style = bold, label=""];
21->18 [style = bold, label=""];
13->8 [style = solid, label="divergentOffset"];
3->0 [style = bold, label=""];
8->7 [style = bold, label=""];
9->6 [style = bold, label=""];
26->22 [style = bold, label=""];
9->6 [style = solid, label="initialPosition"];
9->20 [style = solid, label="initialPosition"];
6->1 [style = bold, label=""];
12->9 [style = solid, label="initialOffset"];
0->14 [style = bold, label=""];
12->10 [style = bold, label=""];
12->26 [style = solid, label="initialOffset"];
10->13 [style = bold, label=""];
5->12 [style = bold, label=""];
13->21 [style = solid, label="divergentOffset"];
10->9 [style = solid, label="initialOffsetEpoch"];
15->0 [style = bold, label=""];
9->26 [style = solid, label="initialPosition"];
2->14 [style = bold, label=""];
9->8 [style = solid, label="initialPosition"];
9->25 [style = solid, label="initialPosition"];
13->20 [style = solid, label="divergentOffset"];
0->9 [style = solid, label="broker1"];
19->21 [style = bold, label=""];
10->9 [style = bold, label=""];
11->7 [style = solid, label="divergentOffsetEpoch"];
13->7 [style = solid, label="divergentOffset"];
4->23 [style = dashed, label="0"];
5->9 [style = solid, label="currentEpoch"];
14->5 [style = bold, label=""];
8->26 [style = dashed, label="0"];
18->16 [style = bold, label=""];
}
