digraph {
6 [style = filled, label = "addJobShouldSucceedEvenAlreadyAdded['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(result,succeededSilently())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(j.jenkins.getView(\"aView\").contains(project),equalTo(false))@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ,View.READ,Item.READ,View.CONFIGURE).everywhere().toAuthenticated())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "final CLICommandInvoker.Result result = command.invokeWithArgs(\"aView\",\"aProject\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "((DirectlyModifiableView)j.jenkins.getView(\"aView\")).add(project)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(j.jenkins.getView(\"aView\").getAllItems().size(),equalTo(1))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "addJobShouldSucceedEvenAlreadyAdded['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "j.jenkins.addView(new ListView(\"aView\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(result,succeededSilently())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "removeJobManyShouldSucceedEvenAJobIsSpecifiedTwice['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(j.jenkins.getView(\"aView\").getAllItems().size(),equalTo(0))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,View.READ,Item.READ,View.CONFIGURE).invokeWithArgs(\"aView\",\"aProject\")@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertThat(j.jenkins.getView(\"aView\").contains(project),equalTo(true))@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertThat(j.jenkins.getView(\"aView\").getAllItems().size(),equalTo(1))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "FreeStyleProject project = j.createFreeStyleProject(\"aProject\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(j.jenkins.getView(\"aView\").contains(project),equalTo(true))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "FreeStyleProject project = j.createFreeStyleProject(\"aProject\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,View.READ,Item.READ,View.CONFIGURE).invokeWithArgs(\"aView\",\"aProject\",\"aProject\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->4 [style = bold, label=""];
9->16 [style = dashed, label="0"];
8->4 [style = solid, label="project"];
4->17 [style = bold, label=""];
15->7 [style = bold, label=""];
5->9 [style = bold, label=""];
5->3 [style = dashed, label="0"];
2->3 [style = bold, label=""];
18->15 [style = bold, label=""];
8->0 [style = solid, label="project"];
8->13 [style = solid, label="project"];
7->0 [style = bold, label=""];
4->2 [style = bold, label=""];
3->16 [style = bold, label=""];
4->17 [style = solid, label="result"];
8->7 [style = bold, label=""];
7->14 [style = bold, label=""];
3->5 [style = bold, label=""];
10->5 [style = solid, label="result"];
10->5 [style = bold, label=""];
14->0 [style = bold, label=""];
11->10 [style = bold, label=""];
12->8 [style = bold, label=""];
0->1 [style = bold, label=""];
7->1 [style = solid, label="project"];
7->16 [style = solid, label="project"];
6->8 [style = bold, label=""];
17->3 [style = bold, label=""];
2->11 [style = dashed, label="0"];
7->14 [style = solid, label="project"];
4->11 [style = bold, label=""];
8->9 [style = solid, label="project"];
2->3 [style = solid, label="result"];
2->4 [style = dashed, label="0"];
9->13 [style = bold, label=""];
}
