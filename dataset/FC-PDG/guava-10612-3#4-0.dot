digraph {
3 [style = filled, label = "Set<Integer> nodeSubset = ImmutableSet.of(N1,N2,N4)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "directedGraph.putEdgeValue(N2,N1,E21)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expectedSubgraph.putEdgeValue(N4,N4,E44)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "directedGraph.putEdgeValue(N1,N2,E12)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "inducedSubgraph_valueGraph['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "MutableValueGraph<Integer,String> directedGraph = ValueGraphBuilder.directed().allowsSelfLoops(true).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "MutableValueGraph<Integer,String> expectedSubgraph = ValueGraphBuilder.directed().allowsSelfLoops(true).build()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "directedGraph.putEdgeValue(N1,N1,E11)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(Graphs.equivalent(inducedSubgraph(directedGraph,nodeSubset),expectedSubgraph)).isTrue()@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "directedGraph.putEdgeValue(N1,N3,E13)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expectedSubgraph.putEdgeValue(N1,N2,E12)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "inducedSubgraph_valueGraph['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "directedGraph.putEdgeValue(N4,N4,E44)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "expectedSubgraph.putEdgeValue(N2,N1,E21)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(inducedSubgraph(directedGraph,nodeSubset)).isEqualTo(expectedSubgraph)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "directedGraph.putEdgeValue(5,6,\"5-6\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "return directedGraph@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "buildDirectedValueGraph['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
14->3 [style = bold, label=""];
16->15 [style = bold, label=""];
1->4 [style = bold, label=""];
15->10 [style = bold, label=""];
17->1 [style = bold, label=""];
10->17 [style = bold, label=""];
12->7 [style = bold, label=""];
11->13 [style = solid, label="expectedSubgraph"];
3->10 [style = bold, label=""];
11->5 [style = bold, label=""];
12->4 [style = dashed, label="0"];
5->6 [style = bold, label=""];
7->2 [style = bold, label=""];
6->8 [style = bold, label=""];
9->13 [style = dashed, label="0"];
8->9 [style = bold, label=""];
4->12 [style = bold, label=""];
15->4 [style = solid, label="directedGraph"];
10->1 [style = bold, label=""];
2->11 [style = bold, label=""];
8->13 [style = bold, label=""];
}
