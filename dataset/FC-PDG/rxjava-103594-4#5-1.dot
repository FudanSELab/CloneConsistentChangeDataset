digraph {
10 [style = filled, label = "backpressureWithTakeBefore['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "to.assertValues(0,1,2,3,4,5,6)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Flowable<Integer> flowable = Flowable.fromIterable(new Iterable<Integer>(){@Override public Iterator<Integer> iterator(){return new Iterator<Integer>(){@Override public void remove(){}@Override public Integer next(){return generated.getAndIncrement()}@Override public boolean hasNext(){return true}}}})@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TestObserver<Integer> to = new TestObserver<Integer>()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testSubscriber.awaitDone(5,TimeUnit.SECONDS)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "backpressureWithTakeBefore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "TestSubscriber<Integer> testSubscriber = new TestSubscriber<>()@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Observable<Integer> o = Observable.fromIterable(new Iterable<Integer>(){@Override public Iterator<Integer> iterator(){return new Iterator<Integer>(){@Override public void remove(){}@Override public Integer next(){return generated.getAndIncrement()}@Override public boolean hasNext(){return true}}}})@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "o.take(7).observeOn(Schedulers.newThread()).subscribe(to)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "backpressureWithTakeBefore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testSubscriber.assertValues(0,1,2,3,4,5,6)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final AtomicInteger generated = new AtomicInteger()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(7,generated.get())@@@24@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "flowable.take(7).observeOn(Schedulers.newThread()).subscribe(testSubscriber)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "TestSubscriber<Integer> testSubscriber = new TestSubscriber<Integer>()@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "to.awaitDone(5,TimeUnit.SECONDS)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
1->4 [style = bold, label=""];
4->14 [style = bold, label=""];
15->13 [style = bold, label=""];
5->14 [style = dashed, label="0"];
5->9 [style = bold, label=""];
6->9 [style = dashed, label="0"];
12->15 [style = bold, label=""];
13->11 [style = bold, label=""];
6->12 [style = dashed, label="0"];
2->0 [style = bold, label=""];
11->0 [style = bold, label=""];
12->15 [style = solid, label="to"];
5->6 [style = bold, label=""];
3->7 [style = bold, label=""];
7->2 [style = bold, label=""];
14->12 [style = bold, label=""];
7->13 [style = dashed, label="0"];
10->4 [style = bold, label=""];
3->15 [style = dashed, label="0"];
9->3 [style = bold, label=""];
2->11 [style = dashed, label="0"];
6->3 [style = solid, label="testSubscriber"];
9->3 [style = solid, label="testSubscriber"];
8->4 [style = bold, label=""];
4->5 [style = bold, label=""];
}
