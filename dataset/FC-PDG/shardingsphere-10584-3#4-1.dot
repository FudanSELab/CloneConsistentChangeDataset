digraph {
3 [style = filled, label = "ClassBasedShardingAlgorithm shardingAlgorithm = getComplexKeysShardingAlgorithm()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(actual.size(),is(4))@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "List<String> availableTargetNames = Arrays.asList(\"t_order_0\",\"t_order_1\",\"t_order_2\",\"t_order_3\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Collection<String> actual = shardingAlgorithm.doSharding(availableTargetNames,new HintShardingValue<>(\"t_order\",\"order_id\",null))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "List<String> availableTargetNames = Lists.newArrayList(\"t_order_0\",\"t_order_1\",\"t_order_2\",\"t_order_3\")@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(shardingAlgorithm.getStrategy(),is(ClassBasedShardingAlgorithmStrategyType.COMPLEX))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertComplexKeysDoSharding['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Collection<String> actual = shardingAlgorithm.doSharding(availableTargetNames,new ComplexKeysShardingValue<>(\"t_order\",null,null))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertHintDoSharding['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertComplexKeysDoSharding['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(shardingAlgorithm.getStrategy(),is(ClassBasedShardingAlgorithmStrategyType.HINT))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ClassBasedShardingAlgorithm shardingAlgorithm = getHintShardingAlgorithm()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->1 [style = bold, label=""];
4->3 [style = bold, label=""];
5->1 [style = bold, label=""];
5->11 [style = bold, label=""];
11->0 [style = bold, label=""];
3->10 [style = dashed, label="0"];
1->0 [style = bold, label=""];
9->10 [style = bold, label=""];
3->2 [style = bold, label=""];
10->8 [style = bold, label=""];
8->5 [style = bold, label=""];
5->6 [style = dashed, label="0"];
2->8 [style = dashed, label="0"];
1->11 [style = dashed, label="0"];
2->6 [style = bold, label=""];
5->1 [style = solid, label="availableTargetNames"];
7->3 [style = bold, label=""];
5->11 [style = solid, label="availableTargetNames"];
2->5 [style = bold, label=""];
6->1 [style = solid, label="availableTargetNames"];
}
