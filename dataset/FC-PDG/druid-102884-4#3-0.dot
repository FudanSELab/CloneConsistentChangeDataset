digraph {
7 [style = filled, label = "iterator.hasNext()@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "InputRowSchema someSchema = new InputRowSchema(new TimestampSpec(\"time\",\"auto\",null),new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\",\"dim2\"))),ImmutableList.of(\"count\"))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testCompressedReader['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "expectListObjects(PREFIXES.get(0),ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(0)))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "expectGetObjectCompressed(EXPECTED_COMPRESSED_URIS.get(0))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "addExpectedGetObjectMock(EXPECTED_URIS.get(0))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "InputRow nextRow = iterator.next()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "expectListObjects(EXPECTED_COMPRESSED_URIS.get(1),ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(1)))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "addExpectedGetCompressedObjectMock(EXPECTED_COMPRESSED_URIS.get(1))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "EasyMock.replay(S3_CLIENT)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "EasyMock.verify(S3_CLIENT)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "testCompressedReader['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testReader['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "addExpectedGetCompressedObjectMock(EXPECTED_COMPRESSED_URIS.get(0))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "addExpectedGetObjectMock(EXPECTED_URIS.get(1))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "EasyMock.reset(S3_CLIENT)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "addExpectedPrefixObjects(PREFIXES.get(0),ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(0)))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "S3InputSource inputSource = new S3InputSource(SERVICE,null,ImmutableList.of(PREFIXES.get(0),EXPECTED_URIS.get(1)),null)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "expectGetObjectCompressed(EXPECTED_COMPRESSED_URIS.get(1))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(NOW,nextRow.getTimestamp())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "CloseableIterator<InputRow> iterator = reader.read()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "addExpectedNonPrefixObjectsWithNoListPermission()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "addExpectedPrefixObjects(PREFIXES.get(0),ImmutableList.of(EXPECTED_URIS.get(0)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(\"hello\",nextRow.getDimension(\"dim1\").get(0))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(\"world\",nextRow.getDimension(\"dim2\").get(0))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "S3InputSource inputSource = new S3InputSource(SERVICE,null,ImmutableList.of(PREFIXES.get(0),EXPECTED_COMPRESSED_URIS.get(1)),null)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "InputSourceReader reader = inputSource.reader(someSchema,new CsvInputFormat(ImmutableList.of(\"time\",\"dim1\",\"dim2\"),\"|\",false,null,0),temporaryFolder.newFolder())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
4->9 [style = bold, label=""];
22->25 [style = bold, label=""];
1->4 [style = bold, label=""];
9->16 [style = dashed, label="0"];
20->17 [style = bold, label=""];
4->24 [style = bold, label=""];
9->24 [style = dashed, label="0"];
6->20 [style = dashed, label="0"];
12->10 [style = solid, label="someSchema"];
11->26 [style = dashed, label="0"];
23->4 [style = bold, label=""];
13->17 [style = dashed, label="0"];
11->12 [style = bold, label=""];
7->0 [style = bold, label=""];
3->15 [style = bold, label=""];
25->14 [style = bold, label=""];
13->25 [style = dashed, label="0"];
7->0 [style = dotted, label="true"];
7->15 [style = dotted, label="true"];
6->22 [style = dashed, label="0"];
8->7 [style = bold, label=""];
24->5 [style = bold, label=""];
14->26 [style = bold, label=""];
26->12 [style = bold, label=""];
12->10 [style = bold, label=""];
21->20 [style = bold, label=""];
5->6 [style = bold, label=""];
17->14 [style = bold, label=""];
7->3 [style = dotted, label="true"];
16->21 [style = bold, label=""];
6->13 [style = bold, label=""];
9->5 [style = bold, label=""];
7->18 [style = bold, label=""];
10->2 [style = bold, label=""];
19->4 [style = bold, label=""];
2->7 [style = bold, label=""];
7->8 [style = dotted, label="true"];
5->22 [style = bold, label=""];
14->11 [style = bold, label=""];
13->14 [style = bold, label=""];
15->8 [style = bold, label=""];
4->16 [style = bold, label=""];
}
