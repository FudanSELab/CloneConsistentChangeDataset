digraph {
6 [style = filled, label = "ByteString data = raw.toByteString()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "UnknownFieldSet.Field field = unknownFields.getField(UNKNOWN_TYPE_ID)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(\"bar\",field.getLengthDelimitedList().get(0).toStringUtf8())@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(messageSet.getExtension(TestMessageSetExtension2.messageSetExtension).getStr()).isEqualTo(\"foo\")@@@11@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(1,field.getLengthDelimitedList().size())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(\"foo\",messageSet.getExtension(TestMessageSetExtension2.messageSetExtension).getStr())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(1,unknownFields.asMap().size())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "ExtensionRegistry extensionRegistry = ExtensionRegistry.newInstance()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testParseMessageSetWithFlag['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(messageSet.getExtension(TestMessageSetExtension1.messageSetExtension).getI()).isEqualTo(123)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertTrue(unknownFields.hasField(UNKNOWN_TYPE_ID))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "ExtensionRegistryLite extensionRegistry = ExtensionRegistryLite.newInstance()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "extensionRegistry.add(TestMessageSetExtension2.messageSetExtension)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ExtensionRegistryLite.setEagerlyParseMessageSets(eagerParsing)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(123,messageSet.getExtension(TestMessageSetExtension1.messageSetExtension).getI())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TestMessageSet messageSet = TestMessageSet.parseFrom(data,extensionRegistry)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "extensionRegistry.add(TestMessageSetExtension1.messageSetExtension)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "UnknownFieldSet unknownFields = messageSet.getUnknownFields()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testParseMessageSetWithFlag['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "boolean eagerParsing@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testParseMessageSetWithFlag['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "RawMessageSet raw = RawMessageSet.newBuilder().addItem(RawMessageSet.Item.newBuilder().setTypeId(TYPE_ID_1).setMessage(TestMessageSetExtension1.newBuilder().setI(123).build().toByteString()).build()).addItem(RawMessageSet.Item.newBuilder().setTypeId(TYPE_ID_2).setMessage(TestMessageSetExtension2.newBuilder().setStr(\"foo\").build().toByteString()).build()).addItem(RawMessageSet.Item.newBuilder().setTypeId(UNKNOWN_TYPE_ID).setMessage(ByteString.copyFromUtf8(\"bar\")).build()).build()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12->0 [style = bold, label=""];
3->10 [style = bold, label=""];
14->18 [style = bold, label=""];
10->9 [style = bold, label=""];
17->7 [style = solid, label="extensionRegistry"];
19->20 [style = bold, label=""];
20->15 [style = bold, label=""];
0->8 [style = bold, label=""];
17->3 [style = bold, label=""];
21->5 [style = dotted, label="true"];
8->3 [style = bold, label=""];
4->2 [style = bold, label=""];
12->5 [style = dotted, label="true"];
9->6 [style = bold, label=""];
7->13 [style = bold, label=""];
13->11 [style = bold, label=""];
18->19 [style = bold, label=""];
7->4 [style = bold, label=""];
1->5 [style = dotted, label="true"];
5->0 [style = solid, label="eagerParsing"];
15->16 [style = bold, label=""];
0->17 [style = bold, label=""];
8->7 [style = solid, label="extensionRegistry"];
6->7 [style = solid, label="data"];
4->13 [style = dashed, label="0"];
2->14 [style = bold, label=""];
2->11 [style = dashed, label="0"];
6->7 [style = bold, label=""];
21->0 [style = bold, label=""];
8->17 [style = dashed, label="0"];
1->0 [style = bold, label=""];
}
