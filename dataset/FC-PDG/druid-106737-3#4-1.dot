digraph {
9 [style = filled, label = "QueryRunner customRunner = getCustomRunner()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TimeBoundaryQuery timeBoundaryQuery = Druids.newTimeBoundaryQueryBuilder().dataSource(\"testing\").filters(\"quality\",\"automotive\").build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testFilteredTimeBoundaryQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "TimeBoundaryResultValue val = results.iterator().next().getValue()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testFilteredTimeBoundaryQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(DateTimes.of(\"2011-01-13T00:00:00.000Z\"),minTime)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(timeBoundaryQuery.hasFilters())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "TimeBoundaryQuery timeBoundaryQuery = Druids.newTimeBoundaryQueryBuilder().dataSource(\"testing\").filters(\"quality\",\"foobar\").build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertTrue(Iterables.size(results) == 0)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testFilteredTimeBoundaryQueryNoMatches['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertTrue(Iterables.size(results) > 0)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "List<Result<TimeBoundaryResultValue>> results = customRunner.run(QueryPlus.wrap(timeBoundaryQuery)).toList()@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "List<Result<TimeBoundaryResultValue>> results = customRunner.run(QueryPlus.wrap(timeBoundaryQuery),context).toList()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "HashMap<String,Object> context = new HashMap<String,Object>()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(DateTimes.of(\"2011-01-16T00:00:00.000Z\"),maxTime)@@@13@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(DateTimes.of(\"2011-01-16T00:00:00.000Z\"),maxTime)@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "DateTime maxTime = val.getMaxTime()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "DateTime minTime = val.getMinTime()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->17 [style = bold, label=""];
5->8 [style = bold, label=""];
8->10 [style = bold, label=""];
6->5 [style = solid, label="results"];
15->2 [style = bold, label=""];
9->0 [style = bold, label=""];
12->5 [style = bold, label=""];
3->1 [style = bold, label=""];
4->6 [style = bold, label=""];
6->17 [style = solid, label="results"];
0->2 [style = bold, label=""];
0->15 [style = dashed, label="0"];
10->3 [style = bold, label=""];
3->7 [style = solid, label="maxTime"];
11->9 [style = bold, label=""];
2->4 [style = bold, label=""];
1->7 [style = bold, label=""];
10->1 [style = solid, label="maxTime"];
2->13 [style = bold, label=""];
13->12 [style = solid, label="results"];
10->1 [style = solid, label="minTime"];
6->5 [style = bold, label=""];
8->3 [style = solid, label="minTime"];
13->12 [style = bold, label=""];
5->17 [style = dashed, label="0"];
9->15 [style = bold, label=""];
14->9 [style = bold, label=""];
16->9 [style = bold, label=""];
}
