digraph {
6 [style = filled, label = "StreamGraph graph = env.getStreamGraph()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "keyedResult2.addSink(new DiscardingSink<Integer>())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(KeyGroupRangeAssignment.DEFAULT_MAX_PARALLELISM,keyedResult1Node.getMaxParallelism())@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "StreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "keyedResult4.addSink(new DiscardingSink<Integer>())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int maxParallelism = 21@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "DataStream<Integer> source = env.fromElements(1,2,3)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "DataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer,Integer>(){@Override public Integer getKey(Integer value){return value}}).map(new NoOpIntMap())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testMaxParallelismForwarding['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(keyedResult2MaxParallelism,keyedResult2Node.getMaxParallelism())@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "StreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testAutoMaxParallelism['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(mapParallelism,keyedResult2Node.getMaxParallelism())@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "StreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "int keyedResult2MaxParallelism = 17@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "DataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer,Integer>(){@Override public Integer getKey(Integer value){return value}}).map(new NoOpIntMap())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "DataStream<Integer> keyedResult4 = keyedResult3.keyBy(new KeySelector<Integer,Integer>(){@Override public Integer getKey(Integer value){return value}}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "env.setParallelism(globalParallelism)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "int mapParallelism = 17@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "int globalMaxParallelism = 42@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "DataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer,Integer>(){@Override public Integer getKey(Integer value){return value}}).map(new NoOpIntMap()).setMaxParallelism(keyedResult2MaxParallelism)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "StreamGraph graph = env.getStreamGraph()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "DataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer,Integer>(){@Override public Integer getKey(Integer value){return value}}).map(new NoOpIntMap()).setParallelism(mapParallelism)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(globalParallelism,keyedResult1Node.getMaxParallelism())@@@43@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "testAutoMaxParallelism['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertEquals(maxParallelism,keyedResult3Node.getMaxParallelism())@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(globalMaxParallelism,keyedResult1Node.getMaxParallelism())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "StreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(maxParallelism,keyedResult4Node.getMaxParallelism())@@@46@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "StreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "env.getConfig().setMaxParallelism(globalMaxParallelism)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "StreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(KeyGroupRangeAssignment.DEFAULT_MAX_PARALLELISM,keyedResult2Node.getMaxParallelism())@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "int globalParallelism = 42@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "DataStream<Integer> keyedResult3 = keyedResult2.keyBy(new KeySelector<Integer,Integer>(){@Override public Integer getKey(Integer value){return value}}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28->29 [style = bold, label=""];
1->4 [style = bold, label=""];
32->24 [style = solid, label="keyedResult2MaxParallelism"];
16->18 [style = bold, label=""];
8->15 [style = bold, label=""];
32->28 [style = solid, label="keyedResult2MaxParallelism"];
18->23 [style = bold, label=""];
7->10 [style = bold, label=""];
8->14 [style = solid, label="maxParallelism"];
2->6 [style = bold, label=""];
31->0 [style = bold, label=""];
27->30 [style = bold, label=""];
18->11 [style = bold, label=""];
10->5 [style = solid, label="mapParallelism"];
30->32 [style = bold, label=""];
11->23 [style = dashed, label="0"];
7->19 [style = solid, label="globalParallelism"];
3->22 [style = dashed, label="0"];
15->19 [style = bold, label=""];
32->26 [style = bold, label=""];
13->16 [style = bold, label=""];
12->7 [style = bold, label=""];
19->0 [style = bold, label=""];
20->5 [style = bold, label=""];
35->25 [style = bold, label=""];
25->24 [style = bold, label=""];
10->4 [style = solid, label="mapParallelism"];
5->2 [style = bold, label=""];
10->3 [style = solid, label="mapParallelism"];
29->33 [style = bold, label=""];
23->22 [style = bold, label=""];
10->8 [style = bold, label=""];
8->20 [style = solid, label="maxParallelism"];
10->32 [style = dashed, label="0"];
11->3 [style = bold, label=""];
17->14 [style = bold, label=""];
15->31 [style = bold, label=""];
0->1 [style = bold, label=""];
8->17 [style = solid, label="maxParallelism"];
7->30 [style = dashed, label="0"];
26->15 [style = bold, label=""];
4->20 [style = bold, label=""];
22->17 [style = bold, label=""];
21->7 [style = bold, label=""];
3->17 [style = bold, label=""];
34->35 [style = bold, label=""];
30->25 [style = solid, label="globalMaxParallelism"];
6->9 [style = bold, label=""];
7->11 [style = solid, label="globalParallelism"];
30->15 [style = solid, label="globalMaxParallelism"];
33->34 [style = bold, label=""];
0->28 [style = bold, label=""];
9->13 [style = bold, label=""];
19->15 [style = dashed, label="0"];
}
