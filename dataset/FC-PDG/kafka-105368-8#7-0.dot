digraph {
2 [style = filled, label = "supportedTypes.put(\"opt_int32\",null)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(64.,(double)transformedMap.get(\"A#B#float64\"),0.)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testOptionalFieldMap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "supportedTypes.put(\"int64\",(long)64)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "supportedTypes.put(\"int8\",(byte)8)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertNull(transformed.valueSchema())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals((short)16,transformedMap.get(\"A#B#int16\"))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(true,transformedMap.get(\"A#B#boolean\"))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertArrayEquals(\"bytes\".getBytes(),(byte(()transformedMap.get(\"A#B#bytes\"))@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertEquals(\"stringy\",transformedMap.get(\"A#B#string\"))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertNull(transformedMap.get(\"B.opt_int32\"))@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testOptionalFieldMap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "supportedTypes.put(\"string\",\"stringy\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "supportedTypes.put(\"float32\",32.f)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "SourceRecord transformed = xformValue.apply(new SourceRecord(null,null,\"topic\",0,null,oneLevelNestedMap))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testNestedMapWithDelimiter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "SourceRecord transformed = xformValue.apply(new SourceRecord(null,null,\"topic\",0,null,twoLevelNestedMap))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(9,transformedMap.size())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertNull(transformed.valueSchema())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "supportedTypes.put(\"bytes\",\"bytes\".getBytes())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Map<String,Object> supportedTypes = new HashMap<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals((byte)8,transformedMap.get(\"A#B#int8\"))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "supportedTypes.put(\"int32\",32)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Map<String,Object> oneLevelNestedMap = Collections.singletonMap(\"B\",(Object)supportedTypes)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertTrue(transformed.value() instanceof Map)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "supportedTypes.put(\"float64\",64.)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "supportedTypes.put(\"int16\",(short)16)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "@SuppressWarnings(\"unchecked\") Map<String,Object> transformedMap = (Map<String,Object>)transformed.value()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertTrue(transformed.value() instanceof Map)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals((long)64,transformedMap.get(\"A#B#int64\"))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Map<String,Object> oneLevelNestedMap = Collections.singletonMap(\"B\",supportedTypes)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertEquals(32.f,(float)transformedMap.get(\"A#B#float32\"),0.f)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "xformValue.configure(Collections.singletonMap(\"delimiter\",\"#\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "xformValue.configure(Collections.emptyMap())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Map<String,Object> twoLevelNestedMap = Collections.singletonMap(\"A\",(Object)oneLevelNestedMap)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "@SuppressWarnings(\"unchecked\") Map<String,Object> transformedMap = (Map<String,Object>)transformed.value()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "supportedTypes.put(\"boolean\",true)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(32,transformedMap.get(\"A#B#int32\"))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Map<String,Object> oneLevelNestedMap = Collections.singletonMap(\"B\",(Object)supportedTypes)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
8->19 [style = dashed, label="0"];
31->37 [style = bold, label=""];
27->18 [style = bold, label=""];
30->24 [style = bold, label=""];
20->17 [style = bold, label=""];
5->9 [style = bold, label=""];
33->15 [style = bold, label=""];
3->33 [style = dashed, label="0"];
27->18 [style = solid, label="oneLevelNestedMap"];
37->20 [style = bold, label=""];
38->23 [style = bold, label=""];
7->0 [style = bold, label=""];
9->7 [style = bold, label=""];
2->10 [style = bold, label=""];
2->4 [style = bold, label=""];
28->16 [style = bold, label=""];
18->28 [style = bold, label=""];
15->22 [style = bold, label=""];
8->1 [style = bold, label=""];
24->33 [style = bold, label=""];
19->1 [style = bold, label=""];
13->19 [style = bold, label=""];
1->10 [style = solid, label="supportedTypes"];
21->29 [style = bold, label=""];
10->5 [style = bold, label=""];
36->27 [style = bold, label=""];
2->14 [style = dashed, label="0"];
18->28 [style = solid, label="twoLevelNestedMap"];
22->12 [style = bold, label=""];
29->32 [style = bold, label=""];
12->25 [style = bold, label=""];
16->30 [style = bold, label=""];
4->5 [style = solid, label="oneLevelNestedMap"];
6->8 [style = bold, label=""];
14->31 [style = bold, label=""];
25->26 [style = bold, label=""];
26->35 [style = bold, label=""];
1->4 [style = solid, label="supportedTypes"];
32->36 [style = bold, label=""];
11->8 [style = bold, label=""];
1->14 [style = bold, label=""];
1->2 [style = bold, label=""];
34->38 [style = bold, label=""];
10->5 [style = solid, label="oneLevelNestedMap"];
35->34 [style = bold, label=""];
4->10 [style = dashed, label="0"];
1->27 [style = solid, label="supportedTypes"];
4->5 [style = bold, label=""];
17->21 [style = bold, label=""];
}
