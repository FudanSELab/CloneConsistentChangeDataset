digraph {
18 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(1,3L)),KM1.minus(KM3))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"1\",\"3L\")),KM1.minus(KM3))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "testMinus['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(2,5L)),KM2.minus(KM1))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testMinus['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(startMetadata(ImmutableMap.of(\"1\",\"4L\"),ImmutableSet.of(\"1\")),START5.minus(START4))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertEquals(endMetadata(ImmutableMap.of(\"1\",\"4L\")),END2.minus(END1))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Assert.assertEquals(endMetadata(ImmutableMap.of(\"2\",\"5L\")),END1.minus(END2))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Assert.assertEquals(simpleStartMetadata(ImmutableMap.of()),START1.minus(START2))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assert.assertEquals(startMetadata(ImmutableMap.of(),ImmutableSet.of()),START4.minus(START2))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testMinus['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of()),KM0.minus(KM2))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(simpleStartMetadata(ImmutableMap.of(\"2\",\"5L\")),START2.minus(START1))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Assert.assertEquals(simpleStartMetadata(ImmutableMap.of()),START0.minus(START2))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(simpleStartMetadata(ImmutableMap.of()),START2.minus(START2))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of()),KM1.minus(KM2))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of()),KM2.minus(KM2))@@@7@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"2\",\"5L\")),KM2.minus(KM1))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(simpleStartMetadata(ImmutableMap.of(\"1\",\"3L\")),START1.minus(START3))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7->13 [style = bold, label=""];
4->3 [style = bold, label=""];
15->10 [style = bold, label=""];
5->14 [style = dashed, label="0"];
3->16 [style = dashed, label="0"];
11->12 [style = bold, label=""];
0->12 [style = dashed, label="0"];
10->7 [style = bold, label=""];
3->5 [style = bold, label=""];
2->0 [style = bold, label=""];
3->9 [style = dashed, label="0"];
0->4 [style = bold, label=""];
12->8 [style = bold, label=""];
6->11 [style = bold, label=""];
4->8 [style = dashed, label="0"];
8->9 [style = bold, label=""];
9->14 [style = bold, label=""];
2->18 [style = dashed, label="0"];
16->5 [style = bold, label=""];
2->11 [style = dashed, label="0"];
14->15 [style = bold, label=""];
1->2 [style = bold, label=""];
18->0 [style = bold, label=""];
17->18 [style = bold, label=""];
4->16 [style = bold, label=""];
}
