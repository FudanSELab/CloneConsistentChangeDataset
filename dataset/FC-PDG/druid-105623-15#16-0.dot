digraph {
73 [style = filled, label = "allFutures.addAll(indexFutures)@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "queryAggregatorFactories.add(new DoubleSumAggregatorFactory(StringUtils.format(\"doubleSumResult%s\",i),StringUtils.format(\"doubleSumResult%s\",i)))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final QueryRunnerFactory factory = new TimeseriesQueryRunnerFactory(new TimeseriesQueryQueryToolChest(),new TimeseriesQueryEngine(),QueryRunnerTestHelper.NOOP_QUERYWATCHER)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "QueryRunner<Result<TimeseriesResultValue>> runner = new FinalizeResultsQueryRunner<Result<TimeseriesResultValue>>(factory.createRunner(incrementalIndexSegment),factory.getToolchest())@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "final IncrementalIndex incrementalIndex = this.incrementalIndex.getConstructor(,,,,,).newInstance(new IncrementalIndexSchema.Builder().withMetrics(factories).build(),true,true,false,true,elementsPerThread * taskCount)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "index.add(getLongRow(timestamp + i,dimensionCount))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "final QueryRunnerFactory factory = new TimeseriesQueryRunnerFactory(new TimeseriesQueryQueryToolChest(),new TimeseriesQueryEngine(),QueryRunnerTestHelper.NOOP_QUERYWATCHER)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "final Segment incrementalIndexSegment = new IncrementalIndexSegment(incrementalIndex,null)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "i < dimensionCount@@@28@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "i < DIMENSION_COUNT@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "final ArrayList<AggregatorFactory> queryAggregatorFactories = new ArrayList<>(DIMENSION_COUNT + 1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "queryExecutor.shutdown()@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "final List<ListenableFuture<?>> indexFutures = new ArrayList<>()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "indexExecutor.shutdown()@@@69@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "List<ListenableFuture<?>> allFutures = new ArrayList<>(queryFutures.size() + indexFutures.size())@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "queryFutures.add(queryExecutor.submit(new Runnable(){@Override public void run(){QueryRunner<Result<TimeseriesResultValue>> runner = new FinalizeResultsQueryRunner<Result<TimeseriesResultValue>>(factory.createRunner(incrementalIndexSegment),factory.getToolchest())TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(\"xxx\").granularity(Granularities.ALL).intervals(ImmutableList.of(queryInterval)).aggregators(queryAggregatorFactories).build()List<Result<TimeseriesResultValue>> results = runner.run(QueryPlus.wrap(query)).toList()for (Result<TimeseriesResultValue> result : results){if (someoneRan.get()) {Assert.assertTrue(result.getValue().getDoubleMetric(\"doubleSumResult0\") > 0)}}if (currentlyRunning.get() > 0) {concurrentlyRan.set(true)}}}))@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final int dimensionCount = 5@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "boolean isRollup = index.isRollup()@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final ArrayList<AggregatorFactory> queryAggregatorFactories = new ArrayList<>()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "final int concurrentThreads = 3@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "++i@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "allFutures.addAll(queryFutures)@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "i < dimensionCount@@@42@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "ingestAggregatorFactories.add(new CountAggregatorFactory(\"rows\"))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "int j = 0@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "index.add(getLongRow(timestamp + i,dimensionCount))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "List<Result<TimeseriesResultValue>> results = runner.run(QueryPlus.wrap(query)).toList()@@@72@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "int i = 0@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "i < rows@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "queryAggregatorFactories.add(new LongSumAggregatorFactory(StringUtils.format(\"sumResult%s\",i),StringUtils.format(\"sumResult%s\",i)))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "j++@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "final int elementsPerThread = 1 << 15@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "testSingleThreadedIndexingAndQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
48 [style = filled, label = "Assert.assertEquals(StringUtils.format(\"Failed double sum on dimension %d\",i),expectedVal,result.getValue().getDoubleMetric(StringUtils.format(\"doubleSumResult%s\",i)).intValue())@@@80@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "final List<ListenableFuture<?>> queryFutures = new ArrayList<>()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "final ListeningExecutorService queryExecutor = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(concurrentThreads,new ThreadFactoryBuilder().setDaemon(false).setNameFormat(\"query-executor-%d\").build()))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "final Interval queryInterval = Intervals.of(\"1900-01-01T00:00:00Z/2900-01-01T00:00:00Z\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final QueryRunner<Result<TimeseriesResultValue>> runner = new FinalizeResultsQueryRunner<Result<TimeseriesResultValue>>(factory.createRunner(incrementalIndexSegment),factory.getToolchest())@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(\"xxx\").granularity(Granularities.ALL).intervals(ImmutableList.of(queryInterval)).aggregators(queryAggregatorFactories).build()@@@71@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "int i = 0@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "queryAggregatorFactories.add(new LongSumAggregatorFactory(StringUtils.format(\"sumResult%s\",i),StringUtils.format(\"sumResult%s\",i)))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final long timestamp = System.currentTimeMillis()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "++i@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "testConcurrentAddRead['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "queryAggregatorFactories.add(new CountAggregatorFactory(\"rows\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "++i@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(\"Failed long sum on dimension \" + i,2 * rows,result.getValue().getLongMetric(\"sumResult\" + i).intValue())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "++i@@@78@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(rows * (isRollup? 1: 2),result.getValue().getLongMetric(\"rows\").intValue())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "indexFutures.add(indexExecutor.submit(new Runnable(){@Override public void run(){currentlyRunning.incrementAndGet()try {for (int i = 0 i < elementsPerThread i++){incrementalIndex.add(getLongRow(timestamp + i,1,DIMENSION_COUNT))}}catch (IndexSizeExceededException e) currentlyRunning.decrementAndGet()someoneRan.set(true)}}))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "j < taskCount@@@27@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "final AtomicBoolean concurrentlyRan = new AtomicBoolean(false)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "final int taskCount = 30@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "final AtomicInteger currentlyRunning = new AtomicInteger(0)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "int i = 0@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "++i@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "i < rows@@@16@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final long timestamp = System.currentTimeMillis()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "final IncrementalIndex<?> index = indexCreator.createIndex((Object)ingestAggregatorFactories.toArray(new AggregatorFactory(((())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
46 [style = filled, label = "final AtomicBoolean someoneRan = new AtomicBoolean(false)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "i++@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "List<Result<TimeseriesResultValue>> results = runner.run(QueryPlus.wrap(query)).toList()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(\"xxx\").granularity(Granularities.ALL).intervals(ImmutableList.of(Intervals.of(\"2000/2030\"))).aggregators(queryAggregatorFactories).build()@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final IncrementalIndex index = closerRule.closeLater(indexCreator.createIndex(ingestAggregatorFactories.toArray(new AggregatorFactory(((()))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
83 [style = filled, label = "int i = 0@@@76@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testSingleThreadedIndexingAndQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Result<TimeseriesResultValue> result = Iterables.getOnlyElement(results)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "final int expectedVal = elementsPerThread * taskCount@@@73@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "queryAggregatorFactories.add(new DoubleSumAggregatorFactory(StringUtils.format(\"doubleSumResult%s\",i),StringUtils.format(\"doubleSumResult%s\",i)))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "final ListeningExecutorService indexExecutor = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(concurrentThreads,new ThreadFactoryBuilder().setDaemon(false).setNameFormat(\"index-executor-%d\").setPriority(Thread.MIN_PRIORITY).build()))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "int i = 0@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "Assert.assertEquals(StringUtils.format(\"Failed long sum on dimension %d\",i),expectedVal,result.getValue().getLongMetric(StringUtils.format(\"sumResult%s\",i)).intValue())@@@79@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final int rows = 50@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ingestAggregatorFactories.add(new DoubleSumAggregatorFactory(StringUtils.format(\"doubleSumResult%s\",i),StringUtils.format(\"Dim_%s\",i)))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final ArrayList<AggregatorFactory> ingestAggregatorFactories = new ArrayList<>()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "i < dimensionCount@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "queryAggregatorFactories.add(new CountAggregatorFactory(\"rows\"))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "Futures.allAsList(allFutures).get()@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "Assert.assertEquals(elementsPerThread,result.getValue().getLongMetric(\"rows\").intValue())@@@75@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "i < DIMENSION_COUNT@@@77@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(\"Failed double sum on dimension \" + i,2 * rows,result.getValue().getDoubleMetric(\"doubleSumResult\" + i).intValue())@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "int i = 0@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final Segment incrementalIndexSegment = new IncrementalIndexSegment(index,null)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int i = 0@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77->45 [style = dotted, label="true"];
27->13 [style = bold, label=""];
74->69 [style = solid, label="expectedVal"];
54->55 [style = solid, label="incrementalIndex"];
73->65 [style = bold, label=""];
60->48 [style = dotted, label="true"];
20->56 [style = dashed, label="0"];
39->28 [style = solid, label="i"];
38->39 [style = dotted, label="true"];
34->15 [style = bold, label=""];
40->25 [style = bold, label=""];
3->79 [style = solid, label="i"];
15->60 [style = dashed, label="0"];
59->58 [style = bold, label=""];
1->19 [style = solid, label="i"];
41->20 [style = bold, label=""];
9->35 [style = bold, label=""];
70->44 [style = bold, label=""];
25->28 [style = solid, label="timestamp"];
83->69 [style = solid, label="i"];
55->63 [style = bold, label=""];
8->1 [style = bold, label=""];
54->76 [style = bold, label=""];
44->46 [style = bold, label=""];
74->67 [style = bold, label=""];
56->72 [style = bold, label=""];
3->5 [style = bold, label=""];
8->38 [style = solid, label="rows"];
0->25 [style = bold, label=""];
27->9 [style = dotted, label="true"];
3->77 [style = solid, label="i"];
2->14 [style = bold, label=""];
39->38 [style = bold, label=""];
23->12 [style = bold, label=""];
38->26 [style = bold, label=""];
21->37 [style = dotted, label="true"];
47->60 [style = bold, label=""];
1->31 [style = bold, label=""];
3->82 [style = solid, label="i"];
27->35 [style = dotted, label="true"];
14->11 [style = bold, label=""];
17->21 [style = bold, label=""];
83->60 [style = solid, label="i"];
5->37 [style = bold, label=""];
66->67 [style = solid, label="elementsPerThread"];
8->64 [style = dashed, label="0"];
21->3 [style = bold, label=""];
21->5 [style = dotted, label="true"];
3->77 [style = bold, label=""];
52->78 [style = bold, label=""];
31->19 [style = dotted, label="true"];
26->32 [style = bold, label=""];
57->61 [style = bold, label=""];
21->0 [style = bold, label=""];
38->28 [style = bold, label=""];
55->57 [style = solid, label="incrementalIndexSegment"];
77->45 [style = bold, label=""];
15->2 [style = dotted, label="true"];
83->60 [style = bold, label=""];
24->10 [style = solid, label="incrementalIndexSegment"];
37->21 [style = bold, label=""];
18->19 [style = bold, label=""];
50->3 [style = bold, label=""];
15->14 [style = dotted, label="true"];
20->28 [style = solid, label="dimensionCount"];
60->69 [style = dotted, label="true"];
17->21 [style = solid, label="i"];
66->54 [style = bold, label=""];
1->18 [style = solid, label="i"];
61->51 [style = solid, label="j"];
17->5 [style = solid, label="i"];
7->33 [style = bold, label=""];
22->38 [style = bold, label=""];
81->80 [style = bold, label=""];
81->73 [style = solid, label="indexFutures"];
36->9 [style = solid, label="i"];
38->28 [style = dotted, label="true"];
2->69 [style = dashed, label="0"];
60->47 [style = dotted, label="true"];
58->42 [style = bold, label=""];
32->36 [style = bold, label=""];
27->29 [style = bold, label=""];
20->7 [style = bold, label=""];
76->50 [style = bold, label=""];
78->73 [style = bold, label=""];
22->38 [style = solid, label="i"];
71->56 [style = bold, label=""];
66->54 [style = solid, label="elementsPerThread"];
20->15 [style = solid, label="dimensionCount"];
66->74 [style = solid, label="elementsPerThread"];
19->64 [style = bold, label=""];
77->43 [style = bold, label=""];
28->39 [style = bold, label=""];
23->12 [style = solid, label="isRollup"];
36->27 [style = solid, label="i"];
63->70 [style = bold, label=""];
17->3 [style = solid, label="i"];
36->13 [style = solid, label="i"];
82->57 [style = bold, label=""];
27->13 [style = dotted, label="true"];
56->54 [style = solid, label="taskCount"];
51->61 [style = dotted, label="true"];
51->52 [style = bold, label=""];
3->45 [style = solid, label="i"];
31->18 [style = dotted, label="true"];
75->61 [style = solid, label="j"];
53->62 [style = bold, label=""];
55->42 [style = solid, label="incrementalIndexSegment"];
77->79 [style = dotted, label="true"];
74->48 [style = solid, label="expectedVal"];
5->79 [style = dashed, label="0"];
80->55 [style = bold, label=""];
46->75 [style = bold, label=""];
10->16 [style = bold, label=""];
72->43 [style = solid, label="concurrentThreads"];
19->18 [style = solid, label="i"];
19->31 [style = solid, label="i"];
6->10 [style = bold, label=""];
16->30 [style = bold, label=""];
21->77 [style = dashed, label="0"];
49->19 [style = bold, label=""];
3->45 [style = dashed, label="0"];
4->20 [style = bold, label=""];
8->2 [style = solid, label="rows"];
83->48 [style = solid, label="i"];
21->3 [style = dotted, label="true"];
34->2 [style = solid, label="i"];
15->11 [style = dotted, label="true"];
56->74 [style = solid, label="taskCount"];
13->9 [style = bold, label=""];
67->83 [style = bold, label=""];
60->69 [style = bold, label=""];
79->68 [style = bold, label=""];
22->39 [style = solid, label="i"];
45->79 [style = bold, label=""];
8->12 [style = solid, label="rows"];
33->17 [style = bold, label=""];
72->49 [style = solid, label="concurrentThreads"];
61->51 [style = bold, label=""];
35->27 [style = bold, label=""];
15->2 [style = bold, label=""];
34->15 [style = solid, label="i"];
69->48 [style = bold, label=""];
31->22 [style = bold, label=""];
40->24 [style = solid, label="index"];
51->82 [style = bold, label=""];
19->31 [style = bold, label=""];
14->48 [style = dashed, label="0"];
77->68 [style = dotted, label="true"];
30->23 [style = bold, label=""];
64->81 [style = bold, label=""];
31->18 [style = bold, label=""];
12->34 [style = bold, label=""];
39->38 [style = solid, label="i"];
56->51 [style = solid, label="taskCount"];
1->31 [style = solid, label="i"];
75->51 [style = bold, label=""];
51->82 [style = dotted, label="true"];
34->14 [style = solid, label="i"];
80->78 [style = solid, label="queryFutures"];
11->15 [style = bold, label=""];
68->77 [style = bold, label=""];
19->82 [style = solid, label="timestamp"];
20->18 [style = solid, label="dimensionCount"];
60->67 [style = bold, label=""];
8->14 [style = solid, label="rows"];
36->27 [style = bold, label=""];
0->24 [style = solid, label="index"];
20->21 [style = solid, label="dimensionCount"];
48->47 [style = bold, label=""];
75->51 [style = solid, label="j"];
65->59 [style = bold, label=""];
62->74 [style = bold, label=""];
21->40 [style = bold, label=""];
66->82 [style = solid, label="elementsPerThread"];
43->49 [style = bold, label=""];
25->8 [style = bold, label=""];
72->66 [style = bold, label=""];
22->28 [style = solid, label="i"];
8->31 [style = solid, label="rows"];
29->24 [style = bold, label=""];
24->6 [style = bold, label=""];
51->57 [style = dotted, label="true"];
0->40 [style = dashed, label="0"];
20->27 [style = solid, label="dimensionCount"];
25->18 [style = solid, label="timestamp"];
42->53 [style = bold, label=""];
16->30 [style = solid, label="results"];
}
