digraph {
20 [style = filled, label = "Double longResult = (Double)getStatResult(\"mr\",\"long_ld\",VAL_TYPE.DOUBLE)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Double intResult = (Double)getStatResult(\"sosr\",\"int_id\",VAL_TYPE.DOUBLE)@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(getRawResponse(),doubleResult,doubleTest)@@@14@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Double floatTest = (Double)calculateNumberStat(floatTestStart,\"sumOfSquares\")@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Double intTest = (Double)calculateNumberStat(intTestStart,\"mean\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Double intTest = (Double)calculateNumberStat(intTestStart,\"sumOfSquares\")@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(getRawResponse(),intResult,intTest)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Double floatResult = (Double)getStatResult(\"mr\",\"float_fd\",VAL_TYPE.DOUBLE)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "sumOfSquaresTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(getRawResponse(),floatResult,floatTest)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testExpressions(expressions)@@@6@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "Double doubleTest = (Double)calculateNumberStat(doubleTestStart,\"mean\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Double doubleResult = (Double)getStatResult(\"sosr\",\"double_dd\",VAL_TYPE.DOUBLE)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Double longResult = (Double)getStatResult(\"sosr\",\"long_ld\",VAL_TYPE.DOUBLE)@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Double intResult = (Double)getStatResult(\"mr\",\"int_id\",VAL_TYPE.DOUBLE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Double longTest = (Double)calculateNumberStat(longTestStart,\"mean\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "sumOfSquaresTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "Double floatTest = (Double)calculateNumberStat(floatTestStart,\"mean\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Double doubleTest = (Double)calculateNumberStat(doubleTestStart,\"sumOfSquares\")@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertEquals(getRawResponse(),longResult,longTest)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expressions.put(\"multi\",new ETP(\"sumofsquares(long_lm)\",1220.0))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "Double doubleResult = (Double)getStatResult(\"mr\",\"double_dd\",VAL_TYPE.DOUBLE)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "meanTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Double floatResult = (Double)getStatResult(\"sosr\",\"float_fd\",VAL_TYPE.DOUBLE)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "expressions.put(\"single\",new ETP(\"sumofsquares(int_i)\",237.0))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Double longTest = (Double)calculateNumberStat(longTestStart,\"sumOfSquares\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Map<String,ETP> expressions = new HashMap<>()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5->3 [style = bold, label=""];
22->25 [style = bold, label=""];
9->4 [style = solid, label="intTest"];
12->5 [style = bold, label=""];
26->7 [style = bold, label=""];
10->8 [style = solid, label="longTest"];
3->7 [style = solid, label="doubleResult"];
3->21 [style = dashed, label="0"];
12->5 [style = solid, label="floatTest"];
9->4 [style = bold, label=""];
22->5 [style = solid, label="floatResult"];
18->19 [style = bold, label=""];
0->8 [style = solid, label="longResult"];
3->6 [style = bold, label=""];
2->9 [style = bold, label=""];
16->17 [style = bold, label=""];
25->5 [style = solid, label="floatTest"];
23->8 [style = bold, label=""];
20->8 [style = solid, label="longResult"];
0->20 [style = dashed, label="0"];
24->18 [style = bold, label=""];
13->16 [style = bold, label=""];
11->2 [style = bold, label=""];
1->22 [style = dashed, label="0"];
4->0 [style = bold, label=""];
8->22 [style = bold, label=""];
9->19 [style = dashed, label="0"];
8->1 [style = bold, label=""];
5->21 [style = bold, label=""];
2->4 [style = solid, label="intResult"];
21->26 [style = bold, label=""];
0->10 [style = bold, label=""];
12->25 [style = dashed, label="0"];
20->23 [style = bold, label=""];
10->8 [style = bold, label=""];
17->14 [style = bold, label=""];
19->4 [style = solid, label="intTest"];
6->26 [style = dashed, label="0"];
16->15 [style = solid, label="expressions"];
23->8 [style = solid, label="longTest"];
4->20 [style = bold, label=""];
1->12 [style = bold, label=""];
2->18 [style = dashed, label="0"];
25->5 [style = bold, label=""];
14->15 [style = bold, label=""];
19->4 [style = bold, label=""];
18->4 [style = solid, label="intResult"];
6->7 [style = bold, label=""];
21->7 [style = solid, label="doubleResult"];
10->23 [style = dashed, label="0"];
6->7 [style = solid, label="doubleTest"];
26->7 [style = solid, label="doubleTest"];
1->5 [style = solid, label="floatResult"];
}
