digraph {
23 [style = filled, label = "assertThat(executed.get(),equalTo(true))@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "setState(clusterService,state)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertFalse(request.isRetrySet.get())@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final ShardId shardId = new ShardId(index,\"_na_\",0)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(requests.size(),equalTo(1))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertPhase(task,\"finished\")@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "executeOnPrimary = false@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "final ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "isRelocated.set(true)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "setState(clusterService,state)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ReplicationTask task = maybeTask()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "PlainActionFuture<TestResponse> listener = new PlainActionFuture<>()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertFalse(executed.get())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "PlainActionFuture<TestResponse> listener = new PlainActionFuture<>()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "listener.get()@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "listener.get()@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(\"primary request was not delegated to relocation target\",requests.get(0).action,equalTo(\"testAction(p(\"))@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertThat(\"primary term not properly set on primary delegation\",((TransportReplicationAction.ConcreteShardRequest<Request>)requests.get(0).request).getPrimaryTerm(),equalTo(primaryTerm))@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertPhase(task,\"finished\")@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "AtomicBoolean executed = new AtomicBoolean()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertThat(\"primary request was not delegated to relocation target\",requests.get(0).action,equalTo(\"internal:testAction(p(\"))@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "Request request = new Request(shardId).timeout(\"1ms\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "state = ClusterState.builder(state).nodes(DiscoveryNodes.builder(state.nodes()).localNodeId(primaryTargetNodeId)).build()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "ClusterState state = stateWithActivePrimary(index,true,randomInt(5))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertFalse(request.isRetrySet.get())@@@51@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertPhase(task,\"finished\")@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final String index = \"test\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertPhase(task,\"primary_delegation\")@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "ClusterState state = state(index,true,ShardRoutingState.RELOCATING)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "transport.handleResponse(requests.get(0).requestId,new TestResponse())@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertTrue(listener.isDone())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "ReplicationTask task = maybeTask()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "new AsyncPrimaryAction(request,primaryShard.allocationId().getId(),primaryTerm,createTransportChannel(listener),task)action{@Override protected ReplicationOperation<Request,Request,TransportReplicationAction.PrimaryResult<Request,TestResponse>> createReplicatedOperation(Request request,ActionListener<TransportReplicationAction.PrimaryResult<Request,TestResponse>> actionListener,TransportReplicationAction<Request,Request,TestResponse>.PrimaryShardReference primaryShardReference){return new NoopReplicationOperation(request,actionListener){public void execute(){assertPhase(task,\"primary\")assertFalse(executed.getAndSet(true))super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13e5d54}}}}.run()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertFalse(request.isRetrySet.get())@@@36@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "String primaryTargetNodeId = primaryShard.relocatingNodeId()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final List<CapturingTransport.CapturedRequest> requests = transport.capturedRequestsByTargetNode().get(primaryShard.relocatingNodeId())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "Request request = new Request(shardId).timeout(\"1ms\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(listener.isDone())@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "new AsyncPrimaryAction(request,primaryShard.allocationId().getRelocationId(),primaryTerm,createTransportChannel(listener),task)action{@Override protected ReplicationOperation<Request,Request,TransportReplicationAction.PrimaryResult<Request,TestResponse>> createReplicatedOperation(Request request,ActionListener<TransportReplicationAction.PrimaryResult<Request,TestResponse>> actionListener,TransportReplicationAction<Request,Request,TestResponse>.PrimaryShardReference primaryShardReference){return new NoopReplicationOperation(request,actionListener){public void execute(){assertPhase(task,\"primary\")assertFalse(executed.getAndSet(true))super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13e5e88}}}@Override public void onFailure(Exception e){throw new RuntimeException(e)}}.run()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(requests,notNullValue())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertIndexShardCounter(0)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->16 [style = bold, label=""];
13->25 [style = bold, label=""];
2->35 [style = bold, label=""];
8->28 [style = bold, label=""];
23->7 [style = dotted, label="false"];
17->5 [style = bold, label=""];
16->9 [style = dotted, label="true"];
23->17 [style = dotted, label="false"];
23->35 [style = dotted, label="false"];
23->18 [style = dotted, label="false"];
4->29 [style = solid, label="task"];
23->5 [style = dotted, label="false"];
9->33 [style = bold, label=""];
1->22 [style = solid, label="index"];
0->6 [style = bold, label=""];
7->10 [style = bold, label=""];
34->1 [style = bold, label=""];
31->0 [style = bold, label=""];
16->24 [style = bold, label=""];
4->23 [style = solid, label="executeOnPrimary"];
29->31 [style = bold, label=""];
29->39 [style = bold, label=""];
23->6 [style = dotted, label="true"];
18->15 [style = bold, label=""];
26->14 [style = bold, label=""];
23->10 [style = dotted, label="false"];
11->37 [style = bold, label=""];
22->12 [style = solid, label="state"];
10->32 [style = bold, label=""];
23->13 [style = dotted, label="false"];
12->26 [style = bold, label=""];
15->30 [style = bold, label=""];
23->3 [style = dotted, label="false"];
1->37 [style = solid, label="index"];
25->17 [style = bold, label=""];
43->23 [style = bold, label=""];
36->1 [style = bold, label=""];
23->2 [style = dotted, label="false"];
23->30 [style = dotted, label="false"];
16->33 [style = dotted, label="true"];
1->11 [style = bold, label=""];
23->15 [style = dotted, label="false"];
27->6 [style = solid, label="task"];
23->21 [style = dotted, label="false"];
23->29 [style = bold, label=""];
6->20 [style = bold, label=""];
1->11 [style = solid, label="index"];
5->2 [style = bold, label=""];
30->21 [style = bold, label=""];
23->20 [style = dotted, label="true"];
19->10 [style = solid, label="primaryTerm"];
22->37 [style = dashed, label="0"];
23->25 [style = dotted, label="false"];
23->13 [style = bold, label=""];
22->12 [style = bold, label=""];
33->24 [style = bold, label=""];
7->35 [style = dashed, label="0"];
40->41 [style = bold, label=""];
28->19 [style = bold, label=""];
23->32 [style = dotted, label="false"];
11->22 [style = bold, label=""];
17->5 [style = solid, label="requests"];
16->43 [style = bold, label=""];
44->1 [style = bold, label=""];
35->10 [style = bold, label=""];
33->23 [style = solid, label="executeOnPrimary"];
14->27 [style = bold, label=""];
19->4 [style = bold, label=""];
2->7 [style = bold, label=""];
32->18 [style = bold, label=""];
38->8 [style = bold, label=""];
23->29 [style = dotted, label="true"];
23->31 [style = dotted, label="true"];
27->8 [style = bold, label=""];
27->21 [style = solid, label="task"];
16->9 [style = bold, label=""];
37->40 [style = bold, label=""];
27->32 [style = solid, label="task"];
41->42 [style = bold, label=""];
38->8 [style = solid, label="state"];
21->3 [style = bold, label=""];
42->38 [style = bold, label=""];
24->23 [style = bold, label=""];
23->0 [style = dotted, label="true"];
}
