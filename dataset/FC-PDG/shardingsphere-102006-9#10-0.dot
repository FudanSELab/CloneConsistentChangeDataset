digraph {
18 [style = filled, label = "assertThat(scalingEntry.getImporterClass(),equalTo())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(scalingEntry.getEnvironmentCheckerClass().newInstance().getDataSourceCheckerClass(),equalTo())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertTrue(scalingEntry instanceof PostgreSQLScalingEntry)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertGetScalingEntryByDatabaseType['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(scalingEntry.getDataConsistencyCheckerClass(),equalTo())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(scalingEntry.getEnvironmentCheckerClass(),equalTo())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertThat(scalingEntry.getPositionInitializerClass(),equalTo())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertThat(scalingEntry.getDataConsistencyCheckerClass(),equalTo())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertThat(scalingEntry.getImporterClass(),equalTo())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(scalingEntry.getIncrementalDumperClass(),equalTo())@@@11@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertThat(scalingEntry.getEnvironmentCheckerClass().newInstance().getDataConsistencyCheckerClass(),equalTo())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertThat(scalingEntry.getDataSourceCheckerClass(),equalTo())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertGetScalingEntryByDatabaseType['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertThat(scalingEntry.getDataSourceCheckerClass(),equalTo())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "ScalingEntry scalingEntry = ScalingEntryLoader.getInstance(\"MySQL\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertThat(scalingEntry.getInventoryDumperClass(),equalTo())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(scalingEntry.getInventoryDumperClass(),equalTo())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(scalingEntry.getPositionInitializer(),equalTo())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertTrue(scalingEntry instanceof MySQLScalingEntry)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(scalingEntry.getIncrementalDumperClass(),equalTo())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ScalingEntry scalingEntry = ScalingEntryLoader.getInstance(\"PostgreSQL\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(scalingEntry.getImporterClass(),equalTo())@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertGetScalingEntryByDatabaseType['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(scalingEntry.getPositionInitializer(),equalTo())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20->21 [style = solid, label="scalingEntry"];
4->14 [style = bold, label=""];
23->20 [style = bold, label=""];
8->10 [style = dashed, label="0"];
9->11 [style = bold, label=""];
22->19 [style = bold, label=""];
4->6 [style = bold, label=""];
2->1 [style = bold, label=""];
8->15 [style = dashed, label="0"];
14->10 [style = bold, label=""];
6->17 [style = dashed, label="0"];
3->12 [style = bold, label=""];
6->14 [style = dashed, label="0"];
4->21 [style = dashed, label="0"];
1->7 [style = bold, label=""];
15->18 [style = bold, label=""];
7->3 [style = bold, label=""];
1->22 [style = dashed, label="0"];
5->20 [style = dashed, label="0"];
19->16 [style = bold, label=""];
20->21 [style = bold, label=""];
18->22 [style = bold, label=""];
8->2 [style = bold, label=""];
7->19 [style = dashed, label="0"];
2->9 [style = dashed, label="0"];
5->4 [style = bold, label=""];
6->8 [style = bold, label=""];
17->15 [style = bold, label=""];
5->4 [style = solid, label="scalingEntry"];
13->5 [style = bold, label=""];
2->18 [style = dashed, label="0"];
10->9 [style = bold, label=""];
21->17 [style = bold, label=""];
11->7 [style = bold, label=""];
3->16 [style = dashed, label="0"];
0->5 [style = bold, label=""];
}
