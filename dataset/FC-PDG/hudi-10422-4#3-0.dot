digraph {
20 [style = filled, label = "checkInstantState(funcWrapper.getWriteClient(),HoodieInstant.State.COMPLETED,instant)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testUpsertWithDelete['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "checkIndexLoaded(new HoodieKey(\"id1\",\"par1\"),new HoodieKey(\"id2\",\"par1\"),new HoodieKey(\"id3\",\"par2\"),new HoodieKey(\"id4\",\"par2\"),new HoodieKey(\"id5\",\"par3\"),new HoodieKey(\"id6\",\"par3\"),new HoodieKey(\"id7\",\"par4\"),new HoodieKey(\"id8\",\"par4\"))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "checkInstantState(funcWrapper.getWriteClient(),HoodieInstant.State.REQUESTED,instant)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "funcWrapper.checkpointFunction(2)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "OperatorEvent nextEvent = funcWrapper.getNextEvent()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "funcWrapper.checkpointFunction(1)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(\"The operator expect to send an event\",nextEvent,instanceOf())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertNotNull(funcWrapper.getEventBuffer()(0(,\"The coordinator missed the event\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testIndexStateBootstrap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "String instant = funcWrapper.getWriteClient().getInflightAndRequestedInstant(getTableType())@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "funcWrapper.checkpointComplete(1)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expected.put(\"par4\",\"(id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4(\")@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,nextEvent)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "funcWrapper.invoke(rowData)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "checkWrittenData(tempFile,EXPECTED2)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "funcWrapper.invoke(TestData.DATA_SET_INSERT.get(0))@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "checkWrittenData(tempFile,EXPECTED2)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "expected.put(\"par1\",\"(id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1(\")@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "expected.put(\"par3\",\"(id6,par3,id6,Emma,20,6,par3(\")@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "checkWrittenData(tempFile,expected)@@@32@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Map<String,String> expected = new HashMap<>()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(\"The operator expect to send an event\",nextEvent,instanceOf())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "expected.put(\"par2\",\"(id4,par2,id4,Fabian,31,4,par2(\")@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testIndexStateBootstrap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "String instant = funcWrapper.getWriteClient().getInflightAndRequestedInstant(\"COPY_ON_WRITE\")@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "funcWrapper.clearIndexState()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "funcWrapper.invoke(rowData)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "funcWrapper.checkpointComplete(2)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,nextEvent)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertFalse(funcWrapper.isAllPartitionsLoaded(),\"All partitions assume to be loaded into the index state\")@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "String instant = funcWrapper.getWriteClient().getInflightAndRequestedInstant(getTableType())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "funcWrapper.invoke(rowData)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "funcWrapper.openFunction()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "nextEvent = funcWrapper.getNextEvent()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertTrue(funcWrapper.isAllPartitionsLoaded(),\"All partitions assume to be loaded into the index state\")@@@33@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "checkWrittenData(tempFile,EXPECTED1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEmptyDataFiles()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertNotNull(funcWrapper.getEventBuffer()(0(,\"The coordinator missed the event\")@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27->9 [style = solid, label="instant"];
0->3 [style = bold, label=""];
4->10 [style = bold, label=""];
8->16 [style = bold, label=""];
27->18 [style = bold, label=""];
18->5 [style = solid, label="nextEvent"];
15->13 [style = bold, label=""];
1->9 [style = solid, label="instant"];
17->1 [style = bold, label=""];
37->11 [style = bold, label=""];
21->6 [style = bold, label=""];
20->26 [style = bold, label=""];
1->26 [style = solid, label="instant"];
15->7 [style = solid, label="nextEvent"];
17->31 [style = bold, label=""];
1->27 [style = dashed, label="0"];
25->9 [style = bold, label=""];
23->4 [style = bold, label=""];
22->29 [style = bold, label=""];
31->18 [style = bold, label=""];
1->18 [style = bold, label=""];
7->0 [style = bold, label=""];
9->20 [style = bold, label=""];
30->36 [style = bold, label=""];
17->20 [style = solid, label="instant"];
16->2 [style = bold, label=""];
32->30 [style = bold, label=""];
28->16 [style = bold, label=""];
6->15 [style = bold, label=""];
26->22 [style = bold, label=""];
19->24 [style = bold, label=""];
3->35 [style = bold, label=""];
26->36 [style = solid, label="expected"];
26->38 [style = bold, label=""];
5->19 [style = bold, label=""];
3->23 [style = bold, label=""];
29->12 [style = bold, label=""];
1->17 [style = dashed, label="0"];
31->5 [style = solid, label="nextEvent"];
35->37 [style = bold, label=""];
2->21 [style = bold, label=""];
13->7 [style = bold, label=""];
24->25 [style = bold, label=""];
18->5 [style = bold, label=""];
22->12 [style = bold, label=""];
5->24 [style = bold, label=""];
34->16 [style = bold, label=""];
9->14 [style = bold, label=""];
31->18 [style = solid, label="nextEvent"];
11->17 [style = bold, label=""];
33->32 [style = bold, label=""];
17->27 [style = bold, label=""];
27->26 [style = solid, label="instant"];
38->33 [style = bold, label=""];
15->13 [style = solid, label="nextEvent"];
17->25 [style = solid, label="instant"];
18->24 [style = solid, label="nextEvent"];
14->20 [style = bold, label=""];
10->11 [style = bold, label=""];
}
