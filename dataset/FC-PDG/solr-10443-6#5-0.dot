digraph {
32 [style = filled, label = "RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "replicas.sort(comparator)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(\"node1\",replicas.get(2).getNodeName())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "rlt = generator.getReplicaListTransformer(params)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "params.add(\"routingPreference\",\"0\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "testNodePreferenceRulesBase['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(\"node1\",replicas.get(1).getNodeName())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "replicaTypeAndReplicaLocationTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "assertEquals(\"node2\",replicas.get(2).getNodeName())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(\"node3\",replicas.get(0).getNodeName())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(\"node3\",getHost(replicas.get(3).getNodeName()))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "rlt.transform(replicas)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "List<Replica> replicas = getBasicReplicaList()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "replicaTypeAndReplicaLocationTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"node2\",replicas.get(2).getNodeName())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "List<PreferenceRule> rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://node4\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "ModifiableSolrParams params = new ModifiableSolrParams()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "rlt.transform(replicas)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "assertEquals(\"node2\",replicas.get(0).getNodeName())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(\"node2\",replicas.get(1).getNodeName())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\"@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(\"node3\",replicas.get(2).getNodeName())@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "params.set(\"routingPreference\",\"1\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "rlt.transform(replicas)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "params.add(ShardParams.SHARDS_PREFERENCE,rulesParam)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "rlt.transform(replicas)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertEquals(\"node3\",replicas.get(1).getNodeName())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(\"node4\",getHost(replicas.get(1).getNodeName()))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertEquals(\"node2\",replicas.get(1).getNodeName())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(\"node1\",replicas.get(0).getNodeName())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(\"node4\",replicas.get(1).getNodeName())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"node1\",replicas.get(0).getNodeName())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "replicas.add(new Replica(\"node4\",map(ZkStateReader.BASE_URL_PROP,\"http://host2_2:8983/solr\",ZkStateReader.NODE_NAME_PROP,\"node4\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"TLOG\"),\"collection1\",\"shard1\"))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "params.set(\"routingPreference\",\"2\")@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(0).getNodeName()))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "List<Replica> replicas = getBasicReplicaList()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(\"node1\",replicas.get(0).getNodeName())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "rlt = generator.getReplicaListTransformer(params)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(2).getNodeName()))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "ReplicaListTransformer rlt = generator.getReplicaListTransformer(params)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "params.set(\"routingPreference\",\"3\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "rlt = generator.getReplicaListTransformer(params)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "replicas.add(new Replica(\"node4\",map(ZkStateReader.NODE_NAME_PROP,\"node4:8983_solr\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"TLOG\"),\"collection1\",\"shard1\"))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "NodePreferenceRulesComparator comparator = new NodePreferenceRulesComparator(rules,null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(\"node3\",replicas.get(2).getNodeName())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->16 [style = bold, label=""];
9->10 [style = dashed, label="0"];
32->23 [style = bold, label=""];
34->25 [style = solid, label="rulesParam"];
33->20 [style = bold, label=""];
30->33 [style = bold, label=""];
24->2 [style = bold, label=""];
21->27 [style = bold, label=""];
9->2 [style = bold, label=""];
4->6 [style = bold, label=""];
20->26 [style = bold, label=""];
5->0 [style = solid, label="comparator"];
23->27 [style = solid, label="params"];
23->39 [style = solid, label="params"];
1->15 [style = dashed, label="0"];
7->16 [style = dashed, label="0"];
42->39 [style = bold, label=""];
43->36 [style = bold, label=""];
1->3 [style = bold, label=""];
36->28 [style = bold, label=""];
3->41 [style = solid, label="replicas"];
8->12 [style = dashed, label="0"];
23->3 [style = bold, label=""];
17->22 [style = bold, label=""];
7->8 [style = bold, label=""];
6->15 [style = bold, label=""];
38->19 [style = bold, label=""];
29->18 [style = bold, label=""];
3->5 [style = solid, label="rules"];
0->7 [style = bold, label=""];
3->34 [style = bold, label=""];
3->38 [style = solid, label="replicas"];
6->1 [style = bold, label=""];
11->5 [style = bold, label=""];
3->5 [style = bold, label=""];
12->10 [style = bold, label=""];
26->31 [style = bold, label=""];
23->26 [style = solid, label="params"];
3->24 [style = solid, label="replicas"];
15->11 [style = bold, label=""];
5->0 [style = bold, label=""];
10->13 [style = bold, label=""];
2->13 [style = dashed, label="0"];
3->31 [style = solid, label="replicas"];
27->41 [style = bold, label=""];
34->44 [style = bold, label=""];
8->9 [style = bold, label=""];
39->38 [style = bold, label=""];
37->32 [style = bold, label=""];
44->25 [style = bold, label=""];
40->24 [style = bold, label=""];
18->21 [style = bold, label=""];
28->42 [style = bold, label=""];
31->17 [style = bold, label=""];
3->11 [style = dashed, label="0"];
2->29 [style = bold, label=""];
22->35 [style = bold, label=""];
11->5 [style = solid, label="rules"];
41->43 [style = bold, label=""];
16->12 [style = bold, label=""];
0->40 [style = dashed, label="0"];
14->6 [style = bold, label=""];
8->29 [style = dashed, label="0"];
25->40 [style = bold, label=""];
23->40 [style = solid, label="params"];
19->30 [style = bold, label=""];
}
