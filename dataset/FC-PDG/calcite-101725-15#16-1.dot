digraph {
15 [style = filled, label = "RexNode a@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "return rexBuilder.makeLiteral(true)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "simplifyIsNotNull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "return RexUtil.composeConjunction(rexBuilder,operands)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "RexUtil.isNull(a)@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "return RexUtil.composeDisjunction(rexBuilder,operands,false)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "throw new AssertionError(\"every CUSTOM policy needs a handler, \" + a.getKind())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "((RexCall)a).getOperands()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final RexNode simplified = simplifyIsNotNull(operand)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "simplified == null@@@18@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "RexNode a@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "RexNode operand@@@16@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "RexNode operand@@@16@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "predicates.pulledUpPredicates.contains(a)@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final RexNode simplified = simplifyIsNull(operand)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "return rexBuilder.makeLiteral(true)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "simplifyIsNull['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "((RexCall)a).getOperands()@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "a.getKind()@@@29@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "!a.getType().isNullable() && isSafeExpression(a)@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Strong.policy(a)@@@13@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "return rexBuilder.makeLiteral(false)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "a = simplify(a,UNKNOWN)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "return rexBuilder.makeLiteral(true)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "return rexBuilder.makeLiteral(false)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "simplifyIsNotNull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "return rexBuilder.makeLiteral(false)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "operands.add(simplified)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "return null@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final List<RexNode> operands = new ArrayList<>()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Strong.policy(a.getKind())@@@13@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "hasCustomNullabilityRules(a.getKind())@@@10@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "return rexBuilder.makeLiteral(!((RexLiteral)a).isNull())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "operands.add(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL,operand))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "return null@@@33@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "operands.add(rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL,operand))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "simplified.isAlwaysFalse()@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "return null@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27->13 [style = bold, label=""];
10->37 [style = solid, label="operands"];
32->35 [style = bold, label=""];
21->8 [style = dotted, label="true"];
21->8 [style = bold, label=""];
8->32 [style = dashed, label="0"];
1->20 [style = bold, label=""];
5->28 [style = bold, label=""];
3->4 [style = bold, label=""];
27->19 [style = dotted, label="true"];
22->14 [style = dotted, label="true"];
17->28 [style = dashed, label="0"];
29->6 [style = bold, label=""];
5->23 [style = dotted, label="false"];
12->10 [style = bold, label=""];
6->27 [style = solid, label="a"];
12->20 [style = dotted, label="true"];
23->18 [style = dotted, label="true"];
36->1 [style = solid, label="simplified"];
21->35 [style = bold, label=""];
37->33 [style = bold, label=""];
10->16 [style = solid, label="operands"];
14->11 [style = bold, label=""];
12->22 [style = bold, label=""];
12->33 [style = dotted, label="true"];
17->16 [style = bold, label=""];
12->34 [style = dotted, label="true"];
17->20 [style = bold, label=""];
28->37 [style = bold, label=""];
12->31 [style = dotted, label="true"];
28->36 [style = bold, label=""];
27->22 [style = dotted, label="true"];
27->25 [style = dotted, label="true"];
16->37 [style = dashed, label="0"];
5->23 [style = bold, label=""];
4->0 [style = dotted, label="true"];
12->2 [style = dotted, label="true"];
15->30 [style = dashed, label="0"];
21->32 [style = dotted, label="true"];
27->24 [style = dotted, label="true"];
26->6 [style = bold, label=""];
5->17 [style = bold, label=""];
27->22 [style = bold, label=""];
5->1 [style = dotted, label="false"];
4->0 [style = bold, label=""];
6->21 [style = solid, label="a"];
5->1 [style = bold, label=""];
18->20 [style = bold, label=""];
12->22 [style = dotted, label="true"];
21->9 [style = bold, label=""];
12->10 [style = dotted, label="true"];
12->19 [style = dotted, label="true"];
1->16 [style = bold, label=""];
27->20 [style = dotted, label="true"];
6->9 [style = solid, label="a"];
7->6 [style = bold, label=""];
12->27 [style = dashed, label="0"];
12->33 [style = bold, label=""];
22->14 [style = bold, label=""];
22->11 [style = bold, label=""];
9->3 [style = dotted, label="true"];
12->37 [style = dotted, label="true"];
13->10 [style = bold, label=""];
35->3 [style = bold, label=""];
20->5 [style = solid, label="simplified"];
6->21 [style = bold, label=""];
0->12 [style = bold, label=""];
12->36 [style = dotted, label="true"];
20->1 [style = solid, label="simplified"];
23->1 [style = dotted, label="false"];
27->13 [style = dotted, label="true"];
12->24 [style = bold, label=""];
11->24 [style = bold, label=""];
7->15 [style = dotted, label="true"];
12->13 [style = bold, label=""];
12->13 [style = dotted, label="true"];
36->5 [style = solid, label="simplified"];
27->10 [style = bold, label=""];
12->24 [style = dotted, label="true"];
26->15 [style = dotted, label="true"];
4->12 [style = bold, label=""];
9->3 [style = bold, label=""];
27->24 [style = bold, label=""];
36->5 [style = bold, label=""];
15->6 [style = solid, label="a"];
13->34 [style = dashed, label="0"];
5->28 [style = dotted, label="true"];
23->18 [style = bold, label=""];
1->37 [style = bold, label=""];
18->16 [style = bold, label=""];
5->17 [style = dotted, label="true"];
27->16 [style = dotted, label="true"];
27->5 [style = dotted, label="true"];
10->20 [style = bold, label=""];
0->27 [style = bold, label=""];
9->4 [style = bold, label=""];
35->3 [style = dotted, label="true"];
27->10 [style = dotted, label="true"];
22->11 [style = dotted, label="true"];
12->34 [style = bold, label=""];
16->22 [style = bold, label=""];
34->10 [style = bold, label=""];
1->36 [style = bold, label=""];
35->4 [style = bold, label=""];
10->36 [style = bold, label=""];
20->5 [style = bold, label=""];
12->16 [style = dotted, label="true"];
20->36 [style = dashed, label="0"];
12->5 [style = dotted, label="true"];
30->6 [style = solid, label="a"];
4->27 [style = bold, label=""];
21->32 [style = bold, label=""];
8->9 [style = bold, label=""];
29->30 [style = dotted, label="true"];
23->1 [style = bold, label=""];
6->35 [style = solid, label="a"];
}
