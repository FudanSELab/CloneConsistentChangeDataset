digraph {
12 [style = filled, label = "grouping.getKey()@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertFalse(grouping.contains(\"Fred\"))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final Lookup<Integer,Employee> lookup = Linq4j.asEnumerable(emps).toLookup(EMP_DEPTNO_SELECTOR)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertFalse(grouping.contains(\"Bill\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(1,grouping.count())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "int n = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testToLookupSelector['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(grouping.contains(\"Fred\"))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "++n@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(grouping.contains(\"Bill\"))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(n,2)@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testToLookupSelector['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "fail(\"unknown department number \" + grouping)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final Lookup<Integer,String> lookup = Linq4j.asEnumerable(emps).toLookup(EMP_DEPTNO_SELECTOR,EMP_NAME_SELECTOR)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(grouping.contains(\"Janet\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTrue(grouping.contains(\"Eric\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(3,grouping.count())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"(10:3, 30:1(\",lookup.applyResultSelector(new Function2<Integer,Enumerable<String>,String>(){public String apply(Integer v1,Enumerable<String> v2){return v1 + \":\" + v2.count()}}).orderBy(Functions.identitySelector()).toList().toString())@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "testToLookup['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(\"(10:3, 30:1(\",lookup.applyResultSelector(null).orderBy(Functions.identitySelector()).toList().toString())@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19->18 [style = bold, label=""];
3->17 [style = dashed, label="0"];
10->15 [style = bold, label=""];
16->8 [style = bold, label=""];
1->15 [style = bold, label=""];
4->15 [style = bold, label=""];
12->1 [style = dotted, label="true"];
0->11 [style = bold, label=""];
2->9 [style = bold, label=""];
5->14 [style = bold, label=""];
18->2 [style = bold, label=""];
15->3 [style = bold, label=""];
12->1 [style = bold, label=""];
1->9 [style = bold, label=""];
11->15 [style = bold, label=""];
4->0 [style = bold, label=""];
14->7 [style = bold, label=""];
12->11 [style = dotted, label="true"];
2->15 [style = solid, label="n"];
12->14 [style = dotted, label="true"];
15->17 [style = bold, label=""];
12->10 [style = bold, label=""];
12->13 [style = dotted, label="true"];
12->10 [style = dotted, label="true"];
12->4 [style = bold, label=""];
8->2 [style = bold, label=""];
10->13 [style = bold, label=""];
12->5 [style = dotted, label="true"];
6->8 [style = bold, label=""];
13->5 [style = bold, label=""];
12->0 [style = dotted, label="true"];
7->15 [style = bold, label=""];
8->18 [style = dashed, label="0"];
12->4 [style = dotted, label="true"];
9->12 [style = bold, label=""];
12->7 [style = dotted, label="true"];
}
