digraph {
26 [style = filled, label = "context.deliverRequest(context.fetchRequest(epoch,otherNodeId,oldestSnapshotId.offset,oldestSnapshotId.epoch + 1,0))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "context.pollUntilResponse()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "context.assertSentFetchPartitionResponse(Errors.NONE,epoch,OptionalInt.of(localId))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "snapshot.freeze()@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "context.assertSentFetchPartitionResponse(Errors.NONE,epoch,OptionalInt.of(localId))@@@23@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Set<Integer> voters = Utils.mkSet(localId,otherNodeId,syncNodeId)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(oldestSnapshotId.epoch,partitionResponse.snapshotId().epoch())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "context.becomeLeader()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testFetchRequestAtLogStartOffsetWithValidEpoch['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(Errors.NONE,Errors.forCode(partitionResponse.errorCode()))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testFetchRequestAtLogStartOffsetWithInvalidEpoch['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "context.pollUntilResponse()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "context.pollUntilResponse()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(oldestSnapshotId.epoch + 2 + 1,epoch)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "snapshot.freeze()@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(context.log.endOffset().offset,context.client.highWatermark().getAsLong())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "FetchResponseData.PartitionData partitionResponse = context.assertSentFetchPartitionResponse()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "int epoch = context.currentEpoch()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "OffsetAndEpoch oldestSnapshotId = new OffsetAndEpoch(3,2)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(oldestSnapshotId.offset,partitionResponse.snapshotId().endOffset())@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(oldestSnapshotId,snapshot.snapshotId())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "testFetchRequestAtLogStartOffsetWithValidEpoch['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "int syncNodeId = otherNodeId + 1@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "RaftClientTestContext context = new RaftClientTestContext.Builder(localId,voters).appendToLog(oldestSnapshotId.epoch,Arrays.asList(\"a\",\"b\",\"c\")).appendToLog(oldestSnapshotId.epoch,Arrays.asList(\"d\",\"e\",\"f\")).appendToLog(oldestSnapshotId.epoch + 2,Arrays.asList(\"g\",\"h\",\"i\")).withAppendLingerMs(1).build()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(epoch,partitionResponse.currentLeader().leaderEpoch())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "int otherNodeId = localId + 1@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "context.client.poll()@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "context.client.poll()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int localId = 0@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(localId,partitionResponse.currentLeader().leaderId())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "context.deliverRequest(context.fetchRequest(epoch,syncNodeId,context.log.endOffset().offset,epoch,0))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
16->29 [style = solid, label="epoch"];
9->2 [style = solid, label="syncNodeId"];
16->30 [style = solid, label="epoch"];
16->1 [style = solid, label="epoch"];
6->26 [style = bold, label=""];
23->30 [style = bold, label=""];
16->11 [style = solid, label="epoch"];
17->10 [style = solid, label="otherNodeId"];
16->0 [style = solid, label="epoch"];
9->2 [style = bold, label=""];
15->21 [style = bold, label=""];
8->2 [style = solid, label="localId"];
17->9 [style = bold, label=""];
2->3 [style = bold, label=""];
26->1 [style = bold, label=""];
30->27 [style = bold, label=""];
8->17 [style = solid, label="localId"];
17->26 [style = solid, label="otherNodeId"];
24->29 [style = bold, label=""];
1->0 [style = bold, label=""];
29->23 [style = bold, label=""];
0->28 [style = dashed, label="0"];
16->10 [style = solid, label="epoch"];
16->26 [style = solid, label="epoch"];
13->16 [style = bold, label=""];
11->18 [style = bold, label=""];
15->5 [style = bold, label=""];
19->8 [style = bold, label=""];
20->10 [style = bold, label=""];
16->14 [style = solid, label="epoch"];
8->17 [style = bold, label=""];
8->22 [style = solid, label="localId"];
1->28 [style = bold, label=""];
3->21 [style = solid, label="oldestSnapshotId"];
10->26 [style = dashed, label="0"];
17->9 [style = solid, label="otherNodeId"];
21->20 [style = bold, label=""];
5->6 [style = bold, label=""];
9->11 [style = solid, label="syncNodeId"];
3->7 [style = bold, label=""];
8->0 [style = solid, label="localId"];
17->2 [style = solid, label="otherNodeId"];
12->8 [style = bold, label=""];
16->4 [style = solid, label="epoch"];
6->10 [style = bold, label=""];
0->22 [style = bold, label=""];
8->14 [style = solid, label="localId"];
16->22 [style = solid, label="epoch"];
8->23 [style = solid, label="localId"];
28->24 [style = bold, label=""];
14->15 [style = bold, label=""];
25->8 [style = bold, label=""];
16->4 [style = bold, label=""];
17->1 [style = solid, label="otherNodeId"];
4->11 [style = bold, label=""];
10->1 [style = bold, label=""];
18->14 [style = bold, label=""];
}
