digraph {
35 [style = filled, label = "{throw new RuntimeException(\"Request didn't have payload.\")}@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "request.getPayloadCase()@@@4@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "InvalidProtocolBufferException|IllegalArgumentException e@@@38@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "{throw new RuntimeException(\"Unexpected request output.\")}@@@63@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setSerializeError(e.getMessage()).build()@@@61@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "{ByteString MessageString = testMessage.toByteString()return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(MessageString).build()}@@@53@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "com.google.protobuf.AbstractMessage testMessage@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "{throw new RuntimeException(\"Request didn't have payload.\")}@@@44@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build()@@@34@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "doTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Conformance.ConformanceRequest request@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setSkipped(\"Lite runtime does not support JSON format.\").build()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TestMessagesProto3.TestAllTypes testMessage@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "{return Conformance.ConformanceResponse.newBuilder().setSkipped(\"Lite runtime does not support JSON format.\").build()}@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Conformance.TestAllTypes testMessage@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setJsonPayload(JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build()@@@58@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setSerializeError(e.getMessage()).build()@@@39@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "{try {TestMessagesProto3.TestAllTypesProto3.Builder builder = TestMessagesProto3.TestAllTypesProto3.newBuilder()JsonFormat.parser().usingTypeRegistry(typeRegistry).merge(request.getJsonPayload(),builder)testMessage = builder.build()}catch (InvalidProtocolBufferException e) break}@@@33@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "request.getRequestedOutputFormat()@@@51@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "{throw new RuntimeException(\"Unexpected payload case.\")}@@@28@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "throw new RuntimeException(\"Unspecified output format.\")@@@52@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "boolean isProto3 = request.getMessageType().equals(\"protobuf_test_messages.proto3.TestAllTypesProto3\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "isProto3@@@8@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "InvalidProtocolBufferException|IllegalArgumentException e@@@60@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "{if (isProto3) {try {ExtensionRegistry extensions = ExtensionRegistry.newInstance()TestMessagesProto3.registerAllExtensions(extensions)testMessage = parseBinary(request.getProtobufPayload(),TestAllTypesProto3.parser(),extensions)}catch (InvalidProtocolBufferException e) }if (isProto2) {try {ExtensionRegistry extensions = ExtensionRegistry.newInstance()TestMessagesProto2.registerAllExtensions(extensions)testMessage = parseBinary(request.getProtobufPayload(),TestAllTypesProto2.parser(),extensions)}catch (InvalidProtocolBufferException e) }{throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\")}break}@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "{throw new RuntimeException(\"Unexpected request output.\")}@@@28@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "doTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "{try {testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload())}catch (InvalidProtocolBufferException e) break}@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "request.getRequestedOutputFormat()@@@24@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "boolean isProto2 = request.getMessageType().equals(\"protobuf_test_messages.proto2.TestAllTypesProto2\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "throw new RuntimeException(\"Unspecified output format.\")@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "{throw new RuntimeException(\"Unexpected payload case.\")}@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "request.getPayloadCase()@@@6@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "doTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "{throw new RuntimeException(\"Unexpected request output.\")}@@@41@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5->10 [style = bold, label=""];
29->4 [style = dotted, label="true"];
23->20 [style = bold, label=""];
25->1 [style = bold, label=""];
12->23 [style = dashed, label="0"];
0->13 [style = dotted, label="true"];
0->13 [style = bold, label=""];
6->34 [style = bold, label=""];
30->33 [style = bold, label=""];
3->24 [style = bold, label=""];
35->6 [style = bold, label=""];
7->10 [style = bold, label=""];
32->4 [style = dotted, label="true"];
34->1 [style = bold, label=""];
26->27 [style = dotted, label="true"];
34->33 [style = bold, label=""];
18->15 [style = bold, label=""];
25->18 [style = bold, label=""];
1->3 [style = bold, label=""];
3->11 [style = bold, label=""];
7->35 [style = bold, label=""];
10->35 [style = bold, label=""];
12->31 [style = dashed, label="0"];
16->25 [style = bold, label=""];
22->28 [style = bold, label=""];
33->1 [style = bold, label=""];
34->1 [style = dotted, label="true"];
2->9 [style = bold, label=""];
29->23 [style = bold, label=""];
20->18 [style = solid, label="isProto3"];
15->19 [style = bold, label=""];
7->8 [style = bold, label=""];
3->22 [style = bold, label=""];
16->18 [style = solid, label="isProto2"];
13->11 [style = bold, label=""];
10->6 [style = bold, label=""];
31->7 [style = bold, label=""];
12->7 [style = bold, label=""];
34->30 [style = bold, label=""];
1->9 [style = bold, label=""];
1->11 [style = bold, label=""];
3->24 [style = dotted, label="true"];
1->3 [style = dotted, label="true"];
8->1 [style = bold, label=""];
19->1 [style = bold, label=""];
3->28 [style = bold, label=""];
7->5 [style = bold, label=""];
26->27 [style = bold, label=""];
20->16 [style = bold, label=""];
34->2 [style = bold, label=""];
24->21 [style = bold, label=""];
25->17 [style = dotted, label="true"];
1->9 [style = dotted, label="true"];
14->12 [style = bold, label=""];
6->8 [style = bold, label=""];
7->6 [style = bold, label=""];
25->19 [style = bold, label=""];
3->22 [style = dotted, label="true"];
34->33 [style = dotted, label="true"];
25->15 [style = bold, label=""];
28->24 [style = bold, label=""];
9->3 [style = bold, label=""];
3->21 [style = bold, label=""];
1->2 [style = bold, label=""];
1->2 [style = dotted, label="true"];
14->4 [style = dotted, label="true"];
34->30 [style = dotted, label="true"];
27->21 [style = bold, label=""];
32->31 [style = bold, label=""];
}
