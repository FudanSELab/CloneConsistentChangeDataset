digraph {
16 [style = filled, label = "final CountDownLatch dataUpdateLatch = new CountDownLatch(1)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()),updatedData))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "{node.close()}@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "PersistentEphemeralNode node = new PersistentEphemeralNode(curator,PersistentEphemeralNode.Mode.EPHEMERAL,PATH,initialData)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "byte(( initialData = \"Hello World\".getBytes()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "byte(( updatedData = \"Updated\".getBytes()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "node.start()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()),data))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "{CloseableUtils.closeQuietly(node)}@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "curator.getData().inBackground(new BackgroundCallback(){@Override public void processResult(CuratorFramework client,CuratorEvent event){dataUpdateLatch.countDown()}}).forPath(node.getActualPath())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()),initialData))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "byte(( data = \"Hello World\".getBytes()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "PersistentEphemeralNode node = new PersistentEphemeralNode(curator,PersistentEphemeralNode.Mode.EPHEMERAL,PATH,data)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testSetUpdatedDataWhenReconnected['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "CuratorFramework curator = newCurator()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()),updatedData))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "server.restart()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testSetDataWhenNodeExists['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(timing.awaitLatch(dataUpdateLatch))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testSetDataWhenNodeExists['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "node.start()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "curator.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(PATH,\"InitialData\".getBytes())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "node.setData(updatedData)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "node.waitForInitialCreate(timing.forWaiting().seconds(),TimeUnit.SECONDS)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
1->4 [style = bold, label=""];
4->6 [style = bold, label=""];
16->13 [style = solid, label="dataUpdateLatch"];
8->1 [style = solid, label="curator"];
23->4 [style = bold, label=""];
22->21 [style = bold, label=""];
8->14 [style = bold, label=""];
0->15 [style = dashed, label="0"];
14->17 [style = bold, label=""];
6->0 [style = bold, label=""];
15->19 [style = bold, label=""];
7->8 [style = bold, label=""];
17->23 [style = bold, label=""];
6->15 [style = bold, label=""];
1->9 [style = bold, label=""];
9->6 [style = bold, label=""];
14->23 [style = solid, label="initialData"];
20->18 [style = bold, label=""];
12->13 [style = bold, label=""];
5->1 [style = bold, label=""];
14->15 [style = solid, label="initialData"];
5->17 [style = dashed, label="0"];
17->22 [style = solid, label="updatedData"];
10->8 [style = bold, label=""];
8->2 [style = bold, label=""];
5->0 [style = solid, label="data"];
21->16 [style = bold, label=""];
11->8 [style = bold, label=""];
17->20 [style = solid, label="updatedData"];
1->3 [style = solid, label="node"];
5->1 [style = solid, label="data"];
8->23 [style = solid, label="curator"];
19->22 [style = bold, label=""];
16->12 [style = bold, label=""];
1->23 [style = dashed, label="0"];
2->5 [style = bold, label=""];
17->19 [style = solid, label="updatedData"];
13->20 [style = bold, label=""];
}
