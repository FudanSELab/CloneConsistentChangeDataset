digraph {
33 [style = filled, label = "Assert.assertEquals(0L,(long)taskConfig.getStartPartitions().getPartitionSequenceNumberMap().get(1))@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "supervisor.start()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(kafkaHost,taskConfig.getConsumerProperties().get(\"bootstrap.servers\"))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertFalse(\"skipOffsetGaps\",taskConfig.isSkipOffsetGaps())@@@42@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(\"myCustomValue\",taskConfig.getConsumerProperties().get(\"myCustomKey\"))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "supervisor.runInternal()@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "testFailedInitializationAndRecovery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
69 [style = filled, label = "taskRunner.registerListener(anyObject(),anyObject())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,(long)taskConfig.getEndPartitions().getPartitionSequenceNumberMap().get(2))@@@49@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertTrue(supervisor.isStarted())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expect(taskQueue.add(capture(captured))).andReturn(true)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Assert.assertEquals(stream,taskConfig.getEndPartitions().getStream())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "Assert.assertTrue(supervisor.isLifecycleStarted())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "Assert.assertEquals(stream,taskConfig.getStartPartitions().getStream())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "supervisor.tryInit()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(shard1Partition,shard0Partition)).anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "supervisorRecordSupplier.seek(anyObject(),anyString())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Capture<KafkaIndexTask> captured = Capture.newInstance()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(\"0\",taskConfig.getStartPartitions().getPartitionSequenceNumberMap().get(shardId1))@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "verifyAll()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(\"0\",taskConfig.getStartPartitions().getPartitionSequenceNumberMap().get(shardId0))@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "taskRunner.registerListener(anyObject(),anyObject())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "testNoInitialState['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,(long)taskConfig.getEndPartitions().getPartitionSequenceNumberMap().get(1))@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,(long)taskConfig.getEndPartitions().getPartitionSequenceNumberMap().get(0))@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(\"sequenceName-0\",taskConfig.getBaseSequenceName())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "supervisor = getSupervisor(1,1,true,\"PT1H\",null,null,false,false,StringUtils.format(\"badhostname:%d\",kafkaServer.getPort()))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
64 [style = filled, label = "Assert.assertFalse(\"maximumMessageTime\",taskConfig.getMaximumMessageTime().isPresent())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "Assert.assertEquals(\"sequenceName-0\",taskConfig.getBaseSequenceName())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "expectLastCall().anyTimes()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "expect(supervisorRecordSupplier.getEarliestSequenceNumber(anyObject())).andReturn(\"0\").anyTimes()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "KafkaIndexTask task = captured.getValue()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "resetAll()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertFalse(\"minimumMessageTime\",taskConfig.getMinimumMessageTime().isPresent())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(topic,taskConfig.getEndPartitions().getStream())@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertTrue(supervisor.isLifecycleStarted())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "replayAll()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "expectLastCall().anyTimes()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "KinesisIndexTaskIOConfig taskConfig = task.getIOConfig()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "testFailedInitializationAndRecovery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "replayAll()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "expect(supervisorRecordSupplier.getPartitionIds(stream)).andReturn(ImmutableSet.of(shardId1,shardId0)).anyTimes()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "verifyAll()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(0L,(long)taskConfig.getStartPartitions().getPartitionSequenceNumberMap().get(2))@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "supervisor = getSupervisor(1,1,true,\"PT1H\",null,null,false,StringUtils.format(\"badhostname:%d\",kafkaServer.getPort()))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
59 [style = filled, label = "KinesisIndexTask task = captured.getValue()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "expectLastCall().anyTimes()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "Assert.assertFalse(\"minimumMessageTime\",taskConfig.getMinimumMessageTime().isPresent())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "supervisorRecordSupplier.assign(anyObject())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "replayAll()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "supervisorRecordSupplier.seekToLatest(anyObject())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(null)).anyTimes()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "supervisor.getIoConfig().getConsumerProperties().put(\"bootstrap.servers\",kafkaHost)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "KafkaIndexTaskIOConfig taskConfig = task.getIOConfig()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "Assert.assertTrue(\"isUseTransaction\",taskConfig.isUseTransaction())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(0L,(long)taskConfig.getStartPartitions().getPartitionSequenceNumberMap().get(0))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "Assert.assertEquals(tuningConfig.convertToTaskTuningConfig(),task.getTuningConfig())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "supervisor.runInternal()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertFalse(\"maximumMessageTime\",taskConfig.getMaximumMessageTime().isPresent())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "supervisor.start()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "verifyAll()@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertTrue(\"isUseTransaction\",taskConfig.isUseTransaction())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertFalse(supervisor.isStarted())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "expect(taskQueue.add(EasyMock.capture(captured))).andReturn(true)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "Assert.assertEquals(SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER,taskConfig.getEndPartitions().getPartitionSequenceNumberMap().get(shardId0))@@@37@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(topic,taskConfig.getStartPartitions().getStream())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "Assert.assertEquals(SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER,taskConfig.getEndPartitions().getPartitionSequenceNumberMap().get(shardId1))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "supervisor = getSupervisor(1,1,true,\"PT1H\",null,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "Assert.assertEquals(dataSchema,task.getDataSchema())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "Capture<KinesisIndexTask> captured = Capture.newInstance()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "addSomeEvents(1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71->70 [style = bold, label=""];
39->36 [style = dotted, label="true"];
25->1 [style = bold, label=""];
76->64 [style = bold, label=""];
55->62 [style = bold, label=""];
40->25 [style = bold, label=""];
49->48 [style = bold, label=""];
53->54 [style = bold, label=""];
44->53 [style = bold, label=""];
38->15 [style = bold, label=""];
42->29 [style = bold, label=""];
35->81 [style = dashed, label="0"];
29->18 [style = bold, label=""];
1->28 [style = bold, label=""];
38->59 [style = dashed, label="0"];
21->31 [style = bold, label=""];
30->46 [style = bold, label=""];
39->23 [style = bold, label=""];
27->45 [style = bold, label=""];
24->17 [style = bold, label=""];
0->8 [style = bold, label=""];
48->21 [style = bold, label=""];
7->15 [style = dashed, label="0"];
78->58 [style = bold, label=""];
16->9 [style = bold, label=""];
60->66 [style = bold, label=""];
74->59 [style = bold, label=""];
33->53 [style = dashed, label="0"];
33->16 [style = bold, label=""];
66->78 [style = bold, label=""];
4->19 [style = bold, label=""];
32->7 [style = bold, label=""];
13->67 [style = dashed, label="0"];
35->21 [style = bold, label=""];
62->39 [style = bold, label=""];
3->10 [style = bold, label=""];
22->38 [style = bold, label=""];
54->80 [style = bold, label=""];
23->37 [style = bold, label=""];
18->4 [style = bold, label=""];
58->76 [style = bold, label=""];
44->20 [style = bold, label=""];
7->6 [style = bold, label=""];
16->54 [style = dashed, label="0"];
57->65 [style = bold, label=""];
75->79 [style = bold, label=""];
14->39 [style = bold, label=""];
73->52 [style = bold, label=""];
36->51 [style = bold, label=""];
41->27 [style = bold, label=""];
10->43 [style = bold, label=""];
61->69 [style = bold, label=""];
59->72 [style = bold, label=""];
15->44 [style = bold, label=""];
65->77 [style = bold, label=""];
11->24 [style = bold, label=""];
63->74 [style = bold, label=""];
36->39 [style = bold, label=""];
31->34 [style = bold, label=""];
26->41 [style = bold, label=""];
17->0 [style = bold, label=""];
35->48 [style = dashed, label="0"];
6->33 [style = bold, label=""];
81->75 [style = bold, label=""];
50->57 [style = bold, label=""];
9->3 [style = bold, label=""];
77->55 [style = bold, label=""];
52->50 [style = bold, label=""];
64->67 [style = bold, label=""];
46->22 [style = bold, label=""];
20->11 [style = bold, label=""];
8->32 [style = bold, label=""];
20->66 [style = dashed, label="0"];
70->63 [style = bold, label=""];
51->56 [style = bold, label=""];
56->61 [style = bold, label=""];
12->26 [style = bold, label=""];
5->14 [style = bold, label=""];
34->12 [style = bold, label=""];
72->60 [style = bold, label=""];
47->35 [style = bold, label=""];
9->80 [style = dashed, label="0"];
79->73 [style = bold, label=""];
28->2 [style = bold, label=""];
69->71 [style = bold, label=""];
68->81 [style = bold, label=""];
13->7 [style = bold, label=""];
45->5 [style = bold, label=""];
32->13 [style = bold, label=""];
67->15 [style = bold, label=""];
39->36 [style = bold, label=""];
2->42 [style = bold, label=""];
37->40 [style = bold, label=""];
6->44 [style = dashed, label="0"];
26->56 [style = dashed, label="0"];
19->30 [style = bold, label=""];
}
