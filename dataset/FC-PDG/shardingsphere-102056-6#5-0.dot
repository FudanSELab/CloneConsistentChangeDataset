digraph {
2 [style = filled, label = "actual instanceof ColumnSegment@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final ExpressionSegment actual@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "actual instanceof LiteralExpressionSegment@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression())@@@4@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final ExpressionSegment actual@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "throw new UnsupportedOperationException(String.format(\"Unsupported expression : %s.\",actual.getClass().getName()))@@@48@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "actual instanceof ExistsSubqueryExpression@@@23@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final ExpectedAssignmentValue expected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "actual instanceof SubqueryExpressionSegment@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "assertBetweenExpression(assertContext,(BetweenExpression)actual,expected.getBetweenExpression())@@@39@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertBinaryOperationExpression(assertContext,(BinaryOperationExpression)actual,expected.getBinaryOperationExpression())@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "actual instanceof ExpressionProjectionSegment@@@41@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertCommonExpression(assertContext,(ComplexExpressionSegment)actual,expected.getCommonExpression())@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "actual instanceof ParameterMarkerExpressionSegment@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression())@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "null == expected@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertExpression['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "actual instanceof NotExpression@@@32@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression())@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "final ExpressionSegment actual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final ExpectedExpression expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression())@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final ExpectedAssignmentValue expected@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery())@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertIs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertExistsSubqueryExpression(assertContext,(ExistsSubqueryExpression)actual,expected.getExistsSubquery())@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertNull(assertContext.getText(\"Actual expression should not exist.\"),actual)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "ProjectionAssert.assertProjection(assertContext,(AggregationProjectionSegment)actual,expected.getAggregationProjection())@@@45@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "actual instanceof SubqueryExpressionSegment@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertListExpression(assertContext,(ListExpression)actual,expected.getListExpression())@@@36@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "actual instanceof BetweenExpression@@@38@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression())@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "actual instanceof InExpression@@@29@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "actual instanceof BinaryOperationExpression@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "ProjectionAssert.assertProjection(assertContext,(ExpressionProjectionSegment)actual,expected.getExpressionProjection())@@@42@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "actual instanceof ParameterMarkerExpressionSegment@@@20@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "actual instanceof ListExpression@@@35@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual expression should exist.\"),actual)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertInExpression(assertContext,(InExpression)actual,expected.getInExpression())@@@30@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertNotExpression(assertContext,(NotExpression)actual,expected.getNotExpression())@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "actual instanceof LiteralExpressionSegment@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "actual instanceof AggregationProjectionSegment@@@44@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "return@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "actual instanceof ColumnSegment@@@14@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "actual instanceof ExpressionProjectionSegment@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn())@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertIs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "actual instanceof CommonExpressionSegment@@@26@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
20->36 [style = dotted, label="false"];
3->6 [style = solid, label="actual"];
47->22 [style = solid, label="actual"];
49->32 [style = bold, label=""];
47->23 [style = solid, label="actual"];
5->1 [style = bold, label=""];
34->23 [style = bold, label=""];
27->19 [style = solid, label="assertContext"];
44->48 [style = bold, label=""];
7->4 [style = solid, label="assertContext"];
30->38 [style = bold, label=""];
7->11 [style = solid, label="assertContext"];
3->1 [style = solid, label="actual"];
36->21 [style = dotted, label="true"];
31->50 [style = bold, label=""];
41->35 [style = bold, label=""];
7->6 [style = solid, label="assertContext"];
36->21 [style = bold, label=""];
12->8 [style = solid, label="actual"];
28->30 [style = dotted, label="false"];
37->34 [style = dotted, label="false"];
34->23 [style = dotted, label="true"];
28->18 [style = bold, label=""];
12->14 [style = solid, label="actual"];
47->32 [style = solid, label="actual"];
26->42 [style = dotted, label="true"];
27->21 [style = solid, label="assertContext"];
15->7 [style = dotted, label="true"];
49->28 [style = bold, label=""];
30->20 [style = dotted, label="false"];
35->50 [style = bold, label=""];
51->40 [style = dotted, label="true"];
12->1 [style = solid, label="actual"];
27->48 [style = solid, label="assertContext"];
27->23 [style = solid, label="assertContext"];
33->29 [style = bold, label=""];
3->10 [style = solid, label="actual"];
5->6 [style = bold, label=""];
12->16 [style = solid, label="actual"];
10->37 [style = dashed, label="0"];
28->30 [style = bold, label=""];
36->51 [style = bold, label=""];
39->33 [style = bold, label=""];
15->13 [style = dotted, label="true"];
1->10 [style = bold, label=""];
47->30 [style = solid, label="actual"];
26->42 [style = bold, label=""];
47->50 [style = solid, label="actual"];
47->44 [style = solid, label="actual"];
12->2 [style = solid, label="actual"];
16->14 [style = dotted, label="true"];
35->31 [style = dotted, label="true"];
47->20 [style = solid, label="actual"];
30->38 [style = dotted, label="true"];
47->21 [style = solid, label="actual"];
47->51 [style = solid, label="actual"];
47->49 [style = solid, label="actual"];
37->34 [style = bold, label=""];
50->26 [style = bold, label=""];
45->43 [style = bold, label=""];
10->8 [style = dotted, label="true"];
27->42 [style = solid, label="assertContext"];
45->43 [style = dotted, label="true"];
15->5 [style = bold, label=""];
1->4 [style = bold, label=""];
2->16 [style = bold, label=""];
20->19 [style = dotted, label="true"];
20->36 [style = bold, label=""];
49->32 [style = dotted, label="true"];
8->22 [style = dashed, label="0"];
44->39 [style = bold, label=""];
47->39 [style = solid, label="actual"];
1->4 [style = dotted, label="true"];
39->46 [style = dotted, label="true"];
51->44 [style = dotted, label="false"];
7->14 [style = solid, label="assertContext"];
47->24 [style = solid, label="actual"];
47->25 [style = solid, label="actual"];
12->6 [style = solid, label="actual"];
27->46 [style = solid, label="assertContext"];
47->38 [style = solid, label="actual"];
12->10 [style = solid, label="actual"];
35->24 [style = dotted, label="true"];
3->5 [style = solid, label="actual"];
47->18 [style = solid, label="actual"];
12->5 [style = solid, label="actual"];
34->45 [style = bold, label=""];
10->8 [style = bold, label=""];
47->19 [style = solid, label="actual"];
1->10 [style = dotted, label="false"];
41->27 [style = dotted, label="true"];
27->38 [style = solid, label="assertContext"];
27->22 [style = solid, label="assertContext"];
51->40 [style = bold, label=""];
33->29 [style = dotted, label="false"];
49->28 [style = dotted, label="false"];
20->19 [style = bold, label=""];
34->45 [style = dotted, label="false"];
7->47 [style = dashed, label="0"];
3->2 [style = solid, label="actual"];
2->16 [style = dotted, label="false"];
44->48 [style = dotted, label="true"];
30->20 [style = bold, label=""];
7->8 [style = solid, label="assertContext"];
3->11 [style = solid, label="actual"];
24->31 [style = bold, label=""];
47->34 [style = solid, label="actual"];
47->33 [style = solid, label="actual"];
10->2 [style = dotted, label="false"];
37->22 [style = bold, label=""];
47->28 [style = solid, label="actual"];
27->18 [style = solid, label="assertContext"];
35->24 [style = bold, label=""];
9->5 [style = bold, label=""];
27->25 [style = solid, label="assertContext"];
5->1 [style = dotted, label="false"];
27->32 [style = solid, label="assertContext"];
47->45 [style = solid, label="actual"];
2->11 [style = dotted, label="true"];
17->35 [style = solid, label="expected"];
47->43 [style = solid, label="actual"];
36->51 [style = dotted, label="false"];
10->2 [style = bold, label=""];
9->0 [style = dotted, label="true"];
39->33 [style = dotted, label="false"];
41->47 [style = dotted, label="true"];
2->11 [style = bold, label=""];
51->44 [style = bold, label=""];
9->7 [style = dotted, label="true"];
45->49 [style = dotted, label="false"];
47->26 [style = solid, label="actual"];
41->17 [style = dotted, label="true"];
47->37 [style = solid, label="actual"];
47->40 [style = solid, label="actual"];
47->42 [style = solid, label="actual"];
45->49 [style = bold, label=""];
44->39 [style = dotted, label="false"];
12->11 [style = solid, label="actual"];
5->6 [style = dotted, label="true"];
47->46 [style = solid, label="actual"];
47->36 [style = solid, label="actual"];
33->25 [style = dotted, label="true"];
37->22 [style = dotted, label="true"];
16->14 [style = bold, label=""];
47->48 [style = solid, label="actual"];
12->4 [style = solid, label="actual"];
27->43 [style = solid, label="assertContext"];
9->3 [style = dotted, label="true"];
3->8 [style = solid, label="actual"];
39->46 [style = bold, label=""];
26->37 [style = bold, label=""];
33->25 [style = bold, label=""];
26->37 [style = dotted, label="false"];
28->18 [style = dotted, label="true"];
27->40 [style = solid, label="assertContext"];
15->12 [style = dotted, label="true"];
3->4 [style = solid, label="actual"];
}
