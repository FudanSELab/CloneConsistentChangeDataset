digraph {
12 [style = filled, label = "testAnd['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(and(lessThan(\"id\",5),greaterThanOrEqual(\"id\",0)),SPEC,true).eval(FILE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(or(lessThan(\"id\",5),greaterThanOrEqual(\"id\",80)),SPEC,true).eval(FILE)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "testOr['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(or(lessThan(\"id\",INT_MIN_VALUE - 25),greaterThanOrEqual(\"id\",INT_MAX_VALUE + 1)),SPEC,true).eval(FILE)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(or(lessThan(\"id\",INT_MIN_VALUE - 25),greaterThanOrEqual(\"id\",INT_MAX_VALUE - 19)),SPEC,true).eval(FILE)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assert.assertFalse(\"Should skip: and(false, false)\",shouldRead)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertTrue(\"Should read: and(true, true)\",shouldRead)@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(and(greaterThan(\"id\",5),lessThanOrEqual(\"id\",30)),SPEC,true).eval(FILE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testOr['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(\"Should read: or(false, true)\",shouldRead)@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(or(lessThan(\"id\",5),greaterThanOrEqual(\"id\",60)),SPEC,true).eval(FILE)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "Assert.assertFalse(\"Should skip: or(false, false)\",shouldRead)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
4->3 [style = bold, label=""];
7->1 [style = bold, label=""];
0->11 [style = dashed, label="0"];
9->10 [style = bold, label=""];
4->3 [style = solid, label="shouldRead"];
4->6 [style = dashed, label="0"];
12->9 [style = bold, label=""];
2->4 [style = bold, label=""];
3->0 [style = bold, label=""];
11->8 [style = solid, label="shouldRead"];
4->9 [style = dashed, label="0"];
5->6 [style = bold, label=""];
3->7 [style = bold, label=""];
9->10 [style = solid, label="shouldRead"];
0->1 [style = bold, label=""];
6->3 [style = solid, label="shouldRead"];
7->1 [style = solid, label="shouldRead"];
0->1 [style = solid, label="shouldRead"];
11->8 [style = bold, label=""];
1->8 [style = dashed, label="0"];
3->10 [style = dashed, label="0"];
0->7 [style = dashed, label="0"];
10->11 [style = bold, label=""];
}
