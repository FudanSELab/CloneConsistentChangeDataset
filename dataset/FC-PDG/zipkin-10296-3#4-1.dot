digraph {
11 [style = filled, label = "assertThat(store().getTraces(requestBuilder().serviceName(CLIENT_SPAN.localServiceName()).spanName(CLIENT_SPAN.name()).build()).execute()).flatExtracting(null).contains(CLIENT_SPAN)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(store().getTraces(requestBuilder().serviceName(\"frontend\" + 1).build()).execute()).withFailMessage(\"Results matched even with invalid service name\").isEmpty()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(store().getTraces(requestBuilder().serviceName(CLIENT_SPAN.localServiceName()).remoteServiceName(CLIENT_SPAN.remoteServiceName() + 1).build()).execute()).withFailMessage(\"Results matched even with invalid remote service name\").isEmpty()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(store().getTraces(requestBuilder().serviceName(CLIENT_SPAN.localServiceName()).spanName(CLIENT_SPAN.name() + 1).build()).execute()).withFailMessage(\"Results matched with a value service name, but an invalid span name\").isEmpty()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(store().getTraces(requestBuilder().serviceName(\"frontend\").build()).execute()).flatExtracting(null).contains(CLIENT_SPAN)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "accept(CLIENT_SPAN)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "getTraces_serviceNames['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(store().getTraces(requestBuilder().spanName(CLIENT_SPAN.name() + 1).build()).execute()).withFailMessage(\"Results matched with an invalid span name\").isEmpty()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "getTraces_spanName['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(store().getTraces(requestBuilder().spanName(CLIENT_SPAN.name()).build()).execute()).flatExtracting(null).contains(CLIENT_SPAN)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "getTraces_serviceNames['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertThat(store().getTraces(requestBuilder().serviceName(CLIENT_SPAN.localServiceName()).remoteServiceName(CLIENT_SPAN.remoteServiceName()).build()).execute()).flatExtracting(null).contains(CLIENT_SPAN)@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6->1 [style = bold, label=""];
4->3 [style = bold, label=""];
5->1 [style = bold, label=""];
8->10 [style = bold, label=""];
2->11 [style = dashed, label="0"];
1->0 [style = bold, label=""];
3->2 [style = bold, label=""];
9->1 [style = bold, label=""];
0->7 [style = dashed, label="0"];
7->8 [style = bold, label=""];
0->4 [style = bold, label=""];
1->7 [style = bold, label=""];
4->8 [style = dashed, label="0"];
10->11 [style = bold, label=""];
}
