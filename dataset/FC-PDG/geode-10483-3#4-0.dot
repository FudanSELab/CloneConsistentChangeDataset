digraph {
16 [style = filled, label = "final String host0 = NetworkUtils.getServerHostName(server.getHost())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "cqDUnitTest.createServer(server)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final String cqName@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "client.invoke(new CacheSerializableRunnable(\"Create CQ :\" + cqName){public void run2(){LogWriterUtils.getLogWriter().info(\"### Create CQ. ###\" + cqName)QueryService cqService = nulltry {cqService = getCache().getQueryService()}catch (Exception cqe) CqAttributesFactory cqf = new CqAttributesFactory()CqListener(( cqListeners = {new CqTimeTestListener(LogWriterUtils.getLogWriter())}((CqTimeTestListener)cqListeners(0().cqName = cqNamecqf.initCqListeners(cqListeners)CqAttributes cqa = cqf.create()try {CqQuery cq1 = cqService.newCq(cqName,cqDUnitTest.cqs(0(,cqa)assertTrue(\"newCq() state mismatch\",cq1.getState().isStopped())cq1.execute()}catch (Exception ex) }})@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final int size = 50@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final String cqName = \"testCQPerf_0\"@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "cqDUnitTest.createClient(client,port,host0)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "client.invoke(new CacheSerializableRunnable(\"Validate CQs\"){public void run2(){LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName)QueryService cqService = nulltry {cqService = getCache().getQueryService()}catch (Exception cqe) CqQuery cQuery = cqService.getCq(cqName)if (cQuery == null) {fail(\"Failed to get CqQuery for CQ : \" + cqName)}}})@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final String cqName@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Wait.pause(5000)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "closeCQ['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "VM vm@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "final Host host = Host.getHost(0)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "vm.invoke(null)@@@3@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "Wait.pause(10 * 60 * 1000)@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "cqDUnitTest.createValuesWithTime(client,cqDUnitTest.regions(0(,size)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "closeCQ['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "VM vm@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "VM client = host.getVM(1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "vm.invoke(new CacheSerializableRunnable(\"Close CQ :\" + cqName){public void run2(){LogWriterUtils.getLogWriter().info(\"### Close CQ. ###\" + cqName)QueryService cqService = nulltry {cqService = getCache().getQueryService()}catch (Exception cqe) CqQuery cq1 = nulltry {cq1 = cqService.getCq(cqName)cq1.close()}catch (Exception ex) assertTrue(\"Close CQ state mismatch\",cq1.getState().isClosed())}})@@@3@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "VM server = host.getVM(0)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testCQPerf['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final int port = server.invoke(null)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "cqDUnitTest.closeClient(client)@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "cqDUnitTest.createValuesWithTime(client,cqDUnitTest.regions(0(,size)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "cqDUnitTest.closeServer(server)@@@68@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23->25 [style = bold, label=""];
9->21 [style = solid, label="server"];
15->13 [style = bold, label=""];
16->11 [style = bold, label=""];
3->1 [style = bold, label=""];
0->1 [style = solid, label="cqName"];
9->13 [style = solid, label="server"];
16->11 [style = solid, label="host0"];
10->11 [style = solid, label="client"];
14->22 [style = bold, label=""];
18->12 [style = bold, label=""];
5->6 [style = dotted, label="true"];
10->15 [style = solid, label="client"];
10->21 [style = bold, label=""];
20->19 [style = solid, label="size"];
9->10 [style = bold, label=""];
2->7 [style = dashed, label="0"];
12->9 [style = bold, label=""];
10->19 [style = solid, label="client"];
17->11 [style = solid, label="port"];
20->22 [style = solid, label="size"];
25->8 [style = solid, label="cqName"];
22->8 [style = bold, label=""];
25->20 [style = bold, label=""];
19->14 [style = bold, label=""];
5->7 [style = dotted, label="true"];
10->22 [style = solid, label="client"];
5->4 [style = bold, label=""];
3->0 [style = dotted, label="true"];
20->19 [style = bold, label=""];
11->23 [style = bold, label=""];
21->17 [style = bold, label=""];
17->16 [style = bold, label=""];
3->2 [style = dotted, label="true"];
23->25 [style = solid, label="cqName"];
24->15 [style = bold, label=""];
8->24 [style = bold, label=""];
}
