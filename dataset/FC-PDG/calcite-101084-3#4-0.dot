digraph {
29 [style = filled, label = "final RexNode node4 = f.le(f.i,f.literal(10))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "checkNotImplies(node2,node1)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "checkNotImplies(node3,node1)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "RexNode node1 = rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final RexNode node2 = f.lt(f.i,f.literal(30))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "checkImplies(node1,node3)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "f.checkNotImplies(node2,node1)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "f.checkImplies(node5,node2)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "f.checkNotImplies(node3,node1)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "f.checkNotImplies(node4,node6)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "testSimpleEq['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "checkNotImplies(node1,node5)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "RexNode node2 = rexBuilder.makeCall(SqlStdOperatorTable.NOT_EQUALS,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "RexNode node6 = rexBuilder.makeCall(SqlStdOperatorTable.NOT_EQUALS,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "f.checkImplies(node1,node2)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "final RexNode node3 = f.le(f.i,f.literal(30))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "f.checkNotImplies(node2,node5)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "f.checkNotImplies(node1,node6)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "RexNode node3 = rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN_OR_EQUAL,i,rexBuilder.makeExactLiteral(new BigDecimal(30)))@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "checkImplies(node1,node1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testSimpleLesserCond['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "checkImplies(node5,node2)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "checkNotImplies(node2,node1)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "RexNode node5 = rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "checkNotImplies(node1,node6)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "RexNode node4 = rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN_OR_EQUAL,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "f.checkNotImplies(node1,node5)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "checkNotImplies(node2,node5)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "checkImplies(node1,node2)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "f.checkImplies(node1,node3)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "RexNode node1 = rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,i,rexBuilder.makeExactLiteral(new BigDecimal(30)))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final RexNode node5 = f.eq(f.i,f.literal(10))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "RexNode node2 = rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN,i,rexBuilder.makeExactLiteral(new BigDecimal(30)))@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final RexNode node1 = f.lt(f.i,f.literal(10))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "final RexNode node6 = f.ne(f.i,f.literal(10))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "testSimpleLesserCond['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "final Fixture f = new Fixture()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "checkImplies(node1,node2)@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "checkNotImplies(node4,node6)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17->25 [style = bold, label=""];
33->35 [style = solid, label="node2"];
22->19 [style = solid, label="node5"];
27->20 [style = solid, label="node3"];
0->19 [style = dashed, label="0"];
2->32 [style = dashed, label="0"];
8->6 [style = bold, label=""];
9->10 [style = bold, label=""];
7->8 [style = bold, label=""];
12->7 [style = bold, label=""];
25->32 [style = solid, label="node2"];
5->13 [style = solid, label="node1"];
22->32 [style = solid, label="node5"];
3->5 [style = bold, label=""];
29->31 [style = solid, label="node4"];
33->34 [style = solid, label="node2"];
37->33 [style = bold, label=""];
9->30 [style = dashed, label="0"];
25->26 [style = solid, label="node2"];
25->19 [style = solid, label="node2"];
6->9 [style = solid, label="node6"];
14->4 [style = solid, label="node2"];
17->23 [style = solid, label="node1"];
12->15 [style = solid, label="node3"];
4->2 [style = bold, label=""];
14->33 [style = dashed, label="0"];
13->11 [style = bold, label=""];
25->27 [style = bold, label=""];
18->20 [style = bold, label=""];
12->1 [style = solid, label="node3"];
14->2 [style = solid, label="node2"];
28->24 [style = bold, label=""];
5->11 [style = solid, label="node1"];
36->37 [style = bold, label=""];
34->35 [style = bold, label=""];
27->29 [style = bold, label=""];
5->1 [style = solid, label="node1"];
6->10 [style = solid, label="node6"];
5->37 [style = dashed, label="0"];
23->31 [style = bold, label=""];
1->26 [style = dashed, label="0"];
17->24 [style = solid, label="node1"];
37->35 [style = solid, label="node1"];
37->38 [style = solid, label="node1"];
27->18 [style = solid, label="node3"];
37->34 [style = solid, label="node1"];
22->30 [style = solid, label="node5"];
17->26 [style = solid, label="node1"];
22->28 [style = bold, label=""];
32->19 [style = bold, label=""];
17->30 [style = solid, label="node1"];
24->26 [style = bold, label=""];
2->0 [style = bold, label=""];
4->20 [style = dashed, label="0"];
6->13 [style = bold, label=""];
38->34 [style = bold, label=""];
5->9 [style = solid, label="node1"];
28->23 [style = solid, label="node6"];
28->31 [style = solid, label="node6"];
7->10 [style = solid, label="node4"];
10->23 [style = dashed, label="0"];
17->20 [style = solid, label="node1"];
8->0 [style = solid, label="node5"];
0->9 [style = bold, label=""];
11->1 [style = bold, label=""];
14->13 [style = solid, label="node2"];
1->15 [style = bold, label=""];
30->23 [style = bold, label=""];
15->18 [style = dashed, label="0"];
5->15 [style = solid, label="node1"];
20->32 [style = bold, label=""];
25->24 [style = solid, label="node2"];
5->14 [style = bold, label=""];
5->0 [style = solid, label="node1"];
8->4 [style = solid, label="node5"];
14->11 [style = solid, label="node2"];
16->21 [style = bold, label=""];
14->12 [style = bold, label=""];
11->24 [style = dashed, label="0"];
8->2 [style = solid, label="node5"];
15->4 [style = bold, label=""];
33->38 [style = bold, label=""];
29->22 [style = bold, label=""];
17->18 [style = solid, label="node1"];
21->17 [style = bold, label=""];
26->18 [style = bold, label=""];
19->30 [style = bold, label=""];
}
