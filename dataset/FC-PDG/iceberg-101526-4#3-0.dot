digraph {
11 [style = filled, label = "Literal<T> lit@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "T lower = Conversions.fromByteBuffer(ref.type(),lowerBounds.get(id))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "BoundReference<T> ref@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "T upper = Conversions.fromByteBuffer(ref.type(),upperBounds.get(id))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "T upper = Conversions.fromByteBuffer(field.type(),upperBounds.get(id))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "int cmp = lit.comparator().compare(upper,lit.value())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "cmp > 0@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "int cmp = lit.comparator().compare(lower,lit.value())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "return ROWS_MIGHT_MATCH@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Preconditions.checkNotNull(field,\"Cannot filter by nested column: %s\",schema.findField(id))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "upperBounds != null && upperBounds.containsKey(id)@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "BoundReference<T> ref@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "BoundReference<T> ref@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Types.NestedField field = struct.field(id)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "lowerBounds != null && lowerBounds.containsKey(id)@@@4@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "return ROWS_CANNOT_MATCH@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "cmp < 0@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Literal<T> lit@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "return ROWS_CANNOT_MATCH@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Integer id = ref.fieldId()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "T lower = Conversions.fromByteBuffer(struct.field(id).type(),lowerBounds.get(id))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "eq['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "eq['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "gtEq['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7->10 [style = solid, label="lower"];
19->14 [style = solid, label="upper"];
4->9 [style = bold, label=""];
12->3 [style = dotted, label="true"];
8->19 [style = dashed, label="0"];
15->2 [style = bold, label=""];
20->10 [style = solid, label="lower"];
1->10 [style = dotted, label="true"];
23->22 [style = dotted, label="true"];
7->10 [style = bold, label=""];
9->16 [style = solid, label="id"];
4->0 [style = dotted, label="true"];
23->21 [style = dotted, label="true"];
9->7 [style = solid, label="id"];
11->22 [style = dashed, label="0"];
4->11 [style = dotted, label="true"];
8->14 [style = bold, label=""];
1->20 [style = bold, label=""];
13->19 [style = dotted, label="true"];
7->20 [style = dashed, label="0"];
15->6 [style = bold, label=""];
1->7 [style = bold, label=""];
1->13 [style = bold, label=""];
9->16 [style = bold, label=""];
14->15 [style = solid, label="cmp"];
20->10 [style = bold, label=""];
9->8 [style = solid, label="id"];
6->2 [style = bold, label=""];
1->7 [style = dotted, label="true"];
10->12 [style = solid, label="cmp"];
12->13 [style = bold, label=""];
5->1 [style = bold, label=""];
18->11 [style = dotted, label="true"];
9->1 [style = solid, label="id"];
13->19 [style = bold, label=""];
19->14 [style = bold, label=""];
9->19 [style = solid, label="id"];
13->8 [style = dotted, label="true"];
9->20 [style = solid, label="id"];
10->12 [style = bold, label=""];
15->6 [style = dotted, label="true"];
5->13 [style = bold, label=""];
1->12 [style = dotted, label="true"];
18->9 [style = bold, label=""];
9->5 [style = solid, label="id"];
16->5 [style = bold, label=""];
9->13 [style = solid, label="id"];
3->13 [style = bold, label=""];
8->14 [style = solid, label="upper"];
14->15 [style = bold, label=""];
13->15 [style = dotted, label="true"];
12->3 [style = bold, label=""];
18->17 [style = dotted, label="true"];
13->8 [style = bold, label=""];
9->1 [style = bold, label=""];
13->14 [style = dotted, label="true"];
23->9 [style = bold, label=""];
1->20 [style = dotted, label="true"];
16->5 [style = solid, label="field"];
13->2 [style = bold, label=""];
}
