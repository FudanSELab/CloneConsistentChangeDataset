digraph {
6 [style = filled, label = "SchemaContext schemaContext = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertSchemaExists['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Map<String,SchemaContext> schemaContextsMap = Collections.singletonMap(\"schema\",schemaContext)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ShardingSphereSchema shardingSphereSchema = mock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(null,is(ProxyContext.getInstance().getSchema(\"schema1\")))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "schemaContexts.set(ProxyContext.getInstance(),new StandardSchemaContexts(schemaContextsMap,new Authentication(),new ConfigurationProperties(new Properties()),new MySQLDatabaseType()))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(schemaContext,is(ProxyContext.getInstance().getSchema(\"schema\")))@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "boolean exists1 = ProxyContext.getInstance().schemaExists(\"schema\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "RuntimeContext runtimeContext = mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "when(schemaContext.getRuntimeContext()).thenReturn(runtimeContext)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(false,is(exists2))@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(true,is(exists1))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "when(shardingSphereSchema.getDataSources()).thenReturn(Collections.emptyMap())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "when(shardingSphereSchema.getDataSources()).thenReturn(new HashMap<String,DataSource>())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(null,is(ProxyContext.getInstance().getSchema(\"\")))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertGetSchema['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "when(schemaContext.getSchema()).thenReturn(shardingSphereSchema)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "schemaContexts.setAccessible(true)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(null,is(ProxyContext.getInstance().getSchema(null)))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Field schemaContexts = ProxyContext.getInstance().getClass().getDeclaredField(\"schemaContexts\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "boolean exists2 = ProxyContext.getInstance().schemaExists(\"schema_2\")@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertSchemaExists['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "when(schemaContext.getName()).thenReturn(\"schema\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
9->11 [style = bold, label=""];
4->17 [style = dashed, label="0"];
10->14 [style = bold, label=""];
7->12 [style = bold, label=""];
5->7 [style = solid, label="shardingSphereSchema"];
16->6 [style = bold, label=""];
6->9 [style = solid, label="schemaContext"];
15->21 [style = dashed, label="0"];
14->19 [style = bold, label=""];
8->6 [style = bold, label=""];
20->6 [style = bold, label=""];
13->19 [style = dashed, label="0"];
12->9 [style = bold, label=""];
3->4 [style = bold, label=""];
1->22 [style = dashed, label="0"];
4->0 [style = bold, label=""];
0->7 [style = bold, label=""];
6->5 [style = bold, label=""];
22->18 [style = bold, label=""];
17->0 [style = bold, label=""];
9->14 [style = solid, label="schemaContextsMap"];
21->22 [style = bold, label=""];
11->10 [style = bold, label=""];
3->12 [style = solid, label="runtimeContext"];
1->2 [style = solid, label="exists2"];
2->18 [style = dashed, label="0"];
3->17 [style = bold, label=""];
1->2 [style = bold, label=""];
13->15 [style = bold, label=""];
14->13 [style = bold, label=""];
6->18 [style = solid, label="schemaContext"];
13->15 [style = solid, label="exists1"];
15->1 [style = bold, label=""];
19->21 [style = bold, label=""];
}
