digraph {
19 [style = filled, label = "wrap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "Arrays.fill(netBytes,(byte)0x1F)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "byte(( appBytes = new byte((((@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ByteBuffer wrappedBuffer = outputSharing2.getBuffer()@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "appData.flip()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "appData.flip()@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(wrappedData.position()).isEqualTo(netBytes.length)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "ByteBuffer wrappedData = ByteBuffer.allocate(nioSslEngine.peerAppData.capacity())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ByteBuffer appData = ByteBuffer.allocate(outputSharing.getBuffer().capacity() + 100)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "wrap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "wrappedData.flip()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ByteBuffer appData = ByteBuffer.allocate(nioSslEngine.myNetData.capacity() + 100)@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "appData.put(appBytes)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "verify(spyNioSslEngine,times(1)).expandWriteBuffer(any(),any(),any())@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(unwrappedBuffer.remaining()).isEqualTo(0)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testEngine.addReturnResult(new SSLEngineResult(BUFFER_UNDERFLOW,NEED_TASK,0,0))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Arrays.fill(appBytes,(byte)0x1F)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "wrappedData.put(netBytes)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "byte(( netBytes = new byte((((@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "byte(( appBytes = new byte((((@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "unwrappedBuffer.flip()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "unwrapWithBufferUnderflow['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(wrappedBuffer).isEqualTo(appData)@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "verify(spyBufferPool,times(1)).expandWriteBufferIfNeeded(any(),any(),any())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "verify(spyNioSslEngine,times(1)).handleBlockingTasks()@@@18@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertThat(wrappedBuffer).isEqualTo(appData)@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ByteBuffer unwrappedBuffer = spyNioSslEngine.unwrap(wrappedData)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24->28 [style = bold, label=""];
21->10 [style = bold, label=""];
30->24 [style = bold, label=""];
12->5 [style = solid, label="testEngine"];
10->20 [style = bold, label=""];
3->28 [style = dashed, label="0"];
1->8 [style = bold, label=""];
29->30 [style = bold, label=""];
17->6 [style = bold, label=""];
25->13 [style = bold, label=""];
0->8 [style = solid, label="appData"];
2->1 [style = bold, label=""];
16->7 [style = bold, label=""];
23->26 [style = bold, label=""];
7->3 [style = solid, label="appBytes"];
30->28 [style = solid, label="netBytes"];
0->11 [style = bold, label=""];
14->17 [style = bold, label=""];
11->3 [style = solid, label="appBytes"];
8->6 [style = bold, label=""];
5->14 [style = bold, label=""];
15->18 [style = bold, label=""];
22->23 [style = bold, label=""];
13->10 [style = solid, label="testEngine"];
30->24 [style = solid, label="netBytes"];
7->3 [style = bold, label=""];
6->15 [style = bold, label=""];
12->21 [style = dashed, label="0"];
4->0 [style = bold, label=""];
19->16 [style = bold, label=""];
20->22 [style = bold, label=""];
5->20 [style = dashed, label="0"];
3->9 [style = bold, label=""];
7->9 [style = solid, label="appBytes"];
5->2 [style = bold, label=""];
12->10 [style = bold, label=""];
13->12 [style = bold, label=""];
16->15 [style = solid, label="appData"];
10->5 [style = bold, label=""];
7->24 [style = dashed, label="0"];
9->25 [style = dashed, label="0"];
0->29 [style = dashed, label="0"];
11->7 [style = solid, label="appBytes"];
0->5 [style = solid, label="appData"];
28->25 [style = bold, label=""];
29->20 [style = solid, label="wrappedData"];
27->29 [style = bold, label=""];
11->30 [style = dashed, label="0"];
13->21 [style = bold, label=""];
11->7 [style = bold, label=""];
9->13 [style = bold, label=""];
8->26 [style = dashed, label="0"];
}
