digraph {
11 [style = filled, label = "i < numIterations@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testRandomStrings['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Analyzer analyzer = new Analyzer(){@Override protected TokenStreamComponents createComponents(String fieldName){Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE,false)return new TokenStreamComponents(tokenizer,new HunspellStemFilter(tokenizer,dictionary))}}@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "protectedWords = null@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testRandomStrings['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "final int flags = random().nextInt(512)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "i++@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "protectedWords = new CharArraySet(TEST_VERSION_CURRENT,new HashSet<String>(Arrays.asList(\"a\",\"b\",\"cd\")),false)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "int i = 0@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final CharArraySet protectedWords@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Analyzer a = new Analyzer(){@Override protected TokenStreamComponents createComponents(String fieldName){Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE,false)return new TokenStreamComponents(tokenizer,new WordDelimiterFilter(tokenizer,flags,protectedWords))}}@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "int numIterations = atLeast(5)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "random().nextBoolean()@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "checkRandomData(random(),a,200,20,false,false)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testRandomStrings['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER)@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11->9 [style = dotted, label="true"];
8->11 [style = solid, label="i"];
1->0 [style = solid, label="analyzer"];
13->15 [style = bold, label=""];
11->12 [style = dotted, label="true"];
6->13 [style = solid, label="flags"];
7->11 [style = solid, label="numIterations"];
4->11 [style = bold, label=""];
14->13 [style = solid, label="protectedWords"];
14->13 [style = bold, label=""];
11->6 [style = bold, label=""];
4->8 [style = solid, label="i"];
4->11 [style = solid, label="i"];
3->1 [style = bold, label=""];
9->10 [style = dotted, label="true"];
10->13 [style = solid, label="protectedWords"];
12->9 [style = bold, label=""];
8->11 [style = bold, label=""];
11->8 [style = dotted, label="true"];
9->14 [style = dotted, label="false"];
10->13 [style = bold, label=""];
7->4 [style = bold, label=""];
11->6 [style = dotted, label="true"];
2->1 [style = bold, label=""];
6->12 [style = bold, label=""];
9->14 [style = bold, label=""];
11->15 [style = dotted, label="true"];
0->15 [style = dashed, label="0"];
13->15 [style = solid, label="a"];
11->13 [style = dotted, label="true"];
15->8 [style = bold, label=""];
5->7 [style = bold, label=""];
9->10 [style = bold, label=""];
1->0 [style = bold, label=""];
}
