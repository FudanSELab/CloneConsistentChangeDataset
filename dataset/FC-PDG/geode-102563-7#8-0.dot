digraph {
31 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "SocketChannel mockChannel = mock()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "int initialFreeSpace = initialUnwrappedBufferSize - preexistingBytes@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "unwrappedBuffer.position(7).limit(preexistingBytes + 7)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "unwrappedBuffer.position(unwrappedBuffer.capacity() - individualRead)@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "ByteBuffer unwrappedBuffer = ByteBuffer.allocate(initialUnwrappedBufferSize)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final int individualRead = 60@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ByteBuffer unwrappedBuffer = nioSslEngine.peerAppData@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * 3 + preexistingBytes)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "verify(mockChannel,times(3)).read(isA())@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "readAtLeast['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ByteBuffer data = nioSslEngine.readAtLeast(mockChannel,amountToRead,wrappedBuffer)@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "readAtLeast['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "unwrappedBuffer.position(unwrappedBuffer.capacity() - individualRead)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ByteBuffer unwrappedBuffer = inputSharing.getBuffer()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertThat(nioSslEngine.peerAppData.capacity()).isEqualTo(2 * initialFreeSpace + preexistingBytes)@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final int preexistingBytes = 10@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "nioSslEngine.peerAppData = unwrappedBuffer@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * 3 + preexistingBytes)@@@27@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "ByteBuffer data = sharedBuffer.getBuffer()@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "int initialUnwrappedBufferSize = 100@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "ByteBuffer wrappedBuffer = ByteBuffer.allocate(1000)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "unwrappedBuffer.limit(unwrappedBuffer.position() + preexistingBytes)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "readAtLeastUsingSmallAppBuffer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@19@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final int amountToRead = 150@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->10 [style = bold, label=""];
18->3 [style = bold, label=""];
5->31 [style = solid, label="individualRead"];
14->30 [style = bold, label=""];
15->23 [style = solid, label="preexistingBytes"];
21->19 [style = bold, label=""];
23->27 [style = bold, label=""];
5->19 [style = solid, label="individualRead"];
5->8 [style = solid, label="individualRead"];
15->24 [style = solid, label="preexistingBytes"];
31->9 [style = bold, label=""];
5->12 [style = solid, label="individualRead"];
0->23 [style = dashed, label="0"];
0->12 [style = bold, label=""];
22->9 [style = bold, label=""];
30->26 [style = bold, label=""];
9->32 [style = bold, label=""];
1->3 [style = bold, label=""];
7->13 [style = solid, label="amountToRead"];
5->29 [style = solid, label="individualRead"];
5->15 [style = bold, label=""];
27->31 [style = bold, label=""];
14->17 [style = bold, label=""];
4->30 [style = dashed, label="0"];
2->9 [style = bold, label=""];
15->28 [style = solid, label="preexistingBytes"];
15->16 [style = bold, label=""];
25->7 [style = bold, label=""];
15->19 [style = solid, label="preexistingBytes"];
5->0 [style = solid, label="individualRead"];
14->10 [style = solid, label="mockChannel"];
9->32 [style = dashed, label="0"];
9->6 [style = bold, label=""];
30->26 [style = solid, label="initialUnwrappedBufferSize"];
15->12 [style = solid, label="preexistingBytes"];
29->28 [style = bold, label=""];
8->0 [style = bold, label=""];
15->0 [style = solid, label="preexistingBytes"];
26->27 [style = solid, label="unwrappedBuffer"];
15->29 [style = solid, label="preexistingBytes"];
12->2 [style = bold, label=""];
7->5 [style = bold, label=""];
15->3 [style = solid, label="preexistingBytes"];
17->0 [style = bold, label=""];
5->22 [style = solid, label="individualRead"];
9->13 [style = solid, label="testSSLEngine"];
5->3 [style = solid, label="individualRead"];
30->28 [style = solid, label="initialUnwrappedBufferSize"];
6->13 [style = bold, label=""];
26->23 [style = bold, label=""];
28->24 [style = bold, label=""];
16->14 [style = bold, label=""];
4->8 [style = bold, label=""];
3->21 [style = bold, label=""];
16->13 [style = solid, label="wrappedBuffer"];
2->6 [style = solid, label="testSSLEngine"];
7->10 [style = solid, label="amountToRead"];
14->13 [style = solid, label="mockChannel"];
16->10 [style = solid, label="wrappedBuffer"];
20->7 [style = bold, label=""];
32->13 [style = bold, label=""];
10->1 [style = bold, label=""];
28->24 [style = solid, label="initialFreeSpace"];
3->29 [style = bold, label=""];
12->22 [style = bold, label=""];
11->7 [style = bold, label=""];
13->18 [style = bold, label=""];
14->4 [style = bold, label=""];
8->26 [style = dashed, label="0"];
}
