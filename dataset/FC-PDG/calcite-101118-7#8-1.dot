digraph {
47 [style = filled, label = "assertThat(buf.size(),equalTo(5))@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ColTypeImpl.THREAD_LIST.set(buf)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final RelRoot root = tester.withClusterFactory(null).convertSqlToRel(sql)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "final MyRelMetadataQuery mq = (MyRelMetadataQuery)rel.getCluster().getMetadataQuery()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "assertThat(buf.size(),equalTo(3))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(colType(mq,input,1),equalTo(\"EXPR$1-agg\"))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(timestamp,equalTo(0L))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(buf.size(),equalTo(7))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(colType(mq,input,1),equalTo(\"EXPR$1-agg\"))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "rel.getCluster().setMetadataProvider(new CachingRelMetadataProvider(rel.getCluster().getMetadataProvider(),planner))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertThat(buf.size(),equalTo(4))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final RelMetadataQuery mq = rel.getCluster().getMetadataQuery()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "testCustomProviderWithRelMetadataQuery['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertThat(buf.size(),equalTo(4))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertThat(buf.size(),equalTo(3))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(buf.size(),equalTo(5))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertThat(colType(mq1,input,0),equalTo(\"DEPTNO-agg\"))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final RelNode input = rel.getInput(0)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(rel,instanceOf())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final String sql = \"select deptno, count(*) from emp where deptno > 10 \" + \"group by deptno having count(*) = 0\"@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final MyRelMetadataQuery mq1 = (MyRelMetadataQuery)rel.getCluster().getMetadataQuery()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertThat(buf.size(),equalTo(3))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(buf.toString(),equalTo(\"(DEPTNO-rel, EXPR$1-rel, DEPTNO-agg(\"))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(colType(mq,rel,1),equalTo(\"EXPR$1-rel\"))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final RelNode rel = root.rel@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "rel.getCluster().setMetadataQuerySupplier(null)@@@41@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "assertThat(buf.size(),equalTo(5))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertThat(colType(mq,rel,0),equalTo(\"DEPTNO-rel\"))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertThat(rel.getCluster().getMetadataQuery(),instanceOf())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "long timestamp = planner.getRelMetadataTimestamp(rel)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final RelOptPlanner planner = rel.getCluster().getPlanner()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final List<String> buf = new ArrayList<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "rel.getCluster().invalidateMetadataQuery()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertThat(buf.size(),equalTo(4))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "assertThat(colType(mq1,input,0),equalTo(\"DEPTNO-agg\"))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "((MockRelOptPlanner)planner).setRelMetadataTimestamp(timestamp + 1)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertThat(colType(mq,input,1),equalTo(\"EXPR$1-agg\"))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(colType(mq,rel,0),equalTo(\"DEPTNO-rel\"))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testCustomProviderWithRelMetadataFactory['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertThat(rel.getCluster().getMetadataQuery(),instanceOf())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(colType(mq,input,1),equalTo(\"EXPR$1-agg\"))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertThat(buf.size(),equalTo(7))@@@42@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(input,instanceOf())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testCustomProviderWithRelMetadataFactory['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2->16 [style = solid, label="input"];
29->21 [style = solid, label="input"];
14->25 [style = bold, label=""];
2->17 [style = solid, label="input"];
30->13 [style = bold, label=""];
40->6 [style = bold, label=""];
25->45 [style = bold, label=""];
2->46 [style = solid, label="input"];
6->38 [style = dashed, label="0"];
26->40 [style = bold, label=""];
45->48 [style = bold, label=""];
29->14 [style = solid, label="input"];
25->31 [style = bold, label=""];
10->41 [style = dashed, label="0"];
29->2 [style = bold, label=""];
25->46 [style = solid, label="mq1"];
5->46 [style = dashed, label="0"];
1->21 [style = bold, label=""];
0->24 [style = bold, label=""];
6->41 [style = bold, label=""];
29->28 [style = solid, label="input"];
2->50 [style = solid, label="input"];
38->26 [style = bold, label=""];
32->18 [style = bold, label=""];
51->37 [style = solid, label="mq"];
51->16 [style = solid, label="mq"];
31->10 [style = solid, label="timestamp"];
29->8 [style = solid, label="input"];
24->33 [style = solid, label="sql"];
30->42 [style = bold, label=""];
43->51 [style = bold, label=""];
19->20 [style = solid, label="mq"];
25->40 [style = dashed, label="0"];
44->50 [style = bold, label=""];
47->39 [style = bold, label=""];
27->16 [style = bold, label=""];
26->44 [style = dashed, label="0"];
21->45 [style = dashed, label="0"];
13->7 [style = solid, label="planner"];
19->8 [style = solid, label="mq"];
51->18 [style = bold, label=""];
11->8 [style = bold, label=""];
12->32 [style = solid, label="rel"];
10->1 [style = bold, label=""];
51->26 [style = solid, label="mq"];
26->20 [style = bold, label=""];
19->17 [style = solid, label="mq"];
21->4 [style = bold, label=""];
2->45 [style = solid, label="input"];
2->17 [style = bold, label=""];
42->37 [style = bold, label=""];
16->52 [style = dashed, label="0"];
12->31 [style = solid, label="rel"];
2->37 [style = solid, label="input"];
19->14 [style = solid, label="mq"];
12->15 [style = solid, label="rel"];
51->18 [style = solid, label="mq"];
19->34 [style = solid, label="mq"];
23->0 [style = solid, label="buf"];
25->45 [style = solid, label="mq1"];
51->50 [style = solid, label="mq"];
49->23 [style = bold, label=""];
33->12 [style = bold, label=""];
15->19 [style = bold, label=""];
23->0 [style = bold, label=""];
31->1 [style = solid, label="timestamp"];
48->46 [style = bold, label=""];
24->33 [style = bold, label=""];
2->26 [style = solid, label="input"];
30->42 [style = dashed, label="0"];
19->32 [style = bold, label=""];
51->29 [style = solid, label="mq"];
52->16 [style = bold, label=""];
16->44 [style = bold, label=""];
31->10 [style = bold, label=""];
2->3 [style = solid, label="input"];
15->43 [style = bold, label=""];
17->3 [style = bold, label=""];
37->52 [style = bold, label=""];
29->34 [style = solid, label="input"];
51->30 [style = solid, label="mq"];
51->3 [style = solid, label="mq"];
4->48 [style = dashed, label="0"];
19->32 [style = solid, label="mq"];
4->5 [style = bold, label=""];
19->28 [style = solid, label="mq"];
5->35 [style = bold, label=""];
19->27 [style = solid, label="mq"];
19->18 [style = solid, label="mq"];
29->20 [style = solid, label="input"];
19->5 [style = solid, label="mq"];
35->47 [style = dashed, label="0"];
28->11 [style = bold, label=""];
12->15 [style = bold, label=""];
29->27 [style = solid, label="input"];
29->17 [style = solid, label="input"];
12->18 [style = solid, label="rel"];
20->6 [style = bold, label=""];
2->30 [style = solid, label="input"];
3->22 [style = bold, label=""];
46->47 [style = bold, label=""];
34->30 [style = bold, label=""];
12->29 [style = solid, label="rel"];
6->14 [style = bold, label=""];
9->23 [style = bold, label=""];
29->5 [style = solid, label="input"];
18->29 [style = bold, label=""];
16->28 [style = bold, label=""];
36->23 [style = bold, label=""];
50->38 [style = bold, label=""];
13->7 [style = bold, label=""];
19->43 [style = dashed, label="0"];
19->21 [style = solid, label="mq"];
22->34 [style = bold, label=""];
7->27 [style = bold, label=""];
41->25 [style = bold, label=""];
29->2 [style = solid, label="input"];
8->26 [style = bold, label=""];
}
