digraph {
6 [style = filled, label = "input.mark(0)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(\"InputStream.reset(), read()\",testString.byteAt(nearEndIndex) & 0xFF,input.read())@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(\"InputStream.available()\",stringSize - skipped1,input.available())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(\"InputStream.reset(), read()\",stringUnderTest.byteAt(nearEndIndex) & 0xFF,input.read())@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "int stringSize = TEST_STRING.size()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "long skipped2 = input.skip(stringSize)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"InputStream.skip(), no more input\",-1,input.read())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "int stringSize = testString.size()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(\"InputStream.skip(), no more input\",0,input.available())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"InputStream.skip() incomplete\",skipped2,stringSize - skipped1 - 1)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"InputStream.available()\",stringSize - skipped1 - 1,input.available())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "long skipped1 = input.skip(nearEndIndex)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"InputStream.reset(), read()\",TEST_STRING.byteAt(nearEndIndex) & 0xFF,input.read())@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "assertEquals(\"InputStream.skip(), read()\",stringUnderTest.byteAt(nearEndIndex) & 0xFF,input.read())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "InputStream input = TEST_STRING.newInput()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "input.reset()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "InputStream input = testString.newInput()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertTrue(\"InputStream.mark() is available\",input.markSupported())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"InputStream.skip()\",skipped1,nearEndIndex)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "int nearEndIndex = stringSize * 2 / 3@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testNewInput_skip['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "testNewInput_skip['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testNewInput_skip['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(\"InputStream.reset() succeded\",stringSize - skipped1,input.available())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "InputStream input = stringUnderTest.newInput()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "int stringSize = stringUnderTest.size()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(\"InputStream.skip(), read()\",TEST_STRING.byteAt(nearEndIndex) & 0xFF,input.read())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertEquals(\"InputStream.skip(), read()\",testString.byteAt(nearEndIndex) & 0xFF,input.read())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7->13 [style = bold, label=""];
7->14 [style = solid, label="skipped1"];
4->14 [style = bold, label=""];
21->15 [style = solid, label="stringSize"];
2->7 [style = solid, label="nearEndIndex"];
6->26 [style = bold, label=""];
21->14 [style = solid, label="stringSize"];
2->26 [style = solid, label="nearEndIndex"];
12->5 [style = bold, label=""];
10->2 [style = solid, label="stringSize"];
23->15 [style = solid, label="stringSize"];
10->21 [style = dashed, label="0"];
10->14 [style = solid, label="stringSize"];
6->22 [style = bold, label=""];
1->26 [style = dashed, label="0"];
21->9 [style = solid, label="stringSize"];
3->18 [style = dashed, label="0"];
0->12 [style = bold, label=""];
9->4 [style = bold, label=""];
22->9 [style = bold, label=""];
11->6 [style = bold, label=""];
8->3 [style = bold, label=""];
21->16 [style = solid, label="stringSize"];
23->9 [style = solid, label="stringSize"];
2->1 [style = solid, label="nearEndIndex"];
3->24 [style = dashed, label="0"];
7->13 [style = solid, label="skipped1"];
26->9 [style = bold, label=""];
16->25 [style = bold, label=""];
16->17 [style = bold, label=""];
16->19 [style = bold, label=""];
10->16 [style = solid, label="stringSize"];
2->13 [style = solid, label="nearEndIndex"];
10->4 [style = solid, label="stringSize"];
4->14 [style = solid, label="skipped2"];
23->4 [style = solid, label="stringSize"];
23->14 [style = solid, label="stringSize"];
17->25 [style = dashed, label="0"];
1->9 [style = bold, label=""];
2->17 [style = solid, label="nearEndIndex"];
21->2 [style = solid, label="stringSize"];
21->2 [style = bold, label=""];
1->22 [style = dashed, label="0"];
5->16 [style = bold, label=""];
20->18 [style = bold, label=""];
7->16 [style = solid, label="skipped1"];
3->10 [style = bold, label=""];
6->1 [style = bold, label=""];
23->2 [style = solid, label="stringSize"];
23->16 [style = solid, label="stringSize"];
10->15 [style = solid, label="stringSize"];
10->9 [style = solid, label="stringSize"];
15->11 [style = bold, label=""];
14->0 [style = bold, label=""];
2->22 [style = solid, label="nearEndIndex"];
7->9 [style = solid, label="skipped1"];
2->19 [style = solid, label="nearEndIndex"];
10->2 [style = bold, label=""];
27->24 [style = bold, label=""];
7->15 [style = solid, label="skipped1"];
13->15 [style = bold, label=""];
23->2 [style = bold, label=""];
2->7 [style = bold, label=""];
18->21 [style = bold, label=""];
21->4 [style = solid, label="stringSize"];
2->25 [style = solid, label="nearEndIndex"];
10->23 [style = dashed, label="0"];
17->19 [style = dashed, label="0"];
24->23 [style = bold, label=""];
}
