digraph {
1 [style = filled, label = "i++@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "segmentHandoffNotifierFactory.disableHandoff()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testHandoffTimeout['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testSimple['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(new SegmentIdentifier(DATA_SOURCE,Intervals.of(\"2000/PT1H\"),VERSION,new NumberedShardSpec(0,0)),new SegmentIdentifier(DATA_SOURCE,Intervals.of(\"2000T01/PT1H\"),VERSION,new NumberedShardSpec(0,0))),asIdentifiers(segmentsAndMetadata.getSegments()))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(driver.add(ROWS.get(i),\"dummy\",committerSupplier,false,true).isOk())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Thread.sleep(100)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "committerSupplier.setMetadata(i + 1)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertNull(driver.startJob())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "i < ROWS.size()@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(3,segmentsAndMetadata.getCommitMetadata())@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int i = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "driver.getSegments().containsKey(\"dummy\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testSimple['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(new SegmentIdWithShardSpec(DATA_SOURCE,Intervals.of(\"2000/PT1H\"),VERSION,new NumberedShardSpec(0,0)),new SegmentIdWithShardSpec(DATA_SOURCE,Intervals.of(\"2000T01/PT1H\"),VERSION,new NumberedShardSpec(0,0))),asIdentifiers(segmentsAndMetadata.getSegments()))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "final SegmentsAndMetadata published = driver.publish(makeOkPublisher(),committerSupplier.get(),ImmutableList.of(\"dummy\")).get(PUBLISH_TIMEOUT_MILLIS,TimeUnit.MILLISECONDS)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final SegmentsAndMetadata segmentsAndMetadata = driver.registerHandoff(published).get(HANDOFF_CONDITION_TIMEOUT_MILLIS,TimeUnit.MILLISECONDS)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "driver.registerHandoff(published).get(HANDOFF_CONDITION_TIMEOUT_MILLIS,TimeUnit.MILLISECONDS)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final TestCommitterSupplier<Integer> committerSupplier = new TestCommitterSupplier<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->16 [style = bold, label=""];
5->10 [style = bold, label=""];
0->9 [style = bold, label=""];
7->1 [style = bold, label=""];
5->2 [style = solid, label="i"];
0->15 [style = dashed, label="0"];
3->15 [style = bold, label=""];
11->13 [style = dotted, label="true"];
5->1 [style = solid, label="i"];
13->11 [style = bold, label=""];
10->6 [style = bold, label=""];
3->0 [style = bold, label=""];
8->17 [style = bold, label=""];
11->3 [style = bold, label=""];
10->2 [style = dotted, label="true"];
15->9 [style = bold, label=""];
12->8 [style = bold, label=""];
6->11 [style = bold, label=""];
11->13 [style = bold, label=""];
1->2 [style = solid, label="i"];
1->10 [style = solid, label="i"];
10->7 [style = dotted, label="true"];
10->2 [style = bold, label=""];
14->8 [style = bold, label=""];
18->8 [style = bold, label=""];
10->1 [style = dotted, label="true"];
8->4 [style = bold, label=""];
2->7 [style = bold, label=""];
1->10 [style = bold, label=""];
5->10 [style = solid, label="i"];
4->5 [style = bold, label=""];
17->4 [style = bold, label=""];
3->16 [style = dashed, label="0"];
}
