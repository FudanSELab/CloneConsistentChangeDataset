digraph {
6 [style = filled, label = "shouldShutdownTaskManagerOnCloseWithoutStart['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "shouldShutdownTaskManagerOnCloseWithoutStart['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "final ConsumerGroupMetadata consumerGroupMetadata = mock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "verify(taskManager)@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final TaskManager taskManager = EasyMock.createNiceMock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expect(taskManager.producerClientIds()).andStubReturn(Collections.emptySet())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "thread.run()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "EasyMock.expectLastCall()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expect(consumerGroupMetadata.groupInstanceId()).andReturn(Optional.empty())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final StreamThread thread = new StreamThread(mockTime,config,null,consumer,consumer,null,null,taskManager,streamsMetrics,internalTopologyBuilder,CLIENT_ID,new LogContext(\"\"),new AtomicInteger(),new AtomicLong(Long.MAX_VALUE),null,HANDLER,null).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics,CLIENT_ID,StreamsConfig.METRICS_LATEST,mockTime)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.replay(taskManager,consumer)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "taskManager.shutdown(true)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "shouldOnlyShutdownOnce['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "EasyMock.replay(consumerGroupMetadata)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final Consumer<byte((,byte((> consumer = EasyMock.createNiceMock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "thread.shutdown()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "expect(consumer.groupMetadata()).andStubReturn(consumerGroupMetadata)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->8 [style = bold, label=""];
16->11 [style = bold, label=""];
2->1 [style = bold, label=""];
3->14 [style = bold, label=""];
2->1 [style = solid, label="consumerGroupMetadata"];
12->5 [style = solid, label="consumer"];
7->4 [style = bold, label=""];
13->11 [style = bold, label=""];
13->16 [style = bold, label=""];
14->7 [style = bold, label=""];
12->2 [style = bold, label=""];
0->10 [style = bold, label=""];
17->12 [style = bold, label=""];
3->11 [style = solid, label="taskManager"];
5->0 [style = bold, label=""];
3->7 [style = bold, label=""];
10->13 [style = bold, label=""];
8->9 [style = bold, label=""];
9->3 [style = bold, label=""];
15->12 [style = bold, label=""];
3->5 [style = solid, label="taskManager"];
4->5 [style = bold, label=""];
2->9 [style = solid, label="consumerGroupMetadata"];
6->12 [style = bold, label=""];
}
