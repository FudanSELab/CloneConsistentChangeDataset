digraph {
15 [style = filled, label = "Observable.range(1,1000).buffer(10).concatMapEager(new Function<List<Integer>,ObservableSource<List<Integer>>>(){@Override public ObservableSource<List<Integer>> apply(List<Integer> v){return Observable.just(v).subscribeOn(Schedulers.io()).doOnNext(new Consumer<List<Integer>>(){@Override public void accept(List<Integer> v){Thread.sleep(new Random().nextInt(20))}})}},2,3).test().awaitDone(5,TimeUnit.SECONDS).assertResult(list)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Flowable.range(1,1000).buffer(10).concatMapEager(new Function<List<Integer>,Flowable<List<Integer>>>(){@Override public Flowable<List<Integer>> apply(List<Integer> v){return Flowable.just(v).subscribeOn(Schedulers.io()).doOnNext(new Consumer<List<Integer>>(){@Override public void accept(List<Integer> v){Thread.sleep(new Random().nextInt(20))}})}},2,3).test().awaitDone(5,TimeUnit.SECONDS).assertResult(list)@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "lst.add((i) * 10 + k)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "k++@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "List<Integer> lst = new ArrayList<>()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "List<Integer> lst = new ArrayList<Integer>()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "k <= 10@@@10@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "maxConcurrencyOf2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "int i = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "maxConcurrencyOf2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "int k = 1@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "i < 100@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "List<Integer>(( list = new ArrayList((((@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "list(i( = lst@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "maxConcurrencyOf2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "i++@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->3 [style = dotted, label="true"];
4->9 [style = bold, label=""];
5->10 [style = bold, label=""];
11->0 [style = solid, label="k"];
9->0 [style = dotted, label="true"];
4->0 [style = solid, label="k"];
9->0 [style = bold, label=""];
8->3 [style = solid, label="lst"];
8->3 [style = bold, label=""];
3->11 [style = bold, label=""];
14->10 [style = bold, label=""];
10->7 [style = solid, label="list"];
11->9 [style = bold, label=""];
3->15 [style = solid, label="list"];
11->4 [style = solid, label="k"];
9->6 [style = bold, label=""];
8->13 [style = dashed, label="0"];
2->13 [style = bold, label=""];
6->2 [style = bold, label=""];
3->6 [style = solid, label="i"];
3->0 [style = solid, label="i"];
3->7 [style = solid, label="list"];
11->9 [style = solid, label="k"];
2->11 [style = dotted, label="true"];
12->10 [style = bold, label=""];
6->2 [style = solid, label="i"];
2->9 [style = dotted, label="true"];
13->3 [style = bold, label=""];
0->4 [style = bold, label=""];
2->6 [style = dotted, label="true"];
1->2 [style = solid, label="i"];
2->15 [style = bold, label=""];
10->15 [style = solid, label="list"];
7->15 [style = dashed, label="0"];
9->4 [style = dotted, label="true"];
1->2 [style = bold, label=""];
2->7 [style = bold, label=""];
10->1 [style = bold, label=""];
4->9 [style = solid, label="k"];
13->3 [style = solid, label="lst"];
2->13 [style = dotted, label="true"];
2->8 [style = dotted, label="true"];
2->8 [style = bold, label=""];
}
