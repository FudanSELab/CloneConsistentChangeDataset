digraph {
20 [style = filled, label = "UniqueStream stream@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertTrue(expressionString.contains(\"max(a_i)\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(expressionString.contains(\"fl=\"id,a_s,a_i,a_f\"\"))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(expressionString.contains(\"stats(collection1,\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(expressionString.contains(\"unique(search(collection1\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testStatsStream['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(expressionString.contains(\"q=\"*:*\"\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "stream = new UniqueStream(StreamExpressionParser.parse(\"unique(search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\"), over=\"a_f\")\"),factory)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "stream = new StatsStream(StreamExpressionParser.parse(\"stats(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\", sum(a_i), avg(a_i), count(*), min(a_i), max(a_i))\"),factory)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(expressionString.contains(\"min(a_i)\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTrue(expressionString.contains(\"sort=\"a_f asc, a_i asc\"\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(expressionString.contains(\"avg(a_i)\"))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertTrue(expressionString.contains(\"avg(a_i,false)\"))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "testUniqueStream['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "expressionString = stream.toExpression(factory).toString()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testStatsStream['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "StatsStream stream@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(expressionString.contains(\"count(*)\"))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertTrue(expressionString.contains(\"over=a_f\"))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertTrue(expressionString.contains(\"sum(a_i)\"))@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "String expressionString@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->10 [style = bold, label=""];
16->18 [style = bold, label=""];
20->9 [style = bold, label=""];
7->17 [style = dashed, label="0"];
11->15 [style = dashed, label="0"];
19->20 [style = bold, label=""];
9->17 [style = bold, label=""];
11->12 [style = bold, label=""];
3->16 [style = bold, label=""];
9->7 [style = bold, label=""];
10->6 [style = bold, label=""];
7->3 [style = bold, label=""];
6->15 [style = bold, label=""];
1->9 [style = bold, label=""];
14->1 [style = bold, label=""];
1->20 [style = dashed, label="0"];
8->0 [style = bold, label=""];
12->2 [style = bold, label=""];
6->11 [style = bold, label=""];
17->3 [style = bold, label=""];
3->13 [style = bold, label=""];
8->18 [style = dashed, label="0"];
4->1 [style = bold, label=""];
15->12 [style = bold, label=""];
13->8 [style = bold, label=""];
0->5 [style = bold, label=""];
13->16 [style = dashed, label="0"];
}
