digraph {
2 [style = filled, label = "ReflectiveOperationInvoker invoker = new ReflectiveOperationInvoker(this.target,this.operationMethod,this.parameterValueMapper)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(result).isEqualTo(\"toob\")@@@5@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "invokeShouldResolveParameters['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(result).isEqualTo(\"4321\")@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "invokeShouldInvokeMethod['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Object result = invoker.invoke(new InvocationContext(null,Collections.singletonMap(\"name\",\"boot\")))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Object result = invoker.invoke(new InvocationContext(null,Collections.singletonMap(\"name\",1234)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "invokeShouldInvokeMethod['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Object result = invoker.invoke(new InvocationContext(mock(),Collections.singletonMap(\"name\",\"boot\")))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1->3 [style = bold, label=""];
1->4 [style = dashed, label="0"];
3->8 [style = dashed, label="0"];
4->3 [style = bold, label=""];
5->2 [style = bold, label=""];
2->4 [style = bold, label=""];
7->2 [style = bold, label=""];
2->6 [style = bold, label=""];
2->1 [style = bold, label=""];
1->6 [style = dashed, label="0"];
6->8 [style = bold, label=""];
0->2 [style = bold, label=""];
}
