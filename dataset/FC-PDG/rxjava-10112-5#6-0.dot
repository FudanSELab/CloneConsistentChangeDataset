digraph {
27 [style = filled, label = "SingleObserver<String> ts = new SingleObserver<String>(){@Override public void onSubscribe(Disposable d){sd.replace(d)}@Override public void onSuccess(String value){}@Override public void onError(Throwable error){}}@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "s1.toFlowable().subscribe(ts)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final AtomicBoolean interrupted = new AtomicBoolean()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "unsubscribe2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Single<String> s1 = Single.unsafeCreate(new SingleSource<String>(){@Override public void subscribe(final SingleObserver<? super String> observer){SerialDisposable sd = new SerialDisposable()observer.onSubscribe(sd)final Thread t = new Thread(new Runnable(){@Override public void run(){try {Thread.sleep(5000)observer.onSuccess(\"success\")}catch (InterruptedException e) }})sd.replace(Disposable.fromRunnable(new Runnable(){@Override public void run(){unsubscribed.set(true)t.interrupt()latch.countDown()}}))t.start()}})@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final AtomicBoolean unsubscribed = new AtomicBoolean()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertTrue(interrupted.get())@@@41@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "fail(\"timed out waiting for latch\")@@@44@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TestSubscriber<String> ts = new TestSubscriber<String>()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "sd.dispose()@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final CountDownLatch latch = new CountDownLatch(2)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Single<String> s1 = Single.unsafeCreate(new SingleSource<String>(){@Override public void subscribe(final SingleObserver<? super String> observer){SerialDisposable sd = new SerialDisposable()observer.onSubscribe(sd)final Thread t = new Thread(new Runnable(){@Override public void run(){try {Thread.sleep(5000)observer.onSuccess(\"success\")}catch (InterruptedException e) }})sd.replace(Disposable.fromRunnable(new Runnable(){@Override public void run(){unsubscribed.set(true)t.interrupt()latch.countDown()}}))t.start()}})@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "fail(\"timed out waiting for latch\")@@@54@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final CountDownLatch latch = new CountDownLatch(2)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertTrue(interrupted.get())@@@51@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Thread.sleep(100)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertTrue(unsubscribed.get())@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final AtomicBoolean unsubscribed = new AtomicBoolean()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "latch.await(1000,TimeUnit.MILLISECONDS)@@@39@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "TestSubscriber<String> ts = new TestSubscriber<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "unsubscribe['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertTrue(unsubscribed.get())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Thread.sleep(100)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "unsubscribe['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "latch.await(1000,TimeUnit.MILLISECONDS)@@@49@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final AtomicBoolean interrupted = new AtomicBoolean()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "s1.subscribe(ts)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final SerialDisposable sd = new SerialDisposable()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "ts.cancel()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->6 [style = dotted, label="true"];
4->10 [style = bold, label=""];
4->5 [style = dotted, label="true"];
27->17 [style = solid, label="ts"];
9->2 [style = bold, label=""];
4->6 [style = bold, label=""];
7->17 [style = dashed, label="0"];
18->15 [style = bold, label=""];
23->26 [style = bold, label=""];
22->21 [style = bold, label=""];
11->12 [style = bold, label=""];
16->17 [style = bold, label=""];
13->7 [style = solid, label="ts"];
15->16 [style = bold, label=""];
2->4 [style = bold, label=""];
24->18 [style = bold, label=""];
13->1 [style = bold, label=""];
21->28 [style = bold, label=""];
1->11 [style = bold, label=""];
20->22 [style = bold, label=""];
21->28 [style = dotted, label="false"];
8->0 [style = bold, label=""];
7->9 [style = bold, label=""];
6->5 [style = bold, label=""];
21->26 [style = dotted, label="true"];
3->7 [style = bold, label=""];
0->7 [style = solid, label="ts"];
0->1 [style = bold, label=""];
21->23 [style = dotted, label="true"];
19->27 [style = bold, label=""];
0->13 [style = dashed, label="0"];
25->19 [style = bold, label=""];
27->24 [style = bold, label=""];
12->3 [style = bold, label=""];
14->13 [style = bold, label=""];
4->10 [style = dotted, label="false"];
2->22 [style = dashed, label="0"];
19->16 [style = solid, label="sd"];
3->16 [style = dashed, label="0"];
17->20 [style = bold, label=""];
21->23 [style = bold, label=""];
}
