digraph {
37 [style = filled, label = "client.poll(1,time.milliseconds())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(400,(Double)maxMetric.metricValue(),EPSILON)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(250,(Double)avgMetric.metricValue(),EPS)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "selector.delayedReceive(new DelayedReceive(node.idString(),new NetworkReceive(node.idString(),buffer)))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "builder.rackId(\"\")@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "MockSelector selector = new MockSelector(time)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "testQuotaMetrics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "client.send(request,time.milliseconds())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "ByteBuffer buffer = ApiVersionsResponse.createApiVersionsResponse(400,RecordBatch.CURRENT_MAGIC_VALUE).serialize(ApiKeys.API_VERSIONS,ApiKeys.API_VERSIONS.latestVersion(),0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "client.close()@@@35@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "ProduceRequest.Builder builder = ProduceRequest.Builder.forCurrentMagic((short)1,1000,Collections.emptyMap())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "client.poll(1,time.milliseconds())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "NetworkClient client = new NetworkClient(selector,metadata,\"mock\",Integer.MAX_VALUE,1000,1000,64 * 1024,64 * 1024,1000,ClientDnsLookup.DEFAULT,time,true,new ApiVersions(),throttleTimeSensor,logContext)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "i++@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "NetworkClient client = new NetworkClient(selector,metadata,\"mock\",Integer.MAX_VALUE,1000,1000,64 * 1024,64 * 1024,1000,ClientDnsLookup.DEFAULT,time,true,new ApiVersions(),throttleTimeSensor,new LogContext())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchThrottleTimeMax))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "FetchRequest.Builder builder = FetchRequest.Builder.forConsumer(100,100,new LinkedHashMap<>())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Node node = cluster.nodes().get(0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "!client.ready(node,time.milliseconds())@@@10@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "buildFetcher()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "client.close()@@@37@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "time.sleep(client.throttleDelayMs(node,time.milliseconds()))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testQuotaMetrics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertEquals(250,(Double)avgMetric.metricValue(),EPSILON)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "time.sleep(client.throttleDelayMs(node,time.milliseconds()))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "buffer = response.serialize(ApiKeys.PRODUCE,ApiKeys.PRODUCE.latestVersion(),request.correlationId())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "ClientRequest request = client.newClientRequest(node.idString(),builder,time.milliseconds(),true)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Sensor throttleTimeSensor = Fetcher.throttleTimeSensor(metrics,metricsRegistry)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertEquals(400,(Double)maxMetric.metricValue(),EPS)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "buffer = response.serialize(ApiKeys.FETCH,ApiKeys.FETCH.latestVersion(),request.correlationId())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testQuotaMetrics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "selector.completeReceive(new NetworkReceive(node.idString(),buffer))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "time.sleep(client.throttleDelayMs(node,time.milliseconds()))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(this.senderMetricsRegistry.produceThrottleTimeMax)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "FetchResponse<MemoryRecords> response = fullFetchResponse(tp0,nextRecords,Errors.NONE,i,throttleTimeMs)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "ProduceResponse response = produceResponse(tp0,i,Errors.NONE,throttleTimeMs)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "int throttleTimeMs = 100 * i@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "ByteBuffer buffer = ApiVersionsResponse.createApiVersionsResponse(400,RecordBatch.CURRENT_MAGIC_VALUE).serialize(ApiKeys.API_VERSIONS,ApiKeys.API_VERSIONS.latestVersion(),0)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Cluster cluster = TestUtils.singletonCluster(\"test\",1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "selector.clear()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchThrottleTimeAvg))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "FetchResponse response = fullFetchResponse(tp0,nextRecords,Errors.NONE,i,throttleTimeMs)@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "int i = 1@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "time.sleep(client.throttleDelayMs(node,time.milliseconds()))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Sensor throttleTimeSensor = Sender.throttleTimeSensor(this.senderMetricsRegistry)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(this.senderMetricsRegistry.produceThrottleTimeAvg)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "client.poll(1,time.milliseconds())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "selector.clear()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "i <= 3@@@16@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
30->0 [style = solid, label="throttleTimeSensor"];
15->10 [style = bold, label=""];
29->5 [style = bold, label=""];
9->14 [style = solid, label="i"];
34->20 [style = bold, label=""];
26->45 [style = dotted, label="true"];
32->29 [style = solid, label="node"];
26->37 [style = dotted, label="true"];
2->6 [style = bold, label=""];
9->26 [style = solid, label="i"];
11->12 [style = dotted, label="true"];
26->34 [style = solid, label="i"];
1->27 [style = bold, label=""];
14->11 [style = solid, label="i"];
44->4 [style = solid, label="selector"];
11->26 [style = solid, label="i"];
25->29 [style = dotted, label="true"];
46->48 [style = bold, label=""];
26->11 [style = bold, label=""];
9->10 [style = solid, label="i"];
21->28 [style = bold, label=""];
26->49 [style = dotted, label="true"];
9->26 [style = bold, label=""];
7->9 [style = bold, label=""];
11->34 [style = dotted, label="true"];
11->2 [style = dotted, label="true"];
4->5 [style = solid, label="node"];
24->19 [style = dashed, label="0"];
26->28 [style = dotted, label="true"];
2->45 [style = solid, label="builder"];
27->17 [style = bold, label=""];
11->28 [style = dotted, label="true"];
32->4 [style = bold, label=""];
15->10 [style = solid, label="request"];
11->15 [style = dotted, label="true"];
14->11 [style = bold, label=""];
13->14 [style = bold, label=""];
42->39 [style = solid, label="buffer"];
7->29 [style = bold, label=""];
11->33 [style = dotted, label="true"];
41->32 [style = bold, label=""];
36->9 [style = bold, label=""];
20->18 [style = dashed, label="0"];
11->10 [style = dotted, label="true"];
25->36 [style = bold, label=""];
26->2 [style = dotted, label="true"];
17->41 [style = bold, label=""];
11->14 [style = dotted, label="true"];
26->14 [style = bold, label=""];
37->21 [style = bold, label=""];
0->4 [style = dashed, label="0"];
13->40 [style = bold, label=""];
11->13 [style = dotted, label="true"];
18->43 [style = solid, label="buffer"];
23->8 [style = bold, label=""];
20->21 [style = solid, label="buffer"];
25->7 [style = bold, label=""];
44->17 [style = bold, label=""];
26->13 [style = bold, label=""];
4->0 [style = bold, label=""];
7->29 [style = dotted, label="true"];
26->43 [style = dotted, label="true"];
2->33 [style = solid, label="throttleTimeMs"];
17->4 [style = solid, label="throttleTimeSensor"];
26->14 [style = dotted, label="true"];
33->10 [style = dashed, label="0"];
47->44 [style = bold, label=""];
5->7 [style = bold, label=""];
38->46 [style = bold, label=""];
26->18 [style = dotted, label="true"];
39->25 [style = bold, label=""];
26->33 [style = solid, label="i"];
19->38 [style = bold, label=""];
19->22 [style = bold, label=""];
26->11 [style = solid, label="i"];
45->49 [style = solid, label="request"];
2->34 [style = solid, label="throttleTimeMs"];
0->31 [style = bold, label=""];
11->26 [style = bold, label=""];
11->10 [style = solid, label="i"];
10->18 [style = bold, label=""];
31->25 [style = bold, label=""];
18->34 [style = bold, label=""];
18->33 [style = bold, label=""];
42->39 [style = bold, label=""];
40->19 [style = bold, label=""];
30->17 [style = dashed, label="0"];
30->32 [style = bold, label=""];
32->21 [style = solid, label="node"];
31->42 [style = dashed, label="0"];
16->23 [style = bold, label=""];
28->12 [style = bold, label=""];
26->2 [style = solid, label="i"];
14->34 [style = solid, label="i"];
25->7 [style = dotted, label="true"];
7->5 [style = dotted, label="true"];
12->13 [style = bold, label=""];
11->20 [style = dotted, label="true"];
14->33 [style = solid, label="i"];
23->46 [style = dashed, label="0"];
11->6 [style = dotted, label="true"];
11->14 [style = solid, label="i"];
26->15 [style = dotted, label="true"];
2->45 [style = bold, label=""];
49->15 [style = bold, label=""];
14->2 [style = bold, label=""];
26->11 [style = dotted, label="true"];
11->3 [style = dotted, label="true"];
26->14 [style = solid, label="i"];
35->27 [style = bold, label=""];
16->38 [style = dashed, label="0"];
33->20 [style = bold, label=""];
22->40 [style = dashed, label="0"];
45->49 [style = bold, label=""];
28->11 [style = bold, label=""];
4->42 [style = bold, label=""];
29->25 [style = bold, label=""];
17->30 [style = bold, label=""];
3->15 [style = bold, label=""];
43->37 [style = bold, label=""];
11->19 [style = bold, label=""];
11->18 [style = dotted, label="true"];
11->2 [style = bold, label=""];
6->15 [style = solid, label="builder"];
31->25 [style = solid, label="buffer"];
20->21 [style = bold, label=""];
9->11 [style = solid, label="i"];
24->16 [style = bold, label=""];
18->43 [style = bold, label=""];
26->21 [style = dotted, label="true"];
14->10 [style = solid, label="throttleTimeMs"];
4->12 [style = solid, label="node"];
26->10 [style = dotted, label="true"];
22->24 [style = bold, label=""];
11->21 [style = dotted, label="true"];
33->34 [style = dashed, label="0"];
14->2 [style = solid, label="i"];
17->0 [style = solid, label="selector"];
6->2 [style = dashed, label="0"];
}
