digraph {
57 [style = filled, label = "testHarness.processElement(new Tuple2<>(0,\"SET_EVENT_TIME_TIMER:20\"),0)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(extractResult(testHarness3),contains(\"ON_EVENT_TIME:HELLO\"))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(extractResult(testHarness3),contains(\"ON_EVENT_TIME:HELLO\"))@@@34@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "OperatorSubtaskState repackagedState = AbstractStreamOperatorTestHarness.repackageState(testHarness1.snapshot(0,0),testHarness2.snapshot(0,0))@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness2 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator2,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,2,1)@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "OperatorSubtaskState snapshot1,snapshot2@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
60 [style = filled, label = "testHarness.processElement(new Tuple2<>(0,\"SET_PROC_TIME_TIMER:10\"),0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "testHarness3.setup()@@@30@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "testHarness.open()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testHarness2.processElement(new Tuple2<>(key2,\"SET_STATE:CIAO\"),0)@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "TestOperator testOperator1 = new TestOperator()@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "int key1 = getKeyInKeyGroupRange(subKeyGroupRange1,maxParallelism)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testHarness3.processWatermark(30L)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testHarness2.open()@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(testOperator,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "testHarness3.open()@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "TestOperator testOperator = new TestOperator()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testHarness2.setProcessingTime(0L)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "testHarness.processWatermark(0L)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(extractResult(testHarness3).isEmpty())@@@35@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testHarness3.initializeState(initSubTaskState)@@@31@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "TestOperator testOperator2 = new TestOperator()@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "testHarness1.processElement(new Tuple2<>(key1,\"SET_PROC_TIME_TIMER:30\"),0)@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
52 [style = filled, label = "assertThat(extractResult(testHarness3),contains(\"ON_PROC_TIME:HELLO\"))@@@42@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "testHarness2.processElement(new Tuple2<>(key2,\"SET_STATE:CIAO\"),0)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testHarness3.processWatermark(40L)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testHarness2.processWatermark(0L)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "assertThat(extractResult(testHarness),contains(\"ON_EVENT_TIME:HELLO\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "testHarness1.open()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertTrue(extractResult(testHarness3).isEmpty())@@@46@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "testHarness3.open()@@@32@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "KeyGroupRange subKeyGroupRange2 = new KeyGroupRange(subKeyGroupRange1.getEndKeyGroup() + 1,maxParallelism - 1)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testHarness2.processElement(new Tuple2<>(key2,\"SET_PROC_TIME_TIMER:40\"),0)@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "testHarness1.setProcessingTime(0L)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "snapshot2 = testHarness2.snapshot(0,0)@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "assertTrue(extractResult(testHarness3).isEmpty())@@@43@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "testHarness2.setup()@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final int maxParallelism = 10@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "testHarness.setProcessingTime(0L)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertTrue(extractResult(testHarness3).isEmpty())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "testHarness1.processElement(new Tuple2<>(key1,\"SET_STATE:HELLO\"),0)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "int key2 = getKeyInKeyGroupRange(subKeyGroupRange2,maxParallelism)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "KeyGroupRange subKeyGroupRange1 = new KeyGroupRange(0,(maxParallelism / 2) - 1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testHarness2.setup()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testHarness3.setProcessingTime(30L)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "testStateAndTimerStateShufflingScalingDown['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "testHarness1.setup()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(extractResult(testHarness3),contains(\"ON_EVENT_TIME:CIAO\"))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testStateAndTimerStateShufflingScalingDown['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "OperatorSubtaskState initSubTaskState = AbstractStreamOperatorTestHarness.repartitionOperatorState(repackagedState,maxParallelism,2,1,0)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testHarness2.processElement(new Tuple2<>(key2,\"SET_PROC_TIME_TIMER:40\"),0)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertThat(extractResult(testHarness3),contains(\"ON_PROC_TIME:CIAO\"))@@@45@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
62 [style = filled, label = "testProcessingTimeAndEventTimeDontInterfere['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "OperatorSubtaskState repackagedState = AbstractStreamOperatorTestHarness.repackageState(snapshot1,snapshot2)@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
63 [style = filled, label = "testHarness.setProcessingTime(10L)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "testHarness3.initializeState(initSubTaskState)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testHarness2.setProcessingTime(0L)@@@19@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testHarness2.processElement(new Tuple2<>(key2,\"SET_EVENT_TIME_TIMER:40\"),0)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness1 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator1,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,2,0)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
64 [style = filled, label = "testHarness.processWatermark(20L)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "testHarness.processElement(new Tuple2<>(0,\"SET_STATE:HELLO\"),0)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "testHarness1.processWatermark(0L)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "snapshot1 = testHarness1.snapshot(0,0)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "testHarness3.setup()@@@32@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "testHarness2.processWatermark(0L)@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "assertThat(extractResult(testHarness),contains(\"ON_PROC_TIME:HELLO\"))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "testHarness3.setProcessingTime(40L)@@@44@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertTrue(extractResult(testHarness3).isEmpty())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testHarness2.open()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "testHarness1.processElement(new Tuple2<>(key1,\"SET_EVENT_TIME_TIMER:30\"),0)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
42->23 [style = bold, label=""];
52->44 [style = bold, label=""];
15->2 [style = solid, label="maxParallelism"];
37->28 [style = bold, label=""];
25->52 [style = bold, label=""];
15->7 [style = solid, label="maxParallelism"];
15->12 [style = solid, label="maxParallelism"];
32->8 [style = solid, label="key1"];
40->13 [style = bold, label=""];
61->64 [style = bold, label=""];
30->11 [style = bold, label=""];
19->7 [style = solid, label="testOperator3"];
22->0 [style = bold, label=""];
48->43 [style = bold, label=""];
51->47 [style = bold, label=""];
29->14 [style = bold, label=""];
15->5 [style = solid, label="maxParallelism"];
18->32 [style = bold, label=""];
32->3 [style = bold, label=""];
3->21 [style = solid, label="key2"];
16->9 [style = bold, label=""];
3->7 [style = solid, label="key2"];
41->64 [style = dashed, label="0"];
2->32 [style = solid, label="subKeyGroupRange1"];
36->6 [style = bold, label=""];
7->38 [style = solid, label="testHarness3"];
1->41 [style = bold, label=""];
59->60 [style = bold, label=""];
3->5 [style = solid, label="key2"];
57->61 [style = bold, label=""];
7->46 [style = bold, label=""];
20->12 [style = solid, label="testOperator1"];
32->45 [style = solid, label="key1"];
36->6 [style = solid, label="testOperator2"];
2->18 [style = bold, label=""];
39->5 [style = solid, label="repackagedState"];
12->1 [style = bold, label=""];
35->21 [style = bold, label=""];
13->16 [style = bold, label=""];
3->53 [style = bold, label=""];
15->18 [style = solid, label="maxParallelism"];
6->4 [style = bold, label=""];
15->3 [style = solid, label="maxParallelism"];
60->57 [style = bold, label=""];
31->69 [style = dashed, label="0"];
21->22 [style = bold, label=""];
34->36 [style = bold, label=""];
17->15 [style = bold, label=""];
7->42 [style = bold, label=""];
23->10 [style = bold, label=""];
33->30 [style = bold, label=""];
7->9 [style = solid, label="testHarness3"];
56->33 [style = bold, label=""];
3->22 [style = solid, label="key2"];
11->26 [style = bold, label=""];
32->24 [style = solid, label="key1"];
0->39 [style = bold, label=""];
8->24 [style = bold, label=""];
66->65 [style = bold, label=""];
46->56 [style = bold, label=""];
39->5 [style = bold, label=""];
45->51 [style = bold, label=""];
65->67 [style = solid, label="testHarness"];
34->55 [style = bold, label=""];
62->66 [style = bold, label=""];
56->33 [style = solid, label="repackagedState"];
31->34 [style = bold, label=""];
3->19 [style = solid, label="key2"];
65->69 [style = solid, label="testHarness"];
5->19 [style = bold, label=""];
21->5 [style = bold, label=""];
27->37 [style = bold, label=""];
7->40 [style = solid, label="testHarness3"];
32->35 [style = solid, label="key1"];
28->8 [style = bold, label=""];
63->67 [style = bold, label=""];
18->3 [style = solid, label="subKeyGroupRange2"];
1->61 [style = dashed, label="0"];
53->1 [style = bold, label=""];
41->31 [style = bold, label=""];
10->33 [style = bold, label=""];
46->56 [style = solid, label="snapshot2"];
50->15 [style = bold, label=""];
33->49 [style = bold, label=""];
43->54 [style = bold, label=""];
15->33 [style = solid, label="maxParallelism"];
15->32 [style = solid, label="maxParallelism"];
33->26 [style = solid, label="initSubTaskState"];
32->51 [style = solid, label="key1"];
32->55 [style = solid, label="key1"];
58->68 [style = bold, label=""];
15->2 [style = bold, label=""];
47->8 [style = bold, label=""];
7->30 [style = solid, label="testHarness3"];
24->35 [style = bold, label=""];
64->69 [style = bold, label=""];
38->29 [style = bold, label=""];
47->56 [style = solid, label="snapshot1"];
15->6 [style = solid, label="maxParallelism"];
5->23 [style = solid, label="initSubTaskState"];
26->38 [style = bold, label=""];
3->20 [style = bold, label=""];
65->58 [style = bold, label=""];
44->48 [style = bold, label=""];
9->25 [style = bold, label=""];
3->0 [style = solid, label="key2"];
4->27 [style = bold, label=""];
20->12 [style = bold, label=""];
68->59 [style = bold, label=""];
49->26 [style = bold, label=""];
19->7 [style = bold, label=""];
14->40 [style = bold, label=""];
66->65 [style = solid, label="testOperator"];
55->45 [style = bold, label=""];
69->63 [style = bold, label=""];
34->63 [style = dashed, label="0"];
}
