digraph {
7 [style = filled, label = "Artifact modifiedC = createArtifactSpec(\"c\",\"3.0\",Artifact.SCOPE_COMPILE).artifact@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ArtifactResolutionResult res = collect(createSet(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1929038))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"Check artifact list\",createSet(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1929047),res.getArtifacts())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ArtifactSpec c = createArtifactSpec(\"c\",\"3.0\",Artifact.SCOPE_PROVIDED)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(Artifact.SCOPE_TEST,artifact.getScope(),\"Check artifactScope\")@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "a.addDependency(\"c\",\"2.0\",Artifact.SCOPE_COMPILE)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testResolveRuntimeScopeOverProvidedScope['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ArtifactSpec c = createArtifactSpec(\"c\",\"3.0\",Artifact.SCOPE_TEST)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ArtifactSpec a = createArtifactSpec(\"a\",\"1.0\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"Check artifactScope\",Artifact.SCOPE_PROVIDED,artifact.getScope())@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(createSet(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1928fe4),res.getArtifacts(),\"Check artifact list\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "a.addDependency(\"c\",\"2.0\",Artifact.SCOPE_RUNTIME)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testResolveCompileScopeOverTestScope['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Artifact artifact = getArtifact(\"c\",res.getArtifacts())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Artifact modifiedC = createArtifactSpec(\"c\",\"3.0\",Artifact.SCOPE_RUNTIME).artifact@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testResolveCompileScopeOverTestScope['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertEquals(\"Check artifactScope\",Artifact.SCOPE_TEST,artifact.getScope())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15->13 [style = bold, label=""];
7->8 [style = solid, label="modifiedC"];
12->5 [style = bold, label=""];
7->16 [style = dashed, label="0"];
16->6 [style = bold, label=""];
1->3 [style = bold, label=""];
0->15 [style = dashed, label="0"];
5->15 [style = bold, label=""];
13->16 [style = bold, label=""];
4->7 [style = bold, label=""];
1->11 [style = bold, label=""];
8->9 [style = dashed, label="0"];
8->1 [style = bold, label=""];
10->5 [style = bold, label=""];
16->8 [style = solid, label="modifiedC"];
5->0 [style = bold, label=""];
0->4 [style = bold, label=""];
6->8 [style = bold, label=""];
7->6 [style = bold, label=""];
7->9 [style = solid, label="modifiedC"];
1->14 [style = bold, label=""];
6->9 [style = bold, label=""];
9->1 [style = bold, label=""];
4->13 [style = dashed, label="0"];
3->14 [style = dashed, label="0"];
3->11 [style = dashed, label="0"];
2->5 [style = bold, label=""];
}
