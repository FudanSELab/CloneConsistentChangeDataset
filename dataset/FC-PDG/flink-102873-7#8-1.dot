digraph {
18 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 20))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",2),Long.MAX_VALUE))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testCountTrigger['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testHarness.configureForKeyedStream(new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ListStateDescriptor<StreamRecord<Tuple2<String,Integer>>> stateDesc = new ListStateDescriptor<>(\"window-contents\",new StreamRecordSerializer<>(inputType.createSerializer(new ExecutionConfig())))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testHarness.close()@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",2),Long.MAX_VALUE))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "operator.setInputType(inputType,new ExecutionConfig())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "Assert.assertEquals(\"Close was not called.\",1,closeCalled.get())@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",4),Long.MAX_VALUE))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final int WINDOW_SIZE = 4@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",4),Long.MAX_VALUE))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final int WINDOW_SLIDE = 2@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "operator.setInputType(inputType,new ExecutionConfig())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "EvictingWindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator = new EvictingWindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),CountTrigger.of(WINDOW_SLIDE),CountEvictor.of(WINDOW_SIZE),0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3000))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",4),Long.MAX_VALUE))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "long initialTime = 0L@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1998))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 999))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final int WINDOW_SIZE = 4@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "AtomicInteger closeCalled = new AtomicInteger(0)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@31@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new OneInputStreamOperatorTestHarness<>(operator)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "long initialTime = 0L@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1999))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testCountTriggerWithApply['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TypeInformation<Tuple2<String,Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3999))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testCountTrigger['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testHarness.open()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 10999))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->32 [style = solid, label="operator"];
3->24 [style = bold, label=""];
27->9 [style = bold, label=""];
19->26 [style = solid, label="expectedOutput"];
0->7 [style = solid, label="stateDesc"];
0->10 [style = solid, label="inputType"];
2->27 [style = solid, label="initialTime"];
10->32 [style = dashed, label="0"];
2->18 [style = solid, label="initialTime"];
7->16 [style = bold, label=""];
26->15 [style = bold, label=""];
29->14 [style = bold, label=""];
2->22 [style = solid, label="initialTime"];
2->23 [style = solid, label="initialTime"];
37->33 [style = bold, label=""];
14->11 [style = bold, label=""];
30->14 [style = solid, label="initialTime"];
2->3 [style = solid, label="initialTime"];
22->25 [style = bold, label=""];
17->5 [style = bold, label=""];
2->20 [style = bold, label=""];
15->13 [style = bold, label=""];
17->7 [style = solid, label="WINDOW_SIZE"];
5->7 [style = solid, label="WINDOW_SLIDE"];
23->3 [style = bold, label=""];
16->32 [style = bold, label=""];
19->2 [style = bold, label=""];
2->14 [style = solid, label="expectedOutput"];
19->9 [style = solid, label="initialTime"];
24->18 [style = bold, label=""];
2->24 [style = solid, label="initialTime"];
30->9 [style = solid, label="initialTime"];
36->1 [style = solid, label="operator"];
30->21 [style = solid, label="initialTime"];
0->7 [style = bold, label=""];
35->5 [style = bold, label=""];
25->27 [style = bold, label=""];
30->19 [style = bold, label=""];
13->37 [style = bold, label=""];
30->22 [style = solid, label="initialTime"];
5->36 [style = solid, label="WINDOW_SIZE"];
18->4 [style = bold, label=""];
21->22 [style = bold, label=""];
19->11 [style = solid, label="initialTime"];
20->11 [style = solid, label="expectedOutput"];
19->29 [style = solid, label="expectedOutput"];
34->35 [style = bold, label=""];
2->9 [style = solid, label="initialTime"];
12->16 [style = solid, label="inputType"];
1->19 [style = bold, label=""];
10->1 [style = bold, label=""];
2->6 [style = solid, label="initialTime"];
19->24 [style = solid, label="initialTime"];
30->3 [style = solid, label="initialTime"];
4->29 [style = bold, label=""];
30->20 [style = solid, label="initialTime"];
32->30 [style = bold, label=""];
30->25 [style = solid, label="initialTime"];
28->17 [style = bold, label=""];
19->27 [style = solid, label="initialTime"];
35->36 [style = solid, label="closeCalled"];
31->17 [style = bold, label=""];
7->10 [style = solid, label="operator"];
2->8 [style = solid, label="initialTime"];
7->36 [style = bold, label=""];
36->10 [style = bold, label=""];
16->10 [style = bold, label=""];
19->23 [style = solid, label="initialTime"];
11->6 [style = bold, label=""];
30->27 [style = solid, label="initialTime"];
12->36 [style = solid, label="WINDOW_SLIDE"];
19->21 [style = solid, label="initialTime"];
2->25 [style = solid, label="initialTime"];
12->0 [style = bold, label=""];
19->25 [style = solid, label="initialTime"];
20->21 [style = bold, label=""];
9->23 [style = bold, label=""];
7->36 [style = solid, label="stateDesc"];
19->22 [style = solid, label="initialTime"];
5->12 [style = bold, label=""];
6->8 [style = bold, label=""];
19->6 [style = solid, label="initialTime"];
19->3 [style = solid, label="initialTime"];
30->23 [style = solid, label="initialTime"];
2->15 [style = solid, label="expectedOutput"];
7->36 [style = dashed, label="0"];
20->13 [style = solid, label="expectedOutput"];
8->26 [style = bold, label=""];
30->11 [style = solid, label="initialTime"];
}
