digraph {
4 [style = filled, label = "return matchQuery.parse(MatchQuery.Type.PHRASE,fieldName,value)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "queryParser.setZeroTermsQuery(zeroTermsQuery)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "MatchQuery matchQuery = new MatchQuery(context)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "matchQuery.setZeroTermsQuery(zeroTermsQuery)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "queryParser.setAnalyzer(analyzer)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "matchQuery.setAnalyzer(analyzer)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "matchQuery.setFuzzyPrefixLength(prefixLength)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final Query query = matchQuery.parse(MatchQuery.Type.BOOLEAN_PREFIX,fieldName,value)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "analyzer != null && context.getIndexAnalyzers().get(analyzer) == null@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "matchQuery.setTranspositions(fuzzyTranspositions)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "doToQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "throw new QueryShardException(context,\"(\" + NAME + \"( analyzer (\" + analyzer + \"( not found\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "matchQuery.setFuzzyRewriteMethod(QueryParsers.parseRewriteMethod(fuzzyRewrite,null,LoggingDeprecationHandler.INSTANCE))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "doToQuery['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "matchQuery.setPhraseSlop(slop)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "return queryParser.parse(MatchQueryParser.Type.PHRASE,fieldName,value)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "MatchQueryParser queryParser = new MatchQueryParser(context)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "doToQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "return Queries.maybeApplyMinimumShouldMatch(query,minimumShouldMatch)@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "matchQuery.setOccur(operator.toBooleanClauseOccur())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "analyzer != null@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "SearchExecutionContext context@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "matchQuery.setFuzziness(fuzziness)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "queryParser.setPhraseSlop(slop)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "final MatchQuery matchQuery = new MatchQuery(context)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "matchQuery.setMaxExpansions(maxExpansions)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24->6 [style = dotted, label="true"];
5->8 [style = bold, label=""];
23->25 [style = bold, label=""];
6->0 [style = solid, label="context"];
9->10 [style = dashed, label="0"];
7->1 [style = bold, label=""];
1->10 [style = dotted, label="true"];
18->23 [style = bold, label=""];
9->2 [style = bold, label=""];
19->20 [style = bold, label=""];
2->3 [style = bold, label=""];
0->12 [style = bold, label=""];
5->6 [style = dotted, label="true"];
1->18 [style = bold, label=""];
6->12 [style = solid, label="context"];
12->1 [style = bold, label=""];
3->13 [style = dashed, label="0"];
3->4 [style = bold, label=""];
1->9 [style = bold, label=""];
8->7 [style = bold, label=""];
1->11 [style = bold, label=""];
6->22 [style = solid, label="context"];
0->7 [style = bold, label=""];
8->22 [style = bold, label=""];
20->21 [style = bold, label=""];
8->0 [style = bold, label=""];
3->23 [style = dashed, label="0"];
9->18 [style = bold, label=""];
17->16 [style = solid, label="query"];
1->9 [style = dotted, label="true"];
15->6 [style = dotted, label="true"];
11->13 [style = bold, label=""];
0->22 [style = bold, label=""];
25->19 [style = bold, label=""];
2->18 [style = dashed, label="0"];
7->12 [style = dashed, label="0"];
6->7 [style = solid, label="context"];
2->11 [style = dashed, label="0"];
8->0 [style = dotted, label="true"];
1->2 [style = bold, label=""];
4->14 [style = dashed, label="0"];
22->1 [style = bold, label=""];
24->8 [style = bold, label=""];
1->10 [style = bold, label=""];
13->14 [style = bold, label=""];
21->17 [style = bold, label=""];
15->8 [style = bold, label=""];
8->12 [style = bold, label=""];
7->22 [style = dashed, label="0"];
17->16 [style = bold, label=""];
10->11 [style = bold, label=""];
}
