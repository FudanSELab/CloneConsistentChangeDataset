digraph {
57 [style = filled, label = "KafkaIndexTask task = captured.getValue()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "supervisor.tryInit()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,taskConfig.getEndSequenceNumbers().getPartitionSequenceNumberMap().get(2).longValue())@@@49@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(topic,taskConfig.getStartPartitions().getStream())@@@42@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
61 [style = filled, label = "supervisor.start()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertFalse(\"minimumMessageTime\",taskConfig.getMinimumMessageTime().isPresent())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertTrue(\"isUseTransaction\",taskConfig.isUseTransaction())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "supervisor = getSupervisor(1,1,true,\"PT1H\",null,null,false,StringUtils.format(\"badhostname:%d\",kafkaServer.getPort()))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertTrue(supervisor.isLifecycleStarted())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertTrue(supervisor.isStarted())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "KafkaIndexTaskIOConfig taskConfig = task.getIOConfig()@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,(long)taskConfig.getEndPartitions().getPartitionSequenceNumberMap().get(0))@@@47@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(0L,taskConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap().get(0).longValue())@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "expect(taskQueue.add(capture(captured))).andReturn(true)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(0L,(long)taskConfig.getStartPartitions().getPartitionSequenceNumberMap().get(0))@@@43@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(\"myCustomValue\",taskConfig.getConsumerProperties().get(\"myCustomKey\"))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertTrue(supervisor.isLifecycleStarted())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(0L,(long)taskConfig.getStartPartitions().getPartitionSequenceNumberMap().get(2))@@@45@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "replayAll()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(tuningConfig.convertToTaskTuningConfig(),task.getTuningConfig())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,taskConfig.getEndSequenceNumbers().getPartitionSequenceNumberMap().get(0).longValue())@@@47@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
59 [style = filled, label = "supervisor = getSupervisor(1,1,true,\"PT1H\",null,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "resetAll()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,taskConfig.getEndSequenceNumbers().getPartitionSequenceNumberMap().get(1).longValue())@@@48@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "supervisor.runInternal()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "supervisor.getInitRetryCounter() < 3@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "verifyAll()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "replayAll()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertFalse(\"maximumMessageTime\",taskConfig.getMaximumMessageTime().isPresent())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "addSomeEvents(1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "Assert.assertEquals(topic,taskConfig.getEndSequenceNumbers().getStream())@@@46@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "KafkaIndexTask task = captured.getValue()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(0L,(long)taskConfig.getStartPartitions().getPartitionSequenceNumberMap().get(1))@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
48 [style = filled, label = "Assert.assertEquals(topic,taskConfig.getStartSequenceNumbers().getStream())@@@42@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "testFailedInitializationAndRecovery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "supervisor.start()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(kafkaHost,taskConfig.getConsumerProperties().get(\"bootstrap.servers\"))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertFalse(supervisor.isStarted())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "verifyAll()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "testSkipOffsetGaps['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(\"sequenceName-0\",taskConfig.getBaseSequenceName())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,(long)taskConfig.getEndPartitions().getPartitionSequenceNumberMap().get(2))@@@49@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
51 [style = filled, label = "Assert.assertEquals(0L,taskConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap().get(2).longValue())@@@45@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "Capture<KafkaIndexTask> captured = Capture.newInstance()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Thread.sleep(1000)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,(long)taskConfig.getEndPartitions().getPartitionSequenceNumberMap().get(1))@@@48@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "verifyAll()@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Assert.assertEquals(0L,taskConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap().get(1).longValue())@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Assert.assertEquals(dataSchema,task.getDataSchema())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "KafkaIndexTaskIOConfig taskConfig = task.getIOConfig()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "taskRunner.registerListener(anyObject(),anyObject())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "supervisor.getIoConfig().getConsumerProperties().put(\"bootstrap.servers\",kafkaHost)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testFailedInitializationAndRecovery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(topic,taskConfig.getEndPartitions().getStream())@@@46@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18->38 [style = bold, label=""];
6->3 [style = bold, label=""];
26->42 [style = bold, label=""];
35->27 [style = bold, label=""];
34->61 [style = bold, label=""];
4->43 [style = bold, label=""];
31->22 [style = bold, label=""];
42->46 [style = bold, label=""];
40->48 [style = bold, label=""];
53->51 [style = bold, label=""];
41->55 [style = dashed, label="0"];
11->1 [style = bold, label=""];
0->19 [style = bold, label=""];
37->10 [style = bold, label=""];
20->28 [style = bold, label=""];
45->32 [style = bold, label=""];
48->50 [style = bold, label=""];
46->36 [style = bold, label=""];
58->60 [style = bold, label=""];
16->32 [style = bold, label=""];
8->6 [style = bold, label=""];
40->9 [style = bold, label=""];
29->37 [style = bold, label=""];
59->39 [style = bold, label=""];
5->14 [style = bold, label=""];
32->16 [style = bold, label=""];
61->58 [style = bold, label=""];
2->52 [style = dashed, label="0"];
25->35 [style = bold, label=""];
38->39 [style = bold, label=""];
10->7 [style = bold, label=""];
1->13 [style = bold, label=""];
36->11 [style = bold, label=""];
41->2 [style = bold, label=""];
39->33 [style = bold, label=""];
49->55 [style = bold, label=""];
7->45 [style = bold, label=""];
12->41 [style = bold, label=""];
47->49 [style = bold, label=""];
25->50 [style = dashed, label="0"];
17->47 [style = dashed, label="0"];
24->26 [style = bold, label=""];
60->57 [style = bold, label=""];
28->21 [style = bold, label=""];
17->12 [style = bold, label=""];
39->0 [style = bold, label=""];
9->48 [style = dashed, label="0"];
38->59 [style = dashed, label="0"];
22->20 [style = bold, label=""];
30->5 [style = bold, label=""];
12->49 [style = dashed, label="0"];
9->25 [style = bold, label=""];
51->47 [style = bold, label=""];
34->44 [style = bold, label=""];
32->15 [style = bold, label=""];
27->17 [style = bold, label=""];
27->51 [style = dashed, label="0"];
23->34 [style = bold, label=""];
33->31 [style = bold, label=""];
43->29 [style = bold, label=""];
19->4 [style = bold, label=""];
55->52 [style = bold, label=""];
44->24 [style = bold, label=""];
13->8 [style = bold, label=""];
54->38 [style = bold, label=""];
57->46 [style = bold, label=""];
32->16 [style = dotted, label="true"];
3->30 [style = bold, label=""];
56->59 [style = bold, label=""];
14->40 [style = bold, label=""];
50->53 [style = bold, label=""];
15->33 [style = bold, label=""];
21->23 [style = bold, label=""];
35->53 [style = dashed, label="0"];
}
