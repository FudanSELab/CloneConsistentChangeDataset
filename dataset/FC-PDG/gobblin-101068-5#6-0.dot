digraph {
19 [style = filled, label = "Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(dagManager.dagManagerThreads(queue(.dagToSLA.get(dagId).longValue(),TimeUnit.SECONDS.toMillis(7L))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testFlowSlaWithoutConfig['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String dagId = DagManagerUtils.generateDagId(dag)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"3\",flowExecutionId,\"FINISH_RUNNING\",1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "jobConfig = jobConfig.withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME,ConfigValueFactory.fromAnyRef(\"7\")).withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME_UNIT,ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "when(this.dagManager.getJobStatusRetriever().getLatestExecutionIdsForFlow(eq(\"flow3\"),eq(\"group3\"),anyInt())).thenReturn(Collections.singletonList(flowExecutionId))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "dagManager.addDag(dag,true)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testFlowSlaWithoutConfig['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "long flowExecutionId = System.currentTimeMillis()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int queue = DagManagerUtils.getDagQueueId(dag,dagNumThreads)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(null,ERROR_MESSAGE)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"4\",flowExecutionId,\"FINISH_RUNNING\",1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "when(this.dagManager.getJobStatusRetriever().getLatestExecutionIdsForFlow(eq(\"flow4\"),eq(\"group4\"),anyInt())).thenReturn(Collections.singletonList(flowExecutionId))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "TimeoutException e@@@15@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag),ERROR_MESSAGE)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(null,ERROR_MESSAGE)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testFlowSlaWithConfig['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "return@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "dagManager.addDag(dag,true)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(null,ERROR_MESSAGE)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(null,ERROR_MESSAGE)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(dagManager.dagManagerThreads(queue(.dagToSLA.get(dagId).longValue(),DagManagerUtils.DEFAULT_FLOW_SLA_MILLIS)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(null,ERROR_MESSAGE)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.fail(\"Job cancellation was not triggered.\")@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22->11 [style = bold, label=""];
1->23 [style = dashed, label="0"];
12->7 [style = bold, label=""];
8->17 [style = solid, label="flowExecutionId"];
8->14 [style = bold, label=""];
4->7 [style = bold, label=""];
11->12 [style = bold, label=""];
14->6 [style = solid, label="dag"];
14->0 [style = solid, label="dag"];
13->4 [style = bold, label=""];
23->19 [style = bold, label=""];
24->18 [style = bold, label=""];
3->2 [style = bold, label=""];
2->11 [style = bold, label=""];
13->25 [style = bold, label=""];
14->12 [style = solid, label="dag"];
8->1 [style = solid, label="flowExecutionId"];
19->20 [style = bold, label=""];
20->22 [style = bold, label=""];
18->13 [style = bold, label=""];
17->13 [style = solid, label="dag"];
5->13 [style = dotted, label="true"];
5->4 [style = dotted, label="true"];
14->17 [style = dashed, label="0"];
21->8 [style = bold, label=""];
8->17 [style = bold, label=""];
1->6 [style = bold, label=""];
0->1 [style = bold, label=""];
12->24 [style = bold, label=""];
5->13 [style = bold, label=""];
0->23 [style = bold, label=""];
17->10 [style = solid, label="dag"];
16->12 [style = bold, label=""];
20->22 [style = solid, label="jobConfig"];
11->16 [style = dashed, label="0"];
17->11 [style = solid, label="dag"];
6->3 [style = bold, label=""];
2->16 [style = bold, label=""];
17->0 [style = solid, label="dag"];
8->14 [style = solid, label="flowExecutionId"];
9->8 [style = bold, label=""];
8->23 [style = solid, label="flowExecutionId"];
14->10 [style = bold, label=""];
15->8 [style = bold, label=""];
17->10 [style = bold, label=""];
10->0 [style = bold, label=""];
11->24 [style = dashed, label="0"];
14->10 [style = solid, label="dag"];
}
