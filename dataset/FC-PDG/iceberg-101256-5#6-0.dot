digraph {
5 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,notNull(\"some_nulls\")).eval(FILE)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,lessThanOrEqual(\"all_nulls\",\"a\")).eval(FILE)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertFalse(\"Should skip: lessThanOrEqual on all null column\",shouldRead)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertFalse(\"Should skip: equal on all null column\",shouldRead)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertTrue(\"Should read: column with some nulls contains a null value\",shouldRead)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,greaterThanOrEqual(\"all_nulls\",\"a\")).eval(FILE)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertFalse(\"Should skip: greaterThan on all null column\",shouldRead)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,equal(\"all_nulls\",\"a\")).eval(FILE)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,isNull(\"some_nulls\")).eval(FILE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,startsWith(\"all_nulls\",\"a\")).eval(FILE)@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testAllNulls['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "Assert.assertFalse(\"Should skip: non-null column contains no null values\",shouldRead)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertFalse(\"Should skip: no non-null value in all null column\",shouldRead)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,lessThan(\"all_nulls\",\"a\")).eval(FILE)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertTrue(\"Should read: at least one null value in all null column\",shouldRead)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testAllNulls['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,isNull(\"no_nulls\")).eval(FILE)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertFalse(\"Should skip: greaterThanOrEqual on all null column\",shouldRead)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertFalse(\"Should skip: lessThan on all null column\",shouldRead)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,greaterThan(\"all_nulls\",\"a\")).eval(FILE)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA,notNull(\"all_nulls\")).eval(FILE)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testNoNulls['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertFalse(\"Should skip: startsWith on all null column\",shouldRead)@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Assert.assertTrue(\"Should read: non-null column contains a non-null value\",shouldRead)@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,notNull(\"no_nulls\")).eval(FILE)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertTrue(\"Should read: column with some nulls contains a non-null value\",shouldRead)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA,isNull(\"all_nulls\")).eval(FILE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15->8 [style = solid, label="shouldRead"];
24->21 [style = bold, label=""];
13->2 [style = solid, label="shouldRead"];
19->18 [style = solid, label="shouldRead"];
22->20 [style = solid, label="shouldRead"];
21->22 [style = bold, label=""];
23->24 [style = bold, label=""];
2->7 [style = bold, label=""];
13->22 [style = dashed, label="0"];
18->5 [style = bold, label=""];
11->9 [style = bold, label=""];
6->13 [style = bold, label=""];
17->12 [style = bold, label=""];
9->14 [style = solid, label="shouldRead"];
22->20 [style = bold, label=""];
0->11 [style = bold, label=""];
4->25 [style = dashed, label="0"];
12->24 [style = dashed, label="0"];
7->4 [style = solid, label="shouldRead"];
5->3 [style = solid, label="shouldRead"];
16->12 [style = bold, label=""];
10->1 [style = bold, label=""];
26->25 [style = bold, label=""];
7->4 [style = bold, label=""];
9->14 [style = bold, label=""];
3->15 [style = bold, label=""];
1->19 [style = bold, label=""];
26->25 [style = solid, label="shouldRead"];
0->11 [style = solid, label="shouldRead"];
6->21 [style = dashed, label="0"];
10->1 [style = solid, label="shouldRead"];
5->3 [style = bold, label=""];
13->2 [style = bold, label=""];
14->10 [style = bold, label=""];
7->26 [style = dashed, label="0"];
15->8 [style = bold, label=""];
19->18 [style = bold, label=""];
20->26 [style = bold, label=""];
24->21 [style = solid, label="shouldRead"];
4->0 [style = bold, label=""];
12->6 [style = bold, label=""];
1->5 [style = bold, label=""];
12->6 [style = solid, label="shouldRead"];
}
