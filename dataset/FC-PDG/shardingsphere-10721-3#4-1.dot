digraph {
38 [style = filled, label = "ShardingSphereSchema schema = mock()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "IndexTokenGenerator indexTokenGenerator = new IndexTokenGenerator()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final int testStartIndex = 1@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "constraintTokenGenerator.setShardingRule(shardingRule)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "when(constraintSegment.getIdentifier()).thenReturn(constraintIdentifier)@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "IdentifierValue constraintIdentifier = mock()@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "when(constraintSegment.getStartIndex()).thenReturn(TEST_START_INDEX)@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Collection<IndexSegment> indexSegmentCollection = new LinkedList<>()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "IdentifierValue constraintIdentifier = mock()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Collection<ConstraintToken> result = constraintTokenGenerator.generateSQLTokens(alterTableStatementContext)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "indexTokenGenerator.setShardingRule(shardingRule)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat((new LinkedList<>(result)).get(0).getStartIndex(),is(testStartIndex))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "ShardingRule shardingRule = mock()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "indexTokenGenerator.setSchema(schema)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertThat(result.size(),is(1))@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "when(constraintSegment.getStopIndex()).thenReturn(TEST_STOP_INDEX)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "IndexSegment indexSegment = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertThat(result.stream().collect(Collectors.toList()).get(0).getStartIndex(),is(TEST_START_INDEX))@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "indexSegmentCollection.add(indexSegment)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "when(constraintSegment.getStartIndex()).thenReturn(testStartIndex)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "ConstraintTokenGenerator constraintTokenGenerator = new ConstraintTokenGenerator()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "AlterIndexStatementContext alterIndexStatementContext = mock()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "constraintSegmentCollection.add(constraintSegment)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "when(indexSegment.getStopIndex()).thenReturn(TEST_STOP_INDEX)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertGenerateSQLTokens['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "when(alterIndexStatementContext.getIndexes()).thenReturn(indexSegmentCollection)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "when(constraintSegment.getStopIndex()).thenReturn(testStopIndex)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "when(constraintSegment.getIdentifier()).thenReturn(constraintIdentifier)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final int testStopIndex = 3@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "Collection<IndexToken> result = indexTokenGenerator.generateSQLTokens(alterIndexStatementContext)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(result.size(),is(1))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "IdentifierValue identifierValue = mock()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertGenerateSQLTokens['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "ShardingRule shardingRule = mock()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "AlterTableStatementContext alterTableStatementContext = mock()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "when(indexSegment.getStartIndex()).thenReturn(TEST_START_INDEX)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertGenerateSQLTokens['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Collection<ConstraintSegment> constraintSegmentCollection = new LinkedList<>()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ConstraintSegment constraintSegment = mock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "when(indexSegment.getIdentifier()).thenReturn(identifierValue)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30->38 [style = bold, label=""];
16->20 [style = solid, label="testStartIndex"];
16->18 [style = bold, label=""];
37->24 [style = bold, label=""];
10->15 [style = bold, label=""];
15->6 [style = solid, label="alterTableStatementContext"];
4->9 [style = solid, label="shardingRule"];
21->0 [style = bold, label=""];
7->30 [style = bold, label=""];
4->6 [style = bold, label=""];
33->37 [style = solid, label="alterIndexStatementContext"];
0->8 [style = solid, label="constraintSegmentCollection"];
2->32 [style = dashed, label="0"];
14->22 [style = bold, label=""];
35->33 [style = bold, label=""];
18->17 [style = bold, label=""];
14->20 [style = dashed, label="0"];
27->31 [style = bold, label=""];
5->4 [style = solid, label="shardingRule"];
38->36 [style = bold, label=""];
7->4 [style = bold, label=""];
3->12 [style = bold, label=""];
3->16 [style = bold, label=""];
1->28 [style = dashed, label="0"];
17->21 [style = solid, label="testStopIndex"];
33->27 [style = bold, label=""];
31->7 [style = bold, label=""];
39->28 [style = bold, label=""];
13->1 [style = bold, label=""];
29->27 [style = solid, label="indexSegmentCollection"];
7->30 [style = solid, label="shardingRule"];
28->32 [style = bold, label=""];
16->18 [style = solid, label="testStartIndex"];
3->10 [style = solid, label="constraintSegment"];
32->29 [style = bold, label=""];
23->35 [style = solid, label="indexSegment"];
3->23 [style = dashed, label="0"];
0->10 [style = solid, label="constraintIdentifier"];
12->13 [style = bold, label=""];
13->39 [style = dashed, label="0"];
0->10 [style = bold, label=""];
2->0 [style = bold, label=""];
38->36 [style = solid, label="schema"];
8->5 [style = bold, label=""];
22->20 [style = bold, label=""];
11->3 [style = bold, label=""];
24->25 [style = bold, label=""];
26->23 [style = bold, label=""];
34->39 [style = bold, label=""];
0->29 [style = dashed, label="0"];
15->33 [style = dashed, label="0"];
9->14 [style = bold, label=""];
23->34 [style = bold, label=""];
3->8 [style = solid, label="constraintSegment"];
5->7 [style = bold, label=""];
8->27 [style = dashed, label="0"];
1->2 [style = bold, label=""];
36->37 [style = bold, label=""];
29->35 [style = bold, label=""];
28->32 [style = solid, label="identifierValue"];
6->9 [style = bold, label=""];
13->18 [style = dashed, label="0"];
1->2 [style = solid, label="constraintIdentifier"];
15->7 [style = solid, label="constraintSegmentCollection"];
12->34 [style = dashed, label="0"];
17->21 [style = bold, label=""];
19->3 [style = bold, label=""];
15->8 [style = bold, label=""];
10->35 [style = dashed, label="0"];
5->14 [style = solid, label="alterTableStatementContext"];
}
