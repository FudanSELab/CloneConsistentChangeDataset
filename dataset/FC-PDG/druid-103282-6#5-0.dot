digraph {
3 [style = filled, label = "String base64 = StringUtils.encodeBase64String(bytes)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "filter.addDouble(20.2)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "testQuery(StringUtils.format(\"SELECT COUNT(*) FROM druid.foo WHERE bloom_filter_test(concat(dim2, '-foo'), '%s')\",base64),ImmutableList.of(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).granularity(Granularities.ALL).virtualColumns().filters(new ExpressionDimFilter(StringUtils.format(\"bloom_filter_test(concat(\"dim2\",'-foo'),'%s')\",base64),createExprMacroTable())).aggregators(aggregators(new CountAggregatorFactory(\"a0\"))).context(TIMESERIES_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@972e0e))@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "BloomKFilter filter = new BloomKFilter(1500)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "filter.addFloat(20.2f)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "testQuery(StringUtils.format(\"SELECT COUNT(*) FROM druid.foo WHERE bloom_filter_test(2 * CAST(dim1 AS float), '%s')\",base64),ImmutableList.of(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).granularity(Granularities.ALL).virtualColumns(expressionVirtualColumn(\"v0\",\"(2 * CAST(\"dim1\", 'DOUBLE'))\",ValueType.FLOAT)).filters(new BloomDimFilter(\"v0\",BloomKFilterHolder.fromBloomKFilter(filter),null)).aggregators(aggregators(new CountAggregatorFactory(\"a0\"))).context(TIMESERIES_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@972d9c))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "filter.addBytes(null,0,0)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testBloomFilterVirtualColumnNumber['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "testBloomFilterVirtualColumn['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "filter.addString(\"a-foo\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "!NullHandling.replaceWithDefault()@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "String base64 = StringUtils.encodeBase64String(bytes)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "byte(( bytes = BloomFilterSerializersModule.bloomKFilterToBytes(filter)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testBloomFilterVirtualColumnNumber['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testQuery(StringUtils.format(\"SELECT COUNT(*) FROM druid.foo WHERE bloom_filter_test(2 * CAST(dim1 AS float), '%s')\",base64),ImmutableList.of(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).granularity(Granularities.ALL).virtualColumns().filters(new ExpressionDimFilter(StringUtils.format(\"bloom_filter_test((2 * CAST(\"dim1\", 'DOUBLE')),'%s')\",base64),createExprMacroTable())).aggregators(aggregators(new CountAggregatorFactory(\"a0\"))).context(TIMESERIES_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@972d37))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "byte(( bytes = BloomFilterSerializersModule.bloomKFilterToBytes(filter)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "filter.addString(\"-foo\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3->7 [style = solid, label="base64"];
0->3 [style = bold, label=""];
3->4 [style = solid, label="base64"];
10->15 [style = bold, label=""];
1->14 [style = solid, label="filter"];
6->0 [style = bold, label=""];
12->16 [style = bold, label=""];
11->9 [style = solid, label="base64"];
11->9 [style = bold, label=""];
3->4 [style = bold, label=""];
13->1 [style = bold, label=""];
2->10 [style = dashed, label="0"];
8->1 [style = bold, label=""];
5->1 [style = bold, label=""];
4->9 [style = dashed, label="0"];
1->0 [style = solid, label="filter"];
2->0 [style = bold, label=""];
1->6 [style = bold, label=""];
12->16 [style = dotted, label="true"];
3->7 [style = bold, label=""];
4->7 [style = dashed, label="0"];
12->14 [style = bold, label=""];
2->6 [style = dashed, label="0"];
16->14 [style = bold, label=""];
0->3 [style = solid, label="bytes"];
1->2 [style = bold, label=""];
15->12 [style = bold, label=""];
1->10 [style = bold, label=""];
14->11 [style = solid, label="bytes"];
14->11 [style = bold, label=""];
}
