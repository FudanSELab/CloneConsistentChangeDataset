digraph {
3 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness1 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator1,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "testHarness1.setProcessingTime(10L)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testHarness1.open()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testHarness.processElement(new Tuple2<>(1,\"SET_STATE:CIAO\"),0)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testHarness1.setProcessingTime(0L)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "snapshot = testHarness.snapshot(0,0)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "TestOperator testOperator = new TestOperator()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testHarness.processElement(new Tuple2<>(0,\"SET_PROC_TIME_TIMER:10\"),0)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testHarness.processElement(new Tuple2<>(0,\"SET_STATE:HELLO\"),0)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testHarness1.setup()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testEnsureProcessingTimeTimerRegisteredOnRestore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "OperatorSubtaskState snapshot@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "assertThat(extractResult(testHarness),contains(\"ON_PROC_TIME:HELLO\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testHarness.setProcessingTime(20L)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(extractResult(testHarness1),contains(\"ON_PROC_TIME:CIAO\"))@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testProcessingTimeTimersDontInterfere['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testHarness.open()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testHarness.setProcessingTime(10L)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testEnsureProcessingTimeTimerRegisteredOnRestore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testHarness.setProcessingTime(0L)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testHarness1.initializeState(snapshot)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TestOperator testOperator1 = new TestOperator()@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(extractResult(testHarness),contains(\"ON_PROC_TIME:CIAO\"))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testHarness1.setProcessingTime(20L)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testHarness.processElement(new Tuple2<>(1,\"SET_PROC_TIME_TIMER:20\"),0)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(extractResult(testHarness1),contains(\"ON_PROC_TIME:HELLO\"))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "OperatorSubtaskState snapshot = testHarness.snapshot(0,0)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(testOperator,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->8 [style = bold, label=""];
12->3 [style = solid, label="testOperator1"];
4->14 [style = bold, label=""];
23->27 [style = bold, label=""];
22->19 [style = bold, label=""];
17->6 [style = bold, label=""];
9->2 [style = bold, label=""];
9->27 [style = solid, label="testHarness"];
18->15 [style = bold, label=""];
21->22 [style = solid, label="snapshot"];
17->22 [style = bold, label=""];
3->5 [style = solid, label="testHarness1"];
3->11 [style = solid, label="testHarness1"];
17->23 [style = bold, label=""];
6->22 [style = dashed, label="0"];
1->17 [style = bold, label=""];
14->7 [style = bold, label=""];
2->13 [style = bold, label=""];
21->2 [style = bold, label=""];
20->21 [style = bold, label=""];
15->9 [style = solid, label="testOperator"];
0->10 [style = bold, label=""];
22->14 [style = solid, label="snapshot"];
19->26 [style = dashed, label="0"];
3->19 [style = bold, label=""];
15->9 [style = bold, label=""];
7->16 [style = bold, label=""];
25->26 [style = bold, label=""];
16->5 [style = bold, label=""];
12->3 [style = bold, label=""];
19->4 [style = bold, label=""];
10->1 [style = bold, label=""];
8->11 [style = bold, label=""];
27->25 [style = bold, label=""];
6->14 [style = solid, label="snapshot"];
6->23 [style = dashed, label="0"];
9->26 [style = solid, label="testHarness"];
13->0 [style = bold, label=""];
24->15 [style = bold, label=""];
6->12 [style = bold, label=""];
}
