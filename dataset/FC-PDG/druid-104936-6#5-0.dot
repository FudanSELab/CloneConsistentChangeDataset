digraph {
16 [style = filled, label = "assertOutputType(\"case_simple(y,2,2,3,3,4)\",inputTypes,ExprType.LONG)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertOutputType(\"isnull(x)\",inputTypes,ExprType.LONG)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertOutputType(\"greatest('B', x, 'A')\",inspector,ExprType.STRING)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertOutputType(\"greatest(34.0, z, 5.0, 767.0)\",inspector,ExprType.DOUBLE)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertOutputType(\"least(34.0, z, 5.0, 767.0)\",inspector,ExprType.DOUBLE)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertOutputType(\"if(y,2,3.0)\",inputTypes,ExprType.DOUBLE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testConditionalFunctions['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertOutputType(\"case_searched(z==1.0,1.0,z==2.0,2.0,0.0)\",inputTypes,ExprType.DOUBLE)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertOutputType(\"case_searched(y==1,1,y==2,2.0,0)\",inputTypes,ExprType.DOUBLE)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertOutputType(\"least('B', x, 'A')\",inputTypes,ExprType.STRING)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "assertOutputType(\"notnull(x)\",inputTypes,ExprType.LONG)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertOutputType(\"least(y, 0)\",inputTypes,ExprType.LONG)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertOutputType(\"case_simple(y,2,2,3,3.0,4)\",inputTypes,ExprType.DOUBLE)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertOutputType(\"greatest(34.0, z, 5.0, 767.0)\",inputTypes,ExprType.DOUBLE)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertOutputType(\"greatest('B', x, 'A')\",inputTypes,ExprType.STRING)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "assertOutputType(\"nvl(y, 2.0)\",inputTypes,ExprType.DOUBLE)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertOutputType(\"isnull(z)\",inputTypes,ExprType.LONG)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertOutputType(\"case_searched(x=='baz','is baz',x=='foo','is foo','is other')\",inputTypes,ExprType.STRING)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertOutputType(\"case_simple(z,2.0,2.0,3.0,3.0,null)\",inputTypes,ExprType.DOUBLE)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertOutputType(\"nvl(z, 2.0)\",inputTypes,ExprType.DOUBLE)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertOutputType(\"case_simple(z,2.0,2.0,3.0,3.0,4.0)\",inputTypes,ExprType.DOUBLE)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertOutputType(\"if(y,2,3)\",inputTypes,ExprType.LONG)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertOutputType(\"case_searched(z==1.0,1.0,z==2.0,2.0,null)\",inputTypes,ExprType.DOUBLE)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertOutputType(\"case_searched(y==1,1,y==2,2,0)\",inputTypes,ExprType.LONG)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertOutputType(\"greatest(y, 0)\",inputTypes,ExprType.LONG)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertOutputType(\"case_simple(x,'baz','is baz','foo','is foo','is other')\",inputTypes,ExprType.STRING)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testReduceFunctions['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertOutputType(\"greatest(y, 0)\",inspector,ExprType.LONG)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertOutputType(\"least(y, 0)\",inspector,ExprType.LONG)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testReduceFunctions['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "assertOutputType(\"nvl(y, 1.1)\",inputTypes,ExprType.DOUBLE)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertOutputType(\"notnull(y)\",inputTypes,ExprType.LONG)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertOutputType(\"isnull(y)\",inputTypes,ExprType.LONG)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertOutputType(\"notnull(z)\",inputTypes,ExprType.LONG)@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertOutputType(\"nvl(x, 'foo')\",inputTypes,ExprType.STRING)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertOutputType(\"least(34.0, z, 5.0, 767.0)\",inputTypes,ExprType.DOUBLE)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertOutputType(\"nvl(y, 1)\",inputTypes,ExprType.LONG)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertOutputType(\"case_searched(z==1.0,1,z==2.0,2,null)\",inputTypes,ExprType.LONG)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertOutputType(\"least('B', x, 'A')\",inspector,ExprType.STRING)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertOutputType(\"if(y, 'foo', 'bar')\",inputTypes,ExprType.STRING)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
4->3 [style = bold, label=""];
35->27 [style = bold, label=""];
7->11 [style = bold, label=""];
30->22 [style = bold, label=""];
27->36 [style = bold, label=""];
34->19 [style = bold, label=""];
38->28 [style = bold, label=""];
1->26 [style = dashed, label="0"];
22->37 [style = bold, label=""];
25->23 [style = bold, label=""];
20->26 [style = bold, label=""];
3->16 [style = dashed, label="0"];
37->29 [style = bold, label=""];
39->14 [style = bold, label=""];
29->25 [style = bold, label=""];
3->6 [style = bold, label=""];
24->34 [style = bold, label=""];
36->32 [style = bold, label=""];
5->39 [style = dashed, label="0"];
21->24 [style = bold, label=""];
9->7 [style = bold, label=""];
15->16 [style = bold, label=""];
2->4 [style = bold, label=""];
26->39 [style = bold, label=""];
6->10 [style = dashed, label="0"];
1->13 [style = dashed, label="0"];
32->38 [style = bold, label=""];
12->13 [style = bold, label=""];
5->2 [style = bold, label=""];
28->33 [style = bold, label=""];
2->14 [style = dashed, label="0"];
2->9 [style = dashed, label="0"];
11->10 [style = bold, label=""];
4->7 [style = dashed, label="0"];
0->1 [style = bold, label=""];
4->15 [style = dashed, label="0"];
19->35 [style = bold, label=""];
16->30 [style = bold, label=""];
8->9 [style = bold, label=""];
33->31 [style = bold, label=""];
5->8 [style = dashed, label="0"];
14->15 [style = bold, label=""];
6->30 [style = dashed, label="0"];
18->21 [style = bold, label=""];
31->17 [style = bold, label=""];
13->8 [style = bold, label=""];
23->18 [style = bold, label=""];
3->11 [style = dashed, label="0"];
}
