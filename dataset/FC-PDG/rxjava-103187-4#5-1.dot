digraph {
3 [style = filled, label = "Observable.never().buffer(2,1,TimeUnit.MILLISECONDS,Schedulers.single(),new Supplier<Collection<Integer>>(){@Override public Collection<Integer> get(){if (count++ == 1) {throw new TestException()}{return new ArrayList<Integer>()}}}).test().awaitDone(5,TimeUnit.SECONDS).assertFailure()@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "supplierThrows6['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "supplierThrows6['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Flowable.never().buffer(2,1,TimeUnit.MILLISECONDS,Schedulers.single(),new Supplier<Collection<Integer>>(){@Override public Collection<Integer> get(){if (count++ == 1) {throw new TestException()}{return new ArrayList<>()}}}).test().awaitDone(5,TimeUnit.SECONDS).assertFailure()@@@3@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "supplierThrows6['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1->3 [style = dashed, label="0"];
4->3 [style = bold, label=""];
0->1 [style = bold, label=""];
2->1 [style = bold, label=""];
}
