digraph {
20 [style = filled, label = "Assert.assertEquals(state,ConnectionState.READ_ONLY)@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),timing.session(),timing.connection(),new RetryOneTime(10))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final Semaphore semaphore = new Semaphore(0)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "client.checkExists().inBackground().forPath(\"/hey\")@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ConnectionState state = states.poll(timing.forWaiting().milliseconds(),TimeUnit.MILLISECONDS)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "client.getZookeeperClient().setRetryPolicy(policy)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "TestingCluster cluster = createAndStartCluster(3)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "server.stop()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES,timing.forWaiting().seconds(),TimeUnit.SECONDS),\"Remaining leases: \" + semaphore.availablePermits())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Timing timing = new Timing()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final AtomicInteger retries = new AtomicInteger(0)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "client = null@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "retries.set(0)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testConnectionStateNewClient['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@43@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "client.getConnectionStateListenable().addListener(new ConnectionStateListener(){@Override public void stateChanged(CuratorFramework client,ConnectionState newState){states.add(newState)}})@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "cluster.killServer(iterator.next())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "int i = 0@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES,timing.forWaiting().seconds(),TimeUnit.SECONDS),\"Remaining leases: \" + semaphore.availablePermits())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final int MAX_RETRIES = 3@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "client = CuratorFrameworkFactory.newClient(cluster.getConnectString(),timing.session(),timing.connection(),new RetryOneTime(100))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "client.checkExists().forPath(\"/\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "client = CuratorFrameworkFactory.builder().connectString(cluster.getConnectString()).sessionTimeoutMs(timing.session()).connectionTimeoutMs(timing.connection()).retryPolicy(new RetryNTimes(3,timing.milliseconds())).canBeReadOnly(true).build()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "semaphore.drainPermits()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testConnectionStateNewClient['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "server.stop()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "client.getZookeeperClient().setRetryPolicy(policy)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "client.close()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testRetry['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Iterator<InstanceSpec> iterator = cluster.getInstances().iterator()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(state,ConnectionState.READ_ONLY)@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "client.checkExists().forPath(\"/hey\")@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "i < 2@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "client.checkExists().forPath(\"/hey\")@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "client.start()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "client.start()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "client.checkExists().forPath(\"/\")@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "RetryPolicy policy = new RetryPolicy(){@Override public boolean allowRetry(int retryCount,long elapsedTimeMs,RetrySleeper sleeper){semaphore.release()if (retries.incrementAndGet() == MAX_RETRIES) {try {server.restart()}catch (Exception e) }try {sleeper.sleepFor(100,TimeUnit.MILLISECONDS)}catch (InterruptedException e) return true}}@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final BlockingQueue<ConnectionState> states = Queues.newLinkedBlockingQueue()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "client.getZookeeperClient().setRetryPolicy(new RetryOneTime(100))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "CuratorFramework client = null@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "++i@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
16->15 [style = bold, label=""];
15->13 [style = bold, label=""];
20->17 [style = bold, label=""];
15->14 [style = bold, label=""];
36->41 [style = bold, label=""];
5->20 [style = bold, label=""];
25->30 [style = bold, label=""];
21->15 [style = bold, label=""];
11->6 [style = bold, label=""];
28->38 [style = bold, label=""];
25->38 [style = solid, label="MAX_RETRIES"];
18->19 [style = bold, label=""];
0->17 [style = solid, label="cluster"];
32->27 [style = solid, label="policy"];
32->27 [style = bold, label=""];
38->36 [style = bold, label=""];
4->18 [style = bold, label=""];
9->10 [style = bold, label=""];
15->16 [style = dotted, label="true"];
32->34 [style = solid, label="policy"];
12->1 [style = bold, label=""];
26->4 [style = bold, label=""];
3->4 [style = bold, label=""];
25->24 [style = solid, label="MAX_RETRIES"];
13->16 [style = bold, label=""];
2->30 [style = dashed, label="0"];
19->8 [style = bold, label=""];
8->7 [style = bold, label=""];
25->32 [style = solid, label="MAX_RETRIES"];
15->13 [style = dotted, label="true"];
35->40 [style = bold, label=""];
31->26 [style = bold, label=""];
17->28 [style = bold, label=""];
2->0 [style = bold, label=""];
14->17 [style = solid, label="client"];
40->39 [style = bold, label=""];
10->5 [style = bold, label=""];
5->22 [style = solid, label="state"];
33->25 [style = bold, label=""];
30->31 [style = bold, label=""];
24->37 [style = bold, label=""];
27->17 [style = bold, label=""];
20->22 [style = dashed, label="0"];
23->1 [style = bold, label=""];
7->21 [style = bold, label=""];
22->17 [style = bold, label=""];
1->2 [style = bold, label=""];
5->20 [style = solid, label="state"];
21->15 [style = solid, label="i"];
34->35 [style = bold, label=""];
8->4 [style = dashed, label="0"];
6->9 [style = bold, label=""];
29->24 [style = bold, label=""];
5->22 [style = bold, label=""];
14->11 [style = bold, label=""];
41->34 [style = bold, label=""];
4->32 [style = bold, label=""];
39->29 [style = bold, label=""];
30->37 [style = solid, label="client"];
}
