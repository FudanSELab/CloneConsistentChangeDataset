digraph {
0 [style = filled, label = "assertThat(clusterState.getRoutingNodes().node(\"node2\").size(),equalTo(1))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(origPrimaryNodeId)).add(newNode(origReplicaNodeId))).build()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "logger.info(\"- fail primary shard recovering instance on node1 being relocated\")@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node3\"))).build()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "clusterState = allocation.disassociateDeadNodes(clusterState,true,\"reroute\")@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "testDeadNodeWhileRelocatingOnToNode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "AllocationService.CommandsResult commandsResult = allocation.reroute(clusterState,new AllocationCommands(new MoveAllocationCommand(\"test\",0,clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(),\"node3\")),false,false)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "logger.info(\"- fail primary shard recovering instance on node3 being initialized by killing node3\")@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(),equalTo(RELOCATING))@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "String origReplicaNodeId = clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(clusterState.getRoutingNodes().node(\"node1\").size(),equalTo(1))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(commandsResult.getClusterState(),not(equalTo(clusterState)))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "clusterState = commandsResult.getClusterState()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "logger.info(\"- fail primary shard recovering instance on node3 being initialized\")@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "logger.info(\"- moving primary shard to node3\")@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "testFailedShardPrimaryRelocatingToAndFrom['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "clusterState = allocation.applyFailedShard(clusterState,clusterState.getRoutingNodes().node(\"node3\").iterator().next(),randomBoolean())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "logger.info(\"- verifying all is allocated\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "commandsResult = allocation.reroute(clusterState,new AllocationCommands(new MoveAllocationCommand(\"test\",0,clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(),\"node3\")),false,false)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(),equalTo(STARTED))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String origPrimaryNodeId = clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "logger.info(\"- building initial routing table\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertThat(clusterState.getRoutingNodes().node(origReplicaNodeId).iterator().next().state(),equalTo(STARTED))@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "ClusterState clusterState = ClusterState.builder(CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(),equalTo(STARTED))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(),equalTo(INITIALIZING))@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(),equalTo(INITIALIZING))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(),equalTo(STARTED))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "clusterState = allocation.applyFailedShard(clusterState,clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next(),randomBoolean())@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "clusterState = allocation.deassociateDeadNodes(clusterState,true,\"reroute\")@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "RoutingTable routingTable = RoutingTable.builder().addAsNew(metaData.index(\"test\")).build()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "clusterState = allocation.reroute(clusterState,\"reroute\")@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(),equalTo(RELOCATING))@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "logger.info(\"- moving primary shard to node3\")@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "clusterState = commandsResult.getClusterState()@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(),equalTo(STARTED))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "clusterState = allocation.reroute(clusterState,\"reroute\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertThat(clusterState.getRoutingNodes().node(\"node3\").size(),equalTo(0))@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(clusterState.getRoutingNodes().node(\"node2\").size(),equalTo(1))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "MetaData metaData = MetaData.builder().put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)).build()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(clusterState.getRoutingNodes().node(\"node3\").size(),equalTo(0))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "clusterState = allocation.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testDeadNodeWhileRelocatingOnToNode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "AllocationService allocation = createAllocationService(Settings.builder().put(\"cluster.routing.allocation.node_concurrent_recoveries\",10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),\"always\").build())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "clusterState = allocation.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertThat(clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(),equalTo(origReplicaNodeId))@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertThat(commandsResult.getClusterState(),not(equalTo(clusterState)))@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "logger.info(\"- adding additional node\")@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertThat(clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId(),anyOf(equalTo(origPrimaryNodeId),equalTo(\"node3\")))@@@48@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "logger.info(\"- adding 2 nodes on same rack and do rerouting\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "AllocationService.CommandsResult commandsResult = allocation.reroute(clusterState,new AllocationCommands(new MoveAllocationCommand(\"test\",0,clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(),\"node3\")),false,false)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(clusterState.getRoutingNodes().node(\"node1\").size(),equalTo(1))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(),equalTo(STARTED))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\")).add(newNode(\"node2\"))).build()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->24 [style = bold, label=""];
11->20 [style = bold, label=""];
5->12 [style = solid, label="clusterState"];
42->41 [style = bold, label=""];
16->40 [style = bold, label=""];
29->5 [style = bold, label=""];
22->15 [style = bold, label=""];
40->35 [style = bold, label=""];
35->29 [style = bold, label=""];
54->49 [style = bold, label=""];
0->13 [style = bold, label=""];
47->42 [style = bold, label=""];
4->38 [style = dashed, label="0"];
9->2 [style = bold, label=""];
12->6 [style = solid, label="clusterState"];
10->27 [style = bold, label=""];
26->3 [style = bold, label=""];
33->28 [style = bold, label=""];
28->50 [style = bold, label=""];
25->18 [style = bold, label=""];
26->54 [style = dashed, label="0"];
23->32 [style = bold, label=""];
16->34 [style = bold, label=""];
49->48 [style = bold, label=""];
53->44 [style = bold, label=""];
29->5 [style = solid, label="clusterState"];
37->15 [style = bold, label=""];
23->49 [style = solid, label="clusterState"];
6->19 [style = bold, label=""];
13->30 [style = bold, label=""];
36->26 [style = bold, label=""];
45->28 [style = bold, label=""];
3->38 [style = bold, label=""];
4->33 [style = bold, label=""];
25->21 [style = solid, label="clusterState"];
12->6 [style = bold, label=""];
46->52 [style = bold, label=""];
3->4 [style = bold, label=""];
10->50 [style = solid, label="origPrimaryNodeId"];
27->28 [style = solid, label="origReplicaNodeId"];
49->52 [style = solid, label="clusterState"];
43->46 [style = bold, label=""];
34->40 [style = dashed, label="0"];
20->21 [style = bold, label=""];
17->7 [style = bold, label=""];
8->0 [style = bold, label=""];
41->53 [style = bold, label=""];
39->21 [style = bold, label=""];
52->47 [style = bold, label=""];
19->14 [style = bold, label=""];
49->46 [style = solid, label="clusterState"];
27->11 [style = bold, label=""];
5->12 [style = bold, label=""];
15->9 [style = bold, label=""];
33->43 [style = bold, label=""];
7->25 [style = solid, label="clusterState"];
47->44 [style = solid, label="clusterState"];
30->10 [style = bold, label=""];
48->33 [style = bold, label=""];
11->39 [style = bold, label=""];
32->36 [style = bold, label=""];
25->20 [style = solid, label="clusterState"];
7->25 [style = bold, label=""];
18->8 [style = bold, label=""];
3->4 [style = solid, label="clusterState"];
34->35 [style = bold, label=""];
24->1 [style = bold, label=""];
31->17 [style = bold, label=""];
36->54 [style = bold, label=""];
1->31 [style = bold, label=""];
38->33 [style = bold, label=""];
51->15 [style = bold, label=""];
44->45 [style = bold, label=""];
25->39 [style = solid, label="clusterState"];
20->39 [style = dashed, label="0"];
3->38 [style = solid, label="clusterState"];
21->23 [style = bold, label=""];
2->16 [style = bold, label=""];
}
