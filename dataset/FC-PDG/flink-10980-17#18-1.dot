digraph {
0 [style = filled, label = "final Bucket<String,String> bucket = restoreBucket(0,recoveredState)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(testBucketPath,bucket.getBucketPath())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final BucketState<String> recoveredState = readBucketState(scenarioName,previousVersion)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final String scenarioName = \"only-in-progress\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testSerializationOnlyInProgress['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(8,bucket.getInProgressPart().getSize())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertNull(bucket.getInProgressPart())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final Path testBucketPath = new Path(outputPath.resolve(BUCKET_ID).toString())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testSerializationEmpty['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "final BucketStatePathResolver pathResolver = new BucketStatePathResolver(BASE_PATH,previousVersion)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testSerializationEmpty['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertTrue(bucket.getPendingFileRecoverablesPerCheckpoint().isEmpty())@@@11@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertThat(numFiles,is(1L))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final java.nio.file.Path outputPath = pathResolver.getOutputPath(scenarioName)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(testBucketPath,bucket.getBucketPath())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final java.nio.file.Path outputPath = getOutputPath(scenarioName,previousVersion)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "long numFiles = Files.list(Paths.get(testBucketPath.toString())).map(null).count()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final String scenarioName = \"empty\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->3 [style = bold, label=""];
9->11 [style = bold, label=""];
2->8 [style = solid, label="testBucketPath"];
7->4 [style = solid, label="testBucketPath"];
1->14 [style = dashed, label="0"];
4->6 [style = bold, label=""];
1->3 [style = bold, label=""];
1->0 [style = solid, label="scenarioName"];
14->3 [style = solid, label="scenarioName"];
7->0 [style = bold, label=""];
14->7 [style = solid, label="scenarioName"];
15->16 [style = bold, label=""];
15->16 [style = solid, label="numFiles"];
1->9 [style = bold, label=""];
7->0 [style = solid, label="recoveredState"];
5->1 [style = bold, label=""];
3->2 [style = bold, label=""];
3->9 [style = dashed, label="0"];
17->14 [style = bold, label=""];
0->8 [style = solid, label="recoveredState"];
0->8 [style = bold, label=""];
1->11 [style = solid, label="scenarioName"];
1->3 [style = solid, label="scenarioName"];
13->15 [style = bold, label=""];
2->7 [style = bold, label=""];
1->7 [style = solid, label="scenarioName"];
8->4 [style = bold, label=""];
4->13 [style = dashed, label="0"];
10->1 [style = bold, label=""];
11->7 [style = bold, label=""];
8->13 [style = bold, label=""];
6->12 [style = bold, label=""];
}
