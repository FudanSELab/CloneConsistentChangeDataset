digraph {
3 [style = filled, label = "sn.removeServer(l1)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@118f83),sn.getServersForQueue(null,Collections.EMPTY_SET,-1))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "sn.removeServer(l1,\"\")@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119092),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,5))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testRemoveServer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "sn.addServer(l1,new String((((,new ServerLoad(1,1,1,1))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@11907d),sn.getServersForQueue(null,Collections.EMPTY_SET,-1))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertNull(sn.getServerForConnection(\"a\",Collections.EMPTY_SET))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"c\",Collections.EMPTY_SET))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testRemoveServer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertNotNull(sn.getServerForConnection(null,Collections.EMPTY_SET))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"c\",Collections.EMPTY_SET))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "LocatorLoadSnapshot sn = new LocatorLoadSnapshot()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "sn.addServer(l1,\"\",new String((((,new ServerLoad(1,1,1,1),LOAD_POLL_INTERVAL)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "sn.addServer(l2,\"\",new String((((,new ServerLoad(100,.2f,10,.2f),LOAD_POLL_INTERVAL)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(\"a\",Collections.EMPTY_SET))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "sn.addServer(l1,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@118fd3,new ServerLoad(1,1,1,1))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1190e8),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,5))@@@42@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119040),sn.getServersForQueue(\"a\",Collections.EMPTY_SET,-1))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "sn.updateLoad(l1,new ServerLoad(10,1,1,1))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "sn.updateLoad(l2,new ServerLoad(100,1,1,1))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119068),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,-1))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1190d5),sn.getServersForQueue(\"a\",Collections.EMPTY_SET,-1))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(Collections.singletonList(l2),sn.getServersForQueue(null,Collections.EMPTY_SET,-1))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "sn.addServer(l2,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@118fe3,new ServerLoad(1,1,1,1))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "ServerLocation l2 = new ServerLocation(\"localhost\",2)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "sn.addServer(l2,new String((((,new ServerLoad(100,.2f,10,.2f))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "ServerLocation l1 = new ServerLocation(\"localhost\",1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "sn.removeServer(l1)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "testGroups['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@119054),sn.getServersForQueue(\"c\",Collections.EMPTY_SET,-1))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9->20 [style = dashed, label="0"];
4->9 [style = bold, label=""];
6->3 [style = bold, label=""];
25->28 [style = bold, label=""];
5->3 [style = solid, label="l1"];
5->6 [style = solid, label="l1"];
11->14 [style = bold, label=""];
2->1 [style = bold, label=""];
19->20 [style = bold, label=""];
27->30 [style = bold, label=""];
5->22 [style = solid, label="l1"];
34->33 [style = bold, label=""];
24->32 [style = bold, label=""];
5->8 [style = solid, label="l1"];
18->19 [style = bold, label=""];
5->15 [style = solid, label="l1"];
22->31 [style = bold, label=""];
16->34 [style = bold, label=""];
2->14 [style = solid, label="l2"];
2->35 [style = solid, label="l2"];
2->32 [style = solid, label="l2"];
2->6 [style = solid, label="l2"];
8->6 [style = bold, label=""];
2->10 [style = solid, label="l2"];
2->31 [style = solid, label="l2"];
2->19 [style = solid, label="l2"];
20->25 [style = bold, label=""];
3->4 [style = bold, label=""];
5->26 [style = solid, label="l1"];
5->33 [style = solid, label="l1"];
1->22 [style = dashed, label="0"];
33->26 [style = bold, label=""];
35->24 [style = bold, label=""];
0->7 [style = bold, label=""];
5->24 [style = solid, label="l1"];
23->35 [style = bold, label=""];
2->20 [style = solid, label="l2"];
2->24 [style = solid, label="l2"];
5->2 [style = bold, label=""];
7->5 [style = bold, label=""];
28->21 [style = bold, label=""];
21->36 [style = bold, label=""];
3->12 [style = dashed, label="0"];
10->8 [style = bold, label=""];
12->4 [style = bold, label=""];
2->36 [style = solid, label="l2"];
2->4 [style = solid, label="l2"];
13->7 [style = bold, label=""];
1->11 [style = dashed, label="0"];
5->12 [style = solid, label="l1"];
26->23 [style = bold, label=""];
5->11 [style = solid, label="l1"];
2->28 [style = solid, label="l2"];
17->15 [style = bold, label=""];
2->23 [style = solid, label="l2"];
29->7 [style = bold, label=""];
5->1 [style = solid, label="l1"];
4->19 [style = dashed, label="0"];
2->16 [style = solid, label="l2"];
14->8 [style = bold, label=""];
5->30 [style = solid, label="l1"];
5->35 [style = solid, label="l1"];
32->18 [style = bold, label=""];
31->17 [style = bold, label=""];
2->22 [style = bold, label=""];
30->16 [style = bold, label=""];
1->10 [style = bold, label=""];
15->27 [style = bold, label=""];
2->34 [style = solid, label="l2"];
2->9 [style = solid, label="l2"];
2->11 [style = bold, label=""];
2->27 [style = solid, label="l2"];
10->14 [style = dashed, label="0"];
5->18 [style = solid, label="l1"];
5->32 [style = solid, label="l1"];
6->12 [style = bold, label=""];
}
