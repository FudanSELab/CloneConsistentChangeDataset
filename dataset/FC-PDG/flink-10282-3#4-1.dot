digraph {
9 [style = filled, label = "failed.get().set(true)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "failed.get().set(true)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "config.set(CoreOptions.DEFAULT_PARALLELISM,1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final File completedCheckpoint = TestUtils.getMostRecentCompletedCheckpoint(checkpointDir)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "executeWithMapper(new FailAsyncCheckpointMapper(1),config,\"firstPrefix\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "config.setString(StateBackendOptions.STATE_BACKEND,\"filesystem\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testAbortTransactionsOfPendingCheckpointsAfterFailure['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(deserializeValues(collectedRecords),contains(LongStream.range(1,lastCheckpointedRecord.get().get() + 1).boxed().toArray()))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "config.set(CheckpointingOptions.MAX_RETAINED_CHECKPOINTS,2)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final File checkpointDir = temp.newFolder()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "config.set(SavepointConfigOptions.SAVEPOINT_PATH,completedCheckpoint.toURI().toString())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final Configuration config = new Configuration()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Exception e@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(deserializeValues(collectedRecords),LongStream.range(1,lastCheckpointedRecord.get().get() + 1).boxed().collect(Collectors.toList()))@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testAbortTransactionsOfPendingCheckpointsAfterFailure['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertThat(e.getCause().getCause().getMessage(),containsString(\"Exceeded checkpoint tolerable failure\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final List<ConsumerRecord<byte((,byte((>> collectedRecords = drainAllRecordsFromTopic(topic)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "executeWithMapper(new FailingCheckpointMapper(failed,lastCheckpointedRecord),config,null)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "config.set(ExecutionCheckpointingOptions.EXTERNALIZED_CHECKPOINT,CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "config.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY,checkpointDir.toURI().toString())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "executeWithMapper(new FailAsyncCheckpointMapper(0),config,null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertTrue(deserializeValues(drainAllRecordsFromTopic(topic)).isEmpty())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "config.set(CoreOptions.DEFAULT_PARALLELISM,5)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testAbortTransactionsAfterScaleInBeforeFirstCheckpoint['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "executeWithMapper(new FailingCheckpointMapper(failed,lastCheckpointedRecord),config,\"newPrefix\")@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final List<ConsumerRecord<byte((,byte((>> collectedRecords = drainAllRecordsFromTopic(topic)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(deserializeValues(collectedRecords),LongStream.range(1,lastCheckpointedRecord.get().get() + 1).boxed().collect(Collectors.toList()))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9->22 [style = bold, label=""];
18->24 [style = solid, label="collectedRecords"];
18->24 [style = bold, label=""];
2->1 [style = bold, label=""];
6->21 [style = bold, label=""];
26->3 [style = bold, label=""];
16->6 [style = bold, label=""];
1->15 [style = bold, label=""];
6->22 [style = solid, label="config"];
4->13 [style = bold, label=""];
6->25 [style = solid, label="config"];
6->0 [style = bold, label=""];
11->17 [style = dashed, label="0"];
20->6 [style = bold, label=""];
9->10 [style = bold, label=""];
21->25 [style = bold, label=""];
3->9 [style = dotted, label="true"];
23->19 [style = dotted, label="true"];
5->17 [style = bold, label=""];
3->9 [style = bold, label=""];
8->22 [style = dashed, label="0"];
6->8 [style = solid, label="config"];
0->14 [style = bold, label=""];
12->10 [style = bold, label=""];
22->18 [style = bold, label=""];
12->25 [style = dashed, label="0"];
6->12 [style = solid, label="config"];
8->5 [style = bold, label=""];
5->11 [style = solid, label="collectedRecords"];
5->17 [style = solid, label="collectedRecords"];
19->26 [style = bold, label=""];
23->19 [style = bold, label=""];
25->26 [style = bold, label=""];
7->6 [style = bold, label=""];
10->4 [style = bold, label=""];
14->10 [style = solid, label="checkpointDir"];
14->2 [style = bold, label=""];
15->12 [style = bold, label=""];
5->11 [style = bold, label=""];
13->8 [style = bold, label=""];
}
