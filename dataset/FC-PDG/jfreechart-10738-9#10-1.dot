digraph {
16 [style = filled, label = "testCloning['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "XYTaskDataset d1 = new XYTaskDataset(u1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "s1.add(new Task(\"Task 1\",new Date(0L),new Date(1L)))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(d1 != d2)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "TaskSeries<String> s2 = u2.getSeries(\"Series\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "XYTaskDataset d2 = CloneUtils.clone(d1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "u1.add(s1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(d1.equals(d2))@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTrue(d1.equals(d2))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "TaskSeriesCollection u2 = d2.getTasks()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "XYTaskDataset d2 = TestUtils.serialised(d1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "TaskSeriesCollection<String,String> u2 = d2.getTasks()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "s2.add(new Task(\"Task 2\",new Date(10L),new Date(11L)))@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "s2.add(new Task(\"Task 2\",new Date(10L),new Date(11L)))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testSerialization['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "s1.add(new Task(\"Task 2\",new Date(10L),new Date(11L)))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertFalse(d1.equals(d2))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(d1,d2)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "TaskSeriesCollection<String,String> u1 = new TaskSeriesCollection<>()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "testCloning['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertTrue(d1.getClass() == d2.getClass())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TaskSeriesCollection u1 = new TaskSeriesCollection()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(d1.equals(d2))@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TaskSeries<String> s1 = new TaskSeries<>(\"Series\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
5->3 [style = bold, label=""];
4->10 [style = bold, label=""];
23->19 [style = solid, label="d2"];
9->23 [style = solid, label="d1"];
11->14 [style = bold, label=""];
7->12 [style = bold, label=""];
8->18 [style = bold, label=""];
10->19 [style = dashed, label="0"];
9->4 [style = bold, label=""];
0->2 [style = bold, label=""];
4->5 [style = solid, label="d2"];
2->9 [style = bold, label=""];
4->13 [style = solid, label="d2"];
18->2 [style = bold, label=""];
4->10 [style = solid, label="d2"];
23->11 [style = solid, label="d2"];
8->0 [style = bold, label=""];
9->23 [style = bold, label=""];
22->3 [style = bold, label=""];
0->9 [style = solid, label="u1"];
13->17 [style = bold, label=""];
23->22 [style = solid, label="d2"];
15->11 [style = bold, label=""];
9->10 [style = solid, label="d1"];
21->22 [style = bold, label=""];
9->4 [style = solid, label="d1"];
12->8 [style = bold, label=""];
23->19 [style = bold, label=""];
20->12 [style = bold, label=""];
12->2 [style = solid, label="s1"];
4->6 [style = solid, label="d2"];
3->13 [style = bold, label=""];
0->18 [style = dashed, label="0"];
15->17 [style = dashed, label="0"];
13->15 [style = bold, label=""];
10->1 [style = bold, label=""];
18->9 [style = solid, label="u1"];
4->23 [style = dashed, label="0"];
16->12 [style = bold, label=""];
14->6 [style = bold, label=""];
9->19 [style = solid, label="d1"];
17->11 [style = bold, label=""];
19->21 [style = bold, label=""];
}
