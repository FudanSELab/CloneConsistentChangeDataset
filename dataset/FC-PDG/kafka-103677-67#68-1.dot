digraph {
28 [style = filled, label = "int i = 1@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "client.poll(1,time.milliseconds())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "i <= 3@@@17@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "short apiVersionsResponseVersion = ApiKeys.API_VERSIONS.latestVersion()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertEquals(250,avgMetric.value(),EPSILON)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "MockSelector selector = new MockSelector(time)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testQuotaMetrics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchThrottleTimeAvg))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "ProduceRequest.Builder builder = ProduceRequest.Builder.forCurrentMagic((short)1,1000,Collections.emptyMap())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "ClientRequest request = client.newClientRequest(node.idString(),builder,time.milliseconds(),true)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "NetworkClient client = new NetworkClient(selector,metadata,\"mock\",Integer.MAX_VALUE,1000,1000,64 * 1024,64 * 1024,1000,time,true,new ApiVersions(),throttleTimeSensor,logContext)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "time.sleep(client.throttleDelayMs(node,time.milliseconds()))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "ByteBuffer buffer = ApiVersionsResponse.createApiVersionsResponse(400,RecordBatch.CURRENT_MAGIC_VALUE).serialize(apiVersionsResponseVersion,new ResponseHeader(0))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(400,(Double)maxMetric.metricValue(),EPS)@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "client.poll(1,time.milliseconds())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "selector.clear()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "buffer = response.serialize(ApiKeys.PRODUCE.latestVersion(),new ResponseHeader(request.correlationId()))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "client.poll(1,time.milliseconds())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "FetchResponse response = fullFetchResponse(tp0,nextRecords,Errors.NONE,i,throttleTimeMs)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "client.close()@@@36@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(this.senderMetricsRegistry.produceThrottleTimeMax)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Sensor throttleTimeSensor = Sender.throttleTimeSensor(this.senderMetricsRegistry)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "client.send(request,time.milliseconds())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "FetchRequest.Builder builder = FetchRequest.Builder.forConsumer(100,100,new LinkedHashMap<>())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "i++@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "!client.ready(node,time.milliseconds())@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "selector.delayedReceive(new DelayedReceive(node.idString(),new NetworkReceive(node.idString(),buffer)))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "selector.clear()@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Sensor throttleTimeSensor = Fetcher.throttleTimeSensor(metrics,metricsRegistry)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "selector.completeReceive(new NetworkReceive(node.idString(),buffer))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testQuotaMetrics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(this.senderMetricsRegistry.produceThrottleTimeAvg)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(250,(Double)avgMetric.metricValue(),EPS)@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "int throttleTimeMs = 100 * i@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "NetworkClient client = new NetworkClient(selector,metadata,\"mock\",Integer.MAX_VALUE,1000,1000,64 * 1024,64 * 1024,1000,time,true,new ApiVersions(),throttleTimeSensor,new LogContext())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "time.sleep(client.throttleDelayMs(node,time.milliseconds()))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Node node = cluster.nodes().get(0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(250,avgMetric.value(),EPS)@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "testQuotaMetrics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "ProduceResponse response = produceResponse(tp0,i,Errors.NONE,throttleTimeMs)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(400,maxMetric.value(),EPS)@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchThrottleTimeMax))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "buffer = response.serialize(ApiKeys.FETCH.latestVersion(),new ResponseHeader(request.correlationId()))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Cluster cluster = TestUtils.singletonCluster(\"test\",1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(400,maxMetric.value(),EPSILON)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
28->6 [style = bold, label=""];
6->31 [style = dotted, label="true"];
4->25 [style = bold, label=""];
41->19 [style = bold, label=""];
30->20 [style = bold, label=""];
10->19 [style = bold, label=""];
6->39 [style = dotted, label="true"];
8->35 [style = dashed, label="0"];
28->6 [style = solid, label="i"];
40->15 [style = bold, label=""];
31->29 [style = solid, label="builder"];
37->29 [style = solid, label="builder"];
29->18 [style = bold, label=""];
40->15 [style = solid, label="buffer"];
6->18 [style = dotted, label="true"];
4->36 [style = dashed, label="0"];
19->43 [style = solid, label="selector"];
23->13 [style = bold, label=""];
16->12 [style = solid, label="node"];
23->39 [style = dashed, label="0"];
14->44 [style = dashed, label="0"];
45->38 [style = bold, label=""];
16->43 [style = bold, label=""];
24->23 [style = solid, label="throttleTimeMs"];
5->30 [style = bold, label=""];
26->28 [style = bold, label=""];
8->11 [style = bold, label=""];
6->15 [style = dotted, label="true"];
19->42 [style = bold, label=""];
34->19 [style = bold, label=""];
38->11 [style = bold, label=""];
6->13 [style = dotted, label="true"];
9->32 [style = bold, label=""];
6->37 [style = dotted, label="true"];
37->29 [style = bold, label=""];
31->29 [style = bold, label=""];
13->40 [style = dashed, label="0"];
30->20 [style = solid, label="buffer"];
27->22 [style = bold, label=""];
32->26 [style = bold, label=""];
13->15 [style = solid, label="buffer"];
8->38 [style = dashed, label="0"];
6->29 [style = dotted, label="true"];
7->23 [style = bold, label=""];
29->18 [style = solid, label="request"];
6->7 [style = dotted, label="true"];
28->23 [style = solid, label="i"];
24->39 [style = solid, label="throttleTimeMs"];
13->15 [style = bold, label=""];
6->12 [style = dotted, label="true"];
18->7 [style = bold, label=""];
22->6 [style = bold, label=""];
14->4 [style = bold, label=""];
6->40 [style = dotted, label="true"];
6->24 [style = dotted, label="true"];
0->16 [style = bold, label=""];
28->39 [style = solid, label="i"];
22->6 [style = solid, label="i"];
28->24 [style = solid, label="i"];
6->24 [style = bold, label=""];
19->17 [style = bold, label=""];
6->22 [style = dotted, label="true"];
31->37 [style = dashed, label="0"];
4->33 [style = bold, label=""];
17->42 [style = dashed, label="0"];
1->9 [style = bold, label=""];
42->0 [style = bold, label=""];
22->23 [style = solid, label="i"];
21->5 [style = bold, label=""];
16->9 [style = solid, label="node"];
3->44 [style = bold, label=""];
6->2 [style = dotted, label="true"];
17->0 [style = bold, label=""];
24->31 [style = bold, label=""];
43->5 [style = bold, label=""];
7->39 [style = bold, label=""];
39->40 [style = bold, label=""];
32->1 [style = bold, label=""];
25->45 [style = dashed, label="0"];
6->27 [style = dotted, label="true"];
22->39 [style = solid, label="i"];
28->22 [style = solid, label="i"];
32->1 [style = dotted, label="true"];
12->27 [style = bold, label=""];
22->24 [style = solid, label="i"];
21->43 [style = dashed, label="0"];
15->2 [style = bold, label=""];
33->35 [style = bold, label=""];
44->36 [style = bold, label=""];
5->30 [style = solid, label="apiVersionsResponseVersion"];
32->9 [style = dotted, label="true"];
3->14 [style = bold, label=""];
6->23 [style = dotted, label="true"];
20->32 [style = bold, label=""];
2->12 [style = bold, label=""];
17->21 [style = solid, label="throttleTimeSensor"];
16->21 [style = bold, label=""];
24->37 [style = bold, label=""];
42->43 [style = solid, label="throttleTimeSensor"];
25->8 [style = bold, label=""];
25->33 [style = dashed, label="0"];
36->45 [style = bold, label=""];
19->21 [style = solid, label="selector"];
35->11 [style = bold, label=""];
}
