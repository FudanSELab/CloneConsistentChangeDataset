digraph {
9 [style = filled, label = "DocumentMapper mapper = parser.parse(\"type\",new CompressedXContent(Strings.toString(mapping)))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(e.getCause().getMessage(),anyOf(containsString(\"passed as String\"),containsString(\"failed to parse date\"),containsString(\"is not an IP string literal\")))@@@23@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "DocumentMapper mapper2 = parser.parse(\"type\",new CompressedXContent(Strings.toString(mapping)))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(2,fields.length)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "doTestCoerce['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "String type@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(Strings.toString(mapping),mapper.mappingSource().toString())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "type.equals(\"date_range\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "ThrowingRunnable runnable = null@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",type)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",type).field(\"coerce\",false).endObject().endObject().endObject().endObject()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(DocValuesType.BINARY,dvField.fieldType().docValuesType())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "MapperParsingException e = expectThrows(,runnable)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "String type@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "ParsedDocument doc = mapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startObject(\"field\").field(getFromField(),getFrom(type)).field(getToField(),getTo(type)).endObject().endObject()),XContentType.JSON))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "type.equals(\"date_range\") == false@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ParsedDocument doc = mapper.parse(new SourceToParse(\"test\",\"type\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startObject(\"field\").field(getFromField(),getFrom(type)).field(getToField(),getTo(type)).endObject().endObject()),XContentType.JSON))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "mapping = mapping.field(\"format\",DATE_FORMAT)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "doTestCoerce['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "IndexableField dvField = fields(0(@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(2,pointField.fieldType().pointIndexDimensionCount())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(Strings.toString(mapping),mapper2.mappingSource().toString())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "IndexableField pointField = fields(1(@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ThrowingRunnable runnable = null@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "mapping = mapping.endObject().endObject().endObject().endObject()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertFalse(pointField.fieldType().stored())@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "doTestDefaults['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "IndexableField(( fields = doc.rootDoc().getFields(\"field\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->10 [style = solid, label="fields"];
18->24 [style = bold, label=""];
27->25 [style = dotted, label="true"];
27->12 [style = bold, label=""];
5->20 [style = bold, label=""];
10->14 [style = bold, label=""];
19->12 [style = bold, label=""];
6->21 [style = bold, label=""];
25->12 [style = solid, label="type"];
16->6 [style = bold, label=""];
11->1 [style = dotted, label="true"];
11->23 [style = dotted, label="true"];
11->17 [style = dotted, label="true"];
12->16 [style = bold, label=""];
11->13 [style = dotted, label="true"];
11->4 [style = dotted, label="true"];
19->15 [style = dotted, label="true"];
7->8 [style = bold, label=""];
21->18 [style = solid, label="mapping"];
2->4 [style = bold, label=""];
13->1 [style = bold, label=""];
0->7 [style = bold, label=""];
20->10 [style = bold, label=""];
14->26 [style = bold, label=""];
3->17 [style = solid, label="mapping"];
15->12 [style = solid, label="type"];
1->2 [style = solid, label="runnable"];
15->25 [style = dashed, label="0"];
21->9 [style = bold, label=""];
11->2 [style = dotted, label="true"];
9->18 [style = bold, label=""];
3->13 [style = solid, label="mapping"];
8->5 [style = bold, label=""];
11->3 [style = bold, label=""];
21->9 [style = solid, label="mapping"];
16->21 [style = bold, label=""];
22->12 [style = bold, label=""];
13->23 [style = bold, label=""];
0->24 [style = dashed, label="0"];
3->17 [style = bold, label=""];
17->13 [style = bold, label=""];
1->2 [style = bold, label=""];
23->2 [style = bold, label=""];
24->7 [style = bold, label=""];
11->3 [style = dotted, label="true"];
22->15 [style = dotted, label="true"];
14->11 [style = bold, label=""];
1->23 [style = dashed, label="0"];
18->0 [style = bold, label=""];
23->2 [style = solid, label="runnable"];
16->6 [style = dotted, label="true"];
7->5 [style = solid, label="fields"];
}
