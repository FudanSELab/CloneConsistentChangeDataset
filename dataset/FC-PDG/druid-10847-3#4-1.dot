digraph {
13 [style = filled, label = "Assert.assertTrue(server.getHost().contains(Integer.toString(PORT)))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(StringUtils.format(\"(%s(\",address),uri.getHost())@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "EasyMock.replay(instance,serviceProvider)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(\"http\",server.getScheme())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(address,server.getAddress())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "Assert.assertEquals(ADDRESS,uri.getHost())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testPickIPv6Bracket['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertTrue(server.getHost().contains(ADDRESS))@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EasyMock.expect(serviceProvider.getInstance()).andReturn(instance).anyTimes()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(StringUtils.format(\"(%s(\",ADDRESS),uri.getHost())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "final String ADDRESS = \"2001:0db8:0000:0000:0000:ff00:0042:8329\"@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "final String ADDRESS = \"(2001:0db8:0000:0000:0000:ff00:0042:8329(\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(ADDRESS,server.getAddress())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "EasyMock.expect(instance.getPort()).andReturn(PORT).anyTimes()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testPickIPv6['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Server server = serverDiscoverySelector.pick()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EasyMock.expect(instance.getAddress()).andReturn(address).anyTimes()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Assert.assertEquals(PORT,uri.getPort())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final URI uri = new URI(server.getScheme(),null,server.getAddress(),server.getPort(),\"/druid/indexer/v1/action\",null,null)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(PORT,server.getPort())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testPickIPv6['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final String address = \"2001:0db8:0000:0000:0000:ff00:0042:8329\"@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "EasyMock.expect(instance.getSslPort()).andReturn(-1).anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "EasyMock.expect(instance.getAddress()).andReturn(ADDRESS).anyTimes()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EasyMock.verify(instance,serviceProvider)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(\"http\",uri.getScheme())@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertTrue(server.getHost().contains(address))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16->3 [style = bold, label=""];
17->25 [style = bold, label=""];
1->7 [style = solid, label="ADDRESS"];
1->4 [style = bold, label=""];
15->20 [style = dashed, label="0"];
21->22 [style = solid, label="address"];
7->10 [style = bold, label=""];
1->26 [style = dashed, label="0"];
26->14 [style = solid, label="ADDRESS"];
12->17 [style = bold, label=""];
21->20 [style = solid, label="address"];
14->22 [style = dashed, label="0"];
19->10 [style = bold, label=""];
11->12 [style = bold, label=""];
23->3 [style = bold, label=""];
1->21 [style = dashed, label="0"];
16->23 [style = dashed, label="0"];
26->4 [style = bold, label=""];
3->9 [style = bold, label=""];
6->1 [style = bold, label=""];
24->26 [style = bold, label=""];
26->25 [style = solid, label="ADDRESS"];
5->2 [style = bold, label=""];
0->14 [style = bold, label=""];
2->0 [style = bold, label=""];
13->19 [style = bold, label=""];
20->8 [style = bold, label=""];
15->25 [style = dashed, label="0"];
7->19 [style = dashed, label="0"];
13->7 [style = bold, label=""];
0->22 [style = bold, label=""];
1->15 [style = solid, label="ADDRESS"];
17->15 [style = bold, label=""];
9->5 [style = bold, label=""];
26->7 [style = solid, label="ADDRESS"];
17->20 [style = bold, label=""];
25->8 [style = bold, label=""];
14->13 [style = bold, label=""];
22->13 [style = bold, label=""];
18->21 [style = bold, label=""];
1->14 [style = solid, label="ADDRESS"];
21->19 [style = solid, label="address"];
15->8 [style = bold, label=""];
4->23 [style = bold, label=""];
4->16 [style = bold, label=""];
21->4 [style = bold, label=""];
10->11 [style = bold, label=""];
}
