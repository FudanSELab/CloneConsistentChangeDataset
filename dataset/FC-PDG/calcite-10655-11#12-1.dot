digraph {
17 [style = filled, label = "final List<RelTraitDef> traitDefs = new ArrayList<>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "RelTraitSet traitSet = convert.getTraitSet().replace(EnumerableConvention.INSTANCE)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testPlanWithExplicitTraitDefs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "SqlNode validate = planner.validate(parse)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "RelNode convert = planner.rel(validate).project()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "traitDefs.add(ConventionTraitDef.INSTANCE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "RuleSet ruleSet = RuleSets.ofList(SortRemoveRule.INSTANCE,EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE,EnumerableRules.ENUMERABLE_PROJECT_RULE,EnumerableRules.ENUMERABLE_SORT_RULE)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Planner planner = getPlanner(null,Programs.of(ruleSet))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "RuleSet ruleSet = RuleSets.ofList(FilterMergeRule.INSTANCE,EnumerableRules.ENUMERABLE_FILTER_RULE,EnumerableRules.ENUMERABLE_PROJECT_RULE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "SqlNode parse = planner.parse(\"select * from \"emps\" \" + \"order by \"emps\".\"deptno\"\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Planner planner = getPlanner(traitDefs,Programs.of(ruleSet))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "SqlNode validate = planner.validate(parse)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "RelNode transform = planner.transform(0,traitSet,convert)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(toString(transform),equalTo(\"EnumerableProject(empid=($0(, deptno=($1(, name=($2(, salary=($3(, commission=($4()\" + \" EnumerableTableScan(table=((hr, emps(()\"))@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testSortPlan['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "traitDefs.add(RelCollationTraitDef.INSTANCE)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "RelNode convert = planner.rel(validate).project()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "SqlNode parse = planner.parse(\"select * from \"emps\"\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "RuleSet ruleSet = RuleSets.ofList(SortRemoveRule.INSTANCE,EnumerableRules.ENUMERABLE_PROJECT_RULE,EnumerableRules.ENUMERABLE_SORT_RULE)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "testSortPlan['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "RelTraitSet traitSet = convert.getTraitSet().replace(EnumerableConvention.INSTANCE)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
7->1 [style = bold, label=""];
3->12 [style = solid, label="convert"];
9->0 [style = bold, label=""];
15->14 [style = bold, label=""];
6->3 [style = solid, label="transform"];
0->2 [style = bold, label=""];
18->14 [style = solid, label="ruleSet"];
18->17 [style = bold, label=""];
12->20 [style = bold, label=""];
1->9 [style = dashed, label="0"];
19->6 [style = solid, label="parse"];
14->19 [style = bold, label=""];
16->12 [style = solid, label="traitSet"];
1->18 [style = dashed, label="0"];
1->0 [style = bold, label=""];
3->16 [style = bold, label=""];
19->6 [style = bold, label=""];
2->4 [style = bold, label=""];
8->6 [style = solid, label="convert"];
11->18 [style = bold, label=""];
17->14 [style = solid, label="traitDefs"];
5->6 [style = bold, label=""];
8->5 [style = bold, label=""];
3->20 [style = dashed, label="0"];
1->0 [style = solid, label="ruleSet"];
2->4 [style = solid, label="parse"];
4->8 [style = bold, label=""];
12->20 [style = solid, label="transform"];
10->9 [style = bold, label=""];
17->13 [style = bold, label=""];
13->15 [style = bold, label=""];
9->0 [style = solid, label="ruleSet"];
16->12 [style = bold, label=""];
5->6 [style = solid, label="traitSet"];
}
