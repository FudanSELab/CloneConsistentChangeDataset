digraph {
11 [style = filled, label = "throw new CloudRuntimeException(\"Unable to acquire vlan configuration: \" + vlanDbId)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "isAccountSpecific@@@18@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "!success@@@42@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "vlanRange == null@@@4@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "isAccountSpecific = true@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "final Account caller@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ip.getAllocatedTime() != null@@@39@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "throw new InvalidParameterValueException(\"Can't delete account specific vlan \" + vlanDbId + \" as ip \" + ip + \" belonging to the range has firewall rules applied. Cleanup the rules first\")@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final long vlanDbId@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "sb.and(\"vlanId\",sb.entity().getVlanId(),SearchCriteria.Op.EQ)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "deleteVlanAndPublicIpRange['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "final long userId@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "boolean isDomainSpecific = false@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "acctVln != null && !acctVln.isEmpty()@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "ip.isOneToOneNat()@@@30@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "boolean isAccountSpecific = false@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "final long vlanDbId@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
55 [style = filled, label = "return userIpAddresVO.isForSystemVms()@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "s_logger.debug(\"lock vlan \" + vlanDbId + \" is acquired\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final List<IPAddressVO> ips = _publicIpAddressDao.listByVlanId(vlanDbId)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "_firewallDao.countRulesByIpId(ip.getId()) > 0@@@36@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final List<AccountVlanMapVO> acctVln = _accountVlanMapDao.listAccountVlanMapsByVlan(vlanRange.getId())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "isForSystemVms['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "final IPAddressVO ip@@@28@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "throw new InvalidParameterValueException(allocIpCount + \" Ips are in use. Cannot delete this vlan\")@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "s_logger.isDebugEnabled()@@@25@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "resourceCountToBeDecrement++@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "VlanVO vlanRange = _vlanDao.findById(vlanDbId)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "success = _ipAddrMgr.disassociatePublicIpAddress(ip.getId(),userId,caller)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "throw new InvalidParameterValueException(\"Cannot delete vlan range \" + vlanDbId + \" as \" + ipAlias.getIp4Address() + \"is being used for providing dhcp service in this subnet. Delete all VMs in this subnet and try again\")@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "vlanRange = _vlanDao.acquireInLockTable(vlanDbId,30)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "vlanRange == null@@@22@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int resourceCountToBeDecrement = 0@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "boolean success = true@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ipAlias != null && vlanDbId == _publicIpAddressDao.findByIpAndSourceNetworkId(vlanRange.getNetworkId(),ipAlias.getIp4Address()).getVlanId()@@@60@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final NicIpAliasVO ipAlias = _nicIpAliasDao.findByGatewayAndNetworkIdAndState(vlanRange.getVlanGateway(),vlanRange.getNetworkId(),NicIpAlias.State.active)@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "ips@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "List<DomainVlanMapVO> domainVlan = _domainVlanMapDao.listDomainVlanMapsByVlan(vlanRange.getId())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "final long allocIpCount = _publicIpAddressDao.countIPs(vlanRange.getDataCenterId(),vlanDbId,true)@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "return true@@@75@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ip.isSourceNat()@@@33@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "isDomainSpecific = true@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "List<DomainVlanMapVO> domainVln = _domainVlanMapDao.listDomainVlanMapsByVlan(vlanRange.getId())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
56 [style = filled, label = "SearchBuilder<IPAddressVO> sb = userIpAddressDao.createSearchBuilder()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "ips@@@28@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "s_logger.warn(\"Some ip addresses failed to be released as a part of vlan \" + vlanDbId + \" removal\")@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "long vlanId@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "SearchCriteria<IPAddressVO> sc = sb.create()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Transaction.execute(new TransactionCallbackNoReturn(){@Override public void doInTransactionWithoutResult(final TransactionStatus status){_publicIpAddressDao.deletePublicIPRange(vlanDbId)_vlanDao.remove(vlanDbId)}})@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final long userId@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "domainVln != null && !domainVln.isEmpty()@@@14@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "throw new InvalidParameterValueException(\"Can't delete account specific vlan \" + vlanDbId + \" as ip \" + ip + \" belonging to the range is a source nat ip for the network id=\" + ip.getSourceNetworkId() + \". IP range with the source nat ip address can be removed either as a part of Network, or account removal\")@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "{_vlanDao.releaseFromLockTable(vlanDbId)if (resourceCountToBeDecrement > 0) {_resourceLimitMgr.decrementResourceCount(acctVln.get(0).getAccountId(),ResourceType.public_ip,new Long(resourceCountToBeDecrement))}}@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "deleteVlanAndPublicIpRange['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "allocIpCount > 0@@@64@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "throw new InvalidParameterValueException(\"Can't delete account specific vlan \" + vlanDbId + \" as ip \" + ip + \" belonging to the range is used for static nat purposes. Cleanup the rules first\")@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "sc.setParameters(\"vlanId\",vlanId)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "IPAddressVO userIpAddresVO = userIpAddressDao.findOneBy(sc)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "domainVlan != null && !domainVlan.isEmpty()@@@14@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "throw new InvalidParameterValueException(\"Please specify a valid IP range id.\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NET_IP_RELEASE,acctVln.get(0).getAccountId(),ip.getDataCenterId(),ip.getId(),ip.getAddress().toString(),ip.isSourceNat(),vlanRange.getVlanType().toString(),ip.getSystem(),ip.getClass().getName(),ip.getUuid())@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27->13 [style = bold, label=""];
11->14 [style = bold, label=""];
36->30 [style = solid, label="vlanDbId"];
51->24 [style = bold, label=""];
7->33 [style = dotted, label="true"];
4->15 [style = bold, label=""];
7->30 [style = dotted, label="false"];
10->17 [style = bold, label=""];
56->54 [style = bold, label=""];
37->9 [style = bold, label=""];
7->26 [style = bold, label=""];
33->11 [style = bold, label=""];
1->28 [style = bold, label=""];
14->21 [style = dotted, label="true"];
36->37 [style = solid, label="vlanDbId"];
27->45 [style = bold, label=""];
36->20 [style = solid, label="vlanDbId"];
31->30 [style = bold, label=""];
42->38 [style = dotted, label="true"];
36->3 [style = solid, label="vlanDbId"];
34->32 [style = bold, label=""];
41->45 [style = bold, label=""];
48->43 [style = dotted, label="true"];
5->30 [style = bold, label=""];
53->60 [style = bold, label=""];
7->5 [style = dotted, label="false"];
7->1 [style = dotted, label="true"];
32->20 [style = bold, label=""];
41->13 [style = bold, label=""];
18->0 [style = bold, label=""];
21->13 [style = bold, label=""];
36->21 [style = solid, label="vlanDbId"];
9->40 [style = bold, label=""];
33->11 [style = dotted, label="true"];
4->3 [style = bold, label=""];
19->34 [style = bold, label=""];
7->1 [style = bold, label=""];
32->24 [style = dotted, label="true"];
49->30 [style = solid, label="vlanDbId"];
51->24 [style = dotted, label="true"];
7->13 [style = dotted, label="true"];
10->43 [style = dotted, label="true"];
39->8 [style = bold, label=""];
36->38 [style = solid, label="vlanDbId"];
36->5 [style = solid, label="vlanDbId"];
35->25 [style = solid, label="userId"];
36->17 [style = solid, label="vlanDbId"];
46->39 [style = bold, label=""];
7->26 [style = dotted, label="false"];
48->17 [style = bold, label=""];
7->42 [style = dotted, label="true"];
54->58 [style = bold, label=""];
24->20 [style = bold, label=""];
7->29 [style = dotted, label="true"];
60->55 [style = bold, label=""];
0->16 [style = dotted, label="false"];
49->3 [style = solid, label="vlanDbId"];
38->18 [style = bold, label=""];
23->37 [style = bold, label=""];
7->23 [style = dotted, label="true"];
1->45 [style = solid, label="resourceCountToBeDecrement"];
12->6 [style = dotted, label="true"];
7->4 [style = dotted, label="false"];
18->25 [style = bold, label=""];
36->11 [style = solid, label="vlanDbId"];
6->7 [style = solid, label="isAccountSpecific"];
49->20 [style = solid, label="vlanDbId"];
20->7 [style = bold, label=""];
8->7 [style = solid, label="isAccountSpecific"];
59->56 [style = bold, label=""];
0->41 [style = dotted, label="true"];
42->38 [style = bold, label=""];
14->21 [style = bold, label=""];
50->51 [style = solid, label="domainVlan"];
36->41 [style = solid, label="vlanDbId"];
30->15 [style = solid, label="allocIpCount"];
25->0 [style = bold, label=""];
0->16 [style = bold, label=""];
17->46 [style = bold, label=""];
30->4 [style = solid, label="allocIpCount"];
34->50 [style = dashed, label="0"];
9->42 [style = bold, label=""];
16->27 [style = bold, label=""];
57->53 [style = solid, label="vlanId"];
48->52 [style = dotted, label="true"];
43->25 [style = solid, label="caller"];
36->28 [style = solid, label="vlanDbId"];
5->31 [style = dotted, label="true"];
16->45 [style = solid, label="resourceCountToBeDecrement"];
17->46 [style = solid, label="vlanRange"];
19->50 [style = bold, label=""];
4->15 [style = dotted, label="true"];
7->0 [style = dotted, label="true"];
15->3 [style = bold, label=""];
58->60 [style = solid, label="sc"];
51->20 [style = bold, label=""];
49->17 [style = solid, label="vlanDbId"];
10->35 [style = dotted, label="true"];
36->40 [style = solid, label="vlanDbId"];
0->41 [style = bold, label=""];
49->5 [style = solid, label="vlanDbId"];
58->53 [style = bold, label=""];
8->2 [style = bold, label=""];
2->12 [style = solid, label="acctVln"];
49->40 [style = solid, label="vlanDbId"];
32->51 [style = dashed, label="0"];
28->33 [style = solid, label="vlanRange"];
46->8 [style = bold, label=""];
7->18 [style = dotted, label="true"];
14->13 [style = bold, label=""];
49->11 [style = solid, label="vlanDbId"];
49->38 [style = solid, label="vlanDbId"];
0->27 [style = dotted, label="false"];
7->28 [style = dotted, label="true"];
52->25 [style = solid, label="userId"];
33->14 [style = bold, label=""];
42->18 [style = bold, label=""];
18->25 [style = dotted, label="true"];
45->3 [style = bold, label=""];
26->5 [style = bold, label=""];
49->45 [style = solid, label="vlanDbId"];
49->37 [style = solid, label="vlanDbId"];
49->21 [style = solid, label="vlanDbId"];
6->19 [style = bold, label=""];
7->9 [style = dotted, label="true"];
1->16 [style = solid, label="resourceCountToBeDecrement"];
12->6 [style = bold, label=""];
3->22 [style = bold, label=""];
36->45 [style = solid, label="vlanDbId"];
48->49 [style = dotted, label="true"];
49->41 [style = solid, label="vlanDbId"];
2->12 [style = bold, label=""];
26->5 [style = solid, label="ipAlias"];
23->37 [style = dotted, label="true"];
10->36 [style = dotted, label="true"];
36->31 [style = solid, label="vlanDbId"];
28->33 [style = bold, label=""];
5->31 [style = bold, label=""];
7->47 [style = dotted, label="true"];
30->4 [style = bold, label=""];
50->51 [style = bold, label=""];
7->44 [style = dotted, label="true"];
13->23 [style = bold, label=""];
49->28 [style = solid, label="vlanDbId"];
34->32 [style = solid, label="domainVln"];
46->39 [style = dotted, label="true"];
59->57 [style = dotted, label="true"];
9->40 [style = dotted, label="true"];
12->19 [style = bold, label=""];
32->24 [style = bold, label=""];
23->9 [style = bold, label=""];
40->42 [style = bold, label=""];
49->31 [style = solid, label="vlanDbId"];
7->14 [style = dotted, label="true"];
}
