digraph {
1 [style = filled, label = "PendingAntiCompaction.AcquireResult fakeResult = new PendingAntiCompaction.AcquireResult(cfs2,null,null)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "InstrumentedAcquisitionCallback cb = new InstrumentedAcquisitionCallback(UUIDGen.getTimeUUID(),FULL_RANGE)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(Transactional.AbstractTransactional.State.IN_PROGRESS,result.txn.state())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertNotNull(result)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "PendingAntiCompaction.AcquisitionCallable acquisitionCallable = new PendingAntiCompaction.AcquisitionCallable(cfs,FULL_RANGE,UUIDGen.getTimeUUID())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "makeSSTables(2)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertFalse(cb.submittedCompactions.contains(cfs2.metadata.id))@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "cb.apply(Lists.newArrayList(result,fakeResult))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "cb.apply(Lists.newArrayList(result,null))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "callbackNullTxn['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "Assert.assertEquals(Transactional.AbstractTransactional.State.ABORTED,result.txn.state())@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "PendingAntiCompaction.AcquireResult result = acquisitionCallable.call()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertTrue(cb.submittedCompactions.isEmpty())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "callbackNullResult['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "cfs.disableAutoCompaction()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertTrue(cb.submittedCompactions.isEmpty())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(1,cb.submittedCompactions.size())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ColumnFamilyStore cfs2 = Schema.instance.getColumnFamilyStoreInstance(Schema.instance.getTableMetadata(\"system\",\"peers\").id)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertTrue(cb.submittedCompactions.contains(cfm.id))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "InstrumentedAcquisitionCallback cb = new InstrumentedAcquisitionCallback(UUIDGen.getTimeUUID(),atEndpoint(FULL_RANGE,NO_RANGES))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "callbackNullTxn['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5->2 [style = bold, label=""];
9->11 [style = bold, label=""];
8->4 [style = bold, label=""];
7->10 [style = bold, label=""];
4->6 [style = solid, label="result"];
3->1 [style = solid, label="cfs2"];
13->6 [style = bold, label=""];
0->9 [style = bold, label=""];
14->9 [style = bold, label=""];
6->19 [style = bold, label=""];
16->13 [style = bold, label=""];
15->6 [style = bold, label=""];
3->1 [style = bold, label=""];
4->7 [style = solid, label="result"];
1->7 [style = solid, label="fakeResult"];
11->8 [style = bold, label=""];
12->3 [style = bold, label=""];
19->17 [style = bold, label=""];
18->16 [style = bold, label=""];
12->18 [style = bold, label=""];
4->12 [style = bold, label=""];
1->15 [style = bold, label=""];
7->6 [style = dashed, label="0"];
10->19 [style = dashed, label="0"];
20->9 [style = bold, label=""];
6->7 [style = bold, label=""];
13->15 [style = dashed, label="0"];
4->12 [style = solid, label="result"];
5->17 [style = dashed, label="0"];
10->5 [style = bold, label=""];
1->13 [style = bold, label=""];
}
