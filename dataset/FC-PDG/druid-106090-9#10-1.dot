digraph {
0 [style = filled, label = "JoinTestHelper.verifyCursors(new HashJoinSegmentStorageAdapter(factSegment.asStorageAdapter(),joinableClauses,preAnalysis).makeCursors(null,Intervals.ETERNITY,VirtualColumns.EMPTY,Granularities.ALL,false,null),ImmutableList.of(\"page\",\"countryIsoCode\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8af968,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8af970,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8af978,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8af980,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8af988,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8af990,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8af998,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8af9a0,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8af9a8,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8af9b0,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8af9b8,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8af9c0,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8af9c8,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8af9d0,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8af9d8,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8af9e0,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8af9e8,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8af9f0,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8af9f8,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8afa00,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8afa08,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8afa10,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8afa18))@@@5@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "test_makeCursors_factToCountryLeft['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "test_makeCursors_factToCountryLeft['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.LEFT))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(joinableClauses,VirtualColumns.EMPTY,null,true,true,true,QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE_KEY)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(joinableClauses,VirtualColumns.EMPTY,null,true,true,true,QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.INNER))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "test_makeCursors_factToCountryInner['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5->2 [style = bold, label=""];
1->2 [style = bold, label=""];
2->3 [style = solid, label="joinableClauses"];
2->4 [style = solid, label="joinableClauses"];
6->7 [style = bold, label=""];
7->3 [style = solid, label="joinableClauses"];
3->4 [style = dashed, label="0"];
2->7 [style = dashed, label="0"];
2->4 [style = bold, label=""];
7->3 [style = bold, label=""];
3->0 [style = bold, label=""];
2->3 [style = bold, label=""];
4->0 [style = bold, label=""];
}
