digraph {
51 [style = filled, label = "tagConsumerTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Git git = new Git(repository)@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "git.add().addFilepattern(filenameBranchToAdd).call()@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertTrue(status.getAdded().contains(filenameToAdd))@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "count == 0@@@53@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "template.sendBody(\"direct:create-branch\",\"\")@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "count++@@@59@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "File gitDir = new File(gitLocalRepo,\".git\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(gitDir.exists(),true)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "refInternal.getName().equals(\"refs/heads/\" + branchTest)@@@16@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
42 [style = filled, label = "branchCreated = true@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
49 [style = filled, label = "Git git = getGitTestRepository()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Iterable<RevCommit> revCommits = template.requestBody(\"direct:log\",\"\",)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
48 [style = filled, label = "fileToAddDifferent.createNewFile()@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
53 [style = filled, label = "tagCreated = true@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "List<Ref> ref = git.tagList().call()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "boolean branchCreated = false@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
55 [style = filled, label = "refInternal.getName().equals(\"refs/tags/\" + tagTest)@@@27@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(rev.getShortMessage(),commitMessage)@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "File fileToAddDifferent = new File(gitLocalRepo,filenameBranchToAdd)@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
59 [style = filled, label = "boolean tagCreated = false@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "repository.close()@@@35@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "git.close()@@@32@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "git.commit().setMessage(commitMessage).call()@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
60 [style = filled, label = "template.sendBody(\"direct:create-tag\",\"\")@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertEquals(gitRevCommit.getShortMessage(),rev.getShortMessage())@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "logBranchTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "int count = 0@@@51@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "template.send(\"direct:add-on-branch\",new Processor(){@Override public void process(Exchange exchange){exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME,filenameBranchToAdd)}})@@@38@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "template.send(\"direct:commit-all-branch\",new Processor(){@Override public void process(Exchange exchange){exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE,commitMessageAll)}})@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
52 [style = filled, label = "Status status = new Git(repository).status().call()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "assertEquals(tagCreated,true)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "fileToAdd.createNewFile()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertTrue(status.getAdded().contains(filenameToAdd))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "Iterator<RevCommit> gitLogs = git.log().call().iterator()@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "RevCommit gitRevCommit = gitLogs.next()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Thread.sleep(1 * 5000)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(rev.getShortMessage(),commitMessageAll)@@@54@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertEquals(rev.getShortMessage(),commitMessage)@@@57@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertEquals(gitRevCommit.getName(),rev.getName())@@@29@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "repository.close()@@@61@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "git.commit().setMessage(commitMessageAll).call()@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "File fileToAddDifferent = new File(gitLocalRepo,filenameBranchToAdd)@@@36@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "File fileToAdd = new File(gitLocalRepo,filenameToAdd)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "fileToAddDifferent.createNewFile()@@@37@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(gitDir.exists(),true)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "template.send(\"direct:commit\",new Processor(){@Override public void process(Exchange exchange){exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE,commitMessage)}})@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "git.add().addFilepattern(filenameToAdd).call()@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "count == 1@@@56@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertEquals(branchCreated,true)@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
46 [style = filled, label = "Status status = git.status().call()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "File gitDir = new File(gitLocalRepo,\".git\")@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "revCommits = template.requestBody(\"direct:log-branch\",\"\",)@@@50@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "Iterable<RevCommit> revCommits = template.requestBody(\"direct:log-branch\",\"\",)@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "template.send(\"direct:add\",new Processor(){@Override public void process(Exchange exchange){exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME,filenameToAdd)}})@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Repository repository = getTestRepository()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "refInternal.getName().equals(\"refs/heads/\" + branchTest)@@@31@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "logBranchTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
61 [style = filled, label = "MockEndpoint added = getMockEndpoint(\"mock:result-tag\")@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(branchCreated,true)@@@35@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "assertEquals(added.getExchanges().size(),1)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Status status = template.requestBody(\"direct:status\",\"\",)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6->25 [style = solid, label="branchCreated"];
59->54 [style = solid, label="tagCreated"];
8->30 [style = bold, label=""];
47->9 [style = bold, label=""];
8->30 [style = dotted, label="true"];
19->60 [style = bold, label=""];
42->43 [style = solid, label="branchCreated"];
20->26 [style = bold, label=""];
18->15 [style = dotted, label="true"];
28->9 [style = bold, label=""];
53->54 [style = bold, label=""];
3->4 [style = bold, label=""];
48->39 [style = bold, label=""];
31->42 [style = dotted, label="true"];
23->29 [style = bold, label=""];
35->37 [style = bold, label=""];
37->38 [style = bold, label=""];
26->35 [style = bold, label=""];
33->48 [style = bold, label=""];
2->49 [style = dashed, label="0"];
16->14 [style = bold, label=""];
41->45 [style = bold, label=""];
58->59 [style = bold, label=""];
40->31 [style = bold, label=""];
26->28 [style = bold, label=""];
30->8 [style = bold, label=""];
8->55 [style = dashed, label="0"];
6->32 [style = bold, label=""];
2->20 [style = bold, label=""];
44->21 [style = bold, label=""];
7->1 [style = bold, label=""];
24->19 [style = bold, label=""];
18->15 [style = bold, label=""];
27->18 [style = solid, label="count"];
46->36 [style = bold, label=""];
42->31 [style = bold, label=""];
27->14 [style = solid, label="count"];
53->54 [style = solid, label="tagCreated"];
4->0 [style = bold, label=""];
27->16 [style = solid, label="count"];
52->0 [style = bold, label=""];
40->43 [style = solid, label="branchCreated"];
55->53 [style = dotted, label="true"];
43->33 [style = bold, label=""];
59->55 [style = bold, label=""];
5->7 [style = bold, label=""];
38->46 [style = bold, label=""];
14->18 [style = bold, label=""];
39->41 [style = bold, label=""];
4->52 [style = dashed, label="0"];
54->61 [style = bold, label=""];
13->18 [style = bold, label=""];
17->10 [style = bold, label=""];
27->14 [style = bold, label=""];
34->49 [style = bold, label=""];
4->46 [style = dashed, label="0"];
32->30 [style = bold, label=""];
25->17 [style = bold, label=""];
45->44 [style = bold, label=""];
5->19 [style = bold, label=""];
60->58 [style = bold, label=""];
31->42 [style = bold, label=""];
2->19 [style = solid, label="repository"];
51->2 [style = bold, label=""];
10->23 [style = bold, label=""];
50->57 [style = bold, label=""];
30->25 [style = solid, label="branchCreated"];
31->43 [style = bold, label=""];
9->3 [style = bold, label=""];
14->13 [style = bold, label=""];
12->27 [style = bold, label=""];
49->20 [style = bold, label=""];
0->5 [style = bold, label=""];
18->16 [style = bold, label=""];
53->55 [style = bold, label=""];
19->21 [style = bold, label=""];
36->47 [style = bold, label=""];
32->21 [style = bold, label=""];
42->43 [style = bold, label=""];
3->52 [style = bold, label=""];
25->54 [style = dashed, label="0"];
21->6 [style = bold, label=""];
3->40 [style = bold, label=""];
16->18 [style = solid, label="count"];
16->14 [style = solid, label="count"];
30->25 [style = bold, label=""];
16->22 [style = bold, label=""];
15->16 [style = bold, label=""];
30->53 [style = dashed, label="0"];
11->2 [style = bold, label=""];
14->13 [style = dotted, label="true"];
57->56 [style = bold, label=""];
29->12 [style = bold, label=""];
13->6 [style = dashed, label="0"];
1->24 [style = bold, label=""];
6->8 [style = bold, label=""];
55->53 [style = bold, label=""];
61->50 [style = bold, label=""];
55->54 [style = bold, label=""];
8->25 [style = bold, label=""];
}
