digraph {
19 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "coordinator.mutex@@@10@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "long initialTerm = randomLongBetween(1,10)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "long newTerm = initialTerm + randomLongBetween(1,10)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertTrue(isLocalNodeElectedMaster())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "coordinator.coordinationState.get().handleStartJoin(new StartJoinRequest(node1,newTerm))@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(expectThrows(,null).getMessage(),containsString(\"join target is a follower\"))@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "handleStartJoinFrom(node1,newTerm)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "DiscoveryNode node0 = newNode(0,true)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "joinNodeAndRun(new JoinRequest(node1,Optional.of(new Join(node1,node0,newTerm,initialTerm,higherVersion))))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testJoinWithHigherTermButBetterStateStillElectsMasterThroughSelfJoin['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "testJoinFollowerFails['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertThat(expectThrows(,null).getMessage(),containsString(\"join target is a follower\"))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "setupFakeMasterServiceAndCoordinator(initialTerm,initialState(node0,initialTerm,initialVersion,new VotingConfiguration(Collections.singleton(node0.getId()))))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "DiscoveryNode node1 = newNode(1,true)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testJoinFollowerFails['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "long higherVersion = initialVersion + randomLongBetween(1,10)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "coordinator.becomeFollower(\"test\",node1)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "long initialVersion = randomLongBetween(1,10)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "handleFollowerCheckFrom(node1,newTerm)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5->10 [style = bold, label=""];
6->3 [style = bold, label=""];
16->0 [style = bold, label=""];
9->0 [style = bold, label=""];
3->1 [style = bold, label=""];
21->0 [style = bold, label=""];
19->12 [style = bold, label=""];
5->20 [style = solid, label="initialVersion"];
2->6 [style = bold, label=""];
12->2 [style = solid, label="newTerm"];
12->18 [style = solid, label="newTerm"];
0->10 [style = solid, label="node0"];
10->19 [style = bold, label=""];
12->17 [style = solid, label="newTerm"];
12->17 [style = bold, label=""];
8->2 [style = solid, label="node1"];
12->20 [style = bold, label=""];
8->18 [style = solid, label="node1"];
11->18 [style = solid, label="initialTerm"];
20->18 [style = solid, label="higherVersion"];
11->10 [style = solid, label="initialTerm"];
8->14 [style = solid, label="node1"];
7->4 [style = bold, label=""];
1->7 [style = bold, label=""];
0->18 [style = solid, label="node0"];
5->10 [style = solid, label="initialVersion"];
11->12 [style = solid, label="initialTerm"];
20->18 [style = bold, label=""];
11->5 [style = bold, label=""];
12->2 [style = bold, label=""];
18->22 [style = bold, label=""];
17->14 [style = bold, label=""];
10->12 [style = bold, label=""];
0->8 [style = bold, label=""];
12->14 [style = solid, label="newTerm"];
13->15 [style = bold, label=""];
14->13 [style = bold, label=""];
6->3 [style = dotted, label="true"];
8->17 [style = solid, label="node1"];
8->11 [style = bold, label=""];
8->3 [style = solid, label="node1"];
}
