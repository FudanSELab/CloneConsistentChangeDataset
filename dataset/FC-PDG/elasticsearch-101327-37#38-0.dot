digraph {
31 [style = filled, label = "_errHandler.sync(this)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "RecognitionException re@@@45@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ParserRuleContext _parentctx = _ctx@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "int _startState = 60@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "getInterpreter().adaptivePredict(_input,102,_ctx)@@@30@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "enterRecursionRule(_localctx,60,RULE_primaryExpression,_p)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "_errHandler.reportError(this,re)@@@137@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int _parentState = getState()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "primaryExpression['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "_errHandler.recover(this,re)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "TableIdentifierContext _localctx = new TableIdentifierContext(_ctx,getState())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "setState(767)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "(((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPTIMIZED - 64)) | (1L << (PARSED - 64)) | (1L << (PHYSICAL - 64)) | (1L << (PLAN - 64)) | (1L << (RLIKE - 64)) | (1L << (QUERY - 64)) | (1L << (SCHEMAS - 64)) | (1L << (SECOND - 64)) | (1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (YEAR - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)@@@14@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "enterOuterAlt(_localctx,2)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "int _la@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "return _localctx@@@53@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx,_parentState)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "RecognitionException re@@@135@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "int _p@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "{exitRule()}@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "{setState(758)_la = _input.LA(1)if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPTIMIZED - 64)) | (1L << (PARSED - 64)) | (1L << (PHYSICAL - 64)) | (1L << (PLAN - 64)) | (1L << (RLIKE - 64)) | (1L << (QUERY - 64)) | (1L << (SCHEMAS - 64)) | (1L << (SECOND - 64)) | (1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (YEAR - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {{setState(755)((TableIdentifierContext)_localctx).catalog = identifier()setState(756)match(T__3)}}setState(760)match(TABLE_IDENTIFIER)}@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "_localctx.exception = re@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "enterOuterAlt(_localctx,1)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "{setState(590)_errHandler.sync(this)switch (getInterpreter().adaptivePredict(_input,79,_ctx)) {case 1:{_localctx = new CastContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(570)castExpression()}breakcase 2:{_localctx = new ExtractContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(571)extractExpression()}breakcase 3:{_localctx = new CurrentDateTimeFunctionContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(572)builtinDateTimeFunction()}breakcase 4:{_localctx = new ConstantDefaultContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(573)constant()}breakcase 5:{_localctx = new StarContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(577)_la = _input.LA(1)if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPTIMIZED - 64)) | (1L << (PARSED - 64)) | (1L << (PHYSICAL - 64)) | (1L << (PLAN - 64)) | (1L << (RLIKE - 64)) | (1L << (QUERY - 64)) | (1L << (SCHEMAS - 64)) | (1L << (SECOND - 64)) | (1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (YEAR - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {{setState(574)qualifiedName()setState(575)match(DOT)}}setState(579)match(ASTERISK)}breakcase 6:{_localctx = new FunctionContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(580)functionExpression()}breakcase 7:{_localctx = new SubqueryExpressionContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(581)match(T__0)setState(582)query()setState(583)match(T__1)}breakcase 8:{_localctx = new DereferenceContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(585)qualifiedName()}breakcase 9:{_localctx = new ParenthesizedExpressionContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(586)match(T__0)setState(587)expression()setState(588)match(T__1)}break_ctx.stop = _input.LT(-1)setState(597)_errHandler.sync(this)_alt = getInterpreter().adaptivePredict(_input,80,_ctx)while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {if (_alt == 1) {if (_parseListeners != null) triggerExitRuleEvent()_prevctx = _localctx{{_localctx = new CastOperatorExpressionContext(new PrimaryExpressionContext(_parentctx,_parentState))pushNewRecursionContext(_localctx,_startState,RULE_primaryExpression)setState(592)if (!(precpred(_ctx,9))) throw new FailedPredicateException(this,\"precpred(_ctx, 9)\")setState(593)match(CAST_OP)setState(594)dataType()}}}setState(599)_errHandler.sync(this)_alt = getInterpreter().adaptivePredict(_input,80,_ctx)}}@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "_localctx.exception = re@@@136@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "primaryExpression['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "_errHandler.recover(this,re)@@@138@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "enterOuterAlt(_localctx,1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "int _alt@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "enterRule(_localctx,96,RULE_tableIdentifier)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "return _localctx@@@143@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "getInterpreter().adaptivePredict(_input,103,_ctx)@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "{setState(764)_errHandler.sync(this)switch (getInterpreter().adaptivePredict(_input,102,_ctx)) {case 1:{setState(761)((TableIdentifierContext)_localctx).catalog = identifier()setState(762)match(T__3)}breaksetState(766)((TableIdentifierContext)_localctx).name = identifier()}@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "{unrollRecursionContexts(_parentctx)}@@@140@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "_errHandler.reportError(this,re)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "PrimaryExpressionContext _prevctx = _localctx@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "tableIdentifier['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14->5 [style = bold, label=""];
8->10 [style = solid, label="_parentState"];
10->12 [style = solid, label="_localctx"];
4->0 [style = solid, label="_alt"];
4->6 [style = bold, label=""];
18->3 [style = bold, label=""];
21->34 [style = solid, label="_la"];
27->26 [style = solid, label="_localctx"];
11->4 [style = bold, label=""];
35->33 [style = bold, label=""];
11->29 [style = bold, label=""];
31->11 [style = bold, label=""];
25->32 [style = bold, label=""];
1->9 [style = bold, label=""];
35->29 [style = solid, label="_localctx"];
22->28 [style = dotted, label="true"];
22->32 [style = dotted, label="true"];
14->0 [style = solid, label="_startState"];
7->17 [style = dotted, label="true"];
11->0 [style = solid, label="_la"];
3->0 [style = solid, label="_parentctx"];
12->14 [style = bold, label=""];
2->5 [style = solid, label="_p"];
11->30 [style = dotted, label="true"];
6->0 [style = bold, label=""];
34->23 [style = bold, label=""];
32->23 [style = bold, label=""];
9->15 [style = bold, label=""];
3->15 [style = solid, label="_parentctx"];
27->23 [style = bold, label=""];
11->29 [style = dotted, label="true"];
8->0 [style = solid, label="_parentState"];
7->1 [style = dotted, label="true"];
0->16 [style = solid, label="_localctx"];
21->24 [style = bold, label=""];
35->30 [style = solid, label="_localctx"];
7->9 [style = dotted, label="true"];
3->35 [style = dashed, label="0"];
23->26 [style = bold, label=""];
10->12 [style = bold, label=""];
33->21 [style = bold, label=""];
11->30 [style = bold, label=""];
30->27 [style = bold, label=""];
11->36 [style = dotted, label="true"];
29->34 [style = bold, label=""];
22->25 [style = dotted, label="true"];
13->2 [style = dotted, label="true"];
0->15 [style = bold, label=""];
20->35 [style = bold, label=""];
24->31 [style = bold, label=""];
11->19 [style = dotted, label="true"];
5->11 [style = bold, label=""];
10->0 [style = solid, label="_localctx"];
22->28 [style = bold, label=""];
3->8 [style = bold, label=""];
15->16 [style = bold, label=""];
7->17 [style = bold, label=""];
13->3 [style = bold, label=""];
18->2 [style = dotted, label="true"];
10->5 [style = solid, label="_localctx"];
34->26 [style = solid, label="_localctx"];
35->33 [style = solid, label="_localctx"];
10->6 [style = solid, label="_localctx"];
8->10 [style = bold, label=""];
28->25 [style = bold, label=""];
17->1 [style = bold, label=""];
}
