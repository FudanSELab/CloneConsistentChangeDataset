digraph {
32 [style = filled, label = "Set<EndpointPair<N>> allEndpointPairs = new HashSet<EndpointPair<N>>()@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "int edgeStart = graphString.indexOf(\"edges:\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(graph.successors(node)).hasSize(graph.outDegree(node))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(nodeString).contains(node.toString())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "graph.isDirected()@@@14@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(graphString).contains(\"allowsSelfLoops: \" + graph.allowsSelfLoops())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "int nodeStart = graphString.indexOf(\"nodes:\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "String graphString = graph.toString()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "String nodeString = graphString.substring(nodeStart,edgeStart)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertStronglyEquivalent(graph,ImmutableGraph.copyOf(graph))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(node).isNotEqualTo(adjacentNode)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(graph.degree(node)).isEqualTo(graph.adjacentNodes(node).size() + selfLoopCount)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(graph.predecessors(node).contains(adjacentNode) || graph.successors(node).contains(adjacentNode)).isTrue()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(graph.degree(node)).isEqualTo(graph.inDegree(node) + graph.outDegree(node))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Set<EndpointPair<N>> allEndpointPairs = new HashSet<>()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertThat(graph.predecessors(node)).hasSize(graph.inDegree(node))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertStronglyEquivalent(graph,Graphs.copyOf(graph))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(graph.inDegree(node)).isEqualTo(graph.degree(node))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "validateGraph['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(graph.predecessors(successor)).contains(node)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(graph.hasEdgeConnecting(node,successor)).isTrue()@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(graph.predecessors(node)).isEqualTo(graph.adjacentNodes(node))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(graph.hasEdgeConnecting(predecessor,node)).isTrue()@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(graph.edges()).isEqualTo(allEndpointPairs)@@@45@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "validateGraph['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Graph<N> graph@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(graph.successors(node)).isEqualTo(graph.adjacentNodes(node))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "int selfLoopCount = graph.adjacentNodes(node).contains(node)? 1: 0@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(graphString).contains(\"isDirected: \" + graph.isDirected())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "validateGraph['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "allEndpointPairs.add(EndpointPair.of(graph,node,successor))@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(graph.outDegree(node)).isEqualTo(graph.degree(node))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "sanityCheckSet(graph.edges())@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(graph.successors(predecessor)).contains(node)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "!graph.allowsSelfLoops()@@@28@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(graph.edges()).doesNotContain(EndpointPair.of(graph,new Object(),new Object()))@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->22 [style = bold, label=""];
31->12 [style = dotted, label="false"];
20->8 [style = solid, label="selfLoopCount"];
17->26 [style = bold, label=""];
25->28 [style = bold, label=""];
31->14 [style = dotted, label="false"];
16->11 [style = bold, label=""];
31->8 [style = dotted, label="false"];
10->31 [style = bold, label=""];
18->23 [style = bold, label=""];
5->9 [style = bold, label=""];
33->6 [style = dotted, label="true"];
35->6 [style = dotted, label="true"];
3->25 [style = bold, label=""];
34->13 [style = solid, label="allEndpointPairs"];
31->0 [style = bold, label=""];
6->11 [style = solid, label="graph"];
22->9 [style = bold, label=""];
21->34 [style = bold, label=""];
31->4 [style = dotted, label="false"];
23->15 [style = bold, label=""];
15->30 [style = bold, label=""];
19->17 [style = bold, label=""];
6->28 [style = solid, label="graph"];
30->21 [style = solid, label="edgeStart"];
26->24 [style = bold, label=""];
25->16 [style = bold, label=""];
24->18 [style = bold, label=""];
34->10 [style = bold, label=""];
22->5 [style = bold, label=""];
32->10 [style = bold, label=""];
15->21 [style = solid, label="nodeStart"];
31->0 [style = dotted, label="true"];
32->34 [style = dashed, label="0"];
22->5 [style = dotted, label="true"];
9->27 [style = bold, label=""];
30->21 [style = bold, label=""];
20->8 [style = bold, label=""];
7->28 [style = bold, label=""];
8->2 [style = bold, label=""];
31->20 [style = dotted, label="false"];
31->1 [style = dotted, label="true"];
32->13 [style = solid, label="allEndpointPairs"];
0->1 [style = bold, label=""];
2->14 [style = bold, label=""];
21->32 [style = bold, label=""];
27->7 [style = bold, label=""];
11->13 [style = bold, label=""];
35->17 [style = bold, label=""];
7->27 [style = bold, label=""];
4->12 [style = bold, label=""];
6->17 [style = solid, label="graph"];
25->10 [style = bold, label=""];
19->6 [style = dotted, label="true"];
28->3 [style = bold, label=""];
29->22 [style = bold, label=""];
31->2 [style = dotted, label="false"];
31->20 [style = bold, label=""];
6->26 [style = solid, label="graph"];
1->29 [style = bold, label=""];
31->29 [style = dotted, label="true"];
12->22 [style = bold, label=""];
33->17 [style = bold, label=""];
14->4 [style = bold, label=""];
}
