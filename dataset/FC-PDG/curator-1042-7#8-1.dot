digraph {
11 [style = filled, label = "final AtomicBoolean firstTime = new AtomicBoolean(true)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "retryLoop.takeException(e)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "client.start()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "retryLoop.start()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "RetryLoop.callWithRetry(client,new Callable<Void>(){@Override public Void call(){if (firstTime.compareAndSet(true,false)) {Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\",false))KillSession2.kill(client.getZooKeeper())client.getZooKeeper()client.blockUntilConnectedOrTimedOut()}Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\",false))return null}})@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testRetry['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Exception e@@@36@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final CuratorZookeeperClient client = new CuratorZookeeperClient(server.getConnectString(),timing.session(),timing.connection(),null,new ExponentialBackoffRetry(100,3))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testRetry['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "SessionFailRetryLoop.callWithRetry(client,SessionFailRetryLoop.Mode.RETRY,new Callable<Object>(){@Override public Object call(){RetryLoop.callWithRetry(client,new Callable<Void>(){@Override public Void call(){if (firstTime.compareAndSet(true,false)) {Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\",false))KillSession.kill(client.getZooKeeper(),server.getConnectString())client.getZooKeeper()client.blockUntilConnectedOrTimedOut()}Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\",false))return null}})RetryLoop.callWithRetry(client,new Callable<Void>(){@Override public Void call(){Assert.assertFalse(firstTime.get())Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\",false))secondWasDone.set(true)return null}})return null}})@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testRetryStatic['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "RetryLoop.callWithRetry(client,new Callable<Void>(){@Override public Void call(){Assert.assertFalse(firstTime.get())Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\",false))secondWasDone.set(true)return null}})@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final AtomicBoolean secondWasDone = new AtomicBoolean(false)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Timing timing = new Timing()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "retryLoop.shouldContinue()@@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(secondWasDone.get())@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "{retryLoop.close()CloseableUtils.closeQuietly(client)}@@@41@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "SessionFailRetryLoop retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->3 [style = bold, label=""];
5->10 [style = bold, label=""];
4->14 [style = bold, label=""];
7->2 [style = solid, label="client"];
3->17 [style = dashed, label="0"];
3->1 [style = bold, label=""];
9->2 [style = bold, label=""];
17->9 [style = bold, label=""];
4->14 [style = dotted, label="true"];
1->13 [style = bold, label=""];
12->7 [style = bold, label=""];
3->9 [style = bold, label=""];
7->5 [style = bold, label=""];
13->3 [style = bold, label=""];
11->3 [style = bold, label=""];
7->13 [style = solid, label="client"];
10->0 [style = bold, label=""];
7->17 [style = solid, label="client"];
0->8 [style = bold, label=""];
11->17 [style = bold, label=""];
15->12 [style = bold, label=""];
7->1 [style = solid, label="client"];
8->11 [style = bold, label=""];
16->12 [style = bold, label=""];
3->1 [style = dotted, label="true"];
3->13 [style = dotted, label="true"];
6->12 [style = bold, label=""];
}
