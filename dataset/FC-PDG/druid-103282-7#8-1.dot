digraph {
3 [style = filled, label = "filter.addString(\"def-foo\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testQuery(StringUtils.format(\"SELECT COUNT(*) FROM druid.foo WHERE bloom_filter_test(concat(dim1, '-foo'), '%s')\",base64),ImmutableList.of(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).granularity(Granularities.ALL).virtualColumns(expressionVirtualColumn(\"v0\",\"concat(\"dim1\",'-foo')\",ValueType.STRING)).filters(new BloomDimFilter(\"v0\",BloomKFilterHolder.fromBloomKFilter(filter),null)).aggregators(aggregators(new CountAggregatorFactory(\"a0\"))).context(TIMESERIES_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8ca4bb))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testBloomFilterVirtualColumn['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "testQuery(StringUtils.format(\"SELECT COUNT(*) FROM druid.foo WHERE bloom_filter_test(2 * CAST(dim1 AS float), '%s')\",base64),ImmutableList.of(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).granularity(Granularities.ALL).virtualColumns(expressionVirtualColumn(\"v0\",\"(2 * CAST(\"dim1\", 'DOUBLE'))\",ValueType.FLOAT)).filters(new BloomDimFilter(\"v0\",BloomKFilterHolder.fromBloomKFilter(filter),null)).aggregators(aggregators(new CountAggregatorFactory(\"a0\"))).context(TIMESERIES_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8ca520))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testBloomFilterVirtualColumnNumber['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "cannotVectorize()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "testBloomFilterVirtualColumn['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "filter.addFloat(20.2f)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "byte(( bytes = BloomFilterSerializersModule.bloomKFilterToBytes(filter)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "String base64 = StringUtils.encodeBase64String(bytes)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "BloomKFilter filter = new BloomKFilter(1500)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->5 [style = solid, label="bytes"];
4->10 [style = bold, label=""];
5->2 [style = solid, label="base64"];
4->3 [style = bold, label=""];
6->4 [style = bold, label=""];
1->4 [style = bold, label=""];
5->2 [style = bold, label=""];
10->0 [style = bold, label=""];
5->9 [style = solid, label="base64"];
3->10 [style = dashed, label="0"];
8->4 [style = bold, label=""];
5->9 [style = bold, label=""];
2->9 [style = dashed, label="0"];
3->0 [style = bold, label=""];
7->6 [style = bold, label=""];
4->0 [style = solid, label="filter"];
0->5 [style = bold, label=""];
}
