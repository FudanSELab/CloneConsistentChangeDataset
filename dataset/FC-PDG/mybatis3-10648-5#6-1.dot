digraph {
4 [style = filled, label = "when(blob.getBytes(1,2)).thenReturn(byteArray)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "shouldGetResultFromResultSetByPosition['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "when(rs.wasNull()).thenReturn(false)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "when(rs.getBlob(1)).thenReturn(blob)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "shouldGetResultFromResultSetByName['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertThat(TYPE_HANDLER.getResult(rs,1)).isEqualTo(new Byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@19718ff)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "when(rs.getBlob(\"column\")).thenReturn(blob)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(blob.length()).thenReturn((long)byteArray.length)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "byte(( byteArray = new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@19718c5@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(TYPE_HANDLER.getResult(rs,\"column\")).isEqualTo(new Byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@19718b8)@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "shouldGetResultFromResultSetByName['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4->10 [style = bold, label=""];
6->3 [style = bold, label=""];
7->0 [style = bold, label=""];
8->6 [style = bold, label=""];
0->4 [style = solid, label="byteArray"];
1->0 [style = bold, label=""];
9->0 [style = bold, label=""];
5->10 [style = dashed, label="0"];
2->8 [style = dashed, label="0"];
4->5 [style = bold, label=""];
2->6 [style = bold, label=""];
3->4 [style = bold, label=""];
2->3 [style = bold, label=""];
0->2 [style = bold, label=""];
0->8 [style = bold, label=""];
}
