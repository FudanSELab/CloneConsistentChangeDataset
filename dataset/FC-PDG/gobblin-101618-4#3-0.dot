digraph {
27 [style = filled, label = "state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PATH_KEY,publicKeyFile.getAbsolutePath())@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "OwnerAndPermission ownerAndPermission = new OwnerAndPermission(status.getOwner(),status.getGroup(),new FsPermission(FsAction.ALL,FsAction.ALL,FsAction.ALL))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testWriteWithGPGSymmetricEncryption['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertNotEquals(encryptedContent,streamString)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "state.setProp(ConfigurationKeys.WRITER_FILE_PATH,RandomStringUtils.randomAlphabetic(5))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "state.setProp(ConfigurationKeys.WRITER_STAGING_DIR,new Path(testTempPath,\"staging\").toString())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testWriteWithGPGAsymmetricEncryption['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "Path writtenFilePath = new Path(new Path(state.getProp(ConfigurationKeys.WRITER_OUTPUT_DIR),cf.getDatasetAndPartition(metadata).identifier()),cf.getDestination())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "IOUtils.readFully(GPGFileDecryptor.decryptFile(new FileInputStream(writtenFilePath.toString()),\"testPassword\"),decryptedContent)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "state.setProp(ConfigurationKeys.WRITER_OUTPUT_DIR,new Path(testTempPath,\"output\").toString())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "byte(( decryptedContent = new byte((((@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEY_NAME,GPGFileEncryptorTest.KEY_ID)@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "FileStatus status = fs.getFileStatus(testTempPath)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "CopySource.serializeCopyEntity(state,cf)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PATH_KEY,.getResource(GPGFileEncryptorTest.PUBLIC_KEY).toString())@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "dataWriter.write(fileAwareInputStream)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "byte(( decryptedContent = new byte((((@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "WorkUnitState state = TestUtils.createTestWorkUnitState()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "CopyableFile cf = CopyableFileUtils.getTestCopyableFile(ownerAndPermission)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertNotEquals(encryptedContent,streamString)@@@29@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "byte(( encryptedContent = IOUtils.toByteArray(new FileInputStream(writtenFilePath.toString()))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "FileUtils.copyInputStreamToFile(.getResourceAsStream(GPGFileEncryptorTest.PUBLIC_KEY),publicKeyFile)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "IOUtils.readFully(GPGFileDecryptor.decryptFile(new FileInputStream(writtenFilePath.toString()),.getResourceAsStream(GPGFileEncryptorTest.PRIVATE_KEY),GPGFileEncryptorTest.PASSPHRASE),decryptedContent)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "byte(( encryptedContent = IOUtils.toByteArray(new FileInputStream(writtenFilePath.toString()))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "CopySource.serializeCopyableDataset(state,metadata)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertEquals(decryptedContent,streamString)@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PASSWORD_KEY,GPGFileEncryptorTest.PASSPHRASE)@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "dataWriter.commit()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY,\"gpg\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "File publicKeyFile = new File(testTempPath.toString(),\"public.key\")@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "CopyableDatasetMetadata metadata = new CopyableDatasetMetadata(new TestCopyableDataset(new Path(\"/source\")))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PASSWORD_KEY,\"testPassword\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertTrue(writtenFilePath.getName().endsWith(\"gpg\"),\"Expected encryption name to be appended to destination\")@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "FileAwareInputStreamDataWriter dataWriter = new FileAwareInputStreamDataWriter(state,1,0)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(decryptedContent,streamString)@@@30@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "byte(( streamString = \"testEncryptedContents\".getBytes(\"UTF-8\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "FileAwareInputStream fileAwareInputStream = new FileAwareInputStream(cf,StreamUtils.convertStream(new ByteArrayInputStream(streamString)))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testWriteWithGPGAsymmetricEncryption['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12->25 [style = bold, label=""];
4->23 [style = solid, label="decryptedContent"];
8->14 [style = solid, label="cf"];
8->17 [style = solid, label="cf"];
23->15 [style = bold, label=""];
17->21 [style = solid, label="fileAwareInputStream"];
22->6 [style = solid, label="streamString"];
17->21 [style = bold, label=""];
23->7 [style = dashed, label="0"];
25->2 [style = bold, label=""];
4->19 [style = solid, label="decryptedContent"];
30->31 [style = solid, label="publicKeyFile"];
6->14 [style = solid, label="fileAwareInputStream"];
20->18 [style = bold, label=""];
3->6 [style = solid, label="metadata"];
26->33 [style = solid, label="decryptedContent"];
13->22 [style = bold, label=""];
15->19 [style = bold, label=""];
36->22 [style = bold, label=""];
15->32 [style = solid, label="decryptedContent"];
21->4 [style = solid, label="encryptedContent"];
22->20 [style = bold, label=""];
22->17 [style = solid, label="streamString"];
0->11 [style = bold, label=""];
22->15 [style = solid, label="streamString"];
9->6 [style = solid, label="state"];
8->3 [style = bold, label=""];
9->34 [style = solid, label="state"];
30->31 [style = bold, label=""];
14->1 [style = bold, label=""];
3->1 [style = solid, label="metadata"];
28->22 [style = bold, label=""];
23->29 [style = solid, label="encryptedContent"];
8->34 [style = solid, label="cf"];
3->37 [style = solid, label="metadata"];
22->29 [style = solid, label="streamString"];
9->24 [style = bold, label=""];
22->1 [style = solid, label="streamString"];
11->10 [style = bold, label=""];
6->14 [style = bold, label=""];
19->29 [style = bold, label=""];
29->32 [style = bold, label=""];
1->16 [style = solid, label="fileAwareInputStream"];
21->26 [style = bold, label=""];
7->4 [style = bold, label=""];
37->5 [style = bold, label=""];
22->4 [style = solid, label="streamString"];
9->16 [style = solid, label="state"];
3->9 [style = bold, label=""];
27->5 [style = bold, label=""];
4->33 [style = bold, label=""];
18->8 [style = solid, label="ownerAndPermission"];
8->1 [style = solid, label="cf"];
15->19 [style = solid, label="decryptedContent"];
0->35 [style = dashed, label="0"];
4->23 [style = bold, label=""];
2->30 [style = bold, label=""];
22->19 [style = solid, label="streamString"];
8->5 [style = solid, label="cf"];
26->7 [style = bold, label=""];
9->1 [style = solid, label="state"];
24->12 [style = bold, label=""];
22->33 [style = solid, label="streamString"];
2->0 [style = bold, label=""];
16->17 [style = bold, label=""];
9->14 [style = solid, label="state"];
8->6 [style = solid, label="cf"];
18->8 [style = bold, label=""];
9->5 [style = solid, label="state"];
7->15 [style = solid, label="encryptedContent"];
26->7 [style = solid, label="decryptedContent"];
1->16 [style = bold, label=""];
22->32 [style = solid, label="streamString"];
9->37 [style = solid, label="state"];
35->34 [style = bold, label=""];
2->35 [style = bold, label=""];
31->27 [style = bold, label=""];
10->5 [style = bold, label=""];
34->37 [style = bold, label=""];
5->6 [style = bold, label=""];
}
