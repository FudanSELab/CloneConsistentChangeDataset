digraph {
12 [style = filled, label = "testAppend_StringBuffer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertThat(sb.toString()).isEqualTo(\"NULL\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertThat(sb.toString()).isEqualTo(\"foo\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "sb.setNullText(\"NULL\").append((String)null)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(\"foo\",sb.toString())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testAppend_StringBuilder['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "sb.setNullText(\"NULL\").append((StringBuffer)null)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "sb.append(new StringBuffer(\"bar\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"NULL\",sb.toString())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "sb.append(new StringBuffer(\"\"))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(sb.toString()).isEqualTo(\"foobar\")@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(\"foo\",sb.toString())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "sb.append(new StringBuffer(\"foo\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "sb = new StrBuilder()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testAppend_StringBuffer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "sb.append(new StringBuilder(\"bar\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "StrBuilder sb = new StrBuilder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "sb.append(new StringBuilder(\"foo\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "sb.append(new StringBuilder(\"\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(sb.toString()).isEqualTo(\"foo\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertEquals(\"foobar\",sb.toString())@@@12@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
5->3 [style = bold, label=""];
4->10 [style = bold, label=""];
16->3 [style = bold, label=""];
0->9 [style = bold, label=""];
7->17 [style = dashed, label="0"];
0->19 [style = bold, label=""];
7->0 [style = bold, label=""];
5->14 [style = bold, label=""];
19->6 [style = bold, label=""];
8->7 [style = bold, label=""];
1->11 [style = bold, label=""];
9->6 [style = bold, label=""];
20->2 [style = bold, label=""];
1->20 [style = dashed, label="0"];
5->16 [style = dashed, label="0"];
8->17 [style = bold, label=""];
6->20 [style = bold, label=""];
6->1 [style = bold, label=""];
9->19 [style = dashed, label="0"];
12->10 [style = bold, label=""];
17->0 [style = bold, label=""];
10->5 [style = bold, label=""];
10->16 [style = bold, label=""];
18->10 [style = bold, label=""];
6->15 [style = dashed, label="0"];
9->15 [style = bold, label=""];
3->8 [style = bold, label=""];
0->13 [style = dashed, label="0"];
2->11 [style = dashed, label="0"];
1->2 [style = bold, label=""];
14->8 [style = bold, label=""];
13->9 [style = bold, label=""];
3->14 [style = dashed, label="0"];
15->1 [style = bold, label=""];
}
