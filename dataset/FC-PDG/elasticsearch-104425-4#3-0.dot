digraph {
3 [style = filled, label = "TransportMessage transportMessage@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "isRequest@@@8@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final Object content = fragments.get(0)@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "int bytesConsumed = decoder.decode(releasable1,null)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testCompressedDecode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "message = new OutboundMessage.Request(threadContext,transportMessage,Version.CURRENT,action,requestId,false,true)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "assertEquals(1,releasable2.refCount())@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "message = new OutboundMessage.Request(threadContext,transportMessage,Version.CURRENT,action,requestId,false,scheme)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertEquals(2,releasable2.refCount())@@@53@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "threadContext.putHeader(headerKey,headerValue)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "final Header header = (Header)fragments.get(0)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "InboundDecoder decoder = new InboundDecoder(Version.CURRENT,PageCacheRecycler.NON_RECYCLING_INSTANCE)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "message = new OutboundMessage.Response(threadContext,new TestResponse(randomAlphaOfLength(100)),Version.CURRENT,requestId,false,false)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "final BytesReference bytes2 = totalBytes.slice(bytesConsumed,totalBytes.length() - bytesConsumed)@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "fragments.clear()@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final BytesReference uncompressedBytes = out.bytes()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final BytesStreamOutput out = new BytesStreamOutput()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertEquals(totalBytes.length() - totalHeaderSize,bytesConsumed2)@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final ReleasableBytesReference releasable1 = ReleasableBytesReference.wrap(totalBytes)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertFalse(header.needsToReadVariableHeader())@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(header.isRequest())@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final String headerKey = randomAlphaOfLength(10)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(uncompressedBytes,content)@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(header.isRequest())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final ReleasableBytesReference releasable2 = ReleasableBytesReference.wrap(bytes2)@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "int totalHeaderSize = TcpHeader.headerSize(Version.CURRENT) + totalBytes.getInt(TcpHeader.VARIABLE_HEADER_SIZE_POSITION)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertTrue(header.isResponse())@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "message = new OutboundMessage.Response(threadContext,transportMessage,Version.CURRENT,requestId,false,true)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "assertEquals(messageBytes,content)@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "transportMessage = new TestRequest(randomAlphaOfLength(100))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "String action = \"test-request\"@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(Version.CURRENT,header.getVersion())@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "testCompressedDecode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "assertEquals(totalHeaderSize,bytesConsumed)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final String headerValue = randomAlphaOfLength(20)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "threadContext.addResponseHeader(headerKey,headerValue)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "message = new OutboundMessage.Response(threadContext,transportMessage,Version.CURRENT,requestId,false,scheme)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
57 [style = filled, label = "isRequest@@@35@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "long requestId = randomNonNegativeLong()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertFalse(header.isHandshake())@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(requestId,header.getRequestId())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "transportMessage = new TestResponse(randomAlphaOfLength(100))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "int bytesConsumed2 = decoder.decode(releasable2,null)@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "assertThat(header.getHeaders().v2().get(headerKey),hasItems(headerValue))@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(action,header.getActionName())@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "assertTrue(header.isResponse())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertTrue(header.isCompressed())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Compression.Scheme scheme = randomFrom(Compression.Scheme.DEFLATE,Compression.Scheme.LZ4)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
61 [style = filled, label = "final BytesReference totalBytes = message.serialize(new BytesStreamOutput())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "final ArrayList<Object> fragments = new ArrayList<>()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(InboundDecoder.END_CONTENT,endMarker)@@@60@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(1,releasable1.refCount())@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "isRequest@@@15@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "boolean isRequest = randomBoolean()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "final Object endMarker = fragments.get(1)@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertEquals(InboundDecoder.END_CONTENT,endMarker)@@@54@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final BytesReference messageBytes = totalBytes.slice(totalHeaderSize,totalBytes.length() - totalHeaderSize)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(header.getHeaders().v1().get(headerKey),headerValue)@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "message = new OutboundMessage.Request(threadContext,new TestRequest(randomAlphaOfLength(100)),Version.CURRENT,action,requestId,false,false)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertFalse(header.isCompressed())@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "transportMessage.writeTo(out)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "OutboundMessage message@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(header.getHeaders().v1().get(headerKey),headerValue)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "testDecode['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
40->2 [style = bold, label=""];
48->41 [style = solid, label="bytesConsumed2"];
52->8 [style = bold, label=""];
33->4 [style = solid, label="transportMessage"];
57->58 [style = dotted, label="false"];
0->21 [style = dotted, label="false"];
0->20 [style = dotted, label="false"];
28->20 [style = bold, label=""];
46->5 [style = bold, label=""];
42->10 [style = solid, label="bytes2"];
15->23 [style = solid, label="headerKey"];
45->43 [style = solid, label="totalHeaderSize"];
61->36 [style = solid, label="totalBytes"];
43->26 [style = bold, label=""];
59->58 [style = bold, label=""];
57->59 [style = bold, label=""];
49->52 [style = solid, label="scheme"];
48->41 [style = solid, label="bytes2"];
26->11 [style = bold, label=""];
12->7 [style = bold, label=""];
10->48 [style = solid, label="releasable2"];
37->3 [style = bold, label=""];
49->22 [style = bold, label=""];
63->41 [style = solid, label="totalHeaderSize"];
40->12 [style = dashed, label="0"];
44->54 [style = solid, label="endMarker"];
1->44 [style = solid, label="bytesConsumed2"];
32->30 [style = solid, label="bytesConsumed"];
31->6 [style = bold, label=""];
62->42 [style = bold, label=""];
58->20 [style = bold, label=""];
45->44 [style = solid, label="totalHeaderSize"];
19->2 [style = solid, label="action"];
41->1 [style = solid, label="releasable2"];
49->50 [style = solid, label="scheme"];
47->56 [style = solid, label="requestId"];
4->8 [style = bold, label=""];
20->62 [style = bold, label=""];
19->53 [style = solid, label="action"];
14->39 [style = solid, label="headerValue"];
27->25 [style = bold, label=""];
22->33 [style = bold, label=""];
33->53 [style = dashed, label="0"];
22->46 [style = bold, label=""];
48->41 [style = bold, label=""];
15->28 [style = solid, label="headerKey"];
22->52 [style = dotted, label="false"];
1->44 [style = bold, label=""];
27->25 [style = dotted, label="true"];
14->20 [style = solid, label="headerValue"];
6->54 [style = bold, label=""];
17->43 [style = solid, label="bytesConsumed"];
7->57 [style = bold, label=""];
29->13 [style = solid, label="out"];
15->20 [style = solid, label="headerKey"];
10->48 [style = bold, label=""];
22->33 [style = dotted, label="true"];
11->12 [style = bold, label=""];
24->38 [style = bold, label=""];
0->21 [style = bold, label=""];
35->0 [style = solid, label="isRequest"];
51->35 [style = bold, label=""];
33->50 [style = bold, label=""];
22->53 [style = dotted, label="true"];
47->26 [style = solid, label="requestId"];
22->46 [style = dotted, label="false"];
38->18 [style = bold, label=""];
46->5 [style = solid, label="transportMessage"];
25->37 [style = bold, label=""];
4->50 [style = dashed, label="0"];
22->56 [style = dotted, label="false"];
15->25 [style = solid, label="headerKey"];
5->52 [style = dashed, label="0"];
34->35 [style = bold, label=""];
45->60 [style = bold, label=""];
55->35 [style = bold, label=""];
57->0 [style = dotted, label="true"];
22->4 [style = dotted, label="true"];
46->56 [style = dashed, label="0"];
61->63 [style = bold, label=""];
57->2 [style = bold, label=""];
47->12 [style = solid, label="requestId"];
39->37 [style = bold, label=""];
47->4 [style = solid, label="requestId"];
36->32 [style = solid, label="releasable1"];
30->17 [style = bold, label=""];
9->24 [style = solid, label="uncompressedBytes"];
15->14 [style = bold, label=""];
57->2 [style = dotted, label="true"];
57->28 [style = dotted, label="true"];
22->50 [style = dotted, label="true"];
38->6 [style = dashed, label="0"];
46->52 [style = solid, label="transportMessage"];
33->4 [style = bold, label=""];
19->4 [style = solid, label="action"];
45->36 [style = bold, label=""];
35->16 [style = solid, label="isRequest"];
6->24 [style = bold, label=""];
47->50 [style = solid, label="requestId"];
16->23 [style = bold, label=""];
27->39 [style = dotted, label="false"];
32->30 [style = bold, label=""];
35->22 [style = solid, label="isRequest"];
23->42 [style = bold, label=""];
17->43 [style = bold, label=""];
37->22 [style = bold, label=""];
27->39 [style = bold, label=""];
19->47 [style = bold, label=""];
2->0 [style = bold, label=""];
47->52 [style = solid, label="requestId"];
22->5 [style = dotted, label="false"];
30->17 [style = solid, label="releasable1"];
33->50 [style = solid, label="transportMessage"];
14->58 [style = solid, label="headerValue"];
8->45 [style = bold, label=""];
60->36 [style = bold, label=""];
63->30 [style = solid, label="totalHeaderSize"];
1->31 [style = solid, label="content"];
20->42 [style = bold, label=""];
0->23 [style = dotted, label="true"];
14->27 [style = bold, label=""];
13->9 [style = bold, label=""];
0->16 [style = dotted, label="true"];
44->31 [style = bold, label=""];
7->40 [style = bold, label=""];
15->39 [style = solid, label="headerKey"];
57->59 [style = dotted, label="false"];
5->8 [style = bold, label=""];
53->61 [style = bold, label=""];
0->28 [style = dotted, label="true"];
47->15 [style = bold, label=""];
14->23 [style = solid, label="headerValue"];
22->56 [style = bold, label=""];
15->58 [style = solid, label="headerKey"];
19->50 [style = solid, label="action"];
47->5 [style = solid, label="requestId"];
14->28 [style = solid, label="headerValue"];
8->31 [style = solid, label="messageBytes"];
35->19 [style = bold, label=""];
36->32 [style = bold, label=""];
17->48 [style = solid, label="bytesConsumed"];
63->8 [style = solid, label="totalHeaderSize"];
56->61 [style = bold, label=""];
14->25 [style = solid, label="headerValue"];
41->1 [style = bold, label=""];
3->22 [style = bold, label=""];
28->16 [style = bold, label=""];
46->52 [style = bold, label=""];
31->24 [style = solid, label="content"];
22->53 [style = bold, label=""];
21->20 [style = bold, label=""];
32->42 [style = solid, label="bytesConsumed"];
8->30 [style = solid, label="totalBytes"];
19->28 [style = solid, label="action"];
9->45 [style = bold, label=""];
6->18 [style = solid, label="endMarker"];
42->10 [style = bold, label=""];
35->57 [style = solid, label="isRequest"];
24->31 [style = dashed, label="0"];
63->8 [style = bold, label=""];
50->8 [style = bold, label=""];
47->53 [style = solid, label="requestId"];
3->49 [style = bold, label=""];
35->27 [style = solid, label="isRequest"];
8->29 [style = bold, label=""];
0->28 [style = bold, label=""];
29->13 [style = bold, label=""];
}
