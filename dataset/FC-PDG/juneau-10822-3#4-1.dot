digraph {
8 [style = filled, label = "t.consumes(ASet.of(MediaType.of(\"text/foo\")))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "t.consumes((Collection<MediaType>)null)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertObject(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "t.addConsumes(ASet.of())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertObject(t.produces()).isType().asJson().is(\"('text/foo'(\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Operation t = new Operation()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertOptional(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertOptional(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "a06_consumes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertOptional(t.consumes()).isNull()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "a07_produces['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertObject(t.consumes()).isType().asJson().is(\"((\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "a06_consumes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertOptional(t.consumes()).isType().asJson().is(\"((\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertObject(t.produces()).isType().asJson().is(\"('text/foo'(\")@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "t.addProduces(null)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "t.produces(ASet.of())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertOptional(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertObject(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertObject(t.produces()).isType().asJson().is(\"((\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertObject(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "t.addConsumes(ASet.of(MediaType.of(\"text/foo\")))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertObject(t.consumes()).isNull()@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "t.consumes(ASet.of())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertObject(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "assertOptional(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "t.addConsumes(null)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "t.produces(ASet.of(MediaType.of(\"text/foo\")))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "t.produces((Collection<MediaType>)null)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "t.addProduces(ASet.of(MediaType.of(\"text/foo\")))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "t.addProduces(ASet.of())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertObject(t.produces()).isNull()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertObject(t.produces()).isType().asJson().is(\"('text/foo'(\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertObject(t.produces()).isType().asJson().is(\"('text/foo'(\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
8->16 [style = bold, label=""];
27->32 [style = bold, label=""];
30->22 [style = bold, label=""];
9->16 [style = dashed, label="0"];
16->11 [style = bold, label=""];
12->23 [style = dashed, label="0"];
9->11 [style = bold, label=""];
15->7 [style = bold, label=""];
10->14 [style = bold, label=""];
13->20 [style = dashed, label="0"];
3->18 [style = dashed, label="0"];
1->29 [style = dashed, label="0"];
28->7 [style = bold, label=""];
12->20 [style = bold, label=""];
6->17 [style = dashed, label="0"];
7->31 [style = bold, label=""];
0->27 [style = dashed, label="0"];
20->1 [style = bold, label=""];
4->26 [style = dashed, label="0"];
11->19 [style = bold, label=""];
7->8 [style = bold, label=""];
13->1 [style = bold, label=""];
19->0 [style = bold, label=""];
1->17 [style = bold, label=""];
9->33 [style = dashed, label="0"];
3->10 [style = bold, label=""];
12->13 [style = bold, label=""];
11->5 [style = bold, label=""];
1->6 [style = bold, label=""];
21->29 [style = bold, label=""];
13->21 [style = dashed, label="0"];
18->10 [style = bold, label=""];
5->0 [style = bold, label=""];
22->27 [style = bold, label=""];
23->21 [style = bold, label=""];
6->24 [style = dashed, label="0"];
31->33 [style = bold, label=""];
14->12 [style = bold, label=""];
26->23 [style = bold, label=""];
25->26 [style = bold, label=""];
32->25 [style = bold, label=""];
8->9 [style = bold, label=""];
10->4 [style = bold, label=""];
33->30 [style = bold, label=""];
4->12 [style = bold, label=""];
0->18 [style = bold, label=""];
4->14 [style = dashed, label="0"];
2->7 [style = bold, label=""];
8->31 [style = dashed, label="0"];
11->30 [style = dashed, label="0"];
3->32 [style = dashed, label="0"];
29->24 [style = bold, label=""];
5->19 [style = dashed, label="0"];
10->25 [style = dashed, label="0"];
5->22 [style = dashed, label="0"];
}
