digraph {
2 [style = filled, label = "when(preparedStatement.executeBatch()).thenThrow(ex)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "PreparedStatement preparedStatement2 = getPreparedStatement()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "actual.executeBatch(sqlStatementContext)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "verify(preparedStatement).executeBatch()@@@8@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "verify(preparedStatement2).executeBatch()@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "PreparedStatement preparedStatement1 = getPreparedStatement()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "when(preparedStatement2.executeBatch()).thenReturn(new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16e8fb6)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "SQLException ex = new SQLException(\"\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertExecuteBatchForMultiplePreparedStatementsSuccess['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertExecuteBatchForSinglePreparedStatementFailure['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(actual.executeBatch(sqlStatementContext),is(new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16e8f5a))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "setExecutionGroups(Arrays.asList(preparedStatement1,preparedStatement2))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "when(preparedStatement1.executeBatch()).thenReturn(new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16e8fa9)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "verify(preparedStatement).executeBatch()@@@10@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "PreparedStatement preparedStatement = getPreparedStatement()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertExecuteBatchForSinglePreparedStatementFailure['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "setExecutionGroups(Collections.singletonList(preparedStatement))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(actual.executeBatch(sqlStatementContext),is(new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16e8fcc))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "verify(preparedStatement1).executeBatch()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->18 [style = solid, label="preparedStatement2"];
0->4 [style = solid, label="preparedStatement"];
9->0 [style = bold, label=""];
4->6 [style = bold, label=""];
16->10 [style = bold, label=""];
6->7 [style = dashed, label="0"];
18->15 [style = bold, label=""];
12->16 [style = bold, label=""];
12->18 [style = solid, label="preparedStatement1"];
0->12 [style = dashed, label="0"];
7->8 [style = bold, label=""];
2->4 [style = bold, label=""];
4->7 [style = bold, label=""];
3->0 [style = bold, label=""];
2->10 [style = dashed, label="0"];
6->1 [style = bold, label=""];
5->2 [style = bold, label=""];
15->17 [style = bold, label=""];
1->17 [style = dashed, label="0"];
10->13 [style = bold, label=""];
14->12 [style = bold, label=""];
5->2 [style = solid, label="ex"];
13->18 [style = bold, label=""];
0->5 [style = bold, label=""];
17->11 [style = bold, label=""];
}
