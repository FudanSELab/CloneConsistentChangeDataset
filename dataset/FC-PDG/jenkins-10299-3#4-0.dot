digraph {
8 [style = filled, label = "onlineNodeShouldFailWithoutComputerConnectPermission['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "deleteNodeShouldFailWithoutNodeDeletePermission['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(result,failedWith(-1))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: user is missing the Slave/Connect permission\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertThat(result.stderr(),containsString(\"user is missing the Slave/Connect permission\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "j.createSlave(\"aNode\",\"\",null)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "onlineNodeShouldFailWithoutComputerConnectPermission['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(result.stderr(),containsString(\"user is missing the Slave/Delete permission\"))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ).invokeWithArgs(\"aNode\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(result,failedWith(6))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ).invokeWithArgs(\"aNode\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(result,failedWith(1))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4->0 [style = solid, label="result"];
1->4 [style = bold, label=""];
3->1 [style = bold, label=""];
9->2 [style = bold, label=""];
11->1 [style = bold, label=""];
2->6 [style = bold, label=""];
12->9 [style = solid, label="result"];
0->2 [style = bold, label=""];
12->9 [style = bold, label=""];
2->10 [style = bold, label=""];
4->7 [style = bold, label=""];
4->0 [style = bold, label=""];
4->12 [style = dashed, label="0"];
8->1 [style = bold, label=""];
12->2 [style = solid, label="result"];
5->6 [style = dashed, label="0"];
5->10 [style = dashed, label="0"];
7->2 [style = bold, label=""];
1->12 [style = bold, label=""];
0->9 [style = dashed, label="0"];
0->7 [style = dashed, label="0"];
4->2 [style = solid, label="result"];
2->5 [style = bold, label=""];
4->7 [style = solid, label="result"];
}
