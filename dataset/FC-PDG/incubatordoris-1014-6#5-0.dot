digraph {
10 [style = filled, label = "SlotRef slotRef = new SlotRef(null,\"label\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "stmt = new ShowLoadStmt(null,statePredicate,null,new LimitElement(10))@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "StringLiteral stringLiteral = new StringLiteral(\"abc\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "stmt = new ShowResourcesStmt(likePredicate,null,new LimitElement(10))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "ShowResourcesStmt stmt = new ShowResourcesStmt(null,null,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "BinaryPredicate binaryPredicate = new BinaryPredicate(Operator.EQ,slotRef,stringLiteral)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testWhere['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ShowLoadStmt stmt = new ShowLoadStmt(null,null,null,null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "SlotRef slotRef = new SlotRef(null,\"name\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(\"SHOW RESOURCES WHERE `name` = 'abc' LIMIT 10\",stmt.toString())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(\"SHOW RESOURCES WHERE `name` LIKE 'abc' LIMIT 10\",stmt.toString())@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(\"SHOW RESOURCES\",stmt.toString())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "stmt.analyze(analyzer)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "stmt = new ShowLoadStmt(null,binaryPredicate,null,new LimitElement(10))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testWhere['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(\"SHOW LOAD FROM `testCluster:testDb` WHERE `label` LIKE 'ab%' LIMIT 10\",stmt.toString())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(\"SHOW LOAD FROM `testCluster:testDb` WHERE `state` = 'PENDING' LIMIT 10\",stmt.toString())@@@20@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "stmt = new ShowLoadStmt(null,likePredicate,null,new LimitElement(10))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "StringLiteral stringLiteralLike = new StringLiteral(\"ab%\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "LikePredicate likePredicate = new LikePredicate(org.apache.doris.analysis.LikePredicate.Operator.LIKE,slotRef,stringLiteralLike)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "stmt.analyze(analyzer)@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "stmt.analyze(analyzer)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(\"SHOW LOAD FROM `testCluster:testDb` WHERE `label` = 'abc' LIMIT 10\",stmt.toString())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "stmt = new ShowResourcesStmt(binaryPredicate,null,new LimitElement(10))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "BinaryPredicate statePredicate = new BinaryPredicate(Operator.EQ,new SlotRef(null,\"state\"),new StringLiteral(\"PENDING\"))@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testWhere['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "LikePredicate likePredicate = new LikePredicate(org.apache.doris.analysis.LikePredicate.Operator.LIKE,slotRef,stringLiteral)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "stmt.analyze(analyzer)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(\"SHOW LOAD FROM `testCluster:testDb`\",stmt.toString())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24->21 [style = bold, label=""];
25->23 [style = bold, label=""];
26->22 [style = bold, label=""];
23->2 [style = bold, label=""];
7->21 [style = solid, label="stringLiteral"];
13->26 [style = dashed, label="0"];
1->4 [style = solid, label="likePredicate"];
2->26 [style = bold, label=""];
0->1 [style = solid, label="stringLiteralLike"];
11->20 [style = dashed, label="0"];
8->0 [style = bold, label=""];
0->21 [style = dashed, label="0"];
16->18 [style = bold, label=""];
2->13 [style = bold, label=""];
10->12 [style = solid, label="slotRef"];
4->5 [style = bold, label=""];
22->12 [style = solid, label="slotRef"];
8->24 [style = dashed, label="0"];
15->19 [style = bold, label=""];
12->11 [style = solid, label="binaryPredicate"];
14->24 [style = bold, label=""];
10->1 [style = solid, label="slotRef"];
0->1 [style = bold, label=""];
11->14 [style = bold, label=""];
22->21 [style = solid, label="slotRef"];
6->2 [style = bold, label=""];
9->6 [style = bold, label=""];
16->18 [style = solid, label="statePredicate"];
28->27 [style = bold, label=""];
10->7 [style = bold, label=""];
7->12 [style = bold, label=""];
7->12 [style = solid, label="stringLiteral"];
17->6 [style = bold, label=""];
22->7 [style = bold, label=""];
27->5 [style = bold, label=""];
14->8 [style = bold, label=""];
12->20 [style = bold, label=""];
12->20 [style = solid, label="binaryPredicate"];
1->4 [style = bold, label=""];
12->11 [style = bold, label=""];
5->3 [style = bold, label=""];
3->16 [style = bold, label=""];
13->10 [style = bold, label=""];
20->14 [style = bold, label=""];
10->22 [style = dashed, label="0"];
3->5 [style = dashed, label="0"];
21->28 [style = bold, label=""];
21->28 [style = solid, label="likePredicate"];
6->23 [style = dashed, label="0"];
18->15 [style = bold, label=""];
}
