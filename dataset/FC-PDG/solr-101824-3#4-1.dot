digraph {
7 [style = filled, label = "Double doubleResult = (Double)getStatResult(\"sr\",\"double_dd\",VAL_TYPE.DOUBLE)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "Double longResult = (Double)getStatResult(\"mr\",\"long_ld\",VAL_TYPE.DOUBLE)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Double longTest = (Double)calculateNumberStat(longTestStart,\"sum\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "Double doubleResult = (Double)getStatResult(\"mr\",\"double_dd\",VAL_TYPE.DOUBLE)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Double floatResult = (Double)getStatResult(\"sr\",\"float_fd\",VAL_TYPE.DOUBLE)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "sumTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "Double intTest = (Double)calculateNumberStat(intTestStart,\"mean\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testExpressions(expressions)@@@6@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "Double floatResult = (Double)getStatResult(\"mr\",\"float_fd\",VAL_TYPE.DOUBLE)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Double doubleTest = (Double)calculateNumberStat(doubleTestStart,\"mean\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Double intResult = (Double)getStatResult(\"mr\",\"int_id\",VAL_TYPE.DOUBLE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "sumTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(getRawResponse(),doubleResult,doubleTest)@@@14@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "meanTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Double floatTest = (Double)calculateNumberStat(floatTestStart,\"sum\")@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "Map<String,ETP> expressions = new HashMap<>()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Double intTest = (Double)calculateNumberStat(intTestStart,\"sum\")@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(getRawResponse(),floatResult,floatTest)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Double doubleTest = (Double)calculateNumberStat(doubleTestStart,\"sum\")@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Double floatTest = (Double)calculateNumberStat(floatTestStart,\"mean\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Double longTest = (Double)calculateNumberStat(longTestStart,\"mean\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "expressions.put(\"single\",new ETP(\"sum(int_i)\",57.0))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Double longResult = (Double)getStatResult(\"sr\",\"long_ld\",VAL_TYPE.DOUBLE)@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Double intResult = (Double)getStatResult(\"sr\",\"int_id\",VAL_TYPE.DOUBLE)@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(getRawResponse(),intResult,intTest)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(getRawResponse(),longResult,longTest)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "expressions.put(\"multi\",new ETP(\"sum(long_lm)\",120.0))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12->9 [style = solid, label="longTest"];
4->8 [style = solid, label="floatResult"];
5->10 [style = bold, label=""];
2->8 [style = solid, label="floatTest"];
15->13 [style = bold, label=""];
2->19 [style = dashed, label="0"];
18->1 [style = solid, label="intTest"];
11->1 [style = bold, label=""];
0->23 [style = dashed, label="0"];
9->4 [style = bold, label=""];
24->9 [style = solid, label="longResult"];
25->9 [style = bold, label=""];
11->1 [style = solid, label="intTest"];
0->11 [style = bold, label=""];
0->1 [style = solid, label="intResult"];
9->20 [style = bold, label=""];
23->1 [style = solid, label="intResult"];
4->2 [style = bold, label=""];
12->9 [style = bold, label=""];
19->8 [style = bold, label=""];
3->0 [style = bold, label=""];
8->7 [style = bold, label=""];
26->22 [style = bold, label=""];
13->17 [style = bold, label=""];
15->16 [style = solid, label="expressions"];
7->5 [style = bold, label=""];
19->8 [style = solid, label="floatTest"];
1->6 [style = bold, label=""];
12->25 [style = dashed, label="0"];
26->10 [style = solid, label="doubleResult"];
18->1 [style = bold, label=""];
25->9 [style = solid, label="longTest"];
4->20 [style = dashed, label="0"];
1->24 [style = bold, label=""];
24->25 [style = bold, label=""];
6->9 [style = solid, label="longResult"];
11->18 [style = dashed, label="0"];
6->24 [style = dashed, label="0"];
22->10 [style = bold, label=""];
7->10 [style = solid, label="doubleResult"];
14->15 [style = bold, label=""];
5->22 [style = dashed, label="0"];
20->8 [style = solid, label="floatResult"];
7->26 [style = dashed, label="0"];
20->19 [style = bold, label=""];
22->10 [style = solid, label="doubleTest"];
21->23 [style = bold, label=""];
23->18 [style = bold, label=""];
5->10 [style = solid, label="doubleTest"];
17->16 [style = bold, label=""];
2->8 [style = bold, label=""];
8->26 [style = bold, label=""];
6->12 [style = bold, label=""];
}
