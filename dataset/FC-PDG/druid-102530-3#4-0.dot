digraph {
36 [style = filled, label = "Assert.assertEquals(4,task2.getRunner().getRowIngestionMeters().getProcessed())@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "testRestoreAfterPersistingSequences['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "final KafkaIndexTask task2 = createTask(task1.getId(),new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L)),consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future2.get().getStatusCode())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getUnparseable())@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "kafkaProducer.initTransactions()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@55@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "records = generateSinglePartitionRecords(topic)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "SegmentDescriptor desc7 = sd(task1,\"2012/P1D\",0)@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "SegmentDescriptor desc1 = sd(task1,\"2008/P1D\",0)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task1.getRunner().getCurrentOffsets())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future1.get().getStatusCode())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "task1.getRunner().getStatus() != Status.PAUSED@@@21@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final ListenableFuture<TaskStatus> future2 = runTask(task2)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "final ListenableFuture<TaskStatus> future1 = runTask(task1)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testRestore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "SegmentDescriptor desc4 = sd(task1,\"2009/P1D\",1)@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "unlockAppenderatorBasePersistDirForTask(task1)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "kafkaProducer.beginTransaction()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "kafkaProducer.commitTransaction()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,6L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@40@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "Assert.assertEquals(checkpoint.getPartitionSequenceNumberMap(),currentOffsets)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Thread.sleep(10)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "final KafkaIndexTask task1 = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,2L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,6L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
62 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getThrownAway())@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "kafkaProducer.send(record).get()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "kafkaProducer.commitTransaction()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(2,countEvents(task1))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "maxRowsPerSegment = 2@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "kafkaProducer.send(record).get()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getThrownAway())@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "final KafkaIndexTask task2 = createTask(task1.getId(),new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,2L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,6L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testRestore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "unlockAppenderatorBasePersistDirForTask(task1)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "final KafkaIndexTask task1 = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L)),consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "kafkaProducer.beginTransaction()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final ListenableFuture<TaskStatus> future1 = runTask(task1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getUnparseable())@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "kafkaProducer.initTransactions()@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "kafkaProducer.beginTransaction()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc1))@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "kafkaProducer.beginTransaction()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getUnparseable())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getUnparseable())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "kafkaProducer.send(record).get()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "task1.getRunner().setEndOffsets(ImmutableMap.of(0,5L),false)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future2.get().getStatusCode())@@@40@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "kafkaProducer.initTransactions()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "SegmentDescriptor desc1 = sd(task1,\"2010/P1D\",0)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "kafkaProducer.send(record).get()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "SegmentDescriptor desc5 = sd(task1,\"2010/P1D\",0)@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "SegmentDescriptor desc2 = sd(task1,\"2008/P1D\",1)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "SegmentDescriptor desc3 = sd(task1,\"2009/P1D\",0)@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "SegmentDescriptor desc6 = sd(task1,\"2011/P1D\",0)@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "task1.stopGracefully(toolboxFactory.build(task1).getConfig())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "kafkaProducer.initTransactions()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "return@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final KafkaIndexTask task2 = createTask(task1.getId(),new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,6L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(5,task1.getRunner().getRowIngestionMeters().getProcessed())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "countEvents(task1) != 2@@@13@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final KafkaIndexTask task1 = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,6L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "kafkaProducer.commitTransaction()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final ListenableFuture<TaskStatus> future2 = runTask(task2)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->30 [style = bold, label=""];
8->16 [style = bold, label=""];
27->13 [style = solid, label="task1"];
25->1 [style = bold, label=""];
12->5 [style = bold, label=""];
35->25 [style = solid, label="task1"];
44->63 [style = bold, label=""];
28->20 [style = bold, label=""];
27->11 [style = solid, label="task1"];
57->62 [style = bold, label=""];
10->36 [style = dashed, label="0"];
66->52 [style = bold, label=""];
42->9 [style = bold, label=""];
68->49 [style = bold, label=""];
27->7 [style = solid, label="task1"];
27->25 [style = solid, label="task1"];
56->54 [style = bold, label=""];
9->6 [style = bold, label=""];
12->68 [style = bold, label=""];
27->14 [style = solid, label="task1"];
61->40 [style = solid, label="desc3"];
5->18 [style = solid, label="task2"];
25->66 [style = dashed, label="0"];
23->17 [style = bold, label=""];
58->40 [style = solid, label="desc7"];
35->14 [style = solid, label="task1"];
32->18 [style = bold, label=""];
47->9 [style = solid, label="task1"];
39->58 [style = bold, label=""];
13->14 [style = bold, label=""];
44->40 [style = solid, label="desc4"];
63->40 [style = solid, label="desc5"];
59->42 [style = bold, label=""];
22->25 [style = bold, label=""];
3->33 [style = dashed, label="0"];
40->51 [style = bold, label=""];
27->1 [style = solid, label="task1"];
31->4 [style = bold, label=""];
41->65 [style = bold, label=""];
64->45 [style = dotted, label="true"];
39->40 [style = solid, label="desc6"];
18->28 [style = bold, label=""];
0->7 [style = bold, label=""];
33->23 [style = bold, label=""];
46->60 [style = bold, label=""];
32->18 [style = solid, label="task2"];
5->32 [style = dashed, label="0"];
64->45 [style = bold, label=""];
3->23 [style = bold, label=""];
21->9 [style = bold, label=""];
27->11 [style = bold, label=""];
15->31 [style = bold, label=""];
13->29 [style = dotted, label="true"];
53->68 [style = bold, label=""];
60->8 [style = solid, label="task2"];
30->10 [style = bold, label=""];
38->47 [style = bold, label=""];
47->41 [style = bold, label=""];
45->56 [style = bold, label=""];
10->2 [style = bold, label=""];
34->35 [style = bold, label=""];
50->60 [style = solid, label="consumerProps"];
65->29 [style = bold, label=""];
35->11 [style = solid, label="task1"];
36->57 [style = bold, label=""];
63->39 [style = bold, label=""];
24->13 [style = bold, label=""];
25->23 [style = solid, label="desc1"];
43->59 [style = bold, label=""];
35->1 [style = solid, label="task1"];
4->24 [style = bold, label=""];
3->37 [style = bold, label=""];
52->40 [style = solid, label="desc2"];
52->61 [style = bold, label=""];
47->66 [style = solid, label="task1"];
26->3 [style = bold, label=""];
0->12 [style = bold, label=""];
66->40 [style = solid, label="desc1"];
9->46 [style = bold, label=""];
1->3 [style = bold, label=""];
12->32 [style = bold, label=""];
48->64 [style = bold, label=""];
5->18 [style = bold, label=""];
61->44 [style = bold, label=""];
60->8 [style = bold, label=""];
68->53 [style = bold, label=""];
62->66 [style = bold, label=""];
5->60 [style = dashed, label="0"];
68->53 [style = dotted, label="true"];
25->26 [style = solid, label="desc1"];
29->55 [style = bold, label=""];
13->68 [style = dashed, label="0"];
49->43 [style = solid, label="currentOffsets"];
17->67 [style = bold, label=""];
16->30 [style = bold, label=""];
22->1 [style = bold, label=""];
29->53 [style = dashed, label="0"];
27->35 [style = dashed, label="0"];
10->22 [style = bold, label=""];
8->37 [style = dashed, label="0"];
7->12 [style = bold, label=""];
37->17 [style = bold, label=""];
47->44 [style = solid, label="task1"];
1->52 [style = dashed, label="0"];
50->47 [style = solid, label="consumerProps"];
47->39 [style = solid, label="task1"];
58->40 [style = bold, label=""];
47->52 [style = solid, label="task1"];
47->61 [style = solid, label="task1"];
35->7 [style = solid, label="task1"];
47->65 [style = solid, label="task1"];
55->0 [style = bold, label=""];
1->26 [style = bold, label=""];
49->43 [style = bold, label=""];
11->15 [style = bold, label=""];
47->58 [style = solid, label="task1"];
54->50 [style = bold, label=""];
20->21 [style = bold, label=""];
1->26 [style = solid, label="desc2"];
13->29 [style = bold, label=""];
1->17 [style = solid, label="desc2"];
64->56 [style = bold, label=""];
50->38 [style = bold, label=""];
14->0 [style = bold, label=""];
35->13 [style = solid, label="task1"];
19->27 [style = bold, label=""];
47->63 [style = solid, label="task1"];
6->8 [style = bold, label=""];
67->36 [style = bold, label=""];
2->22 [style = bold, label=""];
26->33 [style = bold, label=""];
35->11 [style = bold, label=""];
29->13 [style = bold, label=""];
}
