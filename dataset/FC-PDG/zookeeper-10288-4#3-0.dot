digraph {
0 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "buffer.write(\"B\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(\"B\",buffer.take())@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(\"A\",buffer.take())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "CircularBuffer<String> buffer = new CircularBuffer<>(,capacity)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "buffer.write(\"2\")@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "buffer.write(\"A\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "buffer.write(\"1\")@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertTrue(buffer.isEmpty())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "Assert.assertTrue(buffer.isFull())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "buffer.write(\"f\")@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Assert.assertEquals(\"4\",buffer.take())@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "buffer.write(\"b\")@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertTrue(buffer.isEmpty())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
75 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@75@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "buffer.write(\"3\")@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertEquals(\"g\",buffer.take())@@@73@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "Assert.assertEquals(\"e\",buffer.take())@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "Assert.assertEquals(\"f\",buffer.take())@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertFalse(buffer.isEmpty())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "Assert.assertEquals(\"2\",buffer.take())@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "Assert.assertTrue(buffer.isFull())@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@72@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "buffer.write(\"d\")@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "buffer.write(\"4\")@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "testCircularBuffer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final int capacity = 3@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"B\",buffer.take())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
68 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "Assert.assertEquals(\"3\",buffer.take())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertFalse(buffer.isFull())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertTrue(buffer.isFull())@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "buffer.write(\"c\")@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final int capacity = 1@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testCircularBufferWithCapacity1['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
53 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "buffer.write(\"e\")@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "Assert.assertTrue(buffer.isEmpty())@@@74@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
85 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@71@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
84 [style = filled, label = "buffer.write(\"C\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertTrue(buffer.isEmpty())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "Assert.assertTrue(buffer.isFull())@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertTrue(buffer.isFull())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testCircularBufferWithCapacity1['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertFalse(buffer.isEmpty())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@69@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "buffer.write(\"g\")@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "Assert.assertTrue(buffer.isFull())@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertTrue(buffer.isEmpty())@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(buffer.isFull())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "Assert.assertTrue(buffer.isFull())@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "Assert.assertTrue(buffer.isEmpty())@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "buffer.write(\"a\")@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertTrue(buffer.isFull())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(\"C\",buffer.take())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "Assert.assertTrue(buffer.isFull())@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertFalse(buffer.isFull())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Assert.assertTrue(buffer.isFull())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74->69 [style = bold, label=""];
69->38 [style = bold, label=""];
15->10 [style = bold, label=""];
70->66 [style = bold, label=""];
54->27 [style = bold, label=""];
5->9 [style = bold, label=""];
35->55 [style = bold, label=""];
60->71 [style = bold, label=""];
62->73 [style = bold, label=""];
10->27 [style = dashed, label="0"];
38->39 [style = bold, label=""];
10->6 [style = solid, label="capacity"];
26->65 [style = bold, label=""];
23->22 [style = bold, label=""];
61->76 [style = bold, label=""];
47->51 [style = bold, label=""];
76->81 [style = bold, label=""];
5->30 [style = bold, label=""];
44->79 [style = bold, label=""];
9->24 [style = bold, label=""];
64->40 [style = bold, label=""];
85->5 [style = bold, label=""];
46->42 [style = bold, label=""];
2->20 [style = bold, label=""];
81->35 [style = bold, label=""];
21->19 [style = bold, label=""];
3->21 [style = dashed, label="0"];
77->75 [style = bold, label=""];
19->2 [style = bold, label=""];
16->17 [style = bold, label=""];
4->22 [style = dashed, label="0"];
67->26 [style = bold, label=""];
53->86 [style = bold, label=""];
1->11 [style = bold, label=""];
32->80 [style = bold, label=""];
20->18 [style = bold, label=""];
52->58 [style = bold, label=""];
51->60 [style = bold, label=""];
39->52 [style = bold, label=""];
7->59 [style = dashed, label="0"];
3->7 [style = bold, label=""];
65->72 [style = bold, label=""];
7->2 [style = bold, label=""];
11->8 [style = bold, label=""];
82->56 [style = bold, label=""];
56->68 [style = bold, label=""];
13->10 [style = bold, label=""];
17->8 [style = bold, label=""];
71->31 [style = bold, label=""];
12->23 [style = dashed, label="0"];
25->9 [style = bold, label=""];
8->3 [style = bold, label=""];
73->45 [style = bold, label=""];
11->17 [style = dashed, label="0"];
45->44 [style = bold, label=""];
10->6 [style = bold, label=""];
80->53 [style = bold, label=""];
30->50 [style = bold, label=""];
63->84 [style = bold, label=""];
6->1 [style = bold, label=""];
2->0 [style = bold, label=""];
14->23 [style = bold, label=""];
84->85 [style = bold, label=""];
42->83 [style = bold, label=""];
66->82 [style = bold, label=""];
72->36 [style = bold, label=""];
79->28 [style = bold, label=""];
0->63 [style = bold, label=""];
57->43 [style = bold, label=""];
9->12 [style = bold, label=""];
41->33 [style = bold, label=""];
78->62 [style = bold, label=""];
0->5 [style = bold, label=""];
49->29 [style = bold, label=""];
55->78 [style = bold, label=""];
40->70 [style = bold, label=""];
29->67 [style = bold, label=""];
68->46 [style = bold, label=""];
86->48 [style = bold, label=""];
34->12 [style = bold, label=""];
0->20 [style = dashed, label="0"];
5->18 [style = dashed, label="0"];
27->6 [style = bold, label=""];
58->41 [style = bold, label=""];
50->25 [style = bold, label=""];
9->14 [style = dashed, label="0"];
12->4 [style = bold, label=""];
3->59 [style = bold, label=""];
7->19 [style = dashed, label="0"];
6->16 [style = bold, label=""];
48->47 [style = bold, label=""];
1->16 [style = dashed, label="0"];
37->34 [style = bold, label=""];
24->37 [style = bold, label=""];
59->2 [style = bold, label=""];
8->21 [style = bold, label=""];
33->77 [style = bold, label=""];
31->64 [style = bold, label=""];
43->49 [style = bold, label=""];
36->61 [style = bold, label=""];
83->57 [style = bold, label=""];
27->6 [style = solid, label="capacity"];
18->14 [style = bold, label=""];
28->74 [style = bold, label=""];
4->32 [style = bold, label=""];
}
