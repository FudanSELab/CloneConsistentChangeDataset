digraph {
1 [style = filled, label = "assertThat(selectSchemataExecutor.getMergedResult().getValue(2,),is(\"\"))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "mockResultSetMap.put(\"SCHEMA_NAME\",\"demo_ds_0\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final String sql = \"SELECT SCHEMA_NAME, DEFAULT_CHARACTER_SET_NAME, DEFAULT_COLLATION_NAME, DEFAULT_ENCRYPTION FROM information_schema.SCHEMATA\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final String sql = \"SELECT SCHEMA_NAME, DEFAULT_CHARACTER_SET_NAME, DEFAULT_COLLATION_NAME FROM information_schema.SCHEMATA\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(count,is(2))@@@31@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "mockResultSetMap.put(\"DEFAULT_CHARACTER_SET_NAME\",\"utf8mb4_0900_ai_ci\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "metaDataMap.put(\"test\",mock())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "SelectInformationSchemataExecutor selectSchemataExecutor = new SelectInformationSchemataExecutor((SelectStatement)sqlStatement,sql)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "mockResultSet(mockResultSetMap,false)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "mockResultSetMap.put(\"DEFAULT_COLLATION_NAME\",\"utf8mb4\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(selectSchemataExecutor.getMergedResult().getValue(3,),is(\"utf8mb4_0900_ai_ci\"))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final SQLStatement sqlStatement = new ShardingSphereSQLParserEngine(\"MySQL\").parse(sql,false)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(selectSchemataExecutor.getMergedResult().getValue(2,),is(\"utf8mb4\"))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "mockResultSet(mockResultSetMap,true,false)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Map<String,String> mockResultSetMap = new HashMap<>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "fail(\"expected : `sharding_db` or `test`\")@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "\"test\".equals(selectSchemataExecutor.getMergedResult().getValue(1,))@@@23@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(selectSchemataExecutor.getMergedResult().getValue(1,),is(\"sharding_db\"))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertSelectSchemataExecute['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "final SQLStatement sqlStatement = new ShardingSphereSQLParserEngine(\"MySQL\",new ConfigurationProperties(new Properties())).parse(sql,false)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Map<String,ShardingSphereMetaData> metaDataMap = ProxyContext.getInstance().getContextManager().getMetaDataContexts().getMetaDataMap()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertThat(selectSchemataExecutor.getMergedResult().getValue(2,),is(\"\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "SelectInformationSchemataExecutor selectSchemataExecutor = new SelectInformationSchemataExecutor((SelectStatement)sqlStatement,sql)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "selectSchemataExecutor.execute(mock())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertSelectSchemataExecute['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "\"sharding_db\".equals(selectSchemataExecutor.getMergedResult().getValue(1,))@@@19@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(selectSchemataExecutor.getQueryResultMetaData().getColumnCount(),is(mockResultSetMap.size()))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "metaDataMap.put(\"sharding_db\",mock())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "mockResultSetMap.put(\"DEFAULT_ENCRYPTION\",\"NO\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Map<String,ShardingSphereMetaData> metaDataMap = ProxyContext.getInstance().getContextManager().getMetaDataContexts().getMetaDataMap()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertSelectSchemataInSchemaWithoutDataSourceExecute['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "selectSchemataExecutor.getMergedResult().next()@@@17@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertThat(selectSchemataExecutor.getMergedResult().getValue(4,),is(\"\"))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(selectSchemataExecutor.getMergedResult().getValue(3,),is(\"\"))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertThat(selectSchemataExecutor.getMergedResult().getValue(3,),is(\"\"))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "selectSchemataExecutor.getMergedResult().next()@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6->17 [style = bold, label=""];
6->24 [style = dotted, label="true"];
23->16 [style = bold, label=""];
28->18 [style = bold, label=""];
8->23 [style = bold, label=""];
22->3 [style = dotted, label="false"];
21->6 [style = bold, label=""];
10->14 [style = bold, label=""];
29->30 [style = bold, label=""];
23->30 [style = solid, label="sqlStatement"];
2->6 [style = bold, label=""];
15->34 [style = dotted, label="true"];
15->31 [style = dotted, label="true"];
33->28 [style = bold, label=""];
18->11 [style = bold, label=""];
4->15 [style = bold, label=""];
8->35 [style = dashed, label="0"];
34->15 [style = bold, label=""];
24->9 [style = dotted, label="true"];
3->6 [style = bold, label=""];
16->10 [style = solid, label="mockResultSetMap"];
8->26 [style = solid, label="sql"];
7->0 [style = bold, label=""];
15->6 [style = bold, label=""];
8->26 [style = bold, label=""];
10->33 [style = dashed, label="0"];
16->28 [style = solid, label="mockResultSetMap"];
17->32 [style = bold, label=""];
11->19 [style = bold, label=""];
23->26 [style = dashed, label="0"];
24->22 [style = bold, label=""];
8->23 [style = solid, label="sql"];
26->19 [style = solid, label="sqlStatement"];
6->17 [style = dotted, label="true"];
27->35 [style = bold, label=""];
31->34 [style = bold, label=""];
15->32 [style = dotted, label="true"];
22->2 [style = dotted, label="true"];
15->12 [style = solid, label="count"];
15->17 [style = dotted, label="true"];
22->3 [style = bold, label=""];
19->5 [style = bold, label=""];
15->17 [style = solid, label="count"];
26->16 [style = bold, label=""];
35->23 [style = bold, label=""];
18->29 [style = bold, label=""];
0->10 [style = bold, label=""];
17->24 [style = bold, label=""];
15->17 [style = bold, label=""];
22->1 [style = dotted, label="true"];
0->33 [style = bold, label=""];
8->19 [style = solid, label="sql"];
30->5 [style = bold, label=""];
5->4 [style = bold, label=""];
17->12 [style = solid, label="count"];
18->29 [style = dashed, label="0"];
9->21 [style = bold, label=""];
24->22 [style = dotted, label="false"];
14->18 [style = bold, label=""];
35->23 [style = solid, label="sql"];
1->2 [style = bold, label=""];
25->8 [style = bold, label=""];
22->1 [style = bold, label=""];
20->7 [style = bold, label=""];
13->8 [style = bold, label=""];
16->20 [style = bold, label=""];
24->21 [style = dotted, label="true"];
32->31 [style = bold, label=""];
24->9 [style = bold, label=""];
35->30 [style = solid, label="sql"];
23->19 [style = solid, label="sqlStatement"];
6->12 [style = bold, label=""];
}
