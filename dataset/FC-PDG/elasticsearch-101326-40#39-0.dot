digraph {
25 [style = filled, label = "{unrollRecursionContexts(_parentctx)}@@@183@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "enterRule(_localctx,84,RULE_functionTemplate)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "functionTemplate['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "primaryExpression['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx,_parentState)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "return _localctx@@@186@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "int _la@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "{setState(622)_errHandler.sync(this)switch (getInterpreter().adaptivePredict(_input,86,_ctx)) {case 1:{_localctx = new CastContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(587)castExpression()}breakcase 2:{_localctx = new ExtractContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(588)extractExpression()}breakcase 3:{_localctx = new CurrentDateTimeFunctionContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(589)builtinDateTimeFunction()}breakcase 4:{_localctx = new ConstantDefaultContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(590)constant()}breakcase 5:{_localctx = new StarContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(594)_la = _input.LA(1)if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (OPTIMIZED - 69)) | (1L << (PARSED - 69)) | (1L << (PHYSICAL - 69)) | (1L << (PLAN - 69)) | (1L << (RLIKE - 69)) | (1L << (QUERY - 69)) | (1L << (SCHEMAS - 69)) | (1L << (SECOND - 69)) | (1L << (SHOW - 69)) | (1L << (SYS - 69)) | (1L << (TABLES - 69)) | (1L << (TEXT - 69)) | (1L << (TYPE - 69)) | (1L << (TYPES - 69)) | (1L << (VERIFY - 69)) | (1L << (YEAR - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (DIGIT_IDENTIFIER - 69)) | (1L << (QUOTED_IDENTIFIER - 69)) | (1L << (BACKQUOTED_IDENTIFIER - 69)))) != 0)) {{setState(591)qualifiedName()setState(592)match(DOT)}}setState(596)match(ASTERISK)}breakcase 6:{_localctx = new FunctionContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(597)functionExpression()}breakcase 7:{_localctx = new SubqueryExpressionContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(598)match(T__0)setState(599)query()setState(600)match(T__1)}breakcase 8:{_localctx = new DereferenceContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(602)qualifiedName()}breakcase 9:{_localctx = new ParenthesizedExpressionContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(603)match(T__0)setState(604)expression()setState(605)match(T__1)}breakcase 10:{_localctx = new CaseContext(_localctx)_ctx = _localctx_prevctx = _localctxsetState(607)match(CASE)setState(609)_la = _input.LA(1)if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NOT - 65)) | (1L << (NULL - 65)) | (1L << (OPTIMIZED - 65)) | (1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RIGHT - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TRUE - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (FUNCTION_ESC - 65)) | (1L << (DATE_ESC - 65)) | (1L << (TIME_ESC - 65)) | (1L << (TIMESTAMP_ESC - 65)) | (1L << (GUID_ESC - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (ASTERISK - 65)) | (1L << (PARAM - 65)) | (1L << (STRING - 65)) | (1L << (INTEGER_VALUE - 65)) | (1L << (DECIMAL_VALUE - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)))) != 0) || _la == QUOTED_IDENTIFIER || _la == BACKQUOTED_IDENTIFIER) {{setState(608)((CaseContext)_localctx).operand = booleanExpression(0)}}setState(612)_errHandler.sync(this)_la = _input.LA(1)setState(618)_la = _input.LA(1)if (_la == ELSE) {{setState(616)match(ELSE)setState(617)((CaseContext)_localctx).elseClause = booleanExpression(0)}}setState(620)match(END)}break_ctx.stop = _input.LT(-1)setState(629)_errHandler.sync(this)_alt = getInterpreter().adaptivePredict(_input,87,_ctx)while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {if (_alt == 1) {if (_parseListeners != null) triggerExitRuleEvent()_prevctx = _localctx{{_localctx = new CastOperatorExpressionContext(new PrimaryExpressionContext(_parentctx,_parentState))pushNewRecursionContext(_localctx,_startState,RULE_primaryExpression)setState(624)if (!(precpred(_ctx,10))) throw new FailedPredicateException(this,\"precpred(_ctx, 10)\")setState(625)match(CAST_OP)setState(626)dataType()}}}setState(631)_errHandler.sync(this)_alt = getInterpreter().adaptivePredict(_input,87,_ctx)}}@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "_errHandler.reportError(this,re)@@@180@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "ParserRuleContext _parentctx = _ctx@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx,getState())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "_errHandler.recover(this,re)@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "enterOuterAlt(_localctx,1)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "_errHandler.recover(this,re)@@@181@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "int _startState = 60@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "int _la@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "enterOuterAlt(_localctx,1)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "int _p@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "RecognitionException re@@@178@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "enterRule(_localctx,76,RULE_functionTemplate)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "PrimaryExpressionContext _prevctx = _localctx@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "{setState(722)functionName()setState(723)match(T__0)setState(735)_la = _input.LA(1)if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)) | (1L << (IDENTIFIER - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {{setState(725)_la = _input.LA(1)if (_la == ALL || _la == DISTINCT) {{setState(724)setQuantifier()}}setState(727)expression()setState(732)_errHandler.sync(this)_la = _input.LA(1)while (_la == T__2) {{{setState(728)match(T__2)setState(729)expression()}}setState(734)_errHandler.sync(this)_la = _input.LA(1)}}}setState(737)match(T__1)}@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "return _localctx@@@57@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "_localctx.exception = re@@@179@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "int _alt@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "{exitRule()}@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "int _parentState = getState()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "enterRecursionRule(_localctx,60,RULE_primaryExpression,_p)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "functionTemplate['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "_localctx.exception = re@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "RecognitionException re@@@49@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "_errHandler.reportError(this,re)@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30->24 [style = bold, label=""];
1->4 [style = bold, label=""];
23->25 [style = bold, label=""];
22->18 [style = dotted, label="true"];
29->21 [style = solid, label="_localctx"];
0->6 [style = bold, label=""];
2->6 [style = bold, label=""];
15->25 [style = bold, label=""];
5->1 [style = dotted, label="true"];
9->11 [style = solid, label="_localctx"];
28->15 [style = dotted, label="true"];
30->25 [style = solid, label="_parentctx"];
26->23 [style = solid, label="_la"];
20->14 [style = bold, label=""];
24->29 [style = bold, label=""];
5->0 [style = dotted, label="true"];
28->17 [style = dotted, label="true"];
16->19 [style = bold, label=""];
7->8 [style = bold, label=""];
12->9 [style = bold, label=""];
3->13 [style = dashed, label="0"];
27->15 [style = bold, label=""];
22->30 [style = bold, label=""];
5->4 [style = dotted, label="true"];
4->0 [style = bold, label=""];
25->31 [style = bold, label=""];
5->1 [style = bold, label=""];
21->26 [style = bold, label=""];
20->23 [style = solid, label="_alt"];
24->23 [style = solid, label="_parentState"];
29->14 [style = solid, label="_localctx"];
14->23 [style = bold, label=""];
9->13 [style = solid, label="_localctx"];
3->7 [style = bold, label=""];
8->2 [style = bold, label=""];
13->7 [style = bold, label=""];
29->23 [style = solid, label="_localctx"];
29->16 [style = solid, label="_localctx"];
6->11 [style = bold, label=""];
7->2 [style = solid, label="_la"];
23->31 [style = solid, label="_localctx"];
28->17 [style = bold, label=""];
9->3 [style = bold, label=""];
10->9 [style = bold, label=""];
18->21 [style = solid, label="_p"];
9->3 [style = solid, label="_localctx"];
9->8 [style = solid, label="_localctx"];
30->23 [style = solid, label="_parentctx"];
19->21 [style = bold, label=""];
17->27 [style = bold, label=""];
28->27 [style = dotted, label="true"];
24->29 [style = solid, label="_parentState"];
29->16 [style = bold, label=""];
26->20 [style = bold, label=""];
9->13 [style = bold, label=""];
19->23 [style = solid, label="_startState"];
}
