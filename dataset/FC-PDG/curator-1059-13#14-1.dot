digraph {
4 [style = filled, label = "Assert.assertTrue(latch.await(10,TimeUnit.SECONDS))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "client.start()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "client.getCuratorListenable().addListener(new CuratorListener(){@Override public void eventReceived(CuratorFramework client,CuratorEvent event){if (event.getType() == CuratorEventType.EXISTS) {Stat stat = client.checkExists().forPath(\"/yo/yo/yo\")assertNull(stat)client.create().inBackground(event.getContext()).forPath(\"/what\")}if (event.getType() == CuratorEventType.CREATE) {((CountDownLatch)event.getContext()).countDown()}}})@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES,timing.forWaiting().seconds(),TimeUnit.SECONDS),\"Remaining leases: \" + semaphore.availablePermits())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "server.stop()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final int MAX_RETRIES = 3@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "client.checkExists().forPath(\"/hey\")@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),timing.session(),timing.connection(),new RetryOneTime(1))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "RetryPolicy policy = new RetryPolicy(){@Override public boolean allowRetry(int retryCount,long elapsedTimeMs,RetrySleeper sleeper){semaphore.release()if (retries.incrementAndGet() == MAX_RETRIES) {try {server.restart()}catch (Exception e) }try {sleeper.sleepFor(100,TimeUnit.MILLISECONDS)}catch (InterruptedException e) return true}}@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final AtomicInteger retries = new AtomicInteger(0)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testRetry['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "client.checkExists().inBackground().forPath(\"/hey\")@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES,timing.forWaiting().seconds(),TimeUnit.SECONDS),\"Remaining leases: \" + semaphore.availablePermits())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "client.start()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "server.stop()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testNestedCalls['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "retries.set(0)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "client.checkExists().forPath(\"/hey\")@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertTrue(latch.await(10,TimeUnit.SECONDS))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "client.getZookeeperClient().setRetryPolicy(policy)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@23@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@43@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "CountDownLatch latch = new CountDownLatch(1)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "semaphore.drainPermits()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "client.getZookeeperClient().setRetryPolicy(new RetryOneTime(100))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "client.checkExists().inBackground(latch).forPath(\"/hey\")@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "client.getZookeeperClient().setRetryPolicy(policy)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testNestedCalls['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "final Semaphore semaphore = new Semaphore(0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),timing.session(),timing.connection(),new RetryOneTime(10))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18->25 [style = solid, label="policy"];
13->10 [style = bold, label=""];
1->4 [style = bold, label=""];
18->11 [style = solid, label="policy"];
28->10 [style = solid, label="client"];
1->8 [style = bold, label=""];
3->7 [style = solid, label="client"];
23->27 [style = bold, label=""];
27->14 [style = bold, label=""];
19->12 [style = bold, label=""];
2->3 [style = bold, label=""];
20->28 [style = bold, label=""];
26->24 [style = bold, label=""];
4->7 [style = bold, label=""];
3->0 [style = bold, label=""];
8->7 [style = bold, label=""];
15->22 [style = bold, label=""];
20->18 [style = solid, label="MAX_RETRIES"];
6->1 [style = bold, label=""];
11->26 [style = bold, label=""];
12->29 [style = bold, label=""];
20->29 [style = solid, label="MAX_RETRIES"];
5->6 [style = bold, label=""];
21->11 [style = bold, label=""];
28->23 [style = bold, label=""];
16->21 [style = bold, label=""];
25->19 [style = bold, label=""];
4->8 [style = dashed, label="0"];
18->25 [style = bold, label=""];
9->3 [style = bold, label=""];
14->18 [style = bold, label=""];
20->13 [style = solid, label="MAX_RETRIES"];
29->16 [style = bold, label=""];
22->13 [style = bold, label=""];
0->5 [style = bold, label=""];
17->20 [style = bold, label=""];
24->15 [style = bold, label=""];
}
