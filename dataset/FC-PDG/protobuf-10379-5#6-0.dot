digraph {
16 [style = filled, label = "assertDataConsumed(inputType.name(),data,input)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "input = inputType.newDecoder(data,blockSize)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertWithMessage(inputType.name()).that(input.readRawVarint64()).isEqualTo(value)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertEquals(inputType.name(),value,input.readRawVarint64SlowPath())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "int blockSize = 1@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "input = inputType.newDecoder(data,blockSize)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(1,rawInput.available())@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "byte(( longerData = new byte((((@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(CodedInputStream.readRawVarint32(rawInput)).isEqualTo((int)value)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "assertTrue(inputType.name(),input.isAtEnd())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "long value@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "input = inputType.newDecoder(data,blockSize)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertDataConsumed(inputType.name(),data,input)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals((int)value,CodedInputStream.readRawVarint32(rawInput))@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertReadVarint['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(inputType.name(),value,input.readRawVarint64())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "assertWithMessage(inputType.name()).that(input.readRawVarint64SlowPath()).isEqualTo(value)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertEquals(inputType.name(),(int)value,input.readRawVarint32())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "blockSize *= 2@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "System.arraycopy(data,0,longerData,0,data.length)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertReadVarint['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "assertThat(rawInput.available()).isEqualTo(1)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "InputStream rawInput = new ByteArrayInputStream(longerData)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "CodedInputStream input = inputType.newDecoder(data,blockSize)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "long value@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "byte(( data@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "blockSize <= 16@@@5@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertTrue(inputType.name(),input.skipField(WireFormat.WIRETYPE_VARINT))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "byte(( data@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertWithMessage(inputType.name()).that(input.skipField(WireFormat.WIRETYPE_VARINT)).isTrue()@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "assertReadLittleEndian64['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertWithMessage(inputType.name()).that(input.readRawVarint32()).isEqualTo((int)value)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertDataConsumed(inputType.name(),data,input)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertDataConsumed(inputType.name(),data,input)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(inputType.name(),value,input.readRawLittleEndian64())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "byte(( data@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
14->3 [style = bold, label=""];
15->10 [style = bold, label=""];
20->9 [style = bold, label=""];
10->19 [style = bold, label=""];
8->35 [style = dashed, label="0"];
5->24 [style = dashed, label="0"];
4->20 [style = solid, label="data"];
2->12 [style = solid, label="blockSize"];
22->13 [style = solid, label="rawInput"];
9->16 [style = bold, label=""];
12->7 [style = bold, label=""];
26->11 [style = bold, label=""];
21->2 [style = bold, label=""];
10->19 [style = solid, label="blockSize"];
29->6 [style = bold, label=""];
0->11 [style = solid, label="input"];
15->8 [style = dotted, label="true"];
34->2 [style = bold, label=""];
4->0 [style = solid, label="data"];
19->11 [style = dotted, label="true"];
12->21 [style = solid, label="input"];
16->14 [style = bold, label=""];
8->20 [style = solid, label="data"];
22->13 [style = bold, label=""];
10->20 [style = solid, label="blockSize"];
19->18 [style = bold, label=""];
28->8 [style = dotted, label="true"];
32->35 [style = dotted, label="true"];
8->3 [style = solid, label="value"];
2->19 [style = solid, label="blockSize"];
23->25 [style = solid, label="value"];
19->20 [style = bold, label=""];
23->27 [style = solid, label="value"];
11->12 [style = bold, label=""];
20->31 [style = bold, label=""];
19->21 [style = dotted, label="true"];
20->25 [style = bold, label=""];
32->10 [style = bold, label=""];
1->11 [style = bold, label=""];
2->0 [style = solid, label="blockSize"];
16->34 [style = dashed, label="0"];
4->16 [style = solid, label="data"];
8->16 [style = solid, label="data"];
9->31 [style = dashed, label="0"];
19->29 [style = dotted, label="true"];
19->3 [style = dotted, label="true"];
19->0 [style = dotted, label="true"];
19->9 [style = dotted, label="true"];
13->5 [style = bold, label=""];
8->6 [style = solid, label="data"];
28->23 [style = dotted, label="true"];
4->12 [style = solid, label="data"];
4->14 [style = solid, label="data"];
20->16 [style = solid, label="input"];
18->17 [style = solid, label="longerData"];
33->31 [style = solid, label="value"];
19->26 [style = dotted, label="true"];
2->20 [style = solid, label="blockSize"];
14->6 [style = solid, label="input"];
19->1 [style = dotted, label="true"];
10->12 [style = solid, label="blockSize"];
19->34 [style = dotted, label="true"];
4->11 [style = solid, label="data"];
8->1 [style = solid, label="value"];
1->26 [style = dashed, label="0"];
8->0 [style = solid, label="data"];
8->17 [style = solid, label="data"];
19->12 [style = dotted, label="true"];
3->6 [style = bold, label=""];
19->10 [style = bold, label=""];
19->7 [style = dotted, label="true"];
19->30 [style = dotted, label="true"];
25->16 [style = bold, label=""];
32->33 [style = dotted, label="true"];
31->34 [style = bold, label=""];
2->14 [style = solid, label="blockSize"];
8->13 [style = solid, label="value"];
30->21 [style = bold, label=""];
13->27 [style = dashed, label="0"];
0->1 [style = bold, label=""];
9->25 [style = dashed, label="0"];
14->29 [style = bold, label=""];
8->12 [style = solid, label="data"];
27->24 [style = bold, label=""];
23->29 [style = solid, label="value"];
8->14 [style = solid, label="data"];
19->31 [style = dotted, label="true"];
8->21 [style = solid, label="data"];
4->6 [style = solid, label="data"];
3->29 [style = dashed, label="0"];
8->9 [style = solid, label="value"];
19->14 [style = dotted, label="true"];
19->25 [style = dotted, label="true"];
2->19 [style = bold, label=""];
18->22 [style = solid, label="longerData"];
0->26 [style = bold, label=""];
28->10 [style = bold, label=""];
8->11 [style = solid, label="data"];
19->2 [style = dotted, label="true"];
19->20 [style = dotted, label="true"];
18->17 [style = bold, label=""];
12->30 [style = bold, label=""];
6->0 [style = bold, label=""];
4->21 [style = solid, label="data"];
17->22 [style = bold, label=""];
15->4 [style = dotted, label="true"];
23->26 [style = solid, label="value"];
10->0 [style = solid, label="blockSize"];
10->14 [style = solid, label="blockSize"];
22->27 [style = bold, label=""];
7->30 [style = dashed, label="0"];
19->16 [style = dotted, label="true"];
7->21 [style = bold, label=""];
19->6 [style = dotted, label="true"];
4->17 [style = solid, label="data"];
35->20 [style = solid, label="data"];
}
