digraph {
3 [style = filled, label = "builder.write(writer)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "TokenTreeBuilder builder@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "treeFile.deleteOnExit()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "writer.sync()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "SortedMap<Long,KeyOffsets> tokenMap@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "builder.finish()@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final SortedMap<Long,LongSet> toks = new TreeMap<Long,LongSet>(){}@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "final TokenTreeBuilder builder = isStatic? new StaticTokenTreeBuilder(new FakeCombinedTerm(toks)): new DynamicTokenTreeBuilder(toks)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "{FileUtils.closeQuietly(reader)}@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(listNext.getKey(),treeNext.get())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Map.Entry<Long,KeyOffsets> listNext = listIterator.next()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "final TokenTree tokenTree = new TokenTree(new MappedBuffer(reader))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "reader = RandomAccessReader.open(treeFile)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "generateTree['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "tokenIterator.hasNext() && listIterator.hasNext()@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final Iterator<Token> tokenIterator = tokenTree.iterator(KEY_CONVERTER)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "RandomAccessReader reader = null@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "return new TokenTree(new MappedBuffer(reader))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "treeFile.deleteOnExit()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "writer.sync()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final File treeFile = File.createTempFile(\"token-tree-get-test\",\"tt\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final RandomAccessReader reader = RandomAccessReader.open(treeFile)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "builder.finish()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final Iterator<Map.Entry<Long,KeyOffsets>> listIterator = tokenMap.entrySet().iterator()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "boolean isStatic@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "reader.close()@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final File treeFile = File.createTempFile(\"token-tree-iterate-test1\",\"tt\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final Iterator<Map.Entry<Long,LongSet>> listIterator = tokenMap.entrySet().iterator()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "SortedMap<Long,LongSet> tokenMap@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "TokenTreeBuilder builder@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "final long minToken@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final Iterator<Token> tokenIterator = tokenTree.iterator(KeyConverter.instance)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "final long maxToken@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "buildSerializeAndIterate['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "buildSerializeAndIterate['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "builder.write(writer)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Token treeNext = tokenIterator.next()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15->5 [style = dotted, label="true"];
11->16 [style = bold, label=""];
16->3 [style = bold, label=""];
22->21 [style = dotted, label="true"];
27->32 [style = dotted, label="true"];
28->5 [style = bold, label=""];
1->10 [style = dotted, label="true"];
7->23 [style = dashed, label="0"];
12->5 [style = bold, label=""];
14->30 [style = bold, label=""];
5->9 [style = bold, label=""];
30->33 [style = bold, label=""];
31->28 [style = solid, label="toks"];
1->17 [style = dotted, label="true"];
33->26 [style = solid, label="reader"];
11->34 [style = dashed, label="0"];
0->2 [style = bold, label=""];
25->9 [style = bold, label=""];
18->15 [style = bold, label=""];
23->15 [style = bold, label=""];
12->18 [style = solid, label="treeNext"];
34->18 [style = bold, label=""];
15->18 [style = dotted, label="true"];
8->14 [style = bold, label=""];
27->31 [style = bold, label=""];
6->0 [style = bold, label=""];
5->25 [style = dashed, label="0"];
19->6 [style = bold, label=""];
17->21 [style = dashed, label="0"];
13->11 [style = bold, label=""];
1->13 [style = bold, label=""];
15->9 [style = dotted, label="true"];
33->26 [style = bold, label=""];
33->35 [style = solid, label="reader"];
5->34 [style = bold, label=""];
11->6 [style = solid, label="treeFile"];
9->18 [style = bold, label=""];
34->33 [style = solid, label="treeFile"];
22->20 [style = dotted, label="true"];
3->19 [style = bold, label=""];
27->29 [style = dotted, label="true"];
12->25 [style = bold, label=""];
0->24 [style = bold, label=""];
36->28 [style = solid, label="isStatic"];
26->35 [style = bold, label=""];
15->12 [style = dotted, label="true"];
7->15 [style = bold, label=""];
6->30 [style = dashed, label="0"];
15->12 [style = bold, label=""];
18->8 [style = bold, label=""];
31->28 [style = bold, label=""];
2->7 [style = bold, label=""];
2->24 [style = dashed, label="0"];
15->25 [style = dotted, label="true"];
15->8 [style = bold, label=""];
27->36 [style = dotted, label="true"];
22->13 [style = bold, label=""];
6->0 [style = solid, label="reader"];
14->4 [style = bold, label=""];
24->23 [style = bold, label=""];
}
