digraph {
8 [style = filled, label = "verifyNoMoreInteractions(streamOne)@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@162dde,0,2)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "cos.flush()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final OutputStream streamTwo = mock(,\"streamTwo\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@162e55)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "cos.write(9)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@162e42,2,3)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(0)@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "final OutputStream streamOne = mock(,\"streamOne\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "verifyNoMoreInteractions(streamTwo)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testRemoveOutputStreamWithOneStream['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@162dc5,2,3)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(9)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@162d8b,2,3)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(2)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(1)@@@26@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@162d9e)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(cos.size()).isEqualTo(2)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertThat(cos.isEmpty()).isTrue()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertThat(cos.size()).isEqualTo(0)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream(streamOne)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(9)@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "InOrder inOrderStreams = inOrder(streamOne)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "inOrderStreams.verify(streamOne,times(2)).flush()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "cos.close()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testRemoveOutputStreamWithTwoStreams['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(4)@@@24@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "cos.removeOutputStream(streamOne)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream(streamOne,streamTwo)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).close()@@@30@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "cos.removeOutputStream(streamTwo)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testRemoveOutputStreamWithTwoStreams['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(3)@@@23@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(cos.size()).isEqualTo(1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->3 [style = bold, label=""];
28->29 [style = bold, label=""];
5->8 [style = bold, label=""];
17->1 [style = solid, label="streamOne"];
20->13 [style = bold, label=""];
17->8 [style = solid, label="streamOne"];
15->7 [style = bold, label=""];
23->27 [style = bold, label=""];
18->8 [style = dashed, label="0"];
9->24 [style = dashed, label="0"];
7->10 [style = bold, label=""];
12->21 [style = bold, label=""];
2->1 [style = bold, label=""];
8->18 [style = bold, label=""];
0->12 [style = bold, label=""];
35->33 [style = bold, label=""];
18->19 [style = bold, label=""];
1->20 [style = bold, label=""];
2->6 [style = solid, label="streamTwo"];
34->31 [style = bold, label=""];
6->0 [style = bold, label=""];
3->15 [style = bold, label=""];
12->35 [style = bold, label=""];
17->19 [style = solid, label="streamOne"];
26->4 [style = bold, label=""];
25->17 [style = bold, label=""];
9->16 [style = bold, label=""];
17->12 [style = solid, label="streamOne"];
19->24 [style = bold, label=""];
2->18 [style = solid, label="streamTwo"];
24->26 [style = bold, label=""];
17->34 [style = solid, label="streamOne"];
17->34 [style = bold, label=""];
30->28 [style = bold, label=""];
17->2 [style = bold, label=""];
19->9 [style = bold, label=""];
21->22 [style = bold, label=""];
20->12 [style = bold, label=""];
29->14 [style = bold, label=""];
10->4 [style = bold, label=""];
33->30 [style = bold, label=""];
2->1 [style = solid, label="streamTwo"];
15->26 [style = dashed, label="0"];
11->17 [style = bold, label=""];
13->6 [style = bold, label=""];
31->20 [style = bold, label=""];
22->14 [style = bold, label=""];
32->17 [style = bold, label=""];
4->23 [style = bold, label=""];
14->5 [style = bold, label=""];
}
