digraph {
18 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"The\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec0708,null,false))@@@112@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
101 [style = filled, label = "assertEquals(\"Only the default analyzer should be applied\",1,valueResult.size())@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
85 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(\"org.apache.lucene.analysis.standard.StandardFilter\")@@@82@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"Dogs\",null,\"<ALPHANUM>\",24,28,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec0809,null,false))@@@148@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "NamedList<NamedList<NamedList<Object>>> documentResult = (NamedList<NamedList<NamedList<Object>>>)result.get(\"1\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "NamedList<NamedList<Object>> whitetokResult = documentResult.get(\"whitetok\")@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
102 [style = filled, label = "NamedList<NamedList<Object>> idResult = documentResult.get(\"id\")@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
104 [style = filled, label = "queryResult = idResult.get(\"query\")@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "document.addField(\"whitetok\",\"Jumping Jack\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertNotNull(\"Expecting the 'StandardFilter' to be applied on the query for the 'text' field\",tokenList)@@@83@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"over\",null,\"<ALPHANUM>\",15,19,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec0903,null,false))@@@181@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"Jack\",null,\"word\",8,12,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec05c9,null,false))@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
108 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
51 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(.getName())@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "assertNotNull(\"an analysis for the 'whitetok' field should be returned\",whitetokResult)@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"over\",null,\"<ALPHANUM>\",15,19,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec0879,null,false))@@@163@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "valueResult = (NamedList<List<NamedList>>)indexResult.get(\"Jumping Jack\")@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(\"org.apache.lucene.analysis.core.StopFilter\")@@@94@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
128 [style = filled, label = "assertTrue(\"Only the default analyzer should be applied\",name.matches(\"org.apache.solr.schema.FieldType\$DefaultAnalyzer.*\"))@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
135 [style = filled, label = "assertNotNull(\"field_types should never be null\",fieldTypes)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
145 [style = filled, label = "FieldAnalysisRequest request = new FieldAnalysisRequest()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "NamedList<Object> result = handler.handleAnalysisRequest(request,h.getCore().getLatestSchema())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"Jumped\",null,\"<ALPHANUM>\",8,14,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec07c7,null,false))@@@139@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertNotNull(\"Expecting the 'LowerCaseFilter' to be applied on the index for the 'text' field\",tokenList)@@@152@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(\"org.apache.lucene.analysis.en.PorterStemFilter\")@@@100@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"the\",null,\"<ALPHANUM>\",20,23,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec0890,null,false))@@@166@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
140 [style = filled, label = "assertEquals(tokenList.size(),1)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"The\",null,\"<ALPHANUM>\",20,23,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec075c,null,false))@@@124@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"jumped\",null,\"<ALPHANUM>\",8,14,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec0862,null,false))@@@160@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"The 'text' field has only a single value\",1,indexResult.size())@@@107@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertNotNull(\"Expecting the 'StandardTokenizer' to be applied on the index for the 'text' field\",tokenList)@@@110@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
110 [style = filled, label = "tokenList = valueResult.getVal(0)@@@48@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "assertEquals(\"Expecting 2 tokens to be present\",2,tokenList.size())@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "assertNotNull(\"Expecting the 'MockTokenizer' to be applied on the query for the 'whitetok' field\",tokenList)@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@84@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
116 [style = filled, label = "assertEquals(\"Only the default analyzer should be applied\",1,valueResult.size())@@@45@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertNotNull(\"An analysis for document with key '1' should be returned\",documentResult)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
113 [style = filled, label = "indexResult = idResult.get(\"index\")@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
122 [style = filled, label = "assertTrue(\"Only the default analyzer should be applied\",name.matches(\"org.apache.solr.schema.FieldType\$DefaultAnalyzer.*\"))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
105 [style = filled, label = "name = queryResult.getName(0)@@@46@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"over\",null,\"<ALPHANUM>\",15,19,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec097a,null,false))@@@196@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "valueResult = (NamedList<List<NamedList>>)indexResult.get(\"The Fox Jumped Over The Dogs\")@@@108@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "NamedList<NamedList<Object>> idResult = documentResult.get(\"id\")@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
118 [style = filled, label = "assertEquals(\"The 'id' field value has only one token\",1,tokenList.size())@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "assertEquals(\"Expecting 4 tokens\",4,tokenList.size())@@@189@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
95 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"JUMPING\",null,\"<ALPHANUM>\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec060a,null,false))@@@79@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "NamedList<Object> queryResult@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "assertNotNull(\"an analysis for the 'id' field should be returned\",idResult)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "tokenList = valueResult.get(\"org.apache.lucene.analysis.standard.StandardFilter\")@@@130@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "DocumentAnalysisRequest request = new DocumentAnalysisRequest().setQuery(\"JUMPING\").setShowMatch(true).addDocument(document)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
133 [style = filled, label = "NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
138 [style = filled, label = "request.addFieldType(\"charfilthtmlmap\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"dog\",null,\"<ALPHANUM>\",24,28,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec0993,null,false))@@@199@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "assertNotNull(\"Expecting the 'PorterStemFilter' to be applied on the index for the 'text' field\",tokenList)@@@188@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "NamedList<List<NamedList>> valueResult@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
109 [style = filled, label = "tokenList = (List<NamedList>)queryResult.getVal(0)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
107 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"JUMPING\",null,\"word\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec0477,null,false))@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
117 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"88\",null,\"word\",0,2,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec0532,null,false))@@@50@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
79 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"jumped\",null,\"<ALPHANUM>\",8,14,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec08eb,null,false))@@@178@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
132 [style = filled, label = "NamedList<NamedList> fieldTypes = result.get(\"field_types\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "assertEquals(\"The 'whitetok' field has only a single value\",1,indexResult.size())@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@102@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
147 [style = filled, label = "request.setFieldValue(\"<html><body>wh鐃緒申鐃緒申鐃緒申t鐃緒申鐃緒申鐃緒申v鐃緒申鐃緒申鐃緒申r</body></html>\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "assertEquals(\"Expecting 4 tokens after stop word removal\",4,tokenList.size())@@@174@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "indexResult = whitetokResult.get(\"index\")@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"jumping\",null,\"<ALPHANUM>\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec0691,null,false))@@@97@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(\"org.apache.lucene.analysis.standard.StandardTokenizer\")@@@76@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
112 [style = filled, label = "String name@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
62 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"Over\",null,\"<ALPHANUM>\",15,19,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec07dd,null,false))@@@142@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@90@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
114 [style = filled, label = "tokenList = valueResult.getVal(0)@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "tokenList = valueResult.getVal(0)@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
129 [style = filled, label = "NamedList<NamedList> result = handler.handleAnalysisRequest(request,h.getCore().getLatestSchema())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
130 [style = filled, label = "NamedList indexPart = textType.get(\"index\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertNotNull(\"Expecting the 'LowerCaseFilter' to be applied on the query for the 'text' field\",tokenList)@@@89@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"jump\",null,\"<ALPHANUM>\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec06c0,null,false))@@@103@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",4,7,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec0948,null,false))@@@190@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "assertEquals(\"Expecting 6 tokens\",6,tokenList.size())@@@153@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
127 [style = filled, label = "NamedList<NamedList<Object>> number_l_p_Result = documentResult.get(\"number_l_p\")@@@40@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "assertEquals(\"Expecting 6 tokens\",6,tokenList.size())@@@132@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
121 [style = filled, label = "assertTrue(\"Only the default analyzer should be applied\",name.matches(\"org.apache.solr.schema.FieldType\$DefaultAnalyzer.*\"))@@@47@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
75 [style = filled, label = "assertNotNull(\"Expecting the 'PorterStemFilter' to be applied on the query for the 'text' field\",tokenList)@@@101@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
126 [style = filled, label = "name = queryResult.getName(0)@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
87 [style = filled, label = "assertNotNull(\"an analysis for the 'text' field should be returned\",textResult)@@@74@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
120 [style = filled, label = "assertEquals(\"The 'number_l_p' field value has only one token\",1,tokenList.size())@@@49@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@78@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"jump\",null,\"<ALPHANUM>\",8,14,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec0961,null,true))@@@193@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "List<NamedList> tokenList@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertNotNull(\"Expecting the 'StandardTokenizer' to be applied on the query for the 'text' field\",tokenList)@@@77@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "indexResult = textResult.get(\"index\")@@@106@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"Fox\",null,\"<ALPHANUM>\",4,7,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec071d,null,false))@@@115@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
96 [style = filled, label = "tokenList = valueResult.get(\"org.apache.lucene.analysis.core.LowerCaseFilter\")@@@151@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
142 [style = filled, label = "assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\",indexPart)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
97 [style = filled, label = "assertNotNull(\"an analysis for the 'number_l_p' field should be returned\",number_l_p_Result)@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"The\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec079b,null,false))@@@133@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "tokenList = valueResult.get(\"org.apache.lucene.analysis.core.StopFilter\")@@@172@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"Dogs\",null,\"<ALPHANUM>\",24,28,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec0771,null,false))@@@127@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
111 [style = filled, label = "testHandleAnalysisRequest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
125 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"1\",null,\"word\",0,1,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec04ce,null,false))@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertNotNull(\"Expecting the 'StopFilter' to be applied on the query for the 'text' field\",tokenList)@@@95@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"Over\",null,\"<ALPHANUM>\",15,19,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec0747,null,false))@@@121@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
143 [style = filled, label = "testCharFilterAnalysis['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "NamedList<Object> indexResult@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec0834,null,false))@@@154@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
124 [style = filled, label = "indexResult = number_l_p_Result.get(\"index\")@@@42@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
92 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@96@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "document.addField(\"id\",1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "assertEquals(\"Expecting 6 tokens\",6,tokenList.size())@@@111@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
91 [style = filled, label = "assertNotNull(\"Expecting the 'StopFilter' to be applied on the index for the 'text' field\",tokenList)@@@173@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
100 [style = filled, label = "assertEquals(\"The id field has only a single value\",1,indexResult.size())@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
134 [style = filled, label = "request.setShowMatch(false)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
137 [style = filled, label = "assertNotNull(\"expecting result for field type 'charfilthtmlmap'\",textType)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "assertNotNull(\"result is null and it shouldn't be\",result)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "tokenList = valueResult.get(\"org.apache.lucene.analysis.standard.StandardTokenizer\")@@@109@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"The\",null,\"<ALPHANUM>\",20,23,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec07f3,null,false))@@@145@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "NamedList<NamedList<Object>> textResult = documentResult.get(\"text\")@@@73@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"Jumped\",null,\"<ALPHANUM>\",8,14,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec0732,null,false))@@@118@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "tokenList = valueResult.get(\"org.apache.lucene.analysis.en.PorterStemFilter\")@@@187@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "queryResult = whitetokResult.get(\"query\")@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",4,7,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec084b,null,false))@@@157@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
141 [style = filled, label = "assertTrue(\"result is null and it shouldn't be\",result != null)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
136 [style = filled, label = "assertNotNull(\"Expecting MockTokenizer analysis breakdown\",tokenList)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
139 [style = filled, label = "assertEquals(\"whatever\",indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(\"org.apache.lucene.analysis.core.LowerCaseFilter\")@@@88@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"dogs\",null,\"<ALPHANUM>\",24,28,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec091b,null,false))@@@184@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
119 [style = filled, label = "name = queryResult.getName(0)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
146 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"whatever\",null,\"word\",12,20,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec0a29,null,false))@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
123 [style = filled, label = "assertEquals(\"Only the default analyzer should be applied\",1,queryResult.size())@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "SolrInputDocument document = new SolrInputDocument()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
115 [style = filled, label = "valueResult = (NamedList<List<NamedList>>)indexResult.get(\"88\")@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
83 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"JUMPING\",null,\"<ALPHANUM>\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec0636,null,false))@@@85@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
106 [style = filled, label = "valueResult = (NamedList<List<NamedList>>)indexResult.get(\"1\")@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
78 [style = filled, label = "testHandleAnalysisRequest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertNotNull(\"Expecting the 'StandardFilter' to be applied on the index for the 'text' field\",tokenList)@@@131@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
94 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"JUMPING\",null,\"word\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec0575,null,false))@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
98 [style = filled, label = "assertNotNull(\"an analysis for the 'id' field should be returned\",idResult)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"Jumping\",null,\"word\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec05b4,null,false))@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
131 [style = filled, label = "assertEquals(\"wh鐃緒申鐃緒申鐃緒申t鐃緒申鐃緒申鐃緒申v鐃緒申鐃緒申鐃緒申r\",indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
103 [style = filled, label = "document.addField(\"number_l_p\",88L)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "queryResult = textResult.get(\"query\")@@@75@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
99 [style = filled, label = "assertEquals(\"The number_l_p field has only a single value\",1,indexResult.size())@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
144 [style = filled, label = "List<NamedList> tokenList = (List<NamedList>)indexPart.get(.getName())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "document.addField(\"text\",\"The Fox Jumped Over The Dogs\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"Fox\",null,\"<ALPHANUM>\",4,7,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec07b1,null,false))@@@136@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",4,7,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec08d3,null,false))@@@175@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"dogs\",null,\"<ALPHANUM>\",24,28,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec08a7,null,false))@@@169@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"jumping\",null,\"<ALPHANUM>\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec0663,null,false))@@@91@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
96->12 [style = solid, label="tokenList"];
93->31 [style = bold, label=""];
116->105 [style = bold, label=""];
76->16 [style = bold, label=""];
28->20 [style = bold, label=""];
14->39 [style = solid, label="tokenList"];
99->115 [style = bold, label=""];
19->36 [style = bold, label=""];
7->48 [style = bold, label=""];
136->140 [style = bold, label=""];
21->95 [style = bold, label=""];
141->132 [style = bold, label=""];
129->141 [style = solid, label="result"];
1->46 [style = bold, label=""];
5->2 [style = solid, label="tokenList"];
85->52 [style = solid, label="tokenList"];
16->91 [style = bold, label=""];
122->109 [style = bold, label=""];
142->131 [style = bold, label=""];
30->28 [style = bold, label=""];
125->127 [style = bold, label=""];
120->117 [style = bold, label=""];
109->108 [style = bold, label=""];
42->90 [style = bold, label=""];
73->61 [style = bold, label=""];
25->19 [style = bold, label=""];
62->49 [style = bold, label=""];
9->5 [style = bold, label=""];
41->22 [style = bold, label=""];
43->96 [style = bold, label=""];
69->18 [style = bold, label=""];
60->17 [style = bold, label=""];
35->82 [style = bold, label=""];
48->86 [style = bold, label=""];
114->118 [style = bold, label=""];
17->35 [style = bold, label=""];
10->50 [style = bold, label=""];
28->80 [style = bold, label=""];
86->29 [style = bold, label=""];
16->91 [style = solid, label="tokenList"];
82->9 [style = bold, label=""];
55->59 [style = bold, label=""];
131->139 [style = bold, label=""];
68->76 [style = bold, label=""];
50->30 [style = bold, label=""];
77->45 [style = bold, label=""];
79->57 [style = bold, label=""];
129->141 [style = bold, label=""];
30->28 [style = solid, label="documentResult"];
55->59 [style = solid, label="whitetokResult"];
32->7 [style = bold, label=""];
20->93 [style = bold, label=""];
145->138 [style = bold, label=""];
72->20 [style = bold, label=""];
0->112 [style = bold, label=""];
132->135 [style = solid, label="fieldTypes"];
38->6 [style = bold, label=""];
56->51 [style = bold, label=""];
133->137 [style = solid, label="textType"];
24->8 [style = solid, label="tokenList"];
113->100 [style = bold, label=""];
89->81 [style = bold, label=""];
53->94 [style = bold, label=""];
81->74 [style = solid, label="tokenList"];
51->84 [style = solid, label="tokenList"];
103->70 [style = bold, label=""];
107->113 [style = bold, label=""];
111->54 [style = bold, label=""];
13->15 [style = bold, label=""];
24->8 [style = bold, label=""];
59->56 [style = bold, label=""];
4->47 [style = bold, label=""];
14->39 [style = bold, label=""];
100->106 [style = bold, label=""];
105->121 [style = bold, label=""];
87->25 [style = bold, label=""];
110->120 [style = bold, label=""];
23->138 [style = dashed, label="0"];
130->142 [style = bold, label=""];
118->125 [style = bold, label=""];
37->24 [style = bold, label=""];
145->129 [style = solid, label="request"];
102->98 [style = bold, label=""];
126->128 [style = bold, label=""];
80->72 [style = bold, label=""];
47->40 [style = bold, label=""];
52->33 [style = bold, label=""];
128->114 [style = bold, label=""];
134->129 [style = bold, label=""];
31->0 [style = bold, label=""];
10->50 [style = solid, label="result"];
65->41 [style = bold, label=""];
139->144 [style = bold, label=""];
39->88 [style = bold, label=""];
94->73 [style = bold, label=""];
8->92 [style = bold, label=""];
18->60 [style = bold, label=""];
117->55 [style = bold, label=""];
135->133 [style = bold, label=""];
88->37 [style = bold, label=""];
29->69 [style = bold, label=""];
108->107 [style = bold, label=""];
106->101 [style = bold, label=""];
70->10 [style = solid, label="request"];
97->124 [style = bold, label=""];
140->146 [style = bold, label=""];
86->29 [style = solid, label="tokenList"];
75->11 [style = bold, label=""];
51->84 [style = bold, label=""];
144->136 [style = solid, label="tokenList"];
144->136 [style = bold, label=""];
44->75 [style = bold, label=""];
26->44 [style = bold, label=""];
63->32 [style = bold, label=""];
6->13 [style = bold, label=""];
81->74 [style = bold, label=""];
64->65 [style = bold, label=""];
0->144 [style = dashed, label="0"];
102->98 [style = solid, label="idResult"];
96->12 [style = bold, label=""];
123->119 [style = bold, label=""];
92->26 [style = bold, label=""];
98->104 [style = bold, label=""];
61->4 [style = bold, label=""];
45->79 [style = bold, label=""];
133->137 [style = bold, label=""];
74->58 [style = bold, label=""];
54->23 [style = bold, label=""];
58->64 [style = bold, label=""];
84->53 [style = bold, label=""];
130->142 [style = solid, label="indexPart"];
127->97 [style = solid, label="number_l_p_Result"];
101->126 [style = bold, label=""];
104->123 [style = bold, label=""];
33->83 [style = bold, label=""];
115->116 [style = bold, label=""];
11->63 [style = bold, label=""];
124->99 [style = bold, label=""];
147->134 [style = bold, label=""];
66->68 [style = bold, label=""];
3->103 [style = bold, label=""];
3->70 [style = bold, label=""];
143->145 [style = bold, label=""];
15->62 [style = bold, label=""];
95->85 [style = bold, label=""];
138->147 [style = bold, label=""];
78->54 [style = bold, label=""];
112->102 [style = bold, label=""];
71->87 [style = bold, label=""];
49->43 [style = bold, label=""];
132->135 [style = bold, label=""];
54->70 [style = solid, label="document"];
2->38 [style = bold, label=""];
46->71 [style = bold, label=""];
36->21 [style = bold, label=""];
40->1 [style = bold, label=""];
127->97 [style = bold, label=""];
71->87 [style = solid, label="textResult"];
5->2 [style = bold, label=""];
119->122 [style = bold, label=""];
85->52 [style = bold, label=""];
34->3 [style = bold, label=""];
83->14 [style = bold, label=""];
0->55 [style = bold, label=""];
90->27 [style = bold, label=""];
57->89 [style = bold, label=""];
23->34 [style = bold, label=""];
67->42 [style = bold, label=""];
137->130 [style = bold, label=""];
44->75 [style = solid, label="tokenList"];
27->66 [style = bold, label=""];
19->36 [style = solid, label="tokenList"];
91->77 [style = bold, label=""];
80->72 [style = solid, label="idResult"];
70->10 [style = bold, label=""];
12->67 [style = bold, label=""];
121->110 [style = bold, label=""];
}
