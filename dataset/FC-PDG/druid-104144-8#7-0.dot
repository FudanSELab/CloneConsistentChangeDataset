digraph {
9 [style = filled, label = "Assert.assertEquals(\"segment2 interval\",Intervals.of(\"2010-01-02/P1D\"),publishedSegments.get(1).getInterval())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(\"segment2 interval\",Intervals.of(\"2010-01-02/P1D\"),publishedSegments.get(1).getInterval())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(\"num segments published\",2,mdc.getPublished().size())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(\"segment1 metrics\",ImmutableList.of(\"met\"),publishedSegments.get(0).getMetrics())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(\"statusCode\",TaskState.SUCCESS,status.getStatusCode())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Assert.assertTrue(\"pre run task status not present\",!preRunTaskStatus.isPresent())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(\"segment2 datasource\",\"foo\",publishedSegments.get(1).getDataSource())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final TaskStatus mergedStatus = runTask(indexTask)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "taskQueue.start()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(\"segment2 dimensions\",ImmutableList.of(\"dim1\",\"dim2\"),publishedSegments.get(1).getDimensions())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testIndexTask['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "System.currentTimeMillis() > startTime + 10 * 1000@@@10@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final List<DataSegment> publishedSegments = byIntervalOrdering.sortedCopy(mdc.getPublished())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertEquals(\"merged statusCode\",TaskState.SUCCESS,mergedStatus.getStatusCode())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "final TaskStatus status = taskStorage.getStatus(indexTask.getId()).get()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(\"segment1 dimensions\",ImmutableList.of(\"dim1\",\"dim2\"),publishedSegments.get(0).getDimensions())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final List<DataSegment> loggedSegments = byIntervalOrdering.sortedCopy(tsqa.getInsertedSegments(indexTask.getId()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testResumeTasks['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final Optional<TaskStatus> preRunTaskStatus = tsqa.getStatus(indexTask.getId())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "tsqa.getStatus(indexTask.getId()).get().isRunnable()@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(\"segment2 metrics\",ImmutableList.of(\"met\"),publishedSegments.get(1).getMetrics())@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(\"segment2 metrics\",ImmutableList.of(\"met\"),publishedSegments.get(1).getMetrics())@@@24@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(\"segment1 interval\",Intervals.of(\"2010-01-01/P1D\"),publishedSegments.get(0).getInterval())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(\"segment1 metrics\",ImmutableList.of(\"met\"),publishedSegments.get(0).getMetrics())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final long startTime = System.currentTimeMillis()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "taskStorage.insert(indexTask,TaskStatus.running(indexTask.getId()))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final Task indexTask = new IndexTask(null,null,new IndexIngestionSpec(new DataSchema(\"foo\",null,new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9a584d,new UniformGranularitySpec(Granularities.DAY,null,ImmutableList.of(Intervals.of(\"2010-01-01/P2D\"))),null,mapper),new IndexIOConfig(new MockFirehoseFactory(false),false),new IndexTuningConfig(null,10000,10,null,null,null,null,null,indexSpec,3,true,true,false,null,null,null,null,null,null,null)),null,AuthTestUtils.TEST_AUTHORIZER_MAPPER,null,ROW_INGESTION_METERS_FACTORY)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testResumeTasks['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Thread.sleep(100)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(\"segment1 dimensions\",ImmutableList.of(\"dim1\",\"dim2\"),publishedSegments.get(0).getDimensions())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(\"segment1 datasource\",\"foo\",publishedSegments.get(0).getDataSource())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(\"segments logged vs published\",loggedSegments,publishedSegments)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "throw new ISE(\"Where did the task go?!: %s\",indexTask.getId())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(\"segment2 dimensions\",ImmutableList.of(\"dim1\",\"dim2\"),publishedSegments.get(1).getDimensions())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(\"segment2 datasource\",\"foo\",publishedSegments.get(1).getDataSource())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(\"num segments nuked\",0,mdc.getNuked().size())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29->30 [style = bold, label=""];
23->2 [style = bold, label=""];
23->32 [style = bold, label=""];
0->4 [style = bold, label=""];
19->9 [style = bold, label=""];
28->35 [style = bold, label=""];
6->4 [style = bold, label=""];
12->2 [style = solid, label="publishedSegments"];
17->21 [style = bold, label=""];
4->16 [style = bold, label=""];
13->0 [style = bold, label=""];
22->0 [style = bold, label=""];
20->18 [style = bold, label=""];
11->26 [style = bold, label=""];
33->11 [style = bold, label=""];
11->25 [style = solid, label="indexTask"];
12->1 [style = bold, label=""];
15->19 [style = bold, label=""];
24->11 [style = bold, label=""];
10->11 [style = bold, label=""];
4->22 [style = bold, label=""];
11->6 [style = solid, label="indexTask"];
11->17 [style = bold, label=""];
1->23 [style = bold, label=""];
4->0 [style = dotted, label="true"];
30->16 [style = bold, label=""];
3->5 [style = bold, label=""];
28->30 [style = solid, label="publishedSegments"];
35->27 [style = bold, label=""];
2->3 [style = bold, label=""];
27->29 [style = bold, label=""];
16->12 [style = bold, label=""];
35->30 [style = solid, label="loggedSegments"];
1->2 [style = solid, label="loggedSegments"];
32->2 [style = bold, label=""];
26->34 [style = bold, label=""];
5->20 [style = bold, label=""];
25->31 [style = bold, label=""];
8->7 [style = bold, label=""];
22->13 [style = dotted, label="true"];
17->22 [style = solid, label="startTime"];
21->34 [style = dashed, label="0"];
9->8 [style = bold, label=""];
34->25 [style = bold, label=""];
18->14 [style = bold, label=""];
31->28 [style = bold, label=""];
21->6 [style = bold, label=""];
14->15 [style = bold, label=""];
4->22 [style = dotted, label="true"];
22->13 [style = bold, label=""];
}
