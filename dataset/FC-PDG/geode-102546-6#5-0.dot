digraph {
29 [style = filled, label = "testAddOneOutputStreamWhenEmpty['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "verifyNoMoreInteractions(streamTwo)@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testRemoveOutputStreamWithTwoStreams['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(1)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "inOrderStreams.verify(streamOne,times(2)).flush()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(4)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@156104)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(cos.size()).isEqualTo(1)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "cos.addOutputStream(streamOne)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "cos.write(9)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(0)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(cos.isEmpty()).isTrue()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertThat(cos.size()).isEqualTo(0)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final OutputStream streamTwo = mock(,\"streamTwo\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "cos.write(9)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(2)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(cos.size()).isEqualTo(2)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(9)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).close()@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream(streamOne,streamTwo)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1560f1,2,3)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final OutputStream streamOne = mock(,\"streamOne\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertThat(cos.size()).isEqualTo(1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "cos.flush()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "InOrder inOrderStreams = inOrder(streamOne)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@156041)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "cos.flush()@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(2)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@15602e,2,3)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(3)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "cos.close()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testRemoveOutputStreamWithTwoStreams['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->18 [style = bold, label=""];
23->32 [style = solid, label="streamOne"];
0->4 [style = bold, label=""];
23->19 [style = bold, label=""];
35->30 [style = bold, label=""];
23->20 [style = solid, label="streamOne"];
23->14 [style = solid, label="streamOne"];
24->23 [style = bold, label=""];
16->25 [style = bold, label=""];
23->1 [style = solid, label="streamOne"];
19->20 [style = bold, label=""];
25->14 [style = bold, label=""];
19->4 [style = solid, label="streamTwo"];
27->32 [style = bold, label=""];
26->33 [style = bold, label=""];
7->22 [style = bold, label=""];
12->23 [style = bold, label=""];
19->25 [style = solid, label="streamTwo"];
16->13 [style = bold, label=""];
22->9 [style = bold, label=""];
6->8 [style = bold, label=""];
18->26 [style = bold, label=""];
29->23 [style = bold, label=""];
11->7 [style = bold, label=""];
14->1 [style = bold, label=""];
30->27 [style = bold, label=""];
20->21 [style = bold, label=""];
10->1 [style = bold, label=""];
23->35 [style = bold, label=""];
19->13 [style = solid, label="streamTwo"];
8->2 [style = bold, label=""];
28->34 [style = bold, label=""];
13->25 [style = dashed, label="0"];
34->16 [style = bold, label=""];
1->17 [style = bold, label=""];
15->5 [style = bold, label=""];
17->11 [style = bold, label=""];
3->15 [style = bold, label=""];
2->16 [style = bold, label=""];
4->31 [style = bold, label=""];
19->20 [style = solid, label="streamTwo"];
13->14 [style = bold, label=""];
21->0 [style = bold, label=""];
14->10 [style = bold, label=""];
32->4 [style = bold, label=""];
31->28 [style = bold, label=""];
4->3 [style = bold, label=""];
5->6 [style = bold, label=""];
}
