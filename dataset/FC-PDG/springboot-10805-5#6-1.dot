digraph {
3 [style = filled, label = "String accessToken = mockAccessToken()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "given(this.securityService.getAccessLevel(accessToken,\"my-app-id\")).willReturn(AccessLevel.FULL)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "preHandleWhenAccessIsNotAllowedShouldReturnFalse['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "SecurityResponse response = this.interceptor.preHandle(this.request,EndpointId.of(\"test\"))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "given(this.securityService.getAccessLevel(accessToken,\"my-app-id\")).willReturn(AccessLevel.RESTRICTED)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "this.request.addHeader(\"Authorization\",\"Bearer \" + accessToken)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "preHandleWhenAccessIsNotAllowedShouldReturnFalse['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "preHandleSuccessfulWithFullAccess['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(token.toString()).isEqualTo(accessToken)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "this.request.addHeader(\"Authorization\",\"bearer \" + accessToken)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ArgumentCaptor<Token> tokenArgumentCaptor = ArgumentCaptor.forClass()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(this.request.getAttribute(\"cloudFoundryAccessLevel\")).isEqualTo(AccessLevel.FULL)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "verify(this.tokenValidator).validate(tokenArgumentCaptor.capture())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Token token = tokenArgumentCaptor.getValue()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(response.getStatus()).isEqualTo(Reason.ACCESS_DENIED.getStatus())@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "SecurityResponse response = this.interceptor.preHandle(this.request,\"/a\")@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(response.getStatus()).isEqualTo(HttpStatus.OK)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->13 [style = dashed, label="0"];
3->8 [style = solid, label="accessToken"];
16->8 [style = bold, label=""];
0->6 [style = bold, label=""];
9->4 [style = bold, label=""];
1->3 [style = bold, label=""];
10->3 [style = bold, label=""];
4->2 [style = bold, label=""];
3->13 [style = solid, label="accessToken"];
4->6 [style = dashed, label="0"];
15->16 [style = bold, label=""];
7->3 [style = bold, label=""];
11->15 [style = bold, label=""];
6->2 [style = bold, label=""];
3->5 [style = bold, label=""];
5->0 [style = bold, label=""];
0->4 [style = bold, label=""];
12->14 [style = bold, label=""];
3->13 [style = bold, label=""];
13->9 [style = bold, label=""];
0->9 [style = dashed, label="0"];
4->11 [style = bold, label=""];
3->5 [style = solid, label="accessToken"];
8->12 [style = bold, label=""];
}
