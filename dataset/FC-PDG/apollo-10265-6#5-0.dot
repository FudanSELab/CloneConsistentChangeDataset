digraph {
1 [style = filled, label = "assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final String someKey = \"someKey\"@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "verify(someProperties,times(2)).getProperty(someKey)@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "await().atMost(500,TimeUnit.MILLISECONDS).untilAsserted(new ThrowingRunnable(){@Override public void run(){assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))verify(someProperties,times(2)).getProperty(someKey)}})@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final Integer someValue = 2@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "final Integer someDefaultValue = -1@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testGetIntPropertyMultipleTimesWithShortExpireTime['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testGetIntPropertyMultipleTimesWithShortExpireTime['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "MockInjector.setInstance(,new MockConfigUtilWithShortExpireTime())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "when(configRepository.getConfig()).thenReturn(someProperties)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "DefaultConfig defaultConfig = new DefaultConfig(someNamespace,configRepository)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TimeUnit.MILLISECONDS.sleep(50)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "verify(someProperties,times(1)).getProperty(anotherKey)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "MockInjector.setInstance(,new MockConfigUtilWithSmallCache())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "when(someProperties.getProperty(anotherKey)).thenReturn(String.valueOf(anotherValue))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Integer anotherValue = 3@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "when(someProperties.getProperty(someKey)).thenReturn(String.valueOf(someValue))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Integer someValue = 2@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "String someKey = \"someKey\"@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(anotherValue,defaultConfig.getIntProperty(anotherKey,someDefaultValue))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "someProperties = mock()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Integer someDefaultValue = -1@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testGetIntPropertyMultipleTimesWithSmallCache['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "verify(someProperties,times(1)).getProperty(someKey)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "String anotherKey = \"anotherKey\"@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(anotherValue,defaultConfig.getIntProperty(anotherKey,someDefaultValue))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final DefaultConfig defaultConfig = new DefaultConfig(someNamespace,configRepository)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10->1 [style = solid, label="someDefaultValue"];
27->13 [style = bold, label=""];
4->12 [style = solid, label="someKey"];
5->10 [style = bold, label=""];
8->16 [style = bold, label=""];
4->1 [style = solid, label="someKey"];
5->11 [style = solid, label="someValue"];
5->14 [style = solid, label="someValue"];
29->4 [style = bold, label=""];
5->0 [style = solid, label="someValue"];
28->23 [style = solid, label="anotherKey"];
4->18 [style = dashed, label="0"];
10->21 [style = dashed, label="0"];
21->0 [style = solid, label="someDefaultValue"];
21->20 [style = solid, label="someDefaultValue"];
5->6 [style = solid, label="someValue"];
19->0 [style = solid, label="someValue"];
10->27 [style = bold, label=""];
13->8 [style = solid, label="someProperties"];
3->14 [style = bold, label=""];
8->3 [style = bold, label=""];
30->23 [style = bold, label=""];
18->7 [style = solid, label="someKey"];
18->19 [style = bold, label=""];
4->6 [style = solid, label="someKey"];
4->24 [style = solid, label="someKey"];
2->27 [style = dashed, label="0"];
4->0 [style = solid, label="someKey"];
5->1 [style = solid, label="someValue"];
19->14 [style = solid, label="someValue"];
7->20 [style = bold, label=""];
25->26 [style = solid, label="anotherValue"];
5->28 [style = bold, label=""];
5->12 [style = solid, label="someValue"];
12->6 [style = bold, label=""];
18->14 [style = solid, label="someKey"];
13->11 [style = bold, label=""];
10->6 [style = solid, label="someDefaultValue"];
18->0 [style = solid, label="someKey"];
18->20 [style = solid, label="someKey"];
21->14 [style = solid, label="someDefaultValue"];
25->22 [style = solid, label="anotherValue"];
21->2 [style = bold, label=""];
0->7 [style = bold, label=""];
2->13 [style = bold, label=""];
7->26 [style = bold, label=""];
22->8 [style = bold, label=""];
7->9 [style = bold, label=""];
26->30 [style = bold, label=""];
6->1 [style = bold, label=""];
4->14 [style = solid, label="someKey"];
28->30 [style = solid, label="anotherKey"];
19->20 [style = solid, label="someValue"];
14->0 [style = bold, label=""];
9->20 [style = dashed, label="0"];
1->24 [style = bold, label=""];
15->4 [style = bold, label=""];
11->22 [style = bold, label=""];
23->1 [style = bold, label=""];
28->25 [style = bold, label=""];
10->12 [style = solid, label="someDefaultValue"];
11->8 [style = bold, label=""];
16->14 [style = bold, label=""];
25->10 [style = bold, label=""];
10->2 [style = bold, label=""];
10->14 [style = solid, label="someDefaultValue"];
10->0 [style = solid, label="someDefaultValue"];
9->12 [style = bold, label=""];
25->30 [style = solid, label="anotherValue"];
10->30 [style = solid, label="someDefaultValue"];
10->26 [style = solid, label="someDefaultValue"];
5->19 [style = dashed, label="0"];
4->5 [style = bold, label=""];
4->7 [style = solid, label="someKey"];
19->11 [style = solid, label="someValue"];
17->18 [style = bold, label=""];
3->16 [style = dashed, label="0"];
28->26 [style = solid, label="anotherKey"];
19->21 [style = bold, label=""];
}
