digraph {
25 [style = filled, label = "EasyMock.expect(taskStorage.getTask(iHaveFailed.getId())).andReturn(Optional.of(iHaveFailed)).anyTimes()@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(existingTasks).anyTimes()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(now,((KafkaIndexTask)captured.getValue()).getIOConfig().getMinimumMessageTime().get())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "List<Task> existingTasks = ImmutableList.of(id1)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "Capture<Task> captured = Capture.newInstance()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(captured))).andReturn(true)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(\"id1\")).andReturn(Optional.of(TaskStatus.running(\"id1\"))).anyTimes()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Capture<Task> aNewTaskCapture = Capture.newInstance()@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "supervisor = getTestableSupervisor(2,1,true,\"PT1H\",null,null)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "EasyMock.replay(taskQueue)@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of(captured.getValue())).anyTimes()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "taskRunner.registerListener(EasyMock.anyObject(),EasyMock.anyObject())@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "EasyMock.expect(taskStorage.getTask(runningTaskId)).andReturn(Optional.of(captured.getValue())).anyTimes()@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "String runningTaskId = captured.getValue().getId()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of(captured.getValue())).anyTimes()@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(existingTasks).anyTimes()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "supervisor.runInternal()@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "checkpoints.put(0,ImmutableMap.of(shardId1,\"0\",shardId0,\"0\"))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "addSomeEvents(1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "Assert.assertEquals(iHaveFailed.getIOConfig().getBaseSequenceName(),((KinesisIndexTask)aNewTaskCapture.getValue()).getIOConfig().getBaseSequenceName())@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "DateTime maxi = now.plusMinutes(60)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "testRequeueAdoptedTaskWhenFailed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "DateTime maxi = now.plusMinutes(60)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "testRequeueAdoptedTaskWhenFailed['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
72 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getPartitionIds(stream)).andReturn(ImmutableSet.of(shardId1,shardId0)).anyTimes()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "EasyMock.reset(taskClient)@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "Assert.assertEquals(now,((KinesisIndexTask)aNewTaskCapture.getValue()).getIOConfig().getMinimumMessageTime().get())@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "Assert.assertEquals(maxi,((KinesisIndexTask)aNewTaskCapture.getValue()).getIOConfig().getMaximumMessageTime().get())@@@62@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "EasyMock.expect(taskStorage.getTask(iHaveFailed.getId())).andReturn(Optional.of(iHaveFailed)).anyTimes()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Task id1 = createKafkaIndexTask(\"id1\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(\"topic\",ImmutableMap.of(0,0L,2,0L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(\"topic\",ImmutableMap.of(0,Long.MAX_VALUE,2,Long.MAX_VALUE)),now,maxi)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id1\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "DateTime now = DateTimes.nowUtc()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "Assert.assertNotEquals(iHaveFailed.getId(),aNewTaskCapture.getValue().getId())@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "supervisor.runInternal()@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Capture<Task> aNewTaskCapture = Capture.newInstance()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "EasyMock.replay(taskStorage)@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "supervisor.start()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Capture<Task> captured = Capture.newInstance()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testRequeueAdoptedTaskWhenFailed['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "DateTime now = DateTimes.nowUtc()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "String runningTaskId = captured.getValue().getId()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(runningTaskId)).andReturn(Futures.immediateFuture(now)).anyTimes()@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(shard1Partition,shard0Partition)).anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "Assert.assertEquals(now,((KinesisIndexTask)captured.getValue()).getIOConfig().getMinimumMessageTime().get())@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "KinesisIndexTask iHaveFailed = (KinesisIndexTask)existingTasks.get(0)@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "verifyAll()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id1\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(2)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "EasyMock.expect(taskStorage.getTask(\"id1\")).andReturn(Optional.of(id1)).anyTimes()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "supervisorRecordSupplier.seekToLatest(EasyMock.anyObject())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "supervisorRecordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(\"id1\")).andReturn(Futures.immediateFuture(now)).anyTimes()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(runningTaskId)).andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.READING))@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "checkpoints.put(0,ImmutableMap.of(0,0L,2,0L))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(\"id1\")).andReturn(Futures.immediateFuture(Status.READING))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Task id1 = createKafkaIndexTask(\"id1\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(\"topic\",ImmutableMap.of(0,0L,2,0L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(\"topic\",ImmutableMap.of(0,Long.MAX_VALUE,2,Long.MAX_VALUE)),now,maxi,supervisor.getTuningConfig())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
65 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-0\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(2)@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "verifyAll()@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(aNewTaskCapture))).andReturn(true)@@@53@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.emptyList()).anyTimes()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(EasyMock.anyObject())).andReturn(\"100\").anyTimes()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "EasyMock.replay(taskClient)@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "Task id1 = createKinesisIndexTask(\"id1\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,\"0\",shardId0,\"0\"),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,shardId0,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER)),now,maxi)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "replayAll()@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "EasyMock.reset(taskQueue)@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(null)).anyTimes()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "EasyMock.reset(taskStorage)@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(iHaveFailed.getIOConfig().getBaseSequenceName(),((KafkaIndexTask)aNewTaskCapture.getValue()).getIOConfig().getBaseSequenceName())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "supervisor.start()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(iHaveFailed.getId())).andReturn(Optional.of(TaskStatus.failure(iHaveFailed.getId())))@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "List<Task> existingTasks = ImmutableList.of(id1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "TreeMap<Integer,Map<String,String>> checkpoints = new TreeMap<>()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(\"id1\")).andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.READING))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "supervisorRecordSupplier.assign(EasyMock.anyObject())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(runningTaskId)).andReturn(Optional.of(TaskStatus.running(runningTaskId))).anyTimes()@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50->32 [style = bold, label=""];
55->36 [style = bold, label=""];
10->66 [style = bold, label=""];
25->34 [style = bold, label=""];
3->24 [style = bold, label=""];
0->46 [style = bold, label=""];
68->50 [style = bold, label=""];
32->0 [style = bold, label=""];
36->28 [style = bold, label=""];
27->73 [style = dashed, label="0"];
63->56 [style = bold, label=""];
46->26 [style = solid, label="maxi"];
7->31 [style = bold, label=""];
30->79 [style = solid, label="now"];
40->20 [style = bold, label=""];
72->82 [style = bold, label=""];
0->45 [style = solid, label="now"];
69->30 [style = bold, label=""];
3->75 [style = dashed, label="0"];
9->70 [style = bold, label=""];
13->51 [style = bold, label=""];
26->60 [style = bold, label=""];
29->2 [style = bold, label=""];
51->61 [style = bold, label=""];
49->10 [style = bold, label=""];
39->38 [style = bold, label=""];
42->3 [style = bold, label=""];
45->79 [style = dashed, label="0"];
30->40 [style = bold, label=""];
39->66 [style = dashed, label="0"];
48->18 [style = bold, label=""];
20->61 [style = dashed, label="0"];
26->57 [style = dashed, label="0"];
11->25 [style = bold, label=""];
74->59 [style = bold, label=""];
9->39 [style = bold, label=""];
53->22 [style = solid, label="id1"];
1->41 [style = bold, label=""];
3->81 [style = bold, label=""];
76->80 [style = bold, label=""];
62->79 [style = bold, label=""];
64->76 [style = bold, label=""];
79->57 [style = bold, label=""];
18->12 [style = bold, label=""];
34->54 [style = bold, label=""];
56->62 [style = bold, label=""];
6->49 [style = bold, label=""];
46->53 [style = solid, label="maxi"];
51->16 [style = bold, label=""];
24->55 [style = dashed, label="0"];
5->17 [style = bold, label=""];
27->22 [style = bold, label=""];
12->1 [style = bold, label=""];
22->5 [style = bold, label=""];
27->53 [style = dashed, label="0"];
0->27 [style = solid, label="now"];
66->48 [style = bold, label=""];
30->66 [style = solid, label="now"];
21->45 [style = bold, label=""];
20->23 [style = bold, label=""];
70->75 [style = bold, label=""];
33->36 [style = bold, label=""];
59->63 [style = bold, label=""];
24->8 [style = bold, label=""];
27->22 [style = solid, label="id1"];
38->33 [style = bold, label=""];
71->1 [style = bold, label=""];
75->55 [style = bold, label=""];
4->81 [style = dashed, label="0"];
10->43 [style = bold, label=""];
47->42 [style = bold, label=""];
80->72 [style = bold, label=""];
35->9 [style = bold, label=""];
37->30 [style = bold, label=""];
82->77 [style = bold, label=""];
0->53 [style = solid, label="now"];
77->69 [style = bold, label=""];
30->73 [style = solid, label="now"];
73->23 [style = bold, label=""];
40->73 [style = solid, label="maxi"];
73->23 [style = solid, label="id1"];
78->65 [style = bold, label=""];
31->44 [style = bold, label=""];
23->47 [style = bold, label=""];
14->50 [style = bold, label=""];
52->50 [style = bold, label=""];
0->39 [style = solid, label="now"];
46->27 [style = solid, label="maxi"];
34->21 [style = bold, label=""];
8->13 [style = bold, label=""];
58->64 [style = bold, label=""];
36->71 [style = dashed, label="0"];
42->70 [style = dashed, label="0"];
61->35 [style = bold, label=""];
21->62 [style = dashed, label="0"];
54->45 [style = bold, label=""];
28->15 [style = bold, label=""];
41->29 [style = bold, label=""];
43->48 [style = bold, label=""];
67->74 [style = bold, label=""];
46->53 [style = bold, label=""];
15->6 [style = bold, label=""];
41->54 [style = dashed, label="0"];
53->22 [style = bold, label=""];
40->73 [style = bold, label=""];
17->19 [style = bold, label=""];
18->71 [style = bold, label=""];
60->67 [style = bold, label=""];
65->58 [style = bold, label=""];
4->37 [style = bold, label=""];
50->78 [style = bold, label=""];
46->27 [style = bold, label=""];
40->57 [style = solid, label="maxi"];
44->11 [style = bold, label=""];
81->8 [style = bold, label=""];
45->26 [style = bold, label=""];
19->4 [style = bold, label=""];
2->7 [style = bold, label=""];
16->35 [style = bold, label=""];
}
