digraph {
0 [style = filled, label = "long newTerm = initialTerm + randomLongBetween(1,10)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "long newTerm = initialTerm + randomLongBetween(1,10)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertFalse(clusterStateHasNode(node1))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertTrue(isLocalNodeElectedMaster())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "joinNodeAndRun(new JoinRequest(node0,Optional.of(new Join(node0,node0,newTerm,initialTerm,initialVersion))))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(expectThrows(,null).getMessage(),containsString(\"join target is a follower\"))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "long initialVersion = randomLongBetween(1,10)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(isLocalNodeElectedMaster())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertTrue(clusterStateHasNode(node1))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "long initialTerm = randomLongBetween(1,10)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "handleStartJoinFrom(node1,newTerm)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testJoinElectedLeader['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "handleFollowerCheckFrom(node1,newTerm)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "setupFakeMasterServiceAndCoordinator(initialTerm,initialState(node0,initialTerm,initialVersion,new VotingConfiguration(Collections.singleton(node0.getId()))))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "DiscoveryNode node1 = newNode(1,true)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testJoinFollowerFails['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "joinNodeAndRun(new JoinRequest(node1,Optional.of(new Join(node1,node0,newTerm,initialTerm,initialVersion))))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "DiscoveryNode node0 = newNode(0,true)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testJoinFollowerFails['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertThat(expectThrows(,null).getMessage(),containsString(\"join target is a follower\"))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3->14 [style = solid, label="initialTerm"];
4->14 [style = bold, label=""];
20->17 [style = bold, label=""];
7->1 [style = bold, label=""];
8->7 [style = solid, label="node1"];
9->18 [style = solid, label="node0"];
6->5 [style = solid, label="initialVersion"];
19->20 [style = bold, label=""];
8->19 [style = solid, label="node1"];
11->4 [style = bold, label=""];
8->3 [style = bold, label=""];
6->20 [style = solid, label="initialVersion"];
0->7 [style = solid, label="newTerm"];
3->18 [style = solid, label="initialTerm"];
3->6 [style = bold, label=""];
16->19 [style = bold, label=""];
9->8 [style = bold, label=""];
12->9 [style = bold, label=""];
2->4 [style = bold, label=""];
9->5 [style = solid, label="node0"];
3->20 [style = solid, label="initialTerm"];
1->11 [style = bold, label=""];
0->7 [style = bold, label=""];
3->5 [style = solid, label="initialTerm"];
6->5 [style = bold, label=""];
14->20 [style = solid, label="newTerm"];
0->1 [style = solid, label="newTerm"];
8->20 [style = solid, label="node1"];
5->0 [style = bold, label=""];
8->1 [style = solid, label="node1"];
6->18 [style = solid, label="initialVersion"];
5->4 [style = bold, label=""];
3->0 [style = solid, label="initialTerm"];
17->15 [style = bold, label=""];
2->11 [style = dashed, label="0"];
14->18 [style = bold, label=""];
1->2 [style = bold, label=""];
10->9 [style = bold, label=""];
13->9 [style = bold, label=""];
14->18 [style = solid, label="newTerm"];
9->20 [style = solid, label="node0"];
8->15 [style = solid, label="node1"];
18->16 [style = bold, label=""];
}
