digraph {
15 [style = filled, label = "TransportActionProxy.registerProxyAction(serviceC,\"internal:test\",cancellable,null)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "latch.await()@@@49@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TransportActionProxy.registerProxyAction(serviceC,\"internal:test\",null)@@@25@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "latch.await()@@@49@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "serviceA.registerRequestHandler(\"internal:test\",ThreadPool.Names.SAME,null,null)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "CountDownLatch latch = new CountDownLatch(1)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "serviceA.sendRequest(nodeB,TransportActionProxy.getProxyAction(\"internal:test\"),TransportActionProxy.wrapRequest(nodeC,new SimpleTestRequest(\"TS_A\")),new TransportResponseHandler<SimpleTestResponse>(){@Override public SimpleTestResponse read(StreamInput in){return new SimpleTestResponse(in)}@Override public void handleResponse(SimpleTestResponse response){try {assertEquals(\"TS_C\",response.targetNode)}{latch.countDown()}}@Override public void handleException(TransportException exp){try {throw new AssertionError(exp)}{latch.countDown()}}})@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "boolean cancellable = randomBoolean()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "TransportActionProxy.registerProxyAction(serviceA,\"internal:test\",cancellable,null)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "TransportActionProxy.registerProxyAction(serviceB,\"internal:test\",null)@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testSendMessage['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testException['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "testException['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "serviceB.registerRequestHandler(\"internal:test\",ThreadPool.Names.SAME,null,null)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "serviceA.sendRequest(nodeB,TransportActionProxy.getProxyAction(\"internal:test\"),TransportActionProxy.wrapRequest(nodeC,new SimpleTestRequest(\"TS_A\",cancellable)),new TransportResponseHandler<SimpleTestResponse>(){@Override public SimpleTestResponse read(StreamInput in){return new SimpleTestResponse(in)}@Override public void handleResponse(SimpleTestResponse response){try {fail(\"expected exception\")}{latch.countDown()}}@Override public void handleException(TransportException exp){try {Throwable cause = ExceptionsHelper.unwrapCause(exp)assertEquals(\"greetings from TS_C\",cause.getMessage())}{latch.countDown()}}})@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "AbstractSimpleTransportTestCase.connectToNode(serviceA,nodeB)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TransportActionProxy.registerProxyAction(serviceC,\"internal:test\",null)@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "CountDownLatch latch = new CountDownLatch(1)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "TransportActionProxy.registerProxyAction(serviceB,\"internal:test\",cancellable,null)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "AbstractSimpleTransportTestCase.connectToNode(serviceB,nodeC)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TransportActionProxy.registerProxyAction(serviceA,\"internal:test\",null)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "serviceC.registerRequestHandler(\"internal:test\",ThreadPool.Names.SAME,null,null)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->9 [style = bold, label=""];
5->10 [style = bold, label=""];
2->19 [style = bold, label=""];
15->7 [style = bold, label=""];
9->2 [style = bold, label=""];
8->15 [style = dashed, label="0"];
3->6 [style = bold, label=""];
6->17 [style = dashed, label="0"];
9->8 [style = bold, label=""];
13->11 [style = bold, label=""];
8->7 [style = bold, label=""];
1->11 [style = bold, label=""];
7->14 [style = bold, label=""];
1->13 [style = dashed, label="0"];
6->4 [style = bold, label=""];
2->0 [style = bold, label=""];
12->10 [style = bold, label=""];
21->20 [style = bold, label=""];
2->14 [style = dashed, label="0"];
14->0 [style = bold, label=""];
10->13 [style = bold, label=""];
18->10 [style = bold, label=""];
11->3 [style = bold, label=""];
12->14 [style = solid, label="cancellable"];
7->2 [style = bold, label=""];
9->15 [style = bold, label=""];
12->17 [style = solid, label="cancellable"];
3->17 [style = bold, label=""];
10->1 [style = bold, label=""];
12->15 [style = solid, label="cancellable"];
16->12 [style = bold, label=""];
17->4 [style = bold, label=""];
12->13 [style = solid, label="cancellable"];
19->21 [style = bold, label=""];
}
