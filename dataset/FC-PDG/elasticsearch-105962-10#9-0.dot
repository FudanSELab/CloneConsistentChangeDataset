digraph {
10 [style = filled, label = "assertEquals(\"quick\",tokens.get(0).getTerm())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\"brown\",tokens.get(1).getTerm())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testNonPreBuildTokenFilter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "request.analyzer(\"custom_analyzer\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(4,tokens.size())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "List<AnalyzeAction.AnalyzeToken> tokens = analyze.getTokens()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testWithIndexAnalyzers['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "tokens = analyze.getTokens()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(\"quick\",tokens.get(1).getTerm())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(\"the\",tokens.get(0).getTerm())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "AnalyzeAction.Request request = new AnalyzeAction.Request()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "request.addTokenFilter(\"stop\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(\"fox\",tokens.get(3).getTerm())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertEquals(\"quick\",tokens.get(1).getTerm())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertEquals(\"quick\",tokens.get(0).getTerm())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "request.text(\"the quick brown fox\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "AnalyzeAction.Response analyze = TransportAnalyzeAction.analyze(request,registry,mockIndexService(),maxTokenCount)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "tokens = analyze.getTokens()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertEquals(\"the\",tokens.get(0).getTerm())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(\"brown\",tokens.get(2).getTerm())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,environment,mockIndexService(),maxTokenCount)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(\"fox\",tokens.get(2).getTerm())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(4,tokens.size())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(3,tokens.size())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "request.tokenizer(\"standard\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "tokens = analyze.getTokens()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(\"brown\",tokens.get(2).getTerm())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testNonPreBuildTokenFilter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"brown\",tokens.get(1).getTerm())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "request.analyzer(\"standard\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(\"fox\",tokens.get(2).getTerm())@@@35@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "request.tokenizer(\"standard\")@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "AnalyzeAction.Response analyze = TransportAnalyzeAction.analyze(request,registry,environment,mockIndexService(),maxTokenCount)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(3,tokens.size())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "request.addTokenFilter(\"mock\")@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "request.analyzer(null)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,environment,mockIndexService(),maxTokenCount)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(\"fox\",tokens.get(3).getTerm())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,environment,mockIndexService(),maxTokenCount)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27->14 [style = bold, label=""];
11->4 [style = bold, label=""];
26->21 [style = bold, label=""];
0->33 [style = bold, label=""];
7->8 [style = bold, label=""];
23->25 [style = bold, label=""];
8->5 [style = bold, label=""];
36->15 [style = bold, label=""];
35->31 [style = bold, label=""];
6->5 [style = solid, label="request"];
2->7 [style = bold, label=""];
24->20 [style = bold, label=""];
6->24 [style = solid, label="request"];
25->26 [style = bold, label=""];
38->37 [style = bold, label=""];
14->24 [style = bold, label=""];
19->23 [style = bold, label=""];
6->32 [style = solid, label="request"];
5->13 [style = solid, label="analyze"];
1->6 [style = bold, label=""];
6->8 [style = bold, label=""];
13->35 [style = bold, label=""];
5->4 [style = bold, label=""];
10->3 [style = bold, label=""];
6->2 [style = bold, label=""];
5->11 [style = dashed, label="0"];
33->13 [style = bold, label=""];
15->28 [style = bold, label=""];
8->11 [style = bold, label=""];
13->32 [style = solid, label="analyze"];
17->36 [style = bold, label=""];
29->6 [style = bold, label=""];
4->9 [style = bold, label=""];
3->0 [style = bold, label=""];
30->5 [style = bold, label=""];
34->16 [style = bold, label=""];
22->18 [style = bold, label=""];
21->27 [style = bold, label=""];
18->34 [style = bold, label=""];
20->17 [style = bold, label=""];
37->22 [style = bold, label=""];
32->24 [style = solid, label="analyze"];
6->13 [style = solid, label="request"];
8->30 [style = bold, label=""];
6->11 [style = solid, label="request"];
32->19 [style = bold, label=""];
31->38 [style = bold, label=""];
12->6 [style = bold, label=""];
16->32 [style = bold, label=""];
9->10 [style = bold, label=""];
}
