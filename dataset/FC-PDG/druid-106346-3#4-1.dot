digraph {
30 [style = filled, label = "Assert.assertEquals(QueryRunnerTestHelper.dataSource,actualEvent.get(DruidMetrics.DATASOURCE))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(\"xx\",actualEvent.get(DruidMetrics.DATASOURCE))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "CachingEmitter cachingEmitter = new CachingEmitter()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "SearchQueryMetrics queryMetrics = DefaultSearchQueryMetricsFactory.instance().makeMetrics(query)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(query.getType(),actualEvent.get(DruidMetrics.TYPE))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "DefaultQueryMetrics<Query<?>> queryMetrics = new DefaultQueryMetrics<>(TestHelper.makeJsonMapper())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testDefaultQueryMetricsQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "SearchQuery query = Druids.newSearchQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.dayGran).intervals(QueryRunnerTestHelper.fullOnInterval).dimensions(new ListFilteredDimensionSpec(new DefaultDimensionSpec(\"tags\",\"tags\"),ImmutableSet.of(\"t3\"),null)).build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(\"true\",actualEvent.get(\"hasFilters\"))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testDefaultQueryMetricsQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "Assert.assertTrue(actualEvent.containsKey(\"timestamp\"))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(expectedStringIntervals,actualEvent.get(DruidMetrics.INTERVAL))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testDefaultSearchQueryMetricsQuery['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "ServiceEmitter serviceEmitter = new ServiceEmitter(\"\",\"\",cachingEmitter)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Map<String,Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "List<Interval> expectedIntervals = QueryRunnerTestHelper.fullOnIntervalSpec.getIntervals()@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Assert.assertEquals(\"\",actualEvent.get(\"host\"))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(),actualEvent.get(\"duration\"))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "queryMetrics.reportQueryTime(0).emit(serviceEmitter)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(\"false\",actualEvent.get(\"hasFilters\"))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "queryMetrics.query(query)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(\"\",actualEvent.get(DruidMetrics.ID))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(12,actualEvent.size())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "TopNQuery query = new TopNQueryBuilder().dataSource(\"xx\").granularity(Granularities.ALL).dimension(new ListFilteredDimensionSpec(new DefaultDimensionSpec(\"tags\",\"tags\"),ImmutableSet.of(\"t3\"),null)).metric(\"count\").intervals(QueryRunnerTestHelper.fullOnIntervalSpec).aggregators(Collections.singletonList(new CountAggregatorFactory(\"count\"))).threshold(5).filters(new SelectorDimFilter(\"tags\",\"t3\",null)).build()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assert.assertEquals(0L,actualEvent.get(\"value\"))@@@24@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(\"query/time\",actualEvent.get(\"metric\"))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(\"\",actualEvent.get(\"service\"))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "List<Interval> expectedIntervals = QueryRunnerTestHelper.fullOnInterval.getIntervals()@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertTrue(actualEvent.containsKey(\"feed\"))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "List<String> expectedStringIntervals = expectedIntervals.stream().map(null).collect(Collectors.toList())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "TopNQuery query = new TopNQueryBuilder().dataSource(\"xx\").granularity(Granularities.ALL).dimension(new ListFilteredDimensionSpec(new DefaultDimensionSpec(\"tags\",\"tags\"),ImmutableSet.of(\"t3\"),null)).metric(\"count\").intervals(QueryRunnerTestHelper.fullOnInterval).aggregators(Collections.singletonList(new CountAggregatorFactory(\"count\"))).threshold(5).filters(new SelectorDimFilter(\"tags\",\"t3\",null)).build()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29->8 [style = bold, label=""];
18->9 [style = solid, label="expectedStringIntervals"];
7->1 [style = bold, label=""];
24->0 [style = solid, label="query"];
24->0 [style = bold, label=""];
10->24 [style = bold, label=""];
19->20 [style = bold, label=""];
0->11 [style = bold, label=""];
28->26 [style = bold, label=""];
22->28 [style = bold, label=""];
28->26 [style = solid, label="query"];
12->30 [style = dashed, label="0"];
14->27 [style = dashed, label="0"];
27->6 [style = bold, label=""];
8->22 [style = bold, label=""];
9->27 [style = bold, label=""];
6->5 [style = bold, label=""];
5->2 [style = bold, label=""];
3->23 [style = bold, label=""];
26->0 [style = bold, label=""];
13->24 [style = dashed, label="0"];
20->16 [style = bold, label=""];
4->30 [style = bold, label=""];
8->22 [style = solid, label="cachingEmitter"];
10->13 [style = bold, label=""];
30->3 [style = bold, label=""];
2->21 [style = bold, label=""];
17->18 [style = bold, label=""];
22->10 [style = bold, label=""];
18->9 [style = bold, label=""];
9->14 [style = bold, label=""];
4->12 [style = bold, label=""];
22->11 [style = solid, label="serviceEmitter"];
3->17 [style = bold, label=""];
13->0 [style = solid, label="query"];
25->8 [style = bold, label=""];
12->3 [style = bold, label=""];
17->23 [style = dashed, label="0"];
16->4 [style = bold, label=""];
1->19 [style = bold, label=""];
28->0 [style = solid, label="query"];
14->6 [style = bold, label=""];
15->8 [style = bold, label=""];
11->7 [style = bold, label=""];
23->18 [style = bold, label=""];
13->0 [style = bold, label=""];
}
