digraph {
11 [style = filled, label = "testExpireSnapshotUsingNamedArgs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\",tableName)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "List<Object((> output1 = sql(\"CALL %s.system.expire_snapshots('%s', '%s', TIMESTAMP '%s')\",catalogName,tableIdent.namespace(),tableIdent.name(),secondSnapshotTimestamp)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "sql(\"INSERT INTO TABLE %s VALUES (2, 'b')\",tableName)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "sql(\"INSERT OVERWRITE %s VALUES (3, 'c')\",tableName)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "sql(\"INSERT INTO TABLE %s VALUES (1, 'a')\",tableName)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"Procedure output must match\",ImmutableList.of(row(0L,0L,1L)),output)@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Timestamp secondSnapshotTimestamp = Timestamp.from(Instant.ofEpochMilli(secondSnapshot.timestampMillis()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "table.refresh()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(\"Should expire one snapshot\",1,Iterables.size(table.snapshots()))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "List<Object((> output = sql(\"CALL %s.system.expire_snapshots(\" + \"older_than => TIMESTAMP '%s',\" + \"namespace => '%s',\" + \"table => '%s',\" + \"retain_last => 1)\",catalogName,currentTimestamp,tableIdent.namespace(),tableIdent.name())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "Snapshot secondSnapshot = table.currentSnapshot()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "waitUntilAfter(table.currentSnapshot().timestampMillis())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(\"Should be 3 snapshots\",3,Iterables.size(table.snapshots()))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testExpireSnapshotUsingNamedArgs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Snapshot firstSnapshot = table.currentSnapshot()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(\"Should have expected rows\",ImmutableList.of(row(3L,\"c\"),row(4L,\"d\")),sql(\"SELECT * FROM %s ORDER BY id\",tableName))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testExpireSnapshotsUsingPositionalArgs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "sql(\"INSERT INTO TABLE %s VALUES (2, 'b')\",tableName)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "List<Object((> output = sql(\"CALL %s.system.expire_snapshots('%s', '%s', TIMESTAMP '%s', 2)\",catalogName,tableIdent.namespace(),tableIdent.name(),currentTimestamp)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "waitUntilAfter(firstSnapshot.timestampMillis())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"Procedure output must match\",ImmutableList.of(row(0L,0L,1L)),output1)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Timestamp currentTimestamp = Timestamp.from(Instant.ofEpochMilli(System.currentTimeMillis()))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(\"Should be 2 snapshots\",2,Iterables.size(table.snapshots()))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Table table = validationCatalog.loadTable(tableIdent)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "table.refresh()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(\"Procedure output must match\",ImmutableList.of(row(2L,2L,1L)),output)@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "List<Object((> output = sql(\"CALL %s.system.expire_snapshots(\" + \"older_than => TIMESTAMP '%s',\" + \"table => '%s',\" + \"retain_last => 1)\",catalogName,currentTimestamp,tableIdent)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "table.refresh()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "sql(\"INSERT INTO TABLE %s VALUES (4, 'd')\",tableName)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
4->9 [style = bold, label=""];
5->10 [style = bold, label=""];
5->4 [style = solid, label="currentTimestamp"];
13->14 [style = solid, label="output1"];
1->8 [style = bold, label=""];
0->13 [style = bold, label=""];
16->27 [style = bold, label=""];
25->22 [style = bold, label=""];
16->27 [style = solid, label="output"];
2->6 [style = bold, label=""];
6->21 [style = bold, label=""];
4->9 [style = solid, label="output"];
18->26 [style = bold, label=""];
29->25 [style = bold, label=""];
6->0 [style = bold, label=""];
5->10 [style = solid, label="currentTimestamp"];
26->19 [style = bold, label=""];
15->3 [style = bold, label=""];
5->28 [style = bold, label=""];
12->0 [style = bold, label=""];
24->18 [style = bold, label=""];
28->16 [style = bold, label=""];
3->5 [style = bold, label=""];
23->24 [style = bold, label=""];
20->8 [style = bold, label=""];
14->23 [style = bold, label=""];
8->2 [style = bold, label=""];
5->16 [style = solid, label="currentTimestamp"];
22->12 [style = bold, label=""];
5->4 [style = bold, label=""];
7->6 [style = bold, label=""];
11->8 [style = bold, label=""];
10->9 [style = bold, label=""];
2->7 [style = bold, label=""];
19->15 [style = bold, label=""];
4->10 [style = dashed, label="0"];
17->29 [style = bold, label=""];
10->9 [style = solid, label="output"];
12->13 [style = solid, label="secondSnapshotTimestamp"];
21->17 [style = bold, label=""];
13->14 [style = bold, label=""];
}
