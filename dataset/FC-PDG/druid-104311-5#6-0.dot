digraph {
13 [style = filled, label = "Assert.assertEquals(task.getId(),Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(task.getId(),Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(task.getId(),Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "WorkerHolder rogueWorkerHolder = EasyMock.createMock()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "EasyMock.replay(rogueWorkerHolder)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "EasyMock.replay(rogueWorkerHolder)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(task,TaskStatus.failure(task.getId()),TaskLocation.create(\"rogue-worker\",1,2)),rogueWorkerHolder)@@@46@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "EasyMock.verify(workerHolder)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(task.getId(),Iterables.getOnlyElement(taskRunner.getPendingTasks()).getTaskId())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "EasyMock.expect(rogueWorkerHolder.getWorker()).andReturn(new Worker(\"http\",\"rogue-worker\",\"127.0.0.1\",5,\"v1\",WorkerConfig.DEFAULT_CATEGORY)).anyTimes()@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "EasyMock.expect(rogueWorkerHolder.getWorker()).andReturn(new Worker(\"http\",\"rogue-worker\",\"127.0.0.1\",5,\"v1\",WorkerConfig.DEFAULT_CATEGORY)).anyTimes()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "testTaskAddedOrUpdated2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "workerHolder.resetContinuouslyFailedTasksCount()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Task task = NoopTask.create(\"task\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "workerHolder.setLastCompletedTaskTime(EasyMock.anyObject())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Assert.assertEquals(listenerNotificationsAccumulator,ImmutableList.of(ImmutableList.of(task.getId(),TaskLocation.create(\"worker\",1,2)),ImmutableList.of(task.getId(),TaskStatus.success(task.getId()))))@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "EasyMock.verify(rogueWorkerHolder)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(task,TaskStatus.running(task.getId()),TaskLocation.create(\"rogue-worker\",1,2)),rogueWorkerHolder)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(task,TaskStatus.running(task.getId()),TaskLocation.create(\"worker\",1,2)),workerHolder)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testTaskAddedOrUpdated1['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "EasyMock.expect(workerHolder.getWorker()).andReturn(worker).anyTimes()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "Worker worker = new Worker(\"http\",\"localhost\",\"127.0.0.1\",1,\"v1\",WorkerConfig.DEFAULT_CATEGORY)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(task.getId(),Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(task.getId(),Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "EasyMock.verify(rogueWorkerHolder)@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Assert.assertEquals(task.getId(),Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "testTaskAddedOrUpdated1['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
47 [style = filled, label = "EasyMock.verify(rogueWorkerHolder)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(task,TaskStatus.running(task.getId()),TaskLocation.create(\"worker\",1000,1001)),workerHolder)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "EasyMock.replay(rogueWorkerHolder)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "EasyMock.replay(workerHolder)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "rogueWorkerHolder = EasyMock.createMock()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(task,TaskStatus.failure(task.getId(),\"Dummy task status failure for testing\"),TaskLocation.create(\"rogue-worker\",1,2)),rogueWorkerHolder)@@@46@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "HttpRemoteTaskRunner taskRunner = createTaskRunnerForTestTaskAddedOrUpdated(EasyMock.createStrictMock(),listenerNotificationsAccumulator)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(task.getId(),Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "rogueWorkerHolder = EasyMock.createMock()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "rogueWorkerHolder.shutdownTask(task.getId())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "rogueWorkerHolder = EasyMock.createMock()@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Future<TaskStatus> future = taskRunner.run(task)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "EasyMock.verify(rogueWorkerHolder)@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "EasyMock.expect(rogueWorkerHolder.getWorker()).andReturn(new Worker(\"http\",\"rogue-worker\",\"127.0.0.1\",5,\"v1\",WorkerConfig.DEFAULT_CATEGORY)).anyTimes()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(task,TaskStatus.failure(task.getId(),\"Dummy task status failure err message\"),TaskLocation.create(\"rogue-worker\",1,2)),rogueWorkerHolder)@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(task,TaskStatus.running(task.getId()),TaskLocation.create(\"worker\",1,2)),workerHolder)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(task,TaskStatus.failure(task.getId()),TaskLocation.create(\"rogue-worker\",1,2)),rogueWorkerHolder)@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "List<Object> listenerNotificationsAccumulator = new ArrayList<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(task,TaskStatus.success(task.getId()),TaskLocation.create(\"worker\",1,2)),workerHolder)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(task.getId(),Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId())@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EasyMock.expect(workerHolder.getWorker()).andReturn(new Worker(\"http\",\"worker\",\"127.0.0.1\",1,\"v1\",WorkerConfig.DEFAULT_CATEGORY)).anyTimes()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(listenerNotificationsAccumulator,ImmutableList.of(ImmutableList.of(task.getId(),TaskLocation.create(\"worker\",1000,1001)),ImmutableList.of(task.getId(),TaskLocation.create(\"worker\",1,2)),ImmutableList.of(task.getId(),TaskStatus.success(task.getId()))))@@@51@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "EasyMock.expect(rogueWorkerHolder.getWorker()).andReturn(new Worker(\"http\",\"rogue-worker\",\"127.0.0.1\",5,\"v1\",WorkerConfig.DEFAULT_CATEGORY)).anyTimes()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "EasyMock.expect(workerHolder.getContinuouslyFailedTasksCount()).andReturn(0)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "rogueWorkerHolder.shutdownTask(task.getId())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "EasyMock.replay(rogueWorkerHolder)@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "WorkerHolder workerHolder = EasyMock.createMock()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(task,TaskStatus.running(task.getId()),TaskLocation.create(\"rogue-worker\",1,2)),rogueWorkerHolder)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24->28 [style = solid, label="task"];
6->43 [style = bold, label=""];
43->31 [style = solid, label="workerHolder"];
34->46 [style = bold, label=""];
44->15 [style = bold, label=""];
40->25 [style = bold, label=""];
43->39 [style = solid, label="workerHolder"];
30->36 [style = bold, label=""];
15->18 [style = solid, label="rogueWorkerHolder"];
15->47 [style = solid, label="rogueWorkerHolder"];
36->25 [style = solid, label="rogueWorkerHolder"];
21->38 [style = bold, label=""];
43->4 [style = bold, label=""];
3->51 [style = dashed, label="0"];
23->29 [style = bold, label=""];
52->24 [style = bold, label=""];
53->27 [style = bold, label=""];
33->0 [style = bold, label=""];
10->8 [style = bold, label=""];
38->7 [style = bold, label=""];
43->53 [style = bold, label=""];
43->28 [style = solid, label="workerHolder"];
25->19 [style = bold, label=""];
20->37 [style = bold, label=""];
36->16 [style = solid, label="rogueWorkerHolder"];
36->19 [style = solid, label="rogueWorkerHolder"];
46->50 [style = bold, label=""];
47->0 [style = bold, label=""];
17->44 [style = solid, label="rogueWorkerHolder"];
9->24 [style = bold, label=""];
28->45 [style = bold, label=""];
56->43 [style = bold, label=""];
15->46 [style = solid, label="rogueWorkerHolder"];
11->28 [style = bold, label=""];
4->53 [style = dashed, label="0"];
24->3 [style = solid, label="task"];
7->1 [style = bold, label=""];
1->44 [style = bold, label=""];
15->34 [style = bold, label=""];
51->23 [style = bold, label=""];
30->42 [style = bold, label=""];
24->0 [style = solid, label="task"];
26->47 [style = bold, label=""];
20->3 [style = solid, label="rogueWorkerHolder"];
5->17 [style = bold, label=""];
13->16 [style = bold, label=""];
31->11 [style = bold, label=""];
3->23 [style = bold, label=""];
19->13 [style = bold, label=""];
29->32 [style = bold, label=""];
20->51 [style = solid, label="rogueWorkerHolder"];
16->20 [style = bold, label=""];
32->42 [style = bold, label=""];
15->50 [style = solid, label="rogueWorkerHolder"];
22->6 [style = bold, label=""];
24->8 [style = solid, label="task"];
8->33 [style = bold, label=""];
24->18 [style = solid, label="task"];
39->5 [style = bold, label=""];
0->12 [style = bold, label=""];
37->41 [style = bold, label=""];
20->29 [style = solid, label="rogueWorkerHolder"];
18->26 [style = bold, label=""];
35->2 [style = bold, label=""];
24->19 [style = solid, label="task"];
24->39 [style = solid, label="task"];
2->10 [style = bold, label=""];
46->18 [style = bold, label=""];
42->55 [style = bold, label=""];
27->35 [style = bold, label=""];
42->14 [style = bold, label=""];
43->10 [style = solid, label="workerHolder"];
22->55 [style = solid, label="listenerNotificationsAccumulator"];
17->7 [style = solid, label="rogueWorkerHolder"];
43->42 [style = solid, label="workerHolder"];
54->24 [style = bold, label=""];
6->56 [style = bold, label=""];
22->6 [style = solid, label="listenerNotificationsAccumulator"];
24->50 [style = solid, label="task"];
17->49 [style = bold, label=""];
24->51 [style = solid, label="task"];
14->55 [style = dashed, label="0"];
45->39 [style = bold, label=""];
50->26 [style = bold, label=""];
20->41 [style = solid, label="rogueWorkerHolder"];
41->3 [style = bold, label=""];
22->14 [style = solid, label="listenerNotificationsAccumulator"];
12->30 [style = bold, label=""];
24->22 [style = bold, label=""];
49->21 [style = bold, label=""];
48->40 [style = bold, label=""];
17->38 [style = solid, label="rogueWorkerHolder"];
18->50 [style = dashed, label="0"];
24->31 [style = solid, label="task"];
41->51 [style = bold, label=""];
4->27 [style = bold, label=""];
36->48 [style = bold, label=""];
33->31 [style = bold, label=""];
24->7 [style = solid, label="task"];
43->0 [style = solid, label="workerHolder"];
}
