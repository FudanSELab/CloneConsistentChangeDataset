digraph {
20 [style = filled, label = "assertEquals(5,subscriptions.position(tp1).longValue())@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testListOffsetsSendsIsolationLevel['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "subscriptions.assignFromUser(singleton(tp1))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "fetcher.updateFetchPositions(singleton(tp1))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "client.prepareResponse(new MockClient.RequestMatcher(){@Override public boolean matches(AbstractRequest body){ListOffsetRequest request = (ListOffsetRequest)bodyreturn request.isolationLevel() == isolationLevel}},listOffsetResponse(Errors.NONE,1L,5L))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertFalse(subscriptions.isOffsetResetNeeded(tp1))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "subscriptions.needOffsetReset(tp1,OffsetResetStrategy.LATEST)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(5,subscriptions.position(tp0).longValue())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertTrue(subscriptions.isFetchable(tp1))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "subscriptions.assignFromUser(singleton(tp1))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertFalse(subscriptions.isOffsetResetNeeded(tp1))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "fetcher.updateFetchPositions(singleton(tp0))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "subscriptions.assignFromUser(singleton(tp0))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertTrue(subscriptions.isFetchable(tp0))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertEquals(5,subscriptions.position(tp1).longValue())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "client.prepareResponse(listOffsetRequestMatcher(ListOffsetRequest.EARLIEST_TIMESTAMP),listOffsetResponse(Errors.NONE,1L,5L))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testUpdateFetchPositionResetToDefaultOffset['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testUpdateFetchPositionResetToDefaultOffset['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertTrue(subscriptions.isFetchable(tp1))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertFalse(subscriptions.isOffsetResetNeeded(tp0))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Fetcher<byte((,byte((> fetcher = createFetcher(subscriptions,new Metrics(),new ByteArrayDeserializer(),new ByteArrayDeserializer(),Integer.MAX_VALUE,isolationLevel)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
15->13 [style = bold, label=""];
16->18 [style = bold, label=""];
3->7 [style = dashed, label="0"];
2->6 [style = bold, label=""];
0->2 [style = bold, label=""];
6->9 [style = dashed, label="0"];
18->17 [style = bold, label=""];
0->11 [style = bold, label=""];
7->0 [style = bold, label=""];
20->14 [style = bold, label=""];
9->10 [style = bold, label=""];
11->9 [style = bold, label=""];
13->16 [style = bold, label=""];
3->0 [style = bold, label=""];
8->7 [style = bold, label=""];
1->12 [style = dashed, label="0"];
6->4 [style = bold, label=""];
19->14 [style = bold, label=""];
10->12 [style = bold, label=""];
2->15 [style = bold, label=""];
2->11 [style = dashed, label="0"];
4->1 [style = bold, label=""];
14->2 [style = bold, label=""];
4->10 [style = dashed, label="0"];
17->20 [style = bold, label=""];
}
