digraph {
10 [style = filled, label = "testHarnessForBroadcastProcessFunction['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testHarnessForCoProcessFunction['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertEquals(harness.extractOutputValues(),Arrays.asList(0,1))@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "testHarnessForCoProcessFunction['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "harness.processBroadcastElement(\"0\",1)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "harness.processElement2(\"0\",1)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "harness.processElement(1,10)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "harness.processElement1(1,10)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "BroadcastProcessFunction<Integer,String,Integer> function = new BroadcastProcessFunction<Integer,String,Integer>(){@Override public void processElement(Integer value,ReadOnlyContext ctx,Collector<Integer> out){out.collect(value)}@Override public void processBroadcastElement(String value,Context ctx,Collector<Integer> out){out.collect(Integer.parseInt(value))}}@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "TwoInputStreamOperatorTestHarness<Integer,String,Integer> harness = ProcessFunctionTestHarnesses.forCoProcessFunction(function)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(harness.extractOutputStreamRecords(),contains(streamRecord(0),streamRecord(1)))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(harness.extractOutputStreamRecords(),contains(streamRecord(0),StreamRecordMatchers.streamRecord(1)))@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "BroadcastOperatorTestHarness<Integer,String,Integer> harness = ProcessFunctionTestHarnesses.forBroadcastProcessFunction(function)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "CoProcessFunction<Integer,String,Integer> function = new CoProcessFunction<Integer,String,Integer>(){@Override public void processElement1(Integer value,Context ctx,Collector<Integer> out){out.collect(value)}@Override public void processElement2(String value,Context ctx,Collector<Integer> out){out.collect(Integer.parseInt(value))}}@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->0 [style = solid, label="function"];
5->8 [style = dashed, label="0"];
8->11 [style = solid, label="function"];
4->3 [style = bold, label=""];
6->5 [style = bold, label=""];
1->4 [style = bold, label=""];
1->9 [style = dashed, label="0"];
0->11 [style = dashed, label="0"];
13->12 [style = bold, label=""];
3->12 [style = dashed, label="0"];
10->8 [style = bold, label=""];
5->0 [style = bold, label=""];
4->13 [style = dashed, label="0"];
11->9 [style = bold, label=""];
8->11 [style = bold, label=""];
0->1 [style = bold, label=""];
4->7 [style = bold, label=""];
2->5 [style = bold, label=""];
9->13 [style = bold, label=""];
}
