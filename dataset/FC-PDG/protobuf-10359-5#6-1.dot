digraph {
7 [style = filled, label = "assertEquals(newMap(1,2),builder.build().getInt32ToInt32FieldMap())@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(builder.build().getInt32ToInt32FieldMap()).isEqualTo(newMap(1,2))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "builder.putInt32ToStringField(1,\"1\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "builder.putInt32ToMessageField(2,TestMap.MessageValue.getDefaultInstance())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(builder.build().getInt32ToStringFieldMap()).isEqualTo(newMap(1,\"1\"))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(newMap(1,2,2,3),builder.getInt32ToInt32FieldMap())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(newMap(1,TestMap.EnumValue.BAR,2,TestMap.EnumValue.FOO),builder.getInt32ToEnumFieldMap())@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(builder.getInt32ToStringFieldMap()).isEqualTo(newMap(1,\"1\"))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "TestMap.Builder builder = TestMap.newBuilder().putInt32ToInt32Field(1,2)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "builder.putInt32ToEnumField(2,TestMap.EnumValue.FOO)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(builder.getInt32ToInt32FieldMap()).isEqualTo(newMap(1,2,2,3))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "assertThat(builder.getInt32ToEnumFieldMap()).isEqualTo(newMap(1,TestMap.EnumValue.BAR))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertEquals(newMap(1,2),builder.getInt32ToInt32FieldMap())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(newMap(1,\"1\",2,\"2\"),builder.getInt32ToStringFieldMap())@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(builder.getInt32ToInt32FieldMap()).isEqualTo(newMap(1,2))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "testMutableMapLifecycle['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "testMutableMapLifecycle['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertThat(builder.getInt32ToMessageFieldMap()).isEqualTo(newMap(1,TestMap.MessageValue.getDefaultInstance(),2,TestMap.MessageValue.getDefaultInstance()))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertThat(builder.build().getInt32ToEnumFieldMap()).isEqualTo(newMap(1,TestMap.EnumValue.BAR))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertEquals(newMap(1,TestMap.EnumValue.BAR),builder.build().getInt32ToEnumFieldMap())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testMutableMapLifecycle['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "builder.putInt32ToStringField(2,\"2\")@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "builder.putInt32ToEnumField(1,TestMap.EnumValue.BAR)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(builder.getInt32ToEnumFieldMap()).isEqualTo(newMap(1,TestMap.EnumValue.BAR,2,TestMap.EnumValue.FOO))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "builder.putInt32ToMessageField(1,TestMap.MessageValue.getDefaultInstance())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "builder.putInt32ToInt32Field(2,3)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(builder.getInt32ToMessageFieldMap()).isEqualTo(newMap(1,TestMap.MessageValue.getDefaultInstance()))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(newMap(1,TestMap.MessageValue.getDefaultInstance()),builder.getInt32ToMessageFieldMap())@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(newMap(1,\"1\"),builder.getInt32ToStringFieldMap())@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(newMap(1,\"1\"),builder.build().getInt32ToStringFieldMap())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertThat(builder.build().getInt32ToMessageFieldMap()).isEqualTo(newMap(1,TestMap.MessageValue.getDefaultInstance()))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertEquals(newMap(1,TestMap.MessageValue.getDefaultInstance(),2,TestMap.MessageValue.getDefaultInstance()),builder.getInt32ToMessageFieldMap())@@@22@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(newMap(1,TestMap.MessageValue.getDefaultInstance()),builder.build().getInt32ToMessageFieldMap())@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(newMap(1,TestMap.EnumValue.BAR),builder.getInt32ToEnumFieldMap())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(builder.getInt32ToStringFieldMap()).isEqualTo(newMap(1,\"1\",2,\"2\"))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6->17 [style = bold, label=""];
6->21 [style = dashed, label="0"];
11->28 [style = bold, label=""];
17->26 [style = bold, label=""];
27->1 [style = bold, label=""];
32->23 [style = bold, label=""];
18->30 [style = dashed, label="0"];
34->1 [style = bold, label=""];
19->29 [style = bold, label=""];
0->23 [style = dashed, label="0"];
3->24 [style = dashed, label="0"];
8->3 [style = bold, label=""];
22->21 [style = bold, label=""];
23->4 [style = bold, label=""];
20->32 [style = bold, label=""];
15->32 [style = dashed, label="0"];
12->30 [style = bold, label=""];
33->12 [style = bold, label=""];
14->33 [style = dashed, label="0"];
1->7 [style = bold, label=""];
13->11 [style = bold, label=""];
13->26 [style = dashed, label="0"];
11->2 [style = bold, label=""];
26->11 [style = bold, label=""];
19->16 [style = bold, label=""];
1->22 [style = bold, label=""];
3->9 [style = bold, label=""];
4->31 [style = bold, label=""];
29->20 [style = bold, label=""];
28->33 [style = bold, label=""];
0->4 [style = bold, label=""];
24->25 [style = bold, label=""];
15->0 [style = bold, label=""];
14->12 [style = bold, label=""];
2->14 [style = bold, label=""];
7->6 [style = bold, label=""];
2->28 [style = dashed, label="0"];
12->18 [style = bold, label=""];
25->19 [style = bold, label=""];
9->25 [style = dashed, label="0"];
5->31 [style = dashed, label="0"];
16->29 [style = dashed, label="0"];
9->19 [style = bold, label=""];
17->13 [style = bold, label=""];
18->8 [style = bold, label=""];
30->8 [style = bold, label=""];
10->1 [style = bold, label=""];
16->20 [style = bold, label=""];
20->15 [style = bold, label=""];
4->5 [style = bold, label=""];
21->17 [style = bold, label=""];
7->22 [style = dashed, label="0"];
8->24 [style = bold, label=""];
}
