digraph {
6 [style = filled, label = "testTimeseriesWithFilterOnNonExistentDimensionSkipBuckets['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertExpectedResults(expectedResults,results)@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "resultMap.put(\"index\",NullHandling.defaultDoubleValue())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testTimeseriesWithFilterOnNonExistentDimensionSkipBuckets['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "resultMap.put(\"rows\",0L)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Iterable<Result<TimeseriesResultValue>> results = runner.run(QueryPlus.wrap(query)).toList()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.dayGran).filters(\"bobby\",\"billy\").intervals(QueryRunnerTestHelper.firstToThird).aggregators(aggregatorFactoryList).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).context(ImmutableMap.of(\"skipEmptyBuckets\",\"true\")).descending(descending).context(makeContext(ImmutableMap.of(\"skipEmptyBuckets\",\"true\"))).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<Result<TimeseriesResultValue>> expectedResults = Collections.emptyList()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertExpectedResults(expectedResults,results)@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "resultMap.put(\"addRowsIndexConstant\",NullHandling.replaceWithDefault()? 1.0: null)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "List<Result<TimeseriesResultValue>> expectedResults = Arrays.asList(new Result<>(DateTimes.of(\"2011-04-01\"),new TimeseriesResultValue(resultMap)),new Result<>(DateTimes.of(\"2011-04-02\"),new TimeseriesResultValue(resultMap)))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testTimeseriesWithFilterOnNonExistentDimension['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Map<String,Object> resultMap = new HashMap<>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "resultMap.put(\"uniques\",0.0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.dayGran).filters(\"bobby\",\"billy\").intervals(QueryRunnerTestHelper.firstToThird).aggregators(aggregatorFactoryList).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).descending(descending).context(makeContext()).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Iterable<Result<TimeseriesResultValue>> results = runner.run(QueryPlus.wrap(query),new HashMap<String,Object>()).toList()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Iterable<Result<TimeseriesResultValue>> results = runner.run(QueryPlus.wrap(query),CONTEXT).toList()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15->7 [style = bold, label=""];
16->10 [style = bold, label=""];
3->1 [style = solid, label="expectedResults"];
2->3 [style = bold, label=""];
0->2 [style = bold, label=""];
8->14 [style = bold, label=""];
11->12 [style = bold, label=""];
4->1 [style = solid, label="results"];
2->7 [style = dashed, label="0"];
12->9 [style = bold, label=""];
3->4 [style = bold, label=""];
6->2 [style = bold, label=""];
12->9 [style = solid, label="results"];
5->1 [style = bold, label=""];
3->5 [style = bold, label=""];
10->13 [style = bold, label=""];
7->16 [style = bold, label=""];
5->1 [style = solid, label="results"];
4->5 [style = dashed, label="0"];
11->9 [style = solid, label="expectedResults"];
4->1 [style = bold, label=""];
13->8 [style = bold, label=""];
14->11 [style = bold, label=""];
16->11 [style = solid, label="resultMap"];
}
