digraph {
0 [style = filled, label = "resultMap.put(\"rows\",0L)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Iterable<Result<TimeseriesResultValue>> results = runner.run(QueryPlus.wrap(query),new HashMap<String,Object>()).toList()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testTimeseriesWithFilterOnNonExistentDimensionSkipBuckets['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertExpectedResults(expectedResults,results)@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertExpectedResults(expectedResults,results)@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.dayGran).filters(\"bobby\",\"billy\").intervals(QueryRunnerTestHelper.firstToThird).aggregators(aggregatorFactoryList).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).context(ImmutableMap.of(\"skipEmptyBuckets\",\"true\")).descending(descending).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Iterable<Result<TimeseriesResultValue>> results = runner.run(QueryPlus.wrap(query),CONTEXT).toList()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "resultMap.put(\"addRowsIndexConstant\",NullHandling.replaceWithDefault()? 1.0: null)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "resultMap.put(\"uniques\",0.0)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testTimeseriesWithNonExistentFilter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.dayGran).filters(QueryRunnerTestHelper.marketDimension,\"billy\").intervals(QueryRunnerTestHelper.firstToThird).aggregators(aggregatorFactoryList).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).descending(descending).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testTimeseriesWithNonExistentFilter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Map<String,Object> resultMap = Maps.newHashMap()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "List<Result<TimeseriesResultValue>> expectedResults = Collections.emptyList()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "resultMap.put(\"index\",NullHandling.defaultDoubleValue())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Map<String,Object> resultMap = new HashMap<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "List<Result<TimeseriesResultValue>> expectedResults = Arrays.asList(new Result<>(DateTimes.of(\"2011-04-01\"),new TimeseriesResultValue(resultMap)),new Result<>(DateTimes.of(\"2011-04-02\"),new TimeseriesResultValue(resultMap)))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
14->16 [style = bold, label=""];
16->15 [style = bold, label=""];
7->1 [style = bold, label=""];
15->13 [style = solid, label="expectedResults"];
5->9 [style = bold, label=""];
10->9 [style = solid, label="resultMap"];
11->6 [style = bold, label=""];
8->6 [style = bold, label=""];
0->12 [style = dashed, label="0"];
4->9 [style = solid, label="resultMap"];
4->0 [style = bold, label=""];
0->7 [style = bold, label=""];
9->2 [style = solid, label="expectedResults"];
12->13 [style = bold, label=""];
6->4 [style = bold, label=""];
6->16 [style = dashed, label="0"];
3->2 [style = bold, label=""];
6->10 [style = bold, label=""];
10->0 [style = bold, label=""];
9->3 [style = bold, label=""];
3->2 [style = solid, label="results"];
15->12 [style = bold, label=""];
4->10 [style = dashed, label="0"];
12->13 [style = solid, label="results"];
}
