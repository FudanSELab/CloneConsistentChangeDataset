digraph {
15 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "testKillUnresponsiveTasksWhilePausing['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "EasyMock.expect(taskClient.setEndOffsetsAsync(EasyMock.contains(\"sequenceName-0\"),EasyMock.eq(ImmutableMap.of(shardId1,\"3\")),EasyMock.eq(true))).andReturn(Futures.immediateFailedFuture(new RuntimeException())).times(2)@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "taskRunner.registerListener(EasyMock.anyObject(),EasyMock.anyObject())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "EasyMock.expectLastCall().times(2)@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "expect(supervisorRecordSupplier.getLatestSequenceNumber(shard0Partition)).andReturn(\"1\").anyTimes()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "expectLastCall().anyTimes()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Collection workItems = new ArrayList<>()@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(\"0\",taskConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap().get(shardId1))@@@59@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "supervisor.start()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "taskQueue.shutdown(EasyMock.contains(\"sequenceName-0\"),EasyMock.eq(\"Task (%s( failed to respond to (set end offsets( in a timely manner, killing task\"),EasyMock.contains(\"sequenceName-0\"))@@@52@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(null)).anyTimes()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final TaskLocation location = new TaskLocation(\"testHost\",1234,-1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(captured))).andReturn(true).times(4)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "workItems.add(new TestTaskRunnerWorkItem(task,null,location))@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertNull(taskConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap().get(shardId0))@@@60@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "expectLastCall().anyTimes()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "replayAll()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(shard1Partition,shard0Partition)).anyTimes()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TreeMap<Integer,Map<String,String>> checkpoints1 = new TreeMap<>()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(Status.READING)).anyTimes()@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "EasyMock.replay(taskStorage,taskRunner,taskClient,taskQueue)@@@54@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "EasyMock.expect(taskClient.pauseAsync(EasyMock.contains(\"sequenceName-0\"))).andReturn(Futures.immediateFailedFuture(new RuntimeException())).times(2)@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-1\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints2)).times(2)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "supervisorRecordSupplier.seekToLatest(anyObject())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "checkpoints1.put(0,ImmutableMap.of(shardId1,\"0\"))@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(task.getId())).andReturn(Optional.of(TaskStatus.running(task.getId()))).anyTimes()@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "supervisor = getTestableSupervisor(2,2,true,\"PT1M\",null,null)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "KinesisIndexTaskIOConfig taskConfig = ((KinesisIndexTask)task).getIOConfig()@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "verifyAll()@@@56@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "taskQueue.shutdown(EasyMock.contains(\"sequenceName-0\"),EasyMock.eq(\"An exception occured while waiting for task (%s( to pause: (%s(\"),EasyMock.contains(\"sequenceName-0\"),EasyMock.anyString())@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "TreeMap<Integer,Map<String,String>> checkpoints2 = new TreeMap<>()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testKillUnresponsiveTasksWhileSettingEndOffsets['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "EasyMock.expect(taskStorage.getTask(task.getId())).andReturn(Optional.of(task)).anyTimes()@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "verifyAll()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "expect(supervisorRecordSupplier.getLatestSequenceNumber(shard1Partition)).andReturn(\"12\").anyTimes()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "EasyMock.reset(taskStorage,taskRunner,taskClient,taskQueue)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "List<Task> tasks = captured.getValues()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "checkpoints2.put(0,ImmutableMap.of(shardId0,\"0\"))@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "captured = Capture.newInstance(CaptureType.ALL)@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "supervisor.runInternal()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "supervisorRecordSupplier.seek(anyObject(),anyString())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "taskQueue.shutdown(EasyMock.contains(\"sequenceName-0\"),EasyMock.eq(\"All tasks in group (%s( failed to transition to publishing state\"),EasyMock.eq(0))@@@52@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
55 [style = filled, label = "testKillUnresponsiveTasksWhileSettingEndOffsets['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-0\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints1)).times(2)@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "expect(supervisorRecordSupplier.getPartitionIds(stream)).andReturn(ImmutableSet.of(shardId1,shardId0)).anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "EasyMock.expect(taskClient.pauseAsync(EasyMock.contains(\"sequenceName-0\"))).andReturn(Futures.immediateFuture(ImmutableMap.of(shardId1,\"1\"))).andReturn(Futures.immediateFuture(ImmutableMap.of(shardId1,\"3\")))@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.contains(\"sequenceName-1\"))).andReturn(Futures.immediateFuture(DateTimes.nowUtc())).times(2)@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.contains(\"sequenceName-0\"))).andReturn(Futures.immediateFuture(DateTimes.nowUtc().minusMinutes(2))).andReturn(Futures.immediateFuture(DateTimes.nowUtc()))@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "supervisorRecordSupplier.assign(anyObject())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(captured))).andReturn(true).times(2)@@@53@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(tasks).anyTimes()@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "expectLastCall().anyTimes()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "expect(supervisorRecordSupplier.getEarliestSequenceNumber(anyObject())).andReturn(\"0\").anyTimes()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "verifyAll()@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "supervisor.runInternal()@@@55@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "EasyMock.expect(taskRunner.getRunningTasks()).andReturn(workItems).anyTimes()@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Capture<Task> captured = Capture.newInstance(CaptureType.ALL)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23->58 [style = bold, label=""];
17->46 [style = bold, label=""];
43->16 [style = bold, label=""];
27->1 [style = bold, label=""];
16->18 [style = bold, label=""];
50->6 [style = bold, label=""];
11->38 [style = bold, label=""];
28->18 [style = bold, label=""];
41->7 [style = bold, label=""];
0->13 [style = bold, label=""];
59->60 [style = bold, label=""];
56->34 [style = bold, label=""];
37->57 [style = bold, label=""];
7->12 [style = bold, label=""];
40->52 [style = bold, label=""];
30->20 [style = bold, label=""];
6->23 [style = bold, label=""];
25->30 [style = bold, label=""];
1->15 [style = bold, label=""];
24->59 [style = dashed, label="0"];
44->19 [style = bold, label=""];
21->8 [style = bold, label=""];
48->57 [style = dashed, label="0"];
57->59 [style = bold, label=""];
47->27 [style = bold, label=""];
51->35 [style = bold, label=""];
32->2 [style = bold, label=""];
49->43 [style = bold, label=""];
18->28 [style = bold, label=""];
9->37 [style = bold, label=""];
26->22 [style = bold, label=""];
24->54 [style = bold, label=""];
5->21 [style = bold, label=""];
46->51 [style = bold, label=""];
28->0 [style = bold, label=""];
53->36 [style = bold, label=""];
12->10 [style = bold, label=""];
8->42 [style = bold, label=""];
54->36 [style = bold, label=""];
3->19 [style = bold, label=""];
10->25 [style = bold, label=""];
39->31 [style = bold, label=""];
53->54 [style = dashed, label="0"];
37->48 [style = bold, label=""];
34->39 [style = bold, label=""];
60->36 [style = bold, label=""];
15->4 [style = bold, label=""];
29->14 [style = bold, label=""];
38->47 [style = bold, label=""];
22->17 [style = bold, label=""];
42->32 [style = bold, label=""];
20->49 [style = bold, label=""];
55->34 [style = bold, label=""];
58->19 [style = bold, label=""];
34->41 [style = solid, label="location"];
36->50 [style = bold, label=""];
13->9 [style = bold, label=""];
3->58 [style = bold, label=""];
2->29 [style = bold, label=""];
24->53 [style = bold, label=""];
33->34 [style = bold, label=""];
31->45 [style = bold, label=""];
4->5 [style = bold, label=""];
14->41 [style = bold, label=""];
48->24 [style = bold, label=""];
19->3 [style = bold, label=""];
45->40 [style = bold, label=""];
23->44 [style = bold, label=""];
35->11 [style = bold, label=""];
52->26 [style = bold, label=""];
}
