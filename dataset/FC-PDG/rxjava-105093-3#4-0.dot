digraph {
9 [style = filled, label = "fusedOnErrorCrash['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "fusedOnErrorCrashConditional['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Observable.range(1,5).doOnNext(new Consumer<Integer>(){@Override public void accept(Integer v){throw new TestException()}}).doOnComplete(new Action(){@Override public void run(){call(0(++}}).filter(Functions.alwaysTrue()).subscribe(to)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ts.assertFuseable().assertFusionMode(QueueFuseable.SYNC).assertFailure()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Flowable.range(1,5).doOnNext(new Consumer<Integer>(){@Override public void accept(Integer v){throw new TestException()}}).doOnComplete(new Action(){@Override public void run(){call(0(++}}).subscribe(ts)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "TestObserverEx<Integer> to = new TestObserverEx<>(QueueFuseable.ANY)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>().setInitialFusionMode(QueueFuseable.ANY)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final int(( call = {0}@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(0,call(0()@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "fusedOnErrorCrashConditional['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "TestObserverEx<Integer> to = new TestObserverEx<Integer>(QueueFuseable.ANY)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "to.assertFuseable().assertFusionMode(QueueFuseable.SYNC).assertFailure()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->3 [style = bold, label=""];
8->0 [style = bold, label=""];
6->1 [style = bold, label=""];
5->1 [style = bold, label=""];
11->8 [style = bold, label=""];
10->11 [style = solid, label="ts"];
5->3 [style = solid, label="to"];
4->8 [style = dashed, label="0"];
1->0 [style = solid, label="call"];
1->11 [style = bold, label=""];
9->10 [style = bold, label=""];
5->6 [style = dashed, label="0"];
10->1 [style = bold, label=""];
5->10 [style = dashed, label="0"];
6->3 [style = solid, label="to"];
3->4 [style = bold, label=""];
3->11 [style = dashed, label="0"];
7->6 [style = bold, label=""];
4->0 [style = bold, label=""];
2->5 [style = bold, label=""];
}
