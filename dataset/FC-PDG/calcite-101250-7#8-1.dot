digraph {
8 [style = filled, label = "RelNode root = builder.scan(\"DEPT\").convert(rowType,true).build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final String expected = \"\" + \"LogicalProject(DEPTNO=(CAST($0):BIGINT NOT NULL(, DNAME=(CAST($1):VARCHAR(10) NOT NULL(, LOC=(CAST($2):VARCHAR(10) NOT NULL()\" + \" LogicalTableScan(table=((scott, DEPT(()\"@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testConvert['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final RelBuilder builder = RelBuilder.create(config().build())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(root,hasTree(expected))@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testConvert['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "RelNode root = builder.scan(\"DEPT\").convert(rowType,false).build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "RelDataType rowType = builder.getTypeFactory().builder().add(\"a\",SqlTypeName.BIGINT).add(\"b\",SqlTypeName.VARCHAR,10).add(\"c\",SqlTypeName.VARCHAR,10).build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final String expected = \"\" + \"LogicalProject(a=(CAST($0):BIGINT NOT NULL(, b=(CAST($1):VARCHAR(10) NOT NULL(, c=(CAST($2):VARCHAR(10) NOT NULL()\" + \" LogicalTableScan(table=((scott, DEPT(()\"@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testConvertRename['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2->0 [style = solid, label="expected"];
3->8 [style = dashed, label="0"];
6->1 [style = bold, label=""];
5->1 [style = bold, label=""];
4->3 [style = bold, label=""];
1->4 [style = bold, label=""];
4->8 [style = bold, label=""];
2->0 [style = bold, label=""];
7->0 [style = bold, label=""];
3->2 [style = bold, label=""];
9->1 [style = bold, label=""];
2->7 [style = dashed, label="0"];
8->0 [style = solid, label="root"];
7->0 [style = solid, label="expected"];
8->7 [style = bold, label=""];
3->0 [style = solid, label="root"];
}
