digraph {
9 [style = filled, label = "InputFile in = table.io().newInputFile(manifest.path())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testFilesUnpartitionedTable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
40 [style = filled, label = "df1.select(\"id\",\"data\").write().format(\"iceberg\").mode(\"append\").save(loadLocation(tableIdentifier))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Table entriesTable = loadTable(tableIdentifier,\"entries\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(\"Actual results should have 3 rows\",3,actual.size())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "df2.select(\"id\",\"data\").write().format(\"iceberg\").mode(\"append\").save(loadLocation(tableIdentifier))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "i < expected.size()@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "table.refresh()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "TestHelpers.assertEqualsSafe(entriesTable.schema().asStruct(),expected.get(i),actual.get(i))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Dataset<Row> df2 = spark.createDataFrame(Lists.newArrayList(new SimpleRecord(1,\"b\")),)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<Row> actual = spark.read().format(\"iceberg\").load(loadLocation(tableIdentifier,\"files\")).collectAsList()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Dataset<Row> df1 = spark.createDataFrame(Lists.newArrayList(new SimpleRecord(1,\"a\")),)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "GenericData.Record file = (GenericData.Record)record.get(\"data_file\")@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "List<GenericData.Record> expected = Lists.newArrayList()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "(Integer)record.get(\"status\") < 2@@@20@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testFilesUnpartitionedTable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Dataset<Row> df2 = spark.createDataFrame(Lists.newArrayList(new SimpleRecord(2,\"b\")),)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "int i = 0@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "table.refresh()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "testAllEntriesTable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "expected.sort(Comparator.comparing(null))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "table.newDelete().deleteFromRowFilter(Expressions.equal(\"id\",1)).commit()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "i += 1@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertEquals(\"Entries table should have 3 rows\",3,expected.size())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "file.put(0,FileContent.DATA.id())@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "Table entriesTable = loadTable(tableIdentifier,\"all_entries\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "List<Row> actual = spark.read().format(\"iceberg\").load(loadLocation(tableIdentifier,\"all_entries\")).orderBy(\"snapshot_id\").collectAsList()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "expected.add((GenericData.Record)record.get(\"data_file\"))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(\"Files table should have one row\",1,expected.size())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "TableIdentifier tableIdentifier = TableIdentifier.of(\"db\",\"unpartitioned_files_test\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expected.add(record)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(\"Actual results should have one row\",1,actual.size())@@@29@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Table table = createTable(tableIdentifier,SCHEMA,PartitionSpec.unpartitioned())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "expected.add(file)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "DataFile toDelete = Iterables.getOnlyElement(table.currentSnapshot().addedFiles())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "table.newDelete().deleteFile(toDelete).commit()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(\"Actual results should have one row\",1,actual.size())@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "TestHelpers.assertEqualsSafe(filesTable.schema().asStruct(),expected.get(0),actual.get(0))@@@30@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Table filesTable = loadTable(tableIdentifier,\"files\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "TableIdentifier tableIdentifier = TableIdentifier.of(\"db\",\"entries_test\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "InputFile in = table.io().newInputFile(manifest.path())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(\"Files table should have one row\",1,expected.size())@@@26@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->17 [style = dotted, label="true"];
10->22 [style = bold, label=""];
14->3 [style = bold, label=""];
16->15 [style = bold, label=""];
31->40 [style = solid, label="tableIdentifier"];
4->10 [style = bold, label=""];
19->7 [style = solid, label="tableIdentifier"];
17->5 [style = bold, label=""];
5->10 [style = bold, label=""];
21->10 [style = bold, label=""];
22->25 [style = bold, label=""];
7->32 [style = bold, label=""];
6->35 [style = bold, label=""];
30->1 [style = bold, label=""];
5->9 [style = bold, label=""];
17->24 [style = dashed, label="0"];
2->1 [style = bold, label=""];
19->31 [style = dashed, label="0"];
19->6 [style = solid, label="tableIdentifier"];
17->9 [style = bold, label=""];
18->26 [style = bold, label=""];
19->18 [style = solid, label="tableIdentifier"];
41->37 [style = bold, label=""];
28->29 [style = bold, label=""];
40->18 [style = bold, label=""];
15->6 [style = bold, label=""];
41->38 [style = solid, label="i"];
38->41 [style = bold, label=""];
8->13 [style = bold, label=""];
11->19 [style = bold, label=""];
1->30 [style = bold, label=""];
29->34 [style = bold, label=""];
5->17 [style = bold, label=""];
8->40 [style = bold, label=""];
36->37 [style = solid, label="i"];
16->18 [style = dashed, label="0"];
31->7 [style = bold, label=""];
32->33 [style = bold, label=""];
27->6 [style = bold, label=""];
1->9 [style = bold, label=""];
13->8 [style = dashed, label="0"];
7->14 [style = bold, label=""];
24->20 [style = bold, label=""];
20->21 [style = bold, label=""];
21->5 [style = bold, label=""];
19->3 [style = solid, label="tableIdentifier"];
26->27 [style = bold, label=""];
31->7 [style = solid, label="tableIdentifier"];
12->2 [style = bold, label=""];
21->9 [style = bold, label=""];
5->24 [style = dotted, label="true"];
17->0 [style = bold, label=""];
30->28 [style = bold, label=""];
35->1 [style = bold, label=""];
24->21 [style = solid, label="file"];
37->38 [style = dotted, label="true"];
5->0 [style = bold, label=""];
37->41 [style = dotted, label="true"];
14->32 [style = dashed, label="0"];
0->4 [style = bold, label=""];
39->31 [style = bold, label=""];
37->38 [style = bold, label=""];
31->26 [style = solid, label="tableIdentifier"];
3->8 [style = bold, label=""];
5->24 [style = bold, label=""];
23->19 [style = bold, label=""];
34->36 [style = bold, label=""];
2->6 [style = dashed, label="0"];
9->5 [style = bold, label=""];
5->20 [style = dotted, label="true"];
5->21 [style = dotted, label="true"];
31->32 [style = solid, label="tableIdentifier"];
36->38 [style = solid, label="i"];
19->14 [style = solid, label="tableIdentifier"];
36->37 [style = bold, label=""];
33->8 [style = bold, label=""];
19->7 [style = bold, label=""];
6->12 [style = bold, label=""];
13->18 [style = bold, label=""];
41->37 [style = solid, label="i"];
18->16 [style = bold, label=""];
}
