digraph {
19 [style = filled, label = "Set<InetAddressAndPort> expected = addTokens(1 + Keyspace.open(KEYSPACE5).getReplicationStrategy().getReplicationFactor())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testGetNeighborsPlusOneInLocalDC['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "TokenMetadata tmd = StorageService.instance.getTokenMetadata()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testGetNeighborsTimesTwoInLocalDC['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Set<InetAddressAndPort> neighbors = new HashSet<>()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "addTokens(2 * Keyspace.open(KEYSPACE5).getReplicationStrategy().getReplicationFactor())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Set<InetAddressAndPort> expected = new HashSet<>()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "expected.remove(FBUtilities.getBroadcastAddressAndPort())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "neighbors.addAll(ActiveRepairService.getNeighbors(KEYSPACE5,ranges,range,Arrays.asList(DatabaseDescriptor.getLocalDataCenter()),null).endpoints())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "HashSet<InetAddressAndPort> localEndpoints = Sets.newHashSet(topology.getDatacenterEndpoints().get(DatabaseDescriptor.getLocalDataCenter()))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "expected = Sets.intersection(expected,localEndpoints)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Collection<Range<Token>> ranges = StorageService.instance.getLocalRanges(KEYSPACE5)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "neighbors.addAll(ActiveRepairService.getNeighbors(KEYSPACE5,ranges,range,Arrays.asList(DatabaseDescriptor.getLocalDataCenter()),null))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "TokenMetadata.Topology topology = tmd.cloneOnlyTokenMap().getTopology()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Set<InetAddressAndPort> neighbors = new HashSet<>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "expected = Sets.intersection(expected,localEndpoints)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(expected,neighbors)@@@14@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Iterable<Range<Token>> ranges = StorageService.instance.getLocalReplicas(KEYSPACE5).ranges()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(expected,neighbors)@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "neighbors.addAll(ActiveRepairService.getNeighbors(KEYSPACE5,ranges,range,Arrays.asList(DatabaseDescriptor.getLocalDataCenter()),null))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expected.addAll(ars.getRangeAddresses(tmd.cloneOnlyTokenMap()).get(replicaRange))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "expected.addAll(ars.getRangeAddresses(tmd.cloneOnlyTokenMap()).get(replica.range()).endpoints())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "AbstractReplicationStrategy ars = Keyspace.open(KEYSPACE5).getReplicationStrategy()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TokenMetadata.Topology topology = tmd.cloneOnlyTokenMap().getTopology()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "addTokens(2 * Keyspace.open(KEYSPACE5).getReplicationStrategy().getReplicationFactor().allReplicas)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "testGetNeighborsTimesTwoInLocalDC['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25->1 [style = solid, label="expected"];
18->3 [style = bold, label=""];
15->10 [style = bold, label=""];
4->16 [style = dashed, label="0"];
12->5 [style = bold, label=""];
24->25 [style = solid, label="localEndpoints"];
11->15 [style = dashed, label="0"];
25->23 [style = bold, label=""];
5->7 [style = solid, label="expected"];
8->3 [style = bold, label=""];
16->7 [style = bold, label=""];
23->3 [style = bold, label=""];
3->12 [style = bold, label=""];
2->7 [style = solid, label="neighbors"];
5->17 [style = bold, label=""];
2->4 [style = bold, label=""];
13->11 [style = bold, label=""];
12->1 [style = bold, label=""];
4->7 [style = bold, label=""];
12->5 [style = solid, label="localEndpoints"];
1->4 [style = solid, label="ranges"];
3->9 [style = bold, label=""];
3->1 [style = solid, label="neighbors"];
5->1 [style = bold, label=""];
13->19 [style = bold, label=""];
1->17 [style = dashed, label="0"];
17->2 [style = bold, label=""];
22->20 [style = bold, label=""];
11->19 [style = dashed, label="0"];
11->10 [style = bold, label=""];
24->25 [style = bold, label=""];
6->13 [style = bold, label=""];
10->0 [style = bold, label=""];
19->25 [style = solid, label="expected"];
0->8 [style = bold, label=""];
0->18 [style = bold, label=""];
8->18 [style = dashed, label="0"];
1->2 [style = bold, label=""];
0->5 [style = solid, label="expected"];
9->12 [style = bold, label=""];
13->15 [style = bold, label=""];
14->13 [style = bold, label=""];
20->24 [style = bold, label=""];
19->22 [style = bold, label=""];
23->12 [style = solid, label="ranges"];
21->13 [style = bold, label=""];
2->16 [style = bold, label=""];
}
