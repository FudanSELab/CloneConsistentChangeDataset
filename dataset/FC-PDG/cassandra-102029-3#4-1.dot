digraph {
14 [style = filled, label = "regions.extend(4096)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testSmallSegmentSize['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "final int SIZE = MmappedRegions.MAX_SEGMENT_SIZE@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "i < buffer.capacity()@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "ByteBuffer buffer = allocateBuffer(4096)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "int OLD_MAX_SEGMENT_SIZE = MmappedRegions.MAX_SEGMENT_SIZE@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "MmappedRegions.Region region = regions.floor(i)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(SIZE * (i / SIZE),region.bottom())@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "{MmappedRegions.MAX_SEGMENT_SIZE = OLD_MAX_SEGMENT_SIZE}@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(SIZE + (SIZE * (i / SIZE)),region.end())@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertNotNull(region)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testExtendOutOfOrder['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(0,region.bottom())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int i = 0@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(SIZE + (SIZE * (i / SIZE)),region.top())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertEquals(SIZE * (i / SIZE),region.offset())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "MmappedRegions.MAX_SEGMENT_SIZE = 1024@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "regions.extend(4096)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ByteBuffer buffer = allocateBuffer(4096)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "regions.extend(1024)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testSmallSegmentSize['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "i++@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(4096,region.top())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "regions.extend(2048)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->13 [style = bold, label=""];
16->3 [style = bold, label=""];
8->11 [style = solid, label="i"];
3->2 [style = solid, label="i"];
4->16 [style = solid, label="SIZE"];
23->20 [style = bold, label=""];
7->11 [style = bold, label=""];
3->16 [style = solid, label="i"];
3->1 [style = bold, label=""];
13->3 [style = dotted, label="true"];
7->3 [style = solid, label="i"];
4->17 [style = solid, label="SIZE"];
0->6 [style = bold, label=""];
11->1 [style = bold, label=""];
9->2 [style = bold, label=""];
7->2 [style = solid, label="i"];
11->10 [style = dotted, label="true"];
15->12 [style = solid, label="OLD_MAX_SEGMENT_SIZE"];
11->1 [style = dotted, label="true"];
7->1 [style = solid, label="i"];
18->15 [style = bold, label=""];
3->11 [style = bold, label=""];
22->21 [style = bold, label=""];
21->8 [style = bold, label=""];
11->17 [style = dotted, label="true"];
5->15 [style = bold, label=""];
10->3 [style = bold, label=""];
9->17 [style = bold, label=""];
11->9 [style = dotted, label="true"];
11->12 [style = bold, label=""];
3->1 [style = solid, label="i"];
13->7 [style = dotted, label="true"];
7->11 [style = solid, label="i"];
7->10 [style = solid, label="i"];
9->7 [style = bold, label=""];
2->10 [style = bold, label=""];
0->4 [style = solid, label="MAX_SEGMENT_SIZE"];
2->17 [style = dashed, label="0"];
13->11 [style = bold, label=""];
7->16 [style = solid, label="i"];
11->3 [style = solid, label="region"];
4->7 [style = bold, label=""];
1->9 [style = bold, label=""];
8->13 [style = solid, label="i"];
20->22 [style = bold, label=""];
7->13 [style = solid, label="i"];
10->9 [style = dashed, label="0"];
3->10 [style = solid, label="i"];
13->1 [style = dotted, label="true"];
7->17 [style = solid, label="i"];
4->10 [style = solid, label="SIZE"];
3->17 [style = solid, label="i"];
11->2 [style = dotted, label="true"];
11->3 [style = bold, label=""];
19->23 [style = bold, label=""];
15->0 [style = bold, label=""];
6->8 [style = bold, label=""];
11->16 [style = dotted, label="true"];
4->2 [style = solid, label="SIZE"];
13->11 [style = dotted, label="true"];
3->11 [style = solid, label="i"];
10->16 [style = dashed, label="0"];
2->1 [style = dashed, label="0"];
1->9 [style = solid, label="region"];
11->3 [style = dotted, label="true"];
8->7 [style = solid, label="i"];
13->14 [style = bold, label=""];
17->16 [style = bold, label=""];
8->13 [style = bold, label=""];
14->4 [style = bold, label=""];
13->9 [style = dotted, label="true"];
}
