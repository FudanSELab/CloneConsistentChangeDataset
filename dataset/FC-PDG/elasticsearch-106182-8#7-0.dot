digraph {
1 [style = filled, label = "RestRequest request = testRestRequest(\"/\",content,XContentType.JSON)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "restController.dispatchRequest(request,channel,new ThreadContext(Settings.EMPTY))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(0,inFlightRequestsBreaker.getUsed())@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "AssertingChannel channel = new AssertingChannel(request,true,RestStatus.TOO_MANY_REQUESTS)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "RestRequest request = testRestRequest(\"/error\",content,XContentType.JSON)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "int contentLength = BREAKER_LIMIT.bytesAsInt()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(0,inFlightRequestsBreaker.getTrippedCount())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(1,inFlightRequestsBreaker.getTrippedCount())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "AssertingChannel channel = new AssertingChannel(request,true,RestStatus.SERVICE_UNAVAILABLE)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "int contentLength = BREAKER_LIMIT.bytesAsInt() + 1@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testDispatchRequestLimitsBytes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ExceptionThrowingChannel channel = new ExceptionThrowingChannel(request,true)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testDispatchRequestAddsAndFreesBytesOnlyOnceOnError['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testDispatchRequestLimitsBytes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "String content = randomAlphaOfLength((int)Math.round(contentLength / inFlightRequestsBreaker.getOverhead()))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
14->10 [style = solid, label="request"];
1->8 [style = bold, label=""];
1->14 [style = dashed, label="0"];
9->4 [style = bold, label=""];
11->6 [style = bold, label=""];
8->3 [style = bold, label=""];
3->11 [style = bold, label=""];
7->11 [style = dashed, label="0"];
1->8 [style = solid, label="request"];
14->10 [style = bold, label=""];
10->3 [style = bold, label=""];
8->3 [style = solid, label="channel"];
1->0 [style = bold, label=""];
5->14 [style = bold, label=""];
2->4 [style = bold, label=""];
5->1 [style = solid, label="content"];
0->10 [style = dashed, label="0"];
12->13 [style = bold, label=""];
5->1 [style = bold, label=""];
4->5 [style = solid, label="contentLength"];
1->3 [style = solid, label="request"];
3->7 [style = bold, label=""];
0->3 [style = solid, label="channel"];
13->5 [style = solid, label="contentLength"];
1->0 [style = solid, label="request"];
7->6 [style = bold, label=""];
5->14 [style = solid, label="content"];
14->3 [style = solid, label="request"];
13->5 [style = bold, label=""];
0->8 [style = dashed, label="0"];
4->13 [style = dashed, label="0"];
4->5 [style = bold, label=""];
10->3 [style = solid, label="channel"];
}
