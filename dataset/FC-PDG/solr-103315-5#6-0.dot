digraph {
3 [style = filled, label = "clauses = clauses(q)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "q = parse(\"foo bar\",\"tie\",\"0.5\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final Collection<String> qaStrings = qa.stream().map(null).collect(Collectors.toList())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "testPureMax['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Collection<Query> qa = ((DisjunctionMaxQuery)clauses(0(.getQuery()).getDisjuncts()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(2,qa.size())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testTie['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(0.5,((DisjunctionMaxQuery)clauses(0(.getQuery()).getTieBreakerMultiplier(),1e-15)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "List<Query> qa = ((DisjunctionMaxQuery)clauses(0(.getQuery()).getDisjuncts()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertEquals(0.0,((DisjunctionMaxQuery)clauses(0(.getQuery()).getTieBreakerMultiplier(),1e-15)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(1,clauses.length)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testPureMax['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertTrue(clauses(0(.getQuery() instanceof DisjunctionMaxQuery)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "org.hamcrest.MatcherAssert.assertThat(qaStrings,hasItem(\"text:foo\"))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "q = parse(\"foo bar\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"text:foo\",qa.get(0).toString())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4->3 [style = bold, label=""];
1->15 [style = dashed, label="0"];
6->11 [style = dashed, label="0"];
5->15 [style = bold, label=""];
4->3 [style = solid, label="q"];
7->8 [style = bold, label=""];
2->4 [style = bold, label=""];
3->0 [style = bold, label=""];
1->11 [style = bold, label=""];
7->9 [style = bold, label=""];
8->9 [style = dashed, label="0"];
5->1 [style = bold, label=""];
1->6 [style = bold, label=""];
13->3 [style = bold, label=""];
9->12 [style = solid, label="qaStrings"];
10->4 [style = bold, label=""];
13->3 [style = solid, label="q"];
9->12 [style = bold, label=""];
14->13 [style = bold, label=""];
6->7 [style = bold, label=""];
4->13 [style = dashed, label="0"];
11->7 [style = bold, label=""];
0->5 [style = bold, label=""];
}
