digraph {
3 [style = filled, label = "assertTrue(CLASSNAME + \" must give the same bytes from the InputStream\",stillEqual)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertEquals(classUnderTest + \" InputStream must now be exhausted\",-1,input.read())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(\"InputStream.available() returns correct value\",stringUnderTest.size(),input.available())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "boolean stillEqual = true@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "InputStream input = stringUnderTest.newInput()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testNewInput['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "int expectedInt = (referenceByte & 0xFF)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertWithMessage(\"InputStream.available() returns correct value\").that(input.available()).isEqualTo(0)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertWithMessage(\"%s InputStream must now be exhausted\",CLASSNAME).that(input.read()).isEqualTo(-1)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testNewInput['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertWithMessage(\"%s must give the same bytes from the InputStream\",CLASSNAME).that(stillEqual).isTrue()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(\"InputStream.available() returns correct value\",testString.size(),input.available())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "stillEqual = (expectedInt == input.read())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(CLASSNAME + \" InputStream must now be exhausted\",-1,input.read())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\"InputStream.available() returns correct value\",0,input.available())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "InputStream input = testString.newInput()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertWithMessage(\"InputStream.available() returns correct value\").that(testString.size()).isEqualTo(input.available())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "testNewInput['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(classUnderTest + \" must give the same bytes from the InputStream\",stillEqual)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
3->1 [style = bold, label=""];
0->6 [style = bold, label=""];
0->12 [style = bold, label=""];
0->2 [style = bold, label=""];
3->16 [style = dashed, label="0"];
12->11 [style = bold, label=""];
16->17 [style = bold, label=""];
8->14 [style = dashed, label="0"];
7->8 [style = bold, label=""];
15->5 [style = bold, label=""];
6->12 [style = dashed, label="0"];
2->0 [style = solid, label="expectedInt"];
1->13 [style = dashed, label="0"];
0->16 [style = solid, label="stillEqual"];
4->9 [style = dashed, label="0"];
5->2 [style = bold, label=""];
2->0 [style = bold, label=""];
1->17 [style = dashed, label="0"];
10->8 [style = bold, label=""];
6->16 [style = bold, label=""];
4->15 [style = dashed, label="0"];
11->13 [style = bold, label=""];
8->9 [style = bold, label=""];
9->5 [style = bold, label=""];
14->15 [style = bold, label=""];
0->3 [style = solid, label="stillEqual"];
8->4 [style = bold, label=""];
4->5 [style = bold, label=""];
18->14 [style = bold, label=""];
3->11 [style = dashed, label="0"];
}
