digraph {
12 [style = filled, label = "assertEquals(Utils.mkSet(tp0,t3p0),consumer.assignment())@@@57@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "testReturnRecordsDuringRebalance['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "assertEquals(Utils.mkSet(tp0,t2p0),consumer.assignment())@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
82 [style = filled, label = "assertEquals(Utils.mkSet(topic,topic2),consumer.subscription())@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "TestUtils.waitForCondition(null,\"Does not complete rebalance in time\")@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "assertEquals(Utils.mkSet(topic,topic3),consumer.subscription())@@@63@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
74 [style = filled, label = "testReturnRecordsDuringRebalance['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertEquals(1,records.count())@@@58@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
55 [style = filled, label = "fetches1.clear()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "assertEquals(countingRebalanceListener.assignedCount,1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
92 [style = filled, label = "consumer.poll(Duration.ZERO)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(Collections.emptySet(),consumer.assignment())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
76 [style = filled, label = "consumer.unsubscribe()@@@80@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
49 [style = filled, label = "fetches1.put(t3p0,new FetchInfo(0,100))@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "consumer.poll(Duration.ZERO)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "SubscriptionState subscription = new SubscriptionState(new LogContext(),OffsetResetStrategy.EARLIEST)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "TestUtils.waitForCondition(null,\"Does not complete rebalance in time\")@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "consumer.close()@@@71@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "client.respondFrom(syncGroupResponse(Arrays.asList(tp0,t3p0),Errors.NONE),coordinator)@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "assertEquals(countingRebalanceListener.revokedCount,1)@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "fetches1.put(tp0,new FetchInfo(4,1))@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "assertEquals(Collections.singleton(tp0),consumer.assignment())@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertEquals(10L,consumer.position(t2p0))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertEquals(1L,consumer.position(tp0))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "assertTrue(commitReceived.get())@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Time time = new MockTime(1L)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "client.respondFrom(fetchResponse(fetches1),node)@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "ConsumerPartitionAssignor assignor = new RoundRobinAssignor()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "ConsumerPartitionAssignor assignor = new CooperativeStickyAssignor()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "TestUtils.waitForCondition(null,\"Does not complete rebalance in time\")@@@58@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
68 [style = filled, label = "fetches1.clear()@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "consumer.subscribe(Arrays.asList(topic,topic3),getConsumerRebalanceListener(consumer))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "MockRebalanceListener countingRebalanceListener = new MockRebalanceListener()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "assertEquals(Utils.mkSet(tp0,t3p0),consumer.assignment())@@@64@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
57 [style = filled, label = "Node coordinator = prepareRebalance(client,node,assignor,Arrays.asList(tp0,t2p0),null)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(3L,consumer.position(tp0))@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "consumer.enforceRebalance()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Map<TopicPartition,Long> partitionOffsets1 = new HashMap<>()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "assertEquals(Utils.mkSet(topic,topic3),consumer.subscription())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "assertEquals(5L,consumer.position(tp0))@@@77@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "fetches1.put(tp0,new FetchInfo(0,1))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "fetches1.clear()@@@61@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "fetches1.put(tp0,new FetchInfo(1,1))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "consumer.poll(Duration.ofMillis(100L))@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "testEnforceRebalanceTriggersRebalanceOnNextPoll['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
91 [style = filled, label = "consumer.subscribe(Arrays.asList(topic,topic2),countingRebalanceListener)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertEquals(Utils.mkSet(topic,topic3),consumer.subscription())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "records = consumer.poll(Duration.ZERO)@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "count.set(0)@@@71@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(Utils.mkSet(topic,topic3),consumer.subscription())@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "consumer.poll(Duration.ZERO)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Node node = metadata.fetch().nodes().get(0)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "client.respondFrom(fetchResponse(fetches1),node)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "consumer.subscribe(Arrays.asList(topic,topic2),getConsumerRebalanceListener(consumer))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "records = consumer.poll(Duration.ZERO)@@@55@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "assertEquals(countingRebalanceListener.revokedCount,0)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
85 [style = filled, label = "prepareRebalance(client,node,assignor,Arrays.asList(tp0,t2p0),null)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(11,records.count())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "initMetadata(client,Utils.mkMap(Utils.mkEntry(topic,1),Utils.mkEntry(topic2,1),Utils.mkEntry(topic3,1)))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ConsumerRecords<String,String> records = consumer.poll(Duration.ZERO)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "client.prepareResponseFrom(syncGroupResponse(Arrays.asList(tp0,t3p0),Errors.NONE),coordinator)@@@46@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "assertEquals(1,records.count())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "client.respondFrom(fetchResponse(fetches1),node)@@@64@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "AtomicBoolean commitReceived = prepareOffsetCommitResponse(client,coordinator,partitionOffsets1)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "MockClient client = new MockClient(time,metadata)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "fetches1.put(tp0,new FetchInfo(2,1))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertEquals(Utils.mkSet(tp0,t2p0),consumer.assignment())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "ConsumerMetadata metadata = createMetadata(subscription)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertEquals(Utils.mkSet(topic,topic3),consumer.subscription())@@@56@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(2L,consumer.position(tp0))@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "fetches1.clear()@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "partitionOffsets1.put(t2p0,10L)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(Utils.mkSet(topic,topic2),consumer.subscription())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "assertEquals(0L,consumer.position(t3p0))@@@60@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "client.respondFrom(fetchResponse(fetches1),node)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(4L,consumer.position(tp0))@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(Collections.singleton(tp0),consumer.assignment())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "fetches1.put(t2p0,new FetchInfo(0,10))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(0L,consumer.position(t3p0))@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "fetches1.put(tp0,new FetchInfo(3,1))@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "client.respondFrom(fetchResponse(fetches1),node)@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "fetches1.clear()@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "Map<TopicPartition,FetchInfo> fetches1 = new HashMap<>()@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "records = consumer.poll(Duration.ZERO)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "client.respondFrom(fetchResponse(fetches1),node)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "AtomicInteger count = new AtomicInteger(0)@@@57@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
77 [style = filled, label = "client.requests().clear()@@@79@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
80 [style = filled, label = "assertEquals(100L,consumer.position(t3p0))@@@78@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "KafkaConsumer<String,String> consumer = newConsumer(time,client,subscription,metadata,assignor,true,groupInstanceId)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(1,records.count())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "consumer.close()@@@81@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "client.respondFrom(joinGroupFollowerResponse(assignor,2,\"memberId\",\"leaderId\",Errors.NONE),coordinator)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "fetches1.put(t2p0,new FetchInfo(10,20))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "assertEquals(4L,consumer.position(tp0))@@@59@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70->80 [style = bold, label=""];
2->18 [style = solid, label="subscription"];
13->47 [style = bold, label=""];
31->56 [style = bold, label=""];
48->29 [style = bold, label=""];
54->63 [style = bold, label=""];
89->83 [style = bold, label=""];
33->22 [style = solid, label="metadata"];
33->1 [style = solid, label="metadata"];
35->22 [style = solid, label="assignor"];
21->24 [style = bold, label=""];
90->22 [style = solid, label="assignor"];
12->9 [style = bold, label=""];
11->17 [style = solid, label="node"];
84->88 [style = bold, label=""];
20->5 [style = solid, label="fetches1"];
52->68 [style = bold, label=""];
44->51 [style = bold, label=""];
1->19 [style = solid, label="client"];
29->2 [style = bold, label=""];
11->85 [style = solid, label="node"];
38->49 [style = bold, label=""];
20->65 [style = solid, label="fetches1"];
57->27 [style = solid, label="coordinator"];
39->67 [style = bold, label=""];
78->34 [style = solid, label="fetches1"];
22->28 [style = solid, label="consumer"];
6->41 [style = bold, label=""];
76->81 [style = bold, label=""];
2->7 [style = solid, label="subscription"];
26->28 [style = bold, label=""];
2->23 [style = solid, label="subscription"];
78->36 [style = solid, label="fetches1"];
28->65 [style = bold, label=""];
57->85 [style = dashed, label="0"];
56->38 [style = bold, label=""];
1->85 [style = solid, label="client"];
20->4 [style = solid, label="fetches1"];
19->91 [style = bold, label=""];
53->92 [style = bold, label=""];
78->24 [style = bold, label=""];
40->52 [style = bold, label=""];
57->40 [style = solid, label="coordinator"];
20->34 [style = bold, label=""];
62->25 [style = bold, label=""];
31->5 [style = bold, label=""];
2->32 [style = solid, label="subscription"];
51->0 [style = bold, label=""];
1->35 [style = bold, label=""];
23->3 [style = bold, label=""];
57->71 [style = bold, label=""];
93->29 [style = bold, label=""];
34->8 [style = bold, label=""];
46->39 [style = bold, label=""];
58->70 [style = bold, label=""];
11->30 [style = solid, label="node"];
4->72 [style = bold, label=""];
39->40 [style = solid, label="partitionOffsets1"];
45->11 [style = bold, label=""];
24->20 [style = bold, label=""];
11->34 [style = solid, label="node"];
2->75 [style = solid, label="subscription"];
69->23 [style = bold, label=""];
73->78 [style = bold, label=""];
2->33 [style = bold, label=""];
2->33 [style = solid, label="subscription"];
92->84 [style = bold, label=""];
20->17 [style = solid, label="fetches1"];
85->53 [style = bold, label=""];
75->79 [style = bold, label=""];
11->57 [style = bold, label=""];
65->46 [style = bold, label=""];
57->53 [style = bold, label=""];
32->17 [style = bold, label=""];
57->25 [style = solid, label="coordinator"];
0->31 [style = bold, label=""];
63->10 [style = bold, label=""];
60->37 [style = bold, label=""];
58->43 [style = bold, label=""];
45->91 [style = dashed, label="0"];
67->40 [style = bold, label=""];
47->42 [style = bold, label=""];
22->19 [style = bold, label=""];
9->66 [style = bold, label=""];
90->22 [style = bold, label=""];
1->22 [style = solid, label="client"];
72->75 [style = bold, label=""];
11->57 [style = solid, label="node"];
1->57 [style = solid, label="client"];
40->68 [style = solid, label="partitionOffsets1"];
35->25 [style = solid, label="assignor"];
42->55 [style = bold, label=""];
11->4 [style = solid, label="node"];
1->40 [style = solid, label="client"];
1->68 [style = solid, label="client"];
19->45 [style = bold, label=""];
1->90 [style = bold, label=""];
35->23 [style = solid, label="assignor"];
49->30 [style = bold, label=""];
57->3 [style = solid, label="coordinator"];
86->19 [style = bold, label=""];
22->46 [style = solid, label="consumer"];
11->10 [style = solid, label="node"];
11->36 [style = solid, label="node"];
50->64 [style = bold, label=""];
7->15 [style = bold, label=""];
11->13 [style = solid, label="node"];
55->50 [style = bold, label=""];
41->12 [style = bold, label=""];
2->37 [style = solid, label="subscription"];
11->26 [style = solid, label="node"];
2->82 [style = solid, label="subscription"];
35->57 [style = solid, label="assignor"];
8->13 [style = bold, label=""];
88->87 [style = bold, label=""];
18->16 [style = bold, label=""];
2->41 [style = solid, label="subscription"];
74->29 [style = bold, label=""];
2->22 [style = solid, label="subscription"];
22->45 [style = solid, label="consumer"];
30->61 [style = bold, label=""];
5->56 [style = bold, label=""];
4->6 [style = bold, label=""];
29->22 [style = solid, label="time"];
53->18 [style = bold, label=""];
10->27 [style = bold, label=""];
35->22 [style = bold, label=""];
11->85 [style = bold, label=""];
78->26 [style = solid, label="fetches1"];
79->0 [style = bold, label=""];
36->32 [style = bold, label=""];
15->62 [style = bold, label=""];
33->1 [style = bold, label=""];
35->90 [style = dashed, label="0"];
61->58 [style = bold, label=""];
91->11 [style = bold, label=""];
11->65 [style = solid, label="node"];
2->65 [style = solid, label="subscription"];
16->84 [style = dashed, label="0"];
23->60 [style = bold, label=""];
17->7 [style = bold, label=""];
11->5 [style = solid, label="node"];
14->54 [style = bold, label=""];
64->26 [style = bold, label=""];
29->1 [style = solid, label="time"];
25->69 [style = bold, label=""];
37->14 [style = bold, label=""];
27->4 [style = bold, label=""];
77->76 [style = bold, label=""];
2->39 [style = solid, label="subscription"];
57->23 [style = solid, label="coordinator"];
71->82 [style = bold, label=""];
86->91 [style = solid, label="countingRebalanceListener"];
16->21 [style = bold, label=""];
68->59 [style = bold, label=""];
78->30 [style = solid, label="fetches1"];
22->86 [style = bold, label=""];
59->36 [style = bold, label=""];
80->77 [style = bold, label=""];
57->68 [style = solid, label="coordinator"];
20->13 [style = solid, label="fetches1"];
90->85 [style = solid, label="assignor"];
87->89 [style = bold, label=""];
78->10 [style = solid, label="fetches1"];
66->44 [style = bold, label=""];
82->73 [style = bold, label=""];
3->60 [style = bold, label=""];
}
