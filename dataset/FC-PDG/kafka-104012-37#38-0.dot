digraph {
44 [style = filled, label = "final List<TopicPartition> owned = Collections.emptyList()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "client.prepareResponse(new MockClient.RequestMatcher(){@Override public boolean matches(AbstractRequest body){final Map<String,Integer> updatedPartitions = new HashMap<>()for (String topic : updatedSubscription)updatedPartitions.put(topic,1)client.updateMetadata(TestUtils.metadataUpdateWith(1,updatedPartitions))return true}},syncGroupResponse(oldAssigned,Errors.NONE))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "subscriptions.subscribe(new HashSet<>(Arrays.asList(topic1,otherTopic)),rebalanceListener)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(getAdded(owned,oldAssigned),rebalanceListener.assigned)@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "assertEquals(toSet(newAssigned),subscriptions.assignedPartitions())@@@53@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "coordinator.poll(time.timer(Long.MAX_VALUE))@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "String otherTopic = \"otherTopic\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.assigned)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.revoked)@@@48@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "Map<String,List<String>> updatedSubscriptions = singletonMap(consumerId,Arrays.asList(topic1,topic2))@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "assertEquals(1,rebalanceListener.assignedCount)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "assertEquals(2,rebalanceListener.assignedCount)@@@56@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "subscriptions.subscribe(Pattern.compile(\".*\"),rebalanceListener)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(getRevoked(owned,oldAssigned),rebalanceListener.revoked)@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
48 [style = filled, label = "assertEquals(getAdded(oldAssigned,newAssigned),rebalanceListener.assigned)@@@57@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
51 [style = filled, label = "client.prepareResponse(joinGroupFollowerResponse(2,\"consumer\",\"leader\",Errors.NONE))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "partitionAssignor.prepare(singletonMap(consumerId,newAssignment))@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "testMetadataRefreshDuringRebalance['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "client.prepareResponse(syncGroupResponse(newAssignment,Errors.NONE))@@@42@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "client.updateMetadata(TestUtils.metadataUpdateWith(1,singletonMap(topic1,1)))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(singleton(topic1),subscriptions.subscription())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final List<TopicPartition> oldAssigned = Arrays.asList(t1p)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "coordinator.maybeUpdateSubscriptionMetadata()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertEquals(2,rebalanceListener.revokedCount)@@@54@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "Map<String,List<String>> updatedSubscriptions = singletonMap(consumerId,Arrays.asList(topic1,topic2))@@@34@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "client.prepareResponse(groupCoordinatorResponse(node,Errors.NONE))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertEquals(toSet(oldAssigned),subscriptions.assignedPartitions())@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "partitionAssignor.prepare(singletonMap(consumerId,oldAssigned))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertEquals(1,rebalanceListener.revokedCount)@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "final String consumerId = \"leader\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(2,rebalanceListener.revokedCount)@@@47@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "client.prepareResponse(new MockClient.RequestMatcher(){@Override public boolean matches(AbstractRequest body){JoinGroupRequest join = (JoinGroupRequest)bodyIterator<JoinGroupRequestData.JoinGroupRequestProtocol> protocolIterator = join.data().protocols().iterator()assertTrue(protocolIterator.hasNext())JoinGroupRequestData.JoinGroupRequestProtocol protocolMetadata = protocolIterator.next()ByteBuffer metadata = ByteBuffer.wrap(protocolMetadata.metadata())PartitionAssignor.Subscription subscription = ConsumerProtocol.deserializeSubscription(metadata)metadata.rewind()return subscription.topics().containsAll(updatedSubscription)}},joinGroupLeaderResponse(2,consumerId,updatedSubscriptions,Errors.NONE))@@@36@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "partitionAssignor.prepare(singletonMap(consumerId,singletonList(t1p)))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertEquals(updatedSubscriptionSet,subscriptions.subscription())@@@45@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
66 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.revoked)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "client.prepareResponse(syncGroupResponse(singletonList(t1p),Errors.NONE))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "coordinator.poll(time.timer(Long.MAX_VALUE))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "client.prepareResponse(syncGroupResponse(newAssigned,Errors.NONE))@@@49@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
55 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.assigned)@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "coordinator.poll(time.timer(Long.MAX_VALUE))@@@43@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "assertEquals(2,rebalanceListener.revokedCount)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "List<TopicPartition> newAssignment = Arrays.asList(t1p,t2p)@@@25@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(getRevoked(oldAssigned,newAssigned),rebalanceListener.revoked)@@@55@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "client.prepareResponse(new MockClient.RequestMatcher(){@Override public boolean matches(AbstractRequest body){JoinGroupRequest join = (JoinGroupRequest)bodyIterator<JoinGroupRequestData.JoinGroupRequestProtocol> protocolIterator = join.data().protocols().iterator()assertTrue(protocolIterator.hasNext())JoinGroupRequestData.JoinGroupRequestProtocol protocolMetadata = protocolIterator.next()ByteBuffer metadata = ByteBuffer.wrap(protocolMetadata.metadata())PartitionAssignor.Subscription subscription = ConsumerProtocol.buildSubscription(metadata,Optional.empty())metadata.rewind()return subscription.topics().containsAll(updatedSubscriptionSet)}},joinGroupLeaderResponse(2,consumerId,updatedSubscriptions,Errors.NONE))@@@29@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertFalse(coordinator.rejoinNeededOrPending())@@@44@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertEquals(toSet(updatedSubscription),subscriptions.subscription())@@@52@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "assertEquals(1,rebalanceListener.assignedCount)@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertEquals(newAssignmentSet,subscriptions.assignedPartitions())@@@46@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertFalse(coordinator.rejoinNeededOrPending())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final List<String> updatedSubscription = Arrays.asList(topic1,topic2)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Map<String,List<String>> initialSubscription = singletonMap(consumerId,singletonList(topic1))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Set<TopicPartition> newAssignmentSet = new HashSet<>(newAssignment)@@@26@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertFalse(coordinator.rejoinNeededOrPending())@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
60 [style = filled, label = "subscriptions.subscribe(singleton(topic1),rebalanceListener)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "assertEquals(2,rebalanceListener.assignedCount)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "assertTrue(rebalanceListener.revoked.isEmpty())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "client.prepareResponse(joinGroupLeaderResponse(1,consumerId,initialSubscription,Errors.NONE))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "testRejoinGroup['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "assertEquals(1,rebalanceListener.revokedCount)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "partitionAssignor.prepare(singletonMap(consumerId,newAssigned))@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "final Set<String> updatedSubscriptionSet = new HashSet<>(updatedSubscription)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "assertEquals(singleton(topic1),subscriptions.subscription())@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "List<TopicPartition> newAssigned = Arrays.asList(t1p,t2p)@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
65 [style = filled, label = "joinAsFollowerAndReceiveAssignment(\"consumer\",coordinator,singletonList(t1p))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "testMetadataRefreshDuringRebalance['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
46->0 [style = bold, label=""];
61->56 [style = bold, label=""];
20->26 [style = bold, label=""];
65->57 [style = bold, label=""];
7->45 [style = solid, label="updatedSubscription"];
43->42 [style = bold, label=""];
21->8 [style = bold, label=""];
38->4 [style = bold, label=""];
5->28 [style = bold, label=""];
18->55 [style = dashed, label="0"];
33->34 [style = solid, label="oldAssigned"];
7->14 [style = bold, label=""];
45->37 [style = solid, label="subscription"];
37->43 [style = bold, label=""];
19->38 [style = dashed, label="0"];
58->62 [style = bold, label=""];
0->3 [style = solid, label="consumerId"];
8->5 [style = solid, label="subscription"];
45->38 [style = bold, label=""];
0->17 [style = solid, label="consumerId"];
9->5 [style = bold, label=""];
31->32 [style = solid, label="newAssigned"];
60->65 [style = bold, label=""];
53->60 [style = bold, label=""];
24->27 [style = bold, label=""];
10->11 [style = bold, label=""];
29->47 [style = bold, label=""];
31->38 [style = solid, label="newAssigned"];
1->4 [style = bold, label=""];
7->24 [style = solid, label="updatedSubscription"];
33->16 [style = bold, label=""];
30->41 [style = bold, label=""];
20->19 [style = solid, label="newAssignment"];
57->61 [style = bold, label=""];
39->34 [style = bold, label=""];
63->54 [style = bold, label=""];
27->30 [style = bold, label=""];
0->29 [style = solid, label="consumerId"];
31->29 [style = bold, label=""];
34->31 [style = bold, label=""];
4->18 [style = bold, label=""];
41->49 [style = bold, label=""];
7->37 [style = solid, label="updatedSubscription"];
31->47 [style = solid, label="newAssigned"];
19->25 [style = bold, label=""];
56->58 [style = bold, label=""];
28->43 [style = dashed, label="0"];
64->66 [style = bold, label=""];
42->32 [style = bold, label=""];
59->55 [style = bold, label=""];
33->40 [style = solid, label="oldAssigned"];
0->44 [style = bold, label=""];
7->14 [style = solid, label="updatedSubscription"];
44->36 [style = solid, label="owned"];
23->8 [style = solid, label="updatedSubscriptions"];
26->28 [style = solid, label="newAssignmentSet"];
27->20 [style = bold, label=""];
51->63 [style = bold, label=""];
14->5 [style = solid, label="updatedSubscriptionSet"];
5->37 [style = dashed, label="0"];
32->50 [style = bold, label=""];
33->32 [style = solid, label="oldAssigned"];
18->37 [style = bold, label=""];
54->64 [style = bold, label=""];
0->16 [style = bold, label=""];
29->45 [style = solid, label="updatedSubscriptions"];
22->2 [style = bold, label=""];
62->51 [style = bold, label=""];
49->35 [style = bold, label=""];
33->48 [style = solid, label="oldAssigned"];
25->9 [style = bold, label=""];
44->33 [style = bold, label=""];
12->24 [style = bold, label=""];
50->48 [style = bold, label=""];
1->32 [style = dashed, label="0"];
53->62 [style = solid, label="otherTopic"];
18->48 [style = dashed, label="0"];
36->39 [style = bold, label=""];
21->47 [style = dashed, label="0"];
3->12 [style = solid, label="initialSubscription"];
0->45 [style = solid, label="consumerId"];
16->60 [style = dashed, label="0"];
11->22 [style = bold, label=""];
3->17 [style = bold, label=""];
31->43 [style = solid, label="newAssigned"];
47->45 [style = bold, label=""];
20->26 [style = solid, label="newAssignment"];
26->18 [style = solid, label="newAssignmentSet"];
15->1 [style = bold, label=""];
28->15 [style = bold, label=""];
52->53 [style = bold, label=""];
0->12 [style = solid, label="consumerId"];
3->40 [style = bold, label=""];
16->10 [style = bold, label=""];
7->12 [style = bold, label=""];
33->24 [style = solid, label="oldAssigned"];
8->19 [style = bold, label=""];
0->53 [style = dashed, label="0"];
6->0 [style = bold, label=""];
0->40 [style = solid, label="consumerId"];
31->48 [style = solid, label="newAssigned"];
2->13 [style = bold, label=""];
0->47 [style = solid, label="consumerId"];
17->7 [style = bold, label=""];
0->21 [style = solid, label="consumerId"];
40->7 [style = bold, label=""];
44->34 [style = solid, label="owned"];
13->3 [style = bold, label=""];
23->21 [style = bold, label=""];
0->8 [style = solid, label="consumerId"];
17->40 [style = dashed, label="0"];
14->12 [style = bold, label=""];
26->23 [style = bold, label=""];
33->49 [style = solid, label="oldAssigned"];
35->36 [style = bold, label=""];
0->23 [style = solid, label="consumerId"];
66->59 [style = bold, label=""];
33->36 [style = solid, label="oldAssigned"];
20->21 [style = solid, label="newAssignment"];
14->8 [style = solid, label="updatedSubscriptionSet"];
}
