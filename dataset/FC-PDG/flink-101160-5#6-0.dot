digraph {
11 [style = filled, label = "TestEventQueue eventQueue = TestEventQueue.createShared(shared)@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "transform.setChainingStrategy(ChainingStrategy.HEAD_WITH_SOURCES)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "toString['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "operatorsNumberOfInputs.put(mapForward,1)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "return \"simple graph\"@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "DataStream<TestDataElement> src = env.addSource(new TestEventSource(unitedSourceLeft,eventQueue,commandQueue)).setUidHash(unitedSourceLeft).assignTimestampsAndWatermarks(createWmAssigner())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Map<String,Integer> operatorsNumberOfInputs = new HashMap<>()@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "build['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "forwardTransform.addSink(new DiscardingSink<>())@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "String unitedSourceLeft = OP_ID_HASH_PREFIX + \"1\"@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "final DataStream<?> inputs@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "return new MultipleConnectedStreams(env).transform(transform)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "String unitedSourceLeft = OP_ID_HASH_PREFIX + \"1\"@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "operatorsNumberOfInputs.put(mapForward,1)@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "env.addOperator(transform)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "SingleOutputStreamOperator<TestDataElement> forwardTransform = src.transform(\"transform-1-forward\",TypeInformation.of(),new OneInputTestStreamOperatorFactory(mapForward,eventQueue)).setUidHash(mapForward)@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "nAryInputStreamOperation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "DataStream<TestDataElement> src = env.addSource(new TestEventSource(unitedSourceLeft,eventQueue,commandQueue)).setUidHash(unitedSourceLeft).assignTimestampsAndWatermarks(createWmAssigner())@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "build['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "return new TestJobWithDescription(env.getStreamGraph().getJobGraph(),singleton(unitedSourceLeft),new HashSet<>(singletonList(mapForward)),new HashSet<>(asList(unitedSourceLeft,mapForward)),operatorsNumberOfInputs,eventQueue,commandQueue)@@@14@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "TestCommandDispatcher commandQueue = TestCommandDispatcher.createShared(shared)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "SingleOutputStreamOperator<TestDataElement> forwardTransform = src.transform(\"transform-1-forward\",TypeInformation.of(),new OneInputTestStreamOperatorFactory(mapForward,eventQueue)).setUidHash(mapForward)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "Map<String,Integer> operatorsNumberOfInputs = new HashMap<>()@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "return new TestJobWithDescription(env.getStreamGraph().getJobGraph(),singleton(unitedSourceLeft),new HashSet<>(singletonList(mapForward)),new HashSet<>(asList(unitedSourceLeft,mapForward)),operatorsNumberOfInputs,eventQueue,commandQueue)@@@14@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "final StreamExecutionEnvironment env = inputs(0(.getExecutionEnvironment()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "TestEventQueue eventQueue = TestEventQueue.createShared(shared)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "String mapForward = OP_ID_HASH_PREFIX + \"5\"@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "TestCommandDispatcher commandQueue = TestCommandDispatcher.createShared(shared)@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "String mapForward = OP_ID_HASH_PREFIX + \"5\"@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "StreamExecutionEnvironment env = prepareEnv(confConsumer,envConsumer)@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "toString['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final MultipleInputTransformation<Long> transform = new MultipleInputTransformation<>(\"MultipleInputOperator\",new NAryUnionOpFactory(inputs.length),Types.LONG,env.getParallelism())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "forwardTransform.addSink(new DiscardingSink<>())@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "ThrowingConsumer<StreamExecutionEnvironment,Exception> envConsumer@@@3@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Consumer<StreamExecutionEnvironment> envConsumer@@@3@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "transform.addInput(input.getTransformation())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "StreamExecutionEnvironment env = prepareEnv(confConsumer,envConsumer)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12->0 [style = bold, label=""];
17->26 [style = bold, label=""];
15->20 [style = solid, label="confConsumer"];
28->16 [style = bold, label=""];
13->4 [style = dotted, label="true"];
14->3 [style = bold, label=""];
15->9 [style = bold, label=""];
33->31 [style = bold, label=""];
35->30 [style = bold, label=""];
21->9 [style = dotted, label="true"];
28->27 [style = solid, label="mapForward"];
19->20 [style = bold, label=""];
19->27 [style = solid, label="commandQueue"];
21->24 [style = dotted, label="true"];
1->8 [style = bold, label=""];
14->10 [style = solid, label="commandQueue"];
28->23 [style = solid, label="mapForward"];
5->8 [style = solid, label="mapForward"];
16->22 [style = bold, label=""];
28->22 [style = solid, label="mapForward"];
22->17 [style = bold, label=""];
13->9 [style = dotted, label="true"];
3->7 [style = bold, label=""];
5->10 [style = solid, label="mapForward"];
31->36 [style = solid, label="transform"];
5->12 [style = solid, label="mapForward"];
11->14 [style = bold, label=""];
0->1 [style = bold, label=""];
9->19 [style = solid, label="shared"];
2->3 [style = solid, label="confConsumer"];
21->15 [style = dotted, label="true"];
20->25 [style = bold, label=""];
2->9 [style = bold, label=""];
25->27 [style = solid, label="unitedSourceLeft"];
13->11 [style = bold, label=""];
25->28 [style = bold, label=""];
18->27 [style = solid, label="eventQueue"];
13->2 [style = dotted, label="true"];
7->10 [style = solid, label="unitedSourceLeft"];
18->19 [style = bold, label=""];
21->18 [style = bold, label=""];
9->14 [style = solid, label="shared"];
24->20 [style = solid, label="envConsumer"];
9->11 [style = solid, label="shared"];
32->29 [style = dotted, label="true"];
31->30 [style = solid, label="transform"];
6->12 [style = bold, label=""];
7->5 [style = bold, label=""];
4->3 [style = solid, label="envConsumer"];
26->23 [style = bold, label=""];
34->35 [style = bold, label=""];
32->33 [style = bold, label=""];
9->18 [style = solid, label="shared"];
30->36 [style = bold, label=""];
11->10 [style = solid, label="eventQueue"];
1->10 [style = solid, label="operatorsNumberOfInputs"];
8->10 [style = bold, label=""];
26->27 [style = solid, label="operatorsNumberOfInputs"];
31->34 [style = bold, label=""];
5->6 [style = bold, label=""];
23->27 [style = bold, label=""];
}
