digraph {
6 [style = filled, label = "coll.add(new TestElement(2))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(3,list.get(2).val)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertEquals(3,list.get(0).val)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertTrue(coll.contains(new TestElement(3)))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(2,list.size())@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "coll.add(new TestElement(4))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "list.remove(1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertTrue(coll.contains(new TestElement(1)))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(3,list.get(2).key)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "List<TestElement> list = coll.valuesList()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "coll.add(new TestElement(1))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "coll.add(new TestElement(3))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testListViewGet['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertEquals(1,list.get(0).key)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertEquals(4,list.get(1).val)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertFalse(coll.contains(new TestElement(2)))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testListViewGet['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(2,list.get(1).key)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertEquals(2,coll.size())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "coll.remove(new TestElement(1))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(3,list.get(0).val)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(1,list.size())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "ImplicitLinkedHashCollection<TestElement> coll = new ImplicitLinkedHashCollection<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(1,list.get(0).val)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "testListViewModification['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(2,list.get(1).val)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "assertEquals(3,list.size())@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13->10 [style = bold, label=""];
16->15 [style = bold, label=""];
22->26 [style = bold, label=""];
23->20 [style = bold, label=""];
5->12 [style = dashed, label="0"];
9->10 [style = dashed, label="0"];
2->19 [style = dashed, label="0"];
0->6 [style = bold, label=""];
9->2 [style = bold, label=""];
7->12 [style = bold, label=""];
25->23 [style = bold, label=""];
26->25 [style = bold, label=""];
14->22 [style = bold, label=""];
19->17 [style = bold, label=""];
15->19 [style = bold, label=""];
4->7 [style = bold, label=""];
1->9 [style = bold, label=""];
20->21 [style = bold, label=""];
8->0 [style = bold, label=""];
1->13 [style = dashed, label="0"];
12->13 [style = bold, label=""];
6->4 [style = bold, label=""];
5->1 [style = bold, label=""];
7->5 [style = bold, label=""];
17->14 [style = bold, label=""];
1->16 [style = dashed, label="0"];
3->8 [style = bold, label=""];
7->18 [style = bold, label=""];
11->8 [style = bold, label=""];
10->2 [style = bold, label=""];
24->8 [style = bold, label=""];
9->15 [style = dashed, label="0"];
18->16 [style = bold, label=""];
}
