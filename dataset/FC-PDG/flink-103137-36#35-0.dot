digraph {
4 [style = filled, label = "JobManagerTaskRestore jobManagerTaskRestore = new JobManagerTaskRestore(0L,taskStateSnapshot)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testWithRestore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "checkCloseablesRegistered(closeableRegistry,operatorStateBackend,keyedStateBackend,keyedStateInputs,operatorStateInputs)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "StreamOperatorStateContext stateContext = streamTaskStateManager.streamOperatorStateContext(streamOperator.getOperatorID(),streamOperator.getClass().getSimpleName(),new TestProcessingTimeService(),streamOperator,typeSerializer,closeableRegistry,new UnregisteredMetricsGroup(),1.0)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "CheckpointableKeyedStateBackend<?> keyedStateBackend = stateContext.keyedStateBackend()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "MemoryStateBackend stateBackend = spy(new MemoryStateBackend(1024))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertNotNull(keyedStateBackend)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertNotNull(timeServiceManager)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertNull(timeServiceManager)@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertFalse(operatorStateInputs.iterator().hasNext())@@@24@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertNotNull(operatorStateBackend)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Random random = new Random(0x42)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "++count@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "taskStateSnapshot.putSubtaskStateByOperatorID(operatorID,operatorSubtaskState)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertFalse(\"Expected the context to NOT be restored\",stateContext.isRestored())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "int count = 0@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "OperatorID operatorID = new OperatorID(47L,11L)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "CloseableIterable<StatePartitionStreamProvider> operatorStateInputs = stateContext.rawOperatorStateInputs()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "OperatorSubtaskState operatorSubtaskState = OperatorSubtaskState.builder().setManagedOperatorState(new OperatorStreamStateHandle(Collections.singletonMap(\"a\",new OperatorStateHandle.StateMetaInfo(new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bc6433,SPLIT_DISTRIBUTE)),CheckpointTestUtils.createDummyStreamStateHandle(random,null))).setRawOperatorState(new OperatorStreamStateHandle(Collections.singletonMap(\"_default_\",new OperatorStateHandle.StateMetaInfo(new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bc6447,SPLIT_DISTRIBUTE)),CheckpointTestUtils.createDummyStreamStateHandle(random,null))).setManagedKeyedState(CheckpointTestUtils.createDummyKeyGroupStateHandle(random,null)).setRawKeyedState(CheckpointTestUtils.createDummyKeyGroupStateHandle(random,null)).setInputChannelState(singleton(createNewInputChannelStateHandle(10,random))).setResultSubpartitionState(singleton(createNewResultSubpartitionStateHandle(10,random))).build()@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "Assert.assertNotNull(keyedStateBackend)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "count = 0@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertNotNull(operatorStateBackend)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "when(streamOperator.getOperatorID()).thenReturn(operatorID)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "testNoRestore['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testWithRestore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertFalse(keyedStateInputs.iterator().hasNext())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "TypeSerializer<?> typeSerializer = new IntSerializer()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "TaskStateSnapshot taskStateSnapshot = new TaskStateSnapshot()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "++count@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertNotNull(keyedStateInputs)@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertTrue(\"Expected the context to be restored\",stateContext.isRestored())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "InternalTimeServiceManager<?> timeServiceManager = stateContext.internalTimerServiceManager()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "AbstractStreamOperator<?> streamOperator = mock()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertNotNull(operatorStateInputs)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "StateBackend mockingBackend = spy(new StateBackend(){@Override public CompletedCheckpointStorageLocation resolveCheckpoint(String pointer){throw new UnsupportedOperationException()}@Override public CheckpointStorageAccess createCheckpointStorage(JobID jobId){throw new UnsupportedOperationException()}@Override public AbstractKeyedStateBackend<K> createKeyedStateBackend(Environment env,JobID jobID,String operatorIdentifier,TypeSerializer<K> keySerializer,int numberOfKeyGroups,KeyGroupRange keyGroupRange,TaskKvStateRegistry kvStateRegistry,TtlTimeProvider ttlTimeProvider,MetricGroup metricGroup,@Nonnull Collection<KeyedStateHandle> stateHandles,CloseableRegistry cancelStreamRegistry){return mock()}@Override public OperatorStateBackend createOperatorStateBackend(Environment env,String operatorIdentifier,@Nonnull Collection<OperatorStateHandle> stateHandles,CloseableRegistry cancelStreamRegistry){return mock()}})@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "InternalTimeServiceManager<?> timeServiceManager = stateContext.internalTimerServiceManager()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "CloseableRegistry closeableRegistry = new CloseableRegistry()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "OperatorStateBackend operatorStateBackend = stateContext.operatorStateBackend()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "CheckpointableKeyedStateBackend<?> keyedStateBackend = stateContext.keyedStateBackend()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "CloseableIterable<StatePartitionStreamProvider> operatorStateInputs = stateContext.rawOperatorStateInputs()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "OperatorSubtaskState operatorSubtaskState = new OperatorSubtaskState(new OperatorStreamStateHandle(Collections.singletonMap(\"a\",new OperatorStateHandle.StateMetaInfo(new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bc62c5,OperatorStateHandle.Mode.SPLIT_DISTRIBUTE)),CheckpointTestUtils.createDummyStreamStateHandle(random,null)),new OperatorStreamStateHandle(Collections.singletonMap(\"_default_\",new OperatorStateHandle.StateMetaInfo(new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bc62dc,OperatorStateHandle.Mode.SPLIT_DISTRIBUTE)),CheckpointTestUtils.createDummyStreamStateHandle(random,null)),CheckpointTestUtils.createDummyKeyGroupStateHandle(random,null),CheckpointTestUtils.createDummyKeyGroupStateHandle(random,null),singleton(createNewInputChannelStateHandle(10,random)),singleton(createNewResultSubpartitionStateHandle(10,random)))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "checkCloseablesRegistered(closeableRegistry,operatorStateBackend,keyedStateBackend,keyedStateInputs,operatorStateInputs)@@@55@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "StreamTaskStateInitializer streamTaskStateManager = streamTaskStateManager(stateBackend,null,true)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertNotNull(keyedStateInputs)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "CloseableIterable<KeyGroupStatePartitionStreamProvider> keyedStateInputs = stateContext.rawKeyedStateInputs()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "StreamTaskStateInitializer streamTaskStateManager = streamTaskStateManager(mockingBackend,jobManagerTaskRestore,false)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertNotNull(operatorStateInputs)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "CloseableIterable<KeyGroupStatePartitionStreamProvider> keyedStateInputs = stateContext.rawKeyedStateInputs()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(1,count)@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(3,count)@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27->13 [style = bold, label=""];
5->29 [style = solid, label="closeableRegistry"];
12->5 [style = bold, label=""];
5->20 [style = bold, label=""];
7->30 [style = bold, label=""];
41->34 [style = solid, label="typeSerializer"];
40->37 [style = solid, label="stateBackend"];
44->10 [style = solid, label="keyedStateInputs"];
13->3 [style = solid, label="mockingBackend"];
4->3 [style = solid, label="jobManagerTaskRestore"];
43->5 [style = solid, label="operatorStateBackend"];
12->20 [style = solid, label="typeSerializer"];
25->17 [style = solid, label="operatorID"];
41->48 [style = bold, label=""];
31->6 [style = bold, label=""];
48->5 [style = solid, label="closeableRegistry"];
10->12 [style = bold, label=""];
2->14 [style = bold, label=""];
9->21 [style = bold, label=""];
33->17 [style = solid, label="operatorSubtaskState"];
8->11 [style = bold, label=""];
48->34 [style = bold, label=""];
44->47 [style = bold, label=""];
40->37 [style = bold, label=""];
13->25 [style = bold, label=""];
4->3 [style = bold, label=""];
39->25 [style = solid, label="keyedStateBackend"];
5->20 [style = solid, label="closeableRegistry"];
35->44 [style = bold, label=""];
47->5 [style = solid, label="operatorStateInputs"];
47->12 [style = solid, label="operatorStateInputs"];
19->2 [style = bold, label=""];
13->40 [style = dashed, label="0"];
30->11 [style = solid, label="timeServiceManager"];
42->40 [style = bold, label=""];
7->8 [style = solid, label="keyedStateBackend"];
46->41 [style = bold, label=""];
3->0 [style = bold, label=""];
45->46 [style = solid, label="operatorID"];
9->4 [style = solid, label="taskStateSnapshot"];
21->22 [style = bold, label=""];
49->46 [style = bold, label=""];
39->35 [style = bold, label=""];
22->17 [style = bold, label=""];
38->25 [style = bold, label=""];
43->38 [style = solid, label="operatorStateBackend"];
37->45 [style = bold, label=""];
47->36 [style = bold, label=""];
15->29 [style = bold, label=""];
0->20 [style = solid, label="streamOperator"];
25->0 [style = bold, label=""];
28->18 [style = solid, label="operatorStateBackend"];
28->29 [style = solid, label="operatorStateBackend"];
25->10 [style = solid, label="operatorID"];
31->15 [style = solid, label="count"];
35->0 [style = solid, label="timeServiceManager"];
22->33 [style = dashed, label="0"];
39->5 [style = solid, label="keyedStateBackend"];
25->9 [style = bold, label=""];
49->34 [style = solid, label="streamOperator"];
24->2 [style = solid, label="operatorStateInputs"];
6->15 [style = bold, label=""];
24->26 [style = bold, label=""];
14->23 [style = bold, label=""];
16->31 [style = bold, label=""];
48->34 [style = solid, label="closeableRegistry"];
18->8 [style = bold, label=""];
34->43 [style = bold, label=""];
43->39 [style = bold, label=""];
22->17 [style = solid, label="operatorSubtaskState"];
17->4 [style = bold, label=""];
33->17 [style = bold, label=""];
21->22 [style = solid, label="random"];
23->16 [style = bold, label=""];
30->1 [style = bold, label=""];
44->5 [style = solid, label="keyedStateInputs"];
7->29 [style = solid, label="keyedStateBackend"];
45->49 [style = bold, label=""];
21->33 [style = bold, label=""];
20->28 [style = bold, label=""];
28->7 [style = bold, label=""];
24->29 [style = solid, label="operatorStateInputs"];
11->19 [style = bold, label=""];
1->29 [style = solid, label="keyedStateInputs"];
11->0 [style = dashed, label="0"];
14->16 [style = solid, label="count"];
1->19 [style = solid, label="keyedStateInputs"];
0->10 [style = bold, label=""];
1->24 [style = bold, label=""];
26->36 [style = dashed, label="0"];
36->38 [style = bold, label=""];
32->13 [style = bold, label=""];
26->18 [style = bold, label=""];
}
