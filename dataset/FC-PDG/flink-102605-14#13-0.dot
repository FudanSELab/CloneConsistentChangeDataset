digraph {
24 [style = filled, label = "StreamTaskState snapshot = testHarness.snapshot(0L,0L)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testHarness.open()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 8000))@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 1000))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",3),initialTime + 2999))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",2),initialTime + 5999))@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "testHarness.setup()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "ReducingStateDescriptor<Tuple2<String,Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",new SumReducer(),inputType.createSerializer(new ExecutionConfig()))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "expectedOutput.add(new Watermark(5999))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "expectedOutput.add(new Watermark(2000))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new OneInputStreamOperatorTestHarness<>(operator)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 20))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "expectedOutput.add(new Watermark(6999))@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "TypeInformation<Tuple2<String,Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 999))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 4000))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1999))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 2000))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "expectedOutput.add(new Watermark(4999))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "expectedOutput.add(new Watermark(7000))@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "operator.setInputType(TypeInfoParser.parse(\"Tuple2<String, Integer>\"),new ExecutionConfig())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "expectedOutput.add(new Watermark(2999))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 6999))@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testContinuousWatermarkTrigger['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final int WINDOW_SIZE = 3@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3000))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "expectedOutput.add(new Watermark(4000))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "long initialTime = 0L@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testHarness.close()@@@48@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 5999))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator = new WindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String,GlobalWindow,Tuple2<String,Integer>>()),ContinuousEventTimeTrigger.of(Time.of(WINDOW_SIZE,TimeUnit.SECONDS)),0)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
77 [style = filled, label = "testHarness.open()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "testHarness.close()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "closeCalled.set(0)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",3),Long.MAX_VALUE))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "expectedOutput.add(new Watermark(5000))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3000))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",3),initialTime + 2999))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "expectedOutput.add(new Watermark(999))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 3999))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "testTumblingEventTimeWindows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator = new WindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String,GlobalWindow,Tuple2<String,Integer>>()),ContinuousEventTimeTrigger.of(Time.of(WINDOW_SIZE,TimeUnit.SECONDS)))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 999))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "expectedOutput.add(new Watermark(6000))@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "expectedOutput.add(new Watermark(3000))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "testContinuousWatermarkTrigger['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",3),Long.MAX_VALUE))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 3000))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "expectedOutput.add(new Watermark(3999))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1998))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "expectedOutput.add(new Watermark(1999))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 5000))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 7999))@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testHarness.configureForKeyedStream(new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@44@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "expectedOutput.add(new Watermark(8000))@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "testHarness.restore(snapshot,10L)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 6000))@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 4999))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 2999))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expectedOutput.add(new Watermark(1000))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 1999))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "expectedOutput.add(new Watermark(7999))@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3999))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->24 [style = dashed, label="0"];
6->43 [style = bold, label=""];
13->56 [style = dashed, label="0"];
28->6 [style = bold, label=""];
11->26 [style = solid, label="expectedOutput"];
65->74 [style = solid, label="initialTime"];
46->0 [style = bold, label=""];
43->55 [style = bold, label=""];
38->44 [style = bold, label=""];
72->51 [style = solid, label="expectedOutput"];
68->50 [style = bold, label=""];
30->17 [style = solid, label="initialTime"];
7->49 [style = dashed, label="0"];
30->13 [style = solid, label="initialTime"];
72->38 [style = solid, label="expectedOutput"];
31->21 [style = bold, label=""];
53->54 [style = bold, label=""];
11->9 [style = bold, label=""];
30->35 [style = solid, label="initialTime"];
24->63 [style = solid, label="snapshot"];
59->78 [style = bold, label=""];
21->28 [style = bold, label=""];
11->25 [style = solid, label="expectedOutput"];
39->60 [style = bold, label=""];
23->73 [style = bold, label=""];
11->6 [style = solid, label="expectedOutput"];
30->11 [style = bold, label=""];
58->62 [style = bold, label=""];
34->24 [style = bold, label=""];
21->56 [style = bold, label=""];
38->49 [style = bold, label=""];
51->61 [style = bold, label=""];
22->5 [style = solid, label="operator"];
7->16 [style = bold, label=""];
26->35 [style = bold, label=""];
33->48 [style = bold, label=""];
46->43 [style = dashed, label="0"];
39->38 [style = bold, label=""];
37->32 [style = bold, label=""];
3->74 [style = dashed, label="0"];
31->4 [style = dashed, label="0"];
40->31 [style = bold, label=""];
48->18 [style = bold, label=""];
70->74 [style = bold, label=""];
33->22 [style = solid, label="stateDesc"];
30->14 [style = solid, label="initialTime"];
35->12 [style = bold, label=""];
17->20 [style = bold, label=""];
72->62 [style = solid, label="expectedOutput"];
33->48 [style = solid, label="stateDesc"];
45->41 [style = bold, label=""];
9->39 [style = bold, label=""];
50->23 [style = bold, label=""];
0->19 [style = bold, label=""];
66->67 [style = bold, label=""];
65->57 [style = solid, label="initialTime"];
72->34 [style = solid, label="expectedOutput"];
27->30 [style = bold, label=""];
63->2 [style = bold, label=""];
72->77 [style = bold, label=""];
25->3 [style = bold, label=""];
56->71 [style = bold, label=""];
11->4 [style = solid, label="expectedOutput"];
9->17 [style = bold, label=""];
69->64 [style = bold, label=""];
54->66 [style = bold, label=""];
76->75 [style = dotted, label="true"];
30->40 [style = solid, label="initialTime"];
35->66 [style = dashed, label="0"];
23->14 [style = bold, label=""];
43->13 [style = bold, label=""];
65->30 [style = solid, label="initialTime"];
65->21 [style = solid, label="initialTime"];
22->18 [style = bold, label=""];
30->45 [style = solid, label="initialTime"];
65->11 [style = solid, label="initialTime"];
65->72 [style = bold, label=""];
1->48 [style = solid, label="WINDOW_SIZE"];
65->61 [style = solid, label="initialTime"];
48->5 [style = solid, label="operator"];
44->34 [style = bold, label=""];
65->9 [style = solid, label="initialTime"];
57->30 [style = bold, label=""];
20->39 [style = bold, label=""];
30->24 [style = solid, label="initialTime"];
10->2 [style = bold, label=""];
67->51 [style = bold, label=""];
11->2 [style = solid, label="expectedOutput"];
13->15 [style = bold, label=""];
45->52 [style = bold, label=""];
65->49 [style = solid, label="initialTime"];
52->63 [style = bold, label=""];
36->42 [style = bold, label=""];
65->78 [style = solid, label="initialTime"];
30->3 [style = solid, label="initialTime"];
14->36 [style = bold, label=""];
65->50 [style = solid, label="initialTime"];
65->64 [style = solid, label="initialTime"];
42->25 [style = bold, label=""];
49->44 [style = bold, label=""];
16->44 [style = dashed, label="0"];
77->69 [style = bold, label=""];
72->70 [style = solid, label="expectedOutput"];
16->23 [style = bold, label=""];
41->10 [style = bold, label=""];
64->59 [style = bold, label=""];
73->70 [style = bold, label=""];
30->20 [style = solid, label="initialTime"];
11->23 [style = solid, label="expectedOutput"];
60->38 [style = bold, label=""];
65->23 [style = solid, label="initialTime"];
43->21 [style = dashed, label="0"];
12->67 [style = dashed, label="0"];
24->45 [style = bold, label=""];
65->66 [style = solid, label="initialTime"];
65->68 [style = solid, label="initialTime"];
47->32 [style = bold, label=""];
4->58 [style = bold, label=""];
30->39 [style = solid, label="initialTime"];
30->41 [style = solid, label="initialTime"];
65->4 [style = solid, label="initialTime"];
30->7 [style = solid, label="initialTime"];
3->8 [style = bold, label=""];
32->1 [style = bold, label=""];
72->55 [style = solid, label="expectedOutput"];
41->39 [style = dashed, label="0"];
65->59 [style = solid, label="initialTime"];
1->29 [style = bold, label=""];
30->38 [style = solid, label="initialTime"];
1->22 [style = solid, label="WINDOW_SIZE"];
61->4 [style = bold, label=""];
33->22 [style = bold, label=""];
22->48 [style = dashed, label="0"];
4->40 [style = bold, label=""];
21->58 [style = dashed, label="0"];
8->53 [style = dashed, label="0"];
15->71 [style = dashed, label="0"];
11->0 [style = solid, label="expectedOutput"];
65->69 [style = solid, label="initialTime"];
74->53 [style = bold, label=""];
30->34 [style = solid, label="initialTime"];
30->43 [style = solid, label="initialTime"];
78->57 [style = bold, label=""];
40->61 [style = dashed, label="0"];
29->33 [style = bold, label=""];
12->4 [style = bold, label=""];
71->43 [style = bold, label=""];
18->5 [style = bold, label=""];
65->56 [style = solid, label="initialTime"];
10->60 [style = dashed, label="0"];
76->65 [style = bold, label=""];
30->44 [style = solid, label="initialTime"];
15->46 [style = bold, label=""];
5->27 [style = bold, label=""];
2->7 [style = bold, label=""];
2->68 [style = bold, label=""];
65->39 [style = solid, label="initialTime"];
72->54 [style = solid, label="expectedOutput"];
62->21 [style = bold, label=""];
8->26 [style = bold, label=""];
}
