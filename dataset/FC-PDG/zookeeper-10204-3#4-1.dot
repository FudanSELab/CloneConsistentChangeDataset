digraph {
11 [style = filled, label = "byte(( buf = new byte((((@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Socket socket = connectWithoutSSL()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "serverThread.start()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,true,DATA_TO_CLIENT)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertTrue(handshakeCompleted)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "socket.getOutputStream().write(DATA_FROM_CLIENT,2,DATA_FROM_CLIENT.length - 2)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "socket.getOutputStream().flush()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "int bytesRead = sslSocket.getInputStream().read(buf,0,buf.length)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testConnectWithoutSSLToNonStrictServerPartialWrite['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertArrayEquals(DATA_TO_CLIENT,buf)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "int bytesRead = socket.getInputStream().read(buf,0,buf.length)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertTrue(handshakeCompleted)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "sslSocket.getOutputStream().flush()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(buf.length,bytesRead)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "{forceClose(sslSocket)serverThread.shutdown(TIMEOUT)}@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Socket sslSocket = connectWithSSL()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Thread.sleep(TIMEOUT / 2)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertArrayEquals(DATA_TO_CLIENT,buf)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "sslSocket.getOutputStream().write(DATA_FROM_CLIENT)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testConnectWithSSLToNonStrictServer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "socket.getOutputStream().flush()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,true,DATA_TO_CLIENT)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "socket.getOutputStream().write(DATA_FROM_CLIENT,0,2)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "{forceClose(socket)serverThread.shutdown(TIMEOUT)}@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "byte(( buf = new byte((((@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "handshakeCompletedLock@@@13@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "testConnectWithSSLToNonStrictServer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9->29 [style = solid, label="buf"];
2->3 [style = dotted, label="true"];
15->8 [style = solid, label="bytesRead"];
25->28 [style = bold, label=""];
9->16 [style = dashed, label="0"];
29->3 [style = solid, label="bytesRead"];
23->30 [style = bold, label=""];
21->19 [style = bold, label=""];
4->6 [style = bold, label=""];
9->2 [style = bold, label=""];
31->9 [style = bold, label=""];
13->20 [style = dashed, label="0"];
2->3 [style = bold, label=""];
29->3 [style = bold, label=""];
3->14 [style = bold, label=""];
20->0 [style = bold, label=""];
2->17 [style = dotted, label="true"];
22->31 [style = bold, label=""];
12->17 [style = dashed, label="0"];
4->27 [style = dashed, label="0"];
14->17 [style = bold, label=""];
15->29 [style = dashed, label="0"];
3->12 [style = bold, label=""];
16->2 [style = bold, label=""];
1->26 [style = bold, label=""];
11->16 [style = solid, label="buf"];
15->18 [style = bold, label=""];
11->15 [style = bold, label=""];
24->5 [style = bold, label=""];
11->9 [style = solid, label="buf"];
3->14 [style = dotted, label="true"];
12->13 [style = bold, label=""];
5->1 [style = bold, label=""];
19->1 [style = bold, label=""];
26->27 [style = bold, label=""];
7->5 [style = bold, label=""];
11->15 [style = solid, label="buf"];
26->30 [style = solid, label="socket"];
10->26 [style = dashed, label="0"];
10->0 [style = solid, label="sslSocket"];
14->23 [style = bold, label=""];
6->25 [style = dashed, label="0"];
9->14 [style = solid, label="buf"];
6->11 [style = bold, label=""];
14->12 [style = bold, label=""];
15->18 [style = solid, label="bytesRead"];
8->9 [style = bold, label=""];
10->4 [style = bold, label=""];
2->12 [style = dotted, label="true"];
3->17 [style = bold, label=""];
8->18 [style = dashed, label="0"];
1->10 [style = bold, label=""];
9->29 [style = bold, label=""];
5->19 [style = dashed, label="0"];
27->25 [style = bold, label=""];
15->8 [style = bold, label=""];
28->22 [style = bold, label=""];
13->0 [style = bold, label=""];
17->20 [style = bold, label=""];
18->16 [style = bold, label=""];
}
