digraph {
6 [style = filled, label = "lockbox.remove(task)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testTryExclusiveLock['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Assert.assertFalse(tryTimeChunkLock(TaskLockType.EXCLUSIVE,task2,Intervals.of(\"2015-01-01/2015-01-02\")).isOk())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "testTryExclusiveLock['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Task task2 = NoopTask.create()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(lockbox.tryLock(TaskLockType.EXCLUSIVE,task2,Intervals.of(\"2015-01-01/2015-01-02\")).isOk())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "Assert.assertTrue(tryTimeChunkLock(TaskLockType.EXCLUSIVE,task,Intervals.of(\"2015-01-01/2015-01-03\")).isOk())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testTryLockAfterTaskComplete['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "lockbox.add(task)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertTrue(tryTimeChunkLock(TaskLockType.EXCLUSIVE,task2,Intervals.of(\"2015-01-01/2015-01-02\")).isOk())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Task task = NoopTask.create()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertFalse(lockbox.tryLock(TaskLockType.EXCLUSIVE,task,Intervals.of(\"2015-01-01/2015-01-02\")).isOk())@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "exception.expect()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertFalse(lockbox.tryLock(TaskLockType.EXCLUSIVE,task2,Intervals.of(\"2015-01-01/2015-01-02\")).isOk())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "lockbox.add(task2)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(lockbox.tryLock(TaskLockType.EXCLUSIVE,task,Intervals.of(\"2015-01-01/2015-01-03\")).isOk())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "exception.expectMessage(\"Unable to grant lock to inactive Task\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->4 [style = solid, label="task2"];
5->8 [style = bold, label=""];
4->3 [style = bold, label=""];
7->16 [style = dashed, label="0"];
3->6 [style = bold, label=""];
8->6 [style = bold, label=""];
5->8 [style = solid, label="task"];
1->0 [style = bold, label=""];
5->14 [style = bold, label=""];
12->6 [style = bold, label=""];
5->6 [style = solid, label="task"];
8->1 [style = bold, label=""];
11->0 [style = bold, label=""];
3->12 [style = dashed, label="0"];
0->4 [style = bold, label=""];
6->16 [style = bold, label=""];
1->11 [style = dashed, label="0"];
6->10 [style = bold, label=""];
13->5 [style = bold, label=""];
9->5 [style = bold, label=""];
4->12 [style = bold, label=""];
7->10 [style = dashed, label="0"];
14->15 [style = bold, label=""];
6->7 [style = bold, label=""];
8->11 [style = bold, label=""];
15->8 [style = bold, label=""];
2->5 [style = bold, label=""];
}
