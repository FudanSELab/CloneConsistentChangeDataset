digraph {
26 [style = filled, label = "assertOutput(sequence6)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "BufferOrEvent(( sequence6 = addSequence(inputGate,createBuffer(0),createEndOfPartition(0),createEndOfPartition(1),createEndOfPartition(2))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertOutput(sequence2)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(2L,channelStateWriter.getLastStartedCheckpointId())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "inputGate = createInputGate(3,handler)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "BufferOrEvent(( sequence3 = addSequence(inputGate,createBuffer(2),createBuffer(2),createBarrier(3,2),createBuffer(2),createBuffer(2),createBarrier(3,0),createBarrier(3,1))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(3L,channelStateWriter.getLastStartedCheckpointId())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testEarlyCleanup['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "inputGate = createInputGate(3,handler,false)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertInflightData()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testMultiChannelWithBarriers['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(1L,channelStateWriter.getLastStartedCheckpointId())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "BufferOrEvent(( sequence1 = addSequence(inputGate,createBuffer(0),createBuffer(2),createBuffer(0),createBarrier(1,1),createBarrier(1,2),createBuffer(2),createBuffer(1),createBuffer(0),createBarrier(1,0))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(4L,channelStateWriter.getLastStartedCheckpointId())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ValidatingCheckpointHandler handler = new ValidatingCheckpointHandler(1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(5L,channelStateWriter.getLastStartedCheckpointId())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertOutput()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "addSequence(inputGate,createBarrier(4,1),createBarrier(4,2),createBarrier(4,0))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertInflightData()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertOutput(sequence1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertOutput(sequence3)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final BufferOrEvent(( sequence1 = addSequence(inputGate,createBuffer(0),createBuffer(1),createBuffer(2),createBarrier(1,1),createBarrier(1,2),createBarrier(1,0))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertOutput(sequence5)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertInflightData()@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertInflightData(sequence5(4(,sequence5(5(,sequence5(6(,sequence5(10()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testEarlyCleanup['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final BufferOrEvent(( sequence2 = addSequence(inputGate,createBuffer(2),createBuffer(1),createBuffer(0),createBarrier(2,1),createBuffer(1),createBuffer(1),createEndOfPartition(1),createBuffer(0),createBuffer(2),createBarrier(2,2),createBuffer(2),createEndOfPartition(2),createBuffer(0),createEndOfPartition(0))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertInflightData()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "BufferOrEvent(( sequence2 = addSequence(inputGate,createBuffer(0),createBuffer(0),createBuffer(1),createBuffer(1),createBuffer(2),createBarrier(2,0),createBarrier(2,1),createBarrier(2,2))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertInflightData()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "BufferOrEvent(( sequence5 = addSequence(inputGate,createBuffer(0),createBuffer(2),createBuffer(0),createBarrier(5,1),createBuffer(2),createBuffer(0),createBuffer(2),createBuffer(1),createBarrier(5,2),createBuffer(1),createBuffer(0),createBuffer(2),createBuffer(1),createBarrier(5,0))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertInflightData(sequence1(7()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->6 [style = bold, label=""];
13->24 [style = solid, label="sequence1"];
3->24 [style = bold, label=""];
13->2 [style = solid, label="sequence1"];
8->9 [style = bold, label=""];
21->22 [style = bold, label=""];
0->15 [style = solid, label="inputGate"];
7->10 [style = bold, label=""];
1->8 [style = bold, label=""];
6->2 [style = solid, label="sequence1"];
27->23 [style = bold, label=""];
11->6 [style = solid, label="inputGate"];
28->8 [style = bold, label=""];
6->13 [style = dashed, label="0"];
10->11 [style = bold, label=""];
1->8 [style = solid, label="sequence2"];
11->6 [style = bold, label=""];
22->31 [style = bold, label=""];
0->13 [style = bold, label=""];
0->16 [style = solid, label="inputGate"];
10->0 [style = solid, label="handler"];
0->1 [style = solid, label="inputGate"];
0->28 [style = solid, label="inputGate"];
15->26 [style = solid, label="sequence6"];
22->31 [style = solid, label="sequence5"];
6->2 [style = bold, label=""];
4->1 [style = bold, label=""];
2->3 [style = bold, label=""];
26->14 [style = bold, label=""];
19->25 [style = bold, label=""];
12->10 [style = bold, label=""];
20->21 [style = bold, label=""];
22->17 [style = solid, label="sequence5"];
0->11 [style = dashed, label="0"];
16->30 [style = solid, label="sequence3"];
17->15 [style = bold, label=""];
1->28 [style = dashed, label="0"];
23->20 [style = bold, label=""];
15->26 [style = bold, label=""];
18->10 [style = bold, label=""];
29->17 [style = bold, label=""];
11->1 [style = solid, label="inputGate"];
10->11 [style = solid, label="handler"];
0->27 [style = solid, label="inputGate"];
0->13 [style = solid, label="inputGate"];
16->30 [style = bold, label=""];
31->29 [style = bold, label=""];
24->28 [style = bold, label=""];
25->27 [style = bold, label=""];
13->2 [style = bold, label=""];
9->5 [style = bold, label=""];
30->19 [style = bold, label=""];
5->16 [style = bold, label=""];
3->4 [style = bold, label=""];
10->0 [style = bold, label=""];
0->22 [style = solid, label="inputGate"];
0->6 [style = solid, label="inputGate"];
4->24 [style = dashed, label="0"];
28->8 [style = solid, label="sequence2"];
}
