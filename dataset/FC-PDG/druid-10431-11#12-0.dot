digraph {
6 [style = filled, label = "CoordinatorStats stats = rule.run(null,makeCoordinartorRuntimeParams(druidCluster,smallSegment,largeSegments.get(0),largeSegments.get(1),largeSegments.get(2),largeSegments2.get(0),largeSegments2.get(1)),smallSegment)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(holdersOfLargeSegments2.stream().allMatch(null))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertTrue(druidCluster.getAllServers().stream().allMatch(null))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testBroadcastToMultipleDataSources['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(5L,stats.getGlobalStat(LoadRule.ASSIGNED_COUNT))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(6L,stats.getGlobalStat(LoadRule.ASSIGNED_COUNT))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testBroadcastToAllServers['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertFalse(stats.hasPerTierStats())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertFalse(holderOfSmallSegment.getPeon().getSegmentsToLoad().contains(smallSegment))@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testBroadcastToMultipleDataSources['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertTrue(holdersOfLargeSegments.stream().allMatch(null))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(ImmutableList.of(\"large_source\",\"large_source2\"))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6->3 [style = bold, label=""];
12->13 [style = bold, label=""];
1->8 [style = dashed, label="0"];
5->2 [style = bold, label=""];
8->6 [style = bold, label=""];
1->6 [style = bold, label=""];
1->13 [style = dashed, label="0"];
2->7 [style = bold, label=""];
13->6 [style = bold, label=""];
3->10 [style = dashed, label="0"];
4->11 [style = bold, label=""];
5->11 [style = dashed, label="0"];
9->8 [style = bold, label=""];
4->5 [style = bold, label=""];
3->4 [style = bold, label=""];
0->1 [style = bold, label=""];
6->10 [style = bold, label=""];
10->4 [style = bold, label=""];
}
