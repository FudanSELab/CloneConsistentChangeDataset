digraph {
35 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),timing.session(),timing.connection(),new RetryOneTime(1))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),timing.session(),timing.connection(),new RetryOneTime(10))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "client.getZookeeperClient().setRetryPolicy(new RetryOneTime(100))@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "testRetry['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "semaphore.drainPermits()@@@28@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "client.checkExists().inBackground().forPath(\"/hey\")@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES,timing.forWaiting().seconds(),TimeUnit.SECONDS),\"Remaining leases: \" + semaphore.availablePermits())@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "final File tempDirectory = server.getTempDirectory()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "retries.set(0)@@@29@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final int serverPort = server.getPort()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testNestedCalls['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "server.stop()@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "CountDownLatch latch = new CountDownLatch(1)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "semaphore.drainPermits()@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final int MAX_RETRIES = 3@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertTrue(latch.await(10,TimeUnit.SECONDS))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "server.stop()@@@25@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "client.checkExists().forPath(\"/hey\")@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "RetryPolicy policy = new RetryPolicy(){@Override public boolean allowRetry(int retryCount,long elapsedTimeMs,RetrySleeper sleeper){semaphore.release()if (retries.incrementAndGet() == MAX_RETRIES) {try {server = new TestingServer(serverPort,tempDirectory)}catch (Exception e) }try {sleeper.sleepFor(100,TimeUnit.MILLISECONDS)}catch (InterruptedException e) return true}}@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@45@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES,timing.forWaiting().seconds(),TimeUnit.SECONDS),\"Remaining leases: \" + semaphore.availablePermits())@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "client.getZookeeperClient().setRetryPolicy(policy)@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "retries.set(0)@@@40@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "testRetry['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "client.checkExists().forPath(\"/hey\")@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "client.getZookeeperClient().setRetryPolicy(policy)@@@38@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "client.checkExists().inBackground().forPath(\"/hey\")@@@31@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "client.getCuratorListenable().addListener(new CuratorListener(){@Override public void eventReceived(CuratorFramework client,CuratorEvent event){if (event.getType() == CuratorEventType.EXISTS) {Stat stat = client.checkExists().forPath(\"/yo/yo/yo\")Assert.assertNull(stat)client.create().inBackground(event.getContext()).forPath(\"/what\")}if (event.getType() == CuratorEventType.CREATE) {((CountDownLatch)event.getContext()).countDown()}}})@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final Semaphore semaphore = new Semaphore(0)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "client.checkExists().inBackground(latch).forPath(\"/hey\")@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "client.start()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "server.stop()@@@30@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final AtomicInteger retries = new AtomicInteger(0)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "client.getZookeeperClient().setRetryPolicy(new RetryPolicy(){@Override public boolean allowRetry(int retryCount,long elapsedTimeMs,RetrySleeper sleeper){semaphore.release()if (retries.incrementAndGet() == MAX_RETRIES) {try {server = new TestingServer(serverPort)}catch (Exception e) }return true}})@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@37@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "server.stop()@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22->26 [style = bold, label=""];
8->16 [style = bold, label=""];
4->3 [style = bold, label=""];
15->18 [style = solid, label="MAX_RETRIES"];
17->5 [style = bold, label=""];
16->13 [style = bold, label=""];
28->21 [style = solid, label="policy"];
29->5 [style = bold, label=""];
7->1 [style = bold, label=""];
30->33 [style = bold, label=""];
19->20 [style = bold, label=""];
16->24 [style = bold, label=""];
8->16 [style = dotted, label="true"];
14->22 [style = bold, label=""];
23->15 [style = bold, label=""];
35->32 [style = bold, label=""];
14->22 [style = dashed, label="0"];
28->20 [style = solid, label="policy"];
20->6 [style = bold, label=""];
26->19 [style = bold, label=""];
14->33 [style = dashed, label="0"];
12->6 [style = bold, label=""];
15->14 [style = solid, label="MAX_RETRIES"];
2->30 [style = dashed, label="0"];
17->28 [style = solid, label="serverPort"];
3->0 [style = bold, label=""];
1->9 [style = bold, label=""];
11->15 [style = bold, label=""];
14->7 [style = bold, label=""];
21->2 [style = bold, label=""];
17->18 [style = solid, label="serverPort"];
6->27 [style = bold, label=""];
36->30 [style = bold, label=""];
15->17 [style = bold, label=""];
28->21 [style = bold, label=""];
35->31 [style = solid, label="client"];
18->10 [style = bold, label=""];
6->24 [style = dashed, label="0"];
24->25 [style = bold, label=""];
15->28 [style = solid, label="MAX_RETRIES"];
6->13 [style = bold, label=""];
2->14 [style = bold, label=""];
5->4 [style = bold, label=""];
5->13 [style = solid, label="client"];
18->28 [style = dashed, label="0"];
33->31 [style = bold, label=""];
5->25 [style = solid, label="client"];
15->22 [style = solid, label="MAX_RETRIES"];
0->18 [style = bold, label=""];
10->2 [style = bold, label=""];
4->36 [style = bold, label=""];
32->4 [style = bold, label=""];
9->12 [style = bold, label=""];
34->35 [style = bold, label=""];
15->6 [style = solid, label="MAX_RETRIES"];
29->28 [style = solid, label="tempDirectory"];
17->29 [style = bold, label=""];
27->8 [style = bold, label=""];
0->28 [style = bold, label=""];
15->24 [style = solid, label="MAX_RETRIES"];
}
