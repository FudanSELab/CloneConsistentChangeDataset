digraph {
30 [style = filled, label = "fail(\"Should error out on a self-included file.\")@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "{}@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(\"t3.value\",props.getString(\"string.prop\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TypedProperties props = cfg.getConfig()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(true,props.getBoolean(\"boolean.prop\",false))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertEquals(456,props.getInteger(\"bad.int.prop\",456))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testIncludes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(\"str\",props.getString(\"string.prop\",\"default\"))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(8578494434L,props.getLong(\"bad.long.prop\",8578494434L))@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(123,props.getInteger(\"int.prop\"))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "IllegalArgumentException iae@@@10@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "assertFalse(props.getBoolean(\"bad.boolean.prop\",false))@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "props.getString(\"invalid.key\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(1354354354,props.getLong(\"long.prop\",8578494434L))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testParsing['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "fail(\"Should error out here.\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "DFSPropertiesConfiguration cfg = new DFSPropertiesConfiguration(dfs,new Path(dfsBasePath + \"/t1.props\"))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertTrue(props.getBoolean(\"boolean.prop\",false))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "new DFSPropertiesConfiguration(dfs,new Path(dfsBasePath + \"/t4.props\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(true,props.getBoolean(\"boolean.prop\"))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertTrue(props.getBoolean(\"boolean.prop\"))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertEquals(223.4,props.getDouble(\"bad.double.prop\",223.4),0.001)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "IllegalArgumentException iae@@@10@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(123,props.getInteger(\"int.prop\",456))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(113.4,props.getDouble(\"double.prop\",223.4),0.001)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "DFSPropertiesConfiguration cfg = new DFSPropertiesConfiguration(dfs,new Path(dfsBasePath + \"/t3.props\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(false,props.getBoolean(\"bad.boolean.prop\",false))@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertEquals(113.4,props.getDouble(\"double.prop\"),0.001)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(1354354354,props.getLong(\"long.prop\"))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(243.4,props.getDouble(\"double.prop\"),0.001)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(\"default\",props.getString(\"bad.string.prop\",\"default\"))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(\"str\",props.getString(\"string.prop\"))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testParsing['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertEquals(5,props.size())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->25 [style = bold, label=""];
24->12 [style = bold, label=""];
27->1 [style = bold, label=""];
7->17 [style = bold, label=""];
22->19 [style = bold, label=""];
11->14 [style = bold, label=""];
2->3 [style = bold, label=""];
20->28 [style = dashed, label="0"];
25->18 [style = bold, label=""];
33->10 [style = bold, label=""];
10->32 [style = bold, label=""];
0->27 [style = dashed, label="0"];
13->25 [style = dashed, label="0"];
19->6 [style = bold, label=""];
32->30 [style = bold, label=""];
17->29 [style = dashed, label="0"];
22->23 [style = bold, label=""];
12->7 [style = bold, label=""];
20->2 [style = bold, label=""];
21->5 [style = bold, label=""];
28->2 [style = bold, label=""];
19->23 [style = dashed, label="0"];
18->10 [style = bold, label=""];
14->0 [style = bold, label=""];
18->33 [style = dashed, label="0"];
1->16 [style = bold, label=""];
0->1 [style = bold, label=""];
15->20 [style = bold, label=""];
23->6 [style = bold, label=""];
6->8 [style = bold, label=""];
10->4 [style = bold, label=""];
5->7 [style = bold, label=""];
3->21 [style = bold, label=""];
17->13 [style = bold, label=""];
9->12 [style = bold, label=""];
14->27 [style = bold, label=""];
2->7 [style = bold, label=""];
31->28 [style = bold, label=""];
13->33 [style = bold, label=""];
8->11 [style = bold, label=""];
4->22 [style = bold, label=""];
26->20 [style = bold, label=""];
13->18 [style = bold, label=""];
7->29 [style = bold, label=""];
29->13 [style = bold, label=""];
}
