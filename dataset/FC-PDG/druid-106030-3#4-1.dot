digraph {
13 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"(|| (== (+ x y) j.z) (== z j.zz))\"),exprsToStrings(analysis.getNonEquiConditions()))@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final String expression = \"x == 1\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertFalse(analysis.isAlwaysTrue())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(ImmutableList.of(Pair.of(\"x\",\"y\")),equalitiesToPairs(analysis.getEquiConditions()))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"(== x 1)\"),exprsToStrings(analysis.getNonEquiConditions()))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertFalse(analysis.isAlwaysFalse())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "test_forExpression_onlyLeft['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(expression,analysis.getOriginalExpression())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "test_forExpression_mixedAndWithOr['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final JoinConditionAnalysis analysis = analyze(expression)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertFalse(analysis.canHashJoin())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "test_forExpression_onlyLeft['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(analysis.getRightEquiConditionKeys().isEmpty())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "final String expression = \"(x == \"j.y\") && ((x + y == \"j.z\") || (z == \"j.zz\"))\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(ImmutableList.of(),equalitiesToPairs(analysis.getEquiConditions()))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->6 [style = solid, label="expression"];
4->3 [style = bold, label=""];
3->2 [style = solid, label="expression"];
11->6 [style = bold, label=""];
3->6 [style = solid, label="expression"];
3->6 [style = bold, label=""];
10->3 [style = bold, label=""];
1->0 [style = bold, label=""];
0->12 [style = dashed, label="0"];
8->13 [style = dashed, label="0"];
6->2 [style = bold, label=""];
12->13 [style = bold, label=""];
5->1 [style = bold, label=""];
7->5 [style = bold, label=""];
11->2 [style = solid, label="expression"];
0->8 [style = bold, label=""];
8->9 [style = bold, label=""];
1->12 [style = bold, label=""];
2->7 [style = bold, label=""];
14->11 [style = bold, label=""];
3->11 [style = dashed, label="0"];
}
