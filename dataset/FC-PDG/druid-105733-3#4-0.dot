digraph {
10 [style = filled, label = "List<Result<TimeBoundaryResultValue>> expectedResults = Collections.singletonList(new Result<TimeBoundaryResultValue>(DateTimes.of(\"2011-01-12T00:00:00.000Z\"),new TimeBoundaryResultValue(ImmutableMap.of(TimeBoundaryQuery.MIN_TIME,DateTimes.of(\"2011-01-12T00:00:00.000Z\"),TimeBoundaryQuery.MAX_TIME,DateTimes.of(\"2011-01-15T00:00:00.000Z\")))))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "List<Result<TimeBoundaryResultValue>> expectedResults = Collections.singletonList(new Result<TimeBoundaryResultValue>(DateTimes.of(\"2011-01-12T00:00:00.000Z\"),new TimeBoundaryResultValue(ImmutableMap.of(TimeBoundaryQuery.MIN_TIME,DateTimes.of(\"2011-01-12T00:00:00.000Z\"),TimeBoundaryQuery.MAX_TIME,DateTimes.of(\"2011-01-15T02:00:00.000Z\")))))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "TestHelper.assertExpectedResults(expectedResults,runner.run(QueryPlus.wrap(query),context))@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testTimeBoundary['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "TimeBoundaryQuery query = Druids.newTimeBoundaryQueryBuilder().dataSource(dataSource).build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "HashMap<String,Object> context = new HashMap<String,Object>()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testTimeBoundary['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "QueryRunner runner = TestQueryRunners.makeTimeBoundaryQueryRunner(segment)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "List<Result<TimeBoundaryResultValue>> expectedResults = Collections.singletonList(new Result<>(DateTimes.of(\"2011-01-12T00:00:00.000Z\"),new TimeBoundaryResultValue(ImmutableMap.of(TimeBoundaryQuery.MIN_TIME,DateTimes.of(\"2011-01-12T00:00:00.000Z\"),TimeBoundaryQuery.MAX_TIME,DateTimes.of(\"2011-01-15T02:00:00.000Z\")))))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "QueryRunner runner = TestQueryRunners.makeTimeBoundaryQueryRunner(segment2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testTimeBoundary2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
4->5 [style = solid, label="context"];
8->10 [style = bold, label=""];
1->2 [style = bold, label=""];
3->5 [style = solid, label="expectedResults"];
3->10 [style = dashed, label="0"];
7->1 [style = bold, label=""];
6->7 [style = bold, label=""];
3->1 [style = bold, label=""];
10->1 [style = bold, label=""];
2->9 [style = dashed, label="0"];
2->4 [style = bold, label=""];
4->5 [style = bold, label=""];
7->5 [style = solid, label="expectedResults"];
3->7 [style = dashed, label="0"];
1->9 [style = bold, label=""];
9->4 [style = bold, label=""];
1->5 [style = solid, label="query"];
10->5 [style = solid, label="expectedResults"];
}
