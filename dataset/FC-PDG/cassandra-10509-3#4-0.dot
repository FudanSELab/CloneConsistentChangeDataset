digraph {
27 [style = filled, label = "assertEquals(expected,size)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "savedMap.put(k,CacheService.instance.keyCache.get(k))@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertEquals(expected.columnsIndex(),actual.columnsIndex())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "RowIndexEntry expected = entry.getValue()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ColumnFamilyStore store = Keyspace.open(KEYSPACE1).getColumnFamilyStore(COLUMN_FAMILY2)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertKeyCacheSize['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertKeyCacheSize(0,KEYSPACE1,COLUMN_FAMILY2)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "String columnFamily@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(expected.position,actual.position)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "int expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "CacheService.instance.invalidateKeyCache()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "SchemaLoader.insertData(KEYSPACE1,COLUMN_FAMILY2,0,100)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "k.desc.ksname.equals(KEYSPACE1) && k.desc.cfname.equals(COLUMN_FAMILY2)@@@13@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "k.desc.ksname.equals(KEYSPACE1) && k.desc.cfname.equals(COLUMN_FAMILY2)@@@13@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "size++@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertKeyCacheSize(100,KEYSPACE1,COLUMN_FAMILY2)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "insertData(KEYSPACE1,COLUMN_FAMILY2,0,100)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "SchemaLoader.readData(KEYSPACE1,COLUMN_FAMILY2,0,100)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "CompactionManager.instance.disableAutoCompaction()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "CacheService.instance.keyCache.loadSaved(store)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "k.desc.ksname.equals(keyspace) && k.desc.cfname.equals(columnFamily)@@@5@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "RowIndexEntry actual = CacheService.instance.keyCache.get(entry.getKey())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testKeyCacheLoad['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Map<KeyCacheKey,RowIndexEntry> savedMap = new HashMap<KeyCacheKey,RowIndexEntry>()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "CacheService.instance.invalidateKeyCache()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertKeyCacheSize(0,KEYSPACE1,COLUMN_FAMILY2)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(expected.deletionTime(),actual.deletionTime())@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testKeyCacheLoad['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "int size = 0@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "String keyspace@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "readData(KEYSPACE1,COLUMN_FAMILY2,0,100)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertKeyCacheSize(savedMap.size(),KEYSPACE1,COLUMN_FAMILY2)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "store.forceBlockingFlush()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expected.isIndexed()@@@25@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6->17 [style = bold, label=""];
11->20 [style = bold, label=""];
30->28 [style = solid, label="columnFamily"];
10->8 [style = dotted, label="true"];
28->31 [style = dotted, label="true"];
29->31 [style = solid, label="size"];
16->18 [style = bold, label=""];
0->5 [style = dotted, label="true"];
9->11 [style = bold, label=""];
23->5 [style = bold, label=""];
5->23 [style = bold, label=""];
3->24 [style = bold, label=""];
10->14 [style = bold, label=""];
33->32 [style = dotted, label="true"];
26->3 [style = bold, label=""];
17->9 [style = bold, label=""];
28->31 [style = bold, label=""];
5->23 [style = dotted, label="true"];
33->34 [style = dotted, label="true"];
23->15 [style = bold, label=""];
8->14 [style = bold, label=""];
5->15 [style = bold, label=""];
31->27 [style = solid, label="size"];
20->3 [style = bold, label=""];
7->4 [style = bold, label=""];
15->19 [style = bold, label=""];
25->6 [style = bold, label=""];
12->1 [style = bold, label=""];
17->12 [style = solid, label="store"];
33->30 [style = dotted, label="true"];
0->15 [style = bold, label=""];
4->0 [style = bold, label=""];
33->29 [style = bold, label=""];
29->28 [style = bold, label=""];
11->26 [style = bold, label=""];
18->10 [style = bold, label=""];
5->0 [style = bold, label=""];
10->8 [style = bold, label=""];
31->27 [style = bold, label=""];
34->27 [style = solid, label="expected"];
22->12 [style = bold, label=""];
29->27 [style = solid, label="size"];
21->7 [style = bold, label=""];
3->21 [style = bold, label=""];
1->14 [style = bold, label=""];
14->2 [style = bold, label=""];
28->27 [style = bold, label=""];
31->28 [style = bold, label=""];
13->6 [style = bold, label=""];
32->28 [style = solid, label="keyspace"];
24->7 [style = bold, label=""];
21->24 [style = dashed, label="0"];
19->22 [style = bold, label=""];
4->5 [style = bold, label=""];
0->5 [style = bold, label=""];
20->26 [style = dashed, label="0"];
2->16 [style = bold, label=""];
}
