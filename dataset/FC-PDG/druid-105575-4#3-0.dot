digraph {
20 [style = filled, label = "Assert.assertEquals(vals(i(,columnarInts.get(i))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "ColumnarInts columnarInts = supplierFromByteBuffer.get()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "checkSerializedSizeAndData['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(writtenLength,supplierFromList.getSerializedSize())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "CompressedVSizeColumnarIntsSerializer writer = new CompressedVSizeColumnarIntsSerializer(segmentWriteOutMedium,\"test\",vals.length > 0? Ints.max(vals): 0,chunkSize,byteOrder,compressionStrategy)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "writer.addValue(val)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final WriteOutBytes writeOutBytes = segmentWriteOutMedium.makeWriteOutBytes()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "CompressedVSizeColumnarIntsSupplier supplierFromByteBuffer = CompressedVSizeColumnarIntsSupplier.fromByteBuffer(ByteBuffer.wrap(IOUtils.toByteArray(writeOutBytes.asInputStream())),byteOrder)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "long writtenLength = writer.getSerializedSize()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "writer.writeTo(writeOutBytes,smoosher)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "CloseQuietly.close(columnarInts)@@@22@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(vals.length,columnarInts.size())@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "++i@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "CompressedColumnarIntsSupplier supplierFromByteBuffer = CompressedColumnarIntsSupplier.fromByteBuffer(ByteBuffer.wrap(IOUtils.toByteArray(writeOutBytes.asInputStream())),byteOrder)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "smoosher.close()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "CompressedVSizeColumnarIntsSupplier supplierFromList = CompressedVSizeColumnarIntsSupplier.fromList(IntArrayList.wrap(vals),vals.length > 0? Ints.max(vals): 0,chunkSize,byteOrder,compressionStrategy,segmentWriteOutMedium.getCloser())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "int chunkFactor@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "checkSerializedSizeAndData['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "int chunkSize@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "i < vals.length@@@18@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "CompressedColumnarIntsSerializer writer = new CompressedColumnarIntsSerializer(segmentWriteOutMedium,\"test\",chunkFactor,byteOrder,compressionStrategy)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(writtenLength,supplierFromList.getSerializedSize())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(vals(i(,columnarInts.get(i))@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "CompressedColumnarIntsSupplier supplierFromList = CompressedColumnarIntsSupplier.fromList(IntArrayList.wrap(vals),chunkFactor,byteOrder,compressionStrategy,segmentWriteOutMedium.getCloser())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "checkSerializedSizeAndData['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "Assert.assertEquals(vals.length,columnarInts.size())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "writer.open()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int i = 0@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "FileSmoosher smoosher = new FileSmoosher(temporaryFolder.newFolder())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24->10 [style = bold, label=""];
21->10 [style = bold, label=""];
16->13 [style = bold, label=""];
15->20 [style = dashed, label="0"];
16->0 [style = solid, label="writtenLength"];
0->26 [style = bold, label=""];
19->2 [style = solid, label="chunkFactor"];
5->20 [style = solid, label="i"];
7->10 [style = bold, label=""];
7->19 [style = dotted, label="true"];
2->1 [style = bold, label=""];
1->27 [style = dashed, label="0"];
0->23 [style = dashed, label="0"];
11->6 [style = bold, label=""];
16->23 [style = solid, label="writtenLength"];
18->15 [style = bold, label=""];
14->22 [style = bold, label=""];
26->14 [style = bold, label=""];
18->17 [style = bold, label=""];
14->17 [style = solid, label="columnarInts"];
8->14 [style = bold, label=""];
18->15 [style = dotted, label="true"];
9->22 [style = dashed, label="0"];
5->18 [style = bold, label=""];
20->3 [style = bold, label=""];
19->1 [style = solid, label="chunkFactor"];
18->20 [style = dotted, label="true"];
23->8 [style = bold, label=""];
15->3 [style = bold, label=""];
24->28 [style = dotted, label="true"];
13->12 [style = solid, label="writeOutBytes"];
22->5 [style = bold, label=""];
4->0 [style = bold, label=""];
1->11 [style = bold, label=""];
3->18 [style = bold, label=""];
25->27 [style = bold, label=""];
18->20 [style = bold, label=""];
28->25 [style = solid, label="chunkSize"];
10->12 [style = solid, label="smoosher"];
13->12 [style = bold, label=""];
27->11 [style = bold, label=""];
12->4 [style = bold, label=""];
10->25 [style = bold, label=""];
6->16 [style = bold, label=""];
5->15 [style = solid, label="i"];
21->19 [style = dotted, label="true"];
18->3 [style = dotted, label="true"];
28->27 [style = solid, label="chunkSize"];
5->18 [style = solid, label="i"];
0->8 [style = bold, label=""];
2->25 [style = dashed, label="0"];
9->5 [style = bold, label=""];
14->9 [style = bold, label=""];
10->2 [style = bold, label=""];
19->28 [style = dashed, label="0"];
4->23 [style = bold, label=""];
14->5 [style = bold, label=""];
8->26 [style = dashed, label="0"];
}
