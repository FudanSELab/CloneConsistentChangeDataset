digraph {
0 [style = filled, label = "assertTrue(expressionString.contains(\"sort=\"a_f asc, a_i asc\"\"))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(expressionString.contains(\"fl=\"id,a_s,a_i,a_f\"\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(expressionString.contains(\"stats(collection1,\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testJDBCStream['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "stream = new JDBCStream(StreamExpressionParser.parse(\"jdbc(connection=\"jdbc:hsqldb:mem:.\", sql=\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\", sort=\"ID asc\")\"),factory)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertTrue(expressionString.contains(\"count(*)\"))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(expressionString.contains(\"min(a_i)\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(expressionString.contains(\"q=\"*:*\"\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "StatsStream stream@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertTrue(expressionString.contains(\"sort=\"ID asc\"\"))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "JDBCStream stream@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testStatsStream['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertTrue(expressionString.contains(\"sql=\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\"\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertTrue(expressionString.contains(\"sum(a_i)\"))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(expressionString.contains(\"jdbc(connection=\"jdbc:hsqldb:mem:.\",\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testStatsStream['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "stream = new StatsStream(StreamExpressionParser.parse(\"stats(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\", sum(a_i), avg(a_i), count(*), min(a_i), max(a_i))\"),factory)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "String expressionString@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(expressionString.contains(\"avg(a_i,false)\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expressionString = stream.toExpression(factory).toString()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(expressionString.contains(\"max(a_i)\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->9 [style = bold, label=""];
6->3 [style = bold, label=""];
8->16 [style = dashed, label="0"];
19->18 [style = bold, label=""];
2->19 [style = bold, label=""];
12->20 [style = dashed, label="0"];
9->18 [style = dashed, label="0"];
11->6 [style = bold, label=""];
14->10 [style = bold, label=""];
0->11 [style = bold, label=""];
10->17 [style = bold, label=""];
9->8 [style = bold, label=""];
2->4 [style = bold, label=""];
20->10 [style = bold, label=""];
8->0 [style = bold, label=""];
5->2 [style = bold, label=""];
12->10 [style = bold, label=""];
10->5 [style = bold, label=""];
17->2 [style = bold, label=""];
13->7 [style = bold, label=""];
15->20 [style = bold, label=""];
1->12 [style = bold, label=""];
3->13 [style = bold, label=""];
4->19 [style = dashed, label="0"];
10->2 [style = bold, label=""];
18->16 [style = bold, label=""];
}
