digraph {
10 [style = filled, label = "return new BindingDetails(ImmutableSet.copyOf(Sets.union(freeVariables,arrayIdentifiers)),scalarVariables,ImmutableSet.copyOf(Sets.union(arrayVariables,arrayIdentifiers)),hasInputArrays || !arrayArguments.isEmpty(),isOutputArray)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Set<Expr> scalarArguments@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "withScalarArguments['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final boolean isIdentiferExpr = expr.getIdentifierExprIfIdentifierExpr() != null@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "moreScalars.add((IdentifierExpr)expr)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "withArrayArguments['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "return new BindingAnalysis(ImmutableSet.copyOf(Sets.union(freeVariables,moreScalars)),ImmutableSet.copyOf(Sets.union(scalarVariables,moreScalars)),arrayVariables,hasInputArrays,isOutputArray)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Set<IdentifierExpr> moreScalars = new HashSet<>()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "isIdentifierExpr@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "withScalarArguments['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Set<Expr> arrayArguments@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "return new BindingDetails(ImmutableSet.copyOf(Sets.union(freeVariables,moreScalars)),ImmutableSet.copyOf(Sets.union(scalarVariables,moreScalars)),arrayVariables,hasInputArrays,isOutputArray)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Set<IdentifierExpr> arrayIdentifiers = new HashSet<>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final boolean isIdentifierExpr = expr.getIdentifierExprIfIdentifierExpr() != null@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "arrayIdentifiers.add((IdentifierExpr)expr)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "isIdentiferExpr@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Set<Expr> scalarArguments@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
6->3 [style = bold, label=""];
15->10 [style = bold, label=""];
15->13 [style = bold, label=""];
5->14 [style = dashed, label="0"];
2->0 [style = dotted, label="true"];
4->2 [style = solid, label="isIdentiferExpr"];
2->1 [style = bold, label=""];
12->10 [style = solid, label="arrayIdentifiers"];
0->15 [style = dashed, label="0"];
4->2 [style = bold, label=""];
1->10 [style = dashed, label="0"];
2->4 [style = bold, label=""];
3->4 [style = bold, label=""];
13->11 [style = bold, label=""];
11->15 [style = bold, label=""];
12->13 [style = bold, label=""];
3->8 [style = solid, label="moreScalars"];
6->5 [style = dotted, label="true"];
2->0 [style = bold, label=""];
3->12 [style = dashed, label="0"];
0->4 [style = bold, label=""];
11->10 [style = bold, label=""];
0->1 [style = bold, label=""];
11->13 [style = bold, label=""];
16->14 [style = dotted, label="true"];
0->8 [style = bold, label=""];
9->3 [style = bold, label=""];
2->11 [style = dashed, label="0"];
1->8 [style = dashed, label="0"];
13->11 [style = solid, label="isIdentifierExpr"];
9->7 [style = dotted, label="true"];
5->7 [style = dashed, label="0"];
11->15 [style = dotted, label="true"];
4->13 [style = dashed, label="0"];
16->12 [style = bold, label=""];
3->1 [style = solid, label="moreScalars"];
2->8 [style = bold, label=""];
}
