digraph {
8 [style = filled, label = "PowerMock.expectLastCall()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(e.getCause() instanceof NotAssignedException)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "NotAssignedException notAssignedException = (NotAssignedException)e.getCause()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "PowerMock.verifyAll()@@@31@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "PowerMock.expectLastCall()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "herder.restartConnector(CONN1,callback)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "FutureCallback<Void> callback = new FutureCallback<>()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "herder.restartTask(TASK0,callback)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "EasyMock.expect(member.ownerUrl(TASK0)).andReturn(ownerUrl)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "EasyMock.expect(member.memberId()).andStubReturn(\"leader\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "PowerMock.expectLastCall()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "PowerMock.replayAll()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "member.poll(EasyMock.anyInt())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testRestartConnectorRedirectToOwner['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expectRebalance(1,Collections.emptyList(),Collections.emptyList())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "EasyMock.expect(member.ownerUrl(CONN1)).andReturn(ownerUrl)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "herder.tick()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "String ownerUrl = \"ownerUrl\"@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "member.ensureActive()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "member.wakeup()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "EasyMock.expect(worker.ownsConnector(CONN1)).andReturn(false)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "herder.tick()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "member.poll(EasyMock.anyInt())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "expectPostRebalanceCatchup(SNAPSHOT)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "callback.get(1000L,TimeUnit.MILLISECONDS)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ExecutionException e@@@26@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "PowerMock.expectLastCall()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "EasyMock.expect(worker.ownsTask(TASK0)).andReturn(false)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(ownerUrl,notAssignedException.forwardUrl())@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testRestartTaskRedirectToOwner['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "String ownerUrl = \"ownerUrl\"@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testRestartConnectorRedirectToOwner['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "fail(\"Expected NotLeaderException to be raised\")@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->6 [style = dotted, label="true"];
6->17 [style = bold, label=""];
16->18 [style = bold, label=""];
9->0 [style = bold, label=""];
3->1 [style = bold, label=""];
10->14 [style = bold, label=""];
4->6 [style = bold, label=""];
25->13 [style = bold, label=""];
15->21 [style = bold, label=""];
31->32 [style = bold, label=""];
4->23 [style = dotted, label="true"];
29->31 [style = bold, label=""];
27->9 [style = bold, label=""];
10->28 [style = dashed, label="0"];
26->9 [style = bold, label=""];
30->9 [style = bold, label=""];
12->24 [style = bold, label=""];
13->11 [style = bold, label=""];
17->23 [style = bold, label=""];
0->15 [style = bold, label=""];
22->7 [style = bold, label=""];
2->12 [style = bold, label=""];
19->25 [style = bold, label=""];
8->22 [style = bold, label=""];
18->28 [style = bold, label=""];
28->14 [style = bold, label=""];
18->10 [style = solid, label="callback"];
5->16 [style = bold, label=""];
29->32 [style = solid, label="ownerUrl"];
7->5 [style = bold, label=""];
23->24 [style = bold, label=""];
22->7 [style = solid, label="ownerUrl"];
18->10 [style = bold, label=""];
22->20 [style = bold, label=""];
8->5 [style = bold, label=""];
32->1 [style = bold, label=""];
18->28 [style = solid, label="callback"];
11->8 [style = bold, label=""];
14->2 [style = bold, label=""];
20->7 [style = bold, label=""];
1->19 [style = bold, label=""];
4->17 [style = dotted, label="true"];
3->29 [style = bold, label=""];
21->3 [style = bold, label=""];
}
