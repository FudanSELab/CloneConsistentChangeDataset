digraph {
1 [style = filled, label = "PowerMockito.when(CallContext.current()).thenReturn(callContextMock)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "validateNetworkAclTestAclNotDefaulWithVpc['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "CallContext.current()@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Mockito.verify(entityManagerMock).findById(,networkMockVpcMockId)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Mockito.doReturn(Mockito.mock()).when(entityManagerMock).findById(,networkMockVpcMockId)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Mockito.verify(accountManagerMock).checkAccess(Mockito.any(),Mockito.isNull(),Mockito.eq(true),Mockito.any())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Mockito.when(nextAclRuleMock.getAclId()).thenReturn(networkAclMockId)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Mockito.when(previousAclRuleMock.getAclId()).thenReturn(networkAclMockId)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Mockito.verify(accountManagerMock).checkAccess(Mockito.any(),Mockito.isNull(),Mockito.eq(true),Mockito.any())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "PowerMockito.mockStatic()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Mockito.verify(entityManagerMock).findById(,networkMockVpcMockId)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "validateMoveAclRulesDataTestSuccesfullExecution['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "CallContext callContextMock = Mockito.mock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "PowerMockito.verifyStatic()@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Mockito.doReturn(Mockito.mock()).when(callContextMock).getCallingAccount()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "PowerMockito.mockStatic()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Mockito.doReturn(Mockito.mock()).when(callContextMock).getCallingAccount()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Mockito.doNothing().when(accountManagerMock).checkAccess(Mockito.any(),Mockito.isNull(),Mockito.eq(true),Mockito.any())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "PowerMockito.when(CallContext.current()).thenReturn(callContextMock)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "networkAclServiceImpl.validateNetworkAcl(networkAclMock)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Mockito.doReturn(networkAclMock).when(networkAclDaoMock).findById(networkAclMockId)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "networkAclServiceImpl.validateMoveAclRulesData(aclRuleBeingMovedMock,previousAclRuleMock,nextAclRuleMock)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "validateNetworkAclTestAclNotDefaulWithVpc['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "Mockito.verify(networkAclDaoMock).findById(networkAclMockId)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "CallContext callContextMock = Mockito.mock()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3->10 [style = bold, label=""];
8->14 [style = bold, label=""];
7->8 [style = bold, label=""];
20->16 [style = bold, label=""];
22->24 [style = bold, label=""];
13->14 [style = dashed, label="0"];
24->20 [style = bold, label=""];
0->7 [style = bold, label=""];
2->11 [style = bold, label=""];
13->23 [style = bold, label=""];
19->22 [style = bold, label=""];
14->12 [style = bold, label=""];
11->1 [style = bold, label=""];
15->6 [style = bold, label=""];
6->2 [style = bold, label=""];
9->6 [style = bold, label=""];
13->12 [style = bold, label=""];
0->23 [style = dashed, label="0"];
10->4 [style = bold, label=""];
6->1 [style = solid, label="callContextMock"];
8->13 [style = bold, label=""];
16->5 [style = bold, label=""];
18->21 [style = bold, label=""];
4->13 [style = bold, label=""];
5->3 [style = bold, label=""];
5->4 [style = solid, label="callContextMock"];
23->17 [style = bold, label=""];
4->0 [style = bold, label=""];
1->5 [style = bold, label=""];
17->18 [style = bold, label=""];
}
