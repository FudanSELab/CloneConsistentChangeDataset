digraph {
1 [style = filled, label = "expectRestoreToBeCompleted(consumer,changeLogReader)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(task00.state(),is(Task.State.RUNNING))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "shouldPropagateRuntimeExceptionsInProcessActiveTasks['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "verify(consumer)@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "task00.addRecords(partition,singletonList(getConsumerRecord(partition,0L)))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "replay(activeTaskCreator,consumer,changeLogReader)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final StateMachineTask task00 = new StateMachineTask(taskId00,taskId00Partitions,true){@Override public boolean process(final long wallClockTime){throw new RuntimeException(\"oops\")}}@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(taskId00Assignment))).andStubReturn(singletonList(task00))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "shouldPassUpIfExceptionDuringSuspend['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(taskId00Assignment))).andReturn(singletonList(task00))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThrows(,null)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "shouldPropagateRuntimeExceptionsInProcessActiveTasks['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "replay(activeTaskCreator,consumer,changeLogReader)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expectRestoreToBeCompleted(consumer,changeLogReader)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()),is(true))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "taskManager.handleAssignment(taskId00Assignment,emptyMap())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final RuntimeException exception = assertThrows(,null)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(exception.getMessage(),is(\"oops\"))@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final Task task00 = new StateMachineTask(taskId00,taskId00Partitions,true){@Override public void suspend(){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ca20d8throw new RuntimeException(\"KABOOM!\")}}@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(task00.state(),is(Task.State.SUSPENDED))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8->16 [style = bold, label=""];
0->19 [style = dashed, label="0"];
8->16 [style = dashed, label="0"];
10->2 [style = bold, label=""];
8->5 [style = bold, label=""];
14->18 [style = bold, label=""];
2->3 [style = solid, label="partition"];
13->0 [style = bold, label=""];
7->9 [style = bold, label=""];
1->12 [style = bold, label=""];
2->17 [style = dashed, label="0"];
6->11 [style = bold, label=""];
19->8 [style = bold, label=""];
1->8 [style = bold, label=""];
15->19 [style = bold, label=""];
17->14 [style = bold, label=""];
0->1 [style = bold, label=""];
2->17 [style = bold, label=""];
3->6 [style = bold, label=""];
2->3 [style = bold, label=""];
12->5 [style = bold, label=""];
8->12 [style = dashed, label="0"];
0->12 [style = solid, label="task00"];
16->7 [style = bold, label=""];
19->16 [style = solid, label="task00"];
5->7 [style = bold, label=""];
4->0 [style = bold, label=""];
9->10 [style = bold, label=""];
}
