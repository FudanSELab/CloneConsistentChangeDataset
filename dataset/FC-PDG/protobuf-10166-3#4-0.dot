digraph {
3 [style = filled, label = "assertEquals(m1,m2)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(m1.hashCode(),m2.hashCode())@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(m1.equals(m2)).isFalse()@@@19@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Message dynamicDefaultInstance = DynamicMessage.getDefaultInstance(TestMap.getDescriptor())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testReflectionEqualsAndHashCode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertFalse(m1.equals(m2))@@@19@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "FieldDescriptor field = f(\"int32_to_int32_field\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(m2.hashCode()).isEqualTo(m1.hashCode())@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "b2.addRepeatedField(field,newMapEntry(b2,\"int32_to_int32_field\",5,6))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "b1.addRepeatedField(field,newMapEntry(b1,\"int32_to_int32_field\",1,2))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "b2.addRepeatedField(field,newMapEntry(b2,\"int32_to_int32_field\",1,2))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Message m1 = b1.build()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "b1.addRepeatedField(field,newMapEntry(b1,\"int32_to_int32_field\",5,6))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testReflectionEqualsAndHashCode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "b1.addRepeatedField(field,newMapEntry(b1,\"int32_to_int32_field\",3,4))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "m2 = b2.build()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "b2.addRepeatedField(field,newMapEntry(b2,\"int32_to_int32_field\",3,4))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(m2).isEqualTo(m1)@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Message m2 = b2.build()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "b2.setRepeatedField(field,0,newMapEntry(b1,\"int32_to_int32_field\",0,0))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Message.Builder b1 = dynamicDefaultInstance.newBuilderForType()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Message.Builder b2 = dynamicDefaultInstance.newBuilderForType()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testReflectionEqualsAndHashCode['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3->19 [style = dashed, label="0"];
7->0 [style = solid, label="b1"];
8->9 [style = bold, label=""];
22->8 [style = bold, label=""];
12->4 [style = solid, label="m2"];
1->19 [style = solid, label="m1"];
4->21 [style = dashed, label="0"];
19->20 [style = bold, label=""];
12->4 [style = bold, label=""];
7->16 [style = bold, label=""];
12->21 [style = bold, label=""];
9->11 [style = solid, label="field"];
11->6 [style = bold, label=""];
6->19 [style = bold, label=""];
7->14 [style = solid, label="b1"];
2->17 [style = solid, label="b2"];
2->17 [style = bold, label=""];
6->3 [style = solid, label="m2"];
15->20 [style = dashed, label="0"];
10->1 [style = bold, label=""];
9->17 [style = solid, label="field"];
15->0 [style = bold, label=""];
2->5 [style = solid, label="b2"];
0->12 [style = bold, label=""];
5->11 [style = bold, label=""];
9->14 [style = solid, label="field"];
9->10 [style = solid, label="field"];
9->0 [style = solid, label="field"];
16->14 [style = bold, label=""];
6->3 [style = bold, label=""];
9->5 [style = solid, label="field"];
1->3 [style = solid, label="m1"];
3->15 [style = bold, label=""];
9->16 [style = solid, label="field"];
2->11 [style = solid, label="b2"];
7->16 [style = solid, label="b1"];
13->8 [style = bold, label=""];
18->8 [style = bold, label=""];
20->0 [style = bold, label=""];
14->10 [style = bold, label=""];
1->2 [style = bold, label=""];
17->5 [style = bold, label=""];
7->10 [style = solid, label="b1"];
9->7 [style = bold, label=""];
}
