digraph {
14 [style = filled, label = "assertThat(representation.getChar(\"value\"),is(Character.valueOf('a')))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(representation.getString(\"format\"),is(nullValue()))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "allowingObjectAdapterToReturn(\"aString\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "whenString['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "whenString['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertThat(representation.getString(\"extensions.x-isis-format\"),is(\"char\"))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "allowingObjectSpecToReturnSpecIdFor()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(representation.getString(\"value\"),is(\"aString\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "jsonValueEncoder.appendValueAndFormat(mockObjectAdapter,mockObjectSpec,representation,null,false)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "allowingLogicalTypeReturnObjectTypeFor()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "allowingObjectSpecToReturnSpecIdFor()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertThat(representation.getString(\"extensions.x-isis-format\"),is(\"string\"))@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "allowingObjectAdapterToReturn(Character.valueOf('a'))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(representation.isString(\"value\"),is(true))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "whenCharWrapper['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1->3 [style = bold, label=""];
6->5 [style = bold, label=""];
4->14 [style = dashed, label="0"];
4->1 [style = bold, label=""];
11->0 [style = bold, label=""];
6->8 [style = dashed, label="0"];
7->4 [style = bold, label=""];
6->13 [style = dashed, label="0"];
8->5 [style = bold, label=""];
5->0 [style = bold, label=""];
10->13 [style = bold, label=""];
9->8 [style = bold, label=""];
5->11 [style = dashed, label="0"];
3->12 [style = dashed, label="0"];
13->11 [style = bold, label=""];
2->6 [style = bold, label=""];
1->12 [style = bold, label=""];
14->1 [style = bold, label=""];
0->7 [style = bold, label=""];
7->14 [style = bold, label=""];
}
