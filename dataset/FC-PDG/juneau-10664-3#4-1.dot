digraph {
7 [style = filled, label = "t._enum(ASet.of())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "SchemaInfo t = new SchemaInfo()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertObject(t._enum()).isType().asJson().is(\"('foo','bar'(\")@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertOptional(t._enum()).isType().asJson().is(\"((\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertObject(t._enum()).isType().asJson().is(\"((\")@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "t.addEnum(ASet.of(\"foo\",\"bar\"))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "a22_enum['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "t._enum(ASet.of(\"foo\",\"bar\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertOptional(t._enum()).isType().asJson().is(\"('foo','bar','baz'(\")@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "a22_enum['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertOptional(t._enum()).isType().asJson().is(\"('foo','bar','baz'(\")@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertObject(t._enum()).isType().asJson().is(\"('foo','bar','baz'(\")@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertObject(t._enum()).isNull()@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "t.addEnum(null)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "t._enum((Collection<Object>)null)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertOptional(t._enum()).isType().asJson().is(\"('foo','bar'(\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertObject(t._enum()).isType().asJson().is(\"('foo','bar'(\")@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertObject(t._enum()).isType().asJson().is(\"('foo','bar','baz'(\")@@@15@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertOptional(t._enum()).isNull()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertOptional(t._enum()).isType().asJson().is(\"('foo','bar'(\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "ParameterInfo t = new ParameterInfo()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "a19_enum['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "t.addEnum(ASet.of(\"baz\"))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->8 [style = bold, label=""];
0->9 [style = bold, label=""];
11->1 [style = bold, label=""];
7->10 [style = bold, label=""];
0->19 [style = bold, label=""];
13->20 [style = dashed, label="0"];
16->7 [style = bold, label=""];
22->21 [style = bold, label=""];
5->17 [style = bold, label=""];
9->19 [style = dashed, label="0"];
3->20 [style = bold, label=""];
13->12 [style = bold, label=""];
15->11 [style = bold, label=""];
12->4 [style = bold, label=""];
1->16 [style = bold, label=""];
2->16 [style = dashed, label="0"];
6->11 [style = bold, label=""];
10->0 [style = bold, label=""];
21->1 [style = bold, label=""];
20->12 [style = bold, label=""];
12->14 [style = bold, label=""];
3->13 [style = bold, label=""];
7->18 [style = bold, label=""];
9->3 [style = bold, label=""];
8->17 [style = dashed, label="0"];
4->14 [style = dashed, label="0"];
1->2 [style = bold, label=""];
2->7 [style = bold, label=""];
4->5 [style = bold, label=""];
19->3 [style = bold, label=""];
18->0 [style = bold, label=""];
10->18 [style = dashed, label="0"];
14->5 [style = bold, label=""];
11->21 [style = dashed, label="0"];
}
