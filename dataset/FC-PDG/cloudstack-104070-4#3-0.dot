digraph {
9 [style = filled, label = "final List<PortForwardingRuleTO> rules = new ArrayList<PortForwardingRuleTO>()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final ConfigureStaticNatRulesOnLogicalRouterCommand cmd = mock()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "@SuppressWarnings(\"unchecked\") final List<NatRule> storedRules = Collections.EMPTY_LIST@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "when(cmd.getRules()).thenReturn(rules)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testConfigureStaticNatRulesOnLogicalRouterRollback['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertTrue(a.getResult())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final ConfigurePortForwardingRulesOnLogicalRouterCommand cmd = mock()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final NatRule(( rulepair = resource.generatePortForwardingRulePair(\"10.10.10.10\",new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@78c264,\"11.11.11.11\",new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@78c26a,\"tcp\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "when(nvpApi.findNatRulesByLogicalRouterUuid(\"aaaaa\")).thenReturn(storedRules)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "resource.configure(\"NiciraNvpResource\",parameters)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final ConfigurePortForwardingRulesOnLogicalRouterAnswer a = (ConfigurePortForwardingRulesOnLogicalRouterAnswer)resource.executeRequest(cmd)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertFalse(a.getResult())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final PortForwardingRuleTO rule = new PortForwardingRuleTO(1,\"11.11.11.11\",80,80,\"10.10.10.10\",8080,8080,\"tcp\",false,false)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final StaticNatRuleTO rule = new StaticNatRuleTO(1,\"11.11.11.11\",null,null,\"10.10.10.10\",null,null,null,false,false)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testConfigurePortForwardingRulesOnLogicalRouter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "testConfigurePortForwardingRulesOnLogicalRouter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "verify(nvpApi,atLeast(2)).createLogicalRouterNatRule(eq(\"aaaaa\"),argThat(new ArgumentMatcher<NatRule>(){@Override public boolean matches(final NatRule rule){if (rule.getType().equals(\"DestinationNatRule\") && ((DestinationNatRule)rule).getToDestinationIpAddress().equals(\"10.10.10.10\")) {return true}if (rule.getType().equals(\"SourceNatRule\") && ((SourceNatRule)rule).getToSourceIpAddressMin().equals(\"11.11.11.11\")) {return true}return false}}))@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final ConfigureStaticNatRulesOnLogicalRouterAnswer a = (ConfigureStaticNatRulesOnLogicalRouterAnswer)resource.executeRequest(cmd)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "rulepair(0(.setUuid(UUID.randomUUID())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final List<StaticNatRuleTO> rules = new ArrayList<StaticNatRuleTO>()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "when(nvpApi.createLogicalRouterNatRule(eq(\"aaaaa\"),(NatRule)any())).thenReturn(rulepair(0().thenThrow(new NiciraNvpApiException())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "rulepair(1(.setUuid(UUID.randomUUID())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "final NatRule(( rulepair = resource.generateStaticNatRulePair(\"10.10.10.10\",\"11.11.11.11\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "verify(nvpApi,atLeastOnce()).deleteLogicalRouterNatRule(eq(\"aaaaa\"),eq(rulepair(0(.getUuid()))@@@18@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "@SuppressWarnings(\"unchecked\") final List<NatRule> storedRules = Collections.EMPTY_LIST@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "when(cmd.getLogicalRouterUuid()).thenReturn(\"aaaaa\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "rules.add(rule)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "when(nvpApi.findNatRulesByLogicalRouterUuid(\"aaaaa\")).thenReturn(storedRules)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "when(nvpApi.createLogicalRouterNatRule(eq(\"aaaaa\"),(NatRule)any())).thenReturn(rulepair(0().thenReturn(rulepair(1()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28->21 [style = bold, label=""];
3->12 [style = solid, label="rule"];
11->3 [style = bold, label=""];
14->7 [style = bold, label=""];
11->20 [style = dashed, label="0"];
27->25 [style = bold, label=""];
15->8 [style = solid, label="storedRules"];
4->16 [style = bold, label=""];
13->6 [style = bold, label=""];
20->22 [style = bold, label=""];
12->1 [style = bold, label=""];
22->12 [style = solid, label="rule"];
7->19 [style = dashed, label="0"];
11->4 [style = solid, label="cmd"];
24->0 [style = bold, label=""];
0->11 [style = bold, label=""];
16->2 [style = bold, label=""];
26->19 [style = bold, label=""];
20->25 [style = solid, label="cmd"];
23->1 [style = solid, label="rules"];
0->20 [style = bold, label=""];
6->14 [style = bold, label=""];
9->12 [style = bold, label=""];
13->7 [style = solid, label="rulepair"];
18->27 [style = solid, label="storedRules"];
23->12 [style = bold, label=""];
7->4 [style = bold, label=""];
21->26 [style = bold, label=""];
3->9 [style = bold, label=""];
9->1 [style = solid, label="rules"];
8->13 [style = bold, label=""];
9->23 [style = dashed, label="0"];
22->23 [style = bold, label=""];
5->28 [style = bold, label=""];
18->27 [style = bold, label=""];
15->8 [style = bold, label=""];
19->18 [style = bold, label=""];
25->6 [style = bold, label=""];
17->0 [style = bold, label=""];
10->0 [style = bold, label=""];
5->15 [style = bold, label=""];
1->5 [style = bold, label=""];
}
