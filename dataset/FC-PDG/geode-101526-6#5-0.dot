digraph {
11 [style = filled, label = "LIFOList list = new LIFOList(controller)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "EvictionNode node = mock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "verify(stats).incEvaluations(anyLong())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "LRUListWithAsyncSorting list = new LRUListWithAsyncSorting(controller,executor,1)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "evictingFromNonEmptyListTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "LRUListWithAsyncSorting list = new LRUListWithAsyncSorting(controller,executor)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "evictingFromNonEmptyListTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(list.size()).isEqualTo(1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "evictingFromNonEmptyListTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "when(node.previous()).thenReturn(list.head)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(list.size()).isZero()@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(node.next()).thenReturn(list.tail)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "list.appendEntry(node)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(list.getEvictableEntry()).isSameAs(node)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->9 [style = dashed, label="0"];
1->2 [style = bold, label=""];
7->5 [style = bold, label=""];
10->9 [style = bold, label=""];
11->0 [style = bold, label=""];
0->6 [style = solid, label="node"];
9->0 [style = bold, label=""];
3->1 [style = bold, label=""];
5->0 [style = bold, label=""];
12->4 [style = bold, label=""];
0->6 [style = bold, label=""];
2->4 [style = bold, label=""];
13->11 [style = bold, label=""];
0->2 [style = solid, label="node"];
2->12 [style = bold, label=""];
6->8 [style = bold, label=""];
8->3 [style = bold, label=""];
}
