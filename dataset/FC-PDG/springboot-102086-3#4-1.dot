digraph {
10 [style = filled, label = "callbackInvokeAndWhenHasGenericShouldReturnResult['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "callbackInvokeAndWhenNoGenericShouldReturnResult['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertThat(result.get()).isEqualTo(123)@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "given(callbackInstance.handle(\"foo\")).willReturn(123)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "InvocationResult<Integer> result = LambdaSafe.callback(,callbackInstance,argument).invokeAnd(null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "String argument = \"foo\"@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "callbackInvokeAndWhenNoGenericShouldReturnResult['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "InvocationResult<Integer> result = LambdaSafe.callback(,callbackInstance,argument).invokeAnd(null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "StringFactory callbackInstance = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "NonGenericFactory callbackInstance = mock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(result.hasResult()).isTrue()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->8 [style = dashed, label="0"];
4->1 [style = bold, label=""];
3->5 [style = bold, label=""];
1->6 [style = bold, label=""];
6->0 [style = bold, label=""];
7->5 [style = bold, label=""];
8->4 [style = bold, label=""];
1->9 [style = bold, label=""];
9->0 [style = bold, label=""];
10->8 [style = bold, label=""];
5->4 [style = bold, label=""];
0->2 [style = bold, label=""];
6->9 [style = dashed, label="0"];
}
