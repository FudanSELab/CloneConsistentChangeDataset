digraph {
14 [style = filled, label = "Object second@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "doWork['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "return StatUtils.meanDifference(((List)first).stream().mapToDouble(null).toArray(),((List)second).stream().mapToDouble(null).toArray())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Object second@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "doWork['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ChebyshevDistance distance = new ChebyshevDistance()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "return distance.compute(((List)first).stream().mapToDouble(null).toArray(),((List)second).stream().mapToDouble(null).toArray())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "Object first@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory),first.getClass().getSimpleName()))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "null == second@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "null == first@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Object second@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "!(second instanceof List)@@@12@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory),first.getClass().getSimpleName()))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "doWork['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "return distance.compute(((List<?>)first).stream().mapToDouble(null).toArray(),((List<?>)second).stream().mapToDouble(null).toArray())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "!(first instanceof List)@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
10->18 [style = bold, label=""];
11->2 [style = solid, label="first"];
0->6 [style = bold, label=""];
9->2 [style = bold, label=""];
1->15 [style = bold, label=""];
9->11 [style = dotted, label="true"];
16->17 [style = dotted, label="true"];
4->18 [style = bold, label=""];
5->3 [style = dotted, label="true"];
16->2 [style = bold, label=""];
0->6 [style = dotted, label="true"];
3->0 [style = bold, label=""];
17->5 [style = solid, label="second"];
0->10 [style = bold, label=""];
8->5 [style = bold, label=""];
5->0 [style = bold, label=""];
7->5 [style = solid, label="second"];
14->5 [style = solid, label="second"];
6->10 [style = bold, label=""];
1->12 [style = bold, label=""];
10->4 [style = bold, label=""];
12->15 [style = dashed, label="0"];
13->11 [style = dotted, label="true"];
4->1 [style = bold, label=""];
10->4 [style = dotted, label="true"];
9->7 [style = dotted, label="true"];
13->14 [style = dotted, label="true"];
16->11 [style = dotted, label="true"];
10->1 [style = bold, label=""];
2->8 [style = dotted, label="true"];
2->8 [style = bold, label=""];
2->5 [style = bold, label=""];
13->2 [style = bold, label=""];
}
