digraph {
38 [style = filled, label = "NamedList<NamedList<Object>> idResult = documentResult.get(\"id\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
116 [style = filled, label = "assertNotNull(\"field_types should never be null\",fieldTypes)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
105 [style = filled, label = "request.addFieldType(\"charfilthtmlmap\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
100 [style = filled, label = "testHandleAnalysisRequest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
99 [style = filled, label = "tokenList = valueResult.get(\"org.apache.lucene.analysis.LowerCaseFilter\")@@@116@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
88 [style = filled, label = "assertNotNull(\"Expecting the 'StopFilter' to be applied on the index for the 'text' field\",tokenList)@@@138@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",4,7,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf36b,null,false))@@@140@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(\"Expecting 2 tokens to be present\",2,tokenList.size())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
115 [style = filled, label = "FieldAnalysisRequest request = new FieldAnalysisRequest()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "assertEquals(\"The 'whitetok' field has only a single value\",1,indexResult.size())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"the\",null,\"<ALPHANUM>\",20,23,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf328,null,false))@@@131@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"Over\",null,\"<ALPHANUM>\",15,19,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf1df,null,false))@@@86@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
112 [style = filled, label = "List<NamedList> tokenList = (List<NamedList>)indexPart.get(.getName())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "tokenList = valueResult.get(\"org.apache.lucene.analysis.en.PorterStemFilter\")@@@152@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
98 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(\"org.apache.lucene.analysis.LowerCaseFilter\")@@@53@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
117 [style = filled, label = "assertNotNull(\"Expecting MockTokenizer analysis breakdown\",tokenList)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "NamedList<NamedList<Object>> textResult = documentResult.get(\"text\")@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"jumped\",null,\"<ALPHANUM>\",8,14,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf2fa,null,false))@@@125@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
107 [style = filled, label = "assertEquals(\"wh鐃緒申鐃緒申鐃緒申t鐃緒申鐃緒申鐃緒申v鐃緒申鐃緒申鐃緒申r\",indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "indexResult = textResult.get(\"index\")@@@71@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(\"Expecting 6 tokens\",6,tokenList.size())@@@118@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertNotNull(\"Expecting the 'PorterStemFilter' to be applied on the query for the 'text' field\",tokenList)@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertNotNull(\"Expecting the 'LowerCaseFilter' to be applied on the query for the 'text' field\",tokenList)@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertNotNull(\"Expecting the 'StandardFilter' to be applied on the index for the 'text' field\",tokenList)@@@96@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "assertNotNull(\"Expecting the 'PorterStemFilter' to be applied on the index for the 'text' field\",tokenList)@@@153@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"Dogs\",null,\"<ALPHANUM>\",24,28,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf2a1,null,false))@@@113@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "NamedList<NamedList<NamedList<Object>>> documentResult = (NamedList<NamedList<NamedList<Object>>>)result.get(\"1\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
102 [style = filled, label = "NamedList<NamedList> fieldTypes = result.get(\"field_types\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\"The 'text' field has only a single value\",1,indexResult.size())@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
118 [style = filled, label = "assertEquals(\"whatever\",indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"jump\",null,\"<ALPHANUM>\",8,14,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf3f9,null,true))@@@158@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"Dogs\",null,\"<ALPHANUM>\",24,28,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf209,null,false))@@@92@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "tokenList = valueResult.get(\"org.apache.lucene.analysis.core.StopFilter\")@@@137@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "NamedList<Object> queryResult@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
119 [style = filled, label = "NamedList indexPart = textType.get(\"index\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "document.addField(\"id\",1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testHandleAnalysisRequest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"JUMPING\",null,\"word\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf00d,null,false))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertNotNull(\"Expecting the 'StandardTokenizer' to be applied on the query for the 'text' field\",tokenList)@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "tokenList = valueResult.get(\"org.apache.lucene.analysis.core.LowerCaseFilter\")@@@116@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
106 [style = filled, label = "request.setFieldValue(\"<html><body>wh鐃緒申鐃緒申鐃緒申t鐃緒申鐃緒申鐃緒申v鐃緒申鐃緒申鐃緒申r</body></html>\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
111 [style = filled, label = "NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
110 [style = filled, label = "request.setShowMatch(false)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "assertNotNull(\"Expecting the 'StopFilter' to be applied on the query for the 'text' field\",tokenList)@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"The\",null,\"<ALPHANUM>\",20,23,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf1f4,null,false))@@@89@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"JUMPING\",null,\"<ALPHANUM>\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf0a2,null,false))@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"The\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf233,null,false))@@@98@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "NamedList<List<NamedList>> valueResult@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
114 [style = filled, label = "testCharFilterAnalysis['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
97 [style = filled, label = "tokenList = valueResult.get(\"org.apache.lucene.analysis.StopFilter\")@@@137@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
53 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"The\",null,\"<ALPHANUM>\",20,23,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf28b,null,false))@@@110@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
120 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"whatever\",null,\"word\",12,20,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf4c1,null,false))@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"Fox\",null,\"<ALPHANUM>\",4,7,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf1b5,null,false))@@@80@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"JUMPING\",null,\"<ALPHANUM>\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf0ce,null,false))@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "tokenList = valueResult.getVal(0)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
103 [style = filled, label = "assertNotNull(\"expecting result for field type 'charfilthtmlmap'\",textType)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertNotNull(\"An analysis for document with key '1' should be returned\",documentResult)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"The\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf1a0,null,false))@@@77@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"Jumped\",null,\"<ALPHANUM>\",8,14,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf25f,null,false))@@@104@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "assertNotNull(\"Expecting the 'StandardTokenizer' to be applied on the index for the 'text' field\",tokenList)@@@75@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "document.addField(\"text\",\"The Fox Jumped Over The Dogs\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(\"org.apache.lucene.analysis.standard.StandardFilter\")@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "NamedList<NamedList<Object>> whitetokResult = documentResult.get(\"whitetok\")@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "valueResult = (NamedList<List<NamedList>>)indexResult.get(\"Jumping Jack\")@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
96 [style = filled, label = "assertEquals(\"Expecting 4 tokens\",4,tokenList.size())@@@154@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(\"Expecting 4 tokens after stop word removal\",4,tokenList.size())@@@139@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "assertNotNull(\"an analysis for the 'id' field should be returned\",idResult)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
104 [style = filled, label = "assertEquals(tokenList.size(),1)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "queryResult = textResult.get(\"query\")@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertNotNull(\"Expecting the 'StandardFilter' to be applied on the query for the 'text' field\",tokenList)@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertNotNull(\"an analysis for the 'text' field should be returned\",textResult)@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "List<NamedList> tokenList@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"Jumping\",null,\"word\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf04c,null,false))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
113 [style = filled, label = "assertTrue(\"result is null and it shouldn't be\",result != null)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
85 [style = filled, label = "SolrInputDocument document = new SolrInputDocument()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"dogs\",null,\"<ALPHANUM>\",24,28,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf3b3,null,false))@@@149@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"over\",null,\"<ALPHANUM>\",15,19,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf412,null,false))@@@161@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "queryResult = whitetokResult.get(\"query\")@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "tokenList = valueResult.get(\"org.apache.lucene.analysis.standard.StandardTokenizer\")@@@74@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(\"org.apache.lucene.analysis.core.StopFilter\")@@@59@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"dogs\",null,\"<ALPHANUM>\",24,28,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf33f,null,false))@@@134@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"Over\",null,\"<ALPHANUM>\",15,19,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf275,null,false))@@@107@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "NamedList<Object> result = handler.handleAnalysisRequest(request,h.getCore().getLatestSchema())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "assertNotNull(\"Expecting the 'LowerCaseFilter' to be applied on the index for the 'text' field\",tokenList)@@@117@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
91 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(.getName())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(\"org.apache.lucene.analysis.standard.StandardTokenizer\")@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"jumping\",null,\"<ALPHANUM>\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf0fb,null,false))@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
101 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(\"org.apache.lucene.analysis.StopFilter\")@@@59@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
60 [style = filled, label = "assertEquals(\"Expecting 6 tokens\",6,tokenList.size())@@@76@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"Jumped\",null,\"<ALPHANUM>\",8,14,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf1ca,null,false))@@@83@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "DocumentAnalysisRequest request = new DocumentAnalysisRequest().setQuery(\"JUMPING\").setShowMatch(true).addDocument(document)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(\"org.apache.lucene.analysis.core.LowerCaseFilter\")@@@53@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"over\",null,\"<ALPHANUM>\",15,19,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf311,null,false))@@@128@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",4,7,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf2e3,null,false))@@@122@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",4,7,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf3e0,null,false))@@@155@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"Expecting 6 tokens\",6,tokenList.size())@@@97@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "NamedList<Object> indexResult@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "document.addField(\"whitetok\",\"Jumping Jack\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"dog\",null,\"<ALPHANUM>\",24,28,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf42b,null,false))@@@164@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "tokenList = valueResult.get(\"org.apache.lucene.analysis.standard.StandardFilter\")@@@95@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
109 [style = filled, label = "NamedList<NamedList> result = handler.handleAnalysisRequest(request,h.getCore().getLatestSchema())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"jumping\",null,\"<ALPHANUM>\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf129,null,false))@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(\"org.apache.lucene.analysis.en.PorterStemFilter\")@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
95 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"jump\",null,\"<ALPHANUM>\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf158,null,false))@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf2cc,null,false))@@@119@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertNotNull(\"Expecting the 'MockTokenizer' to be applied on the query for the 'whitetok' field\",tokenList)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertNotNull(\"an analysis for the 'whitetok' field should be returned\",whitetokResult)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
94 [style = filled, label = "indexResult = whitetokResult.get(\"index\")@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
108 [style = filled, label = "assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\",indexPart)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"Fox\",null,\"<ALPHANUM>\",4,7,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf249,null,false))@@@101@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"jumped\",null,\"<ALPHANUM>\",8,14,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf383,null,false))@@@143@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertNotNull(\"result is null and it shouldn't be\",result)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"Jack\",null,\"word\",8,12,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf061,null,false))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"over\",null,\"<ALPHANUM>\",15,19,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ebf39b,null,false))@@@146@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
92 [style = filled, label = "valueResult = (NamedList<List<NamedList>>)indexResult.get(\"The Fox Jumped Over The Dogs\")@@@73@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54->55 [style = bold, label=""];
47->93 [style = bold, label=""];
25->1 [style = bold, label=""];
112->117 [style = bold, label=""];
69->0 [style = bold, label=""];
41->90 [style = bold, label=""];
25->98 [style = dashed, label="0"];
10->54 [style = bold, label=""];
103->119 [style = bold, label=""];
65->84 [style = bold, label=""];
44->97 [style = bold, label=""];
73->12 [style = bold, label=""];
82->16 [style = bold, label=""];
106->110 [style = bold, label=""];
83->95 [style = bold, label=""];
45->91 [style = bold, label=""];
50->2 [style = bold, label=""];
88->20 [style = bold, label=""];
97->88 [style = solid, label="tokenList"];
23->29 [style = bold, label=""];
72->101 [style = bold, label=""];
58->97 [style = dashed, label="0"];
99->86 [style = bold, label=""];
78->7 [style = bold, label=""];
7->70 [style = bold, label=""];
109->113 [style = solid, label="result"];
96->21 [style = bold, label=""];
74->99 [style = dashed, label="0"];
37->31 [style = bold, label=""];
98->1 [style = bold, label=""];
113->102 [style = bold, label=""];
32->64 [style = solid, label="tokenList"];
49->67 [style = bold, label=""];
17->72 [style = bold, label=""];
59->22 [style = bold, label=""];
70->9 [style = bold, label=""];
34->94 [style = bold, label=""];
80->39 [style = bold, label=""];
105->106 [style = bold, label=""];
84->40 [style = solid, label="tokenList"];
38->78 [style = bold, label=""];
64->60 [style = bold, label=""];
27->25 [style = bold, label=""];
43->11 [style = solid, label="tokenList"];
95->24 [style = bold, label=""];
102->116 [style = bold, label=""];
118->112 [style = bold, label=""];
6->92 [style = bold, label=""];
36->41 [style = bold, label=""];
28->30 [style = bold, label=""];
76->59 [style = bold, label=""];
9->89 [style = bold, label=""];
89->66 [style = bold, label=""];
90->96 [style = bold, label=""];
12->35 [style = bold, label=""];
85->33 [style = solid, label="document"];
111->103 [style = bold, label=""];
109->113 [style = bold, label=""];
116->111 [style = bold, label=""];
85->10 [style = bold, label=""];
8->38 [style = bold, label=""];
84->40 [style = bold, label=""];
1->17 [style = bold, label=""];
43->11 [style = bold, label=""];
97->88 [style = bold, label=""];
75->101 [style = dashed, label="0"];
117->104 [style = bold, label=""];
91->49 [style = bold, label=""];
74->86 [style = solid, label="tokenList"];
110->109 [style = bold, label=""];
100->85 [style = bold, label=""];
74->86 [style = bold, label=""];
66->51 [style = bold, label=""];
19->62 [style = bold, label=""];
52->36 [style = bold, label=""];
48->13 [style = bold, label=""];
91->49 [style = solid, label="tokenList"];
107->118 [style = bold, label=""];
32->64 [style = bold, label=""];
87->48 [style = bold, label=""];
39->37 [style = bold, label=""];
59->22 [style = solid, label="tokenList"];
38->78 [style = solid, label="idResult"];
30->43 [style = bold, label=""];
72->75 [style = bold, label=""];
3->47 [style = bold, label=""];
13->8 [style = solid, label="documentResult"];
98->1 [style = solid, label="tokenList"];
101->81 [style = bold, label=""];
56->77 [style = bold, label=""];
108->107 [style = bold, label=""];
35->14 [style = bold, label=""];
11->79 [style = bold, label=""];
79->65 [style = bold, label=""];
87->48 [style = solid, label="result"];
62->80 [style = bold, label=""];
71->76 [style = bold, label=""];
60->3 [style = bold, label=""];
53->46 [style = bold, label=""];
35->14 [style = solid, label="tokenList"];
51->45 [style = bold, label=""];
31->44 [style = bold, label=""];
29->50 [style = bold, label=""];
42->57 [style = bold, label=""];
86->19 [style = bold, label=""];
92->32 [style = bold, label=""];
104->120 [style = bold, label=""];
0->63 [style = bold, label=""];
20->42 [style = bold, label=""];
111->103 [style = solid, label="textType"];
63->61 [style = bold, label=""];
21->82 [style = bold, label=""];
75->81 [style = bold, label=""];
16->4 [style = bold, label=""];
68->28 [style = bold, label=""];
22->83 [style = bold, label=""];
46->74 [style = bold, label=""];
14->5 [style = bold, label=""];
119->108 [style = bold, label=""];
112->117 [style = solid, label="tokenList"];
115->109 [style = solid, label="request"];
58->88 [style = bold, label=""];
66->51 [style = solid, label="whitetokResult"];
89->112 [style = dashed, label="0"];
10->105 [style = dashed, label="0"];
77->23 [style = bold, label=""];
40->18 [style = bold, label=""];
41->90 [style = solid, label="tokenList"];
114->115 [style = bold, label=""];
27->98 [style = bold, label=""];
101->81 [style = solid, label="tokenList"];
57->52 [style = bold, label=""];
61->53 [style = bold, label=""];
102->116 [style = solid, label="fieldTypes"];
18->27 [style = bold, label=""];
58->88 [style = solid, label="tokenList"];
94->56 [style = bold, label=""];
5->69 [style = bold, label=""];
26->85 [style = bold, label=""];
33->87 [style = solid, label="request"];
75->81 [style = solid, label="tokenList"];
46->99 [style = bold, label=""];
115->105 [style = bold, label=""];
44->58 [style = bold, label=""];
68->28 [style = solid, label="textResult"];
99->86 [style = solid, label="tokenList"];
93->15 [style = bold, label=""];
81->71 [style = bold, label=""];
13->8 [style = bold, label=""];
25->1 [style = solid, label="tokenList"];
33->87 [style = bold, label=""];
2->68 [style = bold, label=""];
24->6 [style = bold, label=""];
55->33 [style = bold, label=""];
15->73 [style = bold, label=""];
67->34 [style = bold, label=""];
119->108 [style = solid, label="indexPart"];
}
