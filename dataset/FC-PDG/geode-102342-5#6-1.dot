digraph {
5 [style = filled, label = "out.writeByte(someClassId)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ByteArrayOutputStream baos = new ByteArrayOutputStream()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "PowerMockito.mockStatic()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "when(InternalInstantiator.getClassId(mockInstantiator.getClass())).thenReturn(someClassId)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "byte(( bytes = baos.toByteArray()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "getDataTypeShouldReturnUserDataSeriazliable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "when(InternalInstantiator.getInstantiator(someClassId)).thenReturn(mockInstantiator)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Instantiator mockInstantiator = PowerMockito.mock()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "getDataTypeShouldReturnUserDataSeriazliable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "out.writeByte(DSCODE.USER_DATA_SERIALIZABLE.toByte())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "out.writeInt(someClassId)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "getDataTypeShouldReturnUserDataSeriazliable4['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "out.writeByte(DSCODE.USER_DATA_SERIALIZABLE_4.toByte())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "mockInstantiator.getInstantiatedClass()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "doReturn().when(mockInstantiator).getInstantiatedClass()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(type).isEqualTo(\"org.apache.geode.Instantiator:org.apache.geode.internal.cache.execute.data.CustId\")@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "int someClassId = 1@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "DataOutputStream out = new DataOutputStream(baos)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "String type = DataType.getDataType(bytes)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->17 [style = bold, label=""];
11->16 [style = solid, label="someClassId"];
7->10 [style = bold, label=""];
10->14 [style = solid, label="mockInstantiator"];
2->1 [style = bold, label=""];
1->3 [style = bold, label=""];
2->1 [style = solid, label="bytes"];
11->5 [style = solid, label="someClassId"];
13->17 [style = dashed, label="0"];
11->12 [style = bold, label=""];
8->6 [style = bold, label=""];
16->2 [style = bold, label=""];
11->9 [style = solid, label="someClassId"];
12->9 [style = bold, label=""];
5->16 [style = dashed, label="0"];
5->2 [style = bold, label=""];
15->11 [style = bold, label=""];
18->10 [style = bold, label=""];
0->4 [style = bold, label=""];
6->13 [style = bold, label=""];
10->0 [style = bold, label=""];
9->14 [style = bold, label=""];
13->5 [style = bold, label=""];
11->8 [style = bold, label=""];
14->8 [style = bold, label=""];
4->11 [style = bold, label=""];
17->16 [style = bold, label=""];
8->6 [style = solid, label="baos"];
}
