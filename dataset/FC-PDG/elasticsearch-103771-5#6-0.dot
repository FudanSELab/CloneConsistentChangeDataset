digraph {
7 [style = filled, label = "assertEquals(\"test\" + (elasticsearchVersionSupportsMultiTerm? version.toString(): \"\"),analyzers.get(\"elasticsearch_version\").normalize(\"\",\"test\").utf8ToString())@@@25@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "IndexAnalyzers analyzers = getIndexAnalyzers(registry,Settings.builder().put(\"index.analysis.analyzer.no_version.tokenizer\",\"standard\").put(\"index.analysis.analyzer.no_version.filter\",\"no_version\").put(\"index.analysis.analyzer.lucene_version.tokenizer\",\"standard\").put(\"index.analysis.analyzer.lucene_version.filter\",\"lucene_version\").put(\"index.analysis.analyzer.elasticsearch_version.tokenizer\",\"standard\").put(\"index.analysis.analyzer.elasticsearch_version.filter\",\"elasticsearch_version\").put(IndexMetaData.SETTING_VERSION_CREATED,version).build())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertTokenStreamContents(analyzers.get(\"no_version\").tokenStream(\"\",\"test\"),new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13eb97c)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTokenStreamContents(analyzers.get(\"lucene_version\").tokenStream(\"\",\"test\"),new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13eb98b)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"test\" + (luceneVersionSupportsMultiTerm? version.luceneVersion.toString(): \"\"),analyzers.get(\"lucene_version\").normalize(\"\",\"test\").utf8ToString())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),singletonList(new AnalysisPlugin(){@Override public List<PreConfiguredTokenFilter> getPreConfiguredTokenFilters(){return Arrays.asList(PreConfiguredTokenFilter.singleton(\"no_version\",noVersionSupportsMultiTerm,null),PreConfiguredTokenFilter.luceneVersion(\"lucene_version\",luceneVersionSupportsMultiTerm,null),PreConfiguredTokenFilter.elasticsearchVersion(\"elasticsearch_version\",elasticsearchVersionSupportsMultiTerm,null))}})).getAnalysisRegistry()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Version version = VersionUtils.randomVersion(random())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testPluginPreConfiguredCharFilters['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testPluginPreConfiguredTokenFilters['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "boolean noVersionSupportsMultiTerm = randomBoolean()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "IndexAnalyzers analyzers = getIndexAnalyzers(registry,Settings.builder().put(\"index.analysis.analyzer.no_version.tokenizer\",\"keyword\").put(\"index.analysis.analyzer.no_version.char_filter\",\"no_version\").put(\"index.analysis.analyzer.lucene_version.tokenizer\",\"keyword\").put(\"index.analysis.analyzer.lucene_version.char_filter\",\"lucene_version\").put(\"index.analysis.analyzer.elasticsearch_version.tokenizer\",\"keyword\").put(\"index.analysis.analyzer.elasticsearch_version.char_filter\",\"elasticsearch_version\").put(IndexMetaData.SETTING_VERSION_CREATED,version).build())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTokenStreamContents(analyzers.get(\"elasticsearch_version\").tokenStream(\"\",\"test\"),new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13eb99f)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testPluginPreConfiguredCharFilters['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\"test\" + (noVersionSupportsMultiTerm? \"no_version\": \"\"),analyzers.get(\"no_version\").normalize(\"\",\"test\").utf8ToString())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "boolean luceneVersionSupportsMultiTerm = randomBoolean()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->5 [style = solid, label="version"];
11->4 [style = bold, label=""];
15->1 [style = bold, label=""];
9->11 [style = bold, label=""];
11->14 [style = solid, label="registry"];
9->7 [style = solid, label="elasticsearchVersionSupportsMultiTerm"];
11->2 [style = solid, label="registry"];
3->8 [style = solid, label="luceneVersionSupportsMultiTerm"];
14->0 [style = bold, label=""];
6->8 [style = bold, label=""];
4->2 [style = bold, label=""];
10->1 [style = bold, label=""];
12->5 [style = bold, label=""];
1->3 [style = bold, label=""];
0->12 [style = bold, label=""];
2->14 [style = dashed, label="0"];
3->9 [style = bold, label=""];
4->14 [style = bold, label=""];
13->1 [style = bold, label=""];
8->7 [style = bold, label=""];
2->0 [style = bold, label=""];
5->6 [style = bold, label=""];
1->6 [style = solid, label="noVersionSupportsMultiTerm"];
}
