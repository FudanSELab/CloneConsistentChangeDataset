digraph {
19 [style = filled, label = "{tableEnv.executeSql(\"drop table src\")}@@@27@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "HiveTestUtils.createTextTableInserter(hiveShell,\"default\",\"src\").addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b82495).addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b8249a).addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b8249f).addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b824a4).commit()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "tableEnv.executeSql(\"create table src(x int,y string) partitioned by (p1 bigint, p2 string)\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(physicalPlan,physicalPlan.contains(expectedExplain))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "testProjectionPushDown['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertArrayEquals(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b823d4,rowStrings)@@@25@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Object(( rowStrings = rows.stream().map(null).sorted().toArray()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Table table = tableEnv.sqlQuery(\"select * from hive.`default`.src limit 1\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "String physicalPlan = explain(3(@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "{tableEnv.executeSql(\"drop table src\")}@@@29@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "tableEnv.executeSql(\"create table src (a string)\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(2,rows.size())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "String(( explain = table.explain().split(\"==.*==\")@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertTrue(physicalPlan.contains(expectedExplain))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "String expectedExplain = \"HiveTableSource(a) TablePath: default.src, PartitionPruned: false, \" + \"PartitionNums: null, LimitPushDown true, Limit 1\"@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(4,explain.length)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertArrayEquals(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b8250f,rowStrings)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "HiveTestUtils.createTextTableInserter(hiveShell,\"default\",\"src\").addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b82413).commit(\"p1=2014, p2='2014'\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(1,rows.size())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "hiveShell.execute(\"analyze table src COMPUTE STATISTICS\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "String(( explain = table.explain().split(\"==.*==\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "String expectedExplain = \"table=((hive, default, src, project=(p1, y(((\"@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertTrue(logicalPlan.contains(expectedExplain))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "String logicalPlan = explain(2(@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertTrue(logicalPlan,logicalPlan.contains(expectedExplain))@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "List<Row> rows = CollectionUtil.iteratorToList(table.execute().collect())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testProjectionPushDown['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(4,explain.length)@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Object(( rowStrings = rows.stream().map(null).sorted().toArray()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "TableEnvironment tableEnv = createTableEnv()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Table table = tableEnv.sqlQuery(\"select p1, count(y) from hive.`default`.src group by p1\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testLimitPushDown['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "{tableEnv.executeSql(\"drop table src\")}@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6->17 [style = bold, label=""];
11->32 [style = dashed, label="0"];
15->23 [style = dashed, label="0"];
30->17 [style = bold, label=""];
31->22 [style = bold, label=""];
12->5 [style = bold, label=""];
24->23 [style = solid, label="expectedExplain"];
24->32 [style = solid, label="expectedExplain"];
21->15 [style = bold, label=""];
1->15 [style = bold, label=""];
17->31 [style = bold, label=""];
26->29 [style = bold, label=""];
16->4 [style = solid, label="rowStrings"];
23->32 [style = bold, label=""];
0->15 [style = solid, label="logicalPlan"];
2->16 [style = solid, label="rowStrings"];
0->1 [style = solid, label="explain"];
18->21 [style = solid, label="expectedExplain"];
5->14 [style = bold, label=""];
9->10 [style = bold, label=""];
32->16 [style = bold, label=""];
16->19 [style = bold, label=""];
15->3 [style = bold, label=""];
25->26 [style = solid, label="rowStrings"];
10->6 [style = bold, label=""];
4->7 [style = bold, label=""];
20->10 [style = bold, label=""];
8->1 [style = bold, label=""];
14->0 [style = solid, label="explain"];
0->15 [style = solid, label="explain"];
17->12 [style = bold, label=""];
22->0 [style = bold, label=""];
15->11 [style = bold, label=""];
3->2 [style = bold, label=""];
16->28 [style = bold, label=""];
11->3 [style = bold, label=""];
14->8 [style = solid, label="explain"];
1->24 [style = dashed, label="0"];
15->24 [style = bold, label=""];
27->10 [style = bold, label=""];
25->26 [style = bold, label=""];
1->11 [style = solid, label="expectedExplain"];
0->8 [style = bold, label=""];
2->28 [style = dashed, label="0"];
1->15 [style = solid, label="expectedExplain"];
28->25 [style = bold, label=""];
0->18 [style = bold, label=""];
8->18 [style = dashed, label="0"];
6->30 [style = dashed, label="0"];
14->13 [style = bold, label=""];
18->21 [style = bold, label=""];
16->4 [style = bold, label=""];
8->11 [style = solid, label="physicalPlan"];
10->30 [style = bold, label=""];
0->21 [style = solid, label="logicalPlan"];
13->0 [style = bold, label=""];
24->23 [style = bold, label=""];
2->16 [style = bold, label=""];
}
