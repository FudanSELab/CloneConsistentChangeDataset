digraph {
1 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(0,startOrder,stopOrder))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(expectedOrder,startOrder)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final List<Integer> expectedOrder = Arrays.asList(0,1,2,4,5,7,3,6)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(5,startOrder,stopOrder))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final List<Integer> expectedOrder = Arrays.asList(0,1,2,4,5,7,3,6)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "lifecycle.stop()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(7,startOrder,stopOrder))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(0,stopOrder.size())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "testAddToLifecycleInStartMethod['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testSanity['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(Lists.reverse(expectedOrder),stopOrder)@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "lifecycle.start()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(expectedOrder,startOrder)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "List<Integer> startOrder = Lists.newArrayList()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "List<Integer> startOrder = new ArrayList<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "lifecycle.start()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(4,startOrder,stopOrder))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "lifecycle.addHandler(new Lifecycle.Handler(){@Override public void start(){lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(1,startOrder,stopOrder),Lifecycle.Stage.NORMAL)lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(2,startOrder,stopOrder),Lifecycle.Stage.NORMAL)lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(3,startOrder,stopOrder),Lifecycle.Stage.LAST)lifecycle.addMaybeStartStartCloseInstance(new ObjectToBeLifecycled(4,startOrder,stopOrder))lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(5,startOrder,stopOrder))lifecycle.addMaybeStartStartCloseInstance(new ObjectToBeLifecycled(6,startOrder,stopOrder),Lifecycle.Stage.LAST)lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(7,startOrder,stopOrder))}@Override public void stop(){}})@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testSanity['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(1,startOrder,stopOrder),Lifecycle.Stage.NORMAL)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(6,startOrder,stopOrder),Lifecycle.Stage.LAST)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(3,startOrder,stopOrder),Lifecycle.Stage.LAST)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final Lifecycle lifecycle = new Lifecycle()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Lifecycle lifecycle = new Lifecycle()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(0,stopOrder.size())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "List<Integer> stopOrder = new ArrayList<>()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Assert.assertEquals(8,startOrder.size())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(expectedOrder,startOrder)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final List<Integer> startOrder = Lists.newArrayList()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "List<Integer> stopOrder = Lists.newArrayList()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "lifecycle.addManagedInstance(new ObjectToBeLifecycled(2,startOrder,stopOrder),Lifecycle.Stage.NORMAL)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(8,startOrder.size())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final List<Integer> stopOrder = Lists.newArrayList()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "lifecycle.stop()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->6 [style = solid, label="startOrder"];
22->5 [style = solid, label="stopOrder"];
0->6 [style = solid, label="stopOrder"];
0->1 [style = solid, label="stopOrder"];
29->28 [style = solid, label="stopOrder"];
10->19 [style = bold, label=""];
8->4 [style = solid, label="startOrder"];
3->16 [style = bold, label=""];
22->4 [style = solid, label="stopOrder"];
7->8 [style = bold, label=""];
11->9 [style = bold, label=""];
1->13 [style = bold, label=""];
12->16 [style = solid, label="expectedOrder"];
8->0 [style = bold, label=""];
3->27 [style = solid, label="expectedOrder"];
15->17 [style = bold, label=""];
12->10 [style = bold, label=""];
2->14 [style = bold, label=""];
7->25 [style = dashed, label="0"];
29->1 [style = bold, label=""];
29->1 [style = solid, label="stopOrder"];
32->3 [style = bold, label=""];
24->33 [style = solid, label="startOrder"];
0->4 [style = solid, label="stopOrder"];
29->32 [style = solid, label="stopOrder"];
0->11 [style = solid, label="stopOrder"];
22->18 [style = solid, label="stopOrder"];
0->13 [style = solid, label="stopOrder"];
8->18 [style = solid, label="startOrder"];
33->28 [style = bold, label=""];
18->12 [style = bold, label=""];
0->9 [style = solid, label="stopOrder"];
22->13 [style = solid, label="stopOrder"];
21->18 [style = solid, label="startOrder"];
19->2 [style = bold, label=""];
21->6 [style = solid, label="startOrder"];
24->27 [style = solid, label="startOrder"];
13->11 [style = bold, label=""];
25->24 [style = bold, label=""];
3->28 [style = solid, label="expectedOrder"];
5->6 [style = bold, label=""];
21->22 [style = bold, label=""];
1->32 [style = bold, label=""];
14->15 [style = bold, label=""];
0->5 [style = solid, label="stopOrder"];
23->7 [style = bold, label=""];
8->9 [style = solid, label="startOrder"];
20->7 [style = bold, label=""];
21->5 [style = solid, label="startOrder"];
27->26 [style = bold, label=""];
8->11 [style = solid, label="startOrder"];
8->13 [style = solid, label="startOrder"];
31->25 [style = bold, label=""];
16->27 [style = bold, label=""];
30->33 [style = bold, label=""];
24->1 [style = solid, label="startOrder"];
3->33 [style = solid, label="expectedOrder"];
6->18 [style = bold, label=""];
17->33 [style = dashed, label="0"];
21->11 [style = solid, label="startOrder"];
8->14 [style = solid, label="startOrder"];
21->9 [style = solid, label="startOrder"];
0->18 [style = solid, label="stopOrder"];
21->4 [style = solid, label="startOrder"];
0->1 [style = bold, label=""];
22->9 [style = solid, label="stopOrder"];
0->29 [style = dashed, label="0"];
22->16 [style = solid, label="stopOrder"];
17->3 [style = bold, label=""];
24->32 [style = solid, label="startOrder"];
22->1 [style = bold, label=""];
4->5 [style = bold, label=""];
12->14 [style = solid, label="expectedOrder"];
21->14 [style = solid, label="startOrder"];
21->13 [style = solid, label="startOrder"];
9->4 [style = bold, label=""];
22->11 [style = solid, label="stopOrder"];
8->1 [style = solid, label="startOrder"];
22->6 [style = solid, label="stopOrder"];
24->29 [style = bold, label=""];
21->1 [style = solid, label="startOrder"];
8->21 [style = dashed, label="0"];
8->24 [style = dashed, label="0"];
0->22 [style = dashed, label="0"];
26->30 [style = bold, label=""];
0->16 [style = solid, label="stopOrder"];
22->1 [style = solid, label="stopOrder"];
8->5 [style = solid, label="startOrder"];
7->21 [style = bold, label=""];
}
