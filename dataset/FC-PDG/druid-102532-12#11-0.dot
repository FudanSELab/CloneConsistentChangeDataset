digraph {
1 [style = filled, label = "Thread.sleep(20)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,2L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "!task.getRunner().getStatus().equals(Status.READING)@@@5@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "i < 5@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testRunWithOffsetOutOfRangeExceptionAndPause['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "task.getRunner().pause()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "!task.getRunner().getStatus().equals(Status.PAUSED)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "int i = 0@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(200L,(long)task.getRunner().getCurrentOffsets().get(0))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "resetOffsetAutomatically = true@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Thread.sleep(25)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "!task.getRunner().getStatus().equals(Status.READING)@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "runTask(task)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "insertData()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,200L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,500L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Thread.sleep(2000)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(task.getRunner().getStatus(),Status.READING)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(Status.READING,task.getRunner().getStatus())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertTrue(task.getRunner().getCurrentOffsets().get(0) == 200L)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "i++@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16->15 [style = bold, label=""];
4->3 [style = bold, label=""];
5->8 [style = bold, label=""];
7->17 [style = bold, label=""];
21->19 [style = bold, label=""];
11->14 [style = bold, label=""];
11->4 [style = bold, label=""];
18->15 [style = bold, label=""];
10->2 [style = solid, label="i"];
11->14 [style = dotted, label="true"];
8->6 [style = bold, label=""];
7->0 [style = bold, label=""];
1->0 [style = bold, label=""];
19->17 [style = bold, label=""];
11->4 [style = dotted, label="true"];
11->13 [style = dotted, label="true"];
15->16 [style = dotted, label="true"];
9->7 [style = bold, label=""];
15->16 [style = bold, label=""];
3->13 [style = dashed, label="0"];
10->11 [style = solid, label="i"];
20->21 [style = bold, label=""];
17->7 [style = bold, label=""];
0->10 [style = bold, label=""];
11->2 [style = dotted, label="true"];
2->11 [style = solid, label="i"];
3->2 [style = bold, label=""];
12->8 [style = bold, label=""];
0->1 [style = bold, label=""];
21->19 [style = solid, label="task"];
9->7 [style = solid, label="task"];
17->7 [style = dotted, label="true"];
4->14 [style = dashed, label="0"];
14->13 [style = bold, label=""];
6->9 [style = bold, label=""];
1->7 [style = dashed, label="0"];
11->3 [style = dotted, label="true"];
2->11 [style = bold, label=""];
17->18 [style = bold, label=""];
0->1 [style = dotted, label="true"];
13->2 [style = bold, label=""];
10->11 [style = bold, label=""];
}
