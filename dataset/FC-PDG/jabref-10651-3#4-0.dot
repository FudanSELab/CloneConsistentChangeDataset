digraph {
14 [style = filled, label = "expectedCrossingResult.insertEntry(database,EINSTEIN_A)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "expectedCrossingResult.insertEntry(database,EINSTEIN_C)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "TexBibEntriesResolverResult expectedCrossingResult = new TexBibEntriesResolverResult(parserResult)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expectedCrossingResult.insertEntry(database,EINSTEIN)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "Path texFile = Paths.get(.getResource(\"crossref.tex\").toURI())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testUnknownKey['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "expectedCrossingResult.insertEntry(database,EINSTEIN)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expectedCrossingResult.insertEntry(database,DARWIN)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertEquals(expectedCrossingResult,crossingResult)@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "TexBibEntriesResolverResult crossingResult = new TexBibEntriesResolver(database).resolveKeys(parserResult)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "TexParserResult parserResult = new DefaultTexParser().parse(texFile)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(expectedCrossingResult,crossingResult)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "expectedCrossingResult.increaseCrossRefsCount()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testCrossRef['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "expectedCrossingResult.insertEntry(database,EINSTEIN_B)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "TexBibEntriesResolverResult crossingResult = new TexBibEntriesResolver(database,importFormatPreferences,fileMonitor).resolve(parserResult)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "testUnknownKey['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Path texFile = Paths.get(.getResource(\"unknown_key.tex\").toURI())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "expectedCrossingResult.addUnresolvedKey(EINSTEIN_21)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "expectedCrossingResult.addUnresolvedKey(UNRESOLVED)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
14->3 [style = bold, label=""];
15->13 [style = bold, label=""];
3->18 [style = dashed, label="0"];
11->6 [style = bold, label=""];
12->11 [style = bold, label=""];
7->11 [style = dashed, label="0"];
6->9 [style = solid, label="parserResult"];
7->6 [style = solid, label="texFile"];
16->19 [style = bold, label=""];
1->5 [style = solid, label="expectedCrossingResult"];
2->17 [style = dashed, label="0"];
10->7 [style = bold, label=""];
1->13 [style = solid, label="expectedCrossingResult"];
8->7 [style = bold, label=""];
1->17 [style = bold, label=""];
6->4 [style = solid, label="parserResult"];
3->18 [style = bold, label=""];
9->5 [style = solid, label="crossingResult"];
6->4 [style = bold, label=""];
4->9 [style = dashed, label="0"];
3->5 [style = bold, label=""];
2->0 [style = bold, label=""];
4->5 [style = solid, label="crossingResult"];
17->14 [style = bold, label=""];
7->6 [style = bold, label=""];
4->1 [style = bold, label=""];
1->2 [style = bold, label=""];
6->1 [style = solid, label="parserResult"];
6->9 [style = bold, label=""];
9->1 [style = bold, label=""];
19->15 [style = bold, label=""];
4->13 [style = solid, label="crossingResult"];
11->6 [style = solid, label="texFile"];
18->16 [style = bold, label=""];
}
