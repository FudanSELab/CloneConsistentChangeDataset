digraph {
3 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateStrategyColumn(),CoreMatchers.is(expected.getKeyGenerateStrategyColumn()))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertIs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertIs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertIs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "final ExpectedShardingBindingTableRule expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s sharding binding table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableGroups(),is(expected.getTableGroups()))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSources(),CoreMatchers.is(expected.getDataSources()))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertNull(assertContext.getText(\"Actual sharding binding table rule should not exist.\"),actual)@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "AlgorithmAssert.assertIs(assertContext,actual.getKeyGenerateStrategy(),expected.getKeyGenerateStrategy())@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateStrategyColumn(),is(expected.getKeyGenerateStrategyColumn()))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "final TableRuleSegment actual@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "null == expected@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final TableRuleSegment actual@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual sharding binding table rule should exist.\"),actual)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategyColumn(),CoreMatchers.is(expected.getTableStrategyColumn()))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategyColumn(),is(expected.getTableStrategyColumn()))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "AlgorithmAssert.assertIs(assertContext,actual.getTableStrategy(),expected.getTableStrategy())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),CoreMatchers.is(expected.getName()))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual)@@@4@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSources(),is(expected.getDataSources()))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "final ExpectedTableRule expected@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "final ExpectedTableRule expected@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final BindingTableRuleSegment actual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2->17 [style = bold, label=""];
0->5 [style = dotted, label="true"];
0->21 [style = dotted, label="false"];
14->5 [style = solid, label="actual"];
12->8 [style = dotted, label="true"];
0->6 [style = dotted, label="false"];
26->25 [style = dotted, label="true"];
2->6 [style = bold, label=""];
11->1 [style = bold, label=""];
7->10 [style = bold, label=""];
5->23 [style = dashed, label="0"];
0->2 [style = bold, label=""];
20->23 [style = solid, label="actual"];
9->7 [style = solid, label="assertContext"];
4->0 [style = solid, label="expected"];
18->15 [style = dotted, label="true"];
1->3 [style = bold, label=""];
20->21 [style = solid, label="actual"];
0->2 [style = dotted, label="false"];
26->20 [style = dotted, label="true"];
6->17 [style = dashed, label="0"];
0->17 [style = dotted, label="false"];
0->21 [style = bold, label=""];
0->1 [style = dotted, label="false"];
16->19 [style = bold, label=""];
12->0 [style = bold, label=""];
18->14 [style = dotted, label="true"];
13->16 [style = bold, label=""];
6->22 [style = dashed, label="0"];
3->19 [style = dashed, label="0"];
8->5 [style = solid, label="actual"];
9->0 [style = solid, label="expected"];
25->0 [style = solid, label="expected"];
0->16 [style = dotted, label="false"];
0->11 [style = dotted, label="false"];
26->0 [style = bold, label=""];
11->13 [style = dashed, label="0"];
9->10 [style = solid, label="assertContext"];
0->23 [style = bold, label=""];
0->22 [style = dotted, label="false"];
0->3 [style = dotted, label="false"];
3->7 [style = bold, label=""];
21->22 [style = bold, label=""];
2->21 [style = dashed, label="0"];
1->16 [style = dashed, label="0"];
0->7 [style = dotted, label="false"];
6->11 [style = bold, label=""];
0->19 [style = dotted, label="false"];
18->9 [style = dotted, label="true"];
26->24 [style = dotted, label="true"];
9->25 [style = dashed, label="0"];
8->2 [style = solid, label="actual"];
12->4 [style = dotted, label="true"];
0->23 [style = dotted, label="true"];
17->13 [style = bold, label=""];
0->13 [style = dotted, label="false"];
15->10 [style = solid, label="assertContext"];
14->2 [style = solid, label="actual"];
15->7 [style = solid, label="assertContext"];
19->7 [style = bold, label=""];
18->0 [style = bold, label=""];
0->5 [style = bold, label=""];
12->9 [style = dotted, label="true"];
0->10 [style = dotted, label="false"];
}
