digraph {
0 [style = filled, label = "ByteBuffer sourceNio = source.nioBuffer(source.readerIndex(),source.readableBytes())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "return target@@@17@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "LZ4_COMPRESSOR.get().compress(sourceNio,targetNio)@@@13@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "ByteBuffer targetNio = target.nioBuffer(0,maxLength)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "int maxLength = compressor.maxCompressedLength(uncompressedLength)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "encode['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "encode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ByteBuffer sourceNio = source.nioBuffer(source.readerIndex(),source.readableBytes())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "int uncompressedLength = source.readableBytes()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ByteBuf source@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "target.writerIndex(compressedLength)@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "target.writerIndex(compressedLength)@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "int maxLength = Lz4RawCompressor.maxCompressedLength(uncompressedLength)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "ByteBuf target = PulsarByteBufAllocator.DEFAULT.buffer(maxLength,maxLength)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "compressedLength = targetNio.position()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "int compressedLength@@@6@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "compressedLength = Lz4RawCompressor.compress(null,source.memoryAddress() + source.readerIndex(),source.readableBytes(),null,target.memoryAddress(),maxLength,LZ4_TABLE.get())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "int compressedLength = compressor.compress(sourceNio,0,uncompressedLength,targetNio,0,maxLength)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "encode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "return target@@@10@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "source.hasMemoryAddress() && target.hasMemoryAddress()@@@7@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
2->5 [style = solid, label="uncompressedLength"];
13->10 [style = bold, label=""];
11->16 [style = bold, label=""];
8->19 [style = dashed, label="0"];
0->9 [style = bold, label=""];
2->19 [style = bold, label=""];
7->11 [style = bold, label=""];
15->7 [style = bold, label=""];
0->5 [style = solid, label="sourceNio"];
14->17 [style = solid, label="target"];
10->16 [style = solid, label="compressedLength"];
13->15 [style = dotted, label="false"];
11->16 [style = solid, label="compressedLength"];
19->15 [style = solid, label="maxLength"];
12->15 [style = bold, label=""];
1->3 [style = bold, label=""];
13->11 [style = dotted, label="false"];
9->3 [style = solid, label="target"];
8->5 [style = solid, label="maxLength"];
16->17 [style = bold, label=""];
18->2 [style = bold, label=""];
2->19 [style = solid, label="uncompressedLength"];
9->7 [style = bold, label=""];
13->10 [style = dotted, label="true"];
8->7 [style = solid, label="maxLength"];
7->5 [style = solid, label="targetNio"];
6->2 [style = bold, label=""];
8->0 [style = bold, label=""];
5->1 [style = bold, label=""];
7->5 [style = bold, label=""];
13->12 [style = bold, label=""];
19->14 [style = bold, label=""];
10->16 [style = bold, label=""];
6->4 [style = dotted, label="true"];
20->4 [style = dotted, label="true"];
13->12 [style = dotted, label="false"];
19->14 [style = solid, label="maxLength"];
9->13 [style = bold, label=""];
14->9 [style = bold, label=""];
8->9 [style = solid, label="maxLength"];
18->4 [style = dotted, label="true"];
5->7 [style = dashed, label="0"];
2->8 [style = solid, label="uncompressedLength"];
19->10 [style = solid, label="maxLength"];
12->7 [style = solid, label="sourceNio"];
13->7 [style = dotted, label="false"];
2->8 [style = bold, label=""];
5->1 [style = solid, label="compressedLength"];
15->7 [style = solid, label="targetNio"];
}
