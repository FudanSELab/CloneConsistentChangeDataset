digraph {
5 [style = filled, label = "assertThat(callback.error).isNull()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "consumerExceptionBeforeCallbackDoesntSetFutureException['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "consumer = null@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "callbackExceptionDoesntThrow['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(scribeMetrics.spans()).isEqualTo(1)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ScribeSpanConsumer scribe = newScribeSpanConsumer(\"zipkin\",consumer)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "entry.message = encodedSpan@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(scribeMetrics.messages()).isEqualTo(1)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(scribeMetrics.spansDropped()).isEqualTo(1)@@@24@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "LogEntry entry = new LogEntry()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ScribeSpanConsumer scribe = newScribeSpanConsumer(\"zipkin\",consumer)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "consumerExceptionBeforeCallbackDoesntSetFutureException['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "expectSuccess(scribe,entry)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "consumer = null@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "await().untilAsserted(null)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "entry.category = \"zipkin\"@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(scribeMetrics.messages()).isEqualTo(1)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertThat(scribeMetrics.messagesDropped()).isZero()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "scribe.Log(asList(entry),callback)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(scribeMetrics.spansDropped()).isEqualTo(1)@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(scribeMetrics.bytes()).isEqualTo(bytes.length)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->19 [style = solid, label="scribe"];
0->3 [style = bold, label=""];
2->19 [style = bold, label=""];
2->7 [style = solid, label="callback"];
12->19 [style = solid, label="entry"];
1->15 [style = dashed, label="0"];
19->20 [style = bold, label=""];
9->4 [style = bold, label=""];
18->11 [style = bold, label=""];
14->10 [style = bold, label=""];
5->15 [style = bold, label=""];
11->12 [style = bold, label=""];
11->7 [style = solid, label="entry"];
18->11 [style = solid, label="consumer"];
1->9 [style = bold, label=""];
4->0 [style = bold, label=""];
10->18 [style = dashed, label="0"];
12->13 [style = bold, label=""];
5->1 [style = bold, label=""];
7->5 [style = bold, label=""];
20->16 [style = bold, label=""];
10->8 [style = bold, label=""];
15->9 [style = bold, label=""];
6->10 [style = bold, label=""];
10->8 [style = solid, label="consumer"];
2->7 [style = bold, label=""];
8->11 [style = bold, label=""];
16->9 [style = bold, label=""];
17->18 [style = bold, label=""];
13->2 [style = bold, label=""];
}
