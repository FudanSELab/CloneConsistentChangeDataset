digraph {
10 [style = filled, label = "putConnectorCallback.onCompletion(EasyMock.anyObject(),EasyMock.isNull())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "herder.putConnectorConfig(CONN1,CONN1_CONFIG,false,putConnectorCallback)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Connector connectorMock = PowerMock.createMock()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.emptyList()))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testCreateConnectorAlreadyExists['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "PowerMock.expectLastCall()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "PowerMock.expectLastCall()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(connectorMock)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "PowerMock.verifyAll()@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "putConnectorCallback.onCompletion(null,new Herder.Created<>(true,info))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "PowerMock.verifyAll()@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "EasyMock.expect(plugins.compareAndSwapLoaders(connectorMock)).andReturn(delegatingLoader)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "herder.tick()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "herder.putConnectorConfig(CONN2,CONN2_CONFIG,false,putConnectorCallback)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "ConnectorInfo info = new ConnectorInfo(CONN2,CONN2_CONFIG,Collections.emptyList())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "configBackingStore.putConnectorConfig(CONN2,CONN2_CONFIG)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "member.poll(EasyMock.anyInt())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "PowerMock.expectLastCall()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "expectPostRebalanceCatchup(SNAPSHOT)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "PowerMock.replayAll()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "herder.tick()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.expect(member.memberId()).andStubReturn(\"leader\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "EasyMock.expect(worker.getPlugins()).andReturn(plugins).times(3)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "PowerMock.expectLastCall()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "PowerMock.expectLastCall()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "PowerMock.expectLastCall()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testCreateConnector['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "member.poll(EasyMock.anyInt())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "EasyMock.expect(worker.getPlugins()).andReturn(plugins)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(null)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "PowerMock.replayAll()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testCreateConnectorAlreadyExists['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "member.wakeup()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "expectRebalance(1,Collections.emptyList(),Collections.emptyList())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->14 [style = bold, label=""];
24->35 [style = bold, label=""];
29->27 [style = bold, label=""];
18->20 [style = bold, label=""];
10->2 [style = bold, label=""];
1->9 [style = bold, label=""];
11->21 [style = bold, label=""];
8->0 [style = bold, label=""];
34->24 [style = bold, label=""];
12->4 [style = bold, label=""];
13->6 [style = bold, label=""];
23->33 [style = bold, label=""];
27->23 [style = bold, label=""];
33->32 [style = bold, label=""];
22->17 [style = bold, label=""];
7->11 [style = bold, label=""];
3->5 [style = bold, label=""];
4->1 [style = bold, label=""];
5->13 [style = bold, label=""];
30->31 [style = bold, label=""];
11->10 [style = bold, label=""];
20->30 [style = bold, label=""];
9->30 [style = dashed, label="0"];
21->26 [style = bold, label=""];
21->27 [style = solid, label="connectorMock"];
15->13 [style = bold, label=""];
28->5 [style = bold, label=""];
16->5 [style = bold, label=""];
35->25 [style = bold, label=""];
32->34 [style = bold, label=""];
35->25 [style = solid, label="info"];
9->8 [style = bold, label=""];
6->7 [style = bold, label=""];
14->15 [style = bold, label=""];
25->22 [style = bold, label=""];
26->29 [style = bold, label=""];
31->19 [style = bold, label=""];
2->12 [style = bold, label=""];
17->18 [style = bold, label=""];
}
