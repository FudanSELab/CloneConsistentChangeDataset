digraph {
4 [style = filled, label = "EasyMock.replay(taskStorageQueryAdapter,indexerMetadataStorageCoordinator)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "expectedException.expect(CoreMatchers.instanceOf())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final Interval deleteInterval = Intervals.of(\"2017-01-01/2017-12-01\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final ImmutableList<TaskInfo<Task,TaskStatus>> taskInfos = ImmutableList.of(new TaskInfo<>(\"id1\",DateTimes.of(\"2017-11-01\"),TaskStatus.running(\"id1\"),\"dataSource\",NoopTask.create(\"id1\",0)),new TaskInfo<>(\"id1\",DateTimes.of(\"2017-12-02\"),TaskStatus.running(\"id2\"),\"dataSource\",NoopTask.create(\"id2\",0)))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testDeletePendingSegments['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "expectedException.expectMessage(\"Cannot delete pendingSegments because there is at least one active task created\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.deletePendingSegments(EasyMock.anyString(),EasyMock.eq(deleteInterval))).andReturn(10)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.deletePendingSegmentsCreatedInInterval(EasyMock.anyString(),EasyMock.eq(deleteInterval))).andReturn(10)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "final List<TaskInfo<Task,TaskStatus>> taskInfos = ImmutableList.of(new TaskInfo<>(\"id1\",DateTimes.of(\"2017-12-01\"),TaskStatus.running(\"id1\"),\"dataSource\",NoopTask.create(\"id1\",0)),new TaskInfo<>(\"id1\",DateTimes.of(\"2017-12-02\"),TaskStatus.running(\"id2\"),\"dataSource\",NoopTask.create(\"id2\",0)))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.expect(taskStorageQueryAdapter.getActiveTaskInfo(\"dataSource\")).andReturn(taskInfos)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(10,indexerMetadataStorageAdapter.deletePendingSegments(\"dataSource\",deleteInterval))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "indexerMetadataStorageAdapter.deletePendingSegments(\"dataSource\",deleteInterval)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testDeletePendingSegments['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "testDeletePendingSegmentsOfRunningTasks['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4->9 [style = bold, label=""];
3->8 [style = dashed, label="0"];
11->5 [style = bold, label=""];
5->2 [style = bold, label=""];
11->5 [style = solid, label="taskInfos"];
2->10 [style = solid, label="deleteInterval"];
7->0 [style = bold, label=""];
9->12 [style = bold, label=""];
1->0 [style = bold, label=""];
8->4 [style = bold, label=""];
12->10 [style = bold, label=""];
2->6 [style = solid, label="deleteInterval"];
0->11 [style = dashed, label="0"];
0->5 [style = solid, label="taskInfos"];
3->4 [style = bold, label=""];
4->6 [style = bold, label=""];
13->11 [style = bold, label=""];
2->3 [style = bold, label=""];
2->8 [style = bold, label=""];
0->5 [style = bold, label=""];
}
