digraph {
12 [style = filled, label = "testCancelWithSavepoint['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "MockedCliFrontend testFrontend = new MockedCliFrontend(clusterClient)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Mockito.verify(clusterClient,times(1)).cancel(any())@@@10@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "String(( parameters = {jid.toString()}@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "JobID jid = new JobID()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testCancel['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final ClusterClient clusterClient = createClusterClient()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testCancel['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "testFrontend.cancel(parameters)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "int retCode = testFrontend.cancel(parameters)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "{JobID jid = new JobID()String(( parameters = {\"-s\",jid.toString()}final ClusterClient clusterClient = createClusterClient()MockedCliFrontend testFrontend = new MockedCliFrontend(clusterClient)assertEquals(0,testFrontend.cancel(parameters))Mockito.verify(clusterClient,times(1)).cancelWithSavepoint(any(),isNull())}@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "{JobID jid = new JobID()String(( parameters = {\"-s\",\"targetDirectory\",jid.toString()}final ClusterClient clusterClient = createClusterClient()MockedCliFrontend testFrontend = new MockedCliFrontend(clusterClient)assertEquals(0,testFrontend.cancel(parameters))Mockito.verify(clusterClient,times(1)).cancelWithSavepoint(any(),notNull())}@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(0,retCode)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Mockito.verify(clusterClient,times(1)).cancel(any())@@@11@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7->9 [style = bold, label=""];
8->1 [style = bold, label=""];
6->3 [style = bold, label=""];
5->7 [style = bold, label=""];
1->2 [style = bold, label=""];
4->1 [style = bold, label=""];
11->13 [style = solid, label="clusterClient"];
2->6 [style = solid, label="parameters"];
9->10 [style = bold, label=""];
11->13 [style = bold, label=""];
5->7 [style = solid, label="clusterClient"];
6->3 [style = solid, label="retCode"];
3->0 [style = bold, label=""];
7->6 [style = bold, label=""];
2->5 [style = bold, label=""];
6->9 [style = dashed, label="0"];
12->11 [style = bold, label=""];
2->9 [style = solid, label="parameters"];
}
