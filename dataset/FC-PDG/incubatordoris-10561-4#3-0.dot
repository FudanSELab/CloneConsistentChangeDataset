digraph {
8 [style = filled, label = "TypeDef type = TypeDef.createDecimal(12,5)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "TypeDef type2 = TypeDef.createDecimal(12,5)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "TypeDef type3 = TypeDef.createDecimal(11,5)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testCharType['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testDecimal['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(10,((ScalarType)type.getType()).getLength())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertNotEquals(type.getType(),type3.getType())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "TypeDef type = TypeDef.createVarchar(10)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "type.analyze(null)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(PrimitiveType.DECIMAL,type.getType().getPrimitiveType())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(5,((ScalarType)type.getType()).getScalarScale())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(12,((ScalarType)type.getType()).getScalarPrecision())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(\"varchar(10)\",type.toString())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "TypeDef type2 = TypeDef.createVarchar(10)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "type3 = TypeDef.createDecimal(12,4)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertNotEquals(type.getType(),type4.getType())@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testDecimal['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "Assert.assertNotEquals(type.getType(),type3.getType())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "TypeDef type3 = TypeDef.createVarchar(3)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TypeDef type4 = TypeDef.create(PrimitiveType.BIGINT)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(PrimitiveType.VARCHAR,type.getType().getPrimitiveType())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(\"decimal(12, 5)\",type.toString())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(PrimitiveType.DECIMALV2,type.getType().getPrimitiveType())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assert.assertEquals(type.getType(),type2.getType())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertNotEquals(type.getType(),type4.getType())@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5->12 [style = dashed, label="0"];
12->5 [style = bold, label=""];
17->1 [style = bold, label=""];
16->8 [style = bold, label=""];
11->15 [style = dashed, label="0"];
9->4 [style = bold, label=""];
1->3 [style = bold, label=""];
3->11 [style = bold, label=""];
1->20 [style = bold, label=""];
11->23 [style = dashed, label="0"];
7->0 [style = bold, label=""];
3->15 [style = bold, label=""];
4->2 [style = bold, label=""];
11->9 [style = bold, label=""];
2->12 [style = bold, label=""];
19->24 [style = bold, label=""];
21->12 [style = bold, label=""];
6->14 [style = bold, label=""];
9->19 [style = dashed, label="0"];
8->1 [style = bold, label=""];
0->10 [style = bold, label=""];
20->23 [style = bold, label=""];
14->0 [style = bold, label=""];
24->21 [style = bold, label=""];
15->9 [style = bold, label=""];
23->19 [style = bold, label=""];
3->20 [style = dashed, label="0"];
7->6 [style = bold, label=""];
12->18 [style = bold, label=""];
22->17 [style = bold, label=""];
8->17 [style = dashed, label="0"];
5->7 [style = bold, label=""];
13->8 [style = bold, label=""];
18->7 [style = bold, label=""];
}
