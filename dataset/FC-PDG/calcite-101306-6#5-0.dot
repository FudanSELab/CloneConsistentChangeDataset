digraph {
2 [style = filled, label = "CalciteAssert.that().with(\"lex\",\"ORACLE\").with(\"quoting\",\"BACK_TICK\").with(\"unquotedCasing\",\"UNCHANGED\").with(\"quotedCasing\",\"UNCHANGED\").with(\"caseSensitive\",\"TRUE\").doWithConnection(new Function<CalciteConnection,Void>(){public Void apply(CalciteConnection connection){try {DatabaseMetaData metaData = connection.getMetaData()assertThat(metaData.getIdentifierQuoteString(),equalTo(\"`\"))assertThat(metaData.supportsMixedCaseIdentifiers(),equalTo(true))assertThat(metaData.storesMixedCaseIdentifiers(),equalTo(false))assertThat(metaData.storesUpperCaseIdentifiers(),equalTo(false))assertThat(metaData.storesLowerCaseIdentifiers(),equalTo(false))assertThat(metaData.supportsMixedCaseQuotedIdentifiers(),equalTo(true))assertThat(metaData.storesMixedCaseQuotedIdentifiers(),equalTo(false))assertThat(metaData.storesUpperCaseQuotedIdentifiers(),equalTo(false))assertThat(metaData.storesLowerCaseQuotedIdentifiers(),equalTo(false))return null}catch (SQLException e) }})@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testLexJava['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testLexOracleAsJava['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testLexOracleAsJava['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "CalciteAssert.that().with(ImmutableMap.builder().put(\"lex\",\"ORACLE\").put(\"quoting\",\"BACK_TICK\").put(\"unquotedCasing\",\"UNCHANGED\").put(\"quotedCasing\",\"UNCHANGED\").put(\"caseSensitive\",\"TRUE\").build()).doWithConnection(new Function<CalciteConnection,Void>(){public Void apply(CalciteConnection connection){try {DatabaseMetaData metaData = connection.getMetaData()assertThat(metaData.getIdentifierQuoteString(),equalTo(\"`\"))assertThat(metaData.supportsMixedCaseIdentifiers(),equalTo(true))assertThat(metaData.storesMixedCaseIdentifiers(),equalTo(false))assertThat(metaData.storesUpperCaseIdentifiers(),equalTo(false))assertThat(metaData.storesLowerCaseIdentifiers(),equalTo(false))assertThat(metaData.supportsMixedCaseQuotedIdentifiers(),equalTo(true))assertThat(metaData.storesMixedCaseQuotedIdentifiers(),equalTo(false))assertThat(metaData.storesUpperCaseQuotedIdentifiers(),equalTo(false))assertThat(metaData.storesLowerCaseQuotedIdentifiers(),equalTo(false))return null}catch (SQLException e) }})@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "CalciteAssert.that().with(ImmutableMap.of(\"lex\",\"JAVA\")).doWithConnection(new Function<CalciteConnection,Void>(){public Void apply(CalciteConnection connection){try {DatabaseMetaData metaData = connection.getMetaData()assertThat(metaData.getIdentifierQuoteString(),equalTo(\"`\"))assertThat(metaData.supportsMixedCaseIdentifiers(),equalTo(true))assertThat(metaData.storesMixedCaseIdentifiers(),equalTo(false))assertThat(metaData.storesUpperCaseIdentifiers(),equalTo(false))assertThat(metaData.storesLowerCaseIdentifiers(),equalTo(false))assertThat(metaData.supportsMixedCaseQuotedIdentifiers(),equalTo(true))assertThat(metaData.storesMixedCaseQuotedIdentifiers(),equalTo(false))assertThat(metaData.storesUpperCaseQuotedIdentifiers(),equalTo(false))assertThat(metaData.storesLowerCaseQuotedIdentifiers(),equalTo(false))return null}catch (SQLException e) }})@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1->4 [style = dashed, label="0"];
1->2 [style = dashed, label="0"];
3->2 [style = bold, label=""];
0->1 [style = bold, label=""];
5->4 [style = bold, label=""];
}
