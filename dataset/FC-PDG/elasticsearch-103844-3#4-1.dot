digraph {
3 [style = filled, label = "final Version nodeVersion = NodeMetaDataTests.tooOldVersion()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final ElasticsearchException elasticsearchException = expectThrows(,null)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final Version nodeVersion = NodeMetaDataTests.tooNewVersion()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final NodeMetaData nodeMetaData = NodeMetaData.FORMAT.loadLatestState(logger,xContentRegistry(),nodePaths)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testWarnsIfTooOld['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final String nodeId = randomAlphaOfLength(10)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "NodeMetaData.FORMAT.writeAndCleanup(new NodeMetaData(nodeId,nodeVersion),nodePaths)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final ElasticsearchException elasticsearchException = expectThrows(,null)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertThat(mockTerminal.getOutput(),allOf(containsString(\"data loss\"),containsString(\"You should not use this tool\"),containsString(Version.CURRENT.toString()),containsString(nodeVersion.toString())))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "mockTerminal.addTextInput(randomFrom(\"yy\",\"Yy\",\"n\",\"yes\",\"true\",\"N\",\"no\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "expectThrows(,null)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testWarnsIfTooOld['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "PersistedClusterStateService.overrideVersion(nodeVersion,nodePaths)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "mockTerminal.addTextInput(\"n\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(elasticsearchException.getMessage(),equalTo(\"aborted by user\"))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final NodeMetaData nodeMetaData = PersistedClusterStateService.nodeMetaData(nodePaths)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertThat(nodeMetaData.nodeVersion(),equalTo(nodeVersion))@@@14@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testWarnsIfTooNew['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(nodeMetaData.nodeVersion(),equalTo(nodeVersion))@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertThat(mockTerminal.getOutput(),allOf(containsString(\"too old\"),containsString(\"data loss\"),containsString(\"You should not use this tool\"),containsString(Version.CURRENT.toString()),containsString(nodeVersion.toString())))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(nodeMetaData.nodeId(),equalTo(nodeId))@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final MockTerminal mockTerminal = new MockTerminal()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
11->20 [style = bold, label=""];
9->11 [style = bold, label=""];
5->9 [style = bold, label=""];
8->19 [style = bold, label=""];
3->15 [style = solid, label="nodeVersion"];
11->4 [style = bold, label=""];
8->3 [style = bold, label=""];
8->12 [style = solid, label="nodeId"];
3->6 [style = bold, label=""];
3->15 [style = bold, label=""];
16->17 [style = bold, label=""];
5->14 [style = bold, label=""];
19->6 [style = bold, label=""];
12->0 [style = bold, label=""];
4->7 [style = bold, label=""];
2->12 [style = bold, label=""];
3->0 [style = solid, label="nodeVersion"];
3->19 [style = dashed, label="0"];
6->1 [style = bold, label=""];
19->0 [style = solid, label="nodeVersion"];
21->9 [style = bold, label=""];
3->6 [style = solid, label="nodeVersion"];
9->14 [style = dashed, label="0"];
10->8 [style = bold, label=""];
13->3 [style = bold, label=""];
3->17 [style = solid, label="nodeVersion"];
4->20 [style = dashed, label="0"];
7->2 [style = bold, label=""];
1->21 [style = bold, label=""];
2->16 [style = dashed, label="0"];
7->16 [style = bold, label=""];
5->21 [style = dashed, label="0"];
18->8 [style = bold, label=""];
20->7 [style = bold, label=""];
8->6 [style = solid, label="nodeId"];
14->11 [style = bold, label=""];
19->6 [style = solid, label="nodeVersion"];
15->1 [style = bold, label=""];
}
