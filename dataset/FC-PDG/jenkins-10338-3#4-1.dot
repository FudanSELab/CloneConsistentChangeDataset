digraph {
14 [style = filled, label = "FreeStyleBuild b = r.buildAndAssertSuccess(p)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "p.getBuildersList().add(new TestBuilder(){public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener){listener.getLogger().print(\"abc\")listener.getLogger().print(HyperlinkNote.encodeTo(\"http://infradna.com/\",\"def\") + \"\")return true}})@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(xml,3,xml.split(\"ooo\").length)@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "completedStatelessLogAnnotation['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "consoleAnnotationFilterOut['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(1,rsp.selectNodes(\"//A(@href='http://infradna.com/'(\").size())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(raw.getContent().contains(nl + \"---\" + nl + \"ooo\" + nl + \"ooo\" + nl))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "String xml = rsp.asXml()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(1,rsp.selectNodes(\"//B(@class='demo'(\").size())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertEquals(1,DomNodeUtil.selectNodes(rsp,\"//B(@class='demo'(\").size())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertTrue(raw.getContent().contains(\"abcdef\"))@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "System.out.println(raw.getContent())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "HtmlPage rsp = r.createWebClient().getPage(b,\"console\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "FreeStyleProject p = r.createFreeStyleProject()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "String nl = System.getProperty(\"line.separator\")@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "TextPage raw = (TextPage)r.createWebClient().goTo(b.getUrl() + \"consoleText\",\"text/plain\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "completedStatelessLogAnnotation['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8->16 [style = bold, label=""];
4->3 [style = bold, label=""];
0->9 [style = bold, label=""];
16->0 [style = bold, label=""];
14->7 [style = solid, label="b"];
6->8 [style = dashed, label="0"];
11->1 [style = bold, label=""];
12->11 [style = bold, label=""];
8->6 [style = bold, label=""];
6->0 [style = bold, label=""];
3->2 [style = solid, label="xml"];
7->8 [style = bold, label=""];
7->8 [style = solid, label="b"];
1->7 [style = bold, label=""];
14->7 [style = bold, label=""];
6->13 [style = dashed, label="0"];
15->11 [style = bold, label=""];
3->2 [style = bold, label=""];
5->4 [style = solid, label="nl"];
5->4 [style = bold, label=""];
9->5 [style = bold, label=""];
1->14 [style = bold, label=""];
11->7 [style = solid, label="p"];
11->14 [style = solid, label="p"];
8->13 [style = bold, label=""];
13->0 [style = bold, label=""];
10->11 [style = bold, label=""];
}
