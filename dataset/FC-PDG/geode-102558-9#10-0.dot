digraph {
23 [style = filled, label = "Arrays.fill(netBytes,(byte)0x1F)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "unwrappedBuffer.flip()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(wrappedData.position()).isEqualTo(netBytes.length)@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "appData.put(appBytes)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "verify(spyNioSslEngine,times(1)).expandWriteBuffer(any(),any(),any())@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "assertThat(unwrappedBuffer.remaining()).isEqualTo(0)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "verify(spyNioSslEngine,times(1)).handleBlockingTasks()@@@18@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "appData.flip()@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Arrays.fill(appBytes,(byte)0x1F)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(wrappedBuffer).isEqualTo(appData)@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(wrappedBuffer).isEqualTo(appData)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "testEngine.addReturnResult(new SSLEngineResult(BUFFER_UNDERFLOW,NEED_TASK,0,0))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ByteBuffer appData = ByteBuffer.allocate(outputSharing.getBuffer().capacity() + 100)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "wrappedData.flip()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "unwrapWithBufferUnderflow['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "wrap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ByteBuffer appData = ByteBuffer.allocate(nioSslEngine.myNetData.capacity() + 100)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "ByteBuffer unwrappedBuffer = sharedBuffer.getBuffer()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "wrap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "ByteBuffer wrappedData = ByteBuffer.allocate(inputSharing.getBuffer().capacity())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "appData.flip()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "wrappedData.put(netBytes)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "verify(spyNioSslEngine,times(1)).handleBlockingTasks()@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "byte(( netBytes = new byte((((@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "verify(spyBufferPool,times(1)).expandWriteBufferIfNeeded(any(),any(),any())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "ByteBuffer wrappedBuffer = outputSharing2.getBuffer()@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "byte(( appBytes = new byte((((@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3->29 [style = dashed, label="0"];
5->8 [style = bold, label=""];
19->18 [style = bold, label=""];
14->11 [style = solid, label="appData"];
9->11 [style = solid, label="testEngine"];
15->14 [style = bold, label=""];
16->8 [style = bold, label=""];
3->12 [style = solid, label="appData"];
0->6 [style = bold, label=""];
0->23 [style = dashed, label="0"];
9->4 [style = bold, label=""];
22->23 [style = solid, label="netBytes"];
23->26 [style = bold, label=""];
17->13 [style = solid, label="appBytes"];
28->9 [style = bold, label=""];
10->28 [style = dashed, label="0"];
14->17 [style = bold, label=""];
4->27 [style = dashed, label="0"];
25->29 [style = bold, label=""];
11->19 [style = bold, label=""];
13->0 [style = solid, label="appBytes"];
11->24 [style = bold, label=""];
12->1 [style = bold, label=""];
22->23 [style = bold, label=""];
11->2 [style = bold, label=""];
7->3 [style = bold, label=""];
9->27 [style = bold, label=""];
24->20 [style = bold, label=""];
30->21 [style = bold, label=""];
27->11 [style = bold, label=""];
6->26 [style = dashed, label="0"];
6->10 [style = bold, label=""];
22->26 [style = solid, label="netBytes"];
3->13 [style = bold, label=""];
13->0 [style = bold, label=""];
10->9 [style = bold, label=""];
17->13 [style = bold, label=""];
26->28 [style = bold, label=""];
29->22 [style = bold, label=""];
2->24 [style = dashed, label="0"];
4->11 [style = bold, label=""];
20->30 [style = bold, label=""];
13->6 [style = solid, label="appBytes"];
14->16 [style = solid, label="appData"];
13->22 [style = dashed, label="0"];
17->0 [style = solid, label="appBytes"];
8->12 [style = bold, label=""];
2->5 [style = bold, label=""];
10->4 [style = solid, label="testEngine"];
18->16 [style = bold, label=""];
}
