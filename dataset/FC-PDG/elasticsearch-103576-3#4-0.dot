digraph {
6 [style = filled, label = "assertFalse(retentionLeases.v1())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testPeerRecoveryRetentionLeasesForUnassignedCopiesExpireEventually['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testPeerRecoveryRetentionLeasesForAssignedCopiesDoNotEverExpire['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(\"should have expired something\",retentionLeases.v1())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "replicationTracker.addPeerRecoveryRetentionLease(unknownNodeId,randomCheckpoint(),EMPTY_LISTENER)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final Set<String> leaseIds = retentionLeases.v2().leases().stream().map(null).collect(Collectors.toSet())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final Tuple<Boolean,RetentionLeases> retentionLeases = replicationTracker.getRetentionLeases(true)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "currentTimeMillis.set(randomLongBetween(currentTimeMillis.get() + IndexSettings.INDEX_SOFT_DELETES_RETENTION_LEASE_PERIOD_SETTING.get(settings).millis() + 1,Long.MAX_VALUE))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final String unknownNodeId = randomAlphaOfLength(10)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(leaseIds,hasSize(2))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "startReplica()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "randomBoolean()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(leaseIds,equalTo(replicationTracker.routingTable.shards().stream().map(null).collect(Collectors.toSet())))@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testPeerRecoveryRetentionLeasesForAssignedCopiesDoNotEverExpire['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertThat(leaseIds,hasSize(2))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "currentTimeMillis.set(currentTimeMillis.get() + randomLongBetween(0,Long.MAX_VALUE - currentTimeMillis.get()))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final Tuple<Boolean,RetentionLeases> retentionLeases = replicationTracker.getRetentionLeases(true)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "safeCommitInfo = randomSafeCommitInfo()@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
12->7 [style = bold, label=""];
3->11 [style = bold, label=""];
4->7 [style = bold, label=""];
7->13 [style = solid, label="leaseIds"];
3->2 [style = bold, label=""];
7->15 [style = solid, label="leaseIds"];
5->4 [style = solid, label="leaseIds"];
0->3 [style = dotted, label="true"];
14->0 [style = bold, label=""];
0->3 [style = bold, label=""];
8->6 [style = bold, label=""];
11->16 [style = bold, label=""];
0->11 [style = bold, label=""];
5->4 [style = bold, label=""];
2->8 [style = bold, label=""];
2->9 [style = bold, label=""];
6->12 [style = dashed, label="0"];
11->16 [style = solid, label="unknownNodeId"];
15->13 [style = bold, label=""];
6->5 [style = bold, label=""];
5->7 [style = solid, label="leaseIds"];
5->12 [style = bold, label=""];
7->15 [style = bold, label=""];
16->17 [style = bold, label=""];
0->2 [style = bold, label=""];
9->8 [style = bold, label=""];
17->5 [style = bold, label=""];
10->0 [style = bold, label=""];
1->0 [style = bold, label=""];
}
