digraph {
1 [style = filled, label = "c.get().header(of((String)null)).run().assertBody().is(\"gzip,deflate\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "c.get().header(of((Supplier<?>)null)).run().assertBody().isEmpty()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "RestClient c = client().build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "c.get().header(of((Object)null)).run().assertBody().isEmpty()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "c.get().header(acceptEncoding(VALUE)).run().assertBody().is(VALUE)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "c.get().header(of(null)).run().assertBody().is(VALUE)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "a01_basic['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "c.get().header(acceptEncoding((Supplier<?>)null)).run().assertBody().is(\"gzip,deflate\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "a01_basic['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "c.get().header(acceptEncoding((Object)null)).run().assertBody().is(\"gzip,deflate\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "c.get().header(acceptEncoding((String)null)).run().assertBody().is(\"gzip,deflate\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "c.get().header(of(null)).run().assertBody().is(\"gzip,deflate\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "c.get().header(of(new StringBuilder(VALUE))).run().assertBody().is(VALUE)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "c.get().header(of((String)null)).run().assertBody().isEmpty()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "c.get().header(of((Object)null)).run().assertBody().is(\"gzip,deflate\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "c.get().header(of(null)).run().assertBody().isEmpty()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "c.get().header(new AcceptEncoding(VALUE)).run().assertBody().is(VALUE)@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "c.get().header(of((Supplier<?>)null)).run().assertBody().is(\"gzip,deflate\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "c.get().header(acceptEncoding(null)).run().assertBody().is(VALUE)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "c.get().header(new Warning(VALUE)).run().assertBody().is(VALUE)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "c.get().header(of(VALUE)).run().assertBody().is(VALUE)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "c.get().header(acceptEncoding(new StringBuilder(VALUE))).run().assertBody().is(VALUE)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "a01_basic['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "c.get().header(of(VALUE)).run().assertBody().is(VALUE)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "c.get().header(acceptEncoding(null)).run().assertBody().is(\"gzip,deflate\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "c.get().header(acceptEncoding(VALUE)).run().assertBody().is(VALUE)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->9 [style = bold, label=""];
23->5 [style = bold, label=""];
5->20 [style = bold, label=""];
9->2 [style = bold, label=""];
1->15 [style = dashed, label="0"];
11->4 [style = bold, label=""];
3->24 [style = dashed, label="0"];
12->11 [style = bold, label=""];
5->15 [style = bold, label=""];
10->3 [style = bold, label=""];
4->22 [style = dashed, label="0"];
7->8 [style = bold, label=""];
2->17 [style = dashed, label="0"];
20->25 [style = bold, label=""];
15->18 [style = bold, label=""];
3->0 [style = bold, label=""];
8->22 [style = bold, label=""];
1->20 [style = dashed, label="0"];
0->14 [style = dashed, label="0"];
19->5 [style = bold, label=""];
5->1 [style = bold, label=""];
6->5 [style = bold, label=""];
13->17 [style = bold, label=""];
25->24 [style = bold, label=""];
17->12 [style = bold, label=""];
21->9 [style = bold, label=""];
24->21 [style = bold, label=""];
0->21 [style = dashed, label="0"];
9->13 [style = dashed, label="0"];
7->12 [style = dashed, label="0"];
16->14 [style = bold, label=""];
2->7 [style = bold, label=""];
8->4 [style = bold, label=""];
14->13 [style = bold, label=""];
8->11 [style = dashed, label="0"];
1->10 [style = bold, label=""];
10->25 [style = dashed, label="0"];
10->18 [style = dashed, label="0"];
3->16 [style = dashed, label="0"];
18->16 [style = bold, label=""];
}
