digraph {
5 [style = filled, label = "assertThat(result.getGroup()).isEqualTo(this.primaryGroup)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(getHealth(result)).isEqualTo(this.up)@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "getHealthWhenPathIsNotGroupReturnsResultFromPrimaryGroup['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(getHealth(result)).isNotSameAs(this.up)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "HealthResult<T> result = create(this.registry,this.groups).getHealth(ApiVersion.V3,null,SecurityContext.NONE,false)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "getHealthWhenPathIsEmptyUsesPrimaryGroup['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "HealthResult<T> result = create(this.registry,this.groups).getHealth(ApiVersion.V3,SecurityContext.NONE,false)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "this.registry.registerContributor(\"test\",createContributor(this.up))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "getHealthWhenPathIsEmptyUsesPrimaryGroup['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "HealthResult<T> result = create(this.registry,this.groups).getHealth(ApiVersion.V3,SecurityContext.NONE,false,\"test\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(getHealth(result).getStatus()).isEqualTo(Status.UP)@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8->1 [style = bold, label=""];
6->5 [style = bold, label=""];
5->2 [style = bold, label=""];
1->6 [style = bold, label=""];
7->1 [style = bold, label=""];
1->0 [style = bold, label=""];
10->5 [style = bold, label=""];
0->6 [style = dashed, label="0"];
3->1 [style = bold, label=""];
5->9 [style = bold, label=""];
1->10 [style = bold, label=""];
2->9 [style = dashed, label="0"];
2->4 [style = bold, label=""];
0->10 [style = dashed, label="0"];
0->5 [style = bold, label=""];
}
