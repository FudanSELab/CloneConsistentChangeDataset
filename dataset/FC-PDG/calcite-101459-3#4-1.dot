digraph {
0 [style = filled, label = "RexInputRef leftKeyInputRef = RexInputRef.of(leftJoinIndex,EMP_DEPT_JOIN_REL_FIELDS)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testSplitJoinConditionExpandedIsNotDistinctFrom['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "RexNode joinCond = relBuilder.call(SqlStdOperatorTable.OR,relBuilder.call(SqlStdOperatorTable.EQUALS,leftKeyInputRef,rightKeyInputRef),relBuilder.call(SqlStdOperatorTable.AND,relBuilder.call(SqlStdOperatorTable.IS_NULL,leftKeyInputRef),relBuilder.call(SqlStdOperatorTable.IS_NULL,rightKeyInputRef)))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testSplitJoinConditionExpandedIsNotDistinctFrom['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testSplitJoinConditionExpandedIsNotDistinctFromUsingCase2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "RexNode joinCond = REL_BUILDER.call(SqlStdOperatorTable.CASE,REL_BUILDER.call(SqlStdOperatorTable.IS_NULL,leftKeyInputRef),REL_BUILDER.call(SqlStdOperatorTable.IS_NULL,rightKeyInputRef),REL_BUILDER.call(SqlStdOperatorTable.IS_NULL,rightKeyInputRef),REL_BUILDER.call(SqlStdOperatorTable.IS_NULL,leftKeyInputRef),REL_BUILDER.call(SqlStdOperatorTable.EQUALS,leftKeyInputRef,rightKeyInputRef))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "RexInputRef rightKeyInputRef = RexInputRef.of(EMP_ROW.getFieldCount() + rightJoinIndex,EMP_DEPT_JOIN_REL_FIELDS)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "splitJoinConditionHelper(joinCond,Collections.singletonList(leftJoinIndex),Collections.singletonList(rightJoinIndex),Collections.singletonList(false),relBuilder.literal(true))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "splitJoinConditionHelper(joinCond,Collections.singletonList(leftJoinIndex),Collections.singletonList(rightJoinIndex),Collections.singletonList(false),REL_BUILDER.literal(true))@@@8@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "RexNode joinCond = REL_BUILDER.call(SqlStdOperatorTable.OR,REL_BUILDER.call(SqlStdOperatorTable.EQUALS,leftKeyInputRef,rightKeyInputRef),REL_BUILDER.call(SqlStdOperatorTable.AND,REL_BUILDER.call(SqlStdOperatorTable.IS_NULL,leftKeyInputRef),REL_BUILDER.call(SqlStdOperatorTable.IS_NULL,rightKeyInputRef)))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "int leftJoinIndex = EMP_SCAN.getRowType().getFieldNames().indexOf(\"DEPTNO\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "int rightJoinIndex = DEPT_ROW.getFieldNames().indexOf(\"DEPTNO\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
5->10 [style = bold, label=""];
3->7 [style = solid, label="leftJoinIndex"];
4->2 [style = solid, label="rightJoinIndex"];
10->2 [style = solid, label="joinCond"];
5->9 [style = bold, label=""];
9->7 [style = solid, label="joinCond"];
8->3 [style = bold, label=""];
1->9 [style = dashed, label="0"];
1->10 [style = dashed, label="0"];
9->7 [style = bold, label=""];
2->7 [style = dashed, label="0"];
3->4 [style = bold, label=""];
3->2 [style = solid, label="leftJoinIndex"];
3->0 [style = solid, label="leftJoinIndex"];
4->0 [style = bold, label=""];
1->2 [style = solid, label="joinCond"];
5->1 [style = bold, label=""];
11->3 [style = bold, label=""];
5->10 [style = solid, label="rightKeyInputRef"];
5->1 [style = solid, label="rightKeyInputRef"];
10->2 [style = bold, label=""];
1->2 [style = bold, label=""];
0->9 [style = solid, label="leftKeyInputRef"];
5->9 [style = solid, label="rightKeyInputRef"];
4->5 [style = solid, label="rightJoinIndex"];
0->10 [style = solid, label="leftKeyInputRef"];
0->1 [style = solid, label="leftKeyInputRef"];
0->5 [style = bold, label=""];
4->7 [style = solid, label="rightJoinIndex"];
}
