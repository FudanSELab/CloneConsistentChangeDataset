digraph {
0 [style = filled, label = "ko2 = (KeyedObjects)ko1.clone()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "obj1 = new DefaultPieDataset()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testSerialization['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "ko1.addObject(\"K1\",obj1)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Object obj1 = new ArrayList<Object>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "testCloning2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTrue(ko1 != ko2)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Object obj1 = new ArrayList()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertTrue(ko1.getClass() == ko2.getClass())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(ko1 != ko2)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertTrue(ko1.getClass() == ko2.getClass())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ko1.addObject(\"Key 3\",\"Object 2\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ko1 = new KeyedObjects()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(ko1.equals(ko2))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(ko1,ko2)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(ko2.getObject(\"K1\") == obj1)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ko1.addObject(\"Key 1\",\"Object 1\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "KeyedObjects ko1 = new KeyedObjects()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ko1.addObject(\"K1\",obj1)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testCloning2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertTrue(ko1.equals(ko2))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(ko2.getObject(\"K1\") != obj1)@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "ko1.addObject(\"Key 2\",null)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "KeyedObjects ko2 = (KeyedObjects)ko1.clone()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "KeyedObjects ko2 = (KeyedObjects)TestUtils.serialised(ko1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
17->3 [style = solid, label="obj1"];
3->6 [style = dashed, label="0"];
2->19 [style = dashed, label="0"];
16->8 [style = bold, label=""];
17->6 [style = bold, label=""];
6->22 [style = bold, label=""];
15->2 [style = solid, label="ko2"];
22->21 [style = bold, label=""];
18->17 [style = bold, label=""];
23->20 [style = solid, label="ko1"];
8->6 [style = bold, label=""];
3->15 [style = bold, label=""];
13->12 [style = solid, label="obj1"];
9->10 [style = bold, label=""];
24->23 [style = bold, label=""];
12->0 [style = bold, label=""];
13->10 [style = solid, label="obj1"];
23->19 [style = solid, label="ko1"];
0->9 [style = solid, label="ko2"];
15->5 [style = bold, label=""];
14->7 [style = bold, label=""];
17->11 [style = solid, label="obj1"];
7->9 [style = bold, label=""];
5->1 [style = bold, label=""];
8->3 [style = solid, label="obj1"];
0->14 [style = solid, label="ko2"];
0->14 [style = bold, label=""];
21->20 [style = bold, label=""];
23->6 [style = bold, label=""];
8->11 [style = solid, label="obj1"];
11->13 [style = bold, label=""];
4->14 [style = solid, label="ko1"];
15->5 [style = solid, label="ko2"];
4->12 [style = bold, label=""];
8->17 [style = dashed, label="0"];
1->2 [style = bold, label=""];
6->5 [style = solid, label="ko1"];
20->19 [style = bold, label=""];
20->19 [style = solid, label="ko2"];
2->11 [style = bold, label=""];
13->4 [style = bold, label=""];
}
