digraph {
20 [style = filled, label = "testDeclineCallOnCancelBarrierOneInput['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testHarness.processEvent(new CancelCheckpointMarker(2L),1,0)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "streamConfig.setStreamOperator(mapOperator)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "streamConfig.setOperatorID(new OperatorID())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testHarness.processEvent(new CancelCheckpointMarker(2L),0,0)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "streamConfig.setStreamOperator(op)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "CoStreamMap<String,String,String> op = new CoStreamMap<>(new UnionCoMap())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "StreamConfig streamConfig = testHarness.getStreamConfig()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(\"wrong checkpoint id\",2L,((CancelCheckpointMarker)result).getCheckpointId())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(\"wrong type emitted\",result instanceof CancelCheckpointMarker)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "streamConfig.setOperatorID(new OperatorID())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "OneInputStreamTask<String,String> task = new OneInputStreamTask<String,String>()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "testHarness.invoke(environment)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Object result = testHarness.getOutput().poll()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testHarness.waitForTaskRunning()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "StreamMockEnvironment environment = spy(testHarness.createEnvironment())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testHarness.endInput()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testHarness.waitForTaskCompletion()@@@22@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "TwoInputStreamTask<String,String,String> task = new TwoInputStreamTask<String,String,String>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testDeclineCallOnCancelBarrierTwoInputs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testHarness.processEvent(new CancelCheckpointMarker(2L),0,0)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testHarness.setupOutputForSingletonOperatorChain()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "testHarness.setupOutputForSingletonOperatorChain()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "OneInputStreamTaskTestHarness<String,String> testHarness = new OneInputStreamTaskTestHarness<>(null,1,2,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertNotNull(\"nothing emitted\",result)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "TwoInputStreamTaskTestHarness<String,String,String> testHarness = new TwoInputStreamTaskTestHarness<>(task,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testHarness.waitForInputProcessing()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testDeclineCallOnCancelBarrierOneInput['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "OneInputStreamTaskTestHarness<String,String> testHarness = new OneInputStreamTaskTestHarness<>(task,1,2,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "verify(environment,times(1)).declineCheckpoint(eq(2L),any())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
26->28 [style = solid, label="op"];
14->24 [style = dashed, label="0"];
4->3 [style = bold, label=""];
15->2 [style = bold, label=""];
20->17 [style = bold, label=""];
7->1 [style = bold, label=""];
10->15 [style = bold, label=""];
2->4 [style = solid, label="result"];
13->3 [style = solid, label="result"];
5->26 [style = dashed, label="0"];
10->27 [style = bold, label=""];
0->8 [style = solid, label="environment"];
17->14 [style = solid, label="task"];
17->22 [style = dashed, label="0"];
2->13 [style = solid, label="result"];
22->21 [style = bold, label=""];
19->11 [style = bold, label=""];
8->6 [style = bold, label=""];
5->18 [style = bold, label=""];
9->10 [style = bold, label=""];
3->16 [style = bold, label=""];
25->29 [style = bold, label=""];
16->19 [style = bold, label=""];
12->9 [style = bold, label=""];
1->26 [style = bold, label=""];
17->29 [style = dashed, label="0"];
27->15 [style = bold, label=""];
14->7 [style = bold, label=""];
2->13 [style = bold, label=""];
13->4 [style = solid, label="result"];
28->0 [style = bold, label=""];
12->10 [style = bold, label=""];
23->22 [style = bold, label=""];
29->24 [style = solid, label="task"];
5->18 [style = solid, label="mapOperator"];
17->14 [style = bold, label=""];
0->8 [style = bold, label=""];
18->28 [style = dashed, label="0"];
21->7 [style = bold, label=""];
1->5 [style = solid, label="mapOperator"];
26->28 [style = bold, label=""];
29->24 [style = bold, label=""];
24->7 [style = bold, label=""];
18->0 [style = bold, label=""];
8->6 [style = solid, label="environment"];
13->4 [style = bold, label=""];
6->12 [style = bold, label=""];
}
