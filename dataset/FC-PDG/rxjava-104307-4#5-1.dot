digraph {
12 [style = filled, label = "flatMapSelectorMaxConcurrent['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Set<Integer> expected = new HashSet<Integer>(Arrays.asList(1010,1011,2020,2021,3030,3031,4040,4041,5050,5051,6060,6061,7070,7071,8080,8081,9090,9091,10100,10101))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "Assert.assertTrue(expected.containsAll(to.values()))@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertTrue(expected.containsAll(ts.values()))@@@23@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "source.subscribe(ts)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "TestObserver<Integer> to = new TestObserver<Integer>()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(expected.size(),ts.values().size())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "flatMapSelectorMaxConcurrent['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "flatMapMaxConcurrent['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "System.out.println(\"- testFlatMapSelectorMaxConcurrent: \" + ts.values())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Flowable<Integer> source = Flowable.range(1,10).flatMap(new Function<Integer,Flowable<Integer>>(){@Override public Flowable<Integer> apply(Integer t1){return composer(Flowable.range(t1 * 10,2),subscriptionCount,m).subscribeOn(Schedulers.computation())}},new BiFunction<Integer,Integer,Integer>(){@Override public Integer apply(Integer t1,Integer t2){return t1 * 1000 + t2}},m)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "source.subscribe(to)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Set<Integer> expected = new HashSet<>(Arrays.asList(1010,1011,2020,2021,3030,3031,4040,4041,5050,5051,6060,6061,7070,7071,8080,8081,9090,9091,10100,10101))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "ts.assertNoErrors()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Observable<Integer> source = Observable.range(1,10).flatMap(new Function<Integer,Observable<Integer>>(){@Override public Observable<Integer> apply(Integer t1){return composer(Observable.range(t1 * 10,2),subscriptionCount,m).subscribeOn(Schedulers.computation())}},m)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "to.assertNoErrors()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "TestSubscriber<Integer> ts = new TestSubscriber<Integer>()@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "TestSubscriber<Integer> ts = new TestSubscriber<>()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "final int m = 4@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final AtomicInteger subscriptionCount = new AtomicInteger()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ts.awaitDone(5,TimeUnit.SECONDS)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(expected.size(),to.values().size())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "to.awaitDone(5,TimeUnit.SECONDS)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Set<Integer> expected = new HashSet<Integer>(Arrays.asList(10,11,20,21,30,31,40,41,50,51,60,61,70,71,80,81,90,91,100,101))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->18 [style = dashed, label="0"];
1->4 [style = bold, label=""];
4->14 [style = bold, label=""];
23->16 [style = bold, label=""];
16->18 [style = bold, label=""];
7->21 [style = dashed, label="0"];
0->13 [style = bold, label=""];
11->15 [style = dashed, label="0"];
2->3 [style = bold, label=""];
18->15 [style = bold, label=""];
8->20 [style = dashed, label="0"];
10->17 [style = bold, label=""];
3->17 [style = solid, label="m"];
0->17 [style = dashed, label="0"];
20->22 [style = bold, label=""];
0->7 [style = bold, label=""];
3->10 [style = bold, label=""];
6->1 [style = bold, label=""];
13->6 [style = solid, label="ts"];
1->16 [style = dashed, label="0"];
15->20 [style = bold, label=""];
11->14 [style = dashed, label="0"];
10->0 [style = bold, label=""];
7->6 [style = bold, label=""];
6->23 [style = dashed, label="0"];
8->9 [style = bold, label=""];
7->13 [style = dashed, label="0"];
9->5 [style = bold, label=""];
11->8 [style = bold, label=""];
14->8 [style = bold, label=""];
12->3 [style = bold, label=""];
3->0 [style = solid, label="m"];
7->6 [style = solid, label="ts"];
13->6 [style = bold, label=""];
4->11 [style = bold, label=""];
17->21 [style = bold, label=""];
19->3 [style = bold, label=""];
21->23 [style = solid, label="to"];
21->23 [style = bold, label=""];
}
