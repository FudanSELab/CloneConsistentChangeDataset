digraph {
15 [style = filled, label = "boolean useAsync@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertEquals(childrenList.get(0),\"bar\")@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "List<OpResult> multiChildrenList = multi(zk,Arrays.asList(Op.getChildren(\"/foo_auth\")))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "zk.create(\"/foo_auth\",null,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "List<OpResult> multiChildrenList@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "List<ACL> writeOnly = Collections.singletonList(new ACL(ZooDefs.Perms.WRITE,new Id(\"world\",\"anyone\")))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "List<String> childrenList = ((OpResult.GetChildrenResult)multiChildrenList.get(1)).getChildren()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(multiChildrenList.size(),1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "List<OpResult> multiChildrenList = multi(zk,Arrays.asList(Op.getChildren(\"/foo_auth\")),useAsync)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertTrue(multiChildrenList.get(1) instanceof OpResult.GetChildrenResult)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testMultiGetChildrenAuthentication['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertEquals(((OpResult.ErrorResult)multiChildrenList.get(0)).getErr(),KeeperException.Code.NOAUTH.intValue(),\"Expected NoAuthException for getting the children of a write only node\")@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertTrue(multiChildrenList.get(0) instanceof OpResult.ErrorResult)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "multiChildrenList = multi(zk,Arrays.asList(Op.getChildren(\"/foo_no_auth\"),Op.getChildren(\"/foo_auth\")))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "List<String> childrenList = ((OpResult.GetChildrenResult)multiChildrenList.get(0)).getChildren()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(childrenList.size(),1)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(multiChildrenList.size(),2)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testMultiGetChildrenAuthentication['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(childrenList.get(0),\"bar\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"Expected NoAuthException for getting the children of a write only node\",((OpResult.ErrorResult)multiChildrenList.get(0)).getErr(),KeeperException.Code.NOAUTH.intValue())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertEquals(multiChildrenList.size(),1)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "zk.create(\"/foo_auth/bar\",null,Ids.READ_ACL_UNSAFE,CreateMode.PERSISTENT)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "multiChildrenList = multi(zk,Arrays.asList(Op.getChildren(\"/foo_no_auth\")),useAsync)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "zk.create(\"/foo_no_auth\",null,writeOnly,CreateMode.PERSISTENT)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(childrenList.size(),1)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "multiChildrenList = multi(zk,Arrays.asList(Op.getChildren(\"/foo_no_auth\")))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "testMultiGetChildrenMixedAuthenticationErrorFirst['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertTrue(multiChildrenList.get(0) instanceof OpResult.GetChildrenResult)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(\"Expected NoAuthException for getting the children of a write only node\",((OpResult.ErrorResult)multiChildrenList.get(0)).getErr(),KeeperException.Code.NOAUTH.intValue())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->3 [style = bold, label=""];
2->19 [style = bold, label=""];
9->24 [style = dashed, label="0"];
11->1 [style = bold, label=""];
7->12 [style = bold, label=""];
12->1 [style = solid, label="writeOnly"];
18->15 [style = dotted, label="true"];
18->12 [style = bold, label=""];
22->28 [style = bold, label=""];
15->17 [style = solid, label="useAsync"];
9->8 [style = bold, label=""];
26->22 [style = bold, label=""];
20->2 [style = bold, label=""];
8->0 [style = bold, label=""];
3->10 [style = bold, label=""];
25->24 [style = bold, label=""];
28->21 [style = bold, label=""];
1->6 [style = bold, label=""];
6->16 [style = dashed, label="0"];
21->20 [style = bold, label=""];
6->25 [style = dashed, label="0"];
10->13 [style = bold, label=""];
0->4 [style = bold, label=""];
1->16 [style = bold, label=""];
12->14 [style = bold, label=""];
10->17 [style = dashed, label="0"];
3->17 [style = bold, label=""];
8->27 [style = dashed, label="0"];
23->12 [style = bold, label=""];
17->13 [style = bold, label=""];
6->9 [style = bold, label=""];
15->16 [style = solid, label="useAsync"];
5->19 [style = dashed, label="0"];
14->11 [style = bold, label=""];
1->25 [style = bold, label=""];
24->27 [style = bold, label=""];
16->9 [style = bold, label=""];
2->5 [style = bold, label=""];
13->2 [style = bold, label=""];
27->26 [style = bold, label=""];
}
