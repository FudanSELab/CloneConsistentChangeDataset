digraph {
19 [style = filled, label = "logger.info(\"(Before Create( Spec \" + i++ + \": \" + gson.toJson(topologySpec))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(specs.size(),1,\"Spec store should contain 1 Spec after addition\")@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Assert.assertEquals(flowCatalog.getSize(),1,\"Spec store should contain 1 Spec after addition\")@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "createTopologySpec['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Collection<Spec> specs = flowCatalog.getSpecs()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "logger.info(\"(After Create( Number of specs: \" + specs.size())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertTrue(specs.size() == 0,\"Spec store should be empty before addition\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "topologySpec = (TopologySpec)spec@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "int i = 0@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "specs = flowCatalog.getSpecs()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "logger.info(\"(After Create( Spec \" + i++ + \": \" + gson.toJson(flowSpec))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "logger.info(\"(After Create( Number of specs: \" + specs.size())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "createFlowSpec['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "TopologySpec topologySpec = (TopologySpec)spec@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertTrue(specs.size() == 0,\"Spec store should be empty before addition\")@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "FlowSpec flowSpec = (FlowSpec)spec@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertTrue(specs.size() == 1,\"Spec store should contain 1 Spec after addition\")@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "this.topologyCatalog.put(topologySpec)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Collection<Spec> specs = topologyCatalog.getSpecs()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "logger.info(\"(Before Create( Number of specs: \" + specs.size())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertTrue(specCompiler.getTopologySpecMap().size() == 1,\"SpecCompiler should contain 1 Spec after addition\")@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "logger.info(\"(After Create( Spec \" + i++ + \": \" + gson.toJson(topologySpec))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertTrue(specs.size() == 1,\"Spec store should contain 1 Spec after addition\")@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "logger.info(\"(Before Create( Spec \" + i++ + \": \" + gson.toJson(flowSpec))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "specs = topologyCatalog.getSpecs()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "logger.info(\"(Before Create( Number of specs: \" + specs.size())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertTrue(specCompiler.getTopologySpecMap().size() == 0,\"SpecCompiler should not know about any Topology \" + \"before addition\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "createFlowSpec['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "IdentityFlowToJobSpecCompiler specCompiler = (IdentityFlowToJobSpecCompiler)this.orchestrator.getSpecCompiler()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "i = 0@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(specs.size(),0,\"Spec store should be empty before addition\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "i = 0@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->10 [style = bold, label=""];
4->3 [style = bold, label=""];
12->29 [style = solid, label="i"];
15->10 [style = bold, label=""];
13->24 [style = bold, label=""];
31->22 [style = bold, label=""];
25->13 [style = bold, label=""];
2->6 [style = bold, label=""];
12->21 [style = bold, label=""];
0->1 [style = solid, label="i"];
11->16 [style = dashed, label="0"];
0->12 [style = bold, label=""];
1->29 [style = dashed, label="0"];
13->7 [style = solid, label="i"];
4->31 [style = dashed, label="0"];
19->10 [style = bold, label=""];
10->26 [style = bold, label=""];
16->17 [style = bold, label=""];
29->23 [style = bold, label=""];
9->7 [style = bold, label=""];
12->1 [style = bold, label=""];
29->21 [style = bold, label=""];
12->21 [style = dashed, label="0"];
3->0 [style = bold, label=""];
9->10 [style = solid, label="flowSpec"];
1->11 [style = bold, label=""];
24->30 [style = bold, label=""];
7->9 [style = bold, label=""];
30->19 [style = bold, label=""];
7->5 [style = bold, label=""];
26->31 [style = bold, label=""];
21->29 [style = bold, label=""];
22->20 [style = bold, label=""];
30->19 [style = solid, label="topologySpec"];
21->29 [style = solid, label="topologySpec"];
7->19 [style = dashed, label="0"];
1->16 [style = bold, label=""];
24->19 [style = solid, label="i"];
6->8 [style = bold, label=""];
20->12 [style = bold, label=""];
1->12 [style = bold, label=""];
10->4 [style = bold, label=""];
12->1 [style = solid, label="flowSpec"];
30->31 [style = solid, label="topologySpec"];
7->15 [style = bold, label=""];
9->7 [style = solid, label="flowSpec"];
13->9 [style = bold, label=""];
28->27 [style = bold, label=""];
5->15 [style = dashed, label="0"];
27->25 [style = bold, label=""];
14->6 [style = bold, label=""];
23->18 [style = bold, label=""];
9->30 [style = dashed, label="0"];
8->13 [style = bold, label=""];
19->30 [style = bold, label=""];
}
