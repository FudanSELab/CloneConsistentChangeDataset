digraph {
8 [style = filled, label = "assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).allocationId().getId(),equalTo(\"allocId1\"))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertClusterHealthStatus(allocation,ClusterHealthStatus.YELLOW)@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(),equalTo(1))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testShardLockObtainFailedException['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).currentNodeId(),equalTo(node1.getId()))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testFoundAllocationButNoDecider['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testAllocator.addData(node1,\"allocId1\",randomBoolean())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testAllocator.addData(node1,\"allocId1\",randomBoolean(),new ShardLockObtainFailedException(shardId,\"test\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final RoutingAllocation allocation = routingAllocationWithOnePrimaryNoReplicas(noAllocationDeciders(),CLUSTER_RECOVERED,\"allocId1\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertClusterHealthStatus(allocation,ClusterHealthStatus.YELLOW)@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(allocation.routingNodes().unassigned().ignored().isEmpty(),equalTo(true))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "final RoutingAllocation allocation = routingAllocationWithOnePrimaryNoReplicas(yesAllocationDeciders(),CLUSTER_RECOVERED,\"allocId1\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(allocation.routingNodesChanged(),equalTo(true))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testFoundAllocationButNoDecider['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "testAllocator.allocateUnassigned(allocation)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->9 [style = bold, label=""];
15->13 [style = bold, label=""];
1->8 [style = bold, label=""];
4->6 [style = bold, label=""];
5->9 [style = solid, label="allocation"];
7->0 [style = bold, label=""];
11->12 [style = solid, label="allocation"];
9->7 [style = bold, label=""];
11->15 [style = bold, label=""];
11->13 [style = solid, label="allocation"];
3->5 [style = bold, label=""];
10->5 [style = bold, label=""];
8->2 [style = bold, label=""];
5->2 [style = solid, label="allocation"];
5->11 [style = dashed, label="0"];
0->1 [style = bold, label=""];
4->15 [style = dashed, label="0"];
5->4 [style = bold, label=""];
13->9 [style = bold, label=""];
6->9 [style = bold, label=""];
14->11 [style = bold, label=""];
8->12 [style = bold, label=""];
}
