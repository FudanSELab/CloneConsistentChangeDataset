digraph {
3 [style = filled, label = "pred.op()@@@11@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "return Expressions.predicate(predicate.op(),name,apply(predicate.asLiteralPredicate().literal().value()))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "BoundPredicate<CharSequence> predicate@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "BoundPredicate<T> predicate@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "BoundLiteralPredicate<T> pred = predicate.asLiteralPredicate()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "String name@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "return Expressions.predicate(pred.op(),name,apply(pred.literal().value()))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "projectStrict['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "predicate.isLiteralPredicate() && predicate.op() == Expression.Operation.NOT_EQ@@@9@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "BoundPredicate<T> predicate@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "predicate instanceof BoundLiteralPredicate@@@9@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "predicate.isUnaryPredicate()@@@6@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "predicate instanceof BoundUnaryPredicate@@@6@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "return null@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "predicate.term() instanceof BoundTransform@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "predicate.isUnaryPredicate()@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "return Expressions.predicate(predicate.op(),name)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "return null@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "return null@@@16@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "project['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "predicate.isLiteralPredicate()@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "predicate.isSetPredicate() && predicate.op() == Expression.Operation.NOT_IN@@@12@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "return ProjectionUtil.projectTransformPredicate(this,name,predicate)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "return null@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "return ProjectionUtil.transformSet(name,predicate.asSetPredicate(),this)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "return ProjectionUtil.truncateArray(name,predicate.asLiteralPredicate(),this)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "projectStrict['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "String name@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10->15 [style = dashed, label="0"];
16->19 [style = dotted, label="true"];
4->10 [style = bold, label=""];
13->17 [style = dotted, label="true"];
24->12 [style = dotted, label="true"];
24->12 [style = bold, label=""];
3->7 [style = dotted, label="true"];
10->12 [style = dotted, label="true"];
16->9 [style = dotted, label="true"];
4->24 [style = bold, label=""];
22->26 [style = bold, label=""];
22->23 [style = dotted, label="true"];
4->1 [style = dotted, label="true"];
1->15 [style = bold, label=""];
18->13 [style = dotted, label="false"];
9->12 [style = solid, label="name"];
19->12 [style = solid, label="predicate"];
9->17 [style = solid, label="name"];
4->15 [style = bold, label=""];
23->26 [style = bold, label=""];
12->20 [style = bold, label=""];
9->27 [style = dashed, label="0"];
21->27 [style = dotted, label="true"];
0->11 [style = bold, label=""];
11->23 [style = dashed, label="0"];
2->5 [style = solid, label="predicate"];
2->10 [style = solid, label="predicate"];
27->1 [style = solid, label="name"];
12->26 [style = bold, label=""];
2->0 [style = solid, label="predicate"];
7->8 [style = bold, label=""];
24->22 [style = bold, label=""];
15->18 [style = bold, label=""];
22->23 [style = bold, label=""];
18->14 [style = dotted, label="true"];
25->12 [style = solid, label="predicate"];
0->22 [style = dashed, label="0"];
21->25 [style = dotted, label="true"];
2->1 [style = solid, label="predicate"];
25->1 [style = solid, label="predicate"];
6->4 [style = bold, label=""];
13->17 [style = bold, label=""];
3->5 [style = bold, label=""];
3->5 [style = dotted, label="true"];
6->2 [style = dotted, label="true"];
6->9 [style = dotted, label="true"];
11->3 [style = bold, label=""];
3->7 [style = bold, label=""];
10->12 [style = bold, label=""];
12->8 [style = bold, label=""];
1->24 [style = bold, label=""];
11->14 [style = dashed, label="0"];
9->14 [style = solid, label="name"];
10->0 [style = dotted, label="false"];
10->0 [style = bold, label=""];
0->8 [style = bold, label=""];
18->13 [style = bold, label=""];
24->22 [style = dotted, label="false"];
27->23 [style = solid, label="name"];
2->12 [style = solid, label="predicate"];
15->12 [style = dotted, label="true"];
15->18 [style = dotted, label="false"];
5->7 [style = bold, label=""];
0->18 [style = dashed, label="0"];
4->1 [style = bold, label=""];
15->12 [style = bold, label=""];
19->1 [style = solid, label="predicate"];
0->3 [style = dotted, label="true"];
21->4 [style = bold, label=""];
16->4 [style = bold, label=""];
9->1 [style = solid, label="name"];
0->11 [style = dotted, label="true"];
19->14 [style = solid, label="predicate"];
27->12 [style = solid, label="name"];
1->10 [style = bold, label=""];
18->14 [style = bold, label=""];
9->5 [style = solid, label="name"];
10->24 [style = dashed, label="0"];
14->20 [style = bold, label=""];
17->20 [style = bold, label=""];
13->20 [style = bold, label=""];
}
