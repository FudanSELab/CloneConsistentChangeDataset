digraph {
13 [style = filled, label = "final JobGraph jobGraph = env.getStreamGraph().getJobGraph()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "waitForAllTaskRunning(cluster.getMiniCluster(),jobId,false)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertFalse(BoundedPassThroughOperator.inputEnded)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "DataStream<Integer> stream = env.addSource(new InfiniteTestSource()).transform(\"pass-through\",BasicTypeInfo.INT_TYPE_INFO,operator)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertTrue(BoundedPassThroughOperator.inputEnded)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final int numSlotsPerTaskManager = 2@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testStopWithSavepointForFlip27Source['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "DataStream<Long> stream = env.fromSequence(0,Long.MAX_VALUE).transform(\"pass-through\",BasicTypeInfo.LONG_TYPE_INFO,operator)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "BoundedPassThroughOperator.getProgressLatch().await()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "MiniClusterWithClientResource cluster = clusterFactory.get()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "BoundedPassThroughOperator<Long> operator = new BoundedPassThroughOperator<>(ChainingStrategy.ALWAYS)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "BoundedPassThroughOperator<Integer> operator = new BoundedPassThroughOperator<>(chainingStrategy)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "testStopSavepointWithBoundedInput['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "client.stopWithSavepoint(jobId,drain,null).get()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "boolean drain@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final int numTaskManagers = 2@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testStopWithSavepointForFlip27Source['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "{cluster.after()}@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "{cluster.after()}@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertFalse(\"input ended with chainingStrategy \" + chainingStrategy,BoundedPassThroughOperator.inputEnded)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "drain@@@22@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "cluster.before()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "env.setParallelism(1)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "client.submitJob(jobGraph).get()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "client.stopWithSavepoint(jobId,false,null).get()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final JobID jobId = jobGraph.getJobID()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "stream.addSink(new DiscardingSink<>())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ClusterClient<?> client = cluster.getClusterClient()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final MiniClusterResourceFactory clusterFactory = new MiniClusterResourceFactory(numTaskManagers,numSlotsPerTaskManager,getFileBasedCheckpointsConfig())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "BoundedPassThroughOperator.resetForTest(1,true)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
16->2 [style = solid, label="operator"];
14->24 [style = solid, label="jobId"];
4->10 [style = bold, label=""];
10->18 [style = bold, label=""];
0->9 [style = bold, label=""];
25->28 [style = bold, label=""];
10->15 [style = bold, label=""];
11->1 [style = bold, label=""];
17->6 [style = dotted, label="true"];
23->6 [style = dotted, label="true"];
16->25 [style = dashed, label="0"];
20->0 [style = bold, label=""];
30->27 [style = bold, label=""];
28->7 [style = bold, label=""];
5->26 [style = bold, label=""];
4->26 [style = dashed, label="0"];
16->2 [style = bold, label=""];
3->22 [style = bold, label=""];
22->5 [style = bold, label=""];
19->25 [style = bold, label=""];
19->16 [style = bold, label=""];
26->30 [style = bold, label=""];
21->12 [style = bold, label=""];
10->15 [style = dotted, label="true"];
24->4 [style = bold, label=""];
10->30 [style = dashed, label="0"];
25->28 [style = solid, label="operator"];
1->21 [style = bold, label=""];
5->24 [style = bold, label=""];
5->4 [style = bold, label=""];
2->28 [style = dashed, label="0"];
11->21 [style = solid, label="numTaskManagers"];
9->3 [style = bold, label=""];
18->8 [style = bold, label=""];
2->7 [style = bold, label=""];
23->11 [style = bold, label=""];
12->19 [style = bold, label=""];
6->10 [style = solid, label="drain"];
1->21 [style = solid, label="numSlotsPerTaskManager"];
27->21 [style = bold, label=""];
13->14 [style = bold, label=""];
15->8 [style = bold, label=""];
29->11 [style = bold, label=""];
10->18 [style = dotted, label="false"];
14->20 [style = bold, label=""];
17->11 [style = bold, label=""];
}
