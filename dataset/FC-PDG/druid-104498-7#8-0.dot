digraph {
7 [style = filled, label = "Assert.assertEquals(task.getContext(),fromJson.getContext())@@@14@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testSerdeWithInterval['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "final CompactionTask task = builder.interval(COMPACTION_INTERVAL).tuningConfig(createTuningConfig()).context(ImmutableMap.of(\"testKey\",\"testContext\")).build()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "final CompactionTask fromJson = objectMapper.readValue(bytes,)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final CompactionTask task = new CompactionTask(null,null,DATA_SOURCE,null,SEGMENTS,null,null,null,null,createTuningConfig(),ImmutableMap.of(\"testKey\",\"testContext\"),objectMapper,AuthTestUtils.TEST_AUTHORIZER_MAPPER,null,rowIngestionMetersFactory)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testSerdeWithSegments['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(task.getTuningConfig(),fromJson.getTuningConfig())@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(task.getDimensionsSpec(),fromJson.getDimensionsSpec())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(task.getDataSource(),fromJson.getDataSource())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testSerdeWithInterval['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final Builder builder = new Builder(DATA_SOURCE,objectMapper,AuthTestUtils.TEST_AUTHORIZER_MAPPER,null,rowIngestionMetersFactory)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assert.assertEquals(task.getInterval(),fromJson.getInterval())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(task.isKeepSegmentGranularity(),fromJson.isKeepSegmentGranularity())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertNull(fromJson.getSegmentProvider().getSegments())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "final byte(( bytes = objectMapper.writeValueAsBytes(task)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(task.getSegments(),fromJson.getSegments())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final CompactionTask task = new CompactionTask(null,null,DATA_SOURCE,COMPACTION_INTERVAL,null,null,null,null,null,createTuningConfig(),ImmutableMap.of(\"testKey\",\"testContext\"),objectMapper,AuthTestUtils.TEST_AUTHORIZER_MAPPER,null,rowIngestionMetersFactory)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertEquals(task,fromJson)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Assert.assertEquals(task.getTargetCompactionSizeBytes(),fromJson.getTargetCompactionSizeBytes())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(task.getType(),fromJson.getType())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->12 [style = solid, label="fromJson"];
5->12 [style = dashed, label="0"];
17->1 [style = bold, label=""];
17->1 [style = solid, label="task"];
11->5 [style = solid, label="bytes"];
10->3 [style = bold, label=""];
8->6 [style = bold, label=""];
6->17 [style = dashed, label="0"];
19->17 [style = bold, label=""];
2->10 [style = bold, label=""];
4->7 [style = bold, label=""];
3->0 [style = bold, label=""];
1->11 [style = bold, label=""];
7->9 [style = bold, label=""];
6->1 [style = bold, label=""];
11->5 [style = bold, label=""];
5->2 [style = bold, label=""];
6->13 [style = dashed, label="0"];
15->11 [style = bold, label=""];
15->12 [style = solid, label="task"];
5->12 [style = bold, label=""];
0->4 [style = bold, label=""];
15->11 [style = solid, label="task"];
0->18 [style = bold, label=""];
1->11 [style = solid, label="bytes"];
13->15 [style = bold, label=""];
14->13 [style = bold, label=""];
16->4 [style = bold, label=""];
6->1 [style = solid, label="task"];
18->16 [style = bold, label=""];
}
