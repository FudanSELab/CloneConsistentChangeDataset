digraph {
6 [style = filled, label = "HiveTestUtils.createTextTableInserter(hiveShell,dbName,tblName).addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b2271b).addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b22721).commit(\"pt=1\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "HiveTestUtils.createTextTableInserter(hiveShell,dbName,tblName).addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b22703).addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b22709).commit(\"pt=0\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "String(( explain = src.explain().split(\"==.*==\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testReadPartitionTable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertArrayEquals(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b226d4,rowStrings)@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Table src = tEnv.sqlQuery(\"select * from hive.source_db.test_table_pt\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final String dbName = \"source_db\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertTrue(physicalExecutionPlan,physicalExecutionPlan.contains(\"HiveTableSource(year, value, pt) TablePath: source_db.test_table_pt_1, PartitionPruned: true, PartitionNums: 1\"))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testReadPartitionTable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "tEnv.executeSql(\"CREATE TABLE source_db.test_table_pt \" + \"(`year` STRING, `value` INT) partitioned by (pt int)\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final String tblName = \"test_table_pt_1\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "TableEnvironment tEnv = createTableEnv()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Object(( rowStrings = rows.stream().map(null).sorted().toArray()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "tEnv.executeSql(\"CREATE TABLE source_db.test_table_pt_1 \" + \"(`year` STRING, `value` INT) partitioned by (pt int)\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertTrue(optimizedLogicalPlan,optimizedLogicalPlan.contains(\"HiveTableSource(year, value, pt) TablePath: source_db.test_table_pt_1, PartitionPruned: true, PartitionNums: 1\"))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "List<Row> rows = Lists.newArrayList(src.execute().collect())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "testPartitionPrunning['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Table src = tEnv.sqlQuery(\"select * from hive.source_db.test_table_pt_1 where pt = 0\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(4,explain.length)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final String tblName = \"test_table_pt\"@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Object(( rowStrings = rows.stream().map(null).sorted().toArray()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "List<Row> rows = CollectionUtil.iteratorToList(src.execute().collect())@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertEquals(2,rows.size())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertArrayEquals(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b22783,rowStrings)@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "String physicalExecutionPlan = explain(3(@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "String optimizedLogicalPlan = explain(2(@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(4,rows.size())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "List<Row> rows = Lists.newArrayList(src.execute().collect())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->24 [style = bold, label=""];
10->15 [style = bold, label=""];
17->25 [style = solid, label="physicalExecutionPlan"];
21->19 [style = bold, label=""];
16->10 [style = bold, label=""];
11->6 [style = bold, label=""];
5->24 [style = dashed, label="0"];
10->3 [style = bold, label=""];
9->22 [style = dashed, label="0"];
7->0 [style = bold, label=""];
19->17 [style = bold, label=""];
8->14 [style = dashed, label="0"];
9->7 [style = bold, label=""];
2->10 [style = bold, label=""];
3->4 [style = bold, label=""];
22->23 [style = bold, label=""];
1->9 [style = bold, label=""];
20->22 [style = bold, label=""];
26->21 [style = bold, label=""];
1->13 [style = dashed, label="0"];
6->14 [style = bold, label=""];
14->26 [style = bold, label=""];
8->1 [style = bold, label=""];
25->20 [style = bold, label=""];
12->10 [style = bold, label=""];
7->0 [style = solid, label="rowStrings"];
19->27 [style = solid, label="optimizedLogicalPlan"];
24->11 [style = bold, label=""];
26->19 [style = solid, label="explain"];
6->8 [style = bold, label=""];
26->17 [style = solid, label="explain"];
15->4 [style = bold, label=""];
3->15 [style = dashed, label="0"];
5->11 [style = bold, label=""];
13->9 [style = bold, label=""];
23->18 [style = solid, label="rowStrings"];
17->27 [style = bold, label=""];
4->5 [style = bold, label=""];
27->25 [style = bold, label=""];
23->18 [style = bold, label=""];
8->13 [style = bold, label=""];
}
