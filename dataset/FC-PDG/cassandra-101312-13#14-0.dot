digraph {
38 [style = filled, label = "testStateJumpToNormal['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(newToken)))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(2)))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "List<UUID> hostIds = new ArrayList<UUID>()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(4))))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(keyTokens.get(2))))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(keyTokens.get(2),tmd.getToken(hosts.get(2)))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(newToken))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(newToken)))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.moving(newToken))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(endpointTokens.get(2),tmd.getToken(hosts.get(2)))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(endpointTokens.get(2)))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "IPartitioner partitioner = new RandomPartitioner()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testStateJumpToNormal['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(Collections.singleton(keyTokens.get(2))))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(endpointTokens.get(2)))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "StorageService ss = StorageService.instance@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(keyTokens.get(4),tmd.getToken(hosts.get(2)))@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(newToken)))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "testStateJumpToNormal['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Util.createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,hostIds,6)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.left(Collections.singleton(keyTokens.get(2)),Gossiper.computeExpireTime()))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(newToken))@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "newToken = positionToken(8)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertTrue(tmd.isLeaving(hosts.get(2)))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Token newToken = positionToken(7)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(tmd.getLeavingEndpoints().isEmpty())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(newToken)))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "ArrayList<Token> endpointTokens = new ArrayList<Token>()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ArrayList<Token> keyTokens = new ArrayList<Token>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertTrue(tmd.getMovingEndpoints().isEmpty())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "tmd.clearUnsafe()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().isEmpty())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(keyTokens.get(4))))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TokenMetadata tmd = ss.getTokenMetadata()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertTrue(tmd.isMoving(hosts.get(2)))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(Collections.singleton(endpointTokens.get(2))))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().isEmpty())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<InetAddress> hosts = new ArrayList<InetAddress>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(4)))@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "assertTrue(tmd.getMovingEndpoints().isEmpty())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.moving(newToken))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->13 [style = bold, label=""];
6->32 [style = bold, label=""];
13->10 [style = bold, label=""];
11->28 [style = bold, label=""];
32->35 [style = bold, label=""];
12->33 [style = dashed, label="0"];
8->5 [style = solid, label="hostIds"];
16->27 [style = bold, label=""];
36->41 [style = bold, label=""];
21->6 [style = bold, label=""];
21->27 [style = dashed, label="0"];
37->32 [style = solid, label="newToken"];
26->3 [style = bold, label=""];
13->5 [style = solid, label="endpointTokens"];
6->32 [style = dashed, label="0"];
11->34 [style = dashed, label="0"];
0->2 [style = bold, label=""];
42->39 [style = bold, label=""];
12->15 [style = bold, label=""];
16->42 [style = dashed, label="0"];
19->29 [style = dashed, label="0"];
4->5 [style = solid, label="hosts"];
28->9 [style = bold, label=""];
39->6 [style = bold, label=""];
34->31 [style = bold, label=""];
31->36 [style = bold, label=""];
10->5 [style = solid, label="keyTokens"];
37->42 [style = solid, label="newToken"];
36->41 [style = solid, label="newToken"];
22->5 [style = solid, label="partitioner"];
15->40 [style = dashed, label="0"];
22->7 [style = bold, label=""];
17->19 [style = bold, label=""];
11->18 [style = bold, label=""];
3->0 [style = bold, label=""];
27->6 [style = bold, label=""];
30->29 [style = bold, label=""];
38->3 [style = bold, label=""];
22->7 [style = solid, label="partitioner"];
6->20 [style = bold, label=""];
9->23 [style = bold, label=""];
5->1 [style = bold, label=""];
37->42 [style = bold, label=""];
20->35 [style = dashed, label="0"];
41->30 [style = bold, label=""];
29->12 [style = bold, label=""];
15->25 [style = dashed, label="0"];
33->40 [style = bold, label=""];
19->14 [style = bold, label=""];
8->5 [style = bold, label=""];
3->5 [style = solid, label="ss"];
1->16 [style = bold, label=""];
16->21 [style = bold, label=""];
12->25 [style = bold, label=""];
37->35 [style = solid, label="newToken"];
14->12 [style = bold, label=""];
36->29 [style = solid, label="newToken"];
36->40 [style = solid, label="newToken"];
18->9 [style = bold, label=""];
12->33 [style = bold, label=""];
10->4 [style = bold, label=""];
18->28 [style = dashed, label="0"];
4->8 [style = bold, label=""];
23->17 [style = bold, label=""];
23->41 [style = dashed, label="0"];
37->31 [style = solid, label="newToken"];
2->22 [style = bold, label=""];
35->34 [style = bold, label=""];
17->30 [style = dashed, label="0"];
18->31 [style = dashed, label="0"];
24->3 [style = bold, label=""];
5->37 [style = bold, label=""];
36->30 [style = solid, label="newToken"];
20->11 [style = bold, label=""];
}
