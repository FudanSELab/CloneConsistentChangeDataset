digraph {
3 [style = filled, label = "String schemaStr = inputRDD.take(1).get(0).getSchema().toString()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int minPayloadSize = 1000@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "DeleteConverter deleteConverter = new DeleteConverter(schemaStr,minPayloadSize)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "deleteRecords.stream().forEach(null)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testGenerateDeleteRecordsFromInputRecords['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "JavaRDD<GenericRecord> outputRDD = updateConverter.convert(inputRDD)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Map<String,GenericRecord> inputRecords = inputRDD.mapToPair(null).collectAsMap()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "JavaRDD<GenericRecord> inputRDD = TestUtils.makeRDD(jsc,10)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testGenerateUpdateRecordsFromInputRecords['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "List<String> updateRowKeys = outputRDD.map(null).collect()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "UpdateConverter updateConverter = new UpdateConverter(schemaStr,minPayloadSize,Collections.singletonList(\"timestamp\"),Collections.singletonList(\"_row_key\"))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertTrue(inputRDD.count() == 10)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(insertRowKeys.containsAll(updateRowKeys))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "updateRecords.stream().forEach(null)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "updateRecords.forEach(null)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "List<GenericRecord> deleteRecords = outputRDD.collect()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testGenerateUpdateRecordsFromInputRecords['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "UpdateConverter updateConverter = new UpdateConverter(schemaStr,minPayloadSize,Arrays.asList(\"timestamp\"),Arrays.asList(\"_row_key\"))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "List<GenericRecord> updateRecords = outputRDD.collect()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "List<String> insertRowKeys = inputRDD.map(null).collect()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "JavaRDD<GenericRecord> outputRDD = deleteConverter.convert(inputRDD)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->13 [style = bold, label=""];
11->16 [style = bold, label=""];
5->10 [style = bold, label=""];
16->18 [style = bold, label=""];
5->10 [style = solid, label="updateRowKeys"];
17->1 [style = bold, label=""];
0->6 [style = bold, label=""];
7->12 [style = bold, label=""];
0->19 [style = bold, label=""];
2->1 [style = bold, label=""];
0->6 [style = solid, label="minPayloadSize"];
3->19 [style = solid, label="schemaStr"];
7->16 [style = dashed, label="0"];
9->4 [style = bold, label=""];
0->19 [style = solid, label="minPayloadSize"];
1->3 [style = bold, label=""];
9->20 [style = bold, label=""];
3->14 [style = solid, label="schemaStr"];
6->14 [style = dashed, label="0"];
0->14 [style = solid, label="minPayloadSize"];
19->8 [style = bold, label=""];
3->0 [style = bold, label=""];
20->5 [style = bold, label=""];
0->14 [style = bold, label=""];
10->11 [style = bold, label=""];
4->20 [style = dashed, label="0"];
3->6 [style = solid, label="schemaStr"];
6->8 [style = bold, label=""];
6->19 [style = dashed, label="0"];
8->9 [style = bold, label=""];
12->18 [style = dashed, label="0"];
14->8 [style = bold, label=""];
12->13 [style = dashed, label="0"];
1->20 [style = solid, label="inputRDD"];
4->5 [style = bold, label=""];
11->7 [style = bold, label=""];
1->4 [style = solid, label="inputRDD"];
15->1 [style = bold, label=""];
}
