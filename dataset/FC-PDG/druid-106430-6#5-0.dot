digraph {
15 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testGroupByWithSubtotalsSpecWithRenamedDimensionAndFilter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "return@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"subtotal\")@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setVirtualColumns(new ExpressionVirtualColumn(\"alias\",\"quality\",ValueType.STRING,TestExprMacroTable.INSTANCE)).setDimensions(Lists.newArrayList(new DefaultDimensionSpec(\"quality\",\"quality\"),new DefaultDimensionSpec(\"market\",\"market\"),new DefaultDimensionSpec(\"alias\",\"alias_renamed\"))).setAggregatorSpecs(Arrays.asList(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\"),new FloatSumAggregatorFactory(\"idxFloat\",\"indexFloat\"),new DoubleSumAggregatorFactory(\"idxDouble\",\"index\"))).setDimFilter(new SelectorDimFilter(\"alias\",\"automotive\",null)).setGranularity(QueryRunnerTestHelper.dayGran).setSubtotalsSpec(ImmutableList.of(ImmutableList.of(\"alias_renamed\"),ImmutableList.of())).build()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "GroupByQuery query = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setVirtualColumns(new ExpressionVirtualColumn(\"alias\",\"quality\",ValueType.STRING,TestExprMacroTable.INSTANCE)).setDimensions(Lists.newArrayList(new DefaultDimensionSpec(\"quality\",\"quality\"),new DefaultDimensionSpec(\"market\",\"market\"),new DefaultDimensionSpec(\"alias\",\"alias_renamed\"))).setAggregatorSpecs(Arrays.asList(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\"),new FloatSumAggregatorFactory(\"idxFloat\",\"indexFloat\"),new DoubleSumAggregatorFactory(\"idxDouble\",\"index\"))).setDimFilter(new SelectorDimFilter(\"alias\",\"automotive\",null)).setGranularity(QueryRunnerTestHelper.dayGran).setSubtotalsSpec(ImmutableList.of(ImmutableList.of(\"alias_renamed\"),ImmutableList.of())).build()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)@@@4@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testGroupBy['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testGroupByWithSubtotalsSpecWithRenamedDimensionAndFilter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"groupBy\")@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "List<ResultRow> expectedResults = Arrays.asList(makeRow(query,\"2011-04-01\",\"alias_renamed\",\"automotive\",\"rows\",1L,\"idx\",135L,\"idxFloat\",135.88510131835938f,\"idxDouble\",135.88510131835938d),makeRow(query,\"2011-04-02\",\"alias_renamed\",\"automotive\",\"rows\",1L,\"idx\",147L,\"idxFloat\",147.42593f,\"idxDouble\",147.42593d),makeRow(query,\"2011-04-01T00:00:00.000Z\",\"rows\",1L,\"idx\",135L,\"idxFloat\",135.88510131835938f,\"idxDouble\",135.88510131835938d),makeRow(query,\"2011-04-02T00:00:00.000Z\",\"rows\",1L,\"idx\",147L,\"idxFloat\",147.42593f,\"idxDouble\",147.42593d))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"automotive\",\"rows\",1L,\"idx\",135L,\"idxFloat\",135.88510131835938f,\"idxDouble\",135.88510131835938d),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"business\",\"rows\",1L,\"idx\",118L,\"idxFloat\",118.57034,\"idxDouble\",118.57034),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"entertainment\",\"rows\",1L,\"idx\",158L,\"idxFloat\",158.747224,\"idxDouble\",158.747224),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"health\",\"rows\",1L,\"idx\",120L,\"idxFloat\",120.134704,\"idxDouble\",120.134704),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"mezzanine\",\"rows\",3L,\"idx\",2870L,\"idxFloat\",2871.8866900000003f,\"idxDouble\",2871.8866900000003d),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"news\",\"rows\",1L,\"idx\",121L,\"idxFloat\",121.58358f,\"idxDouble\",121.58358d),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"premium\",\"rows\",3L,\"idx\",2900L,\"idxFloat\",2900.798647f,\"idxDouble\",2900.798647d),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"technology\",\"rows\",1L,\"idx\",78L,\"idxFloat\",78.622547f,\"idxDouble\",78.622547d),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"travel\",\"rows\",1L,\"idx\",119L,\"idxFloat\",119.922742f,\"idxDouble\",119.922742d),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"automotive\",\"rows\",1L,\"idx\",147L,\"idxFloat\",147.42593f,\"idxDouble\",147.42593d),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"business\",\"rows\",1L,\"idx\",112L,\"idxFloat\",112.987027f,\"idxDouble\",112.987027d),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"entertainment\",\"rows\",1L,\"idx\",166L,\"idxFloat\",166.016049f,\"idxDouble\",166.016049d),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"health\",\"rows\",1L,\"idx\",113L,\"idxFloat\",113.446008f,\"idxDouble\",113.446008d),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"mezzanine\",\"rows\",3L,\"idx\",2447L,\"idxFloat\",2448.830613f,\"idxDouble\",2448.830613d),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"news\",\"rows\",1L,\"idx\",114L,\"idxFloat\",114.290141f,\"idxDouble\",114.290141d),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"premium\",\"rows\",3L,\"idx\",2505L,\"idxFloat\",2506.415148f,\"idxDouble\",2506.415148d),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"technology\",\"rows\",1L,\"idx\",97L,\"idxFloat\",97.387433f,\"idxDouble\",97.387433d),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias\",\"travel\",\"rows\",1L,\"idx\",126L,\"idxFloat\",126.411364f,\"idxDouble\",126.411364d))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias_renamed\",\"automotive\",\"rows\",1L,\"idx\",135L,\"idxFloat\",135.88510131835938f,\"idxDouble\",135.88510131835938d),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"alias_renamed\",\"automotive\",\"rows\",1L,\"idx\",147L,\"idxFloat\",147.42593f,\"idxDouble\",147.42593d),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01T00:00:00.000Z\",\"rows\",1L,\"idx\",135L,\"idxFloat\",135.88510131835938f,\"idxDouble\",135.88510131835938d),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02T00:00:00.000Z\",\"rows\",1L,\"idx\",147L,\"idxFloat\",147.42593f,\"idxDouble\",147.42593d))@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\"),new FloatSumAggregatorFactory(\"idxFloat\",\"indexFloat\"),new DoubleSumAggregatorFactory(\"idxDouble\",\"index\")).setGranularity(QueryRunnerTestHelper.dayGran).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "cannotVectorize()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4->9 [style = bold, label=""];
1->4 [style = bold, label=""];
6->5 [style = solid, label="results"];
5->12 [style = dashed, label="0"];
14->12 [style = solid, label="expectedResults"];
7->10 [style = bold, label=""];
2->3 [style = bold, label=""];
10->5 [style = solid, label="results"];
3->6 [style = bold, label=""];
3->5 [style = solid, label="expectedResults"];
1->4 [style = dotted, label="true"];
4->2 [style = bold, label=""];
9->7 [style = bold, label=""];
2->6 [style = solid, label="query"];
13->16 [style = bold, label=""];
1->9 [style = bold, label=""];
6->10 [style = dashed, label="0"];
8->1 [style = bold, label=""];
6->5 [style = bold, label=""];
10->5 [style = bold, label=""];
2->9 [style = dashed, label="0"];
0->1 [style = bold, label=""];
15->12 [style = solid, label="results"];
9->10 [style = solid, label="query"];
9->7 [style = solid, label="query"];
11->8 [style = bold, label=""];
16->14 [style = bold, label=""];
14->15 [style = bold, label=""];
1->2 [style = bold, label=""];
15->12 [style = bold, label=""];
16->15 [style = solid, label="query"];
4->14 [style = dashed, label="0"];
7->5 [style = solid, label="expectedResults"];
}
