digraph {
6 [style = filled, label = "Assert.assertNull(\"should not inherit auto-mapping\",user.getPets().get(0).getPetName())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "User user = mapper.getUser(1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(\"User2\",user.getName())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(\"John\",user.getPets().get(0).getBreeder().getBreederName())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Assertions.assertEquals(Integer.valueOf(2),user.getId())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "shouldGetAUserAndGroups['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Mapper mapper = sqlSession.getMapper()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertTrue(user instanceof Proxy)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(Integer.valueOf(2),user.getId())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.PARTIAL)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(\"User1\",user.getName())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "User user = mapper.getUserWithPets_Inline(2)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "shouldIgnorePartialAutoMappingBehavior_InlineNestedResultMap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assertions.assertNull(user.getPets().get(0).getPetName(),\"should not inherit auto-mapping\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Assertions.assertEquals(\"User2\",user.getName())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Assertions.assertEquals(\"John\",user.getPets().get(0).getBreeder().getBreederName())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(1,user.getGroups().size())@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "shouldIgnorePartialAutoMappingBehavior_InlineNestedResultMap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1->5 [style = bold, label=""];
4->9 [style = bold, label=""];
16->15 [style = bold, label=""];
5->12 [style = dashed, label="0"];
0->13 [style = bold, label=""];
2->3 [style = bold, label=""];
7->8 [style = dashed, label="0"];
4->0 [style = dashed, label="0"];
1->9 [style = dashed, label="0"];
3->0 [style = bold, label=""];
6->10 [style = dashed, label="0"];
1->13 [style = dashed, label="0"];
13->17 [style = bold, label=""];
12->10 [style = bold, label=""];
5->6 [style = bold, label=""];
10->8 [style = bold, label=""];
11->3 [style = bold, label=""];
0->4 [style = bold, label=""];
17->14 [style = bold, label=""];
15->0 [style = bold, label=""];
4->1 [style = bold, label=""];
9->12 [style = bold, label=""];
6->7 [style = bold, label=""];
0->17 [style = solid, label="user"];
}
