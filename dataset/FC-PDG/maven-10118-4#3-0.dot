digraph {
2 [style = filled, label = "Assert.assertTrue(mavenHomeDir.isDirectory())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "createTestZip(zipDestination)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertTrue(homeDir.isDirectory())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(zipDestination,localDistribution.getZipFile())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testCreateDistWithExistingDistAndZipAndAlwaysUnpackTrue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Assert.assertFalse(new File(homeDir,\"garbage\").exists())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(distributionDir,localDistribution.getDistributionDir())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "FileUtils.touch(garbage)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "File garbage = mavenHomeDir.resolve(\"garbage\").toFile()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Files.createFile(garbage.toPath())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "File homeDir = install.createDist(configuration)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(localDistribution,pathAssembler.getDistribution(configuration))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertTrue(zipDestination.exists())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "File garbage = new File(mavenHomeDir,\"garbage\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "configuration.setAlwaysUnpack(true)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Path homeDir = install.createDist(configuration)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(zipDestination,localDistribution.getZipFile())@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testCreateDist['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertTrue(Files.isDirectory(mavenHomeDir))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "testCreateDistWithExistingDistAndZipAndAlwaysUnpackTrue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(mavenHomeDir,homeDir)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Files.createDirectories(mavenHomeDir)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Assert.assertEquals(localDistribution,pathAssembler.getDistribution(configuration))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertTrue(Files.exists(zipDestination))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(distributionDir,localDistribution.getDistributionDir())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "mavenHomeDir.mkdirs()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Assert.assertFalse(Files.exists(homeDir.resolve(\"garbage\")))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "Assert.assertTrue(zipDestination.exists())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertTrue(new File(homeDir,\"bin/mvn\").exists())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15->13 [style = solid, label="homeDir"];
4->9 [style = bold, label=""];
22->26 [style = bold, label=""];
17->5 [style = bold, label=""];
15->13 [style = bold, label=""];
3->17 [style = dashed, label="0"];
25->22 [style = bold, label=""];
10->19 [style = dashed, label="0"];
11->21 [style = bold, label=""];
0->11 [style = bold, label=""];
10->3 [style = bold, label=""];
25->22 [style = solid, label="homeDir"];
1->18 [style = dashed, label="0"];
19->17 [style = bold, label=""];
20->11 [style = bold, label=""];
8->21 [style = dashed, label="0"];
16->19 [style = bold, label=""];
2->10 [style = bold, label=""];
12->1 [style = bold, label=""];
1->7 [style = bold, label=""];
13->16 [style = bold, label=""];
6->13 [style = solid, label="homeDir"];
3->5 [style = bold, label=""];
23->24 [style = bold, label=""];
13->27 [style = bold, label=""];
12->14 [style = dashed, label="0"];
6->15 [style = dashed, label="0"];
2->16 [style = dashed, label="0"];
6->13 [style = bold, label=""];
26->23 [style = bold, label=""];
5->4 [style = bold, label=""];
7->6 [style = bold, label=""];
12->1 [style = solid, label="garbage"];
13->2 [style = bold, label=""];
28->25 [style = bold, label=""];
11->8 [style = bold, label=""];
7->15 [style = bold, label=""];
14->18 [style = bold, label=""];
2->26 [style = dashed, label="0"];
18->7 [style = bold, label=""];
10->23 [style = dashed, label="0"];
24->6 [style = bold, label=""];
8->12 [style = bold, label=""];
21->14 [style = bold, label=""];
}
