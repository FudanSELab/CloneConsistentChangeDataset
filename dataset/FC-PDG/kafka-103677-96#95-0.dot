digraph {
5 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchThrottleTimeMax))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "int i = 1@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "i <= 3@@@17@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "testQuotaMetrics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "!client.ready(node,time.milliseconds())@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "FetchRequest.Builder builder = FetchRequest.Builder.forConsumer(100,100,new LinkedHashMap<>())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "selector.clear()@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "time.sleep(client.throttleDelayMs(node,time.milliseconds()))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "i++@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ApiVersionsResponse apiVersionsResponse = ApiVersionsResponse.defaultApiVersionsResponse(400,ApiMessageType.ListenerType.ZK_BROKER)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "FetchResponse<MemoryRecords> response = fullFetchResponse(tp0,nextRecords,Errors.NONE,i,throttleTimeMs)@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
47 [style = filled, label = "ProduceRequest.Builder builder = ProduceRequest.forCurrentMagic(new ProduceRequestData().setTopicData(new ProduceRequestData.TopicProduceDataCollection()).setAcks((short)1).setTimeoutMs(1000))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "time.sleep(client.throttleDelayMs(node,time.milliseconds()))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(250,(Double)avgMetric.metricValue(),EPSILON)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "buffer = RequestTestUtils.serializeResponseWithHeader(response,ApiKeys.PRODUCE.latestVersion(),request.correlationId())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testQuotaMetrics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "buildFetcher()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertEquals(250,(Double)avgMetric.metricValue(),EPS)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "Sensor throttleTimeSensor = Sender.throttleTimeSensor(this.senderMetricsRegistry)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "NetworkClient client = new NetworkClient(selector,metadata,\"mock\",Integer.MAX_VALUE,1000,1000,64 * 1024,64 * 1024,1000,10 * 1000,127 * 1000,ClientDnsLookup.USE_ALL_DNS_IPS,time,true,new ApiVersions(),throttleTimeSensor,logContext)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "client.poll(1,time.milliseconds())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "MockSelector selector = new MockSelector(time)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "client.close()@@@36@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(this.senderMetricsRegistry.produceThrottleTimeAvg)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testQuotaMetrics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "selector.delayedReceive(new DelayedReceive(node.idString(),new NetworkReceive(node.idString(),buffer)))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "FetchResponse response = fullFetchResponse(tp0,nextRecords,Errors.NONE,i,throttleTimeMs)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "Sensor throttleTimeSensor = Fetcher.throttleTimeSensor(metrics,metricsRegistry)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "selector.clear()@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "client.poll(1,time.milliseconds())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "buffer = RequestTestUtils.serializeResponseWithHeader(response,ApiKeys.FETCH.latestVersion(),request.correlationId())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "ClientRequest request = client.newClientRequest(node.idString(),builder,time.milliseconds(),true)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(this.senderMetricsRegistry.produceThrottleTimeMax)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(400,(Double)maxMetric.metricValue(),EPSILON)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertEquals(400,(Double)maxMetric.metricValue(),EPS)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "selector.completeReceive(new NetworkReceive(node.idString(),buffer))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "ByteBuffer buffer = RequestTestUtils.serializeResponseWithHeader(apiVersionsResponse,ApiKeys.API_VERSIONS.latestVersion(),0)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "builder.rackId(\"\")@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ProduceResponse response = produceResponse(tp0,i,Errors.NONE,throttleTimeMs)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "selector.clear()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int throttleTimeMs = 100 * i@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchThrottleTimeAvg))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "NetworkClient client = new NetworkClient(selector,metadata,\"mock\",Integer.MAX_VALUE,1000,1000,64 * 1024,64 * 1024,1000,10 * 1000,127 * 1000,ClientDnsLookup.USE_ALL_DNS_IPS,time,true,new ApiVersions(),throttleTimeSensor,new LogContext())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Node node = cluster.nodes().get(0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Cluster cluster = TestUtils.singletonCluster(\"test\",1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "client.poll(1,time.milliseconds())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "client.send(request,time.milliseconds())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "client.close()@@@38@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24->12 [style = dotted, label="true"];
25->33 [style = bold, label=""];
26->10 [style = bold, label=""];
11->14 [style = bold, label=""];
24->32 [style = bold, label=""];
24->43 [style = dotted, label="true"];
24->39 [style = bold, label=""];
8->32 [style = dashed, label="0"];
5->40 [style = dashed, label="0"];
24->27 [style = dotted, label="true"];
5->28 [style = bold, label=""];
27->15 [style = bold, label=""];
1->13 [style = solid, label="throttleTimeMs"];
43->3 [style = bold, label=""];
17->15 [style = solid, label="i"];
45->0 [style = bold, label=""];
2->36 [style = bold, label=""];
15->2 [style = solid, label="i"];
15->36 [style = solid, label="i"];
22->3 [style = solid, label="builder"];
28->25 [style = bold, label=""];
37->46 [style = solid, label="buffer"];
2->37 [style = solid, label="response"];
14->9 [style = bold, label=""];
24->3 [style = dotted, label="true"];
48->41 [style = bold, label=""];
36->26 [style = solid, label="response"];
27->12 [style = bold, label=""];
13->26 [style = solid, label="response"];
4->19 [style = bold, label=""];
4->21 [style = bold, label=""];
23->3 [style = bold, label=""];
47->43 [style = bold, label=""];
22->23 [style = bold, label=""];
16->31 [style = solid, label="apiVersionsResponse"];
25->41 [style = dashed, label="0"];
34->18 [style = solid, label="node"];
30->45 [style = dashed, label="0"];
0->34 [style = bold, label=""];
37->46 [style = bold, label=""];
44->16 [style = bold, label=""];
24->26 [style = dotted, label="true"];
24->22 [style = dotted, label="true"];
15->24 [style = solid, label="i"];
45->44 [style = solid, label="throttleTimeSensor"];
24->18 [style = dotted, label="true"];
24->13 [style = dotted, label="true"];
10->18 [style = bold, label=""];
34->29 [style = solid, label="node"];
24->47 [style = dotted, label="true"];
19->29 [style = bold, label=""];
9->6 [style = solid, label="selector"];
43->3 [style = solid, label="request"];
46->10 [style = bold, label=""];
38->9 [style = bold, label=""];
31->7 [style = solid, label="buffer"];
17->36 [style = solid, label="i"];
7->4 [style = bold, label=""];
35->14 [style = bold, label=""];
31->7 [style = bold, label=""];
1->2 [style = solid, label="throttleTimeMs"];
1->36 [style = solid, label="throttleTimeMs"];
4->29 [style = dotted, label="true"];
15->1 [style = solid, label="i"];
32->8 [style = bold, label=""];
24->23 [style = dotted, label="true"];
17->13 [style = solid, label="i"];
13->26 [style = bold, label=""];
16->31 [style = bold, label=""];
32->40 [style = bold, label=""];
39->32 [style = bold, label=""];
24->20 [style = dotted, label="true"];
26->37 [style = dashed, label="0"];
34->44 [style = bold, label=""];
17->24 [style = solid, label="i"];
30->0 [style = bold, label=""];
24->46 [style = dotted, label="true"];
24->1 [style = bold, label=""];
24->36 [style = dotted, label="true"];
4->19 [style = dotted, label="true"];
24->1 [style = dotted, label="true"];
22->47 [style = dashed, label="0"];
29->4 [style = bold, label=""];
13->36 [style = dashed, label="0"];
40->48 [style = bold, label=""];
9->44 [style = solid, label="selector"];
12->15 [style = bold, label=""];
15->13 [style = solid, label="i"];
9->30 [style = bold, label=""];
36->26 [style = bold, label=""];
47->43 [style = solid, label="builder"];
3->20 [style = solid, label="request"];
34->27 [style = solid, label="node"];
2->13 [style = bold, label=""];
1->22 [style = bold, label=""];
20->2 [style = bold, label=""];
24->10 [style = dotted, label="true"];
17->24 [style = bold, label=""];
3->20 [style = bold, label=""];
1->47 [style = bold, label=""];
17->1 [style = solid, label="i"];
30->6 [style = solid, label="throttleTimeSensor"];
8->5 [style = bold, label=""];
28->48 [style = dashed, label="0"];
18->27 [style = bold, label=""];
6->16 [style = bold, label=""];
9->45 [style = bold, label=""];
15->24 [style = bold, label=""];
34->6 [style = bold, label=""];
24->15 [style = dotted, label="true"];
24->37 [style = dotted, label="true"];
24->2 [style = dotted, label="true"];
2->37 [style = bold, label=""];
17->2 [style = solid, label="i"];
21->17 [style = bold, label=""];
26->10 [style = solid, label="buffer"];
6->44 [style = dashed, label="0"];
41->42 [style = bold, label=""];
}
