digraph {
25 [style = filled, label = "assertIs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getWriteDataSource(),is(expected.getWriteDataSource()))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLoadBalancer(),is(expected.getLoadBalancer()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),CoreMatchers.is(expected.getName()))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final ExpectedDataSource expected@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getReadDataSources(),is(expected.getReadDataSources()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getUser(),CoreMatchers.is(expected.getUser()))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getDb(),CoreMatchers.is(expected.getDb()))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final DataSourceSegment actual@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getAutoAwareResource(),is(expected.getAutoAwareResource()))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "null == expected@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getUrl(),CoreMatchers.is(expected.getUrl()))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertNull(assertContext.getText(\"Actual should not exit.\"),actual)@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getPort(),CoreMatchers.is(expected.getPort()))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getHostName(),CoreMatchers.is(expected.getHostName()))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual dataSource should exist.\"),actual)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertIs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final ReadwriteSplittingRuleSegment actual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertNull(assertContext.getText(\"Actual dataSource should not exist.\"),actual)@@@4@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual should exit.\"),actual)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "PropertiesAssert.assertIs(assertContext,actual.getProps(),expected.getProps())@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final ExpectedDataSource expected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final ExceptedReadwriteSplittingRule expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),is(expected.getName()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getPassword(),CoreMatchers.is(expected.getPassword()))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertIs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8->10 [style = dotted, label="true"];
5->2 [style = bold, label=""];
11->18 [style = dotted, label="false"];
10->26 [style = dashed, label="0"];
11->4 [style = bold, label=""];
23->28 [style = solid, label="actual"];
7->24 [style = dashed, label="0"];
4->28 [style = dashed, label="0"];
17->18 [style = bold, label=""];
18->24 [style = bold, label=""];
9->11 [style = solid, label="expected"];
25->21 [style = dotted, label="true"];
13->10 [style = dotted, label="true"];
19->22 [style = bold, label=""];
11->1 [style = bold, label=""];
11->24 [style = dotted, label="false"];
25->26 [style = dotted, label="true"];
11->28 [style = dotted, label="true"];
11->6 [style = dotted, label="false"];
11->17 [style = bold, label=""];
3->7 [style = bold, label=""];
22->20 [style = bold, label=""];
11->7 [style = dotted, label="false"];
5->27 [style = dashed, label="0"];
6->22 [style = dashed, label="0"];
23->17 [style = solid, label="actual"];
11->20 [style = dotted, label="false"];
11->27 [style = dotted, label="false"];
25->11 [style = bold, label=""];
10->4 [style = solid, label="actual"];
11->1 [style = dotted, label="false"];
8->11 [style = bold, label=""];
21->11 [style = solid, label="expected"];
2->19 [style = dashed, label="0"];
13->11 [style = bold, label=""];
1->3 [style = bold, label=""];
11->3 [style = dotted, label="false"];
10->1 [style = solid, label="actual"];
11->5 [style = dotted, label="false"];
11->22 [style = dotted, label="false"];
6->12 [style = bold, label=""];
3->18 [style = dashed, label="0"];
11->12 [style = dotted, label="false"];
11->4 [style = dotted, label="true"];
7->5 [style = bold, label=""];
2->6 [style = bold, label=""];
13->15 [style = dotted, label="true"];
16->7 [style = bold, label=""];
27->19 [style = bold, label=""];
24->27 [style = bold, label=""];
3->16 [style = bold, label=""];
15->11 [style = solid, label="expected"];
26->20 [style = solid, label="assertContext"];
11->19 [style = dotted, label="false"];
1->17 [style = dashed, label="0"];
11->28 [style = bold, label=""];
11->17 [style = dotted, label="false"];
11->16 [style = dotted, label="false"];
13->14 [style = dotted, label="true"];
25->23 [style = dotted, label="true"];
11->2 [style = dotted, label="false"];
8->0 [style = dotted, label="true"];
8->9 [style = dotted, label="true"];
}
