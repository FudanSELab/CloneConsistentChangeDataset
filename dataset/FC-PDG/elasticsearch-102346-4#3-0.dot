digraph {
0 [style = filled, label = "long newTerm = initialTerm + randomLongBetween(1,10)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "joinNodeAndRun(new JoinRequest(node0,Optional.of(new Join(node0,node0,newTerm,initialTerm,initialVersion))))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "testJoinElectedLeader['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "testJoinElectedLeader['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(isLocalNodeElectedMaster())@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "joinNodeAndRun(new JoinRequest(node1,newTerm,Optional.of(new Join(node1,node0,newTerm,initialTerm,initialVersion))))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertTrue(clusterStateHasNode(node1))@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "long initialVersion = randomLongBetween(1,10)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "DiscoveryNode node0 = newNode(0,true)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "joinNodeAndRun(new JoinRequest(node0,newTerm,Optional.of(new Join(node0,node0,newTerm,initialTerm,initialVersion))))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "testJoinWithHigherTermButBetterStateStillElectsMasterThroughSelfJoin['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "DiscoveryNode node1 = newNode(1,true)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "long initialTerm = randomLongBetween(1,10)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "long higherVersion = initialVersion + randomLongBetween(1,10)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "joinNodeAndRun(new JoinRequest(node1,Optional.of(new Join(node1,node0,newTerm,initialTerm,initialVersion))))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertTrue(isLocalNodeElectedMaster())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "joinNodeAndRun(new JoinRequest(node1,Optional.of(new Join(node1,node0,newTerm,initialTerm,higherVersion))))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(isLocalNodeElectedMaster())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "setupFakeMasterServiceAndCoordinator(initialTerm,initialState(node0,initialTerm,initialVersion,new VotingConfiguration(Collections.singleton(node0.getId()))))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->3 [style = bold, label=""];
6->3 [style = bold, label=""];
0->16 [style = bold, label=""];
1->4 [style = bold, label=""];
5->12 [style = solid, label="node1"];
1->14 [style = dashed, label="0"];
10->19 [style = solid, label="initialVersion"];
0->6 [style = bold, label=""];
0->19 [style = bold, label=""];
0->6 [style = solid, label="newTerm"];
2->1 [style = bold, label=""];
19->17 [style = solid, label="higherVersion"];
0->17 [style = solid, label="newTerm"];
7->0 [style = bold, label=""];
0->16 [style = solid, label="newTerm"];
19->17 [style = bold, label=""];
11->1 [style = solid, label="initialTerm"];
10->6 [style = solid, label="initialVersion"];
9->14 [style = solid, label="node0"];
11->6 [style = solid, label="initialTerm"];
9->17 [style = solid, label="node0"];
10->16 [style = solid, label="initialVersion"];
9->6 [style = solid, label="node0"];
0->14 [style = solid, label="newTerm"];
6->16 [style = dashed, label="0"];
0->1 [style = solid, label="newTerm"];
9->1 [style = solid, label="node0"];
3->2 [style = bold, label=""];
10->13 [style = bold, label=""];
17->2 [style = bold, label=""];
9->13 [style = solid, label="node0"];
5->14 [style = solid, label="node1"];
11->10 [style = bold, label=""];
13->7 [style = bold, label=""];
15->9 [style = bold, label=""];
11->16 [style = solid, label="initialTerm"];
2->14 [style = bold, label=""];
10->14 [style = solid, label="initialVersion"];
8->9 [style = bold, label=""];
18->9 [style = bold, label=""];
9->5 [style = bold, label=""];
4->12 [style = bold, label=""];
11->0 [style = solid, label="initialTerm"];
10->1 [style = solid, label="initialVersion"];
5->11 [style = bold, label=""];
11->17 [style = solid, label="initialTerm"];
11->13 [style = solid, label="initialTerm"];
10->13 [style = solid, label="initialVersion"];
5->2 [style = solid, label="node1"];
5->17 [style = solid, label="node1"];
11->14 [style = solid, label="initialTerm"];
5->1 [style = solid, label="node1"];
9->16 [style = solid, label="node0"];
14->4 [style = bold, label=""];
}
