digraph {
2 [style = filled, label = "fail(\"unexpectedly got here instead of catching \" + expectedException)@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "params.put(\"weights\",weights)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "weights.put(\"constant1\",1d)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final LTRScoringModel ltrScoringModel = createLinearModel(\"test3\",features,norms,\"test\",fstore.getFeatures(),params)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "store.addModel(ltrScoringModel)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "existingNameTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "duplicateFeatureTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Map<String,Object> params = new HashMap<String,Object>()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final ModelException expectedException = new ModelException(\"duplicated feature constant1 in model test4\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final LTRScoringModel ltrScoringModel = createLinearModel(\"test4\",features,norms,\"test\",fstore.getFeatures(),params)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final List<Normalizer> norms = new ArrayList<Normalizer>(Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "existingNameTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "store.addModel(ltrScoringModel)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "weights.put(\"constant5\",1d)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final SolrException expectedException = new SolrException(SolrException.ErrorCode.BAD_REQUEST,.getName() + \": model 'test3' already exists. Please use a different name\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "final Map<String,Object> weights = new HashMap<>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final SolrException expectedException = new SolrException(SolrException.ErrorCode.BAD_REQUEST,.getCanonicalName() + \": model 'test3' already exists. Please use a different name\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "final LTRScoringModel m = store.getModel(\"test3\")@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(ltrScoringModel,m)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final List<Feature> features = getFeatures(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@f049ab)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->3 [style = bold, label=""];
8->16 [style = dashed, label="0"];
1->8 [style = bold, label=""];
7->9 [style = solid, label="params"];
5->9 [style = bold, label=""];
11->14 [style = bold, label=""];
4->6 [style = bold, label=""];
12->19 [style = solid, label="norms"];
8->3 [style = bold, label=""];
18->17 [style = bold, label=""];
3->19 [style = solid, label="features"];
19->10 [style = bold, label=""];
19->10 [style = solid, label="ltrScoringModel"];
6->0 [style = bold, label=""];
3->12 [style = bold, label=""];
9->10 [style = bold, label=""];
15->16 [style = bold, label=""];
9->11 [style = solid, label="ltrScoringModel"];
13->11 [style = bold, label=""];
7->19 [style = solid, label="params"];
12->9 [style = solid, label="norms"];
9->10 [style = solid, label="ltrScoringModel"];
0->7 [style = bold, label=""];
9->19 [style = dashed, label="0"];
5->19 [style = bold, label=""];
7->5 [style = bold, label=""];
9->14 [style = solid, label="ltrScoringModel"];
12->4 [style = bold, label=""];
10->13 [style = bold, label=""];
17->2 [style = solid, label="expectedException"];
13->11 [style = solid, label="m"];
17->3 [style = bold, label=""];
10->2 [style = bold, label=""];
14->2 [style = bold, label=""];
4->5 [style = solid, label="weights"];
3->9 [style = solid, label="features"];
16->2 [style = solid, label="expectedException"];
8->2 [style = solid, label="expectedException"];
}
