digraph {
7 [style = filled, label = "String name = p.getName()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "boolean hasAllBlanks = l != null && l.stream().allMatch(null)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "list.add(x)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "List<NameValuePair> pairs@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "l == null || hasAllBlanks@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "hasAllBlanks@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "list.removeAll(l)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "return this@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "String name = p.getName()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "addDefault['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "map.put(key,AList.of(x))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "List<Header> pairs@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "List<? extends NameValuePair> pairs@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "List<RequestHeader> l = map.get(key)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "addDefault['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "RequestHeader x = new RequestHeader(req,name,vs.resolve(p.getValue()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "list.add(x)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "hasAllBlanks@@@9@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "return this@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "String key = key(name)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "boolean hasAllBlanks = l != null && l.stream().allMatch(null)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "addDefault['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "hasAllBlanks@@@9@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertArgNotNull(\"pairs\",pairs)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->17 [style = bold, label=""];
3->22 [style = solid, label="hasAllBlanks"];
17->8 [style = bold, label=""];
8->10 [style = bold, label=""];
12->17 [style = dotted, label="true"];
17->8 [style = solid, label="x"];
2->4 [style = solid, label="x"];
22->2 [style = bold, label=""];
6->12 [style = solid, label="l"];
3->1 [style = bold, label=""];
19->16 [style = dotted, label="true"];
13->12 [style = dotted, label="true"];
12->8 [style = dotted, label="true"];
11->15 [style = dashed, label="0"];
11->16 [style = dashed, label="0"];
6->23 [style = bold, label=""];
23->2 [style = solid, label="l"];
0->7 [style = solid, label="name"];
19->20 [style = bold, label=""];
6->3 [style = solid, label="l"];
17->21 [style = solid, label="x"];
3->4 [style = dotted, label="true"];
6->9 [style = solid, label="l"];
9->13 [style = solid, label="hasAllBlanks"];
23->3 [style = bold, label=""];
9->3 [style = solid, label="hasAllBlanks"];
3->12 [style = bold, label=""];
2->17 [style = dashed, label="0"];
2->4 [style = bold, label=""];
12->21 [style = dotted, label="true"];
12->7 [style = bold, label=""];
21->18 [style = bold, label=""];
3->0 [style = bold, label=""];
23->3 [style = solid, label="l"];
0->7 [style = bold, label=""];
22->2 [style = dotted, label="true"];
8->0 [style = bold, label=""];
7->8 [style = solid, label="key"];
7->6 [style = solid, label="key"];
6->21 [style = solid, label="key"];
3->10 [style = bold, label=""];
6->23 [style = solid, label="key"];
12->2 [style = bold, label=""];
5->11 [style = dotted, label="true"];
13->12 [style = bold, label=""];
14->15 [style = dotted, label="true"];
2->8 [style = solid, label="x"];
12->22 [style = dotted, label="true"];
14->0 [style = bold, label=""];
7->6 [style = solid, label="name"];
5->0 [style = bold, label=""];
16->20 [style = solid, label="pairs"];
23->12 [style = solid, label="l"];
7->6 [style = bold, label=""];
12->18 [style = bold, label=""];
1->12 [style = dotted, label="true"];
3->12 [style = solid, label="hasAllBlanks"];
1->12 [style = bold, label=""];
3->13 [style = bold, label=""];
22->17 [style = bold, label=""];
9->1 [style = solid, label="hasAllBlanks"];
9->3 [style = bold, label=""];
4->8 [style = bold, label=""];
8->21 [style = bold, label=""];
21->7 [style = bold, label=""];
7->17 [style = solid, label="name"];
1->2 [style = bold, label=""];
6->9 [style = bold, label=""];
20->7 [style = bold, label=""];
3->8 [style = dotted, label="true"];
0->2 [style = solid, label="name"];
3->1 [style = dotted, label="true"];
12->22 [style = bold, label=""];
6->23 [style = dashed, label="0"];
3->13 [style = dotted, label="true"];
3->2 [style = dotted, label="true"];
13->2 [style = bold, label=""];
}
