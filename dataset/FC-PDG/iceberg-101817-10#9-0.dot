digraph {
1 [style = filled, label = "field = ((PartitionData)entry.file().partition()).getPartitionType().fields().get(1)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(\"Second manifest should be the initial manifest with the old spec\",initialManifest,pending.allManifests().get(1))@@@13@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(1000,field.fieldId())@@@33@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
47 [style = filled, label = "testChangedPartitionSpec['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "long commitId = snap.snapshotId()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "validateSnapshot(null,snap,1,FILE_A)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "V1Assert.assertEquals(\"Table should end with last-sequence-number 0\",0,readMetadata().lastSequenceNumber())@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Types.NestedField field = ((PartitionData)entry.file().partition()).getPartitionType().fields().get(0)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "table.newAppend().appendFile(FILE_A).commit()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Snapshot pending = table.newAppend().appendFile(newFileC).apply()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(1001,field.fieldId())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Snapshot pending = table.newAppend().appendFile(newFile).apply()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "entry = ManifestFiles.read(committedSnapshot.allManifests().get(1),FILE_IO).entries().iterator().next()@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(1000,field.fieldId())@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ManifestFile initialManifest = base.currentSnapshot().allManifests().get(0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "TableMetadata base = readMetadata()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "ManifestEntry<DataFile> entry = ManifestFiles.read(committedSnapshot.allManifests().get(0),FILE_IO).entries().iterator().next()@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "V2Assert.assertEquals(\"Last sequence number should be 2\",2,readMetadata().lastSequenceNumber())@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "table.newAppend().appendFile(newFile).commit()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "validateManifest(committedSnapshot.allManifests().get(0),seqs(2),ids(committedSnapshot.snapshotId()),files(newFile),statuses(Status.ADDED))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "Assert.assertEquals(1000,field.fieldId())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "DataFile newFile = DataFiles.builder(table.spec()).copy(FILE_B).build()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertEquals(\"data_bucket\",field.name())@@@34@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "Snapshot snap = table.currentSnapshot()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "Assert.assertEquals(\"Second manifest should be the initial manifest with the old spec\",initialManifest,committedSnapshot.allManifests().get(1))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
48 [style = filled, label = "table.newAppend().appendFile(FILE_A).appendFile(FILE_B).commit()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Snapshot committedSnapshot = table.currentSnapshot()@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "validateManifest(initialManifest,seqs(1),ids(commitId),files(FILE_A),statuses(Status.ADDED))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "V1Assert.assertEquals(\"Table should end with last-sequence-number 0\",0,readMetadata().lastSequenceNumber())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Assert.assertEquals(\"data_bucket\",field.name())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "PartitionSpec newSpec = PartitionSpec.builderFor(base.schema()).bucket(\"id\",8).bucket(\"data\",8).build()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(\"Should create 1 manifest for initial write\",1,base.currentSnapshot().allManifests().size())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(\"Should use 2 manifest files\",2,pending.allManifests().size())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "field = ((PartitionData)entry.file().partition()).getPartitionType().fields().get(1)@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "PartitionSpec newSpec = PartitionSpec.builderFor(base.schema()).bucket(\"data\",16).bucket(\"id\",4).build()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "validateManifest(pending.allManifests().get(0),ids(pending.snapshotId()),files(newFile))@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testManifestEntryFieldIdsForChangedPartitionSpecForV1Table['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "Assert.assertEquals(\"id_bucket\",field.name())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testManifestEntryFieldIdsForChangedPartitionSpecForV1Table['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ManifestEntry<DataFile> entry = ManifestFiles.read(pending.allManifests().get(0),FILE_IO).entries().iterator().next()@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(\"Should use 2 manifest files\",2,committedSnapshot.allManifests().size())@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Types.NestedField field = ((PartitionData)entry.file().partition()).getPartitionType().fields().get(0)@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "field = ((PartitionData)entry.file().partition()).getPartitionType().fields().get(0)@@@32@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "Assert.assertEquals(\"id_bucket\",field.name())@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "V2Assert.assertEquals(\"Snapshot sequence number should be 2\",2,committedSnapshot.sequenceNumber())@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "table.ops().commit(base,base.updatePartitionSpec(newSpec))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "DataFile newFileC = DataFiles.builder(newSpec).copy(FILE_C).withPartitionPath(\"data_bucket=2/id_bucket=3\").build()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "V2Assert.assertEquals(\"Last sequence number should be 1\",1,readMetadata().lastSequenceNumber())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "validateManifest(pending.allManifests().get(0),ids(pending.snapshotId()),files(newFileC))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
24->10 [style = bold, label=""];
2->46 [style = bold, label=""];
23->20 [style = bold, label=""];
46->16 [style = bold, label=""];
16->11 [style = bold, label=""];
0->13 [style = bold, label=""];
47->48 [style = bold, label=""];
10->14 [style = bold, label=""];
2->6 [style = bold, label=""];
11->8 [style = solid, label="newFile"];
0->44 [style = dashed, label="0"];
38->29 [style = bold, label=""];
2->34 [style = bold, label=""];
35->33 [style = bold, label=""];
22->21 [style = bold, label=""];
9->17 [style = bold, label=""];
32->27 [style = bold, label=""];
16->32 [style = bold, label=""];
20->48 [style = dashed, label="0"];
5->18 [style = bold, label=""];
29->37 [style = bold, label=""];
7->4 [style = bold, label=""];
10->16 [style = solid, label="base"];
0->39 [style = dashed, label="0"];
46->16 [style = solid, label="newSpec"];
43->45 [style = solid, label="newFileC"];
12->9 [style = bold, label=""];
3->22 [style = bold, label=""];
17->19 [style = bold, label=""];
42->40 [style = bold, label=""];
2->34 [style = solid, label="initialManifest"];
8->7 [style = bold, label=""];
28->41 [style = bold, label=""];
45->7 [style = bold, label=""];
20->10 [style = bold, label=""];
6->46 [style = dashed, label="0"];
11->0 [style = bold, label=""];
33->34 [style = solid, label="commitId"];
6->16 [style = solid, label="newSpec"];
27->11 [style = bold, label=""];
30->3 [style = bold, label=""];
40->36 [style = bold, label=""];
37->31 [style = bold, label=""];
6->16 [style = bold, label=""];
35->24 [style = solid, label="snap"];
15->20 [style = bold, label=""];
33->24 [style = bold, label=""];
2->31 [style = solid, label="initialManifest"];
21->1 [style = bold, label=""];
34->6 [style = bold, label=""];
31->30 [style = bold, label=""];
25->26 [style = bold, label=""];
11->37 [style = solid, label="newFile"];
18->25 [style = bold, label=""];
48->10 [style = bold, label=""];
16->43 [style = bold, label=""];
4->12 [style = bold, label=""];
11->39 [style = bold, label=""];
13->45 [style = bold, label=""];
44->13 [style = bold, label=""];
21->25 [style = dashed, label="0"];
11->43 [style = dashed, label="0"];
14->2 [style = bold, label=""];
8->45 [style = dashed, label="0"];
20->35 [style = bold, label=""];
36->38 [style = bold, label=""];
26->28 [style = bold, label=""];
13->8 [style = bold, label=""];
39->42 [style = bold, label=""];
43->44 [style = bold, label=""];
19->3 [style = bold, label=""];
2->7 [style = solid, label="initialManifest"];
}
