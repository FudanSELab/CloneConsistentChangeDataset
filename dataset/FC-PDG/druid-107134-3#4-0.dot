digraph {
4 [style = filled, label = "Random rand = new Random()@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "Set<Integer> expected = Sets.newHashSet(0,1,2)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "iter.hasNext()@@@36@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "i++@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "tree.insert(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ab50a4,3)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "tree.insert(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ab5090,1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "BitmapFactory bf = new ConciseBitmapFactory()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ImmutableBitmap finalSet = bf.union(points)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "i < 5000@@@22@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Random rand = ThreadLocalRandom.current()@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Assert.assertTrue(finalSet.size() >= 3)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testEmptyConciseSet['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "ImmutableBitmap finalSet = bf.union(points)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testSearchWithSplit3['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(finalSet.size(),0)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Iterable<ImmutableBitmap> points = searchTree.search(new RadiusBound(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ab5166,5))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "tree.insert(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ab509a,2)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "tree.insert(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ab514d,bf.makeEmptyMutableBitmap())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "tree.insert(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ab50cd,i)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "RTree tree = new RTree(2,new LinearGutmanSplitStrategy(0,50,bf),bf)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertTrue(expected.contains(iter.next()))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "IntIterator iter = finalSet.iterator()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testSearchWithSplit3['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "int i = 5@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Iterable<ImmutableBitmap> points = searchTree.search(new RadiusBound(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ab50fa,5))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "tree.insert(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ab50ae,4)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20->11 [style = solid, label="i"];
17->10 [style = bold, label=""];
20->8 [style = solid, label="i"];
10->19 [style = solid, label="points"];
22->2 [style = bold, label=""];
13->20 [style = solid, label="i"];
1->26 [style = dashed, label="0"];
10->19 [style = bold, label=""];
1->15 [style = bold, label=""];
4->13 [style = bold, label=""];
12->17 [style = solid, label="tree"];
24->25 [style = solid, label="points"];
7->4 [style = bold, label=""];
5->14 [style = bold, label=""];
18->2 [style = bold, label=""];
15->16 [style = bold, label=""];
9->6 [style = dotted, label="true"];
4->21 [style = dashed, label="0"];
13->11 [style = bold, label=""];
2->12 [style = solid, label="bf"];
2->12 [style = bold, label=""];
9->6 [style = bold, label=""];
3->27 [style = bold, label=""];
0->7 [style = bold, label=""];
11->20 [style = dotted, label="true"];
19->1 [style = bold, label=""];
3->5 [style = bold, label=""];
13->11 [style = solid, label="i"];
8->20 [style = bold, label=""];
14->0 [style = bold, label=""];
13->8 [style = solid, label="i"];
24->25 [style = bold, label=""];
12->27 [style = solid, label="tree"];
25->26 [style = bold, label=""];
7->21 [style = bold, label=""];
11->8 [style = bold, label=""];
11->17 [style = bold, label=""];
11->8 [style = dotted, label="true"];
27->24 [style = bold, label=""];
12->3 [style = bold, label=""];
23->2 [style = bold, label=""];
6->9 [style = bold, label=""];
16->9 [style = bold, label=""];
21->13 [style = bold, label=""];
20->11 [style = bold, label=""];
}
