digraph {
15 [style = filled, label = "final List<String> updatedSubscription = Arrays.asList(topic1,topic2)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(singleton(topic1),subscriptions.subscription())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertEquals(2,rebalanceListener.revokedCount)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "client.prepareResponse(syncGroupResponse(newAssignment,Errors.NONE))@@@38@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "partitionAssignor.prepare(singletonMap(consumerId,newAssignment))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "subscriptions.subscribe(singleton(topic1),rebalanceListener)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "partitionAssignor.prepare(singletonMap(consumerId,singletonList(t1p)))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testMetadataRefreshDuringRebalance['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "client.prepareResponse(syncGroupResponse(singletonList(t1p),Errors.NONE.code()))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "coordinator.ensureCoordinatorReady()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final Set<String> updatedSubscriptionSet = new HashSet<>(updatedSubscription)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.assigned)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "metadata.update(TestUtils.singletonCluster(topic1,1),time.milliseconds())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "metadata.needMetadataForAllTopics(true)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "client.prepareResponse(joinGroupLeaderResponse(1,consumerId,initialSubscription,Errors.NONE.code()))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "coordinator.joinGroupIfNeeded()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "List<TopicPartition> newAssignment = Arrays.asList(t1p,t2p)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "String otherTopic = \"otherTopic\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "subscriptions.subscribe(new HashSet<>(Arrays.asList(topic1,otherTopic)),rebalanceListener)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "client.prepareResponse(groupCoordinatorResponse(node,Errors.NONE))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "client.prepareResponse(joinGroupFollowerResponse(1,\"consumer\",\"leader\",Errors.NONE.code()))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "testRejoinGroup['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(newAssignmentSet,subscriptions.assignedPartitions())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final String consumerId = \"leader\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Map<String,List<String>> initialSubscription = singletonMap(consumerId,singletonList(topic1))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "coordinator.joinGroupIfNeeded()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(2,rebalanceListener.revokedCount)@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "subscriptions.subscribe(Pattern.compile(\".*\"),rebalanceListener)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "client.prepareResponse(syncGroupResponse(singletonList(t1p),Errors.NONE.code()))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.revoked)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "client.prepareResponse(new MockClient.RequestMatcher(){@Override public boolean matches(AbstractRequest body){final Map<String,Integer> updatedPartitions = new HashMap<>()for (String topic : updatedSubscription)updatedPartitions.put(topic,1)metadata.update(TestUtils.clusterWith(1,updatedPartitions),time.milliseconds())return true}},syncGroupResponse(singletonList(t1p),Errors.NONE))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Map<String,List<String>> updatedSubscriptions = singletonMap(consumerId,Arrays.asList(topic1,topic2))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testMetadataRefreshDuringRebalance['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "client.prepareResponse(joinGroupFollowerResponse(2,\"consumer\",\"leader\",Errors.NONE.code()))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "coordinator.poll(time.milliseconds())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertTrue(rebalanceListener.revoked.isEmpty())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.revoked)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Set<TopicPartition> newAssignmentSet = new HashSet<>(newAssignment)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertEquals(2,rebalanceListener.assignedCount)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.assigned)@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "client.prepareResponse(new MockClient.RequestMatcher(){@Override public boolean matches(AbstractRequest body){JoinGroupRequest join = (JoinGroupRequest)bodyProtocolMetadata protocolMetadata = join.groupProtocols().iterator().next()PartitionAssignor.Subscription subscription = ConsumerProtocol.deserializeSubscription(protocolMetadata.metadata())protocolMetadata.metadata().rewind()return subscription.topics().containsAll(updatedSubscriptionSet)}},joinGroupLeaderResponse(2,consumerId,updatedSubscriptions,Errors.NONE))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "client.prepareResponse(groupCoordinatorResponse(node,Errors.NONE.code()))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(updatedSubscriptionSet,subscriptions.subscription())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "client.prepareResponse(syncGroupResponse(newAssignment,Errors.NONE.code()))@@@38@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertEquals(newAssignmentSet,rebalanceListener.assigned)@@@46@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(2,rebalanceListener.assignedCount)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(1,rebalanceListener.revokedCount)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "client.prepareResponse(joinGroupLeaderResponse(1,consumerId,initialSubscription,Errors.NONE))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "assertEquals(1,rebalanceListener.assignedCount)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertFalse(coordinator.needRejoin())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15->17 [style = solid, label="updatedSubscription"];
17->8 [style = bold, label=""];
8->10 [style = bold, label=""];
0->2 [style = solid, label="consumerId"];
8->6 [style = solid, label="newAssignment"];
25->28 [style = bold, label=""];
36->47 [style = bold, label=""];
33->16 [style = bold, label=""];
8->11 [style = solid, label="newAssignment"];
47->48 [style = bold, label=""];
25->14 [style = solid, label="updatedSubscriptionSet"];
25->13 [style = bold, label=""];
15->25 [style = bold, label=""];
10->27 [style = bold, label=""];
3->31 [style = bold, label=""];
1->28 [style = solid, label="initialSubscription"];
45->49 [style = solid, label="otherTopic"];
25->3 [style = solid, label="updatedSubscriptionSet"];
14->22 [style = bold, label=""];
29->0 [style = bold, label=""];
45->36 [style = bold, label=""];
43->32 [style = bold, label=""];
8->31 [style = solid, label="newAssignment"];
3->6 [style = bold, label=""];
6->31 [style = dashed, label="0"];
4->18 [style = bold, label=""];
0->21 [style = bold, label=""];
13->28 [style = dashed, label="0"];
8->10 [style = solid, label="newAssignment"];
16->19 [style = bold, label=""];
49->34 [style = bold, label=""];
10->22 [style = solid, label="newAssignmentSet"];
0->28 [style = solid, label="consumerId"];
0->1 [style = solid, label="consumerId"];
31->7 [style = bold, label=""];
21->36 [style = dashed, label="0"];
0->27 [style = solid, label="consumerId"];
3->14 [style = solid, label="subscription"];
7->9 [style = bold, label=""];
1->13 [style = solid, label="initialSubscription"];
44->46 [style = bold, label=""];
24->26 [style = bold, label=""];
18->20 [style = bold, label=""];
19->1 [style = bold, label=""];
13->17 [style = bold, label=""];
26->12 [style = bold, label=""];
30->19 [style = bold, label=""];
42->44 [style = bold, label=""];
0->13 [style = solid, label="consumerId"];
20->16 [style = bold, label=""];
15->25 [style = solid, label="updatedSubscription"];
27->11 [style = bold, label=""];
5->0 [style = bold, label=""];
34->37 [style = bold, label=""];
11->3 [style = bold, label=""];
10->23 [style = solid, label="newAssignmentSet"];
16->30 [style = dashed, label="0"];
0->3 [style = solid, label="consumerId"];
23->46 [style = dashed, label="0"];
2->16 [style = dashed, label="0"];
39->49 [style = bold, label=""];
2->15 [style = bold, label=""];
40->41 [style = bold, label=""];
9->14 [style = bold, label=""];
48->33 [style = bold, label=""];
35->45 [style = bold, label=""];
28->17 [style = bold, label=""];
27->3 [style = solid, label="updatedSubscriptions"];
32->39 [style = bold, label=""];
1->2 [style = bold, label=""];
12->23 [style = bold, label=""];
22->24 [style = bold, label=""];
6->7 [style = bold, label=""];
20->30 [style = bold, label=""];
19->38 [style = bold, label=""];
0->11 [style = solid, label="consumerId"];
37->40 [style = bold, label=""];
38->43 [style = bold, label=""];
0->45 [style = dashed, label="0"];
21->4 [style = bold, label=""];
41->42 [style = bold, label=""];
}
