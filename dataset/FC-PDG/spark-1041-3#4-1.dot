digraph {
3 [style = filled, label = "Random rand = new Random()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Set<Long> hashcodes = new HashSet<>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(hasher.hashUnsafeWords(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize),hasher.hashUnsafeWords(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int size = 65536@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize),hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(hasher.hashUnsafeWordsBlock(mb),hasher.hashUnsafeWordsBlock(mb))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "i < size@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "MemoryBlock mb = ByteArrayMemoryBlock.fromArray(bytes)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "randomizedStressTestBytes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "byte(( paddedBytes = new byte((((@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "byte(( bytes = new byte((((@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "i++@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "System.arraycopy(strBytes,0,paddedBytes,0,strBytes.length)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "randomizedStressTestBytes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "int i = 0@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "rand.nextBytes(bytes)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int byteArrSize = rand.nextInt(100) * 8@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "byte(( strBytes = String.valueOf(i).getBytes(StandardCharsets.UTF_8)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "int size = 64000@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "hashcodes.add(hasher.hashUnsafeWordsBlock(mb))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "hashcodes.add(hasher.hashUnsafeWords(bytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "int byteArrSize = 8@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "hashcodes.add(hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95d)@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "randomizedStressTestPaddedStrings['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95d)@@@15@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
5->3 [style = bold, label=""];
9->0 [style = solid, label="i"];
7->2 [style = dotted, label="true"];
7->6 [style = dotted, label="true"];
17->5 [style = bold, label=""];
12->9 [style = solid, label="i"];
18->24 [style = bold, label=""];
6->8 [style = solid, label="byteArrSize"];
9->0 [style = dotted, label="true"];
1->8 [style = bold, label=""];
7->14 [style = dotted, label="true"];
9->0 [style = bold, label=""];
21->10 [style = solid, label="size"];
8->14 [style = dashed, label="0"];
11->20 [style = dashed, label="0"];
7->10 [style = bold, label=""];
21->9 [style = solid, label="size"];
2->1 [style = bold, label=""];
6->0 [style = dashed, label="0"];
11->1 [style = solid, label="bytes"];
3->12 [style = bold, label=""];
21->25 [style = bold, label=""];
9->10 [style = bold, label=""];
9->7 [style = bold, label=""];
12->9 [style = bold, label=""];
24->22 [style = bold, label=""];
0->22 [style = solid, label="byteArrSize"];
22->23 [style = bold, label=""];
7->0 [style = dotted, label="true"];
7->15 [style = dotted, label="true"];
11->2 [style = bold, label=""];
6->1 [style = solid, label="byteArrSize"];
7->9 [style = solid, label="i"];
0->7 [style = bold, label=""];
8->0 [style = bold, label=""];
7->9 [style = bold, label=""];
20->18 [style = bold, label=""];
8->22 [style = dashed, label="0"];
9->24 [style = dotted, label="true"];
7->11 [style = dotted, label="true"];
11->8 [style = solid, label="bytes"];
25->12 [style = bold, label=""];
11->2 [style = solid, label="bytes"];
0->23 [style = solid, label="byteArrSize"];
18->22 [style = solid, label="paddedBytes"];
9->23 [style = dotted, label="true"];
5->10 [style = solid, label="size"];
15->0 [style = bold, label=""];
6->11 [style = bold, label=""];
7->6 [style = bold, label=""];
11->16 [style = solid, label="bytes"];
9->20 [style = dotted, label="true"];
7->16 [style = dotted, label="true"];
2->18 [style = dashed, label="0"];
16->14 [style = solid, label="mb"];
5->21 [style = dashed, label="0"];
9->18 [style = dotted, label="true"];
16->14 [style = bold, label=""];
5->7 [style = solid, label="size"];
0->20 [style = bold, label=""];
14->15 [style = bold, label=""];
19->21 [style = bold, label=""];
23->7 [style = bold, label=""];
16->15 [style = solid, label="mb"];
9->7 [style = solid, label="i"];
20->24 [style = solid, label="strBytes"];
18->24 [style = solid, label="paddedBytes"];
9->7 [style = dotted, label="true"];
18->23 [style = solid, label="paddedBytes"];
7->1 [style = dotted, label="true"];
7->8 [style = dotted, label="true"];
9->22 [style = dotted, label="true"];
4->5 [style = bold, label=""];
12->7 [style = solid, label="i"];
5->13 [style = solid, label="size"];
0->7 [style = solid, label="i"];
2->16 [style = bold, label=""];
}
