digraph {
21 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(1)),lt(aRef,literal(10)),lt(aRef,literal(5))),RelOptPredicateList.of(rexBuilder,ImmutableList.of(gt(aRef,literal(5)))),\"false\")@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(1)),lt(aRef,literal(10)),le(aRef,literal(5))),RelOptPredicateList.of(rexBuilder,ImmutableList.of(ge(aRef,literal(5)))),\"=(?0.a, 5)\")@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "checkSimplifyFilter(and(lt(aRef,literal(1)),eq(aRef,literal(1)),ge(aRef,literal(1))),\"false\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "checkSimplifyFilter(and(eq(aRef,literal(1)),eq(bRef,literal(1)),eq(aRef,bRef)),\"AND(=(?0.a, 1), =(?0.b, 1))\")@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "checkSimplifyFilter(and(eq(aRef,literal(1)),or(eq(aRef,literal(1)),eq(aRef,literal(10)))),\"=(?0.a, 1)\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(10)),gt(aRef,literal(1))),\">(?0.a, 10)\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,nullBool),ge(bRef,literal(1))),\"false\")@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "checkSimplifyFilter(and(gt(literal(1),aRef),gt(aRef,literal(5))),RelOptPredicateList.EMPTY,\"false\")@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(10)),ge(bRef,literal(1)),lt(aRef,literal(10))),\"false\")@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final RelDataType rowType = typeFactory.builder().add(\"a\",intType).add(\"b\",intType).build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "checkSimplifyFilter(and(args2),\"false\")@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final RelDataType booleanType = typeFactory.createSqlType(SqlTypeName.BOOLEAN)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final ImmutableList<RexNode> args = ImmutableList.of(eq(eq(aRef,literal(1)),trueLiteral),eq(bRef,literal(1)))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "final RexNode dRef = rexBuilder.makeFieldAccess(range,3)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "checkSimplifyFilter(and(lt(literal(1),aRef),lt(literal(5),aRef)),RelOptPredicateList.EMPTY,\">(?0.a, 5)\")@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "checkSimplifyFilter(or(and(eq(aRef,literal(1)),eq(aRef,literal(1))),and(eq(aRef,literal(10)),eq(aRef,literal(1)))),\"=(?0.a, 1)\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "testSimplifyFilter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
49 [style = filled, label = "checkSimplifyFilter(and(or(eq(aRef,literal(1)),eq(aRef,literal(10))),eq(aRef,literal(1))),\"=(?0.a, 1)\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "testSimplifyAndPush['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testSimplifyFilter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "final RexNode bRef = rexBuilder.makeFieldAccess(range,1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "checkSimplifyFilter(and(args),\"AND(=(?0.a, 1), =(?0.b, 1))\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "checkSimplifyFilter(or(gt(aRef,literal(10)),gt(bRef,literal(1)),gt(aRef,literal(10))),\"OR(>(?0.a, 10), >(?0.b, 1))\")@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "checkSimplifyFilter(and(le(aRef,literal(1)),ge(aRef,literal(1))),\"=(?0.a, 1)\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertThat(simplify.simplifyFilterPredicates(args).toString(),equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(1)),lt(aRef,literal(10)),lt(aRef,literal(5))),RelOptPredicateList.EMPTY,\"SEARCH(?0.a, Sarg((1..5)()\")@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "checkSimplifyFilter(and(eq(aRef,literal(1)),eq(bRef,literal(10)),eq(aRef,bRef)),\"false\")@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "checkSimplifyFilter(or(or(eq(aRef,literal(1)),eq(aRef,literal(1))),eq(aRef,literal(1))),\"=(?0.a, 1)\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final RexNode eRef = rexBuilder.makeFieldAccess(range,4)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal(5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(le(aRef,literal(5)),le(bRef,literal(5)))),\"false\")@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "checkSimplifyFilter(and(gt(literal(1),aRef),gt(literal(5),aRef)),RelOptPredicateList.EMPTY,\">(1, ?0.a)\")@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "final RexNode fRef = rexBuilder.makeFieldAccess(range,5)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "checkSimplifyFilter(and(lt(literal(1),aRef),lt(aRef,literal(5))),RelOptPredicateList.EMPTY,\"SEARCH(?0.a, Sarg((1..5)()\")@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "checkSimplifyFilter(lt(aRef,literal(1)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal(10)),gt(aRef,literal(5)))),\"false\")@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "checkSimplifyFilter(or(gt(aRef,literal(5)),gt(bRef,literal(5))),RelOptPredicateList.of(rexBuilder,ImmutableList.of(le(aRef,literal(5)),le(bRef,literal(5)))),\"false\")@@@41@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "checkSimplifyFilter(case_(cRef,trueLiteral,dRef,trueLiteral,eRef,falseLiteral,fRef,falseLiteral,nullBool),\"OR(?0.c, ?0.d)\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final RelDataType rowType = typeFactory.builder().add(\"a\",intType).add(\"b\",intType).add(\"c\",booleanType).add(\"d\",booleanType).add(\"e\",booleanType).add(\"f\",booleanType).add(\"g\",booleanType).add(\"h\",intType).build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal(5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal(10)),ge(aRef,literal(5)))),\">(?0.a, 5)\")@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertThat(simplify.simplifyFilterPredicates(args2),nullValue())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(1)),gt(aRef,literal(10))),\">(?0.a, 10)\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "checkSimplifyFilter(and(lt(literal(1),aRef),lt(literal(5),aRef)),RelOptPredicateList.EMPTY,\"<(5, ?0.a)\")@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "checkSimplifyFilter(and(gt(literal(1),aRef),gt(literal(5),aRef)),RelOptPredicateList.EMPTY,\"<(?0.a, 1)\")@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "final RexNode aRef = rexBuilder.makeFieldAccess(range,0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType,0)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final ImmutableList<RexNode> args2 = ImmutableList.of(eq(aRef,literal(1)),eq(aRef,literal(10)))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal(1)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal(10)),gt(aRef,literal(5)))),\"true\")@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "checkSimplifyFilter(and(le(aRef,literal(1)),gt(aRef,literal(1))),\"false\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final RexNode cRef = rexBuilder.makeFieldAccess(range,2)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "checkSimplify2(and(vBool(1),vBool(2),vBool(3),not(vBool(1)),not(vBool(2)),not(vBool())),\"AND(?0.bool3, null, IS NULL(?0.bool1),\" + \" IS NULL(?0.bool2), NOT(?0.bool0))\",\"false\")@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(1)),lt(aRef,literal(10)),lt(aRef,literal(5))),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal(10)),ge(aRef,literal(1)))),\"SEARCH(?0.a, Sarg((1..5)()\")@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "checkSimplify3(and(nullBool,not(or(nullBool,vBool()))),\"AND(null, NOT(?0.bool0))\",\"false\",\"NOT(?0.bool0)\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal(5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(le(aRef,literal(5)))),\"false\")@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38->21 [style = solid, label="aRef"];
38->20 [style = solid, label="aRef"];
20->9 [style = bold, label=""];
20->40 [style = dashed, label="0"];
2->6 [style = bold, label=""];
32->12 [style = bold, label=""];
1->34 [style = solid, label="args2"];
51->24 [style = bold, label=""];
28->24 [style = dashed, label="0"];
49->48 [style = bold, label=""];
38->36 [style = solid, label="aRef"];
26->10 [style = solid, label="bRef"];
31->1 [style = bold, label=""];
24->43 [style = bold, label=""];
26->0 [style = solid, label="bRef"];
26->12 [style = solid, label="bRef"];
25->31 [style = bold, label=""];
22->8 [style = bold, label=""];
17->36 [style = bold, label=""];
1->35 [style = solid, label="args2"];
15->11 [style = bold, label=""];
16->44 [style = solid, label="aRef"];
34->2 [style = bold, label=""];
26->36 [style = solid, label="bRef"];
27->7 [style = bold, label=""];
47->51 [style = bold, label=""];
38->6 [style = solid, label="aRef"];
37->32 [style = bold, label=""];
38->9 [style = solid, label="aRef"];
38->26 [style = bold, label=""];
38->5 [style = solid, label="aRef"];
26->11 [style = solid, label="bRef"];
26->5 [style = solid, label="bRef"];
19->42 [style = bold, label=""];
24->28 [style = bold, label=""];
43->16 [style = bold, label=""];
38->15 [style = solid, label="aRef"];
26->6 [style = solid, label="bRef"];
16->13 [style = solid, label="range"];
38->30 [style = solid, label="aRef"];
1->35 [style = bold, label=""];
3->33 [style = bold, label=""];
26->4 [style = bold, label=""];
38->18 [style = solid, label="aRef"];
26->30 [style = solid, label="bRef"];
8->17 [style = bold, label=""];
38->8 [style = solid, label="aRef"];
36->25 [style = bold, label=""];
23->37 [style = bold, label=""];
38->27 [style = solid, label="aRef"];
36->25 [style = solid, label="args"];
38->7 [style = solid, label="aRef"];
38->1 [style = solid, label="aRef"];
38->10 [style = solid, label="aRef"];
39->14 [style = solid, label="dRef"];
38->19 [style = solid, label="aRef"];
26->32 [style = solid, label="bRef"];
42->7 [style = bold, label=""];
35->34 [style = bold, label=""];
38->2 [style = solid, label="aRef"];
16->52 [style = solid, label="aRef"];
16->48 [style = solid, label="aRef"];
30->15 [style = bold, label=""];
21->23 [style = bold, label=""];
38->12 [style = solid, label="aRef"];
26->37 [style = solid, label="bRef"];
38->32 [style = solid, label="aRef"];
38->37 [style = solid, label="aRef"];
16->38 [style = solid, label="range"];
39->13 [style = bold, label=""];
4->39 [style = bold, label=""];
14->19 [style = bold, label=""];
16->29 [style = solid, label="range"];
40->9 [style = bold, label=""];
38->42 [style = solid, label="aRef"];
7->20 [style = bold, label=""];
43->38 [style = solid, label="range"];
27->42 [style = dashed, label="0"];
4->14 [style = solid, label="cRef"];
28->16 [style = solid, label="rowType"];
38->40 [style = solid, label="aRef"];
38->17 [style = solid, label="aRef"];
26->19 [style = solid, label="bRef"];
9->18 [style = bold, label=""];
10->5 [style = bold, label=""];
26->44 [style = bold, label=""];
16->26 [style = solid, label="aRef"];
33->24 [style = bold, label=""];
6->10 [style = bold, label=""];
16->4 [style = solid, label="range"];
41->33 [style = bold, label=""];
18->21 [style = bold, label=""];
7->40 [style = bold, label=""];
22->48 [style = dashed, label="0"];
16->39 [style = solid, label="range"];
52->49 [style = bold, label=""];
50->46 [style = bold, label=""];
38->0 [style = solid, label="aRef"];
24->43 [style = solid, label="rowType"];
12->30 [style = bold, label=""];
38->22 [style = solid, label="aRef"];
5->14 [style = bold, label=""];
28->16 [style = bold, label=""];
16->49 [style = solid, label="aRef"];
13->14 [style = solid, label="eRef"];
13->29 [style = bold, label=""];
38->23 [style = solid, label="aRef"];
11->0 [style = bold, label=""];
48->45 [style = bold, label=""];
16->26 [style = solid, label="range"];
45->50 [style = bold, label=""];
16->45 [style = solid, label="aRef"];
19->27 [style = bold, label=""];
44->52 [style = bold, label=""];
43->16 [style = solid, label="range"];
8->45 [style = dashed, label="0"];
29->22 [style = bold, label=""];
38->11 [style = solid, label="aRef"];
29->14 [style = solid, label="fRef"];
16->38 [style = bold, label=""];
26->2 [style = solid, label="bRef"];
}
