digraph {
23 [style = filled, label = "multiChildrenList = multi(zk,Arrays.asList(Op.getChildren(\"/foo_auth\"),Op.getChildren(\"/foo_no_auth\")))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertSame(multiChildrenList.size(),2)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(multiChildrenList.size(),1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<String> childrenList = ((OpResult.GetChildrenResult)multiChildrenList.get(0)).getChildren()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testMultiGetChildrenAuthentication['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "List<OpResult> multiChildrenList = multi(zk,Arrays.asList(Op.getChildren(\"/foo_auth\")),useAsync)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "zk.create(\"/foo_no_auth\",null,writeOnly,CreateMode.PERSISTENT)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "List<ACL> writeOnly = Collections.singletonList(new ACL(ZooDefs.Perms.WRITE,new Id(\"world\",\"anyone\")))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(((OpResult.ErrorResult)multiChildrenList.get(0)).getErr(),KeeperException.Code.NOAUTH.intValue(),\"Expected NoAuthException for getting the children of a write only node\")@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertTrue(multiChildrenList.get(1) instanceof OpResult.ErrorResult)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(multiChildrenList.size(),1)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(childrenList.size(),1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "zk.create(\"/foo_auth/bar\",null,Ids.READ_ACL_UNSAFE,CreateMode.PERSISTENT)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(multiChildrenList.get(0) instanceof OpResult.ErrorResult)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(multiChildrenList.get(0) instanceof OpResult.GetChildrenResult)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "zk.create(\"/foo_auth\",null,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testMultiGetChildrenAuthentication['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "assertEquals(\"Expected NoAuthException for getting the children of a write only node\",((OpResult.ErrorResult)multiChildrenList.get(1)).getErr(),KeeperException.Code.NOAUTH.intValue())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "multiChildrenList = multi(zk,Arrays.asList(Op.getChildren(\"/foo_no_auth\")),useAsync)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "testMultiGetChildrenMixedAuthenticationCorrectFirst['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(multiChildrenList.get(0) instanceof OpResult.GetChildrenResult)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "List<OpResult> multiChildrenList@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(childrenList.get(0),\"bar\")@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "List<OpResult> multiChildrenList = multi(zk,Arrays.asList(Op.getChildren(\"/foo_auth\")))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"Expected NoAuthException for getting the children of a write only node\",((OpResult.ErrorResult)multiChildrenList.get(0)).getErr(),KeeperException.Code.NOAUTH.intValue())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "boolean useAsync@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
8->10 [style = bold, label=""];
18->3 [style = bold, label=""];
23->25 [style = bold, label=""];
4->14 [style = bold, label=""];
19->16 [style = solid, label="useAsync"];
9->11 [style = bold, label=""];
7->17 [style = dashed, label="0"];
8->18 [style = bold, label=""];
19->18 [style = solid, label="useAsync"];
11->6 [style = bold, label=""];
0->16 [style = dashed, label="0"];
25->4 [style = bold, label=""];
10->3 [style = bold, label=""];
12->16 [style = bold, label=""];
0->20 [style = dashed, label="0"];
2->4 [style = bold, label=""];
12->0 [style = bold, label=""];
9->8 [style = solid, label="writeOnly"];
1->9 [style = bold, label=""];
20->22 [style = bold, label=""];
3->23 [style = dashed, label="0"];
13->17 [style = bold, label=""];
21->9 [style = bold, label=""];
3->2 [style = bold, label=""];
15->9 [style = bold, label=""];
13->7 [style = bold, label=""];
15->19 [style = dotted, label="true"];
5->13 [style = bold, label=""];
14->12 [style = bold, label=""];
6->8 [style = bold, label=""];
16->5 [style = bold, label=""];
0->20 [style = bold, label=""];
5->22 [style = dashed, label="0"];
10->24 [style = dashed, label="0"];
10->18 [style = dashed, label="0"];
0->5 [style = bold, label=""];
24->23 [style = bold, label=""];
8->24 [style = bold, label=""];
}
