digraph {
7 [style = filled, label = "assertRangeDoShardingWithPartTargets['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "List<String> availableTargetNames = Lists.newArrayList(\"t_order_0\",\"t_order_1\",\"t_order_2\",\"t_order_3\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertTrue(actual.contains(\"t_order_4\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Collection<String> actual = shardingAlgorithm.doSharding(availableTargetNames,new RangeShardingValue<>(\"t_order\",\"order_id\",Range.closed(12L,55L)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(actual.contains(\"t_order_1\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Collection<String> actual = shardingAlgorithm.doSharding(availableTargetNames,new RangeShardingValue<>(\"t_order\",\"order_id\",Range.closed(11L,12L)))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<String> availableTargetNames = Lists.newArrayList(\"t_order_0\",\"t_order_1\",\"t_order_2\",\"t_order_3\",\"t_order_4\",\"t_order_5\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertTrue(actual.contains(\"t_order_5\"))@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertRangeDoShardingWithPartTargets['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertRangeDoSharding['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(actual.size(),is(2))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(actual.size(),is(5))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertTrue(actual.contains(\"t_order_0\"))@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "List<String> availableTargetNames = Arrays.asList(\"t_order_0\",\"t_order_1\",\"t_order_2\",\"t_order_3\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertTrue(actual.contains(\"t_order_2\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(actual.contains(\"t_order_3\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(actual.contains(\"t_order_3\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->0 [style = solid, label="availableTargetNames"];
11->16 [style = bold, label=""];
1->4 [style = bold, label=""];
16->8 [style = bold, label=""];
12->11 [style = bold, label=""];
14->10 [style = bold, label=""];
5->9 [style = dashed, label="0"];
6->0 [style = bold, label=""];
14->10 [style = solid, label="availableTargetNames"];
0->10 [style = dashed, label="0"];
1->12 [style = dashed, label="0"];
2->0 [style = bold, label=""];
2->14 [style = dashed, label="0"];
3->2 [style = bold, label=""];
10->12 [style = bold, label=""];
9->15 [style = bold, label=""];
0->1 [style = bold, label=""];
7->6 [style = bold, label=""];
6->0 [style = solid, label="availableTargetNames"];
8->9 [style = bold, label=""];
2->6 [style = dashed, label="0"];
4->5 [style = bold, label=""];
13->14 [style = bold, label=""];
}
