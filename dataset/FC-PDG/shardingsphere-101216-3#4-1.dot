digraph {
4 [style = filled, label = "actual.write(payload,1L)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "PostgreSQLInt8BinaryProtocolValue actual = new PostgreSQLInt8BinaryProtocolValue()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "when(payload.readInt8()).thenReturn(1L)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "PostgreSQLInt2BinaryProtocolValue actual = new PostgreSQLInt2BinaryProtocolValue()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertNewInstance['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertThat(actual.read(payload),is(1L))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "verify(payload).writeInt2(1)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "actual.write(payload,1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "verify(payload).writeInt8(1L)@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "when(payload.readInt2()).thenReturn(1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertNewInstance['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(actual.read(payload),is(1))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(actual.getColumnLength(null),is(8))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertThat(actual.read(payload,8),is(1L))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertNewInstance['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(actual.getColumnLength(null),equalTo(8))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertThat(actual.getColumnLength(null),equalTo(2))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->8 [style = bold, label=""];
15->10 [style = bold, label=""];
5->12 [style = dashed, label="0"];
0->6 [style = bold, label=""];
9->4 [style = bold, label=""];
8->6 [style = bold, label=""];
2->4 [style = bold, label=""];
2->10 [style = dashed, label="0"];
6->2 [style = bold, label=""];
1->13 [style = dashed, label="0"];
0->14 [style = dashed, label="0"];
3->5 [style = bold, label=""];
7->5 [style = bold, label=""];
5->0 [style = bold, label=""];
6->15 [style = dashed, label="0"];
2->9 [style = dashed, label="0"];
11->13 [style = bold, label=""];
12->14 [style = bold, label=""];
0->8 [style = dashed, label="0"];
14->15 [style = bold, label=""];
4->1 [style = bold, label=""];
4->11 [style = dashed, label="0"];
6->9 [style = bold, label=""];
16->12 [style = bold, label=""];
10->11 [style = bold, label=""];
}
