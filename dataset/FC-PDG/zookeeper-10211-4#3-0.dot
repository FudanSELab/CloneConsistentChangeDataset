digraph {
19 [style = filled, label = "Socket secureClientSocket = null@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(buf.length,bytesRead)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "Socket clientSocket = null@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(handshakeCompleted)@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Socket badClientSocket = null@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(1))@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "clientSocket.getOutputStream().write(DATA_FROM_CLIENT)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "bytesRead = secureClientSocket.getInputStream().read(buf,0,buf.length)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "serverThread.start()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "handshakeCompletedLock@@@29@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "sslSocket.getOutputStream().flush()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertTrue(handshakeCompleted)@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,true,DATA_TO_CLIENT)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "secureClientSocket = connectWithSSL()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "{forceClose(sslSocket)serverThread.shutdown(TIMEOUT)}@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "handshakeCompletedLock@@@13@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Assert.assertArrayEquals(DATA_TO_CLIENT,buf)@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,true,DATA_TO_CLIENT)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assert.assertFalse(handshakeCompleted)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "secureClientSocket.getOutputStream().flush()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,false,DATA_TO_CLIENT)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "buf = new byte((((@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "badClientSocket = connectWithoutSSL()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertArrayEquals(DATA_TO_CLIENT,buf)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "clientSocket = connectWithoutSSL()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "int bytesRead = sslSocket.getInputStream().read(buf,0,buf.length)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "Socket sslSocket = connectWithSSL()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "handshakeCompletedLock.wait(TIMEOUT)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(1))@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testTLSDetectionNonBlockingNonStrictServerIdleClient['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "clientSocket.getOutputStream().flush()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "secureClientSocket.getOutputStream().write(DATA_FROM_CLIENT)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "assertEquals(buf.length,bytesRead)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
48 [style = filled, label = "handshakeCompletedLock.wait(TIMEOUT)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "byte(( buf = new byte((((@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertFalse(handshakeCompleted)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
46 [style = filled, label = "testConnectWithSSLToStrictServer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "testTLSDetectionNonBlockingNonStrictServerIdleClient['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "assertArrayEquals(DATA_TO_CLIENT,buf)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "handshakeCompletedLock@@@18@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "{forceClose(badClientSocket)forceClose(clientSocket)forceClose(secureClientSocket)serverThread.shutdown(TIMEOUT)}@@@36@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "!handshakeCompleted@@@14@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "int bytesRead = clientSocket.getInputStream().read(buf,0,buf.length)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "sslSocket.getOutputStream().write(DATA_FROM_CLIENT)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertArrayEquals(DATA_TO_CLIENT,buf)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Assert.assertTrue(handshakeCompleted)@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41->15 [style = bold, label=""];
51->21 [style = dotted, label="true"];
2->6 [style = bold, label=""];
24->35 [style = dotted, label="true"];
16->35 [style = dashed, label="0"];
17->9 [style = bold, label=""];
38->4 [style = bold, label=""];
21->48 [style = bold, label=""];
14->28 [style = bold, label=""];
1->23 [style = bold, label=""];
13->25 [style = solid, label="clientSocket"];
41->44 [style = solid, label="sslSocket"];
49->40 [style = bold, label=""];
0->11 [style = dotted, label="true"];
9->30 [style = dashed, label="0"];
45->41 [style = bold, label=""];
11->16 [style = bold, label=""];
19->12 [style = bold, label=""];
24->0 [style = bold, label=""];
40->51 [style = bold, label=""];
6->26 [style = solid, label="bytesRead"];
26->1 [style = bold, label=""];
51->21 [style = bold, label=""];
1->34 [style = dashed, label="0"];
19->39 [style = bold, label=""];
10->31 [style = dashed, label="0"];
26->33 [style = dashed, label="0"];
42->40 [style = solid, label="buf"];
36->14 [style = bold, label=""];
27->22 [style = bold, label=""];
50->49 [style = bold, label=""];
43->45 [style = bold, label=""];
21->29 [style = solid, label="buf"];
21->48 [style = dotted, label="true"];
21->9 [style = bold, label=""];
21->29 [style = bold, label=""];
18->4 [style = bold, label=""];
3->7 [style = bold, label=""];
29->32 [style = bold, label=""];
24->0 [style = dotted, label="true"];
28->19 [style = bold, label=""];
0->44 [style = bold, label=""];
31->3 [style = bold, label=""];
15->47 [style = bold, label=""];
12->39 [style = dashed, label="0"];
46->43 [style = bold, label=""];
4->10 [style = bold, label=""];
6->33 [style = solid, label="bytesRead"];
0->16 [style = bold, label=""];
29->17 [style = bold, label=""];
6->26 [style = bold, label=""];
37->24 [style = bold, label=""];
21->9 [style = solid, label="buf"];
47->42 [style = bold, label=""];
2->1 [style = solid, label="buf"];
4->10 [style = dotted, label="true"];
0->11 [style = bold, label=""];
51->9 [style = dotted, label="true"];
3->25 [style = solid, label="secureClientSocket"];
7->20 [style = bold, label=""];
2->6 [style = solid, label="buf"];
42->50 [style = solid, label="buf"];
32->30 [style = bold, label=""];
24->16 [style = dotted, label="true"];
23->37 [style = dashed, label="0"];
35->25 [style = bold, label=""];
4->31 [style = bold, label=""];
2->34 [style = solid, label="buf"];
13->27 [style = bold, label=""];
9->18 [style = bold, label=""];
4->31 [style = dotted, label="true"];
6->33 [style = bold, label=""];
15->8 [style = bold, label=""];
29->17 [style = solid, label="bytesRead"];
8->13 [style = bold, label=""];
30->38 [style = bold, label=""];
39->15 [style = bold, label=""];
42->50 [style = bold, label=""];
9->0 [style = bold, label=""];
8->25 [style = solid, label="badClientSocket"];
12->15 [style = bold, label=""];
22->21 [style = bold, label=""];
10->3 [style = bold, label=""];
48->9 [style = bold, label=""];
16->25 [style = bold, label=""];
50->49 [style = solid, label="bytesRead"];
17->32 [style = dashed, label="0"];
5->14 [style = bold, label=""];
18->38 [style = dashed, label="0"];
11->35 [style = bold, label=""];
21->30 [style = solid, label="buf"];
20->2 [style = bold, label=""];
23->24 [style = bold, label=""];
34->37 [style = bold, label=""];
29->50 [style = dashed, label="0"];
0->35 [style = bold, label=""];
33->34 [style = bold, label=""];
29->32 [style = solid, label="bytesRead"];
}
