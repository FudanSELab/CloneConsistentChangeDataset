digraph {
10 [style = filled, label = "aggs.add(new AggImpState(call.i,call.e,false))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "groupCount == 0@@@31@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "EnumerableRelImplementor implementor@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "final Expression resultSelector = builder.append(\"resultSelector\",Expressions.lambda(,resultBlock.toBlock(),acc_))@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "builder.add(Expressions.return_(null,Expressions.call(childExp,BuiltInMethod.GROUP_BY2.method,Expressions.list(keySelector_,Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_INITIALIZER.method),Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_ADDER.method),Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_RESULT_SELECTOR.method,resultSelector_)).appendIfNotNull(keyPhysType.comparer()))))@@@72@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "list.add(inputPhysType.generateSelector(parameter,groupSet.asList(),set.asList(),keyPhysType.getFormat()))@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "groupSets@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "final ParameterExpression lambdaFactory = Expressions.parameter(,builder.newName(\"lambdaFactory\"))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "final List<Type> aggStateTypes = createAggStateTypes(initExpressions,initBlock,aggs,typeFactory)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "!Aggregate.isSimple(this)@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final PhysType keyPhysType = inputPhysType.project(groupSet.asList(),getGroupType() != Group.SIMPLE,JavaRowFormat.LIST)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final Result result = implementor.visitChild(this,0,child,pref)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final Expression ref = keyPhysType.fieldReference(key_,j)@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "results.add(ref)@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "EnumerableRelImplementor implementor@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "final Expression accumulatorInitializer = builder.append(\"accumulatorInitializer\",Expressions.lambda(,initBlock.toBlock()))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "throw Util.needToImplement(\"EnumerableSortedAggregate\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "getGroupType() != Group.SIMPLE@@@53@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "key_ = Expressions.parameter(keyType,\"key\")@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "builder.add(Expressions.return_(null,Expressions.call(BuiltInMethod.SINGLETON_ENUMERABLE.method,Expressions.call(childExp,BuiltInMethod.AGGREGATE.method,Expressions.call(Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_INITIALIZER.method),BuiltInMethod.FUNCTION0_APPLY.method),Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_ADDER.method),Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_SINGLE_GROUP_RESULT_SELECTOR.method,resultSelector)))))@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "implementLambdaFactory(builder,inputPhysType,aggs,accumulatorInitializer,hasOrderedCall(aggs),lambdaFactory)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "int j = 0@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "j++@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final List<Expression> results = Expressions.list()@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final PhysType accPhysType = PhysTypeImpl.of(typeFactory,typeFactory.createSyntheticType(aggStateTypes))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final ParameterExpression acc_ = Expressions.parameter(accPhysType.getJavaRowType(),\"acc\")@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final JavaTypeFactory typeFactory = implementor.getTypeFactory()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final Expression keySelector_ = builder.append(\"keySelector\",inputPhysType.generateSelector(parameter,groupSet.asList(),keyPhysType.getFormat()))@@@70@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "getGroupType() == Group.SIMPLE@@@41@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "ParameterExpression parameter = Expressions.parameter(inputPhysType.getJavaRowType(),\"a0\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "final Expression resultSelector = builder.append(\"resultSelector\",Expressions.lambda(,resultBlock.toBlock(),key_,acc_))@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "builder.add(Expressions.return_(null,Expressions.call(childExp,BuiltInMethod.SORTED_GROUP_BY.method,Expressions.list(keySelector_,Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_INITIALIZER.method),Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_ADDER.method),Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_RESULT_SELECTOR.method,resultSelector_),comparator))))@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "declareParentAccumulator(initExpressions,initBlock,accPhysType)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "aggCalls.isEmpty() && groupSet.equals(ImmutableBitSet.range(child.getRowType().getFieldCount()))@@@66@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "ImmutableBitSet set@@@55@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final PhysType inputPhysType = result.physType@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "Prefer pref@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final Expression comparator = keyPhysType.generateComparator(getTraitSet().getCollation())@@@47@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "final ParameterExpression key_@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "results.add(agg.implementor.implementResult(requireNonNull(agg.context,null),new AggResultContextImpl(resultBlock,agg.call,requireNonNull(agg.state,null),key_,keyPhysType)))@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "return implementor.result(physType,builder.toBlock())@@@50@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final EnumerableRel child = (EnumerableRel)getInput()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "builder.add(Expressions.return_(null,Expressions.call(inputPhysType.convertTo(childExp,physType.getFormat()),BuiltInMethod.DISTINCT.method,Expressions.list().appendIfNotNull(physType.comparer()))))@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "final Expression keySelectors_ = builder.append(\"keySelectors\",Expressions.call(BuiltInMethod.ARRAYS_AS_LIST.method,list))@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "implementLambdaFactory(builder,inputPhysType,aggs,accumulatorInitializer,false,lambdaFactory)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "return implementor.result(physType,builder.toBlock())@@@74@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "final List<Expression> list = new ArrayList<>()@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Expression childExp = builder.append(\"child\",result.block)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "createAccumulatorAdders(inParameter,aggs,accPhysType,acc_,inputPhysType,builder,implementor,typeFactory)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "resultBlock.add(physType.record(results))@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final ParameterExpression inParameter = Expressions.parameter(inputPhysType.getJavaRowType(),\"in\")@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "builder.add(Expressions.return_(null,Expressions.call(BuiltInMethod.GROUP_BY_MULTIPLE.method,Expressions.list(childExp,keySelectors_,Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_INITIALIZER.method),Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_ADDER.method),Expressions.call(lambdaFactory,BuiltInMethod.AGG_LAMBDA_FACTORY_ACC_RESULT_SELECTOR.method,resultSelector)).appendIfNotNull(keyPhysType.comparer()))))@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "final Expression comparator = keyPhysType.generateComparator(requireNonNull(getTraitSet().getCollation(),null))@@@47@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "final PhysType physType = PhysTypeImpl.of(typeFactory,getRowType(),pref.preferCustom())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final List<Expression> initExpressions = new ArrayList<>()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final int groupCount = getGroupCount()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final List<AggImpState> aggs = new ArrayList<>(aggCalls.size())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "final Type keyType = keyPhysType.getJavaRowType()@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "results.add(Expressions.condition(keyPhysType.fieldReference(key_,groupCount + j),Expressions.constant(null),Expressions.box(ref)))@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "results.add(agg.implementor.implementResult(agg.context,new AggResultContextImpl(resultBlock,agg.call,agg.state,key_,keyPhysType)))@@@50@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "j < groupCount@@@38@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "groupCount == 0@@@62@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final BlockBuilder initBlock = new BlockBuilder()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final BlockBuilder builder = new BlockBuilder()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "implement['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final BlockBuilder resultBlock = new BlockBuilder()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final Expression resultSelector_ = builder.append(\"resultSelector\",Expressions.lambda(,resultBlock.toBlock(),key_,acc_))@@@71@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "key_ = null@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "implement['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Prefer pref@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "implement['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18->3 [style = bold, label=""];
11->12 [style = solid, label="initExpressions"];
42->41 [style = bold, label=""];
35->48 [style = bold, label=""];
31->4 [style = solid, label="results"];
65->43 [style = dotted, label="true"];
37->38 [style = solid, label="lambdaFactory"];
70->20 [style = bold, label=""];
9->3 [style = solid, label="childExp"];
57->52 [style = dotted, label="true"];
6->39 [style = dotted, label="true"];
5->3 [style = solid, label="comparator"];
27->60 [style = solid, label="parameter"];
30->36 [style = bold, label=""];
67->60 [style = bold, label=""];
21->22 [style = solid, label="groupCount"];
21->24 [style = bold, label=""];
61->59 [style = bold, label=""];
9->7 [style = bold, label=""];
19->46 [style = solid, label="keyPhysType"];
62->18 [style = dotted, label="false"];
57->66 [style = dotted, label="true"];
24->40 [style = solid, label="aggs"];
41->18 [style = solid, label="key_"];
41->28 [style = bold, label=""];
49->55 [style = bold, label=""];
13->46 [style = dashed, label="0"];
63->58 [style = solid, label="resultSelector"];
26->34 [style = solid, label="typeFactory"];
15->12 [style = solid, label="initBlock"];
25->63 [style = solid, label="acc_"];
65->51 [style = bold, label=""];
37->3 [style = solid, label="lambdaFactory"];
62->49 [style = dotted, label="false"];
18->49 [style = bold, label=""];
57->67 [style = bold, label=""];
45->6 [style = bold, label=""];
62->64 [style = dotted, label="true"];
68->41 [style = dotted, label="false"];
33->25 [style = bold, label=""];
37->38 [style = bold, label=""];
25->17 [style = solid, label="acc_"];
56->58 [style = dotted, label="true"];
43->29 [style = bold, label=""];
27->19 [style = bold, label=""];
7->0 [style = solid, label="physType"];
19->13 [style = solid, label="keyPhysType"];
48->18 [style = bold, label=""];
21->51 [style = solid, label="groupCount"];
35->3 [style = solid, label="keySelector_"];
16->9 [style = bold, label=""];
54->16 [style = solid, label="pref"];
45->32 [style = dotted, label="true"];
22->13 [style = bold, label=""];
30->70 [style = solid, label="builder"];
7->14 [style = solid, label="physType"];
41->51 [style = solid, label="key_"];
10->11 [style = bold, label=""];
24->10 [style = bold, label=""];
22->29 [style = dotted, label="true"];
9->49 [style = solid, label="childExp"];
22->46 [style = bold, label=""];
35->18 [style = bold, label=""];
11->40 [style = solid, label="initExpressions"];
34->12 [style = solid, label="accPhysType"];
22->23 [style = dotted, label="true"];
23->65 [style = bold, label=""];
28->29 [style = solid, label="j"];
18->3 [style = solid, label="resultSelector_"];
41->61 [style = solid, label="key_"];
56->62 [style = bold, label=""];
22->43 [style = dotted, label="true"];
41->13 [style = solid, label="key_"];
53->18 [style = solid, label="key_"];
7->0 [style = bold, label=""];
20->31 [style = bold, label=""];
40->34 [style = bold, label=""];
17->37 [style = bold, label=""];
57->67 [style = dotted, label="true"];
22->23 [style = bold, label=""];
39->26 [style = bold, label=""];
34->17 [style = solid, label="accPhysType"];
1->32 [style = dotted, label="true"];
35->5 [style = bold, label=""];
26->40 [style = solid, label="typeFactory"];
42->41 [style = solid, label="keyType"];
46->4 [style = bold, label=""];
21->56 [style = solid, label="groupCount"];
16->55 [style = solid, label="result"];
44->68 [style = bold, label=""];
36->16 [style = bold, label=""];
59->55 [style = bold, label=""];
57->56 [style = dotted, label="false"];
30->38 [style = solid, label="builder"];
23->43 [style = solid, label="ref"];
47->17 [style = solid, label="implementor"];
25->61 [style = solid, label="acc_"];
6->39 [style = bold, label=""];
41->46 [style = solid, label="key_"];
27->25 [style = solid, label="parameter"];
57->60 [style = dotted, label="true"];
57->69 [style = dotted, label="true"];
16->14 [style = solid, label="result"];
32->17 [style = solid, label="implementor"];
8->33 [style = bold, label=""];
44->42 [style = bold, label=""];
38->20 [style = bold, label=""];
6->26 [style = bold, label=""];
27->33 [style = solid, label="parameter"];
9->64 [style = solid, label="childExp"];
56->62 [style = dotted, label="false"];
4->57 [style = bold, label=""];
28->22 [style = solid, label="j"];
50->54 [style = dotted, label="true"];
64->55 [style = bold, label=""];
23->43 [style = bold, label=""];
25->18 [style = solid, label="acc_"];
37->70 [style = solid, label="lambdaFactory"];
5->18 [style = bold, label=""];
38->70 [style = dashed, label="0"];
62->35 [style = bold, label=""];
68->53 [style = bold, label=""];
23->51 [style = solid, label="ref"];
25->17 [style = bold, label=""];
62->35 [style = dotted, label="false"];
28->23 [style = solid, label="j"];
68->53 [style = dotted, label="true"];
53->61 [style = solid, label="key_"];
51->29 [style = bold, label=""];
57->61 [style = dotted, label="true"];
1->6 [style = bold, label=""];
48->3 [style = solid, label="comparator"];
8->70 [style = solid, label="accumulatorInitializer"];
65->51 [style = dotted, label="false"];
20->46 [style = solid, label="resultBlock"];
31->44 [style = bold, label=""];
12->8 [style = bold, label=""];
37->70 [style = bold, label=""];
0->38 [style = solid, label="inputPhysType"];
29->23 [style = solid, label="j"];
15->40 [style = bold, label=""];
68->42 [style = dotted, label="false"];
56->63 [style = bold, label=""];
60->69 [style = bold, label=""];
37->58 [style = solid, label="lambdaFactory"];
45->47 [style = dotted, label="true"];
28->22 [style = bold, label=""];
53->13 [style = bold, label=""];
27->41 [style = solid, label="parameter"];
19->21 [style = bold, label=""];
50->26 [style = bold, label=""];
26->17 [style = solid, label="typeFactory"];
27->35 [style = solid, label="parameter"];
4->35 [style = bold, label=""];
28->51 [style = solid, label="j"];
22->65 [style = dotted, label="true"];
15->40 [style = solid, label="initBlock"];
29->51 [style = solid, label="j"];
0->27 [style = bold, label=""];
21->68 [style = solid, label="groupCount"];
30->17 [style = solid, label="builder"];
65->43 [style = bold, label=""];
33->17 [style = solid, label="inParameter"];
26->7 [style = solid, label="typeFactory"];
3->14 [style = bold, label=""];
20->13 [style = solid, label="resultBlock"];
0->17 [style = solid, label="inputPhysType"];
57->59 [style = dotted, label="true"];
67->69 [style = solid, label="list"];
32->16 [style = solid, label="pref"];
40->34 [style = solid, label="aggStateTypes"];
9->58 [style = solid, label="childExp"];
7->55 [style = solid, label="physType"];
58->55 [style = bold, label=""];
0->70 [style = solid, label="inputPhysType"];
34->12 [style = bold, label=""];
62->64 [style = bold, label=""];
24->38 [style = solid, label="aggs"];
11->15 [style = bold, label=""];
69->61 [style = bold, label=""];
24->70 [style = solid, label="aggs"];
26->30 [style = bold, label=""];
63->58 [style = bold, label=""];
24->17 [style = solid, label="aggs"];
57->56 [style = bold, label=""];
27->37 [style = solid, label="parameter"];
68->42 [style = bold, label=""];
36->16 [style = solid, label="child"];
5->48 [style = dashed, label="0"];
3->49 [style = dashed, label="0"];
68->28 [style = dotted, label="false"];
50->32 [style = dotted, label="true"];
53->13 [style = solid, label="key_"];
2->16 [style = solid, label="pref"];
68->22 [style = dotted, label="false"];
56->63 [style = dotted, label="true"];
29->22 [style = bold, label=""];
8->38 [style = solid, label="accumulatorInitializer"];
1->2 [style = dotted, label="true"];
29->22 [style = solid, label="j"];
41->23 [style = solid, label="key_"];
13->4 [style = bold, label=""];
}
