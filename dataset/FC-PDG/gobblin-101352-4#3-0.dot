digraph {
10 [style = filled, label = "schemaWithEnumIsNullable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "String testName = \"schemaWithArrayIsNullable\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ArrayConverter converter = new ArrayConverter(new JsonSchema(schema),state)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "EnumConverter converter = new EnumConverter(new JsonSchema(schema),\"something\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "JsonObject schema = getSchemaData(testName).getAsJsonObject()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "schemaWithArrayIsNullable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "JsonArray expected = getExpectedSchema(testName).getAsJsonArray()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(avroSchemaToJsonElement(converter),expected)@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "String testName = \"schemaWithEnumIsNullable\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "schemaWithArrayIsNullable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ArrayConverter converter = new ArrayConverter(new JsonSchema(schema),state,null)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->3 [style = bold, label=""];
3->8 [style = solid, label="schema"];
2->6 [style = bold, label=""];
2->5 [style = solid, label="expected"];
7->0 [style = bold, label=""];
4->5 [style = solid, label="converter"];
1->0 [style = bold, label=""];
3->4 [style = solid, label="schema"];
4->6 [style = dashed, label="0"];
2->4 [style = bold, label=""];
6->5 [style = bold, label=""];
3->2 [style = bold, label=""];
8->5 [style = bold, label=""];
4->8 [style = dashed, label="0"];
6->5 [style = solid, label="converter"];
9->3 [style = bold, label=""];
8->5 [style = solid, label="converter"];
3->6 [style = solid, label="schema"];
10->9 [style = bold, label=""];
0->9 [style = dashed, label="0"];
4->5 [style = bold, label=""];
2->8 [style = bold, label=""];
}
