digraph {
12 [style = filled, label = "assertTrue(true == message.getFieldBool().getValue())@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "builder.setFieldFloat(FloatValue.of(2.333f))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(message.getFieldInt32().getValue()).isEqualTo(2333)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertThat(message.getFieldString().getValue().equals(\"23333\")).isTrue()@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertTrue(2.333f == message.getFieldFloat().getValue())@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(2333 == message.getFieldUint32().getValue())@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(23333333333333L == message.getFieldInt64().getValue())@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTrue(message.getFieldBytes().getValue().toStringUtf8().equals(\"233\"))@@@22@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "builder.setFieldUint32(UInt32Value.of(2333))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(true).isSameInstanceAs(message.getFieldBool().getValue())@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "builder.setFieldBytes(BytesValue.of(ByteString.wrap(\"233\".getBytes(Internal.UTF_8))))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "builder.setFieldBool(BoolValue.of(true))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(message.getFieldDouble().getValue()).isEqualTo(2.333)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertThat(message.getFieldInt64().getValue()).isEqualTo(23333333333333L)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "builder.setFieldInt64(Int64Value.of(23333333333333L))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertTrue(message.getFieldString().getValue().equals(\"23333\"))@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TopLevelMessage.Builder builder = TopLevelMessage.newBuilder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(message.getFieldUint32().getValue()).isEqualTo(2333)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertTrue(2333 == message.getFieldInt32().getValue())@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(message.getFieldBytes().getValue().toStringUtf8().equals(\"233\")).isTrue()@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "testOf['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertTrue(2.333 == message.getFieldDouble().getValue())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(message.getFieldFloat().getValue()).isEqualTo(2.333F)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testOf['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(23333333333333L == message.getFieldUint64().getValue())@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "builder.setFieldInt32(Int32Value.of(2333))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TopLevelMessage message = builder.build()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "builder.setFieldUint64(UInt64Value.of(23333333333333L))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "builder.setFieldDouble(DoubleValue.of(2.333))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testOf['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertThat(message.getFieldUint64().getValue()).isEqualTo(23333333333333L)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "builder.setFieldString(StringValue.of(\"23333\"))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24->28 [style = bold, label=""];
8->10 [style = bold, label=""];
2->20 [style = bold, label=""];
1->8 [style = bold, label=""];
7->17 [style = bold, label=""];
16->11 [style = bold, label=""];
17->1 [style = bold, label=""];
0->26 [style = bold, label=""];
23->30 [style = bold, label=""];
26->25 [style = bold, label=""];
20->0 [style = bold, label=""];
9->28 [style = dashed, label="0"];
10->3 [style = bold, label=""];
14->19 [style = bold, label=""];
11->23 [style = dashed, label="0"];
11->12 [style = bold, label=""];
3->15 [style = bold, label=""];
4->2 [style = bold, label=""];
12->30 [style = dashed, label="0"];
19->6 [style = bold, label=""];
22->23 [style = bold, label=""];
30->29 [style = bold, label=""];
9->16 [style = bold, label=""];
29->21 [style = bold, label=""];
31->7 [style = bold, label=""];
14->26 [style = dashed, label="0"];
25->24 [style = bold, label=""];
0->14 [style = bold, label=""];
13->7 [style = bold, label=""];
6->24 [style = dashed, label="0"];
18->5 [style = bold, label=""];
27->7 [style = bold, label=""];
12->18 [style = bold, label=""];
15->4 [style = bold, label=""];
5->21 [style = dashed, label="0"];
19->25 [style = dashed, label="0"];
6->9 [style = bold, label=""];
28->22 [style = bold, label=""];
16->22 [style = dashed, label="0"];
18->29 [style = dashed, label="0"];
}
