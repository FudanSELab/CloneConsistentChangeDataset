digraph {
5 [style = filled, label = "HadoopTables tables = new HadoopTables(spark.sessionState().newHadoopConf())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "long count = spark.read().format(\"iceberg\").load(location.toString()).count()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Table table = tables.create(tableSchema,SparkSchemaUtil.specForTable(spark,QUALIFIED_TABLE_NAME),ImmutableMap.of(),location.getCanonicalPath())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Table table = tables.create(SparkSchemaUtil.schemaForTable(spark,qualifiedTableName),SparkSchemaUtil.specForTable(spark,qualifiedTableName),ImmutableMap.of(),location.getCanonicalPath())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Schema tableSchema = SparkSchemaUtil.schemaForTable(spark,QUALIFIED_TABLE_NAME)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "spark.table(qualifiedTableName).write().mode(\"overwrite\").partitionBy(\"data\").format(\"parquet\").saveAsTable(\"test_partitioned_table\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "testImportPartitionedTable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "spark.table(QUALIFIED_TABLE_NAME).write().mode(\"overwrite\").partitionBy(\"data\").format(format.toString()).saveAsTable(\"test_partitioned_table\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "TableIdentifier source = spark.sessionState().sqlParser().parseTableIdentifier(\"test_unpartitioned_table\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TableIdentifier source = spark.sessionState().sqlParser().parseTableIdentifier(\"test_partitioned_table\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "SparkTableUtil.importSparkTable(spark,source,table,stagingDir.toString())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "spark.table(qualifiedTableName).write().mode(\"overwrite\").format(\"parquet\").saveAsTable(\"test_unpartitioned_table\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testImportUnpartitionedTable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "File location = temp.newFolder(\"unpartitioned_table\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(\"three values \",3,count)@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "File stagingDir = temp.newFolder(\"staging-dir\")@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testImportPartitionedTable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "File location = temp.newFolder(\"partitioned_table\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(\"three values \",3,count)@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
0->3 [style = bold, label=""];
14->3 [style = bold, label=""];
4->18 [style = dashed, label="0"];
17->5 [style = bold, label=""];
16->18 [style = bold, label=""];
12->14 [style = solid, label="tableSchema"];
1->15 [style = dashed, label="0"];
2->3 [style = solid, label="source"];
4->13 [style = bold, label=""];
11->4 [style = bold, label=""];
18->15 [style = bold, label=""];
6->0 [style = bold, label=""];
9->10 [style = bold, label=""];
2->17 [style = dashed, label="0"];
9->10 [style = solid, label="count"];
14->7 [style = solid, label="table"];
1->13 [style = dashed, label="0"];
7->9 [style = bold, label=""];
7->9 [style = solid, label="count"];
15->17 [style = bold, label=""];
6->3 [style = solid, label="table"];
5->6 [style = bold, label=""];
3->7 [style = bold, label=""];
5->12 [style = bold, label=""];
12->14 [style = bold, label=""];
1->2 [style = bold, label=""];
4->1 [style = bold, label=""];
8->4 [style = bold, label=""];
2->7 [style = solid, label="source"];
17->3 [style = solid, label="source"];
2->5 [style = bold, label=""];
13->2 [style = bold, label=""];
}
