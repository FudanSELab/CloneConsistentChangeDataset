digraph {
9 [style = filled, label = "return visit(ctx.expr(0))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "return new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(),ctx.stop.getStopIndex()))@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "visitExpr['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "visitExpr['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "null != ctx.orOperator()@@@12@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "return visit(ctx.booleanPrimary())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "null != ctx.andOperator()@@@9@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "final ExprContext ctx@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "null != ctx.logicalOperator()@@@9@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "String operator = ctx.logicalOperator().getText()@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "return new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@16@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "return new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "ExpressionSegment left = (ExpressionSegment)visit(ctx.expr(0))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "return createBinaryOperationExpression(ctx,ctx.andOperator().getText())@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "visitExpr['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "null != ctx.booleanPrimary()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ExpressionSegment right = (ExpressionSegment)visit(ctx.expr(1))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "null != ctx.LP_()@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "return createBinaryOperationExpression(ctx,ctx.orOperator().getText())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19->10 [style = dotted, label="true"];
2->17 [style = bold, label=""];
14->16 [style = bold, label=""];
7->11 [style = solid, label="text"];
16->13 [style = bold, label=""];
7->11 [style = bold, label=""];
17->18 [style = dotted, label="true"];
19->12 [style = bold, label=""];
5->10 [style = dotted, label="true"];
10->18 [style = solid, label="ctx"];
8->3 [style = bold, label=""];
4->11 [style = solid, label="left"];
8->7 [style = dotted, label="true"];
9->17 [style = bold, label=""];
15->10 [style = dotted, label="true"];
2->9 [style = bold, label=""];
9->8 [style = bold, label=""];
12->6 [style = bold, label=""];
1->7 [style = bold, label=""];
8->4 [style = dotted, label="true"];
4->0 [style = bold, label=""];
10->16 [style = solid, label="ctx"];
6->2 [style = bold, label=""];
14->16 [style = dotted, label="true"];
8->1 [style = dotted, label="true"];
12->2 [style = bold, label=""];
2->9 [style = dotted, label="true"];
5->12 [style = bold, label=""];
12->6 [style = dotted, label="true"];
11->3 [style = bold, label=""];
17->14 [style = bold, label=""];
0->1 [style = bold, label=""];
0->11 [style = solid, label="right"];
1->11 [style = solid, label="operator"];
8->11 [style = dotted, label="true"];
8->17 [style = dashed, label="0"];
8->0 [style = dotted, label="true"];
15->12 [style = bold, label=""];
8->4 [style = bold, label=""];
14->13 [style = bold, label=""];
18->14 [style = bold, label=""];
17->18 [style = bold, label=""];
2->8 [style = bold, label=""];
}
