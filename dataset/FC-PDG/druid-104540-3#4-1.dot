digraph {
17 [style = filled, label = "Assert.assertEquals(getDefaultCompactionState(Granularities.HOUR,Granularities.MINUTE,ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1))),segments.get(i).getLastCompactionState())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "segments = resultPair.rhs@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "i++@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "i++@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(3,segments.size())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final Builder builder = new Builder(DATA_SOURCE,segmentLoaderFactory,RETRY_POLICY_FACTORY)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "lockGranularity == LockGranularity.SEGMENT@@@32@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertTrue(resultPair.lhs.isSuccess())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "i < 3@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1),segments.get(i).getInterval())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testRunCompactionTwice['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "testWithGranularitySpecNullQueryGranularityAndNullSegmentGranularity['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "final Builder builder = new Builder(DATA_SOURCE,segmentCacheManagerFactory,RETRY_POLICY_FACTORY)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "final CompactionTask compactionTask1 = builder.interval(Intervals.of(\"2014-01-01/2014-01-02\")).build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Pair<TaskStatus,List<DataSegment>> resultPair = runTask(compactionTask1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID,0,2,(short)1,(short)1),segments.get(i).getShardSpec())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(3,segments.size())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int i = 0@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(resultPair.lhs.isSuccess())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1),segments.get(i).getInterval())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testRunCompactionTwice['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 1,0,2,(short)2,(short)1),segments.get(i).getShardSpec())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final CompactionTask compactionTask1 = builder.interval(Intervals.of(\"2014-01-01/2014-01-02\")).granularitySpec(new ClientCompactionTaskGranularitySpec(null,null)).build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "i < 3@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "resultPair = runTask(compactionTask2)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(getDefaultCompactionState(Granularities.HOUR,Granularities.MINUTE,ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1))),segments.get(i).getLastCompactionState())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "lockGranularity == LockGranularity.SEGMENT@@@15@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(new NumberedOverwriteShardSpec(32768,0,2,(short)1,(short)1),segments.get(i).getShardSpec())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(new NumberedShardSpec(0,1),segments.get(i).getShardSpec())@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(new NumberedShardSpec(0,1),segments.get(i).getShardSpec())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "List<DataSegment> segments = resultPair.rhs@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "runIndexTask()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "int i = 0@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final CompactionTask compactionTask2 = builder.interval(Intervals.of(\"2014-01-01/2014-01-02\")).build()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->9 [style = bold, label=""];
17->25 [style = bold, label=""];
8->10 [style = bold, label=""];
13->16 [style = solid, label="compactionTask1"];
4->9 [style = solid, label="i"];
4->12 [style = solid, label="i"];
12->9 [style = solid, label="i"];
16->18 [style = bold, label=""];
9->12 [style = dotted, label="true"];
28->15 [style = bold, label=""];
1->8 [style = bold, label=""];
7->17 [style = bold, label=""];
30->13 [style = bold, label=""];
9->26 [style = dotted, label="true"];
25->22 [style = bold, label=""];
12->19 [style = solid, label="i"];
14->7 [style = solid, label="i"];
31->16 [style = bold, label=""];
14->17 [style = solid, label="i"];
28->33 [style = dotted, label="true"];
3->14 [style = bold, label=""];
25->3 [style = bold, label=""];
28->15 [style = dotted, label="true"];
12->26 [style = solid, label="i"];
21->24 [style = solid, label="compactionTask2"];
5->14 [style = solid, label="i"];
5->7 [style = solid, label="i"];
21->24 [style = bold, label=""];
20->6 [style = bold, label=""];
33->12 [style = bold, label=""];
26->19 [style = bold, label=""];
12->9 [style = bold, label=""];
0->25 [style = dotted, label="true"];
32->2 [style = bold, label=""];
13->16 [style = bold, label=""];
0->7 [style = bold, label=""];
5->17 [style = solid, label="i"];
9->26 [style = bold, label=""];
11->31 [style = bold, label=""];
6->4 [style = bold, label=""];
18->20 [style = bold, label=""];
29->2 [style = bold, label=""];
9->19 [style = dotted, label="true"];
10->5 [style = bold, label=""];
28->33 [style = bold, label=""];
14->0 [style = bold, label=""];
5->0 [style = bold, label=""];
31->16 [style = solid, label="compactionTask1"];
13->31 [style = dashed, label="0"];
28->23 [style = bold, label=""];
4->19 [style = solid, label="i"];
11->13 [style = bold, label=""];
15->33 [style = dashed, label="0"];
9->21 [style = bold, label=""];
25->22 [style = dotted, label="true"];
5->0 [style = solid, label="i"];
14->0 [style = solid, label="i"];
0->17 [style = dotted, label="true"];
0->14 [style = dotted, label="true"];
23->12 [style = bold, label=""];
15->12 [style = bold, label=""];
25->3 [style = dotted, label="false"];
4->26 [style = solid, label="i"];
19->28 [style = bold, label=""];
24->1 [style = bold, label=""];
28->23 [style = dotted, label="false"];
0->7 [style = dotted, label="true"];
22->14 [style = bold, label=""];
2->30 [style = bold, label=""];
11->30 [style = dashed, label="0"];
2->11 [style = bold, label=""];
27->2 [style = bold, label=""];
9->28 [style = dotted, label="true"];
}
