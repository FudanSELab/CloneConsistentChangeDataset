digraph {
43 [style = filled, label = "configOptions.put(\"DC1\",\"1\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"),new StringToken(\"A\"))))@@@26@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"),new StringToken(\"A\"))))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Keyspace.clear(\"Keyspace1\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assertions.assertThat(primaryRanges.size()).as(primaryRanges.toString()).isEqualTo(2)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "configOptions.put(ReplicationParams.CLASS,\"NetworkTopologyStrategy\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddressAndPort.getByName(\"127.0.0.4\"))@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "configOptions.put(\"DC2\",\"2\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"C\"),new StringToken(\"D\")))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "Assertions.assertThat(primaryRanges).isEmpty()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "metadata.clearUnsafe()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddressAndPort.getByName(\"127.0.0.2\"))@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "metadata.updateNormalToken(new StringToken(\"D\"),InetAddressAndPort.getByName(\"127.0.0.5\"))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "metadata.updateNormalToken(new StringToken(\"C\"),InetAddressAndPort.getByName(\"127.0.0.2\"))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddressAndPort.getByName(\"127.0.0.1\"))@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assertions.assertThat(primaryRanges.size()).as(primaryRanges.toString()).isEqualTo(2)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertTrue(primaryRanges.isEmpty())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "assertEquals(2,primaryRanges.size())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"),new StringToken(\"C\"))))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"),new StringToken(\"B\"))))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"),new StringToken(\"A\"))))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "assertEquals(2,primaryRanges.size())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddressAndPort.getByName(\"127.0.0.5\"))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertEquals(2,primaryRanges.size())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "metadata.updateNormalToken(new StringToken(\"A\"),InetAddressAndPort.getByName(\"127.0.0.1\"))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"),new StringToken(\"C\"))))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"D\"),new StringToken(\"A\")))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "assertEquals(2,primaryRanges.size())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddressAndPort.getByName(\"127.0.0.5\"))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"B\"),new StringToken(\"C\")))@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"),new StringToken(\"D\"))))@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"),new StringToken(\"B\"))))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"),new StringToken(\"B\"))))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Schema.instance.load(meta)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddressAndPort.getByName(\"127.0.0.4\"))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "configOptions.put(ReplicationParams.CLASS,\"NetworkTopologyStrategy\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"A\"),new StringToken(\"B\")))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddressAndPort.getByName(\"127.0.0.2\"))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Map<String,String> configOptions = new HashMap<>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "configOptions.put(\"DC2\",\"1\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "TokenMetadata metadata = StorageService.instance.getTokenMetadata()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"),new StringToken(\"D\"))))@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assertions.assertThat(primaryRanges).isEmpty()@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"),new StringToken(\"D\"))))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategy['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "KeyspaceMetadata meta = KeyspaceMetadata.create(\"Keyspace1\",KeyspaceParams.create(false,configOptions))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "metadata.updateNormalToken(new StringToken(\"B\"),InetAddressAndPort.getByName(\"127.0.0.4\"))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3->29 [style = dashed, label="0"];
42->41 [style = bold, label=""];
46->38 [style = bold, label=""];
2->19 [style = bold, label=""];
24->27 [style = dashed, label="0"];
13->43 [style = dashed, label="0"];
8->32 [style = bold, label=""];
33->15 [style = bold, label=""];
11->17 [style = solid, label="meta"];
1->43 [style = bold, label=""];
1->11 [style = solid, label="configOptions"];
17->9 [style = bold, label=""];
27->30 [style = bold, label=""];
36->4 [style = bold, label=""];
43->36 [style = bold, label=""];
25->18 [style = bold, label=""];
16->46 [style = bold, label=""];
5->40 [style = dashed, label="0"];
0->21 [style = bold, label=""];
14->33 [style = dashed, label="0"];
23->0 [style = bold, label=""];
1->13 [style = bold, label=""];
3->42 [style = bold, label=""];
19->8 [style = bold, label=""];
48->39 [style = bold, label=""];
15->22 [style = bold, label=""];
15->26 [style = bold, label=""];
20->10 [style = bold, label=""];
7->14 [style = bold, label=""];
34->22 [style = bold, label=""];
5->32 [style = dashed, label="0"];
24->16 [style = bold, label=""];
6->4 [style = bold, label=""];
18->20 [style = bold, label=""];
26->27 [style = bold, label=""];
29->2 [style = bold, label=""];
22->37 [style = dashed, label="0"];
40->16 [style = bold, label=""];
28->33 [style = bold, label=""];
3->2 [style = bold, label=""];
8->5 [style = bold, label=""];
16->30 [style = dashed, label="0"];
38->37 [style = bold, label=""];
7->28 [style = dashed, label="0"];
10->23 [style = bold, label=""];
37->48 [style = bold, label=""];
21->1 [style = bold, label=""];
47->5 [style = bold, label=""];
12->18 [style = bold, label=""];
1->17 [style = solid, label="configOptions"];
35->45 [style = bold, label=""];
9->3 [style = bold, label=""];
11->17 [style = bold, label=""];
5->7 [style = bold, label=""];
14->15 [style = bold, label=""];
17->9 [style = solid, label="meta"];
22->26 [style = dashed, label="0"];
41->47 [style = bold, label=""];
44->18 [style = bold, label=""];
22->24 [style = bold, label=""];
13->6 [style = bold, label=""];
19->35 [style = dashed, label="0"];
4->11 [style = bold, label=""];
9->29 [style = bold, label=""];
32->28 [style = bold, label=""];
31->8 [style = bold, label=""];
5->35 [style = bold, label=""];
45->34 [style = bold, label=""];
3->42 [style = dashed, label="0"];
22->40 [style = bold, label=""];
2->31 [style = bold, label=""];
19->31 [style = dashed, label="0"];
}
