digraph {
18 [style = filled, label = "final long(( hash = null@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final List<MockProcessorContext.CapturedForward> forwarded = context.forwarded()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "shouldForwardWhenHashMatches['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "shouldEmitTombstoneForLeftJoinWhenRightIsNullAndLeftIsNull['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final Processor<String,SubscriptionResponseWrapper<String>> processor = processorSupplier.get()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "shouldForwardWhenHashMatches['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertThat(forwarded.get(0).keyValue(),is(new KeyValue<>(\"lhs1\",\"(lhsValue,rhsValue)\")))@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final boolean leftJoin = true@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "processor.process(\"lhs1\",new SubscriptionResponseWrapper<>(hash,null))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "valueGetterSupplier.put(\"lhs1\",\"lhsValue\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final SubscriptionResolverJoinProcessorSupplier<String,String,String,String> processorSupplier = new SubscriptionResolverJoinProcessorSupplier<>(valueGetterSupplier,STRING_SERIALIZER,\"value-hash-dummy-topic\",JOINER,leftJoin)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "final SubscriptionResolverJoinProcessorSupplier<String,String,String,String> processorSupplier = new SubscriptionResolverJoinProcessorSupplier<>(valueGetterSupplier,STRING_SERIALIZER,JOINER,leftJoin)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "context.setRecordMetadata(\"topic\",0,0,new RecordHeaders(),0)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(forwarded.size(),is(1))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "processor.process(\"lhs1\",new SubscriptionResponseWrapper<>(hash,\"rhsValue\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final TestKTableValueGetterSupplier<String,String> valueGetterSupplier = new TestKTableValueGetterSupplier<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final long(( hash = Murmur3.hash128(STRING_SERIALIZER.serialize(\"topic-join-resolver\",\"lhsValue\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "valueGetterSupplier.put(\"lhs1\",null)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(forwarded.get(0).keyValue(),is(new KeyValue<>(\"lhs1\",null)))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "processor.init(context)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final MockProcessorContext context = new MockProcessorContext()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final boolean leftJoin = false@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->8 [style = bold, label=""];
16->0 [style = bold, label=""];
15->13 [style = bold, label=""];
19->18 [style = bold, label=""];
10->21 [style = dashed, label="0"];
2->19 [style = dashed, label="0"];
10->15 [style = bold, label=""];
9->0 [style = bold, label=""];
9->16 [style = dashed, label="0"];
17->6 [style = bold, label=""];
11->15 [style = dashed, label="0"];
8->19 [style = bold, label=""];
6->21 [style = bold, label=""];
10->11 [style = solid, label="leftJoin"];
7->20 [style = bold, label=""];
12->9 [style = bold, label=""];
7->3 [style = bold, label=""];
2->12 [style = bold, label=""];
12->9 [style = solid, label="hash"];
0->7 [style = bold, label=""];
18->16 [style = solid, label="hash"];
1->6 [style = bold, label=""];
6->11 [style = solid, label="valueGetterSupplier"];
8->2 [style = bold, label=""];
21->11 [style = bold, label=""];
6->10 [style = bold, label=""];
11->13 [style = bold, label=""];
21->11 [style = solid, label="leftJoin"];
3->20 [style = dashed, label="0"];
4->5 [style = solid, label="context"];
12->18 [style = dashed, label="0"];
6->15 [style = solid, label="valueGetterSupplier"];
4->5 [style = bold, label=""];
14->6 [style = bold, label=""];
13->4 [style = bold, label=""];
10->15 [style = solid, label="leftJoin"];
10->11 [style = bold, label=""];
18->16 [style = bold, label=""];
}
