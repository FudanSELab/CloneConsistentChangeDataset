digraph {
16 [style = filled, label = "assertEquals(\"cnt_key2_test should =4\",4L,values.get(\"cnt_key2_test\"))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "Assert.assertEquals(\"sum_key1_test should =999*500\",999 * 500L,values.get(\"sum_key1_test\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Assert.assertEquals(\"p99_key1_test should have p99=990\",990L,values.get(\"p99_key1_test\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertEquals(\"max_key2_test should =5\",1999L,values.get(\"max_key2_test\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(\"There should be 10 values in the set\",10,values.size())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "Assert.assertEquals(\"cnt_key2_test should =4\",1000L,values.get(\"cnt_key2_test\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(\"cnt_key1_test should =1000\",1000L,values.get(\"cnt_key1_test\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertEquals(\"There should be 18 values in the set\",18,values.size())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(\"max_key2_test should =5\",5L,values.get(\"max_key2_test\"))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Map<String,Object> values = testCounterSet.values()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(\"sum_key2_test should =14\",2999 * 500L,values.get(\"sum_key2_test\"))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(\"avg_key1_test should =0.5\",0.5D,values.get(\"avg_key1_test\"))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "testValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(\"max_key1_test should =1\",1L,values.get(\"max_key1_test\"))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(\"p99_key2_test should have p99=1990\",1990L,values.get(\"p99_key2_test\"))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(\"sum_key2_test should =14\",14L,values.get(\"sum_key2_test\"))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "testValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "Assert.assertEquals(\"p95_key2_test should have p95=1950\",1950L,values.get(\"p95_key2_test\"))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Assert.assertEquals(\"min_key2_test should =2\",1000L,values.get(\"min_key2_test\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(\"p95_key1_test should have p95=950\",950L,values.get(\"p95_key1_test\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Assert.assertEquals(\"p999_key2_test should have p999=1999\",1999L,values.get(\"p999_key2_test\"))@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(\"min_key2_test should =2\",2L,values.get(\"min_key2_test\"))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(\"avg_key2_test should =3.5\",1000 + 999D / 2,values.get(\"avg_key2_test\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(\"cnt_key2_test should =4\",4L,values.get(\"cnt_key2_test\"))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(\"sum_key1_test should =1\",1L,values.get(\"sum_key1_test\"))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(\"max_key2_test should =5\",5L,values.get(\"max_key2_test\"))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertEquals(\"cnt_key1_test should =2\",2L,values.get(\"cnt_key1_test\"))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertEquals(\"sum_key2_test should =14\",14L,values.get(\"sum_key2_test\"))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "Assert.assertEquals(\"avg_key1_test should =499.5\",999D / 2,values.get(\"avg_key1_test\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(\"min_key1_test should =0\",0L,values.get(\"min_key1_test\"))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(\"p999_key1_test should have p999=999\",999L,values.get(\"p999_key1_test\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "testValues['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertEquals(\"p50_key1_test should have p50=500\",500L,values.get(\"p50_key1_test\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(\"There should be 10 values in the set\",10,values.size())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(\"max_key1_test should =999\",999L,values.get(\"max_key1_test\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(\"min_key1_test should =0\",0L,values.get(\"min_key1_test\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assert.assertEquals(\"cnt_key1_test should =2\",2L,values.get(\"cnt_key1_test\"))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"max_key1_test should =1\",1L,values.get(\"max_key1_test\"))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "addDataPoints()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(\"avg_key1_test should =0.5\",0.5D,values.get(\"avg_key1_test\"))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "Assert.assertEquals(\"p50_key2_test should have p50=1500\",1500L,values.get(\"p50_key2_test\"))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(\"min_key2_test should =2\",2L,values.get(\"min_key2_test\"))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertEquals(\"sum_key1_test should =1\",1L,values.get(\"sum_key1_test\"))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertEquals(\"avg_key2_test should =3.5\",3.5,values.get(\"avg_key2_test\"))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(\"avg_key2_test should =3.5\",3.5,values.get(\"avg_key2_test\"))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4->10 [style = bold, label=""];
16->15 [style = bold, label=""];
31->37 [style = bold, label=""];
27->36 [style = bold, label=""];
30->41 [style = bold, label=""];
0->13 [style = bold, label=""];
39->44 [style = bold, label=""];
29->30 [style = bold, label=""];
3->21 [style = dashed, label="0"];
4->17 [style = dashed, label="0"];
25->13 [style = bold, label=""];
10->36 [style = dashed, label="0"];
10->19 [style = dashed, label="0"];
1->26 [style = dashed, label="0"];
26->29 [style = bold, label=""];
34->13 [style = bold, label=""];
4->27 [style = dashed, label="0"];
6->31 [style = dashed, label="0"];
9->22 [style = dashed, label="0"];
36->26 [style = bold, label=""];
3->4 [style = bold, label=""];
8->35 [style = bold, label=""];
17->19 [style = bold, label=""];
8->22 [style = bold, label=""];
3->27 [style = bold, label=""];
5->20 [style = dashed, label="0"];
9->35 [style = dashed, label="0"];
23->14 [style = bold, label=""];
35->40 [style = bold, label=""];
11->5 [style = bold, label=""];
18->20 [style = bold, label=""];
37->43 [style = bold, label=""];
6->16 [style = dashed, label="0"];
43->38 [style = bold, label=""];
20->16 [style = bold, label=""];
5->6 [style = bold, label=""];
33->39 [style = bold, label=""];
2->14 [style = dashed, label="0"];
24->21 [style = bold, label=""];
12->40 [style = dashed, label="0"];
40->3 [style = bold, label=""];
11->18 [style = dashed, label="0"];
19->23 [style = bold, label=""];
44->32 [style = bold, label=""];
12->24 [style = dashed, label="0"];
2->29 [style = dashed, label="0"];
8->9 [style = bold, label=""];
7->15 [style = dashed, label="0"];
14->18 [style = bold, label=""];
41->31 [style = bold, label=""];
1->2 [style = bold, label=""];
12->3 [style = bold, label=""];
9->12 [style = bold, label=""];
7->37 [style = dashed, label="0"];
22->24 [style = bold, label=""];
28->42 [style = bold, label=""];
13->8 [style = bold, label=""];
6->7 [style = bold, label=""];
38->33 [style = bold, label=""];
10->1 [style = bold, label=""];
11->30 [style = dashed, label="0"];
32->28 [style = bold, label=""];
21->17 [style = bold, label=""];
1->23 [style = dashed, label="0"];
2->11 [style = bold, label=""];
5->41 [style = dashed, label="0"];
}
