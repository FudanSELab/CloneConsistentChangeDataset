digraph {
18 [style = filled, label = "testDisablePartitionAndStopInstance['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Thread.sleep(1000)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "System.out.println(\"Un-verify resource: \" + resource)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testSleepTransition['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "HelixClusterVerifier strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).build()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "_participants(0( = new MockParticipantManager(ZK_ADDR,_clusterName,_participants(0(.getInstanceName())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "HelixClusterVerifier bestPossibleVerifier = new BestPossibleExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertFalse(strictMatchVerifier.verify(3000))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "_participants(0(.syncStop()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "_participants(0(.setTransition(new SleepTransition(99999999))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(bestPossibleVerifier.verify(10000))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Thread.sleep(1000)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertFalse(strictMatchVerifier.verify(3000))@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(10000))@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).setResources(Sets.newHashSet(resource)).build()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "HelixClusterVerifier strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).setDeactivatedNodeAwareness(true).build()@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "Assert.assertTrue(isVerifiedFalse)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(10000))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "_admin.enablePartition(true,_clusterName,_participants(0(.getInstanceName(),FULL_AUTO_RESOURCES(0(,Lists.newArrayList(FULL_AUTO_RESOURCES(0( + \"_0\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Thread.sleep(1000)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(10000))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).setResources(Sets.newHashSet(FULL_AUTO_RESOURCES)).build()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testSleepTransition['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "_participants(0(.syncStart()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "_admin.enablePartition(false,_clusterName,_participants(0(.getInstanceName(),FULL_AUTO_RESOURCES(0(,Lists.newArrayList(FULL_AUTO_RESOURCES(0( + \"_0\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "boolean isVerifiedFalse = TestHelper.verify(null,TestHelper.WAIT_DURATION)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->4 [style = bold, label=""];
2->13 [style = bold, label=""];
19->15 [style = bold, label=""];
12->1 [style = bold, label=""];
23->16 [style = bold, label=""];
11->1 [style = bold, label=""];
4->8 [style = bold, label=""];
9->0 [style = bold, label=""];
8->6 [style = bold, label=""];
5->10 [style = bold, label=""];
8->21 [style = bold, label=""];
20->19 [style = bold, label=""];
7->3 [style = bold, label=""];
21->25 [style = bold, label=""];
10->7 [style = bold, label=""];
22->14 [style = bold, label=""];
17->24 [style = bold, label=""];
19->17 [style = bold, label=""];
3->9 [style = bold, label=""];
16->6 [style = bold, label=""];
6->5 [style = bold, label=""];
15->20 [style = bold, label=""];
14->23 [style = bold, label=""];
18->1 [style = bold, label=""];
4->13 [style = dashed, label="0"];
13->8 [style = bold, label=""];
25->22 [style = bold, label=""];
25->22 [style = solid, label="isVerifiedFalse"];
1->2 [style = bold, label=""];
5->15 [style = bold, label=""];
}
