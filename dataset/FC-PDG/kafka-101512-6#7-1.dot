digraph {
9 [style = filled, label = "assertThat(results.get(new Windowed<>(\"2\",new TimeWindow(500,1000))),equalTo(1L))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "processData(driver)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertThat(results.get(new Windowed<>(\"1\",new TimeWindow(500,1000))),equalTo(1L))@@@10@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "shouldCountWindowed['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "final Map<Windowed<String>,Long> results = new HashMap<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(results.get(new Windowed<>(\"1\",new TimeWindow(500,1000))),equalTo(1L))@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(results.get(new Windowed<>(\"1\",new SessionWindow(10,15))),equalTo(2L))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "shouldCountSessionWindowed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "shouldCountWindowed['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(results.get(new Windowed<>(\"1\",new TimeWindow(0,500))),equalTo(2L))@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "stream.count().toStream().foreach(new ForeachAction<Windowed<String>,Long>(){@Override public void apply(final Windowed<String> key,final Long value){results.put(key,value)}})@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(results.get(new Windowed<>(\"2\",new TimeWindow(500,1000))),equalTo(1L))@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(results.get(new Windowed<>(\"1\",new TimeWindow(0,500))),equalTo(2L))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "windowedStream.count().toStream().foreach(null)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertThat(results.get(new Windowed<>(\"2\",new SessionWindow(600,600))),equalTo(1L))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "windowedStream.count().toStream().foreach(new ForeachAction<Windowed<String>,Long>(){@Override public void apply(final Windowed<String> key,final Long value){results.put(key,value)}})@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "processData(driver)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(results.get(new Windowed<>(\"1\",new SessionWindow(600,600))),equalTo(1L))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2->17 [style = bold, label=""];
15->2 [style = bold, label=""];
5->14 [style = dashed, label="0"];
3->17 [style = dashed, label="0"];
17->6 [style = bold, label=""];
7->10 [style = bold, label=""];
2->3 [style = bold, label=""];
0->16 [style = dashed, label="0"];
3->6 [style = bold, label=""];
9->8 [style = bold, label=""];
13->16 [style = bold, label=""];
4->0 [style = bold, label=""];
6->14 [style = bold, label=""];
6->5 [style = bold, label=""];
12->2 [style = bold, label=""];
5->4 [style = bold, label=""];
1->2 [style = bold, label=""];
10->9 [style = bold, label=""];
14->13 [style = bold, label=""];
4->13 [style = dashed, label="0"];
2->11 [style = bold, label=""];
11->7 [style = bold, label=""];
3->11 [style = dashed, label="0"];
}
