digraph {
0 [style = filled, label = "state.setProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST,\"org.apache.gobblin.qualitychecker.TestRowLevelPolicyFail\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertTrue(fs.exists(outputPath))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "State state = new State()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testWriteToErrFile['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "state.setProp(ConfigurationKeys.WRITER_FILE_SYSTEM_URI,TestConstants.TEST_FS_URI)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertTrue(checker.executePolicies(datum,results))@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertFalse(checker.executePolicies(datum,results))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "RowLevelPolicyCheckResults results = new RowLevelPolicyCheckResults()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "state.setProp(ROW_LEVEL_ERR_FILE,TestConstants.TEST_ERR_FILE)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "fs.delete(new Path(TestConstants.TEST_ERR_FILE),true)@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "FileReader<GenericRecord> fileReader = openFile(state)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "state.setProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST_TYPE,\"ERR_FILE\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "RowLevelPolicyChecker checker = new RowLevelPolicyCheckerBuilderFactory().newPolicyCheckerBuilder(state,-1).build()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Path outputPath = new Path(TestConstants.TEST_ERR_FILE,state.getProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST).replaceAll(\"\.\",\"-\") + \".err\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "RowLevelPolicyCheckResults results = new RowLevelPolicyCheckResults()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "state.setProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST,\"org.apache.gobblin.qualitychecker.TestRowLevelPolicy\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "state.setProp(ConfigurationKeys.ROW_LEVEL_ERR_FILE,TestConstants.TEST_ERR_FILE)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "testRowLevelPolicy['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "FileSystem fs = FileSystem.get(new URI(TestConstants.TEST_FS_URI),new Configuration())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "state.setProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST_TYPE,\"FAIL\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testWriteToErrFile['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8->10 [style = bold, label=""];
1->8 [style = bold, label=""];
9->0 [style = bold, label=""];
9->11 [style = solid, label="state"];
17->9 [style = bold, label=""];
0->2 [style = bold, label=""];
10->5 [style = solid, label="results"];
9->20 [style = bold, label=""];
16->19 [style = bold, label=""];
0->20 [style = dashed, label="0"];
2->4 [style = bold, label=""];
19->8 [style = bold, label=""];
14->1 [style = bold, label=""];
3->9 [style = bold, label=""];
20->18 [style = bold, label=""];
12->13 [style = bold, label=""];
11->5 [style = bold, label=""];
5->11 [style = dashed, label="0"];
15->9 [style = bold, label=""];
2->14 [style = bold, label=""];
7->6 [style = bold, label=""];
2->18 [style = dashed, label="0"];
5->7 [style = bold, label=""];
19->11 [style = solid, label="results"];
4->14 [style = dashed, label="0"];
4->1 [style = bold, label=""];
9->8 [style = solid, label="state"];
8->11 [style = bold, label=""];
6->12 [style = bold, label=""];
6->12 [style = solid, label="outputPath"];
10->11 [style = bold, label=""];
18->16 [style = bold, label=""];
}
