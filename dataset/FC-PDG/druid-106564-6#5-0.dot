digraph {
7 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(Granularities.ALL).intervals(QueryRunnerTestHelper.fullOnIntervalSpec).aggregators(Arrays.asList(new DoubleMaxAggregatorFactory(\"maxIndex\",\"index\"),new DoubleMinAggregatorFactory(\"minIndex\",\"index\"))).descending(descending).build()@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(result.toString(),1870.061029,value.getDoubleMetric(\"maxIndex\"),1870.061029 * 1e-6)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testFullOnTimeseriesMaxMin['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Assert.assertFalse(StringUtils.format(\"Timestamp(%s( > expectedLast(%s(\",result.getTimestamp(),expectedLast),result.getTimestamp().isAfter(expectedLast))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(result.toString(),59.021022,value.getDoubleMetric(\"minIndex\"),59.021022 * 1e-6)@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "cannotVectorize()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(expectedEarliest,result.getTimestamp())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "DateTime expectedEarliest = DateTimes.of(\"2011-01-12\")@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(Granularities.ALL).intervals(QueryRunnerTestHelper.fullOnIntervalSpec).aggregators(Arrays.asList(new DoubleMaxAggregatorFactory(\"maxIndex\",\"index\"),new DoubleMinAggregatorFactory(\"minIndex\",\"index\"))).descending(descending).context(makeContext()).build()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Result<TimeseriesResultValue> result = results.iterator().next()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testFullOnTimeseriesMaxMin['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(Granularities.ALL).intervals(QueryRunnerTestHelper.fullOnIntervalSpec).aggregators(new DoubleMaxAggregatorFactory(\"maxIndex\",\"index\"),new DoubleMinAggregatorFactory(\"minIndex\",\"index\")).descending(descending).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "DateTime expectedEarliest = DateTimes.of(\"1970-01-01\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(result.toString(),59.021022,value.getDoubleMetric(\"minIndex\"),59.021022 * 1e-6)@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "DateTime expectedLast = DateTimes.of(\"2011-04-15\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testFullOnTimeseriesMaxMin['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final TimeseriesResultValue value = result.getValue()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Iterable<Result<TimeseriesResultValue>> results = runner.run(QueryPlus.wrap(query),CONTEXT).toList()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3->17 [style = dashed, label="0"];
8->1 [style = solid, label="expectedLast"];
9->4 [style = bold, label=""];
3->9 [style = solid, label="expectedEarliest"];
8->0 [style = bold, label=""];
3->2 [style = bold, label=""];
0->9 [style = bold, label=""];
2->4 [style = solid, label="expectedLast"];
11->2 [style = bold, label=""];
4->1 [style = bold, label=""];
2->8 [style = bold, label=""];
12->13 [style = bold, label=""];
7->3 [style = bold, label=""];
10->7 [style = bold, label=""];
13->11 [style = bold, label=""];
6->14 [style = bold, label=""];
2->4 [style = solid, label="expectedEarliest"];
15->16 [style = bold, label=""];
17->9 [style = solid, label="expectedEarliest"];
7->16 [style = dashed, label="0"];
16->17 [style = bold, label=""];
5->6 [style = bold, label=""];
17->2 [style = bold, label=""];
1->5 [style = bold, label=""];
}
