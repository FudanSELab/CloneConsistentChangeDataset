digraph {
6 [style = filled, label = "i++@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "int i = 0@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "EasyMock.expect(getRecordsResult0.getNextShardIterator()).andReturn(null).anyTimes()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(polledRecords.containsAll(ALL_RECORDS))@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Set<StreamPartition<String>> partitions = ImmutableSet.of(StreamPartition.of(stream,SHARD_ID0),StreamPartition.of(stream,SHARD_ID1))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "testSeekToLatest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "recordSupplier.assign(partitions)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(Collections.emptyList(),cleanRecords(recordSupplier.poll(POLL_TIMEOUT_MILLIS)))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EasyMock.expect(kinesis.getRecords(generateGetRecordsReq(SHARD0_ITERATOR,recordsPerFetch))).andReturn(getRecordsResult0).anyTimes()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testPoll['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Set<StreamPartition<String>> partitions = ImmutableSet.of(StreamPartition.of(STREAM,SHARD_ID0),StreamPartition.of(STREAM,SHARD_ID1))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,recordsPerFetch,0,2,false,100,5000,5000,60000,100)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "EasyMock.expect(kinesis.getRecords(generateGetRecordsReq(SHARD1_ITERATOR,recordsPerFetch))).andReturn(getRecordsResult1).anyTimes()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "EasyMock.expect(getRecordsResult1.getRecords()).andReturn(SHARD1_RECORDS).once()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "EasyMock.expect(kinesis.getShardIterator(EasyMock.anyObject(),EasyMock.eq(SHARD_ID1),EasyMock.anyString(),EasyMock.anyString())).andReturn(getShardIteratorResult1).anyTimes()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,recordsPerFetch,0,2,false,100,5000,5000,60000,100)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Thread.sleep(100)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "recordSupplier.start()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "EasyMock.expect(getRecordsResult1.getNextShardIterator()).andReturn(null).anyTimes()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EasyMock.expect(getShardIteratorResult0.getShardIterator()).andReturn(SHARD0_ITERATOR).anyTimes()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "StreamPartition<String> shard0 = StreamPartition.of(stream,SHARD_ID0)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "EasyMock.expect(getRecordsResult0.getRecords()).andReturn(SHARD0_RECORDS).once()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EasyMock.expect(kinesis.getShardIterator(EasyMock.anyObject(),EasyMock.eq(SHARD_ID0),EasyMock.anyString(),EasyMock.anyString())).andReturn(getShardIteratorResult0).anyTimes()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "verifyAll()@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "EasyMock.expect(getShardIteratorResult0.getShardIterator()).andReturn(null).once()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "replayAll()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "recordSupplier.assign(partitions)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(partitions,recordSupplier.getAssignment())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "recordSupplier.seekToLatest(partitions)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "EasyMock.expect(getShardIteratorResult1.getShardIterator()).andReturn(SHARD1_ITERATOR).anyTimes()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testPoll['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "verifyAll()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "recordsPerFetch = 100@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "recordSupplier.bufferSize() < 12@@@20@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "i < 10 && recordSupplier.bufferSize() < 2@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "StreamPartition<String> shard1 = StreamPartition.of(stream,SHARD_ID1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "EasyMock.expect(getShardIteratorResult1.getShardIterator()).andReturn(null).once()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Set<StreamPartition<String>> partitions = ImmutableSet.of(shard0,shard1)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "List<OrderedPartitionableRecord<String,String>> polledRecords = cleanRecords(recordSupplier.poll(POLL_TIMEOUT_MILLIS))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25->0 [style = bold, label=""];
14->16 [style = bold, label=""];
11->20 [style = bold, label=""];
5->10 [style = bold, label=""];
17->25 [style = bold, label=""];
30->38 [style = bold, label=""];
6->38 [style = solid, label="i"];
28->37 [style = solid, label="partitions"];
32->37 [style = bold, label=""];
12->5 [style = bold, label=""];
18->23 [style = bold, label=""];
18->0 [style = solid, label="recordsPerFetch"];
28->17 [style = solid, label="partitions"];
21->1 [style = dotted, label="true"];
10->14 [style = bold, label=""];
30->38 [style = solid, label="i"];
19->31 [style = bold, label=""];
26->29 [style = bold, label=""];
22->9 [style = bold, label=""];
37->17 [style = bold, label=""];
1->27 [style = bold, label=""];
19->11 [style = bold, label=""];
15->6 [style = bold, label=""];
34->28 [style = solid, label="shard1"];
25->6 [style = solid, label="partitions"];
38->6 [style = dotted, label="true"];
16->17 [style = bold, label=""];
29->28 [style = solid, label="shard0"];
29->34 [style = bold, label=""];
6->17 [style = dashed, label="0"];
24->18 [style = bold, label=""];
2->22 [style = solid, label="partitions"];
13->1 [style = dashed, label="0"];
0->15 [style = bold, label=""];
18->32 [style = solid, label="recordsPerFetch"];
38->1 [style = bold, label=""];
20->4 [style = bold, label=""];
8->22 [style = bold, label=""];
28->32 [style = bold, label=""];
3->18 [style = bold, label=""];
25->15 [style = solid, label="partitions"];
17->36 [style = bold, label=""];
34->28 [style = bold, label=""];
20->35 [style = dashed, label="0"];
36->30 [style = bold, label=""];
6->38 [style = bold, label=""];
2->0 [style = bold, label=""];
2->6 [style = solid, label="partitions"];
31->35 [style = bold, label=""];
17->2 [style = bold, label=""];
33->18 [style = bold, label=""];
11->31 [style = dashed, label="0"];
38->7 [style = dotted, label="true"];
38->7 [style = bold, label=""];
1->21 [style = bold, label=""];
2->15 [style = solid, label="partitions"];
2->29 [style = dashed, label="0"];
23->19 [style = bold, label=""];
21->1 [style = bold, label=""];
7->6 [style = bold, label=""];
25->22 [style = solid, label="partitions"];
2->25 [style = dashed, label="0"];
4->12 [style = bold, label=""];
7->21 [style = bold, label=""];
13->8 [style = bold, label=""];
6->7 [style = bold, label=""];
35->26 [style = bold, label=""];
30->6 [style = solid, label="i"];
21->13 [style = bold, label=""];
}
