digraph {
7 [style = filled, label = "final Node originalSlave = j.createSlave(\"SlaveFromXml\",null,null)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertThat(updatedSlave.getNumExecutors(),equalTo(42))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "createNodeSpecifyingDifferentNameExplicitly['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(updated.getNodeName(),equalTo(\"CustomAgentName\"))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Computer.CREATE,Jenkins.READ).withStdin(.getResourceAsStream(\"node.xml\")).invokeWithArgs(\"CustomSlaveName\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Computer.CREATE,Jenkins.READ).withStdin(.getResourceAsStream(\"node.xml\")).invokeWithArgs(\"CustomAgentName\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "final Node original = j.createSlave(\"AgentFromXml\",null,null)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertThat(\"An agent with original name should be left untouched\",j.jenkins.getNode(\"AgentFromXml\"),equalTo(original))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "createNode['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(updatedSlave.getNodeName(),equalTo(\"SlaveFromXML\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "createNodeSpecifyingDifferentNameExplicitly['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "final Slave updated = (Slave)j.jenkins.getNode(\"CustomAgentName\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertThat(result,succeededSilently())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(updatedSlave.getNumExecutors(),equalTo(42))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "final Slave updatedSlave = (Slave)j.jenkins.getNode(\"SlaveFromXML\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(\"A slave with original name should be left untouched\",j.jenkins.getNode(\"SlaveFromXml\"),equalTo(originalSlave))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Computer.CREATE,Jenkins.READ).withStdin(.getResourceAsStream(\"node.xml\")).invoke()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(updatedSlave.getNodeName(),equalTo(\"CustomSlaveName\"))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertThat(updated.getNumExecutors(),equalTo(42))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "final Slave updatedSlave = (Slave)j.jenkins.getNode(\"CustomSlaveName\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6->3 [style = bold, label=""];
16->15 [style = bold, label=""];
19->18 [style = bold, label=""];
2->19 [style = bold, label=""];
5->14 [style = dashed, label="0"];
6->2 [style = dashed, label="0"];
2->6 [style = bold, label=""];
0->2 [style = bold, label=""];
12->11 [style = bold, label=""];
7->11 [style = dashed, label="0"];
7->0 [style = bold, label=""];
3->4 [style = bold, label=""];
1->7 [style = bold, label=""];
15->17 [style = solid, label="result"];
0->10 [style = dashed, label="0"];
2->13 [style = bold, label=""];
0->2 [style = solid, label="result"];
4->9 [style = dashed, label="0"];
15->17 [style = bold, label=""];
6->13 [style = dashed, label="0"];
17->2 [style = bold, label=""];
11->10 [style = bold, label=""];
8->9 [style = bold, label=""];
9->14 [style = bold, label=""];
11->13 [style = solid, label="original"];
3->8 [style = dashed, label="0"];
10->2 [style = bold, label=""];
13->8 [style = bold, label=""];
10->2 [style = solid, label="result"];
4->5 [style = bold, label=""];
7->6 [style = solid, label="originalSlave"];
}
