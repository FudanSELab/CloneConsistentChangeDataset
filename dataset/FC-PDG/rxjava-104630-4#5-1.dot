digraph {
14 [style = filled, label = "to.awaitDone(500,TimeUnit.MILLISECONDS)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ts.awaitDone(500,TimeUnit.MILLISECONDS)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ts.assertValues(1,2,3,4,5,5,6,7,8,9)@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "windowUnsubscribeOverlappingAsyncSource['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Flowable.merge(Flowable.range(1,100000).doOnNext(new Consumer<Integer>(){@Override public void accept(Integer t1){count.incrementAndGet()}}).observeOn(Schedulers.computation()).window(5,4).take(2),128).subscribe(ts)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "windowUnsubscribeOverlappingAsyncSource['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "to.assertTerminated()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "TestSubscriberEx<Integer> ts = new TestSubscriberEx<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "final AtomicInteger count = new AtomicInteger()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "windowUnsubscribeOverlappingAsyncSource['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Observable.merge(Observable.range(1,100000).doOnNext(new Consumer<Integer>(){@Override public void accept(Integer t1){count.incrementAndGet()}}).observeOn(Schedulers.computation()).window(5,4).take(2),128).subscribe(to)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "to.assertValues(1,2,3,4,5,5,6,7,8,9)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ts.assertTerminated()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "TestObserverEx<Integer> to = new TestObserverEx<Integer>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
9->11 [style = bold, label=""];
10->13 [style = solid, label="to"];
5->9 [style = dashed, label="0"];
1->10 [style = dashed, label="0"];
3->13 [style = dashed, label="0"];
3->4 [style = bold, label=""];
10->6 [style = bold, label=""];
8->7 [style = bold, label=""];
5->2 [style = bold, label=""];
12->10 [style = bold, label=""];
1->6 [style = bold, label=""];
1->3 [style = solid, label="ts"];
0->1 [style = bold, label=""];
6->13 [style = bold, label=""];
7->6 [style = bold, label=""];
7->3 [style = solid, label="ts"];
2->11 [style = dashed, label="0"];
14->9 [style = bold, label=""];
4->14 [style = dashed, label="0"];
1->7 [style = dashed, label="0"];
4->5 [style = bold, label=""];
13->14 [style = bold, label=""];
}
