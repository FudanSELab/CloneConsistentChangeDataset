digraph {
4 [style = filled, label = "callbacksInvokeAndWhenHasGenericShouldReturnResult['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "callbacksInvokeAndWhenHasGenericShouldReturnResult['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "StringBuilder argument = new StringBuilder(\"foo\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "callbacksInvokeAndWhenHasResolvableGenericMatchShouldReturnResult['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "StringBuilderFactory callbackInstance = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Stream<Integer> result = LambdaSafe.callbacks(,Collections.singleton(callbackInstance),argument).invokeAnd(null)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "given(callbackInstance.handle(\"foo\")).willReturn(123)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "StringFactory callbackInstance = mock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "String argument = \"foo\"@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(result).containsExactly(123)@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "given(callbackInstance.handle(any())).willReturn(123)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->3 [style = bold, label=""];
0->8 [style = dashed, label="0"];
5->1 [style = bold, label=""];
8->10 [style = bold, label=""];
5->9 [style = dashed, label="0"];
10->9 [style = bold, label=""];
0->2 [style = bold, label=""];
6->0 [style = bold, label=""];
9->1 [style = bold, label=""];
7->8 [style = bold, label=""];
2->10 [style = dashed, label="0"];
4->0 [style = bold, label=""];
2->5 [style = bold, label=""];
}
