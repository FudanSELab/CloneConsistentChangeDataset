digraph {
11 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,not(equal(\"id\",29))).eval(FILE)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Assert.assertTrue(\"Should read: id between lower and upper bounds\",shouldRead)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,not(equal(\"id\",80))).eval(FILE)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(\"Should read: id above upper bound\",shouldRead)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,not(equal(\"id\",79))).eval(FILE)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,not(equal(\"id\",85))).eval(FILE)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,not(equal(\"id\",30))).eval(FILE)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"id\",29)),SPEC,true).eval(FILE)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Assert.assertTrue(\"Should read: id below lower bound\",shouldRead)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"id\",80)),SPEC,true).eval(FILE)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,not(equal(\"id\",75))).eval(FILE)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "Assert.assertTrue(\"Should read: not(false)\",shouldRead)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertTrue(\"Should read: id equal to lower bound\",shouldRead)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "boolean shouldRead = new InclusiveManifestEvaluator(SPEC,not(lessThan(\"id\",5))).eval(FILE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"id\",5)),SPEC,true).eval(FILE)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "boolean shouldRead = new InclusiveManifestEvaluator(SPEC,not(equal(\"id\",5))).eval(FILE)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(\"Should read: id below lower bound\",shouldRead)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testNot['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertTrue(\"Should read: id above upper bound\",shouldRead)@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"id\",75)),SPEC,true).eval(FILE)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,not(greaterThan(\"id\",5))).eval(FILE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"id\",85)),SPEC,true).eval(FILE)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"id\",79)),SPEC,true).eval(FILE)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testIntegerNotEqRewritten['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertFalse(\"Should skip: not(true)\",shouldRead)@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testIntegerNotEqRewritten['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Assert.assertTrue(\"Should read: id equal to upper bound\",shouldRead)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"id\",30)),SPEC,true).eval(FILE)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26->27 [style = solid, label="shouldRead"];
18->3 [style = bold, label=""];
15->10 [style = bold, label=""];
7->11 [style = bold, label=""];
15->10 [style = solid, label="shouldRead"];
17->1 [style = bold, label=""];
21->6 [style = bold, label=""];
6->22 [style = bold, label=""];
25->23 [style = bold, label=""];
5->23 [style = dashed, label="0"];
16->7 [style = solid, label="shouldRead"];
11->6 [style = bold, label=""];
23->24 [style = solid, label="shouldRead"];
4->15 [style = bold, label=""];
8->20 [style = dashed, label="0"];
16->7 [style = bold, label=""];
11->26 [style = dashed, label="0"];
12->20 [style = bold, label=""];
21->6 [style = solid, label="shouldRead"];
18->3 [style = solid, label="shouldRead"];
14->22 [style = dashed, label="0"];
1->18 [style = bold, label=""];
10->17 [style = bold, label=""];
4->2 [style = bold, label=""];
2->10 [style = bold, label=""];
0->17 [style = dashed, label="0"];
1->13 [style = bold, label=""];
20->4 [style = bold, label=""];
8->4 [style = solid, label="shouldRead"];
19->16 [style = bold, label=""];
2->15 [style = dashed, label="0"];
14->12 [style = solid, label="shouldRead"];
17->1 [style = solid, label="shouldRead"];
6->14 [style = bold, label=""];
5->16 [style = dashed, label="0"];
24->26 [style = bold, label=""];
26->27 [style = bold, label=""];
23->24 [style = bold, label=""];
11->6 [style = solid, label="shouldRead"];
2->10 [style = solid, label="shouldRead"];
13->3 [style = bold, label=""];
7->24 [style = dashed, label="0"];
6->27 [style = dashed, label="0"];
12->8 [style = bold, label=""];
22->12 [style = solid, label="shouldRead"];
0->1 [style = bold, label=""];
22->12 [style = bold, label=""];
14->12 [style = bold, label=""];
10->0 [style = bold, label=""];
0->1 [style = solid, label="shouldRead"];
9->5 [style = bold, label=""];
7->21 [style = bold, label=""];
5->7 [style = bold, label=""];
8->4 [style = bold, label=""];
13->18 [style = dashed, label="0"];
5->7 [style = solid, label="shouldRead"];
13->3 [style = solid, label="shouldRead"];
20->4 [style = solid, label="shouldRead"];
11->21 [style = dashed, label="0"];
}
