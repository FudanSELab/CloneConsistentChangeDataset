digraph {
16 [style = filled, label = "Assert.assertEquals(\"world\",nextRow.getDimension(\"dim2\").get(0))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testReader['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "S3InputSource inputSource = new S3InputSource(SERVICE,SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,INPUT_DATA_CONFIG,null,ImmutableList.of(PREFIXES.get(0),EXPECTED_URIS.get(1)),null,null)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "InputRowSchema someSchema = new InputRowSchema(new TimestampSpec(\"time\",\"auto\",null),new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\",\"dim2\"))),ImmutableList.of(\"count\"))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "InputRow nextRow = iterator.next()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "EasyMock.reset(S3_CLIENT)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "EasyMock.verify(S3_CLIENT)@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "CloseableIterator<InputRow> iterator = reader.read()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(NOW,nextRow.getTimestamp())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "EasyMock.replay(OSSCLIENT)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "OssInputSource inputSource = new OssInputSource(OSSCLIENT,INPUT_DATA_CONFIG,null,ImmutableList.of(PREFIXES.get(0),EXPECTED_URIS.get(1)),null,null)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "expectListObjects(EXPECTED_URIS.get(1),ImmutableList.of(EXPECTED_URIS.get(1)),CONTENT)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "InputRowSchema someSchema = new InputRowSchema(new TimestampSpec(\"time\",\"auto\",null),new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\",\"dim2\"))),ColumnsFilter.all())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(\"hello\",nextRow.getDimension(\"dim1\").get(0))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "InputSourceReader reader = inputSource.reader(someSchema,new CsvInputFormat(ImmutableList.of(\"time\",\"dim1\",\"dim2\"),\"|\",false,null,0),temporaryFolder.newFolder())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EasyMock.verify(OSSCLIENT)@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testReader['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "expectListObjects(PREFIXES.get(0),ImmutableList.of(EXPECTED_URIS.get(0)),CONTENT)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expectGetObject(EXPECTED_URIS.get(0))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "expectGetObject(EXPECTED_URIS.get(1))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "iterator.hasNext()@@@13@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "EasyMock.replay(S3_CLIENT)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "EasyMock.reset(OSSCLIENT)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testReader['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2->23 [style = dashed, label="0"];
6->3 [style = bold, label=""];
4->14 [style = bold, label=""];
17->1 [style = solid, label="someSchema"];
1->8 [style = bold, label=""];
7->10 [style = dotted, label="true"];
17->1 [style = bold, label=""];
3->21 [style = dashed, label="0"];
7->10 [style = bold, label=""];
13->20 [style = dashed, label="0"];
16->7 [style = bold, label=""];
12->17 [style = dashed, label="0"];
15->6 [style = bold, label=""];
3->12 [style = bold, label=""];
7->9 [style = dotted, label="true"];
15->19 [style = bold, label=""];
11->9 [style = bold, label=""];
12->1 [style = bold, label=""];
12->1 [style = solid, label="someSchema"];
9->16 [style = bold, label=""];
0->15 [style = bold, label=""];
8->7 [style = bold, label=""];
20->4 [style = bold, label=""];
21->12 [style = bold, label=""];
7->11 [style = dotted, label="true"];
14->0 [style = bold, label=""];
22->20 [style = bold, label=""];
7->2 [style = bold, label=""];
5->13 [style = bold, label=""];
7->23 [style = bold, label=""];
6->19 [style = dashed, label="0"];
7->16 [style = dotted, label="true"];
18->13 [style = bold, label=""];
3->17 [style = bold, label=""];
13->4 [style = bold, label=""];
10->11 [style = bold, label=""];
19->21 [style = bold, label=""];
}
