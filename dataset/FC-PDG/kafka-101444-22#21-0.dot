digraph {
5 [style = filled, label = "final KStream<Integer,String> stream2@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final int(( expectedKeys = new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@cb5087@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "testOuterJoin['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "int i = 0@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"A0+null\",0),new KeyValueTimestamp<>(1,\"A1+null\",0))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "i < 2@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "driver.pipeInput(recordFactory.create(topic1,expectedKey,\"B\" + expectedKey))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "final int(( expectedKeys = new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@cb51d6@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"A0+c0\",0),new KeyValueTimestamp<>(0,\"B0+c0\",0),new KeyValueTimestamp<>(0,\"C0+c0\",0),new KeyValueTimestamp<>(1,\"A1+c1\",0),new KeyValueTimestamp<>(1,\"B1+c1\",0),new KeyValueTimestamp<>(1,\"C1+c1\",0))@@@49@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "final MockProcessorSupplier<Integer,String> supplier = new MockProcessorSupplier<>()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"C0+a0\",0),new KeyValueTimestamp<>(0,\"C0+b0\",0),new KeyValueTimestamp<>(1,\"C1+a1\",0),new KeyValueTimestamp<>(1,\"C1+b1\",0),new KeyValueTimestamp<>(2,\"C2+b2\",0),new KeyValueTimestamp<>(3,\"C3+b3\",0))@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "final StreamsBuilder builder = new StreamsBuilder()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "i++@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "processor.checkAndClearProcessResult(\"0:B0+a0 (ts: 0)\",\"1:B1+a1 (ts: 0)\",\"2:B2+null (ts: 0)\",\"3:B3+null (ts: 0)\")@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "driver.pipeInput(recordFactory.create(topic2,expectedKey,\"b\" + expectedKey))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "int i = 0@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "processor.checkAndClearProcessResult(\"0:C0+a0 (ts: 0)\",\"0:C0+b0 (ts: 0)\",\"1:C1+a1 (ts: 0)\",\"1:C1+b1 (ts: 0)\",\"2:C2+b2 (ts: 0)\",\"3:C3+b3 (ts: 0)\")@@@43@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "i++@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "joined = stream1.outerJoin(stream2,MockValueJoiner.TOSTRING_JOINER,JoinWindows.of(ofMillis(100)),Joined.with(Serdes.Integer(),Serdes.String(),Serdes.String()))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(1,copartitionGroups.size())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"A0+b0\",0),new KeyValueTimestamp<>(0,\"B0+b0\",0),new KeyValueTimestamp<>(1,\"A1+b1\",0),new KeyValueTimestamp<>(1,\"B1+b1\",0),new KeyValueTimestamp<>(2,\"B2+b2\",0),new KeyValueTimestamp<>(3,\"B3+b3\",0))@@@39@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "final KStream<Integer,String> stream1@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "int i = 0@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "final Collection<Set<String>> copartitionGroups = TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "processor.checkAndClearProcessResult(\"0:A0+b0 (ts: 0)\",\"0:B0+b0 (ts: 0)\",\"1:A1+b1 (ts: 0)\",\"1:B1+b1 (ts: 0)\",\"2:B2+b2 (ts: 0)\",\"3:B3+b3 (ts: 0)\")@@@39@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "testOuterJoin['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "joined.process(supplier)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "shouldRequireCopartitionedStreams['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "processor.checkAndClearProcessResult(\"0:A0+c0 (ts: 0)\",\"0:B0+c0 (ts: 0)\",\"0:C0+c0 (ts: 0)\",\"1:A1+c1 (ts: 0)\",\"1:B1+c1 (ts: 0)\",\"1:C1+c1 (ts: 0)\")@@@49@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(streamTopic,tableTopic)),copartitionGroups.iterator().next())@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "driver.pipeInput(recordFactory.create(topic1,expectedKey,\"C\" + expectedKey))@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(topic1,topic2)),copartitionGroups.iterator().next())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"B0+a0\",0),new KeyValueTimestamp<>(1,\"B1+a1\",0),new KeyValueTimestamp<>(2,\"B2+null\",0),new KeyValueTimestamp<>(3,\"B3+null\",0))@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "stream1 = builder.stream(topic1,consumed)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "processor.checkAndClearProcessResult(\"0:A0+null (ts: 0)\",\"1:A1+null (ts: 0)\")@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "i < 2@@@27@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "driver.pipeInput(recordFactory.create(topic2,expectedKeys(i(,\"a\" + expectedKeys(i())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "i++@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"A0+a0\",0),new KeyValueTimestamp<>(1,\"A1+a1\",0))@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "stream2 = builder.stream(topic2,consumed)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "processor.checkAndClearProcessResult(\"0:A0+a0 (ts: 0)\",\"1:A1+a1 (ts: 0)\")@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "i < 2@@@45@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final KStream<Integer,String> joined@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "driver.pipeInput(recordFactory.create(topic2,expectedKeys(i(,\"c\" + expectedKeys(i())@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "driver.pipeInput(recordFactory.create(topic1,expectedKeys(i(,\"A\" + expectedKeys(i())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertEquals(1,copartitionGroups.size())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final Collection<Set<String>> copartitionGroups = TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final MockProcessor<Integer,String> processor = supplier.theCapturedProcessor()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->3 [style = bold, label=""];
5->9 [style = bold, label=""];
25->22 [style = bold, label=""];
32->12 [style = bold, label=""];
36->29 [style = bold, label=""];
41->10 [style = solid, label="expectedKeys"];
10->32 [style = bold, label=""];
7->31 [style = bold, label=""];
43->26 [style = bold, label=""];
9->16 [style = bold, label=""];
21->2 [style = solid, label="i"];
1->40 [style = dashed, label="0"];
12->10 [style = bold, label=""];
15->11 [style = bold, label=""];
34->26 [style = bold, label=""];
14->44 [style = dashed, label="0"];
35->32 [style = solid, label="i"];
22->38 [style = dashed, label="0"];
29->13 [style = solid, label="i"];
30->14 [style = bold, label=""];
2->28 [style = bold, label=""];
35->12 [style = bold, label=""];
32->12 [style = solid, label="i"];
23->25 [style = bold, label=""];
26->7 [style = bold, label=""];
21->19 [style = bold, label=""];
7->2 [style = solid, label="expectedKeys"];
13->20 [style = solid, label="i"];
0->17 [style = bold, label=""];
35->12 [style = solid, label="i"];
16->6 [style = bold, label=""];
27->30 [style = bold, label=""];
31->5 [style = bold, label=""];
18->15 [style = bold, label=""];
19->39 [style = bold, label=""];
41->2 [style = solid, label="expectedKeys"];
19->2 [style = bold, label=""];
41->20 [style = solid, label="expectedKeys"];
13->4 [style = solid, label="i"];
17->42 [style = bold, label=""];
32->10 [style = solid, label="i"];
12->37 [style = bold, label=""];
16->11 [style = solid, label="supplier"];
4->13 [style = dotted, label="true"];
12->32 [style = dotted, label="true"];
12->10 [style = dotted, label="true"];
39->35 [style = bold, label=""];
35->10 [style = solid, label="i"];
28->19 [style = bold, label=""];
47->44 [style = bold, label=""];
45->46 [style = bold, label=""];
24->8 [style = bold, label=""];
21->28 [style = solid, label="i"];
25->38 [style = bold, label=""];
19->33 [style = bold, label=""];
20->13 [style = bold, label=""];
38->24 [style = bold, label=""];
42->25 [style = bold, label=""];
6->18 [style = bold, label=""];
33->39 [style = dashed, label="0"];
8->36 [style = dashed, label="0"];
29->20 [style = solid, label="i"];
17->23 [style = bold, label=""];
28->2 [style = solid, label="i"];
26->41 [style = bold, label=""];
19->28 [style = dotted, label="true"];
28->19 [style = solid, label="i"];
4->20 [style = bold, label=""];
3->21 [style = bold, label=""];
41->31 [style = bold, label=""];
4->1 [style = bold, label=""];
7->41 [style = dashed, label="0"];
4->40 [style = bold, label=""];
33->35 [style = bold, label=""];
29->4 [style = bold, label=""];
0->37 [style = dashed, label="0"];
19->2 [style = dotted, label="true"];
21->19 [style = solid, label="i"];
37->17 [style = bold, label=""];
4->20 [style = dotted, label="true"];
46->47 [style = bold, label=""];
12->0 [style = bold, label=""];
7->20 [style = solid, label="expectedKeys"];
7->10 [style = solid, label="expectedKeys"];
29->4 [style = solid, label="i"];
24->36 [style = bold, label=""];
18->15 [style = solid, label="stream2"];
22->24 [style = bold, label=""];
23->42 [style = dashed, label="0"];
8->29 [style = bold, label=""];
11->27 [style = bold, label=""];
13->4 [style = bold, label=""];
}
