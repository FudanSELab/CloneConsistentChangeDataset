digraph {
40 [style = filled, label = "Assert.assertEquals(\"Should project entire map\",properties,toStringMap((Map)projected.getField(\"properties\")))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Schema mapOnly = writeSchema.select(\"properties\")@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.getField(\"id\"))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "record.setField(\"properties\",properties)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Record projected = writeAndRead(\"id_only\",writeSchema,idOnly,record)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Schema keyOnly = writeSchema.select(\"properties.key\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Record record = GenericRecord.create(writeSchema.asStruct())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(\"Should project entire map\",properties,toStringMap((Map)projected.getField(\"properties\")))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "Assert.assertNull(\"Should not project properties map\",projected.getField(\"properties\"))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "Assert.assertNull(\"Should not project properties map\",projected.getField(\"properties\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testMapProjection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Record record = new Record(AvroSchemaUtil.convert(writeSchema,\"table\"))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "record.setField(\"id\",34L)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Schema valueOnly = writeSchema.select(\"properties.value\")@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(\"Should project entire map\",properties,toStringMap((Map)projected.get(\"properties\")))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "record.setField(\"properties\",properties)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.get(\"id\"))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(\"Should project entire map\",properties,toStringMap((Map)projected.get(\"properties\")))@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "Assert.assertEquals(\"Should project entire map\",properties,toStringMap((Map)projected.getField(\"properties\")))@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Schema writeSchema = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()),Types.NestedField.optional(5,\"properties\",Types.MapType.ofOptional(6,7,Types.StringType.get(),Types.StringType.get())))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "record.setField(\"id\",34L)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "record.put(\"id\",34L)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(\"Should project entire map\",properties,toStringMap((Map)projected.getField(\"properties\")))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "projected = writeAndRead(\"map_only\",writeSchema,mapOnly,record)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertNull(\"Should not project properties map\",projected.get(\"properties\"))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(\"Should project entire map\",properties,toStringMap((Map)projected.get(\"properties\")))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.getField(\"id\"))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "testMapProjection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "projected = writeAndRead(\"value_only\",writeSchema,valueOnly,record)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Record record = GenericRecord.create(writeSchema)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "Map<String,String> properties = ImmutableMap.of(\"a\",\"A\",\"b\",\"B\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "testMapProjection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "record.put(\"properties\",properties)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Schema idOnly = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(\"Should project entire map\",properties,toStringMap((Map)projected.getField(\"properties\")))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "Assert.assertEquals(\"Should project entire map\",properties,toStringMap((Map)projected.getField(\"properties\")))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "projected = writeAndRead(\"key_only\",writeSchema,keyOnly,record)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.getField(\"id\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19->27 [style = dashed, label="0"];
32->23 [style = bold, label=""];
24->5 [style = solid, label="record"];
20->30 [style = solid, label="properties"];
29->0 [style = bold, label=""];
40->15 [style = bold, label=""];
10->32 [style = bold, label=""];
20->7 [style = solid, label="properties"];
5->28 [style = bold, label=""];
22->30 [style = bold, label=""];
6->35 [style = dashed, label="0"];
5->34 [style = bold, label=""];
20->14 [style = solid, label="properties"];
24->17 [style = solid, label="record"];
1->40 [style = dashed, label="0"];
33->11 [style = bold, label=""];
15->17 [style = bold, label=""];
16->10 [style = solid, label="mapOnly"];
39->17 [style = solid, label="record"];
20->31 [style = solid, label="properties"];
20->23 [style = solid, label="properties"];
9->5 [style = bold, label=""];
24->10 [style = solid, label="record"];
24->27 [style = bold, label=""];
0->12 [style = solid, label="idOnly"];
14->16 [style = bold, label=""];
8->10 [style = solid, label="record"];
36->9 [style = bold, label=""];
37->36 [style = bold, label=""];
3->36 [style = dashed, label="0"];
1->31 [style = dashed, label="0"];
18->11 [style = bold, label=""];
10->21 [style = bold, label=""];
4->22 [style = dashed, label="0"];
19->6 [style = bold, label=""];
17->42 [style = bold, label=""];
13->26 [style = dashed, label="0"];
12->37 [style = bold, label=""];
8->12 [style = solid, label="record"];
21->32 [style = dashed, label="0"];
43->11 [style = bold, label=""];
35->0 [style = bold, label=""];
20->8 [style = bold, label=""];
8->17 [style = solid, label="record"];
10->44 [style = bold, label=""];
2->28 [style = dashed, label="0"];
20->39 [style = bold, label=""];
21->7 [style = bold, label=""];
20->29 [style = solid, label="properties"];
39->41 [style = bold, label=""];
11->5 [style = solid, label="writeSchema"];
27->29 [style = bold, label=""];
44->45 [style = bold, label=""];
42->38 [style = bold, label=""];
11->24 [style = solid, label="writeSchema"];
11->8 [style = solid, label="writeSchema"];
4->14 [style = bold, label=""];
7->23 [style = dashed, label="0"];
34->40 [style = bold, label=""];
15->17 [style = solid, label="valueOnly"];
2->1 [style = bold, label=""];
20->45 [style = solid, label="properties"];
0->12 [style = bold, label=""];
28->31 [style = bold, label=""];
25->9 [style = bold, label=""];
38->16 [style = bold, label=""];
11->12 [style = solid, label="writeSchema"];
39->5 [style = solid, label="record"];
19->41 [style = dashed, label="0"];
39->12 [style = solid, label="record"];
3->9 [style = bold, label=""];
12->13 [style = bold, label=""];
8->5 [style = solid, label="record"];
20->1 [style = solid, label="properties"];
20->38 [style = solid, label="properties"];
7->45 [style = dashed, label="0"];
14->38 [style = dashed, label="0"];
39->10 [style = solid, label="record"];
17->4 [style = bold, label=""];
20->35 [style = solid, label="properties"];
41->35 [style = bold, label=""];
11->20 [style = bold, label=""];
13->37 [style = dashed, label="0"];
21->44 [style = dashed, label="0"];
16->10 [style = bold, label=""];
20->40 [style = solid, label="properties"];
8->19 [style = bold, label=""];
1->15 [style = bold, label=""];
9->5 [style = solid, label="keyOnly"];
26->25 [style = bold, label=""];
6->0 [style = bold, label=""];
12->26 [style = bold, label=""];
8->24 [style = dashed, label="0"];
17->22 [style = bold, label=""];
20->6 [style = solid, label="properties"];
31->15 [style = bold, label=""];
5->2 [style = bold, label=""];
6->29 [style = dashed, label="0"];
11->17 [style = solid, label="writeSchema"];
13->3 [style = bold, label=""];
11->10 [style = solid, label="writeSchema"];
8->39 [style = dashed, label="0"];
14->30 [style = dashed, label="0"];
2->34 [style = dashed, label="0"];
4->42 [style = dashed, label="0"];
24->12 [style = solid, label="record"];
20->24 [style = bold, label=""];
30->16 [style = bold, label=""];
3->25 [style = dashed, label="0"];
}
