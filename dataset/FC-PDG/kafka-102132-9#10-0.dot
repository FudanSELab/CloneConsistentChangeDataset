digraph {
29 [style = filled, label = "createClientWithPreviousActiveTasks(p2,1,task02,task03)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(clients.get(p2).activeTasks(),hasItems(task01))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "createClientWithPreviousActiveTasks(p2,1,task01)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "final StickyTaskAssignor firstAssignor = createTaskAssignor(task00,task01,task02)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "final StickyTaskAssignor firstAssignor = createTaskAssignor(TASK_0_0,TASK_0_1,TASK_0_2)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "shouldNotMoveAnyTasksWhenNewTasksAdded['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "shouldNotMigrateActiveTaskToOtherProcess['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "final StickyTaskAssignor secondAssignor = createTaskAssignor(task00,task01,task02)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "assertThat(clients.get(p1).activeTasks(),hasItems(task00,task01))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertThat(clients.get(UUID_1).activeTasks(),hasItems(TASK_0_1))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "final StickyTaskAssignor<Integer> taskAssignor = createTaskAssignor(task03,task01,task04,task02,task00,task05)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(clients.get(p1).activeTasks(),hasItems(task00))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "assertThat(clients.get(p2).activeTasks(),hasItems(task02,task03))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "createClientWithPreviousActiveTasks(UUID_1,1,TASK_0_1)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "secondAssignor.assign()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "createClientWithPreviousActiveTasks(p1,1,task00,task01)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(clients.get(UUID_2).activeTasks(),hasItems(TASK_0_1))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertThat(clients.get(p2).activeTasks(),hasItems(task02))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "assertThat(allActiveTasks(),equalTo(asList(TASK_0_0,TASK_0_1,TASK_0_2)))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "createClientWithPreviousActiveTasks(p1,1,task00)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "taskAssignor.assign()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "createClientWithPreviousActiveTasks(p1,1,task01)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "firstAssignor.assign()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(clients.get(UUID_2).activeTasks(),hasItems(TASK_0_2))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "final StickyTaskAssignor secondAssignor = createTaskAssignor(TASK_0_0,TASK_0_1,TASK_0_2)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "createClientWithPreviousActiveTasks(UUID_2,1,TASK_0_1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "createClientWithPreviousActiveTasks(UUID_1,1,TASK_0_0)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "createClientWithPreviousActiveTasks(p2,1,task02)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertThat(clients.get(p1).activeTasks(),hasItems(task01))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "clients.clear()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "shouldNotMigrateActiveTaskToOtherProcess['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(allActiveTasks(),equalTo(asList(TASK_0_0,TASK_0_1,TASK_0_2)))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertThat(allActiveTasks(),equalTo(Arrays.asList(task00,task01,task02)))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "createClientWithPreviousActiveTasks(UUID_2,1,TASK_0_2)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertThat(allActiveTasks(),equalTo(Arrays.asList(task00,task01,task02)))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertThat(clients.get(UUID_1).activeTasks(),hasItems(TASK_0_0))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->3 [style = bold, label=""];
32->35 [style = bold, label=""];
22->25 [style = bold, label=""];
1->4 [style = bold, label=""];
4->24 [style = bold, label=""];
7->23 [style = dashed, label="0"];
3->1 [style = bold, label=""];
19->12 [style = bold, label=""];
29->30 [style = bold, label=""];
11->16 [style = dashed, label="0"];
3->33 [style = dashed, label="0"];
35->33 [style = bold, label=""];
31->29 [style = bold, label=""];
30->32 [style = bold, label=""];
34->31 [style = bold, label=""];
9->22 [style = dashed, label="0"];
1->21 [style = dashed, label="0"];
5->18 [style = bold, label=""];
27->16 [style = bold, label=""];
10->27 [style = dashed, label="0"];
26->19 [style = bold, label=""];
2->10 [style = bold, label=""];
2->17 [style = dashed, label="0"];
8->24 [style = dashed, label="0"];
13->26 [style = dashed, label="0"];
10->29 [style = dashed, label="0"];
12->7 [style = bold, label=""];
2->31 [style = dashed, label="0"];
20->21 [style = bold, label=""];
7->9 [style = bold, label=""];
5->32 [style = dashed, label="0"];
24->26 [style = bold, label=""];
11->5 [style = bold, label=""];
18->20 [style = bold, label=""];
15->25 [style = dashed, label="0"];
23->22 [style = bold, label=""];
5->0 [style = bold, label=""];
9->15 [style = bold, label=""];
3->20 [style = dashed, label="0"];
6->19 [style = dashed, label="0"];
16->5 [style = bold, label=""];
28->17 [style = bold, label=""];
0->18 [style = dashed, label="0"];
4->8 [style = bold, label=""];
14->2 [style = bold, label=""];
12->23 [style = bold, label=""];
0->35 [style = dashed, label="0"];
13->6 [style = bold, label=""];
17->27 [style = bold, label=""];
11->30 [style = dashed, label="0"];
8->13 [style = bold, label=""];
21->4 [style = bold, label=""];
10->11 [style = bold, label=""];
6->12 [style = bold, label=""];
}
