digraph {
26 [style = filled, label = "final int expectedMaxSize = NullHandling.replaceWithDefault()? 267: 258@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "i < expectedMaxSize@@@22@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testNoGrowing['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "int i = 0@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "i++@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testGrowing['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "columnSelectorFactory.setRow(new MapBasedRow(0,ImmutableMap.of(\"value\",10L)))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int i = 0@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertTrue(String.valueOf(i),grouper.aggregate(i).isOk())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertTrue(String.valueOf(i),grouper.aggregate(i).isOk())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final Grouper<Integer> grouper = makeGrouper(columnSelectorFactory,10000,2)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(expected,Lists.newArrayList(grouper.iterator(true)))@@@28@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expected.add(new Grouper.Entry<>(i,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@920ecb))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "i < expectedMaxSize@@@8@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "int i = 0@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final List<Grouper.Entry<Integer>> expected = Lists.newArrayList()@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "i < expectedMaxSize@@@15@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "i++@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "columnSelectorFactory.setRow(new MapBasedRow(0,ImmutableMap.of(\"value\",11L)))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "i++@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testGrowing['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final int expectedMaxSize = NullHandling.replaceWithDefault()? 219: 210@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final Grouper<Integer> grouper = makeGrouper(columnSelectorFactory,10000,Integer.MAX_VALUE)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final List<Grouper.Entry<Integer>> expected = new ArrayList<>()@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19->25 [style = solid, label="columnSelectorFactory"];
11->10 [style = solid, label="i"];
8->16 [style = bold, label=""];
7->2 [style = dotted, label="true"];
20->5 [style = solid, label="i"];
16->7 [style = solid, label="expectedMaxSize"];
11->13 [style = solid, label="i"];
7->17 [style = bold, label=""];
15->7 [style = bold, label=""];
24->19 [style = bold, label=""];
16->14 [style = solid, label="expectedMaxSize"];
21->6 [style = bold, label=""];
11->14 [style = bold, label=""];
22->19 [style = bold, label=""];
6->5 [style = solid, label="i"];
20->21 [style = solid, label="i"];
26->1 [style = bold, label=""];
19->8 [style = solid, label="columnSelectorFactory"];
16->5 [style = solid, label="expectedMaxSize"];
18->19 [style = bold, label=""];
5->6 [style = dotted, label="true"];
14->10 [style = bold, label=""];
20->6 [style = solid, label="i"];
23->0 [style = bold, label=""];
26->14 [style = solid, label="expectedMaxSize"];
7->15 [style = dotted, label="true"];
14->10 [style = dotted, label="true"];
23->17 [style = solid, label="expected"];
19->8 [style = bold, label=""];
19->25 [style = bold, label=""];
1->11 [style = bold, label=""];
20->5 [style = bold, label=""];
4->0 [style = bold, label=""];
0->7 [style = bold, label=""];
14->13 [style = dotted, label="true"];
16->26 [style = dashed, label="0"];
5->21 [style = bold, label=""];
0->15 [style = solid, label="i"];
26->7 [style = solid, label="expectedMaxSize"];
13->10 [style = solid, label="i"];
6->21 [style = solid, label="i"];
4->17 [style = solid, label="expected"];
3->20 [style = bold, label=""];
6->5 [style = bold, label=""];
10->13 [style = bold, label=""];
16->1 [style = bold, label=""];
5->12 [style = bold, label=""];
12->4 [style = bold, label=""];
7->2 [style = bold, label=""];
2->15 [style = bold, label=""];
25->26 [style = bold, label=""];
11->14 [style = solid, label="i"];
15->2 [style = solid, label="i"];
26->5 [style = solid, label="expectedMaxSize"];
9->3 [style = bold, label=""];
8->25 [style = dashed, label="0"];
5->21 [style = dotted, label="true"];
14->9 [style = bold, label=""];
13->14 [style = solid, label="i"];
12->23 [style = bold, label=""];
4->23 [style = dashed, label="0"];
13->14 [style = bold, label=""];
15->7 [style = solid, label="i"];
0->7 [style = solid, label="i"];
0->2 [style = solid, label="i"];
}
