digraph {
0 [style = filled, label = "rerouteWithAllocateLocalGateway['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "state = client().admin().cluster().prepareReroute().setExplain(randomBoolean()).add(new AllocateEmptyPrimaryAllocationCommand(\"test\",0,node_1,true)).setDryRun(true).execute().actionGet().getState()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "logger.info(\"- get the state, verify shard 1 primary allocated\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(state.getRoutingNodes().node(state.nodes().resolveNode(node_1).getId()).iterator().next().state(),equalTo(ShardRoutingState.INITIALIZING))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "randomBoolean()@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(state.getRoutingNodes().unassigned().size(),equalTo(1))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertThat(state.getRoutingNodes().unassigned().size(),equalTo(2))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final String node_1 = nodesIds.get(0)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(state.getRoutingNodes().node(state.nodes().resolveNode(node_1).getId()).iterator().next().state(),equalTo(ShardRoutingState.STARTED))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "client().admin().indices().prepareClose(\"test\").get()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "ClusterHealthResponse healthResponse = client().admin().cluster().prepareHealth().setIndices(\"test\").setWaitForEvents(Priority.LANGUID).setWaitForYellowStatus().execute().actionGet()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "client().admin().indices().prepareCreate(\"test\").setWaitForActiveShards(ActiveShardCount.NONE).setSettings(Settings.builder().put(\"index.number_of_shards\",1)).execute().actionGet()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "logger.info(\"- get the state, verify shard 1 primary moved from node1 to node2\")@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(healthResponse.isTimedOut(),equalTo(false))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(state.getRoutingNodes().unassigned().size(),equalTo(2))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "state = client().admin().cluster().prepareState().execute().actionGet().getState()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "state = client().admin().cluster().prepareState().execute().actionGet().getState()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(state.getRoutingNodes().node(state.nodes().resolveNode(node_1).getId()).iterator().next().state(),equalTo(ShardRoutingState.INITIALIZING))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "rerouteWithAllocateLocalGateway['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "assertThat(state.getRoutingNodes().node(state.nodes().resolveNode(node_2).getId()).iterator().next().state(),equalTo(ShardRoutingState.INITIALIZING))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "ClusterState state = client().admin().cluster().prepareState().execute().actionGet().getState()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "rerouteWithCommands['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "healthResponse = client().admin().cluster().prepareHealth().setIndices(\"test\").setWaitForEvents(Priority.LANGUID).setWaitForYellowStatus().setWaitForNoRelocatingShards(true).execute().actionGet()@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "logger.info(\"- explicitly allocate shard 1, *under dry_run*\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertThat(state.getRoutingNodes().unassigned().size(),equalTo(1))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final String node_2 = nodesIds.get(1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "logger.info(\"- explicitly allocate shard 1, actually allocating, no dry run\")@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "state = client().admin().cluster().prepareReroute().setExplain(randomBoolean()).add(new MoveAllocationCommand(\"test\",0,node_1,node_2)).execute().actionGet().getState()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertThat(state.getRoutingNodes().node(state.nodes().resolveNode(node_2).getId()).iterator().next().state(),equalTo(ShardRoutingState.STARTED))@@@39@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertThat(state.getRoutingNodes().node(state.nodes().resolveNode(node_1).getId()).iterator().next().state(),equalTo(ShardRoutingState.RELOCATING))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "state = client().admin().cluster().prepareReroute().setExplain(randomBoolean()).add(new AllocateEmptyPrimaryAllocationCommand(\"test\",0,node_1,true)).execute().actionGet().getState()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "state = client().admin().cluster().prepareState().execute().actionGet().getState()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertThat(healthResponse.isTimedOut(),equalTo(false))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(state.getRoutingNodes().unassigned().size(),equalTo(1))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "logger.info(\"- move shard 1 primary from node1 to node2\")@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "List<String> nodesIds = internalCluster().startNodes(2,commonSettings)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Settings commonSettings@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "logger.info(\"- create an index with 1 shard, 1 replica, nothing should allocate\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "logger.info(\"- get the state, verify nothing changed because of the dry run\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertThat(state.getRoutingNodes().unassigned().size(),equalTo(1))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29->9 [style = bold, label=""];
7->23 [style = bold, label=""];
0->1 [style = dotted, label="true"];
23->19 [style = bold, label=""];
35->4 [style = bold, label=""];
24->33 [style = bold, label=""];
41->30 [style = bold, label=""];
15->38 [style = bold, label=""];
25->10 [style = bold, label=""];
39->35 [style = bold, label=""];
23->19 [style = dotted, label="true"];
28->26 [style = bold, label=""];
31->32 [style = solid, label="commonSettings"];
10->8 [style = bold, label=""];
38->41 [style = bold, label=""];
36->22 [style = bold, label=""];
6->24 [style = bold, label=""];
23->11 [style = bold, label=""];
12->31 [style = dotted, label="true"];
30->25 [style = bold, label=""];
13->34 [style = bold, label=""];
33->28 [style = bold, label=""];
32->21 [style = bold, label=""];
18->40 [style = solid, label="state"];
9->6 [style = bold, label=""];
8->18 [style = bold, label=""];
27->40 [style = bold, label=""];
12->32 [style = bold, label=""];
37->17 [style = bold, label=""];
20->13 [style = bold, label=""];
38->41 [style = solid, label="state"];
19->11 [style = bold, label=""];
22->14 [style = bold, label=""];
3->2 [style = dotted, label="true"];
21->5 [style = bold, label=""];
9->24 [style = solid, label="state"];
11->36 [style = bold, label=""];
16->7 [style = bold, label=""];
4->15 [style = bold, label=""];
38->30 [style = solid, label="state"];
18->27 [style = bold, label=""];
39->4 [style = solid, label="state"];
5->16 [style = bold, label=""];
34->37 [style = bold, label=""];
14->20 [style = bold, label=""];
17->29 [style = bold, label=""];
26->39 [style = bold, label=""];
14->13 [style = solid, label="state"];
}
