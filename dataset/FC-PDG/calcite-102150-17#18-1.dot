digraph {
23 [style = filled, label = "ParameterExpression parameter = Expressions.parameter(javaRowClass,\"v\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final ParameterExpression parameterO1 = Expressions.parameter(,\"o1\")@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final Expression selector@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "selector = Expressions.call(BuiltInMethod.IDENTITY_SELECTOR.method)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "final int index = fieldCollation.getFieldIndex()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "RelDataType fieldType = rowType.getFieldList() == null || rowType.getFieldList().isEmpty()? rowType: rowType.getFieldList().get(collation.getFieldIndex()).getType()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "EnumerableRules.BRIDGE_METHODS@@@36@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "final boolean descending = fieldCollation.getDirection() == RelFieldCollation.Direction.DESCENDING@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Expression fieldComparator = generateCollatorExpression(fieldType.getCollation())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final int mod = collations.size() == 1? Modifier.FINAL: 0@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "RelFieldCollation collation = collations.get(0)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final Expression fieldComparator = generateCollatorExpression(fieldType.getCollation())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final int index = collation.getFieldIndex()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Primitive.flavor(fieldClass(index))@@@16@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "BlockBuilder bridgeBody = new BlockBuilder()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "BlockBuilder bridgeBody = new BlockBuilder()@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "body.add(Expressions.statement(Expressions.assign(parameterC,Expressions.call(,fieldNullable(index)? (nullsFirst != descending? \"compareNullsFirst\": \"compareNullsLast\"): \"compare\",Expressions.list(arg0,arg1).appendIfNotNull(fieldComparator)))))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final ParameterExpression parameterO0 = Expressions.parameter(,\"o0\")@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "return Expressions.new_(,ImmutableList.of(),memberDeclarations)@@@34@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "generateCollationKey['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "body.add(Expressions.return_(null,Expressions.constant(0)))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "arg1 = EnumUtils.convert(arg1,)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "final RelDataType fieldType = rowType.getFieldList().get(index).getType()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "bridgeBody.add(Expressions.return_(null,Expressions.call(Expressions.parameter(,\"this\"),BuiltInMethod.COMPARATOR_COMPARE.method,Expressions.convert_(parameterO0,javaRowClass),Expressions.convert_(parameterO1,javaRowClass))))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "RelCollation collation@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final List<RelFieldCollation> collations@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "memberDeclarations.add(overridingMethodDecl(BuiltInMethod.COMPARATOR_COMPARE.method,ImmutableList.of(parameterO0,parameterO1),bridgeBody.toBlock()))@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final boolean descending = collation.getDirection() == RelFieldCollation.Direction.DESCENDING@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "final ParameterExpression parameterO1 = Expressions.parameter(,\"o1\")@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "body.add(Expressions.declare(mod,parameterC,null))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final List<MemberDeclaration> memberDeclarations = Expressions.list(Expressions.methodDecl(Modifier.PUBLIC,,\"compare\",ImmutableList.of(parameterV0,parameterV1),body.toBlock()))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final boolean nullsFirst = collation.nullDirection == RelFieldCollation.NullDirection.FIRST@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "memberDeclarations.add(overridingMethodDecl(BuiltInMethod.COMPARATOR_COMPARE.method,ImmutableList.of(parameterO0,parameterO1),bridgeBody.toBlock()))@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final List<MemberDeclaration> memberDeclarations = Expressions.list(Expressions.methodDecl(Modifier.PUBLIC,,\"compare\",ImmutableList.of(parameterV0,parameterV1),body.toBlock()))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "return Pair.of(selector,Expressions.new_(,ImmutableList.of(),memberDeclarations))@@@43@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "final List<RelFieldCollation> collations@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "bridgeBody.add(Expressions.return_(null,Expressions.call(Expressions.parameter(,\"this\"),BuiltInMethod.COMPARATOR_COMPARE.method,Expressions.convert_(parameterO0,javaRowClass),Expressions.convert_(parameterO1,javaRowClass))))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Expression arg1 = fieldReference(parameterV1,index)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "body.add(Expressions.ifThen(Expressions.notEqual(parameterC,Expressions.constant(0)),Expressions.return_(null,descending? Expressions.negate(parameterC): parameterC)))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "body.add(Expressions.declare(mod,parameterC,null))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "return Pair.of(selector,Expressions.call(fieldComparator == null? BuiltInMethod.NULLS_COMPARATOR.method: BuiltInMethod.NULLS_COMPARATOR2.method,Expressions.list((Expression)Expressions.constant(collation.nullDirection == RelFieldCollation.NullDirection.FIRST),Expressions.constant(collation.direction == RelFieldCollation.Direction.DESCENDING)).appendIfNotNull(fieldComparator)))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final ParameterExpression parameterO0 = Expressions.parameter(,\"o0\")@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "body.add(Expressions.ifThen(Expressions.notEqual(parameterC,Expressions.constant(0)),Expressions.return_(null,descending? Expressions.negate(parameterC): parameterC)))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "generateCollationKey['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "final ParameterExpression parameterV1 = Expressions.parameter(javaRowClass,\"v1\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "final boolean nullsFirst = fieldCollation.nullDirection == RelFieldCollation.NullDirection.FIRST@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "final Type javaRowClass = Primitive.box(this.javaRowClass)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "final int mod = collation.getFieldCollations().size() == 1? Modifier.FINAL: 0@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Expression arg0 = fieldReference(parameterV0,index)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "EnumerableRules.BRIDGE_METHODS@@@27@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "Expression arg0 = fieldReference(parameterV0,index)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "collations.size() == 1@@@4@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "final ParameterExpression parameterC = Expressions.parameter(,\"c\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "final ParameterExpression parameterV0 = Expressions.parameter(javaRowClass,\"v0\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "selector = Expressions.lambda(,fieldReference(parameter,collation.getFieldIndex()),parameter)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "generateComparator['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "body.add(Expressions.return_(null,Expressions.constant(0)))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "arg0 = EnumUtils.convert(arg0,)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "BlockBuilder body = new BlockBuilder()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->35 [style = bold, label=""];
8->35 [style = solid, label="parameterC"];
41->52 [style = solid, label="parameterV0"];
15->10 [style = bold, label=""];
40->49 [style = bold, label=""];
48->17 [style = solid, label="parameterV1"];
13->16 [style = solid, label="arg1"];
27->44 [style = dotted, label="true"];
48->6 [style = solid, label="parameterV1"];
51->48 [style = solid, label="javaRowClass"];
47->26 [style = solid, label="index"];
8->10 [style = solid, label="parameterC"];
30->50 [style = dashed, label="0"];
49->51 [style = bold, label=""];
23->12 [style = solid, label="parameter"];
27->2 [style = dotted, label="true"];
53->54 [style = bold, label=""];
25->11 [style = dotted, label="true"];
22->30 [style = bold, label=""];
19->24 [style = bold, label=""];
41->48 [style = bold, label=""];
13->17 [style = bold, label=""];
14->21 [style = dotted, label="true"];
29->27 [style = solid, label="arg0"];
14->7 [style = dotted, label="true"];
16->43 [style = bold, label=""];
28->2 [style = solid, label="fieldComparator"];
23->31 [style = solid, label="parameter"];
1->38 [style = dashed, label="0"];
17->27 [style = bold, label=""];
25->19 [style = dotted, label="true"];
43->44 [style = bold, label=""];
8->53 [style = bold, label=""];
17->27 [style = dotted, label="true"];
37->31 [style = solid, label="parameterO0"];
36->6 [style = bold, label=""];
37->19 [style = solid, label="parameterO0"];
3->47 [style = dashed, label="0"];
35->18 [style = bold, label=""];
42->2 [style = bold, label=""];
23->21 [style = solid, label="parameter"];
47->52 [style = solid, label="index"];
57->55 [style = bold, label=""];
16->42 [style = solid, label="parameterO0"];
24->46 [style = dashed, label="0"];
12->11 [style = bold, label=""];
23->6 [style = solid, label="parameter"];
25->12 [style = dotted, label="true"];
27->16 [style = bold, label=""];
30->35 [style = solid, label="descending"];
3->0 [style = bold, label=""];
17->16 [style = dotted, label="true"];
26->53 [style = dotted, label="true"];
25->24 [style = bold, label=""];
27->46 [style = bold, label=""];
16->2 [style = solid, label="parameterO0"];
25->37 [style = bold, label=""];
43->42 [style = solid, label="parameterO1"];
57->58 [style = solid, label="parameterC"];
7->23 [style = bold, label=""];
33->36 [style = bold, label=""];
18->9 [style = bold, label=""];
14->34 [style = dotted, label="true"];
27->42 [style = dotted, label="true"];
14->4 [style = dotted, label="true"];
15->10 [style = solid, label="mod"];
3->17 [style = solid, label="index"];
51->42 [style = solid, label="javaRowClass"];
22->54 [style = dashed, label="0"];
14->4 [style = bold, label=""];
28->29 [style = bold, label=""];
44->42 [style = bold, label=""];
26->8 [style = dotted, label="true"];
6->26 [style = bold, label=""];
56->36 [style = bold, label=""];
8->15 [style = bold, label=""];
35->3 [style = bold, label=""];
47->56 [style = bold, label=""];
39->5 [style = bold, label=""];
36->52 [style = bold, label=""];
25->31 [style = dotted, label="true"];
51->41 [style = solid, label="javaRowClass"];
28->47 [style = bold, label=""];
41->17 [style = solid, label="parameterV0"];
14->23 [style = dotted, label="true"];
26->9 [style = solid, label="parameterV1"];
26->8 [style = bold, label=""];
3->2 [style = solid, label="index"];
30->2 [style = solid, label="descending"];
37->12 [style = bold, label=""];
57->0 [style = solid, label="parameterC"];
11->31 [style = bold, label=""];
7->20 [style = solid, label="fieldComparator"];
57->28 [style = solid, label="parameterC"];
50->0 [style = bold, label=""];
9->24 [style = solid, label="memberDeclarations"];
52->6 [style = bold, label=""];
50->28 [style = solid, label="descending"];
12->31 [style = solid, label="parameterO1"];
12->19 [style = solid, label="parameterO1"];
52->8 [style = solid, label="arg0"];
32->1 [style = dotted, label="true"];
3->29 [style = solid, label="index"];
31->19 [style = bold, label=""];
21->20 [style = solid, label="selector"];
4->34 [style = bold, label=""];
26->13 [style = solid, label="parameterV1"];
6->29 [style = solid, label="parameterV0"];
27->16 [style = dotted, label="true"];
25->37 [style = dotted, label="true"];
6->9 [style = solid, label="parameterV0"];
32->5 [style = bold, label=""];
47->0 [style = solid, label="index"];
2->46 [style = bold, label=""];
27->43 [style = dotted, label="true"];
48->57 [style = bold, label=""];
47->6 [style = solid, label="index"];
8->2 [style = solid, label="parameterC"];
43->2 [style = solid, label="parameterO1"];
39->38 [style = dotted, label="true"];
17->46 [style = solid, label="memberDeclarations"];
34->7 [style = bold, label=""];
23->8 [style = solid, label="parameter"];
10->3 [style = bold, label=""];
28->13 [style = bold, label=""];
33->24 [style = solid, label="selector"];
5->14 [style = bold, label=""];
16->22 [style = bold, label=""];
23->26 [style = solid, label="parameter"];
14->33 [style = bold, label=""];
20->33 [style = bold, label=""];
54->50 [style = bold, label=""];
14->20 [style = dotted, label="true"];
23->37 [style = solid, label="parameter"];
15->55 [style = dashed, label="0"];
58->47 [style = bold, label=""];
21->20 [style = bold, label=""];
23->21 [style = bold, label=""];
9->25 [style = bold, label=""];
9->17 [style = dashed, label="0"];
50->0 [style = solid, label="descending"];
40->45 [style = dotted, label="true"];
30->2 [style = bold, label=""];
36->0 [style = solid, label="fieldComparator"];
51->41 [style = bold, label=""];
55->58 [style = solid, label="mod"];
55->58 [style = bold, label=""];
0->28 [style = bold, label=""];
3->13 [style = solid, label="index"];
6->53 [style = solid, label="arg1"];
29->13 [style = bold, label=""];
}
