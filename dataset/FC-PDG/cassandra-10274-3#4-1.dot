digraph {
21 [style = filled, label = "assertTrue(newInput.contains(range(0,40)))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(1,newInput.size())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(newInput.contains(range(50,100)))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Set<Range<Token>> newInput = RangeDenormalizer.denormalize(range(0,100),incoming)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(3,newInput.size())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Set<Range<Token>> newInput = RangeDenormalizer.denormalize(range(30,40),incoming)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(1,incoming.size())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertTrue(newInput.contains(range(40,50)))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "incoming.put(range(40,50),dummy)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "StreamFromOptions dummy = new StreamFromOptions(null,range(40,50))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertTrue(incoming.containsKey(range(40,100)))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(incoming.containsKey(range(0,30)))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "RangeMap<StreamFromOptions> incoming = new RangeMap<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertTrue(incoming.containsKey(range(40,50)))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "StreamFromOptions dummy = new StreamFromOptions(null,range(0,100))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testDenormalize['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertTrue(incoming.containsKey(range(30,40)))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(3,incoming.size())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertTrue(newInput.contains(range(30,40)))@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "incoming.put(range(0,100),dummy)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testDenormalize2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testDenormalize['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Map<Range<Token>,StreamFromOptions> incoming = new HashMap<>()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
6->21 [style = dashed, label="0"];
16->13 [style = bold, label=""];
8->16 [style = dashed, label="0"];
22->15 [style = bold, label=""];
0->16 [style = solid, label="incoming"];
4->17 [style = dashed, label="0"];
7->12 [style = bold, label=""];
1->19 [style = dashed, label="0"];
7->0 [style = bold, label=""];
0->12 [style = dashed, label="0"];
2->10 [style = bold, label=""];
17->19 [style = bold, label=""];
9->6 [style = bold, label=""];
10->18 [style = dashed, label="0"];
6->4 [style = bold, label=""];
20->16 [style = bold, label=""];
8->2 [style = bold, label=""];
15->20 [style = solid, label="dummy"];
2->13 [style = dashed, label="0"];
3->8 [style = bold, label=""];
15->0 [style = bold, label=""];
3->20 [style = dashed, label="0"];
7->15 [style = dashed, label="0"];
5->7 [style = bold, label=""];
0->20 [style = bold, label=""];
10->9 [style = bold, label=""];
4->1 [style = bold, label=""];
12->3 [style = bold, label=""];
0->8 [style = solid, label="incoming"];
21->17 [style = bold, label=""];
18->14 [style = bold, label=""];
7->3 [style = solid, label="dummy"];
14->21 [style = bold, label=""];
11->7 [style = bold, label=""];
13->18 [style = bold, label=""];
12->8 [style = solid, label="incoming"];
}
