digraph {
21 [style = filled, label = "Assert.assertEquals(DEFAULT_COMPACTION_STATE,segments.get(i).getLastCompactionState())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int i = 0@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(TEST_ROWS,rowsFromSegment)@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "i++@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(3,segments.size())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "runIndexTask()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testRunCompactionTwice['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "Assert.assertEquals(getDefaultCompactionState(Granularities.HOUR,Granularities.NONE,ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1))),segments.get(i).getLastCompactionState())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "final Builder builder = new Builder(DATA_SOURCE,segmentLoaderFactory,RETRY_POLICY_FACTORY)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "List<DataSegment> segments = resultPair.rhs@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "i < 3@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final Pair<TaskStatus,List<DataSegment>> resultPair = runTask(compactionTask)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "i++@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1),segments.get(i).getInterval())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID,0,2,(short)1,(short)1),segments.get(i).getShardSpec())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final List<DataSegment> segments = resultPair.rhs@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "lockGranularity == LockGranularity.SEGMENT@@@15@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "resultPair = runTask(compactionTask2)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testRunWithDynamicPartitioning['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertTrue(resultPair.lhs.isSuccess())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(new NumberedShardSpec(0,1),segments.get(i).getShardSpec())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertTrue(resultPair.lhs.isSuccess())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "final CompactionTask compactionTask = builder.interval(Intervals.of(\"2014-01-01/2014-01-02\")).build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(getDefaultCompactionState(Granularities.HOUR,Granularities.NONE,ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1))),segments.get(i).getLastCompactionState())@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Assert.assertEquals(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1),segments.get(i).getInterval())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Pair<TaskStatus,List<DataSegment>> resultPair = runTask(compactionTask1)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "List<String> rowsFromSegment = getCSVFormatRowsFromSegments(segments)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(DEFAULT_COMPACTION_STATE,segments.get(i).getLastCompactionState())@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "i < 3@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(new NumberedShardSpec(0,1),segments.get(i).getShardSpec())@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(3,segments.size())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final CompactionTask compactionTask2 = builder.interval(Intervals.of(\"2014-01-01/2014-01-02\")).build()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final CompactionTask compactionTask1 = builder.interval(Intervals.of(\"2014-01-01/2014-01-02\")).build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "lockGranularity == LockGranularity.SEGMENT@@@32@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(new NumberedOverwriteShardSpec(32768,0,2,(short)1,(short)1),segments.get(i).getShardSpec())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "segments = resultPair.rhs@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "int i = 0@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testRunCompactionTwice['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 1,0,2,(short)2,(short)1),segments.get(i).getShardSpec())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->31 [style = solid, label="i"];
0->20 [style = dotted, label="false"];
10->31 [style = dotted, label="true"];
10->35 [style = bold, label=""];
3->15 [style = solid, label="i"];
6->34 [style = dashed, label="0"];
9->16 [style = bold, label=""];
14->7 [style = bold, label=""];
7->13 [style = solid, label="i"];
15->30 [style = dotted, label="true"];
30->11 [style = bold, label=""];
15->8 [style = dotted, label="true"];
0->24 [style = dotted, label="true"];
0->24 [style = bold, label=""];
2->15 [style = bold, label=""];
8->30 [style = dashed, label="0"];
3->30 [style = solid, label="i"];
8->11 [style = bold, label=""];
4->3 [style = bold, label=""];
25->28 [style = bold, label=""];
21->0 [style = bold, label=""];
2->19 [style = solid, label="i"];
16->26 [style = bold, label=""];
7->31 [style = solid, label="i"];
27->31 [style = bold, label=""];
38->33 [style = solid, label="compactionTask"];
23->3 [style = bold, label=""];
34->35 [style = solid, label="segments"];
2->3 [style = solid, label="i"];
1->17 [style = bold, label=""];
15->3 [style = dotted, label="true"];
10->25 [style = bold, label=""];
0->37 [style = dotted, label="true"];
5->33 [style = dashed, label="0"];
7->27 [style = solid, label="i"];
10->0 [style = dotted, label="true"];
0->20 [style = bold, label=""];
34->14 [style = bold, label=""];
25->28 [style = solid, label="compactionTask2"];
37->13 [style = bold, label=""];
38->33 [style = bold, label=""];
29->16 [style = bold, label=""];
24->13 [style = bold, label=""];
13->10 [style = bold, label=""];
20->13 [style = bold, label=""];
22->2 [style = bold, label=""];
31->0 [style = bold, label=""];
3->19 [style = solid, label="i"];
11->4 [style = bold, label=""];
2->30 [style = solid, label="i"];
33->12 [style = bold, label=""];
32->16 [style = bold, label=""];
15->19 [style = bold, label=""];
7->10 [style = solid, label="i"];
21->31 [style = dashed, label="0"];
13->10 [style = solid, label="i"];
24->37 [style = dashed, label="0"];
10->13 [style = dotted, label="true"];
13->27 [style = solid, label="i"];
15->11 [style = dotted, label="true"];
35->36 [style = solid, label="rowsFromSegment"];
27->21 [style = bold, label=""];
0->37 [style = bold, label=""];
7->10 [style = bold, label=""];
10->27 [style = bold, label=""];
11->23 [style = dotted, label="true"];
12->34 [style = bold, label=""];
3->15 [style = bold, label=""];
28->1 [style = bold, label=""];
17->22 [style = bold, label=""];
12->6 [style = bold, label=""];
18->38 [style = dashed, label="0"];
2->15 [style = solid, label="i"];
19->8 [style = bold, label=""];
6->14 [style = bold, label=""];
26->38 [style = bold, label=""];
11->4 [style = dotted, label="false"];
5->12 [style = bold, label=""];
15->19 [style = dotted, label="true"];
18->5 [style = bold, label=""];
18->5 [style = solid, label="compactionTask1"];
10->27 [style = dotted, label="true"];
35->36 [style = bold, label=""];
10->21 [style = dotted, label="true"];
11->23 [style = bold, label=""];
26->18 [style = bold, label=""];
19->30 [style = bold, label=""];
}
