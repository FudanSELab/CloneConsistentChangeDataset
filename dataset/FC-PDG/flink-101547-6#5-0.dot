digraph {
31 [style = filled, label = "Assert.assertTrue(TempMode.CACHED == neighborsJoin.getInput2().getTempMode())@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "OptimizerPlanNodeResolver or = getOptimizerPlanNodeResolver(optPlan)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "checkStandardStrategies['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "SingleInputPlanNode map@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "DualInputPlanNode join@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "Assert.assertEquals(LocalStrategy.SORT,neighborsJoin.getInput2().getLocalStrategy())@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Assert.assertEquals(LocalStrategy.SORT,cogroup.getInput1().getLocalStrategy())@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(ShipStrategyType.FORWARD,sink.getInput().getShipStrategy())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "SinkPlanNode sink@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "DualInputPlanNode neighborsJoin = or.getNode(JOIN_NEIGHBORS_MATCH)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Assert.assertEquals(DriverStrategy.NONE,edgesSource.getDriverStrategy())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "SingleInputPlanNode map@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
64 [style = filled, label = "Assert.assertEquals(LocalStrategy.NONE,cogroup.getInput2().getLocalStrategy())@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(set0,cogroup.getKeysForInput1())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(DriverStrategy.SORTED_GROUP_REDUCE,reducer.getDriverStrategy())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Assert.assertEquals(DriverStrategy.NONE,vertexSource.getDriverStrategy())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "Assert.assertEquals(ShipStrategyType.PARTITION_HASH,cogroup.getInput1().getShipStrategy())@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(LocalStrategy.NONE,combiner.getInput().getLocalStrategy())@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "Assert.assertEquals(ShipStrategyType.PARTITION_HASH,neighborsJoin.getInput2().getShipStrategy())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "Assert.assertEquals(LocalStrategy.NONE,neighborsJoin.getInput1().getLocalStrategy())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(DriverStrategy.NONE,sink.getDriverStrategy())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "DualInputPlanNode cogroup = or.getNode(MIN_ID_AND_UPDATE)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "jgg.compileJobGraph(optPlan)@@@48@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "SourcePlanNode edgesSource = or.getNode(EDGES_SOURCE)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "testWorksetConnectedComponents['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "JobGraphGenerator jgg = new JobGraphGenerator()@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "combiner != null@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(LocalStrategy.SORT,iter.getInitialWorksetInput().getLocalStrategy())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "SinkPlanNode sink = or.getNode(SINK)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Assert.assertEquals(LocalStrategy.NONE,sink.getInput().getLocalStrategy())@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "SinkPlanNode sink@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "SourcePlanNode vertexSource = or.getNode(VERTEX_SOURCE)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "Assert.assertEquals(LocalStrategy.NONE,iter.getInitialSolutionSetInput().getLocalStrategy())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "Assert.assertEquals(set0,neighborsJoin.getInput2().getShipStrategyKeys())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "ConnectedComponentsWithCoGroup cc = new ConnectedComponentsWithCoGroup()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Plan plan = cc.getPlan(String.valueOf(DEFAULT_PARALLELISM),IN_FILE,IN_FILE,OUT_FILE,String.valueOf(100))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(ShipStrategyType.FORWARD,map.getInput().getShipStrategy())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "Assert.assertEquals(set0,iter.getInitialWorksetInput().getShipStrategyKeys())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Assert.assertEquals(ShipStrategyType.FORWARD,cogroup.getInput2().getShipStrategy())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertEquals(DriverStrategy.CO_GROUP,cogroup.getDriverStrategy())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertEquals(ShipStrategyType.FORWARD,neighborsJoin.getInput1().getShipStrategy())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Assert.assertTrue(neighborsJoin.getInput2().getTempMode().isCached())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Assert.assertEquals(set0,iter.getInitialSolutionSetInput().getShipStrategyKeys())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "DualInputPlanNode join@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
42 [style = filled, label = "Assert.assertEquals(ShipStrategyType.PARTITION_HASH,iter.getInitialWorksetInput().getShipStrategy())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "SingleInputPlanNode combiner@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
56 [style = filled, label = "WorksetIterationPlanNode iter = or.getNode(ITERATION_NAME)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(DriverStrategy.NONE,sink.getDriverStrategy())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "SingleInputPlanNode combiner@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Assert.assertEquals(set0,cogroup.getKeysForInput2())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "plan.setExecutionConfig(new ExecutionConfig())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertEquals(ShipStrategyType.FORWARD,sink.getInput().getShipStrategy())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "SingleInputPlanNode reducer@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(DriverStrategy.COLLECTOR_MAP,map.getDriverStrategy())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
55 [style = filled, label = "Assert.assertEquals(DriverStrategy.INNER_MERGE,neighborsJoin.getDriverStrategy())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "Assert.assertEquals(ShipStrategyType.PARTITION_HASH,iter.getInitialSolutionSetInput().getShipStrategy())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "checkStandardStrategies['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "Assert.assertEquals(DriverStrategy.FLAT_MAP,map.getDriverStrategy())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
62 [style = filled, label = "Assert.assertEquals(set0,neighborsJoin.getKeysForInput1())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "PRINT_PLAN@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(DriverStrategy.SORTED_GROUP_COMBINE,combiner.getDriverStrategy())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "String json = dumper.getOptimizerPlanAsJSON(optPlan)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "OptimizedPlan optPlan = compileNoStats(plan)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "Assert.assertEquals(set0,neighborsJoin.getKeysForInput2())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "System.out.println(json)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45->41 [style = bold, label=""];
4->3 [style = bold, label=""];
54->56 [style = bold, label=""];
1->55 [style = dashed, label="0"];
24->44 [style = solid, label="optPlan"];
23->51 [style = bold, label=""];
38->24 [style = bold, label=""];
41->55 [style = bold, label=""];
48->29 [style = bold, label=""];
8->19 [style = bold, label=""];
34->49 [style = bold, label=""];
65->43 [style = bold, label=""];
55->62 [style = bold, label=""];
26->36 [style = bold, label=""];
51->21 [style = bold, label=""];
57->26 [style = bold, label=""];
25->24 [style = solid, label="plan"];
59->40 [style = bold, label=""];
27->44 [style = bold, label=""];
22->32 [style = bold, label=""];
58->60 [style = bold, label=""];
8->6 [style = bold, label=""];
29->23 [style = dotted, label="true"];
29->23 [style = bold, label=""];
5->12 [style = dotted, label="true"];
47->63 [style = bold, label=""];
62->57 [style = bold, label=""];
7->8 [style = bold, label=""];
32->30 [style = bold, label=""];
39->65 [style = bold, label=""];
46->37 [style = bold, label=""];
14->13 [style = dotted, label="true"];
49->50 [style = bold, label=""];
20->33 [style = bold, label=""];
35->52 [style = bold, label=""];
14->7 [style = bold, label=""];
14->16 [style = dotted, label="true"];
14->17 [style = dotted, label="true"];
3->10 [style = bold, label=""];
51->21 [style = solid, label="json"];
6->4 [style = bold, label=""];
29->20 [style = bold, label=""];
36->46 [style = bold, label=""];
64->31 [style = bold, label=""];
5->11 [style = dotted, label="true"];
42->61 [style = bold, label=""];
21->20 [style = bold, label=""];
24->51 [style = solid, label="optPlan"];
52->25 [style = bold, label=""];
5->13 [style = dotted, label="true"];
31->27 [style = bold, label=""];
14->15 [style = dotted, label="true"];
0->41 [style = dashed, label="0"];
18->10 [style = solid, label="combiner"];
50->47 [style = bold, label=""];
0->1 [style = bold, label=""];
37->59 [style = bold, label=""];
10->0 [style = bold, label=""];
6->19 [style = dashed, label="0"];
56->22 [style = bold, label=""];
5->9 [style = dotted, label="true"];
5->7 [style = bold, label=""];
10->0 [style = dotted, label="true"];
24->48 [style = solid, label="optPlan"];
29->21 [style = dotted, label="true"];
19->4 [style = bold, label=""];
10->1 [style = dotted, label="true"];
63->53 [style = bold, label=""];
9->10 [style = solid, label="combiner"];
28->58 [style = bold, label=""];
53->64 [style = bold, label=""];
33->54 [style = bold, label=""];
43->34 [style = bold, label=""];
61->28 [style = bold, label=""];
60->39 [style = bold, label=""];
40->42 [style = bold, label=""];
24->48 [style = bold, label=""];
14->18 [style = dotted, label="true"];
29->51 [style = dotted, label="true"];
30->45 [style = bold, label=""];
5->2 [style = dotted, label="true"];
25->38 [style = bold, label=""];
}
