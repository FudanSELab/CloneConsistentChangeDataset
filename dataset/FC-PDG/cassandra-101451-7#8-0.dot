digraph {
16 [style = filled, label = "neighbors.addAll(ActiveRepairService.getNeighbors(KEYSPACE5,ranges,range,null,null))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "neighbors.addAll(ActiveRepairService.getNeighbors(KEYSPACE5,ranges,range,null,null))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "testGetNeighborsTimesTwo['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Collection<Range<Token>> ranges = StorageService.instance.getLocalRanges(KEYSPACE5)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Set<InetAddressAndPort> neighbors = new HashSet<>()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testGetNeighborsPlusOne['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "expected.remove(FBUtilities.getBroadcastAddressAndPort())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Set<InetAddressAndPort> expected = addTokens(1 + Keyspace.open(KEYSPACE5).getReplicationStrategy().getReplicationFactor())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "neighbors.addAll(ActiveRepairService.getNeighbors(KEYSPACE5,ranges,range,null,null).endpoints())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "expected.remove(FBUtilities.getBroadcastAddressAndPort())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "expected.addAll(ars.getRangeAddresses(tmd.cloneOnlyTokenMap()).get(replicaRange))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(expected,neighbors)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Set<InetAddressAndPort> expected = new HashSet<>()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Set<InetAddressAndPort> neighbors = new HashSet<>()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "AbstractReplicationStrategy ars = Keyspace.open(KEYSPACE5).getReplicationStrategy()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "addTokens(2 * Keyspace.open(KEYSPACE5).getReplicationStrategy().getReplicationFactor())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "TokenMetadata tmd = StorageService.instance.getTokenMetadata()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Iterable<Range<Token>> ranges = StorageService.instance.getLocalReplicas(KEYSPACE5).ranges()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "testGetNeighborsPlusOne['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Set<InetAddressAndPort> expected = addTokens(1 + Keyspace.open(KEYSPACE5).getReplicationStrategy().getReplicationFactor().allReplicas)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Collection<Range<Token>> ranges = StorageService.instance.getLocalRanges(KEYSPACE5)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->8 [style = bold, label=""];
19->18 [style = bold, label=""];
9->0 [style = bold, label=""];
4->6 [style = bold, label=""];
13->14 [style = solid, label="neighbors"];
12->16 [style = solid, label="ranges"];
3->7 [style = dashed, label="0"];
0->12 [style = bold, label=""];
2->3 [style = bold, label=""];
1->9 [style = dashed, label="0"];
8->6 [style = bold, label=""];
1->0 [style = bold, label=""];
10->7 [style = bold, label=""];
13->16 [style = bold, label=""];
17->19 [style = bold, label=""];
11->15 [style = bold, label=""];
7->0 [style = solid, label="expected"];
3->0 [style = solid, label="expected"];
6->1 [style = bold, label=""];
12->13 [style = bold, label=""];
18->20 [style = bold, label=""];
11->14 [style = solid, label="expected"];
3->5 [style = bold, label=""];
7->5 [style = bold, label=""];
6->0 [style = solid, label="neighbors"];
15->0 [style = bold, label=""];
5->4 [style = bold, label=""];
4->8 [style = dashed, label="0"];
4->1 [style = solid, label="ranges"];
16->14 [style = bold, label=""];
6->9 [style = bold, label=""];
20->11 [style = bold, label=""];
}
