digraph {
8 [style = filled, label = "TimeseriesQuery query = makeTimeseriesQuery()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "QueryRunner runner = TestQueryRunners.makeTimeSeriesQueryRunner(segment3)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "TestHelper.assertExpectedResults(expectedResults,runner.run(QueryPlus.wrap(query)))@@@6@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testTimeSeries2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testRowFiltering['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "testRowFiltering['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "List<Result<TimeseriesResultValue>> expectedResults = Collections.singletonList(new Result<TimeseriesResultValue>(DateTimes.of(\"2011-01-12T00:00:00.000Z\"),new TimeseriesResultValue(ImmutableMap.builder().put(\"rows\",7L).put(\"index\",500.0D).put(\"addRowsIndexConstant\",508.0D).put(\"uniques\",0.0D).put(\"maxIndex\",100.0D).put(\"minIndex\",0.0D).build())))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "QueryRunner runner = TestQueryRunners.makeTimeSeriesQueryRunner(segment2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(dataSource).granularity(allGran).intervals(fullOnInterval).filters(marketDimension,\"breakstuff\").aggregators(Lists.newArrayList(Iterables.concat(commonAggregators,Lists.newArrayList(new DoubleMaxAggregatorFactory(\"maxIndex\",\"index\"),new DoubleMinAggregatorFactory(\"minIndex\",\"index\"))))).postAggregators(addRowsIndexConstant).build()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(dataSource).granularity(ALL_GRAN).intervals(fullOnInterval).filters(marketDimension,\"breakstuff\").aggregators(Lists.newArrayList(Iterables.concat(commonAggregators,Lists.newArrayList(new DoubleMaxAggregatorFactory(\"maxIndex\",\"index\"),new DoubleMinAggregatorFactory(\"minIndex\",\"index\"))))).postAggregators(addRowsIndexConstant).build()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "List<Result<TimeseriesResultValue>> expectedResults = Collections.singletonList(new Result<TimeseriesResultValue>(DateTimes.of(\"2011-01-12T00:00:00.000Z\"),new TimeseriesResultValue(ImmutableMap.builder().put(\"rows\",5L).put(\"index\",500.0D).put(\"addRowsIndexConstant\",506.0D).put(\"uniques\",0.0D).put(\"maxIndex\",100.0D).put(\"minIndex\",100.0D).build())))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
5->3 [style = bold, label=""];
7->9 [style = bold, label=""];
6->1 [style = bold, label=""];
8->10 [style = bold, label=""];
2->4 [style = solid, label="query"];
5->4 [style = solid, label="query"];
1->2 [style = bold, label=""];
8->4 [style = solid, label="query"];
2->5 [style = dashed, label="0"];
9->4 [style = solid, label="expectedResults"];
1->9 [style = dashed, label="0"];
3->10 [style = dashed, label="0"];
9->8 [style = bold, label=""];
3->4 [style = bold, label=""];
0->1 [style = bold, label=""];
1->4 [style = solid, label="expectedResults"];
2->3 [style = bold, label=""];
10->4 [style = bold, label=""];
}
