digraph {
14 [style = filled, label = "assertNull(queryExecutor.getResponseType())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(actual.isEmpty())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "when(textProtocolBackendHandler.execute()).thenReturn(new UpdateResponseHeader(mock()))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertThat(queryExecutor.getResponseType(),is(ResponseType.UPDATE))@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Collection<DatabasePacket<?>> actual = queryExecutor.execute()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertExecuteUpdate['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "verify(queryResponseHeader).getQueryHeaders()@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "QueryResponseHeader queryResponseHeader = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "UpdateResponseHeader updateResponseHeader = mock()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Collection<DatabasePacket<?>> actual = queryExecutor.execute()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "when(textProtocolBackendHandler.execute()).thenReturn(updateResponseHeader)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertExecuteQueryAndReturnEmptyResult['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertExecuteUpdate['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(actual.iterator().next(),is(instanceOf()))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "when(textProtocolBackendHandler.execute()).thenReturn(queryResponseHeader)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(queryExecutor.getResponseType(),is(ResponseType.UPDATE))@@@8@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15->2 [style = bold, label=""];
10->15 [style = bold, label=""];
11->14 [style = bold, label=""];
4->6 [style = bold, label=""];
3->5 [style = solid, label="updateResponseHeader"];
1->3 [style = bold, label=""];
10->15 [style = solid, label="queryResponseHeader"];
6->0 [style = bold, label=""];
9->7 [style = bold, label=""];
2->4 [style = bold, label=""];
5->2 [style = bold, label=""];
3->5 [style = bold, label=""];
12->10 [style = bold, label=""];
3->9 [style = dashed, label="0"];
7->2 [style = bold, label=""];
8->9 [style = bold, label=""];
3->10 [style = dashed, label="0"];
14->13 [style = bold, label=""];
4->11 [style = dashed, label="0"];
5->15 [style = dashed, label="0"];
2->11 [style = bold, label=""];
}
