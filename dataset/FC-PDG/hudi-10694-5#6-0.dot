digraph {
6 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY.key(),\"_row_key,timestamp\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(keyGenerator.getRecordKeyFields().size(),1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assertions.assertEquals(compositeKeyGenerator.getPartitionPath(row),partitionPath)@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "ComplexKeyGenerator compositeKeyGenerator = new ComplexKeyGenerator(properties)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(keyGenerator.getPartitionPathFields().size(),0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testSingleValueKeyGeneratorNonPartitioned['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "TypedProperties properties = new TypedProperties()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY.key(),\"rider,driver\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "NonpartitionedKeyGenerator keyGenerator = new NonpartitionedKeyGenerator(properties)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(partitionPath,hoodieKey.getPartitionPath())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(compositeKeyGenerator.getRecordKeyFields().size(),2)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY.key(),\"timestamp\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assertions.assertEquals(compositeKeyGenerator.getPartitionPath(internalRow,row.schema()),partitionPath)@@@19@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertEquals(compositeKeyGenerator.getPartitionPathFields().size(),2)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"\",hoodieKey.getPartitionPath())@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "GenericRecord record = dataGenerator.generateGenericRecords(1).get(0)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testMultipleValueKeyGenerator['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "String rowKey = \"_row_key\" + ComplexAvroKeyGenerator.DEFAULT_RECORD_KEY_SEPARATOR + record.get(\"_row_key\").toString() + \",\" + \"timestamp\" + ComplexAvroKeyGenerator.DEFAULT_RECORD_KEY_SEPARATOR + record.get(\"timestamp\").toString()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "HoodieKey hoodieKey = keyGenerator.getKey(record)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "HoodieKey hoodieKey = compositeKeyGenerator.getKey(record)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Row row = KeyGeneratorTestUtilities.getRow(record,HoodieTestDataGenerator.AVRO_SCHEMA,AvroConversionUtils.convertAvroSchemaToStructType(HoodieTestDataGenerator.AVRO_SCHEMA))@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "String rowKey = record.get(\"timestamp\").toString()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "String partitionPath = record.get(\"rider\").toString() + \"/\" + record.get(\"driver\").toString()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(rowKey,hoodieKey.getRecordKey())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY.key(),\"\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "InternalRow internalRow = KeyGeneratorTestUtilities.getInternalRow(row)@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "testMultipleValueKeyGenerator['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12->7 [style = bold, label=""];
4->6 [style = bold, label=""];
11->4 [style = bold, label=""];
3->14 [style = solid, label="partitionPath"];
7->8 [style = bold, label=""];
18->17 [style = solid, label="internalRow"];
10->2 [style = bold, label=""];
14->18 [style = bold, label=""];
7->13 [style = solid, label="record"];
4->1 [style = solid, label="properties"];
8->10 [style = solid, label="rowKey"];
25->10 [style = bold, label=""];
6->0 [style = bold, label=""];
15->4 [style = bold, label=""];
2->10 [style = dashed, label="0"];
1->21 [style = dashed, label="0"];
16->14 [style = solid, label="row"];
5->27 [style = dashed, label="0"];
5->9 [style = bold, label=""];
19->23 [style = bold, label=""];
7->20 [style = bold, label=""];
3->13 [style = bold, label=""];
0->1 [style = bold, label=""];
8->3 [style = bold, label=""];
7->26 [style = solid, label="record"];
23->21 [style = bold, label=""];
26->25 [style = bold, label=""];
27->24 [style = bold, label=""];
0->23 [style = dashed, label="0"];
4->19 [style = bold, label=""];
7->16 [style = solid, label="record"];
3->17 [style = solid, label="partitionPath"];
4->21 [style = solid, label="properties"];
16->14 [style = bold, label=""];
16->18 [style = solid, label="row"];
22->4 [style = bold, label=""];
3->2 [style = solid, label="partitionPath"];
20->25 [style = solid, label="rowKey"];
21->27 [style = bold, label=""];
2->16 [style = bold, label=""];
18->17 [style = bold, label=""];
24->12 [style = bold, label=""];
6->19 [style = dashed, label="0"];
13->10 [style = bold, label=""];
20->26 [style = bold, label=""];
9->24 [style = dashed, label="0"];
9->12 [style = bold, label=""];
1->5 [style = bold, label=""];
}
