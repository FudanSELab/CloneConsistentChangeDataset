digraph {
1 [style = filled, label = "PropertyResolver resolver@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "LogFile logFile = LogFile.get(resolver)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(properties.getProperty(LoggingSystemProperties.LOG_PATH)).isEqualTo(\"logpath\")@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testLoggingPath['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testLoggingFile['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(properties.getProperty(LoggingSystemProperties.LOG_FILE)).isEqualTo(\"logpath/spring.log\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testLoggingPath['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertThat(logFile.toString()).isEqualTo(\"log.file\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(logFile.toString()).isEqualTo(\"logpath\" + File.separatorChar + \"spring.log\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertThat(logFile.toString()).isEqualTo(\"logpath/spring.log\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "Properties properties = new Properties()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "PropertyResolver resolver@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "logFile.applyTo(properties)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(properties.getProperty(LoggingSystemProperties.LOG_PATH)).isNull()@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(properties.getProperty(LoggingSystemProperties.LOG_FILE)).isEqualTo(\"log.file\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10->14 [style = bold, label=""];
4->6 [style = bold, label=""];
9->2 [style = bold, label=""];
2->3 [style = bold, label=""];
11->13 [style = dotted, label="true"];
11->2 [style = bold, label=""];
3->0 [style = bold, label=""];
6->12 [style = dashed, label="0"];
1->13 [style = dashed, label="0"];
0->10 [style = bold, label=""];
5->10 [style = dashed, label="0"];
7->2 [style = bold, label=""];
14->12 [style = bold, label=""];
5->4 [style = bold, label=""];
0->8 [style = bold, label=""];
9->1 [style = dotted, label="true"];
13->2 [style = solid, label="resolver"];
5->8 [style = dashed, label="0"];
4->14 [style = dashed, label="0"];
8->4 [style = bold, label=""];
3->0 [style = solid, label="properties"];
7->1 [style = dotted, label="true"];
1->2 [style = solid, label="resolver"];
0->5 [style = bold, label=""];
}
