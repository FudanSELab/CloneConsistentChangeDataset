digraph {
26 [style = filled, label = "testTimeProvider.setCurrentTime(2000)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(operator,new ExecutionConfig(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",3),2999))@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "testHarness.setProcessingTime(2000)@@@18@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),Long.MAX_VALUE))@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),Long.MAX_VALUE))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "testProcessingTimeSlidingWindows['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),Long.MAX_VALUE))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",2),3999))@@@31@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
48 [style = filled, label = "testHarness.setup()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testHarness.setProcessingTime(3)@@@11@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(operator,new ExecutionConfig(),testTimeProvider,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
47 [style = filled, label = "testHarness.open()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testSlidingEventTimeWindows(testHarness)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final int WINDOW_SLIDE = 1@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testProcessingTimeSlidingWindows['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final int WINDOW_SIZE = 3@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",2),2999))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "closeCalled.set(0)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "testHarness.close()@@@36@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "ReducingStateDescriptor<Tuple2<String,Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",new SumReducer(),inputType.createSerializer(new ExecutionConfig()))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",5),3999))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",1),999))@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "testHarness.close()@@@37@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",5),4999))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testHarness.setProcessingTime(3000)@@@23@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "testTimeProvider.setCurrentTime(1000)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),Long.MAX_VALUE))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testHarness.setProcessingTime(1000)@@@13@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "testHarness.close()@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "TypeInformation<Tuple2<String,Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testTimeProvider.setCurrentTime(3000)@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),Long.MAX_VALUE))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),Long.MAX_VALUE))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",3),1999))@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),Long.MAX_VALUE))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),Long.MAX_VALUE))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testTimeProvider.setCurrentTime(7000)@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",3),5999))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "testSlidingEventTimeWindowsReduce['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final int WINDOW_SIZE = 3@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
46 [style = filled, label = "WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,TimeWindow> operator = new WindowOperator<>(SlidingEventTimeWindows.of(Time.of(WINDOW_SIZE,TimeUnit.SECONDS),Time.of(WINDOW_SLIDE,TimeUnit.SECONDS)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String,TimeWindow,Tuple2<String,Integer>>()),EventTimeTrigger.create(),0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testHarness.open()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "TestProcessingTimeService testTimeProvider = new TestProcessingTimeService()@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testHarness.setProcessingTime(7000)@@@30@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23->25 [style = bold, label=""];
5->34 [style = solid, label="WINDOW_SLIDE"];
35->27 [style = bold, label=""];
29->4 [style = bold, label=""];
42->13 [style = bold, label=""];
34->46 [style = bold, label=""];
30->34 [style = solid, label="stateDesc"];
31->22 [style = bold, label=""];
12->28 [style = bold, label=""];
34->23 [style = solid, label="operator"];
25->33 [style = solid, label="expectedOutput"];
41->24 [style = bold, label=""];
25->28 [style = solid, label="expectedOutput"];
9->18 [style = dashed, label="0"];
33->6 [style = bold, label=""];
16->23 [style = solid, label="testTimeProvider"];
49->44 [style = bold, label=""];
36->31 [style = bold, label=""];
25->3 [style = bold, label=""];
34->46 [style = solid, label="stateDesc"];
26->21 [style = dashed, label="0"];
3->11 [style = bold, label=""];
28->7 [style = bold, label=""];
40->25 [style = bold, label=""];
10->35 [style = bold, label=""];
37->20 [style = bold, label=""];
11->45 [style = bold, label=""];
46->50 [style = solid, label="operator"];
5->46 [style = solid, label="WINDOW_SIZE"];
32->15 [style = dashed, label="0"];
30->34 [style = bold, label=""];
24->29 [style = bold, label=""];
40->12 [style = solid, label="expectedOutput"];
16->23 [style = bold, label=""];
50->48 [style = bold, label=""];
32->10 [style = bold, label=""];
3->42 [style = bold, label=""];
47->11 [style = bold, label=""];
6->15 [style = bold, label=""];
20->33 [style = bold, label=""];
40->31 [style = solid, label="expectedOutput"];
19->46 [style = solid, label="WINDOW_SLIDE"];
14->13 [style = dashed, label="0"];
8->17 [style = bold, label=""];
5->19 [style = bold, label=""];
11->3 [style = dashed, label="0"];
21->26 [style = bold, label=""];
21->37 [style = bold, label=""];
2->0 [style = bold, label=""];
25->22 [style = solid, label="expectedOutput"];
0->34 [style = solid, label="WINDOW_SIZE"];
1->21 [style = bold, label=""];
48->47 [style = bold, label=""];
34->46 [style = dashed, label="0"];
34->16 [style = bold, label=""];
13->36 [style = bold, label=""];
11->13 [style = bold, label=""];
15->39 [style = bold, label=""];
14->31 [style = bold, label=""];
39->10 [style = bold, label=""];
18->9 [style = bold, label=""];
40->35 [style = solid, label="expectedOutput"];
25->27 [style = solid, label="expectedOutput"];
4->12 [style = bold, label=""];
43->0 [style = bold, label=""];
50->11 [style = solid, label="testHarness"];
34->38 [style = solid, label="operator"];
18->41 [style = bold, label=""];
22->1 [style = bold, label=""];
34->38 [style = bold, label=""];
46->50 [style = bold, label=""];
40->20 [style = solid, label="expectedOutput"];
15->32 [style = bold, label=""];
38->40 [style = bold, label=""];
44->5 [style = bold, label=""];
13->14 [style = bold, label=""];
27->8 [style = bold, label=""];
9->24 [style = bold, label=""];
17->18 [style = bold, label=""];
26->20 [style = bold, label=""];
0->5 [style = bold, label=""];
19->30 [style = bold, label=""];
}
