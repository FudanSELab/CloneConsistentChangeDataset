digraph {
2 [style = filled, label = "MutableNetwork<String,String> mutableGraph = NetworkBuilder.directed().build()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "mutableNetwork.addEdge(\"A\",\"B\",\"AB\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(network.edgesConnecting(\"A\",\"B\")).containsExactly(\"AB\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertThat(network.edgesConnecting(\"A\",\"A\")).containsExactly(\"AA\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertThat(network.edgesConnecting(\"B\",\"A\")).isEmpty()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "MutableNetwork<String,String> mutableNetwork = NetworkBuilder.directed().build()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "MutableNetwork<String,String> mutableGraph = NetworkBuilder.undirected().build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Network<String,String> network = ImmutableNetwork.copyOf(mutableNetwork)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "edgesConnecting_directed['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "mutableGraph.addEdge(\"A\",\"A\",\"AA\")@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "edgesConnecting_directed['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "mutableGraph.addEdge(\"A\",\"B\",\"AB\")@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(graph.edgesConnecting(\"A\",\"A\")).containsExactly(\"AA\")@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Network<String,String> graph = ImmutableNetwork.copyOf(mutableGraph)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "mutableNetwork.addEdge(\"A\",\"A\",\"AA\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "edgesConnecting_undirected['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(graph.edgesConnecting(\"B\",\"A\")).isEmpty()@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertThat(graph.edgesConnecting(\"A\",\"B\")).containsExactly(\"AB\")@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(graph.edgesConnecting(\"B\",\"A\")).containsExactly(\"AB\")@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
5->3 [style = bold, label=""];
6->17 [style = bold, label=""];
16->18 [style = bold, label=""];
10->15 [style = bold, label=""];
9->11 [style = bold, label=""];
7->17 [style = dashed, label="0"];
9->15 [style = solid, label="mutableNetwork"];
0->2 [style = bold, label=""];
3->6 [style = bold, label=""];
1->10 [style = dashed, label="0"];
2->4 [style = bold, label=""];
18->5 [style = solid, label="mutableGraph"];
6->12 [style = dashed, label="0"];
12->13 [style = bold, label=""];
18->4 [style = bold, label=""];
2->9 [style = dashed, label="0"];
11->10 [style = bold, label=""];
7->13 [style = dashed, label="0"];
2->18 [style = dashed, label="0"];
3->8 [style = dashed, label="0"];
14->9 [style = bold, label=""];
4->1 [style = bold, label=""];
4->11 [style = dashed, label="0"];
6->7 [style = bold, label=""];
5->15 [style = dashed, label="0"];
15->8 [style = bold, label=""];
8->12 [style = bold, label=""];
2->5 [style = solid, label="mutableGraph"];
}
