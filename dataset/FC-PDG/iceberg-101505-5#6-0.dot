digraph {
10 [style = filled, label = "Types.NestedField field = struct.field(id)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "int cmp = lit.comparator().compare(upper,lit.value())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "gt['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "return ROWS_MIGHT_NOT_MATCH@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "canContainNulls(id) || canContainNaNs(id)@@@6@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "BoundReference<T> ref@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "cmp > 0@@@12@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "return ROWS_MIGHT_NOT_MATCH@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Integer id = ref.fieldId()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "T upper = Conversions.fromByteBuffer(field.type(),upperBounds.get(id))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "return ROWS_MUST_MATCH@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "lt['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "int cmp = lit.comparator().compare(lower,lit.value())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Literal<T> lit@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Preconditions.checkNotNull(field,\"Cannot filter by nested column: %s\",schema.findField(id))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "lt['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "lowerBounds != null && lowerBounds.containsKey(id)@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "BoundReference<T> ref@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "cmp < 0@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Literal<T> lit@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Literal<T> lit@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "canContainNulls(id)@@@6@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "T lower = Conversions.fromByteBuffer(field.type(),lowerBounds.get(id))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "upperBounds != null && upperBounds.containsKey(id)@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22->11 [style = bold, label=""];
1->23 [style = dashed, label="0"];
3->7 [style = solid, label="id"];
3->10 [style = bold, label=""];
22->23 [style = dotted, label="true"];
20->3 [style = bold, label=""];
0->4 [style = bold, label=""];
2->4 [style = bold, label=""];
22->19 [style = dotted, label="true"];
6->18 [style = dashed, label="0"];
8->12 [style = bold, label=""];
16->4 [style = bold, label=""];
9->5 [style = dotted, label="true"];
21->19 [style = solid, label="lower"];
0->22 [style = bold, label=""];
4->12 [style = dotted, label="true"];
20->18 [style = dotted, label="true"];
4->11 [style = bold, label=""];
7->16 [style = bold, label=""];
9->3 [style = bold, label=""];
16->0 [style = bold, label=""];
12->1 [style = bold, label=""];
20->17 [style = dotted, label="true"];
4->8 [style = bold, label=""];
23->11 [style = bold, label=""];
19->23 [style = bold, label=""];
4->1 [style = dotted, label="true"];
9->6 [style = dotted, label="true"];
15->6 [style = dotted, label="true"];
3->21 [style = solid, label="id"];
1->11 [style = bold, label=""];
4->8 [style = dotted, label="true"];
8->21 [style = dashed, label="0"];
2->16 [style = dashed, label="0"];
19->23 [style = solid, label="cmp"];
10->7 [style = bold, label=""];
13->11 [style = bold, label=""];
21->19 [style = bold, label=""];
23->13 [style = bold, label=""];
12->19 [style = dashed, label="0"];
1->13 [style = dotted, label="true"];
16->0 [style = dotted, label="true"];
23->13 [style = dotted, label="true"];
3->16 [style = solid, label="id"];
2->22 [style = bold, label=""];
8->12 [style = solid, label="upper"];
3->10 [style = solid, label="id"];
15->3 [style = bold, label=""];
3->8 [style = solid, label="id"];
2->0 [style = bold, label=""];
22->21 [style = bold, label=""];
3->2 [style = solid, label="id"];
2->0 [style = dotted, label="true"];
3->4 [style = solid, label="id"];
12->1 [style = solid, label="cmp"];
3->22 [style = solid, label="id"];
10->7 [style = solid, label="field"];
15->14 [style = dotted, label="true"];
4->22 [style = dashed, label="0"];
1->13 [style = bold, label=""];
22->21 [style = dotted, label="true"];
7->2 [style = bold, label=""];
}
