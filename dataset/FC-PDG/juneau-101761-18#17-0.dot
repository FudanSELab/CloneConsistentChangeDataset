digraph {
71 [style = filled, label = "checkClient(\"Warning\").build().get(\"/headers\").warning(\"foo\").run().assertBody().is(\"('foo'(\")@@@68@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "checkClient(\"TE\").build().get(\"/headers\").te(\"foo\").run().assertBody().is(\"('foo'(\")@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "checkClient(\"Accept\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"('text/plain'(\")@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "checkClient(\"Date\").date(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"('\" + PARSEDZONEDDATETIME + \"'(\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "checkClient(\"Authorization\").build().get(\"/headers\").authorization(\"foo\").run().assertBody().is(\"('foo'(\")@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "checkClient(\"If-Modified-Since\").ifModifiedSince(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"('\" + PARSEDZONEDDATETIME + \"'(\")@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "checkClient(\"Origin\").build().get(\"/headers\").origin(\"foo\").run().assertBody().is(\"('foo'(\")@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "checkClient(\"User-Agent\").build().get(\"/headers\").userAgent(\"foo\").run().assertBody().is(\"('foo'(\")@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "checkClient(\"Host\").host(\"foo\").build().get(\"/headers\").run().assertBody().is(\"('foo'(\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "checkClient(\"Pragma\").pragma(\"foo\").build().get(\"/headers\").run().assertBody().is(\"('foo'(\")@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "b04_dontOverrideAccept['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "checkClient(\"Expect\").build().get(\"/headers\").expect(\"foo\").run().assertBody().is(\"('foo'(\")@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "checkClient(\"Range\").build().get(\"/headers\").range(\"foo\").run().assertBody().is(\"('foo'(\")@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "RestClient rc = checkClient(\"Accept\").header(\"Accept\",\"text/foo\").build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "checkClient(\"Max-Forwards\").build().get(\"/headers\").maxForwards(10).run().assertBody().is(\"('10'(\")@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "checkClient(\"Connection\").connection(\"foo\").build().get(\"/headers\").run().assertBody().is(\"('foo'(\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "checkClient(\"Via\").via(\"foo\").build().get(\"/headers\").run().assertBody().is(\"('foo'(\")@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "checkClient(\"If-Range\").ifRange(\"\"foo\"\").build().get(\"/headers\").run().assertBody().is(\"('\"foo\"'(\")@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "checkClient(\"Proxy-Authorization\").proxyAuthorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"('foo'(\")@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "checkClient(\"If-Modified-Since\").build().get(\"/headers\").ifModifiedSince(ZONEDDATETIME).run().assertBody().is(\"('\" + PARSEDZONEDDATETIME + \"'(\")@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "checkClient(\"Forwarded\").build().get(\"/headers\").forwarded(\"foo\").run().assertBody().is(\"('foo'(\")@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "checkClient(\"Upgrade\").build().get(\"/headers\").upgrade(\"foo\").run().assertBody().is(\"('foo'(\")@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "checkClient(\"Connection\").build().get(\"/headers\").connection(\"foo\").run().assertBody().is(\"('foo'(\")@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "checkClient(\"If-None-Match\").ifNoneMatch(\"\"foo\"\").build().get(\"/headers\").run().assertBody().is(\"('\"foo\"'(\")@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "checkClient(\"If-Match\").ifMatch(\"\"foo\"\").build().get(\"/headers\").run().assertBody().is(\"('\"foo\"'(\")@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "checkClient(\"TE\").te(\"foo\").build().get(\"/headers\").run().assertBody().is(\"('foo'(\")@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "checkClient(\"Accept-Encoding\").build().get(\"/headers\").acceptEncoding(\"identity\").run().assertBody().is(\"('identity'(\")@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "checkClient(\"If-Range\").build().get(\"/headers\").ifRange(\"\"foo\"\").run().assertBody().is(\"('\"foo\"'(\")@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "RestRequest req = rc.get(\"/headers\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "req.debug().run().assertBody().is(\"('text/plain'(\")@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "checkClient(\"From\").build().get(\"/headers\").from(\"foo\").run().assertBody().is(\"('foo'(\")@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "checkClient(\"Content-Encoding\").build().get(\"/headers\").contentEncoding(\"identity\").run().assertBody().is(\"('identity'(\")@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "checkClient(\"Authorization\").authorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"('foo'(\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "checkClient(\"Accept\").header(\"Accept\",\"text/foo\").build().get(\"/headers\").header(\"Accept\",\"text/plain\").run().assertBody().is(\"('text/foo','text/plain'(\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "checkClient(\"Client-Version\").build().get(\"/headers\").clientVersion(\"1\").run().assertBody().is(\"('1'(\")@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "checkClient(\"Content-Length\").contentLength(123l).build().get(\"/headers\").run().assertBody().is(\"('123'(\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "checkClient(\"No-Trace\").build().get(\"/headers\").noTrace().run().assertBody().is(\"('true','true'(\")@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "checkClient(\"If-None-Match\").build().get(\"/headers\").ifNoneMatch(\"\"foo\"\").run().assertBody().is(\"('\"foo\"'(\")@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "checkClient(\"Cache-Control\").cacheControl(\"none\").build().get(\"/headers\").run().assertBody().is(\"('none'(\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "checkClient(\"Origin\").origin(\"foo\").build().get(\"/headers\").run().assertBody().is(\"('foo'(\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "checkClient(\"Accept-Encoding\").acceptEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"('identity'(\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "checkClient(\"Client-Version\").clientVersion(\"1\").build().get(\"/headers\").run().assertBody().is(\"('1'(\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "checkClient(\"Proxy-Authorization\").build().get(\"/headers\").proxyAuthorization(\"foo\").run().assertBody().is(\"('foo'(\")@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "checkClient(\"Warning\").warning(\"foo\").build().get(\"/headers\").run().assertBody().is(\"('foo'(\")@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "b04_dontOverrideAccept['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "checkClient(\"Content-Type\").contentType(\"foo\").build().get(\"/headers\").run().assertBody().is(\"('foo'(\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "checkClient(\"Accept\").accept(\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"('text/plain'(\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "checkClient(\"Via\").build().get(\"/headers\").via(\"foo\").run().assertBody().is(\"('foo'(\")@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "checkClient(\"Referer\").build().get(\"/headers\").referer(\"foo\").run().assertBody().is(\"('foo'(\")@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "checkClient(\"Accept-Charset\").build().get(\"/headers\").acceptCharset(\"UTF-8\").run().assertBody().is(\"('UTF-8'(\")@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "checkClient(\"Content-Length\").build().get(\"/headers\").contentLength(123l).run().assertBody().is(\"('123'(\")@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "checkClient(\"Forwarded\").forwarded(\"foo\").build().get(\"/headers\").run().assertBody().is(\"('foo'(\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "req.setHeader(\"Accept\",\"text/plain\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "checkClient(\"Pragma\").build().get(\"/headers\").pragma(\"foo\").run().assertBody().is(\"('foo'(\")@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "checkClient(\"Accept\").header(\"Accept\",\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"('text/plain'(\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "checkClient(\"If-Match\").build().get(\"/headers\").ifMatch(\"\"foo\"\").run().assertBody().is(\"('\"foo\"'(\")@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "checkClient(\"Accept-Language\").build().get(\"/headers\").acceptLanguage(\"en\").run().assertBody().is(\"('en'(\")@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "checkClient(\"Accept-Language\").acceptLanguage(\"en\").build().get(\"/headers\").run().assertBody().is(\"('en'(\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "checkClient(\"Expect\").expect(\"foo\").build().get(\"/headers\").run().assertBody().is(\"('foo'(\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "checkClient(\"Content-Type\").build().get(\"/headers\").contentType(\"foo\").run().assertBody().is(\"('foo'(\")@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "checkClient(\"Content-Encoding\").contentEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"('identity'(\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "checkClient(\"Host\").build().get(\"/headers\").hostHeader(\"foo\").run().assertBody().is(\"('foo'(\")@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "b01_standardHeaders['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "checkClient(\"Upgrade\").upgrade(\"foo\").build().get(\"/headers\").run().assertBody().is(\"('foo'(\")@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "checkClient(\"If-Unmodified-Since\").build().get(\"/headers\").ifUnmodifiedSince(ZONEDDATETIME).run().assertBody().is(\"('\" + PARSEDZONEDDATETIME + \"'(\")@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "checkClient(\"User-Agent\").userAgent(\"foo\").build().get(\"/headers\").run().assertBody().is(\"('foo'(\")@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "checkClient(\"No-Trace\").noTrace().build().get(\"/headers\").run().assertBody().is(\"('true','true'(\")@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "checkClient(\"Cache-Control\").build().get(\"/headers\").cacheControl(\"none\").run().assertBody().is(\"('none'(\")@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "checkClient(\"From\").from(\"foo\").build().get(\"/headers\").run().assertBody().is(\"('foo'(\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "checkClient(\"Date\").build().get(\"/headers\").date(ZONEDDATETIME).run().assertBody().is(\"('\" + PARSEDZONEDDATETIME + \"'(\")@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "checkClient(\"Range\").range(\"foo\").build().get(\"/headers\").run().assertBody().is(\"('foo'(\")@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "checkClient(\"Max-Forwards\").maxForwards(10).build().get(\"/headers\").run().assertBody().is(\"('10'(\")@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "checkClient(\"Accept-Charset\").acceptCharset(\"UTF-8\").build().get(\"/headers\").run().assertBody().is(\"('UTF-8'(\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "req.run().assertBody().is(\"('text/plain'(\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "checkClient(\"If-Unmodified-Since\").ifUnmodifiedSince(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"('\" + PARSEDZONEDDATETIME + \"'(\")@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "checkClient(\"Referer\").referer(\"foo\").build().get(\"/headers\").run().assertBody().is(\"('foo'(\")@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18->38 [style = bold, label=""];
27->13 [style = bold, label=""];
4->3 [style = bold, label=""];
58->61 [style = bold, label=""];
36->51 [style = bold, label=""];
49->37 [style = bold, label=""];
9->64 [style = bold, label=""];
61->16 [style = bold, label=""];
16->52 [style = bold, label=""];
6->68 [style = dashed, label="0"];
41->24 [style = bold, label=""];
56->32 [style = bold, label=""];
33->74 [style = bold, label=""];
53->18 [style = bold, label=""];
50->59 [style = bold, label=""];
25->36 [style = bold, label=""];
44->73 [style = bold, label=""];
35->75 [style = bold, label=""];
51->9 [style = bold, label=""];
0->2 [style = bold, label=""];
62->60 [style = bold, label=""];
63->34 [style = bold, label=""];
48->50 [style = bold, label=""];
75->30 [style = bold, label=""];
65->48 [style = bold, label=""];
64->54 [style = bold, label=""];
14->56 [style = bold, label=""];
73->41 [style = bold, label=""];
70->53 [style = bold, label=""];
24->23 [style = bold, label=""];
2->4 [style = bold, label=""];
67->72 [style = bold, label=""];
30->71 [style = bold, label=""];
32->29 [style = bold, label=""];
21->55 [style = bold, label=""];
43->40 [style = bold, label=""];
23->28 [style = bold, label=""];
12->66 [style = bold, label=""];
20->67 [style = bold, label=""];
6->5 [style = bold, label=""];
15->17 [style = bold, label=""];
26->31 [style = bold, label=""];
29->33 [style = bold, label=""];
1->6 [style = bold, label=""];
52->12 [style = bold, label=""];
72->63 [style = bold, label=""];
10->44 [style = bold, label=""];
5->0 [style = bold, label=""];
0->25 [style = dashed, label="0"];
2->36 [style = dashed, label="0"];
42->57 [style = bold, label=""];
3->9 [style = dashed, label="0"];
38->62 [style = bold, label=""];
7->6 [style = bold, label=""];
74->49 [style = bold, label=""];
46->35 [style = bold, label=""];
17->69 [style = bold, label=""];
69->47 [style = bold, label=""];
37->70 [style = bold, label=""];
47->65 [style = bold, label=""];
54->21 [style = bold, label=""];
4->8 [style = bold, label=""];
66->10 [style = bold, label=""];
3->8 [style = dashed, label="0"];
45->26 [style = bold, label=""];
59->22 [style = bold, label=""];
13->15 [style = bold, label=""];
39->68 [style = bold, label=""];
31->20 [style = bold, label=""];
22->14 [style = bold, label=""];
57->46 [style = bold, label=""];
60->42 [style = bold, label=""];
19->43 [style = bold, label=""];
55->19 [style = bold, label=""];
68->11 [style = bold, label=""];
11->25 [style = bold, label=""];
28->45 [style = bold, label=""];
34->27 [style = bold, label=""];
40->58 [style = bold, label=""];
}
