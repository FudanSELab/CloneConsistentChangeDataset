digraph {
16 [style = filled, label = "assertExecuteQueryAndReturnResult['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "QueryResponseHeader queryResponseHeader = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "when(textProtocolBackendHandler.execute()).thenReturn(updateResponseHeader)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "when(queryResponseHeader.getQueryHeaders()).thenReturn(Collections.singletonList(new QueryHeader(\"schema\",\"table\",\"label\",\"column\",1,\"type\",2,3,true,true,true,true)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "verify(queryResponseHeader).getQueryHeaders()@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertExecuteUpdate['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(actual.size(),is(1))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "UpdateResponseHeader updateResponseHeader = mock()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertExecuteUpdate['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Collection<DatabasePacket<?>> actual = queryExecutor.execute()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Collection<DatabasePacket<?>> actual = queryExecutor.execute()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "when(textProtocolBackendHandler.execute()).thenReturn(new UpdateResponseHeader(mock()))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertThat(actual.size(),is(1))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "when(textProtocolBackendHandler.execute()).thenReturn(queryResponseHeader)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(queryExecutor.getResponseType(),is(ResponseType.QUERY))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(actual.iterator().next(),is(instanceOf()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(queryExecutor.getResponseType(),is(ResponseType.UPDATE))@@@8@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6->8 [style = dashed, label="0"];
5->12 [style = dashed, label="0"];
10->15 [style = bold, label=""];
9->2 [style = bold, label=""];
12->11 [style = bold, label=""];
14->10 [style = bold, label=""];
3->6 [style = bold, label=""];
0->11 [style = dashed, label="0"];
6->14 [style = dashed, label="0"];
7->8 [style = bold, label=""];
2->4 [style = bold, label=""];
6->1 [style = solid, label="updateResponseHeader"];
6->1 [style = bold, label=""];
5->0 [style = bold, label=""];
5->12 [style = bold, label=""];
11->13 [style = bold, label=""];
15->4 [style = bold, label=""];
8->9 [style = bold, label=""];
16->14 [style = bold, label=""];
1->2 [style = bold, label=""];
4->5 [style = bold, label=""];
14->15 [style = solid, label="queryResponseHeader"];
}
