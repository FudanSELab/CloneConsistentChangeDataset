digraph {
0 [style = filled, label = "Assert.assertEquals(null,deserialized.getExtra())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(originalSchema.getParserMap(),deserialized.getParserMap())@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testSerdeWithUpdatedDataSchemaAddedField['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "DataSchema originalSchema = new DataSchema(TaskIdUtilsTest.VALID_ID_CHARS,parser,new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8f2505,new ArbitraryGranularitySpec(Granularities.DAY,ImmutableList.of(Intervals.of(\"2014/2015\"))),null,jsonMapper)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "TestModifiedDataSchema deserialized = jsonMapper.readValue(serialized,)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertArrayEquals(originalSchema.getAggregators(),deserialized.getAggregators())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "TestModifiedDataSchema originalSchema = new TestModifiedDataSchema(TaskIdUtilsTest.VALID_ID_CHARS,null,null,new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8f264c,new ArbitraryGranularitySpec(Granularities.DAY,ImmutableList.of(Intervals.of(\"2014/2015\"))),null,parser,jsonMapper,\"some arbitrary string\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(originalSchema.getParser().getParseSpec(),deserialized.getParser().getParseSpec())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(originalSchema.getParserMap(),deserialized.getParserMap())@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testSerdeWithUpdatedDataSchemaAddedField['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(originalSchema.getGranularitySpec(),deserialized.getGranularitySpec())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "DataSchema originalSchema = new DataSchema(IdUtilsTest.VALID_ID_CHARS,parser,new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8f25a8,new ArbitraryGranularitySpec(Granularities.DAY,ImmutableList.of(Intervals.of(\"2014/2015\"))),null,jsonMapper)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertEquals(originalSchema.getTransformSpec(),deserialized.getTransformSpec())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "String serialized = jsonMapper.writeValueAsString(originalSchema)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(originalSchema.getDataSource(),deserialized.getDataSource())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testSerdeWithUpdatedDataSchemaRemovedField['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "DataSchema deserialized = jsonMapper.readValue(serialized,)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Map<String,Object> parser = jsonMapper.convertValue(new StringInputRowParser(new JSONParseSpec(new TimestampSpec(\"time\",\"auto\",null),new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\",\"dimA\")),null,null),null,null,null),null),JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
17->10 [style = bold, label=""];
8->16 [style = dashed, label="0"];
7->8 [style = solid, label="parser"];
13->9 [style = solid, label="originalSchema"];
1->15 [style = dashed, label="0"];
2->3 [style = bold, label=""];
11->4 [style = bold, label=""];
3->11 [style = bold, label=""];
1->0 [style = bold, label=""];
8->9 [style = solid, label="originalSchema"];
7->8 [style = bold, label=""];
12->7 [style = bold, label=""];
14->7 [style = bold, label=""];
8->13 [style = dashed, label="0"];
16->9 [style = solid, label="originalSchema"];
15->17 [style = bold, label=""];
0->10 [style = bold, label=""];
7->13 [style = solid, label="parser"];
9->15 [style = bold, label=""];
7->16 [style = bold, label=""];
8->9 [style = bold, label=""];
7->16 [style = solid, label="parser"];
10->2 [style = bold, label=""];
13->9 [style = bold, label=""];
9->15 [style = solid, label="serialized"];
9->1 [style = bold, label=""];
6->7 [style = bold, label=""];
4->5 [style = bold, label=""];
16->9 [style = bold, label=""];
9->1 [style = solid, label="serialized"];
}
