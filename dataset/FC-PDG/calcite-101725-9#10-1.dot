digraph {
23 [style = filled, label = "RexNode operand@@@15@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "simplifyIsNotNull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "simplifyIsNotNull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "return rexBuilder.makeLiteral(false)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "return rexBuilder.makeLiteral(false)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final RexNode simplified = simplifyIsNull(operand)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "return null@@@32@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "return rexBuilder.makeLiteral(false)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "a.getKind() == SqlKind.CAST@@@9@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Strong.policy(a.getKind())@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final List<RexNode> operands = new ArrayList<>()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "return null@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "operands.add(rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL,operand))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "operands.add(simplified)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final RexNode simplified = simplifyIsNotNull(operand)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "!a.getType().isNullable() && isSafeExpression(a)@@@3@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "RexNode a@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "return RexUtil.composeDisjunction(rexBuilder,operands,false)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "predicates.pulledUpPredicates.contains(a)@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "simplifyIsNull['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "throw new AssertionError(\"every CUSTOM policy needs a handler, \" + a.getKind())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "return rexBuilder.makeLiteral(!((RexLiteral)a).isNull())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "return RexUtil.composeConjunction(rexBuilder,operands)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "simplified == null@@@14@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "RexNode operand@@@12@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "RexNode a@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "return null@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "return rexBuilder.makeLiteral(true)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "simplified.isAlwaysFalse()@@@20@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "RexUtil.isNull(a)@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "return rexBuilder.makeLiteral(true)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "((RexCall)a).getOperands()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "return rexBuilder.makeLiteral(true)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "operands.add(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL,operand))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "RexNode operand@@@12@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "a.getKind()@@@28@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "!a.getType().isNullable()@@@3@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0->12 [style = dotted, label="true"];
16->32 [style = dashed, label="0"];
9->11 [style = bold, label=""];
11->7 [style = solid, label="simplified"];
29->30 [style = bold, label=""];
10->34 [style = dashed, label="0"];
0->19 [style = dotted, label="true"];
21->15 [style = bold, label=""];
5->25 [style = dashed, label="0"];
5->28 [style = bold, label=""];
0->6 [style = dotted, label="true"];
30->7 [style = solid, label="simplified"];
32->6 [style = bold, label=""];
7->9 [style = bold, label=""];
28->0 [style = bold, label=""];
22->0 [style = bold, label=""];
6->11 [style = bold, label=""];
7->20 [style = dotted, label="false"];
0->3 [style = dotted, label="true"];
13->22 [style = bold, label=""];
19->15 [style = bold, label=""];
28->13 [style = dotted, label="true"];
0->11 [style = dotted, label="true"];
14->11 [style = bold, label=""];
0->7 [style = dotted, label="true"];
7->29 [style = bold, label=""];
29->36 [style = bold, label=""];
0->19 [style = bold, label=""];
24->0 [style = bold, label=""];
16->6 [style = bold, label=""];
18->19 [style = bold, label=""];
19->21 [style = dotted, label="true"];
22->24 [style = dotted, label="true"];
5->17 [style = bold, label=""];
25->2 [style = bold, label=""];
7->29 [style = dotted, label="true"];
20->18 [style = bold, label=""];
30->7 [style = bold, label=""];
7->4 [style = dotted, label="false"];
14->18 [style = bold, label=""];
10->17 [style = solid, label="a"];
31->28 [style = bold, label=""];
36->35 [style = bold, label=""];
13->0 [style = bold, label=""];
2->17 [style = bold, label=""];
0->16 [style = bold, label=""];
4->14 [style = bold, label=""];
0->18 [style = dotted, label="true"];
5->31 [style = dotted, label="true"];
11->20 [style = solid, label="simplified"];
7->4 [style = bold, label=""];
7->20 [style = bold, label=""];
33->5 [style = bold, label=""];
19->15 [style = dotted, label="true"];
6->36 [style = solid, label="operands"];
0->30 [style = dotted, label="true"];
25->17 [style = bold, label=""];
17->0 [style = bold, label=""];
9->18 [style = bold, label=""];
6->18 [style = solid, label="operands"];
0->1 [style = bold, label=""];
18->36 [style = dashed, label="0"];
4->20 [style = bold, label=""];
0->23 [style = dotted, label="true"];
17->13 [style = bold, label=""];
0->16 [style = dotted, label="true"];
0->32 [style = dotted, label="true"];
0->32 [style = bold, label=""];
25->2 [style = dotted, label="true"];
20->36 [style = bold, label=""];
0->1 [style = dotted, label="true"];
5->2 [style = dotted, label="true"];
20->11 [style = bold, label=""];
15->1 [style = bold, label=""];
19->21 [style = bold, label=""];
34->28 [style = solid, label="a"];
0->6 [style = bold, label=""];
33->34 [style = dotted, label="true"];
26->25 [style = bold, label=""];
0->35 [style = dotted, label="true"];
28->13 [style = bold, label=""];
7->9 [style = dotted, label="true"];
8->10 [style = dotted, label="true"];
4->14 [style = dotted, label="true"];
17->22 [style = bold, label=""];
30->20 [style = solid, label="simplified"];
0->36 [style = dotted, label="true"];
10->25 [style = solid, label="a"];
2->31 [style = dashed, label="0"];
5->2 [style = bold, label=""];
9->29 [style = dashed, label="0"];
8->5 [style = bold, label=""];
5->31 [style = bold, label=""];
26->10 [style = dotted, label="true"];
4->20 [style = dotted, label="false"];
0->35 [style = bold, label=""];
22->24 [style = bold, label=""];
0->27 [style = dotted, label="true"];
11->30 [style = dashed, label="0"];
20->30 [style = bold, label=""];
17->13 [style = dotted, label="true"];
11->7 [style = bold, label=""];
6->30 [style = bold, label=""];
}
