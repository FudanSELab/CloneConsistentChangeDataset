digraph {
34 [style = filled, label = "split.select(\"one\").map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink2Results.add(value)}})@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)@@@39@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
46 [style = filled, label = "headOperator.processElement(new StreamRecord<>(1))@@@53@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
56 [style = filled, label = "assertThat(sink2Results,contains(\"Second: 1\",\"Second: 2\",\"Second: 3\"))@@@58@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "headOperator.processElement(new StreamRecord<>(2))@@@54@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "assertThat(sink3Results,contains(\"Second: 2\",\"Second: 3\"))@@@85@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "split.select(\"one\").map(new MapFunction<Integer,String>(){@Override public String map(Integer value){return \"First 2: \" + value}}).addSink(new SinkFunction<String>(){@Override public void invoke(String value){sink2Results.add(value)}})@@@39@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "Configuration configuration = chainedVertex.getConfiguration()@@@42@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "split.select(\"other\").map(new MapFunction<Integer,String>(){@Override public String map(Integer value){return \"Second: \" + value}}).addSink(new SinkFunction<String>(){@Override public void invoke(String value){sink3Results.add(value)}})@@@52@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "split.select(\"one\").map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink1Results.add(value)}})@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "StreamMap<Integer,Integer> headOperator = streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())@@@43@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "split.select(\"one\").map(new MapFunction<Integer,String>(){@Override public String map(Integer value){return \"First 1: \" + value}}).addSink(new SinkFunction<String>(){@Override public void invoke(String value){sink1Results.add(value)}})@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "testMultiChainingWithSplit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "sink3Results = new ArrayList<>()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(sink2Results,contains(\"First 2: 1\"))@@@84@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "input = input.map(new MapFunction<Integer,Integer>(){@Override public Integer map(Integer value){return value}})@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "input.map(new MapFunction<Integer,String>(){@Override public String map(Integer value){return \"Second: \" + value}}).addSink(new SinkFunction<String>(){@Override public void invoke(String value){sink2Results.add(value)}})@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "input = input.map(null)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "split.select(\"other\").map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink3Results.add(value)}})@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "JobGraph jobGraph = env.getStreamGraph().getJobGraph()@@@38@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
48 [style = filled, label = "operator.open()@@@50@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "headOperator.processElement(new StreamRecord<>(3))@@@55@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "StreamTask<Integer,StreamMap<Integer,Integer>> mockTask = createMockTask(streamConfig,environment)@@@45@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "SplitStream<Integer> split = input.split(new OutputSelector<Integer>(){@Override public Iterable<String> select(Integer value){if (value.equals(1)) {return Collections.singletonList(\"one\")}{return Collections.singletonList(\"other\")}}})@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "input.map(new MapFunction<Integer,String>(){@Override public String map(Integer value){return \"First: \" + value}}).addSink(new SinkFunction<String>(){@Override public void invoke(String value){sink1Results.add(value)}})@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "testMultiChainingWithSplit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "headOperator.processElement(new StreamRecord<>(3))@@@56@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertThat(sink3Results,contains(\"Second: 2\",\"Second: 3\"))@@@58@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "OperatorChain<Integer,StreamMap<Integer,Integer>> operatorChain = createOperatorChain(streamConfig,environment,mockTask)@@@47@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "headOperator.processElement(new StreamRecord<>(2))@@@55@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "StreamTask<Integer,StreamMap<Integer,Integer>> mockTask = createMockTask(streamConfig,environment)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)@@@40@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "OperatorChain<Integer,StreamMap<Integer,Integer>> operatorChain = createOperatorChain(streamConfig,environment,mockTask)@@@46@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "operator != null@@@49@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "assertThat(sink1Results,contains(\"First 1: 1\"))@@@56@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "headOperator.setup(mockTask,streamConfig,operatorChain.getChainEntryPoint())@@@48@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "headOperator.setup(mockTask,streamConfig,operatorChain.getChainEntryPoint())@@@74@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)@@@41@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "headOperator.processElement(new StreamRecord<>(1))@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "operator.open()@@@77@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "StreamMap<Integer,Integer> headOperator = streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())@@@70@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "sink1Results = new ArrayList<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "StreamExecutionEnvironment env@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(sink1Results,contains(\"First: 1\",\"First: 2\",\"First: 3\"))@@@57@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "input = input.map(new MapFunction<Integer,Integer>(){@Override public Integer map(Integer value){return value}})@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "sink2Results = new ArrayList<>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)@@@40@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Configuration configuration = chainedVertex.getConfiguration()@@@41@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "DataStream<Integer> input = env.fromElements(1,2,3)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "StreamMap<Integer,Integer> headOperator = streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())@@@44@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "StreamConfig streamConfig = new StreamConfig(configuration)@@@42@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
49 [style = filled, label = "assertThat(sink2Results,contains(\"First 2: 1\"))@@@57@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "operator.open()@@@51@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "StreamConfig streamConfig = new StreamConfig(configuration)@@@43@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "headOperator.setup(mockTask,streamConfig,operatorChain.getChainEntryPoint())@@@47@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
55 [style = filled, label = "operator != null@@@50@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "testMultiChaining['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "JobGraph jobGraph = env.getStreamGraph().getJobGraph()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "SplitStream<Integer> split = input.split(new OutputSelector<Integer>(){@Override public Iterable<String> select(Integer value){if (value.equals(1)) {return Collections.singletonList(\"one\")}{return Collections.singletonList(\"other\")}}})@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertThat(sink1Results,contains(\"First 1: 1\"))@@@83@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "StreamExecutionEnvironment env@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
13->6 [style = solid, label="configuration"];
31->37 [style = bold, label=""];
54->27 [style = bold, label=""];
37->28 [style = bold, label=""];
1->55 [style = bold, label=""];
10->24 [style = bold, label=""];
27->26 [style = solid, label="mockTask"];
33->48 [style = dotted, label="true"];
59->9 [style = bold, label=""];
37->28 [style = solid, label="configuration"];
14->20 [style = dashed, label="0"];
45->31 [style = bold, label=""];
10->22 [style = solid, label="sink3Results"];
11->9 [style = bold, label=""];
38->42 [style = bold, label=""];
60->58 [style = dotted, label="true"];
13->54 [style = solid, label="streamConfig"];
26->12 [style = bold, label=""];
33->46 [style = bold, label=""];
13->27 [style = solid, label="streamConfig"];
33->48 [style = bold, label=""];
0->30 [style = dashed, label="0"];
5->14 [style = solid, label="sink1Results"];
19->15 [style = bold, label=""];
13->26 [style = solid, label="streamConfig"];
23->57 [style = dashed, label="0"];
41->17 [style = dotted, label="true"];
14->16 [style = bold, label=""];
6->12 [style = solid, label="streamConfig"];
15->13 [style = bold, label=""];
23->34 [style = dashed, label="0"];
55->59 [style = bold, label=""];
6->54 [style = bold, label=""];
54->27 [style = solid, label="mockTask"];
8->17 [style = dotted, label="true"];
20->14 [style = bold, label=""];
30->34 [style = bold, label=""];
12->1 [style = bold, label=""];
41->2 [style = bold, label=""];
21->36 [style = dashed, label="0"];
3->0 [style = bold, label=""];
1->11 [style = bold, label=""];
25->27 [style = bold, label=""];
18->20 [style = bold, label=""];
5->43 [style = solid, label="sink1Results"];
0->23 [style = bold, label=""];
34->36 [style = bold, label=""];
55->1 [style = dotted, label="true"];
10->44 [style = solid, label="sink3Results"];
48->33 [style = bold, label=""];
1->59 [style = bold, label=""];
21->7 [style = bold, label=""];
29->35 [style = bold, label=""];
46->40 [style = bold, label=""];
24->3 [style = bold, label=""];
57->53 [style = bold, label=""];
32->50 [style = bold, label=""];
27->26 [style = bold, label=""];
4->49 [style = solid, label="sink2Results"];
4->10 [style = bold, label=""];
28->29 [style = bold, label=""];
27->12 [style = solid, label="mockTask"];
60->2 [style = bold, label=""];
4->16 [style = solid, label="sink2Results"];
6->27 [style = solid, label="streamConfig"];
49->44 [style = bold, label=""];
35->32 [style = bold, label=""];
51->52 [style = bold, label=""];
28->32 [style = solid, label="streamConfig"];
1->9 [style = bold, label=""];
6->26 [style = solid, label="streamConfig"];
54->26 [style = solid, label="mockTask"];
48->46 [style = bold, label=""];
26->55 [style = bold, label=""];
5->20 [style = solid, label="sink1Results"];
28->35 [style = solid, label="streamConfig"];
9->18 [style = bold, label=""];
40->39 [style = bold, label=""];
8->2 [style = bold, label=""];
5->4 [style = bold, label=""];
47->45 [style = bold, label=""];
50->33 [style = bold, label=""];
13->6 [style = bold, label=""];
4->56 [style = solid, label="sink2Results"];
4->51 [style = bold, label=""];
15->13 [style = solid, label="configuration"];
7->19 [style = bold, label=""];
10->38 [style = bold, label=""];
2->5 [style = bold, label=""];
36->47 [style = bold, label=""];
35->32 [style = solid, label="mockTask"];
17->58 [style = dashed, label="0"];
20->56 [style = bold, label=""];
11->1 [style = bold, label=""];
1->11 [style = dotted, label="true"];
28->50 [style = solid, label="streamConfig"];
39->43 [style = bold, label=""];
16->22 [style = bold, label=""];
35->50 [style = solid, label="mockTask"];
16->56 [style = dashed, label="0"];
53->7 [style = bold, label=""];
23->21 [style = bold, label=""];
42->30 [style = bold, label=""];
55->1 [style = bold, label=""];
43->49 [style = bold, label=""];
52->57 [style = bold, label=""];
24->38 [style = dashed, label="0"];
6->25 [style = bold, label=""];
}
