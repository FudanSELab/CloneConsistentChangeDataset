digraph {
3 [style = filled, label = "when(sizeLimitedTaskMemoryManager.allocate(geq(1L << 20))).thenAnswer(new Answer<MemoryBlock>(){@Override public MemoryBlock answer(InvocationOnMock invocation){if (((Long)invocation.getArguments()(0( / 8) > Integer.MAX_VALUE) {throw new OutOfMemoryError(\"Requested array size exceeds VM limit\")}return new MemoryBlock(null,0,(Long)invocation.getArguments()(0()}})@@@6@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "sizeLimitedTaskMemoryManager = mock()@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "MockitoAnnotations.initMocks(this)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "tempDir = Utils.createTempDir(System.getProperty(\"java.io.tmpdir\"),\"unsafe-test\")@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "when(blockManager.getDiskWriter(any(),any(),any(),anyInt(),any())).thenAnswer(new Answer<DiskBlockObjectWriter>(){@Override public DiskBlockObjectWriter answer(InvocationOnMock invocationOnMock){Object(( args = invocationOnMock.getArguments()return new DiskBlockObjectWriter((File)args(1(,(SerializerInstance)args(2(,(Integer)args(3(,new CompressStream(),false,(ShuffleWriteMetrics)args(4()}})@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "when(blockManager.getDiskWriter(any(),any(),any(),anyInt(),any())).thenAnswer(new Answer<DiskBlockObjectWriter>(){@Override public DiskBlockObjectWriter answer(InvocationOnMock invocationOnMock){Object(( args = invocationOnMock.getArguments()return new DiskBlockObjectWriter((File)args(1(,(SerializerInstance)args(2(,(Integer)args(3(,new CompressStream(),false,(ShuffleWriteMetrics)args(4()}})@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "sparkConf = new SparkConf()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "when(diskBlockManager.createTempLocalBlock()).thenAnswer(new Answer<Tuple2<TempLocalBlockId,File>>(){@Override public Tuple2<TempLocalBlockId,File> answer(InvocationOnMock invocationOnMock){TempLocalBlockId blockId = new TempLocalBlockId(UUID.randomUUID())File file = File.createTempFile(\"spillFile\",\".spill\",tempDir)spillFilesCreated.add(file)return Tuple2$.MODULE$.apply(blockId,file)}})@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "taskContext = mock()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "memoryManager = new TestMemoryManager(new SparkConf().set(\"spark.unsafe.offHeap\",\"\" + useOffHeapMemoryAllocator()))@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "when(blockManager.wrapForCompression(any(),any())).then(returnsSecondArg())@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "spillFilesCreated.clear()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "when(blockManager.diskBlockManager()).thenReturn(diskBlockManager)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "MockitoAnnotations.initMocks(this)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "when(blockManager.wrapForCompression(any(),any())).then(returnsSecondArg())@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "taskMemoryManager = new TaskMemoryManager(memoryManager,0)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "when(blockManager.diskBlockManager()).thenReturn(diskBlockManager)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "tempDir = Utils.createTempDir(System.getProperty(\"java.io.tmpdir\"),\"unsafe-test\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "shuffleMemoryManager = ShuffleMemoryManager.create(Long.MAX_VALUE,PAGE_SIZE_BYTES)@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "setup['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "spillFilesCreated.clear()@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "setup['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "when(taskContext.taskMetrics()).thenReturn(new TaskMetrics())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "when(diskBlockManager.createTempLocalBlock()).thenAnswer(new Answer<Tuple2<TempLocalBlockId,File>>(){@Override public Tuple2<TempLocalBlockId,File> answer(InvocationOnMock invocationOnMock){TempLocalBlockId blockId = new TempLocalBlockId(UUID.randomUUID())File file = File.createTempFile(\"spillFile\",\".spill\",tempDir)spillFilesCreated.add(file)return Tuple2$.MODULE$.apply(blockId,file)}})@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "taskMemoryManager = new TaskMemoryManager(new ExecutorMemoryManager(getMemoryAllocator()))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "setUp['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13->10 [style = bold, label=""];
17->25 [style = bold, label=""];
4->3 [style = bold, label=""];
1->4 [style = bold, label=""];
20->17 [style = bold, label=""];
12->5 [style = bold, label=""];
11->14 [style = bold, label=""];
2->1 [style = bold, label=""];
21->15 [style = bold, label=""];
0->2 [style = bold, label=""];
6->9 [style = solid, label="memoryManager"];
1->9 [style = dashed, label="0"];
8->6 [style = bold, label=""];
16->19 [style = bold, label=""];
13->12 [style = solid, label="tempDir"];
24->16 [style = bold, label=""];
18->20 [style = bold, label=""];
22->18 [style = bold, label=""];
23->21 [style = bold, label=""];
15->24 [style = bold, label=""];
14->12 [style = bold, label=""];
5->7 [style = bold, label=""];
24->20 [style = solid, label="tempDir"];
6->9 [style = bold, label=""];
19->22 [style = bold, label=""];
9->13 [style = bold, label=""];
10->11 [style = bold, label=""];
}
