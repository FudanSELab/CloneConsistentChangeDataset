digraph {
5 [style = filled, label = "final CountDownLatch latch = new CountDownLatch(1)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testWithRetryInBackground['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "client.start()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertTrue(new Timing().awaitLatch(latch))@@@20@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final CountDownLatch latch = new CountDownLatch(1)@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "WatcherRemovalFacade removerClient = (WatcherRemovalFacade)client.newWatcherRemoveCuratorFramework()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "client.start()@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Watcher w = new Watcher(){@Override public void process(WatchedEvent event){}}@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "removerClient.getData().usingWatcher(w).inBackground(callback).forPath(\"/one/two/three\")@@@19@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),new RetryOneTime(1))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "TestCleanState.test(client,proc)@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "removerClient.checkExists().usingWatcher(w).inBackground(callback).forPath(\"/one/two/three\")@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testMissingNodeInBackground['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testMissingNodeInBackground['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "server.stop()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(removerClient.getWatcherRemovalManager().getEntries().size(),0)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),new RetryOneTime(1))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "BackgroundCallback callback = new BackgroundCallback(){@Override public void processResult(CuratorFramework client,CuratorEvent event){latch.countDown()}}@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertTrue(new Timing().awaitLatch(latch))@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Callable<Void> proc = new Callable<Void>(){@Override public Void call(){client.start()WatcherRemovalFacade removerClient = (WatcherRemovalFacade)client.newWatcherRemoveCuratorFramework()Watcher w = new Watcher(){@Override public void process(WatchedEvent event){}}final CountDownLatch latch = new CountDownLatch(1)BackgroundCallback callback = new BackgroundCallback(){@Override public void processResult(CuratorFramework client,CuratorEvent event){latch.countDown()}}removerClient.getData().usingWatcher(w).inBackground(callback).forPath(\"/one/two/three\")Assert.assertTrue(new Timing().awaitLatch(latch))Assert.assertEquals(removerClient.getWatcherRemovalManager().getEntries().size(),0)removerClient.removeWatchers()return null}}@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),new RetryOneTime(1))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8->10 [style = bold, label=""];
0->16 [style = bold, label=""];
19->17 [style = solid, label="client"];
15->2 [style = bold, label=""];
1->8 [style = bold, label=""];
9->0 [style = bold, label=""];
4->6 [style = bold, label=""];
5->2 [style = solid, label="latch"];
21->15 [style = bold, label=""];
2->3 [style = bold, label=""];
8->3 [style = solid, label="client"];
11->12 [style = bold, label=""];
13->11 [style = bold, label=""];
8->13 [style = dashed, label="0"];
0->7 [style = bold, label=""];
6->2 [style = bold, label=""];
5->21 [style = bold, label=""];
18->20 [style = bold, label=""];
7->5 [style = bold, label=""];
11->12 [style = solid, label="proc"];
19->9 [style = bold, label=""];
4->15 [style = dashed, label="0"];
5->4 [style = bold, label=""];
13->12 [style = solid, label="client"];
16->5 [style = bold, label=""];
22->17 [style = bold, label=""];
10->9 [style = bold, label=""];
14->13 [style = bold, label=""];
2->22 [style = bold, label=""];
20->19 [style = bold, label=""];
7->6 [style = solid, label="latch"];
}
