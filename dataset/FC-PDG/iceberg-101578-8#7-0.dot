digraph {
2 [style = filled, label = "Map<StructLike,List<Record>> data = ImmutableMap.of(Row.of(\"Brown\"),Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(0)),Row.of(\"Green\"),Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(1)),Row.of(\"Pink\"),Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(2)))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testCreatePartitionedTableByProperty['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "String createSql = \"CREATE EXTERNAL TABLE \" + identifier + \" (customer_id BIGINT, first_name STRING COMMENT 'This is first name') \" + \"PARTITIONED BY (last_name STRING COMMENT 'This is last name') STORED BY \" + \"'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + testTables.propertiesForCreateTableSQL(ImmutableMap.of())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "runCreateAndReadTest(identifier,createSql,HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,spec,data)@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TableIdentifier identifier = TableIdentifier.of(\"default\",\"customers\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "PartitionSpec spec = PartitionSpec.builderFor(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA).identity(\"last_name\").build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testCreatePartitionedTableByProperty['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "testCreateTableWithColumnSpecificationPartitioned['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "String createSql = \"CREATE EXTERNAL TABLE \" + identifier + \" STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(spec) + \"', \" + \"'\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" + \"'\" + InputFormatConfig.CATALOG_NAME + \"'='\" + testTables.catalogName() + \"')\"@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "String createSql = \"CREATE EXTERNAL TABLE \" + identifier + \" STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(spec) + \"', \" + \"'\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" + \"'\" + InputFormatConfig.CATALOG_NAME + \"'='\" + Catalogs.ICEBERG_DEFAULT_CATALOG_NAME + \"')\"@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3->6 [style = dashed, label="0"];
9->0 [style = bold, label=""];
2->6 [style = bold, label=""];
0->3 [style = solid, label="identifier"];
2->3 [style = bold, label=""];
2->5 [style = solid, label="data"];
7->0 [style = bold, label=""];
4->2 [style = bold, label=""];
1->0 [style = bold, label=""];
4->5 [style = solid, label="spec"];
6->5 [style = solid, label="createSql"];
4->6 [style = solid, label="spec"];
6->5 [style = bold, label=""];
3->5 [style = bold, label=""];
3->5 [style = solid, label="createSql"];
8->5 [style = bold, label=""];
0->6 [style = solid, label="identifier"];
0->4 [style = bold, label=""];
4->3 [style = solid, label="spec"];
3->8 [style = dashed, label="0"];
0->5 [style = solid, label="identifier"];
8->5 [style = solid, label="createSql"];
0->8 [style = solid, label="identifier"];
2->8 [style = bold, label=""];
}
