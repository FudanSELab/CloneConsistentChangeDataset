digraph {
23 [style = filled, label = "Table table = catalog.createTable(tableIdent,schema,spec)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(\"Table should have a spec with one void field\",v1Expected,table.spec())@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "table = catalog.loadTable(tableIdent)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "replaceTxn.commitTransaction()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TableIdentifier tableIdent = TableIdentifier.of(\"db\",\"ns1\",\"ns2\",\"tbl\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "TableIdentifier tableIdent = TableIdentifier.of(DB_NAME,\"tbl\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertNotNull(table.currentSnapshot())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Configuration conf = new Configuration()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "createTxn.newAppend().appendFile(FILE_A).commit()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "String warehousePath = temp.newFolder().getAbsolutePath()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "HadoopCatalog catalog = new HadoopCatalog(conf,warehousePath)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertTrue(\"Order must unsorted\",table.sortOrder().isUnsorted())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Transaction createTxn = catalog.buildTable(tableIdent,SCHEMA).withPartitionSpec(SPEC).withProperty(\"key1\",\"value1\").createOrReplaceTransaction()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testCreateTableDefaultSortOrder['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "PartitionSpec v1Expected = PartitionSpec.builderFor(table.schema()).alwaysNull(\"data\",\"data_bucket\").withSpecId(1).build()@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "testReplaceTxnBuilder['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "testReplaceTxnBuilder['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(\"value2\",table.properties().get(\"key2\"))@@@19@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Assert.assertEquals(\"value1\",table.properties().get(\"key1\"))@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(\"Order ID must match\",0,table.sortOrder().orderId())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "createTxn.commitTransaction()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "{catalog.dropTable(tableIdent)}@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertTrue(table.spec().isUnpartitioned())@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Table table = catalog.loadTable(tableIdent)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "PartitionSpec spec = PartitionSpec.builderFor(schema).bucket(\"data\",16).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Transaction replaceTxn = catalog.buildTable(tableIdent,SCHEMA).withProperty(\"key2\",\"value2\").replaceTransaction()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(\"value1\",table.properties().get(\"key1\"))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertNull(table.currentSnapshot())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Schema schema = new Schema(required(1,\"id\",Types.IntegerType.get(),\"unique ID\"),required(2,\"data\",Types.StringType.get()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9->19 [style = bold, label=""];
12->7 [style = bold, label=""];
21->28 [style = solid, label="tableIdent"];
13->4 [style = bold, label=""];
8->5 [style = bold, label=""];
23->24 [style = bold, label=""];
20->18 [style = bold, label=""];
16->0 [style = bold, label=""];
15->16 [style = solid, label="warehousePath"];
17->14 [style = bold, label=""];
26->27 [style = bold, label=""];
21->23 [style = solid, label="tableIdent"];
11->14 [style = bold, label=""];
3->1 [style = bold, label=""];
2->8 [style = bold, label=""];
6->9 [style = bold, label=""];
10->12 [style = bold, label=""];
0->10 [style = bold, label=""];
7->13 [style = bold, label=""];
18->9 [style = bold, label=""];
25->28 [style = bold, label=""];
22->26 [style = bold, label=""];
14->16 [style = solid, label="conf"];
15->16 [style = bold, label=""];
0->13 [style = solid, label="tableIdent"];
24->25 [style = bold, label=""];
0->2 [style = solid, label="tableIdent"];
21->23 [style = bold, label=""];
14->15 [style = bold, label=""];
4->3 [style = bold, label=""];
26->23 [style = solid, label="schema"];
1->2 [style = bold, label=""];
8->20 [style = bold, label=""];
20->18 [style = solid, label="v1Expected"];
5->6 [style = bold, label=""];
27->23 [style = solid, label="spec"];
27->21 [style = bold, label=""];
}
