digraph {
12 [style = filled, label = "client1 = getMockClientWithPreviousCaughtUpTasks(mkSet(TASK_0_0,TASK_0_1,TASK_0_2,TASK_0_3))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "shouldNotAssignMoreThanMaxWarmupReplicas['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "shouldNotAssignMoreThanMaxWarmupReplicas['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final boolean probingRebalanceNeeded = new HighAvailabilityTaskAssignor().assign(clientStates,allTasks,statefulTasks,new AssignmentConfigs(100L,1,1,0,60 * 1000L))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "shouldNotAssignWarmupAndStandbyToTheSameClient['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final Set<TaskId> statefulTasks = mkSet(TASK_0_0,TASK_0_1,TASK_0_2,TASK_0_3)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "statefulTasks = mkSet(TASK_0_0,TASK_0_1,TASK_0_2,TASK_0_3)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final ClientState client2 = getMockClientWithPreviousCaughtUpTasks(EMPTY_TASKS,statefulTasks)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertHasNoActiveTasks(client2)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(client2.standbyTaskCount(),equalTo(1))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "createTaskAssignor()@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(client1.activeTasks(),equalTo(mkSet(TASK_0_0,TASK_0_1,TASK_0_2,TASK_0_3)))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertThat(probingRebalanceNeeded,is(true))@@@13@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "allTasks = mkSet(TASK_0_0,TASK_0_1,TASK_0_2,TASK_0_3)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "clientStates = getClientStatesMap(client1,client2)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "client2 = getMockClientWithPreviousCaughtUpTasks(EMPTY_TASKS)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "maxWarmupReplicas = 1@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final Map<UUID,ClientState> clientStates = getClientStatesMap(client1,client2)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "maxWarmupReplicas = 1@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(client2.standbyTasks(),equalTo(mkSet(TASK_0_0,TASK_0_1,TASK_0_2,TASK_0_3)))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertHasNoStandbyTasks(client1)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "taskAssignor.assign()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(client1.activeTasks(),equalTo(mkSet(TASK_0_0,TASK_0_1,TASK_0_2,TASK_0_3)))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final ClientState client1 = getMockClientWithPreviousCaughtUpTasks(mkSet(TASK_0_0,TASK_0_1,TASK_0_2,TASK_0_3),statefulTasks)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "numStandbyReplicas = 1@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final Set<TaskId> allTasks = mkSet(TASK_0_0,TASK_0_1,TASK_0_2,TASK_0_3)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5->3 [style = bold, label=""];
10->15 [style = dashed, label="0"];
15->13 [style = bold, label=""];
12->6 [style = solid, label="client2"];
2->20 [style = dashed, label="0"];
4->17 [style = dashed, label="0"];
11->1 [style = bold, label=""];
13->18 [style = solid, label="client1"];
2->24 [style = solid, label="client2"];
15->13 [style = solid, label="statefulTasks"];
4->2 [style = solid, label="client1"];
6->24 [style = bold, label=""];
7->4 [style = bold, label=""];
25->6 [style = bold, label=""];
14->20 [style = solid, label="allTasks"];
10->7 [style = bold, label=""];
15->20 [style = solid, label="statefulTasks"];
9->6 [style = bold, label=""];
2->0 [style = solid, label="client2"];
4->9 [style = solid, label="client1"];
17->8 [style = solid, label="client2"];
13->17 [style = bold, label=""];
12->2 [style = bold, label=""];
18->20 [style = bold, label=""];
2->0 [style = bold, label=""];
12->6 [style = solid, label="client1"];
23->22 [style = bold, label=""];
20->16 [style = bold, label=""];
19->14 [style = bold, label=""];
15->17 [style = solid, label="statefulTasks"];
16->21 [style = bold, label=""];
3->8 [style = bold, label=""];
0->5 [style = bold, label=""];
8->9 [style = bold, label=""];
22->10 [style = bold, label=""];
7->13 [style = dashed, label="0"];
4->12 [style = bold, label=""];
13->3 [style = solid, label="client1"];
8->25 [style = dashed, label="0"];
14->15 [style = bold, label=""];
17->18 [style = solid, label="client2"];
12->2 [style = solid, label="client2"];
20->9 [style = solid, label="probingRebalanceNeeded"];
1->10 [style = bold, label=""];
8->25 [style = bold, label=""];
18->20 [style = solid, label="clientStates"];
12->0 [style = solid, label="client1"];
17->18 [style = bold, label=""];
21->3 [style = bold, label=""];
}
