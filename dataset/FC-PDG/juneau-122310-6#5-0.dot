digraph {
0 [style = filled, label = "String name = p.getName()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "list.add(x)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "return this@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String key = key(name)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "return this@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "List<RequestHeader> l = map.get(key)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "addDefault['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "List<NameValuePair> pairs@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "addDefault['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "boolean hasAllBlanks = l != null && l.stream().allMatch(null)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<? extends NameValuePair> pairs@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "list.removeAll(l)@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "List<Header> pairs@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertArgNotNull(\"pairs\",pairs)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "list.add(x)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "hasAllBlanks@@@9@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "l == null || hasAllBlanks@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "RequestHeader x = new RequestHeader(req,name,vs.resolve(p.getValue()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "list.removeAll(l)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "String name = p.getName()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "boolean hasAllBlanks = l != null && l.stream().allMatch(null)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "hasAllBlanks@@@10@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "addDefault['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "map.put(key,AList.of(x))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->8 [style = solid, label="key"];
5->10 [style = bold, label=""];
13->10 [style = bold, label=""];
12->3 [style = dotted, label="true"];
10->20 [style = bold, label=""];
1->0 [style = solid, label="name"];
11->5 [style = solid, label="l"];
17->6 [style = bold, label=""];
5->10 [style = dotted, label="true"];
11->17 [style = solid, label="key"];
6->13 [style = dotted, label="true"];
1->10 [style = solid, label="name"];
10->4 [style = solid, label="x"];
0->11 [style = solid, label="key"];
6->10 [style = solid, label="hasAllBlanks"];
0->11 [style = bold, label=""];
11->9 [style = solid, label="l"];
9->13 [style = solid, label="hasAllBlanks"];
0->20 [style = solid, label="name"];
13->5 [style = dotted, label="true"];
5->18 [style = bold, label=""];
0->11 [style = solid, label="name"];
1->0 [style = bold, label=""];
10->21 [style = bold, label=""];
11->17 [style = dashed, label="0"];
15->14 [style = dotted, label="true"];
20->8 [style = solid, label="x"];
11->9 [style = bold, label=""];
2->10 [style = bold, label=""];
9->6 [style = solid, label="hasAllBlanks"];
12->1 [style = bold, label=""];
23->0 [style = bold, label=""];
8->7 [style = bold, label=""];
9->6 [style = bold, label=""];
8->22 [style = bold, label=""];
6->10 [style = dotted, label="true"];
11->6 [style = solid, label="l"];
6->1 [style = bold, label=""];
8->1 [style = bold, label=""];
6->5 [style = bold, label=""];
5->2 [style = bold, label=""];
20->8 [style = bold, label=""];
22->18 [style = bold, label=""];
6->5 [style = dotted, label="true"];
21->20 [style = bold, label=""];
22->0 [style = bold, label=""];
16->23 [style = solid, label="pairs"];
6->4 [style = dotted, label="true"];
17->21 [style = solid, label="l"];
5->0 [style = bold, label=""];
5->22 [style = dotted, label="true"];
6->8 [style = dotted, label="true"];
19->23 [style = bold, label=""];
6->13 [style = bold, label=""];
17->6 [style = solid, label="l"];
19->16 [style = dotted, label="true"];
10->4 [style = bold, label=""];
20->22 [style = solid, label="x"];
13->5 [style = bold, label=""];
6->5 [style = solid, label="hasAllBlanks"];
4->8 [style = bold, label=""];
11->17 [style = bold, label=""];
5->20 [style = dotted, label="true"];
11->22 [style = solid, label="key"];
10->20 [style = dashed, label="0"];
11->2 [style = solid, label="l"];
6->7 [style = bold, label=""];
5->8 [style = dotted, label="true"];
3->14 [style = dashed, label="0"];
9->5 [style = solid, label="hasAllBlanks"];
10->21 [style = dotted, label="true"];
3->16 [style = dashed, label="0"];
17->5 [style = solid, label="l"];
5->2 [style = dotted, label="true"];
15->1 [style = bold, label=""];
10->8 [style = solid, label="x"];
}
