digraph {
13 [style = filled, label = "createDefinitions.getValue()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "return result@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "result.setContainsNotExistClause(null != ctx.notExistClause())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "MySQLCreateTableStatement result = new MySQLCreateTableStatement()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "null != ctx.createDefinitionClause()@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final CreateTableContext ctx@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "visitCreateTable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "CreateDefinitionSegment each@@@8@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "result.setNotExisted(null != ctx.tableNotExistClause())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "result.setNotExisted(null != ctx.notExistClause())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "visitCreateTable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "createDefinitions.getValue()@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "visitCreateTable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "PostgreSQLCreateTableStatement result = new PostgreSQLCreateTableStatement()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "CreateDefinitionSegment each@@@8@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "result.getColumnDefinitions().add((ColumnDefinitionSegment)each)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "result.getConstraintDefinitions().add((ConstraintDefinitionSegment)each)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "result.setTable((SimpleTableSegment)visit(ctx.tableName()))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "CollectionValue<CreateDefinitionSegment> createDefinitions = (CollectionValue<CreateDefinitionSegment>)visit(ctx.createDefinitionClause())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "each instanceof ColumnDefinitionSegment@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "each instanceof ConstraintDefinitionSegment@@@12@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
6->5 [style = dotted, label="false"];
3->1 [style = bold, label=""];
11->1 [style = bold, label=""];
7->10 [style = bold, label=""];
2->6 [style = bold, label=""];
2->1 [style = bold, label=""];
16->10 [style = bold, label=""];
0->17 [style = bold, label=""];
10->19 [style = dashed, label="0"];
8->15 [style = dashed, label="0"];
11->12 [style = dotted, label="true"];
11->14 [style = dotted, label="true"];
3->6 [style = bold, label=""];
11->9 [style = dotted, label="true"];
11->12 [style = bold, label=""];
11->13 [style = dotted, label="true"];
5->3 [style = dotted, label="true"];
11->18 [style = dotted, label="true"];
16->4 [style = dotted, label="true"];
12->6 [style = bold, label=""];
0->15 [style = bold, label=""];
19->0 [style = bold, label=""];
19->1 [style = solid, label="result"];
6->2 [style = bold, label=""];
5->1 [style = bold, label=""];
6->5 [style = bold, label=""];
6->2 [style = dotted, label="true"];
5->6 [style = bold, label=""];
15->11 [style = bold, label=""];
20->4 [style = dotted, label="true"];
11->6 [style = dotted, label="true"];
10->0 [style = bold, label=""];
7->4 [style = dotted, label="true"];
0->8 [style = bold, label=""];
8->17 [style = dashed, label="0"];
20->19 [style = bold, label=""];
10->1 [style = solid, label="result"];
8->11 [style = bold, label=""];
17->11 [style = bold, label=""];
}
