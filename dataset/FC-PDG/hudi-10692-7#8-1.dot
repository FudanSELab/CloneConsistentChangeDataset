digraph {
11 [style = filled, label = "assertEquals(compositeKeyGenerator.getPartitionPathFields().size(),1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(partitionPath,hoodieKey.getPartitionPath())@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(keyGenerator.getPartitionPathFields().size(),0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "String partitionPath = \"\"@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "NonpartitionedKeyGenerator keyGenerator = new NonpartitionedKeyGenerator(properties)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Row row = KeyGeneratorTestUtilities.getRow(record,HoodieTestDataGenerator.AVRO_SCHEMA,AvroConversionUtils.convertAvroSchemaToStructType(HoodieTestDataGenerator.AVRO_SCHEMA))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY.key(),\"_row_key\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD.key(),\"_row_key\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "testSingleValueKeyGenerator['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Assertions.assertEquals(compositeKeyGenerator.getPartitionPath(row),partitionPath)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY.key(),\"timestamp,driver\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(compositeKeyGenerator.getRecordKeyFields().size(),1)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "String rowKey = \"timestamp\" + ComplexAvroKeyGenerator.DEFAULT_RECORD_KEY_SEPARATOR + record.get(\"timestamp\").toString() + \",\" + \"driver\" + ComplexAvroKeyGenerator.DEFAULT_RECORD_KEY_SEPARATOR + record.get(\"driver\").toString()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "String partitionPath = record.get(\"timestamp\").toString()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "HoodieKey hoodieKey = compositeKeyGenerator.getKey(record)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY.key(),\"\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(rowKey,hoodieKey.getRecordKey())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(keyGenerator.getRecordKeyFields().size(),2)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "InternalRow internalRow = KeyGeneratorTestUtilities.getInternalRow(row)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD.key(),\"timestamp\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "TypedProperties properties = new TypedProperties()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "String rowKey = record.get(\"_row_key\").toString()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"_row_key:\" + rowKey,hoodieKey.getRecordKey())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testMultipleValueKeyGeneratorNonPartitioned1['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "GenericRecord record = dataGenerator.generateGenericRecords(1).get(0)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assertions.assertEquals(compositeKeyGenerator.getPartitionPath(internalRow,row.schema()),partitionPath)@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "HoodieKey hoodieKey = keyGenerator.getKey(record)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY.key(),\"timestamp\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "ComplexKeyGenerator compositeKeyGenerator = new ComplexKeyGenerator(properties)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testSingleValueKeyGenerator['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13->10 [style = bold, label=""];
7->23 [style = dashed, label="0"];
10->15 [style = bold, label=""];
7->18 [style = dashed, label="0"];
15->9 [style = solid, label="row"];
1->26 [style = dashed, label="0"];
14->15 [style = solid, label="record"];
16->6 [style = bold, label=""];
26->25 [style = bold, label=""];
3->14 [style = bold, label=""];
27->3 [style = bold, label=""];
12->11 [style = bold, label=""];
16->6 [style = solid, label="internalRow"];
5->24 [style = dashed, label="0"];
4->10 [style = solid, label="partitionPath"];
4->2 [style = bold, label=""];
20->1 [style = bold, label=""];
4->9 [style = solid, label="partitionPath"];
9->16 [style = bold, label=""];
19->0 [style = bold, label=""];
5->20 [style = dashed, label="0"];
4->28 [style = dashed, label="0"];
2->13 [style = bold, label=""];
0->7 [style = bold, label=""];
29->28 [style = bold, label=""];
25->27 [style = bold, label=""];
4->6 [style = solid, label="partitionPath"];
5->1 [style = bold, label=""];
18->20 [style = bold, label=""];
24->26 [style = bold, label=""];
7->5 [style = bold, label=""];
23->24 [style = bold, label=""];
28->21 [style = bold, label=""];
17->0 [style = bold, label=""];
8->13 [style = solid, label="rowKey"];
0->23 [style = bold, label=""];
28->10 [style = solid, label="partitionPath"];
14->21 [style = solid, label="record"];
12->25 [style = dashed, label="0"];
2->21 [style = dashed, label="0"];
11->3 [style = bold, label=""];
21->22 [style = bold, label=""];
15->9 [style = bold, label=""];
0->26 [style = solid, label="properties"];
22->10 [style = bold, label=""];
1->12 [style = bold, label=""];
14->29 [style = bold, label=""];
29->22 [style = solid, label="rowKey"];
0->18 [style = bold, label=""];
14->8 [style = bold, label=""];
30->0 [style = bold, label=""];
14->2 [style = solid, label="record"];
15->16 [style = solid, label="row"];
8->4 [style = bold, label=""];
11->27 [style = dashed, label="0"];
13->22 [style = dashed, label="0"];
8->29 [style = dashed, label="0"];
0->1 [style = solid, label="properties"];
}
