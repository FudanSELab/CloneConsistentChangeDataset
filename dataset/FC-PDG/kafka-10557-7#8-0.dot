digraph {
2 [style = filled, label = "assertThat(store.get(\"a\"),equalTo(21L))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "pipeInput(\"input-topic\",\"a\",1L,9999L)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "OutputVerifier.compareKeyValue(testDriver.readOutput(\"result-topic\",stringDeserializer,longDeserializer),\"a\",21L)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "compareKeyValue(testDriver.readRecord(\"result-topic\",stringDeserializer,longDeserializer),\"a\",21L)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertTrue(testDriver.isEmpty(\"result-topic\"))@@@7@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "testDriver.pipeInput(recordFactory.create(\"input-topic\",\"a\",1L,9999L))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testDriver.pipeInput(recordFactory.create(\"input-topic\",\"a\",1L,9999L))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "shouldNotUpdateStoreForSmallerValue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "setup()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertNull(testDriver.readOutput(\"result-topic\",stringDeserializer,longDeserializer))@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "shouldPunctuateIfEvenTimeAdvances['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertNull(testDriver.readOutput(\"result-topic\",stringDeserializer,longDeserializer))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "OutputVerifier.compareKeyValue(testDriver.readOutput(\"result-topic\",stringDeserializer,longDeserializer),\"a\",21L)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "shouldNotUpdateStoreForSmallerValue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testDriver.pipeInput(recordFactory.create(\"input-topic\",\"a\",1L,10000L))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->6 [style = bold, label=""];
12->13 [style = bold, label=""];
0->9 [style = bold, label=""];
9->2 [style = bold, label=""];
5->0 [style = bold, label=""];
13->11 [style = bold, label=""];
1->6 [style = dashed, label="0"];
4->12 [style = bold, label=""];
14->0 [style = bold, label=""];
0->3 [style = bold, label=""];
1->10 [style = bold, label=""];
10->4 [style = bold, label=""];
2->1 [style = bold, label=""];
6->8 [style = bold, label=""];
7->0 [style = bold, label=""];
3->2 [style = bold, label=""];
3->9 [style = dashed, label="0"];
3->1 [style = bold, label=""];
1->4 [style = bold, label=""];
}
