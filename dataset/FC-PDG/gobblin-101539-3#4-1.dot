digraph {
5 [style = filled, label = "Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_map_0,struct_map_2))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "TypeDescription struct_array_1 = TypeDescription.fromString(\"struct<first:array<int>,second:int>\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TypeDescription struct_map_0 = TypeDescription.fromString(\"struct<first:map<string,string>,second:int>\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "TypeDescription struct_6 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<e:int>,c:int>\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_array_0,struct_array_2))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_2,struct_3))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "TypeDescription struct_1 = TypeDescription.fromString(\"struct<a:int>\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_array_0,struct_array_1))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "complexTypeEligibilityCheck['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "TypeDescription struct_2 = TypeDescription.fromString(\"struct<a:struct<a:int,b:int>,b:struct<c:int,d:int>,c:int>\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_map_0,struct_map_3))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_4,struct_6))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_6,struct_7))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TypeDescription struct_array_2 = TypeDescription.fromString(\"struct<first:array<string>,second:int>\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "TypeDescription struct_4 = TypeDescription.fromString(\"struct<a:struct<a:int,b:int>,b:struct<c:int,d:int>,c:int>\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_map_0,struct_map_1))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "complexTypeEligibilityCheck['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testSchemaContains['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "TypeDescription struct_8 = TypeDescription.fromString(\"struct<a:struct<x:int>,b:struct<e:int>,c:int>\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "TypeDescription struct_map_2 = TypeDescription.fromString(\"struct<first:map<string,int>,second:int>\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TypeDescription struct_array_0 = TypeDescription.fromString(\"struct<first:array<int>,second:int>\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "TypeDescription struct_3 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<c:int>,c:int>\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "TypeDescription struct_7 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<e:int,f:int>,c:int>\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "TypeDescription struct_map_3 = TypeDescription.fromString(\"struct<second:int>\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "TypeDescription struct_5 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<c:int>,d:int>\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "TypeDescription struct_9 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<e:int,f:int>,c:int>\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "TypeDescription struct_0 = TypeDescription.fromString(\"struct<a:int,b:int>\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_0,struct_1))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_4,struct_5))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "TypeDescription struct_map_1 = TypeDescription.fromString(\"struct<first:map<string,string>,second:int>\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_8,struct_9))@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4->10 [style = bold, label=""];
17->25 [style = bold, label=""];
5->8 [style = bold, label=""];
23->20 [style = bold, label=""];
24->27 [style = solid, label="struct_4"];
12->5 [style = bold, label=""];
29->30 [style = bold, label=""];
21->27 [style = bold, label=""];
9->2 [style = bold, label=""];
11->1 [style = bold, label=""];
19->25 [style = solid, label="struct_8"];
30->18 [style = solid, label="struct_7"];
3->24 [style = dashed, label="0"];
4->5 [style = solid, label="struct_map_2"];
16->26 [style = bold, label=""];
22->29 [style = bold, label=""];
18->19 [style = bold, label=""];
7->5 [style = solid, label="struct_map_0"];
14->15 [style = solid, label="struct_1"];
20->14 [style = bold, label=""];
22->18 [style = solid, label="struct_6"];
19->17 [style = bold, label=""];
7->12 [style = solid, label="struct_map_0"];
5->29 [style = dashed, label="0"];
6->14 [style = dashed, label="0"];
15->16 [style = bold, label=""];
4->21 [style = dashed, label="0"];
27->22 [style = bold, label=""];
3->4 [style = bold, label=""];
30->18 [style = bold, label=""];
26->28 [style = solid, label="struct_3"];
1->0 [style = solid, label="struct_array_0"];
7->3 [style = bold, label=""];
13->1 [style = bold, label=""];
20->15 [style = solid, label="struct_0"];
16->28 [style = solid, label="struct_2"];
24->29 [style = solid, label="struct_4"];
0->7 [style = bold, label=""];
17->25 [style = solid, label="struct_9"];
1->20 [style = dashed, label="0"];
2->0 [style = bold, label=""];
1->6 [style = bold, label=""];
1->9 [style = solid, label="struct_array_0"];
24->21 [style = bold, label=""];
3->12 [style = solid, label="struct_map_1"];
9->15 [style = dashed, label="0"];
10->12 [style = bold, label=""];
7->8 [style = solid, label="struct_map_0"];
2->16 [style = dashed, label="0"];
28->24 [style = bold, label=""];
14->15 [style = bold, label=""];
26->28 [style = bold, label=""];
6->9 [style = bold, label=""];
6->9 [style = solid, label="struct_array_1"];
10->8 [style = solid, label="struct_map_3"];
21->27 [style = solid, label="struct_5"];
2->0 [style = solid, label="struct_array_2"];
22->29 [style = solid, label="struct_6"];
}
