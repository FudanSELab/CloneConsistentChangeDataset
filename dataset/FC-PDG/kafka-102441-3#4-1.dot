digraph {
1 [style = filled, label = "final Task task2 = mock()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "thread.setState(StreamThread.State.STARTING)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "expect(consumerGroupMetadata.groupInstanceId()).andReturn(Optional.empty())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(exceptionHandlerInvoked.get(),is(true))@@@38@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "final StreamThread thread = new StreamThread(mockTime,config,null,consumer,consumer,null,null,taskManager,streamsMetrics,internalTopologyBuilder,CLIENT_ID,new LogContext(\"\"),new AtomicInteger(),new AtomicLong(Long.MAX_VALUE),null,HANDLER,null){@Override void runOnce(){setState(State.PENDING_SHUTDOWN)throw new TaskCorruptedException(corruptedTasks)}}.updateThreadMetadata(getSharedAdminClientId(CLIENT_ID))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "taskManager.handleCorruption(corruptedTasks)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expect(taskManager.producerClientIds()).andStubReturn(Collections.emptySet())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "expect(task1.state()).andReturn(Task.State.RUNNING).anyTimes()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "EasyMock.replay(task1,task2,taskManager,consumer)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "taskManager.handleLostAll()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final ConsumerGroupMetadata consumerGroupMetadata = mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "expectLastCall()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final TaskManager taskManager = EasyMock.createNiceMock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "verify(taskManager)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "shouldCatchTimeoutExceptionFromHandleCorruptionAndInvokeExceptionHandler['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "final Consumer<byte((,byte((> consumer = mock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "consumer.unsubscribe()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expect(task2.state()).andStubReturn(Task.State.RUNNING)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "thread.setStreamsUncaughtExceptionHandler(null)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "EasyMock.replay(task1,task2,taskManager,consumer)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "expect(consumer.groupMetadata()).andStubReturn(consumerGroupMetadata)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "expect(task2.id()).andStubReturn(taskId2)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "expect(task2.id()).andReturn(taskId2).anyTimes()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "expect(task1.state()).andStubReturn(Task.State.RUNNING)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "shouldCatchTimeoutExceptionFromHandleCorruptionAndInvokeExceptionHandler['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "expect(task1.id()).andReturn(taskId1).anyTimes()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final Task task1 = mock()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final TaskId taskId1 = new TaskId(0,0)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "consumer.subscribe((Collection<String>)anyObject(),anyObject())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "expect(task1.id()).andStubReturn(taskId1)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "verify(taskManager)@@@37@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final TaskId taskId2 = new TaskId(0,2)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "thread.run()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "shouldCatchTaskMigratedExceptionOnOnTaskCorruptedExceptionPath['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics,CLIENT_ID,StreamsConfig.METRICS_LATEST,mockTime)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "thread.runLoop()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "expectLastCall().andThrow(new TimeoutException())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final AtomicBoolean exceptionHandlerInvoked = new AtomicBoolean(false)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final Set<TaskId> corruptedTasks = singleton(taskId1)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics,CLIENT_ID,StreamsConfig.METRICS_LATEST,mockTime)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "EasyMock.replay(consumerGroupMetadata)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "expect(task2.state()).andReturn(Task.State.RUNNING).anyTimes()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "expectLastCall().andThrow(new TaskMigratedException(\"Task migrated\",new RuntimeException(\"non-corrupted task migrated\")))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
32->35 [style = bold, label=""];
18->40 [style = dashed, label="0"];
5->27 [style = solid, label="taskId1"];
10->20 [style = bold, label=""];
18->24 [style = bold, label=""];
1->13 [style = solid, label="task2"];
4->17 [style = bold, label=""];
28->10 [style = bold, label=""];
15->7 [style = bold, label=""];
38->44 [style = bold, label=""];
0->27 [style = bold, label=""];
8->18 [style = bold, label=""];
26->1 [style = bold, label=""];
0->32 [style = dashed, label="0"];
35->39 [style = bold, label=""];
22->32 [style = bold, label=""];
22->24 [style = solid, label="corruptedTasks"];
5->22 [style = solid, label="taskId1"];
21->25 [style = bold, label=""];
4->17 [style = solid, label="consumerGroupMetadata"];
16->13 [style = solid, label="consumer"];
26->13 [style = solid, label="task1"];
33->13 [style = bold, label=""];
2->18 [style = solid, label="taskId2"];
24->41 [style = bold, label=""];
4->11 [style = solid, label="consumerGroupMetadata"];
19->16 [style = bold, label=""];
26->12 [style = solid, label="task1"];
20->21 [style = bold, label=""];
6->14 [style = bold, label=""];
19->14 [style = solid, label="taskManager"];
5->2 [style = bold, label=""];
17->28 [style = bold, label=""];
27->35 [style = dashed, label="0"];
22->0 [style = bold, label=""];
29->19 [style = bold, label=""];
14->23 [style = bold, label=""];
34->37 [style = bold, label=""];
25->11 [style = bold, label=""];
19->13 [style = solid, label="taskManager"];
39->40 [style = bold, label=""];
8->39 [style = dashed, label="0"];
13->36 [style = bold, label=""];
7->6 [style = bold, label=""];
44->34 [style = bold, label=""];
3->13 [style = bold, label=""];
43->33 [style = bold, label=""];
40->24 [style = bold, label=""];
1->12 [style = solid, label="task2"];
19->12 [style = solid, label="taskManager"];
9->41 [style = dashed, label="0"];
12->3 [style = bold, label=""];
9->12 [style = bold, label=""];
13->15 [style = bold, label=""];
36->38 [style = bold, label=""];
16->12 [style = solid, label="consumer"];
16->4 [style = bold, label=""];
2->22 [style = bold, label=""];
30->16 [style = bold, label=""];
41->43 [style = bold, label=""];
27->8 [style = bold, label=""];
31->19 [style = bold, label=""];
19->37 [style = solid, label="taskManager"];
24->9 [style = bold, label=""];
42->19 [style = bold, label=""];
11->26 [style = bold, label=""];
19->30 [style = bold, label=""];
}
