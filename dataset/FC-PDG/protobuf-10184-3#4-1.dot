digraph {
15 [style = filled, label = "assertMapCounts['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertThat(testMapOrBuilder.getInt32ToMessageFieldCount()).isEqualTo(expectedCount)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertThat(testMapOrBuilder.getStringToInt32FieldCount()).isEqualTo(expectedCount)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertMapCounts['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "TestMapOrBuilder testMapOrBuilder@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(expectedCount,testMapOrBuilder.getInt32ToBytesFieldCount())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TestMapOrBuilder testMapOrBuilder@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(expectedCount,testMapOrBuilder.getInt32ToMessageFieldCount())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(testMapOrBuilder.getInt32ToEnumFieldCount()).isEqualTo(expectedCount)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertEquals(expectedCount,testMapOrBuilder.getInt32ToStringFieldCount())@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(testMapOrBuilder.getInt32ToBytesFieldCount()).isEqualTo(expectedCount)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertEquals(expectedCount,testMapOrBuilder.getStringToInt32FieldCount())@@@8@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(expectedCount,testMapOrBuilder.getInt32ToEnumFieldCount())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(testMapOrBuilder.getInt32ToInt32FieldCount()).isEqualTo(expectedCount)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(testMapOrBuilder.getInt32ToStringFieldCount()).isEqualTo(expectedCount)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertEquals(expectedCount,testMapOrBuilder.getInt32ToInt32FieldCount())@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "int expectedCount@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertMapCounts['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "TestMapOrBuilder testMapOrBuilder@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
5->3 [style = bold, label=""];
4->3 [style = solid, label="expectedCount"];
9->11 [style = bold, label=""];
4->10 [style = solid, label="expectedCount"];
15->14 [style = bold, label=""];
4->7 [style = solid, label="expectedCount"];
2->6 [style = bold, label=""];
4->13 [style = solid, label="expectedCount"];
6->0 [style = bold, label=""];
18->2 [style = bold, label=""];
4->0 [style = solid, label="expectedCount"];
15->16 [style = dotted, label="true"];
4->5 [style = solid, label="expectedCount"];
8->4 [style = dotted, label="true"];
15->4 [style = dotted, label="true"];
0->7 [style = bold, label=""];
6->12 [style = dashed, label="0"];
4->6 [style = solid, label="expectedCount"];
12->13 [style = bold, label=""];
8->1 [style = dotted, label="true"];
7->5 [style = bold, label=""];
4->14 [style = solid, label="expectedCount"];
2->14 [style = dashed, label="0"];
8->2 [style = bold, label=""];
5->11 [style = dashed, label="0"];
11->10 [style = bold, label=""];
7->9 [style = dashed, label="0"];
4->9 [style = solid, label="expectedCount"];
14->12 [style = bold, label=""];
0->13 [style = dashed, label="0"];
4->11 [style = solid, label="expectedCount"];
4->12 [style = solid, label="expectedCount"];
3->10 [style = dashed, label="0"];
13->9 [style = bold, label=""];
18->4 [style = dotted, label="true"];
18->17 [style = dotted, label="true"];
4->2 [style = solid, label="expectedCount"];
}
