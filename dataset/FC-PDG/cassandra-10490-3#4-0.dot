digraph {
6 [style = filled, label = "Assert.assertTrue(cb.submittedCompactions.contains(cfm.id))@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "cb.apply(Lists.newArrayList(result))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(Transactional.AbstractTransactional.State.ABORTED,result.txn.state())@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "makeSSTables(2)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertTrue(cb.submittedCompactions.isEmpty())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "InstrumentedAcquisitionCallback cb = new InstrumentedAcquisitionCallback(UUIDGen.getTimeUUID(),atEndpoint(FULL_RANGE,NO_RANGES))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(1,cb.submittedCompactions.size())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertTrue(cb.submittedCompactions.isEmpty())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "PendingAntiCompaction.AcquireResult result = acquisitionCallable.call()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "cb.apply(Lists.newArrayList(result,null))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "callbackNullResult['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "PendingAntiCompaction.AcquisitionCallable acquisitionCallable = new PendingAntiCompaction.AcquisitionCallable(cfs,FULL_RANGE,UUIDGen.getTimeUUID())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "callbackSuccess['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "cfs.disableAutoCompaction()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "InstrumentedAcquisitionCallback cb = new InstrumentedAcquisitionCallback(UUIDGen.getTimeUUID(),FULL_RANGE)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "callbackSuccess['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(Transactional.AbstractTransactional.State.IN_PROGRESS,result.txn.state())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertNotNull(result)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->16 [style = dashed, label="0"];
4->12 [style = dashed, label="0"];
8->5 [style = bold, label=""];
2->7 [style = bold, label=""];
6->14 [style = dashed, label="0"];
7->9 [style = bold, label=""];
1->12 [style = bold, label=""];
9->1 [style = solid, label="result"];
11->0 [style = bold, label=""];
8->13 [style = dashed, label="0"];
10->8 [style = bold, label=""];
17->4 [style = bold, label=""];
9->8 [style = solid, label="result"];
12->10 [style = bold, label=""];
15->0 [style = bold, label=""];
10->13 [style = bold, label=""];
13->16 [style = bold, label=""];
9->13 [style = solid, label="result"];
3->0 [style = bold, label=""];
16->14 [style = bold, label=""];
1->17 [style = bold, label=""];
1->4 [style = bold, label=""];
4->10 [style = bold, label=""];
0->2 [style = bold, label=""];
9->1 [style = bold, label=""];
5->6 [style = bold, label=""];
}
