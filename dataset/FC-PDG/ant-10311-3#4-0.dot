digraph {
8 [style = filled, label = "assertEquals(\"Return type of \" + name,expect,ih.getElementType(name))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Map elemMap = getExpectedNestedElements()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "testGetNestedElements['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertTrue(\"Found all\",attrMap.isEmpty())@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Map<String,Class<?>> elemMap = getExpectedNestedElements()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Map attrMap = getExpectedAttributes()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Class expect = (Class)attrMap.get(name)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "attrMap.remove(name)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Enumeration e = ih.getNestedElements()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "String name = (String)e.nextElement()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "e.hasMoreElements()@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertNotNull(\"Support for \" + name + \" in IntrospectioNHelperTest?\",expect)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(\"Found all\",elemMap.isEmpty())@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "attrMap.remove(\"name\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Class expect = (Class)elemMap.get(name)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testGetNestedElements['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertNotNull(\"Support for \" + name + \" in IntrospectionHelperTest?\",expect)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "elemMap.remove(name)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testGetAttributes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Enumeration e = ih.getAttributes()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(\"Type of \" + name,expect,ih.getAttributeType(name))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->15 [style = bold, label=""];
5->8 [style = bold, label=""];
20->13 [style = solid, label="expect"];
5->14 [style = dashed, label="0"];
9->0 [style = bold, label=""];
4->8 [style = solid, label="name"];
4->14 [style = solid, label="name"];
17->9 [style = bold, label=""];
9->4 [style = bold, label=""];
8->3 [style = bold, label=""];
4->19 [style = solid, label="name"];
4->13 [style = solid, label="name"];
18->17 [style = bold, label=""];
7->20 [style = dashed, label="0"];
4->5 [style = solid, label="name"];
20->14 [style = bold, label=""];
1->18 [style = dashed, label="0"];
1->10 [style = dashed, label="0"];
2->9 [style = bold, label=""];
2->17 [style = dashed, label="0"];
9->16 [style = bold, label=""];
4->7 [style = bold, label=""];
9->14 [style = dotted, label="true"];
8->13 [style = dashed, label="0"];
3->19 [style = dashed, label="0"];
9->8 [style = dotted, label="true"];
3->9 [style = bold, label=""];
6->1 [style = bold, label=""];
7->5 [style = bold, label=""];
13->19 [style = bold, label=""];
9->19 [style = dotted, label="true"];
19->9 [style = bold, label=""];
11->10 [style = bold, label=""];
9->13 [style = dotted, label="true"];
4->3 [style = solid, label="name"];
9->20 [style = dotted, label="true"];
4->20 [style = bold, label=""];
12->18 [style = bold, label=""];
9->4 [style = dotted, label="true"];
4->7 [style = solid, label="name"];
10->2 [style = bold, label=""];
1->2 [style = bold, label=""];
7->8 [style = solid, label="expect"];
20->14 [style = solid, label="expect"];
14->13 [style = bold, label=""];
9->7 [style = dotted, label="true"];
7->5 [style = solid, label="expect"];
9->3 [style = dotted, label="true"];
4->20 [style = solid, label="name"];
9->5 [style = dotted, label="true"];
}
