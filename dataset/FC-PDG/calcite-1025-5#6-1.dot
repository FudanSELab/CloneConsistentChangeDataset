digraph {
3 [style = filled, label = "++n@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testToLookup['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "grouping.getKey()@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final Lookup<Integer,String> lookup = Linq4j.asEnumerable(emps).toLookup(EMP_DEPTNO_SELECTOR,EMP_NAME_SELECTOR)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final Lookup<Integer,Employee> lookup = Linq4j.asEnumerable(emps).toLookup(EMP_DEPTNO_SELECTOR)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(grouping.contains(\"Janet\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(grouping.contains(\"Fred\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(1,grouping.count())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testToLookup['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "testToLookupSelector['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(\"(10:3, 30:1(\",lookup.applyResultSelector(null).orderBy(Functions.identitySelector()).toList().toString())@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(3,grouping.count())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(n,2)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int n = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertFalse(grouping.contains(\"Bill\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertTrue(grouping.contains(\"Bill\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "fail(\"unknown department number \" + grouping)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(grouping.contains(\"Eric\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertFalse(grouping.contains(\"Fred\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->17 [style = bold, label=""];
6->3 [style = bold, label=""];
4->3 [style = bold, label=""];
5->8 [style = bold, label=""];
7->2 [style = dotted, label="true"];
16->13 [style = bold, label=""];
7->10 [style = dotted, label="true"];
15->14 [style = bold, label=""];
6->1 [style = solid, label="n"];
2->1 [style = bold, label=""];
7->13 [style = dotted, label="true"];
0->11 [style = bold, label=""];
1->18 [style = bold, label=""];
8->6 [style = bold, label=""];
7->0 [style = bold, label=""];
7->4 [style = bold, label=""];
8->14 [style = dashed, label="0"];
7->0 [style = dotted, label="true"];
9->8 [style = bold, label=""];
12->1 [style = bold, label=""];
13->1 [style = bold, label=""];
7->12 [style = dotted, label="true"];
17->12 [style = bold, label=""];
7->11 [style = dotted, label="true"];
10->16 [style = bold, label=""];
3->7 [style = bold, label=""];
11->10 [style = bold, label=""];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
7->4 [style = dotted, label="true"];
7->16 [style = dotted, label="true"];
4->1 [style = bold, label=""];
7->17 [style = dotted, label="true"];
14->6 [style = bold, label=""];
}
