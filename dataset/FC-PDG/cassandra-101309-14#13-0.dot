digraph {
8 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().isEmpty())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(0))))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(hosts.get(2),tmd.getBootstrapTokens().get(keyTokens.get(1)))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().size() == 1)@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "assertTrue(tmd.isMember(hosts.get(2)))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(1,tmd.getBootstrapTokens().size())@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
65 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Util.createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,hostIds,6)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "testStateJumpToBootstrap['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(3))))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.left(Collections.singleton(keyTokens.get(1)),Gossiper.computeExpireTime()))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "ArrayList<Token> keyTokens = new ArrayList<Token>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(tmd.isLeaving(hosts.get(2)))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(3)).equals(keyTokens.get(2)))@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(3))))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "List<UUID> hostIds = new ArrayList<UUID>()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(tmd.getEndpoint(endpointTokens.get(2)) == null)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
56 [style = filled, label = "assertTrue(tmd.isLeaving(hosts.get(2)))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(Collections.singleton(endpointTokens.get(2))))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertTrue(tmd.isMember(hosts.get(3)))@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(3),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(2))))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)) == null)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "TokenMetadata tmd = ss.getTokenMetadata()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(Collections.singleton(keyTokens.get(1))))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(3)))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "IPartitioner partitioner = new RandomPartitioner()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(0)))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(2)))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(3)))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "assertTrue(tmd.isMember(hosts.get(2)))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(3),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(1))))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.bootstrapping(Collections.singleton(keyTokens.get(1))))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "List<InetAddress> hosts = new ArrayList<InetAddress>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "tmd.clearUnsafe()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(2)))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(keyTokens.get(3))))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(1))))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(2)))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(keyTokens.get(0),tmd.getToken(hosts.get(2)))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "ArrayList<Token> endpointTokens = new ArrayList<Token>()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Util.createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,hostIds,7)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(Collections.singleton(keyTokens.get(0))))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(4))))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertNull(tmd.getEndpoint(endpointTokens.get(2)))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "StorageService ss = StorageService.instance@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(3)))@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.bootstrapping(Collections.singleton(keyTokens.get(3))))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.bootstrapping(Collections.singleton(keyTokens.get(4))))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "ss.onChange(hosts.get(3),ApplicationState.STATUS,valueFactory.bootstrapping(Collections.singleton(keyTokens.get(1))))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().isEmpty())@@@45@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testStateJumpToLeaving['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(3)).equals(hosts.get(2)))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(3)))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "testStateJumpToLeaving['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(2)))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
48 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertTrue(tmd.getEndpoint(keyTokens.get(1)).equals(hosts.get(2)))@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "assertEquals(hosts.get(2),tmd.getEndpoint(keyTokens.get(1)))@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
62 [style = filled, label = "ss.onChange(hosts.get(3),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(keyTokens.get(2))))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38->44 [style = bold, label=""];
29->30 [style = bold, label=""];
54->63 [style = bold, label=""];
65->57 [style = bold, label=""];
39->61 [style = bold, label=""];
13->0 [style = solid, label="ss"];
28->9 [style = bold, label=""];
48->35 [style = bold, label=""];
61->46 [style = bold, label=""];
52->13 [style = bold, label=""];
12->9 [style = bold, label=""];
45->7 [style = bold, label=""];
21->2 [style = bold, label=""];
20->27 [style = bold, label=""];
14->7 [style = bold, label=""];
5->34 [style = bold, label=""];
37->53 [style = bold, label=""];
51->50 [style = bold, label=""];
5->0 [style = bold, label=""];
23->13 [style = bold, label=""];
25->0 [style = solid, label="partitioner"];
56->8 [style = bold, label=""];
24->17 [style = bold, label=""];
26->15 [style = bold, label=""];
9->21 [style = bold, label=""];
0->34 [style = dashed, label="0"];
25->10 [style = bold, label=""];
8->11 [style = bold, label=""];
8->28 [style = bold, label=""];
27->34 [style = solid, label="keyTokens"];
19->18 [style = bold, label=""];
26->32 [style = bold, label=""];
33->3 [style = bold, label=""];
47->48 [style = bold, label=""];
3->11 [style = bold, label=""];
57->60 [style = bold, label=""];
44->49 [style = bold, label=""];
27->16 [style = bold, label=""];
49->62 [style = bold, label=""];
46->37 [style = bold, label=""];
16->34 [style = solid, label="hosts"];
5->0 [style = solid, label="hostIds"];
18->25 [style = bold, label=""];
41->38 [style = bold, label=""];
50->41 [style = bold, label=""];
20->34 [style = solid, label="endpointTokens"];
22->26 [style = bold, label=""];
60->54 [style = bold, label=""];
11->59 [style = bold, label=""];
30->24 [style = bold, label=""];
4->14 [style = bold, label=""];
34->40 [style = bold, label=""];
35->42 [style = bold, label=""];
2->1 [style = bold, label=""];
59->45 [style = bold, label=""];
31->13 [style = bold, label=""];
25->34 [style = solid, label="partitioner"];
11->4 [style = bold, label=""];
15->32 [style = dashed, label="0"];
6->24 [style = bold, label=""];
17->33 [style = dashed, label="0"];
42->55 [style = bold, label=""];
24->33 [style = bold, label=""];
13->19 [style = bold, label=""];
32->8 [style = bold, label=""];
1->6 [style = bold, label=""];
20->0 [style = solid, label="endpointTokens"];
17->3 [style = bold, label=""];
16->5 [style = bold, label=""];
62->47 [style = bold, label=""];
40->43 [style = bold, label=""];
15->8 [style = bold, label=""];
8->12 [style = bold, label=""];
25->10 [style = solid, label="partitioner"];
5->34 [style = solid, label="hostIds"];
58->36 [style = bold, label=""];
27->0 [style = solid, label="keyTokens"];
10->20 [style = bold, label=""];
53->51 [style = bold, label=""];
22->40 [style = dashed, label="0"];
63->64 [style = bold, label=""];
1->29 [style = dashed, label="0"];
16->0 [style = solid, label="hosts"];
64->39 [style = bold, label=""];
13->34 [style = solid, label="ss"];
7->65 [style = bold, label=""];
12->28 [style = dashed, label="0"];
0->22 [style = bold, label=""];
6->30 [style = dashed, label="0"];
4->11 [style = dashed, label="0"];
2->29 [style = bold, label=""];
55->58 [style = bold, label=""];
43->56 [style = bold, label=""];
}
