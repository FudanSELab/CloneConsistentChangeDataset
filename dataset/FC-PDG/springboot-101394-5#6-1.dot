digraph {
10 [style = filled, label = "assertThat(result(0().containsExactly(1,2)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ResolvableType type = ResolvableType.forArrayComponent(INTEGER_LIST.getType())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "bindToArrayWhenNestedShouldReturnPopulatedArray['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "source.put(\"foo(1((0(\",\"3\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "bindToArrayWhenNestedListShouldReturnPopulatedArray['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "MockConfigurationPropertySource source = new MockConfigurationPropertySource()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "source.put(\"foo(1((1(\",\"4\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Bindable<Integer((((> target = Bindable.of(type)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Bindable<List<Integer>((> target = Bindable.of(type)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "source.put(\"foo(0((1(\",\"2\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "this.sources.add(source)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "bindToArrayWhenNestedShouldReturnPopulatedArray['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "List<Integer>(( result = this.binder.bind(\"foo\",target).get()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Integer(((( result = this.binder.bind(\"foo\",target).get()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "source.put(\"foo(0((0(\",\"1\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(result).hasSize(2)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(result(1().containsExactly(3,4)@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ResolvableType type = ResolvableType.forArrayComponent(INTEGER_ARRAY.getType())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
8->15 [style = bold, label=""];
15->14 [style = bold, label=""];
4->17 [style = dashed, label="0"];
11->15 [style = dashed, label="0"];
16->6 [style = bold, label=""];
14->17 [style = bold, label=""];
11->12 [style = bold, label=""];
2->9 [style = bold, label=""];
9->7 [style = bold, label=""];
7->8 [style = bold, label=""];
4->0 [style = bold, label=""];
15->14 [style = solid, label="type"];
0->10 [style = bold, label=""];
17->0 [style = bold, label=""];
12->14 [style = dashed, label="0"];
5->6 [style = bold, label=""];
3->2 [style = bold, label=""];
12->4 [style = bold, label=""];
13->6 [style = bold, label=""];
10->1 [style = bold, label=""];
8->11 [style = bold, label=""];
11->12 [style = solid, label="type"];
6->8 [style = solid, label="source"];
}
