digraph {
5 [style = filled, label = "final Slave updatedSlave = (Slave)j.jenkins.getNode(\"CustomSlaveName\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final Node originalSlave = j.createSlave(\"SlaveFromXml\",null,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(updatedSlave.getNumExecutors(),equalTo(42))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(result,succeededSilently())@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertThat(updatedSlave.getNodeName(),equalTo(\"CustomSlaveName\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(\"A slave with original name should not exist\",j.jenkins.getNode(\"SlaveFromXml\"),nullValue())@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertThat(updatedSlave.getUserId(),equalTo(command.user().getId()))@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(\"Command is expected to succeed\",result.returnCode(),equalTo(0))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "createNodeSpecifyingNameExplicitly['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Computer.CREATE,Jenkins.READ).withStdin(.getResourceAsStream(\"node.xml\")).invokeWithArgs(\"CustomSlaveName\")@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(\"No error output expected\",result.stderr(),isEmptyString())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Computer.CREATE,Jenkins.READ).withStdin(.getResourceAsStream(\"node.xml\")).invokeWithArgs(\"CustomSlaveName\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(updatedSlave.getNodeName(),equalTo(\"CustomSlaveName\"))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "createNodeSpecifyingNameExplicitly['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertThat(\"A slave with original name should be left untouched\",j.jenkins.getNode(\"SlaveFromXml\"),equalTo(originalSlave))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "createNodeSpecifyingDifferentNameExplicitly['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3->13 [style = bold, label=""];
0->3 [style = bold, label=""];
4->10 [style = bold, label=""];
6->4 [style = bold, label=""];
14->15 [style = solid, label="originalSlave"];
7->5 [style = bold, label=""];
4->1 [style = bold, label=""];
1->8 [style = bold, label=""];
2->7 [style = bold, label=""];
15->5 [style = bold, label=""];
8->2 [style = bold, label=""];
5->0 [style = bold, label=""];
2->15 [style = dashed, label="0"];
2->15 [style = bold, label=""];
4->10 [style = solid, label="result"];
11->2 [style = bold, label=""];
14->1 [style = bold, label=""];
9->4 [style = bold, label=""];
12->14 [style = bold, label=""];
10->11 [style = bold, label=""];
}
