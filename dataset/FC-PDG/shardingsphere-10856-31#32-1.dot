digraph {
32 [style = filled, label = "when(engine.getFrontendContext()).thenReturn(frontendContext)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "when(engine.getCodecEngine()).thenReturn(codecEngine)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "when(executeEngine.writeQueryData(any(),any(),any(),anyInt())).thenReturn(true)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "when(executeEngine.getCommandExecutor(eq(commandPacketType),eq(commandPacket),eq(backendConnection))).thenReturn(queryCommandExecutor)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "verify(backendConnection).closeDatabaseCommunicationEngines(true)@@@22@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "actual.run()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "verify(connectionStatus).waitUntilConnectionRelease()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "when(executeEngine.getCommandPacket(eq(payload),eq(commandPacketType),eq(backendConnection))).thenReturn(commandPacket)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "verify(backendConnection).closeDatabaseCommunicationEngines(true)@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList())@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "verify(handlerContext).flush()@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "verify(connectionStatus).switchToUsing()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "when(executeEngine.getCommandPacket(eq(payload),eq(commandPacketType),eq(backendConnection))).thenReturn(commandPacket)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "when(engine.getCommandExecuteEngine().writeQueryData(any(),any(),any(),anyInt())).thenReturn(true)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "when(executeEngine.getCommandExecutor(eq(commandPacketType),eq(commandPacket),eq(backendConnection))).thenReturn(commandExecutor)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "when(engine.getCommandExecuteEngine().getCommandExecutor(commandPacketType,commandPacket,backendConnection)).thenReturn(queryCommandExecutor)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "when(engine.getCommandExecuteEngine().getCommandPacket(payload,commandPacketType,backendConnection)).thenReturn(commandPacket)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "assertRunByCommandExecutor['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "when(queryCommandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "CommandExecutorTask actual = new CommandExecutorTask(engine,backendConnection,handlerContext,message)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "verify(handlerContext).write(databasePacket)@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "when(engine.getCommandExecuteEngine().getCommandPacketType(payload)).thenReturn(commandPacketType)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertRunNeedFlushByTrue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "verify(backendConnection).closeDatabaseCommunicationEngines(true)@@@20@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertRunNeedFlushByTrue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "when(engine.getCommandExecuteEngine()).thenReturn(executeEngine)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "verify(commandExecutor).close()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "when(frontendContext.isFlushForPerCommandPacket()).thenReturn(true)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "when(commandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList())@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "when(engine.getCodecEngine().createPacketPayload(message)).thenReturn(payload)@@@9@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5->3 [style = bold, label=""];
13->10 [style = bold, label=""];
4->14 [style = bold, label=""];
25->28 [style = bold, label=""];
23->16 [style = bold, label=""];
15->28 [style = dashed, label="0"];
9->31 [style = bold, label=""];
34->33 [style = bold, label=""];
12->15 [style = bold, label=""];
3->6 [style = bold, label=""];
14->17 [style = bold, label=""];
16->25 [style = bold, label=""];
28->26 [style = bold, label=""];
10->13 [style = dashed, label="0"];
9->7 [style = bold, label=""];
11->9 [style = bold, label=""];
1->13 [style = bold, label=""];
17->19 [style = bold, label=""];
36->20 [style = bold, label=""];
26->21 [style = bold, label=""];
15->35 [style = dashed, label="0"];
20->18 [style = bold, label=""];
19->5 [style = bold, label=""];
11->3 [style = dashed, label="0"];
6->27 [style = bold, label=""];
13->29 [style = bold, label=""];
12->25 [style = dashed, label="0"];
35->1 [style = bold, label=""];
18->1 [style = bold, label=""];
21->22 [style = bold, label=""];
15->20 [style = bold, label=""];
18->21 [style = dashed, label="0"];
6->11 [style = bold, label=""];
10->0 [style = bold, label=""];
31->30 [style = bold, label=""];
0->8 [style = bold, label=""];
32->36 [style = bold, label=""];
33->32 [style = bold, label=""];
20->35 [style = bold, label=""];
8->4 [style = bold, label=""];
24->8 [style = bold, label=""];
29->24 [style = bold, label=""];
1->10 [style = bold, label=""];
16->12 [style = bold, label=""];
22->13 [style = bold, label=""];
20->26 [style = dashed, label="0"];
2->16 [style = bold, label=""];
}
