digraph {
15 [style = filled, label = "db.add(t2)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertInteger(db.getStats(t2).get().getCount()).is(4)@@@34@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Throwable t2 = new Throwable(){@Override public StackTraceElement(( getStackTrace(){return new StackTraceElement((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@160c6ec}}@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertObject(db.getStats(t1).get().getStackTrace()).asJson().stderr().is(\"('Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)'(\")@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertObject(db.getStats(t1).get().getStackTrace()).asJson().is(\"('Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)'(\")@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertObject(db2.getStats(t1).get().getStackTrace()).asJson().is(\"('Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)'(\")@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "a04_sameStackTraces['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "db2.add(t1)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertInteger(db.getStats(t2).get().getCount()).is(2)@@@23@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertObject(db2.getStats(t1).get().getStackTrace()).asJson().stderr().is(\"('Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)'(\")@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertObject(db2.getStats(t2).get().getStackTrace()).asJson().is(\"('Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)'(\")@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertObject(db.getStats(t2).get().getStackTrace()).asJson().stderr().is(\"('Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)'(\")@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "d01_ignoreClasses['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertInteger(db2.getStats(t2).get().getCount()).is(2)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertObject(db2.getStats(t2).get().getStackTrace()).asJson().stderr().is(\"('Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)'(\")@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertInteger(db.getStats(t1).get().getCount()).is(4)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ThrownStore db2 = ThrownStore.create().parent(db).build()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Throwable t1 = new Throwable(){@Override public StackTraceElement(( getStackTrace(){return new StackTraceElement((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@160c6c7}}@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "db2.add(t2)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ThrownStore db = ThrownStore.create().ignoreClasses(,,).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "d01_ignoreClasses['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertInteger(db2.getStats(t1).get().getCount()).is(2)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertObject(db.getStats(t2).get().getStackTrace()).asJson().is(\"('Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)'(\")@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "db.add(t1)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "ThrownStore db = new ThrownStore()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertInteger(db.getStats(t1).get().getCount()).is(2)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->23 [style = dashed, label="0"];
16->3 [style = bold, label=""];
0->16 [style = bold, label=""];
1->4 [style = bold, label=""];
8->15 [style = bold, label=""];
7->8 [style = solid, label="t1"];
12->17 [style = bold, label=""];
22->21 [style = bold, label=""];
6->0 [style = bold, label=""];
19->17 [style = bold, label=""];
9->10 [style = bold, label=""];
11->9 [style = bold, label=""];
25->7 [style = bold, label=""];
10->6 [style = bold, label=""];
14->15 [style = solid, label="t2"];
15->5 [style = bold, label=""];
15->22 [style = bold, label=""];
2->13 [style = bold, label=""];
7->14 [style = bold, label=""];
14->16 [style = solid, label="t2"];
17->7 [style = bold, label=""];
21->9 [style = bold, label=""];
20->23 [style = bold, label=""];
3->2 [style = bold, label=""];
18->1 [style = bold, label=""];
23->13 [style = bold, label=""];
15->9 [style = bold, label=""];
24->25 [style = bold, label=""];
3->20 [style = dashed, label="0"];
14->8 [style = bold, label=""];
5->11 [style = bold, label=""];
7->0 [style = solid, label="t1"];
11->21 [style = dashed, label="0"];
16->20 [style = bold, label=""];
13->18 [style = bold, label=""];
5->22 [style = dashed, label="0"];
}
