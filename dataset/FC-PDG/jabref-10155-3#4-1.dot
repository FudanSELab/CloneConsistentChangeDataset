digraph {
9 [style = filled, label = "assertEquals(2,auxResult.getFoundKeysInAux())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ParserResult result = new BibtexParser(importFormatPreferences,new DummyFileUpdateMonitor()).parse(originalReader)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "BibDatabase newDB = auxResult.getGeneratedBibDatabase()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(auxResult.getGeneratedBibDatabase().hasEntries())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(4,auxResult.getFoundKeysInAux())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "File auxFile = Paths.get(.getResource(\"crossref.aux\").toURI()).toFile()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Path auxFile = Paths.get(.getResource(\"paper.aux\").toURI())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertEquals(auxResult.getFoundKeysInAux() + auxResult.getCrossRefEntriesCount(),auxResult.getResolvedKeysCount() + auxResult.getUnresolvedKeysCount())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(0,auxResult.getCrossRefEntriesCount())@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "AuxParser auxParser = new AuxParser(auxFile.getAbsolutePath(),result.getDatabase())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(0,auxResult.getUnresolvedKeysCount())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(3,auxResult.getResolvedKeysCount())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testNormal['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "ParserResult result = new BibtexParser(importFormatPreferences).parse(originalReader)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "AuxParserResult auxResult = auxParser.parse()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(2,auxResult.getResolvedKeysCount())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(1,auxResult.getCrossRefEntriesCount())@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "InputStream originalStream = .getResourceAsStream(\"origin.bib\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testNormal['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(2,auxResult.getUnresolvedKeysCount())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(4,newDB.getEntries().size())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "File auxFile = Paths.get(.getResource(\"paper.aux\").toURI()).toFile()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "testCrossRef['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(2,newDB.getEntries().size())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "AuxParser auxParser = new DefaultAuxParser(result.getDatabase())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "AuxParserResult auxResult = auxParser.parse(auxFile)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9->20 [style = dashed, label="0"];
0->9 [style = bold, label=""];
2->5 [style = bold, label=""];
7->21 [style = dashed, label="0"];
15->14 [style = bold, label=""];
16->8 [style = bold, label=""];
19->12 [style = bold, label=""];
9->2 [style = bold, label=""];
4->13 [style = bold, label=""];
12->15 [style = bold, label=""];
5->25 [style = dashed, label="0"];
7->4 [style = bold, label=""];
12->6 [style = bold, label=""];
13->23 [style = dashed, label="0"];
6->22 [style = dashed, label="0"];
8->7 [style = bold, label=""];
20->2 [style = bold, label=""];
24->20 [style = bold, label=""];
23->24 [style = bold, label=""];
17->12 [style = bold, label=""];
11->3 [style = bold, label=""];
6->15 [style = dashed, label="0"];
11->18 [style = dashed, label="0"];
3->8 [style = bold, label=""];
6->10 [style = bold, label=""];
22->10 [style = bold, label=""];
1->12 [style = bold, label=""];
8->21 [style = bold, label=""];
0->24 [style = dashed, label="0"];
14->18 [style = bold, label=""];
15->16 [style = solid, label="auxFile"];
2->25 [style = bold, label=""];
10->14 [style = dashed, label="0"];
12->22 [style = bold, label=""];
4->23 [style = bold, label=""];
3->16 [style = dashed, label="0"];
13->0 [style = bold, label=""];
21->4 [style = bold, label=""];
10->11 [style = bold, label=""];
18->16 [style = bold, label=""];
}
