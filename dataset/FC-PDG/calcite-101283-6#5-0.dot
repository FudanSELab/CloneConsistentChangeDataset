digraph {
6 [style = filled, label = "assertSame(false,RexUtil.isLiteral(castCastLiteral,true))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertThat(RexUtil.isLiteral(castLiteral,true),is(true))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertSame(false,SqlUtil.isLiteral(castCastLiteral,true))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(RexUtil.isLiteral(literal,true),is(true))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "testSqlNodeLiteral['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final SqlNode castCastLiteral = SqlStdOperatorTable.CAST.createCall(SqlParserPos.ZERO,castLiteral,integerType)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testRexNodeLiteral['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "final RexNode literal = rexBuilder.makeZeroLiteral(integerDataType)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testRexNodeLiteral['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertSame(true,RexUtil.isLiteral(castLiteral,true))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "final RexNode castLiteral = rexBuilder.makeCall(integerDataType,SqlStdOperatorTable.CAST,Lists.newArrayList(literal))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertSame(true,SqlUtil.isLiteral(castLiteral,true))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(RexUtil.isLiteral(castCastLiteral,true),is(false))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertSame(true,SqlUtil.isLiteral(literal,true))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final SqlNode literal = SqlLiteral.createExactNumeric(\"0\",SqlParserPos.ZERO)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final RexNode castCastLiteral = rexBuilder.makeCall(integerDataType,SqlStdOperatorTable.CAST,Lists.newArrayList(castLiteral))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertSame(true,RexUtil.isLiteral(literal,true))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "final SqlNode castLiteral = SqlStdOperatorTable.CAST.createCall(SqlParserPos.ZERO,literal,integerType)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15->13 [style = bold, label=""];
5->12 [style = dashed, label="0"];
12->13 [style = solid, label="literal"];
0->8 [style = solid, label="castLiteral"];
2->1 [style = bold, label=""];
6->7 [style = dashed, label="0"];
5->1 [style = solid, label="literal"];
0->2 [style = bold, label=""];
12->11 [style = bold, label=""];
1->3 [style = bold, label=""];
3->6 [style = bold, label=""];
0->11 [style = dashed, label="0"];
2->7 [style = solid, label="castCastLiteral"];
6->17 [style = dashed, label="0"];
1->10 [style = dashed, label="0"];
16->17 [style = bold, label=""];
11->16 [style = solid, label="castLiteral"];
2->10 [style = bold, label=""];
2->6 [style = solid, label="castCastLiteral"];
13->16 [style = bold, label=""];
11->15 [style = bold, label=""];
8->7 [style = bold, label=""];
1->13 [style = dashed, label="0"];
0->3 [style = solid, label="castLiteral"];
11->15 [style = solid, label="castLiteral"];
10->8 [style = bold, label=""];
5->0 [style = bold, label=""];
15->17 [style = solid, label="castCastLiteral"];
14->12 [style = bold, label=""];
0->2 [style = solid, label="castLiteral"];
9->5 [style = bold, label=""];
3->8 [style = dashed, label="0"];
5->0 [style = solid, label="literal"];
12->11 [style = solid, label="literal"];
4->5 [style = bold, label=""];
5->10 [style = solid, label="literal"];
3->16 [style = dashed, label="0"];
}
