digraph {
0 [style = filled, label = "replayAll()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> endPartitions = new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"9\",shardId0,\"1\"))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "final Map<String,String> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "expect(recordSupplier.getEarliestSequenceNumber(anyObject())).andReturn(\"0\").anyTimes()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "recordSupplier.assign(anyObject())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "EasyMock.expectLastCall().once()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Assert.assertEquals(4,task.getRunner().getRowIngestionMeters().getUnparseable())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "expectLastCall().once()@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Thread.sleep(10)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "Thread.sleep(10)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "SegmentDescriptor desc4 = sd(task,\"2011/P1D\",0)@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,true,null,null,\"awsEndpoint\",null,null,null,null,false))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> endPartitions = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"9\",SHARD_ID0,\"1\"))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(startPartitions),new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(stream,currentOffsets)))))@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "recordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
63 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(startPartitions),new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(STREAM,currentOffsets)))))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
67 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "recordSupplier.seek(anyObject(),anyString())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "final Map<String,String> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@47@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "Thread.sleep(10)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertEquals(4,task.getRunner().getRowIngestionMeters().getUnparseable())@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "maxTotalRows = 3L@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testIncrementalHandOff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(startPartitions),new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(stream,currentOffsets)))))@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
74 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@54@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "maxRowsPerSegment = 2@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc7),publishedDescriptors())@@@47@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
73 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "final SeekableStreamStartSequenceNumbers<String,String> startPartitions = new SeekableStreamStartSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"0\"),ImmutableSet.of())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertEquals(checkpoint1.getPartitionSequenceNumberMap(),currentOffsets)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@27@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "final Map<String,String> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "expect(recordSupplier.poll(anyLong())).andReturn(records.subList(0,5)).once().andReturn(records.subList(4,records.size())).once()@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
54 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
65 [style = filled, label = "Assert.assertEquals(6,task.getRunner().getRowIngestionMeters().getProcessed())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "expect(recordSupplier.poll(anyLong())).andReturn(records.subList(0,3)).once().andReturn(records.subList(2,10)).once().andReturn(records.subList(9,11))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "testIncrementalHandOff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
56 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"9\",SHARD_ID0,\"1\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
57 [style = filled, label = "recordSupplier.assign(EasyMock.anyObject())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
69 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"10\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "SegmentDescriptor desc5 = sd(task,\"2049/P1D\",0)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "EasyMock.expect(recordSupplier.poll(EasyMock.anyLong())).andReturn(records.subList(0,5)).once().andReturn(records.subList(4,records.size())).once()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,true,null,null,\"awsEndpoint\",null,null,null,null,false))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "EasyMock.expect(recordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
60 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> checkpoint2 = new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"9\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"2\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "final SeekableStreamStartSequenceNumbers<String,String> startPartitions = new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"0\",SHARD_ID0,\"0\"),ImmutableSet.of())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2010/P1D\",0)@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@21@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(stream,currentOffsets,currentOffsets.keySet())),new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(stream,nextOffsets)))))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> endPartitions = new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"10\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"4\",SHARD_ID0,\"0\"))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc5))@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"4\",shardId0,\"0\"))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "expectLastCall().anyTimes()@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",desc4))@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "recordSupplier.close()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "Assert.assertEquals(checkpoint2.getPartitionSequenceNumberMap(),nextOffsets)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "expectLastCall().anyTimes()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "final SeekableStreamStartSequenceNumbers<String,String> startPartitions = new SeekableStreamStartSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"0\",shardId0,\"0\"),ImmutableSet.of())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "maxRecordsPerPoll = 1@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "verifyAll()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39->19 [style = bold, label=""];
71->70 [style = bold, label=""];
32->23 [style = bold, label=""];
25->34 [style = bold, label=""];
41->72 [style = dashed, label="0"];
34->18 [style = bold, label=""];
25->57 [style = dashed, label="0"];
4->75 [style = dashed, label="0"];
21->24 [style = bold, label=""];
26->68 [style = dashed, label="0"];
18->49 [style = dashed, label="0"];
34->54 [style = dashed, label="0"];
31->39 [style = solid, label="task"];
7->66 [style = solid, label="currentOffsets"];
14->80 [style = dashed, label="0"];
61->64 [style = bold, label=""];
26->50 [style = dashed, label="0"];
5->69 [style = dashed, label="0"];
51->48 [style = bold, label=""];
39->4 [style = solid, label="task"];
51->31 [style = solid, label="startPartitions"];
70->71 [style = bold, label=""];
37->31 [style = bold, label=""];
22->55 [style = dashed, label="0"];
17->71 [style = bold, label=""];
80->60 [style = bold, label=""];
78->80 [style = bold, label=""];
81->79 [style = bold, label=""];
15->41 [style = bold, label=""];
33->56 [style = bold, label=""];
10->33 [style = solid, label="desc4"];
59->76 [style = solid, label="nextOffsets"];
44->1 [style = bold, label=""];
0->40 [style = bold, label=""];
41->22 [style = bold, label=""];
10->5 [style = solid, label="desc2"];
75->58 [style = solid, label="desc5"];
31->10 [style = solid, label="task"];
9->5 [style = solid, label="desc4"];
9->44 [style = solid, label="desc4"];
35->7 [style = bold, label=""];
24->31 [style = solid, label="baseSequenceName"];
42->19 [style = bold, label=""];
14->37 [style = bold, label=""];
31->4 [style = solid, label="task"];
57->54 [style = bold, label=""];
13->25 [style = bold, label=""];
19->42 [style = bold, label=""];
16->3 [style = bold, label=""];
43->16 [style = bold, label=""];
51->55 [style = solid, label="startPartitions"];
54->49 [style = bold, label=""];
7->38 [style = solid, label="currentOffsets"];
23->30 [style = bold, label=""];
12->28 [style = bold, label=""];
9->2 [style = bold, label=""];
39->67 [style = solid, label="task"];
0->78 [style = bold, label=""];
46->24 [style = bold, label=""];
22->43 [style = bold, label=""];
40->51 [style = dashed, label="0"];
60->62 [style = bold, label=""];
30->63 [style = solid, label="desc1"];
59->77 [style = solid, label="nextOffsets"];
37->47 [style = dashed, label="0"];
23->33 [style = solid, label="desc2"];
4->5 [style = solid, label="desc3"];
79->81 [style = bold, label=""];
10->12 [style = solid, label="desc2"];
35->38 [style = solid, label="currentOffsets"];
62->39 [style = bold, label=""];
72->43 [style = bold, label=""];
29->26 [style = bold, label=""];
13->57 [style = bold, label=""];
77->15 [style = bold, label=""];
26->27 [style = bold, label=""];
5->56 [style = dashed, label="0"];
52->0 [style = bold, label=""];
44->58 [style = dashed, label="0"];
43->66 [style = bold, label=""];
31->2 [style = solid, label="task"];
5->6 [style = bold, label=""];
27->11 [style = bold, label=""];
64->25 [style = bold, label=""];
35->22 [style = solid, label="currentOffsets"];
32->6 [style = solid, label="desc1"];
37->31 [style = solid, label="endPartitions"];
10->28 [style = solid, label="desc4"];
17->15 [style = bold, label=""];
30->10 [style = bold, label=""];
30->5 [style = solid, label="desc1"];
2->33 [style = bold, label=""];
11->52 [style = dashed, label="0"];
38->17 [style = bold, label=""];
19->81 [style = bold, label=""];
66->65 [style = bold, label=""];
4->9 [style = bold, label=""];
49->45 [style = bold, label=""];
56->6 [style = bold, label=""];
24->61 [style = bold, label=""];
50->27 [style = bold, label=""];
31->30 [style = solid, label="task"];
47->31 [style = bold, label=""];
39->9 [style = solid, label="task"];
2->1 [style = solid, label="desc7"];
45->53 [style = bold, label=""];
33->5 [style = bold, label=""];
67->74 [style = solid, label="desc7"];
59->66 [style = solid, label="nextOffsets"];
19->42 [style = dotted, label="true"];
2->33 [style = solid, label="desc7"];
27->52 [style = bold, label=""];
53->50 [style = bold, label=""];
29->68 [style = bold, label=""];
6->20 [style = bold, label=""];
63->12 [style = bold, label=""];
36->13 [style = bold, label=""];
9->44 [style = solid, label="desc6"];
58->74 [style = bold, label=""];
71->59 [style = bold, label=""];
19->35 [style = bold, label=""];
31->32 [style = solid, label="task"];
39->10 [style = solid, label="task"];
40->14 [style = bold, label=""];
55->43 [style = bold, label=""];
18->8 [style = bold, label=""];
31->39 [style = bold, label=""];
59->76 [style = bold, label=""];
40->22 [style = solid, label="startPartitions"];
68->27 [style = bold, label=""];
29->53 [style = dashed, label="0"];
37->60 [style = dashed, label="0"];
75->67 [style = bold, label=""];
23->20 [style = solid, label="desc2"];
62->39 [style = solid, label="endPartitions"];
9->75 [style = bold, label=""];
4->28 [style = solid, label="desc5"];
24->39 [style = solid, label="baseSequenceName"];
4->28 [style = solid, label="desc3"];
4->33 [style = solid, label="desc5"];
35->7 [style = solid, label="currentOffsets"];
19->81 [style = dashed, label="0"];
40->31 [style = solid, label="startPartitions"];
41->55 [style = bold, label=""];
30->12 [style = solid, label="desc3"];
14->48 [style = dashed, label="0"];
30->33 [style = solid, label="desc3"];
67->5 [style = solid, label="desc7"];
76->77 [style = bold, label=""];
47->31 [style = solid, label="endPartitions"];
73->24 [style = bold, label=""];
39->19 [style = solid, label="task"];
75->5 [style = solid, label="desc5"];
31->23 [style = solid, label="task"];
33->5 [style = dashed, label="0"];
9->33 [style = solid, label="desc6"];
7->43 [style = solid, label="currentOffsets"];
39->75 [style = solid, label="task"];
24->36 [style = bold, label=""];
7->38 [style = bold, label=""];
71->70 [style = dotted, label="true"];
11->0 [style = bold, label=""];
7->17 [style = solid, label="currentOffsets"];
81->7 [style = bold, label=""];
78->39 [style = solid, label="startPartitions"];
31->9 [style = solid, label="task"];
48->47 [style = bold, label=""];
5->69 [style = bold, label=""];
0->51 [style = bold, label=""];
36->61 [style = dashed, label="0"];
20->12 [style = bold, label=""];
28->44 [style = bold, label=""];
10->4 [style = bold, label=""];
67->5 [style = bold, label=""];
39->30 [style = solid, label="task"];
8->45 [style = dashed, label="0"];
78->43 [style = solid, label="startPartitions"];
44->58 [style = bold, label=""];
3->32 [style = bold, label=""];
41->72 [style = bold, label=""];
35->55 [style = solid, label="currentOffsets"];
81->79 [style = dotted, label="true"];
8->29 [style = bold, label=""];
69->63 [style = bold, label=""];
32->33 [style = solid, label="desc1"];
40->78 [style = dashed, label="0"];
65->32 [style = bold, label=""];
}
