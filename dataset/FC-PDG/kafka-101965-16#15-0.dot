digraph {
17 [style = filled, label = "verify(consumer)@@@24@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(nonRunningNonCorruptedTask.state(),is(Task.State.CREATED))@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "taskManager.handleCorruption(singleton(taskId00))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "taskManager.handleCorruption(singleton(taskId00))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "consumer.seek(t1p0,offsetAndMetadata)@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expectRestoreToBeCompleted(consumer,changeLogReader)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "consumer.pause(taskId00Partitions)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "shouldNotCommitNonRunningNonCorruptedTasks['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertThat(nonRunningNonCorruptedTask.partitionsForOffsetReset,equalTo(Collections.emptySet()))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assignment.putAll(taskId01Assignment)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "shouldNotCommitNonRunningNonCorruptedTasks['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()),is(true))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final ProcessorStateManager stateManager = EasyMock.createStrictMock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "taskManager.setPartitionResetter(null)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "consumer.commitSync(eq(emptyMap()))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertThat(nonCorruptedTask.state(),is(Task.State.RUNNING))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final OffsetAndMetadata offsetAndMetadata = new OffsetAndMetadata(0L)@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "replay(activeTaskCreator,topologyBuilder,consumer,changeLogReader)@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "expectLastCall()@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "replay(stateManager)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "final StateMachineTask nonCorruptedTask = new StateMachineTask(taskId01,taskId01Partitions,true,stateManager)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "expectLastCall().anyTimes()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertThat(corruptedTask.partitionsForOffsetReset,equalTo(taskId00Partitions))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "corruptedTask.setChangelogOffsets(singletonMap(t1p0,0L))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(nonRunningNonCorruptedTask.state(),is(Task.State.CREATED))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "final StateMachineTask nonRunningNonCorruptedTask = new StateMachineTask(taskId01,taskId01Partitions,true,stateManager)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "expect(consumer.committed(taskId00Partitions)).andReturn(singletonMap(t1p0,offsetAndMetadata))@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final Map<TaskId,Set<TopicPartition>> assignment = new HashMap<>(taskId00Assignment)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(assignment))).andStubReturn(asList(corruptedTask,nonRunningNonCorruptedTask))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "topologyBuilder.addSubscribedTopicsFromAssignment(anyObject(),anyString())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "shouldCommitNonCorruptedTasksOnTaskCorruptedException['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "nonRunningNonCorruptedTask.setCommitNeeded()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "expectLastCall()@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "corruptedTask.setChangelogOffsets(singletonMap(t1p0,0L))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "taskManager.handleAssignment(assignment,emptyMap())@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final StateMachineTask corruptedTask = new StateMachineTask(taskId00,taskId00Partitions,true,stateManager)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "expect(consumer.assignment()).andReturn(taskId00Partitions)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "stateManager.markChangelogAsCorrupted(taskId00Partitions)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(assignment))).andStubReturn(asList(corruptedTask,nonCorruptedTask))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "verify(consumer)@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertTrue(nonCorruptedTask.commitPrepared)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "nonCorruptedTask.setCommitNeeded()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10->18 [style = bold, label=""];
4->14 [style = bold, label=""];
0->9 [style = bold, label=""];
29->4 [style = bold, label=""];
19->12 [style = bold, label=""];
34->1 [style = bold, label=""];
1->12 [style = solid, label="assignment"];
28->31 [style = bold, label=""];
33->4 [style = bold, label=""];
18->26 [style = bold, label=""];
12->15 [style = bold, label=""];
16->7 [style = bold, label=""];
26->9 [style = solid, label="nonRunningNonCorruptedTask"];
27->7 [style = solid, label="offsetAndMetadata"];
14->10 [style = bold, label=""];
39->3 [style = bold, label=""];
18->0 [style = solid, label="corruptedTask"];
22->32 [style = bold, label=""];
1->0 [style = bold, label=""];
20->6 [style = bold, label=""];
12->24 [style = bold, label=""];
27->16 [style = bold, label=""];
21->25 [style = bold, label=""];
18->9 [style = solid, label="corruptedTask"];
7->8 [style = bold, label=""];
3->22 [style = bold, label=""];
2->4 [style = bold, label=""];
35->21 [style = bold, label=""];
26->41 [style = dashed, label="0"];
0->36 [style = bold, label=""];
27->16 [style = solid, label="offsetAndMetadata"];
5->21 [style = bold, label=""];
6->27 [style = bold, label=""];
4->18 [style = solid, label="stateManager"];
36->13 [style = bold, label=""];
12->38 [style = bold, label=""];
30->28 [style = bold, label=""];
21->20 [style = bold, label=""];
40->39 [style = bold, label=""];
15->11 [style = bold, label=""];
11->3 [style = bold, label=""];
25->12 [style = bold, label=""];
4->41 [style = solid, label="stateManager"];
26->23 [style = bold, label=""];
9->0 [style = dashed, label="0"];
25->19 [style = bold, label=""];
13->5 [style = bold, label=""];
23->1 [style = bold, label=""];
22->17 [style = bold, label=""];
4->26 [style = solid, label="stateManager"];
34->19 [style = solid, label="assignment"];
6->16 [style = solid, label="offsetAndMetadata"];
18->41 [style = bold, label=""];
37->35 [style = bold, label=""];
41->0 [style = solid, label="nonCorruptedTask"];
31->3 [style = bold, label=""];
6->27 [style = solid, label="offsetAndMetadata"];
38->40 [style = bold, label=""];
8->25 [style = bold, label=""];
41->34 [style = bold, label=""];
11->30 [style = bold, label=""];
5->37 [style = bold, label=""];
4->10 [style = solid, label="stateManager"];
9->13 [style = bold, label=""];
24->15 [style = bold, label=""];
}
