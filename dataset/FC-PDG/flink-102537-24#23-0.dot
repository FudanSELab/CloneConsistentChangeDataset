digraph {
22 [style = filled, label = "headOperator.processElement(new StreamRecord<>(1))@@@33@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "env.setParallelism(2)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Configuration configuration = chainedVertex.getConfiguration()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "JobGraph jobGraph = env.getStreamGraph().getJobGraph()@@@39@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "operatorWrapper.getStreamOperator().open()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "split.select(\"one\").map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink1Results.add(value)}})@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "sink2Results = new ArrayList<>()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Configuration configuration = chainedVertex.getConfiguration()@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(sink1Results,contains(\"First 1: 1\"))@@@55@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "StreamMap<Integer,Integer> headOperator = streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertThat(sink3Results,contains(\"Second: 2\",\"Second: 3\"))@@@63@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "SingleOutputStreamOperator<Object> split = input.process(new ProcessFunction<Integer,Object>(){@Override public void processElement(Integer value,Context ctx,Collector<Object> out){if (value.equals(1)) {ctx.output(oneOutput,value)}{ctx.output(otherOutput,value)}}})@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertThat(sink2Results,contains(\"Second: 1\",\"Second: 2\",\"Second: 3\"))@@@37@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(sink3Results,contains(\"Second: 2\",\"Second: 3\"))@@@57@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "split.getSideOutput(oneOutput).map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink1Results.add(value)}})@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "OutputTag<Integer> otherOutput = new OutputTag<Integer>(\"other\"){}@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "input.map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink1Results.add(value)}})@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "StreamConfig streamConfig = new StreamConfig(configuration)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "input.map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink2Results.add(value)}})@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "split.select(\"other\").map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink3Results.add(value)}})@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "headOperator.setup(mockTask,streamConfig,operatorChain.getMainOperatorOutput())@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "operatorWrapper.getStreamOperator().open()@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertThat(sink1Results,contains(\"First 1: 1\"))@@@61@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "OperatorChain<Integer,StreamMap<Integer,Integer>> operatorChain = createOperatorChain(streamConfig,environment,mockTask)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "StreamExecutionEnvironment env@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "split.getSideOutput(otherOutput).map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink3Results.add(value)}})@@@39@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "sink1Results = new ArrayList<>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "StreamExecutionEnvironment env@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "StreamConfig streamConfig = new StreamConfig(configuration)@@@49@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "testMultiChainingWithSplit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "headOperator.processElement(new StreamRecord<>(3))@@@35@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "input = input.map(null)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "JobGraph jobGraph = env.getStreamGraph().getJobGraph()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "SplitStream<Integer> split = input.split(new OutputSelector<Integer>(){@Override public Iterable<String> select(Integer value){if (value.equals(1)) {return Collections.singletonList(\"one\")}{return Collections.singletonList(\"other\")}}})@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "testMultiChaining['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "headOperator.processElement(new StreamRecord<>(1))@@@58@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "JobGraph jobGraph = env.getStreamGraph().getJobGraph()@@@45@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "headOperator.processElement(new StreamRecord<>(2))@@@34@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "split.select(\"one\").map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink2Results.add(value)}})@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "OperatorChain<Integer,StreamMap<Integer,Integer>> operatorChain = createOperatorChain(streamConfig,environment,mockTask)@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "StreamTask<Integer,StreamMap<Integer,Integer>> mockTask = createMockTask(streamConfig,environment)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "DataStream<Integer> input = env.fromElements(1,2,3)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "StreamTask<Integer,StreamMap<Integer,Integer>> mockTask = createMockTask(streamConfig,environment)@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "sink3Results = new ArrayList<>()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "StreamMap<Integer,Integer> headOperator = streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testMultiChainingWithSplit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
52 [style = filled, label = "JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "OutputTag<Integer> oneOutput = new OutputTag<Integer>(\"one\"){}@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
45 [style = filled, label = "headOperator.setup(mockTask,streamConfig,operatorChain.getMainOperatorOutput())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "headOperator.processElement(new StreamRecord<>(2))@@@59@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertThat(sink1Results,contains(\"First: 1\",\"First: 2\",\"First: 3\"))@@@36@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "headOperator.processElement(new StreamRecord<>(3))@@@60@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "split.getSideOutput(oneOutput).map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink2Results.add(value)}})@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "assertThat(sink2Results,contains(\"First 2: 1\"))@@@62@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
42->41 [style = bold, label=""];
33->34 [style = solid, label="oneOutput"];
25->33 [style = bold, label=""];
56->1 [style = bold, label=""];
55->51 [style = solid, label="streamConfig"];
25->44 [style = bold, label=""];
49->22 [style = bold, label=""];
23->2 [style = dashed, label="0"];
17->38 [style = bold, label=""];
20->35 [style = dashed, label="0"];
26->12 [style = bold, label=""];
38->30 [style = bold, label=""];
16->47 [style = dashed, label="0"];
22->0 [style = bold, label=""];
17->14 [style = bold, label=""];
6->50 [style = dashed, label="0"];
21->1 [style = bold, label=""];
51->43 [style = solid, label="mockTask"];
27->17 [style = bold, label=""];
9->5 [style = bold, label=""];
25->15 [style = bold, label=""];
23->17 [style = bold, label=""];
29->1 [style = bold, label=""];
5->41 [style = solid, label="sink1Results"];
2->19 [style = solid, label="streamConfig"];
44->47 [style = bold, label=""];
8->17 [style = solid, label="sink2Results"];
17->7 [style = dashed, label="0"];
28->37 [style = bold, label=""];
41->32 [style = bold, label=""];
16->37 [style = dashed, label="0"];
4->39 [style = solid, label="configuration"];
54->46 [style = bold, label=""];
30->42 [style = bold, label=""];
8->7 [style = solid, label="sink2Results"];
8->32 [style = solid, label="sink2Results"];
39->26 [style = bold, label=""];
43->45 [style = bold, label=""];
48->55 [style = solid, label="configuration"];
39->27 [style = solid, label="streamConfig"];
2->10 [style = solid, label="streamConfig"];
3->14 [style = solid, label="sink3Results"];
12->27 [style = solid, label="mockTask"];
47->54 [style = bold, label=""];
48->55 [style = bold, label=""];
52->48 [style = bold, label=""];
39->12 [style = solid, label="streamConfig"];
31->34 [style = solid, label="otherOutput"];
16->20 [style = bold, label=""];
5->2 [style = solid, label="sink1Results"];
21->6 [style = dotted, label="true"];
29->6 [style = dotted, label="true"];
5->23 [style = solid, label="sink1Results"];
3->40 [style = solid, label="sink3Results"];
56->50 [style = dotted, label="true"];
4->39 [style = bold, label=""];
8->3 [style = bold, label=""];
0->11 [style = bold, label=""];
19->10 [style = bold, label=""];
11->2 [style = solid, label="configuration"];
1->9 [style = bold, label=""];
31->34 [style = bold, label=""];
2->4 [style = solid, label="streamConfig"];
34->28 [style = bold, label=""];
12->13 [style = bold, label=""];
13->27 [style = bold, label=""];
19->4 [style = solid, label="mockTask"];
32->40 [style = bold, label=""];
18->28 [style = dashed, label="0"];
51->43 [style = bold, label=""];
37->35 [style = bold, label=""];
7->19 [style = bold, label=""];
36->19 [style = bold, label=""];
18->16 [style = bold, label=""];
5->8 [style = bold, label=""];
55->45 [style = solid, label="streamConfig"];
53->51 [style = bold, label=""];
3->25 [style = bold, label=""];
19->10 [style = solid, label="mockTask"];
45->49 [style = bold, label=""];
4->26 [style = bold, label=""];
24->22 [style = bold, label=""];
46->52 [style = bold, label=""];
15->18 [style = bold, label=""];
39->13 [style = solid, label="streamConfig"];
55->43 [style = solid, label="streamConfig"];
11->2 [style = bold, label=""];
12->13 [style = solid, label="mockTask"];
51->45 [style = solid, label="mockTask"];
55->53 [style = bold, label=""];
10->4 [style = bold, label=""];
33->31 [style = bold, label=""];
27->23 [style = bold, label=""];
2->7 [style = bold, label=""];
35->36 [style = bold, label=""];
20->24 [style = bold, label=""];
8->25 [style = bold, label=""];
}
