digraph {
8 [style = filled, label = "int i = 0@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "StringBuffer sb = new StringBuffer()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Context context = decoder.createDecoderState()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "i < 100@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String(( results = decoder.decode(ByteBuffer.wrap((sb.toString() + \"\").getBytes()),context)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(sb.toString() + \"\",results(0()@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "sb.append(\"a string\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testThatWindowsLineTerminatedLongStringReturnsNonEmptyResult['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "testThatWindowsLineTerminatedLongStringReturnsNonEmptyResult['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(0,context.getBuffer().position())@@@15@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "int i = 0@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertEquals(1,results.length)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertNotNull(results)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(sb.toString() + \"\",results)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "String results = decoder.decode(ByteBuffer.wrap((sb.toString() + \"\").getBytes()),context)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "TextLineDecoder decoder = new TextLineDecoder()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "++i@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "testThatWindowsLineTerminatedLongStringReturnsNonEmptyResult['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(sb.toString(),results(0()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(0,context.getBuffer().position())@@@14@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "TextLineDecoder decoder = new TextLineDecoder(LineDelimiter.UNIX)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "++i@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->17 [style = bold, label=""];
9->20 [style = dashed, label="0"];
16->0 [style = bold, label=""];
7->11 [style = solid, label="context"];
17->12 [style = solid, label="results"];
9->4 [style = bold, label=""];
11->20 [style = solid, label="results"];
8->15 [style = dashed, label="0"];
11->9 [style = solid, label="results"];
1->20 [style = bold, label=""];
8->6 [style = bold, label=""];
11->12 [style = bold, label=""];
3->15 [style = bold, label=""];
15->6 [style = bold, label=""];
7->17 [style = solid, label="context"];
11->17 [style = dashed, label="0"];
1->18 [style = dashed, label="0"];
2->10 [style = bold, label=""];
12->1 [style = bold, label=""];
10->6 [style = bold, label=""];
7->3 [style = bold, label=""];
1->9 [style = bold, label=""];
20->4 [style = bold, label=""];
15->6 [style = solid, label="i"];
0->7 [style = bold, label=""];
6->2 [style = bold, label=""];
11->12 [style = solid, label="results"];
6->10 [style = dotted, label="true"];
17->18 [style = solid, label="results"];
6->14 [style = dotted, label="true"];
17->12 [style = bold, label=""];
6->2 [style = dotted, label="true"];
5->0 [style = bold, label=""];
0->21 [style = dashed, label="0"];
3->8 [style = bold, label=""];
6->11 [style = bold, label=""];
2->14 [style = bold, label=""];
12->18 [style = bold, label=""];
18->13 [style = bold, label=""];
21->7 [style = bold, label=""];
14->6 [style = bold, label=""];
8->6 [style = solid, label="i"];
10->14 [style = dashed, label="0"];
19->21 [style = bold, label=""];
}
