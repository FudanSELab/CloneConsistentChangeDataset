digraph {
8 [style = filled, label = "assertEquals(4,tokens.size())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(\"quick\",tokens.get(0).getTerm())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "List<AnalyzeAction.AnalyzeToken> tokens = analyze.getTokens()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"fox\",tokens.get(2).getTerm())@@@35@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "testNonPreBuildTokenFilter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertEquals(\"brown\",tokens.get(2).getTerm())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\"the\",tokens.get(0).getTerm())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "AnalyzeAction.Response analyze = TransportAnalyzeAction.analyze(request,registry,environment,mockIndexService(),maxTokenCount)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(\"fox\",tokens.get(3).getTerm())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "request.addTokenFilter(\"mock\")@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "tokens = analyze.getTokens()@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(4,tokens.size())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"brown\",tokens.get(1).getTerm())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"the\",tokens.get(0).getTerm())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"brown\",tokens.get(2).getTerm())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "request.text(\"the quick brown fox\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,environment,mockIndexService(),maxTokenCount)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,\"text\",null,indexAnalyzers,registry,environment,maxTokenCount)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "request.tokenizer(\"standard\")@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"brown\",tokens.get(1).getTerm())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(\"quick\",tokens.get(1).getTerm())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "request.analyzer(\"custom_analyzer\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "request.tokenizer(\"standard\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(\"quick\",tokens.get(1).getTerm())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(3,tokens.size())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(3,tokens.size())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "AnalyzeAction.Request request = new AnalyzeAction.Request()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,\"text\",null,indexAnalyzers,registry,environment,maxTokenCount)@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "testWithIndexAnalyzers['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,environment,mockIndexService(),maxTokenCount)@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "request.addTokenFilter(\"stop\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "testWithIndexAnalyzers['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertEquals(\"quick\",tokens.get(0).getTerm())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "AnalyzeAction.Response analyze = TransportAnalyzeAction.analyze(request,\"text\",null,indexAnalyzers,registry,environment,maxTokenCount)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "tokens = analyze.getTokens()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "tokens = analyze.getTokens()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,environment,mockIndexService(),maxTokenCount)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "request.analyzer(null)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "request.analyzer(\"standard\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(\"fox\",tokens.get(2).getTerm())@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(\"fox\",tokens.get(3).getTerm())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,\"text\",null,indexAnalyzers,registry,environment,maxTokenCount)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18->37 [style = bold, label=""];
17->35 [style = solid, label="request"];
17->5 [style = bold, label=""];
16->9 [style = bold, label=""];
7->1 [style = bold, label=""];
37->24 [style = bold, label=""];
35->16 [style = bold, label=""];
17->34 [style = solid, label="request"];
17->36 [style = solid, label="request"];
25->33 [style = bold, label=""];
20->2 [style = solid, label="analyze"];
5->20 [style = bold, label=""];
17->28 [style = solid, label="request"];
26->3 [style = bold, label=""];
2->30 [style = solid, label="analyze"];
23->4 [style = bold, label=""];
4->21 [style = bold, label=""];
14->10 [style = bold, label=""];
37->36 [style = solid, label="analyze"];
30->25 [style = bold, label=""];
8->6 [style = bold, label=""];
11->32 [style = bold, label=""];
1->0 [style = bold, label=""];
34->37 [style = solid, label="analyze"];
28->35 [style = dashed, label="0"];
18->2 [style = bold, label=""];
30->36 [style = dashed, label="0"];
28->16 [style = bold, label=""];
33->13 [style = bold, label=""];
31->34 [style = bold, label=""];
15->26 [style = bold, label=""];
21->12 [style = bold, label=""];
13->29 [style = bold, label=""];
3->36 [style = bold, label=""];
22->18 [style = bold, label=""];
36->25 [style = bold, label=""];
30->28 [style = solid, label="analyze"];
17->20 [style = solid, label="request"];
19->14 [style = bold, label=""];
20->23 [style = bold, label=""];
5->31 [style = bold, label=""];
20->34 [style = dashed, label="0"];
17->39 [style = bold, label=""];
6->11 [style = bold, label=""];
2->37 [style = dashed, label="0"];
40->17 [style = bold, label=""];
32->15 [style = bold, label=""];
27->17 [style = bold, label=""];
0->35 [style = bold, label=""];
9->19 [style = bold, label=""];
29->7 [style = bold, label=""];
17->37 [style = solid, label="request"];
39->41 [style = bold, label=""];
34->23 [style = bold, label=""];
2->24 [style = bold, label=""];
31->20 [style = bold, label=""];
24->8 [style = bold, label=""];
3->30 [style = bold, label=""];
38->17 [style = bold, label=""];
17->30 [style = solid, label="request"];
36->35 [style = solid, label="analyze"];
12->22 [style = bold, label=""];
0->28 [style = bold, label=""];
17->2 [style = solid, label="request"];
41->5 [style = bold, label=""];
}
