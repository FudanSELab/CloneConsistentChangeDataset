digraph {
2 [style = filled, label = "final TwoInputTransformation<Integer,Integer,Integer> resultTransform = new TwoInputTransformation<>(bounded,unbounded,\"Test Two Input Transformation\",SimpleOperatorFactory.of(new StreamGraphGeneratorTest.OutputTypeConfigurableOperationWithTwoInputs()),BasicTypeInfo.INT_TYPE_INFO,1)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final StreamGraph graph = generateStreamGraph(RuntimeExecutionMode.AUTOMATIC,unbounded)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final SourceTransformation<Integer> bounded = getSourceTransformation(\"Bounded Source\",Boundedness.BOUNDED)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(Boundedness.BOUNDED,bounded.getBoundedness())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final SourceTransformation<Integer,?,?> unbounded = getSourceTransformation(\"Unbounded Source\",Boundedness.CONTINUOUS_UNBOUNDED)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "final SourceTransformation<Integer,?,?> bounded = getSourceTransformation(\"Bounded Source\",Boundedness.BOUNDED)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertThat(graph,hasProperties(GlobalDataExchangeMode.ALL_EDGES_PIPELINED,ScheduleMode.EAGER,true,false))@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final SourceTransformation<Integer> bounded = getSourceTransformation(\"Bounded Source\",Boundedness.BOUNDED)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "testDetectionThroughTransitivePredecessors['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testDetectionThroughTransitivePredecessors['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertEquals(Boundedness.CONTINUOUS_UNBOUNDED,unbounded.getBoundedness())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final SourceTransformation<Integer> unbounded = getSourceTransformation(\"Unbounded Source\",Boundedness.CONTINUOUS_UNBOUNDED)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testMixedDetection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(Boundedness.BOUNDED,bounded.getBoundedness())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final StreamGraph graph = generateStreamGraph(RuntimeExecutionMode.AUTOMATIC,resultTransform)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(graph,hasProperties(GlobalDataExchangeMode.ALL_EDGES_PIPELINED,ScheduleMode.EAGER,true,false))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0->9 [style = bold, label=""];
2->4 [style = solid, label="resultTransform"];
11->12 [style = bold, label=""];
11->13 [style = solid, label="unbounded"];
2->4 [style = bold, label=""];
12->7 [style = bold, label=""];
4->1 [style = solid, label="graph"];
9->6 [style = bold, label=""];
0->7 [style = bold, label=""];
6->2 [style = bold, label=""];
8->0 [style = bold, label=""];
3->5 [style = bold, label=""];
13->15 [style = solid, label="graph"];
10->8 [style = bold, label=""];
5->0 [style = bold, label=""];
7->9 [style = dashed, label="0"];
6->13 [style = bold, label=""];
5->2 [style = solid, label="bounded"];
7->6 [style = bold, label=""];
9->2 [style = solid, label="unbounded"];
5->8 [style = dashed, label="0"];
4->1 [style = bold, label=""];
13->15 [style = bold, label=""];
14->11 [style = bold, label=""];
8->2 [style = solid, label="bounded"];
7->2 [style = solid, label="unbounded"];
}
