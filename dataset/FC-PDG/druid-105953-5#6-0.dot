digraph {
3 [style = filled, label = "testSingleValueStringColumnWithNulls['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "NullHandling.replaceWithDefault()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertFilterMatches(new SelectorDimFilter(\"dim1\",\"2\",null),ImmutableList.of(\"2\"))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testSingleValueStringColumnWithNulls['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertFilterMatches(new SelectorDimFilter(\"dim1\",\"\",null),ImmutableList.of(\"0\"))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertFilterMatches(new SelectorDimFilter(\"dim1\",\"1\",null),ImmutableList.of(\"3\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertFilterMatches(new SelectorDimFilter(\"dim1\",\"abc\",null),ImmutableList.of(\"5\",\"8\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testSinglePreFilterWithNulls['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertFilterMatches(new SelectorDimFilter(\"dim1\",\"\",null),ImmutableList.of(\"0\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertFilterMatches(new SelectorDimFilter(\"dim1\",\"abdef\",null),ImmutableList.of(\"4\"))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertFilterMatches(new SelectorDimFilter(\"dim1\",\"\",null),ImmutableList.of(\"0\"))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertFilterMatches(new SelectorDimFilter(\"dim1\",null,null),ImmutableList.of(\"0\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertFilterMatches(new SelectorDimFilter(\"dim1\",\"10\",null),ImmutableList.of(\"1\"))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertFilterMatches(new SelectorDimFilter(\"dim1\",null,null),ImmutableList.of())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertFilterMatches(new SelectorDimFilter(\"dim1\",\"ab\",null),ImmutableList.of())@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertFilterMatches(new SelectorDimFilter(\"dim1\",\"\",null),ImmutableList.of(\"0\"))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertFilterMatches(new SelectorDimFilter(\"dim1\",\"abc\",null),ImmutableList.of(\"5\"))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertFilterMatches(new SelectorDimFilter(\"dim1\",\"1\",null),ImmutableList.of(\"3\",\"9\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->10 [style = bold, label=""];
1->4 [style = bold, label=""];
15->2 [style = bold, label=""];
11->14 [style = bold, label=""];
16->10 [style = bold, label=""];
17->9 [style = bold, label=""];
8->14 [style = dashed, label="0"];
0->15 [style = bold, label=""];
0->7 [style = bold, label=""];
8->0 [style = bold, label=""];
3->9 [style = bold, label=""];
5->16 [style = bold, label=""];
12->10 [style = bold, label=""];
5->6 [style = bold, label=""];
14->0 [style = bold, label=""];
5->12 [style = bold, label=""];
1->16 [style = bold, label=""];
7->2 [style = bold, label=""];
6->10 [style = bold, label=""];
9->6 [style = dotted, label="false"];
9->1 [style = dotted, label="true"];
1->12 [style = bold, label=""];
9->5 [style = dotted, label="false"];
9->5 [style = bold, label=""];
9->4 [style = dotted, label="true"];
7->15 [style = dashed, label="0"];
11->8 [style = bold, label=""];
13->9 [style = bold, label=""];
9->1 [style = bold, label=""];
10->11 [style = bold, label=""];
}
