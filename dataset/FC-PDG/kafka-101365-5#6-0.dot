digraph {
25 [style = filled, label = "verifyInEquality(SessionWindows.with(9),SessionWindows.with(1))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "verifyInEquality(JoinWindows.of(ofMillis(9)),JoinWindows.of(ofMillis(3)))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "verifyInEquality(JoinWindows.of(3).before(1).after(2).grace(9).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "verifyInEquality(JoinWindows.of(ofMillis(3)).after(ofMillis(9)),JoinWindows.of(ofMillis(3)).after(ofMillis(2)))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "verifyInEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(9)).after(ofMillis(2)).grace(ofMillis(3)).until(60),JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).until(60))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "verifyInEquality(JoinWindows.of(ofMillis(3)).until(90),JoinWindows.of(ofMillis(3)).until(60))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "verifyInEquality(JoinWindows.of(3).grace(9),JoinWindows.of(3).grace(2))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "verifyInEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(9)).until(60),JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).until(60))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "verifyInEquality(JoinWindows.of(3).before(9).after(2).grace(3).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "verifyInEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(9)),JoinWindows.of(ofMillis(3)).before(ofMillis(2)))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "verifyInEquality(JoinWindows.of(3).until(90),JoinWindows.of(3).until(60))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "verifyInEquality(JoinWindows.of(3).after(9),JoinWindows.of(3).after(2))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "verifyInEquality(SessionWindows.with(1).grace(6).until(70),SessionWindows.with(1).grace(6).until(7))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "verifyInEquality(JoinWindows.of(3).before(9),JoinWindows.of(3).before(2))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "verifyInEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(9)).grace(ofMillis(3)).until(60),JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).until(60))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "verifyInEquality(JoinWindows.of(9),JoinWindows.of(3))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "verifyInEquality(JoinWindows.of(3).before(1).after(2).grace(3).until(90),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "equalsAndHashcodeShouldBeValidForNegativeCases['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "verifyInEquality(SessionWindows.with(1).until(9),SessionWindows.with(1).until(7))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "verifyInEquality(SessionWindows.with(2).grace(6).until(7),SessionWindows.with(1).grace(6).until(7))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "verifyInEquality(JoinWindows.of(ofMillis(3)).grace(ofMillis(9)),JoinWindows.of(ofMillis(3)).grace(ofMillis(2)))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "verifyInEquality(JoinWindows.of(3).before(1).after(9).grace(3).until(60),JoinWindows.of(3).before(1).after(2).grace(3).until(60))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "verifyInEquality(SessionWindows.with(1).grace(9),SessionWindows.with(1).grace(6))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "verifyInEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).until(90),JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).until(60))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "verifyInEquality(SessionWindows.with(1).grace(0).until(7),SessionWindows.with(1).grace(6).until(7))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
14->16 [style = bold, label=""];
10->18 [style = bold, label=""];
23->25 [style = bold, label=""];
16->13 [style = bold, label=""];
25->22 [style = bold, label=""];
9->24 [style = dashed, label="0"];
9->2 [style = bold, label=""];
7->16 [style = dashed, label="0"];
1->15 [style = dashed, label="0"];
12->17 [style = bold, label=""];
18->15 [style = bold, label=""];
19->11 [style = bold, label=""];
11->12 [style = bold, label=""];
7->4 [style = bold, label=""];
0->12 [style = dashed, label="0"];
15->19 [style = bold, label=""];
1->9 [style = bold, label=""];
1->22 [style = dashed, label="0"];
26->21 [style = bold, label=""];
9->19 [style = dashed, label="0"];
8->1 [style = bold, label=""];
24->26 [style = bold, label=""];
2->0 [style = bold, label=""];
21->20 [style = bold, label=""];
5->17 [style = dashed, label="0"];
3->7 [style = bold, label=""];
17->14 [style = bold, label=""];
0->21 [style = dashed, label="0"];
6->8 [style = bold, label=""];
2->11 [style = dashed, label="0"];
8->18 [style = dashed, label="0"];
8->25 [style = dashed, label="0"];
22->24 [style = bold, label=""];
2->26 [style = dashed, label="0"];
3->14 [style = dashed, label="0"];
4->13 [style = dashed, label="0"];
0->5 [style = bold, label=""];
}
