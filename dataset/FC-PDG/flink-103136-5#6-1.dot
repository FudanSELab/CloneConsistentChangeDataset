digraph {
2 [style = filled, label = "inputStatus != DataInputStatus.END_OF_INPUT@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "inputStatus = sortingDataInput.emitNext(collectingDataOutput)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "CollectionDataInput<Integer> input = new CollectionDataInput<>(Arrays.asList(new StreamRecord<>(1,3),new StreamRecord<>(1,1),new StreamRecord<>(2,1),new StreamRecord<>(2,3),new StreamRecord<>(1,2),new StreamRecord<>(2,2)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "CollectingDataOutput<Integer> collectingDataOutput = new CollectingDataOutput<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(collectingDataOutput.events,equalTo(Arrays.asList(new StreamRecord<>(1,1),new StreamRecord<>(1,2),new StreamRecord<>(1,3),new StreamRecord<>(2,1),new StreamRecord<>(2,2),new StreamRecord<>(2,3))))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "SortingDataInput<Integer,Integer> sortingDataInput = new SortingDataInput<>(input,new IntSerializer(),new IntSerializer(),(KeySelector<Integer,Integer>)null,environment.getMemoryManager(),environment.getIOManager(),true,1.0,new Configuration(),new DummyInvokable(),new ExecutionConfig())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "DataInputStatus inputStatus@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "simpleVariableLengthKeySorting['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "SortingDataInput<Integer,String> sortingDataInput = new SortingDataInput<>(input,new IntSerializer(),new StringSerializer(),(KeySelector<Integer,String>)null,environment.getMemoryManager(),environment.getIOManager(),true,1.0,new Configuration(),new DummyInvokable())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "CollectionDataInput<Integer> input = new CollectionDataInput<>(Arrays.asList(new StreamRecord<>(1,3),new Watermark(1),new StreamRecord<>(1,1),new Watermark(2),new StreamRecord<>(2,1),new Watermark(3),new StreamRecord<>(2,3),new Watermark(4),new StreamRecord<>(1,2),new Watermark(5),new StreamRecord<>(2,2),new Watermark(6)))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "SortingDataInput<Integer,Integer> sortingDataInput = new SortingDataInput<>(input,new IntSerializer(),new IntSerializer(),(KeySelector<Integer,Integer>)null,environment.getMemoryManager(),environment.getIOManager(),true,1.0,new Configuration(),new DummyInvokable())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "watermarkPropagation['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "MockEnvironment environment = MockEnvironment.builder().build()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(collectingDataOutput.events,equalTo(Arrays.asList(new StreamRecord<>(1,1),new StreamRecord<>(1,2),new StreamRecord<>(1,3),new StreamRecord<>(2,1),new StreamRecord<>(2,2),new StreamRecord<>(2,3),new Watermark(6))))@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "watermarkPropagation['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4->2 [style = solid, label="inputStatus"];
5->8 [style = bold, label=""];
5->9 [style = bold, label=""];
2->6 [style = bold, label=""];
1->3 [style = bold, label=""];
3->9 [style = solid, label="input"];
4->2 [style = bold, label=""];
7->4 [style = bold, label=""];
6->14 [style = dashed, label="0"];
9->7 [style = bold, label=""];
3->13 [style = dashed, label="0"];
12->1 [style = bold, label=""];
2->4 [style = bold, label=""];
1->13 [style = bold, label=""];
8->7 [style = bold, label=""];
3->8 [style = solid, label="input"];
8->9 [style = dashed, label="0"];
3->5 [style = bold, label=""];
1->4 [style = solid, label="collectingDataOutput"];
0->1 [style = bold, label=""];
2->14 [style = bold, label=""];
2->4 [style = dotted, label="true"];
13->5 [style = bold, label=""];
5->11 [style = bold, label=""];
13->11 [style = solid, label="input"];
8->11 [style = dashed, label="0"];
10->1 [style = bold, label=""];
11->7 [style = bold, label=""];
}
