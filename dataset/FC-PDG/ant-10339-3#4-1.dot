digraph {
13 [style = filled, label = "assertEquals(\"bar\",child2.getAttribute(\"foo\"))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(1,nl2.getLength())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertNotNull(x)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(\"child3\",child3.getTagName())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertTrue(!child3.hasAttributes())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(1,nl2.getLength())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(3,nl.getLength())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "testNestedChildren['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "nl2 = child3.getChildNodes()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testNestedText['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "assertEquals(Node.ELEMENT_NODE,nl2.item(0).getNodeType())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "XMLFragment x = (XMLFragment)getProject().getReference(\"nested-text\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"child4\",((Element)nl2.item(0)).getTagName())@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Element child3 = (Element)nl.item(2)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(Node.ELEMENT_NODE,nl.item(2).getNodeType())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(\"No attributes\",!n.hasAttributes())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "XMLFragment x = (XMLFragment)buildRule.getProject().getReference(\"nested-text\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "Element child2 = (Element)nl.item(1)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(Node.TEXT_NODE,nl2.item(0).getNodeType())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertTrue(!child1.hasAttributes())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(\"foo\",nl2.item(0).getNodeValue())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(Node.ELEMENT_NODE,nl.item(0).getNodeType())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "XMLFragment x = (XMLFragment)getProject().getReference(\"with-children\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testNestedText['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"foo\",nl.item(0).getNodeValue())@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertTrue(child2.hasAttributes())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "NodeList nl = n.getChildNodes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Node n = x.getFragment()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(0,nl2.getLength())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(1,nl.getLength())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"child2\",child2.getTagName())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "nl2 = child2.getChildNodes()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(\"child1\",child1.getTagName())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Element child1 = (Element)nl.item(0)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(Node.TEXT_NODE,nl.item(0).getNodeType())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "NodeList nl2 = child1.getChildNodes()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(Node.ELEMENT_NODE,nl.item(1).getNodeType())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->3 [style = bold, label=""];
5->8 [style = bold, label=""];
16->11 [style = bold, label=""];
28->15 [style = bold, label=""];
18->23 [style = bold, label=""];
9->2 [style = bold, label=""];
24->35 [style = bold, label=""];
27->28 [style = bold, label=""];
1->2 [style = solid, label="x"];
26->14 [style = bold, label=""];
3->6 [style = bold, label=""];
36->32 [style = bold, label=""];
1->9 [style = dashed, label="0"];
1->32 [style = dashed, label="0"];
2->4 [style = bold, label=""];
32->2 [style = bold, label=""];
32->2 [style = solid, label="x"];
30->18 [style = bold, label=""];
31->12 [style = bold, label=""];
6->29 [style = bold, label=""];
15->26 [style = bold, label=""];
20->27 [style = bold, label=""];
5->16 [style = dashed, label="0"];
25->24 [style = bold, label=""];
17->34 [style = bold, label=""];
7->5 [style = bold, label=""];
13->19 [style = bold, label=""];
21->31 [style = bold, label=""];
9->2 [style = solid, label="x"];
22->20 [style = bold, label=""];
0->1 [style = bold, label=""];
12->25 [style = bold, label=""];
33->30 [style = bold, label=""];
11->33 [style = bold, label=""];
23->17 [style = bold, label=""];
7->29 [style = dashed, label="0"];
1->2 [style = bold, label=""];
10->9 [style = bold, label=""];
8->11 [style = dashed, label="0"];
6->7 [style = bold, label=""];
35->13 [style = bold, label=""];
19->22 [style = bold, label=""];
29->16 [style = bold, label=""];
34->21 [style = bold, label=""];
}
