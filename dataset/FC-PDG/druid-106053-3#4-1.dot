digraph {
6 [style = filled, label = "JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(null,new AndFilter(ImmutableList.of(new SelectorFilter(\"channel\",null),new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",null))),ImmutableList.of())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "test_filterPushDown_factToCountryRightWithFilterOnNullColumns['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(factSegment.asStorageAdapter(),ImmutableList.of(factToCountryOnIsoCode(JoinType.RIGHT)))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(adapter,originalFilter)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(adapter,originalFilter,true)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "test_filterPushDown_factToCountryRightWithFilterOnNullColumns['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Filter originalFilter = new AndFilter(ImmutableList.of(new SelectorFilter(\"channel\",null),new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",null)))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "JoinTestHelper.verifyCursors(adapter.makeCursors(originalFilter,Intervals.ETERNITY,VirtualColumns.EMPTY,Granularities.ALL,false,null),ImmutableList.of(\"page\",\"countryIsoCode\",\"countryNumber\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"),ImmutableList.of())@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(factSegment.asStorageAdapter(),ImmutableList.of(factToCountryOnIsoCode(JoinType.FULL)))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(expectedFilterSplit,actualFilterSplit)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "test_filterPushDown_factToCountryFullWithFilterOnNulls['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
9->2 [style = bold, label=""];
3->7 [style = dashed, label="0"];
2->6 [style = bold, label=""];
1->9 [style = dashed, label="0"];
7->0 [style = bold, label=""];
2->5 [style = solid, label="originalFilter"];
3->0 [style = solid, label="actualFilterSplit"];
3->0 [style = bold, label=""];
8->1 [style = bold, label=""];
1->3 [style = solid, label="adapter"];
1->7 [style = solid, label="adapter"];
9->3 [style = solid, label="adapter"];
2->3 [style = solid, label="originalFilter"];
6->0 [style = solid, label="expectedFilterSplit"];
1->2 [style = bold, label=""];
4->1 [style = bold, label=""];
10->9 [style = bold, label=""];
7->0 [style = solid, label="actualFilterSplit"];
6->7 [style = bold, label=""];
2->7 [style = solid, label="originalFilter"];
0->5 [style = bold, label=""];
}
