digraph {
2 [style = filled, label = "ts.assertValues(1,2)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ts.assertNotComplete()@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Flowable.just(1).hide().concatMapDelayError(new Function<Integer,Flowable<Integer>>(){@Override public Flowable<Integer> apply(Integer v){return inner}}).subscribe(ts)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "singleInnerErrors['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "singleInnerErrors['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "final Flowable<Integer> inner = Flowable.range(1,2).concatWith(Flowable.error(new TestException()))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "singleInnerErrors['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "TestSubscriber<Integer> ts = TestSubscriber.create()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ts.assertError()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->6 [style = bold, label=""];
1->3 [style = bold, label=""];
0->4 [style = bold, label=""];
3->0 [style = bold, label=""];
8->3 [style = bold, label=""];
6->5 [style = bold, label=""];
4->2 [style = bold, label=""];
0->4 [style = solid, label="ts"];
7->3 [style = bold, label=""];
}
