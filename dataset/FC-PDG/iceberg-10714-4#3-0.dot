digraph {
6 [style = filled, label = "Table table = buildPartitionedTable(\"partitioned_by_day\",PARTITION_BY_DAY,\"ts_day\",\"ts\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEqualsSafe(SCHEMA.asStruct(),expected(5,6,7,8,9),read(unpartitioned.toString(),\"ts < cast('2017-12-22 00:00:00+00:00' as timestamp)\"))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "SparkScanBuilder builder = new SparkScanBuilder(spark,TABLES.load(options.get(\"path\")),options)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(\"Should only create one task for a small file\",1,tasks.length)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "CaseInsensitiveStringMap options = new CaseInsensitiveStringMap(ImmutableMap.of(\"path\",table.location()))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "pushFilters(builder,LessThan.apply(\"ts\",\"2017-12-22T00:00:00+00:00\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Batch scan = builder.build().toBatch()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "InputPartition(( tasks = scan.planInputPartitions()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(\"Unfiltered table should created 2 read tasks\",2,unfiltered.planInputPartitions().length)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "CaseInsensitiveStringMap options = new CaseInsensitiveStringMap(ImmutableMap.of(\"path\",unpartitioned.toString()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Batch unfiltered = new SparkScanBuilder(spark,TABLES.load(options.get(\"path\")),options).build().toBatch()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "{SparkScanBuilder builder = new SparkScanBuilder(spark,TABLES.load(options.get(\"path\")),options)pushFilters(builder,And.apply(GreaterThan.apply(\"ts\",\"2017-12-22T06:00:00+00:00\"),LessThan.apply(\"ts\",\"2017-12-22T08:00:00+00:00\")))Batch scan = builder.build().toBatch()InputPartition(( tasks = scan.planInputPartitions()Assert.assertEquals(\"Should create one task for 2017-12-22\",1,tasks.length)assertEqualsSafe(SCHEMA.asStruct(),expected(1,2),read(table.location(),vectorized,\"ts > cast('2017-12-22 06:00:00+00:00' as timestamp) and \" + \"ts < cast('2017-12-22 08:00:00+00:00' as timestamp)\"))}@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testDayPartitionedTimestampFilters['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "testUnpartitionedTimestampFilter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testDayPartitionedTimestampFilters['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "{SparkScanBuilder builder = new SparkScanBuilder(spark,TABLES.load(options.get(\"path\")),options)pushFilters(builder,LessThan.apply(\"ts\",\"2017-12-22T00:00:00+00:00\"))Batch scan = builder.build().toBatch()InputPartition(( tasks = scan.planInputPartitions()Assert.assertEquals(\"Should create one task for 2017-12-21\",1,tasks.length)assertEqualsSafe(SCHEMA.asStruct(),expected(5,6,7,8,9),read(table.location(),vectorized,\"ts < cast('2017-12-22 00:00:00+00:00' as timestamp)\"))}@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->3 [style = solid, label="options"];
2->0 [style = bold, label=""];
7->6 [style = bold, label=""];
1->3 [style = bold, label=""];
13->9 [style = bold, label=""];
1->3 [style = solid, label="builder"];
14->12 [style = bold, label=""];
0->4 [style = bold, label=""];
15->8 [style = bold, label=""];
13->9 [style = solid, label="options"];
6->2 [style = bold, label=""];
10->14 [style = bold, label=""];
11->13 [style = bold, label=""];
2->1 [style = solid, label="options"];
5->6 [style = bold, label=""];
4->1 [style = bold, label=""];
9->10 [style = bold, label=""];
12->15 [style = bold, label=""];
9->10 [style = solid, label="builder"];
}
