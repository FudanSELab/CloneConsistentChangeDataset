digraph {
1 [style = filled, label = "String(( reducedArguments = {\"--debug\",\"true\",\"arg1\",\"arg2\"}@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertArrayEquals(classpath,programOptions.getClasspaths().toArray())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "URL(( classpath = new URL((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b0735a@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testNonExistingFileWithoutArguments['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(arguments(4(,programOptions.getJarFilePath())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertArrayEquals(reducedArguments,programOptions.getProgramArgs())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ProgramOptions programOptions = new ProgramOptions(commandLine)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testNonExistingFileWithArguments['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertArrayEquals(new String((((,programOptions.getProgramArgs())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "frontend.buildProgram(programOptions)@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testNonExistingFileWithArguments['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ProgramOptions programOptions = ProgramOptions.create(commandLine)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertEquals(arguments(0(,programOptions.getJarFilePath())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "CommandLine commandLine = CliFrontendParser.parse(CliFrontendParser.RUN_OPTIONS,arguments,true)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "fail(\"Should fail with an exception\")@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "frontend.buildProgram(programOptions)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "String(( arguments = {\"/some/none/existing/path\"}@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
16->15 [style = bold, label=""];
0->9 [style = solid, label="arguments"];
2->5 [style = solid, label="commandLine"];
2->5 [style = bold, label=""];
5->9 [style = bold, label=""];
11->7 [style = solid, label="programOptions"];
10->3 [style = solid, label="classpath"];
0->2 [style = bold, label=""];
3->16 [style = dashed, label="0"];
5->15 [style = solid, label="programOptions"];
5->14 [style = bold, label=""];
11->9 [style = bold, label=""];
12->0 [style = bold, label=""];
3->4 [style = bold, label=""];
4->7 [style = bold, label=""];
8->0 [style = bold, label=""];
0->10 [style = bold, label=""];
9->14 [style = dashed, label="0"];
5->11 [style = dashed, label="0"];
7->6 [style = bold, label=""];
5->7 [style = solid, label="programOptions"];
0->14 [style = solid, label="arguments"];
9->3 [style = bold, label=""];
1->2 [style = bold, label=""];
2->11 [style = solid, label="commandLine"];
10->1 [style = bold, label=""];
2->11 [style = bold, label=""];
1->4 [style = solid, label="reducedArguments"];
0->2 [style = solid, label="arguments"];
13->0 [style = bold, label=""];
}
