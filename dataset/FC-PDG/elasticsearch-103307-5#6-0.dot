digraph {
27 [style = filled, label = "assertEquals(new TermRangeQuery(STRING_FIELD_NAME,new BytesRef(\"aBc\"),new BytesRef(\"BcD\"),true,true),query)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "query = new SimpleQueryStringBuilder(\"aBc~1\").field(STRING_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertEquals(expected,query)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(new Term(STRING_FIELD_NAME,\"aBc\"),fuzzyQuery.getTerm())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "FuzzyQuery expected = new FuzzyQuery(new Term(STRING_FIELD_NAME,\"aBc\"),1)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "assertEquals(new WildcardQuery(new Term(STRING_FIELD_NAME,\"aBc*D\")),query)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc*D\").field(STRING_FIELD_NAME).analyzer(\"whitespace\").toQuery(createShardContext())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc~1\").field(STRING_FIELD_NAME).analyzer(\"whitespace\").toQuery(createShardContext())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "FuzzyQuery expected = new FuzzyQuery(new Term(TEXT_FIELD_NAME,\"aBc\"),1)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc*\").field(STRING_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "testExpandedTerms['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(new PrefixQuery(new Term(TEXT_FIELD_NAME,\"aBc\")),query)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "query = new SimpleQueryStringBuilder(\"aBc*\").field(TEXT_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Query query = new SimpleQueryStringBuilder(\"aBc*\").field(TEXT_FIELD_NAME).analyzer(\"redspace\").toQuery(createShardContext())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME,\"aBc\")),query)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expected = new FuzzyQuery(new Term(STRING_FIELD_NAME,\"abc\"),1)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc~1\").field(STRING_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "query = new QueryStringQueryBuilder(\"(aBc TO BcD(\").field(STRING_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(new WildcardQuery(new Term(STRING_FIELD_NAME,\"abc*d\")),query)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(new Term(STRING_FIELD_NAME,\"abc\"),fuzzyQuery.getTerm())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "fuzzyQuery = (FuzzyQuery)query@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "query = new SimpleQueryStringBuilder(\"aBc~1\").field(TEXT_FIELD_NAME).analyzer(\"redspace\").toQuery(createShardContext())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testExpandedTerms['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "query = new SimpleQueryStringBuilder(\"aBc*\").field(STRING_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertEquals(new PrefixQuery(new Term(TEXT_FIELD_NAME,\"abc\")),query)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME,\"abc\")),query)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "query = new SimpleQueryStringBuilder(\"aBc~1\").field(TEXT_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "query = new SimpleQueryStringBuilder(\"aBc~1\").field(STRING_FIELD_NAME).analyzer(\"redspace\").toQuery(createShardContext())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "Query query = new QueryStringQueryBuilder(\"aBc*\").field(STRING_FIELD_NAME).analyzer(\"whitespace\").toQuery(createShardContext())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "query = new QueryStringQueryBuilder(\"aBc*D\").field(STRING_FIELD_NAME).analyzer(\"standard\").toQuery(createShardContext())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Query query = new SimpleQueryStringBuilder(\"aBc*\").field(STRING_FIELD_NAME).analyzer(\"redspace\").toQuery(createShardContext())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "query = new QueryStringQueryBuilder(\"(aBc TO BcD(\").field(STRING_FIELD_NAME).analyzer(\"whitespace\").toQuery(createShardContext())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "FuzzyQuery fuzzyQuery = (FuzzyQuery)query@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(new TermRangeQuery(STRING_FIELD_NAME,new BytesRef(\"abc\"),new BytesRef(\"bcd\"),true,true),query)@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testExpandedTerms['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertEquals(expected,query)@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "expected = new FuzzyQuery(new Term(TEXT_FIELD_NAME,\"abc\"),1)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35->28 [style = solid, label="query"];
5->3 [style = bold, label=""];
14->16 [style = bold, label=""];
8->10 [style = bold, label=""];
8->16 [style = dashed, label="0"];
16->18 [style = bold, label=""];
10->31 [style = bold, label=""];
4->25 [style = bold, label=""];
11->14 [style = bold, label=""];
2->1 [style = solid, label="expected"];
25->10 [style = solid, label="query"];
2->1 [style = bold, label=""];
26->29 [style = bold, label=""];
0->2 [style = bold, label=""];
18->15 [style = bold, label=""];
7->11 [style = dashed, label="0"];
8->10 [style = solid, label="query"];
0->15 [style = dashed, label="0"];
7->20 [style = dashed, label="0"];
31->30 [style = solid, label="query"];
13->3 [style = solid, label="query"];
6->3 [style = solid, label="query"];
21->23 [style = solid, label="query"];
19->11 [style = bold, label=""];
30->32 [style = bold, label=""];
11->14 [style = solid, label="query"];
7->4 [style = bold, label=""];
29->27 [style = solid, label="query"];
15->1 [style = solid, label="query"];
9->7 [style = bold, label=""];
12->1 [style = bold, label=""];
2->30 [style = dashed, label="0"];
1->13 [style = bold, label=""];
36->20 [style = bold, label=""];
32->33 [style = bold, label=""];
27->35 [style = bold, label=""];
20->4 [style = bold, label=""];
34->22 [style = bold, label=""];
35->28 [style = bold, label=""];
24->26 [style = bold, label=""];
6->5 [style = bold, label=""];
13->17 [style = bold, label=""];
29->27 [style = bold, label=""];
2->12 [style = dashed, label="0"];
1->6 [style = bold, label=""];
6->13 [style = dashed, label="0"];
0->1 [style = solid, label="query"];
5->17 [style = dashed, label="0"];
10->0 [style = bold, label=""];
31->30 [style = bold, label=""];
0->31 [style = dashed, label="0"];
7->4 [style = solid, label="query"];
22->24 [style = solid, label="query"];
17->3 [style = bold, label=""];
23->34 [style = bold, label=""];
5->21 [style = dashed, label="0"];
4->8 [style = bold, label=""];
8->25 [style = dashed, label="0"];
25->10 [style = bold, label=""];
4->14 [style = dashed, label="0"];
15->12 [style = bold, label=""];
5->3 [style = solid, label="expected"];
22->24 [style = bold, label=""];
16->18 [style = solid, label="query"];
12->1 [style = solid, label="expected"];
33->21 [style = bold, label=""];
32->33 [style = solid, label="query"];
17->3 [style = solid, label="expected"];
10->18 [style = dashed, label="0"];
20->4 [style = solid, label="query"];
21->23 [style = bold, label=""];
}
