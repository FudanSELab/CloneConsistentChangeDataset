digraph {
8 [style = filled, label = "final String(( expectedIndex = descending? QueryRunnerTestHelper.expectedFullOnIndexValuesDesc: QueryRunnerTestHelper.expectedFullOnIndexValues@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(gran).intervals(QueryRunnerTestHelper.fullOnIntervalSpec).aggregators(QueryRunnerTestHelper.rowsCount,QueryRunnerTestHelper.indexDoubleSum,QueryRunnerTestHelper.qualityUniques).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).descending(descending).context(makeContext()).build()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "DateTime current = result.getTimestamp()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "lastResult = result@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertNull(result.toString(),value.getDoubleMetric(\"index\"))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "++count@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(lastResult.toString(),expectedLast,lastResult.getTimestamp())@@@35@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.DATA_SOURCE).granularity(gran).intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC).aggregators(QueryRunnerTestHelper.ROWS_COUNT,QueryRunnerTestHelper.INDEX_DOUBLE_SUM,QueryRunnerTestHelper.QUALITY_UNIQUES).postAggregators(QueryRunnerTestHelper.ADD_ROWS_INDEX_CONSTANT).descending(descending).context(makeContext()).build()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(gran).intervals(QueryRunnerTestHelper.fullOnIntervalSpec).descending(descending).context(makeContext()).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "lastResult = result@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(result.toString(),QueryRunnerTestHelper.SKIPPED_DAY.equals(current)? 0L: 13L,value.getLongMetric(\"rows\").longValue())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "!QueryRunnerTestHelper.SKIPPED_DAY.equals(current)@@@15@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "Assert.assertEquals(ImmutableMap.of(),result.getValue().getBaseObject())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Granularity gran = Granularities.DAY@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(lastResult.toString(),expectedLast,lastResult.getTimestamp())@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(value.getDoubleMetric(\"uniques\"),0.0d,0.02)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final TimeseriesResultValue value = result.getValue()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(result.toString(),new Double(expectedIndex(count() + 13L + 1L,value.getDoubleMetric(\"addRowsIndexConstant\"),value.getDoubleMetric(\"addRowsIndexConstant\") * 1e-6)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "NullHandling.replaceWithDefault()@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(result.toString(),Doubles.tryParse(expectedIndex(count().doubleValue(),value.getDoubleMetric(\"index\").doubleValue(),value.getDoubleMetric(\"index\").doubleValue() * 1e-6)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(0.0D,value.getDoubleMetric(\"uniques\"),0.02)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final DateTime expectedLast = descending? QueryRunnerTestHelper.earliest: QueryRunnerTestHelper.last@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(value.getDoubleMetric(\"uniques\"),9.0d,0.02)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(result.toString(),QueryRunnerTestHelper.skippedDay.equals(current)? 0L: 13L,value.getLongMetric(\"rows\").longValue())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "!QueryRunnerTestHelper.skippedDay.equals(current)@@@15@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "testFullOnTimeseries['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(result.toString(),new Double(expectedIndex(count() + 1L,value.getDoubleMetric(\"addRowsIndexConstant\"),value.getDoubleMetric(\"addRowsIndexConstant\") * 1e-6)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Iterable<Result<TimeseriesResultValue>> results = runner.run(QueryPlus.wrap(query)).toList()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertNull(result.toString(),value.getDoubleMetric(\"addRowsIndexConstant\"))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(result.toString(),0.0D,value.getDoubleMetric(\"index\").doubleValue(),value.getDoubleMetric(\"index\").doubleValue() * 1e-6)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "int count = 0@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Result lastResult = null@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testFullOnTimeseries['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "final String(( expectedIndex = descending? QueryRunnerTestHelper.EXPECTED_FULL_ON_INDEX_VALUES_DESC: QueryRunnerTestHelper.EXPECTED_FULL_ON_INDEX_VALUES@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "testTimeseriesNoAggregators['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "final DateTime expectedLast = descending? QueryRunnerTestHelper.EARLIEST: QueryRunnerTestHelper.LAST@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assert.assertFalse(StringUtils.format(\"Timestamp(%s( > expectedLast(%s(\",current,expectedLast),descending? current.isBefore(expectedLast): current.isAfter(expectedLast))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24->1 [style = dotted, label="true"];
24->12 [style = bold, label=""];
29->1 [style = dotted, label="true"];
17->10 [style = solid, label="expectedLast"];
16->11 [style = bold, label=""];
16->5 [style = solid, label="count"];
27->1 [style = solid, label="expectedIndex"];
24->14 [style = dotted, label="true"];
5->9 [style = bold, label=""];
7->31 [style = dashed, label="0"];
8->1 [style = solid, label="expectedIndex"];
0->6 [style = bold, label=""];
30->18 [style = solid, label="expectedLast"];
8->5 [style = solid, label="expectedIndex"];
27->30 [style = bold, label=""];
11->6 [style = bold, label=""];
21->33 [style = bold, label=""];
12->15 [style = dotted, label="false"];
24->12 [style = dotted, label="false"];
1->3 [style = bold, label=""];
4->21 [style = bold, label=""];
29->12 [style = dotted, label="false"];
10->35 [style = bold, label=""];
35->32 [style = bold, label=""];
31->29 [style = bold, label=""];
24->29 [style = dashed, label="0"];
6->10 [style = solid, label="current"];
12->20 [style = dotted, label="false"];
25->35 [style = dashed, label="0"];
16->1 [style = solid, label="count"];
25->7 [style = bold, label=""];
23->0 [style = bold, label=""];
34->21 [style = bold, label=""];
32->6 [style = bold, label=""];
14->1 [style = bold, label=""];
21->28 [style = bold, label=""];
30->10 [style = solid, label="expectedLast"];
24->14 [style = bold, label=""];
21->2 [style = bold, label=""];
25->31 [style = bold, label=""];
26->21 [style = bold, label=""];
22->8 [style = bold, label=""];
8->17 [style = bold, label=""];
19->5 [style = bold, label=""];
12->13 [style = bold, label=""];
9->23 [style = bold, label=""];
6->7 [style = solid, label="current"];
7->24 [style = bold, label=""];
3->23 [style = bold, label=""];
29->12 [style = bold, label=""];
20->23 [style = bold, label=""];
22->27 [style = bold, label=""];
10->25 [style = bold, label=""];
12->19 [style = dotted, label="true"];
12->5 [style = dotted, label="true"];
33->22 [style = bold, label=""];
15->20 [style = bold, label=""];
29->14 [style = dotted, label="true"];
6->10 [style = bold, label=""];
27->5 [style = solid, label="expectedIndex"];
29->14 [style = bold, label=""];
2->28 [style = dashed, label="0"];
6->31 [style = solid, label="current"];
22->17 [style = bold, label=""];
32->36 [style = bold, label=""];
8->27 [style = dashed, label="0"];
0->18 [style = bold, label=""];
2->33 [style = dashed, label="0"];
13->15 [style = bold, label=""];
17->18 [style = solid, label="expectedLast"];
24->3 [style = dotted, label="true"];
2->22 [style = bold, label=""];
12->19 [style = bold, label=""];
30->16 [style = bold, label=""];
17->30 [style = dashed, label="0"];
29->3 [style = dotted, label="true"];
17->36 [style = solid, label="expectedLast"];
28->22 [style = bold, label=""];
17->16 [style = bold, label=""];
12->9 [style = dotted, label="true"];
17->11 [style = bold, label=""];
12->13 [style = dotted, label="false"];
}
