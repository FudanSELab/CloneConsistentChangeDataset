digraph {
12 [style = filled, label = "boolean enableColumnBasedMethods@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "List<Row> expectedRows = Collections.singletonList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2000-01-01T00:00:00.000Z\",COUNT,1674L,VSTRING_DIM,\"spot\"))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "boolean enableColumnBasedMethods@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testGroupBy['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "List<ResultRow> expectedRows = Collections.singletonList(GroupByQueryRunnerTestHelper.createExpectedRow(query,\"2000\",COUNT,1674L,VSTRING_DIM,\"spot\"))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "boolean enableBitmaps@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "boolean enableRowBasedMethods@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "boolean enableRowBasedMethods@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "List<Segment> segments@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "boolean enableColumnBasedMethods@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "List<Row> expectedRows = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2000-01-01T00:00:00.000Z\",COUNT,1674L,VSTRING_DIM,\"spot\"),GroupByQueryRunnerTestHelper.createExpectedRow(\"2000-01-01T00:00:00.000Z\",COUNT,372L,VSTRING_DIM,\"total_market\"),GroupByQueryRunnerTestHelper.createExpectedRow(\"2000-01-01T00:00:00.000Z\",COUNT,372L,VSTRING_DIM,\"upfront\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testGroupByWithSelectFilter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "boolean disableValueMatchers@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "List<Segment> segments@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "TestHelper.assertExpectedObjects(expectedRows,rows,\"failed\")@@@6@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "boolean enableBitmaps@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testGroupByWithSelectFilter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "boolean disableValueMatchers@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "List<ResultRow> rows = groupByTestHelper.runQueryOnSegmentsObjs(segments,query).toList()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "GroupByQuery query = new GroupByQuery.Builder().setDataSource(QueryRunnerTestHelper.dataSource).setGranularity(Granularities.ALL).setVirtualColumns(new DummyStringVirtualColumn(QueryRunnerTestHelper.marketDimension,VSTRING_DIM,enableRowBasedMethods,enableColumnBasedMethods,false,true)).addDimension(VSTRING_DIM).setAggregatorSpecs(new CountAggregatorFactory(COUNT)).setInterval(\"2000/2030\").addOrderByColumn(VSTRING_DIM).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "GroupByQuery query = new GroupByQuery.Builder().setDataSource(QueryRunnerTestHelper.dataSource).setGranularity(Granularities.ALL).setVirtualColumns(new DummyStringVirtualColumn(QueryRunnerTestHelper.marketDimension,VSTRING_DIM,enableRowBasedMethods,enableColumnBasedMethods,enableBitmaps,disableValueMatchers)).addDimension(VSTRING_DIM).setAggregatorSpecs(new CountAggregatorFactory(COUNT)).setInterval(\"2000/2030\").addOrderByColumn(VSTRING_DIM).setDimFilter(new SelectorDimFilter(VSTRING_DIM,\"spot\",null)).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<Segment> segments@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "List<Row> rows = groupByTestHelper.runQueryOnSegmentsObjs(segments,query).toList()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->20 [style = dotted, label="true"];
14->3 [style = bold, label=""];
10->8 [style = dotted, label="true"];
14->3 [style = solid, label="expectedRows"];
15->3 [style = solid, label="rows"];
10->12 [style = dotted, label="true"];
5->9 [style = bold, label=""];
15->14 [style = bold, label=""];
17->18 [style = dotted, label="true"];
1->15 [style = dashed, label="0"];
7->14 [style = dashed, label="0"];
5->6 [style = dotted, label="true"];
5->0 [style = dotted, label="true"];
8->21 [style = dashed, label="0"];
22->3 [style = solid, label="expectedRows"];
1->7 [style = bold, label=""];
7->3 [style = solid, label="expectedRows"];
17->19 [style = bold, label=""];
7->3 [style = bold, label=""];
5->4 [style = dotted, label="true"];
1->22 [style = bold, label=""];
9->19 [style = dashed, label="0"];
22->3 [style = bold, label=""];
19->1 [style = bold, label=""];
1->3 [style = solid, label="rows"];
10->13 [style = dotted, label="true"];
10->11 [style = dotted, label="true"];
9->15 [style = bold, label=""];
9->14 [style = solid, label="query"];
10->9 [style = bold, label=""];
5->8 [style = dotted, label="true"];
9->1 [style = bold, label=""];
17->21 [style = dotted, label="true"];
10->16 [style = dotted, label="true"];
7->22 [style = dashed, label="0"];
5->2 [style = dotted, label="true"];
}
