digraph {
20 [style = filled, label = "stmt = new ShowResourcesStmt(likePredicate,null,new LimitElement(10))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testWhere['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "Assert.assertEquals(\"SHOW RESOURCES WHERE `name` LIKE 'abc' LIMIT 10\",stmt.toString())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "stmt.analyze(analyzer)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "stmt.analyze(analyzer)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "stmt = new ShowLoadStmt(null,likePredicate,null,new LimitElement(10))@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "SlotRef slotRef = new SlotRef(null,\"label\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "StringLiteral stringLiteral = new StringLiteral(\"abc\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "LikePredicate likePredicate = new LikePredicate(org.apache.doris.analysis.LikePredicate.Operator.LIKE,slotRef,stringLiteral)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(\"SHOW LOAD FROM `testCluster:testDb` WHERE `label` LIKE 'ab%' LIMIT 10\",stmt.toString())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "LikePredicate likePredicate = new LikePredicate(org.apache.doris.analysis.LikePredicate.Operator.LIKE,slotRef,stringLiteralLike)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "stmt.analyze(analyzer)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "SlotRef slotRef = new SlotRef(null,\"name\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ShowLoadStmt stmt = new ShowLoadStmt(null,null,null,null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "stmt.analyze(analyzer)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(\"SHOW RESOURCES WHERE `name` = 'abc' LIMIT 10\",stmt.toString())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "stmt = new ShowResourcesStmt(binaryPredicate,null,new LimitElement(10))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(\"SHOW LOAD FROM `testCluster:testDb` WHERE `label` = 'abc' LIMIT 10\",stmt.toString())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testWhere['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(\"SHOW RESOURCES\",stmt.toString())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "ShowResourcesStmt stmt = new ShowResourcesStmt(null,null,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "StringLiteral stringLiteralLike = new StringLiteral(\"ab%\")@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "stmt = new ShowLoadStmt(null,binaryPredicate,null,new LimitElement(10))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "BinaryPredicate binaryPredicate = new BinaryPredicate(Operator.EQ,slotRef,stringLiteral)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testWhere['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(\"SHOW LOAD FROM `testCluster:testDb`\",stmt.toString())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22->4 [style = solid, label="slotRef"];
14->16 [style = bold, label=""];
10->16 [style = solid, label="slotRef"];
13->23 [style = solid, label="binaryPredicate"];
2->20 [style = dashed, label="0"];
4->2 [style = solid, label="likePredicate"];
2->1 [style = bold, label=""];
16->1 [style = solid, label="likePredicate"];
9->18 [style = dashed, label="0"];
5->23 [style = dashed, label="0"];
8->14 [style = bold, label=""];
25->4 [style = bold, label=""];
10->3 [style = bold, label=""];
4->2 [style = bold, label=""];
10->4 [style = solid, label="slotRef"];
9->10 [style = bold, label=""];
20->1 [style = bold, label=""];
11->17 [style = dashed, label="0"];
10->22 [style = dashed, label="0"];
12->0 [style = bold, label=""];
13->5 [style = solid, label="binaryPredicate"];
1->11 [style = bold, label=""];
0->7 [style = bold, label=""];
7->9 [style = bold, label=""];
22->3 [style = bold, label=""];
3->13 [style = solid, label="stringLiteral"];
3->4 [style = solid, label="stringLiteral"];
14->16 [style = solid, label="stringLiteralLike"];
18->22 [style = bold, label=""];
5->6 [style = bold, label=""];
16->1 [style = bold, label=""];
0->21 [style = dashed, label="0"];
1->24 [style = bold, label=""];
15->0 [style = bold, label=""];
23->6 [style = bold, label=""];
6->8 [style = bold, label=""];
11->24 [style = dashed, label="0"];
4->20 [style = bold, label=""];
13->23 [style = bold, label=""];
13->5 [style = bold, label=""];
3->13 [style = bold, label=""];
7->18 [style = bold, label=""];
21->7 [style = bold, label=""];
11->17 [style = bold, label=""];
4->20 [style = solid, label="likePredicate"];
22->13 [style = solid, label="slotRef"];
8->25 [style = dashed, label="0"];
8->4 [style = bold, label=""];
10->13 [style = solid, label="slotRef"];
6->25 [style = bold, label=""];
19->21 [style = bold, label=""];
}
