digraph {
4 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.allGran).intervals(QueryRunnerTestHelper.firstToThird).aggregators(Lists.newArrayList(Iterables.concat(aggregatorFactoryList,Collections.singletonList(new FilteredAggregatorFactory(new CountAggregatorFactory(\"filteredAgg\"),new SelectorDimFilter(\"abraKaDabra\",null,null)))))).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).descending(descending).context(makeContext()).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Iterable<Result<TimeseriesResultValue>> actualResults = runner.run(QueryPlus.wrap(query),CONTEXT).toList()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertExpectedResults(expectedResults,actualResults)@@@6@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Iterable<Result<TimeseriesResultValue>> actualResults = runner.run(QueryPlus.wrap(query)).toList()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "testTimeSeriesWithFilteredAggInvertedNullValue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "List<Result<TimeseriesResultValue>> expectedResults = Collections.singletonList(new Result<>(DateTimes.of(\"2011-04-01\"),new TimeseriesResultValue(ImmutableMap.of(\"filteredAgg\",26L,\"addRowsIndexConstant\",12486.361190795898d,\"index\",12459.361190795898d,\"uniques\",9.019833517963864d,\"rows\",26L))))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testTimeSeriesWithFilteredAggDimensionNotPresentNullValue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "testTimeSeriesWithFilteredAggDimensionNotPresentNullValue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.allGran).intervals(QueryRunnerTestHelper.firstToThird).aggregators(Lists.newArrayList(Iterables.concat(aggregatorFactoryList,Collections.singletonList(new FilteredAggregatorFactory(new CountAggregatorFactory(\"filteredAgg\"),new NotDimFilter(new SelectorDimFilter(QueryRunnerTestHelper.marketDimension,null,null))))))).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).descending(descending).context(makeContext()).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->3 [style = solid, label="expectedResults"];
8->1 [style = bold, label=""];
6->3 [style = solid, label="actualResults"];
1->2 [style = bold, label=""];
4->1 [style = bold, label=""];
1->3 [style = solid, label="actualResults"];
7->8 [style = bold, label=""];
0->4 [style = bold, label=""];
4->6 [style = bold, label=""];
1->6 [style = dashed, label="0"];
5->4 [style = bold, label=""];
2->3 [style = bold, label=""];
4->8 [style = dashed, label="0"];
6->2 [style = bold, label=""];
}
