digraph {
11 [style = filled, label = "when(metadata.getNodes()).thenReturn(Collections.singletonMap(UUID.fromString(\"11111111-1111-1111-1111-111111111111\"),node))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "mockSession['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Metadata metadata = mock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "when(session.getMetadata()).thenReturn(metadata)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "when(node.getCassandraVersion()).thenReturn(Version.parse(\"3.11.9\"))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "return session@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ensureKeyspaceMetadata_failsWhenKeyspaceMetadataIsNotNull['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "when(keyspaceMetadata.getTable(TABLE_SERVICE_REMOTE_SERVICES)).thenReturn(Optional.of(mock()))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "mockSession['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "when(session.getMetadata()).thenReturn(metadata)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "when(node.getCassandraVersion()).thenReturn(Version.parse(\"3.11.3\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Node node = mock()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "when(metadata.getNodes()).thenReturn(Collections.singletonMap(UUID.fromString(\"11111111-1111-1111-1111-111111111111\"),node))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThatThrownBy(null).isInstanceOf().hasMessageStartingWith(\"Cannot read keyspace metadata for keyspace\")@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "KeyspaceMetadata keyspaceMetadata = mock()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "CqlSession session = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(metadata.getKeyspace(\"zipkin2\")).thenReturn(Optional.of(keyspaceMetadata))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Node node = mock()@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13->7 [style = bold, label=""];
6->3 [style = solid, label="keyspaceMetadata"];
3->14 [style = dashed, label="0"];
9->0 [style = bold, label=""];
8->6 [style = bold, label=""];
13->14 [style = solid, label="node"];
5->10 [style = bold, label=""];
5->13 [style = bold, label=""];
4->2 [style = bold, label=""];
5->12 [style = solid, label="metadata"];
7->14 [style = bold, label=""];
10->12 [style = bold, label=""];
7->3 [style = bold, label=""];
2->16 [style = dashed, label="0"];
11->8 [style = bold, label=""];
15->16 [style = bold, label=""];
0->2 [style = solid, label="session"];
12->11 [style = bold, label=""];
0->5 [style = bold, label=""];
6->7 [style = bold, label=""];
10->11 [style = solid, label="node"];
14->15 [style = bold, label=""];
5->7 [style = solid, label="metadata"];
3->4 [style = bold, label=""];
17->0 [style = bold, label=""];
5->6 [style = bold, label=""];
1->0 [style = bold, label=""];
}
