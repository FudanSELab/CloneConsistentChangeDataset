digraph {
15 [style = filled, label = "Assert.assertEquals(\"foo\",list.get(2).getElement())@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "list = CamelJavaParserHelper.parseCamelProducerUris(method,true,false)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertFalse(result.isParsed(),\"Should be invalid\")@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "parse['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertEquals(1,list.size())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertEquals(\"direct:foo\",list.get(0).getElement())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method,true,false)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "JavaClassSource clazz = (JavaClassSource)Roaster.parse(new File(\"src/test/java/org/apache/camel/parser/java/MyRouteEmptyUriTest.java\"))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "LOG.info(\"Consumer: \" + result.getElement())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "parse['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "JavaClassSource clazz = (JavaClassSource)Roaster.parse(new File(\"src/test/java/org/apache/camel/parser/java/MyRouteDuplicateIdTest.java\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(\"direct:foo\",list.get(0).getElement())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "LOG.info(\"Producer: \" + result.getElement())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(1,list.size())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "Assert.assertFalse(\"Should be invalid\",result.isParsed())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(3,list.size())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(3,list.size())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "LOG.info(\"Route id: \" + result.getElement())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(\"foo\",list.get(0).getElement())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(\"bar\",list.get(1).getElement())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "list = CamelJavaParserHelper.parseCamelRouteIds(method)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "parse['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "MethodSource<JavaClassSource> method = CamelJavaParserHelper.findConfigureMethod(clazz)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->9 [style = bold, label=""];
22->0 [style = solid, label="clazz"];
2->20 [style = dashed, label="0"];
7->18 [style = dashed, label="0"];
3->1 [style = bold, label=""];
6->18 [style = bold, label=""];
0->2 [style = solid, label="method"];
1->3 [style = bold, label=""];
7->11 [style = dashed, label="0"];
14->17 [style = bold, label=""];
0->20 [style = solid, label="method"];
2->10 [style = bold, label=""];
12->1 [style = bold, label=""];
16->19 [style = bold, label=""];
11->2 [style = bold, label=""];
9->6 [style = bold, label=""];
0->9 [style = solid, label="method"];
8->0 [style = bold, label=""];
8->22 [style = dashed, label="0"];
5->1 [style = bold, label=""];
18->20 [style = bold, label=""];
22->0 [style = bold, label=""];
20->16 [style = bold, label=""];
19->14 [style = bold, label=""];
5->10 [style = dashed, label="0"];
3->12 [style = dashed, label="0"];
21->22 [style = bold, label=""];
7->2 [style = bold, label=""];
1->16 [style = dashed, label="0"];
6->11 [style = bold, label=""];
17->15 [style = bold, label=""];
1->12 [style = bold, label=""];
4->8 [style = bold, label=""];
13->8 [style = bold, label=""];
6->7 [style = bold, label=""];
10->1 [style = bold, label=""];
2->5 [style = bold, label=""];
8->0 [style = solid, label="clazz"];
}
