digraph {
21 [style = filled, label = "testHarness.setProcessingTime(3)@@@10@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),7000))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ReducingStateDescriptor<Tuple2<String,Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",new SumReducer(),inputType.createSerializer(new ExecutionConfig()))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testProcessingTimeTumblingWindows['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testHarness.close()@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),1000))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "expected.add(new Watermark(5000))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "testHarness.processWatermark(new Watermark(2000))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",3),5999))@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),7000))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "final int WINDOW_SIZE = 2@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "TypeInformation<Tuple2<String,Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),Long.MAX_VALUE))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "final int WINDOW_SIZE = 3@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testHarness.open()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,TimeWindow> operator = new WindowOperator<>(TumblingEventTimeWindows.of(Time.of(WINDOW_SIZE,TimeUnit.SECONDS)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String,TimeWindow,Tuple2<String,Integer>>()),EventTimeTrigger.create(),LATENESS)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "TestProcessingTimeService testTimeProvider = new TestProcessingTimeService()@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testHarness.setProcessingTime(5000)@@@16@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),7000))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),7000))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(operator,new ExecutionConfig(),testTimeProvider,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expected,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "testProcessingTimeTumblingWindows['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "testHarness.close()@@@27@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),7000))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testCleanupTimerWithEmptyReduceStateForTumblingWindows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "expected.add(new Watermark(1599))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",2),2999))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testHarness.setProcessingTime(7000)@@@23@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),7000))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testTimeProvider.setCurrentTime(7000)@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "final long LATENESS = 1@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "testHarness.processWatermark(new Watermark(1999))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "expected.add(new StreamRecord<>(new Tuple2<>(\"key2\",1),1999))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
45 [style = filled, label = "testHarness.processWatermark(new Watermark(5000))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "testHarness.open()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testTimeProvider.setCurrentTime(5000)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "TypeInformation<Tuple2<String,Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(operator,new ExecutionConfig(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "expected.add(new Watermark(1999))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),7000))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "testHarness.processWatermark(new Watermark(1599))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testHarness.close()@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",3),2999))@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
46 [style = filled, label = "expected.add(new Watermark(2000))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "ConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>()@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39->33 [style = solid, label="operator"];
13->10 [style = bold, label=""];
23->25 [style = bold, label=""];
34->39 [style = solid, label="LATENESS"];
4->14 [style = bold, label=""];
13->38 [style = solid, label="expected"];
23->16 [style = dashed, label="0"];
22->15 [style = bold, label=""];
48->41 [style = bold, label=""];
0->26 [style = bold, label=""];
0->39 [style = solid, label="stateDesc"];
16->27 [style = bold, label=""];
12->45 [style = dashed, label="0"];
37->49 [style = bold, label=""];
0->6 [style = bold, label=""];
11->1 [style = bold, label=""];
44->35 [style = bold, label=""];
19->20 [style = bold, label=""];
30->11 [style = solid, label="expectedOutput"];
12->17 [style = bold, label=""];
24->48 [style = dashed, label="0"];
6->9 [style = solid, label="testTimeProvider"];
38->36 [style = bold, label=""];
30->25 [style = solid, label="expectedOutput"];
42->48 [style = bold, label=""];
50->13 [style = bold, label=""];
16->23 [style = bold, label=""];
0->26 [style = solid, label="operator"];
0->39 [style = dashed, label="0"];
49->34 [style = bold, label=""];
15->16 [style = bold, label=""];
46->47 [style = bold, label=""];
47->38 [style = bold, label=""];
3->19 [style = solid, label="expectedOutput"];
8->7 [style = bold, label=""];
39->33 [style = bold, label=""];
2->0 [style = solid, label="stateDesc"];
26->30 [style = bold, label=""];
1->22 [style = bold, label=""];
43->40 [style = bold, label=""];
2->0 [style = bold, label=""];
17->24 [style = bold, label=""];
21->31 [style = bold, label=""];
12->29 [style = bold, label=""];
0->39 [style = bold, label=""];
8->0 [style = solid, label="WINDOW_SIZE"];
49->39 [style = solid, label="WINDOW_SIZE"];
34->2 [style = bold, label=""];
5->12 [style = bold, label=""];
30->3 [style = bold, label=""];
13->21 [style = dashed, label="0"];
31->10 [style = bold, label=""];
7->2 [style = bold, label=""];
24->11 [style = bold, label=""];
13->43 [style = bold, label=""];
8->49 [style = dashed, label="0"];
28->8 [style = bold, label=""];
14->44 [style = dashed, label="0"];
5->35 [style = dashed, label="0"];
25->19 [style = bold, label=""];
10->4 [style = bold, label=""];
35->45 [style = bold, label=""];
45->42 [style = bold, label=""];
9->3 [style = bold, label=""];
3->21 [style = bold, label=""];
33->32 [style = bold, label=""];
41->46 [style = bold, label=""];
10->43 [style = dashed, label="0"];
18->8 [style = bold, label=""];
17->12 [style = dashed, label="0"];
0->9 [style = solid, label="operator"];
6->9 [style = bold, label=""];
4->40 [style = dashed, label="0"];
29->24 [style = bold, label=""];
3->1 [style = solid, label="expectedOutput"];
27->25 [style = bold, label=""];
40->44 [style = bold, label=""];
21->13 [style = bold, label=""];
14->5 [style = bold, label=""];
32->50 [style = bold, label=""];
}
