digraph {
46 [style = filled, label = "EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET)@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "consumer.resume(Collections.singleton(TOPIC_PARTITION))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "expectConvertMessages(1)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "EasyMock.expectLastCall().andThrow(new WakeupException())@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "EasyMock.expectLastCall()@@@28@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "sinkTask.preCommit(offsets)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "sinkTask.close(new HashSet<>(partitions))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "workerTask.initialize(TASK_CONFIG)@@@39@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "sinkTask.open(partitions)@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte((,byte((>>(){@Override public ConsumerRecords<byte((,byte((> answer(){rebalanceListener.getValue().onPartitionsRevoked(partitions)rebalanceListener.getValue().onPartitionsAssigned(partitions)return ConsumerRecords.empty()}})@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expectPollInitialAssignment()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "EasyMock.expectLastCall()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "offsets.put(TOPIC_PARTITION,new OffsetAndMetadata(FIRST_OFFSET + 1))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
50 [style = filled, label = "workerTask.iteration()@@@43@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "consumer.resume(Collections.singleton(TOPIC_PARTITION2))@@@29@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "sinkTask.put(EasyMock.anyObject())@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
48 [style = filled, label = "final Map<TopicPartition,OffsetAndMetadata> offsets = new HashMap<>()@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "sinkTask.flush(EasyMock.anyObject())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "PowerMock.verifyAll()@@@44@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "consumer.commitSync(EasyMock.anyObject())@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testWakeupInCommitSyncCausesRetry['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "workerTask.iteration()@@@41@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "EasyMock.expectLastCall().andThrow(e)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "sinkTask.close(new HashSet<>(partitions))@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "final List<TopicPartition> partitions = asList(TOPIC_PARTITION,TOPIC_PARTITION2)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "EasyMock.expectLastCall()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET)@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "sinkTask.open(partitions)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "EasyMock.expectLastCall()@@@30@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "EasyMock.expectLastCall()@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "consumer.commitSync(EasyMock.anyObject())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "PowerMock.replayAll()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "expectInitializeTask()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EasyMock.expectLastCall()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "EasyMock.expectLastCall()@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
53 [style = filled, label = "expectRebalanceAssignmentError['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "final List<TopicPartition> partitions = asList(TOPIC_PARTITION,TOPIC_PARTITION2)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "workerTask.initializeAndStart()@@@40@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "consumer.resume(Collections.singleton(TOPIC_PARTITION))@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "expectConsumerPoll(1)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testWakeupInCommitSyncCausesRetry['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.expectLastCall()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "EasyMock.expectLastCall()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "EasyMock.expectLastCall().andReturn(offsets)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "consumer.commitSync(EasyMock.anyObject())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "EasyMock.expectLastCall()@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte((,byte((>>(){@Override public ConsumerRecords<byte((,byte((> answer(){rebalanceListener.getValue().onPartitionsRevoked(partitions)rebalanceListener.getValue().onPartitionsAssigned(partitions)return ConsumerRecords.empty()}})@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "consumer.resume(Collections.singleton(TOPIC_PARTITION2))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "offsets.put(TOPIC_PARTITION2,new OffsetAndMetadata(FIRST_OFFSET))@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
51 [style = filled, label = "RuntimeException e@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "workerTask.iteration()@@@42@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions))@@@26@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22->2 [style = bold, label=""];
28->30 [style = bold, label=""];
35->40 [style = bold, label=""];
32->13 [style = solid, label="partitions"];
38->47 [style = bold, label=""];
29->50 [style = bold, label=""];
15->32 [style = dashed, label="0"];
19->9 [style = bold, label=""];
26->13 [style = bold, label=""];
20->16 [style = bold, label=""];
41->33 [style = bold, label=""];
36->29 [style = bold, label=""];
3->23 [style = solid, label="partitions"];
51->11 [style = solid, label="e"];
53->51 [style = dotted, label="true"];
25->10 [style = bold, label=""];
4->27 [style = bold, label=""];
12->1 [style = bold, label=""];
52->8 [style = solid, label="partitions"];
30->11 [style = bold, label=""];
6->24 [style = bold, label=""];
0->8 [style = bold, label=""];
9->21 [style = bold, label=""];
42->13 [style = bold, label=""];
40->31 [style = bold, label=""];
54->3 [style = bold, label=""];
14->26 [style = bold, label=""];
27->20 [style = bold, label=""];
48->30 [style = solid, label="offsets"];
52->54 [style = bold, label=""];
13->18 [style = bold, label=""];
11->7 [style = bold, label=""];
2->3 [style = bold, label=""];
10->12 [style = bold, label=""];
3->23 [style = bold, label=""];
8->11 [style = bold, label=""];
52->54 [style = solid, label="partitions"];
48->37 [style = bold, label=""];
52->7 [style = solid, label="partitions"];
45->43 [style = bold, label=""];
46->38 [style = bold, label=""];
33->39 [style = bold, label=""];
3->21 [style = solid, label="partitions"];
32->41 [style = solid, label="partitions"];
23->5 [style = bold, label=""];
3->9 [style = solid, label="partitions"];
32->48 [style = bold, label=""];
32->38 [style = solid, label="partitions"];
43->36 [style = bold, label=""];
3->7 [style = solid, label="partitions"];
37->49 [style = bold, label=""];
17->22 [style = bold, label=""];
49->28 [style = bold, label=""];
39->46 [style = bold, label=""];
7->19 [style = bold, label=""];
15->32 [style = bold, label=""];
34->22 [style = bold, label=""];
24->14 [style = bold, label=""];
15->25 [style = bold, label=""];
31->15 [style = bold, label=""];
32->42 [style = solid, label="partitions"];
16->45 [style = bold, label=""];
21->6 [style = bold, label=""];
48->28 [style = solid, label="offsets"];
2->35 [style = bold, label=""];
19->11 [style = dashed, label="0"];
50->44 [style = bold, label=""];
9->41 [style = bold, label=""];
10->0 [style = bold, label=""];
18->4 [style = bold, label=""];
5->15 [style = bold, label=""];
1->0 [style = bold, label=""];
47->42 [style = bold, label=""];
53->52 [style = bold, label=""];
}
