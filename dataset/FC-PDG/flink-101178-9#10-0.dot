digraph {
3 [style = filled, label = "e.printStackTrace()@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "executeAndRunAssertions(env)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "env.setParallelism(4)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "sum += l@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "List<Long> resultCollection = new ArrayList<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Exception e@@@20@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(55,sum)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "List<Long> resultCollection = new ArrayList<Long>()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "env.generateSequence(1,10).rebalance().map(new FailingMapper2<Long>()).reduce(new ReduceFunction<Long>(){@Override public Long reduce(Long value1,Long value2){return value1 + value2}}).output(new LocalCollectionOutputFormat<Long>(resultCollection))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "fail(e.getMessage())@@@43@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "{ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()env.setParallelism(4)env.setRestartStrategy(RestartStrategies.noRestart())env.generateSequence(1,10).rebalance().map(new FailingMapper1<>()).reduce(null).output(new LocalCollectionOutputFormat<>(resultCollection))try {JobExecutionResult res = env.execute()String msg = res == null? \"null result\": \"result in \" + res.getNetRuntime() + \" ms\"fail(\"The program should have failed, but returned \" + msg)}catch (JobExecutionException e) }@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testFailedRunThenSuccessfulRun['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testRestart['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "{ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()env.setParallelism(4)env.setRestartStrategy(RestartStrategies.noRestart())env.generateSequence(1,10).rebalance().map(new FailingMapper1<Long>()).reduce(new ReduceFunction<Long>(){@Override public Long reduce(Long value1,Long value2){return value1 + value2}}).output(new LocalCollectionOutputFormat<Long>(resultCollection))executeAndRunAssertions(env)long sum = 0for (long l : resultCollection){sum += l}assertEquals(55,sum)}@@@23@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "long sum = 0@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "{FailingMapper1.failuresBeforeSuccess = 1}@@@31@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "{FailingMapper1.failuresBeforeSuccess = 1}@@@45@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "{FailingMapper2.failuresBeforeSuccess = 1}@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "fail(e.getMessage())@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testFailedRunThenSuccessfulRun['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "{ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()env.setParallelism(4)env.setRestartStrategy(RestartStrategies.noRestart())env.generateSequence(1,10).rebalance().map(new FailingMapper1<>()).reduce((ReduceFunction<Long>)null).output(new LocalCollectionOutputFormat<>(resultCollection))executeAndRunAssertions(env)long sum = 0for (long l : resultCollection){sum += l}assertEquals(55,sum)}@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4->10 [style = bold, label=""];
16->3 [style = bold, label=""];
7->17 [style = solid, label="resultCollection"];
20->17 [style = bold, label=""];
15->13 [style = bold, label=""];
13->19 [style = solid, label="sum"];
9->4 [style = bold, label=""];
0->2 [style = bold, label=""];
12->15 [style = bold, label=""];
7->0 [style = solid, label="resultCollection"];
7->4 [style = bold, label=""];
5->14 [style = bold, label=""];
11->9 [style = bold, label=""];
16->3 [style = dotted, label="true"];
4->0 [style = bold, label=""];
21->12 [style = solid, label="env"];
5->1 [style = bold, label=""];
3->5 [style = bold, label=""];
17->12 [style = bold, label=""];
13->19 [style = bold, label=""];
3->5 [style = dotted, label="true"];
21->20 [style = bold, label=""];
19->14 [style = bold, label=""];
10->8 [style = bold, label=""];
7->9 [style = dashed, label="0"];
9->4 [style = solid, label="resultCollection"];
9->10 [style = solid, label="resultCollection"];
4->10 [style = solid, label="env"];
16->5 [style = dotted, label="true"];
7->21 [style = bold, label=""];
1->2 [style = bold, label=""];
6->7 [style = bold, label=""];
18->7 [style = bold, label=""];
3->1 [style = dotted, label="true"];
4->0 [style = solid, label="env"];
7->4 [style = solid, label="resultCollection"];
}
