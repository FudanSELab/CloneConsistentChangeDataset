digraph {
19 [style = filled, label = "action.run()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "context(i(.getNode().equals(\"node2\")@@@51@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "i < results.length()@@@42@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action = new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId,logger,discoveryNodes,dummyListener(),null,request,null){@Override protected void executeInitialPhase(Transport.Connection connection,InternalScrollSearchRequest internalRequest,SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener){try {assertNotEquals(\"node2 is not available\",\"node2\",connection.getNode().getId())}catch (NullPointerException e) new Thread(null).start()}@Override protected Transport.Connection getConnection(String clusterAlias,DiscoveryNode node){return new SearchAsyncActionTests.MockConnection(node)}@Override protected SearchPhase moveToNextPhase(BiFunction<String,String,DiscoveryNode> clusterNodeLookup){assertEquals(1,movedCounter.incrementAndGet())return new SearchPhase(\"test\"){@Override public void run(){latch.countDown()}}}@Override protected void onFirstPhaseResult(int shardId,SearchAsyncActionTests.TestSearchPhaseResult result){results.setOnce(shardId,result)}}@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "latch.await()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(context(i(.getScrollId(),results.get(i).getRequestId())@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "SearchScrollRequest request = new SearchScrollRequest()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testSendRequestsToNodes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "request.scroll(new Scroll(TimeValue.timeValueMinutes(1)))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(context(i(.getContextId(),results.get(i).getContextId())@@@56@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testNodeNotAvailable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertNull(results.get(i))@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(1,shardSearchFailures.length)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "i++@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "CountDownLatch latch = new CountDownLatch(1)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "ScrollIdForNode(( context = scrollId.getContext()@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(context(i(.getNode(),results.get(i).node.getId())@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testNodeNotAvailable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "ShardSearchFailure(( shardSearchFailures = action.buildShardFailures()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "ParsedScrollId scrollId = getParsedScrollId(new ScrollIdForNode(null,\"node1\",new SearchContextId(\"\",1)),new ScrollIdForNode(null,\"node2\",new SearchContextId(\"\",2)),new ScrollIdForNode(null,\"node3\",new SearchContextId(\"\",17)),new ScrollIdForNode(null,\"node1\",new SearchContextId(\"\",0)),new ScrollIdForNode(null,\"node3\",new SearchContextId(\"\",0)))@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertThat(shardSearchFailures(0(.reason(),startsWith(\"java.lang.IllegalStateException: node (node2( is not available\"))@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action = new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId,logger,discoveryNodes,dummyListener(),null,request,null){@Override protected void executeInitialPhase(Transport.Connection connection,InternalScrollSearchRequest internalRequest,SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener){new Thread(null).start()}@Override protected Transport.Connection getConnection(String clusterAlias,DiscoveryNode node){return new SearchAsyncActionTests.MockConnection(node)}@Override protected SearchPhase moveToNextPhase(BiFunction<String,String,DiscoveryNode> clusterNodeLookup){assertEquals(1,movedCounter.incrementAndGet())return new SearchPhase(\"test\"){@Override public void run(){latch.countDown()}}}@Override protected void onFirstPhaseResult(int shardId,SearchAsyncActionTests.TestSearchPhaseResult result){results.setOnce(shardId,result)}}@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "DiscoveryNodes discoveryNodes = DiscoveryNodes.builder().add(new DiscoveryNode(\"node1\",buildNewFakeTransportAddress(),Version.CURRENT)).add(new DiscoveryNode(\"node2\",buildNewFakeTransportAddress(),Version.CURRENT)).add(new DiscoveryNode(\"node3\",buildNewFakeTransportAddress(),Version.CURRENT)).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(0,shardSearchFailures.length)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "DiscoveryNodes discoveryNodes = DiscoveryNodes.builder().add(new DiscoveryNode(\"node1\",buildNewFakeTransportAddress(),Version.CURRENT)).add(new DiscoveryNode(\"node3\",buildNewFakeTransportAddress(),Version.CURRENT)).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "AtomicInteger movedCounter = new AtomicInteger(0)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ParsedScrollId scrollId = getParsedScrollId(new ScrollIdForNode(null,\"node1\",1),new ScrollIdForNode(null,\"node2\",2),new ScrollIdForNode(null,\"node3\",17),new ScrollIdForNode(null,\"node1\",0),new ScrollIdForNode(null,\"node3\",0))@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "int i = 0@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertNotNull(results.get(i))@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(context(i(.getNode(),results.get(i).node.getId())@@@46@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20->3 [style = dotted, label="true"];
9->16 [style = dotted, label="false"];
23->25 [style = bold, label=""];
2->20 [style = solid, label="i"];
14->3 [style = bold, label=""];
29->8 [style = bold, label=""];
20->7 [style = bold, label=""];
17->21 [style = bold, label=""];
4->28 [style = dashed, label="0"];
2->7 [style = bold, label=""];
6->26 [style = bold, label=""];
1->28 [style = bold, label=""];
0->29 [style = bold, label=""];
7->13 [style = solid, label="i"];
27->0 [style = bold, label=""];
9->13 [style = bold, label=""];
30->2 [style = bold, label=""];
9->13 [style = dotted, label="true"];
3->20 [style = solid, label="i"];
28->19 [style = bold, label=""];
18->28 [style = solid, label="request"];
11->4 [style = solid, label="discoveryNodes"];
7->3 [style = solid, label="i"];
22->15 [style = bold, label=""];
9->5 [style = dotted, label="false"];
6->22 [style = bold, label=""];
7->20 [style = bold, label=""];
29->28 [style = solid, label="discoveryNodes"];
0->11 [style = bold, label=""];
3->5 [style = bold, label=""];
15->2 [style = bold, label=""];
3->20 [style = bold, label=""];
20->7 [style = solid, label="i"];
0->28 [style = solid, label="scrollId"];
25->11 [style = bold, label=""];
7->5 [style = dotted, label="true"];
7->3 [style = bold, label=""];
8->18 [style = bold, label=""];
0->25 [style = dashed, label="0"];
11->29 [style = dashed, label="0"];
18->4 [style = solid, label="request"];
7->20 [style = solid, label="i"];
25->4 [style = solid, label="scrollId"];
9->14 [style = dotted, label="false"];
4->19 [style = bold, label=""];
20->3 [style = solid, label="i"];
5->24 [style = bold, label=""];
11->8 [style = bold, label=""];
2->7 [style = solid, label="i"];
3->5 [style = solid, label="i"];
16->14 [style = bold, label=""];
3->13 [style = solid, label="i"];
2->3 [style = solid, label="i"];
0->4 [style = solid, label="scrollId"];
16->24 [style = dashed, label="0"];
1->4 [style = bold, label=""];
13->3 [style = bold, label=""];
16->20 [style = bold, label=""];
18->17 [style = bold, label=""];
22->26 [style = dashed, label="0"];
21->1 [style = bold, label=""];
20->9 [style = bold, label=""];
20->9 [style = dotted, label="true"];
24->14 [style = bold, label=""];
7->3 [style = dotted, label="true"];
26->30 [style = bold, label=""];
19->12 [style = bold, label=""];
9->5 [style = bold, label=""];
7->20 [style = dotted, label="true"];
7->16 [style = dotted, label="true"];
5->16 [style = bold, label=""];
7->5 [style = solid, label="i"];
10->0 [style = bold, label=""];
12->6 [style = bold, label=""];
9->24 [style = dotted, label="false"];
}
