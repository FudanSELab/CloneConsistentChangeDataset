digraph {
19 [style = filled, label = "Assert.assertEquals(2,copy.getMaxRowsPerSegment().intValue())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(true,copy.isReportParseExceptions())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(10L,copy.getMaxTotalRows().longValue())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "KafkaIndexTaskTuningConfig copy = (KafkaIndexTaskTuningConfig)original.convertToTaskTuningConfig()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "KafkaSupervisorTuningConfig original = new KafkaSupervisorTuningConfig(1,null,2,10L,new Period(\"PT3S\"),new File(\"/tmp/xxx\"),4,new IndexSpec(),new IndexSpec(),true,true,5L,null,null,null,null,null,null,null,null,null,null,null,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(new IndexSpec(),copy.getIndexSpec())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "KinesisSupervisorTuningConfig original = new KinesisSupervisorTuningConfig(1,(long)3,2,100L,new Period(\"PT3S\"),new File(\"/tmp/xxx\"),4,new IndexSpec(),new IndexSpec(),true,true,5L,true,false,null,null,null,null,null,null,1000,500,500,6000,2,null,null,null,null,null,null)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assert.assertEquals(1000,copy.getRecordBufferSize())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(new Period().withDays(Integer.MAX_VALUE),copy.getIntermediateHandoffPeriod())@@@24@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(100,copy.getMaxRecordsPerPoll())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertFalse(copy.isSkipSequenceNumberAvailabilityCheck())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertTrue(copy.isReportParseExceptions())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "KinesisSupervisorTuningConfig original = new KinesisSupervisorTuningConfig(1,(long)3,2,100L,new Period(\"PT3S\"),new File(\"/tmp/xxx\"),4,new IndexSpec(),new IndexSpec(),true,true,5L,true,false,null,null,null,null,null,null,1000,500,500,6000,2,null,null,null,null,null)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(100L,(long)copy.getMaxTotalRows())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(5L,copy.getHandoffConditionTimeout())@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(new Period(\"PT3S\"),copy.getIntermediatePersistPeriod())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "KinesisIndexTaskTuningConfig copy = (KinesisIndexTaskTuningConfig)original.convertToTaskTuningConfig()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertNotEquals(null,copy.getMaxTotalRows())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertTrue(copy.isResetOffsetAutomatically())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(3,copy.getMaxBytesInMemory())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testConvert['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(4,copy.getMaxPendingPersists())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(5L,copy.getHandoffConditionTimeout())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(500,copy.getRecordBufferFullWait())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(new Period(\"PT3S\"),copy.getIntermediatePersistPeriod())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(500,copy.getRecordBufferOfferTimeout())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(1,copy.getMaxRowsInMemory())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(6000,copy.getFetchSequenceNumberTimeout())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testConvert['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(2,(int)copy.getFetchThreads())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testConvert['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Assert.assertEquals(new File(\"/tmp/xxx\"),copy.getBasePersistDirectory())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24->12 [style = bold, label=""];
15->10 [style = bold, label=""];
16->0 [style = bold, label=""];
9->24 [style = dashed, label="0"];
11->1 [style = bold, label=""];
27->30 [style = bold, label=""];
29->31 [style = bold, label=""];
22->9 [style = bold, label=""];
18->19 [style = bold, label=""];
20->14 [style = bold, label=""];
20->25 [style = bold, label=""];
21->2 [style = bold, label=""];
3->18 [style = bold, label=""];
7->27 [style = dashed, label="0"];
5->16 [style = bold, label=""];
13->17 [style = bold, label=""];
23->24 [style = bold, label=""];
9->31 [style = dashed, label="0"];
3->19 [style = bold, label=""];
20->25 [style = dashed, label="0"];
0->4 [style = bold, label=""];
1->21 [style = bold, label=""];
12->28 [style = dashed, label="0"];
19->27 [style = bold, label=""];
6->8 [style = bold, label=""];
7->6 [style = bold, label=""];
25->26 [style = bold, label=""];
14->15 [style = bold, label=""];
12->3 [style = bold, label=""];
9->12 [style = bold, label=""];
31->28 [style = bold, label=""];
28->3 [style = bold, label=""];
30->8 [style = bold, label=""];
19->7 [style = bold, label=""];
8->13 [style = bold, label=""];
2->5 [style = bold, label=""];
17->20 [style = bold, label=""];
10->11 [style = bold, label=""];
}
