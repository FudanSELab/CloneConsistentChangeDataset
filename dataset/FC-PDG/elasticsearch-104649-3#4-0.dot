digraph {
17 [style = filled, label = "assertThat(aliasFilter(indexMetadata,\"cats\",\"all\"),nullValue())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "indexMetadata = add(indexMetadata,\"cats\",filter(termQuery(\"animal\",\"feline\")))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "indexMetaData = add(indexMetaData,\"cats\",filter(termQuery(\"animal\",\"cat\")))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testUnknownAliasFilter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertThat(indexMetadata.getAliases().containsKey(\"dogs\"),equalTo(true))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "testFilteringAliases['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertThat(aliasFilter(indexMetaData,\"all\"),nullValue())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertThat(aliasFilter(indexMetaData,\"all\",\"cats\"),nullValue())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertThat(indexMetaData.getAliases().containsKey(\"cats\"),equalTo(true))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "indexMetadata = add(indexMetadata,\"dogs\",filter(termQuery(\"animal\",\"dog\")))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertEquals(aliasFilter(indexMetadata,\"cats\"),QueryBuilders.termQuery(\"animal\",\"cat\"))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertEquals(aliasFilter(indexMetadata,\"cats\",\"dogs\"),QueryBuilders.boolQuery().should(QueryBuilders.termQuery(\"animal\",\"cat\")).should(QueryBuilders.termQuery(\"animal\",\"dog\")))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertThat(indexMetaData.getAliases().containsKey(\"turtles\"),equalTo(false))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertThat(indexMetaData.getAliases().containsKey(\"dogs\"),equalTo(true))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "indexMetaData = add(indexMetaData,\"dogs\",filter(termQuery(\"animal\",\"canine\")))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "indexMetaData = add(indexMetaData,\"dogs\",filter(termQuery(\"animal\",\"dog\")))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(aliasFilter(indexMetaData,\"cats\"),QueryBuilders.termQuery(\"animal\",\"cat\"))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "indexMetadata = add(indexMetadata,\"dogs\",filter(termQuery(\"animal\",\"canine\")))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "IndexMetadata indexMetadata = baseMetadata@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertThat(aliasFilter(indexMetaData,\"cats\",\"all\"),nullValue())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "indexMetadata = add(indexMetadata,\"cats\",filter(termQuery(\"animal\",\"cat\")))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "indexMetaData = add(indexMetaData,\"all\",null)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "indexMetaData = add(indexMetaData,\"cats\",filter(termQuery(\"animal\",\"feline\")))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "testFilteringAliases['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(aliasFilter(indexMetadata,\"all\"),nullValue())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(aliasFilter(indexMetaData,\"dogs\",\"cats\"),QueryBuilders.boolQuery().should(QueryBuilders.termQuery(\"animal\",\"canine\")).should(QueryBuilders.termQuery(\"animal\",\"feline\")))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertThat(indexMetadata.getAliases().containsKey(\"cats\"),equalTo(true))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertEquals(aliasFilter(indexMetaData,\"cats\",\"dogs\"),QueryBuilders.boolQuery().should(QueryBuilders.termQuery(\"animal\",\"cat\")).should(QueryBuilders.termQuery(\"animal\",\"dog\")))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "IndexMetaData indexMetaData = baseMetaData@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "IndexMetaData finalIndexMetadata = indexMetaData@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "expectThrows(,null)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(aliasFilter(indexMetadata,\"dogs\",\"cats\"),QueryBuilders.boolQuery().should(QueryBuilders.termQuery(\"animal\",\"canine\")).should(QueryBuilders.termQuery(\"animal\",\"feline\")))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "indexMetadata = add(indexMetadata,\"all\",null)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertThat(indexMetadata.getAliases().containsKey(\"turtles\"),equalTo(false))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertThat(aliasFilter(indexMetadata,\"all\",\"cats\"),nullValue())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14->11 [style = solid, label="indexMetaData"];
14->0 [style = solid, label="indexMetaData"];
14->1 [style = solid, label="indexMetaData"];
2->14 [style = solid, label="indexMetaData"];
3->30 [style = dashed, label="0"];
33->3 [style = bold, label=""];
5->9 [style = bold, label=""];
20->29 [style = solid, label="indexMetadata"];
14->34 [style = dashed, label="0"];
0->6 [style = bold, label=""];
20->19 [style = solid, label="indexMetadata"];
10->19 [style = dashed, label="0"];
3->7 [style = solid, label="indexMetaData"];
8->3 [style = bold, label=""];
25->21 [style = solid, label="indexMetadata"];
2->34 [style = bold, label=""];
16->26 [style = bold, label=""];
15->18 [style = dashed, label="0"];
1->29 [style = dashed, label="0"];
14->20 [style = dashed, label="0"];
30->25 [style = bold, label=""];
19->17 [style = bold, label=""];
20->17 [style = solid, label="indexMetadata"];
4->26 [style = dashed, label="0"];
12->13 [style = solid, label="indexMetaData"];
0->17 [style = dashed, label="0"];
22->23 [style = bold, label=""];
9->23 [style = dashed, label="0"];
1->11 [style = bold, label=""];
20->22 [style = bold, label=""];
20->27 [style = solid, label="indexMetadata"];
12->13 [style = bold, label=""];
29->27 [style = bold, label=""];
7->2 [style = solid, label="indexMetaData"];
18->29 [style = bold, label=""];
20->28 [style = solid, label="indexMetadata"];
17->28 [style = bold, label=""];
24->16 [style = bold, label=""];
14->6 [style = solid, label="indexMetaData"];
21->20 [style = bold, label=""];
6->28 [style = dashed, label="0"];
3->7 [style = bold, label=""];
14->10 [style = solid, label="indexMetaData"];
15->1 [style = bold, label=""];
11->10 [style = bold, label=""];
13->4 [style = solid, label="indexMetaData"];
7->2 [style = bold, label=""];
9->15 [style = bold, label=""];
2->21 [style = dashed, label="0"];
12->24 [style = dashed, label="0"];
2->14 [style = bold, label=""];
10->0 [style = bold, label=""];
31->30 [style = bold, label=""];
13->16 [style = dashed, label="0"];
16->26 [style = solid, label="indexMetadata"];
7->25 [style = dashed, label="0"];
28->24 [style = bold, label=""];
2->34 [style = solid, label="indexMetaData"];
34->32 [style = bold, label=""];
5->22 [style = dashed, label="0"];
27->19 [style = bold, label=""];
11->27 [style = dashed, label="0"];
20->24 [style = solid, label="indexMetadata"];
30->25 [style = solid, label="indexMetadata"];
13->4 [style = bold, label=""];
25->21 [style = bold, label=""];
23->18 [style = bold, label=""];
14->12 [style = solid, label="indexMetaData"];
24->16 [style = solid, label="indexMetadata"];
14->5 [style = bold, label=""];
21->20 [style = solid, label="indexMetadata"];
6->12 [style = bold, label=""];
}
