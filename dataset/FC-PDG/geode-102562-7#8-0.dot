digraph {
7 [style = filled, label = "byte(( netBytes = new byte((((@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "unwrappedBuffer.flip()@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(unwrappedBuffer.remaining()).isEqualTo(0)@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "wrappedData.flip()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "unwrapWithBufferUnderflow['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Arrays.fill(netBytes,(byte)0x1F)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "unwrapWithBufferUnderflow['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ByteBuffer unwrappedBuffer = sharedBuffer.getBuffer()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "unwrappedBuffer.flip()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ByteBuffer wrappedData = ByteBuffer.allocate(nioSslEngine.peerAppData.capacity())@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testEngine.addReturnResult(new SSLEngineResult(CLOSED,FINISHED,0,0))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "wrappedData.put(netBytes)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(wrappedData.position()).isEqualTo(netBytes.length)@@@17@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "unwrapWithDecryptionError['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThatThrownBy(null).isInstanceOf().hasMessageContaining(\"Error decrypting data\")@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(unwrappedBuffer.remaining()).isEqualTo(0)@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ByteBuffer wrappedData = ByteBuffer.allocate(inputSharing.getBuffer().capacity())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18->3 [style = bold, label=""];
12->10 [style = solid, label="testEngine"];
2->20 [style = bold, label=""];
7->11 [style = bold, label=""];
10->15 [style = bold, label=""];
3->10 [style = solid, label="wrappedData"];
9->4 [style = bold, label=""];
11->6 [style = bold, label=""];
1->3 [style = bold, label=""];
6->0 [style = bold, label=""];
19->2 [style = bold, label=""];
2->10 [style = bold, label=""];
7->6 [style = solid, label="netBytes"];
5->19 [style = bold, label=""];
13->17 [style = bold, label=""];
12->2 [style = bold, label=""];
12->19 [style = dashed, label="0"];
3->7 [style = bold, label=""];
5->12 [style = bold, label=""];
4->8 [style = bold, label=""];
16->14 [style = bold, label=""];
10->20 [style = dashed, label="0"];
11->6 [style = solid, label="netBytes"];
10->9 [style = bold, label=""];
11->0 [style = solid, label="netBytes"];
14->11 [style = bold, label=""];
5->2 [style = solid, label="testEngine"];
15->8 [style = bold, label=""];
8->13 [style = bold, label=""];
0->5 [style = bold, label=""];
7->11 [style = solid, label="netBytes"];
}
