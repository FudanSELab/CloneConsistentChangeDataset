digraph {
20 [style = filled, label = "inOrder.verify(observer,times(1)).onNext(\"onSuccessOnly\")@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "schedulingNotificationHandler['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Observer<String> observer = TestHelper.mockObserver()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Flowable<String> origin = Flowable.unsafeCreate(new FuncWithErrors(numRetries))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TestSubscriber<String> ts = new TestSubscriber<>(subscriber)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "ts.awaitDone(5,TimeUnit.SECONDS)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "InOrder inOrder = inOrder(subscriber)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "int numRetries = 2@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "TestSubscriber<String> ts = new TestSubscriber<String>(subscriber)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "inOrder.verifyNoMoreInteractions()@@@29@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "origin.retryWhen(new Function<Observable<? extends Throwable>,Observable<Object>>(){@Override public Observable<Object> apply(Observable<? extends Throwable> t1){return t1.observeOn(Schedulers.computation()).map(new Function<Throwable,Object>(){@Override public Object apply(Throwable t1){return 1}}).startWithItem(1)}}).doOnError(new Consumer<Throwable>(){@Override public void accept(Throwable e){e.printStackTrace()}}).subscribe(to)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "TestObserver<String> to = new TestObserver<String>(observer)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "inOrder.verify(observer,times(1)).onComplete()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "inOrder.verify(subscriber,times(1 + numRetries)).onNext(\"beginningEveryTime\")@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "inOrder.verify(subscriber,times(1)).onNext(\"onSuccessOnly\")@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Observable<String> origin = Observable.unsafeCreate(new FuncWithErrors(numRetries))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "origin.retryWhen(new Function<Flowable<? extends Throwable>,Flowable<Object>>(){@Override public Flowable<Object> apply(Flowable<? extends Throwable> t1){return t1.observeOn(Schedulers.computation()).map(new Function<Throwable,Integer>(){@Override public Integer apply(Throwable t1){return 1}}).startWithItem(1).cast()}}).doOnError(new Consumer<Throwable>(){@Override public void accept(Throwable e){e.printStackTrace()}}).subscribe(ts)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "InOrder inOrder = inOrder(observer)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "inOrder.verify(subscriber,times(1)).onComplete()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "to.awaitDone(5,TimeUnit.SECONDS)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "schedulingNotificationHandler['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "schedulingNotificationHandler['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "inOrder.verify(subscriber,never()).onError(any())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Subscriber<String> subscriber = TestHelper.mockSubscriber()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "inOrder.verify(observer,never()).onError(any())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "inOrder.verify(observer,times(1 + numRetries)).onNext(\"beginningEveryTime\")@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
14->0 [style = solid, label="ts"];
6->21 [style = dashed, label="0"];
1->4 [style = bold, label=""];
23->20 [style = bold, label=""];
15->10 [style = bold, label=""];
4->17 [style = dashed, label="0"];
11->1 [style = bold, label=""];
0->6 [style = bold, label=""];
11->18 [style = solid, label="numRetries"];
0->16 [style = dashed, label="0"];
3->11 [style = bold, label=""];
8->20 [style = dashed, label="0"];
18->17 [style = bold, label=""];
19->11 [style = bold, label=""];
21->24 [style = bold, label=""];
3->2 [style = solid, label="subscriber"];
1->18 [style = dashed, label="0"];
9->8 [style = bold, label=""];
24->22 [style = bold, label=""];
22->23 [style = bold, label=""];
9->23 [style = dashed, label="0"];
17->16 [style = solid, label="to"];
11->18 [style = bold, label=""];
4->0 [style = bold, label=""];
3->19 [style = dashed, label="0"];
6->2 [style = bold, label=""];
3->4 [style = solid, label="subscriber"];
7->9 [style = bold, label=""];
4->0 [style = solid, label="ts"];
19->24 [style = solid, label="observer"];
12->10 [style = bold, label=""];
14->0 [style = bold, label=""];
13->3 [style = bold, label=""];
11->1 [style = solid, label="numRetries"];
19->17 [style = solid, label="observer"];
16->21 [style = bold, label=""];
3->14 [style = solid, label="subscriber"];
25->19 [style = bold, label=""];
12->15 [style = dashed, label="0"];
1->14 [style = bold, label=""];
4->14 [style = dashed, label="0"];
2->7 [style = bold, label=""];
2->24 [style = dashed, label="0"];
20->15 [style = bold, label=""];
7->22 [style = dashed, label="0"];
8->12 [style = bold, label=""];
17->16 [style = bold, label=""];
}
