digraph {
7 [style = filled, label = "final String response = doPostRaw(new SqlQuery(query,ResultFormat.ARRAYLINES,false,null)).rhs@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "final String nullStr = NullHandling.replaceWithDefault()? \"\": null@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(Arrays.asList(\"2000-01-01T00:00:00.000Z\",1,\"\",\"a\",\"(\"a\",\"b\"(\",1.0,1.0,\"org.apache.druid.hll.VersionOneHyperLogLogCollector\",nullStr),JSON_MAPPER.readValue(lines.get(0),))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final String query = \"SELECT *, CASE dim2 WHEN '' THEN dim2 END FROM foo LIMIT 2\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(Arrays.asList(\"2000-01-02T00:00:00.000Z\",1,\"10.1\",nullStr,\"(\"b\",\"c\"(\",2.0,2.0,\"org.apache.druid.hll.VersionOneHyperLogLogCollector\",nullStr),JSON_MAPPER.readValue(lines.get(2),))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(4,lines.size())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testArrayLinesResultFormat['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "Assert.assertEquals(\"\",lines.get(4))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(Arrays.asList(\"__time\",\"cnt\",\"dim1\",\"dim2\",\"dim3\",\"m1\",\"m2\",\"unique_dim1\",\"EXPR$8\"),JSON_MAPPER.readValue(lines.get(0),))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(5,lines.size())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testArrayLinesResultFormat['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(Arrays.asList(\"2000-01-01T00:00:00.000Z\",1,\"\",\"a\",\"(\"a\",\"b\"(\",1.0,1.0,\"org.apache.druid.hll.VersionOneHyperLogLogCollector\",nullStr),JSON_MAPPER.readValue(lines.get(1),))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(Arrays.asList(\"2000-01-02T00:00:00.000Z\",1,\"10.1\",nullStr,\"(\"b\",\"c\"(\",2.0,2.0,\"org.apache.druid.hll.VersionOneHyperLogLogCollector\",nullStr),JSON_MAPPER.readValue(lines.get(1),))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final String response = doPostRaw(new SqlQuery(query,ResultFormat.ARRAYLINES,true,null)).rhs@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(\"\",lines.get(2))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testArrayLinesResultFormatWithHeader['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final String response = doPostRaw(new SqlQuery(query,ResultFormat.ARRAYLINES,false,null,null)).rhs@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Assert.assertEquals(\"\",lines.get(3))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final List<String> lines = Splitter.on('').splitToList(response)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->17 [style = bold, label=""];
0->3 [style = bold, label=""];
4->9 [style = bold, label=""];
14->16 [style = bold, label=""];
5->8 [style = bold, label=""];
16->15 [style = bold, label=""];
7->1 [style = bold, label=""];
4->16 [style = dashed, label="0"];
11->1 [style = bold, label=""];
6->18 [style = bold, label=""];
3->11 [style = bold, label=""];
7->11 [style = dashed, label="0"];
7->2 [style = solid, label="response"];
10->3 [style = bold, label=""];
15->6 [style = bold, label=""];
8->14 [style = dashed, label="0"];
3->11 [style = solid, label="query"];
13->2 [style = solid, label="response"];
13->1 [style = bold, label=""];
9->6 [style = bold, label=""];
3->13 [style = solid, label="query"];
11->2 [style = solid, label="response"];
5->17 [style = dashed, label="0"];
3->7 [style = bold, label=""];
9->15 [style = dashed, label="0"];
17->14 [style = bold, label=""];
7->13 [style = dashed, label="0"];
3->13 [style = bold, label=""];
1->2 [style = bold, label=""];
12->3 [style = bold, label=""];
8->4 [style = bold, label=""];
3->7 [style = solid, label="query"];
2->5 [style = bold, label=""];
}
