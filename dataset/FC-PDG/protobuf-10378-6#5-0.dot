digraph {
11 [style = filled, label = "assertReadLittleEndian32['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertEquals(1,rawInput.available())@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertDataConsumed(inputType.name(),data,input)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertDataConsumed(inputType.name(),data,input)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(inputType.name(),value,input.readRawLittleEndian32())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertTrue(inputType.name(),input.isAtEnd())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "int value@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertEquals((int)value,CodedInputStream.readRawVarint32(rawInput))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertDataConsumed(inputType.name(),data,input)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "byte(( longerData = new byte((((@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "input = inputType.newDecoder(data,blockSize)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "System.arraycopy(data,0,longerData,0,data.length)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "byte(( data@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertWithMessage(inputType.name()).that(input.readRawLittleEndian32()).isEqualTo(value)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "long value@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(inputType.name(),value,input.readRawVarint64SlowPath())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "byte(( data@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "int blockSize = 1@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertDataConsumed(inputType.name(),data,input)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertTrue(inputType.name(),input.skipField(WireFormat.WIRETYPE_VARINT))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(inputType.name(),value,input.readRawVarint64())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "blockSize *= 2@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "CodedInputStream input = inputType.newDecoder(data,blockSize)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "byte(( data@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "blockSize <= 16@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertReadVarint['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "input = inputType.newDecoder(data,blockSize)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(inputType.name(),(int)value,input.readRawVarint32())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertWithMessage(inputType.name()).that(input.isAtEnd()).isTrue()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "InputStream rawInput = new ByteArrayInputStream(longerData)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "input = inputType.newDecoder(data,blockSize)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertReadLittleEndian32['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14->24 [style = bold, label=""];
9->10 [style = solid, label="value"];
23->18 [style = solid, label="data"];
18->30 [style = solid, label="input"];
27->25 [style = solid, label="longerData"];
4->18 [style = solid, label="blockSize"];
21->26 [style = bold, label=""];
31->21 [style = solid, label="value"];
10->12 [style = bold, label=""];
23->26 [style = solid, label="data"];
26->28 [style = bold, label=""];
7->1 [style = dotted, label="true"];
27->25 [style = bold, label=""];
16->3 [style = bold, label=""];
23->13 [style = solid, label="data"];
1->4 [style = bold, label=""];
7->10 [style = dotted, label="true"];
27->20 [style = solid, label="longerData"];
7->13 [style = dotted, label="true"];
18->15 [style = bold, label=""];
6->2 [style = solid, label="data"];
6->31 [style = dashed, label="0"];
0->10 [style = dashed, label="0"];
7->12 [style = dotted, label="true"];
23->2 [style = solid, label="data"];
7->29 [style = dotted, label="true"];
23->14 [style = solid, label="data"];
3->24 [style = solid, label="blockSize"];
3->7 [style = bold, label=""];
2->21 [style = bold, label=""];
3->18 [style = solid, label="blockSize"];
7->2 [style = bold, label=""];
23->28 [style = solid, label="data"];
22->14 [style = bold, label=""];
23->24 [style = solid, label="data"];
20->19 [style = bold, label=""];
7->21 [style = dotted, label="true"];
7->22 [style = dotted, label="true"];
31->19 [style = solid, label="value"];
31->22 [style = solid, label="value"];
13->18 [style = bold, label=""];
20->19 [style = solid, label="rawInput"];
7->2 [style = dotted, label="true"];
1->26 [style = dashed, label="0"];
23->25 [style = solid, label="data"];
8->3 [style = bold, label=""];
7->26 [style = dotted, label="true"];
11->9 [style = dotted, label="true"];
19->17 [style = bold, label=""];
7->0 [style = dotted, label="true"];
2->10 [style = bold, label=""];
3->2 [style = solid, label="blockSize"];
7->15 [style = dotted, label="true"];
4->7 [style = bold, label=""];
29->13 [style = bold, label=""];
2->26 [style = solid, label="input"];
25->20 [style = bold, label=""];
2->0 [style = bold, label=""];
8->6 [style = dotted, label="true"];
11->3 [style = bold, label=""];
11->6 [style = dotted, label="true"];
0->1 [style = bold, label=""];
7->18 [style = dotted, label="true"];
31->29 [style = solid, label="value"];
28->14 [style = solid, label="input"];
3->28 [style = solid, label="blockSize"];
16->31 [style = dotted, label="true"];
7->28 [style = dotted, label="true"];
28->22 [style = bold, label=""];
4->2 [style = solid, label="blockSize"];
4->7 [style = solid, label="blockSize"];
23->30 [style = solid, label="data"];
4->28 [style = solid, label="blockSize"];
24->13 [style = solid, label="input"];
24->29 [style = bold, label=""];
15->30 [style = bold, label=""];
7->24 [style = dotted, label="true"];
16->23 [style = dotted, label="true"];
5->2 [style = solid, label="data"];
7->3 [style = bold, label=""];
3->7 [style = solid, label="blockSize"];
1->12 [style = dashed, label="0"];
6->0 [style = solid, label="value"];
12->4 [style = bold, label=""];
8->5 [style = dotted, label="true"];
0->21 [style = dashed, label="0"];
30->4 [style = bold, label=""];
7->4 [style = dotted, label="true"];
7->27 [style = bold, label=""];
4->24 [style = solid, label="blockSize"];
7->30 [style = dotted, label="true"];
7->14 [style = dotted, label="true"];
}
