digraph {
16 [style = filled, label = "final List<String> scheduledWorkflows = new ArrayList<>(wCtx.getScheduledWorkflows())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "wCtx = TaskTestUtil.pollForWorkflowContext(_driver,queueName)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testDeletingRecurrentQueueWithHistory['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "_driver.createQueue(queueBuild.build())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "_driver.updateWorkflow(queueName,workflowConfig)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testDeletingRecurrentQueueWithHistory['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "String scheduledQueue = wCtx.getLastScheduledSingleWorkflow()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver,queueName)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int intervalSeconds = 3@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "_driver.delete(queueName)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "createAndEnqueueJob(queueBuild,2)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "wCtx.getScheduledWorkflows().size() < 2@@@19@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName,0,600000,TargetState.STOP)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName,0,60,TargetState.STOP)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "wCtx = TaskTestUtil.pollForWorkflowContext(_driver,queueName)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testCreateStoppedQueue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "_driver.resume(queueName)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "_driver.pollForWorkflowState(scheduledQueue,TaskState.COMPLETED)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final String queueName = TestHelper.getTestMethodName()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "workflowConfig.putSimpleConfig(WorkflowConfig.WorkflowConfigProperty.RecurrenceInterval.name(),\"\" + intervalSeconds)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(workflowConfig.getTargetState(),TargetState.STOP)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(result)@@@44@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Thread.sleep(intervalSeconds)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "WorkflowContext wCtx@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "_driver.stop(queueName)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "boolean result = TestHelper.verify(new TestHelper.Verifier(){@Override public boolean verify(){WorkflowContext currentQueueCtx = _driver.getWorkflowContext(queueName)if (currentQueueCtx == null) {for (String workflow : scheduledWorkflows){if (_driver.getWorkflowContext(workflow) != null) {return false}}return true}{scheduledWorkflows.clear()scheduledWorkflows.addAll(currentQueueCtx.getScheduledWorkflows())}return false}},5 * 1000)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "String queueName = TestHelper.getTestMethodName()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "LOG.info(\"Starting job-queue: \" + queueName)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertFalse(scheduledWorkflows.size() > 2)@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
10->16 [style = bold, label=""];
3->29 [style = bold, label=""];
29->9 [style = bold, label=""];
11->14 [style = solid, label="queueName"];
1->5 [style = solid, label="intervalSeconds"];
13->15 [style = bold, label=""];
2->4 [style = bold, label=""];
27->25 [style = bold, label=""];
12->9 [style = solid, label="queueBuild"];
24->3 [style = solid, label="queueName"];
11->0 [style = solid, label="queueName"];
13->17 [style = bold, label=""];
20->18 [style = bold, label=""];
11->17 [style = solid, label="queueName"];
4->5 [style = bold, label=""];
14->13 [style = bold, label=""];
11->20 [style = solid, label="queueName"];
21->8 [style = bold, label=""];
11->1 [style = bold, label=""];
23->11 [style = bold, label=""];
16->22 [style = bold, label=""];
22->20 [style = bold, label=""];
11->24 [style = dashed, label="0"];
18->7 [style = solid, label="result"];
6->2 [style = bold, label=""];
24->21 [style = solid, label="queueName"];
9->6 [style = bold, label=""];
8->21 [style = dashed, label="0"];
12->9 [style = bold, label=""];
11->12 [style = solid, label="queueName"];
11->3 [style = solid, label="queueName"];
5->0 [style = bold, label=""];
1->3 [style = bold, label=""];
28->24 [style = bold, label=""];
19->11 [style = bold, label=""];
1->15 [style = solid, label="intervalSeconds"];
3->12 [style = bold, label=""];
15->14 [style = bold, label=""];
11->10 [style = solid, label="queueName"];
24->4 [style = solid, label="queueName"];
24->6 [style = solid, label="queueName"];
0->21 [style = bold, label=""];
2->0 [style = solid, label="workflowConfig"];
21->27 [style = bold, label=""];
16->20 [style = bold, label=""];
11->18 [style = solid, label="queueName"];
11->21 [style = solid, label="queueName"];
13->15 [style = dotted, label="true"];
11->2 [style = solid, label="queueName"];
26->3 [style = bold, label=""];
4->21 [style = bold, label=""];
24->26 [style = bold, label=""];
16->18 [style = solid, label="scheduledWorkflows"];
27->25 [style = solid, label="scheduledQueue"];
13->14 [style = dotted, label="true"];
12->3 [style = dashed, label="0"];
17->10 [style = bold, label=""];
8->15 [style = bold, label=""];
24->26 [style = solid, label="queueName"];
3->29 [style = solid, label="queueBuild"];
18->7 [style = bold, label=""];
}
