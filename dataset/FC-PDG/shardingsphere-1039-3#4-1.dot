digraph {
13 [style = filled, label = "assertThat(tags.get(\"error\"),is(\"IOException\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(span.name(),is(\"/ShardingSphere/rootInvoke/\".toLowerCase()))@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(tags.get(ZipkinConstants.Tags.CONNECTION_COUNT),is(\"0\"))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Map<String,String> tags = span.tags()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "advice.onThrowing(getTargetObject(),null,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16982ea,new IOException())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Span span = COLLECTOR.pop()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertThat(tags.get(ZipkinConstants.Tags.COMPONENT),is(ZipkinConstants.COMPONENT_NAME))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "advice.beforeMethod(getTargetObject(),null,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16982de,new MethodInvocationResult())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertExceptionHandle['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Span span = collector.pop()@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertNotNull(span)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertMethod['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertThat(tags.get(ZipkinConstants.Tags.DB_TYPE),is(ZipkinConstants.DB_TYPE_VALUE))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "advice.afterMethod(getTargetObject(),null,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16982f6,new MethodInvocationResult())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertMethod['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
9->13 [style = bold, label=""];
3->10 [style = bold, label=""];
3->6 [style = bold, label=""];
11->5 [style = bold, label=""];
1->2 [style = bold, label=""];
7->5 [style = bold, label=""];
12->3 [style = bold, label=""];
6->8 [style = solid, label="span"];
6->10 [style = dashed, label="0"];
10->8 [style = solid, label="span"];
9->0 [style = bold, label=""];
10->8 [style = bold, label=""];
5->12 [style = bold, label=""];
2->4 [style = bold, label=""];
0->1 [style = bold, label=""];
14->5 [style = bold, label=""];
6->8 [style = bold, label=""];
13->0 [style = bold, label=""];
8->9 [style = bold, label=""];
}
