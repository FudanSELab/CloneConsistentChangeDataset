digraph {
14 [style = filled, label = "assertThat(health.getDetails().get(\"free\")).isEqualTo(freeSpace)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Health health = this.healthIndicator.health()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(health.getDetails().get(\"total\")).isEqualTo(THRESHOLD_BYTES * 10)@@@9@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(health.getDetails().get(\"threshold\")).isEqualTo(THRESHOLD_BYTES)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "diskSpaceIsUp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "given(this.fileMock.getUsableSpace()).willReturn(freeSpace)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "long freeSpace = THRESHOLD.toBytes() + 10@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertThat(health.getDetails().get(\"total\")).isEqualTo(TOTAL_SPACE.toBytes())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "given(this.fileMock.getTotalSpace()).willReturn(TOTAL_SPACE.toBytes())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Health health = this.healthIndicator.health()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(health.getStatus()).isEqualTo(Status.DOWN)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(health.getDetails().get(\"free\")).isEqualTo(THRESHOLD_BYTES - 10)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "diskSpaceIsDown['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(health.getDetails().get(\"free\")).isEqualTo(THRESHOLD_BYTES + 10)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "given(this.fileMock.getUsableSpace()).willReturn(THRESHOLD_BYTES - 10)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "diskSpaceIsUp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "given(this.fileMock.getTotalSpace()).willReturn(THRESHOLD_BYTES * 10)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "given(this.fileMock.getUsableSpace()).willReturn(THRESHOLD_BYTES + 10)@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(health.getDetails().get(\"threshold\")).isEqualTo(THRESHOLD.toBytes())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1->5 [style = bold, label=""];
5->3 [style = bold, label=""];
4->18 [style = dashed, label="0"];
0->16 [style = bold, label=""];
10->14 [style = bold, label=""];
0->2 [style = bold, label=""];
16->7 [style = bold, label=""];
7->11 [style = dashed, label="0"];
5->15 [style = bold, label=""];
1->9 [style = dashed, label="0"];
13->14 [style = solid, label="freeSpace"];
13->9 [style = solid, label="freeSpace"];
0->10 [style = dashed, label="0"];
3->0 [style = bold, label=""];
6->4 [style = bold, label=""];
0->10 [style = bold, label=""];
2->14 [style = dashed, label="0"];
18->1 [style = bold, label=""];
2->16 [style = dashed, label="0"];
15->0 [style = bold, label=""];
3->15 [style = dashed, label="0"];
4->1 [style = bold, label=""];
12->3 [style = bold, label=""];
13->9 [style = bold, label=""];
9->12 [style = bold, label=""];
2->7 [style = bold, label=""];
14->11 [style = bold, label=""];
17->18 [style = bold, label=""];
8->13 [style = bold, label=""];
}
