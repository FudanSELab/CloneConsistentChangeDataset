digraph {
16 [style = filled, label = "builder = new SimpleQueryStringBuilder(\"\"foo bar baz biz\"\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(expectedPhraseQueryWithUnigram,equalTo(query))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Query query = builder.toQuery(searchExecutionContext)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"foo bar baz\",\"text_shingle_unigram\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "SimpleQueryStringBuilder builder = new SimpleQueryStringBuilder(\"foo bar baz\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "builder.field(\"text_shingle_unigram\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testMultiMatchQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "testSimpleQueryString['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "builder.flags(SimpleQueryStringFlag.NONE)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "query = builder.toQuery(searchExecutionContext)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "builder.flags(SimpleQueryStringFlag.PHRASE)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(expectedPhraseQuery,equalTo(query))@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertThat(expectedQuery,equalTo(query))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(expectedPhraseQuery,equalTo(query))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "builder.flags(SimpleQueryStringFlag.PHRASE)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "builder.field(\"text_shingle_unigram\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "builder = new MultiMatchQueryBuilder(\"foo bar baz biz\",\"text_shingle\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testMultiMatchQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Query query = builder.toQuery(searchExecutionContext)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "builder.flags(SimpleQueryStringFlag.NONE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "builder.field(\"text_shingle\")@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "builder = new SimpleQueryStringBuilder(\"\"foo bar baz\"\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "builder.type(MatchQueryParser.Type.PHRASE)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "query = builder.toQuery(searchExecutionContext)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(expectedPhraseQueryWithUnigram,equalTo(query))@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(expectedQueryWithUnigram,equalTo(query))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "builder = new SimpleQueryStringBuilder(\"foo bar baz biz\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "query = builder.toQuery(searchExecutionContext)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "builder.type(MatchQueryParser.Type.PHRASE)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "query = builder.toQuery(searchExecutionContext)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "builder.field(\"text_shingle\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(expectedQueryWithUnigram,equalTo(query))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "query = builder.toQuery(searchExecutionContext)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31->21 [style = bold, label=""];
3->6 [style = solid, label="query"];
5->16 [style = dashed, label="0"];
7->29 [style = dashed, label="0"];
13->7 [style = bold, label=""];
10->2 [style = bold, label=""];
14->3 [style = bold, label=""];
25->30 [style = solid, label="query"];
8->12 [style = bold, label=""];
1->0 [style = solid, label="query"];
5->14 [style = dashed, label="0"];
2->8 [style = solid, label="query"];
22->24 [style = bold, label=""];
16->18 [style = bold, label=""];
4->11 [style = bold, label=""];
12->1 [style = bold, label=""];
11->15 [style = bold, label=""];
0->5 [style = solid, label="query"];
5->32 [style = bold, label=""];
17->20 [style = bold, label=""];
24->10 [style = bold, label=""];
30->16 [style = bold, label=""];
26->19 [style = solid, label="query"];
10->15 [style = dashed, label="0"];
15->2 [style = bold, label=""];
2->8 [style = bold, label=""];
3->6 [style = bold, label=""];
20->25 [style = bold, label=""];
26->19 [style = bold, label=""];
11->10 [style = bold, label=""];
10->2 [style = solid, label="query"];
10->31 [style = dashed, label="0"];
32->17 [style = bold, label=""];
7->4 [style = bold, label=""];
27->26 [style = bold, label=""];
2->31 [style = bold, label=""];
29->22 [style = bold, label=""];
4->11 [style = solid, label="query"];
5->3 [style = bold, label=""];
0->5 [style = bold, label=""];
0->14 [style = bold, label=""];
18->27 [style = bold, label=""];
25->30 [style = bold, label=""];
12->32 [style = dashed, label="0"];
28->0 [style = bold, label=""];
21->28 [style = bold, label=""];
23->29 [style = bold, label=""];
1->0 [style = bold, label=""];
9->7 [style = bold, label=""];
}
