digraph {
14 [style = filled, label = "Object raw2 = row.getRaw(\"f1\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertResultsEquals(sql,expectedResults,results)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "VarianceAggregatorCollector holder2 = new VarianceAggregatorCollector()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "addToHolder(holder3,raw3)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "addToHolder(holder2,raw2)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE3).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new VarianceAggregatorFactory(\"a0:agg\",\"d1\",\"population\",\"double\"),new VarianceAggregatorFactory(\"a1:agg\",\"f1\",\"population\",\"float\"),new VarianceAggregatorFactory(\"a2:agg\",\"l1\",\"population\",\"long\"))).context(BaseCalciteQueryTest.TIMESERIES_CONTEXT_DEFAULT).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE3).intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity()))).granularity(Granularities.ALL).aggregators(ImmutableList.of(new VarianceAggregatorFactory(\"a0:agg\",\"d1\",\"sample\",\"double\"),new VarianceAggregatorFactory(\"a1:agg\",\"f1\",\"sample\",\"float\"),new VarianceAggregatorFactory(\"a2:agg\",\"l1\",\"sample\",\"long\"))).postAggregators(new StandardDeviationPostAggregator(\"a0\",\"a0:agg\",\"sample\"),new StandardDeviationPostAggregator(\"a1\",\"a1:agg\",\"sample\"),new StandardDeviationPostAggregator(\"a2\",\"a2:agg\",\"sample\")).context(BaseCalciteQueryTest.TIMESERIES_CONTEXT_DEFAULT).build(),Iterables.getOnlyElement(queryLogHook.getRecordedQueries()))@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testStdDevSamp['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "VarianceAggregatorCollector holder3 = new VarianceAggregatorCollector()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertResultsEquals(expectedResults,results)@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testVarPop['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "testVarPop['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "VarianceAggregatorCollector holder1 = new VarianceAggregatorCollector()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final String sql = \"SELECT\" + \"VAR_POP(d1),\" + \"VAR_POP(f1),\" + \"VAR_POP(l1)\" + \"FROM numfoo\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Object raw1 = row.getRaw(\"d1\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "addToHolder(holder1,raw1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final List<Object((> results = sqlLifecycle.runSimple(sql,BaseCalciteQueryTest.QUERY_CONTEXT_DEFAULT,CalciteTestBase.DEFAULT_PARAMETERS,authenticationResult).toList()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final String sql = \"SELECT\" + \"STDDEV_SAMP(d1),\" + \"STDDEV_SAMP(f1),\" + \"STDDEV_SAMP(l1)\" + \"FROM numfoo\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final List<Object((> expectedResults = ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@914867)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Object raw3 = row.getRaw(\"l1\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final List<Object((> results = getSqlLifecycle().runSimple(sql,BaseCalciteQueryTest.QUERY_CONTEXT_DEFAULT,CalciteTestBase.DEFAULT_PARAMETERS,AUTH_RESULT).toList()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1->5 [style = bold, label=""];
11->16 [style = bold, label=""];
16->3 [style = bold, label=""];
5->8 [style = bold, label=""];
11->10 [style = solid, label="expectedResults"];
10->20 [style = bold, label=""];
17->1 [style = bold, label=""];
1->15 [style = bold, label=""];
15->16 [style = solid, label="results"];
1->19 [style = dashed, label="0"];
18->19 [style = bold, label=""];
14->6 [style = solid, label="raw2"];
10->3 [style = bold, label=""];
7->0 [style = bold, label=""];
11->16 [style = solid, label="expectedResults"];
7->2 [style = solid, label="holder3"];
12->7 [style = bold, label=""];
0->9 [style = solid, label="raw1"];
9->6 [style = bold, label=""];
6->2 [style = bold, label=""];
5->10 [style = solid, label="results"];
19->5 [style = bold, label=""];
0->14 [style = bold, label=""];
2->0 [style = bold, label=""];
13->2 [style = solid, label="raw3"];
12->6 [style = solid, label="holder2"];
11->10 [style = bold, label=""];
1->16 [style = solid, label="sql"];
3->20 [style = dashed, label="0"];
8->12 [style = bold, label=""];
8->9 [style = solid, label="holder1"];
4->1 [style = bold, label=""];
13->9 [style = bold, label=""];
10->16 [style = dashed, label="0"];
14->13 [style = bold, label=""];
5->15 [style = dashed, label="0"];
2->11 [style = bold, label=""];
15->8 [style = bold, label=""];
}
