digraph {
7 [style = filled, label = "assertEquals(TEST_SHARD_ID,restoredShardState.getStreamShardHandle().getShard().getShardId())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "sequenceNumberRange.withStartingSequenceNumber(\"1\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final List<StreamShardHandle> initialDiscoveryShards = new ArrayList<>(TEST_STATE.size())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "MigrationTestUtil.restoreFromSnapshot(testHarness,\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-snapshot\",testMigrateVersion)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(TEST_SEQUENCE_NUMBER,restoredShardState.getLastProcessedSequenceNum())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(TEST_SHARD_ID,restoredShardState.getStreamShardHandle().getShard().getShardId())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final AbstractStreamOperatorTestHarness<String> testHarness = new AbstractStreamOperatorTestHarness<>(consumerOperator,1,1,0)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(TEST_SEQUENCE_NUMBER,fetcher.getSubscribedShardsState().get(0).getLastProcessedSequenceNum())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "shard.setShardId(shardMetadata.getShardId())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testHarness.initializeState(OperatorSnapshotUtil.getResourceFilename(\"kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-empty-snapshot\"))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "consumerOperator.cancel()@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testHarness.open()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "StreamSource<String,DummyFlinkKinesisConsumer<String>> consumerOperator = new StreamSource<>(consumerFunction)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "shard.setSequenceNumberRange(sequenceNumberRange)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "consumerFunction.run(new TestSourceContext<>())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(1,consumerFunction.getRestoredState().size())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(consumerFunction.getRestoredState().isEmpty())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testRestoreWithEmptyState['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final TestFetcher<String> fetcher = new TestFetcher<>(Collections.singletonList(TEST_STREAM_NAME),new TestSourceContext<>(),new TestRuntimeContext(true,1,0),TestUtils.getStandardProperties(),new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),null,initialDiscoveryShards)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Shard shard = new Shard()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final DummyFlinkKinesisConsumer<String> consumerFunction = new DummyFlinkKinesisConsumer<>(fetcher,new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "SequenceNumberRange sequenceNumberRange = new SequenceNumberRange()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(TEST_STREAM_NAME,restoredShardState.getStreamShardHandle().getStreamName())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertFalse(restoredShardState.getStreamShardHandle().isClosed())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "testRestore['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testHarness.setup()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "KinesisStreamShardState restoredShardState = fetcher.getSubscribedShardsState().get(0)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(TEST_STATE,removeEquivalenceWrappers(consumerFunction.getRestoredState()))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertFalse(restoredShardState.getStreamShardHandle().isClosed())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(TEST_STREAM_NAME,restoredShardState.getStreamShardHandle().getStreamName())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testRestoreWithEmptyState['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "assertEquals(1,fetcher.getSubscribedShardsState().size())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "MigrationTestUtil.restoreFromSnapshot(testHarness,\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-empty-snapshot\",testMigrateVersion)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "consumerOperator.close()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "initialDiscoveryShards.add(new StreamShardHandle(shardMetadata.getStreamName(),shard))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertNotEquals(null,consumerFunction.getRestoredState())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "KinesisStreamShardState restoredShardState = fetcher.getSubscribedShardsState().get(0)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->3 [style = bold, label=""];
34->29 [style = bold, label=""];
14->25 [style = bold, label=""];
5->17 [style = solid, label="consumerOperator"];
21->27 [style = bold, label=""];
0->19 [style = bold, label=""];
12->21 [style = bold, label=""];
8->11 [style = solid, label="fetcher"];
22->9 [style = bold, label=""];
1->20 [style = bold, label=""];
4->27 [style = dashed, label="0"];
31->36 [style = bold, label=""];
24->13 [style = bold, label=""];
33->12 [style = bold, label=""];
17->15 [style = solid, label="testHarness"];
5->17 [style = bold, label=""];
28->16 [style = bold, label=""];
14->33 [style = bold, label=""];
9->6 [style = bold, label=""];
13->8 [style = solid, label="initialDiscoveryShards"];
26->30 [style = bold, label=""];
6->2 [style = bold, label=""];
7->26 [style = bold, label=""];
22->8 [style = bold, label=""];
35->28 [style = bold, label=""];
11->5 [style = bold, label=""];
17->33 [style = solid, label="testHarness"];
15->25 [style = dashed, label="0"];
2->0 [style = bold, label=""];
27->34 [style = bold, label=""];
20->23 [style = bold, label=""];
10->16 [style = bold, label=""];
16->30 [style = dashed, label="0"];
3->7 [style = bold, label=""];
25->12 [style = bold, label=""];
17->14 [style = bold, label=""];
30->31 [style = bold, label=""];
2->19 [style = solid, label="sequenceNumberRange"];
11->5 [style = solid, label="consumerFunction"];
15->33 [style = dashed, label="0"];
18->13 [style = bold, label=""];
23->10 [style = bold, label=""];
14->15 [style = bold, label=""];
15->12 [style = bold, label=""];
4->1 [style = bold, label=""];
13->9 [style = bold, label=""];
29->35 [style = bold, label=""];
9->22 [style = solid, label="shard"];
32->13 [style = bold, label=""];
8->11 [style = bold, label=""];
19->22 [style = bold, label=""];
21->4 [style = bold, label=""];
}
