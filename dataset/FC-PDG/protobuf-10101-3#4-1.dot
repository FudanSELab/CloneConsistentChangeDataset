digraph {
21 [style = filled, label = "assertWithMessage(\"%s string must must have same hashCode as the flat string\",classUnderTest).that(flatString.hashCode()).isEqualTo(unicode.hashCode())@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertEquals(classUnderTest + \" string must must have same hashCode as the flat string\",flatString.hashCode(),unicode.hashCode())@@@22@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "unicode = unicode.substring(2,unicode.size() - 6)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testToString['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "unicode = RopeByteString.concatenate(unicode,sourceByteString)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "String sourceString = \"I love unicode ሴ噸 characters\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testString = testString.substring(2,testString.length() - 6)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(classUnderTest + \" from string must have the expected type\",classUnderTest,getActualClassName(unicode))@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testCharsetToString['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertWithMessage(\"%s unicode bytes must match\",classUnderTest).that(testString).isEqualTo(roundTripString)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertEquals(classUnderTest + \" string must equal the flat string\",flatString,unicode)@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertWithMessage(\"%s from string must have the expected type\",classUnderTest).that(classUnderTest).isEqualTo(getActualClassName(unicode))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "String roundTripString = unicode.toString(Internal.UTF_8)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ByteString sourceByteString = ByteString.copyFromUtf8(sourceString)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "int copies = 250@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "i < copies@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ByteString flatString = ByteString.copyFromUtf8(testString)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "String testString = builder.toString()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertWithMessage(\"%s string must equal the flat string\",classUnderTest).that(flatString).isEqualTo(unicode)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "int i = 0@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(classUnderTest + \" unicode bytes must match\",testString,roundTripString)@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "StringBuilder builder = new StringBuilder(copies * sourceString.length())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "++i@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testToString['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "String roundTripString = unicode.toString(UTF_8)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "builder.append(sourceString)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ByteString unicode = ByteString.EMPTY@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->17 [style = bold, label=""];
4->16 [style = bold, label=""];
8->10 [style = bold, label=""];
18->3 [style = bold, label=""];
0->12 [style = dotted, label="true"];
16->0 [style = bold, label=""];
10->20 [style = bold, label=""];
18->24 [style = bold, label=""];
22->15 [style = bold, label=""];
14->23 [style = solid, label="unicode"];
10->20 [style = solid, label="roundTripString"];
13->20 [style = dashed, label="0"];
14->24 [style = solid, label="unicode"];
4->2 [style = solid, label="unicode"];
11->6 [style = bold, label=""];
0->12 [style = bold, label=""];
3->24 [style = dashed, label="0"];
14->3 [style = solid, label="unicode"];
8->26 [style = bold, label=""];
14->8 [style = solid, label="unicode"];
26->13 [style = bold, label=""];
1->11 [style = bold, label=""];
0->7 [style = bold, label=""];
7->9 [style = bold, label=""];
10->13 [style = solid, label="roundTripString"];
20->18 [style = bold, label=""];
6->4 [style = bold, label=""];
12->2 [style = bold, label=""];
3->5 [style = bold, label=""];
15->1 [style = solid, label="sourceString"];
10->26 [style = dashed, label="0"];
17->0 [style = bold, label=""];
9->18 [style = solid, label="testString"];
1->2 [style = solid, label="sourceByteString"];
26->13 [style = solid, label="roundTripString"];
10->13 [style = bold, label=""];
14->23 [style = bold, label=""];
24->21 [style = bold, label=""];
9->14 [style = bold, label=""];
11->6 [style = solid, label="copies"];
23->10 [style = bold, label=""];
25->15 [style = bold, label=""];
5->21 [style = dashed, label="0"];
0->17 [style = dotted, label="true"];
18->3 [style = solid, label="flatString"];
14->8 [style = bold, label=""];
11->0 [style = solid, label="copies"];
0->2 [style = dotted, label="true"];
19->15 [style = bold, label=""];
15->12 [style = solid, label="sourceString"];
9->13 [style = solid, label="testString"];
13->18 [style = bold, label=""];
8->23 [style = dashed, label="0"];
15->1 [style = bold, label=""];
16->0 [style = solid, label="i"];
}
