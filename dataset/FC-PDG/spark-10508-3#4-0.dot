digraph {
44 [style = filled, label = "model.transform(dfA).show()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "List<Row> dataA = Arrays.asList(RowFactory.create(0,Vectors.dense(1.0,1.0)),RowFactory.create(1,Vectors.dense(1.0,-1.0)),RowFactory.create(2,Vectors.dense(-1.0,-1.0)),RowFactory.create(3,Vectors.dense(-1.0,1.0)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "model.approxSimilarityJoin(dfA,dfB,0.6,\"JaccardDistance\").select(col(\"datasetA.id\").alias(\"idA\"),col(\"datasetB.id\").alias(\"idB\"),col(\"JaccardDistance\")).show()@@@47@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "Dataset<Row> dfB = spark.createDataFrame(dataB,schema)@@@34@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "model.transform(dataFrame).show()@@@23@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "main['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "SparkSession spark = SparkSession.builder().appName(\"JavaBucketedRandomProjectionLSHExample\").getOrCreate()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "spark.stop()@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "model.approxSimilarityJoin(dfA,dfB,1.5).show()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Dataset<Row> dfA = spark.createDataFrame(dataA,schema)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "System.out.println(\"Approximately joining dfA and dfB on Jaccard distance smaller than 0.6:\")@@@46@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "Dataset<Row> dfB = spark.createDataFrame(dataB,schema)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "List<Row> data = Arrays.asList(RowFactory.create(0,Vectors.sparse(6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a846ba,new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a846c0)),RowFactory.create(1,Vectors.sparse(6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a846ce,new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a846d4)),RowFactory.create(2,Vectors.sparse(6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a846e2,new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a846e8)))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "SparkSession spark = SparkSession.builder().appName(\"JavaMinHashLSHExample\").getOrCreate()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "BucketedRandomProjectionLSH mh = new BucketedRandomProjectionLSH().setBucketLength(2.0).setNumHashTables(3).setInputCol(\"keys\").setOutputCol(\"values\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "System.out.println(\"The hashed dataset where hashed values are stored in the column 'hashes':\")@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "StructType schema = new StructType(new StructField((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a848e8)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "List<Row> dataB = Arrays.asList(RowFactory.create(4,Vectors.dense(1.0,0.0)),RowFactory.create(5,Vectors.dense(-1.0,0.0)),RowFactory.create(6,Vectors.dense(0.0,1.0)),RowFactory.create(7,Vectors.dense(0.0,-1.0)))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "int(( indices = {1,3}@@@35@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "main['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "MinHashLSH mh = new MinHashLSH().setNumHashTables(5).setInputCol(\"features\").setOutputCol(\"hashes\")@@@42@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "model.approxSimilarityJoin(transformedA,transformedB,1.5).show()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "String(( args@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "List<Row> dataA = Arrays.asList(RowFactory.create(0,Vectors.sparse(6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a84756,new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a8475c)),RowFactory.create(1,Vectors.sparse(6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a8476a,new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a84770)),RowFactory.create(2,Vectors.sparse(6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a8477e,new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a84784)))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "model.approxNearestNeighbors(dfA,key,2).show()@@@49@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Dataset<Row> dfA = spark.createDataFrame(dataA,schema)@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "Dataset<Row> transformedB = model.transform(dfB).cache()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "model.approxSimilarityJoin(dfA,dfA,2.5).filter(\"datasetA.id < datasetB.id\").show()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "List<Row> dataB = Arrays.asList(RowFactory.create(0,Vectors.sparse(6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a84799,new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a8479f)),RowFactory.create(1,Vectors.sparse(6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a847ad,new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a847b3)),RowFactory.create(2,Vectors.sparse(6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a847c1,new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a847c7)))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Vector key = Vectors.sparse(6,indices,values)@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "model.transform(dfA).show()@@@45@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "Vector key = Vectors.dense(1.0,0.0)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "spark.stop()@@@50@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "MinHashLSHModel model = mh.fit(dfA)@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "BucketedRandomProjectionLSHModel model = mh.fit(dfA)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "model.approxNearestNeighbors(transformedA,key,2).show()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "main['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "spark.stop()@@@24@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Dataset<Row> transformedA = model.transform(dfA).cache()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "System.out.println(\"Approximately searching dfA for 2 nearest neighbors of the key:\")@@@48@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Dataset<Row> dataFrame = spark.createDataFrame(data,schema)@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "model.approxNearestNeighbors(dfA,key,2).show()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "MinHashLSHModel model = mh.fit(dataFrame)@@@22@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "double(( values = {1.0,1.0}@@@38@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "MinHashLSH mh = new MinHashLSH().setNumHashTables(1).setInputCol(\"keys\").setOutputCol(\"values\")@@@21@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->4 [style = solid, label="schema"];
4->9 [style = bold, label=""];
5->8 [style = bold, label=""];
18->24 [style = bold, label=""];
30->41 [style = bold, label=""];
41->39 [style = solid, label="dataA"];
42->43 [style = bold, label=""];
3->30 [style = dashed, label="0"];
15->19 [style = solid, label="values"];
9->2 [style = bold, label=""];
0->6 [style = bold, label=""];
44->35 [style = bold, label=""];
43->29 [style = solid, label="schema"];
27->44 [style = bold, label=""];
39->27 [style = solid, label="dfA"];
1->3 [style = bold, label=""];
8->11 [style = solid, label="schema"];
14->10 [style = bold, label=""];
10->26 [style = bold, label=""];
20->3 [style = bold, label=""];
19->17 [style = bold, label=""];
4->39 [style = dashed, label="0"];
34->8 [style = bold, label=""];
5->4 [style = solid, label="data"];
20->7 [style = dotted, label="true"];
15->19 [style = bold, label=""];
3->22 [style = bold, label=""];
25->16 [style = bold, label=""];
42->29 [style = solid, label="dataB"];
21->18 [style = bold, label=""];
8->23 [style = solid, label="schema"];
28->32 [style = bold, label=""];
1->7 [style = dotted, label="true"];
13->19 [style = solid, label="indices"];
3->5 [style = bold, label=""];
2->0 [style = bold, label=""];
29->33 [style = bold, label=""];
38->30 [style = bold, label=""];
22->11 [style = solid, label="dataA"];
11->21 [style = solid, label="dfA"];
36->27 [style = bold, label=""];
37->31 [style = bold, label=""];
23->13 [style = bold, label=""];
43->39 [style = solid, label="schema"];
12->8 [style = bold, label=""];
22->12 [style = bold, label=""];
24->25 [style = bold, label=""];
32->40 [style = bold, label=""];
33->36 [style = bold, label=""];
4->2 [style = solid, label="dataFrame"];
38->7 [style = dotted, label="true"];
16->14 [style = bold, label=""];
8->37 [style = bold, label=""];
13->15 [style = bold, label=""];
31->28 [style = bold, label=""];
8->4 [style = bold, label=""];
4->11 [style = dashed, label="0"];
12->23 [style = solid, label="dataB"];
35->34 [style = bold, label=""];
8->11 [style = bold, label=""];
11->23 [style = bold, label=""];
17->21 [style = bold, label=""];
43->39 [style = bold, label=""];
5->41 [style = dashed, label="0"];
39->29 [style = bold, label=""];
41->42 [style = bold, label=""];
5->22 [style = dashed, label="0"];
}
