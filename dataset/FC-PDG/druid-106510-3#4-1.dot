digraph {
4 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"\")@@@11@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(Functions.identity(),query.getLimitSpec().build(query.getDimensions(),query.getAggregatorSpecs(),query.getPostAggregatorSpecs(),query.getGranularity(),query.getContextSortByDimsFirst()))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "expectedException.expectMessage(\"GroupBy v1 only supports dimensions with an outputType of STRING.\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testGroupByFloatColumn['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"float\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "GroupByQuery query = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new DefaultDimensionSpec(\"qualityFloat\",\"qf_alias\",ValueType.FLOAT)).setDimFilter(new InDimFilter(\"quality\",Arrays.asList(\"entertainment\",\"technology\"),null)).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).addOrderByColumn(new OrderByColumnSpec(\"qf_alias\",OrderByColumnSpec.Direction.DESCENDING,StringComparators.NUMERIC)).setGranularity(QueryRunnerTestHelper.allGran).build()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"qf_alias\",17000.0f,\"rows\",2L,\"idx\",175L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"qf_alias\",12000.0f,\"rows\",2L,\"idx\",324L))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "GroupByQuery query = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(new DefaultDimensionSpec(\"index\",\"index_alias\",ValueType.FLOAT)).setDimFilter(new SelectorDimFilter(\"quality\",\"entertainment\",null)).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).addOrderByColumn(new OrderByColumnSpec(\"index_alias\",OrderByColumnSpec.Direction.ASCENDING,StringComparators.NUMERIC)).setGranularity(QueryRunnerTestHelper.dayGran).build()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertNotEquals(Functions.identity(),query.getLimitSpec().build(query.getDimensions(),query.getAggregatorSpecs(),query.getPostAggregatorSpecs(),query.getGranularity(),query.getContextSortByDimsFirst()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"index_alias\",158.747224f,\"rows\",1L,\"idx\",158L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-02\",\"index_alias\",166.016049f,\"rows\",1L,\"idx\",166L))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testGroupByFloatColumnDescending['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "expectedException.expect()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testGroupByFloatColumn['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2->3 [style = dotted, label="true"];
5->13 [style = dashed, label="0"];
6->3 [style = bold, label=""];
1->4 [style = bold, label=""];
7->1 [style = bold, label=""];
9->2 [style = bold, label=""];
2->6 [style = bold, label=""];
12->1 [style = solid, label="query"];
7->14 [style = dashed, label="0"];
3->12 [style = bold, label=""];
0->12 [style = dashed, label="0"];
1->10 [style = solid, label="results"];
7->10 [style = solid, label="expectedResults"];
11->2 [style = bold, label=""];
14->1 [style = bold, label=""];
3->0 [style = bold, label=""];
2->12 [style = bold, label=""];
12->13 [style = bold, label=""];
2->0 [style = bold, label=""];
14->4 [style = solid, label="expectedResults"];
0->1 [style = solid, label="query"];
8->2 [style = bold, label=""];
2->6 [style = dotted, label="true"];
7->4 [style = solid, label="expectedResults"];
5->7 [style = bold, label=""];
4->10 [style = dashed, label="0"];
1->4 [style = solid, label="results"];
1->10 [style = bold, label=""];
13->14 [style = bold, label=""];
0->5 [style = bold, label=""];
}
