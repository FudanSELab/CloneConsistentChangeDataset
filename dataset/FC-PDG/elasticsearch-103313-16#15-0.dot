digraph {
15 [style = filled, label = "context.getIndexSettings().updateIndexMetadata(newIndexMeta(\"index\",context.getIndexSettings().getSettings(),Settings.builder().putList(\"index.query.default_field\",TEXT_FIELD_NAME,KEYWORD_FIELD_NAME + \"^5\").build()))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "context.getIndexSettings().updateIndexMetadata(newIndexMeta(\"index\",context.getIndexSettings().getSettings(),Settings.builder().putList(\"index.query.default_field\",STRING_FIELD_NAME,STRING_FIELD_NAME_2 + \"^5\",INT_FIELD_NAME).build()))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "query = qb.toQuery(context)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "context.getIndexSettings().updateIndexMetadata(newIndexMeta(\"index\",context.getIndexSettings().getSettings(),Settings.builder().putList(\"index.query.default_field\",TEXT_FIELD_NAME,\"*\",KEYWORD_FIELD_NAME).build()))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"hello\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "query = new MultiMatchQueryBuilder(\"hello\").toQuery(context)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "context.getIndexSettings().updateIndexMetadata(newIndexMeta(\"index\",context.getIndexSettings().getSettings(),Settings.builder().putList(\"index.query.default_field\",STRING_FIELD_NAME,\"*\",STRING_FIELD_NAME_2).build()))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "MultiMatchQueryBuilder qb = new MultiMatchQueryBuilder(\"hello\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Query query = new QueryStringQueryBuilder(\"hello\").toQuery(context)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(expected,query)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testDefaultField['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(expected,query)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertThat(exc.getMessage(),equalTo(\"For input string: \"hello\"\"))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "qb.lenient(true)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testDefaultField['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "QueryShardContext context = createShardContext()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertQueryWithAllFieldsWildcard(query)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "context.getIndexSettings().updateIndexMetadata(newIndexMeta(\"index\",context.getIndexSettings().getSettings(),Settings.builder().putList(\"index.query.default_field\",STRING_FIELD_NAME,\"*\",STRING_FIELD_NAME_2).build()))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Query query = builder.toQuery(context)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertThat(exc,instanceOf())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertQueryWithAllFieldsWildcard(query)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(expected,query)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "expected = new DisjunctionMaxQuery(Arrays.asList(new MatchNoDocsQuery(\"failed (mapped_int( query, caused by number_format_exception:(For input string: \"hello\"(\"),new TermQuery(new Term(STRING_FIELD_NAME,\"hello\")),new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2,\"hello\")),5.0f)),0.0f)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "{context.getIndexSettings().updateIndexMetadata(newIndexMeta(\"index\",context.getIndexSettings().getSettings(),Settings.builder().putNull(\"index.query.default_field\").build()))}@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "context.getIndexSettings().updateIndexMetadata(newIndexMeta(\"index\",context.getIndexSettings().getSettings(),Settings.builder().putList(\"index.query.default_field\",STRING_FIELD_NAME,STRING_FIELD_NAME_2 + \"^5\").build()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "query = new QueryStringQueryBuilder(\"hello\").toQuery(context)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertQueryWithAllFieldsWildcard(query)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "DisjunctionMaxQuery expected = new DisjunctionMaxQuery(Arrays.asList(new TermQuery(new Term(STRING_FIELD_NAME,\"hello\")),new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2,\"hello\")),5.0f)),0.0f)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Query expected = new DisjunctionMaxQuery(Arrays.asList(new TermQuery(new Term(TEXT_FIELD_NAME,\"hello\")),new BoostQuery(new TermQuery(new Term(KEYWORD_FIELD_NAME,\"hello\")),5.0f)),0.0f)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "testDefaultField['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertQueryWithAllFieldsWildcard(query)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "query = qb.toQuery(context)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Query expected = new DisjunctionMaxQuery(Arrays.asList(new TermQuery(new Term(STRING_FIELD_NAME,\"hello\")),new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2,\"hello\")),5.0f)),0.0f)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "IllegalArgumentException exc = expectThrows(,null)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8->9 [style = solid, label="query"];
10->15 [style = dashed, label="0"];
27->22 [style = solid, label="exc"];
14->3 [style = bold, label=""];
5->13 [style = dashed, label="0"];
8->16 [style = dashed, label="0"];
5->9 [style = solid, label="expected"];
30->33 [style = bold, label=""];
5->9 [style = bold, label=""];
21->19 [style = bold, label=""];
29->30 [style = bold, label=""];
2->0 [style = solid, label="query"];
6->32 [style = solid, label="context"];
26->3 [style = bold, label=""];
7->14 [style = dashed, label="0"];
9->4 [style = bold, label=""];
3->11 [style = bold, label=""];
30->33 [style = solid, label="expected"];
6->24 [style = bold, label=""];
10->17 [style = bold, label=""];
22->28 [style = bold, label=""];
25->26 [style = solid, label="query"];
12->6 [style = bold, label=""];
27->22 [style = bold, label=""];
3->11 [style = solid, label="query"];
32->10 [style = bold, label=""];
7->3 [style = bold, label=""];
6->29 [style = solid, label="context"];
6->8 [style = solid, label="context"];
11->15 [style = bold, label=""];
0->7 [style = bold, label=""];
19->4 [style = solid, label="expected"];
6->2 [style = bold, label=""];
20->27 [style = bold, label=""];
23->29 [style = bold, label=""];
0->14 [style = bold, label=""];
2->0 [style = bold, label=""];
1->6 [style = bold, label=""];
6->2 [style = solid, label="context"];
32->10 [style = solid, label="query"];
10->8 [style = bold, label=""];
6->21 [style = solid, label="context"];
6->3 [style = solid, label="context"];
8->5 [style = bold, label=""];
18->6 [style = bold, label=""];
11->10 [style = bold, label=""];
28->23 [style = bold, label=""];
6->25 [style = solid, label="context"];
24->25 [style = bold, label=""];
16->21 [style = bold, label=""];
25->26 [style = bold, label=""];
4->20 [style = bold, label=""];
10->17 [style = dashed, label="0"];
33->31 [style = bold, label=""];
13->9 [style = solid, label="expected"];
13->9 [style = bold, label=""];
19->4 [style = bold, label=""];
3->32 [style = dashed, label="0"];
2->24 [style = dashed, label="0"];
3->32 [style = bold, label=""];
15->8 [style = bold, label=""];
17->16 [style = bold, label=""];
8->13 [style = bold, label=""];
21->4 [style = solid, label="query"];
29->33 [style = solid, label="query"];
}
