digraph {
6 [style = filled, label = "when(this.dagManager.getJobStatusRetriever().getLatestExecutionIdsForFlow(eq(\"flow4\"),eq(\"group4\"),anyInt())).thenReturn(Collections.singletonList(flowExecutionId))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"6\",flowExecutionId,\"FINISH_RUNNING\",1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"4\",flowExecutionId,\"FINISH_RUNNING\",1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "jobConfig = jobConfig.withValue(ConfigurationKeys.GOBBLIN_JOB_START_SLA_TIME,ConfigValueFactory.fromAnyRef(\"7\")).withValue(ConfigurationKeys.GOBBLIN_JOB_START_SLA_TIME_UNIT,ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testOrphanFlowKill['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "long flowExecutionId = System.currentTimeMillis()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "String dagId = DagManagerUtils.generateDagId(dag)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "dagManager.addDag(dag,true)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag),ERROR_MESSAGE)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(dagManager.dagManagerThreads(queue(.dagToSLA.get(dagId).longValue(),TimeUnit.SECONDS.toMillis(7L))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "int queue = DagManagerUtils.getDagQueueId(dag,dagNumThreads)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Mockito.doReturn(DagManagerTest.getMockJobStatus(\"flow6\",\"group6\",flowExecutionId,\"group6\",\"job0\",String.valueOf(ExecutionStatus.ORCHESTRATED))).when(dagManager.getJobStatusRetriever()).getJobStatusesForFlowExecution(\"flow6\",\"group6\",flowExecutionId,\"job0\",\"group6\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Long flowExecutionId = System.currentTimeMillis() - TimeUnit.SECONDS.toMillis(10)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "jobConfig = jobConfig.withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME,ConfigValueFactory.fromAnyRef(\"7\")).withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME_UNIT,ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(null,ERROR_MESSAGE)@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testFlowSlaWithConfig['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(null,ERROR_MESSAGE)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "dagManager.addDag(dag,true,true)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testFlowSlaWithConfig['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(null,ERROR_MESSAGE)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->5 [style = solid, label="jobConfig"];
13->10 [style = bold, label=""];
14->3 [style = bold, label=""];
1->6 [style = solid, label="flowExecutionId"];
19->18 [style = bold, label=""];
1->0 [style = solid, label="flowExecutionId"];
0->15 [style = solid, label="dag"];
15->14 [style = bold, label=""];
21->7 [style = solid, label="dag"];
0->7 [style = solid, label="dag"];
0->2 [style = bold, label=""];
5->15 [style = bold, label=""];
14->17 [style = bold, label=""];
1->18 [style = dashed, label="0"];
1->0 [style = bold, label=""];
12->6 [style = bold, label=""];
3->4 [style = bold, label=""];
2->12 [style = bold, label=""];
21->2 [style = bold, label=""];
20->5 [style = bold, label=""];
7->14 [style = bold, label=""];
12->13 [style = bold, label=""];
0->12 [style = solid, label="dag"];
10->5 [style = bold, label=""];
16->1 [style = bold, label=""];
21->2 [style = solid, label="dag"];
0->21 [style = dashed, label="0"];
6->13 [style = bold, label=""];
20->5 [style = solid, label="jobConfig"];
18->21 [style = solid, label="flowExecutionId"];
7->15 [style = dashed, label="0"];
5->7 [style = bold, label=""];
11->8 [style = bold, label=""];
10->20 [style = dashed, label="0"];
18->17 [style = solid, label="flowExecutionId"];
18->21 [style = bold, label=""];
21->11 [style = solid, label="dag"];
0->2 [style = solid, label="dag"];
4->11 [style = bold, label=""];
9->1 [style = bold, label=""];
0->11 [style = solid, label="dag"];
17->4 [style = bold, label=""];
21->12 [style = solid, label="dag"];
13->20 [style = bold, label=""];
}
