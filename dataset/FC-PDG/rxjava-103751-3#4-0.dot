digraph {
19 [style = filled, label = "{RxJavaPlugins.reset()}@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "takeOneAnotherBoundary['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TestSubscriberEx<Flowable<Object>> ts = new Flowable<Object>(){@Override protected void subscribeActual(Subscriber<? super Object> subscriber){subscriber.onSubscribe(new BooleanSubscription())refMain.set(subscriber)}}.window(new Flowable<Object>(){@Override protected void subscribeActual(Subscriber<? super Object> subscriber){subscriber.onSubscribe(new BooleanSubscription())ref.set(subscriber)}}).to(TestHelper.testConsumer())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "!errors.isEmpty()@@@38@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Runnable r1 = new Runnable(){@Override public void run(){refMain.get().onComplete()}}@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "i++@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<Subscriber<? super Object>>()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "TestHelper.assertUndeliverable(errors,0,)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "takeOneAnotherBoundary['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "final TestException ex = new TestException()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ref.get().onNext(1)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "mainCompleteBoundaryErrorRace['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "int i = 0@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "TestObserverEx<Observable<Object>> to = new Observable<Object>(){@Override protected void subscribeActual(Observer<? super Object> observer){observer.onSubscribe(Disposable.empty())refMain.set(observer)}}.window(new Observable<Object>(){@Override protected void subscribeActual(Observer<? super Object> observer){observer.onSubscribe(Disposable.empty())ref.set(observer)}}).to(TestHelper.testConsumer())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final AtomicReference<Observer<? super Object>> refMain = new AtomicReference<Observer<? super Object>>()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final AtomicReference<Subscriber<? super Object>> refMain = new AtomicReference<Subscriber<? super Object>>()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final AtomicReference<Observer<? super Object>> ref = new AtomicReference<Observer<? super Object>>()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ts.assertValueCount(1).assertTerminated()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "to.assertValueCount(1).assertNotTerminated()@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "i < TestHelper.RACE_LONG_LOOPS@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Runnable r2 = new Runnable(){@Override public void run(){ref.get().onError(ex)}}@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "to.assertValueCount(1).assertNotTerminated().dispose()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "List<Throwable> errors = TestHelper.trackPluginErrors()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "TestHelper.race(r1,r2)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21->11 [style = bold, label=""];
4->6 [style = bold, label=""];
23->9 [style = bold, label=""];
13->21 [style = dotted, label="true"];
14->16 [style = bold, label=""];
10->23 [style = bold, label=""];
12->13 [style = solid, label="i"];
2->5 [style = bold, label=""];
22->12 [style = solid, label="i"];
20->22 [style = bold, label=""];
13->11 [style = dotted, label="true"];
20->14 [style = solid, label="ex"];
13->16 [style = dotted, label="true"];
15->19 [style = bold, label=""];
13->10 [style = dotted, label="true"];
17->14 [style = bold, label=""];
11->15 [style = bold, label=""];
13->9 [style = dotted, label="true"];
13->17 [style = dotted, label="true"];
0->1 [style = bold, label=""];
13->18 [style = bold, label=""];
6->2 [style = bold, label=""];
13->23 [style = dotted, label="true"];
12->13 [style = bold, label=""];
14->16 [style = solid, label="r2"];
18->15 [style = solid, label="errors"];
16->21 [style = bold, label=""];
13->18 [style = dotted, label="true"];
9->17 [style = bold, label=""];
11->19 [style = bold, label=""];
18->10 [style = bold, label=""];
1->4 [style = bold, label=""];
11->15 [style = dotted, label="true"];
5->3 [style = bold, label=""];
7->1 [style = bold, label=""];
22->13 [style = solid, label="i"];
13->12 [style = dotted, label="true"];
19->12 [style = bold, label=""];
13->14 [style = dotted, label="true"];
8->20 [style = bold, label=""];
22->13 [style = bold, label=""];
17->16 [style = solid, label="r1"];
}
