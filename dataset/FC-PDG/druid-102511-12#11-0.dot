digraph {
24 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "kafkaProducer.commitTransaction()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,1L,1,0L))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@71@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "SegmentDescriptor desc5 = SD(task,\"2011/P1D\",1)@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "kafkaProducer.beginTransaction()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "final Map<Integer,Long> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "kafkaProducer.commitTransaction()@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "kafkaProducer.beginTransaction()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "i++@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "int i = numToAdd@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,checkpoint.getPartitionSequenceNumberMap())))))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint2 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,0L))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint1 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,3L,1,0L))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "int numToAdd = records.size() - 2@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Thread.sleep(10)@@@29@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "SegmentDescriptor desc7 = SD(task,\"2013/P1D\",0)@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "SegmentDescriptor desc6 = SD(task,\"2012/P1D\",0)@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "kafkaProducer.initTransactions()@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "intermediateHandoffPeriod = new Period().withSeconds(0)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@34@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "maxTotalRows = 3L@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "testTimeBasedIncrementalHandOff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamPartitions(topic,currentOffsets)),new KafkaDataSourceMetadata(new SeekableStreamPartitions(topic,nextOffsets)))))@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
68 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)))))@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@69@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "SegmentDescriptor desc3 = SD(task,\"2010/P1D\",0)@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionSequenceNumberMap().equals(currentOffsets))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@28@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Thread.sleep(10)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Assert.assertTrue(checkpoint2.getPartitionSequenceNumberMap().equals(nextOffsets))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "Thread.sleep(10)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "i < numToAdd@@@14@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "insertData()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@17@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L,1,0L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "int i = 0@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "kafkaProducer.initTransactions()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "SegmentDescriptor desc4 = SD(task,\"2011/P1D\",0)@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "i < records.size()@@@41@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L,1,0L))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testTimeBasedIncrementalHandOff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "i++@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->30 [style = bold, label=""];
14->24 [style = bold, label=""];
70->80 [style = bold, label=""];
29->15 [style = bold, label=""];
55->68 [style = bold, label=""];
64->36 [style = bold, label=""];
4->56 [style = dashed, label="0"];
18->22 [style = solid, label="desc1"];
10->50 [style = dashed, label="0"];
14->18 [style = solid, label="task"];
79->73 [style = solid, label="desc2"];
2->32 [style = dashed, label="0"];
13->6 [style = solid, label="task"];
12->14 [style = solid, label="startPartitions"];
43->78 [style = bold, label=""];
3->62 [style = bold, label=""];
2->20 [style = solid, label="desc2"];
79->49 [style = bold, label=""];
9->16 [style = bold, label=""];
72->74 [style = solid, label="desc7"];
28->41 [style = dashed, label="0"];
67->55 [style = solid, label="nextOffsets"];
1->21 [style = bold, label=""];
66->74 [style = solid, label="desc1"];
25->19 [style = bold, label=""];
77->60 [style = bold, label=""];
45->43 [style = solid, label="numToAdd"];
54->53 [style = bold, label=""];
4->8 [style = bold, label=""];
23->17 [style = bold, label=""];
20->22 [style = solid, label="currentOffsets"];
13->80 [style = solid, label="task"];
32->20 [style = bold, label=""];
13->66 [style = solid, label="task"];
18->33 [style = dashed, label="0"];
8->13 [style = solid, label="startPartitions"];
42->76 [style = bold, label=""];
2->20 [style = bold, label=""];
12->28 [style = bold, label=""];
19->12 [style = bold, label=""];
10->14 [style = bold, label=""];
51->54 [style = bold, label=""];
50->37 [style = bold, label=""];
14->32 [style = solid, label="task"];
52->45 [style = bold, label=""];
20->56 [style = solid, label="currentOffsets"];
14->24 [style = solid, label="task"];
6->53 [style = dashed, label="0"];
57->47 [style = dotted, label="true"];
80->74 [style = solid, label="desc6"];
71->75 [style = bold, label=""];
49->42 [style = solid, label="desc3"];
31->11 [style = bold, label=""];
61->38 [style = bold, label=""];
16->51 [style = dashed, label="0"];
70->76 [style = solid, label="desc5"];
58->39 [style = bold, label=""];
66->39 [style = solid, label="desc1"];
47->57 [style = bold, label=""];
34->71 [style = bold, label=""];
29->27 [style = bold, label=""];
22->38 [style = bold, label=""];
18->20 [style = solid, label="desc1"];
14->33 [style = solid, label="task"];
15->8 [style = solid, label="currentOffsets"];
13->49 [style = solid, label="task"];
43->60 [style = dotted, label="true"];
21->7 [style = bold, label=""];
26->18 [style = dotted, label="true"];
11->17 [style = bold, label=""];
45->46 [style = bold, label=""];
27->29 [style = bold, label=""];
37->13 [style = bold, label=""];
53->64 [style = bold, label=""];
5->22 [style = bold, label=""];
36->66 [style = bold, label=""];
41->50 [style = bold, label=""];
57->35 [style = bold, label=""];
79->74 [style = solid, label="desc2"];
26->20 [style = bold, label=""];
13->65 [style = solid, label="task"];
13->72 [style = solid, label="task"];
16->13 [style = bold, label=""];
6->26 [style = bold, label=""];
8->41 [style = bold, label=""];
17->1 [style = bold, label=""];
62->51 [style = bold, label=""];
1->52 [style = bold, label=""];
63->59 [style = bold, label=""];
80->72 [style = bold, label=""];
65->76 [style = solid, label="desc4"];
68->3 [style = bold, label=""];
43->77 [style = bold, label=""];
18->26 [style = bold, label=""];
0->11 [style = bold, label=""];
49->74 [style = solid, label="desc3"];
49->65 [style = bold, label=""];
80->63 [style = solid, label="desc6"];
30->9 [style = bold, label=""];
78->15 [style = bold, label=""];
12->16 [style = solid, label="startPartitions"];
69->40 [style = bold, label=""];
65->74 [style = solid, label="desc4"];
15->4 [style = solid, label="currentOffsets"];
32->3 [style = solid, label="desc2"];
25->14 [style = solid, label="consumerProps"];
2->3 [style = solid, label="desc2"];
39->73 [style = bold, label=""];
26->64 [style = dashed, label="0"];
67->68 [style = solid, label="nextOffsets"];
7->45 [style = dashed, label="0"];
9->62 [style = dashed, label="0"];
38->34 [style = bold, label=""];
75->47 [style = solid, label="i"];
20->54 [style = solid, label="currentOffsets"];
33->32 [style = bold, label=""];
72->59 [style = solid, label="desc7"];
46->69 [style = bold, label=""];
13->6 [style = bold, label=""];
40->43 [style = bold, label=""];
60->43 [style = bold, label=""];
38->61 [style = dotted, label="true"];
74->58 [style = bold, label=""];
40->60 [style = solid, label="i"];
37->13 [style = solid, label="endPartitions"];
17->14 [style = solid, label="baseSequenceName"];
72->74 [style = bold, label=""];
28->10 [style = bold, label=""];
40->43 [style = solid, label="i"];
20->56 [style = bold, label=""];
65->70 [style = bold, label=""];
13->79 [style = solid, label="task"];
57->35 [style = dotted, label="true"];
14->2 [style = solid, label="task"];
29->27 [style = dotted, label="true"];
11->23 [style = dotted, label="true"];
10->14 [style = solid, label="endPartitions"];
45->75 [style = solid, label="numToAdd"];
75->57 [style = bold, label=""];
24->29 [style = bold, label=""];
38->61 [style = bold, label=""];
18->2 [style = bold, label=""];
15->13 [style = solid, label="consumerProps"];
47->57 [style = solid, label="i"];
8->51 [style = solid, label="startPartitions"];
13->70 [style = solid, label="task"];
20->5 [style = bold, label=""];
57->48 [style = bold, label=""];
22->3 [style = bold, label=""];
73->42 [style = bold, label=""];
20->51 [style = solid, label="currentOffsets"];
75->57 [style = solid, label="i"];
67->55 [style = bold, label=""];
33->20 [style = solid, label="desc1"];
32->20 [style = solid, label="desc2"];
48->67 [style = bold, label=""];
15->4 [style = bold, label=""];
35->47 [style = bold, label=""];
56->22 [style = bold, label=""];
44->11 [style = bold, label=""];
70->74 [style = solid, label="desc5"];
67->54 [style = solid, label="nextOffsets"];
7->25 [style = bold, label=""];
17->13 [style = solid, label="baseSequenceName"];
43->77 [style = dotted, label="true"];
33->22 [style = solid, label="desc1"];
60->43 [style = solid, label="i"];
26->33 [style = bold, label=""];
11->23 [style = bold, label=""];
76->63 [style = bold, label=""];
66->79 [style = bold, label=""];
26->18 [style = bold, label=""];
}
