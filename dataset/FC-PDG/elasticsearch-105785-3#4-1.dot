digraph {
17 [style = filled, label = "assertThat(actualItemResponse,instanceOf())@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "testExecuteItemWithFailure['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(exception,instanceOf())@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "Pipeline pipeline = new Pipeline(\"_id\",\"_description\",version,new CompoundProcessor(processor1,processor2))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "CountDownLatch latch = new CountDownLatch(1)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult)actualItemResponse@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "SimulateDocumentResult actualItemResponse = executionService.executeDocument(pipeline,ingestDocument,false)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "SimulateDocumentResult actualItemResponse = holder.get()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "Processor processor2 = new DropProcessor.Factory().create(Map.of(),null,Map.of())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "AtomicReference<SimulateDocumentResult> holder = new AtomicReference<>()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertThat(exception.getMessage(),equalTo(\"java.lang.IllegalArgumentException: java.lang.RuntimeException: processor failed\"))@@@16@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(simulateDocumentBaseResult.getIngestDocument(),nullValue())@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "assertThat(simulateDocumentBaseResult.getFailure(),instanceOf())@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertThat(processor.getInvokedCounter(),equalTo(1))@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertThat(processor.getInvokedCounter(),equalTo(1))@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(simulateDocumentBaseResult.getFailure(),nullValue())@@@11@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(simulateDocumentBaseResult.getIngestDocument(),nullValue())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(exception,instanceOf())@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(simulateDocumentBaseResult.getIngestDocument(),nullValue())@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(simulateDocumentBaseResult.getFailure(),instanceOf())@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Exception exception = simulateDocumentBaseResult.getFailure()@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "executionService.executeDocument(pipeline,ingestDocument,false,null)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "TestProcessor processor1 = new TestProcessor(null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult)actualItemResponse@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "latch.await()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Exception exception = simulateDocumentBaseResult.getFailure()@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "TestProcessor processor = new TestProcessor(null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Pipeline pipeline = new Pipeline(\"_id\",\"_description\",version,new CompoundProcessor(processor,processor))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(exception.getMessage(),equalTo(\"java.lang.IllegalArgumentException: java.lang.RuntimeException: processor failed\"))@@@24@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "testExecuteItemWithFailure['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "assertThat(processor1.getInvokedCounter(),equalTo(1))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(actualItemResponse,instanceOf())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testDropDocument['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5->12 [style = solid, label="pipeline"];
22->25 [style = bold, label=""];
1->4 [style = bold, label=""];
0->9 [style = bold, label=""];
28->11 [style = solid, label="actualItemResponse"];
11->1 [style = solid, label="actualItemResponse"];
3->26 [style = dashed, label="0"];
24->16 [style = solid, label="actualItemResponse"];
14->23 [style = solid, label="exception"];
19->12 [style = bold, label=""];
7->1 [style = dashed, label="0"];
29->31 [style = bold, label=""];
2->32 [style = dashed, label="0"];
12->20 [style = bold, label=""];
5->15 [style = bold, label=""];
3->6 [style = bold, label=""];
28->26 [style = bold, label=""];
30->32 [style = bold, label=""];
7->0 [style = bold, label=""];
25->14 [style = bold, label=""];
9->10 [style = bold, label=""];
5->11 [style = solid, label="pipeline"];
15->19 [style = bold, label=""];
16->22 [style = bold, label=""];
18->2 [style = bold, label=""];
27->6 [style = bold, label=""];
26->11 [style = bold, label=""];
4->7 [style = bold, label=""];
32->29 [style = bold, label=""];
31->28 [style = solid, label="pipeline"];
6->1 [style = bold, label=""];
13->17 [style = bold, label=""];
14->23 [style = bold, label=""];
8->2 [style = bold, label=""];
23->21 [style = bold, label=""];
11->3 [style = bold, label=""];
11->6 [style = solid, label="actualItemResponse"];
2->5 [style = solid, label="processor"];
11->27 [style = bold, label=""];
0->9 [style = solid, label="exception"];
5->11 [style = bold, label=""];
31->28 [style = bold, label=""];
24->17 [style = solid, label="actualItemResponse"];
32->31 [style = solid, label="processor1"];
29->31 [style = solid, label="processor2"];
20->24 [style = bold, label=""];
28->27 [style = solid, label="actualItemResponse"];
17->16 [style = bold, label=""];
2->5 [style = bold, label=""];
24->13 [style = bold, label=""];
}
