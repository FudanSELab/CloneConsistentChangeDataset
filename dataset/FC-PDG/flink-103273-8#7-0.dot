digraph {
57 [style = filled, label = "testProcessingTimeTimersDontInterfere['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testHarness1.processWatermark(10L)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testHarness.processElement(new Tuple2<>(key1,\"SET_STATE:HELLO\"),0)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "OperatorSubtaskState snapshot = testHarness.snapshot(0,0)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testHarness1.setProcessingTime(10L)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertTrue(extractResult(testHarness2).isEmpty())@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "testHarness.open()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "testHarness.setProcessingTime(0L)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertTrue(extractResult(testHarness2).isEmpty())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(extractResult(testHarness2).isEmpty())@@@51@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "testHarness2.open()@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "assertThat(extractResult(testHarness),contains(\"ON_PROC_TIME:CIAO\"))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testHarness1.setup()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testHarness1.open()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testHarness.processElement(new Tuple2<>(key1,\"SET_PROC_TIME_TIMER:10\"),0)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertThat(extractResult(testHarness2),contains(\"ON_EVENT_TIME:CIAO\"))@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testHarness2.processWatermark(20L)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testHarness.processElement(new Tuple2<>(key2,\"SET_EVENT_TIME_TIMER:20\"),0)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "OperatorSubtaskState initState1 = AbstractStreamOperatorTestHarness.repartitionOperatorState(snapshot,maxParallelism,1,2,0)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness2 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator2,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,2,1)@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testHarness2.setProcessingTime(20L)@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "OperatorSubtaskState initState2 = AbstractStreamOperatorTestHarness.repartitionOperatorState(snapshot,maxParallelism,1,2,1)@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "testHarness1.processWatermark(20L)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testHarness1.initializeState(snapshot)@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(testOperator,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,1,0)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(extractResult(testHarness).isEmpty())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int key1 = getKeyInKeyGroupRange(subKeyGroupRange1,maxParallelism)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "KeyGroupRange subKeyGroupRange2 = new KeyGroupRange(subKeyGroupRange1.getEndKeyGroup() + 1,maxParallelism - 1)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(extractResult(testHarness1),contains(\"ON_EVENT_TIME:HELLO\"))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testHarness.processWatermark(0L)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "testHarness2.setProcessingTime(10L)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testHarness.processElement(new Tuple2<>(key2,\"SET_STATE:CIAO\"),0)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testStateAndTimerStateShufflingScalingUp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "final int maxParallelism = 10@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "testHarness.processElement(new Tuple2<>(1,\"SET_STATE:CIAO\"),0)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "int key2 = getKeyInKeyGroupRange(subKeyGroupRange2,maxParallelism)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testHarness2.setup()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "TestOperator testOperator1 = new TestOperator()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testHarness.processElement(new Tuple2<>(0,\"SET_STATE:HELLO\"),0)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "assertThat(extractResult(testHarness),contains(\"ON_PROC_TIME:HELLO\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "TestOperator testOperator = new TestOperator()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testHarness2.initializeState(snapshot)@@@39@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "testHarness2.processWatermark(10L)@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness1 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator1,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,2,0)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "testHarness2.initializeState(initState2)@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
50 [style = filled, label = "testHarness1.initializeState(initState1)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "testHarness.processElement(new Tuple2<>(key2,\"SET_PROC_TIME_TIMER:20\"),0)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testHarness1.setProcessingTime(20L)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testHarness.processElement(new Tuple2<>(key1,\"SET_EVENT_TIME_TIMER:10\"),0)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "TestOperator testOperator2 = new TestOperator()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testHarness.processElement(new Tuple2<>(0,\"SET_PROC_TIME_TIMER:10\"),0)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(testOperator,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "testHarness.setProcessingTime(20L)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "KeyGroupRange subKeyGroupRange1 = new KeyGroupRange(0,(maxParallelism / 2) - 1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertThat(extractResult(testHarness1),contains(\"ON_PROC_TIME:HELLO\"))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "testHarness.processElement(new Tuple2<>(1,\"SET_PROC_TIME_TIMER:20\"),0)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertThat(extractResult(testHarness2),contains(\"ON_PROC_TIME:CIAO\"))@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "testStateAndTimerStateShufflingScalingUp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "testHarness.setProcessingTime(10L)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40->2 [style = bold, label=""];
28->6 [style = bold, label=""];
29->5 [style = bold, label=""];
39->45 [style = solid, label="maxParallelism"];
52->51 [style = solid, label="initState2"];
45->23 [style = solid, label="testHarness2"];
0->46 [style = bold, label=""];
62->54 [style = bold, label=""];
7->19 [style = solid, label="key1"];
21->8 [style = bold, label=""];
34->18 [style = bold, label=""];
5->45 [style = bold, label=""];
43->26 [style = bold, label=""];
39->7 [style = solid, label="maxParallelism"];
9->43 [style = bold, label=""];
12->9 [style = bold, label=""];
41->20 [style = bold, label=""];
48->39 [style = bold, label=""];
53->60 [style = solid, label="testOperator"];
22->25 [style = solid, label="snapshot"];
49->24 [style = bold, label=""];
13->8 [style = dashed, label="0"];
58->62 [style = bold, label=""];
33->42 [style = bold, label=""];
26->15 [style = bold, label=""];
20->37 [style = bold, label=""];
53->60 [style = bold, label=""];
60->56 [style = solid, label="testHarness"];
2->25 [style = bold, label=""];
40->28 [style = solid, label="testHarness1"];
5->45 [style = solid, label="testOperator2"];
21->13 [style = solid, label="key2"];
14->16 [style = bold, label=""];
10->61 [style = dashed, label="0"];
21->41 [style = solid, label="key2"];
39->34 [style = bold, label=""];
27->30 [style = bold, label=""];
22->16 [style = solid, label="snapshot"];
51->44 [style = bold, label=""];
11->12 [style = bold, label=""];
23->3 [style = bold, label=""];
24->40 [style = bold, label=""];
8->38 [style = bold, label=""];
29->52 [style = bold, label=""];
22->49 [style = bold, label=""];
16->51 [style = dashed, label="0"];
6->4 [style = bold, label=""];
61->55 [style = bold, label=""];
45->14 [style = bold, label=""];
52->5 [style = bold, label=""];
39->21 [style = solid, label="maxParallelism"];
7->36 [style = solid, label="key1"];
22->52 [style = solid, label="snapshot"];
19->41 [style = bold, label=""];
19->59 [style = dashed, label="0"];
1->56 [style = bold, label=""];
38->60 [style = dashed, label="0"];
34->7 [style = solid, label="subKeyGroupRange1"];
18->7 [style = bold, label=""];
39->52 [style = solid, label="maxParallelism"];
57->53 [style = bold, label=""];
39->38 [style = solid, label="maxParallelism"];
59->27 [style = bold, label=""];
36->54 [style = dashed, label="0"];
37->10 [style = bold, label=""];
47->31 [style = bold, label=""];
35->39 [style = bold, label=""];
44->33 [style = bold, label=""];
38->27 [style = bold, label=""];
24->40 [style = solid, label="testOperator1"];
4->29 [style = bold, label=""];
8->59 [style = bold, label=""];
17->23 [style = bold, label=""];
42->0 [style = bold, label=""];
8->38 [style = solid, label="testOperator"];
7->20 [style = solid, label="key1"];
60->58 [style = bold, label=""];
54->8 [style = bold, label=""];
13->19 [style = bold, label=""];
36->13 [style = bold, label=""];
16->44 [style = bold, label=""];
31->17 [style = bold, label=""];
39->18 [style = solid, label="maxParallelism"];
39->34 [style = solid, label="maxParallelism"];
25->50 [style = dashed, label="0"];
10->22 [style = bold, label=""];
27->1 [style = bold, label=""];
18->21 [style = solid, label="subKeyGroupRange2"];
30->1 [style = bold, label=""];
22->49 [style = solid, label="snapshot"];
14->51 [style = bold, label=""];
40->9 [style = solid, label="testHarness1"];
56->61 [style = bold, label=""];
41->27 [style = dashed, label="0"];
21->37 [style = solid, label="key2"];
1->36 [style = bold, label=""];
46->47 [style = bold, label=""];
2->50 [style = bold, label=""];
39->40 [style = solid, label="maxParallelism"];
50->11 [style = bold, label=""];
60->55 [style = solid, label="testHarness"];
25->11 [style = bold, label=""];
39->49 [style = solid, label="maxParallelism"];
49->50 [style = solid, label="initState1"];
7->21 [style = bold, label=""];
22->24 [style = bold, label=""];
15->32 [style = bold, label=""];
32->28 [style = bold, label=""];
45->46 [style = solid, label="testHarness2"];
}
