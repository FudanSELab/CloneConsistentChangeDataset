digraph {
73 [style = filled, label = "final IncrementalIndex index = closerRule.closeLater(indexCreator.createIndex(ingestAggregatorFactories.toArray(new AggregatorFactory(((()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "final int dimensionCount = 5@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "final int rows = 50@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Assert.assertEquals(StringUtils.format(\"Failed double sum on dimension %d\",i),expectedVal,result.getValue().getDoubleMetric(StringUtils.format(\"doubleSumResult%s\",i)).intValue())@@@82@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "ingestAggregatorFactories.add(new DoubleSumAggregatorFactory(StringUtils.format(\"doubleSumResult%s\",i),StringUtils.format(\"Dim_%s\",i)))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "++i@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "i < dimensionCount@@@42@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "final ListeningExecutorService indexExecutor = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(concurrentThreads,new ThreadFactoryBuilder().setDaemon(false).setNameFormat(\"index-executor-%d\").setPriority(Thread.MIN_PRIORITY).build()))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "queryAggregatorFactories.add(new DoubleSumAggregatorFactory(StringUtils.format(\"doubleSumResult%s\",i),StringUtils.format(\"doubleSumResult%s\",i)))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(\"xxx\").granularity(Granularities.ALL).intervals(ImmutableList.of(queryInterval)).aggregators(queryAggregatorFactories).build()@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Futures.allAsList(allFutures).get()@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "i < rows@@@16@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "int i = 0@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final Segment incrementalIndexSegment = new IncrementalIndexSegment(incrementalIndex,null)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "i < dimensionCount@@@79@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "allFutures.addAll(indexFutures)@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "final QueryRunnerFactory factory = new TimeseriesQueryRunnerFactory(new TimeseriesQueryQueryToolChest(QueryRunnerTestHelper.noopIntervalChunkingQueryRunnerDecorator()),new TimeseriesQueryEngine(),QueryRunnerTestHelper.NOOP_QUERYWATCHER)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "final int elementsPerThread = 1 << 15@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final List<ListenableFuture<?>> queryFutures = new ArrayList<>()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "i < dimensionCount@@@28@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "queryFutures.add(queryExecutor.submit(new Runnable(){@Override public void run(){QueryRunner<Result<TimeseriesResultValue>> runner = new FinalizeResultsQueryRunner<Result<TimeseriesResultValue>>(factory.createRunner(incrementalIndexSegment),factory.getToolchest())TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(\"xxx\").granularity(Granularities.ALL).intervals(ImmutableList.of(queryInterval)).aggregators(queryAggregatorFactories).build()Map<String,Object> context = new HashMap<String,Object>()List<Result<TimeseriesResultValue>> results = runner.run(QueryPlus.wrap(query),context).toList()for (Result<TimeseriesResultValue> result : results){if (someoneRan.get()) {Assert.assertTrue(result.getValue().getDoubleMetric(\"doubleSumResult0\") > 0)}}if (currentlyRunning.get() > 0) {concurrentlyRan.set(true)}}}))@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final AtomicBoolean someoneRan = new AtomicBoolean(false)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "queryAggregatorFactories.add(new CountAggregatorFactory(\"rows\"))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(elementsPerThread,result.getValue().getLongMetric(\"rows\").intValue())@@@77@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "List<Result<TimeseriesResultValue>> results = runner.run(QueryPlus.wrap(query),new HashMap<String,Object>()).toList()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "int i = 0@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "int i = 0@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "Assert.assertEquals(rows * (isRollup? 1: 2),result.getValue().getLongMetric(\"rows\").intValue())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "Assert.assertEquals(\"Failed double sum on dimension \" + i,2 * rows,result.getValue().getDoubleMetric(\"doubleSumResult\" + i).intValue())@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "i < dimensionCount@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "i++@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "boolean isRollup = index.isRollup()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "queryExecutor.shutdown()@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final IncrementalIndex incrementalIndex = this.incrementalIndex.getConstructor(,,,,,).newInstance(new IncrementalIndexSchema.Builder().withMetrics(factories).build(),true,true,false,true,elementsPerThread * taskCount)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testConcurrentAddRead['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "int i = 0@@@78@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "index.add(getLongRow(timestamp + i,dimensionCount))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "queryAggregatorFactories.add(new LongSumAggregatorFactory(StringUtils.format(\"sumResult%s\",i),StringUtils.format(\"sumResult%s\",i)))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final AtomicInteger currentlyRunning = new AtomicInteger(0)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final int concurrentThreads = 3@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final ListeningExecutorService queryExecutor = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(concurrentThreads,new ThreadFactoryBuilder().setDaemon(false).setNameFormat(\"query-executor-%d\").build()))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "testConcurrentAddRead['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "queryAggregatorFactories.add(new DoubleSumAggregatorFactory(StringUtils.format(\"doubleSumResult%s\",i),StringUtils.format(\"doubleSumResult%s\",i)))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "final QueryRunner<Result<TimeseriesResultValue>> runner = new FinalizeResultsQueryRunner<Result<TimeseriesResultValue>>(factory.createRunner(incrementalIndexSegment),factory.getToolchest())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "final long timestamp = System.currentTimeMillis()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "final int taskCount = 30@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "queryAggregatorFactories.add(new CountAggregatorFactory(\"rows\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "queryAggregatorFactories.add(new LongSumAggregatorFactory(StringUtils.format(\"sumResult%s\",i),StringUtils.format(\"sumResult%s\",i)))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "j++@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "ingestAggregatorFactories.add(new CountAggregatorFactory(\"rows\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "i < rows@@@21@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "i++@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "final ArrayList<AggregatorFactory> queryAggregatorFactories = new ArrayList<>()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "++i@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "Result<TimeseriesResultValue> result = Iterables.getOnlyElement(results)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "QueryRunner<Result<TimeseriesResultValue>> runner = new FinalizeResultsQueryRunner<Result<TimeseriesResultValue>>(factory.createRunner(incrementalIndexSegment),factory.getToolchest())@@@71@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "++i@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "int i = 0@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "index.add(getLongRow(timestamp + i,dimensionCount))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(\"xxx\").granularity(Granularities.ALL).intervals(ImmutableList.of(Intervals.of(\"2000/2030\"))).aggregators(queryAggregatorFactories).build()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ingestAggregatorFactories.add(new LongSumAggregatorFactory(StringUtils.format(\"sumResult%s\",i),StringUtils.format(\"Dim_%s\",i)))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "j < taskCount@@@27@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "allFutures.addAll(queryFutures)@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "final Segment incrementalIndexSegment = new IncrementalIndexSegment(index,null)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "int j = 0@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "Assert.assertEquals(\"Failed long sum on dimension \" + i,2 * rows,result.getValue().getLongMetric(\"sumResult\" + i).intValue())@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "++i@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "++i@@@80@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "final Interval queryInterval = Intervals.of(\"1900-01-01T00:00:00Z/2900-01-01T00:00:00Z\")@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "indexExecutor.shutdown()@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "int i = 0@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "testSingleThreadedIndexingAndQuery['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "final List<ListenableFuture<?>> indexFutures = new ArrayList<>()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Map<String,Object> context = new HashMap<String,Object>()@@@73@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final int expectedVal = elementsPerThread * taskCount@@@75@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "indexFutures.add(indexExecutor.submit(new Runnable(){@Override public void run(){currentlyRunning.incrementAndGet()try {for (int i = 0 i < elementsPerThread i++){incrementalIndex.add(getLongRow(timestamp + i,1,dimensionCount))}}catch (IndexSizeExceededException e) currentlyRunning.decrementAndGet()someoneRan.set(true)}}))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(StringUtils.format(\"Failed long sum on dimension %d\",i),expectedVal,result.getValue().getLongMetric(StringUtils.format(\"sumResult%s\",i)).intValue())@@@81@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final AtomicBoolean concurrentlyRan = new AtomicBoolean(false)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final QueryRunnerFactory factory = new TimeseriesQueryRunnerFactory(new TimeseriesQueryQueryToolChest(QueryRunnerTestHelper.noopIntervalChunkingQueryRunnerDecorator()),new TimeseriesQueryEngine(),QueryRunnerTestHelper.NOOP_QUERYWATCHER)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "final ArrayList<AggregatorFactory> queryAggregatorFactories = new ArrayList<>(dimensionCount + 1)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "List<ListenableFuture<?>> allFutures = new ArrayList<>(queryFutures.size() + indexFutures.size())@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "final ArrayList<AggregatorFactory> ingestAggregatorFactories = new ArrayList<>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "List<Result<TimeseriesResultValue>> results = runner.run(QueryPlus.wrap(query),context).toList()@@@74@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28->21 [style = bold, label=""];
59->56 [style = bold, label=""];
37->7 [style = bold, label=""];
11->29 [style = bold, label=""];
30->22 [style = solid, label="elementsPerThread"];
46->72 [style = bold, label=""];
32->2 [style = solid, label="incrementalIndex"];
29->79 [style = dashed, label="0"];
18->20 [style = bold, label=""];
2->4 [style = bold, label=""];
21->22 [style = bold, label=""];
56->58 [style = bold, label=""];
64->74 [style = solid, label="results"];
66->67 [style = bold, label=""];
16->38 [style = solid, label="j"];
54->10 [style = bold, label=""];
44->39 [style = dotted, label="true"];
6->13 [style = solid, label="queryFutures"];
14->19 [style = bold, label=""];
25->12 [style = bold, label=""];
79->66 [style = solid, label="dimensionCount"];
66->77 [style = dotted, label="true"];
6->2 [style = bold, label=""];
57->71 [style = dotted, label="true"];
79->50 [style = solid, label="dimensionCount"];
72->49 [style = bold, label=""];
60->58 [style = solid, label="timestamp"];
81->68 [style = bold, label=""];
16->14 [style = solid, label="j"];
52->5 [style = dotted, label="true"];
78->54 [style = solid, label="i"];
71->69 [style = bold, label=""];
25->42 [style = bold, label=""];
70->55 [style = bold, label=""];
24->27 [style = bold, label=""];
10->25 [style = solid, label="i"];
61->56 [style = solid, label="i"];
53->79 [style = bold, label=""];
15->25 [style = bold, label=""];
73->60 [style = bold, label=""];
29->21 [style = solid, label="taskCount"];
52->59 [style = bold, label=""];
17->1 [style = bold, label=""];
14->17 [style = bold, label=""];
26->24 [style = bold, label=""];
76->65 [style = bold, label=""];
25->12 [style = dotted, label="true"];
54->25 [style = dotted, label="true"];
40->8 [style = bold, label=""];
30->21 [style = solid, label="elementsPerThread"];
5->50 [style = solid, label="i"];
78->25 [style = solid, label="i"];
29->14 [style = solid, label="taskCount"];
36->6 [style = bold, label=""];
66->82 [style = dotted, label="true"];
78->54 [style = bold, label=""];
48->54 [style = bold, label=""];
54->48 [style = dotted, label="true"];
5->43 [style = bold, label=""];
21->40 [style = solid, label="expectedVal"];
23->39 [style = solid, label="i"];
35->28 [style = bold, label=""];
44->40 [style = dotted, label="true"];
12->31 [style = bold, label=""];
57->80 [style = bold, label=""];
38->14 [style = solid, label="j"];
45->29 [style = bold, label=""];
49->64 [style = bold, label=""];
80->71 [style = bold, label=""];
12->10 [style = dashed, label="0"];
65->75 [style = bold, label=""];
59->56 [style = solid, label="i"];
58->61 [style = bold, label=""];
21->39 [style = solid, label="expectedVal"];
55->5 [style = solid, label="i"];
57->80 [style = dotted, label="true"];
54->73 [style = bold, label=""];
0->51 [style = dashed, label="0"];
68->80 [style = solid, label="i"];
2->37 [style = solid, label="incrementalIndexSegment"];
77->66 [style = bold, label=""];
55->52 [style = bold, label=""];
30->32 [style = solid, label="elementsPerThread"];
31->15 [style = bold, label=""];
56->61 [style = dotted, label="true"];
7->35 [style = bold, label=""];
44->39 [style = bold, label=""];
2->1 [style = solid, label="incrementalIndexSegment"];
70->65 [style = solid, label="rows"];
5->17 [style = solid, label="timestamp"];
50->5 [style = bold, label=""];
42->33 [style = bold, label=""];
9->10 [style = bold, label=""];
57->63 [style = bold, label=""];
14->17 [style = dotted, label="true"];
33->5 [style = bold, label=""];
79->57 [style = solid, label="dimensionCount"];
66->67 [style = dotted, label="true"];
25->48 [style = bold, label=""];
68->57 [style = solid, label="i"];
14->1 [style = dotted, label="true"];
55->52 [style = solid, label="i"];
68->57 [style = bold, label=""];
0->42 [style = solid, label="concurrentThreads"];
10->31 [style = solid, label="i"];
23->44 [style = solid, label="i"];
74->76 [style = bold, label=""];
59->61 [style = solid, label="i"];
27->37 [style = bold, label=""];
25->31 [style = dotted, label="true"];
14->38 [style = dotted, label="true"];
19->13 [style = bold, label=""];
70->82 [style = solid, label="rows"];
70->67 [style = solid, label="rows"];
31->25 [style = dashed, label="0"];
46->49 [style = solid, label="incrementalIndexSegment"];
30->32 [style = bold, label=""];
61->56 [style = bold, label=""];
8->44 [style = bold, label=""];
43->36 [style = bold, label=""];
79->58 [style = solid, label="dimensionCount"];
13->3 [style = bold, label=""];
0->30 [style = bold, label=""];
60->70 [style = bold, label=""];
60->50 [style = solid, label="timestamp"];
62->81 [style = bold, label=""];
55->50 [style = solid, label="i"];
76->65 [style = solid, label="isRollup"];
63->46 [style = bold, label=""];
23->44 [style = bold, label=""];
47->78 [style = bold, label=""];
70->52 [style = solid, label="rows"];
10->12 [style = solid, label="i"];
82->77 [style = bold, label=""];
4->18 [style = bold, label=""];
20->34 [style = bold, label=""];
5->52 [style = bold, label=""];
51->47 [style = bold, label=""];
56->58 [style = dotted, label="true"];
44->8 [style = dotted, label="true"];
56->62 [style = bold, label=""];
3->26 [style = bold, label=""];
38->14 [style = bold, label=""];
52->50 [style = dotted, label="true"];
79->51 [style = bold, label=""];
52->50 [style = bold, label=""];
25->15 [style = dotted, label="true"];
10->25 [style = bold, label=""];
23->40 [style = solid, label="i"];
54->10 [style = dotted, label="true"];
70->56 [style = solid, label="rows"];
29->0 [style = bold, label=""];
64->74 [style = bold, label=""];
75->66 [style = bold, label=""];
5->52 [style = solid, label="i"];
34->16 [style = bold, label=""];
16->14 [style = bold, label=""];
61->58 [style = solid, label="i"];
75->82 [style = solid, label="i"];
30->17 [style = solid, label="elementsPerThread"];
41->9 [style = bold, label=""];
75->67 [style = solid, label="i"];
36->3 [style = solid, label="indexFutures"];
57->69 [style = dotted, label="true"];
67->82 [style = bold, label=""];
1->38 [style = bold, label=""];
29->32 [style = solid, label="taskCount"];
39->40 [style = bold, label=""];
10->17 [style = solid, label="i"];
78->10 [style = solid, label="i"];
22->23 [style = bold, label=""];
73->46 [style = solid, label="index"];
79->54 [style = solid, label="dimensionCount"];
59->58 [style = solid, label="i"];
32->41 [style = bold, label=""];
0->33 [style = solid, label="concurrentThreads"];
44->22 [style = bold, label=""];
75->66 [style = solid, label="i"];
68->71 [style = solid, label="i"];
69->57 [style = bold, label=""];
}
