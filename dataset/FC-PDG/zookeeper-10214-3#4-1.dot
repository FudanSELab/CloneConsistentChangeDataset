digraph {
14 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "handshakeCompletedLock@@@16@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,false,DATA_TO_CLIENT)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "!handshakeCompleted@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "serverThread.start()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "sslSocket.getOutputStream().write(DATA_FROM_CLIENT)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "byte(( buf = new byte((((@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Socket secureClientSocket = null@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "{forceClose(secureClientSocket)serverThread.shutdown(TIMEOUT)}@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "sslSocket.getOutputStream().flush()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(handshakeCompleted)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "byte(( buf = new byte((((@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "handshakeCompletedLock.wait(TIMEOUT)@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,false,DATA_TO_CLIENT)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertArrayEquals(DATA_TO_CLIENT,buf)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Assert.assertArrayEquals(DATA_TO_CLIENT,buf)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertEquals(buf.length,bytesRead)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "int bytesRead = secureClientSocket.getInputStream().read(buf,0,buf.length)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Socket badClientSocket = connectWithoutSSL()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "secureClientSocket = connectWithSSL()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "forceClose(badClientSocket)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "secureClientSocket.getOutputStream().write(DATA_FROM_CLIENT)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testConnectWithSSLToStrictServer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "!handshakeCompleted@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "secureClientSocket.getOutputStream().flush()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,false,DATA_TO_CLIENT)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int bytesRead = sslSocket.getInputStream().read(buf,0,buf.length)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testTLSDetectionNonBlockingStrictServerDisconnectedClient['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testConnectWithSSLToStrictServer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "Assert.assertArrayEquals(DATA_TO_CLIENT,buf)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertTrue(handshakeCompleted)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
27->13 [style = bold, label=""];
13->25 [style = bold, label=""];
22->26 [style = bold, label=""];
0->16 [style = bold, label=""];
6->21 [style = dashed, label="0"];
25->28 [style = bold, label=""];
2->0 [style = dotted, label="true"];
7->17 [style = bold, label=""];
10->15 [style = bold, label=""];
10->31 [style = bold, label=""];
4->16 [style = dashed, label="0"];
4->6 [style = bold, label=""];
31->24 [style = bold, label=""];
10->13 [style = solid, label="sslSocket"];
31->24 [style = solid, label="badClientSocket"];
24->32 [style = bold, label=""];
12->2 [style = dotted, label="true"];
29->0 [style = bold, label=""];
18->19 [style = bold, label=""];
23->4 [style = bold, label=""];
1->19 [style = dashed, label="0"];
8->20 [style = dashed, label="0"];
3->7 [style = solid, label="buf"];
19->11 [style = bold, label=""];
32->28 [style = solid, label="secureClientSocket"];
2->4 [style = bold, label=""];
7->17 [style = solid, label="bytesRead"];
27->6 [style = bold, label=""];
26->11 [style = bold, label=""];
32->33 [style = bold, label=""];
15->5 [style = bold, label=""];
1->11 [style = bold, label=""];
7->14 [style = bold, label=""];
12->29 [style = solid, label="buf"];
4->13 [style = dotted, label="true"];
12->2 [style = bold, label=""];
12->23 [style = solid, label="buf"];
2->0 [style = bold, label=""];
30->12 [style = bold, label=""];
12->29 [style = bold, label=""];
7->14 [style = solid, label="bytesRead"];
0->23 [style = bold, label=""];
12->16 [style = dotted, label="true"];
3->7 [style = bold, label=""];
3->20 [style = solid, label="buf"];
0->4 [style = bold, label=""];
11->10 [style = bold, label=""];
16->21 [style = bold, label=""];
29->0 [style = solid, label="bytesRead"];
6->13 [style = bold, label=""];
4->27 [style = bold, label=""];
20->12 [style = bold, label=""];
4->27 [style = dotted, label="true"];
33->30 [style = bold, label=""];
14->17 [style = dashed, label="0"];
3->8 [style = solid, label="buf"];
7->29 [style = dashed, label="0"];
14->8 [style = bold, label=""];
12->4 [style = dotted, label="true"];
27->6 [style = dotted, label="true"];
9->1 [style = bold, label=""];
8->12 [style = bold, label=""];
21->13 [style = bold, label=""];
17->20 [style = bold, label=""];
2->16 [style = bold, label=""];
}
