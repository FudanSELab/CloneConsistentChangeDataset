digraph {
54 [style = filled, label = "i++@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "SegmentDescriptor desc5 = SD(task,\"2011/P1D\",1)@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "final Map<Integer,Long> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "i < numToAdd@@@12@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "int i = 0@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,true,null,null,false))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "SegmentDescriptor desc7 = SD(task,\"2013/P1D\",0)@@@54@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,nextOffsets)))))@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Thread.sleep(10)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint1 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L,1,0L))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "SegmentDescriptor desc4 = SD(task,\"2011/P1D\",0)@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "testIncrementalHandOff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
61 [style = filled, label = "Thread.sleep(10)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@30@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "maxTotalRows = 3L@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@56@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)))))@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@57@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "int i = numToAdd@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "SegmentDescriptor desc3 = SD(task,\"2010/P1D\",0)@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@24@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@55@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "Assert.assertTrue(checkpoint2.getPartitionSequenceNumberMap().equals(nextOffsets))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@58@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionSequenceNumberMap().equals(currentOffsets))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "kafkaProducer.send(record).get()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "i++@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)))))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint1 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,3L,1,0L))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testIncrementalHandOff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "int numToAdd = records.size() - 2@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint2 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,0L))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@62@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "i < records.size()@@@34@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "maxRowsPerSegment = 2@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null,false))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "SegmentDescriptor desc6 = SD(task,\"2012/P1D\",0)@@@53@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->35 [style = bold, label=""];
61->45 [style = bold, label=""];
58->50 [style = bold, label=""];
28->6 [style = bold, label=""];
29->5 [style = bold, label=""];
49->59 [style = bold, label=""];
13->28 [style = dotted, label="true"];
36->65 [style = solid, label="consumerProps"];
11->14 [style = bold, label=""];
10->22 [style = solid, label="desc7"];
48->29 [style = bold, label=""];
62->54 [style = bold, label=""];
7->8 [style = solid, label="task"];
10->32 [style = bold, label=""];
31->1 [style = bold, label=""];
0->32 [style = solid, label="desc1"];
55->57 [style = solid, label="i"];
10->66 [style = solid, label="desc3"];
49->59 [style = solid, label="nextOffsets"];
37->9 [style = bold, label=""];
13->46 [style = dashed, label="0"];
0->53 [style = bold, label=""];
30->65 [style = bold, label=""];
50->62 [style = dotted, label="true"];
52->47 [style = bold, label=""];
45->61 [style = bold, label=""];
21->36 [style = bold, label=""];
5->0 [style = bold, label=""];
8->32 [style = solid, label="desc3"];
23->13 [style = bold, label=""];
41->31 [style = solid, label="task"];
0->24 [style = bold, label=""];
50->62 [style = bold, label=""];
47->51 [style = bold, label=""];
25->9 [style = solid, label="currentOffsets"];
66->60 [style = bold, label=""];
7->1 [style = solid, label="task"];
35->38 [style = bold, label=""];
12->15 [style = solid, label="desc6"];
7->10 [style = solid, label="task"];
9->29 [style = bold, label=""];
65->10 [style = solid, label="task"];
65->32 [style = solid, label="task"];
17->20 [style = bold, label=""];
17->20 [style = dotted, label="true"];
64->0 [style = bold, label=""];
13->25 [style = bold, label=""];
8->15 [style = solid, label="desc3"];
21->68 [style = dashed, label="0"];
15->34 [style = bold, label=""];
7->3 [style = solid, label="task"];
19->12 [style = bold, label=""];
33->15 [style = bold, label=""];
12->56 [style = solid, label="desc6"];
27->30 [style = bold, label=""];
1->15 [style = solid, label="desc2"];
30->27 [style = bold, label=""];
41->18 [style = solid, label="task"];
41->3 [style = solid, label="task"];
51->55 [style = solid, label="numToAdd"];
54->50 [style = solid, label="i"];
44->49 [style = bold, label=""];
51->58 [style = bold, label=""];
31->32 [style = solid, label="desc5"];
23->37 [style = solid, label="currentOffsets"];
1->32 [style = solid, label="desc6"];
65->33 [style = solid, label="task"];
36->67 [style = dashed, label="0"];
38->41 [style = solid, label="startPartitions"];
7->68 [style = bold, label=""];
44->42 [style = dotted, label="true"];
39->7 [style = bold, label=""];
31->15 [style = solid, label="desc1"];
25->37 [style = bold, label=""];
32->15 [style = solid, label="desc4"];
67->30 [style = bold, label=""];
53->24 [style = bold, label=""];
40->17 [style = bold, label=""];
12->33 [style = bold, label=""];
41->1 [style = solid, label="task"];
29->64 [style = bold, label=""];
39->41 [style = bold, label=""];
41->8 [style = solid, label="task"];
3->32 [style = solid, label="desc4"];
58->50 [style = solid, label="i"];
24->8 [style = bold, label=""];
7->65 [style = solid, label="startPartitions"];
59->48 [style = bold, label=""];
60->56 [style = bold, label=""];
31->34 [style = solid, label="desc5"];
38->37 [style = solid, label="startPartitions"];
44->42 [style = bold, label=""];
46->9 [style = bold, label=""];
4->17 [style = bold, label=""];
45->55 [style = bold, label=""];
39->41 [style = solid, label="endPartitions"];
25->53 [style = solid, label="currentOffsets"];
50->54 [style = dotted, label="true"];
10->15 [style = solid, label="desc3"];
7->0 [style = solid, label="startPartitions"];
8->3 [style = bold, label=""];
65->31 [style = solid, label="task"];
44->57 [style = dotted, label="true"];
24->32 [style = solid, label="desc2"];
32->19 [style = bold, label=""];
1->16 [style = solid, label="desc6"];
11->65 [style = solid, label="baseSequenceName"];
39->7 [style = solid, label="endPartitions"];
36->39 [style = bold, label=""];
38->7 [style = solid, label="startPartitions"];
14->52 [style = dashed, label="0"];
43->17 [style = bold, label=""];
22->66 [style = bold, label=""];
42->57 [style = bold, label=""];
34->16 [style = bold, label=""];
11->7 [style = solid, label="baseSequenceName"];
31->16 [style = solid, label="desc1"];
7->18 [style = bold, label=""];
55->44 [style = solid, label="i"];
57->44 [style = solid, label="i"];
49->53 [style = solid, label="nextOffsets"];
1->22 [style = solid, label="desc2"];
7->24 [style = solid, label="task"];
24->33 [style = solid, label="desc2"];
7->41 [style = dashed, label="0"];
56->63 [style = bold, label=""];
65->23 [style = solid, label="task"];
58->54 [style = solid, label="i"];
41->18 [style = bold, label=""];
11->41 [style = solid, label="baseSequenceName"];
20->11 [style = bold, label=""];
7->18 [style = solid, label="task"];
10->32 [style = solid, label="desc7"];
41->0 [style = solid, label="task"];
32->60 [style = solid, label="desc4"];
68->67 [style = bold, label=""];
3->31 [style = bold, label=""];
65->12 [style = solid, label="task"];
19->60 [style = solid, label="desc5"];
25->64 [style = dashed, label="0"];
30->65 [style = solid, label="endPartitions"];
0->12 [style = solid, label="desc1"];
2->41 [style = solid, label="consumerProps"];
28->13 [style = bold, label=""];
19->15 [style = solid, label="desc5"];
11->52 [style = bold, label=""];
45->61 [style = dotted, label="true"];
25->46 [style = bold, label=""];
16->22 [style = bold, label=""];
2->7 [style = solid, label="consumerProps"];
41->24 [style = solid, label="task"];
54->50 [style = bold, label=""];
23->13 [style = solid, label="currentOffsets"];
14->26 [style = bold, label=""];
41->10 [style = solid, label="task"];
23->28 [style = solid, label="currentOffsets"];
33->63 [style = solid, label="desc7"];
27->30 [style = dotted, label="true"];
26->2 [style = bold, label=""];
55->44 [style = bold, label=""];
25->0 [style = solid, label="currentOffsets"];
33->15 [style = solid, label="desc7"];
3->34 [style = solid, label="desc4"];
7->0 [style = solid, label="task"];
49->48 [style = solid, label="nextOffsets"];
18->27 [style = bold, label=""];
9->45 [style = bold, label=""];
50->36 [style = bold, label=""];
25->46 [style = solid, label="currentOffsets"];
38->21 [style = bold, label=""];
51->50 [style = solid, label="numToAdd"];
57->44 [style = bold, label=""];
27->23 [style = bold, label=""];
65->1 [style = solid, label="task"];
1->10 [style = bold, label=""];
7->31 [style = solid, label="task"];
65->19 [style = solid, label="task"];
6->25 [style = bold, label=""];
13->28 [style = bold, label=""];
17->11 [style = bold, label=""];
65->23 [style = bold, label=""];
}
