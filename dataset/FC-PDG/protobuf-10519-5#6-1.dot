digraph {
1 [style = filled, label = "assertTrue(byteBuffer.remaining() == BYTES.length)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertTrue(byteBuffer.remaining() == referenceBytes.length)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testAsReadOnlyByteBuffer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "testAsReadOnlyByteBuffer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "byte(( roundTripBytes = new byte((((@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(CLASSNAME + \".asReadOnlyByteBuffer() must give back the same bytes\",Arrays.equals(BYTES,roundTripBytes))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertTrue(classUnderTest + \".asReadOnlyByteBuffer() must give back the same bytes\",Arrays.equals(referenceBytes,roundTripBytes))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(byteBuffer.remaining() == BYTES.length).isTrue()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertWithMessage(\"%s.asReadOnlyByteBuffer() must give back the same bytes\",CLASSNAME).that(Arrays.equals(BYTES,roundTripBytes)).isTrue()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "ByteBuffer byteBuffer = stringUnderTest.asReadOnlyByteBuffer()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "byte(( roundTripBytes = new byte((((@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(byteBuffer.isReadOnly())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "byteBuffer.get(roundTripBytes)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(byteBuffer.isReadOnly()).isTrue()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testAsReadOnlyByteBuffer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ByteBuffer byteBuffer = testString.asReadOnlyByteBuffer()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->0 [style = bold, label=""];
0->13 [style = bold, label=""];
11->14 [style = bold, label=""];
2->6 [style = bold, label=""];
1->15 [style = dashed, label="0"];
12->13 [style = solid, label="roundTripBytes"];
12->15 [style = bold, label=""];
1->3 [style = bold, label=""];
12->0 [style = solid, label="roundTripBytes"];
1->10 [style = dashed, label="0"];
15->3 [style = bold, label=""];
3->0 [style = bold, label=""];
0->7 [style = bold, label=""];
6->12 [style = dashed, label="0"];
6->1 [style = bold, label=""];
5->2 [style = bold, label=""];
2->14 [style = dashed, label="0"];
8->2 [style = bold, label=""];
3->9 [style = dashed, label="0"];
0->4 [style = bold, label=""];
4->7 [style = dashed, label="0"];
6->10 [style = bold, label=""];
14->12 [style = bold, label=""];
6->0 [style = solid, label="roundTripBytes"];
10->9 [style = bold, label=""];
6->4 [style = solid, label="roundTripBytes"];
4->13 [style = dashed, label="0"];
}
