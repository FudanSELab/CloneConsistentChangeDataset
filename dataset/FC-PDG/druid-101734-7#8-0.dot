digraph {
1 [style = filled, label = "testQuery(\"SELECT t1.dim1, SUM(t1.cnt)\" + \"FROM druid.foo t1\" + \" INNER JOIN (\" + \" SELECT\" + \" SUM(cnt) AS sum_cnt,\" + \" dim2\" + \" FROM druid.foo\" + \" GROUP BY dim2\" + \" ORDER BY 1 DESC\" + \" LIMIT 2\" + \") t2 ON (t1.dim2 = t2.dim2)\" + \"GROUP BY t1.dim1\" + \"ORDER BY 1\",ImmutableList.of(new TopNQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).granularity(Granularities.ALL).dimension(new DefaultDimensionSpec(\"dim2\",\"d0\")).aggregators(aggregators(new LongSumAggregatorFactory(\"a0\",\"cnt\"))).metric(new NumericTopNMetricSpec(\"a0\")).threshold(2).context(QUERY_CONTEXT_DEFAULT).build(),GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(querySegmentSpec(Filtration.eternity())).setGranularity(Granularities.ALL).setDimFilter(filter).setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\",\"d0\"))).setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\",\"cnt\"))).setLimitSpec(new DefaultLimitSpec(ImmutableList.of(new OrderByColumnSpec(\"d0\",OrderByColumnSpec.Direction.ASCENDING,StringComparators.LEXICOGRAPHIC)),Integer.MAX_VALUE)).setContext(QUERY_CONTEXT_DEFAULT).build()),NullHandling.replaceWithDefault()? ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a21d37,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a21d3c,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a21d41,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a21d46,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a21d4b): ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a21d53,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a21d58))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "testTopNFilterJoin['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "DimFilter filter = NullHandling.replaceWithDefault()? in(\"dim2\",Arrays.asList(null,\"a\"),null): selector(\"dim2\",\"a\",null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testRemovableLeftJoin['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testQuery(\"SELECT t1.dim1, SUM(t1.cnt)\" + \"FROM druid.foo t1\" + \" INNER JOIN (\" + \" SELECT\" + \" SUM(cnt) AS sum_cnt,\" + \" dim2\" + \" FROM druid.foo\" + \" GROUP BY dim2\" + \" ORDER BY 1 DESC\" + \" LIMIT 2\" + \") t2 ON (t1.dim2 = t2.dim2)\" + \"GROUP BY t1.dim1\" + \"ORDER BY 1\",ImmutableList.of(new TopNQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).granularity(Granularities.ALL).dimension(new DefaultDimensionSpec(\"dim2\",\"d0\")).aggregators(new LongSumAggregatorFactory(\"a0\",\"cnt\")).metric(new NumericTopNMetricSpec(\"a0\")).threshold(2).context(QUERY_CONTEXT_DEFAULT).build(),GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(querySegmentSpec(Filtration.eternity())).setGranularity(Granularities.ALL).setDimFilter(filter).setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\",\"d0\"))).setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\",\"cnt\"))).setLimitSpec(new DefaultLimitSpec(ImmutableList.of(new OrderByColumnSpec(\"d0\",OrderByColumnSpec.Direction.ASCENDING,StringComparators.LEXICOGRAPHIC)),Integer.MAX_VALUE)).setContext(QUERY_CONTEXT_DEFAULT).build()),NullHandling.replaceWithDefault()? ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a21e00,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a21e05,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a21e0a,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a21e0f,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a21e14): ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a21e1c,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a21e21))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testQuery(\"SELECT t1.dim1, SUM(t1.cnt)\" + \"FROM druid.foo t1\" + \" LEFT JOIN (\" + \" SELECT\" + \" SUM(cnt) AS sum_cnt,\" + \" dim2\" + \" FROM druid.foo\" + \" GROUP BY dim2\" + \" ORDER BY 1 DESC\" + \" LIMIT 2\" + \") t2 ON (t1.dim2 = t2.dim2)\" + \"GROUP BY t1.dim1\" + \"ORDER BY 1\",ImmutableList.of(GroupByQuery.builder().setDataSource(CalciteTests.DATASOURCE1).setInterval(querySegmentSpec(Filtration.eternity())).setGranularity(Granularities.ALL).setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\",\"d0\"))).setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\",\"cnt\"))).setLimitSpec(new DefaultLimitSpec(ImmutableList.of(new OrderByColumnSpec(\"d0\",OrderByColumnSpec.Direction.ASCENDING,StringComparators.LEXICOGRAPHIC)),Integer.MAX_VALUE)).setContext(QUERY_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a21e80,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a21e85,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a21e8a,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a21e8f,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a21e94,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a21e99))@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testTopNFilterJoin['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
2->0 [style = bold, label=""];
1->3 [style = dashed, label="0"];
5->6 [style = bold, label=""];
0->1 [style = bold, label=""];
4->0 [style = bold, label=""];
}
