digraph {
28 [style = filled, label = "{TestCleanState.closeAndTestClean(client)}@@@45@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "{TestCleanState.closeAndTestClean(client)}@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testBasics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(events.poll(timing.forWaiting().seconds(),TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_UPDATED)@@@35@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "cache2.start()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "cache.getListenable().addListener(new PathChildrenCacheListener(){@Override public void childEvent(CuratorFramework client,PathChildrenCacheEvent event){if (event.getData().getPath().equals(\"/test/one\")) {events.offer(event.getType())}}})@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(events.poll(timing.forWaiting().seconds(),TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_UPDATED)@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "final BlockingQueue<PathChildrenCacheEvent.Type> events2 = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()),\"sup!\")@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),timing.session(),timing.connection(),new RetryOneTime(1))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "client.setData().forPath(\"/test/one\",\"sup!\".getBytes())@@@34@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testBasics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "client.create().forPath(\"/test\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "cache.getListenable().addListener(new PathChildrenCacheListener(){@Override public void childEvent(CuratorFramework client,PathChildrenCacheEvent event){if (event.getData().getPath().equals(\"/test/one\")) {events.offer(event.getType())}}})@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final ExecutorService exec = Executors.newSingleThreadExecutor()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(events2.poll(timing.forWaiting().seconds(),TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_UPDATED)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "cache.start()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(events.poll(timing.forWaiting().seconds(),TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_REMOVED)@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "cache.start()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()),\"sup!\")@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "client.create().forPath(\"/test/one\",\"hey there\".getBytes())@@@31@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "client.start()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Timing timing = new Timing()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(events2.poll(timing.forWaiting().seconds(),TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_ADDED)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "testBasicsOnTwoCachesWithSameExecutor['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(events.poll(timing.forWaiting().seconds(),TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_ADDED)@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(events.poll(timing.forWaiting().seconds(),TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_ADDED)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(new String(cache2.getCurrentData(\"/test/one\").getData()),\"sup!\")@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "client.delete().forPath(\"/test/one\")@@@39@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(events2.poll(timing.forWaiting().seconds(),TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_REMOVED)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "cache2.getListenable().addListener(new PathChildrenCacheListener(){@Override public void childEvent(CuratorFramework client,PathChildrenCacheEvent event){if (event.getData().getPath().equals(\"/test/one\")) {events2.offer(event.getType())}}})@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(events.poll(timing.forWaiting().seconds(),TimeUnit.SECONDS),PathChildrenCacheEvent.Type.CHILD_REMOVED)@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21->11 [style = bold, label=""];
25->32 [style = bold, label=""];
29->13 [style = bold, label=""];
11->4 [style = bold, label=""];
7->8 [style = bold, label=""];
10->2 [style = bold, label=""];
1->9 [style = bold, label=""];
4->25 [style = bold, label=""];
22->27 [style = bold, label=""];
9->31 [style = bold, label=""];
12->21 [style = bold, label=""];
14->17 [style = dashed, label="0"];
6->13 [style = bold, label=""];
14->12 [style = bold, label=""];
19->0 [style = bold, label=""];
7->26 [style = bold, label=""];
8->6 [style = bold, label=""];
17->20 [style = bold, label=""];
13->24 [style = bold, label=""];
30->10 [style = bold, label=""];
3->7 [style = bold, label=""];
5->10 [style = bold, label=""];
24->22 [style = bold, label=""];
2->28 [style = solid, label="client"];
2->0 [style = solid, label="client"];
27->1 [style = bold, label=""];
13->16 [style = bold, label=""];
9->17 [style = bold, label=""];
32->28 [style = bold, label=""];
11->19 [style = bold, label=""];
18->10 [style = bold, label=""];
11->23 [style = bold, label=""];
9->14 [style = bold, label=""];
15->3 [style = bold, label=""];
1->16 [style = dashed, label="0"];
13->1 [style = bold, label=""];
12->11 [style = bold, label=""];
16->9 [style = bold, label=""];
12->20 [style = dashed, label="0"];
4->19 [style = dashed, label="0"];
23->4 [style = bold, label=""];
31->14 [style = bold, label=""];
2->15 [style = bold, label=""];
26->29 [style = bold, label=""];
4->0 [style = bold, label=""];
20->11 [style = bold, label=""];
}
