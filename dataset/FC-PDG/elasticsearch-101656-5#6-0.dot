digraph {
3 [style = filled, label = "assertEquals(4,queue.size())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testReleaseClosesPages['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(queue.poll().get())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(PAGE_SIZE * 4,channelBuffer.getCapacity())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertEquals(InboundChannelBuffer.PAGE_SIZE * 2,channelBuffer.getCapacity())@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertFalse(closedRef.get())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "channelBuffer.ensureCapacity(PAGE_SIZE * 4)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ConcurrentLinkedQueue<AtomicBoolean> queue = new ConcurrentLinkedQueue<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "channelBuffer.close()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "InboundChannelBuffer channelBuffer = new InboundChannelBuffer(supplier)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "channelBuffer.release(2 * PAGE_SIZE)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Supplier<Page> supplier = null@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "IntFunction<Page> allocator = null@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertTrue(queue.poll().get())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "channelBuffer.ensureCapacity(InboundChannelBuffer.PAGE_SIZE * 4)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(InboundChannelBuffer.PAGE_SIZE * 4,channelBuffer.getCapacity())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertEquals(PAGE_SIZE * 2,channelBuffer.getCapacity())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "testReleaseClosesPages['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertFalse(queue.poll().get())@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "InboundChannelBuffer channelBuffer = new InboundChannelBuffer(allocator)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "channelBuffer.release(2 * InboundChannelBuffer.PAGE_SIZE)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "testClose['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "expectThrows(,null)@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertFalse(queue.poll().get())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertTrue(closedRef.get())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
9->20 [style = dashed, label="0"];
11->20 [style = bold, label=""];
6->3 [style = bold, label=""];
20->17 [style = solid, label="allocator"];
20->17 [style = bold, label=""];
16->11 [style = bold, label=""];
19->12 [style = bold, label=""];
4->17 [style = dashed, label="0"];
4->6 [style = bold, label=""];
7->10 [style = bold, label=""];
9->4 [style = bold, label=""];
1->19 [style = dashed, label="0"];
18->15 [style = bold, label=""];
0->15 [style = dashed, label="0"];
14->19 [style = bold, label=""];
6->0 [style = bold, label=""];
11->9 [style = bold, label=""];
15->3 [style = bold, label=""];
12->21 [style = dashed, label="0"];
6->18 [style = dashed, label="0"];
7->14 [style = bold, label=""];
12->13 [style = bold, label=""];
7->24 [style = bold, label=""];
3->7 [style = bold, label=""];
24->21 [style = bold, label=""];
21->22 [style = bold, label=""];
1->12 [style = bold, label=""];
9->4 [style = solid, label="supplier"];
23->11 [style = bold, label=""];
10->1 [style = bold, label=""];
8->11 [style = bold, label=""];
10->24 [style = dashed, label="0"];
10->14 [style = dashed, label="0"];
17->18 [style = bold, label=""];
2->5 [style = bold, label=""];
13->2 [style = bold, label=""];
}
