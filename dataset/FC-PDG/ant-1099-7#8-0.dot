digraph {
7 [style = filled, label = "AntAssert.assertContains(\"Processing File\",buildRule.getLog())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "AntAssert.assertContains(\"Processing File\",buildRule.getLog())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "buildRule.executeTarget(\"testSimpleScale\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testOverwriteTrue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assumeTrue(\"Could not change file modificaiton date\",f.setLastModified(f.lastModified() - FILE_UTILS.getFileTimestampGranularity() * 2))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "f = new File(buildRule.getOutputDir(),LARGEIMAGE)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testOverwriteTrue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "buildRule.executeTarget(\"testOverwriteTrue\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testOverwriteFalse['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "long overwrittenLastModified = f.lastModified()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "File f = new File(buildRule.getOutputDir(),LARGEIMAGE)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(\"File was overwritten.\",lastModified == overwrittenLastModified)@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "buildRule.executeTarget(\"testOverwriteFalse\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertTrue(\"File was not overwritten.\",lastModified < overwrittenLastModified)@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assumeTrue(\"Could not change file modificaiton date\",f.setLastModified(f.lastModified() - (FILE_UTILS.getFileTimestampGranularity() * 2)))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "long lastModified = f.lastModified()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
5->8 [style = bold, label=""];
3->1 [style = bold, label=""];
8->14 [style = bold, label=""];
10->3 [style = bold, label=""];
3->8 [style = solid, label="lastModified"];
12->0 [style = bold, label=""];
3->9 [style = solid, label="lastModified"];
4->0 [style = bold, label=""];
0->7 [style = bold, label=""];
10->11 [style = dashed, label="0"];
1->13 [style = dashed, label="0"];
9->14 [style = dashed, label="0"];
11->3 [style = bold, label=""];
3->14 [style = solid, label="lastModified"];
15->0 [style = bold, label=""];
6->11 [style = bold, label=""];
6->10 [style = bold, label=""];
7->6 [style = bold, label=""];
8->14 [style = solid, label="overwrittenLastModified"];
8->9 [style = bold, label=""];
3->13 [style = bold, label=""];
1->2 [style = bold, label=""];
8->9 [style = solid, label="overwrittenLastModified"];
2->5 [style = bold, label=""];
13->2 [style = bold, label=""];
}
