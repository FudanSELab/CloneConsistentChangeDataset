digraph {
17 [style = filled, label = "final String discoveryType = randomFrom(ZEN2_DISCOVERY_TYPE,\"single-node\")@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "when(boundTransportAddress.boundAddresses()).thenReturn(transportAddresses.toArray(new TransportAddress(((())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(BootstrapChecks.enforceLimits(boundTransportAddress,discoveryType),!\"single-node\".equals(discoveryType))@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "i < randomIntBetween(1,8)@@@5@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "when(boundTransportAddress.publishAddress()).thenReturn(publishAddress)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final List<TransportAddress> transportAddresses = new ArrayList<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final TransportAddress randomTransportAddress = buildNewFakeTransportAddress()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final TransportAddress publishAddress = new TransportAddress(InetAddress.getLoopbackAddress(),0)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final String discoveryType = randomFrom(ZEN_DISCOVERY_TYPE,ZEN2_DISCOVERY_TYPE,\"single-node\")@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Collections.shuffle(transportAddresses,random())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testEnforceLimitsWhenBoundToNonLocalAddress['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "transportAddresses.add(randomTransportAddress)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "i < randomIntBetween(0,7)@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final BoundTransportAddress boundTransportAddress = mock()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final TransportAddress publishAddress = randomBoolean()? buildNewFakeTransportAddress(): new TransportAddress(InetAddress.getLoopbackAddress(),0)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final TransportAddress nonLocalTransportAddress = buildNewFakeTransportAddress()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "int i = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testEnforceLimitsWhenBoundToNonLocalAddress['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "i++@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "transportAddresses.add(nonLocalTransportAddress)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testEnforceLimitsWhenPublishingToNonLocalAddress['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final TransportAddress randomTransportAddress = randomBoolean()? buildNewFakeTransportAddress(): new TransportAddress(InetAddress.getLoopbackAddress(),i)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->3 [style = bold, label=""];
10->4 [style = solid, label="randomTransportAddress"];
5->8 [style = bold, label=""];
10->21 [style = dashed, label="0"];
9->0 [style = bold, label=""];
19->12 [style = bold, label=""];
20->9 [style = bold, label=""];
13->2 [style = solid, label="nonLocalTransportAddress"];
15->18 [style = solid, label="i"];
3->18 [style = dashed, label="0"];
3->10 [style = dotted, label="true"];
4->15 [style = bold, label=""];
18->15 [style = dotted, label="true"];
18->21 [style = dotted, label="true"];
3->4 [style = dotted, label="true"];
8->11 [style = solid, label="discoveryType"];
7->20 [style = dashed, label="0"];
14->10 [style = solid, label="i"];
14->18 [style = solid, label="i"];
1->0 [style = bold, label=""];
15->3 [style = bold, label=""];
5->17 [style = bold, label=""];
15->18 [style = bold, label=""];
14->3 [style = solid, label="i"];
17->11 [style = solid, label="discoveryType"];
9->11 [style = solid, label="boundTransportAddress"];
15->3 [style = solid, label="i"];
7->9 [style = bold, label=""];
12->13 [style = bold, label=""];
3->10 [style = bold, label=""];
18->20 [style = bold, label=""];
21->4 [style = solid, label="randomTransportAddress"];
3->7 [style = bold, label=""];
12->1 [style = solid, label="transportAddresses"];
3->15 [style = dotted, label="true"];
2->14 [style = bold, label=""];
12->14 [style = bold, label=""];
10->4 [style = bold, label=""];
15->10 [style = solid, label="i"];
8->17 [style = dashed, label="0"];
7->5 [style = solid, label="publishAddress"];
14->18 [style = bold, label=""];
21->4 [style = bold, label=""];
14->15 [style = solid, label="i"];
18->21 [style = bold, label=""];
18->4 [style = dotted, label="true"];
9->1 [style = bold, label=""];
20->5 [style = solid, label="publishAddress"];
8->11 [style = bold, label=""];
16->12 [style = bold, label=""];
0->5 [style = bold, label=""];
13->2 [style = bold, label=""];
17->11 [style = bold, label=""];
6->12 [style = bold, label=""];
}
