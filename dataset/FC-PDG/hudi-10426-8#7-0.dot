digraph {
48 [style = filled, label = "funcWrapper.checkpointFunction(2)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "Map<String,List<HoodieRecord>> dataBuffer = funcWrapper.getDataBuffer()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "conf.setString(FlinkOptions.OPERATION,WriteOperationType.INSERT.value())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "funcWrapper.openFunction()@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "funcWrapper.checkpointComplete(1)@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
40 [style = filled, label = "funcWrapper.openFunction()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "funcWrapper.invoke(rowData)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "String instant = funcWrapper.getWriteClient().getLastPendingInstant(getTableType())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "final OperatorEvent event1 = funcWrapper.getNextEvent()@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "final OperatorEvent event2 = funcWrapper.getNextEvent()@@@25@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "expected.put(\"par1\",\"(id1,par1,id1,Danny,23,4,par1(\")@@@25@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(\"The operator expect to send an event\",event1,instanceOf())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertThat(\"The operator expect to send an event\",event2,instanceOf())@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event4)@@@36@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "TestData.checkWrittenAllData(tempFile,expected,1)@@@37@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "expected.put(\"par1\",\"(\" + \"id1,par1,id1,Danny,23,0,par1, \" + \"id1,par1,id1,Danny,23,0,par1, \" + \"id1,par1,id1,Danny,23,1,par1, \" + \"id1,par1,id1,Danny,23,1,par1, \" + \"id1,par1,id1,Danny,23,2,par1, \" + \"id1,par1,id1,Danny,23,2,par1, \" + \"id1,par1,id1,Danny,23,3,par1, \" + \"id1,par1,id1,Danny,23,3,par1, \" + \"id1,par1,id1,Danny,23,4,par1, \" + \"id1,par1,id1,Danny,23,4,par1(\")@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertNotNull(funcWrapper.getEventBuffer()(0(,\"The coordinator missed the event\")@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event2)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertNull(funcWrapper.getWriterHelper())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(\"Should have 1 data bucket\",dataBuffer.size(),is(1))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final OperatorEvent event3 = funcWrapper.getNextEvent()@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testInsertAllowsDuplication['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "dataBuffer = funcWrapper.getDataBuffer()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE,0.0008)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "funcWrapper.invoke(rowData)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "funcWrapper.checkpointFunction(1)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "funcWrapper.invoke(rowData)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "InsertFunctionWrapper<RowData> funcWrapper = new InsertFunctionWrapper<>(tempFile.getAbsolutePath(),conf)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
53 [style = filled, label = "checkWrittenData(tempFile,expected,1)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS,true)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE,0.0006)@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertNotNull(funcWrapper.getEventBuffer()(0(,\"The coordinator missed the event\")@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "checkInstantState(funcWrapper.getWriteClient(),HoodieInstant.State.COMPLETED,instant)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "TestData.checkWrittenAllData(tempFile,expected,1)@@@24@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expected.put(\"par1\",\"(\" + \"id1,par1,id1,Danny,23,0,par1, \" + \"id1,par1,id1,Danny,23,0,par1, \" + \"id1,par1,id1,Danny,23,1,par1, \" + \"id1,par1,id1,Danny,23,1,par1, \" + \"id1,par1,id1,Danny,23,2,par1, \" + \"id1,par1,id1,Danny,23,2,par1, \" + \"id1,par1,id1,Danny,23,3,par1, \" + \"id1,par1,id1,Danny,23,3,par1, \" + \"id1,par1,id1,Danny,23,4,par1, \" + \"id1,par1,id1,Danny,23,4,par1(\")@@@36@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "checkInflightInstant(funcWrapper.getWriteClient())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final OperatorEvent event1 = funcWrapper.getNextEvent()@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "funcWrapper.checkpointComplete(2)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "conf.setBoolean(FlinkOptions.INSERT_DEDUP,false)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "funcWrapper.checkpointFunction(1)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "final OperatorEvent event2 = funcWrapper.getNextEvent()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "funcWrapper.invoke(rowData)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event1)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "funcWrapper.checkpointComplete(2)@@@37@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "checkWrittenData(tempFile,expected,1)@@@38@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "funcWrapper.openFunction()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Map<String,String> expected = new HashMap<>()@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
42 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event2)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "Map<String,String> expected = new HashMap<>()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(),conf)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final OperatorEvent event4 = funcWrapper.getNextEvent()@@@34@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "testInsertWithDeduplication['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "assertThat(\"3 records expect to flush out as a mini-batch\",dataBuffer.values().stream().findFirst().map(null).orElse(-1),is(3))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "funcWrapper.checkpointComplete(1)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "testInsertAllowsDuplication['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
49 [style = filled, label = "assertThat(\"All data should be flushed out\",dataBuffer.size(),is(0))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event3)@@@35@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event1)@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54->55 [style = bold, label=""];
28->6 [style = bold, label=""];
18->0 [style = dashed, label="0"];
41->15 [style = bold, label=""];
24->4 [style = solid, label="event2"];
57->8 [style = bold, label=""];
38->4 [style = bold, label=""];
17->45 [style = bold, label=""];
19->36 [style = bold, label=""];
30->29 [style = bold, label=""];
8->0 [style = bold, label=""];
15->17 [style = bold, label=""];
34->24 [style = bold, label=""];
51->50 [style = bold, label=""];
38->3 [style = solid, label="expected"];
43->35 [style = bold, label=""];
14->46 [style = bold, label=""];
27->23 [style = solid, label="expected"];
24->4 [style = solid, label="event1"];
27->5 [style = bold, label=""];
42->19 [style = bold, label=""];
17->20 [style = bold, label=""];
22->53 [style = solid, label="expected"];
14->16 [style = bold, label=""];
4->3 [style = bold, label=""];
3->8 [style = solid, label="instant"];
28->1 [style = solid, label="event4"];
5->23 [style = bold, label=""];
0->19 [style = bold, label=""];
27->53 [style = bold, label=""];
0->42 [style = bold, label=""];
29->54 [style = dashed, label="0"];
28->42 [style = dashed, label="0"];
10->26 [style = bold, label=""];
23->8 [style = bold, label=""];
24->31 [style = solid, label="event2"];
22->5 [style = bold, label=""];
18->28 [style = bold, label=""];
50->49 [style = bold, label=""];
19->25 [style = bold, label=""];
35->40 [style = bold, label=""];
36->25 [style = bold, label=""];
47->54 [style = bold, label=""];
31->12 [style = solid, label="event2"];
56->48 [style = bold, label=""];
9->22 [style = bold, label=""];
45->51 [style = bold, label=""];
25->18 [style = bold, label=""];
41->15 [style = solid, label="event1"];
44->14 [style = bold, label=""];
25->28 [style = solid, label="event3"];
2->10 [style = bold, label=""];
27->26 [style = solid, label="expected"];
31->12 [style = bold, label=""];
4->7 [style = bold, label=""];
24->22 [style = solid, label="instant"];
3->9 [style = bold, label=""];
11->41 [style = bold, label=""];
6->1 [style = bold, label=""];
24->33 [style = bold, label=""];
24->31 [style = bold, label=""];
40->32 [style = bold, label=""];
32->39 [style = bold, label=""];
1->2 [style = bold, label=""];
18->6 [style = solid, label="event4"];
15->37 [style = bold, label=""];
49->20 [style = bold, label=""];
21->14 [style = bold, label=""];
23->53 [style = dashed, label="0"];
5->8 [style = bold, label=""];
8->56 [style = bold, label=""];
16->11 [style = bold, label=""];
38->25 [style = solid, label="expected"];
53->57 [style = bold, label=""];
31->7 [style = solid, label="event2"];
9->0 [style = solid, label="instant"];
39->11 [style = bold, label=""];
46->52 [style = bold, label=""];
52->17 [style = bold, label=""];
20->12 [style = solid, label="event1"];
41->37 [style = solid, label="event1"];
7->3 [style = bold, label=""];
11->15 [style = bold, label=""];
55->44 [style = bold, label=""];
18->6 [style = solid, label="event3"];
12->4 [style = bold, label=""];
22->27 [style = bold, label=""];
0->42 [style = solid, label="event2"];
37->34 [style = bold, label=""];
48->25 [style = bold, label=""];
22->2 [style = solid, label="expected"];
33->38 [style = bold, label=""];
20->24 [style = bold, label=""];
13->21 [style = bold, label=""];
29->13 [style = bold, label=""];
}
