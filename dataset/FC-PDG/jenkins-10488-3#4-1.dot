digraph {
1 [style = filled, label = "assertThat(descriptor.computerLauncherDescriptors(null),hasItem(victim))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "DynamicFilter.descriptors().remove(victim)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(descriptor.computerLauncherDescriptors(null),not(hasItem(victim)))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "launcherFiltering['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Descriptor<ComputerLauncher> victim = descriptors.iterator().next()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(descriptor.computerLauncherDescriptors(null),containsInAnyOrder(descriptors.toArray(new Descriptor(((()))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "DynamicFilter.descriptors().add(victim)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "launcherFiltering['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "DescriptorExtensionList<ComputerLauncher,Descriptor<ComputerLauncher>> descriptors = j.getInstance().getDescriptorList()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(descriptor.retentionStrategyDescriptors(null),not(hasItem(victim)))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(descriptor.retentionStrategyDescriptors(null),containsInAnyOrder(descriptors.toArray(new Descriptor(((()))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Descriptor<RetentionStrategy<?>> victim = descriptors.iterator().next()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "DescriptorExtensionList<RetentionStrategy<?>,Descriptor<RetentionStrategy<?>>> descriptors = RetentionStrategy.all()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(descriptor.retentionStrategyDescriptors(null),hasItem(victim))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "retentionFiltering['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assumeThat(\"we need at least two launchers to test this\",descriptors.size(),not(anyOf(is(0),is(1))))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(descriptor.computerLauncherDescriptors(null),hasItem(victim))@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(descriptor.retentionStrategyDescriptors(null),hasItem(victim))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assumeThat(\"we need at least two retention strategies to test this\",descriptors.size(),not(anyOf(is(0),is(1))))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "DumbSlave.DescriptorImpl descriptor = j.getInstance().getDescriptorByType()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->9 [style = bold, label=""];
6->3 [style = bold, label=""];
5->8 [style = bold, label=""];
16->15 [style = solid, label="victim"];
1->4 [style = bold, label=""];
15->2 [style = bold, label=""];
3->1 [style = bold, label=""];
0->6 [style = bold, label=""];
9->2 [style = bold, label=""];
7->14 [style = dashed, label="0"];
4->15 [style = bold, label=""];
16->17 [style = solid, label="victim"];
16->17 [style = bold, label=""];
3->2 [style = solid, label="victim"];
13->16 [style = bold, label=""];
3->1 [style = solid, label="victim"];
8->0 [style = bold, label=""];
19->5 [style = bold, label=""];
16->14 [style = solid, label="victim"];
11->5 [style = bold, label=""];
16->4 [style = solid, label="victim"];
1->17 [style = dashed, label="0"];
10->5 [style = bold, label=""];
6->13 [style = dashed, label="0"];
5->12 [style = bold, label=""];
2->14 [style = bold, label=""];
12->18 [style = bold, label=""];
18->13 [style = bold, label=""];
0->18 [style = dashed, label="0"];
2->7 [style = bold, label=""];
3->7 [style = solid, label="victim"];
16->2 [style = solid, label="victim"];
3->4 [style = solid, label="victim"];
3->9 [style = solid, label="victim"];
17->4 [style = bold, label=""];
3->16 [style = dashed, label="0"];
9->15 [style = dashed, label="0"];
}
