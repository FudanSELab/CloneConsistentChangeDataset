digraph {
3 [style = filled, label = "final RelDataType rowType = typeFactory.builder().add(\"a\",intType).add(\"b\",intType).add(\"c\",booleanType).add(\"d\",booleanType).add(\"e\",booleanType).add(\"f\",booleanType).add(\"g\",booleanType).add(\"h\",intType).build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType,0)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "checkSimplify(expr,simplified).expandedSearch(expanded)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final RexNode bRef = rexBuilder.makeFieldAccess(range,1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "checkSimplifyFilter(case_(cRef,trueLiteral,dRef,trueLiteral,eRef,falseLiteral,fRef,falseLiteral,nullBool),\"OR(?0.c, ?0.d)\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(1)),lt(aRef,literal(10)),lt(aRef,literal(5))),RelOptPredicateList.EMPTY,\"SEARCH(?0.a, Sarg((1..5)()\")@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertThat(simplify.simplifyFilterPredicates(args2),nullValue())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final RexNode fRef = rexBuilder.makeFieldAccess(range,5)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,nullBool),ge(bRef,literal(1))),\"false\")@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "checkSimplifyFilter(and(args),\"AND(=(?0.a, 1), =(?0.b, 1))\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "checkSimplifyFilter(and(lt(literal(1),aRef),lt(literal(5),aRef)),RelOptPredicateList.EMPTY,\">(?0.a, 5)\")@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "checkSimplifyFilter(and(gt(literal(1),aRef),gt(literal(5),aRef)),RelOptPredicateList.EMPTY,\"<(?0.a, 1)\")@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "final RexNode eRef = rexBuilder.makeFieldAccess(range,4)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal(1)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal(10)),gt(aRef,literal(5)))),\"true\")@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "checkSimplifyFilter(and(lt(aRef,literal(1)),eq(aRef,literal(1)),ge(aRef,literal(1))),\"false\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal(5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(le(aRef,literal(5)))),\"false\")@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(1)),lt(aRef,literal(10)),le(aRef,literal(5))),RelOptPredicateList.of(rexBuilder,ImmutableList.of(ge(aRef,literal(5)))),\"=(?0.a, 5)\")@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final ImmutableList<RexNode> args2 = ImmutableList.of(eq(aRef,literal(1)),eq(aRef,literal(10)))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "checkSimplifyFilter(and(lt(literal(1),aRef),lt(aRef,literal(5))),RelOptPredicateList.EMPTY,\"SEARCH(?0.a, Sarg((1..5)()\")@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final ImmutableList<RexNode> args = ImmutableList.of(eq(eq(aRef,literal(1)),trueLiteral),eq(bRef,literal(1)))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final RelDataType booleanType = typeFactory.createSqlType(SqlTypeName.BOOLEAN)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal(5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(le(aRef,literal(5)),le(bRef,literal(5)))),\"false\")@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(10)),ge(bRef,literal(1)),lt(aRef,literal(10))),\"false\")@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final RexNode aRef = rexBuilder.makeFieldAccess(range,0)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final RexNode dRef = rexBuilder.makeFieldAccess(range,3)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "checkSimplifyFilter(and(le(aRef,literal(1)),gt(aRef,literal(1))),\"false\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "testSimplifyFilter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
47 [style = filled, label = "RexNode expr = and(isNotNull(aRef),gt(aRef,literal(3)),lt(aRef,literal(10)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(1)),lt(aRef,literal(10)),lt(aRef,literal(5))),RelOptPredicateList.of(rexBuilder,ImmutableList.of(gt(aRef,literal(5)))),\"false\")@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "checkSimplifyFilter(and(gt(literal(1),aRef),gt(literal(5),aRef)),RelOptPredicateList.EMPTY,\">(1, ?0.a)\")@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "checkSimplifyFilter(and(gt(literal(1),aRef),gt(aRef,literal(5))),RelOptPredicateList.EMPTY,\"false\")@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "checkSimplifyFilter(or(gt(aRef,literal(5)),gt(bRef,literal(5))),RelOptPredicateList.of(rexBuilder,ImmutableList.of(le(aRef,literal(5)),le(bRef,literal(5)))),\"false\")@@@41@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testSimplifyFilter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "final String simplified = \"SEARCH($0, Sarg((3..10)()\"@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "checkSimplifyFilter(and(args2),\"false\")@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "checkSimplifyFilter(lt(aRef,literal(1)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal(10)),gt(aRef,literal(5)))),\"false\")@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "checkSimplifyFilter(and(lt(literal(1),aRef),lt(literal(5),aRef)),RelOptPredicateList.EMPTY,\"<(5, ?0.a)\")@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "final RexNode aRef = input(tInt(true),0)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "final String expanded = \"AND(>($0, 3), <($0, 10))\"@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "checkSimplifyFilter(and(le(aRef,literal(1)),ge(aRef,literal(1))),\"=(?0.a, 1)\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "checkSimplifyFilter(and(eq(aRef,literal(1)),eq(bRef,literal(1)),eq(aRef,bRef)),\"AND(=(?0.a, 1), =(?0.b, 1))\")@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "checkSimplifyFilter(or(gt(aRef,literal(10)),gt(bRef,literal(1)),gt(aRef,literal(10))),\"OR(>(?0.a, 10), >(?0.b, 1))\")@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "testSimplifyRange7['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final RexNode cRef = rexBuilder.makeFieldAccess(range,2)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "checkSimplifyFilter(and(eq(aRef,literal(1)),eq(bRef,literal(10)),eq(aRef,bRef)),\"false\")@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(simplify.simplifyFilterPredicates(args).toString(),equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal(5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal(10)),ge(aRef,literal(5)))),\">(?0.a, 5)\")@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(1)),lt(aRef,literal(10)),lt(aRef,literal(5))),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal(10)),ge(aRef,literal(1)))),\"SEARCH(?0.a, Sarg((1..5)()\")@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32->37 [style = bold, label=""];
15->21 [style = bold, label=""];
14->1 [style = solid, label="aRef"];
36->12 [style = bold, label=""];
10->41 [style = bold, label=""];
14->0 [style = solid, label="aRef"];
14->13 [style = solid, label="aRef"];
21->28 [style = bold, label=""];
3->18 [style = bold, label=""];
8->0 [style = bold, label=""];
45->43 [style = bold, label=""];
23->1 [style = solid, label="bRef"];
38->26 [style = bold, label=""];
14->34 [style = solid, label="aRef"];
14->10 [style = solid, label="aRef"];
16->37 [style = solid, label="eRef"];
18->14 [style = solid, label="range"];
13->42 [style = dashed, label="0"];
23->12 [style = solid, label="bRef"];
19->20 [style = bold, label=""];
43->47 [style = solid, label="aRef"];
24->38 [style = bold, label=""];
20->3 [style = bold, label=""];
34->42 [style = bold, label=""];
12->35 [style = bold, label=""];
14->12 [style = solid, label="aRef"];
3->18 [style = solid, label="rowType"];
14->33 [style = solid, label="aRef"];
25->27 [style = bold, label=""];
30->19 [style = bold, label=""];
14->7 [style = solid, label="aRef"];
43->47 [style = bold, label=""];
12->35 [style = solid, label="args"];
14->2 [style = solid, label="aRef"];
17->15 [style = bold, label=""];
47->44 [style = bold, label=""];
14->31 [style = solid, label="aRef"];
23->2 [style = solid, label="bRef"];
14->32 [style = solid, label="aRef"];
23->5 [style = solid, label="bRef"];
4->41 [style = dashed, label="0"];
13->10 [style = bold, label=""];
23->17 [style = solid, label="bRef"];
22->16 [style = bold, label=""];
35->9 [style = bold, label=""];
16->24 [style = bold, label=""];
14->38 [style = solid, label="aRef"];
14->21 [style = solid, label="aRef"];
40->19 [style = bold, label=""];
23->28 [style = solid, label="bRef"];
4->29 [style = bold, label=""];
25->27 [style = solid, label="args2"];
14->41 [style = solid, label="aRef"];
14->26 [style = solid, label="aRef"];
48->46 [style = bold, label=""];
5->32 [style = bold, label=""];
18->23 [style = solid, label="range"];
27->39 [style = bold, label=""];
23->34 [style = solid, label="bRef"];
18->22 [style = solid, label="range"];
14->23 [style = bold, label=""];
18->16 [style = solid, label="range"];
14->42 [style = solid, label="aRef"];
6->33 [style = bold, label=""];
18->24 [style = solid, label="range"];
24->37 [style = solid, label="fRef"];
11->22 [style = bold, label=""];
48->46 [style = solid, label="expanded"];
39->1 [style = bold, label=""];
14->17 [style = solid, label="aRef"];
14->5 [style = solid, label="aRef"];
23->7 [style = solid, label="bRef"];
1->2 [style = bold, label=""];
23->6 [style = solid, label="bRef"];
23->11 [style = bold, label=""];
14->6 [style = solid, label="aRef"];
31->8 [style = bold, label=""];
23->33 [style = solid, label="bRef"];
33->17 [style = bold, label=""];
2->5 [style = bold, label=""];
11->37 [style = solid, label="cRef"];
18->11 [style = solid, label="range"];
22->37 [style = solid, label="dRef"];
14->25 [style = solid, label="aRef"];
0->6 [style = bold, label=""];
41->29 [style = bold, label=""];
26->36 [style = bold, label=""];
29->31 [style = bold, label=""];
34->13 [style = bold, label=""];
28->7 [style = bold, label=""];
14->29 [style = solid, label="aRef"];
14->36 [style = solid, label="aRef"];
14->15 [style = solid, label="aRef"];
25->39 [style = solid, label="args2"];
14->28 [style = solid, label="aRef"];
23->32 [style = solid, label="bRef"];
23->15 [style = solid, label="bRef"];
44->48 [style = bold, label=""];
37->34 [style = bold, label=""];
9->25 [style = bold, label=""];
42->10 [style = bold, label=""];
14->4 [style = solid, label="aRef"];
10->4 [style = bold, label=""];
18->14 [style = bold, label=""];
14->8 [style = solid, label="aRef"];
}
