digraph {
28 [style = filled, label = "OperatorStateStore operatorStateStore = mock()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "StateInitializationContext initializationContext = mock()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testFetcherShouldBeCorrectlySeededOnlyItsOwnStates['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "when(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Mockito.verify(mockedFetcher).setIsRestoringFromFailure(true)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "testFetcherShouldBeCorrectlySeededWithNewDiscoveredKinesisStreamShard['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "fakeRestoredState.put(new KinesisStreamShard(\"fakeStream2\",new Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))),SentinelSequenceNumber.SENTINEL_EARLIEST_SEQUENCE_NUM.get())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "consumer.run(Mockito.mock())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "PowerMockito.whenNew().withAnyArguments().thenReturn(mockedFetcher)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "shards.addAll(fakeRestoredState.keySet())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "listState.add(Tuple2.of(state.getKey(),state.getValue()))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Mockito.verify(mockedFetcher).setIsRestoringFromFailure(true)@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "KinesisDataFetcher mockedFetcher = Mockito.mock()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "consumer.initializeState(initializationContext)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "listState.add(Tuple2.of(state.getKey(),state.getValue()))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Mockito.verify(mockedFetcher,never()).registerNewSubscribedShardState(new KinesisStreamShardState(restoredShard.getKey(),restoredShard.getValue()))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "HashMap<KinesisStreamShard,SequenceNumber> fakeRestoredStateForOthers = getFakeRestoredStore(\"fakeStream2\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testFetcherShouldBeCorrectlySeededOnlyItsOwnStates['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "listState.add(Tuple2.of(state.getKey(),state.getValue()))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Mockito.verify(mockedFetcher).registerNewSubscribedShardState(new KinesisStreamShardState(restoredShard.getKey(),restoredShard.getValue()))@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "shards.add(new KinesisStreamShard(\"fakeStream2\",new Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "TestingListState<Tuple2<KinesisStreamShard,SequenceNumber>> listState = new TestingListState<>()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "TestingListState<Serializable> listState = new TestingListState<>()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "HashMap<KinesisStreamShard,SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "PowerMockito.mockStatic()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "consumer.open(new Configuration())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "HashMap<KinesisStreamShard,SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"fakeStream1\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "when(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "when(initializationContext.isRestored()).thenReturn(true)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "PowerMockito.doNothing().when()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "when(operatorStateStore.getUnionListState(Matchers.any())).thenReturn(listState)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "TestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\"fakeStream\",new Properties(),10,2)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "TestingListState<Serializable> listState = new TestingListState<>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Mockito.verify(mockedFetcher).registerNewSubscribedShardState(new KinesisStreamShardState(restoredShard.getKey(),restoredShard.getValue()))@@@32@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "List<KinesisStreamShard> shards = new ArrayList<>()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->10 [style = bold, label=""];
6->3 [style = bold, label=""];
15->23 [style = bold, label=""];
0->9 [style = bold, label=""];
2->19 [style = bold, label=""];
22->15 [style = bold, label=""];
26->7 [style = bold, label=""];
3->1 [style = bold, label=""];
16->8 [style = bold, label=""];
22->6 [style = solid, label="initializationContext"];
27->28 [style = bold, label=""];
28->11 [style = bold, label=""];
4->13 [style = bold, label=""];
29->9 [style = bold, label=""];
11->15 [style = solid, label="operatorStateStore"];
18->13 [style = solid, label="initializationContext"];
17->16 [style = solid, label="mockedFetcher"];
1->20 [style = bold, label=""];
34->31 [style = bold, label=""];
19->11 [style = bold, label=""];
0->29 [style = bold, label=""];
21->24 [style = bold, label=""];
30->34 [style = bold, label=""];
28->22 [style = solid, label="operatorStateStore"];
25->2 [style = bold, label=""];
9->16 [style = bold, label=""];
11->18 [style = bold, label=""];
5->25 [style = bold, label=""];
12->18 [style = solid, label="listState"];
14->7 [style = bold, label=""];
20->21 [style = bold, label=""];
12->2 [style = bold, label=""];
7->5 [style = bold, label=""];
1->33 [style = bold, label=""];
18->22 [style = bold, label=""];
12->25 [style = dashed, label="0"];
31->27 [style = bold, label=""];
5->12 [style = bold, label=""];
17->29 [style = solid, label="shards"];
1->21 [style = bold, label=""];
10->0 [style = bold, label=""];
23->17 [style = bold, label=""];
33->32 [style = bold, label=""];
31->11 [style = solid, label="listState"];
10->9 [style = solid, label="shards"];
8->4 [style = bold, label=""];
13->6 [style = bold, label=""];
23->9 [style = solid, label="mockedFetcher"];
7->34 [style = dashed, label="0"];
25->18 [style = solid, label="listState"];
}
