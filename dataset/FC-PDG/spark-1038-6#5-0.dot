digraph {
7 [style = filled, label = "Set<Long> hashcodes = new HashSet<>()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int size = 64000@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize),hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(hasher.hashUnsafeWordsBlock(mb),hasher.hashUnsafeWordsBlock(mb))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "randomizedStressTestPaddedStrings['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "int i = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "rand.nextBytes(bytes)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "byte(( strBytes = String.valueOf(i).getBytes(StandardCharsets.UTF_8)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "byte(( bytes = new byte((((@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Random rand = new Random()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "byte(( paddedBytes = new byte((((@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int i = 0@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95d)@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "System.arraycopy(strBytes,0,paddedBytes,0,strBytes.length)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "int byteArrSize = rand.nextInt(100) * 8@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "randomizedStressTestBytes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "hashcodes.add(HiveHasher.hashUnsafeBytesBlock(mb))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "i++@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "hashcodes.add(hasher.hashUnsafeWords(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "MemoryBlock mb = ByteArrayMemoryBlock.fromArray(bytes)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "randomizedStressTestPaddedStrings['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "i < size@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "MemoryBlock mb = ByteArrayMemoryBlock.fromArray(paddedBytes)@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "int size = 65536@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(HiveHasher.hashUnsafeBytesBlock(mb),HiveHasher.hashUnsafeBytesBlock(mb))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Set<Integer> hashcodes = new HashSet<>()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95)@@@16@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "hashcodes.add(hasher.hashUnsafeWordsBlock(mb))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21->25 [style = solid, label="mb"];
0->12 [style = dotted, label="true"];
4->18 [style = dotted, label="true"];
8->0 [style = solid, label="i"];
3->17 [style = dashed, label="0"];
0->5 [style = dotted, label="true"];
0->13 [style = dotted, label="true"];
9->5 [style = solid, label="strBytes"];
0->12 [style = solid, label="i"];
9->2 [style = bold, label=""];
0->10 [style = dotted, label="true"];
2->13 [style = solid, label="paddedBytes"];
13->3 [style = solid, label="mb"];
22->4 [style = solid, label="size"];
0->12 [style = bold, label=""];
0->4 [style = dotted, label="true"];
4->19 [style = bold, label=""];
4->20 [style = dotted, label="true"];
2->14 [style = solid, label="paddedBytes"];
0->11 [style = bold, label=""];
14->17 [style = bold, label=""];
5->14 [style = bold, label=""];
0->4 [style = solid, label="i"];
4->25 [style = dotted, label="true"];
7->8 [style = bold, label=""];
12->9 [style = bold, label=""];
23->0 [style = bold, label=""];
1->7 [style = bold, label=""];
24->18 [style = bold, label=""];
20->25 [style = bold, label=""];
0->15 [style = bold, label=""];
1->15 [style = solid, label="size"];
26->22 [style = bold, label=""];
13->10 [style = solid, label="mb"];
4->0 [style = bold, label=""];
4->19 [style = dotted, label="true"];
19->24 [style = bold, label=""];
1->22 [style = dashed, label="0"];
8->0 [style = bold, label=""];
4->21 [style = dotted, label="true"];
3->10 [style = bold, label=""];
6->1 [style = bold, label=""];
1->0 [style = solid, label="size"];
21->20 [style = bold, label=""];
12->19 [style = dashed, label="0"];
13->3 [style = bold, label=""];
22->27 [style = bold, label=""];
16->1 [style = bold, label=""];
12->4 [style = bold, label=""];
0->4 [style = bold, label=""];
25->12 [style = bold, label=""];
12->17 [style = solid, label="byteArrSize"];
2->17 [style = solid, label="paddedBytes"];
5->13 [style = bold, label=""];
12->4 [style = solid, label="i"];
10->4 [style = bold, label=""];
21->20 [style = solid, label="mb"];
1->11 [style = solid, label="size"];
24->21 [style = solid, label="bytes"];
4->0 [style = solid, label="i"];
0->17 [style = dotted, label="true"];
0->14 [style = dotted, label="true"];
27->23 [style = bold, label=""];
12->14 [style = solid, label="byteArrSize"];
0->3 [style = dotted, label="true"];
4->24 [style = dotted, label="true"];
18->21 [style = bold, label=""];
2->5 [style = solid, label="paddedBytes"];
0->2 [style = dotted, label="true"];
22->11 [style = solid, label="size"];
4->11 [style = bold, label=""];
4->12 [style = dotted, label="true"];
0->9 [style = dotted, label="true"];
24->18 [style = solid, label="bytes"];
8->4 [style = solid, label="i"];
17->4 [style = bold, label=""];
2->5 [style = bold, label=""];
}
