digraph {
7 [style = filled, label = "assertNull(testDriver.readOutput(\"result-topic\",stringDeserializer,longDeserializer))@@@8@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "compareKeyValue(testDriver.readRecord(\"result-topic\",stringDeserializer,longDeserializer),\"a\",21L)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "OutputVerifier.compareKeyValue(testDriver.readOutput(\"result-topic\",stringDeserializer,longDeserializer),\"b\",21L)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertNull(testDriver.readOutput(\"result-topic\",stringDeserializer,longDeserializer))@@@10@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "setup()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "shouldPunctuateIfEvenTimeAdvances['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testDriver.pipeInput(recordFactory.create(\"input-topic\",\"a\",1L,9999L))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "OutputVerifier.compareKeyValue(testDriver.readOutput(\"result-topic\",stringDeserializer,longDeserializer),\"a\",21L)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "compareKeyValue(testDriver.readRecord(\"result-topic\",stringDeserializer,longDeserializer),\"a\",21L)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "pipeInput(\"input-topic\",\"a\",1L,9999L)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "shouldUpdateStoreForNewKey['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertNull(testDriver.readOutput(\"result-topic\",stringDeserializer,longDeserializer))@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "shouldPunctuateIfEvenTimeAdvances['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertThat(store.get(\"b\"),equalTo(21L))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "pipeInput(\"input-topic\",\"a\",1L,9999L)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertTrue(testDriver.isEmpty(\"result-topic\"))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "OutputVerifier.compareKeyValue(testDriver.readOutput(\"result-topic\",stringDeserializer,longDeserializer),\"a\",21L)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "testDriver.pipeInput(recordFactory.create(\"input-topic\",\"b\",21L,9999L))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "pipeInput(\"input-topic\",\"a\",1L,10000L)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "OutputVerifier.compareKeyValue(testDriver.readOutput(\"result-topic\",stringDeserializer,longDeserializer),\"a\",21L)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertTrue(testDriver.isEmpty(\"result-topic\"))@@@10@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
4->9 [style = bold, label=""];
11->16 [style = bold, label=""];
20->17 [style = bold, label=""];
1->8 [style = bold, label=""];
17->1 [style = bold, label=""];
1->14 [style = dashed, label="0"];
10->14 [style = bold, label=""];
2->6 [style = bold, label=""];
5->9 [style = dashed, label="0"];
9->10 [style = bold, label=""];
3->4 [style = bold, label=""];
13->11 [style = bold, label=""];
0->10 [style = dashed, label="0"];
8->7 [style = bold, label=""];
5->20 [style = dashed, label="0"];
12->13 [style = bold, label=""];
18->4 [style = bold, label=""];
5->0 [style = bold, label=""];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
14->12 [style = bold, label=""];
4->20 [style = bold, label=""];
15->4 [style = bold, label=""];
7->13 [style = dashed, label="0"];
2->11 [style = dashed, label="0"];
1->19 [style = bold, label=""];
4->5 [style = bold, label=""];
19->7 [style = bold, label=""];
}
