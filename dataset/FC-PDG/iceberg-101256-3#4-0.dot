digraph {
15 [style = filled, label = "Assert.assertFalse(\"Should skip: lessThan on all null column\",shouldRead)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,greaterThan(\"all_nulls\",\"a\")).eval(FILE)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "testNoNulls['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA,notNull(\"all_nulls\")).eval(FILE)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertFalse(\"Should skip: no non-null value in all null column\",shouldRead)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testAllNulls['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,isNull(\"some_nulls\")).eval(FILE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertFalse(\"Should skip: lessThanOrEqual on all null column\",shouldRead)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA,isNull(\"all_nulls\")).eval(FILE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertFalse(\"Should skip: greaterThanOrEqual on all null column\",shouldRead)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assert.assertFalse(\"Should skip: non-null column contains no null values\",shouldRead)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,lessThan(\"all_nulls\",\"a\")).eval(FILE)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertFalse(\"Should skip: greaterThan on all null column\",shouldRead)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,isNull(\"no_nulls\")).eval(FILE)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,equal(\"all_nulls\",\"a\")).eval(FILE)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertFalse(\"Should skip: equal on all null column\",shouldRead)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Assert.assertTrue(\"Should read: non-null column contains a non-null value\",shouldRead)@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertTrue(\"Should read: at least one null value in all null column\",shouldRead)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertTrue(\"Should read: column with some nulls contains a null value\",shouldRead)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,notNull(\"no_nulls\")).eval(FILE)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testAllNulls['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertTrue(\"Should read: column with some nulls contains a non-null value\",shouldRead)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,greaterThanOrEqual(\"all_nulls\",\"a\")).eval(FILE)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,lessThanOrEqual(\"all_nulls\",\"a\")).eval(FILE)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,notNull(\"some_nulls\")).eval(FILE)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->19 [style = dashed, label="0"];
3->10 [style = bold, label=""];
22->19 [style = bold, label=""];
1->18 [style = dashed, label="0"];
8->12 [style = bold, label=""];
24->18 [style = bold, label=""];
0->3 [style = solid, label="shouldRead"];
1->6 [style = solid, label="shouldRead"];
9->16 [style = bold, label=""];
3->23 [style = dashed, label="0"];
14->0 [style = bold, label=""];
0->3 [style = bold, label=""];
5->4 [style = solid, label="shouldRead"];
19->23 [style = bold, label=""];
10->15 [style = solid, label="shouldRead"];
16->13 [style = bold, label=""];
1->6 [style = bold, label=""];
3->5 [style = bold, label=""];
5->4 [style = bold, label=""];
4->1 [style = bold, label=""];
11->7 [style = bold, label=""];
12->9 [style = bold, label=""];
13->11 [style = bold, label=""];
19->23 [style = solid, label="shouldRead"];
11->7 [style = solid, label="shouldRead"];
23->20 [style = bold, label=""];
5->20 [style = dashed, label="0"];
16->13 [style = solid, label="shouldRead"];
18->21 [style = solid, label="shouldRead"];
17->8 [style = bold, label=""];
20->24 [style = solid, label="shouldRead"];
7->5 [style = bold, label=""];
20->24 [style = bold, label=""];
18->21 [style = bold, label=""];
6->21 [style = dashed, label="0"];
2->0 [style = bold, label=""];
10->15 [style = bold, label=""];
17->8 [style = solid, label="shouldRead"];
12->9 [style = solid, label="shouldRead"];
4->24 [style = dashed, label="0"];
15->17 [style = bold, label=""];
}
