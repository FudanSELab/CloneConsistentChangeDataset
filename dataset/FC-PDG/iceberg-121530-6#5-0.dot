digraph {
20 [style = filled, label = "pred.op()@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "String name@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "predicate.isLiteralPredicate()@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "return ProjectionUtil.truncateArray(name,predicate.asLiteralPredicate(),this)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "return null@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "predicate instanceof BoundLiteralPredicate@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "return Expressions.predicate(predicate.op(),name)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "project['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String name@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "BoundLiteralPredicate<T> pred = predicate.asLiteralPredicate()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "BoundPredicate<CharSequence> predicate@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "BoundPredicate<CharSequence> predicate@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "project['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "predicate.term() instanceof BoundTransform@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "return Expressions.predicate(pred.op(),name,apply(pred.literal().value()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "project['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "return null@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "return ProjectionUtil.transformSet(name,predicate.asSetPredicate(),this)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "predicate.isUnaryPredicate()@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "predicate instanceof BoundUnaryPredicate@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "predicate.isSetPredicate() && predicate.op() == Expression.Operation.IN@@@12@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "return null@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "return ProjectionUtil.projectTransformPredicate(this,name,predicate)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "BoundPredicate<T> predicate@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
12->10 [style = dotted, label="true"];
5->3 [style = solid, label="predicate"];
16->22 [style = dotted, label="true"];
12->0 [style = bold, label=""];
14->17 [style = bold, label=""];
6->8 [style = solid, label="name"];
18->3 [style = solid, label="predicate"];
4->23 [style = dashed, label="0"];
22->8 [style = solid, label="name"];
9->13 [style = dotted, label="false"];
10->11 [style = solid, label="name"];
0->4 [style = bold, label=""];
22->15 [style = solid, label="name"];
20->21 [style = dotted, label="true"];
18->8 [style = solid, label="predicate"];
23->14 [style = dotted, label="false"];
9->7 [style = dotted, label="true"];
18->15 [style = solid, label="predicate"];
19->20 [style = bold, label=""];
20->15 [style = bold, label=""];
16->18 [style = dotted, label="true"];
2->5 [style = dotted, label="true"];
0->3 [style = dotted, label="true"];
13->11 [style = dotted, label="true"];
9->13 [style = bold, label=""];
21->17 [style = bold, label=""];
6->7 [style = solid, label="name"];
2->6 [style = dotted, label="true"];
16->0 [style = bold, label=""];
11->1 [style = bold, label=""];
4->8 [style = bold, label=""];
0->3 [style = bold, label=""];
14->19 [style = bold, label=""];
15->21 [style = bold, label=""];
7->19 [style = dashed, label="0"];
8->17 [style = bold, label=""];
6->22 [style = dashed, label="0"];
6->8 [style = solid, label="predicate"];
18->14 [style = solid, label="predicate"];
10->7 [style = solid, label="name"];
9->7 [style = bold, label=""];
4->8 [style = dotted, label="true"];
0->23 [style = bold, label=""];
8->1 [style = bold, label=""];
20->15 [style = dotted, label="true"];
3->23 [style = bold, label=""];
20->21 [style = bold, label=""];
13->11 [style = bold, label=""];
9->14 [style = dashed, label="0"];
23->8 [style = dotted, label="true"];
4->9 [style = bold, label=""];
23->8 [style = bold, label=""];
22->3 [style = solid, label="name"];
6->3 [style = solid, label="name"];
10->8 [style = solid, label="name"];
4->9 [style = dotted, label="false"];
14->19 [style = dotted, label="true"];
14->20 [style = dotted, label="true"];
13->1 [style = bold, label=""];
23->14 [style = bold, label=""];
2->0 [style = bold, label=""];
7->1 [style = bold, label=""];
10->3 [style = solid, label="name"];
12->6 [style = dotted, label="true"];
9->1 [style = bold, label=""];
6->3 [style = solid, label="predicate"];
18->23 [style = solid, label="predicate"];
3->4 [style = bold, label=""];
5->8 [style = solid, label="predicate"];
}
