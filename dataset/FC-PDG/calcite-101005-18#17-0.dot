digraph {
1 [style = filled, label = "testNonEquiJoinReverseConditionPlan['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "CalciteAssert.model(JdbcTest.SCOTT_MODEL).query(\"select empno, ename, grade\" + \"from scott.emp e inner join scott.salgrade s\" + \"on s.losal <= e.sal and s.hisal >= e.sal\").explainContains(\"PLAN=JdbcToEnumerableConverter\" + \" JdbcProject(EMPNO=($0(, ENAME=($1(, GRADE=($3()\" + \" JdbcJoin(condition=(AND(>=($2, $4), <=($2, $5))(, joinType=(inner()\" + \" JdbcProject(EMPNO=($0(, ENAME=($1(, SAL=($5()\" + \" JdbcTableScan(table=((SCOTT, EMP(()\" + \" JdbcTableScan(table=((SCOTT, SALGRADE(()\").runs().enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB).planHasSql(\"SELECT \"t\".\"EMPNO\", \"t\".\"ENAME\", \"SALGRADE\".\"GRADE\"\" + \"FROM (SELECT \"EMPNO\", \"ENAME\", \"SAL\"\" + \"FROM \"SCOTT\".\"EMP\") AS \"t\"\" + \"INNER JOIN \"SCOTT\".\"SALGRADE\" ON \"t\".\"SAL\" >= \"SALGRADE\".\"LOSAL\" \" + \"AND \"t\".\"SAL\" <= \"SALGRADE\".\"HISAL\"\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "testNonEquiJoinPlan['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testNonEquiJoinReverseConditionPlan['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "CalciteAssert.model(JdbcTest.SCOTT_MODEL).query(\"select empno, ename, grade\" + \"from scott.emp e inner join scott.salgrade s\" + \"on e.sal > s.losal and e.sal < s.hisal\").explainContains(\"PLAN=JdbcToEnumerableConverter\" + \" JdbcProject(EMPNO=($0(, ENAME=($1(, GRADE=($3()\" + \" JdbcJoin(condition=(AND(>($2, $4), <($2, $5))(, joinType=(inner()\" + \" JdbcProject(EMPNO=($0(, ENAME=($1(, SAL=($5()\" + \" JdbcTableScan(table=((SCOTT, EMP(()\" + \" JdbcTableScan(table=((SCOTT, SALGRADE(()\").runs().enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB).planHasSql(\"SELECT \"t\".\"EMPNO\", \"t\".\"ENAME\", \"SALGRADE\".\"GRADE\"\" + \"FROM (SELECT \"EMPNO\", \"ENAME\", \"SAL\"\" + \"FROM \"SCOTT\".\"EMP\") AS \"t\"\" + \"INNER JOIN \"SCOTT\".\"SALGRADE\" \" + \"ON \"t\".\"SAL\" > \"SALGRADE\".\"LOSAL\" \" + \"AND \"t\".\"SAL\" < \"SALGRADE\".\"HISAL\"\")@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "CalciteAssert.model(JdbcTest.SCOTT_MODEL).query(\"select empno, ename, grade\" + \"from scott.emp e inner join scott.salgrade s\" + \"on s.losal <= e.sal and s.hisal >= e.sal\").explainContains(\"PLAN=JdbcToEnumerableConverter\" + \" JdbcProject(EMPNO=($0(, ENAME=($1(, GRADE=($3()\" + \" JdbcJoin(condition=(AND(<=($4, $2), >=($5, $2))(, joinType=(inner()\" + \" JdbcProject(EMPNO=($0(, ENAME=($1(, SAL=($5()\" + \" JdbcTableScan(table=((SCOTT, EMP(()\" + \" JdbcTableScan(table=((SCOTT, SALGRADE(()\").runs().enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB).planHasSql(\"SELECT \"t\".\"EMPNO\", \"t\".\"ENAME\", \"SALGRADE\".\"GRADE\"\" + \"FROM (SELECT \"EMPNO\", \"ENAME\", \"SAL\"\" + \"FROM \"SCOTT\".\"EMP\") AS \"t\"\" + \"INNER JOIN \"SCOTT\".\"SALGRADE\" ON \"t\".\"SAL\" >= \"SALGRADE\".\"LOSAL\" \" + \"AND \"t\".\"SAL\" <= \"SALGRADE\".\"HISAL\"\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->2 [style = dashed, label="0"];
1->0 [style = bold, label=""];
3->2 [style = bold, label=""];
0->5 [style = dashed, label="0"];
4->5 [style = bold, label=""];
}
