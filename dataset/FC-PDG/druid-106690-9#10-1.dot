digraph {
7 [style = filled, label = "verify(expectedResults,compactedListToRow(results))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ScanQuery query = newTestQuery().intervals(I_0112_0114).columns(QueryRunnerTestHelper.MARKET_DIMENSION,QueryRunnerTestHelper.INDEX_METRIC).resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ScanQuery query = newTestQuery().intervals(I_0112_0114).columns(QueryRunnerTestHelper.MARKET_DIMENSION,QueryRunnerTestHelper.INDEX_METRIC).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testSelectWithDimsAndMets['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<ScanResultValue> expectedResults = toExpected(toEvents(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8f63eb,V_0112_0114),legacy? Lists.newArrayList(getTimestampName(),\"market\",\"index\"): Lists.newArrayList(\"market\",\"index\"),0,3)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testSelectWithDimsAndMetsAsCompactedList['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Iterable<ScanResultValue> results = runner.run(QueryPlus.wrap(query)).toList()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "verify(expectedResults,results)@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testSelectWithDimsAndMets['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0->3 [style = bold, label=""];
3->7 [style = solid, label="results"];
6->3 [style = bold, label=""];
3->2 [style = solid, label="results"];
4->2 [style = solid, label="expectedResults"];
8->6 [style = bold, label=""];
4->2 [style = bold, label=""];
1->0 [style = bold, label=""];
5->0 [style = bold, label=""];
2->7 [style = dashed, label="0"];
3->4 [style = bold, label=""];
4->7 [style = bold, label=""];
4->7 [style = solid, label="expectedResults"];
0->6 [style = dashed, label="0"];
}
