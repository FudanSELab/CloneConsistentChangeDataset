digraph {
1 [style = filled, label = "final IndexIngestionSpec parseExceptionIgnoreSpec = createIngestionSpec(tmpDir,new CSVParseSpec(new TimestampSpec(\"time\",\"auto\",null),new DimensionsSpec(null,Lists.newArrayList(),Lists.newArrayList()),null,Arrays.asList(\"time\",\"dim\",\"val\"),true,0),null,createTuningConfig(2,null,null,null,null,false,false,false),false)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "final File tmpDir = temporaryFolder.newFolder()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(1,segments.size())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testCSVFileWithHeaderColumnOverride['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "IndexTask indexTask = new IndexTask(null,null,createIngestionSpec(tmpDir,new CSVParseSpec(new TimestampSpec(\"time\",\"auto\",null),new DimensionsSpec(null,Lists.newArrayList(),Lists.newArrayList()),null,Arrays.asList(\"time\",\"dim\",\"val\"),true,0),null,createTuningConfig(2,null,false,true),false),null,AuthTestUtils.TEST_AUTHORIZER_MAPPER,null,rowIngestionMetersFactory)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(Collections.singletonList(\"val\"),segments.get(0).getMetrics())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "writer.write(\"time,d,val\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final IndexIngestionSpec parseExceptionIgnoreSpec = createIngestionSpec(tmpDir,new CSVParseSpec(new TimestampSpec(\"time\",\"auto\",null),new DimensionsSpec(null,Lists.newArrayList(),Lists.newArrayList()),null,Arrays.asList(\"time\",\"dim\",\"val\"),true,0),null,createTuningConfig(2,null,null,null,null,null,false,false,false),false)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "File tmpFile = File.createTempFile(\"druid\",\"index\",tmpDir)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testIgnoreParseException['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "final File tmpFile = File.createTempFile(\"druid\",\"index\",tmpDir)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "IndexTask indexTask = new IndexTask(null,null,parseExceptionIgnoreSpec,null,AuthTestUtils.TEST_AUTHORIZER_MAPPER,null,rowIngestionMetersFactory)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(Intervals.of(\"2014/P1D\"),segments.get(0).getInterval())@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "File tmpDir = temporaryFolder.newFolder()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(Collections.singletonList(\"d\"),segments.get(0).getDimensions())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final List<DataSegment> segments = runTask(indexTask).rhs@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "writer.write(\"2014-01-01T00:00:10Z,a,1\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(Intervals.of(\"2014/P1D\"),segments.get(0).getInterval())@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "writer.write(\"unparseable,a,1\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testIgnoreParseException['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9->3 [style = solid, label="tmpDir"];
17->14 [style = solid, label="indexTask"];
16->15 [style = bold, label=""];
15->18 [style = solid, label="tmpDir"];
1->8 [style = bold, label=""];
0->13 [style = bold, label=""];
0->17 [style = bold, label=""];
13->8 [style = solid, label="parseExceptionIgnoreSpec"];
3->18 [style = dashed, label="0"];
7->0 [style = bold, label=""];
15->17 [style = solid, label="tmpDir"];
7->4 [style = bold, label=""];
2->9 [style = bold, label=""];
1->8 [style = solid, label="parseExceptionIgnoreSpec"];
11->19 [style = bold, label=""];
12->9 [style = bold, label=""];
15->18 [style = bold, label=""];
4->0 [style = bold, label=""];
1->13 [style = dashed, label="0"];
19->5 [style = bold, label=""];
8->11 [style = solid, label="indexTask"];
11->5 [style = bold, label=""];
1->17 [style = dashed, label="0"];
5->6 [style = bold, label=""];
3->7 [style = bold, label=""];
17->14 [style = bold, label=""];
0->1 [style = bold, label=""];
6->10 [style = bold, label=""];
9->3 [style = bold, label=""];
9->1 [style = solid, label="tmpDir"];
13->8 [style = bold, label=""];
18->7 [style = bold, label=""];
8->11 [style = bold, label=""];
14->11 [style = bold, label=""];
9->13 [style = solid, label="tmpDir"];
9->15 [style = dashed, label="0"];
}
