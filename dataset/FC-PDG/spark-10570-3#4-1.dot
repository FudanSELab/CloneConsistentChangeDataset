digraph {
21 [style = filled, label = "assertEquals(256,inputStream.skip(256))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testNegativeBytesSkippedAfterRead['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(0,inputStream.skip(Long.MIN_VALUE))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "i < randomBytes.length@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(1024,inputStream.skip(1024))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(randomBytes(i(,(byte)inputStream.read())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "i++@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "i++@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(512,inputStream.skip(512))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "i++@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(0,inputStream.skip(-1024))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testNegativeBytesSkippedAfterRead['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "i < 1024@@@5@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "i < 2048@@@5@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "i < randomBytes.length@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "int i = 3072@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(256,inputStream.skip(256))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(1024,inputStream.skip(1024))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "int i = 2048@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(0,inputStream.skip(-1))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int i = 0@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(randomBytes(i(,(byte)inputStream.read())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testSkipFromFileChannel['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "int i = 1024@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->3 [style = bold, label=""];
5->10 [style = bold, label=""];
8->10 [style = bold, label=""];
10->8 [style = dotted, label="true"];
6->4 [style = solid, label="i"];
3->16 [style = solid, label="i"];
7->21 [style = dashed, label="0"];
8->3 [style = solid, label="i"];
5->3 [style = solid, label="i"];
7->12 [style = bold, label=""];
2->6 [style = bold, label=""];
15->21 [style = bold, label=""];
4->0 [style = dotted, label="true"];
4->11 [style = dotted, label="true"];
10->3 [style = dotted, label="true"];
3->15 [style = solid, label="i"];
10->3 [style = bold, label=""];
3->15 [style = bold, label=""];
19->17 [style = bold, label=""];
0->4 [style = solid, label="i"];
15->16 [style = dotted, label="true"];
15->16 [style = bold, label=""];
12->1 [style = bold, label=""];
14->3 [style = solid, label="i"];
10->7 [style = bold, label=""];
22->0 [style = solid, label="i"];
21->18 [style = bold, label=""];
22->23 [style = bold, label=""];
22->23 [style = solid, label="i"];
20->22 [style = bold, label=""];
0->23 [style = solid, label="i"];
6->0 [style = solid, label="i"];
14->16 [style = solid, label="i"];
15->3 [style = dotted, label="true"];
1->20 [style = dashed, label="0"];
6->4 [style = bold, label=""];
18->20 [style = bold, label=""];
11->0 [style = bold, label=""];
0->23 [style = bold, label=""];
6->11 [style = solid, label="i"];
0->4 [style = bold, label=""];
17->14 [style = bold, label=""];
3->8 [style = bold, label=""];
0->11 [style = solid, label="i"];
8->10 [style = solid, label="i"];
23->11 [style = dotted, label="true"];
13->5 [style = bold, label=""];
9->5 [style = bold, label=""];
22->11 [style = solid, label="i"];
12->18 [style = dashed, label="0"];
14->15 [style = bold, label=""];
1->2 [style = bold, label=""];
14->15 [style = solid, label="i"];
23->11 [style = bold, label=""];
4->11 [style = bold, label=""];
5->10 [style = solid, label="i"];
4->5 [style = bold, label=""];
23->0 [style = dotted, label="true"];
10->14 [style = dashed, label="0"];
5->8 [style = solid, label="i"];
}
