digraph {
5 [style = filled, label = "waitLatch.countDown()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(consumingLatch.await(10,TimeUnit.SECONDS))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "final CountDownLatch consumingLatch = new CountDownLatch(1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "queue.put(new TestQueueItem(\"test\"),\"id\")@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "QueueConsumer<TestQueueItem> consumer = new QueueConsumer<TestQueueItem>(){@Override public void consumeMessage(TestQueueItem message){consumingLatch.countDown()throw new Exception(\"Consumer failed\")}@Override public void stateChanged(CuratorFramework client,ConnectionState newState){}}@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(queue.remove(\"id\"),0)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "testRequeuingWithLock['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "client.start()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "DistributedIdQueue<TestQueueItem> queue = null@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertTrue(queue.debugIsQueued(\"id\"))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Thread.sleep(1000)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "queue.start()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertTrue(consumingLatch.await(10,TimeUnit.SECONDS))@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "queue = QueueBuilder.builder(client,consumer,serializer,QUEUE_PATH).lockPath(\"/locks\").buildIdQueue()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(queue.remove(\"id\"),0)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testDeletingWithLock['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "{CloseableUtils.closeQuietly(queue)CloseableUtils.closeQuietly(client)}@@@24@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),new RetryOneTime(1))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final CountDownLatch waitLatch = new CountDownLatch(1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testDeletingWithLock['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0->16 [style = bold, label=""];
10->19 [style = bold, label=""];
18->11 [style = bold, label=""];
6->0 [style = bold, label=""];
19->17 [style = bold, label=""];
12->6 [style = bold, label=""];
1->7 [style = bold, label=""];
1->9 [style = bold, label=""];
13->14 [style = dashed, label="0"];
7->9 [style = bold, label=""];
8->1 [style = bold, label=""];
5->2 [style = bold, label=""];
0->10 [style = bold, label=""];
3->2 [style = solid, label="client"];
15->11 [style = bold, label=""];
17->2 [style = bold, label=""];
10->13 [style = bold, label=""];
11->3 [style = bold, label=""];
3->8 [style = bold, label=""];
13->5 [style = bold, label=""];
16->14 [style = bold, label=""];
12->2 [style = solid, label="queue"];
9->12 [style = bold, label=""];
10->16 [style = dashed, label="0"];
4->11 [style = bold, label=""];
14->5 [style = bold, label=""];
}
