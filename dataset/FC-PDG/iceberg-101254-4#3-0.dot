digraph {
15 [style = filled, label = "Assert.assertFalse(\"Should skip: lessThan on all null column\",shouldRead)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "Assert.assertFalse(\"Should not match: no non-null value in all null column\",shouldRead)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertTrue(\"Should read: column with some nulls contains a non-null value\",shouldRead)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertFalse(\"Should skip: equal on all null column\",shouldRead)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,greaterThan(\"all_nulls\",\"a\")).eval(FILE)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA,notNull(\"all_nulls\")).eval(FILE)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertFalse(\"Should skip: greaterThanOrEqual on all null column\",shouldRead)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Assert.assertFalse(\"Should not match: column with some nulls contains a non-null value\",shouldRead)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,notNull(\"some_nulls\")).eval(FILE)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertFalse(\"Should skip: no non-null value in all null column\",shouldRead)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "shouldRead = new StrictMetricsEvaluator(SCHEMA,notNull(\"no_nulls\")).eval(FILE)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "shouldRead = new StrictMetricsEvaluator(SCHEMA,notNull(\"some_nulls\")).eval(FILE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testAllNulls['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testAllNulls['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,lessThan(\"all_nulls\",\"a\")).eval(FILE)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,lessThanOrEqual(\"all_nulls\",\"a\")).eval(FILE)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Assert.assertFalse(\"Should skip: greaterThan on all null column\",shouldRead)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Assert.assertTrue(\"Should read: non-null column contains a non-null value\",shouldRead)@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,greaterThanOrEqual(\"all_nulls\",\"a\")).eval(FILE)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,equal(\"all_nulls\",\"a\")).eval(FILE)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "Assert.assertTrue(\"Should match: non-null column contains no null values\",shouldRead)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testAllNulls['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "shouldRead = new InclusiveMetricsEvaluator(SCHEMA,notNull(\"no_nulls\")).eval(FILE)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "boolean shouldRead = new StrictMetricsEvaluator(SCHEMA,notNull(\"all_nulls\")).eval(FILE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertFalse(\"Should skip: lessThanOrEqual on all null column\",shouldRead)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0->5 [style = solid, label="shouldRead"];
8->11 [style = solid, label="shouldRead"];
12->0 [style = bold, label=""];
5->14 [style = bold, label=""];
4->6 [style = bold, label=""];
22->19 [style = bold, label=""];
0->19 [style = dashed, label="0"];
15->9 [style = bold, label=""];
4->21 [style = dashed, label="0"];
13->17 [style = bold, label=""];
1->20 [style = dashed, label="0"];
20->18 [style = bold, label=""];
5->1 [style = bold, label=""];
20->18 [style = solid, label="shouldRead"];
21->24 [style = solid, label="shouldRead"];
7->16 [style = bold, label=""];
10->8 [style = bold, label=""];
11->1 [style = bold, label=""];
21->24 [style = bold, label=""];
19->23 [style = bold, label=""];
16->13 [style = bold, label=""];
9->7 [style = solid, label="shouldRead"];
14->15 [style = solid, label="shouldRead"];
4->6 [style = solid, label="shouldRead"];
8->11 [style = bold, label=""];
19->23 [style = solid, label="shouldRead"];
1->3 [style = bold, label=""];
5->23 [style = dashed, label="0"];
23->20 [style = bold, label=""];
6->24 [style = dashed, label="0"];
17->10 [style = solid, label="shouldRead"];
16->13 [style = solid, label="shouldRead"];
3->18 [style = dashed, label="0"];
18->21 [style = bold, label=""];
2->0 [style = bold, label=""];
0->5 [style = bold, label=""];
1->3 [style = solid, label="shouldRead"];
14->15 [style = bold, label=""];
3->4 [style = bold, label=""];
17->10 [style = bold, label=""];
9->7 [style = bold, label=""];
}
