digraph {
0 [style = filled, label = "noOpConnect['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Flowable<Integer> f = new ConnectableFlowable<Integer>(){@Override public void connect(Consumer<? super Disposable> connection){calls(0(++}@Override public void reset(){}@Override protected void subscribeActual(Subscriber<? super Integer> subscriber){subscriber.onSubscribe(new BooleanSubscription())}}.refCount()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final int(( calls = {0}@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "o.test()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "noOpConnect['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "noOpConnect['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "o.test()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "f.test()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Observable<Integer> o = new ConnectableObservable<Integer>(){@Override public void connect(Consumer<? super Disposable> connection){calls(0(++}@Override public void reset(){}@Override protected void subscribeActual(Observer<? super Integer> observer){observer.onSubscribe(Disposable.disposed())}}.refCount()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(1,calls(0()@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "f.test()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->3 [style = solid, label="calls"];
10->9 [style = bold, label=""];
8->1 [style = bold, label=""];
2->10 [style = dashed, label="0"];
4->7 [style = dashed, label="0"];
1->10 [style = bold, label=""];
4->3 [style = bold, label=""];
6->1 [style = bold, label=""];
1->2 [style = bold, label=""];
7->3 [style = bold, label=""];
0->1 [style = bold, label=""];
5->9 [style = dashed, label="0"];
5->4 [style = bold, label=""];
2->5 [style = bold, label=""];
9->7 [style = bold, label=""];
}
