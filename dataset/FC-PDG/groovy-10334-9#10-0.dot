digraph {
30 [style = filled, label = "statement.addStatement(createPrintlnStatement(new VariableExpression(\"coll3\")))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertTrue(\"Loaded a new class\",fooClass != null)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testLoop['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "ForStatement statement = new ForStatement(\"i\",ClassHelper.DYNAMIC_TYPE,new VariableExpression(\"coll\"),loopStatement)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "BlockStatement statement = new BlockStatement()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "InvokerInvocationException e@@@24@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "e.getCause().printStackTrace()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Object bean = fooClass.newInstance()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "InvokerHelper.invokeMethod(bean,\"iterateDemo\",new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@161aa5d)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "statement.addStatement(createPrintlnStatement(new VariableExpression(\"coll1\")))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "classNode.addMethod(new MethodNode(\"iterateDemo\",ACC_PUBLIC,ClassHelper.VOID_TYPE,parameters,ClassNode.EMPTY_ARRAY,statement))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Object(( array = {new Integer(1000 * 1000),\"foo-\",\"bar~\"}@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Parameter(( parameters = {new Parameter(ClassHelper.OBJECT_TYPE,\"coll1\"),new Parameter(ClassHelper.OBJECT_TYPE,\"coll2\"),new Parameter(ClassHelper.OBJECT_TYPE,\"coll3\")}@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(\"Managed to create bean\",bean != null)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ClassNode classNode = new ClassNode(\"Foo\",ACC_PUBLIC,ClassHelper.OBJECT_TYPE)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Statement loopStatement = createPrintlnStatement(new VariableExpression(\"i\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "classNode.addConstructor(new ConstructorNode(ACC_PUBLIC,null))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "statement.addStatement(createPrintlnStatement(new VariableExpression(\"coll2\")))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "fail(\"Should not have thrown an exception\")@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "System.out.println(\"Caught: \" + e.getCause())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testLoop['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(\"Loaded a new class\",fooClass != null)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ForStatement statement = new ForStatement(new Parameter(ClassHelper.OBJECT_TYPE,\"i\"),new VariableExpression(\"coll\"),loopStatement)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "System.out.println(\"################ Done\")@@@29@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "classNode.addMethod(new MethodNode(\"manyParamDemo\",ACC_PUBLIC,ClassHelper.VOID_TYPE,parameters,ClassNode.EMPTY_ARRAY,statement))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "InvokerHelper.invokeMethod(bean,\"manyParamDemo\",array)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "System.out.println(\"################ Now about to invoke a method with many parameters\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Class fooClass = loadClass(classNode)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testManyParam['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "InvokerInvocationException e@@@24@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Class fooClass = loadClass(classNode)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->3 [style = bold, label=""];
13->15 [style = solid, label="statement"];
23->21 [style = solid, label="array"];
30->22 [style = bold, label=""];
16->2 [style = dotted, label="true"];
20->9 [style = bold, label=""];
10->1 [style = solid, label="array"];
25->23 [style = bold, label=""];
4->19 [style = solid, label="loopStatement"];
17->9 [style = bold, label=""];
11->6 [style = bold, label=""];
4->13 [style = bold, label=""];
27->3 [style = bold, label=""];
4->19 [style = bold, label=""];
29->9 [style = bold, label=""];
28->22 [style = solid, label="statement"];
28->26 [style = bold, label=""];
1->18 [style = bold, label=""];
14->28 [style = bold, label=""];
19->15 [style = solid, label="statement"];
1->21 [style = dashed, label="0"];
27->2 [style = dotted, label="true"];
5->14 [style = bold, label=""];
13->19 [style = dashed, label="0"];
26->24 [style = bold, label=""];
13->26 [style = dashed, label="0"];
11->1 [style = solid, label="bean"];
16->3 [style = dotted, label="true"];
21->18 [style = bold, label=""];
27->3 [style = dotted, label="true"];
24->30 [style = bold, label=""];
16->7 [style = dotted, label="true"];
12->21 [style = solid, label="bean"];
12->10 [style = bold, label=""];
12->25 [style = dashed, label="0"];
27->7 [style = dotted, label="true"];
3->2 [style = bold, label=""];
23->21 [style = bold, label=""];
14->22 [style = solid, label="parameters"];
10->25 [style = bold, label=""];
14->15 [style = solid, label="parameters"];
12->10 [style = solid, label="bean"];
15->0 [style = bold, label=""];
9->11 [style = solid, label="classNode"];
0->8 [style = bold, label=""];
9->5 [style = bold, label=""];
7->18 [style = bold, label=""];
0->8 [style = solid, label="fooClass"];
13->15 [style = bold, label=""];
2->7 [style = bold, label=""];
19->15 [style = bold, label=""];
10->1 [style = bold, label=""];
8->11 [style = bold, label=""];
4->13 [style = solid, label="loopStatement"];
11->6 [style = solid, label="bean"];
22->11 [style = bold, label=""];
9->0 [style = solid, label="classNode"];
11->6 [style = solid, label="fooClass"];
14->4 [style = bold, label=""];
6->12 [style = bold, label=""];
}
