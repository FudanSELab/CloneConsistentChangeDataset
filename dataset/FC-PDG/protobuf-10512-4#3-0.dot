digraph {
12 [style = filled, label = "container = TestAny.newBuilder().setValue(Any.pack(message,\"\")).build()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertTrue(Objects.equals(result1,result2))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "TestUtil.assertAllFieldsSet(result)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "TestAllTypes result = container.getValue().unpack()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(container.getValue().is())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertFalse(container.getValue().is())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TestAllTypes message = builder.build()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "result = container.getValue().unpack()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertFalse(container.getValue().is())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(\"xxx.com/\" + TestAllTypes.getDescriptor().getFullName(),container.getValue().getTypeUrl())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(result1 == result2)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "TestUtil.setAllFields(builder)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "container = TestAny.newBuilder().setValue(Any.pack(message,\"yyy.com/\")).build()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testCachedUnpackResult['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testCustomTypeUrls['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "TestAllTypes.Builder builder = TestAllTypes.newBuilder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testCachedUnpackResult['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "TestAny container = TestAny.newBuilder().setValue(Any.pack(message)).build()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "TestAny container = TestAny.newBuilder().setValue(Any.pack(message,\"xxx.com\")).build()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertTrue(container.getValue().is())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "result = container.getValue().unpack()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "TestUtil.assertAllFieldsSet(result)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(\"yyy.com/\" + TestAllTypes.getDescriptor().getFullName(),container.getValue().getTypeUrl())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "TestAllTypes result2 = container.getValue().unpack()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(\"/\" + TestAllTypes.getDescriptor().getFullName(),container.getValue().getTypeUrl())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertTrue(container.getValue().is())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertFalse(container.getValue().is())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "TestUtil.assertAllFieldsSet(result)@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertTrue(container.getValue().is())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->17 [style = bold, label=""];
15->23 [style = bold, label=""];
6->26 [style = bold, label=""];
28->15 [style = bold, label=""];
7->18 [style = dashed, label="0"];
27->14 [style = bold, label=""];
4->6 [style = bold, label=""];
1->0 [style = solid, label="builder"];
7->10 [style = bold, label=""];
11->1 [style = bold, label=""];
0->2 [style = bold, label=""];
24->25 [style = solid, label="result"];
3->22 [style = dashed, label="0"];
1->0 [style = bold, label=""];
19->6 [style = bold, label=""];
6->10 [style = solid, label="result1"];
6->3 [style = solid, label="result1"];
17->19 [style = bold, label=""];
7->3 [style = bold, label=""];
8->1 [style = bold, label=""];
18->22 [style = solid, label="result"];
23->24 [style = bold, label=""];
7->10 [style = solid, label="result2"];
18->22 [style = bold, label=""];
5->17 [style = dashed, label="0"];
25->12 [style = bold, label=""];
6->26 [style = dashed, label="0"];
24->25 [style = bold, label=""];
16->20 [style = solid, label="result"];
5->4 [style = bold, label=""];
21->16 [style = bold, label=""];
3->10 [style = dashed, label="0"];
22->13 [style = bold, label=""];
13->28 [style = bold, label=""];
6->7 [style = bold, label=""];
9->1 [style = bold, label=""];
16->20 [style = bold, label=""];
12->27 [style = bold, label=""];
14->21 [style = bold, label=""];
7->3 [style = solid, label="result2"];
2->5 [style = bold, label=""];
26->18 [style = bold, label=""];
}
