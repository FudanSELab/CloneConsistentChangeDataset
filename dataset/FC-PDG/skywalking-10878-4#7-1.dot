digraph {
7 [style = filled, label = "Assert.assertEquals(\"source.getName()\",filterExpression.getLeft())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "result.setMetricsName(\"EndpointAvg\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(\"(long)(source.getLatency())\",method.getArgsExpressions().get(0))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Expression filterExpression = filterExpressions.get(0)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "AnalysisResult result = new AnalysisResult()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ConditionExpression expression = new ConditionExpression()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "result.setMetricsName(\"ServiceAvg\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "result.setSourceName(\"Endpoint\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "expression.setValue(\"\"/service/prod/save\"\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(\"\"/service/prod/save\"\",filterExpression.getRight())@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expression.setAttribute(\"name\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "DeepAnalysis analysis = new DeepAnalysis()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(4,persistentFields.size())@@@18@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<SourceColumn> source = result.getFieldsFromSource()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<DataColumn> persistentFields = result.getPersistentFields()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "List<Expression> filterExpressions = result.getFilterExpressions()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "result.setAggregationFunctionName(\"longAvg\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "result = analysis.analysis(result)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "result.setSourceAttribute(\"latency\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "expression.setExpressionType(\"stringMatch\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(\"combine\",method.getMethodName())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(1,source.size())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(\"EqualMatch\",filterExpression.getExpressionObject())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(1,filterExpressions.size())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "result.setSourceName(\"Service\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertEquals(2,source.size())@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assert.assertEquals(3,source.size())@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(\"(long)(1)\",method.getArgsExpressions().get(1))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testFilterAnalysis['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "result.addFilterExpressionsParserResult(expression)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "EntryMethod method = result.getEntryMethod()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testFilterAnalysis['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "result.setPackageName(\"endpoint.endpointavg\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "result.setPackageName(\"service.serviceavg\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "testServiceAnalysis['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
33->14 [style = bold, label=""];
10->20 [style = bold, label=""];
27->1 [style = bold, label=""];
6->26 [style = bold, label=""];
16->6 [style = solid, label="result"];
2->6 [style = solid, label="analysis"];
21->28 [style = dashed, label="0"];
2->6 [style = bold, label=""];
12->15 [style = bold, label=""];
26->18 [style = bold, label=""];
4->31 [style = dashed, label="0"];
20->3 [style = bold, label=""];
0->21 [style = bold, label=""];
11->3 [style = solid, label="expression"];
9->10 [style = bold, label=""];
12->30 [style = dashed, label="0"];
15->19 [style = bold, label=""];
11->9 [style = bold, label=""];
13->16 [style = bold, label=""];
19->8 [style = bold, label=""];
28->14 [style = bold, label=""];
32->8 [style = bold, label=""];
18->22 [style = bold, label=""];
17->0 [style = bold, label=""];
3->2 [style = bold, label=""];
8->2 [style = bold, label=""];
0->33 [style = bold, label=""];
21->33 [style = dashed, label="0"];
1->24 [style = bold, label=""];
24->25 [style = bold, label=""];
16->31 [style = bold, label=""];
34->16 [style = bold, label=""];
7->23 [style = bold, label=""];
31->30 [style = bold, label=""];
4->12 [style = bold, label=""];
22->17 [style = bold, label=""];
5->7 [style = bold, label=""];
25->5 [style = bold, label=""];
14->27 [style = bold, label=""];
19->32 [style = dashed, label="0"];
16->4 [style = bold, label=""];
15->32 [style = bold, label=""];
8->11 [style = bold, label=""];
29->16 [style = bold, label=""];
0->28 [style = bold, label=""];
30->15 [style = bold, label=""];
21->14 [style = bold, label=""];
}
