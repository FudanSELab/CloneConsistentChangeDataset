digraph {
11 [style = filled, label = "CuratorFramework client = createClient(new DefaultACLProvider())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertTrue(latch.await(2000,TimeUnit.MILLISECONDS),\"Callback not invoked\")@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<ACL> actual_bar = client.getACL().forPath(\"/bar\")@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "List<ACL> actual_bar_foo = client.getACL().forPath(path)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(actual_bar,acl)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "String path = \"/bar/foo\"@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(actual_bar,ZooDefs.Ids.OPEN_ACL_UNSAFE)@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "BackgroundCallback callback = new BackgroundCallback(){@Override public void processResult(CuratorFramework client,CuratorEvent event){latch.countDown()}}@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testCreateWithParentsWithAclInBackground['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "List<ACL> acl = Collections.singletonList(new ACL(ZooDefs.Perms.CREATE | ZooDefs.Perms.READ,ANYONE_ID_UNSAFE))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(latch.await(2000,TimeUnit.MILLISECONDS),\"Callback not invoked\")@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "client.start()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final CountDownLatch latch = new CountDownLatch(1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "client.create().creatingParentsIfNeeded().withACL(acl).inBackground(callback).forPath(path)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "client.create().creatingParentsIfNeeded().withACL(acl,true).inBackground(callback).forPath(path)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testCreateWithParentsWithAclApplyToParentsInBackground['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(actual_bar,ZooDefs.Ids.OPEN_ACL_UNSAFE)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(actual_bar_foo,acl)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testCreateWithParentsWithAclInBackground['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@22@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(actual_bar_foo,acl)@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
8->16 [style = bold, label=""];
1->4 [style = bold, label=""];
7->15 [style = solid, label="acl"];
3->17 [style = solid, label="actual_bar"];
3->1 [style = bold, label=""];
3->18 [style = solid, label="actual_bar"];
0->12 [style = bold, label=""];
20->0 [style = bold, label=""];
7->6 [style = solid, label="acl"];
12->15 [style = bold, label=""];
0->16 [style = dashed, label="0"];
8->20 [style = dashed, label="0"];
2->20 [style = solid, label="path"];
3->1 [style = solid, label="actual_bar"];
9->20 [style = bold, label=""];
19->11 [style = bold, label=""];
2->12 [style = solid, label="path"];
1->18 [style = dashed, label="0"];
9->8 [style = bold, label=""];
12->6 [style = bold, label=""];
15->3 [style = bold, label=""];
2->8 [style = solid, label="path"];
12->15 [style = solid, label="actual_bar_foo"];
12->6 [style = solid, label="actual_bar_foo"];
3->18 [style = bold, label=""];
8->0 [style = bold, label=""];
7->9 [style = bold, label=""];
5->2 [style = bold, label=""];
1->17 [style = dashed, label="0"];
18->4 [style = bold, label=""];
6->15 [style = dashed, label="0"];
11->13 [style = bold, label=""];
7->18 [style = solid, label="acl"];
13->5 [style = bold, label=""];
3->17 [style = bold, label=""];
2->7 [style = bold, label=""];
14->11 [style = bold, label=""];
16->12 [style = bold, label=""];
17->4 [style = bold, label=""];
11->4 [style = solid, label="client"];
10->11 [style = bold, label=""];
}
