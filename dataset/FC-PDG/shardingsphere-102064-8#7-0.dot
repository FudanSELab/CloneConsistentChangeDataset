digraph {
18 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLoadBalancer(),is(expected.getLoadBalancer()))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual dataSource should exist.\"),actual)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final ReadwriteSplittingRuleSegment actual@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getPort(),CoreMatchers.is(expected.getPort()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "PropertiesAssert.assertIs(assertContext,actual.getProps(),expected.getProps())@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getReadDataSources(),is(expected.getReadDataSources()))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getAutoAwareResource(),is(expected.getAutoAwareResource()))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "null == expected@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getDb(),CoreMatchers.is(expected.getDb()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual should exit.\"),actual)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "final ExceptedReadwriteSplittingRule expected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getPassword(),CoreMatchers.is(expected.getPassword()))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final DataSourceSegment actual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertIs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "final ExpectedDataSource expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertNull(assertContext.getText(\"Actual should not exit.\"),actual)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertIs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getWriteDataSource(),is(expected.getWriteDataSource()))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),is(expected.getName()))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "PropertiesAssert.assertIs(assertContext,actual.getProperties(),expected.getProps())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final ReadwriteSplittingRuleSegment actual@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual readwrite splitting rule should exit.\"),actual)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertIs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getReadDataSources(),is(expected.getReadDataSources()))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getUser(),CoreMatchers.is(expected.getUser()))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),CoreMatchers.is(expected.getName()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),is(expected.getName()))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getAutoAwareResource(),is(expected.getAutoAwareResource()))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getUrl(),CoreMatchers.is(expected.getUrl()))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getHostName(),CoreMatchers.is(expected.getHostName()))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertNull(assertContext.getText(\"Actual readwrite splitting rule should not exit.\"),actual)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getWriteDataSource(),is(expected.getWriteDataSource()))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "assertNull(assertContext.getText(\"Actual dataSource should not exist.\"),actual)@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLoadBalancer(),is(expected.getLoadBalancer()))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6->3 [style = bold, label=""];
11->20 [style = dashed, label="0"];
33->23 [style = solid, label="assertContext"];
26->34 [style = bold, label=""];
24->2 [style = solid, label="expected"];
17->14 [style = dotted, label="true"];
2->0 [style = dotted, label="false"];
1->5 [style = solid, label="assertContext"];
7->4 [style = solid, label="actual"];
2->5 [style = dotted, label="false"];
6->36 [style = dashed, label="0"];
21->16 [style = bold, label=""];
0->34 [style = dashed, label="0"];
8->30 [style = dashed, label="0"];
10->1 [style = dotted, label="true"];
2->11 [style = dotted, label="false"];
9->2 [style = solid, label="expected"];
2->28 [style = bold, label=""];
2->31 [style = bold, label=""];
2->30 [style = dotted, label="false"];
30->27 [style = bold, label=""];
12->11 [style = bold, label=""];
9->22 [style = solid, label="actual"];
29->23 [style = bold, label=""];
2->18 [style = dotted, label="false"];
2->29 [style = dotted, label="false"];
35->33 [style = dotted, label="true"];
2->4 [style = bold, label=""];
2->36 [style = dotted, label="false"];
2->26 [style = dotted, label="false"];
2->27 [style = dotted, label="false"];
7->12 [style = solid, label="actual"];
6->16 [style = dashed, label="0"];
2->12 [style = dotted, label="false"];
17->2 [style = bold, label=""];
22->20 [style = bold, label=""];
2->34 [style = dotted, label="false"];
34->36 [style = bold, label=""];
3->15 [style = dashed, label="0"];
8->18 [style = dashed, label="0"];
10->2 [style = bold, label=""];
3->32 [style = dashed, label="0"];
27->29 [style = bold, label=""];
2->19 [style = dotted, label="true"];
35->25 [style = dotted, label="true"];
2->23 [style = dotted, label="false"];
2->20 [style = dotted, label="false"];
2->15 [style = dotted, label="false"];
2->3 [style = dotted, label="false"];
25->31 [style = solid, label="actual"];
35->2 [style = bold, label=""];
11->26 [style = dashed, label="0"];
28->26 [style = bold, label=""];
2->28 [style = dotted, label="false"];
14->5 [style = solid, label="assertContext"];
10->9 [style = dotted, label="true"];
32->30 [style = bold, label=""];
13->2 [style = solid, label="expected"];
2->21 [style = dotted, label="false"];
3->8 [style = bold, label=""];
2->4 [style = dotted, label="true"];
12->22 [style = dashed, label="0"];
2->8 [style = dotted, label="false"];
9->19 [style = solid, label="actual"];
4->19 [style = dashed, label="0"];
2->32 [style = dotted, label="false"];
25->28 [style = solid, label="actual"];
16->15 [style = bold, label=""];
2->19 [style = bold, label=""];
35->24 [style = dotted, label="true"];
0->6 [style = bold, label=""];
4->31 [style = dashed, label="0"];
36->32 [style = bold, label=""];
2->31 [style = dotted, label="true"];
15->18 [style = bold, label=""];
2->16 [style = dotted, label="false"];
2->12 [style = bold, label=""];
9->33 [style = dashed, label="0"];
20->21 [style = bold, label=""];
11->0 [style = bold, label=""];
8->5 [style = bold, label=""];
0->21 [style = dashed, label="0"];
2->22 [style = dotted, label="false"];
12->28 [style = dashed, label="0"];
18->5 [style = bold, label=""];
17->9 [style = dotted, label="true"];
2->6 [style = dotted, label="false"];
2->22 [style = bold, label=""];
17->13 [style = dotted, label="true"];
10->7 [style = dotted, label="true"];
}
