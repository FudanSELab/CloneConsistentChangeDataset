digraph {
6 [style = filled, label = "Lookup.setDefaultResolver(mockResolver)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "m.getHeader().setRcode(Rcode.NXDOMAIN)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThrows(,null)@@@10@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "getByName_invalid['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Lookup.setDefaultResolver(mockResolver)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "when(mockResolver.send(ArgumentMatchers.any())).thenAnswer((Answer<Message>)null)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "getByName_invalid['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Resolver mockResolver = Mockito.mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Message m = new Message()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Lookup.refreshDefault()@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertThrows(,null)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThrows(,null)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "getAllByName_invalid['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThrows(,null)@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertThrows(,null)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "when(mockResolver.send(ArgumentMatchers.any())).thenReturn(m)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Lookup.refreshDefault()@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThrows(,null)@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->10 [style = solid, label="mockResolver"];
0->3 [style = bold, label=""];
3->1 [style = solid, label="m"];
15->2 [style = bold, label=""];
8->16 [style = dashed, label="0"];
7->11 [style = bold, label=""];
7->1 [style = bold, label=""];
4->2 [style = bold, label=""];
6->15 [style = bold, label=""];
6->4 [style = bold, label=""];
3->5 [style = bold, label=""];
1->6 [style = bold, label=""];
10->13 [style = bold, label=""];
11->10 [style = bold, label=""];
1->11 [style = dashed, label="0"];
4->15 [style = dashed, label="0"];
17->3 [style = bold, label=""];
5->7 [style = bold, label=""];
7->6 [style = solid, label="mockResolver"];
14->9 [style = bold, label=""];
12->3 [style = bold, label=""];
13->14 [style = bold, label=""];
2->8 [style = bold, label=""];
2->16 [style = bold, label=""];
}
