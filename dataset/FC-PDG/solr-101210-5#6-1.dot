digraph {
4 [style = filled, label = "assertTrue(buffer.length > S3OutputStream.PART_SIZE)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "S3OutputStream output = new S3OutputStream(s3,\"flush-large\",BUCKET)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "String read = IOUtils.toString(input,Charset.defaultCharset())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "output.flush()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"Flushing a large frame of an S3OutputStream should not impact data written\",content + \"some more\",read)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "InputStream input = s3.getObject(null)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "output.write(buffer)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "InputStream input = s3.getObject(null)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertEquals(new String(buffer,Charset.defaultCharset()),read)@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "output.close()@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "buffer = \"some more\".getBytes(Charset.defaultCharset())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertTrue(buffer.length > S3OutputStream.MIN_PART_SIZE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "output.write(buffer)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "byte(( buffer = content.getBytes(Charset.defaultCharset())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "S3OutputStream output = new S3OutputStream(s3,\"large-buffer\",BUCKET)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "testFlushLargeBuffer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testWriteLargeBuffer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "testWriteLargeBuffer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "String content = RandomStringUtils.randomAlphanumeric(S3OutputStream.MIN_PART_SIZE + 1024)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "String content = RandomStringUtils.randomAlphanumeric(S3OutputStream.PART_SIZE + 1024)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->17 [style = bold, label=""];
6->3 [style = bold, label=""];
16->15 [style = bold, label=""];
0->16 [style = bold, label=""];
18->3 [style = bold, label=""];
5->12 [style = dashed, label="0"];
4->16 [style = dashed, label="0"];
9->0 [style = bold, label=""];
4->6 [style = bold, label=""];
0->6 [style = solid, label="buffer"];
19->14 [style = solid, label="content"];
1->15 [style = dashed, label="0"];
5->7 [style = solid, label="input"];
15->6 [style = bold, label=""];
2->9 [style = bold, label=""];
3->12 [style = bold, label=""];
0->8 [style = solid, label="buffer"];
11->19 [style = bold, label=""];
8->14 [style = dashed, label="0"];
7->8 [style = bold, label=""];
12->7 [style = solid, label="input"];
12->7 [style = bold, label=""];
19->0 [style = bold, label=""];
7->8 [style = solid, label="read"];
7->14 [style = bold, label=""];
9->19 [style = dashed, label="0"];
3->5 [style = bold, label=""];
1->6 [style = bold, label=""];
0->4 [style = bold, label=""];
7->14 [style = solid, label="read"];
5->7 [style = bold, label=""];
4->1 [style = bold, label=""];
10->9 [style = bold, label=""];
17->13 [style = bold, label=""];
6->7 [style = bold, label=""];
13->18 [style = solid, label="buffer"];
13->18 [style = bold, label=""];
}
