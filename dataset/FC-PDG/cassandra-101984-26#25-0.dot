digraph {
10 [style = filled, label = "TransactionLogs.waitForDeletions()@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "cfs.getLiveSSTables()@@@23@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "TransactionLogs.waitForDeletions()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "sstable.openReason == SSTableReader.OpenReason.EARLY@@@24@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ci.hasNext()@@@17@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Keyspace keyspace = Keyspace.open(KEYSPACE)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(1,filecounts)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "cfs.addSSTable(s)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertEquals(1,filecounts)@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "validateCFS(cfs)@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(1,compactingPositions.size())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "writer.finish()@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.getPartitioner().getMinimumToken(),cfs.getPartitioner().getMinimumToken()))@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "boolean checked = false@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "cfs.getLiveSSTables()@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "truncate(cfs)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(),cfs.partitioner.getMinimumToken()))@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "writer.finish()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(1,tmplinkPositions.size())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "SSTableReader s = writeFile(cfs,1000)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "!checked && writer.currentWriter().getFilePointer() > 1500000@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "SSTableReader c = txn.current(sstables.iterator().next())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "basicTest2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "UnfilteredRowIterator row = ci.next()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "getPositionsTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(tmplinkPositions.get(0).right.longValue(),compactingPositions.get(0).left.longValue())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "getPositionsTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "List<Pair<Long,Long>> compactingPositions = c.getPositionsForRanges(r)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "writer.switchWriter(getWriter(cfs,sstables.iterator().next().descriptor.directory,txn))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "SSTableReader sstable@@@23@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(checked)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "writer.append(ci.next())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "checked = true@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "truncate(cfs)@@@45@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "validateCFS(cfs)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(c.uncompressedLength(),compactingPositions.get(0).right.longValue())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(1,sstables.size())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "List<Pair<Long,Long>> tmplinkPositions = sstable.getPositionsForRanges(r)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(0,tmplinkPositions.get(0).left.longValue())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "writer.append(row)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "int nowInSec = FBUtilities.nowInSeconds()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12->8 [style = dotted, label="true"];
25->30 [style = bold, label=""];
12->15 [style = dotted, label="true"];
21->17 [style = solid, label="cfs"];
21->24 [style = bold, label=""];
3->6 [style = dotted, label="true"];
38->39 [style = bold, label=""];
29->0 [style = solid, label="checked"];
21->39 [style = solid, label="cfs"];
3->25 [style = dotted, label="true"];
5->34 [style = bold, label=""];
13->36 [style = bold, label=""];
34->17 [style = bold, label=""];
36->23 [style = solid, label="r"];
20->1 [style = solid, label="filecounts"];
9->14 [style = bold, label=""];
42->3 [style = bold, label=""];
27->19 [style = bold, label=""];
32->4 [style = bold, label=""];
13->31 [style = bold, label=""];
8->27 [style = bold, label=""];
44->40 [style = solid, label="filecounts"];
3->42 [style = dotted, label="true"];
4->3 [style = bold, label=""];
33->16 [style = bold, label=""];
12->31 [style = dotted, label="true"];
12->23 [style = dotted, label="true"];
2->33 [style = solid, label="s"];
30->12 [style = dotted, label="true"];
3->30 [style = dotted, label="true"];
6->42 [style = dashed, label="0"];
23->8 [style = bold, label=""];
10->7 [style = bold, label=""];
36->15 [style = solid, label="r"];
3->0 [style = bold, label=""];
21->2 [style = solid, label="cfs"];
12->27 [style = dotted, label="true"];
6->25 [style = solid, label="row"];
22->0 [style = solid, label="checked"];
12->32 [style = dotted, label="true"];
31->36 [style = dashed, label="0"];
31->15 [style = solid, label="r"];
12->19 [style = dotted, label="true"];
2->33 [style = bold, label=""];
12->4 [style = dotted, label="true"];
14->21 [style = bold, label=""];
34->29 [style = bold, label=""];
29->17 [style = bold, label=""];
12->36 [style = dotted, label="true"];
21->7 [style = solid, label="cfs"];
3->6 [style = bold, label=""];
7->20 [style = bold, label=""];
20->1 [style = bold, label=""];
3->42 [style = bold, label=""];
12->13 [style = bold, label=""];
12->13 [style = dotted, label="true"];
19->32 [style = bold, label=""];
43->38 [style = bold, label=""];
30->3 [style = bold, label=""];
30->18 [style = dotted, label="true"];
31->23 [style = solid, label="r"];
21->24 [style = solid, label="cfs"];
17->3 [style = bold, label=""];
16->5 [style = bold, label=""];
4->12 [style = bold, label=""];
12->3 [style = bold, label=""];
30->11 [style = dotted, label="true"];
41->14 [style = bold, label=""];
15->23 [style = bold, label=""];
30->22 [style = bold, label=""];
28->10 [style = bold, label=""];
39->44 [style = bold, label=""];
24->2 [style = bold, label=""];
36->15 [style = bold, label=""];
44->40 [style = bold, label=""];
1->26 [style = bold, label=""];
31->15 [style = bold, label=""];
37->14 [style = bold, label=""];
30->35 [style = dotted, label="true"];
22->12 [style = bold, label=""];
3->43 [style = bold, label=""];
21->26 [style = solid, label="cfs"];
30->22 [style = dotted, label="true"];
0->28 [style = bold, label=""];
6->25 [style = bold, label=""];
}
