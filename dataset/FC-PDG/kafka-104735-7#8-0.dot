digraph {
30 [style = filled, label = "EasyMock.expectLastCall().andReturn(offsets)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final List<TopicPartition> partitions = asList(TOPIC_PARTITION,TOPIC_PARTITION2)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testWakeupInCommitSyncCausesRetry['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "RuntimeException e@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "EasyMock.expectLastCall()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "workerTask.initialize(TASK_CONFIG)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EasyMock.expectLastCall()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "EasyMock.expectLastCall()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "EasyMock.expectLastCall()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "EasyMock.expectLastCall()@@@39@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "EasyMock.expectLastCall().andThrow(e)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "expectInitializeTask()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "sinkTask.open(partitions)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "EasyMock.expectLastCall()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "workerTask.iteration()@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "EasyMock.expectLastCall().andThrow(new WakeupException())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "sinkTask.close(new HashSet<>(partitions))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "sinkTask.close(new HashSet<>(partitions))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final Map<TopicPartition,OffsetAndMetadata> offsets = new HashMap<>()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "sinkTask.preCommit(offsets)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "expectConvertMessages(1)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "expectConsumerPoll(1)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "consumer.commitSync(EasyMock.anyObject())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "statusListener.onResume(taskId)@@@38@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "PowerMock.replayAll()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "offsets.put(TOPIC_PARTITION2,new OffsetAndMetadata(FIRST_OFFSET))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "consumer.commitSync(EasyMock.anyObject())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "workerTask.iteration()@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "sinkTask.put(EasyMock.anyObject())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "expectRebalanceRevocationError['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "consumer.resume(Collections.singleton(TOPIC_PARTITION))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "consumer.resume(Collections.singleton(TOPIC_PARTITION2))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "workerTask.iteration()@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "EasyMock.expectLastCall()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "workerTask.initializeAndStart()@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "PowerMock.verifyAll()@@@46@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "offsets.put(TOPIC_PARTITION,new OffsetAndMetadata(FIRST_OFFSET + 1))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "final List<TopicPartition> partitions = asList(TOPIC_PARTITION,TOPIC_PARTITION2)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte((,byte((>>(){@Override public ConsumerRecords<byte((,byte((> answer(){rebalanceListener.getValue().onPartitionsRevoked(partitions)rebalanceListener.getValue().onPartitionsAssigned(partitions)return ConsumerRecords.empty()}})@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expectPollInitialAssignment()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testWakeupInCommitSyncCausesRetry['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte((,byte((>>(){@Override public ConsumerRecords<byte((,byte((> answer(){rebalanceListener.getValue().onPartitionsRevoked(partitions)return ConsumerRecords.empty()}})@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19->3 [style = bold, label=""];
23->2 [style = bold, label=""];
29->13 [style = bold, label=""];
43->41 [style = dotted, label="true"];
31->11 [style = bold, label=""];
16->4 [style = bold, label=""];
34->7 [style = bold, label=""];
22->33 [style = bold, label=""];
18->25 [style = bold, label=""];
30->22 [style = bold, label=""];
39->42 [style = bold, label=""];
2->10 [style = bold, label=""];
33->32 [style = bold, label=""];
21->24 [style = bold, label=""];
8->31 [style = bold, label=""];
10->29 [style = bold, label=""];
1->14 [style = bold, label=""];
35->16 [style = bold, label=""];
31->19 [style = solid, label="partitions"];
43->39 [style = bold, label=""];
20->19 [style = bold, label=""];
6->21 [style = bold, label=""];
40->44 [style = bold, label=""];
31->20 [style = solid, label="partitions"];
39->44 [style = solid, label="partitions"];
37->38 [style = bold, label=""];
11->7 [style = solid, label="offsets"];
0->15 [style = bold, label=""];
41->40 [style = solid, label="e"];
28->34 [style = bold, label=""];
27->1 [style = bold, label=""];
32->17 [style = bold, label=""];
5->23 [style = bold, label=""];
3->12 [style = bold, label=""];
25->35 [style = bold, label=""];
4->9 [style = bold, label=""];
42->40 [style = bold, label=""];
12->18 [style = bold, label=""];
36->1 [style = bold, label=""];
11->30 [style = solid, label="offsets"];
14->6 [style = bold, label=""];
38->35 [style = bold, label=""];
23->40 [style = dashed, label="0"];
31->29 [style = solid, label="partitions"];
9->26 [style = bold, label=""];
13->20 [style = bold, label=""];
31->5 [style = solid, label="partitions"];
24->8 [style = bold, label=""];
25->37 [style = bold, label=""];
11->28 [style = bold, label=""];
39->42 [style = solid, label="partitions"];
17->5 [style = bold, label=""];
26->0 [style = bold, label=""];
7->30 [style = bold, label=""];
}
