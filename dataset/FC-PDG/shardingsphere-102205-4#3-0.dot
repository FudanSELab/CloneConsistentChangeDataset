digraph {
0 [style = filled, label = "assertThat(StaticMaterial.staticMock(queues),is(result))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "IOException ignored@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "material.mockWithException(queues)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(material.mock(queues),is(result))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "InstanceMaterial material = new ByteBuddy().subclass().method(ElementMatchers.named(methodName)).intercept(MethodDelegation.withDefaultConfiguration().to(new InstanceMethodAroundInterceptor(new MockInstanceMethodAroundAdvice(rebase)))).make().load(new MockClassLoader()).getLoaded().newInstance()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "List<String> queues = new LinkedList<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertInterceptedMethod['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "{}@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertInterceptedMethod['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "\"staticMockWithException\".equals(methodName)@@@4@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertArrayEquals(expected,queues.toArray())@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "{}@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "\"mockWithException\".equals(methodName)@@@5@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "StaticMaterial.staticMockWithException(queues)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertInterceptedMethod['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "final IOException ignored@@@8@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "{}@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12->7 [style = bold, label=""];
1->11 [style = dashed, label="0"];
1->0 [style = dotted, label="false"];
6->11 [style = bold, label=""];
11->15 [style = dotted, label="false"];
10->8 [style = bold, label=""];
0->3 [style = bold, label=""];
11->16 [style = bold, label=""];
11->15 [style = bold, label=""];
6->0 [style = solid, label="queues"];
8->3 [style = bold, label=""];
9->6 [style = bold, label=""];
2->3 [style = bold, label=""];
7->3 [style = bold, label=""];
11->16 [style = dotted, label="true"];
2->16 [style = dashed, label="0"];
6->16 [style = solid, label="queues"];
7->4 [style = bold, label=""];
16->3 [style = bold, label=""];
6->2 [style = solid, label="queues"];
14->6 [style = bold, label=""];
15->3 [style = bold, label=""];
1->2 [style = dotted, label="true"];
6->15 [style = solid, label="queues"];
0->15 [style = dashed, label="0"];
13->14 [style = bold, label=""];
6->1 [style = bold, label=""];
4->3 [style = bold, label=""];
1->2 [style = bold, label=""];
7->10 [style = dashed, label="0"];
5->6 [style = bold, label=""];
1->0 [style = bold, label=""];
}
