digraph {
10 [style = filled, label = "Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusDays(1),now)).build(),now))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "PeriodDropRule rule = new PeriodDropRule(new Period(\"P5000Y\"),false)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertTrue(rule.appliesTo(BUILDER.interval(new Interval(now.minusDays(2),now.minusDays(1))).build(),now))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Assert.assertFalse(rule.appliesTo(builder.interval(new Interval(now.minusYears(1),now.minusDays(1))).build(),now))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testAppliesToAll['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testAppliesToPeriod['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusDays(2),now.minusDays(1))).build(),now))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "DateTime now = DateTimes.of(\"2012-12-31T01:00:00\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "PeriodDropRule rule = new PeriodDropRule(new Period(\"P1M\"),false)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertTrue(rule.appliesTo(BUILDER.interval(new Interval(now.minusYears(100),now.minusDays(1))).build(),now))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "testAppliesToAll['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusYears(100),now.minusDays(1))).build(),now))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusWeeks(1),now.minusDays(1))).build(),now))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertFalse(rule.appliesTo(builder.interval(new Interval(now.minusMonths(2),now.minusDays(1))).build(),now))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13->10 [style = bold, label=""];
1->4 [style = bold, label=""];
3->6 [style = dashed, label="0"];
7->1 [style = bold, label=""];
1->3 [style = solid, label="now"];
2->3 [style = bold, label=""];
1->2 [style = solid, label="now"];
4->2 [style = bold, label=""];
1->10 [style = solid, label="now"];
1->13 [style = solid, label="now"];
12->1 [style = bold, label=""];
1->9 [style = bold, label=""];
4->9 [style = dashed, label="0"];
2->5 [style = dashed, label="0"];
5->6 [style = bold, label=""];
10->8 [style = bold, label=""];
1->5 [style = solid, label="now"];
2->13 [style = dashed, label="0"];
0->1 [style = bold, label=""];
1->6 [style = solid, label="now"];
3->10 [style = dashed, label="0"];
1->11 [style = solid, label="now"];
8->11 [style = bold, label=""];
4->5 [style = bold, label=""];
1->8 [style = solid, label="now"];
9->13 [style = bold, label=""];
}
