digraph {
4 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "wrappedData.flip()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "ByteBuffer wrappedBuffer = outputSharing2.getBuffer()@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertThat(wrappedBuffer).isEqualTo(appData)@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ByteBuffer appData = ByteBuffer.allocate(outputSharing.getBuffer().capacity() + 100)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "ByteBuffer wrappedData = ByteBuffer.allocate(nioSslEngine.peerAppData.capacity())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertThat(wrappedData.position()).isEqualTo(netBytes.length)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "appData.flip()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "byte(( netBytes = new byte((((@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "wrappedData.put(netBytes)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "wrap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "appData.flip()@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ByteBuffer appData = ByteBuffer.allocate(nioSslEngine.myNetData.capacity() + 100)@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "unwrapWithBufferUnderflow['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "appData.put(appBytes)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testEngine.addReturnResult(new SSLEngineResult(BUFFER_UNDERFLOW,NEED_TASK,0,0))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertThat(unwrappedBuffer.remaining()).isEqualTo(0)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "unwrappedBuffer.flip()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "verify(spyBufferPool,times(1)).expandWriteBufferIfNeeded(any(),any(),any())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "verify(spyNioSslEngine,times(1)).expandWriteBuffer(any(),any(),any())@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "byte(( appBytes = new byte((((@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Arrays.fill(netBytes,(byte)0x1F)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(wrappedBuffer).isEqualTo(appData)@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "wrap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Arrays.fill(appBytes,(byte)0x1F)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "verify(spyNioSslEngine,times(1)).handleBlockingTasks()@@@18@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "byte(( appBytes = new byte((((@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ByteBuffer unwrappedBuffer = spyNioSslEngine.unwrap(wrappedData)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3->6 [style = solid, label="appBytes"];
3->29 [style = dashed, label="0"];
22->26 [style = bold, label=""];
16->15 [style = bold, label=""];
24->28 [style = bold, label=""];
2->13 [style = solid, label="appData"];
30->22 [style = bold, label=""];
27->20 [style = solid, label="wrappedData"];
7->21 [style = dashed, label="0"];
0->13 [style = bold, label=""];
4->25 [style = bold, label=""];
23->27 [style = bold, label=""];
4->8 [style = solid, label="testEngine"];
21->24 [style = solid, label="netBytes"];
2->27 [style = dashed, label="0"];
7->3 [style = solid, label="appBytes"];
3->6 [style = bold, label=""];
14->19 [style = bold, label=""];
9->17 [style = bold, label=""];
12->1 [style = solid, label="testEngine"];
15->3 [style = bold, label=""];
13->26 [style = dashed, label="0"];
11->2 [style = bold, label=""];
7->3 [style = bold, label=""];
1->20 [style = dashed, label="0"];
8->1 [style = bold, label=""];
6->5 [style = bold, label=""];
21->29 [style = bold, label=""];
8->20 [style = bold, label=""];
5->28 [style = dashed, label="0"];
12->25 [style = dashed, label="0"];
19->9 [style = bold, label=""];
7->6 [style = solid, label="appBytes"];
12->8 [style = bold, label=""];
3->5 [style = solid, label="appBytes"];
6->24 [style = dashed, label="0"];
10->0 [style = bold, label=""];
5->4 [style = bold, label=""];
2->1 [style = solid, label="appData"];
21->29 [style = solid, label="netBytes"];
4->12 [style = bold, label=""];
1->14 [style = bold, label=""];
25->8 [style = bold, label=""];
13->9 [style = bold, label=""];
15->17 [style = solid, label="appData"];
2->7 [style = bold, label=""];
20->30 [style = bold, label=""];
29->24 [style = bold, label=""];
1->10 [style = bold, label=""];
27->21 [style = bold, label=""];
17->18 [style = bold, label=""];
28->4 [style = bold, label=""];
}
