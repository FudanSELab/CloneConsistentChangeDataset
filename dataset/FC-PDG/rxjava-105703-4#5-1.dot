digraph {
4 [style = filled, label = "int i = 0@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(expected,actual)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "os.add(Observable.just(\"one\",\"two\",\"three\",\"four\",\"five\").subscribeOn(Schedulers.newThread()))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "actual.add(iter.next())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<Flowable<String>> os = new ArrayList<>()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Iterator<String> iter = Observable.merge(os,1).blockingIterable().iterator()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "iter.hasNext()@@@13@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "List<String> expected = Arrays.asList(\"one\",\"two\",\"three\",\"four\",\"five\",\"one\",\"two\",\"three\",\"four\",\"five\",\"one\",\"two\",\"three\",\"four\",\"five\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "List<Observable<String>> os = new ArrayList<Observable<String>>()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "List<String> actual = new ArrayList<String>()@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "os.add(Observable.just(\"one\",\"two\",\"three\",\"four\",\"five\").subscribeOn(Schedulers.newThread()))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "os.add(Flowable.just(\"one\",\"two\",\"three\",\"four\",\"five\").subscribeOn(Schedulers.newThread()))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "os.add(Flowable.just(\"one\",\"two\",\"three\",\"four\",\"five\").subscribeOn(Schedulers.newThread()))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "os.add(Observable.just(\"one\",\"two\",\"three\",\"four\",\"five\").subscribeOn(Schedulers.newThread()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "whenMaxConcurrentIsOne['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "whenMaxConcurrentIsOne['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "whenMaxConcurrentIsOne['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "i++@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Iterator<String> iter = Flowable.merge(os,1).blockingIterable().iterator()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "os.add(Flowable.just(\"one\",\"two\",\"three\",\"four\",\"five\").subscribeOn(Schedulers.newThread()))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "List<String> actual = new ArrayList<>()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "List<Flowable<String>> os = new ArrayList<Flowable<String>>()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "i < 100@@@4@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16->0 [style = bold, label=""];
20->17 [style = bold, label=""];
7->21 [style = dashed, label="0"];
12->20 [style = dashed, label="0"];
1->17 [style = dotted, label="true"];
21->6 [style = bold, label=""];
16->5 [style = solid, label="actual"];
13->1 [style = solid, label="i"];
0->10 [style = dotted, label="true"];
3->18 [style = dashed, label="0"];
2->3 [style = bold, label=""];
1->11 [style = dotted, label="true"];
1->22 [style = dotted, label="true"];
11->22 [style = dashed, label="0"];
4->1 [style = solid, label="i"];
1->21 [style = dotted, label="true"];
11->12 [style = bold, label=""];
6->0 [style = bold, label=""];
1->14 [style = dotted, label="true"];
6->5 [style = solid, label="actual"];
9->7 [style = bold, label=""];
2->17 [style = dashed, label="0"];
4->13 [style = solid, label="i"];
13->1 [style = bold, label=""];
1->11 [style = bold, label=""];
1->22 [style = bold, label=""];
1->3 [style = dotted, label="true"];
1->7 [style = dotted, label="true"];
3->9 [style = bold, label=""];
1->13 [style = dotted, label="true"];
1->18 [style = dotted, label="true"];
12->2 [style = bold, label=""];
0->10 [style = bold, label=""];
6->16 [style = dashed, label="0"];
22->20 [style = bold, label=""];
9->5 [style = solid, label="expected"];
11->14 [style = dashed, label="0"];
5->13 [style = bold, label=""];
14->12 [style = bold, label=""];
10->0 [style = bold, label=""];
7->6 [style = bold, label=""];
7->16 [style = bold, label=""];
15->4 [style = bold, label=""];
18->9 [style = bold, label=""];
9->21 [style = bold, label=""];
1->12 [style = dotted, label="true"];
1->9 [style = dotted, label="true"];
1->6 [style = dotted, label="true"];
1->14 [style = bold, label=""];
4->1 [style = bold, label=""];
1->16 [style = dotted, label="true"];
19->4 [style = bold, label=""];
1->0 [style = dotted, label="true"];
8->4 [style = bold, label=""];
1->2 [style = dotted, label="true"];
1->20 [style = dotted, label="true"];
1->5 [style = dotted, label="true"];
17->18 [style = bold, label=""];
0->5 [style = bold, label=""];
}
