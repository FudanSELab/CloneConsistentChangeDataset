digraph {
26 [style = filled, label = "assertEquals(0,consumer.poll(1000).count())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(2L,consumer.committed(new TopicPartition(\"test\",0)).offset())@@@22@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "consumer.addRecord(rec1)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "consumer.subscribe(Collections.singleton(\"test\"))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "ConsumerRecords<String,String> recs = consumer.poll(1)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "beginningOffsets.put(new TopicPartition(\"test\",1),0L)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ConsumerRecord<String,String> rec2 = new ConsumerRecord<>(\"test\",0,1,0L,TimestampType.CREATE_TIME,0L,0,0,\"key2\",\"value2\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "consumer.updateBeginningOffsets(beginningOffsets)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(2L,consumer.position(new TopicPartition(\"test\",0)))@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ConsumerRecords<String,String> recs = consumer.poll(Duration.ofMillis(1))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "consumer.rebalance(Arrays.asList(new TopicPartition(\"test\",0),new TopicPartition(\"test\",1)))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "consumer.seek(new TopicPartition(\"test\",0),0)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final TopicPartition tp = new TopicPartition(\"test\",0)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertEquals(2L,consumer.committed(Collections.singleton(tp)).get(tp).offset())@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "beginningOffsets.put(new TopicPartition(\"test\",0),0L)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "consumer.commitSync()@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "HashMap<TopicPartition,Long> beginningOffsets = new HashMap<>()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(0,consumer.poll(Duration.ZERO).count())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(rec2,iter.next())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(rec1,iter.next())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(2L,consumer.position(tp))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertFalse(iter.hasNext())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "consumer.addRecord(rec2)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Iterator<ConsumerRecord<String,String>> iter = recs.iterator()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testSimpleMock['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "testSimpleMockDeprecated['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testSimpleMock['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ConsumerRecord<String,String> rec1 = new ConsumerRecord<>(\"test\",0,0,0L,TimestampType.CREATE_TIME,0L,0,0,\"key1\",\"value1\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
15->23 [style = bold, label=""];
7->21 [style = dashed, label="0"];
6->26 [style = bold, label=""];
15->23 [style = dashed, label="0"];
3->1 [style = bold, label=""];
0->6 [style = bold, label=""];
14->8 [style = solid, label="rec1"];
8->18 [style = bold, label=""];
19->20 [style = bold, label=""];
11->4 [style = bold, label=""];
11->26 [style = dashed, label="0"];
18->19 [style = bold, label=""];
14->10 [style = bold, label=""];
10->18 [style = solid, label="rec2"];
21->24 [style = bold, label=""];
20->3 [style = bold, label=""];
16->17 [style = bold, label=""];
26->4 [style = bold, label=""];
27->6 [style = bold, label=""];
5->21 [style = bold, label=""];
12->13 [style = bold, label=""];
25->20 [style = bold, label=""];
10->1 [style = solid, label="rec2"];
17->12 [style = bold, label=""];
16->13 [style = solid, label="beginningOffsets"];
10->8 [style = bold, label=""];
14->3 [style = solid, label="rec1"];
7->2 [style = bold, label=""];
6->11 [style = bold, label=""];
2->15 [style = bold, label=""];
9->14 [style = bold, label=""];
18->25 [style = bold, label=""];
5->7 [style = bold, label=""];
13->9 [style = bold, label=""];
19->25 [style = dashed, label="0"];
21->24 [style = solid, label="tp"];
4->16 [style = bold, label=""];
22->6 [style = bold, label=""];
24->15 [style = bold, label=""];
}
