digraph {
13 [style = filled, label = "a.close()@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "i < numIterations@@@5@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "i++@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "int numIterations = atLeast(5)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "protectedWords = null@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "checkRandomData(random(),a,200 * RANDOM_MULTIPLIER,20,false,false)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testRandomStrings['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "testRandomStrings['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final CharArraySet protectedWords@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "random().nextBoolean()@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final int flags = random().nextInt(512)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Analyzer analyzer = new Analyzer(){@Override protected TokenStreamComponents createComponents(String fieldName){Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE,false)return new TokenStreamComponents(tokenizer,new HunspellStemFilter(tokenizer,dictionary))}}@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "protectedWords = new CharArraySet(new HashSet<>(Arrays.asList(\"a\",\"b\",\"cd\")),false)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testRandomStrings['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "int i = 0@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Analyzer a = new Analyzer(){@Override protected TokenStreamComponents createComponents(String fieldName){Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE,false)return new TokenStreamComponents(tokenizer,new WordDelimiterFilter(tokenizer,flags,protectedWords))}}@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->11 [style = dotted, label="true"];
2->4 [style = dotted, label="true"];
2->4 [style = bold, label=""];
8->0 [style = bold, label=""];
2->7 [style = bold, label=""];
4->11 [style = bold, label=""];
3->8 [style = solid, label="i"];
9->8 [style = solid, label="i"];
8->2 [style = dotted, label="true"];
10->8 [style = solid, label="numIterations"];
0->11 [style = solid, label="flags"];
5->9 [style = bold, label=""];
7->11 [style = bold, label=""];
14->15 [style = solid, label="analyzer"];
2->7 [style = dotted, label="false"];
0->1 [style = bold, label=""];
5->13 [style = bold, label=""];
10->3 [style = bold, label=""];
6->10 [style = bold, label=""];
12->10 [style = bold, label=""];
11->5 [style = solid, label="a"];
16->14 [style = bold, label=""];
3->9 [style = solid, label="i"];
3->8 [style = bold, label=""];
4->11 [style = solid, label="protectedWords"];
8->5 [style = dotted, label="true"];
13->9 [style = bold, label=""];
9->8 [style = bold, label=""];
14->15 [style = bold, label=""];
8->1 [style = dotted, label="true"];
1->2 [style = bold, label=""];
7->11 [style = solid, label="protectedWords"];
5->15 [style = dashed, label="0"];
11->5 [style = bold, label=""];
8->0 [style = dotted, label="true"];
8->13 [style = dotted, label="true"];
8->9 [style = dotted, label="true"];
}
