digraph {
14 [style = filled, label = "Thread.sleep(10)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"bb\"),readSegmentColumn(\"dim1t\",desc1))@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(null,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"0\"),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"4\")),true,DateTimes.of(\"2010\"),null,\"awsEndpoint\",null,null,null,null,false))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "testRunWithMinimumMessageTime['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc1))@@@25@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2009/P1D\",0)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "expectLastCall().anyTimes()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testRunWithTransformSpec['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "recordSupplier.assign(anyObject())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "expectLastCall().once()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "task.getRunner().getStatus() != Status.READING@@@14@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "verifyAll()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(2,task.getRunner().getRowIngestionMeters().getThrownAway())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getProcessed())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(4,task.getRunner().getRowIngestionMeters().getThrownAway())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getProcessed())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testRunWithMinimumMessageTime['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2011/P1D\",0)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "recordSupplier.seek(anyObject(),anyString())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "recordSupplier.close()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"4\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "expect(recordSupplier.poll(anyLong())).andReturn(records.subList(0,13)).once()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2010/P1D\",0)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",desc2))@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final KinesisIndexTask task = createTask(null,DATA_SCHEMA.withTransformSpec(new TransformSpec(new SelectorDimFilter(\"dim1\",\"b\",null),ImmutableList.of(new ExpressionTransform(\"dim1t\",\"concat(dim1,dim1)\",ExprMacroTable.nil())))),new KinesisIndexTaskIOConfig(null,\"sequence0\",new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"0\")),new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"4\")),true,null,null,\"awsEndpoint\",null,null,null,null,null,false))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1),publishedDescriptors())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"4\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "expectLastCall().anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(null,\"sequence0\",new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"0\")),new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"4\")),true,DateTimes.of(\"2010\"),null,\"awsEndpoint\",null,null,null,null,null,false))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc1))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "replayAll()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "expect(recordSupplier.getEarliestSequenceNumber(anyObject())).andReturn(\"0\").anyTimes()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->19 [style = solid, label="task"];
14->16 [style = bold, label=""];
10->22 [style = bold, label=""];
32->23 [style = bold, label=""];
28->15 [style = bold, label=""];
23->5 [style = bold, label=""];
18->23 [style = bold, label=""];
0->6 [style = solid, label="task"];
30->2 [style = solid, label="desc1"];
35->6 [style = bold, label=""];
0->6 [style = bold, label=""];
35->6 [style = solid, label="task"];
22->33 [style = dashed, label="0"];
9->32 [style = bold, label=""];
19->3 [style = solid, label="desc1"];
1->3 [style = bold, label=""];
4->21 [style = bold, label=""];
2->27 [style = dashed, label="0"];
31->29 [style = bold, label=""];
8->26 [style = bold, label=""];
0->26 [style = dashed, label="0"];
35->30 [style = solid, label="task"];
0->1 [style = solid, label="task"];
26->6 [style = bold, label=""];
12->9 [style = bold, label=""];
2->10 [style = bold, label=""];
1->3 [style = solid, label="desc2"];
26->19 [style = solid, label="task"];
8->35 [style = bold, label=""];
34->30 [style = bold, label=""];
5->34 [style = dashed, label="0"];
10->2 [style = dashed, label="0"];
3->27 [style = bold, label=""];
19->10 [style = solid, label="desc1"];
8->0 [style = bold, label=""];
5->19 [style = bold, label=""];
19->1 [style = bold, label=""];
24->4 [style = bold, label=""];
29->2 [style = bold, label=""];
9->18 [style = bold, label=""];
19->30 [style = dashed, label="0"];
3->2 [style = bold, label=""];
6->16 [style = bold, label=""];
30->31 [style = bold, label=""];
15->20 [style = bold, label=""];
27->10 [style = bold, label=""];
11->13 [style = bold, label=""];
16->14 [style = dotted, label="true"];
25->15 [style = bold, label=""];
23->34 [style = bold, label=""];
2->33 [style = bold, label=""];
16->14 [style = bold, label=""];
7->15 [style = bold, label=""];
1->22 [style = solid, label="desc2"];
30->33 [style = solid, label="desc1"];
26->6 [style = solid, label="task"];
26->1 [style = solid, label="task"];
13->8 [style = bold, label=""];
30->31 [style = solid, label="desc1"];
20->24 [style = bold, label=""];
0->35 [style = dashed, label="0"];
21->17 [style = bold, label=""];
16->12 [style = bold, label=""];
18->32 [style = dashed, label="0"];
17->11 [style = bold, label=""];
}
