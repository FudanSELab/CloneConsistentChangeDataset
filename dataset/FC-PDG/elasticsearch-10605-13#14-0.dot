digraph {
0 [style = filled, label = "ParseContext.Document document = parseContext.doc()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Query rangeQuery2 = mapperService.fieldType(\"number_field1\").rangeQuery(15,20,true,true,null,null,null,context)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "rangeQuery2 = mapperService.fieldType(\"number_field2\").rangeQuery(15,20,true,true,null,null,null,null)@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "ParseContext.Document document = parseContext.doc()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertThat(document.getField(fieldType.extractionResultField.name()).stringValue(),equalTo(EXTRACTION_PARTIAL))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.minimumShouldMatchField.name())))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(fields.get(0).numericValue(),equalTo(2L))@@@46@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "PercolatorFieldMapper.FieldType fieldType = (PercolatorFieldMapper.FieldType)fieldMapper.fieldType()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "PercolatorFieldMapper fieldMapper = (PercolatorFieldMapper)documentMapper.mappers().getMapper(fieldName)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "testExtractRanges['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "bq.add(rangeQuery1,Occur.MUST)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Query rangeQuery1 = mapperService.fieldType(\"number_field1\").rangeQuery(10,20,true,true,null,null,null,context)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertThat(fields.size(),equalTo(2))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<IndexableField> fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.rangeField.name())))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "QueryShardContext context = createSearchContext(indexService).getQueryShardContext()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(1).binaryValue().bytes,12),equalTo(15))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Query rangeQuery2 = mapperService.fieldType(\"number_field1\").rangeQuery(15,20,true,true,null,null,null,null)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "bq.add(rangeQuery2,Occur.MUST)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(LongPoint.decodeDimension(fields.get(1).binaryValue().bytes,24),equalTo(20L))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,mapperService.documentMapperParser(),documentMapper,null,null)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(fields.size(),equalTo(1))@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "bq.add(rangeQuery2,Occur.MUST)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(document.getFields().size(),equalTo(1))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,28),equalTo(20))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "bq = new BooleanQuery.Builder()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,28),equalTo(20))@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "assertThat(document.getField(fieldType.extractionResultField.name()).stringValue(),equalTo(EXTRACTION_FAILED))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "PercolatorFieldMapper.FieldType fieldType = (PercolatorFieldMapper.FieldType)fieldMapper.fieldType()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(1).binaryValue().bytes,28),equalTo(20))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "rangeQuery2 = mapperService.fieldType(\"number_field2\").rangeQuery(15,20,true,true,null,null,null,context)@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "PercolatorFieldMapper fieldMapper = (PercolatorFieldMapper)documentMapper.mappers().getMapper(fieldName)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "bq.add(rangeQuery1,Occur.MUST)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertThat(document.getField(fieldType.extractionResultField.name()).stringValue(),equalTo(EXTRACTION_PARTIAL))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(fields.size(),equalTo(2))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "parseContext = new ParseContext.InternalParseContext(settings,mapperService.documentMapperParser(),documentMapper,null,null)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "IndexSettings settings = new IndexSettings(build,Settings.EMPTY)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.minimumShouldMatchField.name())))@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.rangeField.name())))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "fields.sort(Comparator.comparing(null))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "BooleanQuery.Builder bq = new BooleanQuery.Builder()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "addQueryFieldMappings()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "fieldMapper.processQuery(bq.build(),parseContext)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "document = parseContext.doc()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testExtractRanges['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "fieldMapper.processQuery(query,parseContext)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "DocumentMapper documentMapper = mapperService.documentMapper()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(LongPoint.decodeDimension(fields.get(1).binaryValue().bytes,8),equalTo(15L))@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "testExtractTermsAndRanges_failed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "fields.sort(Comparator.comparing(null))@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,12),equalTo(10))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertThat(fields.get(0).numericValue(),equalTo(1L))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "fieldMapper.processQuery(bq.build(),parseContext)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "TermRangeQuery query = new TermRangeQuery(\"field1\",new BytesRef(\"a\"),new BytesRef(\"z\"),true,true)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "IndexMetadata build = IndexMetadata.builder(\"\").settings(Settings.builder().put(IndexMetadata.SETTING_VERSION_CREATED,Version.CURRENT)).numberOfShards(1).numberOfReplicas(0).build()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,12),equalTo(10))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Query rangeQuery1 = mapperService.fieldType(\"number_field1\").rangeQuery(10,20,true,true,null,null,null,null)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "assertThat(fields.size(),equalTo(1))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40->4 [style = bold, label=""];
45->48 [style = solid, label="context"];
5->32 [style = solid, label="settings"];
44->35 [style = bold, label=""];
10->17 [style = bold, label=""];
49->0 [style = bold, label=""];
0->5 [style = solid, label="build"];
47->33 [style = bold, label=""];
22->33 [style = solid, label="rangeQuery2"];
13->1 [style = bold, label=""];
0->36 [style = solid, label="build"];
23->22 [style = bold, label=""];
31->6 [style = bold, label=""];
20->16 [style = bold, label=""];
45->47 [style = solid, label="context"];
26->35 [style = bold, label=""];
51->49 [style = solid, label="query"];
8->27 [style = bold, label=""];
14->11 [style = bold, label=""];
43->6 [style = dashed, label="0"];
55->21 [style = solid, label="settings"];
54->52 [style = bold, label=""];
22->33 [style = bold, label=""];
11->51 [style = bold, label=""];
45->44 [style = solid, label="context"];
21->0 [style = bold, label=""];
34->48 [style = bold, label=""];
51->54 [style = bold, label=""];
17->41 [style = bold, label=""];
7->48 [style = dashed, label="0"];
7->23 [style = solid, label="rangeQuery1"];
47->33 [style = solid, label="rangeQuery2"];
26->44 [style = dashed, label="0"];
35->21 [style = bold, label=""];
32->10 [style = bold, label=""];
45->11 [style = bold, label=""];
5->6 [style = bold, label=""];
48->23 [style = solid, label="rangeQuery1"];
48->28 [style = bold, label=""];
19->38 [style = bold, label=""];
0->10 [style = solid, label="build"];
4->23 [style = bold, label=""];
36->42 [style = bold, label=""];
36->49 [style = dashed, label="0"];
16->13 [style = bold, label=""];
37->24 [style = bold, label=""];
30->43 [style = bold, label=""];
48->28 [style = solid, label="rangeQuery1"];
2->3 [style = bold, label=""];
28->26 [style = bold, label=""];
43->2 [style = bold, label=""];
21->49 [style = solid, label="parseContext"];
6->56 [style = bold, label=""];
7->28 [style = bold, label=""];
21->32 [style = solid, label="documentMapper"];
53->55 [style = solid, label="build"];
23->47 [style = bold, label=""];
9->19 [style = bold, label=""];
33->32 [style = bold, label=""];
21->49 [style = bold, label=""];
18->8 [style = bold, label=""];
41->12 [style = bold, label=""];
12->39 [style = bold, label=""];
15->37 [style = bold, label=""];
32->10 [style = solid, label="parseContext"];
44->35 [style = solid, label="rangeQuery2"];
24->9 [style = bold, label=""];
0->5 [style = bold, label=""];
53->55 [style = bold, label=""];
21->6 [style = solid, label="documentMapper"];
22->47 [style = dashed, label="0"];
39->15 [style = bold, label=""];
52->53 [style = bold, label=""];
55->21 [style = bold, label=""];
38->29 [style = bold, label=""];
34->7 [style = bold, label=""];
29->25 [style = bold, label=""];
1->18 [style = bold, label=""];
6->36 [style = bold, label=""];
5->6 [style = solid, label="settings"];
6->36 [style = solid, label="parseContext"];
3->20 [style = bold, label=""];
11->34 [style = bold, label=""];
26->35 [style = solid, label="rangeQuery2"];
5->31 [style = bold, label=""];
50->11 [style = bold, label=""];
42->30 [style = bold, label=""];
28->44 [style = bold, label=""];
46->45 [style = bold, label=""];
7->28 [style = solid, label="rangeQuery1"];
27->40 [style = bold, label=""];
54->21 [style = solid, label="documentMapper"];
}
