digraph {
4 [style = filled, label = "operator.snapshotState(new StateSnapshotContextSynchronousImpl(100L,100L))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "List<MockSourceSplit> splitsInState = CollectionUtil.iterableToList(operator.getReaderState().get())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "MockSourceSplitSerializer serializer = new MockSourceSplitSerializer()@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertEquals(Arrays.asList(MOCK_SPLIT,newSplit),splitsInState)@@@10@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "testHandleAddSplitsEvent['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "SourceOperator.SplitStateAndVersion stateAndVersion = SourceOperator.SplitStateAndVersion.fromBytes(serialized)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "splitsInState.add(serializer.deserialize(stateAndVersion.getSerializerVersion(),stateAndVersion.getSplitState()))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "StateInitializationContext stateContext = getStateContext()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "List<MockSourceSplit> splitsInState = new ArrayList<>()@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "operator.handleOperatorEvent(new AddSplitEvent<>(Collections.singletonList(newSplit)))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "MockSourceSplit newSplit = new MockSourceSplit((2))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "MockSourceReader mockSourceReader = source.getCreatedReaders().get(0)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testSnapshotState['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "operator.initializeState(stateContext)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(Arrays.asList(MOCK_SPLIT,newSplit),splitsInState)@@@16@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(Arrays.asList(MOCK_SPLIT,newSplit),mockSourceReader.getAssignedSplits())@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testSnapshotState['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "operator.initializeState(getStateContext())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Iterable<byte((> serializedSplits = stateContext.getOperatorStateStore().getListState(SourceOperator.SPLITS_STATE_DESC).get()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "operator.open()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
13->10 [style = bold, label=""];
19->18 [style = bold, label=""];
8->9 [style = solid, label="newSplit"];
15->14 [style = bold, label=""];
7->10 [style = bold, label=""];
11->1 [style = bold, label=""];
4->6 [style = bold, label=""];
2->1 [style = bold, label=""];
9->4 [style = bold, label=""];
4->15 [style = bold, label=""];
18->17 [style = bold, label=""];
12->0 [style = bold, label=""];
8->3 [style = solid, label="newSplit"];
9->16 [style = bold, label=""];
6->2 [style = bold, label=""];
17->0 [style = bold, label=""];
8->14 [style = solid, label="newSplit"];
11->3 [style = bold, label=""];
6->15 [style = dashed, label="0"];
15->14 [style = solid, label="splitsInState"];
10->12 [style = bold, label=""];
10->12 [style = solid, label="stateContext"];
0->8 [style = bold, label=""];
8->9 [style = bold, label=""];
0->8 [style = solid, label="newSplit"];
5->11 [style = bold, label=""];
6->3 [style = solid, label="splitsInState"];
0->16 [style = solid, label="newSplit"];
10->18 [style = dashed, label="0"];
}
