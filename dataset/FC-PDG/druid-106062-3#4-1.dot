digraph {
2 [style = filled, label = "test_computeJoinDataSourceCacheKey_noHashJoin['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "EasyMock.replay(analysis)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "EasyMock.expect(analysis.getJoinBaseTableFilter()).andReturn(Optional.of(TrueDimFilter.instance())).anyTimes()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "JoinableFactoryWrapper joinableFactoryWrapper = new JoinableFactoryWrapper(new JoinableFactoryWithCacheKey())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "DataSource dataSource = new LookupDataSource(\"lookup\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertFalse(cacheKey.isPresent())@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "test_computeJoinDataSourceCacheKey_noHashJoin['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "PreJoinableClause clause2 = makePreJoinableClause(dataSource,\"x == \"h.x\"\",\"h.\",JoinType.LEFT)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "DataSourceAnalysis analysis = EasyMock.mock()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "test_computeJoinDataSourceCacheKey_cachingUnsupported['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "PreJoinableClause clause2 = makeGlobalPreJoinableClause(\"dataSource_2\",\"x != \"h.x\"\",\"h.\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "PreJoinableClause clause1 = makeGlobalPreJoinableClause(\"dataSource_1\",\"x == \"j.x\"\",\"j.\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "DataSourceAnalysis analysis = EasyMock.mock()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Optional<byte((> cacheKey = joinableFactoryWrapper.computeJoinDataSourceCacheKey(analysis)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "EasyMock.expect(analysis.getPreJoinableClauses()).andReturn(Arrays.asList(clause1,clause2)).anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->0 [style = bold, label=""];
0->6 [style = bold, label=""];
3->1 [style = solid, label="analysis"];
8->0 [style = solid, label="analysis"];
8->3 [style = bold, label=""];
12->11 [style = bold, label=""];
3->6 [style = solid, label="analysis"];
7->8 [style = bold, label=""];
2->4 [style = bold, label=""];
1->13 [style = bold, label=""];
4->7 [style = bold, label=""];
3->0 [style = bold, label=""];
3->9 [style = bold, label=""];
5->1 [style = bold, label=""];
6->5 [style = bold, label=""];
11->3 [style = bold, label=""];
10->4 [style = bold, label=""];
4->12 [style = bold, label=""];
12->11 [style = solid, label="dataSource"];
8->5 [style = solid, label="analysis"];
14->4 [style = bold, label=""];
}
