digraph {
1 [style = filled, label = "List<List<Record>> expectedRecords = generateRecordsAndCommitTxn(15)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "i++@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "harness.processElement(splits.get(i),-1)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "expected.addAll(expectedRecords.get(i))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "SteppingMailboxProcessor processor = createLocalMailbox(harness)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "TestFlinkScan.assertRecords(readOutputValues(harness),expected,SCHEMA)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "List<List<Record>> expectedRecords = generateRecordsAndCommitTxn(10)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertTrue(\"Should have processed the split#\" + i,localMailbox.runMailboxStep())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "expected.addAll(expectedRecords.get(i))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "i < 5@@@16@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "i++@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "state = harness.snapshot(1,1)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "i < 10@@@31@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "harness.initializeState(state)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TestFlinkScan.assertRecords(readOutputValues(harness),expected,SCHEMA)@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "List<Record> expected = Lists.newArrayList()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "TestHelpers.assertRecords(readOutputValues(harness),expected,SCHEMA)@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "testProcessAllRecords['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "int i = 5@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "expected.addAll(expectedRecords.get(i))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertTrue(\"Should processed 1 split\",processor.runMailboxStep())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "expected.addAll(expectedRecords.get(i))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "List<Record> expected = Lists.newArrayList()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "expected.clear()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "i++@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "harness.open()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(\"Should have 10 splits\",15,splits.size())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "SteppingMailboxProcessor localMailbox = createLocalMailbox(harness)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "harness.open()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "i < splits.size()@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "OperatorSubtaskState state@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "int i = 0@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "TestFlinkScan.assertRecords(readOutputValues(harness),expected,SCHEMA)@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "List<FlinkInputSplit> splits = generateSplits()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "harness.setup()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "SteppingMailboxProcessor localMailbox = createLocalMailbox(harness)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testCheckpointRestore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "TestFlinkScan.assertRecords(readOutputValues(harness),expected,SCHEMA)@@@43@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "Assert.assertTrue(\"Should have processed the split#\" + i,localMailbox.runMailboxStep())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertEquals(\"Should have 10 splits\",10,splits.size())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "testCheckpointRestore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "TestHelpers.assertRecords(readOutputValues(harness),expected,SCHEMA)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "TestHelpers.assertRecords(readOutputValues(harness),expected,SCHEMA)@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "harness.setup()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "harness.processElement(splits.get(i),1)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "int i = 10@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(\"Should have processed one split#\" + i,localMailbox.runMailboxStep())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "i < 15@@@38@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "harness.processElement(split,-1)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
46->34 [style = bold, label=""];
24->27 [style = solid, label="i"];
13->27 [style = dotted, label="true"];
7->19 [style = solid, label="expected"];
18->14 [style = solid, label="expected"];
10->24 [style = bold, label=""];
20->10 [style = solid, label="i"];
17->35 [style = dashed, label="0"];
21->48 [style = bold, label=""];
16->9 [style = solid, label="i"];
16->15 [style = solid, label="i"];
7->8 [style = bold, label=""];
30->18 [style = bold, label=""];
24->22 [style = solid, label="i"];
9->35 [style = bold, label=""];
26->43 [style = dashed, label="0"];
16->10 [style = solid, label="i"];
21->2 [style = solid, label="i"];
21->2 [style = bold, label=""];
18->35 [style = solid, label="expected"];
19->44 [style = bold, label=""];
44->41 [style = solid, label="i"];
0->25 [style = bold, label=""];
10->20 [style = dotted, label="true"];
19->28 [style = solid, label="i"];
40->47 [style = bold, label=""];
24->4 [style = solid, label="i"];
13->37 [style = dotted, label="true"];
2->28 [style = bold, label=""];
22->13 [style = bold, label=""];
13->4 [style = dotted, label="true"];
17->20 [style = bold, label=""];
31->14 [style = bold, label=""];
42->48 [style = solid, label="i"];
21->31 [style = solid, label="i"];
35->20 [style = bold, label=""];
16->20 [style = solid, label="i"];
41->21 [style = bold, label=""];
9->17 [style = bold, label=""];
19->2 [style = bold, label=""];
42->41 [style = solid, label="i"];
18->37 [style = solid, label="expected"];
2->28 [style = dotted, label="true"];
43->45 [style = bold, label=""];
22->27 [style = solid, label="i"];
13->23 [style = dotted, label="true"];
12->29 [style = bold, label=""];
23->37 [style = bold, label=""];
13->22 [style = dotted, label="true"];
1->47 [style = dashed, label="0"];
15->9 [style = bold, label=""];
39->44 [style = dotted, label="true"];
2->39 [style = dashed, label="0"];
7->42 [style = bold, label=""];
44->48 [style = solid, label="i"];
39->41 [style = bold, label=""];
45->46 [style = bold, label=""];
21->28 [style = solid, label="i"];
18->17 [style = solid, label="expected"];
4->23 [style = bold, label=""];
20->15 [style = solid, label="i"];
44->39 [style = solid, label="i"];
24->13 [style = bold, label=""];
2->19 [style = dotted, label="true"];
18->36 [style = solid, label="expected"];
24->13 [style = solid, label="i"];
18->34 [style = bold, label=""];
28->31 [style = bold, label=""];
42->39 [style = bold, label=""];
5->26 [style = bold, label=""];
3->6 [style = bold, label=""];
14->19 [style = bold, label=""];
31->36 [style = bold, label=""];
10->9 [style = dotted, label="true"];
10->35 [style = dotted, label="true"];
38->1 [style = bold, label=""];
22->23 [style = solid, label="i"];
10->17 [style = dotted, label="true"];
37->22 [style = bold, label=""];
2->0 [style = bold, label=""];
13->27 [style = bold, label=""];
39->48 [style = dotted, label="true"];
19->31 [style = solid, label="i"];
47->5 [style = bold, label=""];
11->22 [style = bold, label=""];
13->11 [style = dotted, label="true"];
2->14 [style = dotted, label="true"];
2->36 [style = dotted, label="true"];
23->11 [style = bold, label=""];
24->23 [style = solid, label="i"];
36->19 [style = bold, label=""];
39->21 [style = dotted, label="true"];
32->21 [style = bold, label=""];
10->15 [style = bold, label=""];
8->32 [style = bold, label=""];
42->39 [style = solid, label="i"];
16->10 [style = bold, label=""];
39->19 [style = dotted, label="true"];
21->19 [style = solid, label="i"];
22->13 [style = solid, label="i"];
29->3 [style = bold, label=""];
34->7 [style = bold, label=""];
18->11 [style = solid, label="expected"];
33->1 [style = bold, label=""];
22->4 [style = solid, label="i"];
14->36 [style = dashed, label="0"];
44->39 [style = bold, label=""];
2->31 [style = dotted, label="true"];
19->2 [style = solid, label="i"];
26->30 [style = bold, label=""];
20->10 [style = bold, label=""];
5->43 [style = bold, label=""];
10->15 [style = dotted, label="true"];
42->44 [style = solid, label="i"];
27->4 [style = bold, label=""];
25->12 [style = bold, label=""];
6->16 [style = bold, label=""];
39->41 [style = dotted, label="true"];
48->19 [style = bold, label=""];
11->37 [style = dashed, label="0"];
0->29 [style = solid, label="state"];
20->9 [style = solid, label="i"];
}
