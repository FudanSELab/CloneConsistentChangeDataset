digraph {
18 [style = filled, label = "testNotNaN['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(isNaN(\"all_nans\"),SPEC,true).eval(FILE)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertTrue(\"Should read: no information on if there are nan value in float column\",shouldRead)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(isNaN(\"no_nan_or_null\"),SPEC,true).eval(FILE)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(isNaN(\"all_nulls_missing_nan_float\"),SPEC,true).eval(FILE)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertFalse(\"Should skip: all null column doesn't contain nan value\",shouldRead)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Assert.assertFalse(\"Should skip: no nan column doesn't contain nan value\",shouldRead)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertTrue(\"Should read: both_nan_and_null column contains nan value\",shouldRead)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertTrue(\"Should read: all_nans column contains nan value\",shouldRead)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(notNaN(\"float\"),SPEC,true).eval(FILE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testIsNaN['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(isNaN(\"float\"),SPEC,true).eval(FILE)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(isNaN(\"both_nan_and_null\"),SPEC,true).eval(FILE)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(notNaN(\"all_nulls_double\"),SPEC,true).eval(FILE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(isNaN(\"all_nulls_double\"),SPEC,true).eval(FILE)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testIsNaN['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "Assert.assertTrue(\"Should read: all null column contains non nan value\",shouldRead)@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertFalse(\"Should skip: no_nan_or_null column doesn't contain nan value\",shouldRead)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(isNaN(\"all_nulls_no_nans\"),SPEC,true).eval(FILE)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Assert.assertTrue(\"Should read: no NaN information may indicate presence of NaN value\",shouldRead)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertTrue(\"Should read: no NaN information may indicate presence of NaN value\",shouldRead)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3->11 [style = solid, label="shouldRead"];
4->3 [style = bold, label=""];
20->17 [style = bold, label=""];
2->19 [style = dashed, label="0"];
20->17 [style = solid, label="shouldRead"];
19->4 [style = solid, label="shouldRead"];
7->10 [style = bold, label=""];
16->6 [style = bold, label=""];
3->11 [style = bold, label=""];
18->19 [style = bold, label=""];
10->5 [style = solid, label="shouldRead"];
3->0 [style = solid, label="shouldRead"];
0->11 [style = dashed, label="0"];
12->16 [style = bold, label=""];
9->12 [style = solid, label="shouldRead"];
5->14 [style = bold, label=""];
11->9 [style = bold, label=""];
2->4 [style = bold, label=""];
0->17 [style = dashed, label="0"];
3->0 [style = bold, label=""];
8->7 [style = bold, label=""];
8->7 [style = solid, label="shouldRead"];
14->15 [style = solid, label="shouldRead"];
10->5 [style = bold, label=""];
3->20 [style = dashed, label="0"];
6->8 [style = bold, label=""];
4->20 [style = bold, label=""];
14->15 [style = bold, label=""];
1->2 [style = bold, label=""];
9->12 [style = bold, label=""];
19->4 [style = bold, label=""];
16->6 [style = solid, label="shouldRead"];
2->4 [style = solid, label="shouldRead"];
13->2 [style = bold, label=""];
}
