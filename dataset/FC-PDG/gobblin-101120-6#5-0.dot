digraph {
1 [style = filled, label = "FlowSpec flowSpec = initFlowSpec(TEST_FLOW_GROUP,TEST_FLOW_NAME,\"unsupportedSource\",\"unsupportedSink\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertTrue(jobSpec.getConfig().hasPath(ConfigurationKeys.FLOW_EXECUTION_ID_KEY))@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertTrue(specExecutorMapping.size() == 1,\"Exepected 1 executor for FlowSpec.\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertTrue(spec instanceof JobSpec,\"Expected JobSpec compiled from FlowSpec.\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertNotNull(jobExecutionPlanDag,\"Expected non null dag.\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "Assert.assertFalse(jobSpec.getConfig().hasPath(ConfigurationKeys.JOB_SCHEDULE_KEY))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ConfigurationKeys.JOB_NAME_KEY),TEST_FLOW_NAME)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Map<Spec,SpecExecutor> specExecutorMapping = this.compilerWithTemplateCalague.compileFlow(flowSpec)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ConfigurationKeys.FLOW_NAME_KEY),TEST_FLOW_NAME)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Map<Spec,SpecExecutor> specExecutorMapping = this.compilerWithoutTemplateCalague.compileFlow(flowSpec)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ConfigurationKeys.FLOW_GROUP_KEY),TEST_FLOW_GROUP)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Spec spec = specExecutorMapping.keySet().iterator().next()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testNoJobSpecCompilation['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertTrue(jobExecutionPlanDag.getNodes().size() == 0,\"Exepected 1 executor for FlowSpec.\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertNotNull(specExecutorMapping,\"Expected non null mapping.\")@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Dag<JobExecutionPlan> jobExecutionPlanDag = this.compilerWithTemplateCalague.compileFlow(flowSpec)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertTrue(specExecutorMapping.size() == 0,\"Exepected 1 executor for FlowSpec.\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "testNoJobSpecCompilation['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ConfigurationKeys.JOB_GROUP_KEY),TEST_FLOW_GROUP)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY),TEST_SOURCE_NAME)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertTrue(!jobSpec.getConfig().hasPath(\"testProperty2\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "JobSpec jobSpec = (JobSpec)spec@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertTrue(!jobSpec.getConfig().hasPath(\"testProperty1\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testCompilerWithoutTemplateCatalog['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "FlowSpec flowSpec = initFlowSpec()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertTrue(!jobSpec.getConfig().hasPath(\"testProperty3\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15->2 [style = bold, label=""];
10->20 [style = bold, label=""];
9->11 [style = bold, label=""];
11->12 [style = solid, label="spec"];
2->3 [style = bold, label=""];
0->2 [style = bold, label=""];
25->18 [style = bold, label=""];
18->19 [style = bold, label=""];
0->15 [style = dashed, label="0"];
11->12 [style = bold, label=""];
1->0 [style = bold, label=""];
2->9 [style = bold, label=""];
11->25 [style = solid, label="spec"];
13->15 [style = solid, label="flowSpec"];
1->7 [style = bold, label=""];
0->2 [style = solid, label="specExecutorMapping"];
1->13 [style = dashed, label="0"];
5->1 [style = bold, label=""];
20->16 [style = bold, label=""];
14->23 [style = bold, label=""];
23->21 [style = bold, label=""];
1->0 [style = solid, label="flowSpec"];
1->7 [style = solid, label="flowSpec"];
3->9 [style = dashed, label="0"];
7->6 [style = solid, label="jobExecutionPlanDag"];
12->25 [style = bold, label=""];
6->8 [style = bold, label=""];
7->6 [style = bold, label=""];
22->10 [style = bold, label=""];
2->6 [style = dashed, label="0"];
3->8 [style = dashed, label="0"];
16->14 [style = bold, label=""];
4->1 [style = bold, label=""];
13->15 [style = bold, label=""];
0->7 [style = dashed, label="0"];
15->2 [style = solid, label="specExecutorMapping"];
19->22 [style = bold, label=""];
21->17 [style = bold, label=""];
24->13 [style = bold, label=""];
}
