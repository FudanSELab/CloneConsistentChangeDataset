digraph {
20 [style = filled, label = "assertNotNull(op)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertNotNull(prg.getPreviewPlan())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Configuration config = new Configuration()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "OptimizedPlan op = (OptimizedPlan)ClusterClient.getOptimizedPlan(optimizer,prg,1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertNotNull(dumper.getOptimizerPlanAsJSON(op))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "PlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testGetExecutionPlan['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "config.setString(JobManagerOptions.ADDRESS,mockJmAddress.getHostName())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "dumper2.setEncodeForHTML(true)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(-1,htmlEscaped.indexOf('\'))@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(-1,htmlEscaped.indexOf('\'))@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "InetAddress mockAddress = InetAddress.getLocalHost()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testGetExecutionPlan['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testGetExecutionPlan['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "PackagedProgram prg = new PackagedProgram(,\"/dev/random\",\"/tmp\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "String htmlEscaped = dumper2.getOptimizerPlanAsJSON(op)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "InetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress,12345)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "config.setInteger(JobManagerOptions.PORT,mockJmAddress.getPort())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Optimizer optimizer = new Optimizer(new DataStatistics(),new DefaultCostEstimator(),config)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "OptimizedPlan op = (OptimizedPlan)ClusterClient.getOptimizedPlan(optimizer,prg,-1)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
7->13 [style = solid, label="optimizer"];
13->10 [style = bold, label=""];
19->18 [style = bold, label=""];
9->11 [style = bold, label=""];
13->14 [style = solid, label="op"];
17->6 [style = bold, label=""];
13->10 [style = solid, label="optimizer"];
16->6 [style = bold, label=""];
11->13 [style = solid, label="config"];
5->14 [style = bold, label=""];
10->13 [style = dashed, label="0"];
7->8 [style = bold, label=""];
1->13 [style = bold, label=""];
10->5 [style = solid, label="op"];
11->15 [style = bold, label=""];
18->13 [style = solid, label="prg"];
20->5 [style = bold, label=""];
2->0 [style = bold, label=""];
10->5 [style = bold, label=""];
10->2 [style = solid, label="op"];
3->2 [style = bold, label=""];
8->9 [style = solid, label="mockAddress"];
18->6 [style = bold, label=""];
15->1 [style = bold, label=""];
6->8 [style = bold, label=""];
8->9 [style = bold, label=""];
6->10 [style = solid, label="prg"];
4->12 [style = bold, label=""];
12->3 [style = bold, label=""];
13->3 [style = solid, label="op"];
6->7 [style = bold, label=""];
13->20 [style = solid, label="op"];
10->4 [style = solid, label="op"];
14->4 [style = bold, label=""];
13->20 [style = bold, label=""];
}
