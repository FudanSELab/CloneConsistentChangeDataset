digraph {
5 [style = filled, label = "fetcher.resetOffsetsIfNeeded()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertFalse(subscriptions.isOffsetResetNeeded(tp0))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "consumerClient.pollNoWakeup()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testUpdateFetchPositionResetToDefaultOffset['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "fetcher.resetOffsetsIfNeeded()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testListOffsetsSendsIsolationLevel['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "subscriptions.requestOffsetReset(tp0)@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(5,subscriptions.position(tp0).longValue())@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(5,subscriptions.position(tp0).longValue())@@@11@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assignFromUser(singleton(tp0))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Fetcher<byte((,byte((> fetcher = createFetcher(subscriptions,new Metrics(),new ByteArrayDeserializer(),new ByteArrayDeserializer(),Integer.MAX_VALUE,isolationLevel)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertTrue(subscriptions.isFetchable(tp0))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "client.prepareResponse(new MockClient.RequestMatcher(){@Override public boolean matches(AbstractRequest body){ListOffsetRequest request = (ListOffsetRequest)bodyreturn request.isolationLevel() == isolationLevel}},listOffsetResponse(Errors.NONE,1L,5L))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "consumerClient.pollNoWakeup()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(subscriptions.isFetchable(tp0))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "subscriptions.assignFromUser(singleton(tp0))@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "client.prepareResponse(listOffsetRequestMatcher(ListOffsetRequest.EARLIEST_TIMESTAMP),listOffsetResponse(Errors.NONE,1L,5L))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testUpdateFetchPositionResetToDefaultOffset['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertFalse(subscriptions.isOffsetResetNeeded(tp0))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "subscriptions.assignFromUser(singleton(tp0))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "subscriptions.requestOffsetReset(tp0,OffsetResetStrategy.LATEST)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "buildFetcher()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21->14 [style = bold, label=""];
4->7 [style = bold, label=""];
6->4 [style = bold, label=""];
4->16 [style = bold, label=""];
15->18 [style = bold, label=""];
13->17 [style = bold, label=""];
18->13 [style = bold, label=""];
16->15 [style = bold, label=""];
11->9 [style = bold, label=""];
17->20 [style = bold, label=""];
0->1 [style = bold, label=""];
20->19 [style = bold, label=""];
5->0 [style = bold, label=""];
1->3 [style = bold, label=""];
8->2 [style = bold, label=""];
3->12 [style = bold, label=""];
10->4 [style = bold, label=""];
6->16 [style = dashed, label="0"];
2->6 [style = bold, label=""];
7->5 [style = bold, label=""];
19->14 [style = bold, label=""];
14->4 [style = bold, label=""];
9->10 [style = bold, label=""];
}
