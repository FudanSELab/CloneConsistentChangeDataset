digraph {
15 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(\"Close was not called.\",1,closeCalled.get())@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",2),Long.MAX_VALUE))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "EvictingWindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator = new EvictingWindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new ReduceIterableWindowFunction<String,GlobalWindow,Tuple2<String,Integer>>(new SumReducer())),CountTrigger.of(WINDOW_SLIDE),CountEvictor.of(WINDOW_SIZE))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "testHarness.close()@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1998))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "EvictingWindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator = new EvictingWindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new RichSumReducer<GlobalWindow>(closeCalled),CountTrigger.of(WINDOW_SLIDE),CountEvictor.of(WINDOW_SIZE))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final int WINDOW_SIZE = 4@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",4),Long.MAX_VALUE))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TypeInformation<Tuple2<String,Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final int WINDOW_SLIDE = 2@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 10999))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testHarness.open()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",4),Long.MAX_VALUE))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 20))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new OneInputStreamOperatorTestHarness<>(operator)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1999))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3000))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testCountTrigger['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "operator.setInputType(inputType,new ExecutionConfig())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3999))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",2),Long.MAX_VALUE))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "operator.setInputType(inputType,new ExecutionConfig())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testHarness.configureForKeyedStream(new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "long initialTime = 0L@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",4),Long.MAX_VALUE))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testCountTrigger['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "testCountTriggerWithApply['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final int WINDOW_SIZE = 4@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "AtomicInteger closeCalled = new AtomicInteger(0)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "ListStateDescriptor<StreamRecord<Tuple2<String,Integer>>> stateDesc = new ListStateDescriptor<>(\"window-contents\",new StreamRecordSerializer<>(inputType.createSerializer(new ExecutionConfig())))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 999))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->2 [style = solid, label="initialTime"];
4->12 [style = solid, label="initialTime"];
30->24 [style = bold, label=""];
8->11 [style = solid, label="initialTime"];
8->19 [style = solid, label="initialTime"];
30->1 [style = solid, label="operator"];
25->34 [style = solid, label="WINDOW_SLIDE"];
4->17 [style = solid, label="initialTime"];
26->20 [style = solid, label="expectedOutput"];
8->28 [style = solid, label="initialTime"];
14->30 [style = bold, label=""];
26->18 [style = solid, label="expectedOutput"];
5->20 [style = bold, label=""];
17->6 [style = bold, label=""];
4->23 [style = solid, label="initialTime"];
3->30 [style = solid, label="WINDOW_SIZE"];
14->1 [style = solid, label="inputType"];
0->17 [style = bold, label=""];
34->1 [style = bold, label=""];
4->29 [style = solid, label="expectedOutput"];
4->5 [style = solid, label="expectedOutput"];
32->34 [style = solid, label="closeCalled"];
28->11 [style = bold, label=""];
16->29 [style = bold, label=""];
14->7 [style = solid, label="stateDesc"];
4->28 [style = solid, label="initialTime"];
4->26 [style = bold, label=""];
8->23 [style = solid, label="initialTime"];
8->6 [style = solid, label="initialTime"];
8->17 [style = solid, label="initialTime"];
4->0 [style = solid, label="initialTime"];
25->14 [style = bold, label=""];
4->6 [style = solid, label="initialTime"];
11->19 [style = bold, label=""];
15->16 [style = bold, label=""];
8->0 [style = solid, label="initialTime"];
32->10 [style = bold, label=""];
27->15 [style = bold, label=""];
10->7 [style = solid, label="WINDOW_SLIDE"];
8->20 [style = solid, label="initialTime"];
19->0 [style = bold, label=""];
29->18 [style = bold, label=""];
14->7 [style = bold, label=""];
20->27 [style = bold, label=""];
1->22 [style = bold, label=""];
25->24 [style = solid, label="inputType"];
22->8 [style = bold, label=""];
23->28 [style = bold, label=""];
2->23 [style = bold, label=""];
3->10 [style = bold, label=""];
12->13 [style = bold, label=""];
26->2 [style = bold, label=""];
7->24 [style = bold, label=""];
14->30 [style = solid, label="stateDesc"];
4->19 [style = solid, label="initialTime"];
7->34 [style = bold, label=""];
8->27 [style = solid, label="initialTime"];
10->34 [style = solid, label="WINDOW_SIZE"];
4->11 [style = solid, label="initialTime"];
7->34 [style = solid, label="stateDesc"];
10->25 [style = bold, label=""];
10->30 [style = solid, label="WINDOW_SLIDE"];
7->30 [style = dashed, label="0"];
9->5 [style = bold, label=""];
18->35 [style = bold, label=""];
4->15 [style = solid, label="initialTime"];
33->32 [style = bold, label=""];
13->9 [style = bold, label=""];
24->1 [style = bold, label=""];
8->4 [style = bold, label=""];
31->3 [style = bold, label=""];
35->36 [style = bold, label=""];
3->7 [style = solid, label="WINDOW_SIZE"];
7->1 [style = solid, label="operator"];
7->34 [style = dashed, label="0"];
4->27 [style = solid, label="initialTime"];
21->3 [style = bold, label=""];
34->22 [style = solid, label="operator"];
6->12 [style = bold, label=""];
}
