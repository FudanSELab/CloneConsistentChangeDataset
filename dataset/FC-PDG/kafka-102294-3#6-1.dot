digraph {
1 [style = filled, label = "shouldThrowStreamsExceptionWhenValueDeserializationFails['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "queue.addRawRecords(records)@@@5@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final List<ConsumerRecord<byte((,byte((>> records = Collections.singletonList(new ConsumerRecord<>(\"topic\",1,1,0L,TimestampType.CREATE_TIME,0L,0,0,recordKey,value))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(0,queueThatSkipsDeserializeErrors.size())@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final byte(( value = Serdes.Long().serializer().serialize(\"foo\",1L)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "shouldNotThrowStreamsExceptionWhenValueDeserializationFailsWithSkipHandler['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "queueThatSkipsDeserializeErrors.addRawRecords(records)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "shouldThrowStreamsExceptionWhenValueDeserializationFails['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1->3 [style = bold, label=""];
2->6 [style = solid, label="records"];
2->0 [style = solid, label="records"];
4->3 [style = bold, label=""];
6->5 [style = bold, label=""];
2->0 [style = bold, label=""];
3->2 [style = bold, label=""];
2->6 [style = bold, label=""];
3->2 [style = solid, label="value"];
7->3 [style = bold, label=""];
0->6 [style = dashed, label="0"];
}
