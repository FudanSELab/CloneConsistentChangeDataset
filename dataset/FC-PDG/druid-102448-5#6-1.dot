digraph {
41 [style = filled, label = "Assert.assertEquals(stream,taskConfig.getStartSequenceNumbers().getStream())@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "Assert.assertEquals(\"sequenceName-0\",taskConfig.getBaseSequenceName())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Capture<KinesisIndexTask> captured = Capture.newInstance()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "supervisor = getSupervisor(1,1,true,\"PT1H\",null,null)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertEquals(\"0\",taskConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap().get(shardId0))@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "expect(supervisorRecordSupplier.getPartitionIds(stream)).andReturn(ImmutableSet.of(shardId1,shardId0)).anyTimes()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "verifyAll()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "KafkaIndexTaskIOConfig taskConfig = task.getIOConfig()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(\"0\",taskConfig.getStartPartitions().getPartitionSequenceNumberMap().get(shardId0))@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "Assert.assertTrue(\"isUseTransaction\",taskConfig.isUseTransaction())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "supervisorRecordSupplier.assign(anyObject())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "supervisor.runInternal()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "expectLastCall().anyTimes()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,(long)taskConfig.getEndPartitions().getPartitionSequenceNumberMap().get(0))@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertFalse(\"maximumMessageTime\",taskConfig.getMaximumMessageTime().isPresent())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "Assert.assertEquals(0L,(long)taskConfig.getStartPartitions().getPartitionSequenceNumberMap().get(0))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER,taskConfig.getEndPartitions().getPartitionSequenceNumberMap().get(shardId1))@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "expect(supervisorRecordSupplier.getEarliestSequenceNumber(anyObject())).andReturn(\"0\").anyTimes()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "KinesisIndexTaskIOConfig taskConfig = task.getIOConfig()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "expectLastCall().anyTimes()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(tuningConfig.convertToTaskTuningConfig(),task.getTuningConfig())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(\"myCustomValue\",taskConfig.getConsumerProperties().get(\"myCustomKey\"))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "addSomeEvents(1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(\"sequenceName-0\",taskConfig.getBaseSequenceName())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "testNoInitialState['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "Assert.assertEquals(0L,(long)taskConfig.getStartPartitions().getPartitionSequenceNumberMap().get(1))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "supervisorRecordSupplier.seekToLatest(anyObject())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "expect(taskQueue.add(EasyMock.capture(captured))).andReturn(true)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,(long)taskConfig.getEndPartitions().getPartitionSequenceNumberMap().get(2))@@@33@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(shard1Partition,shard0Partition)).anyTimes()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testNoInitialState['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Assert.assertEquals(dataSchema,task.getDataSchema())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "Assert.assertEquals(0L,(long)taskConfig.getStartPartitions().getPartitionSequenceNumberMap().get(2))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "expectLastCall().anyTimes()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,taskConfig.getEndSequenceNumbers().getPartitionSequenceNumberMap().get(shardId0))@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Assert.assertEquals(kafkaHost,taskConfig.getConsumerProperties().get(\"bootstrap.servers\"))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "KafkaIndexTask task = captured.getValue()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "Assert.assertFalse(\"minimumMessageTime\",taskConfig.getMinimumMessageTime().isPresent())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(stream,taskConfig.getEndPartitions().getStream())@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "Assert.assertTrue(\"isUseTransaction\",taskConfig.isUseTransaction())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "taskRunner.registerListener(anyObject(),anyObject())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "KinesisIndexTask task = captured.getValue()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(\"0\",taskConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap().get(shardId1))@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assert.assertEquals(topic,taskConfig.getEndPartitions().getStream())@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(null)).anyTimes()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "Capture<KafkaIndexTask> captured = Capture.newInstance()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertEquals(KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,taskConfig.getEndSequenceNumbers().getPartitionSequenceNumberMap().get(shardId1))@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "Assert.assertEquals(topic,taskConfig.getStartPartitions().getStream())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "expect(taskQueue.add(capture(captured))).andReturn(true)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "replayAll()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER,taskConfig.getEndPartitions().getPartitionSequenceNumberMap().get(shardId0))@@@37@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "testNoInitialState['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
46 [style = filled, label = "supervisor.start()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,(long)taskConfig.getEndPartitions().getPartitionSequenceNumberMap().get(1))@@@32@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertEquals(stream,taskConfig.getEndSequenceNumbers().getStream())@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "supervisorRecordSupplier.seek(anyObject(),anyString())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53->55 [style = bold, label=""];
56->11 [style = bold, label=""];
54->52 [style = bold, label=""];
29->59 [style = bold, label=""];
8->10 [style = bold, label=""];
1->4 [style = bold, label=""];
44->21 [style = bold, label=""];
16->37 [style = dashed, label="0"];
30->1 [style = bold, label=""];
26->7 [style = bold, label=""];
34->19 [style = bold, label=""];
47->48 [style = bold, label=""];
48->57 [style = bold, label=""];
9->42 [style = dashed, label="0"];
32->49 [style = bold, label=""];
11->45 [style = bold, label=""];
50->3 [style = bold, label=""];
0->11 [style = bold, label=""];
32->14 [style = bold, label=""];
3->6 [style = bold, label=""];
28->26 [style = bold, label=""];
31->29 [style = bold, label=""];
20->3 [style = bold, label=""];
7->31 [style = bold, label=""];
29->23 [style = bold, label=""];
59->58 [style = bold, label=""];
13->38 [style = dashed, label="0"];
18->2 [style = bold, label=""];
40->38 [style = bold, label=""];
46->18 [style = bold, label=""];
14->57 [style = dashed, label="0"];
25->17 [style = bold, label=""];
16->21 [style = dashed, label="0"];
13->16 [style = bold, label=""];
36->11 [style = bold, label=""];
6->15 [style = bold, label=""];
49->50 [style = bold, label=""];
26->51 [style = bold, label=""];
58->44 [style = bold, label=""];
19->24 [style = bold, label=""];
35->29 [style = dashed, label="0"];
45->54 [style = bold, label=""];
13->44 [style = dashed, label="0"];
24->33 [style = bold, label=""];
21->5 [style = bold, label=""];
23->3 [style = dashed, label="0"];
8->59 [style = dashed, label="0"];
17->34 [style = bold, label=""];
52->47 [style = bold, label=""];
22->18 [style = bold, label=""];
9->5 [style = dashed, label="0"];
5->41 [style = bold, label=""];
55->46 [style = bold, label=""];
10->40 [style = dashed, label="0"];
10->58 [style = dashed, label="0"];
10->13 [style = bold, label=""];
15->28 [style = bold, label=""];
38->37 [style = bold, label=""];
39->40 [style = bold, label=""];
8->39 [style = dashed, label="0"];
43->53 [style = bold, label=""];
35->8 [style = bold, label=""];
33->30 [style = bold, label=""];
57->43 [style = bold, label=""];
7->32 [style = dashed, label="0"];
23->12 [style = bold, label=""];
2->32 [style = bold, label=""];
51->31 [style = bold, label=""];
41->39 [style = bold, label=""];
27->21 [style = bold, label=""];
35->41 [style = dashed, label="0"];
12->27 [style = bold, label=""];
4->22 [style = bold, label=""];
5->35 [style = bold, label=""];
16->9 [style = bold, label=""];
37->42 [style = bold, label=""];
20->43 [style = dashed, label="0"];
11->25 [style = bold, label=""];
14->20 [style = bold, label=""];
}
