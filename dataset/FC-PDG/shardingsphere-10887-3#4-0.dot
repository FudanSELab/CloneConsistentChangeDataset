digraph {
24 [style = filled, label = "i++@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(true,is(exists1))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "when(schemaContext.getSchema()).thenReturn(shardingSphereSchema)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "when(shardingSphereSchema.getDataSources()).thenReturn(new HashMap<String,DataSource>())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "schemaContexts.setAccessible(true)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Field schemaContexts = ProxyContext.getInstance().getClass().getDeclaredField(\"schemaContexts\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "schemaContexts.set(ProxyContext.getInstance(),new StandardSchemaContexts(schemaContextsMap,new Authentication(),new ConfigurationProperties(new Properties()),new MySQLDatabaseType()))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Map<String,SchemaContext> schemaContextsMap = getSchemaContextMap()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "when(schemaContext.getRuntimeContext()).thenReturn(runtimeContext)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "SchemaContext schemaContext = mock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "List<String> keyList = Lists.newArrayList(schemaContextsMap.keySet())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "i < keyList.size()@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "RuntimeContext runtimeContext = mock()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "boolean exists1 = ProxyContext.getInstance().schemaExists(\"schema\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(false,is(exists2))@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Map<String,SchemaContext> schemaContextsMap = Collections.singletonMap(\"schema\",schemaContext)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ShardingSphereSchema shardingSphereSchema = mock()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "when(shardingSphereSchema.getDataSources()).thenReturn(Collections.emptyMap())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertGetAllSchemaNames['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "when(schemaContext.getName()).thenReturn(\"schema\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "boolean exists2 = ProxyContext.getInstance().schemaExists(\"schema_2\")@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "schemaContexts.set(ProxyContext.getInstance(),new StandardSchemaContexts(schemaContextsMap,new Authentication(),new ConfigurationProperties(new Properties()),new MySQLDatabaseType()))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertSchemaExists['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(keyList.get(i),is(ProxyContext.getInstance().getAllSchemaNames().get(i)))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "int i = 0@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertSchemaExists['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "schemaContexts.setAccessible(true)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->3 [style = bold, label=""];
4->10 [style = bold, label=""];
11->16 [style = bold, label=""];
22->26 [style = bold, label=""];
12->20 [style = dashed, label="0"];
0->6 [style = bold, label=""];
7->16 [style = dashed, label="0"];
26->25 [style = bold, label=""];
24->23 [style = solid, label="i"];
21->24 [style = solid, label="i"];
3->15 [style = bold, label=""];
1->0 [style = bold, label=""];
5->14 [style = bold, label=""];
15->0 [style = solid, label="schemaContextsMap"];
21->9 [style = solid, label="i"];
24->23 [style = bold, label=""];
13->11 [style = bold, label=""];
23->9 [style = dotted, label="true"];
2->12 [style = bold, label=""];
12->13 [style = bold, label=""];
6->4 [style = bold, label=""];
18->20 [style = bold, label=""];
13->14 [style = solid, label="shardingSphereSchema"];
7->5 [style = bold, label=""];
17->12 [style = bold, label=""];
10->8 [style = bold, label=""];
20->26 [style = solid, label="schemaContextsMap"];
15->9 [style = bold, label=""];
16->5 [style = bold, label=""];
12->15 [style = solid, label="schemaContext"];
6->4 [style = solid, label="exists1"];
10->8 [style = solid, label="exists2"];
9->1 [style = bold, label=""];
20->19 [style = bold, label=""];
23->9 [style = bold, label=""];
19->22 [style = bold, label=""];
21->23 [style = solid, label="i"];
23->24 [style = dotted, label="true"];
9->24 [style = bold, label=""];
11->7 [style = bold, label=""];
25->21 [style = bold, label=""];
11->3 [style = solid, label="runtimeContext"];
21->23 [style = bold, label=""];
24->9 [style = solid, label="i"];
}
