digraph {
18 [style = filled, label = "Assert.assertFalse(\"overlord called\",overlordExpectedRequest.called)@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "HttpURLConnection connection = ((HttpURLConnection)new URL(StringUtils.format(\"http://localhost:%d/proxy/overlord%s\",port,overlordExpectedRequest.path)).openConnection())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Assert.assertTrue(\"coordinator called\",coordinatorExpectedRequest.called)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testOverlordProxyLeader['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(200,connection.getResponseCode())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testCoordinatorProxyStatus['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertFalse(\"coordinator called\",coordinatorExpectedRequest.called)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "HttpURLConnection connection = ((HttpURLConnection)new URL(StringUtils.format(\"http://localhost:%d/proxy/coordinator%s\",port,coordinatorExpectedRequest.path)).openConnection())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "HttpURLConnection connection = ((HttpURLConnection)new URL(StringUtils.format(\"http://localhost:%d/proxy/overlord/%s\",port,overlordExpectedRequest.path)).openConnection())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "connection.setRequestMethod(overlordExpectedRequest.method)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "coordinatorExpectedRequest.method = \"GET\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "coordinatorExpectedRequest.path = \"/status\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "overlordExpectedRequest.headers.forEach(null)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "coordinatorExpectedRequest.headers.forEach(null)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "overlordExpectedRequest.path = \"/druid/indexer/v1/leader\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "connection.setRequestMethod(coordinatorExpectedRequest.method)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "coordinatorExpectedRequest.headers = ImmutableMap.of(\"Authorization\",\"Basic bXl1c2VyOm15cGFzc3dvcmQ=\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "overlordExpectedRequest.headers = ImmutableMap.of(\"Authorization\",\"Basic bXl1c2VyOm15cGFzc3dvcmQ=\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "overlordExpectedRequest.method = \"GET\"@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testOverlordProxyLeader['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertTrue(\"overlord called\",overlordExpectedRequest.called)@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
7->11 [style = bold, label=""];
16->18 [style = bold, label=""];
3->17 [style = dashed, label="0"];
2->6 [style = bold, label=""];
17->9 [style = bold, label=""];
11->6 [style = bold, label=""];
1->7 [style = bold, label=""];
9->16 [style = bold, label=""];
1->20 [style = dashed, label="0"];
5->16 [style = dashed, label="0"];
3->9 [style = bold, label=""];
15->17 [style = bold, label=""];
19->13 [style = bold, label=""];
5->0 [style = bold, label=""];
7->19 [style = dashed, label="0"];
20->15 [style = solid, label="method"];
6->15 [style = dashed, label="0"];
7->2 [style = bold, label=""];
2->13 [style = dashed, label="0"];
12->14 [style = bold, label=""];
10->4 [style = bold, label=""];
9->5 [style = bold, label=""];
0->18 [style = dashed, label="0"];
2->11 [style = dashed, label="0"];
4->14 [style = dashed, label="0"];
4->1 [style = bold, label=""];
13->15 [style = bold, label=""];
8->4 [style = bold, label=""];
1->6 [style = solid, label="method"];
20->19 [style = bold, label=""];
14->20 [style = bold, label=""];
}
