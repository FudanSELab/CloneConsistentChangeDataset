digraph {
11 [style = filled, label = "JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "test_filterPushDown_factToCountryRightWithFilterOnChannelAndJoinable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "JoinTestHelper.verifyCursors(adapter.makeCursors(originalFilter,Intervals.ETERNITY,VirtualColumns.EMPTY,Granularities.ALL,false,null),ImmutableList.of(\"page\",\"countryIsoCode\",\"countryNumber\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9aa043))@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(factSegment.asStorageAdapter(),joinableClauses,joinFilterPreAnalysis)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(adapter,adapter.determineBaseColumnsWithPreAndPostJoinVirtualColumns(VirtualColumns.EMPTY,null,null),filter,true,true)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Filter originalFilter = new AndFilter(ImmutableList.of(new SelectorFilter(\"channel\",\"#de.wikipedia\"),new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\"Germany\")))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "JoinTestHelper.verifyCursors(adapter.makeCursors(filter,Intervals.ETERNITY,VirtualColumns.EMPTY,Granularities.ALL,false,null),ImmutableList.of(\"page\",\"countryIsoCode\",\"countryNumber\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9aa0da))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(new AndFilter(ImmutableList.of(new SelectorFilter(\"channel\",\"#de.wikipedia\"),new InDimFilter(\"countryIsoCode\",ImmutableSet.of(\"DE\"),null,null).toFilter())),new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\"Germany\"),ImmutableList.of())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "test_filterPushDown_factToCountryFullWithFilterOnChannelAndCountryName['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(expectedFilterSplit,actualFilterSplit)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(factSegment.asStorageAdapter(),ImmutableList.of(factToCountryOnIsoCode(JoinType.FULL)))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(factSegment.asStorageAdapter(),ImmutableList.of(factToCountryOnIsoCode(JoinType.RIGHT)))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.RIGHT))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Filter filter = new AndFilter(ImmutableList.of(new SelectorFilter(\"channel\",\"#es.wikipedia\"),new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\"El Salvador\")))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(new AndFilter(ImmutableList.of(new SelectorFilter(\"channel\",\"#es.wikipedia\"),new InDimFilter(\"countryIsoCode\",ImmutableSet.of(\"SV\"),null,null).toFilter())),new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\"El Salvador\"),ImmutableList.of())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "test_filterPushDown_factToCountryRightWithFilterOnChannelAndJoinable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "JoinFilterPreAnalysis joinFilterPreAnalysis = simplePreAnalysis(joinableClauses,originalFilter)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(adapter,adapter.determineBaseColumnsWithPreAndPostJoinVirtualColumns(VirtualColumns.EMPTY,null,null),originalFilter,true,true)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1->5 [style = bold, label=""];
16->15 [style = bold, label=""];
17->5 [style = bold, label=""];
0->9 [style = bold, label=""];
17->5 [style = solid, label="actualFilterSplit"];
10->9 [style = solid, label="joinableClauses"];
7->10 [style = bold, label=""];
2->3 [style = bold, label=""];
4->5 [style = solid, label="expectedFilterSplit"];
0->16 [style = dashed, label="0"];
12->16 [style = bold, label=""];
10->8 [style = solid, label="joinableClauses"];
9->8 [style = bold, label=""];
0->9 [style = solid, label="originalFilter"];
0->6 [style = solid, label="originalFilter"];
3->0 [style = bold, label=""];
9->8 [style = solid, label="joinFilterPreAnalysis"];
11->5 [style = bold, label=""];
15->17 [style = bold, label=""];
11->5 [style = solid, label="actualFilterSplit"];
1->17 [style = dashed, label="0"];
3->1 [style = solid, label="adapter"];
5->6 [style = bold, label=""];
16->17 [style = solid, label="filter"];
3->12 [style = dashed, label="0"];
6->13 [style = dashed, label="0"];
0->4 [style = bold, label=""];
1->11 [style = dashed, label="0"];
9->11 [style = solid, label="joinFilterPreAnalysis"];
4->15 [style = dashed, label="0"];
5->13 [style = bold, label=""];
14->12 [style = bold, label=""];
10->0 [style = bold, label=""];
12->17 [style = solid, label="adapter"];
0->1 [style = solid, label="originalFilter"];
15->5 [style = solid, label="expectedFilterSplit"];
4->1 [style = bold, label=""];
3->10 [style = dashed, label="0"];
8->4 [style = bold, label=""];
4->11 [style = bold, label=""];
1->5 [style = solid, label="actualFilterSplit"];
16->13 [style = solid, label="filter"];
}
