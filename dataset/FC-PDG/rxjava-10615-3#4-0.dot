digraph {
12 [style = filled, label = "replaySubjectConcurrentSubscribersDoingReplayDontBlockEachOther['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "slowThread.join()@@@92@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final ReplaySubject<Long> replay = ReplaySubject.createUnbounded()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Thread fastThread = new Thread(new Runnable(){@Override public void run(){final CountDownLatch fastLatch = new CountDownLatch(1)Observer<Long> fast = new DefaultObserver<Long>(){@Override public void onComplete(){System.out.println(\"*** Fast Observer completed\")fastLatch.countDown()}@Override public void onError(Throwable e){}@Override public void onNext(Long args){if (args == 1) {System.out.println(\"*** Fast Observer STARTED\")}}}replay.subscribe(fast)try {fastLatch.await()}catch (InterruptedException e1) }})@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "source.start()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final ReplayProcessor<Long> replay = ReplayProcessor.createUnbounded()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "long v = replay.blockingLast()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Thread slowThread = new Thread(new Runnable(){@Override public void run(){Observer<Long> slow = new DefaultObserver<Long>(){@Override public void onComplete(){System.out.println(\"*** Slow Observer completed\")slowLatch.countDown()}@Override public void onError(Throwable e){}@Override public void onNext(Long args){if (args == 1) {System.out.println(\"*** Slow Observer STARTED\")}try {if (args % 10 == 0) {Thread.sleep(1)}}catch (InterruptedException e) }}replay.subscribe(slow)try {slowLatch.await()}catch (InterruptedException e1) }})@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "fastThread.join()@@@89@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "replaySubjectConcurrentSubscribersDoingReplayDontBlockEachOther['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Thread slowThread = new Thread(new Runnable(){@Override public void run(){Subscriber<Long> slow = new DefaultSubscriber<Long>(){@Override public void onComplete(){System.out.println(\"*** Slow Observer completed\")slowLatch.countDown()}@Override public void onError(Throwable e){}@Override public void onNext(Long args){if (args == 1) {System.out.println(\"*** Slow Observer STARTED\")}try {if (args % 10 == 0) {Thread.sleep(1)}}catch (InterruptedException e) }}replay.subscribe(slow)try {slowLatch.await()}catch (InterruptedException e1) }})@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "slowThread.start()@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final CountDownLatch slowLatch = new CountDownLatch(1)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Thread fastThread = new Thread(new Runnable(){@Override public void run(){final CountDownLatch fastLatch = new CountDownLatch(1)Subscriber<Long> fast = new DefaultSubscriber<Long>(){@Override public void onComplete(){System.out.println(\"*** Fast Observer completed\")fastLatch.countDown()}@Override public void onError(Throwable e){}@Override public void onNext(Long args){if (args == 1) {System.out.println(\"*** Fast Observer STARTED\")}}}replay.subscribe(fast)try {fastLatch.await()}catch (InterruptedException e1) }})@@@61@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "slowThread.join()@@@91@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(1,slowLatch.getCount())@@@90@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "replaySubjectConcurrentSubscribersDoingReplayDontBlockEachOther['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "fastThread.start()@@@88@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(10000,v)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Thread source = new Thread(new Runnable(){@Override public void run(){Flowable.unsafeCreate(new Publisher<Long>(){@Override public void subscribe(Subscriber<? super Long> subscriber){System.out.println(\"********* Start Source Data ***********\")for (long l = 1 l <= 10000 l++){subscriber.onNext(l)}System.out.println(\"********* Finished Source Data ***********\")subscriber.onComplete()}}).subscribe(replay)}})@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->5 [style = bold, label=""];
7->8 [style = bold, label=""];
10->6 [style = bold, label=""];
19->1 [style = bold, label=""];
4->0 [style = solid, label="v"];
5->1 [style = bold, label=""];
16->19 [style = bold, label=""];
15->4 [style = bold, label=""];
5->19 [style = dashed, label="0"];
8->17 [style = bold, label=""];
3->18 [style = bold, label=""];
3->7 [style = bold, label=""];
2->3 [style = bold, label=""];
8->11 [style = bold, label=""];
12->5 [style = bold, label=""];
5->1 [style = solid, label="replay"];
19->1 [style = solid, label="replay"];
17->13 [style = bold, label=""];
11->13 [style = bold, label=""];
0->2 [style = solid, label="v"];
1->15 [style = bold, label=""];
1->4 [style = bold, label=""];
13->9 [style = bold, label=""];
18->8 [style = bold, label=""];
0->2 [style = bold, label=""];
4->0 [style = bold, label=""];
9->10 [style = bold, label=""];
}
