digraph {
17 [style = filled, label = "expect(taskClient.getStartTimeAsync(\"id1\")).andReturn(Futures.immediateFuture(startTime))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "expect(taskClient.getStartTimeAsync(\"id3\")).andReturn(Futures.immediateFuture(startTime))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "expect(taskStorage.getTask(\"id3\")).andReturn(Optional.of(id3)).anyTimes()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final TaskLocation location2 = new TaskLocation(\"testHost2\",145,-1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "supervisor.getNoticesQueueSize() > 0@@@43@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "final DateTime startTime = DateTimes.nowUtc()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "expect(taskClient.getStatusAsync(\"id1\")).andReturn(Futures.immediateFuture(Status.READING))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "workItems.add(new TestTaskRunnerWorkItem(id1,null,location1))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final TaskLocation location1 = new TaskLocation(\"testHost\",1234,-1)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "expect(taskStorage.getTask(\"id1\")).andReturn(Optional.of(id1)).anyTimes()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "taskRunner.registerListener(anyObject(),anyObject())@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expect(taskClient.getStatusAsync(\"id3\")).andReturn(Futures.immediateFuture(Status.READING))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "checkpoints.put(0,ImmutableMap.of(0,10L,1,20L,2,30L))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "Task id1 = createKafkaIndexTask(\"id1\",DATASOURCE,0,new SeekableStreamPartitions<>(\"topic\",ImmutableMap.of(0,0L,1,0L,2,0L)),new SeekableStreamPartitions<>(\"topic\",ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "verifyAll()@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "expect(taskClient.getStartTimeAsync(\"id2\")).andReturn(Futures.immediateFuture(startTime))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "final Task id3 = createKafkaIndexTask(\"id3\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,20L,2,30L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "Collection workItems = new ArrayList<>()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "taskQueue.shutdown(\"id2\",\"DataSourceMetadata is not found while reset\")@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "supervisor = getSupervisor(2,1,true,\"PT1S\",null,null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "Task id2 = createKafkaIndexTask(\"id2\",DATASOURCE,0,new SeekableStreamPartitions<>(\"topic\",ImmutableMap.of(0,10L,1,20L,2,30L)),new SeekableStreamPartitions<>(\"topic\",ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final Task id2 = createKafkaIndexTask(\"id2\",DATASOURCE,0,new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,20L,2,30L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
56 [style = filled, label = "Task id3 = createKafkaIndexTask(\"id3\",DATASOURCE,0,new SeekableStreamPartitions<>(\"topic\",ImmutableMap.of(0,10L,1,20L,2,30L)),new SeekableStreamPartitions<>(\"topic\",ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "TreeMap<Integer,Map<Integer,Long>> checkpoints = new TreeMap<>()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "supervisor.resetInternal(null)@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "checkpoints.put(0,ImmutableMap.of(0,10L,1,20L,2,30L))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "testCheckpointForInactiveTaskGroup['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "supervisor.runInternal()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of(id1,id2,id3)).anyTimes()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "testCheckpointForInactiveTaskGroup['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "taskQueue.shutdown(\"id3\",\"DataSourceMetadata is not found while reset\")@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "EasyMock.reset(taskQueue,indexerMetadataStorageCoordinator)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "expect(taskStorage.getStatus(\"id2\")).andReturn(Optional.of(TaskStatus.running(\"id2\"))).anyTimes()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "final Task id2 = createKafkaIndexTask(\"id2\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,20L,2,30L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "expect(taskStorage.getTask(\"id2\")).andReturn(Optional.of(id2)).anyTimes()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "taskQueue.shutdown(\"id1\",\"DataSourceMetadata is not found while reset\")@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "final Task id1 = createKafkaIndexTask(\"id1\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,0L,2,0L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "testNoDataIngestionTasks['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id3\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "replayAll()@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "supervisor.checkpoint(0,((KafkaIndexTask)id1).getIOConfig().getBaseSequenceName(),new KafkaDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(topic,checkpoints.get(0),ImmutableSet.of())),new KafkaDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(topic,fakeCheckpoints,fakeCheckpoints.keySet())))@@@42@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "expect(taskClient.getStatusAsync(\"id1\")).andReturn(Futures.immediateFuture(Status.READING))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "expect(taskClient.getStartTimeAsync(\"id1\")).andReturn(Futures.immediateFuture(startTime))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "verifyAll()@@@41@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "expect(taskStorage.getStatus(\"id3\")).andReturn(Optional.of(TaskStatus.running(\"id3\"))).anyTimes()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "supervisor.start()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id1\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertNull(serviceEmitter.getExceptionMessage(),serviceEmitter.getExceptionMessage())@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "final Task id3 = createKafkaIndexTask(\"id3\",DATASOURCE,0,new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,20L,2,30L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "supervisor = getSupervisor(2,1,true,\"PT1S\",null,null)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "expect(taskStorage.getStatus(\"id1\")).andReturn(Optional.of(TaskStatus.running(\"id1\"))).anyTimes()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertNull(serviceEmitter.getExceptionClass())@@@49@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expect(taskRunner.getRunningTasks()).andReturn(workItems).anyTimes()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "replay(taskQueue,indexerMetadataStorageCoordinator)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id2\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "workItems.add(new TestTaskRunnerWorkItem(id2,null,location2))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "expect(taskClient.getStatusAsync(\"id2\")).andReturn(Futures.immediateFuture(Status.READING))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "workItems.add(new TestTaskRunnerWorkItem(id2,null,location2))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Thread.sleep(100)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "verifyAll()@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "supervisor.moveTaskGroupToPendingCompletion(0)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "supervisor.checkpoint(0,((KafkaIndexTask)id1).getIOConfig().getBaseSequenceName(),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,checkpoints.get(0))),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,fakeCheckpoints)))@@@42@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
51->5 [style = bold, label=""];
13->28 [style = solid, label="id2"];
14->35 [style = bold, label=""];
2->49 [style = solid, label="fakeCheckpoints"];
38->12 [style = bold, label=""];
60->53 [style = bold, label=""];
43->26 [style = bold, label=""];
12->7 [style = bold, label=""];
59->66 [style = bold, label=""];
61->64 [style = bold, label=""];
7->9 [style = bold, label=""];
55->63 [style = bold, label=""];
48->6 [style = solid, label="id1"];
65->20 [style = bold, label=""];
31->46 [style = bold, label=""];
41->58 [style = bold, label=""];
17->21 [style = bold, label=""];
62->17 [style = solid, label="startTime"];
35->18 [style = bold, label=""];
15->34 [style = bold, label=""];
33->15 [style = bold, label=""];
24->48 [style = dashed, label="0"];
21->41 [style = bold, label=""];
54->62 [style = bold, label=""];
57->60 [style = bold, label=""];
34->31 [style = bold, label=""];
13->40 [style = bold, label=""];
1->0 [style = bold, label=""];
20->3 [style = bold, label=""];
4->2 [style = bold, label=""];
24->61 [style = dashed, label="0"];
16->19 [style = bold, label=""];
39->4 [style = bold, label=""];
44->32 [style = bold, label=""];
34->36 [style = bold, label=""];
62->41 [style = solid, label="startTime"];
2->33 [style = bold, label=""];
26->37 [style = bold, label=""];
13->64 [style = dashed, label="0"];
22->6 [style = bold, label=""];
24->13 [style = bold, label=""];
66->11 [style = bold, label=""];
28->29 [style = bold, label=""];
24->61 [style = bold, label=""];
46->16 [style = bold, label=""];
30->17 [style = bold, label=""];
27->43 [style = bold, label=""];
34->36 [style = dotted, label="true"];
63->57 [style = bold, label=""];
26->44 [style = solid, label="startTime"];
47->50 [style = bold, label=""];
25->20 [style = bold, label=""];
32->8 [style = bold, label=""];
18->39 [style = bold, label=""];
26->44 [style = bold, label=""];
42->11 [style = bold, label=""];
62->24 [style = bold, label=""];
5->24 [style = bold, label=""];
37->44 [style = bold, label=""];
29->10 [style = bold, label=""];
41->12 [style = dashed, label="0"];
33->49 [style = bold, label=""];
36->34 [style = bold, label=""];
47->29 [style = solid, label="id2"];
2->46 [style = bold, label=""];
1->6 [style = solid, label="location1"];
58->27 [style = bold, label=""];
11->38 [style = bold, label=""];
47->28 [style = solid, label="id2"];
40->50 [style = dashed, label="0"];
23->27 [style = bold, label=""];
0->29 [style = solid, label="location2"];
62->21 [style = solid, label="startTime"];
3->14 [style = bold, label=""];
40->56 [style = dashed, label="0"];
9->30 [style = bold, label=""];
8->58 [style = dashed, label="0"];
49->34 [style = bold, label=""];
46->52 [style = bold, label=""];
2->15 [style = solid, label="fakeCheckpoints"];
13->29 [style = solid, label="id2"];
8->65 [style = bold, label=""];
40->1 [style = bold, label=""];
64->56 [style = bold, label=""];
53->59 [style = bold, label=""];
10->42 [style = bold, label=""];
50->1 [style = bold, label=""];
48->47 [style = bold, label=""];
15->49 [style = dashed, label="0"];
0->22 [style = bold, label=""];
5->48 [style = bold, label=""];
0->28 [style = solid, label="location2"];
13->47 [style = dashed, label="0"];
26->37 [style = solid, label="startTime"];
41->23 [style = bold, label=""];
8->25 [style = bold, label=""];
26->32 [style = solid, label="startTime"];
24->6 [style = solid, label="id1"];
6->28 [style = bold, label=""];
56->55 [style = bold, label=""];
45->5 [style = bold, label=""];
}
