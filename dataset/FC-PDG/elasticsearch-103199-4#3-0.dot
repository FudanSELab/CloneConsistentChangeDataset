digraph {
2 [style = filled, label = "assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"),equalTo(\"5\"))@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"),equalTo(\"5\"))@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertThat(doc.docs().get(2).get(\"field\"),nullValue())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"),equalTo(\"6\"))@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertThat(nested2Mapper.nested().isIncludeInRoot(),equalTo(false))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(doc.docs().get(6).get(\"nested1.nested2.field2\"),nullValue())@@@34@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "testMultiNested['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ParsedDocument doc = docMapper.parse(SourceToParse.source(\"test\",\"type\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"value\").startArray(\"nested1\").startObject().field(\"field1\",\"1\").startArray(\"nested2\").startObject().field(\"field2\",\"2\").endObject().startObject().field(\"field2\",\"3\").endObject().endArray().endObject().startObject().field(\"field1\",\"4\").startArray(\"nested2\").startObject().field(\"field2\",\"5\").endObject().startObject().field(\"field2\",\"6\").endObject().endArray().endObject().endArray().endObject()),XContentType.JSON))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(nested1Mapper.nested().isIncludeInRoot(),equalTo(false))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(doc.docs().get(5).get(\"field\"),nullValue())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testMultiObjectAndNested1['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertThat(doc.docs().get(5).get(\"nested1.field1\"),equalTo(\"1\"))@@@29@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"),equalTo(\"2\"))@@@27@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(doc.docs().size(),equalTo(7))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertThat(doc.docs().get(2).get(\"nested1.field1\"),equalTo(\"1\"))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertThat(nested1Mapper.nested().isIncludeInParent(),equalTo(false))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(docMapper.hasNestedObjects(),equalTo(true))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertThat(nested2Mapper.nested().isIncludeInParent(),equalTo(false))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"),equalTo(\"6\"))@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertThat(doc.docs().get(4).get(\"field\"),nullValue())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type\",new CompressedXContent(mapping))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"),equalTo(\"2\"))@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "assertThat(doc.docs().get(5).get(\"nested1.field1\"),equalTo(\"4\"))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertThat(doc.docs().get(6).get(\"nested1.field1\"),nullValue())@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"),equalTo(\"5\"))@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertThat(nested1Mapper.nested().isNested(),equalTo(true))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(doc.docs().get(0).get(\"nested1.field1\"),nullValue())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"),equalTo(\"5\"))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
46 [style = filled, label = "assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"),nullValue())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testMultiObjectAndNested1['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(doc.docs().get(1).get(\"nested1.field1\"),nullValue())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"nested1\").field(\"type\",\"nested\").startObject(\"properties\").startObject(\"nested2\").field(\"type\",\"nested\").field(\"include_in_parent\",true).endObject().endObject().endObject().endObject().endObject().endObject())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(nested2Mapper.nested().isNested(),equalTo(true))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"),nullValue())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"),equalTo(\"2\"))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "ObjectMapper nested2Mapper = docMapper.objectMappers().get(\"nested1.nested2\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(doc.docs().get(3).get(\"field\"),nullValue())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"),equalTo(\"2\"))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"nested1\").field(\"type\",\"nested\").startObject(\"properties\").startObject(\"nested2\").field(\"type\",\"nested\").endObject().endObject().endObject().endObject().endObject().endObject())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertThat(doc.docs().get(0).get(\"field\"),nullValue())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"),equalTo(\"3\"))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertThat(doc.docs().get(6).get(\"field\"),equalTo(\"value\"))@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(doc.docs().get(1).get(\"field\"),nullValue())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertThat(doc.docs().get(2).get(\"nested1.field1\"),equalTo(\"4\"))@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"),equalTo(\"3\"))@@@25@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(nested2Mapper.nested().isIncludeInParent(),equalTo(true))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->25 [style = bold, label=""];
28->6 [style = bold, label=""];
4->38 [style = bold, label=""];
42->43 [style = bold, label=""];
32->46 [style = bold, label=""];
8->31 [style = bold, label=""];
5->33 [style = bold, label=""];
32->37 [style = dashed, label="0"];
46->5 [style = bold, label=""];
30->20 [style = bold, label=""];
11->33 [style = dashed, label="0"];
6->18 [style = bold, label=""];
25->30 [style = bold, label=""];
43->31 [style = bold, label=""];
11->4 [style = bold, label=""];
4->13 [style = bold, label=""];
33->4 [style = bold, label=""];
38->27 [style = bold, label=""];
17->45 [style = bold, label=""];
15->44 [style = dashed, label="0"];
18->36 [style = bold, label=""];
12->16 [style = bold, label=""];
24->29 [style = bold, label=""];
13->38 [style = dashed, label="0"];
29->34 [style = bold, label=""];
16->19 [style = bold, label=""];
9->8 [style = bold, label=""];
3->22 [style = bold, label=""];
45->30 [style = bold, label=""];
32->10 [style = bold, label=""];
8->43 [style = dashed, label="0"];
26->21 [style = bold, label=""];
7->14 [style = bold, label=""];
39->30 [style = bold, label=""];
19->44 [style = bold, label=""];
17->41 [style = dashed, label="0"];
2->23 [style = bold, label=""];
8->31 [style = solid, label="mapping"];
10->46 [style = dashed, label="0"];
31->26 [style = bold, label=""];
29->2 [style = bold, label=""];
13->27 [style = bold, label=""];
43->31 [style = solid, label="mapping"];
36->24 [style = bold, label=""];
10->5 [style = bold, label=""];
10->40 [style = dashed, label="0"];
40->5 [style = bold, label=""];
15->28 [style = bold, label=""];
22->12 [style = bold, label=""];
44->28 [style = bold, label=""];
0->24 [style = bold, label=""];
25->45 [style = dashed, label="0"];
27->41 [style = bold, label=""];
27->17 [style = bold, label=""];
35->8 [style = bold, label=""];
2->34 [style = dashed, label="0"];
23->1 [style = bold, label=""];
1->32 [style = bold, label=""];
34->23 [style = bold, label=""];
5->11 [style = bold, label=""];
19->15 [style = bold, label=""];
20->7 [style = bold, label=""];
41->39 [style = bold, label=""];
0->36 [style = dashed, label="0"];
25->39 [style = dashed, label="0"];
18->0 [style = bold, label=""];
37->40 [style = bold, label=""];
1->37 [style = bold, label=""];
21->3 [style = bold, label=""];
}
