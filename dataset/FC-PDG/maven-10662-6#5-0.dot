digraph {
3 [style = filled, label = "MavenProject projectC = createSucceededMavenProject(\"C\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Optional<BuildResumptionData> result = analyzer.determineBuildResumptionData(executionResult)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(result.get().getResumeFrom(),is(Optional.of(\"test:B\")))@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "resumeFromGetsDetermined['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "projectsSucceedingAfterFailedProjectsAreExcluded['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "projectsSucceedingAfterFailedProjectsAreExcluded['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "executionResult.setTopologicallySortedProjects(asList(projectA,projectB,projectC))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "MavenProject projectA = createSucceededMavenProject(\"A\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "executionResult.setTopologicallySortedProjects(asList(projectA,projectB))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "MavenProject projectB = createFailedMavenProject(\"B\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(result.isPresent(),is(true))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(result.get().getProjectsToSkip(),contains(\"test:C\"))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertThat(result.get().getRemainingProjects(),is(asList(\"test:B\")))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5->1 [style = bold, label=""];
11->5 [style = bold, label=""];
10->2 [style = bold, label=""];
1->9 [style = bold, label=""];
1->6 [style = bold, label=""];
6->1 [style = dashed, label="0"];
2->7 [style = bold, label=""];
4->2 [style = bold, label=""];
7->0 [style = solid, label="projectB"];
8->2 [style = bold, label=""];
7->12 [style = solid, label="projectB"];
3->0 [style = solid, label="projectC"];
7->12 [style = bold, label=""];
2->12 [style = solid, label="projectA"];
7->3 [style = bold, label=""];
3->0 [style = bold, label=""];
0->5 [style = bold, label=""];
6->9 [style = dashed, label="0"];
12->11 [style = bold, label=""];
2->0 [style = solid, label="projectA"];
}
