digraph {
0 [style = filled, label = "testAbandonBeforeACKEpoch['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testUnnecessarySnap['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testPopulatedLeaderConversation(new PopulatedLeaderConversation(){@Override public void converseWithLeader(InputArchive ia,OutputArchive oa,Leader l,long zxid){Assert.assertEquals(1,l.self.getAcceptedEpoch())Assert.assertEquals(1,l.self.getCurrentEpoch())LearnerInfo li = new LearnerInfo(1,0x10000,0)byte liBytes = new byte((((ByteBufferOutputStream.record2ByteBuffer(li,ByteBuffer.wrap(liBytes))QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO,1,liBytes,null)oa.writeRecord(qp,null)readPacketSkippingPing(ia,qp)Assert.assertEquals(Leader.LEADERINFO,qp.getType())Assert.assertEquals(ZxidUtils.makeZxid(2,0),qp.getZxid())Assert.assertEquals(ByteBuffer.wrap(qp.getData()).getInt(),0x10000)Assert.assertEquals(2,l.self.getAcceptedEpoch())Assert.assertEquals(1,l.self.getCurrentEpoch())byte epochBytes = new byte((((final ByteBuffer wrappedEpochBytes = ByteBuffer.wrap(epochBytes)wrappedEpochBytes.putInt(1)qp = new QuorumPacket(Leader.ACKEPOCH,zxid,epochBytes,null)oa.writeRecord(qp,null)readPacketSkippingPing(ia,qp)Assert.assertEquals(Leader.DIFF,qp.getType())}},2)@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testAbandonBeforeACKEpoch['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "testLeaderConversation(new LeaderConversation(){public void converseWithLeader(InputArchive ia,OutputArchive oa,Leader l){LearnerInfo li = new LearnerInfo(1,0x10000,0)byte(( liBytes = new byte((((ByteBufferOutputStream.record2ByteBuffer(li,ByteBuffer.wrap(liBytes))QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO,0,liBytes,null)oa.writeRecord(qp,null)readPacketSkippingPing(ia,qp)assertEquals(Leader.LEADERINFO,qp.getType())assertEquals(ZxidUtils.makeZxid(1,0),qp.getZxid())assertEquals(ByteBuffer.wrap(qp.getData()).getInt(),0x10000)Thread.sleep(l.self.getInitLimit() * l.self.getTickTime() + 5000)assertEquals(0,l.self.getCurrentEpoch())}})@@@3@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1->4 [style = dashed, label="0"];
2->1 [style = bold, label=""];
3->4 [style = bold, label=""];
0->1 [style = bold, label=""];
}
