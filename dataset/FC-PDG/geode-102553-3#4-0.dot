digraph {
10 [style = filled, label = "final Sequence seqStreamOne = mockContext.sequence(\"seqStreamOne\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "assertEquals(0,cos.size())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "cos.removeOutputStream(streamTwo)@@@46@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "testRemoveOutputStreamWithTwoStreams['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
51 [style = filled, label = "final OutputStream streamOne = mockContext.mock(,\"streamOne\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "mockContext.checking(new Expectations(){})@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "cos.removeOutputStream(streamOne)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@14ff81)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testRemoveOutputStreamWithTwoStreams['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "cos.removeOutputStream(streamTwo)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "assertTrue(cos.isEmpty())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "cos.close()@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "cos.flush()@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@14febe)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream(streamOne,streamTwo)@@@43@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@14ff6e,2,3)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertThat(cos.size()).isEqualTo(1)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "mockContext.checking(new Expectations(){})@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "cos.flush()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertThat(cos.size()).isEqualTo(2)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(3)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@14fe52)@@@52@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "cos.write(9)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "verifyZeroInteractions(streamTwo)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "cos.write(9)@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
52 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "final OutputStream streamTwo = mockContext.mock(,\"streamTwo\")@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).close()@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertEquals(2,cos.size())@@@45@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "inOrderStreams.verify(streamOne,times(2)).flush()@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "assertEquals(0,cos.size())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "cos.write(9)@@@55@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "cos.close()@@@57@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@14feab,2,3)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "final OutputStream streamOne = mock(,\"streamOne\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "mockContext.checking(new Expectations(){})@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(1)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "final OutputStream streamTwo = mock(,\"streamTwo\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@14fe3f,2,3)@@@49@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertFalse(cos.isEmpty())@@@47@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(0)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(4)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "InOrder inOrderStreams = inOrder(streamOne)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream(streamOne,streamTwo)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "cos.close()@@@32@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(2)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "cos.flush()@@@56@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertTrue(cos.isEmpty())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "testRemoveOutputStreamWhenEmpty['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(9)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(1,cos.size())@@@48@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertFalse(cos.isEmpty())@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18->37 [style = bold, label=""];
45->41 [style = bold, label=""];
22->26 [style = bold, label=""];
49->42 [style = bold, label=""];
47->53 [style = bold, label=""];
1->33 [style = dashed, label="0"];
39->19 [style = bold, label=""];
52->44 [style = bold, label=""];
28->40 [style = bold, label=""];
31->22 [style = bold, label=""];
9->0 [style = bold, label=""];
42->43 [style = bold, label=""];
16->10 [style = bold, label=""];
24->35 [style = bold, label=""];
46->49 [style = bold, label=""];
53->48 [style = bold, label=""];
12->11 [style = bold, label=""];
37->21 [style = bold, label=""];
27->36 [style = solid, label="streamOne"];
27->35 [style = solid, label="streamOne"];
38->27 [style = bold, label=""];
5->15 [style = bold, label=""];
36->32 [style = bold, label=""];
34->31 [style = bold, label=""];
30->25 [style = bold, label=""];
15->6 [style = bold, label=""];
8->32 [style = dashed, label="0"];
4->31 [style = dashed, label="0"];
21->30 [style = bold, label=""];
10->27 [style = dashed, label="0"];
23->36 [style = solid, label="streamTwo"];
13->23 [style = dashed, label="0"];
51->13 [style = bold, label=""];
23->24 [style = solid, label="streamTwo"];
32->33 [style = bold, label=""];
4->7 [style = bold, label=""];
1->9 [style = bold, label=""];
29->18 [style = bold, label=""];
19->24 [style = bold, label=""];
6->14 [style = bold, label=""];
35->28 [style = bold, label=""];
8->1 [style = bold, label=""];
44->46 [style = bold, label=""];
40->29 [style = bold, label=""];
11->9 [style = solid, label="streamTwo"];
17->34 [style = bold, label=""];
7->5 [style = bold, label=""];
48->45 [style = bold, label=""];
51->49 [style = solid, label="streamOne"];
13->12 [style = bold, label=""];
43->47 [style = bold, label=""];
23->17 [style = solid, label="streamTwo"];
3->2 [style = bold, label=""];
10->13 [style = bold, label=""];
11->3 [style = bold, label=""];
0->4 [style = bold, label=""];
50->51 [style = bold, label=""];
13->2 [style = solid, label="streamOne"];
20->39 [style = bold, label=""];
0->34 [style = dashed, label="0"];
27->23 [style = bold, label=""];
23->36 [style = bold, label=""];
11->2 [style = solid, label="streamTwo"];
13->52 [style = bold, label=""];
26->20 [style = bold, label=""];
2->8 [style = bold, label=""];
33->17 [style = bold, label=""];
}
