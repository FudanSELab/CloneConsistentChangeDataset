digraph {
10 [style = filled, label = "assertEquals(numberOfChannels - 1,handler.getNumOpenChannels())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final SingleInputGate inputGate = new SingleInputGateBuilder().setNumberOfChannels(2).setChannelFactory(null).build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testProcessCancellationBarrierAfterProcessBarrier['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertFalse(handler.isCheckpointPending())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final int numberOfChannels = 2@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(DEFAULT_CHECKPOINT_ID,invokable.getAbortedCheckpointId())@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testEndOfStreamWithPendingCheckpoint['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertEquals(numberOfChannels,handler.getNumOpenChannels())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(handler.isCheckpointPending())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final SingleCheckpointBarrierHandler handler = SingleCheckpointBarrierHandler.createUnalignedCheckpointBarrierHandler(TestSubtaskCheckpointCoordinator.INSTANCE,\"test\",invokable,SystemClock.getInstance(),true,inputGate)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "handler.processBarrier(buildCheckpointBarrier(DEFAULT_CHECKPOINT_ID),new InputChannelInfo(0,0))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final ValidatingCheckpointInvokable invokable = new ValidatingCheckpointInvokable()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(DEFAULT_CHECKPOINT_ID,handler.getLatestCheckpointId())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testEndOfStreamWithPendingCheckpoint['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(DEFAULT_CHECKPOINT_ID,handler.getLatestCheckpointId())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final SingleInputGate inputGate = new SingleInputGateBuilder().setChannelFactory(null).setNumberOfChannels(numberOfChannels).build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final SingleCheckpointBarrierHandler handler = SingleCheckpointBarrierHandler.createUnalignedCheckpointBarrierHandler(TestSubtaskCheckpointCoordinator.INSTANCE,\"test\",invokable,SystemClock.getInstance(),false,inputGate)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "handler.processEndOfPartition(new InputChannelInfo(0,0))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testProcessCancellationBarrier(handler,invokable)@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "handler.processBarrier(buildCheckpointBarrier(DEFAULT_CHECKPOINT_ID),new InputChannelInfo(0,0),false)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
8->9 [style = solid, label="inputGate"];
18->7 [style = solid, label="invokable"];
8->11 [style = dashed, label="0"];
8->9 [style = bold, label=""];
0->7 [style = bold, label=""];
16->18 [style = bold, label=""];
1->12 [style = bold, label=""];
17->19 [style = bold, label=""];
13->6 [style = bold, label=""];
9->2 [style = bold, label=""];
9->15 [style = bold, label=""];
9->17 [style = dashed, label="0"];
14->12 [style = bold, label=""];
2->15 [style = dashed, label="0"];
11->17 [style = bold, label=""];
18->17 [style = solid, label="invokable"];
7->13 [style = bold, label=""];
15->0 [style = bold, label=""];
12->10 [style = solid, label="numberOfChannels"];
11->8 [style = bold, label=""];
11->17 [style = solid, label="inputGate"];
6->3 [style = bold, label=""];
12->13 [style = solid, label="numberOfChannels"];
4->10 [style = bold, label=""];
12->11 [style = bold, label=""];
2->0 [style = bold, label=""];
17->7 [style = solid, label="handler"];
19->2 [style = bold, label=""];
11->9 [style = solid, label="invokable"];
3->4 [style = bold, label=""];
18->11 [style = bold, label=""];
10->5 [style = bold, label=""];
}
