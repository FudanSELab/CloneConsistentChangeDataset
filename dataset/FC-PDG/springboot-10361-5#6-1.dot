digraph {
2 [style = filled, label = "assertThat(health.getStatus()).isEqualTo(Status.DOWN)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "InfluxDbHealthIndicator healthIndicator = new InfluxDbHealthIndicator(influxDB)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "given(influxDb.ping()).willReturn(pong)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "verify(influxDB).ping()@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Pong pong = mock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Health health = healthIndicator.health()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "verify(influxDB).ping()@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "InfluxDbHealthIndicator healthIndicator = new InfluxDbHealthIndicator(influxDb)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "influxDbIsUp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertThat(health.getDetails().get(\"version\")).isEqualTo(\"0.9\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "InfluxDB influxDB = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "influxDbIsDown['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "verify(influxDb).ping()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "given(influxDB.ping()).willThrow(new InfluxDBException(new IOException(\"Connection failed\")))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat((String)health.getDetails().get(\"error\")).contains(\"Connection failed\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "InfluxDB influxDb = mock()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "given(pong.getVersion()).willReturn(\"0.9\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "given(influxDB.ping()).willReturn(pong)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertThat(health.getStatus()).isEqualTo(Status.UP)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "influxDbIsUp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3->2 [style = solid, label="influxDB"];
8->15 [style = dashed, label="0"];
12->11 [style = bold, label=""];
8->12 [style = dashed, label="0"];
10->11 [style = solid, label="influxDb"];
9->10 [style = bold, label=""];
5->2 [style = dashed, label="0"];
16->19 [style = bold, label=""];
15->3 [style = bold, label=""];
1->13 [style = bold, label=""];
4->7 [style = bold, label=""];
14->7 [style = bold, label=""];
7->9 [style = bold, label=""];
5->1 [style = bold, label=""];
2->0 [style = bold, label=""];
1->6 [style = bold, label=""];
11->0 [style = bold, label=""];
6->13 [style = dashed, label="0"];
17->2 [style = bold, label=""];
8->2 [style = bold, label=""];
19->3 [style = solid, label="influxDB"];
10->12 [style = bold, label=""];
3->8 [style = bold, label=""];
7->8 [style = solid, label="pong"];
9->3 [style = bold, label=""];
3->17 [style = bold, label=""];
0->18 [style = bold, label=""];
2->11 [style = dashed, label="0"];
7->12 [style = solid, label="pong"];
3->10 [style = dashed, label="0"];
1->0 [style = dashed, label="0"];
19->15 [style = bold, label=""];
0->5 [style = bold, label=""];
}
