digraph {
0 [style = filled, label = "RelTraitSet traitSet = planner.getEmptyTraitSet().replace(EnumerableConvention.INSTANCE)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "RelTraitSet traitSet = planner.getEmptyTraitSet().replace(EnumerableConvention.INSTANCE)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "RelNode transform = planner.transform(0,traitSet,convert)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "RuleSet ruleSet1 = RuleSets.ofList(rule1,EnumerableRules.ENUMERABLE_FILTER_RULE,EnumerableRules.ENUMERABLE_PROJECT_RULE)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "RelNode transform2 = planner.transform(1,traitSet,transform)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Planner planner = getPlanner(null,Programs.of(ruleSet))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(toString(transform2),equalTo(\"EnumerableProject(empid=($0(, deptno=($1(, name=($2(, salary=($3(, commission=($4()\" + \" EnumerableTableScan(table=((hr, emps(()\"))@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "RelNode convert = planner.convert(validate)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertThat(toString(transform2),equalTo(\"EnumerableProject(empid=($0(, deptno=($1(, name=($2(, salary=($3(, commission=($4()\" + \" EnumerableTableScan(table=((hr, emps(()\"))@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testPlanTransformTwice['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Planner planner = getPlanner(null,Programs.of(ruleSet1),Programs.of(ruleSet2))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "RuleSet ruleSet = RuleSets.ofList(FilterMergeRule.INSTANCE,EnumerableRules.ENUMERABLE_FILTER_RULE,EnumerableRules.ENUMERABLE_PROJECT_RULE)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "RelOptRule rule2 = new RelOptRule(operand(,operand(,RelOptRule.any())),\"MYRULE\"){@Override public boolean matches(RelOptRuleCall call){return false}public void onMatch(RelOptRuleCall call){}}@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "RelNode transform2 = planner.transform(0,traitSet,transform)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "SqlNode parse = planner.parse(\"select * from \"emps\"\")@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "RuleSet ruleSet2 = RuleSets.ofList(rule2)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "SqlNode validate = planner.validate(parse)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testPlanTransformTwice['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "RelNode transform = planner.transform(0,traitSet,convert)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "SqlNode parse = planner.parse(\"select * from \"emps\"\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "RelNode convert = planner.convert(validate)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testPlanTransformWithRuleNameConflicts['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "RelNode convert = planner.rel(validate).project()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "RelOptRule rule1 = new RelOptRule(operand(,operand(,RelOptRule.any())),\"MYRULE\"){@Override public boolean matches(RelOptRuleCall call){return false}public void onMatch(RelOptRuleCall call){}}@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "SqlNode validate = planner.validate(parse)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23->13 [style = solid, label="traitSet"];
0->9 [style = bold, label=""];
0->3 [style = solid, label="traitSet"];
11->9 [style = solid, label="convert"];
9->3 [style = solid, label="transform"];
3->7 [style = solid, label="transform2"];
18->14 [style = solid, label="transform2"];
17->13 [style = solid, label="convert"];
12->22 [style = bold, label=""];
3->18 [style = dashed, label="0"];
22->17 [style = solid, label="validate"];
24->16 [style = solid, label="ruleSet2"];
4->2 [style = bold, label=""];
15->16 [style = solid, label="ruleSet1"];
17->23 [style = bold, label=""];
13->18 [style = solid, label="transform"];
8->1 [style = bold, label=""];
24->16 [style = bold, label=""];
2->8 [style = solid, label="ruleSet"];
6->5 [style = bold, label=""];
11->0 [style = bold, label=""];
1->6 [style = bold, label=""];
21->20 [style = bold, label=""];
5->0 [style = bold, label=""];
3->7 [style = bold, label=""];
5->11 [style = dashed, label="0"];
23->13 [style = bold, label=""];
21->15 [style = solid, label="rule1"];
6->11 [style = bold, label=""];
15->24 [style = bold, label=""];
1->6 [style = solid, label="parse"];
22->17 [style = bold, label=""];
20->24 [style = solid, label="rule2"];
9->3 [style = bold, label=""];
10->2 [style = bold, label=""];
6->5 [style = solid, label="validate"];
12->22 [style = solid, label="parse"];
20->15 [style = bold, label=""];
5->9 [style = solid, label="convert"];
16->12 [style = bold, label=""];
18->14 [style = bold, label=""];
0->9 [style = solid, label="traitSet"];
13->18 [style = bold, label=""];
2->8 [style = bold, label=""];
23->18 [style = solid, label="traitSet"];
19->21 [style = bold, label=""];
}
