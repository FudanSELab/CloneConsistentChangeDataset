digraph {
2 [style = filled, label = "final PlannerConfig plannerConfig = new PlannerConfig(){@Override public boolean shouldSerializeComplexValues(){return false}}@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testRequestLogger = new TestRequestLogger()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final SchemaPlus rootSchema = CalciteTests.createMockRootSchema(conglomerate,walker,plannerConfig,CalciteTests.TEST_AUTHORIZER_MAPPER)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "setUp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final ExprMacroTable macroTable = CalciteTests.createExprMacroTable()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "EasyMock.replay(req)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "req = EasyMock.createStrictMock()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "EasyMock.expect(req.getRemoteAddr()).andReturn(null).once()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "executorService = MoreExecutors.listeningDecorator(Execs.multiThreaded(8,\"test_sql_resource_%s\"))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final PlannerFactory plannerFactory = new PlannerFactory(rootSchema,CalciteTests.createMockQueryLifecycleFactory(walker,conglomerate),operatorTable,macroTable,plannerConfig,CalciteTests.TEST_AUTHORIZER_MAPPER,CalciteTests.getJsonMapper(),CalciteTests.DRUID_SCHEMA_NAME)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "EasyMock.replay(req)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).anyTimes()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED,true)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "resource = new SqlResource(JSON_MAPPER,new SqlLifecycleFactory(plannerFactory,new NoopServiceEmitter(),testRequestLogger))@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "HttpServletRequest req = EasyMock.createStrictMock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).anyTimes()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.expect(req.getRemoteAddr()).andReturn(null).once()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "return req@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).anyTimes()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "scheduler = new QueryScheduler(5,ManualQueryPrioritizationStrategy.INSTANCE,new HiLoQueryLaningStrategy(40),new ServerConfig())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).anyTimes()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).anyTimes()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).anyTimes()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED,true)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "walker = CalciteTests.createMockWalker(conglomerate,temporaryFolder.newFolder(),scheduler)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "makeExpectedReq['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "setUp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).anyTimes()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "scheduler = new QueryScheduler(5,new HiLoQueryLaningStrategy(40),new ServerConfig())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23->31 [style = bold, label=""];
29->24 [style = solid, label="req"];
20->0 [style = solid, label="scheduler"];
16->8 [style = solid, label="macroTable"];
4->17 [style = bold, label=""];
2->1 [style = bold, label=""];
2->1 [style = solid, label="plannerConfig"];
1->8 [style = solid, label="rootSchema"];
22->0 [style = solid, label="scheduler"];
27->30 [style = bold, label=""];
11->4 [style = bold, label=""];
0->2 [style = bold, label=""];
20->0 [style = bold, label=""];
14->22 [style = bold, label=""];
3->15 [style = bold, label=""];
29->34 [style = bold, label=""];
1->13 [style = bold, label=""];
13->16 [style = bold, label=""];
7->3 [style = bold, label=""];
32->29 [style = bold, label=""];
8->12 [style = solid, label="plannerFactory"];
26->27 [style = bold, label=""];
29->28 [style = solid, label="req"];
30->28 [style = bold, label=""];
19->14 [style = bold, label=""];
5->6 [style = bold, label=""];
15->11 [style = bold, label=""];
18->10 [style = bold, label=""];
10->8 [style = bold, label=""];
22->0 [style = bold, label=""];
33->25 [style = bold, label=""];
9->18 [style = solid, label="req"];
31->33 [style = bold, label=""];
25->26 [style = bold, label=""];
20->22 [style = dashed, label="0"];
8->12 [style = bold, label=""];
9->5 [style = bold, label=""];
28->24 [style = bold, label=""];
13->8 [style = solid, label="operatorTable"];
10->12 [style = solid, label="testRequestLogger"];
34->23 [style = bold, label=""];
0->1 [style = solid, label="walker"];
2->8 [style = solid, label="plannerConfig"];
6->7 [style = bold, label=""];
16->9 [style = bold, label=""];
17->18 [style = bold, label=""];
14->20 [style = bold, label=""];
21->14 [style = bold, label=""];
0->8 [style = solid, label="walker"];
}
