digraph {
14 [style = filled, label = "assertThrown(null).message().contains(\"It's recommended you use the BeanTraverseContext.BEANTRAVERSE_detectRecursions setting to help locate the loop.\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertThrown(null).contains(\"(0( <noname>:org.apache.juneau.xml.CommonTest$R1\",\"(1( r2:org.apache.juneau.xml.CommonTest$R2\",\"(2( r3:org.apache.juneau.xml.CommonTest$R3\",\"(3( r1:org.apache.juneau.xml.CommonTest$R1\")@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertString(r).contains(\"<rdf:Description>\" + \"<jp:name>foo</jp:name>\" + \"<jp:r2 rdf:parseType='Resource'>\" + \"<jp:name>bar</jp:name>\" + \"<jp:r3 rdf:parseType='Resource'>\" + \"<jp:name>baz</jp:name>\" + \"</jp:r3>\" + \"</jp:r2>\" + \"</rdf:Description>\" + \"</rdf:RDF>\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testRecursion['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testRecursion['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThrown(null).contains(\"(0( root:org.apache.juneau.jena.CommonTest$R1\",\"(1( r2:org.apache.juneau.jena.CommonTest$R2\",\"(2( r3:org.apache.juneau.jena.CommonTest$R3\",\"(3( r1:org.apache.juneau.jena.CommonTest$R1\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testRecursion['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "R1 r1 = new R1()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "r2.r3 = r3@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "s.ignoreRecursions()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"<object><name>foo</name><r2><name>bar</name><r3><name>baz</name></r3></r2></object>\",s.build().serialize(r1))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThrown(null).message().contains(\"(0( <noname>:org.apache.juneau.xml.CommonTest$R1\",\"(1( r2:org.apache.juneau.xml.CommonTest$R2\",\"(2( r3:org.apache.juneau.xml.CommonTest$R3\",\"(3( r1:org.apache.juneau.xml.CommonTest$R1\")@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "XmlSerializerBuilder s = XmlSerializer.create().maxDepth(Integer.MAX_VALUE)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "R2 r2 = new R2()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "r3.r1 = r1@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "R3 r3 = new R3()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertString(r).contains(\"xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\"xmlns:j='http://www.apache.org/juneau/\",\"xmlns:jp='http://www.apache.org/juneaubp/\")@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "RdfSerializerBuilder s = RdfSerializer.create().xmlabbrev().sq().maxDepth(Integer.MAX_VALUE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "String r = s.build().serialize(r1).replace(\"\",\"\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "r1.r2 = r2@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "s.detectRecursions()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThrown(null).contains(\"It's recommended you use the BeanTraverseContext.BEANTRAVERSE_detectRecursions setting to help locate the loop.\")@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3->1 [style = bold, label=""];
0->5 [style = solid, label="r1"];
9->2 [style = bold, label=""];
4->6 [style = bold, label=""];
8->18 [style = bold, label=""];
12->11 [style = bold, label=""];
11->2 [style = solid, label="r3"];
6->19 [style = bold, label=""];
11->9 [style = bold, label=""];
7->8 [style = bold, label=""];
13->1 [style = bold, label=""];
19->8 [style = bold, label=""];
6->15 [style = bold, label=""];
20->10 [style = bold, label=""];
1->20 [style = dashed, label="0"];
0->14 [style = bold, label=""];
2->0 [style = bold, label=""];
10->0 [style = solid, label="r1"];
8->5 [style = bold, label=""];
7->19 [style = dashed, label="0"];
0->4 [style = bold, label=""];
10->12 [style = bold, label=""];
16->21 [style = bold, label=""];
7->15 [style = dashed, label="0"];
12->9 [style = solid, label="r2"];
4->14 [style = dashed, label="0"];
6->7 [style = bold, label=""];
1->10 [style = bold, label=""];
14->6 [style = bold, label=""];
15->8 [style = bold, label=""];
17->20 [style = bold, label=""];
18->16 [style = bold, label=""];
}
