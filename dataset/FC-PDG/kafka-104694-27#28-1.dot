digraph {
32 [style = filled, label = "EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "PowerMock.verifyAll()@@@44@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testCleanupTasksOnStop['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,null)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EasyMock.expectLastCall()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "workerTask.run()@@@27@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "EasyMock.expectLastCall()@@@28@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertStatistics(worker,0,1)@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertStatistics(worker,0,0)@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expectConverters()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "PowerMock.verifyAll()@@@57@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "EasyMock.expect(executorService.submit(workerTask)).andReturn(null)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "worker.start()@@@37@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
48 [style = filled, label = "connProps.put(\"value.converter.extra.config\",\"bar\")@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "workerTask.initialize(taskConfig)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader).times(2)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertStatistics(worker,0,1)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "EasyMock.expectLastCall()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Capture<TestConfigurableConverter> valueConverter = EasyMock.newCapture()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "assertEquals(Collections.emptySet(),worker.taskIds())@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "expectTaskKeyConverters(ClassLoaderUsage.PLUGINS,taskKeyConverter)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "assertStatistics(worker,0,0)@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "Map<String,String> connProps = anyConnectorConfigMap()@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertStatistics(worker,0,0)@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "PowerMock.verifyAll()@@@43@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader).times(2)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Capture<HeaderConverter> headerConverter = EasyMock.newCapture()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "origProps.put(TaskConfig.TASK_CLASS_CONFIG,.getName())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "testConverterOverrides['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "worker.start()@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertNotNull(taskHeaderConverter)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expectStopStorage()@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG,.getName())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "EasyMock.expectLastCall()@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "worker.stop()@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "TaskConfig taskConfig = new TaskConfig(origProps)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "PowerMock.expectNew(,EasyMock.eq(TASK_ID),EasyMock.eq(task),anyObject(),EasyMock.eq(TargetState.STARTED),anyObject(),anyObject(),anyObject(),EasyMock.eq(new TransformationChain<>(Collections.emptyList(),NOOP_OPERATOR)),anyObject(),anyObject(),anyObject(),anyObject(),anyObject(),anyObject(),EasyMock.eq(pluginLoader),anyObject(),anyObject()).andReturn(workerTask)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader)@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertNotNull(taskKeyConverter)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "assertStatistics(worker,0,0)@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "worker = new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore)@@@40@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "EasyMock.expect(plugins.newTask()).andReturn(task)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "PowerMock.replayAll()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "worker.stop()@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "worker.stopAndAwaitTask(TASK_ID)@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "expectTaskValueConverters(ClassLoaderUsage.PLUGINS,taskValueConverter)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "EasyMock.expect(task.version()).andReturn(\"1.0\")@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertNotNull(taskValueConverter)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "EasyMock.expectLastCall()@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "expectStartStorage()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "EasyMock.expect(delegatingLoader.connectorLoader(.getName())).andReturn(pluginLoader)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertEquals(Collections.emptySet(),worker.taskIds())@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "connProps.put(\"key.converter.extra.config\",\"foo\")@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER,null)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(TASK_ID)),worker.taskIds())@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS,taskHeaderConverter)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "EasyMock.expect(workerTask.loader()).andReturn(pluginLoader)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Map<String,String> origProps = new HashMap<>()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,null)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG,.getName())@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "worker.startTask(TASK_ID,ClusterConfigState.EMPTY,connProps,origProps,taskStatusListener,TargetState.STARTED)@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "workerTask.stop()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Capture<TestConverter> keyConverter = EasyMock.newCapture()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "PowerMock.expectNew(,EasyMock.eq(TASK_ID),EasyMock.eq(task),anyObject(),EasyMock.eq(TargetState.STARTED),EasyMock.capture(keyConverter),EasyMock.capture(valueConverter),EasyMock.capture(headerConverter),EasyMock.eq(new TransformationChain<>(Collections.emptyList(),NOOP_OPERATOR)),anyObject(),anyObject(),anyObject(),anyObject(),anyObject(),anyObject(),EasyMock.eq(pluginLoader),anyObject(),anyObject()).andReturn(workerTask)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "testCleanupTasksOnStop['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
50->32 [style = bold, label=""];
7->13 [style = solid, label="worker"];
31->37 [style = bold, label=""];
40->49 [style = bold, label=""];
30->13 [style = bold, label=""];
41->15 [style = bold, label=""];
30->67 [style = solid, label="worker"];
65->54 [style = bold, label=""];
7->30 [style = bold, label=""];
57->62 [style = bold, label=""];
54->57 [style = bold, label=""];
10->35 [style = bold, label=""];
7->24 [style = solid, label="worker"];
25->29 [style = bold, label=""];
3->16 [style = bold, label=""];
29->18 [style = bold, label=""];
37->9 [style = bold, label=""];
44->46 [style = bold, label=""];
63->66 [style = bold, label=""];
52->60 [style = bold, label=""];
39->23 [style = bold, label=""];
35->8 [style = bold, label=""];
7->43 [style = bold, label=""];
38->26 [style = bold, label=""];
20->47 [style = dashed, label="0"];
39->14 [style = solid, label="origProps"];
9->38 [style = bold, label=""];
32->20 [style = bold, label=""];
67->52 [style = bold, label=""];
46->38 [style = bold, label=""];
24->19 [style = bold, label=""];
28->36 [style = bold, label=""];
66->67 [style = bold, label=""];
60->64 [style = bold, label=""];
14->22 [style = bold, label=""];
39->58 [style = solid, label="origProps"];
34->31 [style = bold, label=""];
47->39 [style = bold, label=""];
7->14 [style = solid, label="worker"];
43->13 [style = bold, label=""];
55->65 [style = bold, label=""];
5->6 [style = bold, label=""];
27->11 [style = bold, label=""];
58->51 [style = bold, label=""];
30->7 [style = dashed, label="0"];
20->39 [style = bold, label=""];
62->48 [style = bold, label=""];
61->2 [style = bold, label=""];
10->56 [style = dashed, label="0"];
1->56 [style = bold, label=""];
65->58 [style = solid, label="connProps"];
51->63 [style = bold, label=""];
39->4 [style = solid, label="origProps"];
2->17 [style = bold, label=""];
48->58 [style = bold, label=""];
6->34 [style = bold, label=""];
13->42 [style = bold, label=""];
26->3 [style = bold, label=""];
0->12 [style = bold, label=""];
17->40 [style = bold, label=""];
64->59 [style = bold, label=""];
45->2 [style = bold, label=""];
42->55 [style = bold, label=""];
4->41 [style = bold, label=""];
56->35 [style = bold, label=""];
42->14 [style = bold, label=""];
30->42 [style = solid, label="worker"];
53->50 [style = bold, label=""];
39->42 [style = solid, label="origProps"];
30->64 [style = solid, label="worker"];
31->44 [style = bold, label=""];
40->32 [style = bold, label=""];
4->27 [style = solid, label="taskConfig"];
33->2 [style = bold, label=""];
19->21 [style = bold, label=""];
23->4 [style = bold, label=""];
36->1 [style = bold, label=""];
8->7 [style = bold, label=""];
49->53 [style = bold, label=""];
30->19 [style = solid, label="worker"];
11->0 [style = bold, label=""];
30->51 [style = solid, label="worker"];
16->28 [style = bold, label=""];
32->47 [style = bold, label=""];
12->25 [style = bold, label=""];
18->5 [style = bold, label=""];
30->22 [style = solid, label="worker"];
22->24 [style = bold, label=""];
37->44 [style = dashed, label="0"];
15->27 [style = bold, label=""];
1->10 [style = bold, label=""];
}
