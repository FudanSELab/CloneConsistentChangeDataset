digraph {
1 [style = filled, label = "wrappedData.put(netBytes)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "unwrapWithDecryptionError['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "ByteBuffer wrappedData = ByteBuffer.allocate(inputSharing.getBuffer().capacity())@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testEngine.addReturnResult(new SSLEngineResult(BUFFER_UNDERFLOW,NEED_TASK,0,0))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "ByteBuffer unwrappedBuffer = spyNioSslEngine.unwrap(wrappedData)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "unwrappedBuffer.flip()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "byte(( netBytes = new byte((((@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThatThrownBy(null).isInstanceOf().hasMessageContaining(\"Error decrypting data\")@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "wrappedData.flip()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "unwrapWithBufferUnderflow['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "unwrapWithDecryptionError['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(unwrappedBuffer.remaining()).isEqualTo(0)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(wrappedData.position()).isEqualTo(netBytes.length)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "ByteBuffer wrappedData = ByteBuffer.allocate(nioSslEngine.peerAppData.capacity())@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Arrays.fill(netBytes,(byte)0x1F)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->6 [style = bold, label=""];
7->8 [style = bold, label=""];
8->4 [style = bold, label=""];
2->7 [style = bold, label=""];
16->18 [style = bold, label=""];
11->0 [style = bold, label=""];
3->0 [style = solid, label="netBytes"];
9->3 [style = bold, label=""];
14->9 [style = bold, label=""];
10->11 [style = bold, label=""];
5->9 [style = bold, label=""];
0->2 [style = solid, label="netBytes"];
0->1 [style = bold, label=""];
8->6 [style = solid, label="testEngine"];
3->1 [style = solid, label="netBytes"];
9->15 [style = solid, label="wrappedData"];
0->1 [style = solid, label="netBytes"];
17->4 [style = bold, label=""];
13->16 [style = bold, label=""];
3->0 [style = bold, label=""];
7->4 [style = solid, label="testEngine"];
15->13 [style = bold, label=""];
6->12 [style = bold, label=""];
7->17 [style = bold, label=""];
6->15 [style = dashed, label="0"];
4->15 [style = bold, label=""];
8->17 [style = dashed, label="0"];
1->2 [style = bold, label=""];
}
