digraph {
17 [style = filled, label = "Assert.assertNotNull(response)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(1,testRequestLogger.getNativeQuerylogs().size())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertNotNull(response)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "expectPermissiveHappyPathAuth()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testGoodQueryWithQueryConfigOverrideDefault['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(0,responses.size())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "DefaultQueryConfig overrideConfig = new DefaultQueryConfig(ImmutableMap.of(overrideConfigKey,overrideConfigValue))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final List<Result<TimeBoundaryResultValue>> responses = jsonMapper.readValue(baos.toByteArray(),new TypeReference<List<Result<TimeBoundaryResultValue>>>(){})@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "final List<Result<TimeBoundaryResultValue>> responses = JSON_MAPPER.readValue(baos.toByteArray(),new TypeReference<List<Result<TimeBoundaryResultValue>>>(){})@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "queryResource = new QueryResource(new QueryLifecycleFactory(WAREHOUSE,TEST_SEGMENT_WALKER,new DefaultGenericQueryMetricsFactory(),new NoopServiceEmitter(),testRequestLogger,new AuthConfig(),AuthTestUtils.TEST_AUTHORIZER_MAPPER,Suppliers.ofInstance(overrideConfig)),JSON_MAPPER,JSON_MAPPER,queryScheduler,new AuthConfig(),null,ResponseContextConfig.newConfig(true),DRUID_NODE)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "queryResource = new QueryResource(new QueryLifecycleFactory(WAREHOUSE,TEST_SEGMENT_WALKER,new DefaultGenericQueryMetricsFactory(),new NoopServiceEmitter(),testRequestLogger,new AuthConfig(),AuthTestUtils.TEST_AUTHORIZER_MAPPER,Suppliers.ofInstance(overrideConfig)),jsonMapper,smileMapper,queryScheduler,new AuthConfig(),null,ResponseContextConfig.newConfig(true),DRUID_NODE)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Assert.assertNotNull(testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Response response = queryResource.doPost(new ByteArrayInputStream(SIMPLE_TIMESERIES_QUERY.getBytes(StandardCharsets.UTF_8)),null,testServletRequest)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(Response.Status.OK.getStatusCode(),response.getStatus())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(-1,testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext().get(overrideConfigKey))@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "String overrideConfigKey = \"priority\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "((StreamingOutput)response.getEntity()).write(baos)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String overrideConfigValue = \"678\"@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext().containsKey(overrideConfigKey))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testGoodQueryWithQueryConfigOverrideDefault['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "final ByteArrayOutputStream baos = new ByteArrayOutputStream()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertNotNull(testRequestLogger.getNativeQuerylogs().get(0).getQuery())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testGoodQueryWithQueryConfigDoesNotOverrideQueryContext['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(overrideConfigValue,testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext().get(overrideConfigKey))@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Response response = queryResource.doPost(new ByteArrayInputStream(SIMPLE_TIMESERIES_QUERY_LOW_PRIORITY.getBytes(StandardCharsets.UTF_8)),null,testServletRequest)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13->10 [style = bold, label=""];
15->5 [style = solid, label="overrideConfigKey"];
11->13 [style = solid, label="overrideConfigValue"];
4->16 [style = solid, label="baos"];
15->2 [style = solid, label="overrideConfigKey"];
0->17 [style = bold, label=""];
8->18 [style = bold, label=""];
12->15 [style = bold, label=""];
17->4 [style = bold, label=""];
23->15 [style = bold, label=""];
6->24 [style = bold, label=""];
6->0 [style = bold, label=""];
20->6 [style = bold, label=""];
21->3 [style = bold, label=""];
10->6 [style = bold, label=""];
7->14 [style = bold, label=""];
13->10 [style = solid, label="overrideConfig"];
15->11 [style = bold, label=""];
18->1 [style = bold, label=""];
3->7 [style = bold, label=""];
0->3 [style = solid, label="response"];
9->21 [style = dashed, label="0"];
16->21 [style = bold, label=""];
24->17 [style = solid, label="response"];
11->13 [style = bold, label=""];
24->17 [style = bold, label=""];
15->13 [style = solid, label="overrideConfigKey"];
0->24 [style = dashed, label="0"];
9->3 [style = bold, label=""];
10->20 [style = dashed, label="0"];
14->8 [style = bold, label=""];
1->2 [style = bold, label=""];
11->5 [style = solid, label="overrideConfigValue"];
0->17 [style = solid, label="response"];
15->22 [style = solid, label="overrideConfigKey"];
19->15 [style = bold, label=""];
2->22 [style = bold, label=""];
13->20 [style = solid, label="overrideConfig"];
24->3 [style = solid, label="response"];
16->9 [style = bold, label=""];
4->16 [style = bold, label=""];
2->5 [style = bold, label=""];
13->20 [style = bold, label=""];
5->22 [style = dashed, label="0"];
}
