digraph {
34 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@fdd65),sn.getServersForQueue(null,Collections.EMPTY_SET,-1))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "sn.addServer(l1,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@fdcbb,new ServerLoad(1,1,1,1))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "sn.addServer(l1,uniqueId1,new String((((,new ServerLoad(1,1,1,1),LOAD_POLL_INTERVAL)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "sn.addServer(l2,new String((((,new ServerLoad(100,.2f,10,.2f))@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "sn.updateLoad(l1,new ServerLoad(10,1,1,1))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@fddd0),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,5))@@@42@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ServerLocation l1 = new ServerLocation(\"localhost\",1)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testRemoveServer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(Collections.singletonList(l2),sn.getServersForQueue(null,Collections.EMPTY_SET,-1))@@@14@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final LocatorLoadSnapshot sn = new LocatorLoadSnapshot()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "sn.removeServer(l1,uniqueId1)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "ServerLocation l2 = new ServerLocation(\"localhost\",2)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final String uniqueId1 = new InternalDistributedMember(\"localhost\",1).getUniqueId()@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "sn.removeServer(l1)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "assertNull(sn.getServerForConnection(\"a\",Collections.EMPTY_SET))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@fdd3c),sn.getServersForQueue(\"c\",Collections.EMPTY_SET,-1))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"c\",Collections.EMPTY_SET))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertNotNull(sn.getServerForConnection(null,Collections.EMPTY_SET))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "LocatorLoadSnapshot sn = new LocatorLoadSnapshot()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final ServerLocation l2 = new ServerLocation(\"localhost\",2)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@fddbd),sn.getServersForQueue(\"a\",Collections.EMPTY_SET,-1))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final ServerLocation l1 = new ServerLocation(\"localhost\",1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"c\",Collections.EMPTY_SET))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "sn.addServer(l2,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@fdccb,new ServerLoad(1,1,1,1))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "sn.addServer(l1,new String((((,new ServerLoad(1,1,1,1))@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@fdc6b),sn.getServersForQueue(null,Collections.EMPTY_SET,-1))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@fdbde),sn.getServersForQueue(null,Collections.EMPTY_SET,-1))@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@fdd28),sn.getServersForQueue(\"a\",Collections.EMPTY_SET,-1))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(null,Collections.EMPTY_SET))@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@fdd50),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,-1))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "sn.removeServer(l1)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final String uniqueId2 = new InternalDistributedMember(\"localhost\",2).getUniqueId()@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "sn.addServer(l2,uniqueId2,new String((((,new ServerLoad(100,.2f,10,.2f),LOAD_POLL_INTERVAL)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "testGroups['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "sn.updateLoad(l2,new ServerLoad(100,1,1,1))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testRemoveServer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(Collections.singletonList(l2),sn.getServersForQueue(null,Collections.EMPTY_SET,-1))@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "assertEquals(l1,sn.getServerForConnection(\"a\",Collections.EMPTY_SET))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "assertEquals(Arrays.asList(new ServerLocation((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@fdd7a),sn.getServersForQueue(\"b\",Collections.EMPTY_SET,5))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(l2,sn.getServerForConnection(\"b\",Collections.EMPTY_SET))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15->21 [style = bold, label=""];
1->19 [style = dashed, label="0"];
1->27 [style = bold, label=""];
1->36 [style = solid, label="l2"];
19->18 [style = solid, label="l2"];
25->31 [style = bold, label=""];
1->40 [style = solid, label="l2"];
19->16 [style = solid, label="l2"];
1->41 [style = solid, label="l2"];
1->42 [style = solid, label="l2"];
27->33 [style = bold, label=""];
20->15 [style = bold, label=""];
45->35 [style = bold, label=""];
13->14 [style = bold, label=""];
17->20 [style = solid, label="uniqueId1"];
1->3 [style = solid, label="l2"];
6->40 [style = solid, label="l1"];
4->3 [style = bold, label=""];
1->4 [style = bold, label=""];
6->25 [style = solid, label="l1"];
38->28 [style = bold, label=""];
29->39 [style = bold, label=""];
24->0 [style = bold, label=""];
6->4 [style = solid, label="l1"];
1->44 [style = solid, label="l2"];
1->28 [style = solid, label="l2"];
12->23 [style = solid, label="l1"];
5->39 [style = dashed, label="0"];
40->34 [style = bold, label=""];
1->10 [style = solid, label="l2"];
12->18 [style = solid, label="l1"];
22->23 [style = bold, label=""];
32->26 [style = bold, label=""];
11->18 [style = bold, label=""];
6->27 [style = solid, label="l1"];
18->20 [style = bold, label=""];
3->7 [style = bold, label=""];
1->33 [style = solid, label="l2"];
31->41 [style = bold, label=""];
33->30 [style = bold, label=""];
6->10 [style = solid, label="l1"];
10->2 [style = bold, label=""];
41->43 [style = bold, label=""];
1->34 [style = solid, label="l2"];
1->39 [style = solid, label="l2"];
1->8 [style = solid, label="l2"];
42->25 [style = bold, label=""];
44->29 [style = bold, label=""];
22->16 [style = solid, label="uniqueId2"];
6->37 [style = solid, label="l1"];
4->27 [style = dashed, label="0"];
19->17 [style = bold, label=""];
1->35 [style = solid, label="l2"];
8->36 [style = dashed, label="0"];
6->1 [style = bold, label=""];
6->34 [style = solid, label="l1"];
43->38 [style = bold, label=""];
1->26 [style = solid, label="l2"];
12->20 [style = solid, label="l1"];
34->44 [style = bold, label=""];
19->21 [style = solid, label="l2"];
12->11 [style = solid, label="l1"];
37->42 [style = bold, label=""];
6->43 [style = solid, label="l1"];
2->5 [style = bold, label=""];
6->38 [style = solid, label="l1"];
17->23 [style = solid, label="uniqueId1"];
5->8 [style = bold, label=""];
23->16 [style = bold, label=""];
16->11 [style = bold, label=""];
28->40 [style = bold, label=""];
9->0 [style = bold, label=""];
2->20 [style = dashed, label="0"];
0->6 [style = bold, label=""];
7->10 [style = bold, label=""];
36->32 [style = bold, label=""];
1->5 [style = solid, label="l2"];
30->37 [style = bold, label=""];
17->22 [style = bold, label=""];
6->2 [style = solid, label="l1"];
6->12 [style = dashed, label="0"];
0->14 [style = dashed, label="0"];
6->29 [style = solid, label="l1"];
14->12 [style = bold, label=""];
19->15 [style = solid, label="l2"];
26->45 [style = bold, label=""];
12->19 [style = bold, label=""];
6->7 [style = solid, label="l1"];
39->36 [style = bold, label=""];
6->44 [style = solid, label="l1"];
1->31 [style = solid, label="l2"];
}
