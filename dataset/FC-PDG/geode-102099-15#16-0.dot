digraph {
16 [style = filled, label = "setEntryMap(map)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "createOwner['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "initialize(owner,new Attributes(),null,false)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "doThrow().when(owner).checkEntryNotFound(any())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "when(owner.getCachePerfStats()).thenReturn(cachePerfStats)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "boolean withConcurrencyChecks@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "ConcurrentMapWithReusableEntries map@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "boolean withConcurrencyChecks@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "when(owner.isInitialized()).thenReturn(true)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "return owner@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "setEntryFactory(factory)@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "TestableAbstractRegionMap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "factory != null@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ConcurrentMapWithReusableEntries map@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "RegionEntry regionEntryForGetEntry@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "CachePerfStats cachePerfStats = mock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "RegionEntryFactory factory@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "TestableAbstractRegionMap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "when(owner.getEvictionAttributes()).thenReturn(evictionAttributes)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "map != null@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "RegionEntryFactory factory@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "when(owner.getScope()).thenReturn(Scope.LOCAL)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "boolean withConcurrencyChecks@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "super(null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "this.regionEntryForGetEntry = regionEntryForGetEntry@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "LocalRegion owner = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11->7 [style = dotted, label="true"];
3->0 [style = solid, label="cachePerfStats"];
2->20 [style = bold, label=""];
19->8 [style = solid, label="withConcurrencyChecks"];
12->5 [style = bold, label=""];
5->9 [style = bold, label=""];
23->22 [style = dotted, label="true"];
11->10 [style = dotted, label="true"];
26->3 [style = bold, label=""];
22->16 [style = solid, label="map"];
2->3 [style = bold, label=""];
9->17 [style = dotted, label="true"];
23->21 [style = dotted, label="true"];
9->17 [style = bold, label=""];
26->14 [style = solid, label="owner"];
0->15 [style = solid, label="cachePerfStats"];
18->20 [style = solid, label="regionEntryForGetEntry"];
20->3 [style = bold, label=""];
11->4 [style = dotted, label="true"];
23->19 [style = dotted, label="true"];
10->22 [style = dashed, label="0"];
10->27 [style = dashed, label="0"];
7->5 [style = solid, label="map"];
1->13 [style = bold, label=""];
7->16 [style = solid, label="map"];
0->15 [style = bold, label=""];
11->2 [style = bold, label=""];
3->0 [style = bold, label=""];
6->14 [style = bold, label=""];
5->16 [style = bold, label=""];
8->1 [style = bold, label=""];
21->17 [style = solid, label="factory"];
23->18 [style = dotted, label="true"];
10->9 [style = solid, label="factory"];
21->9 [style = solid, label="factory"];
14->12 [style = bold, label=""];
15->24 [style = bold, label=""];
25->26 [style = bold, label=""];
5->16 [style = dotted, label="true"];
1->14 [style = bold, label=""];
10->17 [style = solid, label="factory"];
3->12 [style = solid, label="owner"];
22->5 [style = solid, label="map"];
27->24 [style = solid, label="withConcurrencyChecks"];
13->6 [style = bold, label=""];
23->2 [style = bold, label=""];
24->8 [style = bold, label=""];
25->27 [style = dotted, label="true"];
15->8 [style = bold, label=""];
16->9 [style = bold, label=""];
4->8 [style = solid, label="withConcurrencyChecks"];
}
