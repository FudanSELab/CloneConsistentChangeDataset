digraph {
19 [style = filled, label = "_participants(0( = new MockParticipantManager(ZK_ADDR,_clusterName,id)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "_participants(0(.syncStop()@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(10000))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertFalse(strictMatchVerifier.verify(3000))@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "Thread.sleep(1000)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(10000))@@@26@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "_admin.enablePartition(true,_clusterName,_participants(0(.getInstanceName(),FULL_AUTO_RESOURCES(0(,Lists.newArrayList(FULL_AUTO_RESOURCES(0( + \"_0\"))@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "Thread.sleep(1000)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(10000))@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Thread.sleep(1000)@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(3000))@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "HelixClusterVerifier strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setResources(Sets.newHashSet(RESOURCES)).setZkClient(_gZkClient).setDeactivatedNodeAwareness(true).build()@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).setResources(Sets.newHashSet(FULL_AUTO_RESOURCES)).build()@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "System.out.println(\"Un-verify resource: \" + resource)@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "Assert.assertTrue(bestPossibleVerifier.verify(10000))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).setResources(Sets.newHashSet(FULL_AUTO_RESOURCES)).setDeactivatedNodeAwareness(true).build()@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "Assert.assertTrue(bestPossibleVerifier.verify(10000))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "testSleepTransition['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Thread.sleep(1000)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).setResources(Sets.newHashSet(resource)).setDeactivatedNodeAwareness(true).build()@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "Thread.sleep(1000)@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
45 [style = filled, label = "_participants(0(.syncStart()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Thread.sleep(1000)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
48 [style = filled, label = "Assert.assertFalse(strictMatchVerifier.verify(3000))@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "_participants(0(.syncStop()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "_participants(0(.setTransition(new SleepTransition(99999999))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Assert.assertTrue(bestPossibleVerifier.verify(3000))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
46 [style = filled, label = "_participants(0( = new MockParticipantManager(ZK_ADDR,_clusterName,_participants(0(.getInstanceName())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "_admin.enablePartition(true,_clusterName,_participants(0(.getInstanceName(),FULL_AUTO_RESOURCES(0(,Lists.newArrayList(FULL_AUTO_RESOURCES(0( + \"_0\"))@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "_admin.enablePartition(false,_clusterName,_participants(0(.getInstanceName(),FULL_AUTO_RESOURCES(0(,Lists.newArrayList(FULL_AUTO_RESOURCES(0( + \"_0\"))@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).setResources(Sets.newHashSet(resource)).build()@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "_participants(0(.syncStart()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "Thread.sleep(1000)@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "HelixClusterVerifier bestPossibleVerifier = new BestPossibleExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(10000))@@@33@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
40 [style = filled, label = "testDisablePartitionAndStopInstance['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
47 [style = filled, label = "Thread.sleep(1000)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "String id = _participants(0(.getInstanceName()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Thread.sleep(1000)@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertTrue(bestPossibleVerifier.verify(10000))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "_participants(0(.syncStop()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(3000))@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "HelixClusterVerifier strictMatchVerifier = new StrictMatchExternalViewVerifier.Builder(_clusterName).setZkClient(_gZkClient).build()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "_admin.enablePartition(false,_clusterName,_participants(0(.getInstanceName(),FULL_AUTO_RESOURCES(0(,Lists.newArrayList(FULL_AUTO_RESOURCES(0( + \"_0\"))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "boolean isVerifiedFalse = TestHelper.verify(null,TestHelper.WAIT_DURATION)@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testDisablePartitionAndStopInstance['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "System.out.println(\"Verify resource: \" + resource)@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Assert.assertTrue(isVerifiedFalse)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "_admin.enablePartition(true,_clusterName,_participants(0(.getInstanceName(),FULL_AUTO_RESOURCES(0(,Lists.newArrayList(FULL_AUTO_RESOURCES(0( + \"_0\"))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assert.assertTrue(strictMatchVerifier.verify(10000))@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
46->44 [style = bold, label=""];
14->16 [style = bold, label=""];
40->2 [style = bold, label=""];
13->10 [style = bold, label=""];
3->46 [style = bold, label=""];
42->18 [style = bold, label=""];
16->13 [style = bold, label=""];
15->10 [style = bold, label=""];
19->34 [style = bold, label=""];
31->25 [style = bold, label=""];
28->37 [style = bold, label=""];
35->29 [style = bold, label=""];
14->35 [style = bold, label=""];
47->48 [style = bold, label=""];
7->12 [style = bold, label=""];
12->17 [style = solid, label="isVerifiedFalse"];
12->17 [style = bold, label=""];
36->28 [style = bold, label=""];
18->30 [style = bold, label=""];
5->15 [style = bold, label=""];
10->3 [style = bold, label=""];
3->6 [style = bold, label=""];
38->36 [style = bold, label=""];
8->6 [style = bold, label=""];
22->28 [style = bold, label=""];
4->39 [style = dashed, label="0"];
9->8 [style = bold, label=""];
11->2 [style = bold, label=""];
9->37 [style = dashed, label="0"];
21->38 [style = bold, label=""];
20->21 [style = bold, label=""];
25->27 [style = bold, label=""];
8->22 [style = dashed, label="0"];
24->26 [style = bold, label=""];
37->22 [style = bold, label=""];
3->23 [style = bold, label=""];
23->24 [style = bold, label=""];
6->28 [style = dashed, label="0"];
17->0 [style = bold, label=""];
33->19 [style = solid, label="id"];
30->31 [style = bold, label=""];
13->7 [style = bold, label=""];
29->42 [style = bold, label=""];
39->32 [style = bold, label=""];
2->14 [style = bold, label=""];
27->41 [style = bold, label=""];
45->47 [style = bold, label=""];
22->39 [style = bold, label=""];
49->2 [style = bold, label=""];
43->10 [style = bold, label=""];
4->1 [style = bold, label=""];
41->33 [style = bold, label=""];
8->4 [style = bold, label=""];
33->19 [style = bold, label=""];
6->9 [style = bold, label=""];
34->43 [style = bold, label=""];
44->45 [style = bold, label=""];
26->20 [style = bold, label=""];
0->5 [style = bold, label=""];
}
