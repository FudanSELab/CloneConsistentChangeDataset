digraph {
22 [style = filled, label = "setUp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "walker = CalciteTests.createMockWalker(conglomerate,temporaryFolder.newFolder())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "caffeineCacheConfigJsonConfigProvider.inject(properties,configurator)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(100,config.getSizeInBytes())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "setUp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "properties.put(keyPrefix + \".cacheExecutorFactory\",\"CoMmON_FjP\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "propertiesLosAngeles.setProperty(\"user\",\"regularUserLA\")@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final Injector injector = Initialization.makeInjectorWithModules(GuiceInjectors.makeStartupInjector(),ImmutableList.of(null))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "client = DriverManager.getConnection(url,\"regularUser\",\"druid\")@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "server.start()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "properties.put(keyPrefix + \".expireAfter\",\"10\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "druidMeta = new DruidMeta(new PlannerFactory(druidSchema,systemSchema,CalciteTests.createMockQueryLifecycleFactory(walker,conglomerate),operatorTable,macroTable,plannerConfig,CalciteTests.TEST_AUTHORIZER_MAPPER,CalciteTests.getJsonMapper()),AVATICA_CONFIG,injector)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "final PlannerConfig plannerConfig = new PlannerConfig()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "injector = Initialization.makeInjectorWithModules(GuiceInjectors.makeStartupInjector(),ImmutableList.of(new Module(){@Override public void configure(Binder binder){binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"test\")binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0)binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1)binder.bind().toInstance(CalciteTests.TEST_AUTHENTICATOR_MAPPER)binder.bind().toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER)binder.bind().toInstance(CalciteTests.TEST_AUTHENTICATOR_ESCALATOR)}}))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "superuserClient = DriverManager.getConnection(url,CalciteTests.TEST_SUPERUSER_NAME,\"druid\")@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "druidMeta = new DruidMeta(new PlannerFactory(druidSchema,CalciteTests.createMockQueryLifecycleFactory(walker,conglomerate),operatorTable,macroTable,plannerConfig,CalciteTests.TEST_AUTHORIZER_MAPPER,CalciteTests.getJsonMapper()),AVATICA_CONFIG,injector)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "url = StringUtils.format(\"jdbc:avatica:remote:url=http://127.0.0.1:%d%s\",port,DruidAvaticaHandler.AVATICA_PATH)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final ExprMacroTable macroTable = CalciteTests.createExprMacroTable()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final int port = ThreadLocalRandom.current().nextInt(9999) + 10000@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(10,config.getExpireAfter())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "clientLosAngeles = DriverManager.getConnection(url,propertiesLosAngeles)@@@32@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema,walker)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "final Properties properties = new Properties()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "testMixedCaseFromProperties['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final String keyPrefix = \"cache.config.prefix\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "properties.put(keyPrefix + \".sizeInBytes\",\"100\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertEquals(ForkJoinPool.commonPool(),config.createExecutor())@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final DruidAvaticaHandler handler = new DruidAvaticaHandler(druidMeta,new DruidNode(\"dummy\",\"dummy\",1,null,true,false),new AvaticaMonitor())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "server.setHandler(handler)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "propertiesLosAngeles.setProperty(\"sqlTimeZone\",\"America/Los_Angeles\")@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final Properties propertiesLosAngeles = new Properties()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "server = new Server(new InetSocketAddress(\"127.0.0.1\",port))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate,walker,plannerConfig)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final JsonConfigurator configurator = injector.getInstance()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(keyPrefix,)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->15 [style = solid, label="url"];
6->13 [style = solid, label="druidSchema"];
24->36 [style = solid, label="properties"];
27->32 [style = solid, label="keyPrefix"];
3->20 [style = solid, label="injector"];
18->6 [style = solid, label="plannerConfig"];
8->20 [style = solid, label="walker"];
29->30 [style = bold, label=""];
3->31 [style = dashed, label="0"];
8->18 [style = bold, label=""];
6->21 [style = bold, label=""];
25->36 [style = bold, label=""];
1->15 [style = bold, label=""];
17->13 [style = solid, label="macroTable"];
13->20 [style = dashed, label="0"];
3->13 [style = solid, label="injector"];
8->13 [style = solid, label="walker"];
20->7 [style = solid, label="druidMeta"];
23->32 [style = bold, label=""];
14->16 [style = solid, label="propertiesLosAngeles"];
24->34 [style = bold, label=""];
8->6 [style = solid, label="walker"];
9->17 [style = bold, label=""];
19->11 [style = bold, label=""];
11->12 [style = bold, label=""];
5->14 [style = bold, label=""];
6->21 [style = solid, label="druidSchema"];
8->21 [style = solid, label="walker"];
36->33 [style = bold, label=""];
12->0 [style = bold, label=""];
2->4 [style = bold, label=""];
6->20 [style = solid, label="druidSchema"];
21->20 [style = solid, label="systemSchema"];
15->5 [style = bold, label=""];
35->25 [style = bold, label=""];
33->29 [style = bold, label=""];
22->8 [style = bold, label=""];
1->5 [style = solid, label="url"];
26->27 [style = bold, label=""];
18->13 [style = solid, label="plannerConfig"];
19->1 [style = solid, label="port"];
21->9 [style = bold, label=""];
3->20 [style = bold, label=""];
30->28 [style = bold, label=""];
31->35 [style = bold, label=""];
10->8 [style = bold, label=""];
35->36 [style = solid, label="configurator"];
18->6 [style = bold, label=""];
27->34 [style = solid, label="keyPrefix"];
13->7 [style = bold, label=""];
0->1 [style = bold, label=""];
7->12 [style = solid, label="handler"];
27->25 [style = solid, label="keyPrefix"];
27->23 [style = solid, label="keyPrefix"];
17->3 [style = bold, label=""];
3->13 [style = bold, label=""];
13->7 [style = solid, label="druidMeta"];
27->24 [style = bold, label=""];
14->2 [style = bold, label=""];
34->23 [style = bold, label=""];
18->20 [style = solid, label="plannerConfig"];
6->9 [style = bold, label=""];
20->7 [style = bold, label=""];
9->13 [style = solid, label="operatorTable"];
19->11 [style = solid, label="port"];
1->16 [style = solid, label="url"];
7->19 [style = bold, label=""];
17->20 [style = solid, label="macroTable"];
32->31 [style = bold, label=""];
4->16 [style = bold, label=""];
9->20 [style = solid, label="operatorTable"];
}
