digraph {
10 [style = filled, label = "dataStore.setScenarios(scenarios)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(results).isNotNull()@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "List resultsForMember1 = createResultObjects(\"1\",\"2\",\"3\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "PartitionedQueryScenario scenario = new PartitionedQueryScenario(localNode,allNodes,noFailingMembers,createFakeBucketMap(),new ProcessDataFaker(){@Override public void processData(PartitionedRegionQueryEvaluator prqe){prqe.processData(resultsForMember2,remoteNodeA,0,true)}@Override public void executeQueryLocally(Collection resultsCollector){resultsCollector.add(resultsForMember1)}})@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "PartitionedRegionQueryEvaluator prqe = new ExtendedPartitionedRegionQueryEvaluator(system,pr,query,mock(),null,new LinkedResultSet(),allBucketsToQuery,scenarios)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "results.removeAll(expectedResults)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Set<Integer> allBucketsToQuery = scenario.getAllBucketsToQuery()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "List resultsForMember2 = createResultObjects(\"4\",\"5\",\"6\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testLocalQueryReturnsResultsToPartitionedQueryEvaluator['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Queue<PartitionedQueryScenario> scenarios = createScenariosQueue(scenario)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Set allBucketsToQuery = scenario.getAllBucketsToQuery()@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(results.isEmpty()).isTrue()@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "expectedResults.addAll(resultsForMember1)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testLocalQueryReturnsResultsToPartitionedQueryEvaluator['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(results.isEmpty())@@@25@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertNotNull(results)@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testRemoteAndLocalQueryReturnsResultsToPartitionedQueryEvaluator['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "expectedResults.addAll(resultsForMember2)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Collection results = prqe.queryBuckets(null).asList()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(expectedResults.size(),results.size())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "List expectedResults = new LinkedList()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(resultsForMember1.size(),results.size())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertThat(results.size()).isEqualTo(resultsForMember1.size())@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "results.removeAll(resultsForMember1)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->10 [style = bold, label=""];
23->20 [style = bold, label=""];
8->15 [style = bold, label=""];
22->2 [style = bold, label=""];
0->13 [style = bold, label=""];
16->8 [style = bold, label=""];
3->21 [style = dashed, label="0"];
23->17 [style = solid, label="expectedResults"];
9->1 [style = solid, label="allBucketsToQuery"];
11->21 [style = bold, label=""];
3->16 [style = dashed, label="0"];
0->11 [style = bold, label=""];
2->18 [style = bold, label=""];
19->11 [style = bold, label=""];
1->0 [style = bold, label=""];
7->5 [style = solid, label="scenario"];
2->8 [style = solid, label="resultsForMember1"];
13->16 [style = bold, label=""];
5->10 [style = solid, label="scenarios"];
6->2 [style = bold, label=""];
7->14 [style = bold, label=""];
7->9 [style = bold, label=""];
12->2 [style = bold, label=""];
11->13 [style = dashed, label="0"];
14->1 [style = solid, label="allBucketsToQuery"];
18->7 [style = solid, label="resultsForMember2"];
9->14 [style = dashed, label="0"];
0->23 [style = bold, label=""];
11->3 [style = bold, label=""];
4->15 [style = dashed, label="0"];
3->8 [style = bold, label=""];
18->19 [style = solid, label="resultsForMember2"];
0->11 [style = solid, label="results"];
2->7 [style = solid, label="resultsForMember1"];
9->5 [style = bold, label=""];
8->17 [style = dashed, label="0"];
2->7 [style = bold, label=""];
8->4 [style = bold, label=""];
18->7 [style = bold, label=""];
20->19 [style = bold, label=""];
10->1 [style = bold, label=""];
21->17 [style = bold, label=""];
17->4 [style = bold, label=""];
2->20 [style = solid, label="resultsForMember1"];
5->1 [style = solid, label="scenarios"];
14->5 [style = bold, label=""];
}
