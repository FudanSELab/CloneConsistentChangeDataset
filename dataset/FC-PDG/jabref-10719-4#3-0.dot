digraph {
15 [style = filled, label = "Path tempFilename = tempFile.toAbsolutePath()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testPerformExport['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "BibEntryAssert.assertEquals(entries,tempFile,modsImporter)@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testExportAsModsAndThenImportAsMods['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Builder control = Input.from(Files.newInputStream(xmlFile))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "String filename@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(test,CompareMatcher.isSimilarTo(control).withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)).throwComparisonFailure())@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "String xmlFileName = filename.replace(\".bib\",\".xml\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Builder test = Input.from(Files.newInputStream(tempFilename))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "importFile = Paths.get(.getResource(filename).toURI())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Path xmlFile = Paths.get(.getResource(xmlFileName).toURI())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "String filename@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "modsExportFormat.export(databaseContext,tempFile,charset,entries)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "exporter.export(databaseContext,tempFile,charset,entries)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "List<BibEntry> entries = bibtexImporter.importDatabase(importFile,charset).getDatabase().getEntries()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testExportAsModsAndThenImportAsMods['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14->5 [style = bold, label=""];
5->7 [style = dashed, label="0"];
4->7 [style = bold, label=""];
12->15 [style = bold, label=""];
5->1 [style = bold, label=""];
4->5 [style = bold, label=""];
15->4 [style = bold, label=""];
10->11 [style = bold, label=""];
5->10 [style = bold, label=""];
8->3 [style = bold, label=""];
4->5 [style = solid, label="entries"];
2->3 [style = bold, label=""];
6->0 [style = dotted, label="true"];
4->7 [style = solid, label="entries"];
3->12 [style = bold, label=""];
6->3 [style = bold, label=""];
11->13 [style = solid, label="test"];
0->9 [style = dashed, label="0"];
11->13 [style = bold, label=""];
4->14 [style = bold, label=""];
14->10 [style = solid, label="xmlFile"];
15->11 [style = solid, label="tempFilename"];
7->1 [style = bold, label=""];
2->0 [style = dotted, label="true"];
4->1 [style = solid, label="entries"];
3->4 [style = bold, label=""];
8->9 [style = dotted, label="true"];
}
