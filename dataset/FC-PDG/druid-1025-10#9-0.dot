digraph {
0 [style = filled, label = "druidLeaderClient.start()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "EasyMock.replay(druidNodeDiscovery,druidNodeDiscoveryProvider)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Request request = druidLeaderClient.makeRequest(HttpMethod.POST,\"/simple/redirect\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(\"hello\",druidLeaderClient.go(request).getContent())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "request.setContent(\"hello\".getBytes(StandardCharsets.UTF_8))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "EasyMock.expect(druidNodeDiscoveryProvider.getForNodeRole(NodeRole.PEON)).andReturn(druidNodeDiscovery).anyTimes()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Request request = druidLeaderClient.makeRequest(HttpMethod.POST,\"/simple/direct\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "EasyMock.replay(serverDiscoverySelector,druidNodeDiscovery,druidNodeDiscoveryProvider)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "DruidLeaderClient druidLeaderClient = new DruidLeaderClient(httpClient,druidNodeDiscoveryProvider,NodeRole.PEON,\"/simple/leader\",serverDiscoverySelector)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "EasyMock.replay(druidNodeDiscovery,druidNodeDiscoveryProvider)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "request.setContent(\"hello\".getBytes(StandardCharsets.UTF_8))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "DruidLeaderClient druidLeaderClient = new DruidLeaderClient(httpClient,druidNodeDiscoveryProvider,NodeRole.PEON,\"/simple/leader\",EasyMock.createNiceMock())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "ServerDiscoverySelector serverDiscoverySelector = EasyMock.createMock()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(dummyNode))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "DiscoveryDruidNode dummyNode = new DiscoveryDruidNode(new DruidNode(\"test\",\"dummyhost\",false,64231,null,true,false),NodeRole.PEON,ImmutableMap.of())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testSimple['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "druidLeaderClient.start()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EasyMock.expect(serverDiscoverySelector.pick()).andReturn(null).anyTimes()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(\"hello\",druidLeaderClient.go(request).getContent())@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testServerFailureAndRedirect['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "EasyMock.expect(druidNodeDiscoveryProvider.getForNodeRole(NodeRole.PEON)).andReturn(druidNodeDiscovery)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "DruidLeaderClient druidLeaderClient = new DruidLeaderClient(httpClient,druidNodeDiscoveryProvider,NodeRole.PEON,\"/simple/leader\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "testServerFailureAndRedirect['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10->15 [style = dashed, label="0"];
5->10 [style = bold, label=""];
22->18 [style = solid, label="druidNodeDiscovery"];
0->5 [style = solid, label="druidNodeDiscoveryProvider"];
15->2 [style = bold, label=""];
0->13 [style = bold, label=""];
16->8 [style = bold, label=""];
22->19 [style = bold, label=""];
5->26 [style = dashed, label="0"];
14->25 [style = dashed, label="0"];
25->23 [style = bold, label=""];
8->18 [style = bold, label=""];
12->5 [style = solid, label="serverDiscoverySelector"];
22->26 [style = solid, label="druidNodeDiscovery"];
9->4 [style = bold, label=""];
20->0 [style = bold, label=""];
18->26 [style = bold, label=""];
12->11 [style = bold, label=""];
8->17 [style = solid, label="druidNodeDiscovery"];
12->10 [style = solid, label="serverDiscoverySelector"];
3->12 [style = bold, label=""];
19->8 [style = bold, label=""];
1->9 [style = bold, label=""];
4->0 [style = bold, label=""];
1->9 [style = solid, label="dummyNode"];
8->1 [style = bold, label=""];
13->17 [style = bold, label=""];
23->24 [style = bold, label=""];
5->17 [style = dashed, label="0"];
8->5 [style = solid, label="druidNodeDiscovery"];
0->25 [style = bold, label=""];
21->22 [style = bold, label=""];
8->20 [style = solid, label="druidNodeDiscoveryProvider"];
2->14 [style = bold, label=""];
17->15 [style = bold, label=""];
13->5 [style = bold, label=""];
8->26 [style = solid, label="druidNodeDiscoveryProvider"];
11->8 [style = bold, label=""];
10->20 [style = dashed, label="0"];
10->2 [style = bold, label=""];
13->18 [style = dashed, label="0"];
6->7 [style = bold, label=""];
0->10 [style = solid, label="druidNodeDiscoveryProvider"];
0->17 [style = solid, label="druidNodeDiscoveryProvider"];
0->15 [style = solid, label="druidNodeDiscoveryProvider"];
14->6 [style = bold, label=""];
26->20 [style = bold, label=""];
}
