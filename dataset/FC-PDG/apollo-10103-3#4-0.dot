digraph {
28 [style = filled, label = "verify(restTemplate).postForEntity(serviceOne + \"/\" + path,request,)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "when(someEntity.getBody()).thenReturn(result)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "when(serviceAddressLocator.getServiceList(any())).thenReturn(Arrays.asList(mockService(serviceOne),mockService(serviceTwo),mockService(serviceThree)))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "when(restTemplate.getForObject(serviceTwo + \"/\" + path,)).thenReturn(result)@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "retryableRestTemplate.post(Env.DEV,path,request,)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "when(restTemplate.getForObject(serviceThree + \"/\" + path,)).thenThrow(connectTimeoutException)@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testPostSocketTimeoutNotRetry['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(result,o)@@@12@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "verify(restTemplate,times(0)).getForObject(serviceThree + \"/\" + path,)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "when(restTemplate.exchange(eq(serviceThree + \"/\" + path),eq(HttpMethod.GET),any(),eq())).thenThrow(connectTimeoutException)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "when(restTemplate.exchange(eq(serviceTwo + \"/\" + path),eq(HttpMethod.GET),any(),eq())).thenReturn(someEntity)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "verify(restTemplate,never()).exchange(eq(serviceThree + \"/\" + path),eq(HttpMethod.GET),any(),eq())@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "when(restTemplate.getForObject(serviceOne + \"/\" + path,)).thenThrow(socketTimeoutException)@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "when(restTemplate.postForEntity(serviceTwo + \"/\" + path,request,)).thenReturn(entity)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testOneServerDown['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "verify(restTemplate,times(1)).exchange(eq(serviceOne + \"/\" + path),eq(HttpMethod.GET),any(),eq())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertEquals(result,actualResult)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "verify(restTemplate).getForObject(serviceTwo + \"/\" + path,)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "ResponseEntity someEntity = mock()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "when(restTemplate.postForEntity(serviceOne + \"/\" + path,request,)).thenThrow(socketTimeoutException)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "when(restTemplate.exchange(eq(serviceOne + \"/\" + path),eq(HttpMethod.GET),any(),eq())).thenThrow(socketTimeoutException)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Object o = retryableRestTemplate.get(Env.DEV,path,)@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "verify(restTemplate,times(0)).postForEntity(serviceTwo + \"/\" + path,request,)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Object actualResult = retryableRestTemplate.get(Env.DEV,path,)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "verify(restTemplate,times(1)).exchange(eq(serviceTwo + \"/\" + path),eq(HttpMethod.GET),any(),eq())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Object result = new Object()@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "verify(restTemplate).getForObject(serviceOne + \"/\" + path,)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "testOneServerDown['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "when(serviceAddressLocator.getServiceList(any())).thenReturn(Arrays.asList(mockService(serviceOne),mockService(serviceTwo),mockService(serviceThree)))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
1->4 [style = bold, label=""];
3->1 [style = bold, label=""];
5->23 [style = bold, label=""];
22->16 [style = bold, label=""];
23->26 [style = bold, label=""];
7->0 [style = bold, label=""];
11->12 [style = bold, label=""];
2->9 [style = bold, label=""];
11->21 [style = solid, label="someEntity"];
16->19 [style = bold, label=""];
9->8 [style = bold, label=""];
10->6 [style = bold, label=""];
9->23 [style = dashed, label="0"];
21->18 [style = bold, label=""];
8->7 [style = bold, label=""];
15->22 [style = bold, label=""];
1->22 [style = dashed, label="0"];
0->14 [style = dashed, label="0"];
12->13 [style = bold, label=""];
7->4 [style = solid, label="o"];
6->5 [style = bold, label=""];
5->2 [style = bold, label=""];
13->17 [style = bold, label=""];
6->9 [style = solid, label="result"];
2->5 [style = dashed, label="0"];
0->25 [style = dashed, label="0"];
7->28 [style = dashed, label="0"];
28->25 [style = bold, label=""];
6->4 [style = solid, label="result"];
3->15 [style = dashed, label="0"];
14->15 [style = bold, label=""];
26->28 [style = bold, label=""];
27->5 [style = bold, label=""];
14->19 [style = solid, label="actualResult"];
17->21 [style = bold, label=""];
18->14 [style = bold, label=""];
24->27 [style = bold, label=""];
20->11 [style = bold, label=""];
}
