digraph {
41 [style = filled, label = "assertEquals(0,stat.getNumChildren())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "assertEquals(stat.getCzxid(),stat.getMzxid())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "assertEquals(0,stat.getAversion())@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "zk.getData(name,false,stat)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testDataSizeChange['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(0,stat.getAversion())@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "assertEquals(name.length(),stat.getDataLength())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Assert.assertNotSame(stat.getCtime(),stat.getMtime())@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(0,stat.getCversion())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(name.length() * 2,stat.getDataLength())@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Stat stat@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(0,stat.getVersion())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assert.assertEquals(0,stat.getNumChildren())@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(0,stat.getNumChildren())@@@16@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(0,stat.getCversion())@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "assertEquals(0,stat.getEphemeralOwner())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "Assert.assertEquals(stat.getCzxid(),stat.getPzxid())@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "assertEquals(1,stat.getVersion())@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "stat = newStat()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertEquals(stat.getCzxid(),stat.getPzxid())@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "assertNotSame(stat.getCzxid(),stat.getMzxid())@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "testDataSizeChange['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(stat.getCtime(),stat.getMtime())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "testBasic['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(stat.getCzxid(),stat.getMzxid())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(0,stat.getCversion())@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "assertEquals(name.length() * 2,stat.getDataLength())@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "stat = newStat()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(0,stat.getAversion())@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "String name = \"/foo\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(stat.getCzxid(),stat.getPzxid())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(stat.getCtime(),stat.getMtime())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Assert.assertEquals(name.length(),stat.getDataLength())@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(0,stat.getEphemeralOwner())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(0,stat.getNumChildren())@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertEquals(1,stat.getVersion())@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "zk.getData(name,false,stat)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertNotSame(stat.getCtime(),stat.getMtime())@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "zk.setData(name,(name + name).getBytes(),-1)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(stat.getCzxid(),stat.getPzxid())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "zk.create(name,name.getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertNotSame(stat.getCzxid(),stat.getMzxid())@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "assertEquals(0,stat.getEphemeralOwner())@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(0,stat.getVersion())@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(0,stat.getEphemeralOwner())@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "assertEquals(0,stat.getCversion())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "assertEquals(0,stat.getAversion())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3->29 [style = dashed, label="0"];
17->10 [style = bold, label=""];
16->15 [style = bold, label=""];
27->32 [style = bold, label=""];
42->43 [style = bold, label=""];
26->7 [style = bold, label=""];
30->33 [style = bold, label=""];
5->9 [style = bold, label=""];
41->24 [style = bold, label=""];
17->10 [style = solid, label="stat"];
46->12 [style = bold, label=""];
11->40 [style = dashed, label="0"];
13->36 [style = dashed, label="0"];
0->17 [style = bold, label=""];
36->29 [style = bold, label=""];
12->20 [style = solid, label="name"];
22->45 [style = dashed, label="0"];
37->41 [style = bold, label=""];
12->24 [style = solid, label="name"];
12->2 [style = solid, label="name"];
26->28 [style = dashed, label="0"];
1->20 [style = bold, label=""];
6->24 [style = bold, label=""];
20->14 [style = bold, label=""];
21->38 [style = dashed, label="0"];
34->30 [style = bold, label=""];
31->12 [style = bold, label=""];
21->18 [style = bold, label=""];
9->32 [style = dashed, label="0"];
22->4 [style = bold, label=""];
23->43 [style = dashed, label="0"];
19->44 [style = dashed, label="0"];
7->22 [style = bold, label=""];
29->27 [style = bold, label=""];
12->2 [style = bold, label=""];
3->5 [style = bold, label=""];
2->0 [style = bold, label=""];
28->35 [style = bold, label=""];
5->27 [style = dashed, label="0"];
13->3 [style = bold, label=""];
14->23 [style = bold, label=""];
16->30 [style = dashed, label="0"];
12->10 [style = solid, label="name"];
18->6 [style = bold, label=""];
40->36 [style = bold, label=""];
38->37 [style = bold, label=""];
1->20 [style = solid, label="stat"];
19->26 [style = bold, label=""];
9->25 [style = bold, label=""];
23->19 [style = bold, label=""];
11->13 [style = bold, label=""];
44->28 [style = bold, label=""];
6->41 [style = dashed, label="0"];
14->42 [style = dashed, label="0"];
18->37 [style = dashed, label="0"];
7->35 [style = dashed, label="0"];
10->40 [style = bold, label=""];
39->38 [style = bold, label=""];
20->42 [style = bold, label=""];
35->45 [style = bold, label=""];
4->34 [style = dashed, label="0"];
15->33 [style = dashed, label="0"];
32->39 [style = bold, label=""];
24->1 [style = bold, label=""];
43->44 [style = bold, label=""];
45->34 [style = bold, label=""];
8->12 [style = bold, label=""];
25->39 [style = dashed, label="0"];
4->16 [style = bold, label=""];
25->21 [style = bold, label=""];
10->11 [style = bold, label=""];
}
