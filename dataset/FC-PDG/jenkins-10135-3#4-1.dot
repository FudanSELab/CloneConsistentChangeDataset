digraph {
2 [style = filled, label = "result = command.authorizedTo(Computer.EXTENDED_READ,Jenkins.READ).invokeWithArgs(\"(master)\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(result.stderr(),containsString(\"No such node '(built-in)'\"))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Computer.EXTENDED_READ,Jenkins.READ).invokeWithArgs(\"\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "updateNodeShouldFailForMaster['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertThat(result,failedWith(3))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(result,failedWith(3))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(result.stderr(),containsString(\"No such node '(master)'\"))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(result.stderr(),containsString(\"No such node ''\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(result,failedWith(3))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "result = command.authorizedTo(Computer.EXTENDED_READ,Jenkins.READ).withStdin(.getResourceAsStream(\"node.xml\")).invokeWithArgs(\"(master)\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Computer.CONFIGURE,Jenkins.READ).withStdin(.getResourceAsStream(\"node.xml\")).invokeWithArgs(\"\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "getNodeShouldFailForBuiltInNode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "result = command.authorizedTo(Computer.EXTENDED_READ,Jenkins.READ).invokeWithArgs(\"(built-in)\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "getNodeShouldFailForBuiltInNode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
13->10 [style = bold, label=""];
4->3 [style = bold, label=""];
2->5 [style = solid, label="result"];
15->14 [style = bold, label=""];
2->6 [style = bold, label=""];
3->8 [style = solid, label="result"];
12->9 [style = solid, label="result"];
16->6 [style = bold, label=""];
3->7 [style = solid, label="result"];
12->10 [style = solid, label="result"];
3->0 [style = bold, label=""];
8->7 [style = bold, label=""];
6->1 [style = bold, label=""];
12->13 [style = bold, label=""];
2->1 [style = solid, label="result"];
14->0 [style = bold, label=""];
5->12 [style = bold, label=""];
11->3 [style = bold, label=""];
14->8 [style = solid, label="result"];
14->7 [style = solid, label="result"];
7->2 [style = bold, label=""];
2->16 [style = dashed, label="0"];
7->16 [style = bold, label=""];
0->8 [style = bold, label=""];
16->1 [style = solid, label="result"];
16->5 [style = solid, label="result"];
10->9 [style = bold, label=""];
3->14 [style = dashed, label="0"];
}
