digraph {
9 [style = filled, label = "Flowable<String> source = Flowable.just(\"cc\",\"cc\",\"eee\",\"eee\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Map<Integer,Collection<String>> expected = new HashMap<>()@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "verify(singleObserver,never()).onSuccess(expected)@@@33@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Supplier<Map<Integer,Collection<String>>> mapSupplier = new Supplier<Map<Integer,Collection<String>>>(){@Override public Map<Integer,Collection<String>> get(){return new HashMap<Integer,Collection<String>>()}}@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Function<Integer,Collection<String>> collectionFactory = new Function<Integer,Collection<String>>(){@Override public Collection<String> apply(Integer t1){if (t1 == 2) {throw new RuntimeException(\"Forced failure\")}{return new HashSet<String>()}}}@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Single<Map<Integer,Collection<String>>> mapped = source.toMultimap(lengthFunc,identity,mapSupplier,collectionFactory)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "toMultimapWithThrowingCollectionFactory['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Map<Integer,Collection<String>> expected = new HashMap<Integer,Collection<String>>()@@@28@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "verify(singleObserver,times(1)).onError(any())@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "expected.put(2,Arrays.asList(\"cc\",\"dd\"))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "toMultimapWithThrowingCollectionFactory['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "toMultimapWithThrowingCollectionFactory['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "mapped.subscribe(singleObserver)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expected.put(3,Collections.singleton(\"eee\"))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Function<String,String> identity = new Function<String,String>(){@Override public String apply(String v){return v}}@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Observable<String> source = Observable.just(\"cc\",\"cc\",\"eee\",\"eee\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8->10 [style = bold, label=""];
2->6 [style = bold, label=""];
13->4 [style = solid, label="expected"];
11->4 [style = bold, label=""];
7->0 [style = bold, label=""];
10->13 [style = dashed, label="0"];
12->9 [style = bold, label=""];
2->8 [style = solid, label="identity"];
10->7 [style = bold, label=""];
15->5 [style = bold, label=""];
1->11 [style = bold, label=""];
3->9 [style = bold, label=""];
5->2 [style = bold, label=""];
6->8 [style = solid, label="mapSupplier"];
13->7 [style = bold, label=""];
0->1 [style = bold, label=""];
6->8 [style = bold, label=""];
10->4 [style = solid, label="expected"];
9->5 [style = bold, label=""];
14->15 [style = bold, label=""];
5->8 [style = solid, label="collectionFactory"];
8->13 [style = bold, label=""];
9->15 [style = dashed, label="0"];
}
