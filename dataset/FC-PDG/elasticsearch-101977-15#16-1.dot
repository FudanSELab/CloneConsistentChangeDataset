digraph {
7 [style = filled, label = "RoutingTable routingTable = service.reroute(clusterState,\"reroute\").routingTable()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(\"index source must be read-only to resize index. use \"index.blocks.write=true\"\",expectThrows(,null).getMessage())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "AllocationService service = new AllocationService(new AllocationDeciders(Collections.singleton(new MaxRetryAllocationDecider())),new TestGatewayAllocator(),new BalancedShardsAllocator(Settings.EMPTY),EmptyClusterInfoService.INSTANCE,EmptySnapshotsInfoService.INSTANCE)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "targetShards = randomIntBetween(numShards + 1,100)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(\"the number of source shards (3( must be a factor of (4(\",expectThrows(,null).getMessage())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(\"can't shrink an index with only one shard\",expectThrows(,null).getMessage())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testValidateSplitIndex['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "int numShards = randomIntBetween(1,42)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(\"no such index (no_such_index(\",expectThrows(,null).getMessage())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "isSplitable(numShards,targetShards) == false@@@15@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Settings targetSettings = Settings.builder().put(\"index.number_of_shards\",1).build()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(\"the number of source shards (10( must be less that the number of target shards (5(\",expectThrows(,null).getMessage())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ClusterState clusterState = ClusterState.builder(createClusterState(\"source\",numShards,0,Settings.builder().put(\"index.blocks.write\",true).build())).nodes(DiscoveryNodes.builder().add(newNode(\"node1\"))).build()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(\"index source must be read-only to resize index. use \"index.blocks.write=true\"\",expectThrows(,null).getMessage())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(\"index source must have all shards allocated on the same node to shrink index\",expectThrows(,null).getMessage())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"the number of target shards (10( must be less that the number of source shards (5(\",expectThrows(,null).getMessage())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ClusterState state = createClusterState(\"source\",numShards,randomIntBetween(0,10),Settings.builder().put(\"index.blocks.write\",true).build())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "isShrinkable(numShards,targetShards) == false@@@23@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "MetadataCreateIndexService.validateShrinkIndex(clusterState,\"source\",\"target\",Settings.builder().put(\"index.number_of_shards\",targetShards).build())@@@24@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"no such index (no_such_index(\",expectThrows(,null).getMessage())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "RoutingTable routingTable = service.reroute(clusterState,\"reroute\").routingTable()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "MetadataCreateIndexService.validateSplitIndex(clusterState,\"source\",\"target\",Settings.builder().put(\"index.number_of_shards\",targetShards).build())@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testValidateShrinkIndex['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "AllocationService service = new AllocationService(new AllocationDeciders(Collections.singleton(new MaxRetryAllocationDecider())),new TestGatewayAllocator(),new BalancedShardsAllocator(Settings.EMPTY),EmptyClusterInfoService.INSTANCE)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "routingTable = ESAllocationTestCase.startInitializingShardsAndReroute(service,clusterState,\"source\").routingTable()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "int targetShards@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testValidateShrinkIndex['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "AllocationService service = new AllocationService(new AllocationDeciders(Collections.singleton(new MaxRetryAllocationDecider())),new TestGatewayAllocator(),new BalancedShardsAllocator(Settings.EMPTY),EmptyClusterInfoService.INSTANCE)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "ClusterState clusterState = ClusterState.builder(createClusterState(\"source\",numShards,0,Settings.builder().put(\"index.blocks.write\",true).put(\"index.number_of_routing_shards\",targetShards).build())).nodes(DiscoveryNodes.builder().add(newNode(\"node1\"))).build()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(\"the number of source shards (8( must be a multiple of (3(\",expectThrows(,null).getMessage())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "int numShards = randomIntBetween(2,42)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ClusterState state = createClusterState(\"source\",numShards,randomIntBetween(0,10),Settings.builder().put(\"index.blocks.write\",true).build())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(\"index (source( already exists\",expectThrows(,null).getMessage())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Settings targetSettings = Settings.builder().put(\"index.number_of_shards\",numShards * 2).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->13 [style = bold, label=""];
24->10 [style = bold, label=""];
4->10 [style = bold, label=""];
6->21 [style = dashed, label="0"];
7->8 [style = solid, label="clusterState"];
20->17 [style = bold, label=""];
16->1 [style = solid, label="numShards"];
28->36 [style = bold, label=""];
17->34 [style = dashed, label="0"];
29->30 [style = bold, label=""];
11->25 [style = solid, label="clusterState"];
22->16 [style = bold, label=""];
36->31 [style = solid, label="targetShards"];
27->28 [style = bold, label=""];
31->24 [style = bold, label=""];
11->18 [style = solid, label="targetShards"];
18->11 [style = bold, label=""];
36->31 [style = bold, label=""];
1->20 [style = bold, label=""];
3->6 [style = bold, label=""];
30->32 [style = bold, label=""];
31->36 [style = bold, label=""];
0->26 [style = dashed, label="0"];
30->20 [style = solid, label="numShards"];
12->16 [style = bold, label=""];
2->9 [style = bold, label=""];
13->25 [style = dashed, label="0"];
15->3 [style = bold, label=""];
14->27 [style = dashed, label="0"];
10->7 [style = bold, label=""];
30->31 [style = solid, label="numShards"];
5->10 [style = solid, label="routingTable"];
30->36 [style = solid, label="numShards"];
17->19 [style = bold, label=""];
13->11 [style = bold, label=""];
19->0 [style = bold, label=""];
11->18 [style = bold, label=""];
20->33 [style = bold, label=""];
21->5 [style = bold, label=""];
16->11 [style = solid, label="numShards"];
6->5 [style = bold, label=""];
0->14 [style = bold, label=""];
26->27 [style = bold, label=""];
18->11 [style = dotted, label="true"];
16->30 [style = dashed, label="0"];
16->1 [style = bold, label=""];
9->15 [style = bold, label=""];
5->4 [style = bold, label=""];
13->23 [style = bold, label=""];
3->21 [style = bold, label=""];
7->23 [style = solid, label="routingTable"];
16->18 [style = solid, label="numShards"];
14->2 [style = bold, label=""];
18->8 [style = bold, label=""];
34->35 [style = bold, label=""];
20->33 [style = dashed, label="0"];
19->35 [style = dashed, label="0"];
23->11 [style = bold, label=""];
33->34 [style = bold, label=""];
32->20 [style = bold, label=""];
35->26 [style = bold, label=""];
31->36 [style = dotted, label="true"];
11->25 [style = bold, label=""];
}
