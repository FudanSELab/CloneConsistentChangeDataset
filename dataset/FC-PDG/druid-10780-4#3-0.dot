digraph {
8 [style = filled, label = "testNonExistingSegmentsInParallel['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "testLoadSegment['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "segmentManager.loadSegment(SEGMENTS.get(0))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertResult(segments)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testNonExistingSegmentsInParallel['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "segmentManager.loadSegment(segments.get(0))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertResult(ImmutableList.of(segments.get(0)))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertResult(ImmutableList.of(SEGMENTS.get(0)))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "final List<Future<Void>> futures = ImmutableList.of(segments.get(1),segments.get(2)).stream().map(null).collect(Collectors.toList())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Assert.assertTrue(eachFuture.get())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final List<Future<Boolean>> futures = segments.stream().map(null).collect(Collectors.toList())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "future.get()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final List<Future<Void>> futures = ImmutableList.of(SEGMENTS.get(1),SEGMENTS.get(2)).stream().map(null).collect(Collectors.toList())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8->7 [style = bold, label=""];
5->3 [style = bold, label=""];
3->6 [style = bold, label=""];
2->5 [style = dashed, label="0"];
7->5 [style = bold, label=""];
10->9 [style = bold, label=""];
9->12 [style = bold, label=""];
0->9 [style = dashed, label="0"];
3->1 [style = bold, label=""];
0->7 [style = dashed, label="0"];
1->6 [style = dashed, label="0"];
2->3 [style = bold, label=""];
4->0 [style = bold, label=""];
0->2 [style = bold, label=""];
12->11 [style = bold, label=""];
}
