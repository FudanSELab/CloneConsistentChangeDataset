digraph {
23 [style = filled, label = "timeAdaptor.shouldContinueOnTime(mockTrigger)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(0,testHarness.numKeyedStateEntries())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(1,testHarness.numKeyedStateEntries())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(1,timeAdaptor.numTimers(testHarness))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "timeAdaptor.advanceTime(testHarness,Long.MIN_VALUE)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(1,timeAdaptor.numTimers(testHarness))@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "verify(mockTrigger,times(1)).clear(anyTimeWindow(),anyTriggerContext())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testHarness.open()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testNoTimerFiringForPurgedMergingWindow['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "timeAdaptor.verifyTriggerCallback(mockTrigger,times(1),null,null)@@@32@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "timeAdaptor.advanceTime(testHarness,0L)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "timeAdaptor.setIsEventTime(mockAssigner)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Arrays.asList(new TimeWindow(2,4)))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(2,testHarness.numKeyedStateEntries())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "verify(mockWindowFunction,never()).apply(anyInt(),anyTimeWindow(),anyIntIterable(),WindowOperatorContractTest.anyCollector())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final TimeDomainAdaptor timeAdaptor@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Trigger<Integer,TimeWindow> mockTrigger = mockTrigger()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(2,timeAdaptor.numTimers(testHarness))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final TimeDomainAdaptor timeAdaptor@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "timeAdaptor.advanceTime(testHarness,10L)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(0,testHarness.extractOutputStreamRecords().size())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "@SuppressWarnings(\"unchecked\") InternalWindowFunction<Iterable<Integer>,List<Integer>,Integer,TimeWindow> mockWindowFunction = mock()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testHarness.processElement(new StreamRecord<>(0,0L))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "timeAdaptor.verifyTriggerCallback(mockTrigger,never(),null,null)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testNoTimerFiringForPurgedMergingWindow['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "timeAdaptor.advanceTime(testHarness,4L)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Integer,List<Integer>> testHarness = createWindowOperator(mockAssigner,mockTrigger,0L,mockWindowFunction)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final TimeDomainAdaptor timeAdaptor@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "doAnswer(new Answer<TriggerResult>(){@Override public TriggerResult answer(InvocationOnMock invocation){Trigger.TriggerContext context = (Trigger.TriggerContext)invocation.getArguments()(3(timeAdaptor.registerTimer(context,10L)return TriggerResult.CONTINUE}}).when(mockTrigger).onElement(Matchers.anyObject(),anyLong(),anyTimeWindow(),anyTriggerContext())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "timeAdaptor.verifyTriggerCallback(mockTrigger,times(1),null,null)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(0,testHarness.numKeyedStateEntries())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "MergingWindowAssigner<Integer,TimeWindow> mockAssigner = mockMergingAssigner()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "verify(mockWindowFunction,never()).apply(anyInt(),anyTimeWindow(),anyIntIterable(),WindowOperatorContractTest.anyCollector())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testNoTimerFiringForGarbageCollectedMergingWindow['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3->28 [style = dashed, label="0"];
21->20 [style = dotted, label="true"];
2->31 [style = solid, label="testHarness"];
12->28 [style = bold, label=""];
28->10 [style = bold, label=""];
7->2 [style = solid, label="mockAssigner"];
29->30 [style = bold, label=""];
0->17 [style = bold, label=""];
31->32 [style = bold, label=""];
11->4 [style = bold, label=""];
30->27 [style = bold, label=""];
22->25 [style = dotted, label="true"];
15->26 [style = solid, label="mockTrigger"];
15->13 [style = solid, label="mockTrigger"];
2->11 [style = solid, label="testHarness"];
2->24 [style = solid, label="testHarness"];
16->2 [style = bold, label=""];
16->2 [style = solid, label="mockWindowFunction"];
15->16 [style = bold, label=""];
1->13 [style = bold, label=""];
22->7 [style = bold, label=""];
15->32 [style = solid, label="mockTrigger"];
15->2 [style = solid, label="mockTrigger"];
15->23 [style = solid, label="mockTrigger"];
23->29 [style = bold, label=""];
2->1 [style = solid, label="testHarness"];
3->10 [style = bold, label=""];
24->26 [style = bold, label=""];
17->12 [style = bold, label=""];
6->18 [style = dotted, label="true"];
5->0 [style = bold, label=""];
10->23 [style = bold, label=""];
7->19 [style = solid, label="mockAssigner"];
18->20 [style = dashed, label="0"];
9->14 [style = bold, label=""];
33->31 [style = bold, label=""];
21->7 [style = bold, label=""];
27->24 [style = bold, label=""];
12->3 [style = bold, label=""];
13->9 [style = bold, label=""];
2->10 [style = solid, label="testHarness"];
19->15 [style = bold, label=""];
6->7 [style = bold, label=""];
10->1 [style = bold, label=""];
2->14 [style = solid, label="testHarness"];
8->11 [style = bold, label=""];
7->19 [style = bold, label=""];
2->29 [style = solid, label="testHarness"];
4->5 [style = bold, label=""];
26->33 [style = bold, label=""];
1->23 [style = dashed, label="0"];
18->25 [style = dashed, label="0"];
2->8 [style = bold, label=""];
}
