digraph {
6 [style = filled, label = "LoggerContext context = new LoggerContext()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Encoder<?> encoder = ((ConsoleAppender<?>)appender).getEncoder()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Appender<ILoggingEvent> appender = context.getLogger(\"ROOT\").getAppender(\"CONSOLE\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "configurator.doConfigure(new File(\"src/test/resources/custom-console-log-pattern.xml\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "consolePatternCanBeOverridden['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "filePatternCanBeOverridden['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Encoder<?> encoder = ((FileAppender<?>)appender).getEncoder()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Appender<ILoggingEvent> appender = context.getLogger(\"ROOT\").getAppender(\"FILE\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(appender).isInstanceOf()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "JoranConfigurator configurator = new JoranConfigurator()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "consolePatternCanBeOverridden['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "configurator.setContext(context)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(((PatternLayoutEncoder)encoder).getPattern()).isEqualTo(\"bar\")@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "configurator.doConfigure(new File(\"src/test/resources/custom-file-log-pattern.xml\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(appender).isInstanceOf()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(((PatternLayoutEncoder)encoder).getPattern()).isEqualTo(\"foo\")@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(encoder).isInstanceOf()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
14->16 [style = bold, label=""];
16->15 [style = bold, label=""];
4->3 [style = bold, label=""];
0->9 [style = bold, label=""];
12->5 [style = bold, label=""];
0->16 [style = dashed, label="0"];
3->6 [style = bold, label=""];
10->3 [style = bold, label=""];
8->14 [style = dashed, label="0"];
7->8 [style = bold, label=""];
7->14 [style = bold, label=""];
8->0 [style = bold, label=""];
1->12 [style = dashed, label="0"];
5->2 [style = bold, label=""];
11->3 [style = bold, label=""];
2->13 [style = dashed, label="0"];
5->13 [style = bold, label=""];
6->7 [style = solid, label="context"];
15->12 [style = bold, label=""];
6->7 [style = bold, label=""];
9->1 [style = bold, label=""];
9->15 [style = dashed, label="0"];
}
