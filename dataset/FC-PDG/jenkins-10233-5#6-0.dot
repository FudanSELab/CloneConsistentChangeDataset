digraph {
14 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\"1-\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: \"-1\" is not a valid option\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"-\")@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1-\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\"-1\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\"-\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1-3-', expected correct notation M,N or M-N\"))@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: \"-\" is not a valid option\"))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(result,failedWith(3))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "dummyRangeRangeSingleShouldFailIfBuildRangeIsInvalid['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(result,failedWith(2))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(result,failedWith(3))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "dummyRangeRangeSingleShouldFailIfBuildRangeContainsEmptyNumber['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1-', expected string with a range M-N\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "dummyRangeRangeSingleShouldFailIfBuildRangeContainsEmptyNumber['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"-1\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertThat(result,failedWith(2))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1-3-\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->6 [style = solid, label="result"];
16->6 [style = solid, label="result"];
19->18 [style = bold, label=""];
20->17 [style = bold, label=""];
21->19 [style = bold, label=""];
14->4 [style = solid, label="result"];
15->1 [style = solid, label="result"];
7->14 [style = dashed, label="0"];
3->18 [style = dashed, label="0"];
8->3 [style = bold, label=""];
7->8 [style = solid, label="result"];
17->19 [style = solid, label="result"];
1->0 [style = bold, label=""];
7->4 [style = bold, label=""];
3->16 [style = bold, label=""];
2->12 [style = solid, label="result"];
11->9 [style = bold, label=""];
12->6 [style = bold, label=""];
2->12 [style = bold, label=""];
15->5 [style = bold, label=""];
0->7 [style = bold, label=""];
5->1 [style = bold, label=""];
0->14 [style = bold, label=""];
16->12 [style = solid, label="result"];
3->2 [style = bold, label=""];
14->8 [style = solid, label="result"];
7->4 [style = solid, label="result"];
2->16 [style = dashed, label="0"];
6->10 [style = bold, label=""];
9->17 [style = dashed, label="0"];
9->5 [style = bold, label=""];
4->8 [style = bold, label=""];
9->1 [style = solid, label="result"];
13->15 [style = bold, label=""];
17->21 [style = solid, label="result"];
16->12 [style = bold, label=""];
17->21 [style = bold, label=""];
9->5 [style = solid, label="result"];
9->15 [style = dashed, label="0"];
14->4 [style = bold, label=""];
15->5 [style = solid, label="result"];
}
