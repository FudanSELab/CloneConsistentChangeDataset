digraph {
11 [style = filled, label = "Assert.assertEquals(3,segments.size())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int i = 0@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertTrue(resultPair.lhs.isSuccess())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final List<DataSegment> segments = resultPair.rhs@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(3,segments.size())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(new NumberedShardSpec(0,1),segments.get(i).getShardSpec())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(getDefaultCompactionState(Granularities.HOUR,Granularities.NONE,ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1))),segments.get(i).getLastCompactionState())@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "final CompactionTask compactionTask2 = builder.interval(Intervals.of(\"2014-01-01/2014-01-02\")).build()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1),segments.get(i).getInterval())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(getDefaultCompactionState(Granularities.HOUR,Granularities.MINUTE,ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1))),segments.get(i).getLastCompactionState())@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "lockGranularity == LockGranularity.SEGMENT@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "i++@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Pair<TaskStatus,List<DataSegment>> resultPair = runTask(compactionTask1)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final Builder builder = new Builder(DATA_SOURCE,segmentLoaderFactory,RETRY_POLICY_FACTORY)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final CompactionTask compactionTask1 = builder.interval(Intervals.of(\"2014-01-01/2014-01-02\")).build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "i++@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "lockGranularity == LockGranularity.SEGMENT@@@32@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "int i = 0@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "runIndexTask()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "i < 3@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "List<DataSegment> segments = resultPair.rhs@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "int i = 0@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testRunCompactionTwice['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "segments = resultPair.rhs@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertTrue(resultPair.lhs.isSuccess())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "i < 3@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "IndexTask indexTask = new IndexTask(null,null,new IndexTask.IndexIngestionSpec(new DataSchema(\"test\",getObjectMapper().convertValue(new StringInputRowParser(DEFAULT_PARSE_SPEC,null),),new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a00588,new UniformGranularitySpec(Granularities.HOUR,Granularities.MINUTE,null),null,getObjectMapper()),new IndexTask.IndexIOConfig(new IngestSegmentFirehoseFactory(DATA_SOURCE,Intervals.of(\"2014-01-01/2014-01-02\"),null,null,null,null,null,getIndexIO(),coordinatorClient,segmentLoaderFactory,RETRY_POLICY_FACTORY),false),IndexTaskTest.createTuningConfig(5000000,null,null,Long.MAX_VALUE,null,false,true)),null)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Assert.assertEquals(getDefaultCompactionState(Granularities.HOUR,Granularities.MINUTE,ImmutableList.of()),segments.get(i).getLastCompactionState())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "testRunRegularIndexTaskWithIngestSegmentFirehose['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testRunCompactionTwice['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(new NumberedOverwriteShardSpec(32768,0,2,(short)1,(short)1),segments.get(i).getShardSpec())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "indexTask.addToContext(Tasks.STORE_COMPACTION_STATE_KEY,true)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "resultPair = runTask(compactionTask2)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertTrue(resultPair.lhs.isSuccess())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID,0,2,(short)1,(short)1),segments.get(i).getShardSpec())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(getDefaultCompactionState(Granularities.HOUR,Granularities.MINUTE,ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1))),segments.get(i).getLastCompactionState())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(new NumberedShardSpec(0,1),segments.get(i).getShardSpec())@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1),segments.get(i).getInterval())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final Pair<TaskStatus,List<DataSegment>> resultPair = runTask(indexTask)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 1,0,2,(short)2,(short)1),segments.get(i).getShardSpec())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(new NumberedShardSpec(0,1),segments.get(i).getShardSpec())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38->34 [style = solid, label="indexTask"];
31->9 [style = bold, label=""];
21->8 [style = dotted, label="true"];
20->0 [style = bold, label=""];
24->32 [style = bold, label=""];
21->8 [style = bold, label=""];
4->29 [style = solid, label="i"];
16->3 [style = dotted, label="false"];
3->5 [style = bold, label=""];
34->24 [style = bold, label=""];
0->25 [style = bold, label=""];
25->26 [style = solid, label="i"];
21->39 [style = dotted, label="true"];
37->36 [style = dotted, label="true"];
11->8 [style = dotted, label="true"];
21->37 [style = dotted, label="true"];
37->33 [style = bold, label=""];
9->38 [style = bold, label=""];
17->36 [style = dashed, label="0"];
32->11 [style = bold, label=""];
11->7 [style = dotted, label="true"];
16->3 [style = bold, label=""];
11->28 [style = bold, label=""];
7->11 [style = bold, label=""];
37->36 [style = bold, label=""];
21->19 [style = bold, label=""];
19->17 [style = dotted, label="true"];
16->6 [style = bold, label=""];
25->5 [style = solid, label="i"];
19->39 [style = bold, label=""];
7->21 [style = solid, label="i"];
40->34 [style = bold, label=""];
7->29 [style = solid, label="i"];
14->2 [style = solid, label="compactionTask1"];
22->7 [style = bold, label=""];
4->8 [style = solid, label="i"];
7->19 [style = solid, label="i"];
26->16 [style = bold, label=""];
21->29 [style = bold, label=""];
15->9 [style = bold, label=""];
4->21 [style = solid, label="i"];
8->19 [style = solid, label="i"];
11->19 [style = dotted, label="true"];
10->1 [style = bold, label=""];
19->22 [style = bold, label=""];
27->20 [style = bold, label=""];
33->8 [style = bold, label=""];
19->22 [style = dotted, label="false"];
39->37 [style = bold, label=""];
4->7 [style = solid, label="i"];
35->9 [style = bold, label=""];
11->21 [style = bold, label=""];
11->29 [style = dotted, label="true"];
5->30 [style = solid, label="i"];
19->17 [style = bold, label=""];
5->13 [style = solid, label="i"];
1->32 [style = dashed, label="0"];
2->10 [style = bold, label=""];
12->26 [style = dotted, label="true"];
26->30 [style = dashed, label="0"];
12->13 [style = bold, label=""];
6->5 [style = bold, label=""];
12->13 [style = dotted, label="true"];
9->18 [style = bold, label=""];
25->30 [style = solid, label="i"];
29->19 [style = bold, label=""];
13->26 [style = bold, label=""];
28->23 [style = bold, label=""];
36->8 [style = bold, label=""];
14->2 [style = bold, label=""];
38->40 [style = bold, label=""];
7->8 [style = solid, label="i"];
5->12 [style = solid, label="i"];
8->29 [style = dashed, label="0"];
5->26 [style = solid, label="i"];
4->11 [style = solid, label="i"];
8->21 [style = solid, label="i"];
23->27 [style = bold, label=""];
8->19 [style = bold, label=""];
13->30 [style = bold, label=""];
28->23 [style = solid, label="compactionTask2"];
12->30 [style = dotted, label="true"];
25->12 [style = solid, label="i"];
17->7 [style = bold, label=""];
37->33 [style = dotted, label="false"];
24->4 [style = bold, label=""];
12->16 [style = dotted, label="true"];
5->12 [style = bold, label=""];
25->12 [style = bold, label=""];
12->5 [style = dotted, label="true"];
1->24 [style = bold, label=""];
8->39 [style = dashed, label="0"];
21->19 [style = dotted, label="true"];
7->21 [style = bold, label=""];
8->21 [style = bold, label=""];
11->21 [style = dotted, label="true"];
4->11 [style = bold, label=""];
30->16 [style = bold, label=""];
18->14 [style = bold, label=""];
11->7 [style = bold, label=""];
7->11 [style = solid, label="i"];
16->6 [style = dotted, label="true"];
25->13 [style = solid, label="i"];
}
