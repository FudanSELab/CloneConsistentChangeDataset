digraph {
21 [style = filled, label = "table.updateProperties().set(DEFAULT_NAME_MAPPING,NameMappingParser.toJson(nameMapping)).set(PARQUET_VECTORIZATION_ENABLED,\"true\").commit()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "NameMapping nameMapping = MappingUtil.create(filteredSchema)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<String> expected = Lists.newArrayList(\"b\",\"c\")@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "File stagingDir = temp.newFolder(\"staging-dir\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "spark.table(QUALIFIED_TABLE_NAME).write().mode(\"overwrite\").format(format.toString()).saveAsTable(\"original_table\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "spark.table(qualifiedTableName).write().mode(\"overwrite\").format(\"parquet\").saveAsTable(\"original_table\")@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Schema filteredSchema = new Schema(optional(1,\"data\",Types.StringType.get()))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "List<String> actual = spark.read().format(\"iceberg\").load(DB_NAME + \".target_table_for_vectorization\").select(\"data\").sort(\"data\").filter(\"data >= 'b'\").as(Encoders.STRING()).collectAsList()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "String targetTableName = \"target_table_\" + format@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "testImportWithNameMappingForVectorizedParquetReader['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "org.apache.iceberg.catalog.TableIdentifier targetTable = org.apache.iceberg.catalog.TableIdentifier.of(DB_NAME,targetTableName)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "SparkTableUtil.importSparkTable(spark,source,table,stagingDir.toString())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "SparkTableUtil.importSparkTable(spark,source,table,stagingDir.toString())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testImportWithNameMapping['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(expected,actual)@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "table.updateProperties().set(DEFAULT_NAME_MAPPING,NameMappingParser.toJson(nameMapping)).commit()@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(expected,actual)@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "Table table = catalog.createTable(org.apache.iceberg.catalog.TableIdentifier.of(DB_NAME,\"target_table_for_vectorization\"),filteredSchema,SparkSchemaUtil.specForTable(spark,\"original_table\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "TableIdentifier source = new TableIdentifier(\"original_table\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testImportWithNameMapping['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Table table = catalog.createTable(targetTable,filteredSchema,SparkSchemaUtil.specForTable(spark,\"original_table\"))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "List<String> actual = spark.read().format(\"iceberg\").load(targetTable.toString()).select(\"data\").sort(\"data\").filter(\"data >= 'b'\").as(Encoders.STRING()).collectAsList()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Table table = catalog.createTable(org.apache.iceberg.catalog.TableIdentifier.of(DB_NAME,\"target_table\"),filteredSchema,SparkSchemaUtil.specForTable(spark,\"original_table\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4->10 [style = bold, label=""];
6->21 [style = dashed, label="0"];
14->8 [style = solid, label="table"];
8->15 [style = bold, label=""];
12->5 [style = bold, label=""];
0->17 [style = solid, label="expected"];
0->17 [style = bold, label=""];
8->15 [style = dashed, label="0"];
8->20 [style = dashed, label="0"];
22->21 [style = bold, label=""];
5->9 [style = solid, label="source"];
2->0 [style = solid, label="expected"];
9->20 [style = bold, label=""];
12->18 [style = solid, label="targetTableName"];
1->18 [style = dashed, label="0"];
5->18 [style = bold, label=""];
18->14 [style = solid, label="targetTable"];
9->8 [style = bold, label=""];
3->4 [style = bold, label=""];
13->16 [style = bold, label=""];
1->22 [style = dashed, label="0"];
14->7 [style = bold, label=""];
20->2 [style = bold, label=""];
7->9 [style = bold, label=""];
4->14 [style = solid, label="filteredSchema"];
5->1 [style = bold, label=""];
8->0 [style = solid, label="actual"];
15->17 [style = solid, label="actual"];
2->0 [style = bold, label=""];
1->6 [style = bold, label=""];
10->5 [style = bold, label=""];
8->2 [style = bold, label=""];
11->3 [style = bold, label=""];
10->12 [style = bold, label=""];
15->0 [style = bold, label=""];
4->22 [style = solid, label="filteredSchema"];
21->7 [style = bold, label=""];
22->9 [style = solid, label="table"];
4->1 [style = solid, label="filteredSchema"];
20->0 [style = solid, label="actual"];
16->4 [style = bold, label=""];
6->7 [style = bold, label=""];
1->9 [style = solid, label="table"];
4->10 [style = solid, label="filteredSchema"];
5->22 [style = bold, label=""];
19->3 [style = bold, label=""];
18->14 [style = bold, label=""];
5->8 [style = solid, label="source"];
3->16 [style = dashed, label="0"];
}
