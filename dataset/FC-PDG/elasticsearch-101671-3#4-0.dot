digraph {
4 [style = filled, label = "byte(( bytes = createMessage(messageLength * 2)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testMultipleReadsConsumed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "when(readConsumer.apply(channelBuffer)).thenReturn(messageLength,messageLength,0)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(bytes.length,context.read())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "verify(readConsumer,times(2)).apply(channelBuffer)@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(rawChannel.read(any(),anyInt(),anyInt())).thenAnswer(null)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "when(rawChannel.read(any())).thenAnswer(null)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertEquals(BigArrays.BYTE_PAGE_SIZE - bytes.length,channelBuffer.getCapacity())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(bytes.length,context.read())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "when(rawChannel.read(same(readBuffer))).thenReturn(bytes.length)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "doAnswer(getAnswerForBytes(bytes)).when(sslDriver).read(channelBuffer)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "verify(readConsumer,times(2)).apply(channelBuffer)@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testMultipleReadsConsumed['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(0,channelBuffer.getIndex())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(BigArrays.BYTE_PAGE_SIZE - bytes.length,channelBuffer.getCapacity())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(0,channelBuffer.getIndex())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testMultipleReadsConsumed['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8->0 [style = bold, label=""];
4->10 [style = bold, label=""];
4->8 [style = bold, label=""];
4->3 [style = bold, label=""];
3->8 [style = dashed, label="0"];
16->0 [style = bold, label=""];
5->4 [style = bold, label=""];
1->6 [style = bold, label=""];
3->10 [style = dashed, label="0"];
14->13 [style = bold, label=""];
11->15 [style = bold, label=""];
6->7 [style = bold, label=""];
12->4 [style = bold, label=""];
15->16 [style = bold, label=""];
10->14 [style = bold, label=""];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
13->11 [style = bold, label=""];
3->0 [style = bold, label=""];
9->4 [style = bold, label=""];
}
