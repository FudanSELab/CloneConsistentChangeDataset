digraph {
3 [style = filled, label = "executionResult.setTopologicallySortedProjects(asList(projectA,projectB,projectC,projectD))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(result.get().getRemainingProjects(),is(asList(\"test:B\",\"test:D\")))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertThat(result.get().getProjectsToSkip().isEmpty(),is(true))@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "projectsDependingOnFailedProjectsAreNotExcluded['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "executionResult.setTopologicallySortedProjects(asList(projectA,projectB,projectC))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "MavenProject projectC = createSucceededMavenProject(\"C\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(result.get().getResumeFrom(),is(Optional.of(\"test:B\")))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "projectsFailingAfterAnotherFailedProjectAreNotExcluded['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(result.isPresent(),is(true))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "MavenProject projectD = createFailedMavenProject(\"D\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(result.get().getProjectsToSkip(),not(contains(\"test:D\")))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "MavenProject projectB = createFailedMavenProject(\"B\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(result.get().getProjectsToSkip(),contains(\"test:C\"))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "MavenProject projectA = createSucceededMavenProject(\"A\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Optional<BuildResumptionData> result = analyzer.determineBuildResumptionData(executionResult)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "projectsFailingAfterAnotherFailedProjectAreNotExcluded['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "projectC.setDependencies(singletonList(toDependency(projectB)))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->9 [style = bold, label=""];
15->2 [style = bold, label=""];
9->16 [style = dashed, label="0"];
0->15 [style = solid, label="projectB"];
10->3 [style = solid, label="projectD"];
1->3 [style = solid, label="projectC"];
0->13 [style = solid, label="projectB"];
10->3 [style = bold, label=""];
1->15 [style = solid, label="projectC"];
8->6 [style = bold, label=""];
6->0 [style = bold, label=""];
0->3 [style = solid, label="projectB"];
12->6 [style = bold, label=""];
2->4 [style = bold, label=""];
1->13 [style = bold, label=""];
3->2 [style = bold, label=""];
6->3 [style = solid, label="projectA"];
0->1 [style = bold, label=""];
9->5 [style = bold, label=""];
3->15 [style = dashed, label="0"];
9->11 [style = dashed, label="0"];
5->7 [style = bold, label=""];
13->15 [style = bold, label=""];
4->11 [style = bold, label=""];
1->10 [style = bold, label=""];
6->15 [style = solid, label="projectA"];
14->6 [style = bold, label=""];
4->16 [style = bold, label=""];
}
