digraph {
50 [style = filled, label = "verify(operatorActions,never()).failOperator(any())@@@72@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "Assert.assertEquals(watermark1,queue.poll())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "expected.add(record4)@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Set<AsyncResult> actual = new HashSet<>(2)@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "StreamRecordQueueEntry<Integer> record6 = new StreamRecordQueueEntry<>(new StreamRecord<>(6,7L))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "CompletableFuture<AsyncResult> thirdPoll = CompletableFuture.supplyAsync(null,executor)@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "queue.put(entry)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "StreamRecordQueueEntry<Integer> record3 = new StreamRecordQueueEntry<>(new StreamRecord<>(3,3L))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "StreamRecordQueueEntry<Integer> record2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2,1L))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(0,queue.size())@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "Assert.assertEquals(record1,secondPoll.get())@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(4,queue.size())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "final OrderedStreamElementQueue<Integer> queue = new OrderedStreamElementQueue<>(4)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "OperatorActions operatorActions = mock()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Thread.sleep(10L)@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "queue.put(entry)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "entry2.complete(Collections.singleton(11))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
49 [style = filled, label = "Assert.assertEquals(record2,firstPoll.get())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "Set<AsyncResult> expected = new HashSet<>(2)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "ResultFuture<Integer> entry4 = putSuccessfully(queue,new StreamRecord<>(3,3L))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "entry1.complete(Collections.emptyList())@@@32@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "entry1.complete(Collections.singleton(10))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
61 [style = filled, label = "CompletableFuture<AsyncResult> firstPoll = CompletableFuture.supplyAsync(null,executor)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "StreamRecordQueueEntry<Integer> record1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1,0L))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "expected.add(record3)@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "record5.complete(Collections.emptyList())@@@69@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "actual.add(queue.poll())@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertEquals(Collections.emptyList(),popCompleted(queue))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "final OrderedStreamElementQueue queue = new OrderedStreamElementQueue(4,executor,operatorActions)@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "entry2.complete(Collections.emptyList())@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "entry4.complete(Collections.emptyList())@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "verify(operatorActions,never()).failOperator(any())@@@34@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertFalse(queue.isEmpty())@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
59 [style = filled, label = "testCompletionOrder['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "Assert.assertFalse(secondPoll.isDone())@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "final UnorderedStreamElementQueue queue = new UnorderedStreamElementQueue(8,executor,operatorActions)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testCompletionOrder['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
51 [style = filled, label = "WatermarkQueueEntry watermark2 = new WatermarkQueueEntry(new Watermark(5L))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "List<StreamElementQueueEntry<?>> expected = Arrays.asList(entry1,entry2,entry3,entry4)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
56 [style = filled, label = "Thread.sleep(10L)@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "Thread.sleep(10L)@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Assert.assertTrue(queue.isEmpty())@@@71@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "record4.complete(Collections.emptyList())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "Assert.assertEquals(expected,actual)@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "StreamRecordQueueEntry<Integer> entry4 = new StreamRecordQueueEntry<>(new StreamRecord<>(3,3L))@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Thread.sleep(10L)@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "entry4.complete(Collections.singleton(13))@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
40 [style = filled, label = "record6.complete(Collections.emptyList())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "record3.complete(Collections.emptyList())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "Assert.assertFalse(thirdPoll.isDone())@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "Assert.assertTrue(1 == queue.size())@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "ResultFuture<Integer> entry2 = putSuccessfully(queue,new StreamRecord<>(2,1L))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "List<StreamElement> expected = Arrays.asList(new StreamRecord<>(10,0L),new StreamRecord<>(11,1L),new Watermark(2L),new StreamRecord<>(13,3L))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "Assert.assertEquals(Collections.emptyList(),popCompleted(queue))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(4,queue.size())@@@31@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(watermark2,queue.poll())@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Thread.sleep(10L)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "List<StreamElementQueueEntry<?>> entries = Arrays.asList(record1,record2,watermark1,record3,record4,watermark2,record5,record6)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "CompletableFuture<List<AsyncResult>> pollOperation = CompletableFuture.supplyAsync(null,executor)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(expected,pollOperation.get())@@@33@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(4,queue.size())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "WatermarkQueueEntry watermark1 = new WatermarkQueueEntry(new Watermark(2L))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "Assert.assertFalse(firstPoll.isDone())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(expected,popCompleted(queue))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "StreamRecordQueueEntry<Integer> entry1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1,0L))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "putSuccessfully(queue,new Watermark(2L))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "Assert.assertFalse(pollOperation.isDone())@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
47 [style = filled, label = "Assert.assertTrue(8 == queue.size())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testCompletionOrder['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "StreamRecordQueueEntry<Integer> record5 = new StreamRecordQueueEntry<>(new StreamRecord<>(5,6L))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "CompletableFuture<AsyncResult> secondPoll = CompletableFuture.supplyAsync(null,executor)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertTrue(queue.isEmpty())@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "WatermarkQueueEntry entry3 = new WatermarkQueueEntry(new Watermark(2L))@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "ResultFuture<Integer> entry1 = putSuccessfully(queue,new StreamRecord<>(1,0L))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
62 [style = filled, label = "record2.complete(Collections.emptyList())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertFalse(queue.isEmpty())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
68 [style = filled, label = "Assert.assertEquals(record5,thirdPoll.get())@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "Assert.assertEquals(record6,queue.poll())@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "actual.add(queue.poll())@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "StreamRecordQueueEntry<Integer> record4 = new StreamRecordQueueEntry<>(new StreamRecord<>(4,4L))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "StreamRecordQueueEntry<Integer> entry2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2,1L))@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "record1.complete(Collections.emptyList())@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64->54 [style = solid, label="record2"];
18->3 [style = bold, label=""];
39->69 [style = bold, label=""];
66->54 [style = solid, label="record4"];
38->44 [style = bold, label=""];
4->15 [style = bold, label=""];
25->27 [style = solid, label="queue"];
49->48 [style = bold, label=""];
30->36 [style = bold, label=""];
9->10 [style = bold, label=""];
0->76 [style = solid, label="operatorActions"];
1->44 [style = dashed, label="0"];
79->68 [style = solid, label="record5"];
55->74 [style = bold, label=""];
15->17 [style = bold, label=""];
0->14 [style = bold, label=""];
76->73 [style = bold, label=""];
34->24 [style = bold, label=""];
25->26 [style = solid, label="queue"];
55->71 [style = solid, label="expected"];
40->63 [style = bold, label=""];
62->49 [style = bold, label=""];
77->60 [style = bold, label=""];
14->76 [style = dashed, label="0"];
56->65 [style = bold, label=""];
25->37 [style = solid, label="queue"];
17->68 [style = dashed, label="0"];
66->42 [style = solid, label="record4"];
80->69 [style = solid, label="record6"];
6->7 [style = solid, label="entry1"];
8->18 [style = bold, label=""];
4->65 [style = dashed, label="0"];
51->79 [style = bold, label=""];
69->77 [style = bold, label=""];
73->52 [style = solid, label="record1"];
22->23 [style = bold, label=""];
43->67 [style = bold, label=""];
13->16 [style = bold, label=""];
19->25 [style = bold, label=""];
65->78 [style = bold, label=""];
35->28 [style = bold, label=""];
79->54 [style = solid, label="record5"];
74->42 [style = bold, label=""];
73->54 [style = solid, label="record1"];
6->27 [style = dashed, label="0"];
64->38 [style = bold, label=""];
70->75 [style = bold, label=""];
25->32 [style = solid, label="queue"];
66->51 [style = bold, label=""];
38->46 [style = solid, label="watermark1"];
73->64 [style = bold, label=""];
5->11 [style = bold, label=""];
78->68 [style = bold, label=""];
51->54 [style = solid, label="watermark2"];
41->50 [style = bold, label=""];
14->6 [style = bold, label=""];
44->66 [style = bold, label=""];
11->7 [style = solid, label="entry3"];
26->20 [style = bold, label=""];
44->74 [style = solid, label="record3"];
27->26 [style = bold, label=""];
60->56 [style = bold, label=""];
23->31 [style = bold, label=""];
28->29 [style = bold, label=""];
25->20 [style = solid, label="queue"];
58->43 [style = bold, label=""];
52->46 [style = bold, label=""];
16->8 [style = bold, label=""];
3->57 [style = dashed, label="0"];
37->30 [style = bold, label=""];
79->80 [style = bold, label=""];
47->61 [style = bold, label=""];
18->75 [style = dashed, label="0"];
5->7 [style = solid, label="entry2"];
63->70 [style = bold, label=""];
32->27 [style = bold, label=""];
1->7 [style = bold, label=""];
29->21 [style = bold, label=""];
5->64 [style = dashed, label="0"];
0->14 [style = solid, label="operatorActions"];
3->9 [style = bold, label=""];
6->5 [style = bold, label=""];
17->12 [style = bold, label=""];
2->0 [style = bold, label=""];
72->81 [style = bold, label=""];
80->54 [style = solid, label="record6"];
24->22 [style = solid, label="expected"];
53->72 [style = bold, label=""];
44->54 [style = solid, label="record3"];
25->22 [style = solid, label="queue"];
33->37 [style = bold, label=""];
15->78 [style = dashed, label="0"];
7->17 [style = solid, label="expected"];
36->34 [style = bold, label=""];
46->55 [style = bold, label=""];
7->13 [style = bold, label=""];
54->45 [style = bold, label=""];
71->39 [style = bold, label=""];
11->1 [style = bold, label=""];
1->7 [style = solid, label="entry4"];
21->33 [style = bold, label=""];
38->54 [style = solid, label="watermark1"];
25->32 [style = bold, label=""];
53->71 [style = solid, label="actual"];
75->57 [style = bold, label=""];
61->58 [style = bold, label=""];
24->22 [style = bold, label=""];
48->40 [style = bold, label=""];
51->39 [style = solid, label="watermark2"];
0->76 [style = bold, label=""];
67->62 [style = bold, label=""];
57->52 [style = bold, label=""];
11->38 [style = dashed, label="0"];
64->49 [style = solid, label="record2"];
80->54 [style = bold, label=""];
25->35 [style = solid, label="queue"];
45->47 [style = bold, label=""];
10->4 [style = bold, label=""];
6->73 [style = dashed, label="0"];
59->0 [style = bold, label=""];
20->35 [style = bold, label=""];
81->71 [style = bold, label=""];
68->41 [style = bold, label=""];
42->53 [style = bold, label=""];
}
