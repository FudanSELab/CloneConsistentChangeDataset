digraph {
5 [style = filled, label = "env.kafkaClient().prepareResponse(prepareOffsetDeleteResponse(Errors.COORDINATOR_NOT_AVAILABLE))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertNull(result.partitionResult(tp1).get())@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "env.kafkaClient().prepareResponse(FindCoordinatorResponse.prepareResponse(Errors.NONE,env.cluster().controller()))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "final TopicPartition tp1 = new TopicPartition(\"foo\",0)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "env.kafkaClient().prepareResponse(prepareFindCoordinatorResponse(Errors.COORDINATOR_NOT_AVAILABLE,Node.noNode()))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "env.kafkaClient().prepareResponse(prepareFindCoordinatorResponse(Errors.COORDINATOR_LOAD_IN_PROGRESS,Node.noNode()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final Cluster cluster = new Cluster(\"mockClusterId\",nodes.values(),Collections.emptyList(),Collections.emptySet(),Collections.emptySet(),nodes.get(0))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final DeleteConsumerGroupOffsetsResult errorResult1 = env.adminClient().deleteConsumerGroupOffsets(groupId,Stream.of(tp1).collect(Collectors.toSet()))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "env.kafkaClient().prepareResponse(prepareFindCoordinatorResponse(Errors.NONE,env.cluster().controller()))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "testDeleteConsumerGroupOffsetsFindCoordinatorRetriableErrors['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertNull(result.all().get())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertNull(errorResult1.partitionResult(tp1).get())@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final String groupId = \"group-0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "env.kafkaClient().prepareResponse(prepareOffsetDeleteResponse(Errors.NOT_COORDINATOR))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "env.kafkaClient().setNodeApiVersions(NodeApiVersions.create())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "env.kafkaClient().prepareResponse(prepareOffsetDeleteResponse(Errors.COORDINATOR_LOAD_IN_PROGRESS))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final Map<Integer,Node> nodes = new HashMap<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertNull(errorResult1.all().get())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "nodes.put(0,new Node(0,\"localhost\",8121))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testDeleteConsumerGroupOffsetsRetriableErrors['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "env.kafkaClient().prepareResponse(prepareOffsetDeleteResponse(\"foo\",0,Errors.NONE))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final DeleteConsumerGroupOffsetsResult result = env.adminClient().deleteConsumerGroupOffsets(groupId,Stream.of(tp1).collect(Collectors.toSet()))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testDeleteConsumerGroupOffsetsRetriableErrors['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "env.kafkaClient().prepareResponse(prepareFindCoordinatorResponse(Errors.NONE,env.cluster().controller()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9->20 [style = dashed, label="0"];
17->5 [style = bold, label=""];
15->10 [style = bold, label=""];
16->0 [style = bold, label=""];
10->8 [style = dashed, label="0"];
8->15 [style = bold, label=""];
3->21 [style = dashed, label="0"];
11->14 [style = bold, label=""];
7->12 [style = bold, label=""];
5->23 [style = dashed, label="0"];
0->11 [style = bold, label=""];
10->3 [style = bold, label=""];
7->15 [style = solid, label="groupId"];
15->4 [style = dashed, label="0"];
19->0 [style = bold, label=""];
14->7 [style = bold, label=""];
12->13 [style = bold, label=""];
5->1 [style = bold, label=""];
6->4 [style = bold, label=""];
13->17 [style = bold, label=""];
2->0 [style = bold, label=""];
1->6 [style = bold, label=""];
23->22 [style = bold, label=""];
22->18 [style = bold, label=""];
7->4 [style = solid, label="groupId"];
20->23 [style = bold, label=""];
18->4 [style = bold, label=""];
9->17 [style = dashed, label="0"];
9->5 [style = bold, label=""];
8->21 [style = bold, label=""];
4->8 [style = bold, label=""];
13->9 [style = bold, label=""];
13->20 [style = bold, label=""];
}
