digraph {
3 [style = filled, label = "wrapLoggingMethodCall['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "MethodCallExpression condition = new MethodCallExpression(logVariable,\"is\" + methodName.substring(0,1).toUpperCase(Locale.ENGLISH) + methodName.substring(1) + \"Enabled\",ArgumentListExpression.EMPTY_ARGUMENTS)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "String methodName@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "return new TernaryExpression(new BooleanExpression(condition),originalExpression,nullX())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Expression logVariable@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Expression originalExpression@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "wrapLoggingMethodCall['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "ArgumentListExpression args = new ArgumentListExpression()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Expression originalExpression@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "wrapLoggingMethodCall['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Expression logVariable@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Expression originalExpression@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Expression logVariable@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "args.addExpression(logLevelExpression)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "condition.setImplicitThis(false)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "condition.setImplicitThis(false)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "MethodCallExpression condition = new MethodCallExpression(logVariable,\"isLoggable\",args)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "AttributeExpression logLevelExpression = new AttributeExpression(new ClassExpression(LEVEL_CLASSNODE),new ConstantExpression(methodName.toUpperCase(Locale.ENGLISH)))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "return new TernaryExpression(new BooleanExpression(condition),originalExpression,ConstantExpression.NULL)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "return new TernaryExpression(new BooleanExpression(condition),originalExpression,ConstantExpression.NULL)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11->16 [style = bold, label=""];
14->2 [style = dotted, label="true"];
2->11 [style = solid, label="logVariable"];
6->8 [style = dashed, label="0"];
11->12 [style = solid, label="condition"];
4->6 [style = bold, label=""];
18->19 [style = bold, label=""];
14->17 [style = bold, label=""];
19->11 [style = bold, label=""];
18->11 [style = solid, label="args"];
0->6 [style = solid, label="originalExpression"];
14->13 [style = dotted, label="true"];
5->8 [style = solid, label="condition"];
14->15 [style = dotted, label="true"];
17->19 [style = solid, label="logLevelExpression"];
3->5 [style = bold, label=""];
5->6 [style = solid, label="condition"];
13->12 [style = solid, label="originalExpression"];
9->2 [style = dotted, label="true"];
5->4 [style = bold, label=""];
7->5 [style = solid, label="logVariable"];
3->0 [style = dotted, label="true"];
9->5 [style = bold, label=""];
4->8 [style = bold, label=""];
1->5 [style = solid, label="logVariable"];
9->7 [style = dotted, label="true"];
9->10 [style = dotted, label="true"];
10->8 [style = solid, label="originalExpression"];
16->12 [style = bold, label=""];
3->1 [style = dotted, label="true"];
17->18 [style = bold, label=""];
3->2 [style = dotted, label="true"];
}
