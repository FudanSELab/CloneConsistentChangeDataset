digraph {
31 [style = filled, label = "i < 1000@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertTrue(loc.isDefined())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final byte(( key = JavaUtils.bufferToArray(entry.getKey())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final Map<ByteBuffer,byte((> expected = new HashMap<ByteBuffer,byte((>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "randomizedStressTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Assert.assertTrue(arrayEquals(key,loc.getKeyBase(),loc.getKeyOffset(),key.length))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final byte(( key = JavaUtils.bufferToArray(entry.getKey())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "i++@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertTrue(loc.isDefined())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager,64,pageSizeBytes)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "int i = 0@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "randomizedTestWithRecordsLargerThanPageSize['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "!expected.containsKey(ByteBuffer.wrap(key))@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final BytesToBytesMap.Location loc = map.lookup(key,Platform.BYTE_ARRAY_OFFSET,key.length)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "{map.free()}@@@33@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final byte(( value = entry.getValue()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final long pageSizeBytes = 128@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "randomizedStressTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final byte(( key = getRandomByteArray(rand.nextInt(128))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertFalse(loc.isDefined())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertTrue(arrayEquals(key,loc.getKeyBase(),loc.getKeyOffset(),loc.getKeyLength()))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final int size = 65536@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final byte(( value = getRandomByteArray(rand.nextInt(128))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(key.length,loc.getKeyLength())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(value.length,loc.getValueLength())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertTrue(arrayEquals(value,loc.getValueBase(),loc.getValueOffset(),value.length))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "{map.free()}@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final byte(( value = getRandomByteArray(rand.nextInt(512) + 1)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "int i = 0@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final Map<ByteBuffer,byte((> expected = new HashMap<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertTrue(loc.putNewKey(key,Platform.BYTE_ARRAY_OFFSET,key.length,value,Platform.BYTE_ARRAY_OFFSET,value.length))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final Map<ByteBuffer,byte((> expected = new HashMap<ByteBuffer,byte((>()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "expected.put(ByteBuffer.wrap(key),value)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "i++@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertTrue(arrayEquals(value,loc.getValueBase(),loc.getValueOffset(),loc.getValueLength()))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "!expected.containsKey(ByteBuffer.wrap(key))@@@12@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final BytesToBytesMap.Location loc = map.lookup(key,Platform.BYTE_ARRAY_OFFSET,key.length)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->8 [style = dotted, label="true"];
3->16 [style = solid, label="i"];
5->15 [style = bold, label=""];
29->34 [style = bold, label=""];
32->6 [style = bold, label=""];
10->32 [style = dotted, label="true"];
6->35 [style = dashed, label="0"];
22->4 [style = bold, label=""];
17->8 [style = dotted, label="true"];
17->15 [style = dotted, label="true"];
31->35 [style = bold, label=""];
0->24 [style = bold, label=""];
3->20 [style = solid, label="i"];
17->2 [style = dotted, label="true"];
17->16 [style = bold, label=""];
19->21 [style = solid, label="size"];
21->3 [style = bold, label=""];
23->28 [style = solid, label="value"];
28->36 [style = bold, label=""];
19->12 [style = bold, label=""];
16->20 [style = solid, label="i"];
12->21 [style = bold, label=""];
31->6 [style = dotted, label="true"];
4->18 [style = bold, label=""];
20->31 [style = bold, label=""];
35->11 [style = solid, label="key"];
6->5 [style = solid, label="key"];
31->10 [style = dotted, label="true"];
6->2 [style = solid, label="key"];
19->20 [style = solid, label="size"];
24->5 [style = bold, label=""];
6->31 [style = solid, label="i"];
33->29 [style = bold, label=""];
31->30 [style = dotted, label="true"];
30->2 [style = solid, label="value"];
25->30 [style = dashed, label="0"];
10->24 [style = dotted, label="true"];
7->23 [style = bold, label=""];
30->9 [style = solid, label="value"];
12->27 [style = dashed, label="0"];
30->10 [style = bold, label=""];
11->8 [style = bold, label=""];
10->0 [style = dotted, label="true"];
10->2 [style = bold, label=""];
6->10 [style = solid, label="key"];
16->20 [style = bold, label=""];
20->6 [style = dotted, label="true"];
13->23 [style = solid, label="key"];
30->32 [style = solid, label="value"];
17->10 [style = bold, label=""];
20->13 [style = bold, label=""];
20->25 [style = dotted, label="true"];
25->10 [style = solid, label="value"];
31->35 [style = dotted, label="true"];
20->17 [style = dotted, label="true"];
6->25 [style = bold, label=""];
4->13 [style = bold, label=""];
20->31 [style = dashed, label="0"];
25->8 [style = solid, label="value"];
14->19 [style = bold, label=""];
26->19 [style = bold, label=""];
10->9 [style = dotted, label="true"];
25->17 [style = bold, label=""];
10->6 [style = bold, label=""];
31->7 [style = bold, label=""];
20->31 [style = solid, label="i"];
13->22 [style = solid, label="key"];
7->4 [style = solid, label="value"];
10->2 [style = dotted, label="true"];
10->11 [style = dotted, label="true"];
35->2 [style = solid, label="key"];
7->4 [style = solid, label="key"];
27->21 [style = bold, label=""];
35->30 [style = bold, label=""];
2->11 [style = bold, label=""];
34->21 [style = bold, label=""];
17->24 [style = dotted, label="true"];
20->6 [style = solid, label="i"];
17->11 [style = dotted, label="true"];
17->0 [style = dotted, label="true"];
35->9 [style = solid, label="key"];
9->0 [style = bold, label=""];
35->15 [style = solid, label="key"];
28->7 [style = bold, label=""];
19->29 [style = dashed, label="0"];
20->6 [style = bold, label=""];
15->16 [style = bold, label=""];
10->5 [style = dotted, label="true"];
7->1 [style = solid, label="key"];
4->28 [style = bold, label=""];
1->22 [style = bold, label=""];
25->15 [style = solid, label="value"];
10->15 [style = dotted, label="true"];
17->10 [style = dotted, label="true"];
3->20 [style = bold, label=""];
21->20 [style = bold, label=""];
6->31 [style = bold, label=""];
29->34 [style = solid, label="pageSizeBytes"];
13->7 [style = bold, label=""];
6->8 [style = solid, label="key"];
19->27 [style = bold, label=""];
17->9 [style = dotted, label="true"];
8->9 [style = bold, label=""];
23->1 [style = bold, label=""];
15->32 [style = bold, label=""];
20->16 [style = dotted, label="true"];
17->5 [style = dotted, label="true"];
}
