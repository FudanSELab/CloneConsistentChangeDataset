digraph {
49 [style = filled, label = "Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testStorageLocation.deleteSegmentInfoFromCache(segment)@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(0,infoDir.listFiles().length)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "int i = 0@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "i < COUNT@@@36@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "++i@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "Assert.assertEquals(11L,segmentManager.getDataSourceCounts().get(\"test\" + i).longValue())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "i < COUNT@@@5@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testStorageLocation.checkInfoCache(segments)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "int i = 0@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(5 * COUNT,announceCount.get())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "segments.add(makeSegment(\"test_two\" + i,\"1\",Intervals.of(\"P1d/2011-04-02\")))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testLoadCache['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Assert.assertEquals(2L,segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"2\",Intervals.of(\"PT1h/2011-04-04T01\")))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "segments.add(makeSegment(\"test_two\" + i,\"1\",Intervals.of(\"P1d/2011-04-01\")))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"1\",Intervals.of(\"P1d/2011-04-02\")))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"1\",Intervals.of(\"P1d/2011-04-05\")))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(0,infoDir.listFiles().length)@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(3L,segmentManager.getDataSourceCounts().get(\"test\" + i).longValue())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"2\",Intervals.of(\"PT1h/2011-04-04T03\")))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "int i = 0@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"1\",Intervals.of(\"P1d/2011-04-03\")))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"1\",Intervals.of(\"P1d/2011-04-02\")))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testStartStop['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Set<DataSegment> segments = new HashSet<>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "i < COUNT@@@20@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"1\",Intervals.of(\"P1d/2011-04-04\")))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(13 * COUNT,announceCount.get())@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "segments.add(makeSegment(\"test_two\" + i,\"1\",Intervals.of(\"P1d/2011-04-01\")))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertTrue(infoDir.delete())@@@40@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testStartStop['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
46 [style = filled, label = "segmentLoadDropHandler.start()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testStorageLocation.writeSegmentInfoToCache(segment)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "++i@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"1\",Intervals.of(\"P1d/2011-04-01\")))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"2\",Intervals.of(\"PT1h/2011-04-04T06\")))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "segmentLoadDropHandler.stop()@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"2\",Intervals.of(\"P1d/2011-04-02\")))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertTrue(infoDir.delete())@@@47@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testStorageLocation.deleteSegmentInfoFromCache(segment)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "++i@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "i < COUNT@@@29@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "handler.stop()@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"2\",Intervals.of(\"PT1h/2011-04-04T02\")))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "segments.add(makeSegment(\"test\" + i,\"2\",Intervals.of(\"PT1h/2011-04-04T05\")))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(2L,segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "SegmentLoadDropHandler handler = new SegmentLoadDropHandler(jsonMapper,new SegmentLoaderConfig(){@Override public File getInfoDir(){return infoDir}@Override public int getNumLoadingThreads(){return 5}@Override public List<StorageLocationConfig> getLocations(){return locations}@Override public int getAnnounceIntervalMillis(){return 50}},announcer,Mockito.mock(),segmentManager,segmentCacheManager,new ServerTypeConfig(ServerType.HISTORICAL))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "handler.start()@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "++i@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20->23 [style = bold, label=""];
28->16 [style = bold, label=""];
10->24 [style = bold, label=""];
50->35 [style = dotted, label="true"];
50->19 [style = dotted, label="true"];
40->31 [style = solid, label="i"];
14->11 [style = bold, label=""];
50->45 [style = dotted, label="true"];
4->24 [style = bold, label=""];
15->0 [style = bold, label=""];
37->30 [style = bold, label=""];
48->39 [style = dotted, label="true"];
10->0 [style = solid, label="i"];
25->13 [style = bold, label=""];
27->15 [style = solid, label="segments"];
6->5 [style = bold, label=""];
40->32 [style = solid, label="i"];
10->14 [style = solid, label="i"];
50->14 [style = bold, label=""];
38->48 [style = solid, label="i"];
24->14 [style = bold, label=""];
10->1 [style = solid, label="i"];
40->45 [style = solid, label="i"];
41->46 [style = bold, label=""];
40->10 [style = solid, label="i"];
24->4 [style = dotted, label="true"];
19->21 [style = solid, label="segments"];
40->50 [style = bold, label=""];
40->43 [style = solid, label="i"];
50->32 [style = bold, label=""];
40->30 [style = solid, label="i"];
33->31 [style = bold, label=""];
26->13 [style = bold, label=""];
50->44 [style = dotted, label="true"];
48->1 [style = bold, label=""];
40->50 [style = solid, label="i"];
40->47 [style = solid, label="i"];
39->36 [style = bold, label=""];
10->11 [style = solid, label="i"];
44->50 [style = bold, label=""];
15->41 [style = bold, label=""];
3->51 [style = dashed, label="0"];
38->48 [style = bold, label=""];
40->33 [style = solid, label="i"];
1->4 [style = bold, label=""];
17->46 [style = dashed, label="0"];
24->15 [style = dotted, label="true"];
32->33 [style = bold, label=""];
40->37 [style = solid, label="i"];
35->47 [style = bold, label=""];
30->42 [style = bold, label=""];
18->6 [style = bold, label=""];
42->29 [style = bold, label=""];
5->1 [style = dashed, label="0"];
8->28 [style = dashed, label="0"];
51->39 [style = bold, label=""];
5->8 [style = bold, label=""];
40->19 [style = solid, label="i"];
49->38 [style = bold, label=""];
13->19 [style = bold, label=""];
24->14 [style = dotted, label="true"];
50->37 [style = dotted, label="true"];
3->2 [style = bold, label=""];
1->28 [style = bold, label=""];
24->11 [style = dotted, label="true"];
47->19 [style = bold, label=""];
31->45 [style = bold, label=""];
48->36 [style = dotted, label="true"];
11->15 [style = bold, label=""];
17->20 [style = bold, label=""];
10->44 [style = bold, label=""];
10->15 [style = solid, label="i"];
50->43 [style = dotted, label="true"];
50->30 [style = dotted, label="true"];
50->33 [style = dotted, label="true"];
43->35 [style = bold, label=""];
12->17 [style = bold, label=""];
23->6 [style = bold, label=""];
24->16 [style = bold, label=""];
6->3 [style = bold, label=""];
50->47 [style = dotted, label="true"];
6->18 [style = dotted, label="true"];
23->6 [style = solid, label="i"];
24->1 [style = dotted, label="true"];
36->48 [style = bold, label=""];
14->15 [style = bold, label=""];
40->29 [style = solid, label="i"];
50->29 [style = dotted, label="true"];
9->22 [style = bold, label=""];
50->42 [style = dotted, label="true"];
46->49 [style = bold, label=""];
19->10 [style = bold, label=""];
8->9 [style = bold, label=""];
24->0 [style = dotted, label="true"];
48->51 [style = dotted, label="true"];
48->51 [style = bold, label=""];
50->10 [style = dotted, label="true"];
40->42 [style = solid, label="i"];
50->31 [style = dotted, label="true"];
10->24 [style = solid, label="i"];
0->1 [style = bold, label=""];
21->12 [style = bold, label=""];
27->40 [style = bold, label=""];
29->43 [style = bold, label=""];
16->21 [style = bold, label=""];
2->18 [style = bold, label=""];
22->7 [style = bold, label=""];
6->3 [style = dotted, label="true"];
45->37 [style = bold, label=""];
40->35 [style = solid, label="i"];
6->2 [style = dotted, label="true"];
50->32 [style = dotted, label="true"];
34->27 [style = bold, label=""];
}
