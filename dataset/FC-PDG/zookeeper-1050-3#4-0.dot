digraph {
12 [style = filled, label = "Assert.assertEquals(0,stat.getEphemeralOwner())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testDataSizeChange['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(name.length(),stat.getDataLength())@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(name.length(),stat.getDataLength())@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(0,stat.getCversion())@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "Assert.assertEquals(0,stat.getEphemeralOwner())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertEquals(0,stat.getCversion())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "zk.setData(name,(name + name).getBytes(),-1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Stat stat@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(stat.getCzxid(),stat.getPzxid())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertEquals(0,stat.getAversion())@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "Assert.assertEquals(1,stat.getVersion())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "zk.getData(name,false,stat)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(0,stat.getVersion())@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(name.length() * 2,stat.getDataLength())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertNotSame(stat.getCzxid(),stat.getMzxid())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(0,stat.getNumChildren())@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "stat = newStat()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(0,stat.getAversion())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(0,stat.getCversion())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "stat = newStat()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(stat.getCtime(),stat.getMtime())@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "String name = \"/foo\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(0,stat.getNumChildren())@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(stat.getCzxid(),stat.getPzxid())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(stat.getCzxid(),stat.getMzxid())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testBasic['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(stat.getCtime(),stat.getMtime())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(stat.getCzxid(),stat.getPzxid())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testBasic['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertEquals(0,stat.getNumChildren())@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertEquals(0,stat.getEphemeralOwner())@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "zk.create(name,name.getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(0,stat.getAversion())@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(0,stat.getVersion())@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "Assert.assertNotSame(stat.getCtime(),stat.getMtime())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "zk.getData(name,false,stat)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(stat.getCzxid(),stat.getMzxid())@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9->22 [style = dashed, label="0"];
1->23 [style = dashed, label="0"];
12->16 [style = dashed, label="0"];
4->6 [style = bold, label=""];
3->20 [style = dashed, label="0"];
5->7 [style = bold, label=""];
18->20 [style = bold, label=""];
14->3 [style = bold, label=""];
8->4 [style = bold, label=""];
4->21 [style = dashed, label="0"];
5->34 [style = solid, label="name"];
12->14 [style = bold, label=""];
10->9 [style = bold, label=""];
1->12 [style = bold, label=""];
36->26 [style = solid, label="stat"];
17->19 [style = bold, label=""];
16->18 [style = bold, label=""];
26->31 [style = bold, label=""];
21->17 [style = bold, label=""];
29->35 [style = bold, label=""];
23->16 [style = bold, label=""];
34->36 [style = bold, label=""];
19->22 [style = bold, label=""];
15->21 [style = bold, label=""];
6->17 [style = dashed, label="0"];
0->8 [style = bold, label=""];
7->11 [style = bold, label=""];
33->28 [style = bold, label=""];
11->2 [style = bold, label=""];
5->26 [style = solid, label="name"];
35->32 [style = bold, label=""];
6->10 [style = bold, label=""];
27->29 [style = bold, label=""];
2->0 [style = solid, label="stat"];
0->15 [style = bold, label=""];
28->37 [style = bold, label=""];
8->15 [style = dashed, label="0"];
30->5 [style = bold, label=""];
36->26 [style = bold, label=""];
10->19 [style = dashed, label="0"];
2->0 [style = bold, label=""];
22->23 [style = bold, label=""];
32->33 [style = bold, label=""];
14->18 [style = dashed, label="0"];
24->5 [style = bold, label=""];
5->7 [style = solid, label="name"];
9->1 [style = bold, label=""];
37->25 [style = bold, label=""];
31->27 [style = bold, label=""];
13->5 [style = bold, label=""];
3->34 [style = bold, label=""];
5->0 [style = solid, label="name"];
}
