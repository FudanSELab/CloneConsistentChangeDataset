digraph {
6 [style = filled, label = "vm0.invoke(\"createPeer\",null)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "vm2.invoke(\"createPeer\",null)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testOnRegionExecutionWithReplicateRegion['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertThat(response.getEntity()).isNotNull()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertCorrectInvocationCount(\"SampleFunction\",4,vm0,vm1,vm2,vm3)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "CloseableHttpResponse response = executeFunctionThroughRestCall(\"SampleFunction\",REPLICATE_REGION_NAME,null,null,null,null)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "vm1.invoke(\"createPeer\",null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertCorrectInvocationCount(\"SampleFunction\",1,vm0,vm1,vm2,vm3)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "vm3.invoke(\"populateRRRegion\",null)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "testOnRegionExecutionWithReplicateRegion['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "createCacheAndRegisterFunction()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertNotNull(response.getEntity())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "restURLs.clear()@@@10@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(response.getStatusLine().getStatusCode()).isEqualTo(200)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertEquals(200,response.getStatusLine().getStatusCode())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "vm3.invoke(\"createPeer\",null)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertNotNull(response.getEntity())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "CloseableHttpResponse response = executeFunctionThroughRestCall(\"SampleFunction\",PR_REGION_NAME,null,null,null,null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "vm3.invoke(\"populateRRRegion\",null)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "vm3.invoke(\"populatePRRegion\",null)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "restURLs.clear()@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "createPeersWithPR(vm0,vm1,vm2,vm3)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testOnRegionExecutionWithPartitionRegion['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19->18 [style = bold, label=""];
10->21 [style = dashed, label="0"];
16->11 [style = bold, label=""];
15->14 [style = bold, label=""];
7->10 [style = bold, label=""];
7->14 [style = dashed, label="0"];
4->15 [style = bold, label=""];
14->10 [style = bold, label=""];
8->12 [style = dashed, label="0"];
4->2 [style = bold, label=""];
3->12 [style = bold, label=""];
13->11 [style = bold, label=""];
17->19 [style = bold, label=""];
1->11 [style = bold, label=""];
21->2 [style = bold, label=""];
2->15 [style = dashed, label="0"];
20->21 [style = bold, label=""];
11->5 [style = bold, label=""];
18->22 [style = bold, label=""];
5->6 [style = bold, label=""];
12->4 [style = bold, label=""];
22->20 [style = bold, label=""];
3->8 [style = bold, label=""];
10->0 [style = bold, label=""];
9->3 [style = bold, label=""];
11->17 [style = bold, label=""];
8->4 [style = bold, label=""];
2->7 [style = bold, label=""];
6->9 [style = bold, label=""];
}
