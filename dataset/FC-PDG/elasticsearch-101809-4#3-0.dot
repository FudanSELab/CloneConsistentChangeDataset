digraph {
14 [style = filled, label = "assertEquals(new Line(new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13b888a,new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13b888f,new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13b8894),wkt.fromWKT(\"linestring (3 1 6, 4 2 5)\"))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(\"multilinestring EMPTY\",wkt.toWKT(MultiLine.EMPTY))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "testBasicSerialization['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(MultiLine.EMPTY,wkt.fromWKT(\"multilinestring EMPTY)\"))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertEquals(\"linestring (3.0 1.0, 4.0 2.0)\",wkt.toWKT(new Line(new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13b8850,new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13b8855)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(\"MULTILINESTRING EMPTY\",wkt.toWKT(MultiLine.EMPTY))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testBasicSerialization['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertEquals(Line.EMPTY,wkt.fromWKT(\"linestring EMPTY)\"))@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "WellKnownText wkt = new WellKnownText(true,new GeographyValidator(true))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testBasicSerialization['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"multilinestring ((3.0 1.0, 4.0 2.0))\",wkt.toWKT(new MultiLine(Collections.singletonList(new Line(new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13b87b1,new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13b87b6)))))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertEquals(MultiLine.EMPTY,wkt.fromWKT(\"MULTILINESTRING EMPTY)\"))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertEquals(new Line(new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13b885f,new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13b8864),wkt.fromWKT(\"linestring (3 1, 4 2)\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(new MultiLine(Collections.singletonList(new Line(new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13b8817,new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13b881c))),wkt.fromWKT(\"MULTILINESTRING ((3 1, 4 2))\"))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(\"linestring (3.0 1.0 5.0, 4.0 2.0 6.0)\",wkt.toWKT(new Line(new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13b8876,new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13b887b,new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13b8880)))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(\"MULTILINESTRING ((3.0 1.0, 4.0 2.0))\",wkt.toWKT(new MultiLine(Collections.singletonList(new Line(new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13b8803,new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13b8808)))))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(\"linestring EMPTY\",wkt.toWKT(Line.EMPTY))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
0->16 [style = dashed, label="0"];
11->12 [style = bold, label=""];
12->16 [style = bold, label=""];
7->4 [style = bold, label=""];
4->12 [style = dashed, label="0"];
4->0 [style = bold, label=""];
6->2 [style = bold, label=""];
3->9 [style = dashed, label="0"];
5->4 [style = bold, label=""];
8->9 [style = bold, label=""];
4->8 [style = bold, label=""];
16->14 [style = bold, label=""];
0->8 [style = dashed, label="0"];
10->2 [style = bold, label=""];
1->2 [style = bold, label=""];
13->15 [style = bold, label=""];
2->7 [style = bold, label=""];
14->13 [style = bold, label=""];
5->7 [style = dashed, label="0"];
2->11 [style = bold, label=""];
2->5 [style = bold, label=""];
}
