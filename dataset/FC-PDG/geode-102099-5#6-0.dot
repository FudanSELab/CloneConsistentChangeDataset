digraph {
24 [style = filled, label = "LocalRegion owner = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "RegionEntryFactory factory@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "factory != null@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "createOwner['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "when(owner.isInitialized()).thenReturn(true)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "when(owner.getScope()).thenReturn(Scope.LOCAL)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "setEntryMap(map)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "boolean withConcurrencyChecks@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "boolean withConcurrencyChecks@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "when(owner.getCachePerfStats()).thenReturn(cachePerfStats)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ConcurrentMapWithReusableEntries map@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "CachePerfStats cachePerfStats = mock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "TestableAbstractRegionMap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "setEntryFactory(factory)@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "initialize(owner,new Attributes(),null,false)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ConcurrentMapWithReusableEntries map@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "return owner@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "boolean withConcurrencyChecks@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "TestableAbstractRegionMap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "doThrow().when(owner).checkEntryNotFound(any())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "when(owner.getEvictionAttributes()).thenReturn(evictionAttributes)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "map != null@@@13@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "super(null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->2 [style = bold, label=""];
14->5 [style = bold, label=""];
11->9 [style = dotted, label="true"];
3->14 [style = bold, label=""];
20->7 [style = bold, label=""];
24->3 [style = solid, label="owner"];
13->5 [style = solid, label="map"];
20->18 [style = dotted, label="true"];
13->22 [style = dashed, label="0"];
13->2 [style = solid, label="map"];
12->4 [style = bold, label=""];
15->23 [style = bold, label=""];
12->4 [style = solid, label="cachePerfStats"];
10->8 [style = bold, label=""];
13->8 [style = solid, label="factory"];
21->22 [style = dotted, label="true"];
11->0 [style = dotted, label="true"];
2->10 [style = bold, label=""];
12->14 [style = solid, label="owner"];
22->23 [style = solid, label="withConcurrencyChecks"];
21->24 [style = bold, label=""];
5->10 [style = bold, label=""];
9->5 [style = solid, label="map"];
15->6 [style = bold, label=""];
19->10 [style = solid, label="factory"];
11->7 [style = bold, label=""];
1->3 [style = bold, label=""];
23->6 [style = bold, label=""];
7->12 [style = bold, label=""];
10->8 [style = dotted, label="true"];
16->3 [style = bold, label=""];
1->17 [style = bold, label=""];
13->10 [style = solid, label="factory"];
9->2 [style = solid, label="map"];
4->15 [style = solid, label="cachePerfStats"];
20->13 [style = dotted, label="true"];
24->12 [style = bold, label=""];
20->19 [style = dotted, label="true"];
4->15 [style = bold, label=""];
11->13 [style = dotted, label="true"];
0->6 [style = solid, label="withConcurrencyChecks"];
17->16 [style = bold, label=""];
6->1 [style = bold, label=""];
19->8 [style = solid, label="factory"];
5->2 [style = dotted, label="true"];
18->6 [style = solid, label="withConcurrencyChecks"];
}
