digraph {
11 [style = filled, label = "assertEquals(2L,channelStateWriter.getLastStartedCheckpointId())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ValidatingCheckpointHandler handler = new ValidatingCheckpointHandler(1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertOutput(sequence1)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "inputGate = createInputGate(3,handler)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertOutput(sequence2)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final BufferOrEvent(( sequence2 = addSequence(inputGate,createBuffer(2),createBuffer(1),createBuffer(0),createBarrier(2,1),createBuffer(1),createBuffer(1),createEndOfPartition(1),createBuffer(0),createBuffer(2),createBarrier(2,2),createBuffer(2),createEndOfPartition(2),createBuffer(0),createEndOfPartition(0))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertInflightData()@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "BufferOrEvent(( sequence = addSequence(inputGate,createBuffer(0),createBuffer(1),createBuffer(2),createBarrier(1,1),createBarrier(1,2),createBarrier(1,0),createBuffer(2),createBuffer(1),createBuffer(0),createBarrier(2,1),createBuffer(1),createBuffer(1),createEndOfPartition(1),createBuffer(0),createBuffer(2),createBarrier(2,2),createBuffer(2),createEndOfPartition(2),createBuffer(0),createEndOfPartition(0))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertInflightData()@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testMultiChannelTrailingInflightData['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertInflightData()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final BufferOrEvent(( sequence1 = addSequence(inputGate,createBuffer(0),createBuffer(1),createBuffer(2),createBarrier(1,1),createBarrier(1,2),createBarrier(1,0))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(2L,channelStateWriter.getLastStartedCheckpointId())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(1L,channelStateWriter.getLastStartedCheckpointId())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testMultiChannelTrailingInflightData['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "inputGate = createInputGate(3,handler,false)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertOutput(sequence)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testEarlyCleanup['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4->15 [style = solid, label="inputGate"];
4->9 [style = bold, label=""];
11->16 [style = bold, label=""];
1->4 [style = bold, label=""];
9->12 [style = solid, label="sequence1"];
4->6 [style = solid, label="inputGate"];
15->13 [style = bold, label=""];
5->12 [style = dashed, label="0"];
4->6 [style = bold, label=""];
1->4 [style = solid, label="handler"];
2->3 [style = bold, label=""];
6->9 [style = dashed, label="0"];
4->9 [style = solid, label="inputGate"];
14->17 [style = bold, label=""];
6->5 [style = solid, label="sequence"];
1->7 [style = bold, label=""];
13->11 [style = bold, label=""];
15->13 [style = solid, label="sequence2"];
8->1 [style = bold, label=""];
6->5 [style = bold, label=""];
5->2 [style = bold, label=""];
1->7 [style = solid, label="handler"];
4->7 [style = dashed, label="0"];
0->1 [style = bold, label=""];
7->6 [style = bold, label=""];
12->14 [style = bold, label=""];
17->15 [style = bold, label=""];
7->6 [style = solid, label="inputGate"];
9->12 [style = bold, label=""];
10->1 [style = bold, label=""];
}
