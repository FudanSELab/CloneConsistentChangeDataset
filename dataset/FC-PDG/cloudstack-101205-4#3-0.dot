digraph {
8 [style = filled, label = "Assert.assertEquals(domain,domainManager.findDomainByIdOrPath(1L,\"\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Mockito.lenient().when(_domainDao.findDomainByPath(Mockito.eq(\"/validDomain/\"))).thenReturn(new DomainVO())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "final DomainVO domain = new DomainVO(\"someDomain\",123,1L,\"network.domain\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(domain,domainManager.findDomainByIdOrPath(1L,\"/validDomain/\"))@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(domain,domainManager.findDomainByIdOrPath(-1L,\"/someDomain/ \"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(domain,domainManager.findDomainByIdOrPath(null,\"/someDomain/\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testFindDomainByIdOrPathValidPathAndInvalidId['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testFindDomainByIdOrPathValidId['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testFindDomainByIdOrPathValidId['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Mockito.when(_domainDao.findDomainByPath(Mockito.eq(\"/someDomain/\"))).thenReturn(domain)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(domain,domainManager.findDomainByIdOrPath(null,\" /someDomain/ \"))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(domain,domainManager.findDomainByIdOrPath(0L,\" /someDomain/\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Mockito.when(_domainDao.findById(1L)).thenReturn(domain)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Mockito.when(_domainDao.findDomainByPath(Mockito.eq(\"/validDomain/\"))).thenReturn(new DomainVO())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(domain,domainManager.findDomainByIdOrPath(1L,\" \"))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(domain,domainManager.findDomainByIdOrPath(1L,\" \"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(domain,domainManager.findDomainByIdOrPath(1L,null))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
1->16 [style = solid, label="domain"];
5->12 [style = dashed, label="0"];
16->11 [style = bold, label=""];
1->14 [style = solid, label="domain"];
3->1 [style = bold, label=""];
15->14 [style = bold, label=""];
4->6 [style = bold, label=""];
7->10 [style = bold, label=""];
1->15 [style = bold, label=""];
1->12 [style = solid, label="domain"];
1->0 [style = solid, label="domain"];
11->12 [style = bold, label=""];
7->4 [style = bold, label=""];
1->15 [style = solid, label="domain"];
1->7 [style = bold, label=""];
10->6 [style = bold, label=""];
13->1 [style = bold, label=""];
1->7 [style = solid, label="domain"];
1->6 [style = solid, label="domain"];
5->2 [style = bold, label=""];
2->0 [style = bold, label=""];
6->16 [style = dashed, label="0"];
8->5 [style = bold, label=""];
6->8 [style = bold, label=""];
7->15 [style = dashed, label="0"];
1->2 [style = solid, label="domain"];
1->11 [style = solid, label="domain"];
8->11 [style = dashed, label="0"];
9->1 [style = bold, label=""];
1->5 [style = solid, label="domain"];
4->10 [style = dashed, label="0"];
1->8 [style = solid, label="domain"];
}
