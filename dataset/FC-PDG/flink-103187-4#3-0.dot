digraph {
6 [style = filled, label = "testContextCorrectLeftTimestamp['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "IntervalJoinOperator<String,TestElem,TestElem,Tuple2<TestElem,TestElem>> op = new IntervalJoinOperator<>(-1,1,true,true,TestElem.serializer(),TestElem.serializer(),new ProcessJoinFunction<TestElem,TestElem,Tuple2<TestElem,TestElem>>(){@Override public void processElement(TestElem left,TestElem right,Context ctx,Collector<Tuple2<TestElem,TestElem>> out){Assert.assertEquals(left.ts,ctx.getLeftTimestamp())}})@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testHarness.setup()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testReturnsCorrectTimestamp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "testHarness.open()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "processElementsAndWatermarks(testHarness)@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testReturnsCorrectTimestamp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
6->1 [style = bold, label=""];
2->1 [style = bold, label=""];
4->0 [style = bold, label=""];
1->4 [style = bold, label=""];
5->1 [style = bold, label=""];
}
