digraph {
12 [style = filled, label = "FlowableRetryTest.AsyncSubscriber<Long> async = new FlowableRetryTest.AsyncSubscriber<>(subscriber)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "timeoutWithRetry['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Subscriber<Long> subscriber = TestHelper.mockSubscriber()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "unsubscribeAfterError['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "o.subscribe(async)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(\"Start 6 threads, retry 5 then fail on 6\",6,so.efforts.get())@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Observer<Long> observer = TestHelper.mockObserver()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "inOrder.verify(subscriber,times(1)).onError(any())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "FlowableRetryTest.AsyncSubscriber<Long> async = new FlowableRetryTest.AsyncSubscriber<Long>(subscriber)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "async.await()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "InOrder inOrder = inOrder(subscriber)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "InOrder inOrder = inOrder(observer)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "FlowableRetryTest.SlowFlowable so = new FlowableRetryTest.SlowFlowable(100,0,\"testUnsubscribeAfterError\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Flowable<Long> f = Flowable.unsafeCreate(so).retry(retry5)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Observable<Long> o = Observable.unsafeCreate(so).timeout(80,TimeUnit.MILLISECONDS).retry(retry5)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "inOrder.verify(observer,times(1)).onError(any())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "ObservableRetryTest.AsyncObserver<Long> async = new ObservableRetryTest.AsyncObserver<Long>(observer)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "f.subscribe(async)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "inOrder.verify(observer,never()).onComplete()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "inOrder.verify(subscriber,never()).onComplete()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "unsubscribeAfterError['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"Only 1 active subscription\",1,so.maxActive.get())@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ObservableRetryTest.SlowObservable so = new ObservableRetryTest.SlowObservable(100,10,\"testTimeoutWithRetry\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->9 [style = bold, label=""];
6->21 [style = dashed, label="0"];
21->16 [style = solid, label="async"];
6->7 [style = solid, label="async"];
7->10 [style = bold, label=""];
16->10 [style = bold, label=""];
15->21 [style = bold, label=""];
7->16 [style = dashed, label="0"];
0->12 [style = solid, label="subscriber"];
2->3 [style = bold, label=""];
14->17 [style = solid, label="observer"];
0->11 [style = bold, label=""];
14->19 [style = bold, label=""];
10->17 [style = bold, label=""];
20->14 [style = bold, label=""];
3->22 [style = dashed, label="0"];
1->0 [style = bold, label=""];
17->22 [style = bold, label=""];
2->17 [style = dashed, label="0"];
12->7 [style = bold, label=""];
12->7 [style = solid, label="async"];
6->12 [style = dashed, label="0"];
0->6 [style = solid, label="subscriber"];
0->14 [style = dashed, label="0"];
14->21 [style = solid, label="observer"];
11->5 [style = bold, label=""];
22->18 [style = bold, label=""];
5->6 [style = bold, label=""];
18->4 [style = bold, label=""];
5->12 [style = bold, label=""];
3->8 [style = bold, label=""];
21->16 [style = bold, label=""];
8->18 [style = dashed, label="0"];
10->2 [style = bold, label=""];
8->4 [style = bold, label=""];
19->15 [style = bold, label=""];
6->7 [style = bold, label=""];
0->2 [style = solid, label="subscriber"];
5->15 [style = dashed, label="0"];
13->0 [style = bold, label=""];
}
