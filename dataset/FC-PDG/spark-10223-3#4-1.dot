digraph {
12 [style = filled, label = "JavaDStream<Tuple2<String,Integer>> stream = JavaTestUtils.attachTestInputStream(ssc,inputData,1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertOrderInvariantEquals(expected,result)@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(expected,result)@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testUpdateStateByKey['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "JavaTestUtils.attachTestOutputStream(updated)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "JavaPairDStream<String,Integer> updated = pairStream.updateStateByKey(new Function2<List<Integer>,Optional<Integer>,Optional<Integer>>(){@Override public Optional<Integer> call(List<Integer> values,Optional<Integer> state){int out = 0if (state.isPresent()) {out += state.get()}for (Integer v : values){out += v}return Optional.of(out)}},new HashPartitioner(1),initialRDD)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "List<List<Tuple2<String,Integer>>> expected = Arrays.asList(Arrays.asList(new Tuple2<>(\"california\",4),new Tuple2<>(\"new york\",5)),Arrays.asList(new Tuple2<>(\"california\",14),new Tuple2<>(\"new york\",9)),Arrays.asList(new Tuple2<>(\"california\",14),new Tuple2<>(\"new york\",9)))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testUpdateStateByKeyWithInitial['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "List<List<Tuple2<String,Integer>>> result = JavaTestUtils.runStreams(ssc,3,3)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "List<List<Tuple2<String,Integer>>> result = JavaTestUtils.runStreams(ssc,3,3)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "List<Tuple2<String,Integer>> initial = Arrays.asList(new Tuple2<>(\"california\",1),new Tuple2<>(\"new york\",2))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "JavaDStream<Tuple2<String,Integer>> stream = JavaTestUtils.attachTestInputStream(ssc,inputData,1)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "JavaPairDStream<String,Integer> updated = pairStream.updateStateByKey(null)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "List<List<Tuple2<String,Integer>>> expected = Arrays.asList(Arrays.asList(new Tuple2<>(\"california\",5),new Tuple2<>(\"new york\",7)),Arrays.asList(new Tuple2<>(\"california\",15),new Tuple2<>(\"new york\",11)),Arrays.asList(new Tuple2<>(\"california\",15),new Tuple2<>(\"new york\",11)))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "JavaTestUtils.attachTestOutputStream(updated)@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "JavaRDD<Tuple2<String,Integer>> tmpRDD = ssc.sparkContext().parallelize(initial)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "List<List<Tuple2<String,Integer>>> inputData = stringIntKVStream@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "JavaPairRDD<String,Integer> initialRDD = JavaPairRDD.fromJavaRDD(tmpRDD)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "JavaPairDStream<String,Integer> pairStream = JavaPairDStream.fromJavaDStream(stream)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "JavaPairDStream<String,Integer> updated = pairStream.updateStateByKey(new Function2<List<Integer>,Optional<Integer>,Optional<Integer>>(){@Override public Optional<Integer> call(List<Integer> values,Optional<Integer> state){int out = 0if (state.isPresent()) {out += state.get()}for (Integer v : values){out += v}return Optional.of(out)}})@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(expected,result)@@@22@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testUpdateStateByKey['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "JavaPairDStream<String,Integer> pairStream = JavaPairDStream.fromJavaDStream(stream)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->10 [style = bold, label=""];
17->14 [style = solid, label="tmpRDD"];
16->18 [style = bold, label=""];
1->8 [style = bold, label=""];
4->6 [style = bold, label=""];
12->21 [style = bold, label=""];
8->19 [style = bold, label=""];
14->20 [style = solid, label="initialRDD"];
18->13 [style = solid, label="result"];
2->3 [style = bold, label=""];
5->2 [style = solid, label="expected"];
12->21 [style = solid, label="stream"];
19->17 [style = bold, label=""];
9->8 [style = bold, label=""];
3->13 [style = dashed, label="0"];
0->4 [style = solid, label="stream"];
6->10 [style = dashed, label="0"];
22->8 [style = bold, label=""];
8->0 [style = solid, label="inputData"];
21->20 [style = bold, label=""];
20->16 [style = bold, label=""];
20->16 [style = solid, label="updated"];
8->5 [style = bold, label=""];
5->0 [style = bold, label=""];
0->4 [style = bold, label=""];
17->14 [style = bold, label=""];
7->2 [style = bold, label=""];
15->13 [style = solid, label="expected"];
18->13 [style = bold, label=""];
10->11 [style = solid, label="updated"];
14->15 [style = bold, label=""];
15->12 [style = bold, label=""];
5->3 [style = solid, label="expected"];
8->12 [style = solid, label="inputData"];
6->7 [style = bold, label=""];
7->2 [style = solid, label="result"];
6->7 [style = solid, label="updated"];
2->3 [style = solid, label="result"];
19->17 [style = solid, label="initial"];
11->7 [style = bold, label=""];
10->11 [style = bold, label=""];
}
