digraph {
0 [style = filled, label = "assertEquals(1,indicesService.indicesRefCount.refCount())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Engine.Searcher searcher = shard.acquireSearcher(\"test\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "node.close()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testCloseWhileOngoingRequest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(1,indicesService.indicesRefCount.refCount())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Node node = startNode()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testCloseWhileOngoingRequestUsesRequestCache['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ElasticsearchAssertions.assertAllSuccessful(node.client().admin().indices().prepareRefresh(\"test\").get())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(0L,cache.count())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "IndicesRequestCache.CacheEntity cacheEntity = new IndicesRequestCache.CacheEntity(){@Override public long ramBytesUsed(){return 42}@Override public void onCached(Key key,BytesReference value){}@Override public boolean isOpen(){return true}@Override public Object getCacheIdentity(){return this}@Override public void onHit(){}@Override public void onMiss(){}@Override public void onRemoval(RemovalNotification<Key,BytesReference> notification){}}@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "node.client().prepareIndex(\"test\").setId(\"1\").setSource(Collections.singletonMap(\"foo\",3L)).get()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(1L,cache.count())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "searcher.close()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "cache.getOrCompute(cacheEntity,null,searcher.getDirectoryReader(),new BytesArray(\"foo\"),null)@@@38@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "node.client().prepareIndex(\"test\").setId(\"1\").setSource(Collections.emptyMap()).get()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertAcked(node.client().admin().indices().prepareCreate(\"test\").setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS,1).put(SETTING_NUMBER_OF_REPLICAS,0).put(IndexModule.INDEX_QUERY_CACHE_EVERYTHING_SETTING.getKey(),true)))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "IndexService indexService = indicesService.iterator().next()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "IndicesRequestCache cache = indicesService.indicesRequestCache@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(0,indicesService.indicesRefCount.refCount())@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertAcked(node.client().admin().indices().prepareCreate(\"test\").setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS,1).put(SETTING_NUMBER_OF_REPLICAS,0)))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(1,searcher.getIndexReader().maxDoc())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testCloseWhileOngoingRequestUsesRequestCache['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertEquals(0L,cache.count())@@@42@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "cache.getOrCompute(cacheEntity,null,searcher.getDirectoryReader(),new BytesArray(\"foo\"))@@@38@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertEquals(2,indicesService.indicesRefCount.refCount())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "IndicesService indicesService = node.injector().getInstance()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "IndexShard shard = indexService.getShard(0)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->3 [style = bold, label=""];
18->3 [style = bold, label=""];
0->9 [style = bold, label=""];
10->20 [style = bold, label=""];
23->5 [style = bold, label=""];
15->7 [style = bold, label=""];
26->5 [style = bold, label=""];
1->0 [style = bold, label=""];
4->2 [style = bold, label=""];
5->14 [style = bold, label=""];
9->10 [style = bold, label=""];
12->24 [style = bold, label=""];
11->9 [style = bold, label=""];
12->6 [style = bold, label=""];
25->7 [style = bold, label=""];
17->19 [style = bold, label=""];
4->22 [style = solid, label="cacheEntity"];
6->15 [style = bold, label=""];
21->5 [style = bold, label=""];
13->17 [style = bold, label=""];
19->1 [style = bold, label=""];
15->25 [style = dashed, label="0"];
6->24 [style = dashed, label="0"];
24->25 [style = bold, label=""];
14->12 [style = bold, label=""];
0->8 [style = bold, label=""];
7->18 [style = bold, label=""];
3->13 [style = bold, label=""];
4->2 [style = solid, label="cacheEntity"];
8->4 [style = bold, label=""];
2->22 [style = dashed, label="0"];
4->22 [style = bold, label=""];
2->11 [style = bold, label=""];
22->11 [style = bold, label=""];
18->16 [style = bold, label=""];
}
