digraph {
24 [style = filled, label = "throw new CloudRuntimeException(\"Zone \" + dc + \"is not basic.\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "networksSize != 1@@@17@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "throw new CloudRuntimeException(\"Found \" + defaultNetworks.size() + \" networks of type \" + defaultTrafficType + \" when expect to find 1\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "dc.isSecurityGroupEnabled()@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "throw new CloudRuntimeException(String.format(\"Can not found security enabled network in SG %s.\",dc.toString()))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "throw new CloudRuntimeException(\"Can not found security enabled network in SG Zone \" + dc)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "return networks.get(0)@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "getDefaultNetworkForBasicZone['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "return defaultNetworks.get(0)@@@19@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "TrafficType defaultTrafficType = TrafficType.Public@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "return defaultNetworks.get(0)@@@20@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "dc.getNetworkType() != NetworkType.Basic@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "getDefaultNetworkForAdvancedZone['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "DataCenter dc@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "throw new CloudRuntimeException(String.format(\"%s is not advanced.\",dc.toString()))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "DataCenter dc@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "int networksSize = defaultNetworks.size()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "List<NetworkVO> defaultNetworks = _networkDao.listByZoneAndTrafficType(dc.getId(),defaultTrafficType)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "return defaultNetworks.get(0)@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "List<NetworkVO> defaultNetworks = _networkDao.listByZoneAndTrafficType(dc.getId(),defaultTrafficType)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "getDefaultNetworkForAdvancedZone['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "CollectionUtils.isEmpty(networks)@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "dc.getNetworkType() != NetworkType.Advanced@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "throw new CloudRuntimeException(String.format(\"Found (%s( networks of type (%s( when expect to find 1.\",networksSize,defaultTrafficType))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "defaultNetworks.size() != 1@@@16@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "throw new CloudRuntimeException(\"Zone \" + dc + \" is not advanced.\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "throw new CloudRuntimeException(\"Found \" + defaultNetworks.size() + \" networks of type \" + defaultTrafficType + \" when expect to find 1\")@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "TrafficType defaultTrafficType = TrafficType.Guest@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "List<NetworkVO> networks = _networkDao.listByZoneSecurityGroup(dc.getId())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "defaultNetworks.size() != 1@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
14->3 [style = bold, label=""];
4->3 [style = bold, label=""];
7->11 [style = bold, label=""];
20->17 [style = bold, label=""];
7->10 [style = dotted, label="true"];
2->20 [style = dashed, label="0"];
9->10 [style = solid, label="networks"];
21->22 [style = solid, label="defaultTrafficType"];
17->18 [style = dotted, label="true"];
10->14 [style = bold, label=""];
5->20 [style = bold, label=""];
23->27 [style = bold, label=""];
26->24 [style = solid, label="dc"];
6->1 [style = dotted, label="true"];
11->18 [style = solid, label="defaultTrafficType"];
7->17 [style = dotted, label="false"];
16->7 [style = bold, label=""];
18->19 [style = bold, label=""];
22->29 [style = bold, label=""];
10->3 [style = bold, label=""];
29->25 [style = bold, label=""];
8->6 [style = bold, label=""];
7->11 [style = dotted, label="false"];
15->6 [style = bold, label=""];
27->24 [style = dotted, label="true"];
0->26 [style = dashed, label="0"];
7->9 [style = dotted, label="true"];
9->10 [style = bold, label=""];
20->18 [style = solid, label="networksSize"];
15->0 [style = dotted, label="true"];
1->7 [style = bold, label=""];
17->19 [style = bold, label=""];
2->12 [style = bold, label=""];
20->17 [style = solid, label="networksSize"];
10->14 [style = dotted, label="true"];
2->13 [style = bold, label=""];
29->28 [style = bold, label=""];
7->9 [style = bold, label=""];
6->1 [style = bold, label=""];
12->13 [style = bold, label=""];
11->12 [style = solid, label="defaultTrafficType"];
11->5 [style = bold, label=""];
5->2 [style = bold, label=""];
23->26 [style = dotted, label="true"];
29->28 [style = dotted, label="true"];
24->21 [style = bold, label=""];
11->5 [style = solid, label="defaultTrafficType"];
7->3 [style = dotted, label="true"];
6->16 [style = bold, label=""];
21->22 [style = bold, label=""];
1->16 [style = dashed, label="0"];
6->27 [style = dashed, label="0"];
1->24 [style = dashed, label="0"];
0->4 [style = solid, label="dc"];
2->12 [style = dotted, label="true"];
0->1 [style = solid, label="dc"];
7->2 [style = dotted, label="false"];
10->4 [style = bold, label=""];
7->20 [style = dotted, label="false"];
28->25 [style = bold, label=""];
8->0 [style = dotted, label="true"];
7->19 [style = dotted, label="false"];
7->13 [style = dotted, label="false"];
27->24 [style = bold, label=""];
4->14 [style = dashed, label="0"];
10->4 [style = dotted, label="true"];
7->5 [style = dotted, label="false"];
6->7 [style = bold, label=""];
21->28 [style = solid, label="defaultTrafficType"];
27->21 [style = bold, label=""];
17->18 [style = bold, label=""];
6->16 [style = dotted, label="true"];
}
