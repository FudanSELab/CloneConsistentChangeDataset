digraph {
21 [style = filled, label = "assertTrue(\"Output.writeTo() must give back the same bytes\",Arrays.equals(referenceBytes,bos.toByteArray()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"Writing an output stream to itself is successful\",testString.concat(testString),output.toByteString())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "ByteString.Output output = ByteString.newOutput()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(\"Output.writeTo() must give back the same bytes\",Arrays.equals(BYTES,bos.toByteArray()))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"Output.reset() resets the output\",ByteString.EMPTY,output.toByteString())@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(\"Writing an output stream to itself is successful\",stringUnderTest.concat(stringUnderTest),output.toByteString())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(\"Output Size returns correct result\",output.size(),stringUnderTest.size())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(\"Writing an output stream to itself is successful\",TEST_STRING.concat(TEST_STRING),output.toByteString())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "TEST_STRING.writeTo(output)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"Output Size returns correct result\",output.size(),testString.size())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testNewOutput['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertEquals(\"Output.reset() resets the output\",EMPTY,output.toByteString())@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testNewOutput['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testString.writeTo(output)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "output.reset()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "output.writeTo(output)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ByteArrayOutputStream bos = new ByteArrayOutputStream()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"Output Size returns correct result\",output.size(),TEST_STRING.size())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertEquals(\"Output.reset() resets the output\",0,output.size())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testNewOutput['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "output.writeTo(bos)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "stringUnderTest.writeTo(output)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
5->10 [style = bold, label=""];
1->4 [style = bold, label=""];
0->15 [style = solid, label="output"];
4->17 [style = dashed, label="0"];
9->18 [style = dashed, label="0"];
16->6 [style = bold, label=""];
0->20 [style = solid, label="output"];
5->14 [style = bold, label=""];
0->5 [style = solid, label="output"];
9->7 [style = bold, label=""];
10->6 [style = bold, label=""];
12->7 [style = bold, label=""];
0->15 [style = bold, label=""];
19->8 [style = bold, label=""];
1->17 [style = bold, label=""];
8->7 [style = solid, label="bos"];
8->0 [style = bold, label=""];
3->9 [style = bold, label=""];
20->18 [style = bold, label=""];
6->1 [style = bold, label=""];
21->5 [style = bold, label=""];
5->16 [style = bold, label=""];
0->3 [style = solid, label="output"];
2->21 [style = dashed, label="0"];
7->2 [style = bold, label=""];
3->20 [style = dashed, label="0"];
7->21 [style = bold, label=""];
3->15 [style = dashed, label="0"];
11->8 [style = bold, label=""];
0->20 [style = bold, label=""];
15->12 [style = bold, label=""];
9->12 [style = dashed, label="0"];
10->16 [style = dashed, label="0"];
13->8 [style = bold, label=""];
18->7 [style = bold, label=""];
14->6 [style = bold, label=""];
10->14 [style = dashed, label="0"];
2->5 [style = bold, label=""];
}
