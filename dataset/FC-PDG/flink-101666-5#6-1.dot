digraph {
16 [style = filled, label = "env.execute()@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "main['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "env.enableCheckpointing(checkpointingInterval)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final String outputPath = args(1(@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final int parallelism = Integer.parseInt(args(0()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final int parallelism = 1@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "String(( args@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "main['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "env.setStateBackend(new FsStateBackend(checkpointPath))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final String checkpointPath = args(0(@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "source.map(new MapFunction<Integer,Tuple2<Integer,Integer>>(){@Override public Tuple2<Integer,Integer> map(Integer value){return new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism),value)}}).keyBy(new KeySelector<Tuple2<Integer,Integer>,Integer>(){@Override public Integer getKey(Tuple2<Integer,Integer> value){return value.f0}}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath,FileSystem.WriteMode.OVERWRITE)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final String checkpointPath = args(1(@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "env.enableCheckpointing(100)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final int checkpointingInterval = Integer.parseInt(args(2()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "main['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "env.setParallelism(parallelism)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "env.setRestartStrategy(RestartStrategies.fixedDelayRestart(1,1000))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "DataStream<Integer> source = env.addSource(new InfiniteIntegerSource())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "env.execute()@@@25@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final String outputPath = args(3(@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "env.setStateBackend(new FsStateBackend(checkpointPath))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "env.getConfig().disableSysoutLogging()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->10 [style = bold, label=""];
8->13 [style = solid, label="args"];
2->19 [style = bold, label=""];
7->1 [style = bold, label=""];
9->0 [style = bold, label=""];
19->20 [style = bold, label=""];
21->15 [style = bold, label=""];
21->8 [style = dotted, label="true"];
4->13 [style = bold, label=""];
13->17 [style = dashed, label="0"];
8->17 [style = solid, label="args"];
10->9 [style = solid, label="checkpointingInterval"];
2->9 [style = bold, label=""];
6->1 [style = solid, label="outputPath"];
12->9 [style = bold, label=""];
17->22 [style = bold, label=""];
15->20 [style = solid, label="checkpointPath"];
10->6 [style = bold, label=""];
3->4 [style = bold, label=""];
8->15 [style = solid, label="args"];
9->2 [style = dashed, label="0"];
1->11 [style = bold, label=""];
13->0 [style = solid, label="checkpointPath"];
0->7 [style = bold, label=""];
6->5 [style = bold, label=""];
12->2 [style = bold, label=""];
15->17 [style = bold, label=""];
22->18 [style = bold, label=""];
14->4 [style = bold, label=""];
8->6 [style = solid, label="args"];
5->12 [style = bold, label=""];
1->16 [style = bold, label=""];
4->12 [style = solid, label="parallelism"];
18->5 [style = bold, label=""];
8->4 [style = solid, label="args"];
14->8 [style = dotted, label="true"];
20->7 [style = bold, label=""];
3->8 [style = dotted, label="true"];
17->1 [style = solid, label="outputPath"];
22->5 [style = solid, label="parallelism"];
8->10 [style = solid, label="args"];
}
