digraph {
12 [style = filled, label = "Flowable<Integer> f = Flowable.unsafeCreate(new Publisher<Integer>(){@Override public void subscribe(final Subscriber<? super Integer> s){Worker inner = Schedulers.newThread().createWorker()final AsyncSubscription as = new AsyncSubscription()as.setSubscription(new BooleanSubscription())as.setResource(inner)s.onSubscribe(as)inner.schedule(new Runnable(){@Override public void run(){try {for (int i = 0 i < 10000 i++){s.onNext(i)}}catch (Exception e) as.dispose()s.onComplete()s.onComplete()s.onComplete()}})}})@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "ts.assertNoErrors()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "int i = 0@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "ts.assertTerminated()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "i < 10@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ts.assertNoErrors()@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(30000,onNextEvents.size())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Flowable<Integer> merge = Flowable.merge(f.onBackpressureBuffer(),f.onBackpressureBuffer(),f.onBackpressureBuffer())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "concurrency['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "int i = 0@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "TestSubscriberEx<Integer> ts = new TestSubscriberEx<>()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ts.assertComplete()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Flowable<Integer> f = Flowable.range(1,10000).subscribeOn(Schedulers.newThread())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(30000,onNextEvents.size())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "TestSubscriber<Integer> ts = new TestSubscriber<>()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "concurrencyWithBrokenOnCompleteContract['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "List<Integer> onNextEvents = ts.values()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "ts.awaitDone(3,TimeUnit.SECONDS)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "i++@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "concurrencyWithBrokenOnCompleteContract['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "ts.awaitDone(5,TimeUnit.SECONDS)@@@38@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "ts.awaitDone(10,TimeUnit.SECONDS)@@@38@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "merge.subscribe(ts)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Flowable<Integer> merge = Flowable.merge(f.onBackpressureBuffer(),f.onBackpressureBuffer(),f.onBackpressureBuffer())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "List<Integer> onNextEvents = ts.values()@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "merge.subscribe(ts)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ts.assertComplete()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11->7 [style = dotted, label="true"];
16->15 [style = bold, label=""];
5->8 [style = bold, label=""];
4->11 [style = solid, label="i"];
8->11 [style = solid, label="i"];
3->17 [style = dashed, label="0"];
24->25 [style = dotted, label="true"];
12->16 [style = dashed, label="0"];
25->23 [style = bold, label=""];
11->10 [style = dotted, label="true"];
11->1 [style = dotted, label="true"];
2->3 [style = bold, label=""];
24->17 [style = dotted, label="true"];
18->11 [style = bold, label=""];
23->26 [style = bold, label=""];
26->18 [style = bold, label=""];
11->9 [style = dotted, label="true"];
7->0 [style = bold, label=""];
11->5 [style = dotted, label="true"];
11->13 [style = dotted, label="true"];
9->7 [style = bold, label=""];
20->25 [style = bold, label=""];
11->2 [style = bold, label=""];
4->8 [style = solid, label="i"];
8->22 [style = bold, label=""];
19->16 [style = bold, label=""];
3->9 [style = bold, label=""];
24->11 [style = dotted, label="true"];
11->2 [style = dotted, label="true"];
3->9 [style = solid, label="ts"];
10->5 [style = bold, label=""];
24->23 [style = dotted, label="true"];
12->4 [style = bold, label=""];
24->21 [style = bold, label=""];
24->26 [style = dotted, label="true"];
15->22 [style = solid, label="i"];
0->1 [style = bold, label=""];
24->22 [style = dotted, label="true"];
15->24 [style = bold, label=""];
14->12 [style = bold, label=""];
11->0 [style = dotted, label="true"];
24->20 [style = dotted, label="true"];
15->24 [style = solid, label="i"];
7->13 [style = dashed, label="0"];
7->25 [style = dashed, label="0"];
11->8 [style = bold, label=""];
17->20 [style = bold, label=""];
11->8 [style = dotted, label="true"];
22->24 [style = bold, label=""];
24->8 [style = dotted, label="true"];
4->11 [style = bold, label=""];
1->10 [style = bold, label=""];
8->11 [style = bold, label=""];
11->3 [style = dotted, label="true"];
21->17 [style = bold, label=""];
24->21 [style = dotted, label="true"];
17->20 [style = solid, label="ts"];
22->24 [style = solid, label="i"];
24->18 [style = dotted, label="true"];
13->0 [style = bold, label=""];
9->13 [style = bold, label=""];
6->12 [style = bold, label=""];
}
