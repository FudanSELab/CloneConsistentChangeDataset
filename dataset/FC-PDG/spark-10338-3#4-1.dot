digraph {
12 [style = filled, label = "getBinary['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertIndexIsValid(ordinal)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "return map@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "return bytes@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "offset < 0@@@5@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final UnsafeMapData map = new UnsafeMapData()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final int size = getElementSize(offset,ordinal)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "map.pointTo(baseObject,baseOffset + offset,size)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final int offset = getElementOffset(ordinal)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Platform.copyMemory(baseObject,baseOffset + offset,bytes,Platform.BYTE_ARRAY_OFFSET,size)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "isNullAt(ordinal)@@@3@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "return null@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final int size = (int)offsetAndSize@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "return null@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "getMap['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "int ordinal@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "getBinary['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "offset < 0@@@5@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final byte(( bytes = new byte((((@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int ordinal@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
7->18 [style = solid, label="offset"];
4->3 [style = bold, label=""];
8->16 [style = dashed, label="0"];
5->10 [style = solid, label="ordinal"];
19->1 [style = solid, label="ordinal"];
5->1 [style = solid, label="ordinal"];
0->5 [style = dotted, label="true"];
2->20 [style = dashed, label="0"];
3->8 [style = solid, label="bytes"];
11->8 [style = solid, label="offset"];
17->1 [style = bold, label=""];
10->14 [style = bold, label=""];
7->6 [style = solid, label="offset"];
7->14 [style = dashed, label="0"];
9->4 [style = bold, label=""];
19->4 [style = solid, label="ordinal"];
4->21 [style = bold, label=""];
5->14 [style = solid, label="ordinal"];
14->15 [style = solid, label="offsetAndSize"];
4->16 [style = solid, label="size"];
5->4 [style = solid, label="ordinal"];
15->3 [style = bold, label=""];
7->4 [style = solid, label="offset"];
1->7 [style = bold, label=""];
5->7 [style = solid, label="ordinal"];
7->8 [style = solid, label="offset"];
11->15 [style = bold, label=""];
15->8 [style = solid, label="size"];
1->13 [style = dashed, label="0"];
6->4 [style = bold, label=""];
14->11 [style = solid, label="offsetAndSize"];
12->10 [style = bold, label=""];
18->4 [style = bold, label=""];
19->7 [style = solid, label="ordinal"];
8->2 [style = bold, label=""];
10->13 [style = bold, label=""];
6->9 [style = dotted, label="true"];
21->20 [style = solid, label="map"];
10->13 [style = dotted, label="true"];
0->1 [style = bold, label=""];
3->8 [style = bold, label=""];
12->5 [style = dotted, label="true"];
4->15 [style = dashed, label="0"];
18->9 [style = dotted, label="true"];
7->6 [style = bold, label=""];
17->19 [style = dotted, label="true"];
18->9 [style = bold, label=""];
7->18 [style = bold, label=""];
21->16 [style = bold, label=""];
9->11 [style = dashed, label="0"];
4->8 [style = solid, label="size"];
3->2 [style = solid, label="bytes"];
6->9 [style = bold, label=""];
16->20 [style = bold, label=""];
5->19 [style = dashed, label="0"];
14->11 [style = bold, label=""];
13->14 [style = bold, label=""];
7->16 [style = solid, label="offset"];
}
