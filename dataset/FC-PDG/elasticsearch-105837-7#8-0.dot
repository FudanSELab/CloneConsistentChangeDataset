digraph {
16 [style = filled, label = "i < results.length()@@@49@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "CountDownLatch latch = new CountDownLatch(1)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "int i = 0@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(context(i(.getScrollId(),results.get(i).getRequestId())@@@56@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(shardSearchFailures(0(.reason(),startsWith(\"java.lang.IllegalStateException: node (node2( is not available\"))@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testSendRequestsToNodes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(context(i(.getContextId(),results.get(i).getContextId())@@@45@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "request.scroll(new Scroll(TimeValue.timeValueMinutes(1)))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ParsedScrollId scrollId = getParsedScrollId(new ScrollIdForNode(null,\"node1\",1),new ScrollIdForNode(null,\"node2\",2),new ScrollIdForNode(null,\"node3\",17),new ScrollIdForNode(null,\"node1\",0),new ScrollIdForNode(null,\"node3\",0))@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(0,shardSearchFailures.length)@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "DiscoveryNodes discoveryNodes = DiscoveryNodes.builder().add(new DiscoveryNode(\"node1\",buildNewFakeTransportAddress(),Version.CURRENT)).add(new DiscoveryNode(\"node2\",buildNewFakeTransportAddress(),Version.CURRENT)).add(new DiscoveryNode(\"node3\",buildNewFakeTransportAddress(),Version.CURRENT)).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "action.run()@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "AtomicInteger movedCounter = new AtomicInteger(0)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "latch.await()@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "context(i(.getNode().equals(\"node2\")@@@51@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "DiscoveryNodes discoveryNodes = DiscoveryNodes.builder().add(new DiscoveryNode(\"node1\",buildNewFakeTransportAddress(),Version.CURRENT)).add(new DiscoveryNode(\"node3\",buildNewFakeTransportAddress(),Version.CURRENT)).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "i++@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testNodeNotAvailable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action = new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId,logger,discoveryNodes,dummyListener(),null,request,null){@Override protected void executeInitialPhase(Transport.Connection connection,InternalScrollSearchRequest internalRequest,SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener){try {assertNotEquals(\"node2 is not available\",\"node2\",connection.getNode().getId())}catch (NullPointerException e) new Thread(null).start()}@Override protected Transport.Connection getConnection(String clusterAlias,DiscoveryNode node){return new SearchAsyncActionTests.MockConnection(node)}@Override protected SearchPhase moveToNextPhase(BiFunction<String,String,DiscoveryNode> clusterNodeLookup){assertEquals(1,movedCounter.incrementAndGet())return new SearchPhase(\"test\"){@Override public void run(){latch.countDown()}}}@Override protected void onFirstPhaseResult(int shardId,SearchAsyncActionTests.TestSearchPhaseResult result){results.setOnce(shardId,result)}}@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "ScrollIdForNode(( context = scrollId.getContext()@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ScrollIdForNode(( context = scrollId.getContext()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testSendRequestsToNodes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "ShardSearchFailure(( shardSearchFailures = action.buildShardFailures()@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action = new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId,logger,discoveryNodes,dummyListener(),null,request,null){@Override protected void executeInitialPhase(Transport.Connection connection,InternalScrollSearchRequest internalRequest,SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener){new Thread(null).start()}@Override protected Transport.Connection getConnection(String clusterAlias,DiscoveryNode node){return new SearchAsyncActionTests.MockConnection(node)}@Override protected SearchPhase moveToNextPhase(BiFunction<String,String,DiscoveryNode> clusterNodeLookup){assertEquals(1,movedCounter.incrementAndGet())return new SearchPhase(\"test\"){@Override public void run(){latch.countDown()}}}@Override protected void onFirstPhaseResult(int shardId,SearchAsyncActionTests.TestSearchPhaseResult result){results.setOnce(shardId,result)}}@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(context(i(.getNode(),results.get(i).node.getId())@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(1,shardSearchFailures.length)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "SearchScrollRequest request = new SearchScrollRequest()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertNull(results.get(i))@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "ParsedScrollId scrollId = getParsedScrollId(new ScrollIdForNode(null,\"node1\",new SearchContextId(UUIDs.randomBase64UUID(),1)),new ScrollIdForNode(null,\"node2\",new SearchContextId(UUIDs.randomBase64UUID(),2)),new ScrollIdForNode(null,\"node3\",new SearchContextId(UUIDs.randomBase64UUID(),17)),new ScrollIdForNode(null,\"node1\",new SearchContextId(UUIDs.randomBase64UUID(),0)),new ScrollIdForNode(null,\"node3\",new SearchContextId(UUIDs.randomBase64UUID(),0)))@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertNotNull(results.get(i))@@@55@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18->3 [style = bold, label=""];
19->21 [style = dotted, label="true"];
5->14 [style = bold, label=""];
26->24 [style = bold, label=""];
19->0 [style = dotted, label="true"];
12->28 [style = bold, label=""];
16->0 [style = solid, label="i"];
7->8 [style = bold, label=""];
13->19 [style = solid, label="i"];
8->5 [style = bold, label=""];
16->19 [style = solid, label="i"];
13->19 [style = bold, label=""];
16->26 [style = bold, label=""];
10->17 [style = bold, label=""];
26->15 [style = dotted, label="false"];
7->20 [style = dashed, label="0"];
4->11 [style = bold, label=""];
16->19 [style = bold, label=""];
25->7 [style = bold, label=""];
27->0 [style = bold, label=""];
8->9 [style = solid, label="discoveryNodes"];
19->0 [style = solid, label="i"];
8->29 [style = dashed, label="0"];
20->8 [style = bold, label=""];
17->12 [style = bold, label=""];
11->18 [style = bold, label=""];
19->0 [style = bold, label=""];
29->5 [style = bold, label=""];
13->16 [style = solid, label="i"];
22->20 [style = bold, label=""];
24->0 [style = bold, label=""];
14->28 [style = solid, label="request"];
19->15 [style = solid, label="i"];
29->28 [style = solid, label="discoveryNodes"];
3->13 [style = bold, label=""];
20->9 [style = solid, label="scrollId"];
26->27 [style = dotted, label="false"];
15->2 [style = bold, label=""];
7->28 [style = solid, label="scrollId"];
21->2 [style = bold, label=""];
26->2 [style = dotted, label="false"];
11->30 [style = bold, label=""];
12->9 [style = bold, label=""];
19->16 [style = bold, label=""];
9->28 [style = dashed, label="0"];
19->16 [style = dotted, label="true"];
23->13 [style = bold, label=""];
26->15 [style = bold, label=""];
0->15 [style = bold, label=""];
28->1 [style = bold, label=""];
19->2 [style = dotted, label="true"];
13->0 [style = solid, label="i"];
26->24 [style = dotted, label="true"];
19->16 [style = solid, label="i"];
16->0 [style = dotted, label="true"];
18->30 [style = dashed, label="0"];
30->23 [style = bold, label=""];
19->15 [style = dotted, label="true"];
7->29 [style = bold, label=""];
0->21 [style = bold, label=""];
1->4 [style = bold, label=""];
2->27 [style = bold, label=""];
0->24 [style = solid, label="i"];
19->24 [style = solid, label="i"];
2->16 [style = bold, label=""];
15->21 [style = dashed, label="0"];
7->9 [style = solid, label="scrollId"];
6->7 [style = bold, label=""];
16->26 [style = dotted, label="true"];
14->10 [style = bold, label=""];
9->1 [style = bold, label=""];
14->9 [style = solid, label="request"];
0->16 [style = solid, label="i"];
0->15 [style = solid, label="i"];
0->16 [style = bold, label=""];
}
