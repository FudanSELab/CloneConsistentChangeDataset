digraph {
9 [style = filled, label = "ingestionSpecs.sort(null)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(6,ingestionSpecs.size())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final List<DimensionsSpec> expectedDimensionsSpec = getExpectedDimensionsSpecForAutoGeneration(keepSegmentGranularity)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final List<IndexIngestionSpec> ingestionSpecs = CompactionTask.createIngestionSchema(toolbox,new SegmentProvider(DATA_SOURCE,COMPACTION_INTERVAL),new PartitionConfigurationManager(null,tuningConfig),null,null,keepSegmentGranularity,null,objectMapper)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertIngestionSchema(ingestionSpecs,expectedDimensionsSpec,AGGREGATORS,Collections.singletonList(COMPACTION_INTERVAL),Granularities.ALL)@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testCreateIngestionSchemaWithMaxTotalRows['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testCreateIngestionSchemaWithMaxTotalRows['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Assert.assertEquals(1,ingestionSpecs.size())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertIngestionSchema(ingestionSpecs,expectedDimensionsSpec,AGGREGATORS,Collections.singletonList(COMPACTION_INTERVAL),tuningConfig,Granularities.ALL)@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertIngestionSchema(ingestionSpecs,expectedDimensionsSpec,AGGREGATORS,SEGMENT_INTERVALS,Granularities.MONTH)@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final List<IndexIngestionSpec> ingestionSpecs = CompactionTask.createIngestionSchema(toolbox,new SegmentProvider(DATA_SOURCE,COMPACTION_INTERVAL),new PartitionConfigurationManager(null,tuningConfig),null,null,keepSegmentGranularity,null,objectMapper,coordinatorClient,segmentLoaderFactory,retryPolicyFactory)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertIngestionSchema(ingestionSpecs,expectedDimensionsSpec,AGGREGATORS,SEGMENT_INTERVALS,tuningConfig,Granularities.MONTH)@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final List<IndexIngestionSpec> ingestionSpecs = CompactionTask.createIngestionSchema(toolbox,new SegmentProvider(SEGMENTS),new PartitionConfigurationManager(null,TUNING_CONFIG),null,null,keepSegmentGranularity,null,objectMapper)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final IndexTuningConfig tuningConfig = new IndexTuningConfig(null,null,500000,1000000L,6L,null,null,null,new IndexSpec(new RoaringBitmapSerdeFactory(true),CompressionStrategy.LZ4,CompressionStrategy.LZF,LongEncodingStrategy.LONGS),5000,true,false,true,false,null,100L,null,null,null,null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "keepSegmentGranularity@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testCreateIngestionSchemaWithCustomSegments['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14->4 [style = solid, label="ingestionSpecs"];
10->0 [style = solid, label="ingestionSpecs"];
1->2 [style = solid, label="expectedDimensionsSpec"];
9->0 [style = dotted, label="true"];
8->10 [style = dashed, label="0"];
1->0 [style = solid, label="expectedDimensionsSpec"];
9->4 [style = bold, label=""];
0->6 [style = dashed, label="0"];
9->2 [style = dotted, label="false"];
15->4 [style = solid, label="expectedDimensionsSpec"];
8->0 [style = solid, label="ingestionSpecs"];
6->0 [style = bold, label=""];
4->2 [style = bold, label=""];
10->2 [style = solid, label="ingestionSpecs"];
9->6 [style = dotted, label="true"];
3->10 [style = solid, label="tuningConfig"];
9->4 [style = dotted, label="false"];
7->3 [style = bold, label=""];
1->9 [style = bold, label=""];
8->1 [style = bold, label=""];
3->10 [style = bold, label=""];
1->12 [style = dotted, label="false"];
5->6 [style = bold, label=""];
12->4 [style = bold, label=""];
1->4 [style = dotted, label="false"];
11->3 [style = bold, label=""];
3->8 [style = bold, label=""];
1->9 [style = dotted, label="true"];
3->2 [style = solid, label="tuningConfig"];
1->12 [style = bold, label=""];
8->2 [style = solid, label="ingestionSpecs"];
9->5 [style = bold, label=""];
1->6 [style = dotted, label="true"];
3->0 [style = solid, label="tuningConfig"];
14->15 [style = bold, label=""];
10->1 [style = bold, label=""];
14->6 [style = solid, label="ingestionSpecs"];
13->14 [style = bold, label=""];
1->5 [style = dotted, label="true"];
15->6 [style = solid, label="expectedDimensionsSpec"];
3->8 [style = solid, label="tuningConfig"];
2->4 [style = dashed, label="0"];
15->1 [style = bold, label=""];
9->5 [style = dotted, label="true"];
}
