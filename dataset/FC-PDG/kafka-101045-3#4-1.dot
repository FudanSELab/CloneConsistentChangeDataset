digraph {
10 [style = filled, label = "final KeyValueIterator<Windowed<Bytes>,byte((> iterator = cachingStore.backwardFindSessions(keyFrom,keyTo,0L,10L)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(messages,hasItem(\"Returning empty iterator for fetch with invalid key range: from > to.\" + \" This may be due to range arguments set in the wrong order, \" + \"or serdes that don't preserve ordering when lexicographically comparing the serialized bytes.\" + \" Note that the built-in numerical serdes do not follow this for negative numbers\"))@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final Bytes keyFrom = Bytes.wrap(Serdes.Integer().serializer().serialize(\"\",-1))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final Bytes keyTo = Bytes.wrap(Serdes.Integer().serializer().serialize(\"\",1))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(messages,hasItem(\"Returning empty iterator for fetch with invalid key range: from > to.\" + \" This may be due to range arguments set in the wrong order, \" + \"or serdes that don't preserve ordering when lexicographically comparing the serialized bytes.\" + \" Note that the built-in numerical serdes do not follow this for negative numbers\"))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "shouldNotThrowInvalidRangeExceptionWhenBackwardWithNegativeFromKey['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "shouldNotThrowInvalidRangeExceptionWithNegativeFromKey['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final KeyValueIterator<Windowed<Bytes>,byte((> iterator = cachingStore.findSessions(keyFrom,keyTo,0L,10L)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertFalse(iterator.hasNext())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "shouldNotThrowInvalidRangeExceptionWithNegativeFromKey['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "final List<String> messages = appender.getMessages()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
8->1 [style = bold, label=""];
6->3 [style = bold, label=""];
2->9 [style = solid, label="messages"];
10->3 [style = bold, label=""];
6->10 [style = solid, label="keyTo"];
4->1 [style = bold, label=""];
5->9 [style = dashed, label="0"];
1->6 [style = bold, label=""];
6->0 [style = bold, label=""];
7->1 [style = bold, label=""];
2->9 [style = bold, label=""];
3->2 [style = bold, label=""];
6->0 [style = solid, label="keyTo"];
2->5 [style = solid, label="messages"];
1->10 [style = solid, label="keyFrom"];
6->10 [style = bold, label=""];
0->10 [style = dashed, label="0"];
1->0 [style = solid, label="keyFrom"];
2->5 [style = bold, label=""];
}
