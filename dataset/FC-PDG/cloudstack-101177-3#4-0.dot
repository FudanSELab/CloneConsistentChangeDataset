digraph {
4 [style = filled, label = "Mockito.doReturn(volumeVoMock).when(volumeApiServiceImpl).retrieveAndValidateVolume(volumeMockId,accountMock)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Mockito.lenient().doNothing().when(volumeApiServiceImpl).cleanVolumesCache(volumeVoMock)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Mockito.doNothing().when(volumeApiServiceImpl).expungeVolumesInSecondaryStorageIfNeeded(volumeVoMock)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "Mockito.lenient().doNothing().when(volumeApiServiceImpl).expungeVolumesInSecondaryStorageIfNeeded(volumeVoMock)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Mockito.verify(volumeDaoMock).remove(volumeMockId)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Mockito.doThrow().when(volumeApiServiceImpl).expungeVolumesInPrimaryStorageIfNeeded(volumeVoMock)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Mockito.doReturn(Volume.State.Ready).when(volumeVoMock).getState()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Mockito.verify(volumeApiServiceImpl,Mockito.times(0)).expungeVolumesInPrimaryStorageIfNeeded(volumeVoMock)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "boolean result = volumeApiServiceImpl.deleteVolume(volumeMockId,accountMock)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Mockito.lenient().doNothing().when(volumeApiServiceImpl).expungeVolumesInPrimaryStorageIfNeeded(volumeVoMock)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Mockito.doNothing().when(volumeApiServiceImpl).destroyVolumeIfPossible(volumeVoMock)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertFalse(result)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Mockito.doNothing().when(volumeApiServiceImpl).cleanVolumesCache(volumeVoMock)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "Mockito.verify(volumeApiServiceImpl).retrieveAndValidateVolume(volumeMockId,accountMock)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Mockito.doReturn(true).when(volumeDaoMock).remove(volumeMockId)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Mockito.doReturn(Volume.State.Allocated).when(volumeVoMock).getState()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Mockito.doNothing().when(volumeApiServiceImpl).expungeVolumesInPrimaryStorageIfNeeded(volumeVoMock)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Mockito.verify(volumeApiServiceImpl).stateTransitTo(volumeVoMock,Volume.Event.DestroyRequested)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Mockito.verify(volumeDaoMock,Mockito.times(0)).remove(volumeMockId)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "deleteVolumeTestVolumeStateReadyThrowingInterruptedException['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "deleteVolumeTestVolumeStateAllocated['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "deleteVolumeTestVolumeStateAllocated['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Mockito.verify(volumeApiServiceImpl,Mockito.times(0)).stateTransitTo(volumeVoMock,Volume.Event.DestroyRequested)@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Mockito.doReturn(true).when(volumeApiServiceImpl).stateTransitTo(volumeVoMock,Volume.Event.DestroyRequested)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Mockito.verify(volumeApiServiceImpl).destroyVolumeIfPossible(volumeVoMock)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertTrue(result)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Mockito.verify(volumeApiServiceImpl,Mockito.times(0)).cleanVolumesCache(volumeVoMock)@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Mockito.verify(volumeApiServiceImpl,Mockito.times(0)).expungeVolumesInSecondaryStorageIfNeeded(volumeVoMock)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->3 [style = bold, label=""];
13->10 [style = bold, label=""];
5->8 [style = bold, label=""];
18->3 [style = bold, label=""];
8->19 [style = dashed, label="0"];
23->27 [style = bold, label=""];
11->1 [style = bold, label=""];
15->25 [style = bold, label=""];
19->20 [style = bold, label=""];
16->6 [style = bold, label=""];
27->3 [style = bold, label=""];
25->6 [style = bold, label=""];
15->16 [style = bold, label=""];
0->20 [style = dashed, label="0"];
26->4 [style = bold, label=""];
1->7 [style = bold, label=""];
22->23 [style = bold, label=""];
3->9 [style = solid, label="result"];
10->2 [style = dashed, label="0"];
2->13 [style = bold, label=""];
6->2 [style = bold, label=""];
21->12 [style = bold, label=""];
8->0 [style = bold, label=""];
3->9 [style = bold, label=""];
5->19 [style = bold, label=""];
20->18 [style = bold, label=""];
24->26 [style = bold, label=""];
12->26 [style = dashed, label="0"];
8->22 [style = dashed, label="0"];
0->14 [style = bold, label=""];
17->12 [style = bold, label=""];
12->4 [style = bold, label=""];
16->9 [style = dashed, label="0"];
13->6 [style = dashed, label="0"];
9->15 [style = bold, label=""];
14->18 [style = dashed, label="0"];
5->22 [style = bold, label=""];
4->5 [style = bold, label=""];
15->16 [style = solid, label="result"];
10->11 [style = bold, label=""];
}
