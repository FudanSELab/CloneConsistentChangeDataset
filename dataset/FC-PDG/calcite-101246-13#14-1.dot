digraph {
5 [style = filled, label = "testProject['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "RelNode root = builder.scan(\"EMP\").project(builder.field(\"DEPTNO\"),builder.cast(builder.field(6),SqlTypeName.SMALLINT),builder.or(builder.equals(builder.field(\"DEPTNO\"),builder.literal(20)),builder.and(builder.literal(null),builder.equals(builder.field(\"DEPTNO\"),builder.literal(10)),builder.and(builder.isNull(builder.field(6)),builder.not(builder.isNotNull(builder.field(7))))),builder.equals(builder.field(\"DEPTNO\"),builder.literal(20)),builder.equals(builder.field(\"DEPTNO\"),builder.literal(30))),builder.alias(builder.isNull(builder.field(2)),\"n2\"),builder.alias(builder.isNotNull(builder.field(3)),\"nn2\"),builder.literal(20),builder.field(6),builder.alias(builder.field(6),\"C\")).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final String expected = \"\" + \"LogicalProject(DEPTNO=($7(, COMM=(CAST($6):SMALLINT NOT NULL(,\" + \" $f2=(OR(=($7, 20), AND(null:NULL, =($7, 10), IS NULL($6),\" + \" IS NULL($7)), =($7, 30))(, n2=(IS NULL($2)(,\" + \" nn2=(IS NOT NULL($3)(, $f5=(20(, COMM0=($6(, C=($6()\" + \" LogicalTableScan(table=((scott, EMP(()\"@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "RelNode root = builder.scan(\"EMP\").project(builder.field(\"DEPTNO\"),builder.cast(builder.field(6),SqlTypeName.SMALLINT),builder.literal(20),builder.field(6),builder.alias(builder.field(6),\"C\")).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testProject['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final String expected = \"\" + \"LogicalProject(DEPTNO=($7(, COMM=(CAST($6):SMALLINT NOT NULL(, $f2=(20(, COMM0=($6(, C=($6()\" + \" LogicalTableScan(table=((scott, EMP(()\"@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testProject2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final RelBuilder builder = RelBuilder.create(config().build())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(root,hasTree(expected))@@@6@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8->0 [style = bold, label=""];
4->2 [style = solid, label="root"];
3->2 [style = solid, label="expected"];
4->3 [style = bold, label=""];
6->2 [style = solid, label="root"];
1->0 [style = bold, label=""];
3->2 [style = bold, label=""];
5->0 [style = bold, label=""];
6->7 [style = bold, label=""];
4->6 [style = dashed, label="0"];
0->4 [style = bold, label=""];
0->6 [style = bold, label=""];
7->2 [style = bold, label=""];
3->7 [style = dashed, label="0"];
7->2 [style = solid, label="expected"];
}
