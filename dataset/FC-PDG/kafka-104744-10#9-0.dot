digraph {
8 [style = filled, label = "FutureCallback<Void> cb = new FutureCallback<>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "PowerMock.verifyAll()@@@13@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testRestartConnectorFailureOnStart['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ExecutionException exception@@@16@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "worker.startConnector(EasyMock.eq(CONNECTOR_NAME),EasyMock.eq(connectorConfig(SourceSink.SOURCE)),EasyMock.anyObject(),EasyMock.eq(herder),EasyMock.eq(TargetState.STARTED))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "cb.get(1000L,TimeUnit.MILLISECONDS)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "EasyMock.expectLastCall()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "herder.restartConnector(CONNECTOR_NAME,cb)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "EasyMock.expectLastCall()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(,exception.getCause().getClass())@@@17@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "testRestartConnector['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "PowerMock.replayAll()@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "EasyMock.expectLastCall().andReturn(true)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "PowerMock.replayAll()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "RuntimeException e = new RuntimeException()@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "EasyMock.expectLastCall().andReturn(false)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "worker.startConnector(EasyMock.eq(new ConnectorConfig(connectorConfig(SourceSink.SOURCE))),EasyMock.anyObject(),EasyMock.eq(herder),EasyMock.eq(TargetState.STARTED))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(e,exception.getCause())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "cb.get(1000L,TimeUnit.MILLISECONDS)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "expectAdd(SourceSink.SOURCE)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "fail()@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "worker.stopConnector(CONNECTOR_NAME)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "EasyMock.expectLastCall().andThrow(e)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "testRestartConnectorFailureOnStart['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "herder.putConnectorConfig(CONNECTOR_NAME,connectorConfig(SourceSink.SOURCE),false,createCallback)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "PowerMock.verifyAll()@@@19@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
5->10 [style = bold, label=""];
19->18 [style = bold, label=""];
25->1 [style = bold, label=""];
7->1 [style = bold, label=""];
20->13 [style = bold, label=""];
8->15 [style = bold, label=""];
4->17 [style = bold, label=""];
0->13 [style = bold, label=""];
9->8 [style = solid, label="cb"];
11->14 [style = bold, label=""];
5->23 [style = dashed, label="0"];
8->15 [style = solid, label="cb"];
3->14 [style = bold, label=""];
3->11 [style = bold, label=""];
6->24 [style = bold, label=""];
6->0 [style = bold, label=""];
21->3 [style = bold, label=""];
9->8 [style = bold, label=""];
15->3 [style = bold, label=""];
16->4 [style = dotted, label="true"];
10->6 [style = bold, label=""];
2->23 [style = bold, label=""];
18->20 [style = bold, label=""];
12->4 [style = dashed, label="0"];
5->6 [style = bold, label=""];
23->19 [style = bold, label=""];
12->14 [style = bold, label=""];
10->0 [style = solid, label="e"];
4->12 [style = bold, label=""];
8->21 [style = bold, label=""];
3->17 [style = bold, label=""];
0->24 [style = dashed, label="0"];
1->2 [style = bold, label=""];
13->9 [style = bold, label=""];
22->1 [style = bold, label=""];
16->4 [style = bold, label=""];
4->12 [style = dotted, label="true"];
2->5 [style = bold, label=""];
24->13 [style = bold, label=""];
}
