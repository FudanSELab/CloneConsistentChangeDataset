digraph {
44 [style = filled, label = "File outDir = new File(StringUtils.format(\"%s/%s\",config.getStorageDirectory(),segmentPath))@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "File outDir = new File(StringUtils.format(\"%s/%s\",config.getStorageDirectory(),segmentPath))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testUsingScheme['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
49 [style = filled, label = "i++@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "i < numberOfSegments@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "DataSegment(( segments = new DataSegment((((@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "File segmentDir = tempFolder.newFolder()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "String segmentPath = pusher.getStorageDir(pushedSegment,false)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertTrue(indexFile.exists())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "Assert.assertEquals(ImmutableMap.of(\"type\",\"hdfs\",\"path\",indexUri),fromDescriptorFileDataSegment.getLoadSpec())@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "Assert.assertEquals(segments(i(.getSize(),pushedSegment.getSize())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "DataSegment segment = pusher.push(segmentDir,segmentToPush,false)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testUsingScheme['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(segmentToPush,segment)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "outDir.setReadOnly()@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "File descriptorFile = new File(StringUtils.format(\"%s/%s/%d_descriptor.json\",storageDirectory,segmentPath,pushedSegment.getShardSpec().getPartitionNum()))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertTrue(descriptorFile.exists())@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "i < numberOfSegments@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "int i = 0@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "indexFile = new File(StringUtils.format(\"%s/%s/%d_index.zip\",storageDirectory,segmentPath,fromDescriptorFileDataSegment.getShardSpec().getPartitionNum()))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertEquals(segments(i(,pushedSegment)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "segments(i( = new DataSegment(\"foo\",Intervals.of(\"2015/2016\"),\"0\",new HashMap<>(),new ArrayList<>(),new ArrayList<>(),new NumberedShardSpec(i,i),0,size)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Files.write(data,tmp)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final File storageDirectory = tempFolder.newFolder()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Assert.fail(\"should not throw exception\")@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final byte(( data = new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a95930@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "final DataSegment pushedSegment = pusher.push(segmentDir,segments(i(,false)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "IOException e@@@46@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "File indexFile = new File(StringUtils.format(\"%s/%s/%d_index.zip\",storageDirectory,segmentPath,segment.getShardSpec().getPartitionNum()))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final int numberOfSegments@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final String segmentPath = pusher.getStorageDir(segment,false)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "File descriptorFile = new File(StringUtils.format(\"%s/%s/%d_descriptor.json\",storageDirectory,segmentPath,segment.getShardSpec().getPartitionNum()))@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "config.setStorageDirectory(scheme != null? StringUtils.format(\"%s://%s\",scheme,storageDirectory.getAbsolutePath()): storageDirectory.getAbsolutePath())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "String indexUri = StringUtils.format(\"%s/%s/%d_index.zip\",FileSystem.newInstance(conf).makeQualified(new Path(config.getStorageDirectory())).toUri().toString(),pusher.getStorageDir(segments(i(,false),segments(i(.getShardSpec().getPartitionNum())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertTrue(indexFile.exists())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "File tmp = new File(segmentDir,\"version.bin\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "outDir.setReadOnly()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "final String scheme@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "Assert.assertEquals(segments(i(,pushedSegment)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "DataSegment fromDescriptorFileDataSegment = objectMapper.readValue(descriptorFile,)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(segments(i(.getSize(),pushedSegment.getSize())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Configuration conf = new Configuration(true)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "pusher.push(segmentDir,segmentToPush,false)@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(segmentToPush.getSize(),segment.getSize())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "int i = 0@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "i++@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "segmentPath = pusher.getStorageDir(fromDescriptorFileDataSegment,false)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "File indexFile = new File(StringUtils.format(\"%s/%s/%d_index.zip\",storageDirectory,segmentPath,pushedSegment.getShardSpec().getPartitionNum()))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "testUsingSchemeForMultipleSegments['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final long size = data.length@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Assert.assertTrue(descriptorFile.exists())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "HdfsDataSegmentPusher pusher = new HdfsDataSegmentPusher(config,conf,new DefaultObjectMapper())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(ImmutableMap.of(\"type\",\"hdfs\",\"path\",indexUri),segment.getLoadSpec())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "String indexUri = StringUtils.format(\"%s/%s/%d_index.zip\",FileSystem.newInstance(conf).makeQualified(new Path(config.getStorageDirectory())).toUri().toString(),pusher.getStorageDir(segmentToPush,false),segmentToPush.getShardSpec().getPartitionNum())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final String scheme@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "HdfsDataSegmentPusherConfig config = new HdfsDataSegmentPusherConfig()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(indexFile.exists())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "pusher.push(segmentDir,segments(i(,false)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertEquals(ImmutableMap.of(\"type\",\"hdfs\",\"path\",indexUri),pushedSegment.getLoadSpec())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "DataSegment segmentToPush = new DataSegment(\"foo\",Intervals.of(\"2015/2016\"),\"0\",new HashMap<>(),new ArrayList<>(),new ArrayList<>(),NoneShardSpec.instance(),0,size)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54->49 [style = dotted, label="true"];
54->56 [style = bold, label=""];
54->35 [style = dotted, label="true"];
14->25 [style = bold, label=""];
0->13 [style = bold, label=""];
25->22 [style = bold, label=""];
38->44 [style = bold, label=""];
49->33 [style = solid, label="i"];
23->48 [style = dashed, label="0"];
10->19 [style = bold, label=""];
4->19 [style = solid, label="segmentDir"];
16->7 [style = bold, label=""];
54->38 [style = dotted, label="true"];
5->2 [style = solid, label="tmp"];
32->34 [style = bold, label=""];
7->52 [style = bold, label=""];
12->9 [style = bold, label=""];
41->51 [style = solid, label="i"];
53->27 [style = bold, label=""];
54->37 [style = dotted, label="true"];
54->31 [style = dotted, label="true"];
54->51 [style = dotted, label="true"];
4->56 [style = solid, label="segmentDir"];
14->17 [style = solid, label="storageDirectory"];
55->47 [style = solid, label="indexUri"];
54->56 [style = dotted, label="true"];
57->39 [style = bold, label=""];
18->9 [style = solid, label="indexUri"];
41->33 [style = solid, label="i"];
53->27 [style = solid, label="i"];
0->30 [style = solid, label="size"];
39->38 [style = bold, label=""];
43->46 [style = dotted, label="true"];
52->51 [style = solid, label="segments"];
41->54 [style = bold, label=""];
55->31 [style = bold, label=""];
41->54 [style = solid, label="i"];
13->14 [style = bold, label=""];
17->21 [style = bold, label=""];
57->44 [style = solid, label="segmentPath"];
54->45 [style = dotted, label="true"];
21->3 [style = bold, label=""];
11->20 [style = solid, label="segmentToPush"];
29->47 [style = bold, label=""];
42->34 [style = solid, label="segmentPath"];
41->49 [style = solid, label="i"];
41->29 [style = solid, label="i"];
30->33 [style = solid, label="segments"];
40->27 [style = solid, label="i"];
57->39 [style = solid, label="segmentPath"];
26->7 [style = bold, label=""];
27->30 [style = bold, label=""];
6->2 [style = solid, label="data"];
52->29 [style = solid, label="segments"];
44->50 [style = bold, label=""];
26->23 [style = dotted, label="true"];
49->54 [style = solid, label="i"];
4->5 [style = solid, label="segmentDir"];
58->48 [style = dotted, label="true"];
4->20 [style = solid, label="segmentDir"];
52->33 [style = solid, label="segments"];
11->18 [style = solid, label="segmentToPush"];
36->54 [style = solid, label="numberOfSegments"];
43->46 [style = bold, label=""];
1->17 [style = bold, label=""];
6->2 [style = bold, label=""];
54->59 [style = dotted, label="true"];
20->18 [style = bold, label=""];
47->57 [style = bold, label=""];
3->10 [style = bold, label=""];
49->55 [style = solid, label="i"];
15->3 [style = solid, label="segmentPath"];
31->51 [style = bold, label=""];
5->6 [style = bold, label=""];
40->30 [style = solid, label="i"];
56->29 [style = solid, label="pushedSegment"];
48->25 [style = solid, label="scheme"];
36->27 [style = solid, label="numberOfSegments"];
28->59 [style = bold, label=""];
49->54 [style = bold, label=""];
22->11 [style = bold, label=""];
11->12 [style = solid, label="segmentToPush"];
54->34 [style = dotted, label="true"];
49->29 [style = solid, label="i"];
30->29 [style = solid, label="segments"];
15->17 [style = solid, label="segmentPath"];
14->39 [style = solid, label="storageDirectory"];
56->42 [style = solid, label="pushedSegment"];
13->22 [style = solid, label="config"];
54->57 [style = dotted, label="true"];
54->44 [style = dotted, label="true"];
52->4 [style = bold, label=""];
1->3 [style = bold, label=""];
0->11 [style = solid, label="size"];
35->32 [style = bold, label=""];
30->56 [style = solid, label="segments"];
30->53 [style = bold, label=""];
7->4 [style = bold, label=""];
20->12 [style = solid, label="segment"];
15->24 [style = solid, label="segmentPath"];
7->22 [style = solid, label="conf"];
4->33 [style = solid, label="segmentDir"];
20->15 [style = solid, label="segment"];
2->0 [style = bold, label=""];
51->37 [style = bold, label=""];
58->7 [style = bold, label=""];
54->50 [style = dotted, label="true"];
54->28 [style = dotted, label="true"];
40->27 [style = bold, label=""];
54->42 [style = dotted, label="true"];
53->30 [style = solid, label="i"];
54->29 [style = dotted, label="true"];
18->8 [style = bold, label=""];
50->33 [style = bold, label=""];
23->25 [style = solid, label="scheme"];
24->1 [style = bold, label=""];
33->49 [style = bold, label=""];
56->51 [style = solid, label="pushedSegment"];
4->5 [style = bold, label=""];
54->32 [style = dotted, label="true"];
8->12 [style = bold, label=""];
30->53 [style = solid, label="i"];
37->42 [style = bold, label=""];
41->56 [style = solid, label="i"];
22->40 [style = bold, label=""];
54->33 [style = dotted, label="true"];
11->20 [style = bold, label=""];
14->24 [style = solid, label="storageDirectory"];
17->34 [style = dashed, label="0"];
52->55 [style = solid, label="segments"];
11->19 [style = solid, label="segmentToPush"];
34->45 [style = bold, label=""];
46->49 [style = bold, label=""];
58->36 [style = dotted, label="true"];
54->39 [style = dotted, label="true"];
45->28 [style = bold, label=""];
30->55 [style = solid, label="segments"];
16->23 [style = dotted, label="true"];
52->56 [style = solid, label="segments"];
42->35 [style = bold, label=""];
27->30 [style = dotted, label="true"];
14->35 [style = solid, label="storageDirectory"];
59->29 [style = bold, label=""];
54->47 [style = dotted, label="true"];
49->56 [style = solid, label="i"];
42->35 [style = solid, label="segmentPath"];
9->15 [style = bold, label=""];
15->24 [style = bold, label=""];
27->41 [style = bold, label=""];
30->51 [style = solid, label="segments"];
14->34 [style = solid, label="storageDirectory"];
28->57 [style = solid, label="fromDescriptorFileDataSegment"];
54->55 [style = dotted, label="true"];
41->55 [style = solid, label="i"];
34->28 [style = solid, label="descriptorFile"];
19->33 [style = dashed, label="0"];
27->53 [style = dotted, label="true"];
49->51 [style = solid, label="i"];
56->55 [style = bold, label=""];
55->37 [style = solid, label="indexUri"];
}
