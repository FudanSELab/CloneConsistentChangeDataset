digraph {
24 [style = filled, label = "ProtoTestEventWrapper.ProtoTestEvent event = ProtoTestEventWrapper.ProtoTestEvent.newBuilder().setDescription(\"description\").setEventType(ProtoTestEventWrapper.ProtoTestEvent.EventCategory.CATEGORY_ONE).setId(4711L).setIsValid(true).setSomeOtherId(4712).setTimestamp(dateTime.toString()).setSomeFloatColumn(47.11F).setSomeIntColumn(815).setSomeLongColumn(816L).build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "verifyNestedData(row,dateTime)@@@7@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "ProtobufInputRowParser parser = new ProtobufInputRowParser(flatParseSpec,decoder,null,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testParseFlatData['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "System.out.println(row)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertDimensionEquals(row,\"someOtherId\",\"4712\")@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ProtoTestEventWrapper.ProtoTestEvent event = ProtoTestEventWrapper.ProtoTestEvent.newBuilder().setDescription(\"description\").setEventType(ProtoTestEventWrapper.ProtoTestEvent.EventCategory.CATEGORY_ONE).setId(4711L).setIsValid(true).setSomeOtherId(4712).setTimestamp(dateTime.toString()).setSomeFloatColumn(47.11F).setSomeIntColumn(815).setSomeLongColumn(816L).setFoo(ProtoTestEventWrapper.ProtoTestEvent.Foo.newBuilder().setBar(\"baz\")).addBar(ProtoTestEventWrapper.ProtoTestEvent.Foo.newBuilder().setBar(\"bar0\")).addBar(ProtoTestEventWrapper.ProtoTestEvent.Foo.newBuilder().setBar(\"bar1\")).build()@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ProtobufInputRowParser parser = new ProtobufInputRowParser(parseSpec,decoder,null,null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertDimensionEquals(row,\"description\",\"description\")@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(47.11F,row.getMetric(\"someFloatColumn\").floatValue(),0.0)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertDimensionEquals(row,\"eventType\",ProtoTestEventWrapper.ProtoTestEvent.EventCategory.CATEGORY_ONE.name())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(816.0F,row.getMetric(\"someLongColumn\").floatValue(),0.0)@@@17@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "DateTime dateTime = new DateTime(2012,7,12,9,30,ISOChronology.getInstanceUTC())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testParseNestedData['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ProtoTestEventWrapper.ProtoTestEvent event = buildNestedData(dateTime)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertDimensionEquals(row,\"isValid\",\"true\")@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertDimensionEquals(row,\"bar0\",\"bar0\")@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(dateTime.getMillis(),row.getTimestampFromEpoch())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "InputRow row = parser.parseBatch(ByteBuffer.wrap(out.toByteArray())).get(0)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testParseNestedData['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertDimensionEquals(row,\"id\",\"4711\")@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "event.writeTo(out)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "InputRow row = parser.parseBatch(toByteBuffer(event)).get(0)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Assert.assertEquals(815.0F,row.getMetric(\"someIntColumn\").floatValue(),0.0)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ByteArrayOutputStream out = new ByteArrayOutputStream()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertDimensionEquals(row,\"foobar\",\"baz\")@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11->16 [style = bold, label=""];
4->3 [style = bold, label=""];
23->25 [style = bold, label=""];
17->5 [style = bold, label=""];
0->9 [style = bold, label=""];
2->20 [style = bold, label=""];
5->12 [style = solid, label="row"];
5->0 [style = solid, label="row"];
15->7 [style = bold, label=""];
21->19 [style = bold, label=""];
7->10 [style = bold, label=""];
5->13 [style = solid, label="row"];
16->17 [style = bold, label=""];
5->14 [style = bold, label=""];
5->6 [style = solid, label="row"];
25->2 [style = bold, label=""];
0->15 [style = bold, label=""];
3->0 [style = bold, label=""];
9->6 [style = bold, label=""];
5->22 [style = solid, label="row"];
20->21 [style = bold, label=""];
8->1 [style = bold, label=""];
24->16 [style = bold, label=""];
21->19 [style = solid, label="row"];
5->4 [style = solid, label="row"];
5->9 [style = solid, label="row"];
12->4 [style = bold, label=""];
18->1 [style = bold, label=""];
2->20 [style = solid, label="dateTime"];
6->13 [style = bold, label=""];
14->12 [style = bold, label=""];
11->24 [style = dashed, label="0"];
1->2 [style = bold, label=""];
13->15 [style = bold, label=""];
2->24 [style = bold, label=""];
22->14 [style = bold, label=""];
1->25 [style = dashed, label="0"];
5->22 [style = bold, label=""];
5->3 [style = solid, label="row"];
2->11 [style = bold, label=""];
16->17 [style = solid, label="out"];
2->19 [style = solid, label="dateTime"];
}
