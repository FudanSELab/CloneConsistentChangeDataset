digraph {
0 [style = filled, label = "List<MatchedResource> found = resourceMatcher.find(Arrays.asList(new File(\"src/test/resources\")))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(found).areNot(new Condition<MatchedResource>(){@Override public boolean matches(MatchedResource value){return value.getFile().getName().equals(\"foo.jar\")}})@@@5@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "excludedWins['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "List<MatchedResource> found = resourceMatcher.find(Arrays.asList(new File(\"src/test/resources/templates\"),new File(\"src/test/resources/foo.jar\")))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "jarFileAlwaysMatches['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "excludedWins['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ResourceMatcher resourceMatcher = new ResourceMatcher(Arrays.asList(\"*\"),Arrays.asList(\"**/*.jar\"))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(found).areAtLeastOne(new Condition<MatchedResource>(){@Override public boolean matches(MatchedResource value){return value.getFile().getName().equals(\"foo.jar\") && value.isRoot()}})@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
5->7 [style = bold, label=""];
6->1 [style = bold, label=""];
4->1 [style = bold, label=""];
1->0 [style = bold, label=""];
0->5 [style = dashed, label="0"];
3->7 [style = dashed, label="0"];
2->1 [style = bold, label=""];
}
