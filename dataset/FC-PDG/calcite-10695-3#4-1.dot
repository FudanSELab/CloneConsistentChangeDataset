digraph {
4 [style = filled, label = "RexNode expr = isNotNull(coalesce(unaryPlus(vInt(1)),vIntNotNull(0)))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(s,is(trueLiteral))@@@6@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "RexNode s = simplify.simplifyUnknownAs(expr,RexUnknownAs.UNKNOWN)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testIsNullSimplificationWithUnaryPlus['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testIsNullSimplificationWithIsDistinctFrom['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "RexNode expr = isNotNull(case_(vBool(),isDistinctFrom(falseLiteral,vBoolNotNull(0)),vBoolNotNull(2)))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(expr.isAlwaysTrue(),is(true))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testIsNullSimplificationWithUnaryPlus['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0->3 [style = bold, label=""];
0->1 [style = solid, label="s"];
6->0 [style = bold, label=""];
7->6 [style = bold, label=""];
3->1 [style = bold, label=""];
4->6 [style = dashed, label="0"];
2->4 [style = bold, label=""];
4->0 [style = solid, label="expr"];
5->4 [style = bold, label=""];
6->0 [style = solid, label="expr"];
4->0 [style = bold, label=""];
}
