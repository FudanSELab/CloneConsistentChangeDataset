digraph {
11 [style = filled, label = "Assert.assertEquals(Integer.toString((numResults + 1) * 5),Iterables.getOnlyElement(row.getDimension(\"score\")))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertResult['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testMultiValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final InputEntityReader reader = format.createReader(INPUT_ROW_SCHEMA,source,null)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ByteEntity source@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final InputEntityReader reader = format.createReader(INPUT_ROW_SCHEMA,source,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final CsvInputFormat format = new CsvInputFormat(ImmutableList.of(),\"|\",null,true,0)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "final ByteEntity source = writeData(ImmutableList.of(\"ts,name,score\",\"2019-01-01T00:00:10Z,name_1,5|1\",\"2019-01-01T00:00:20Z,name_2,10|2\",\"2019-01-01T00:00:30Z,name_3,15|3\"))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "numResults++@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(ImmutableList.of(Integer.toString((numResults + 1) * 5),Integer.toString(numResults + 1)),row.getDimension(\"score\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(3,numResults)@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "CsvInputFormat format@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final CsvInputFormat format = new CsvInputFormat(ImmutableList.of(),\"|\",true,0)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(3,numResults)@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "int numResults = 0@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "iterator.hasNext()@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final InputRow row = iterator.next()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(StringUtils.format(\"name_%d\",numResults + 1),Iterables.getOnlyElement(row.getDimension(\"name\")))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(DateTimes.of(StringUtils.format(\"2019-01-01T00:00:%02dZ\",(numResults + 1) * 10)),row.getTimestamp())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testMultiValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7->13 [style = bold, label=""];
4->10 [style = bold, label=""];
5->2 [style = solid, label="numResults"];
2->11 [style = solid, label="numResults"];
4->5 [style = dotted, label="true"];
2->4 [style = solid, label="numResults"];
2->5 [style = solid, label="numResults"];
4->6 [style = bold, label=""];
4->10 [style = dotted, label="true"];
13->2 [style = solid, label="format"];
9->4 [style = bold, label=""];
2->3 [style = bold, label=""];
9->11 [style = dotted, label="true"];
15->18 [style = dotted, label="true"];
14->5 [style = solid, label="numResults"];
4->11 [style = dotted, label="true"];
5->11 [style = solid, label="numResults"];
7->0 [style = bold, label=""];
2->10 [style = solid, label="numResults"];
2->9 [style = bold, label=""];
0->2 [style = solid, label="format"];
15->19 [style = bold, label=""];
14->4 [style = solid, label="numResults"];
1->7 [style = bold, label=""];
14->11 [style = solid, label="numResults"];
12->7 [style = bold, label=""];
9->16 [style = bold, label=""];
11->2 [style = bold, label=""];
14->2 [style = solid, label="numResults"];
9->11 [style = solid, label="numResults"];
13->11 [style = solid, label="format"];
15->17 [style = dotted, label="true"];
9->6 [style = solid, label="numResults"];
14->10 [style = solid, label="numResults"];
3->5 [style = bold, label=""];
7->8 [style = solid, label="source"];
4->3 [style = dotted, label="true"];
19->14 [style = bold, label=""];
17->19 [style = solid, label="source"];
9->5 [style = solid, label="numResults"];
5->6 [style = solid, label="numResults"];
9->2 [style = dotted, label="true"];
5->4 [style = bold, label=""];
0->13 [style = dashed, label="0"];
0->8 [style = bold, label=""];
8->9 [style = bold, label=""];
9->3 [style = solid, label="numResults"];
9->5 [style = bold, label=""];
9->4 [style = dotted, label="true"];
18->10 [style = solid, label="format"];
14->9 [style = bold, label=""];
9->16 [style = dotted, label="true"];
13->8 [style = bold, label=""];
16->4 [style = bold, label=""];
5->3 [style = solid, label="numResults"];
9->10 [style = dotted, label="true"];
0->11 [style = solid, label="format"];
9->2 [style = solid, label="numResults"];
4->2 [style = dotted, label="true"];
3->11 [style = dashed, label="0"];
10->11 [style = bold, label=""];
18->4 [style = solid, label="format"];
}
