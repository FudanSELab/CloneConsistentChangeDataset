digraph {
19 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"ID\",30)),SPEC,false).eval(FILE)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertTrue(\"Should read: id equal to lower bound\",shouldRead)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(\"Should read: id above upper bound\",shouldRead)@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "boolean shouldRead = new InclusiveManifestEvaluator(SPEC,not(equal(\"ID\",5)),false).eval(FILE)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"ID\",29)),SPEC,false).eval(FILE)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "testNot['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,not(equal(\"ID\",75)),false).eval(FILE)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Assert.assertTrue(\"Should read: id below lower bound\",shouldRead)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,not(equal(\"ID\",29)),false).eval(FILE)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,not(equal(\"ID\",85)),false).eval(FILE)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,not(equal(\"ID\",30)),false).eval(FILE)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "testCaseInsensitiveIntegerNotEqRewritten['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"ID\",85)),SPEC,false).eval(FILE)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"ID\",75)),SPEC,false).eval(FILE)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,not(equal(\"ID\",79)),false).eval(FILE)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Assert.assertTrue(\"Should read: id below lower bound\",shouldRead)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"ID\",79)),SPEC,false).eval(FILE)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,not(greaterThan(\"id\",5))).eval(FILE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"ID\",5)),SPEC,false).eval(FILE)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "Assert.assertTrue(\"Should read: not(false)\",shouldRead)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertTrue(\"Should read: id between lower and upper bounds\",shouldRead)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testCaseInsensitiveIntegerNotEqRewritten['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,not(equal(\"ID\",80)),false).eval(FILE)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Assert.assertTrue(\"Should read: id above upper bound\",shouldRead)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertTrue(\"Should read: id equal to upper bound\",shouldRead)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(not(equal(\"ID\",80)),SPEC,false).eval(FILE)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "Assert.assertFalse(\"Should skip: not(true)\",shouldRead)@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "boolean shouldRead = new InclusiveManifestEvaluator(SPEC,not(lessThan(\"id\",5))).eval(FILE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->16 [style = bold, label=""];
26->27 [style = solid, label="shouldRead"];
5->10 [style = bold, label=""];
18->14 [style = solid, label="shouldRead"];
12->23 [style = dashed, label="0"];
0->4 [style = solid, label="shouldRead"];
3->26 [style = dashed, label="0"];
16->8 [style = bold, label=""];
20->9 [style = bold, label=""];
25->23 [style = bold, label=""];
7->16 [style = dashed, label="0"];
13->20 [style = dashed, label="0"];
25->23 [style = solid, label="shouldRead"];
4->13 [style = bold, label=""];
1->19 [style = dashed, label="0"];
12->15 [style = bold, label=""];
23->26 [style = bold, label=""];
21->4 [style = solid, label="shouldRead"];
3->6 [style = bold, label=""];
19->11 [style = bold, label=""];
15->6 [style = bold, label=""];
16->8 [style = solid, label="shouldRead"];
6->19 [style = bold, label=""];
10->12 [style = solid, label="shouldRead"];
20->9 [style = solid, label="shouldRead"];
7->8 [style = bold, label=""];
11->2 [style = bold, label=""];
11->18 [style = bold, label=""];
1->11 [style = bold, label=""];
14->7 [style = bold, label=""];
8->0 [style = bold, label=""];
6->1 [style = bold, label=""];
26->27 [style = bold, label=""];
17->12 [style = bold, label=""];
17->12 [style = solid, label="shouldRead"];
0->4 [style = bold, label=""];
13->9 [style = solid, label="shouldRead"];
10->12 [style = bold, label=""];
24->25 [style = bold, label=""];
0->21 [style = dashed, label="0"];
6->27 [style = dashed, label="0"];
2->14 [style = bold, label=""];
4->20 [style = bold, label=""];
2->14 [style = solid, label="shouldRead"];
10->17 [style = dashed, label="0"];
3->6 [style = solid, label="shouldRead"];
1->11 [style = solid, label="shouldRead"];
8->21 [style = bold, label=""];
22->17 [style = bold, label=""];
3->15 [style = dashed, label="0"];
2->18 [style = dashed, label="0"];
19->11 [style = solid, label="shouldRead"];
12->3 [style = bold, label=""];
13->9 [style = bold, label=""];
21->4 [style = bold, label=""];
18->14 [style = bold, label=""];
7->8 [style = solid, label="shouldRead"];
10->25 [style = dashed, label="0"];
15->6 [style = solid, label="shouldRead"];
}
