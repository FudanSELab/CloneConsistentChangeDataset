digraph {
29 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(3)))@@@22@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "assertTrue(tmd.getEndpoint(keyTokens.get(1)).equals(hosts.get(2)))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(3)))@@@36@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(3))))@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertTrue(tmd.isMember(hosts.get(2)))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "List<InetAddress> hosts = new ArrayList<InetAddress>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertTrue(tmd.isMember(hosts.get(3)))@@@37@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "assertTrue(tmd.getEndpoint(endpointTokens.get(2)) == null)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.bootstrapping(Collections.singleton(keyTokens.get(4))))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(3),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(1))))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertTrue(tmd.isMember(hosts.get(3)))@@@42@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertTrue(tmd.isLeaving(hosts.get(2)))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(3)))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "TokenMetadata tmd = ss.getTokenMetadata()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(2)))@@@26@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(2)))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "testStateJumpToLeaving['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.bootstrapping(Collections.singleton(keyTokens.get(3))))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@35@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(Collections.singleton(keyTokens.get(0))))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(3)))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(3)))@@@23@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().isEmpty())@@@45@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "ArrayList<Token> keyTokens = new ArrayList<Token>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(3)).equals(hosts.get(2)))@@@29@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(Collections.singleton(endpointTokens.get(2))))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@28@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(3))))@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(3)).equals(keyTokens.get(2)))@@@44@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(keyTokens.get(3))))@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "Util.createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,hostIds,6)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ArrayList<Token> endpointTokens = new ArrayList<Token>()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().size() == 1)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "ss.onChange(hosts.get(3),ApplicationState.STATUS,valueFactory.bootstrapping(Collections.singleton(keyTokens.get(1))))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
57 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.left(Collections.singleton(keyTokens.get(1)),Gossiper.computeExpireTime()))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "testStateJumpToBootstrap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)) == null)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(2)))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(3)))@@@41@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(3)).equals(hosts.get(2)))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Util.createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,hostIds,7)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testStateJumpToBootstrap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(3),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(2))))@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
62 [style = filled, label = "assertTrue(tmd.isLeaving(hosts.get(2)))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "IPartitioner partitioner = new RandomPartitioner()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "ss.onChange(hosts.get(3),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(keyTokens.get(2))))@@@38@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
65 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.bootstrapping(Collections.singleton(keyTokens.get(1)),hostIds.get(2)))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(0)))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().isEmpty())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(3)))@@@43@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(3)))@@@38@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(4))))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
66 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertTrue(tmd.isMember(hosts.get(2)))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "StorageService ss = StorageService.instance@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(Collections.singleton(keyTokens.get(1))))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "List<UUID> hostIds = new ArrayList<UUID>()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.bootstrapping(Collections.singleton(keyTokens.get(4)),hostIds.get(2)))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@27@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "tmd.clearUnsafe()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32->35 [style = bold, label=""];
14->24 [style = bold, label=""];
15->58 [style = dashed, label="0"];
62->3 [style = bold, label=""];
37->27 [style = bold, label=""];
1->58 [style = solid, label="keyTokens"];
20->15 [style = solid, label="hosts"];
34->15 [style = bold, label=""];
1->20 [style = bold, label=""];
58->60 [style = bold, label=""];
19->36 [style = bold, label=""];
38->31 [style = bold, label=""];
24->43 [style = bold, label=""];
30->6 [style = bold, label=""];
45->48 [style = bold, label=""];
1->15 [style = solid, label="keyTokens"];
9->16 [style = bold, label=""];
13->1 [style = bold, label=""];
29->18 [style = bold, label=""];
34->58 [style = bold, label=""];
7->9 [style = bold, label=""];
34->58 [style = solid, label="hostIds"];
49->39 [style = bold, label=""];
31->64 [style = dashed, label="0"];
24->43 [style = dashed, label="0"];
17->14 [style = bold, label=""];
43->53 [style = bold, label=""];
27->7 [style = bold, label=""];
13->58 [style = solid, label="endpointTokens"];
35->45 [style = bold, label=""];
59->67 [style = bold, label=""];
11->28 [style = bold, label=""];
15->38 [style = bold, label=""];
16->40 [style = bold, label=""];
54->49 [style = bold, label=""];
42->46 [style = bold, label=""];
21->0 [style = bold, label=""];
5->23 [style = bold, label=""];
64->12 [style = bold, label=""];
51->54 [style = bold, label=""];
52->9 [style = bold, label=""];
40->51 [style = bold, label=""];
20->34 [style = bold, label=""];
12->55 [style = bold, label=""];
60->64 [style = bold, label=""];
65->66 [style = bold, label=""];
34->15 [style = solid, label="hostIds"];
8->22 [style = bold, label=""];
36->46 [style = dashed, label="0"];
55->65 [style = bold, label=""];
8->50 [style = dashed, label="0"];
25->26 [style = bold, label=""];
2->33 [style = bold, label=""];
22->17 [style = bold, label=""];
38->60 [style = dashed, label="0"];
56->33 [style = bold, label=""];
11->58 [style = solid, label="partitioner"];
46->44 [style = bold, label=""];
13->15 [style = solid, label="endpointTokens"];
8->57 [style = dashed, label="0"];
23->32 [style = bold, label=""];
0->11 [style = bold, label=""];
31->12 [style = bold, label=""];
35->25 [style = bold, label=""];
32->45 [style = dashed, label="0"];
67->63 [style = bold, label=""];
3->8 [style = bold, label=""];
33->58 [style = solid, label="ss"];
12->3 [style = bold, label=""];
63->61 [style = bold, label=""];
41->33 [style = bold, label=""];
33->15 [style = solid, label="ss"];
48->30 [style = bold, label=""];
19->42 [style = dashed, label="0"];
61->62 [style = bold, label=""];
3->50 [style = bold, label=""];
36->10 [style = bold, label=""];
11->28 [style = solid, label="partitioner"];
53->5 [style = bold, label=""];
28->13 [style = bold, label=""];
24->29 [style = bold, label=""];
6->19 [style = bold, label=""];
26->30 [style = bold, label=""];
4->37 [style = bold, label=""];
10->42 [style = bold, label=""];
50->47 [style = bold, label=""];
18->5 [style = bold, label=""];
44->52 [style = bold, label=""];
20->58 [style = solid, label="hosts"];
10->4 [style = bold, label=""];
11->15 [style = solid, label="partitioner"];
3->57 [style = bold, label=""];
57->22 [style = bold, label=""];
47->17 [style = bold, label=""];
33->21 [style = bold, label=""];
66->59 [style = bold, label=""];
}
