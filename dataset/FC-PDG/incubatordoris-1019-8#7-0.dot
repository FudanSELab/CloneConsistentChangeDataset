digraph {
51 [style = filled, label = "Assert.assertEquals(sql,desc.toString())@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "params.add(new StringLiteral(\"-\"))@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "desc.analyze(\"testDb\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testNegMerge['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(\"APPEND DATA INFILE ('abc.txt', 'bcd.txt') NEGATIVE INTO TABLE testTable\" + \" COLUMNS TERMINATED BY '' (col1, col2)\",desc.toString())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "desc.analyze(\"testDb\")@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "params.add(new SlotRef(null,\"k2\"))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "predicate = new BinaryPredicate(Operator.EQ,new SlotRef(null,\"k1\"),new FunctionCallExpr(\"replace_value\",params))@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "desc.analyze(\"testDb\")@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "String sql = \"APPEND DATA INFILE ('abc.txt') INTO TABLE testTable PARTITIONS (p1, p2) (k2, k3)\" + \" SET (`k1` = alignment_timestamp('day', `k2`))\"@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "params.add(new StringLiteral(\"10\"))@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "desc = new DataDescription(\"testTable\",new PartitionNames(false,Lists.newArrayList(\"p1\",\"p2\")),Lists.newArrayList(\"abc.txt\"),null,null,null,false,null)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "List<Expr> params = Lists.newArrayList()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testNormal['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertEquals(\"APPEND DATA INFILE ('abc.txt') INTO TABLE testTable PARTITIONS (p1, p2)\",desc.toString())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "desc = new DataDescription(\"testTable\",new PartitionNames(false,Lists.newArrayList(\"p1\",\"p2\")),Lists.newArrayList(\"abc.txt\"),Lists.newArrayList(\"k2\",\"k3\"),null,null,false,Lists.newArrayList((Expr)predicate))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "desc.analyze(\"testDb\")@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "predicate = new BinaryPredicate(Operator.EQ,new SlotRef(null,\"k1\"),new FunctionCallExpr(\"bitmap_dict\",params))@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "params.clear()@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "desc = new DataDescription(\"testTable\",new PartitionNames(false,Lists.newArrayList(\"p1\",\"p2\")),Lists.newArrayList(\"abc.txt\"),Lists.newArrayList(\"k2\",\"k3\"),null,null,false,Lists.newArrayList((Expr)predicate))@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "desc = new DataDescription(\"testTable\",null,Lists.newArrayList(\"abc.txt\",\"bcd.txt\"),Lists.newArrayList(\"col1\",\"col2\"),new ColumnSeparator(\"\"),null,true,null)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertEquals(\",\",desc.getColumnSeparator())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "Assert.assertEquals(\"1 = 1\",desc.getWhereExpr().toSql())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "desc = new DataDescription(\"testTable\",new PartitionNames(false,Lists.newArrayList(\"p1\",\"p2\")),Lists.newArrayList(\"abc.txt\"),Lists.newArrayList(\"k2\",\"k3\"),null,null,false,Lists.newArrayList((Expr)predicate))@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "DataDescription desc = new DataDescription(\"testTable\",null,Lists.newArrayList(\"abc.txt\"),Lists.newArrayList(\"col1\",\"col2\"),new Separator(\",\"),\"csv\",null,true,null,null,whereExpr,LoadTask.MergeType.MERGE,whereExpr,null)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "desc = new DataDescription(\"testTable\",new PartitionNames(false,Lists.newArrayList(\"p1\",\"p2\")),\"testHiveTable\",false,Lists.newArrayList(predicate),null,LoadTask.MergeType.APPEND,null)@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "DataDescription desc = new DataDescription(\"testTable\",null,Lists.newArrayList(\"abc.txt\"),null,null,null,false,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(\"APPEND DATA INFILE ('abc.txt') NEGATIVE INTO TABLE testTable\",desc.toString())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(\"testTable\",desc.getTableName())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Expr whereExpr = new BinaryPredicate(BinaryPredicate.Operator.EQ,new IntLiteral(1),new IntLiteral(1))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "Assert.assertEquals(sql,desc.toSql())@@@66@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "Assert.assertEquals(sql,desc.toString())@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "desc = new DataDescription(\"testTable\",null,Lists.newArrayList(\"abc.txt\",\"bcd.txt\"),Lists.newArrayList(\"col1\",\"col2\"),new ColumnSeparator(\"\x01\"),null,true,null)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "Assert.assertEquals(\"1 = 1\",desc.getDeleteCondition().toSql())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(\"APPEND DATA INFILE ('abc.txt') NEGATIVE INTO TABLE testTable (col1, col2)\",desc.toString())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(\"APPEND DATA INFILE ('abc.txt', 'bcd.txt') NEGATIVE INTO TABLE testTable\" + \" COLUMNS TERMINATED BY '\x01' (col1, col2)\",desc.toString())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "desc = new DataDescription(\"testTable\",null,Lists.newArrayList(\"abc.txt\"),Lists.newArrayList(\"col1\",\"col2\"),new ColumnSeparator(\",\"),\"csv\",null,false,null,null,whereExpr,LoadTask.MergeType.MERGE,whereExpr,null)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "desc.analyze(\"testDb\")@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "desc.analyze(\"testDb\")@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "predicate = new BinaryPredicate(Operator.EQ,new SlotRef(null,\"k1\"),new FunctionCallExpr(\"replace_value\",params))@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertTrue(desc.isNegative())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(\"(col1, col2(\",desc.getFileFieldNames().toString())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Assert.assertNull(desc.getColumnSeparator())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "desc.analyze(\"testDb\")@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "desc = new DataDescription(\"testTable\",null,Lists.newArrayList(\"abc.txt\"),Lists.newArrayList(\"col1\",\"col2\"),null,null,true,null)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "desc.analyze(\"testDb\")@@@5@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Expr whereExpr = new BinaryPredicate(BinaryPredicate.Operator.EQ,new IntLiteral(1),new IntLiteral(1))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "params.clear()@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "Assert.assertEquals(\"APPEND DATA INFILE ('abc.txt') INTO TABLE testTable\",desc.toString())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "params.add(new SlotRef(null,\"k2\"))@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "desc.analyze(\"testDb\")@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "desc = new DataDescription(\"testTable\",null,Lists.newArrayList(\"abc.txt\",\"bcd.txt\"),null,null,null,true,null)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "params.add(new StringLiteral(\"\"))@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "desc.analyze(\"testDb\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "DataDescription desc = new DataDescription(\"testTable\",null,Lists.newArrayList(\"abc.txt\"),Lists.newArrayList(\"col1\",\"col2\"),new ColumnSeparator(\",\"),\"csv\",null,true,null,null,whereExpr,LoadTask.MergeType.MERGE,whereExpr,null)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(sql,desc.toString())@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testNegMerge['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "desc = new DataDescription(\"testTable\",null,Lists.newArrayList(\"abc.txt\"),null,null,null,true,null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "desc.analyze(\"testDb\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "BinaryPredicate predicate = new BinaryPredicate(Operator.EQ,new SlotRef(null,\"k1\"),new FunctionCallExpr(\"alignment_timestamp\",params))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(\"APPEND DATA INFILE ('abc.txt', 'bcd.txt') NEGATIVE INTO TABLE testTable\",desc.toString())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "params.clear()@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "sql = \"APPEND DATA INFILE ('abc.txt') INTO TABLE testTable PARTITIONS (p1, p2) (k2, k3)\" + \" SET (`k1` = replace_value('', NULL))\"@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "params.add(new StringLiteral(\"day\"))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "params.add(new NullLiteral())@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(\"MERGE DATA INFILE ('abc.txt') INTO TABLE testTable COLUMNS TERMINATED BY ',' (col1, col2) WHERE 1 = 1 DELETE ON 1 = 1\",desc.toString())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "desc.analyze(\"testDb\")@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "sql = \"APPEND DATA INFILE ('abc.txt') INTO TABLE testTable PARTITIONS (p1, p2) (k2, k3)\" + \" SET (`k1` = replace_value('-', '10'))\"@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "sql = \"APPEND DATA FROM TABLE testHiveTable INTO TABLE testTable PARTITIONS (p1, p2) SET (`k1` = bitmap_dict(`k2`))\"@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "Assert.assertEquals(\"(abc.txt(\",desc.getFilePaths().toString())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "desc.analyze(\"testDb\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3->41 [style = dashed, label="0"];
22->14 [style = solid, label="params"];
32->22 [style = bold, label=""];
52->64 [style = bold, label=""];
53->66 [style = solid, label="sql"];
28->41 [style = solid, label="whereExpr"];
30->20 [style = bold, label=""];
57->29 [style = bold, label=""];
69->68 [style = bold, label=""];
31->43 [style = solid, label="predicate"];
37->31 [style = bold, label=""];
51->7 [style = bold, label=""];
33->56 [style = bold, label=""];
27->51 [style = bold, label=""];
17->44 [style = bold, label=""];
12->54 [style = bold, label=""];
22->56 [style = solid, label="params"];
13->69 [style = bold, label=""];
2->3 [style = solid, label="whereExpr"];
49->36 [style = bold, label=""];
38->55 [style = bold, label=""];
64->58 [style = solid, label="sql"];
24->59 [style = bold, label=""];
22->46 [style = bold, label=""];
60->16 [style = bold, label=""];
41->49 [style = bold, label=""];
3->4 [style = dashed, label="0"];
2->4 [style = bold, label=""];
46->37 [style = bold, label=""];
3->0 [style = bold, label=""];
4->0 [style = bold, label=""];
56->10 [style = bold, label=""];
66->34 [style = bold, label=""];
27->51 [style = solid, label="sql"];
7->24 [style = bold, label=""];
65->38 [style = bold, label=""];
67->30 [style = bold, label=""];
48->32 [style = bold, label=""];
61->27 [style = bold, label=""];
16->39 [style = bold, label=""];
22->31 [style = solid, label="params"];
63->53 [style = bold, label=""];
68->6 [style = bold, label=""];
34->57 [style = bold, label=""];
44->61 [style = bold, label=""];
29->17 [style = bold, label=""];
6->18 [style = bold, label=""];
2->3 [style = bold, label=""];
25->9 [style = bold, label=""];
26->62 [style = bold, label=""];
70->19 [style = bold, label=""];
55->42 [style = bold, label=""];
17->44 [style = solid, label="predicate"];
28->41 [style = bold, label=""];
35->25 [style = bold, label=""];
40->33 [style = bold, label=""];
18->48 [style = bold, label=""];
22->17 [style = solid, label="params"];
62->11 [style = bold, label=""];
31->43 [style = bold, label=""];
43->63 [style = bold, label=""];
8->50 [style = bold, label=""];
15->40 [style = bold, label=""];
1->2 [style = bold, label=""];
50->35 [style = bold, label=""];
64->58 [style = bold, label=""];
59->14 [style = bold, label=""];
54->45 [style = bold, label=""];
36->47 [style = bold, label=""];
42->13 [style = bold, label=""];
14->26 [style = solid, label="predicate"];
45->67 [style = bold, label=""];
11->15 [style = solid, label="sql"];
10->52 [style = bold, label=""];
39->28 [style = bold, label=""];
19->8 [style = bold, label=""];
21->70 [style = bold, label=""];
11->15 [style = bold, label=""];
23->60 [style = bold, label=""];
20->21 [style = bold, label=""];
9->23 [style = bold, label=""];
14->26 [style = bold, label=""];
2->4 [style = solid, label="whereExpr"];
5->2 [style = bold, label=""];
53->66 [style = bold, label=""];
56->10 [style = solid, label="predicate"];
47->65 [style = bold, label=""];
}
