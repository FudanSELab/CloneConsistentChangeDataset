digraph {
6 [style = filled, label = "testBothParserAndInputFormatParseProperlyUsingInputFormat['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "testWithNullParserAndInputformatParseProperly['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final StreamChunkParser chunkParser = new StreamChunkParser(parser,inputFormat,new InputRowSchema(TIMESTAMP_SPEC,DimensionsSpec.EMPTY,Collections.emptyList()),TransformSpec.NONE,temporaryFolder.newFolder())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final TrackingJsonInputFormat inputFormat = new TrackingJsonInputFormat(JSONPathSpec.DEFAULT,Collections.emptyMap())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertTrue(inputFormat.used)@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final StreamChunkParser chunkParser = new StreamChunkParser(null,inputFormat,new InputRowSchema(TIMESTAMP_SPEC,DimensionsSpec.EMPTY,Collections.emptyList()),TransformSpec.NONE,temporaryFolder.newFolder())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final InputRowParser<ByteBuffer> parser = new StringInputRowParser(new JSONParseSpec(TIMESTAMP_SPEC,DimensionsSpec.EMPTY,JSONPathSpec.DEFAULT,Collections.emptyMap()),StringUtils.UTF8_STRING)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "final InputRowParser<ByteBuffer> parser = new StringInputRowParser(new JSONParseSpec(TIMESTAMP_SPEC,DimensionsSpec.EMPTY,JSONPathSpec.DEFAULT,Collections.emptyMap(),false),StringUtils.UTF8_STRING)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "testBothParserAndInputFormatParseProperlyUsingInputFormat['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "parseAndAssertResult(chunkParser)@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final JsonInputFormat inputFormat = new JsonInputFormat(JSONPathSpec.DEFAULT,Collections.emptyMap())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "parseAndAssertResult(chunkParser)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->3 [style = bold, label=""];
1->4 [style = solid, label="parser"];
7->4 [style = solid, label="parser"];
3->4 [style = solid, label="inputFormat"];
9->10 [style = solid, label="inputFormat"];
1->9 [style = dashed, label="0"];
4->2 [style = bold, label=""];
9->10 [style = bold, label=""];
6->7 [style = bold, label=""];
10->8 [style = bold, label=""];
1->7 [style = dashed, label="0"];
11->9 [style = bold, label=""];
3->4 [style = bold, label=""];
0->1 [style = bold, label=""];
10->8 [style = solid, label="chunkParser"];
7->3 [style = bold, label=""];
2->5 [style = bold, label=""];
4->2 [style = solid, label="chunkParser"];
}
