digraph {
10 [style = filled, label = "shouldCountWindowed['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertThat(results.get(new Windowed<>(\"1\",new TimeWindow(0,500))),equalTo(2L))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "final Map<Windowed<String>,ValueAndTimestamp<Long>> result = supplier.theCapturedProcessor().lastValueAndTimestampPerKey@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(result.get(new Windowed<>(\"2\",new SessionWindow(599L,600L))),equalTo(ValueAndTimestamp.make(2L,600L)))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final Map<Windowed<String>,Long> results = new HashMap<>()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertThat(supplier.theCapturedProcessor().lastValueAndTimestampPerKey.get(new Windowed<>(\"1\",new TimeWindow(0L,500L))),equalTo(ValueAndTimestamp.make(2L,15L)))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "final MockProcessorSupplier<Windowed<String>,Long> supplier = new MockProcessorSupplier<>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(result.get(new Windowed<>(\"1\",new SessionWindow(600L,600L))),equalTo(ValueAndTimestamp.make(1L,600L)))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(results.get(new Windowed<>(\"1\",new TimeWindow(500,1000))),equalTo(1L))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "windowedStream.count().toStream().foreach(null)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "shouldCountSessionWindowed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(supplier.theCapturedProcessor().lastValueAndTimestampPerKey.get(new Windowed<>(\"1\",new TimeWindow(500L,1000L))),equalTo(ValueAndTimestamp.make(1L,500L)))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "shouldCountWindowed['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(result.get(new Windowed<>(\"1\",new SessionWindow(10L,15L))),equalTo(ValueAndTimestamp.make(2L,15L)))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "windowedStream.count().toStream().process(supplier)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "processData(driver)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(result.size(),equalTo(3))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "stream.count().toStream().process(supplier)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final MockProcessorSupplier<Windowed<String>,Long> supplier = new MockProcessorSupplier<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(supplier.theCapturedProcessor().lastValueAndTimestampPerKey.get(new Windowed<>(\"2\",new TimeWindow(500L,1000L))),equalTo(ValueAndTimestamp.make(2L,550L)))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertThat(results.get(new Windowed<>(\"2\",new TimeWindow(500,1000))),equalTo(1L))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5->3 [style = bold, label=""];
0->6 [style = bold, label=""];
6->7 [style = dashed, label="0"];
18->19 [style = bold, label=""];
20->14 [style = solid, label="supplier"];
11->12 [style = bold, label=""];
20->14 [style = bold, label=""];
4->2 [style = bold, label=""];
1->0 [style = bold, label=""];
16->17 [style = bold, label=""];
6->14 [style = dashed, label="0"];
12->9 [style = bold, label=""];
0->20 [style = dashed, label="0"];
3->4 [style = bold, label=""];
8->7 [style = bold, label=""];
4->12 [style = dashed, label="0"];
5->16 [style = bold, label=""];
6->5 [style = bold, label=""];
7->5 [style = bold, label=""];
19->13 [style = bold, label=""];
10->8 [style = bold, label=""];
2->9 [style = dashed, label="0"];
15->20 [style = bold, label=""];
2->18 [style = dashed, label="0"];
0->8 [style = dashed, label="0"];
5->11 [style = bold, label=""];
17->18 [style = bold, label=""];
3->11 [style = dashed, label="0"];
8->7 [style = solid, label="supplier"];
14->5 [style = bold, label=""];
}
