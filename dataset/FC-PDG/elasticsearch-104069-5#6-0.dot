digraph {
1 [style = filled, label = "final long newSize = maxSize + 1@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Method resize = .getMethod(\"resize\",array.getClass().getInterfaces()(0(,)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testMaxSizeExceededOnResize['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "array = (BigArray)resize.invoke(bigArrays,array,newSize)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertEquals(array.ramBytesUsed(),hcbs.getBreaker(CircuitBreaker.REQUEST).getUsed())@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertEquals(0,hcbs.getBreaker(CircuitBreaker.REQUEST).getUsed())@@@16@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "true@@@11@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "BigArrays bigArrays = new BigArrays(null,hcbs,false)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "newBigArraysInstance['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final int size = scaledRandomIntBetween(10,maxSize / 8)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertTrue(e.getCause() instanceof CircuitBreakingException)@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "long newSize = array.size() * 2@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "final int size = scaledRandomIntBetween(10,maxSize / 16)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Method create = .getMethod(\"new\" + type + \"Array\",)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final boolean withBreaking@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "return (withBreaking? bigArrays.withCircuitBreaking(): bigArrays)@@@5@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(0,hcbs.getBreaker(CircuitBreaker.REQUEST).getUsed())@@@23@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "InvocationTargetException e = expectThrows(,null)@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "BigArrays bigArrays = new BigArrays(null,hcbs,false).withCircuitBreaking()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final int maxSize = randomIntBetween(1 << 10,1 << 22)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "final int maxSize = randomIntBetween(1 << 8,1 << 14)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "array.close()@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "array.close()@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "BigArray array = (BigArray)create.invoke(bigArrays,size)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testMaxSizeExceededOnResize['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "HierarchyCircuitBreakerService hcbs = new HierarchyCircuitBreakerService(Settings.builder().put(REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(),maxSize,ByteSizeUnit.BYTES).put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(),false).build(),new ClusterSettings(Settings.EMPTY,ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(array.ramBytesUsed(),hcbs.getBreaker(CircuitBreaker.REQUEST).getUsed())@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final long maxSize@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
13->1 [style = solid, label="maxSize"];
0->16 [style = bold, label=""];
9->15 [style = solid, label="bigArrays"];
22->19 [style = dotted, label="true"];
4->16 [style = dashed, label="0"];
9->0 [style = bold, label=""];
22->19 [style = bold, label=""];
16->7 [style = bold, label=""];
22->21 [style = bold, label=""];
9->7 [style = solid, label="bigArrays"];
10->3 [style = bold, label=""];
20->14 [style = bold, label=""];
25->6 [style = bold, label=""];
11->2 [style = bold, label=""];
4->7 [style = bold, label=""];
21->18 [style = bold, label=""];
13->14 [style = dashed, label="0"];
15->22 [style = bold, label=""];
2->13 [style = bold, label=""];
27->25 [style = solid, label="hcbs"];
12->13 [style = bold, label=""];
5->1 [style = bold, label=""];
18->20 [style = bold, label=""];
7->5 [style = bold, label=""];
16->7 [style = solid, label="size"];
24->23 [style = dotted, label="true"];
24->26 [style = dotted, label="true"];
0->4 [style = bold, label=""];
17->14 [style = bold, label=""];
3->8 [style = bold, label=""];
9->25 [style = dashed, label="0"];
13->4 [style = solid, label="maxSize"];
25->6 [style = solid, label="bigArrays"];
19->15 [style = solid, label="newSize"];
16->19 [style = solid, label="size"];
14->16 [style = solid, label="maxSize"];
13->6 [style = bold, label=""];
6->9 [style = bold, label=""];
19->15 [style = bold, label=""];
7->15 [style = solid, label="array"];
1->10 [style = bold, label=""];
8->11 [style = bold, label=""];
5->22 [style = bold, label=""];
26->6 [style = solid, label="withBreaking"];
27->25 [style = bold, label=""];
14->6 [style = bold, label=""];
24->27 [style = bold, label=""];
4->7 [style = solid, label="size"];
22->15 [style = dotted, label="true"];
}
