digraph {
56 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal(5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(le(aRef,literal(5)))),\"false\")@@@39@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "final RexLiteral literal5 = rexBuilder.makeExactLiteral(BigDecimal.valueOf(5))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "checkSimplifyFilter(and(args),\"AND(=(?0.a, 1), =(?0.b, 1))\")@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
72 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal1),gt(aRef,literal10)),\">(?0.a, 10)\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(10)),ge(bRef,literal(1)),lt(aRef,literal(10))),\"false\")@@@24@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
52 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(1)),lt(aRef,literal(10)),lt(aRef,literal(5))),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal(10)),ge(aRef,literal(1)))),\"AND(>(?0.a, 1), <(?0.a, 5))\")@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "checkSimplifyFilter(and(lt(literal1,aRef),lt(aRef,literal5)),RelOptPredicateList.EMPTY,\"AND(<(1, ?0.a), <(?0.a, 5))\")@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "checkSimplifyFilter(and(args2),\"false\")@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "checkSimplifyFilter(or(and(eq(aRef,literal1),eq(aRef,literal1)),and(eq(aRef,literal10),eq(aRef,literal1))),\"=(?0.a, 1)\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal10),ge(bRef,literal1),lt(aRef,literal10)),\"false\")@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "testSimplifyFilter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "final RexNode eRef = rexBuilder.makeFieldAccess(range,4)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final RexNode bRef = rexBuilder.makeFieldAccess(range,1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "checkSimplifyFilter(and(lt(aRef,literal(1)),eq(aRef,literal(1)),ge(aRef,literal(1))),\"false\")@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "checkSimplifyFilter(or(or(eq(aRef,literal1),eq(aRef,literal1)),eq(aRef,literal1)),\"=(?0.a, 1)\")@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal1),lt(aRef,literal10),lt(aRef,literal5)),RelOptPredicateList.EMPTY,\"AND(>(?0.a, 1), <(?0.a, 5))\")@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "testSimplifyFilter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(1)),lt(aRef,literal(10)),lt(aRef,literal(5))),RelOptPredicateList.of(rexBuilder,ImmutableList.of(gt(aRef,literal(5)))),\"false\")@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "checkSimplifyFilter(lt(aRef,literal1),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal10),gt(aRef,literal5))),\"false\")@@@40@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
62 [style = filled, label = "checkSimplifyFilter(and(gt(literal(1),aRef),gt(aRef,literal(5))),RelOptPredicateList.EMPTY,\"false\")@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "checkSimplifyFilter(and(le(aRef,literal1),gt(aRef,literal1)),\"false\")@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal1),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal10),gt(aRef,literal5))),\"true\")@@@39@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
66 [style = filled, label = "checkSimplifyFilter(and(lt(literal(1),aRef),lt(literal(5),aRef)),RelOptPredicateList.EMPTY,\"<(5, ?0.a)\")@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "final RelDataType booleanType = typeFactory.createSqlType(SqlTypeName.BOOLEAN)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "checkSimplifyFilter(and(le(aRef,literal(1)),gt(aRef,literal(1))),\"false\")@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
76 [style = filled, label = "final RexLiteral literal10 = rexBuilder.makeExactLiteral(BigDecimal.TEN)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "checkSimplifyFilter(and(or(eq(aRef,literal1),eq(aRef,literal10)),eq(aRef,literal1)),\"=(?0.a, 1)\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "final ImmutableList<RexNode> args2 = ImmutableList.of(eq(aRef,literal(1)),eq(aRef,literal(10)))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(1)),lt(aRef,literal(10)),le(aRef,literal(5))),RelOptPredicateList.of(rexBuilder,ImmutableList.of(ge(aRef,literal(5)))),\"=(?0.a, 5)\")@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "final ImmutableList<RexNode> args2 = ImmutableList.of(eq(aRef,literal1),eq(aRef,literal10))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "assertThat(simplify.simplifyFilterPredicates(args2),nullValue())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal(5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal(10)),ge(aRef,literal(5)))),\">(?0.a, 5)\")@@@38@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "checkSimplifyFilter(and(gt(literal1,aRef),gt(aRef,literal5)),RelOptPredicateList.EMPTY,\"false\")@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "checkSimplifyFilter(and(eq(aRef,literal(1)),eq(bRef,literal(1)),eq(aRef,bRef)),\"AND(=(?0.a, 1), =(?0.b, 1))\")@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "checkSimplifyFilter(or(gt(aRef,literal5),gt(bRef,literal5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(le(aRef,literal5),le(bRef,literal5))),\"false\")@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "checkSimplifyFilter(or(gt(aRef,literal(10)),gt(bRef,literal(1)),gt(aRef,literal(10))),\"OR(>(?0.a, 10), >(?0.b, 1))\")@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "final RexNode aRef = rexBuilder.makeFieldAccess(range,0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal1),lt(aRef,literal10),le(aRef,literal5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(ge(aRef,literal5))),\"=(?0.a, 5)\")@@@37@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
71 [style = filled, label = "checkSimplify3(and(nullBool,not(or(nullBool,vBool()))),\"AND(null, NOT(?0.bool0))\",\"false\",\"NOT(?0.bool0)\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final RexLiteral literal5 = rexBuilder.makeExactLiteral(new BigDecimal(5))@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal5),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal10),ge(aRef,literal5))),\">(?0.a, 5)\")@@@41@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "checkSimplifyFilter(and(gt(literal1,aRef),gt(literal5,aRef)),RelOptPredicateList.EMPTY,\">(1, ?0.a)\")@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "checkSimplifyFilter(and(eq(aRef,literal1),eq(bRef,literal10),eq(aRef,bRef)),\"false\")@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "checkSimplifyFilter(or(gt(aRef,literal(5)),gt(bRef,literal(5))),RelOptPredicateList.of(rexBuilder,ImmutableList.of(le(aRef,literal(5)),le(bRef,literal(5)))),\"false\")@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
60 [style = filled, label = "checkSimplifyFilter(and(gt(literal(1),aRef),gt(literal(5),aRef)),RelOptPredicateList.EMPTY,\">(1, ?0.a)\")@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal5),RelOptPredicateList.of(rexBuilder,ImmutableList.of(le(aRef,literal5),le(bRef,literal5))),\"false\")@@@43@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "final ImmutableList<RexNode> args = ImmutableList.of(eq(eq(aRef,literal(1)),trueLiteral),eq(bRef,literal(1)))@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "final RexNode dRef = rexBuilder.makeFieldAccess(range,3)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "checkSimplifyFilter(and(lt(literal1,aRef),lt(literal5,aRef)),RelOptPredicateList.EMPTY,\"<(5, ?0.a)\")@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "final ImmutableList<RexNode> args = ImmutableList.of(eq(eq(aRef,literal1),trueLiteral),eq(bRef,literal1))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
47 [style = filled, label = "checkSimplifyFilter(case_(cRef,trueLiteral,dRef,trueLiteral,eRef,falseLiteral,fRef,falseLiteral,nullBool),\"OR(?0.c, ?0.d)\")@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
48 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal(1)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal(10)),gt(aRef,literal(5)))),\"true\")@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
63 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal(5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(le(aRef,literal(5)),le(bRef,literal(5)))),\"false\")@@@40@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "checkSimplifyFilter(or(gt(aRef,literal10),gt(bRef,literal1),gt(aRef,literal10)),\"OR(>(?0.a, 10), >(?0.b, 1))\")@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,nullBool),ge(bRef,literal1)),\"false\")@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
55 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(1)),lt(aRef,literal(10)),lt(aRef,literal(5))),RelOptPredicateList.EMPTY,\"AND(>(?0.a, 1), <(?0.a, 5))\")@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "checkSimplifyFilter(and(lt(literal(1),aRef),lt(aRef,literal(5))),RelOptPredicateList.EMPTY,\"AND(<(1, ?0.a), <(?0.a, 5))\")@@@29@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
64 [style = filled, label = "checkSimplifyFilter(and(le(aRef,literal(1)),ge(aRef,literal(1))),\"=(?0.a, 1)\")@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
53 [style = filled, label = "assertThat(simplify.simplifyFilterPredicates(args).toString(),equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"))@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
68 [style = filled, label = "testSimplifyAndPush['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final RelDataType rowType = typeFactory.builder().add(\"a\",intType).add(\"b\",intType).build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal5),RelOptPredicateList.of(rexBuilder,ImmutableList.of(le(aRef,literal5))),\"false\")@@@42@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "checkSimplifyFilter(and(eq(aRef,literal1),eq(bRef,literal1),eq(aRef,bRef)),\"AND(=(?0.a, 1), =(?0.b, 1))\")@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
69 [style = filled, label = "checkSimplify2(and(vBool(1),vBool(2),vBool(3),not(vBool(1)),not(vBool(2)),not(vBool())),\"AND(?0.bool3, null, IS NULL(?0.bool1),\" + \" IS NULL(?0.bool2), NOT(?0.bool0))\",\"false\")@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal1),lt(aRef,literal10),lt(aRef,literal5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(gt(aRef,literal5))),\"false\")@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
73 [style = filled, label = "final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType,0)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,nullBool),ge(bRef,literal(1))),\"false\")@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal1),lt(aRef,literal10),lt(aRef,literal5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal10),ge(aRef,literal1))),\"AND(>(?0.a, 1), <(?0.a, 5))\")@@@38@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
74 [style = filled, label = "checkSimplifyFilter(and(eq(aRef,literal1),or(eq(aRef,literal1),eq(aRef,literal10))),\"=(?0.a, 1)\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "checkSimplifyFilter(lt(aRef,literal(1)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal(10)),gt(aRef,literal(5)))),\"false\")@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
75 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal10),gt(aRef,literal1)),\">(?0.a, 10)\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "checkSimplifyFilter(and(lt(aRef,literal1),eq(aRef,literal1),ge(aRef,literal1)),\"false\")@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "final RexNode cRef = rexBuilder.makeFieldAccess(range,2)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final RelDataType rowType = typeFactory.builder().add(\"a\",intType).add(\"b\",intType).add(\"c\",booleanType).add(\"d\",booleanType).add(\"e\",booleanType).add(\"f\",booleanType).add(\"g\",booleanType).add(\"h\",intType).build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final RexNode fRef = rexBuilder.makeFieldAccess(range,5)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "checkSimplifyFilter(and(le(aRef,literal1),ge(aRef,literal1)),\"=(?0.a, 1)\")@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "checkSimplifyFilter(and(eq(aRef,literal(1)),eq(bRef,literal(10)),eq(aRef,bRef)),\"false\")@@@23@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21->50 [style = dashed, label="0"];
29->76 [style = bold, label=""];
57->25 [style = solid, label="args2"];
14->74 [style = solid, label="aRef"];
45->65 [style = bold, label=""];
28->16 [style = solid, label="aRef"];
11->25 [style = solid, label="args"];
41->19 [style = bold, label=""];
61->56 [style = bold, label=""];
20->35 [style = solid, label="args2"];
14->78 [style = solid, label="aRef"];
10->54 [style = bold, label=""];
28->38 [style = solid, label="aRef"];
13->27 [style = solid, label="bRef"];
29->22 [style = solid, label="literal1"];
17->38 [style = solid, label="literal10"];
13->7 [style = solid, label="bRef"];
13->24 [style = solid, label="bRef"];
28->50 [style = solid, label="aRef"];
38->55 [style = dashed, label="0"];
14->28 [style = bold, label=""];
17->70 [style = bold, label=""];
34->0 [style = dashed, label="0"];
38->41 [style = bold, label=""];
62->55 [style = bold, label=""];
59->58 [style = bold, label=""];
40->20 [style = bold, label=""];
28->56 [style = solid, label="aRef"];
2->66 [style = dashed, label="0"];
14->31 [style = solid, label="range"];
7->8 [style = bold, label=""];
76->17 [style = bold, label=""];
13->5 [style = solid, label="bRef"];
3->12 [style = solid, label="literal5"];
28->1 [style = solid, label="aRef"];
20->5 [style = solid, label="args2"];
29->7 [style = solid, label="literal1"];
3->27 [style = solid, label="literal5"];
5->69 [style = dashed, label="0"];
17->24 [style = solid, label="literal10"];
28->51 [style = solid, label="aRef"];
29->21 [style = solid, label="literal1"];
29->2 [style = solid, label="literal1"];
13->22 [style = solid, label="bRef"];
17->19 [style = solid, label="literal10"];
28->67 [style = solid, label="aRef"];
28->22 [style = solid, label="aRef"];
50->5 [style = bold, label=""];
3->38 [style = solid, label="literal5"];
0->73 [style = solid, label="rowType"];
78->75 [style = bold, label=""];
76->75 [style = solid, label="literal10"];
7->35 [style = dashed, label="0"];
2->15 [style = bold, label=""];
47->51 [style = bold, label=""];
29->42 [style = solid, label="literal1"];
15->33 [style = dashed, label="0"];
19->58 [style = dashed, label="0"];
28->35 [style = solid, label="aRef"];
3->16 [style = solid, label="literal5"];
23->36 [style = bold, label=""];
3->41 [style = solid, label="literal5"];
28->2 [style = solid, label="aRef"];
13->35 [style = solid, label="bRef"];
70->74 [style = bold, label=""];
66->33 [style = bold, label=""];
13->46 [style = solid, label="bRef"];
25->40 [style = bold, label=""];
11->25 [style = bold, label=""];
28->54 [style = solid, label="aRef"];
30->63 [style = dashed, label="0"];
19->42 [style = bold, label=""];
13->72 [style = solid, label="literal1"];
40->50 [style = bold, label=""];
48->49 [style = bold, label=""];
13->30 [style = solid, label="bRef"];
13->75 [style = solid, label="literal1"];
29->11 [style = solid, label="literal1"];
36->62 [style = dashed, label="0"];
74->78 [style = bold, label=""];
55->59 [style = bold, label=""];
28->5 [style = solid, label="aRef"];
22->51 [style = dashed, label="0"];
13->49 [style = solid, label="bRef"];
30->27 [style = bold, label=""];
28->26 [style = solid, label="aRef"];
60->62 [style = bold, label=""];
13->8 [style = solid, label="bRef"];
3->18 [style = solid, label="literal5"];
13->48 [style = solid, label="bRef"];
76->78 [style = solid, label="literal10"];
10->33 [style = solid, label="fRef"];
29->19 [style = solid, label="literal1"];
3->30 [style = solid, label="literal5"];
3->23 [style = solid, label="literal5"];
13->74 [style = solid, label="literal1"];
28->44 [style = solid, label="aRef"];
4->47 [style = solid, label="dRef"];
13->50 [style = solid, label="bRef"];
26->17 [style = dashed, label="0"];
8->46 [style = dashed, label="0"];
57->25 [style = bold, label=""];
28->39 [style = solid, label="aRef"];
29->20 [style = solid, label="literal1"];
35->21 [style = bold, label=""];
1->11 [style = bold, label=""];
76->70 [style = solid, label="literal10"];
23->60 [style = dashed, label="0"];
0->34 [style = bold, label=""];
6->4 [style = bold, label=""];
14->4 [style = solid, label="range"];
17->41 [style = solid, label="literal10"];
21->37 [style = bold, label=""];
28->41 [style = solid, label="aRef"];
29->23 [style = solid, label="literal1"];
17->20 [style = solid, label="literal10"];
6->47 [style = solid, label="cRef"];
73->28 [style = solid, label="range"];
17->18 [style = solid, label="literal10"];
28->18 [style = solid, label="aRef"];
25->75 [style = dashed, label="0"];
14->70 [style = solid, label="aRef"];
72->71 [style = bold, label=""];
20->57 [style = dashed, label="0"];
52->48 [style = bold, label=""];
28->64 [style = solid, label="aRef"];
28->20 [style = solid, label="aRef"];
28->23 [style = solid, label="aRef"];
17->37 [style = solid, label="literal10"];
34->14 [style = bold, label=""];
28->59 [style = solid, label="aRef"];
65->53 [style = bold, label=""];
14->75 [style = solid, label="aRef"];
13->63 [style = solid, label="bRef"];
29->24 [style = solid, label="literal1"];
28->48 [style = solid, label="aRef"];
13->18 [style = solid, label="bRef"];
67->45 [style = bold, label=""];
31->33 [style = solid, label="eRef"];
54->64 [style = bold, label=""];
8->33 [style = bold, label=""];
24->12 [style = bold, label=""];
28->15 [style = solid, label="aRef"];
18->24 [style = bold, label=""];
22->2 [style = bold, label=""];
13->52 [style = solid, label="bRef"];
28->61 [style = solid, label="aRef"];
57->40 [style = solid, label="args2"];
13->21 [style = solid, label="bRef"];
28->11 [style = solid, label="aRef"];
29->18 [style = solid, label="literal1"];
17->7 [style = solid, label="literal10"];
17->42 [style = solid, label="literal10"];
29->8 [style = solid, label="literal1"];
29->36 [style = solid, label="literal1"];
6->33 [style = solid, label="cRef"];
3->36 [style = solid, label="literal5"];
28->58 [style = solid, label="aRef"];
13->51 [style = solid, label="bRef"];
28->52 [style = solid, label="aRef"];
18->48 [style = dashed, label="0"];
49->61 [style = bold, label=""];
29->26 [style = solid, label="literal1"];
13->61 [style = solid, label="bRef"];
13->70 [style = solid, label="literal1"];
43->9 [style = bold, label=""];
13->37 [style = solid, label="bRef"];
37->7 [style = bold, label=""];
14->72 [style = solid, label="aRef"];
28->66 [style = solid, label="aRef"];
28->57 [style = solid, label="aRef"];
3->15 [style = solid, label="literal5"];
14->10 [style = solid, label="range"];
4->31 [style = bold, label=""];
32->9 [style = bold, label=""];
3->19 [style = solid, label="literal5"];
13->11 [style = solid, label="bRef"];
37->5 [style = dashed, label="0"];
28->8 [style = solid, label="aRef"];
28->27 [style = solid, label="aRef"];
31->10 [style = bold, label=""];
29->1 [style = solid, label="literal1"];
29->37 [style = solid, label="literal1"];
73->14 [style = bold, label=""];
28->33 [style = solid, label="aRef"];
16->30 [style = bold, label=""];
28->63 [style = solid, label="aRef"];
28->30 [style = solid, label="aRef"];
14->13 [style = solid, label="range"];
28->36 [style = solid, label="aRef"];
29->15 [style = solid, label="literal1"];
3->17 [style = bold, label=""];
39->1 [style = bold, label=""];
75->72 [style = bold, label=""];
14->28 [style = solid, label="range"];
14->17 [style = solid, label="aRef"];
64->67 [style = bold, label=""];
27->44 [style = dashed, label="0"];
56->63 [style = bold, label=""];
13->45 [style = solid, label="bRef"];
13->6 [style = bold, label=""];
3->42 [style = solid, label="literal5"];
29->39 [style = solid, label="literal1"];
5->35 [style = bold, label=""];
17->12 [style = solid, label="literal10"];
33->22 [style = bold, label=""];
28->45 [style = solid, label="aRef"];
24->49 [style = dashed, label="0"];
3->29 [style = dashed, label="0"];
63->44 [style = bold, label=""];
28->12 [style = solid, label="aRef"];
15->23 [style = bold, label=""];
42->18 [style = bold, label=""];
17->26 [style = bold, label=""];
39->70 [style = dashed, label="0"];
0->73 [style = bold, label=""];
13->44 [style = solid, label="bRef"];
9->0 [style = bold, label=""];
28->19 [style = solid, label="aRef"];
33->60 [style = bold, label=""];
73->14 [style = solid, label="range"];
53->57 [style = bold, label=""];
3->24 [style = solid, label="literal5"];
29->3 [style = bold, label=""];
13->12 [style = solid, label="bRef"];
13->78 [style = solid, label="literal1"];
76->72 [style = solid, label="literal10"];
28->13 [style = bold, label=""];
28->46 [style = solid, label="aRef"];
12->16 [style = bold, label=""];
76->74 [style = solid, label="literal10"];
77->0 [style = bold, label=""];
29->41 [style = solid, label="literal1"];
28->42 [style = solid, label="aRef"];
28->62 [style = solid, label="aRef"];
46->47 [style = bold, label=""];
1->74 [style = dashed, label="0"];
26->39 [style = bold, label=""];
13->17 [style = solid, label="literal1"];
71->69 [style = bold, label=""];
68->77 [style = bold, label=""];
20->5 [style = bold, label=""];
45->65 [style = solid, label="args"];
29->38 [style = solid, label="literal1"];
28->21 [style = solid, label="aRef"];
13->29 [style = bold, label=""];
13->42 [style = solid, label="bRef"];
10->47 [style = solid, label="fRef"];
16->56 [style = dashed, label="0"];
10->29 [style = bold, label=""];
28->37 [style = solid, label="aRef"];
28->55 [style = solid, label="aRef"];
12->61 [style = dashed, label="0"];
34->14 [style = solid, label="rowType"];
31->47 [style = solid, label="eRef"];
4->33 [style = solid, label="dRef"];
3->2 [style = solid, label="literal5"];
58->52 [style = bold, label=""];
28->49 [style = solid, label="aRef"];
36->38 [style = bold, label=""];
28->60 [style = solid, label="aRef"];
17->8 [style = solid, label="literal10"];
14->6 [style = solid, label="range"];
41->59 [style = dashed, label="0"];
42->52 [style = dashed, label="0"];
28->24 [style = solid, label="aRef"];
51->66 [style = bold, label=""];
28->7 [style = solid, label="aRef"];
35->46 [style = bold, label=""];
}
