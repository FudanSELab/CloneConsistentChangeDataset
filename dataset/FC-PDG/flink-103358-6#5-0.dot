digraph {
4 [style = filled, label = "MapStateDescriptor<Integer,Long> kvId = new MapStateDescriptor<>(\"id\",,)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "i < stateSize@@@10@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "iterator.hasNext()@@@16@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int stateSize = 4096@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "iterator.hasNext()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "iterator.remove()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(iteratorCount,(int)entry.getKey())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "MapState<Integer,Long> state = backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "iteratorCount++@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "CheckpointableKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "backend.setCurrentKey(1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "MapState<Integer,Long> state = backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "iterator.remove()@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "state.put(i,i * 2L)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "iterator.remove()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "IllegalStateException e@@@25@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "{}@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "testMapStateIteratorArbitraryAccess['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testMapStateIteratorArbitraryAccess['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertEquals(stateSize,iteratorCount)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "fail()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ThreadLocalRandom.current().nextInt() % 3@@@19@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "{backend.dispose()}@@@37@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Iterator<Map.Entry<Integer,Long>> iterator = state.iterator()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "IllegalStateException e@@@25@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "int i = 0@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "i++@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "int iteratorCount = 0@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "{}@@@25@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testMapStateIteratorArbitraryAccess['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Map.Entry<Integer,Long> entry = iterator.next()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->23 [style = bold, label=""];
26->24 [style = bold, label=""];
20->3 [style = bold, label=""];
4->7 [style = bold, label=""];
9->14 [style = solid, label="i"];
8->5 [style = bold, label=""];
28->12 [style = bold, label=""];
24->18 [style = bold, label=""];
19->10 [style = solid, label="iteratorCount"];
9->16 [style = solid, label="i"];
4->23 [style = solid, label="kvId"];
20->21 [style = dotted, label="true"];
25->16 [style = solid, label="i"];
0->8 [style = dotted, label="true"];
27->4 [style = bold, label=""];
19->3 [style = solid, label="iteratorCount"];
9->16 [style = bold, label=""];
19->20 [style = bold, label=""];
12->3 [style = solid, label="iteratorCount"];
16->14 [style = dotted, label="true"];
17->12 [style = bold, label=""];
14->9 [style = bold, label=""];
11->17 [style = bold, label=""];
25->9 [style = solid, label="i"];
0->11 [style = bold, label=""];
1->25 [style = bold, label=""];
3->13 [style = bold, label=""];
21->10 [style = bold, label=""];
20->0 [style = dotted, label="true"];
4->29 [style = solid, label="kvId"];
0->5 [style = dotted, label="true"];
16->2 [style = bold, label=""];
20->21 [style = bold, label=""];
20->12 [style = dotted, label="true"];
2->19 [style = bold, label=""];
20->10 [style = dotted, label="true"];
23->6 [style = bold, label=""];
25->16 [style = bold, label=""];
0->15 [style = bold, label=""];
29->6 [style = bold, label=""];
1->3 [style = solid, label="stateSize"];
0->12 [style = bold, label=""];
12->10 [style = solid, label="iteratorCount"];
25->14 [style = solid, label="i"];
16->9 [style = dotted, label="true"];
16->14 [style = bold, label=""];
7->13 [style = solid, label="backend"];
7->29 [style = bold, label=""];
22->4 [style = bold, label=""];
0->15 [style = dotted, label="true"];
12->20 [style = bold, label=""];
0->11 [style = dotted, label="true"];
30->4 [style = bold, label=""];
23->29 [style = dashed, label="0"];
19->12 [style = solid, label="iteratorCount"];
24->12 [style = bold, label=""];
5->12 [style = bold, label=""];
18->12 [style = bold, label=""];
1->16 [style = solid, label="stateSize"];
24->28 [style = bold, label=""];
0->17 [style = dotted, label="true"];
15->8 [style = bold, label=""];
6->1 [style = bold, label=""];
10->0 [style = bold, label=""];
}
