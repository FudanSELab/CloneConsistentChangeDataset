digraph {
1 [style = filled, label = "return new DescribeConsumerGroupsResult(new HashMap<String,KafkaFuture<ConsumerGroupDescription>>(futures))@@@81@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final Map<String,KafkaFutureImpl<Void>> futures = new HashMap<>(groupIds.size())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "entry.getValue().isCompletedExceptionally()@@@15@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "futures.get(groupId).isCompletedExceptionally()@@@15@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final String groupId = entry.getKey()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final DescribeConsumerGroupsOptions options@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final Collection<String> groupIds@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "!futures.containsKey(groupId)@@@10@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Collection<String> groupIds@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "runnable.call(new Call(\"findCoordinator\",deadline,new LeastLoadedNodeProvider()){@Override AbstractRequest.Builder createRequest(int timeoutMs){return new FindCoordinatorRequest.Builder(FindCoordinatorRequest.CoordinatorType.GROUP,groupId)}@Override void handleResponse(AbstractResponse abstractResponse){final FindCoordinatorResponse fcResponse = (FindCoordinatorResponse)abstractResponseif (handleFindCoordinatorError(fcResponse,futures.get(groupId))) returnfinal long nowDescribeConsumerGroups = time.milliseconds()final int nodeId = fcResponse.node().id()runnable.call(new Call(\"describeConsumerGroups\",deadline,new ConstantNodeIdProvider(nodeId)){@Override AbstractRequest.Builder createRequest(int timeoutMs){return new DescribeGroupsRequest.Builder(Collections.singletonList(groupId))}@Override void handleResponse(AbstractResponse abstractResponse){final DescribeGroupsResponse response = (DescribeGroupsResponse)abstractResponseKafkaFutureImpl<ConsumerGroupDescription> future = futures.get(groupId)final DescribeGroupsResponse.GroupMetadata groupMetadata = response.groups().get(groupId)final Errors groupError = groupMetadata.error()if (groupError != Errors.NONE) {future.completeExceptionally(groupError.exception())}{final String protocolType = groupMetadata.protocolType()if (protocolType.equals(ConsumerProtocol.PROTOCOL_TYPE) || protocolType.isEmpty()) {final List<DescribeGroupsResponse.GroupMember> members = groupMetadata.members()final List<MemberDescription> memberDescriptions = new ArrayList<>(members.size())for (DescribeGroupsResponse.GroupMember groupMember : members){Set<TopicPartition> partitions = Collections.emptySet()if (groupMember.memberAssignment().remaining() > 0) {final PartitionAssignor.Assignment assignment = ConsumerProtocol.deserializeAssignment(groupMember.memberAssignment().duplicate())partitions = new HashSet<>(assignment.partitions())}final MemberDescription memberDescription = new MemberDescription(groupMember.memberId(),groupMember.clientId(),groupMember.clientHost(),new MemberAssignment(partitions))memberDescriptions.add(memberDescription)}final ConsumerGroupDescription consumerGroupDescription = new ConsumerGroupDescription(groupId,protocolType.isEmpty(),memberDescriptions,groupMetadata.protocol(),ConsumerGroupState.parse(groupMetadata.state()),fcResponse.node())future.complete(consumerGroupDescription)}}}@Override void handleFailure(Throwable throwable){KafkaFutureImpl<ConsumerGroupDescription> future = futures.get(groupId)future.completeExceptionally(throwable)}},nowDescribeConsumerGroups)}@Override void handleFailure(Throwable throwable){KafkaFutureImpl<ConsumerGroupDescription> future = futures.get(groupId)future.completeExceptionally(throwable)}},startFindCoordinatorMs)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "future.completeExceptionally(new InvalidGroupIdException(\"The given group id '\" + groupId + \"' cannot be represented in a request.\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "runnable.call(new Call(\"findCoordinator\",deadline,new LeastLoadedNodeProvider()){@Override AbstractRequest.Builder createRequest(int timeoutMs){return new FindCoordinatorRequest.Builder(FindCoordinatorRequest.CoordinatorType.GROUP,groupId)}@Override void handleResponse(AbstractResponse abstractResponse){final FindCoordinatorResponse response = (FindCoordinatorResponse)abstractResponsefinal long nowDeleteConsumerGroups = time.milliseconds()final int nodeId = response.node().id()runnable.call(new Call(\"deleteConsumerGroups\",deadline,new ConstantNodeIdProvider(nodeId)){@Override AbstractRequest.Builder createRequest(int timeoutMs){return new DeleteGroupsRequest.Builder(Collections.singleton(groupId))}@Override void handleResponse(AbstractResponse abstractResponse){final DeleteGroupsResponse response = (DeleteGroupsResponse)abstractResponseKafkaFutureImpl<Void> future = futures.get(groupId)final Errors groupError = response.get(groupId)if (groupError != Errors.NONE) {future.completeExceptionally(groupError.exception())}{future.complete(null)}}@Override void handleFailure(Throwable throwable){KafkaFutureImpl<Void> future = futures.get(groupId)future.completeExceptionally(throwable)}},nowDeleteConsumerGroups)}@Override void handleFailure(Throwable throwable){KafkaFutureImpl<Void> future = futures.get(groupId)future.completeExceptionally(throwable)}},startFindCoordinatorMs)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final long deadline = calcDeadlineMs(startFindCoordinatorMs,options.timeoutMs())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final long startFindCoordinatorMs = time.milliseconds()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "groupIdIsUnrepresentable(groupId)@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "deleteConsumerGroups['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "describeConsumerGroups['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "return new DescribeConsumerGroupsResult(new HashMap<String,KafkaFuture<ConsumerGroupDescription>>(futures))@@@73@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "return new DeleteConsumerGroupsResult(new HashMap<String,KafkaFuture<Void>>(futures))@@@55@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "futures.put(groupId,new KafkaFutureImpl<ConsumerGroupDescription>())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "DeleteConsumerGroupsOptions options@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "future.completeExceptionally(new ApiException(\"The given group id '\" + groupId + \"' cannot be represented in a request.\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final Map<String,KafkaFutureImpl<ConsumerGroupDescription>> futures = new HashMap<>(groupIds.size())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "futures.put(groupId,new KafkaFutureImpl<Void>())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "KafkaFutureImpl<Void> future = new KafkaFutureImpl<>()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "futures.put(groupId,future)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "KafkaFutureImpl<ConsumerGroupDescription> future = new KafkaFutureImpl<>()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "describeConsumerGroups['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final DescribeConsumerGroupsOptions options@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
24->3 [style = solid, label="startFindCoordinatorMs"];
15->18 [style = solid, label="futures"];
5->19 [style = dotted, label="true"];
1->25 [style = dashed, label="0"];
12->2 [style = solid, label="startFindCoordinatorMs"];
5->10 [style = dotted, label="true"];
27->25 [style = bold, label=""];
8->12 [style = bold, label=""];
14->18 [style = bold, label=""];
17->16 [style = dotted, label="true"];
26->28 [style = dotted, label="true"];
3->2 [style = bold, label=""];
0->21 [style = dashed, label="0"];
9->7 [style = dotted, label="true"];
4->5 [style = bold, label=""];
6->0 [style = bold, label=""];
4->27 [style = bold, label=""];
9->11 [style = dotted, label="true"];
9->15 [style = bold, label=""];
5->13 [style = dotted, label="true"];
8->2 [style = solid, label="groupId"];
5->4 [style = dotted, label="true"];
12->3 [style = solid, label="startFindCoordinatorMs"];
24->12 [style = solid, label="startFindCoordinatorMs"];
3->27 [style = bold, label=""];
5->13 [style = bold, label=""];
20->19 [style = bold, label=""];
6->27 [style = bold, label=""];
14->1 [style = bold, label=""];
6->0 [style = dotted, label="true"];
6->21 [style = bold, label=""];
12->3 [style = solid, label="deadline"];
27->24 [style = bold, label=""];
6->14 [style = bold, label=""];
2->18 [style = bold, label=""];
17->15 [style = bold, label=""];
10->4 [style = bold, label=""];
12->3 [style = bold, label=""];
13->4 [style = solid, label="future"];
2->1 [style = bold, label=""];
21->5 [style = bold, label=""];
5->20 [style = bold, label=""];
23->5 [style = bold, label=""];
14->8 [style = bold, label=""];
15->5 [style = bold, label=""];
6->5 [style = bold, label=""];
3->25 [style = bold, label=""];
19->4 [style = bold, label=""];
21->27 [style = bold, label=""];
4->14 [style = bold, label=""];
3->2 [style = solid, label="deadline"];
5->6 [style = dotted, label="false"];
6->21 [style = dotted, label="true"];
26->23 [style = bold, label=""];
24->12 [style = bold, label=""];
2->14 [style = bold, label=""];
17->11 [style = dotted, label="true"];
13->20 [style = dashed, label="0"];
10->19 [style = dashed, label="0"];
15->23 [style = dashed, label="0"];
0->5 [style = bold, label=""];
13->10 [style = bold, label=""];
0->14 [style = bold, label=""];
15->1 [style = solid, label="futures"];
23->25 [style = solid, label="futures"];
26->22 [style = dotted, label="true"];
11->28 [style = dashed, label="0"];
5->6 [style = bold, label=""];
20->4 [style = solid, label="future"];
14->27 [style = dashed, label="0"];
5->20 [style = dotted, label="true"];
}
