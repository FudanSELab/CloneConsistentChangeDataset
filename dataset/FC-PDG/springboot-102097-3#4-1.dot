digraph {
6 [style = filled, label = "String argument = \"foo\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "callbacksInvokeWhenHasResolvableGenericMatchShouldInvokeCallback['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "StringBuilderCallback callbackInstance = mock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "GenericCallback<?> callbackInstance = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "verifyZeroInteractions(callbackInstance)@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "callbacksInvokeWhenHasResolvableGenericNonMatchShouldNotInvokeCallback['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "LambdaSafe.callbacks(,Collections.singleton(callbackInstance),argument).invoke(null)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "callbacksInvokeWhenHasResolvableGenericMatchShouldInvokeCallback['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "LambdaSafe.callbacks(,Collections.singleton(callbackInstance),argument).invoke(null)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "verify(callbackInstance).handle(argument)@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "StringBuilder argument = new StringBuilder(\"foo\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->1 [style = bold, label=""];
8->6 [style = bold, label=""];
10->9 [style = bold, label=""];
1->2 [style = solid, label="argument"];
1->0 [style = bold, label=""];
4->8 [style = dashed, label="0"];
7->8 [style = bold, label=""];
2->9 [style = dashed, label="0"];
3->4 [style = bold, label=""];
8->9 [style = solid, label="callbackInstance"];
1->6 [style = dashed, label="0"];
6->10 [style = bold, label=""];
0->10 [style = dashed, label="0"];
5->4 [style = bold, label=""];
0->2 [style = bold, label=""];
}
