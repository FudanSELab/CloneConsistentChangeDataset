digraph {
26 [style = filled, label = "assertColumns(row,\"m\")@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "long(( ts = {100,200}@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "InetAddressAndPort peer1 = peer()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "builder.newRow(Clustering.EMPTY)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ComplexColumnData cd = row.getComplexColumnData(m)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "DataResolver resolver = new DataResolver(ks,cmd,ConsistencyLevel.ALL,2,System.nanoTime(),readRepair)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Iterator<Row> rowIter = mutation.getPartitionUpdate(cfm2).iterator()@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "testResolveNewCollectionOverwritingDeleted['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "ReadCommand cmd = Util.cmd(cfs2,dk).withNowInSeconds(nowInSec).build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(expectedCmplxDelete,cd.complexDeletion())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "builder.addComplexDeletion(m,expectedCmplxDelete)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Cell expectedCell = mapCell(1,1,ts(1()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "resolver.preprocess(readResponseMessage(peer1,iter(PartitionUpdate.singleRowUpdate(cfm2,dk,builder.build())),cmd))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertNull(readRepair.sent.get(peer2))@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertFalse(rowIter.hasNext())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "builder.addCell(expectedCell)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(rowIter.hasNext())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "builder.addComplexDeletion(m,new DeletionTime(ts(0( - 1,nowInSec))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "TestableReadRepair readRepair = new TestableReadRepair(cmd,ConsistencyLevel.QUORUM)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "assertEquals(expectedCmplxDelete,cd.complexDeletion())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Row row = rowIter.next()@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(Collections.singleton(expectedCell),Sets.newHashSet(cd))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "builder.newRow(Clustering.EMPTY)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertNotNull(row.getCell(m,CellPath.create(bb(1))))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertNull(readRepair.sent.get(peer2))@@@38@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "InetAddressAndPort peer2 = peer()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Row row = Iterators.getOnlyElement(readRepair.getForEndpoint(peer1).getPartitionUpdate(cfm2).iterator())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testResolveComplexDelete['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Row row = Iterators.getOnlyElement(rows)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Mutation mutation = readRepair.getForEndpoint(peer1)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "builder.addCell(mapCell(0,0,ts(0())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Row.Builder builder = BTreeRow.unsortedBuilder(nowInSec)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "resolver.preprocess(readResponseMessage(peer2,iter(PartitionUpdate.singleRowUpdate(cfm2,dk,builder.build())),cmd))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "DeletionTime expectedCmplxDelete = new DeletionTime(ts(1( - 1,nowInSec)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(Collections.singleton(expectedCell),Sets.newHashSet(cd))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertNull(row.getCell(m,CellPath.create(bb(0))))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testResolveComplexDelete['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "assertEquals(Collections.singleton(expectedCell),Sets.newHashSet(cd))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TestableReadRepair readRepair = new TestableReadRepair(cmd)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "ComplexColumnData cd = row.getComplexColumnData(m)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "ComplexColumnData cd = row.getComplexColumnData(m)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
11->28 [style = bold, label=""];
33->35 [style = bold, label=""];
25->4 [style = solid, label="peer2"];
6->26 [style = bold, label=""];
36->40 [style = bold, label=""];
23->27 [style = bold, label=""];
39->36 [style = solid, label="cd"];
28->30 [style = bold, label=""];
17->32 [style = solid, label="cmd"];
17->14 [style = solid, label="cmd"];
28->40 [style = dashed, label="0"];
2->32 [style = dashed, label="0"];
8->15 [style = solid, label="ts"];
15->0 [style = solid, label="expectedCell"];
8->22 [style = solid, label="ts"];
2->18 [style = bold, label=""];
17->2 [style = solid, label="cmd"];
16->25 [style = bold, label=""];
20->14 [style = bold, label=""];
19->11 [style = bold, label=""];
7->0 [style = solid, label="cd"];
10->21 [style = bold, label=""];
7->0 [style = bold, label=""];
9->10 [style = bold, label=""];
17->32 [style = bold, label=""];
2->18 [style = solid, label="readRepair"];
27->24 [style = solid, label="expectedCmplxDelete"];
27->3 [style = solid, label="expectedCmplxDelete"];
25->5 [style = solid, label="peer2"];
15->16 [style = bold, label=""];
26->19 [style = bold, label=""];
1->7 [style = bold, label=""];
3->4 [style = bold, label=""];
26->39 [style = bold, label=""];
33->35 [style = solid, label="cd"];
17->5 [style = solid, label="cmd"];
8->27 [style = solid, label="ts"];
25->37 [style = solid, label="peer2"];
13->17 [style = bold, label=""];
40->33 [style = bold, label=""];
17->18 [style = solid, label="cmd"];
20->14 [style = solid, label="peer1"];
30->12 [style = bold, label=""];
12->29 [style = bold, label=""];
21->20 [style = bold, label=""];
5->6 [style = bold, label=""];
17->2 [style = bold, label=""];
22->20 [style = bold, label=""];
14->23 [style = bold, label=""];
34->37 [style = bold, label=""];
21->22 [style = bold, label=""];
27->34 [style = solid, label="expectedCmplxDelete"];
8->9 [style = bold, label=""];
8->21 [style = solid, label="ts"];
20->28 [style = solid, label="peer1"];
25->5 [style = bold, label=""];
27->24 [style = bold, label=""];
18->8 [style = bold, label=""];
15->36 [style = solid, label="expectedCell"];
6->26 [style = solid, label="row"];
15->16 [style = solid, label="expectedCell"];
29->1 [style = bold, label=""];
32->18 [style = bold, label=""];
31->17 [style = bold, label=""];
35->34 [style = bold, label=""];
38->17 [style = bold, label=""];
39->36 [style = bold, label=""];
15->35 [style = solid, label="expectedCell"];
32->18 [style = solid, label="readRepair"];
24->15 [style = bold, label=""];
}
