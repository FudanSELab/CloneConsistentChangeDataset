digraph {
31 [style = filled, label = "LocalRegion owner = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "RegionEntryFactory factory@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "map != null@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "LocalRegion owner = isDistributedRegion? mock(,RETURNS_DEEP_STUBS): mock()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "boolean withConcurrencyChecks@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "doThrow().when(owner).checkEntryNotFound(any())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "boolean withConcurrencyChecks@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "TestableAbstractRegionMap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "setEntryFactory(factory)@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ConcurrentMapWithReusableEntries map@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "factory != null@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "when(owner.isInitialized()).thenReturn(true)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "this.regionEntryForGetEntry = regionEntryForGetEntry@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "initialize(owner,new Attributes(),null,false)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "createOwner['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "TestableAbstractRegionMap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "RegionEntry regionEntryForGetEntry@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "RegionEntry regionEntryForGetEntry@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "ConcurrentMapWithReusableEntries map@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "when(owner.getScope()).thenReturn(Scope.LOCAL)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "CachePerfStats cachePerfStats = mock()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "when(owner.getCachePerfStats()).thenReturn(cachePerfStats)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "super(null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "return owner@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "boolean isDistributedRegion@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "doThrow().when(owner).checkEntryNotFound(any())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "setEntryMap(map)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "boolean withConcurrencyChecks@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "when(owner.getEvictionAttributes()).thenReturn(evictionAttributes)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "RegionEntryFactory factory@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
4->9 [style = bold, label=""];
29->10 [style = solid, label="cachePerfStats"];
11->16 [style = bold, label=""];
16->8 [style = dotted, label="true"];
7->6 [style = dotted, label="true"];
27->1 [style = bold, label=""];
0->1 [style = solid, label="withConcurrencyChecks"];
3->1 [style = bold, label=""];
16->8 [style = bold, label=""];
24->25 [style = dotted, label="true"];
26->11 [style = solid, label="map"];
2->3 [style = bold, label=""];
28->31 [style = bold, label=""];
30->3 [style = solid, label="withConcurrencyChecks"];
23->5 [style = solid, label="owner"];
31->29 [style = bold, label=""];
15->11 [style = solid, label="map"];
6->16 [style = solid, label="factory"];
20->16 [style = solid, label="factory"];
21->12 [style = solid, label="regionEntryForGetEntry"];
15->19 [style = solid, label="map"];
11->19 [style = bold, label=""];
7->0 [style = dotted, label="true"];
26->19 [style = solid, label="map"];
7->15 [style = dotted, label="true"];
6->8 [style = solid, label="factory"];
1->17 [style = bold, label=""];
19->16 [style = bold, label=""];
24->14 [style = bold, label=""];
7->14 [style = bold, label=""];
3->27 [style = bold, label=""];
28->30 [style = dotted, label="true"];
12->10 [style = bold, label=""];
25->23 [style = solid, label="isDistributedRegion"];
24->26 [style = dotted, label="true"];
18->12 [style = solid, label="regionEntryForGetEntry"];
24->22 [style = dotted, label="true"];
31->17 [style = solid, label="owner"];
14->12 [style = bold, label=""];
22->1 [style = solid, label="withConcurrencyChecks"];
24->20 [style = dotted, label="true"];
13->5 [style = bold, label=""];
7->18 [style = dotted, label="true"];
20->8 [style = solid, label="factory"];
10->5 [style = solid, label="owner"];
29->10 [style = bold, label=""];
10->2 [style = bold, label=""];
5->11 [style = bold, label=""];
12->23 [style = bold, label=""];
23->2 [style = bold, label=""];
11->19 [style = dotted, label="true"];
10->23 [style = dashed, label="0"];
24->21 [style = dotted, label="true"];
17->4 [style = bold, label=""];
2->3 [style = solid, label="cachePerfStats"];
18->26 [style = dashed, label="0"];
9->13 [style = bold, label=""];
}
