digraph {
18 [style = filled, label = "buildForStreaming['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "overwriteFiles@@@16@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "return write.asCopyOnWriteMergeWrite(mergeScan,isolationLevel)@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "overwriteByFilter@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "return write.asBatchAppend()@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "return write.asStreamingOverwrite()@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "buildForBatch['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "buildForBatch['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "return write.asDynamicOverwrite()@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Preconditions.checkState(!overwriteByFilter || overwriteExpr == Expressions.alwaysTrue(),\"Unsupported streaming operation: overwrite by filter: %s\",overwriteExpr)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "return write.asStreamingAppend()@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "String wapId = spark.conf().get(\"spark.wap.id\",null)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "SparkUtil.validatePartitionTransforms(table.spec())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Schema writeSchema = SparkSchemaUtil.convert(table.schema(),dsSchema)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Preconditions.checkState(!overwriteDynamic,\"Unsupported streaming operation: dynamic partition overwrite\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "overwriteDynamic@@@13@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "String appId = spark.sparkContext().applicationId()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "SparkWrite write = new SparkWrite(spark,table,writeInfo,appId,wapId,writeSchema,dsSchema)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TypeUtil.validateWriteSchema(table.schema(),writeSchema,checkNullability(spark,options),checkOrdering(spark,options))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "return write.asOverwriteByFilter(overwriteExpr)@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Preconditions.checkArgument(canHandleTimestampWithoutZone || !SparkUtil.hasTimestampWithoutZone(table.schema()),SparkUtil.TIMESTAMP_WITHOUT_TIMEZONE_ERROR)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5->2 [style = bold, label=""];
9->19 [style = bold, label=""];
2->13 [style = solid, label="writeSchema"];
0->1 [style = dotted, label="true"];
3->13 [style = solid, label="wapId"];
18->2 [style = bold, label=""];
8->4 [style = bold, label=""];
6->20 [style = dashed, label="0"];
4->16 [style = bold, label=""];
9->20 [style = bold, label=""];
0->11 [style = dotted, label="false"];
17->12 [style = bold, label=""];
9->20 [style = dotted, label="true"];
10->7 [style = dotted, label="true"];
11->19 [style = dashed, label="0"];
3->13 [style = bold, label=""];
12->13 [style = solid, label="appId"];
0->1 [style = bold, label=""];
0->11 [style = bold, label=""];
9->6 [style = dotted, label="true"];
9->19 [style = dotted, label="false"];
2->8 [style = bold, label=""];
9->6 [style = bold, label=""];
10->7 [style = bold, label=""];
15->14 [style = bold, label=""];
12->3 [style = bold, label=""];
4->12 [style = bold, label=""];
14->2 [style = bold, label=""];
2->8 [style = solid, label="writeSchema"];
16->17 [style = bold, label=""];
13->9 [style = bold, label=""];
9->10 [style = dotted, label="false"];
10->0 [style = dotted, label="false"];
10->0 [style = bold, label=""];
9->10 [style = bold, label=""];
}
