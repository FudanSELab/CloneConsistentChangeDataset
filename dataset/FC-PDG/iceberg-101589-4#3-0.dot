digraph {
26 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "expectedIcebergProperties.put(TableProperties.ENGINE_HIVE_ENABLED,\"true\")@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "hmsParams.remove(BaseMetastoreTableOperations.METADATA_LOCATION_PROP)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(\"TRUE\",hmsParams.get(InputFormatConfig.EXTERNAL_TABLE_PURGE))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertEquals(.getName(),hmsTable.getSd().getInputFormat())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(0,fs.listStatus(new Path(hmsTableLocation,\"metadata\")).length)@@@48@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "AssertHelpers.assertThrows(\"should throw exception\",,\"Table does not exist\",null)@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(.getName(),hmsTable.getParameters().get(hive_metastoreConstants.META_TABLE_STORAGE))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "!Catalogs.hiveCatalog(shell.getHiveConf())@@@25@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "expectedIcebergProperties.put(\"dummy\",\"test\")@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Map<String,String> hmsParams = hmsTable.getParameters()@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "AssertHelpers.assertThrows(\"should throw exception\",,\"Table does not exist\",null)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "shell.executeStatement(\"DROP TABLE customers\")@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertEquals(PartitionSpec.unpartitioned(),icebergTable.spec())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "FileSystem fs = Util.getFs(hmsTableLocation,shell.getHiveConf())@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(.getName(),hmsTable.getSd().getSerdeInfo().getSerializationLib())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertEquals(Collections.singletonMap(\"dummy\",\"test\"),icebergTable.properties())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "fs.exists(hmsTableLocation)@@@46@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Assert.assertEquals(1,fs.listStatus(hmsTableLocation).length)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Map<String,String> expectedIcebergProperties = new HashMap<>(2)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(6,hmsParams.size())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Assert.assertNotNull(hmsParams.get(hive_metastoreConstants.DDL_TIME))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testCreateTableWithUnpartitionedSpec['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(.getName(),hmsTable.getSd().getOutputFormat())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(\"TRUE\",hmsParams.get(\"EXTERNAL\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(5,hmsParams.size())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "org.apache.hadoop.hive.metastore.api.Table hmsTable = shell.metastore().clientPool().run(null)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "Catalogs.hiveCatalog(shell.getHiveConf())@@@11@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" + \"'\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(PartitionSpec.unpartitioned()) + \"')\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(\"test\",hmsParams.get(\"dummy\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" + \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" + testTables.locationForCreateTableSQL(identifier) + \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" + SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" + \"'\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(PartitionSpec.unpartitioned()) + \"', \" + \"'dummy'='test')\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "IGNORED_PARAMS.forEach(null)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "hmsTable = shell.metastore().clientPool().run(null)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TableIdentifier identifier = TableIdentifier.of(\"default\",\"customers\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "org.apache.iceberg.Table icebergTable = testTables.loadTable(identifier)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertTrue(hmsParams.get(BaseMetastoreTableOperations.METADATA_LOCATION_PROP).startsWith(icebergTable.location()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertEquals(expectedIcebergProperties,icebergTable.properties())@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(SPEC,icebergTable.spec())@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Path hmsTableLocation = new Path(hmsTable.getSd().getLocation())@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testCreateTableWithUnpartitionedSpec['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "Assert.assertEquals(BaseMetastoreTableOperations.ICEBERG_TABLE_TYPE_VALUE.toUpperCase(),hmsTable.getParameters().get(BaseMetastoreTableOperations.TABLE_TYPE_PROP))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Catalogs.hiveCatalog(shell.getHiveConf())@@@11@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA.asStruct(),icebergTable.schema().asStruct())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "org.apache.hadoop.hive.metastore.api.Table hmsTable = shell.metastore().clientPool().run(null)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testCreateDropTable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15->42 [style = solid, label="hmsTableLocation"];
18->37 [style = bold, label=""];
32->22 [style = dotted, label="false"];
5->10 [style = bold, label=""];
8->28 [style = bold, label=""];
8->28 [style = dotted, label="true"];
15->27 [style = solid, label="hmsTableLocation"];
16->0 [style = bold, label=""];
19->18 [style = bold, label=""];
3->9 [style = dotted, label="false"];
32->24 [style = dotted, label="true"];
14->30 [style = bold, label=""];
40->35 [style = solid, label="expectedIcebergProperties"];
41->19 [style = bold, label=""];
32->43 [style = dotted, label="false"];
36->44 [style = bold, label=""];
0->6 [style = bold, label=""];
38->10 [style = bold, label=""];
2->11 [style = solid, label="identifier"];
30->20 [style = bold, label=""];
32->40 [style = dotted, label="false"];
28->39 [style = bold, label=""];
32->36 [style = dotted, label="false"];
26->36 [style = bold, label=""];
32->44 [style = dotted, label="false"];
11->16 [style = dashed, label="0"];
37->21 [style = bold, label=""];
8->14 [style = bold, label=""];
2->16 [style = solid, label="identifier"];
39->14 [style = bold, label=""];
8->39 [style = dotted, label="true"];
20->31 [style = bold, label=""];
24->29 [style = bold, label=""];
4->2 [style = bold, label=""];
40->34 [style = bold, label=""];
17->32 [style = bold, label=""];
15->22 [style = solid, label="hmsTableLocation"];
7->8 [style = bold, label=""];
32->13 [style = dotted, label="false"];
32->35 [style = dotted, label="false"];
1->7 [style = bold, label=""];
25->2 [style = bold, label=""];
32->33 [style = bold, label=""];
7->3 [style = bold, label=""];
15->44 [style = solid, label="hmsTableLocation"];
32->33 [style = dotted, label="true"];
15->26 [style = bold, label=""];
2->0 [style = solid, label="identifier"];
3->9 [style = bold, label=""];
6->5 [style = bold, label=""];
12->2 [style = bold, label=""];
11->0 [style = bold, label=""];
0->23 [style = bold, label=""];
43->35 [style = bold, label=""];
22->42 [style = dotted, label="true"];
33->24 [style = bold, label=""];
3->8 [style = bold, label=""];
32->40 [style = bold, label=""];
23->38 [style = bold, label=""];
22->27 [style = dotted, label="true"];
31->41 [style = bold, label=""];
32->34 [style = dotted, label="false"];
22->42 [style = bold, label=""];
42->27 [style = bold, label=""];
44->22 [style = bold, label=""];
13->15 [style = bold, label=""];
32->29 [style = dotted, label="true"];
32->15 [style = dotted, label="false"];
35->13 [style = bold, label=""];
10->1 [style = bold, label=""];
34->43 [style = bold, label=""];
3->8 [style = dotted, label="true"];
32->26 [style = dotted, label="false"];
21->17 [style = bold, label=""];
2->11 [style = bold, label=""];
6->23 [style = dashed, label="0"];
2->16 [style = bold, label=""];
}
