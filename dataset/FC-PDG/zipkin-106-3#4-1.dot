digraph {
1 [style = filled, label = "assertThat(getTraces(QueryRequest.newBuilder().annotationQuery(singletonMap(\"http.path\",\"/api/v2/services\")))).isNotEmpty()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertThat(getServices(\"v2\").body().string()).isEqualTo(\"((\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertQueryReturnsResults(QueryRequest.newBuilder().spanName(\"get-service-names\"),traces)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "List<List<Span>> traces = awaitSpans(2)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertThat(getTraces(QueryRequest.newBuilder().annotationQuery(singletonMap(\"http.path\",\"/api/v1/spans\")))).isNotEmpty()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "post(\"v1\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "postIsTraced_v1['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertQueryReturnsResults(QueryRequest.newBuilder().annotationQuery(singletonMap(\"http.path\",\"/api/v2/services\")),traces)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "getIsTraced_v2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "awaitSpans()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(getTraces(QueryRequest.newBuilder().spanName(\"accept-spans\"))).isNotEmpty()@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "getIsTraced_v2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertThat(get(\"v2\").body().string()).isEqualTo(\"((\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertThat(getTraces(QueryRequest.newBuilder().spanName(\"get-service-names\"))).isNotEmpty()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1->3 [style = bold, label=""];
6->8 [style = bold, label=""];
0->8 [style = dashed, label="0"];
12->2 [style = bold, label=""];
7->5 [style = bold, label=""];
13->12 [style = bold, label=""];
1->5 [style = dashed, label="0"];
1->10 [style = dashed, label="0"];
3->11 [style = dashed, label="0"];
5->9 [style = bold, label=""];
2->7 [style = dashed, label="0"];
2->10 [style = bold, label=""];
7->5 [style = solid, label="traces"];
3->9 [style = dashed, label="0"];
2->1 [style = bold, label=""];
7->9 [style = solid, label="traces"];
8->7 [style = bold, label=""];
4->0 [style = bold, label=""];
0->2 [style = bold, label=""];
10->11 [style = bold, label=""];
}
