digraph {
37 [style = filled, label = "Assert.assertEquals(1,ws.size())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "testRemoveWatchBit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "Assert.assertArrayEquals(new Integer((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@3a93ca,actualBits.toArray(new Integer(((())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(1,ws.size())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(0,ws.cachedSize())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Assert.assertFalse(ws.contains(1))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(1,ws.cachedSize())@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "Assert.assertTrue(ws.contains(2))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "ws.remove(3)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "List<Integer> actualBits = new ArrayList<Integer>()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "ws.add(2)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "testAddWatchBit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "int watcherCacheSize = 1@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "BitHashSet ws = new BitHashSet(watcherCacheSize)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(1,ws.cachedSize())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "ws.add(3)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(1,ws.cachedSize())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Assert.assertArrayEquals(new Integer((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@3a9251,actualBits.toArray(new Integer(((())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(2,ws.size())@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "ws.remove(1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertTrue(ws.add(1))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "actualBits.add(bit)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(1,ws.size())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "actualBits.add(bit)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertArrayEquals(new Integer((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@3a9333,actualBits.toArray(new Integer(((())@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertEquals(2,ws.size())@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertTrue(ws.add(1))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "Assert.assertArrayEquals(new Integer((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@3a92a4,actualBits.toArray(new Integer(((())@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertEquals(1,ws.size())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "actualBits.add(bit)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertTrue(ws.add(2))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "Assert.assertTrue(ws.contains(1))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertArrayEquals(new Integer((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@3a92e8,actualBits.toArray(new Integer(((())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertTrue(ws.add(2))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(1,ws.cachedSize())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "actualBits.add(bit)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertArrayEquals(new Integer((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@3a939a,actualBits.toArray(new Integer(((())@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertTrue(ws.contains(1))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "actualBits.clear()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "actualBits.clear()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "ws.remove(2)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Assert.assertEquals(0,ws.size())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "Assert.assertEquals(0,ws.cachedSize())@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertTrue(ws.contains(1))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "assertFalse(ws.add(1))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testAddWatchBit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(1,ws.cachedSize())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "Assert.assertEquals(2,ws.size())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "ws.add(1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(1,ws.cachedSize())@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertEquals(1,ws.size())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "List<Integer> actualBits = new ArrayList<Integer>()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->32 [style = dashed, label="0"];
10->18 [style = bold, label=""];
5->8 [style = bold, label=""];
32->45 [style = bold, label=""];
16->13 [style = bold, label=""];
36->47 [style = bold, label=""];
42->37 [style = bold, label=""];
11->20 [style = dashed, label="0"];
10->31 [style = bold, label=""];
3->26 [style = dashed, label="0"];
22->19 [style = bold, label=""];
16->19 [style = dashed, label="0"];
34->1 [style = bold, label=""];
40->51 [style = bold, label=""];
30->27 [style = bold, label=""];
17->23 [style = dashed, label="0"];
23->26 [style = bold, label=""];
8->14 [style = bold, label=""];
6->0 [style = bold, label=""];
28->1 [style = bold, label=""];
9->10 [style = bold, label=""];
38->48 [style = bold, label=""];
12->9 [style = bold, label=""];
44->39 [style = bold, label=""];
39->11 [style = bold, label=""];
1->2 [style = solid, label="watcherCacheSize"];
29->21 [style = bold, label=""];
12->21 [style = dashed, label="0"];
19->24 [style = bold, label=""];
26->30 [style = bold, label=""];
47->49 [style = bold, label=""];
2->38 [style = bold, label=""];
4->25 [style = dashed, label="0"];
13->44 [style = dashed, label="0"];
25->20 [style = bold, label=""];
3->5 [style = bold, label=""];
21->9 [style = bold, label=""];
13->24 [style = dashed, label="0"];
20->23 [style = bold, label=""];
11->3 [style = bold, label=""];
0->4 [style = bold, label=""];
0->25 [style = bold, label=""];
45->50 [style = bold, label=""];
49->46 [style = bold, label=""];
14->12 [style = bold, label=""];
33->43 [style = bold, label=""];
7->16 [style = bold, label=""];
7->38 [style = dashed, label="0"];
37->44 [style = bold, label=""];
17->3 [style = bold, label=""];
48->33 [style = bold, label=""];
11->17 [style = bold, label=""];
43->41 [style = bold, label=""];
8->27 [style = dashed, label="0"];
1->2 [style = bold, label=""];
50->35 [style = bold, label=""];
2->7 [style = bold, label=""];
13->6 [style = bold, label=""];
27->29 [style = bold, label=""];
2->22 [style = bold, label=""];
4->11 [style = bold, label=""];
24->6 [style = bold, label=""];
3->32 [style = bold, label=""];
35->36 [style = bold, label=""];
46->40 [style = bold, label=""];
14->29 [style = dashed, label="0"];
7->22 [style = dashed, label="0"];
41->42 [style = bold, label=""];
18->31 [style = dashed, label="0"];
5->30 [style = dashed, label="0"];
15->1 [style = bold, label=""];
}
