digraph {
22 [style = filled, label = "assertNotNull(d)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "d = processAdd(\"trim-most\",doc(f(\"id\",\"1111\"),f(\"foo_t\",\" string1 \"),f(\"foo_s\",\" string2 \"),f(\"bar_dt\",\" string3 \")))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "d = processAdd(\"trim-few\",doc(f(\"id\",\"1111\"),f(\"foo_t\",\" string1 \"),f(\"foo_s\",\" string2 \"),f(\"bar_dt\",\" string3 \"),f(\"bar_HOSS_s\",\" string4 \")))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\"string3\",d.getFieldValue(\"bar_dt\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\" string4 \",d.getFieldValue(\"bar_HOSS_s\"))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertNotNull(d)@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"string4\",d.getFieldValue(\"bar_HOSS_s\"))@@@31@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "testTrimRegex['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(\"string2\",d.getFieldValue(\"foo_s\"))@@@29@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(\" string5 \",d.getFieldValue(\"foo_pdt\"))@@@24@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(\"string3\",d.getFieldValue(\"bar_dt\"))@@@30@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "d = processAdd(\"trim-most\",doc(f(\"id\",\"1111\"),f(\"foo_t\",\" string1 \"),f(\"foo_s\",\" string2 \"),f(\"bar_dt\",\" string3 \"),f(\"foo_pdt\",\" string4 \")))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "assertEquals(\"string4\",d.getFieldValue(\"foo_pdt\"))@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertNotNull(d)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
46 [style = filled, label = "d = processAdd(\"trim-field-regexes\",doc(f(\"id\",\"1111\"),f(\"foo_t\",\" string1 \"),f(\"foozat_s\",\" string2 \"),f(\"bar_t\",\" string3 \"),f(\"bar_s\",\" string4 \")))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertNotNull(d)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(\" string6 \",d.getFieldValue(\"foo_HOSS_pdt\"))@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "assertEquals(\"string3\",d.getFieldValue(\"bar_dt\"))@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "assertEquals(\" string4 \",d.getFieldValue(\"bar_HOSS_s\"))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\" string6 \",d.getFieldValue(\"foo_HOSS_pdt\"))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"string1\",d.getFieldValue(\"foo_t\"))@@@28@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "d = processAdd(\"trim-many\",doc(f(\"id\",\"1111\"),f(\"foo_t\",\" string1 \"),f(\"foo_s\",\" string2 \"),f(\"bar_dt\",\" string3 \"),f(\"bar_HOSS_s\",\" string4 \"),f(\"foo_pdt\",\" string5 \"),f(\"foo_HOSS_pdt\",\" string6 \")))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "d = processAdd(\"trim-many\",doc(f(\"id\",\"1111\"),f(\"foo_t\",\" string1 \"),f(\"foo_s\",\" string2 \"),f(\"bar_dt\",\" string3 \"),f(\"bar_HOSS_s\",\" string4 \")))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "assertEquals(\"string2\",d.getFieldValue(\"foo_s\"))@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "assertNotNull(d)@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertEquals(\"string5\",d.getFieldValue(\"foo_pdt\"))@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "d = processAdd(\"trim-few\",doc(f(\"id\",\"1111\"),f(\"foo_t\",\" string1 \"),f(\"foo_s\",\" string2 \"),f(\"bar_dt\",\" string3 \"),f(\"bar_HOSS_s\",\" string4 \"),f(\"foo_pdt\",\" string5 \"),f(\"foo_HOSS_pdt\",\" string6 \")))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "assertEquals(\"string2\",d.getFieldValue(\"foozat_s\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "testTrimExclusions['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertEquals(\" string3 \",d.getFieldValue(\"bar_t\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(\"string5\",d.getFieldValue(\"foo_pdt\"))@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "assertEquals(\"string1\",d.getFieldValue(\"foo_t\"))@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "assertEquals(\"string4\",d.getFieldValue(\"bar_s\"))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "testTrimExclusions['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertEquals(\"string3\",d.getFieldValue(\"bar_dt\"))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "d = processAdd(\"trim-some\",doc(f(\"id\",\"1111\"),f(\"foo_t\",\" string1 \"),f(\"foo_s\",\" string2 \"),f(\"bar_dt\",\" string3 \"),f(\"bar_HOSS_s\",\" string4 \")))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertEquals(\"string2\",d.getFieldValue(\"foo_s\"))@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertEquals(\" string1 \",d.getFieldValue(\"foo_t\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(\"string1\",d.getFieldValue(\"foo_t\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(\"string2\",d.getFieldValue(\"foo_s\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"string1\",d.getFieldValue(\"foo_t\"))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(\"string1\",d.getFieldValue(\"foo_t\"))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "d = processAdd(\"trim-some\",doc(f(\"id\",\"1111\"),f(\"foo_t\",\" string1 \"),f(\"foo_s\",\" string2 \"),f(\"bar_dt\",\" string3 \"),f(\"bar_HOSS_s\",\" string4 \"),f(\"foo_pdt\",\" string5 \"),f(\"foo_HOSS_pdt\",\" string6 \")))@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "SolrInputDocument d = null@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(\" string6 \",d.getFieldValue(\"foo_HOSS_pdt\"))@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertEquals(\" string3 \",d.getFieldValue(\"bar_dt\"))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(\"string4\",d.getFieldValue(\"bar_HOSS_s\"))@@@26@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
18->43 [style = dashed, label="0"];
27->13 [style = bold, label=""];
8->30 [style = bold, label=""];
10->18 [style = bold, label=""];
18->24 [style = bold, label=""];
20->17 [style = bold, label=""];
6->26 [style = bold, label=""];
28->5 [style = bold, label=""];
10->43 [style = bold, label=""];
21->27 [style = bold, label=""];
0->6 [style = bold, label=""];
17->22 [style = solid, label="d"];
33->22 [style = solid, label="d"];
42->20 [style = bold, label=""];
20->46 [style = bold, label=""];
23->2 [style = solid, label="d"];
7->8 [style = solid, label="d"];
3->44 [style = dashed, label="0"];
31->11 [style = solid, label="d"];
37->32 [style = solid, label="d"];
16->25 [style = bold, label=""];
17->33 [style = dashed, label="0"];
17->22 [style = bold, label=""];
2->10 [style = bold, label=""];
11->9 [style = bold, label=""];
9->7 [style = bold, label=""];
7->8 [style = bold, label=""];
12->1 [style = bold, label=""];
32->2 [style = bold, label=""];
31->11 [style = bold, label=""];
34->11 [style = bold, label=""];
40->38 [style = bold, label=""];
20->33 [style = bold, label=""];
43->45 [style = bold, label=""];
45->44 [style = bold, label=""];
13->4 [style = solid, label="d"];
5->16 [style = bold, label=""];
6->37 [style = bold, label=""];
29->20 [style = bold, label=""];
1->28 [style = bold, label=""];
30->21 [style = bold, label=""];
3->41 [style = solid, label="d"];
41->36 [style = bold, label=""];
24->45 [style = dashed, label="0"];
14->0 [style = bold, label=""];
3->19 [style = bold, label=""];
15->31 [style = bold, label=""];
17->46 [style = dashed, label="0"];
3->41 [style = bold, label=""];
26->23 [style = bold, label=""];
22->10 [style = bold, label=""];
46->22 [style = solid, label="d"];
37->32 [style = bold, label=""];
4->12 [style = bold, label=""];
30->40 [style = bold, label=""];
23->2 [style = bold, label=""];
19->15 [style = bold, label=""];
22->14 [style = bold, label=""];
38->35 [style = bold, label=""];
39->20 [style = bold, label=""];
24->3 [style = bold, label=""];
36->34 [style = bold, label=""];
33->22 [style = bold, label=""];
46->22 [style = bold, label=""];
13->4 [style = bold, label=""];
}
