digraph {
27 [style = filled, label = "assertEquals(chain,Arrays.asList(\"123456789\",\"\",42,\"abcd\"),d.getFieldValues(\"source1_s\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(chain,Arrays.asList(\"orig1\",\"orig2\",\"123456789\",\"\",42,\"abcd\"),d.getFieldValues(\"dest_s\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "d = processAdd(chain,doc(f(\"id\",\"1111\"),field(\"dest_s\",\"orig1\",\"orig2\"),f(\"source1_s\",\"123456789\",\"\",42,\"abcd\")))@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertNotNull(chain,d)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "SolrInputDocument d@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(chain,Arrays.asList(\"123456789\",\"\",42,\"abcd\"),d.getFieldValues(\"source1_s\"))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(Arrays.asList(\"123456789\",\"\",42,\"abcd\"),d.getFieldValues(\"foo_y2_s\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertNotNull(chain,d)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(chain + \": dest boost changed\",2.3f,d.getField(\"dest_s\").getBoost(),0.0f)@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "d = processAdd(chain,doc(f(\"id\",\"1111\"),field(\"dest_s\",\"orig1\",\"orig2\"),f(\"source0_s\",\"NOT COPIED\"),f(\"source1_s\",\"123456789\",\"\",42,\"abcd\")))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "testCloneFieldRegexReplaceAll['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "testCloneField['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "SolrInputDocument d = processAdd(\"clone-regex-replaceall\",doc(f(\"id\",\"1111\"),f(\"foo_x2_s\",\"123456789\",\"\",42,\"abcd\"),f(\"foo_x3_x7_s\",\"xyz\")))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(chain,Arrays.asList(\"orig1\",\"orig2\",\"123456789\",\"\",42,\"abcd\",\"xxx\",999),d.getFieldValues(\"dest_s\"))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(chain,Arrays.asList(\"orig1\",\"orig2\",\"123456789\",\"\",42,\"abcd\"),d.getFieldValues(\"dest_s\"))@@@34@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(chain,Arrays.asList(\"123456789\",\"\",42,\"abcd\"),d.getFieldValues(\"source1_s\"))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(chain,Arrays.asList(\"123456789\",\"\",42,\"abcd\"),d.getFieldValues(\"dest_s\"))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertNotNull(chain,d)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "d = processAdd(chain,doc(f(\"id\",\"1111\"),field(\"dest_s\",\"orig1\",\"orig2\"),f(\"source0_s\",\"NOT COPIED\"),f(\"source1_s\",\"123456789\",\"\",42,\"abcd\"),f(\"source2_s\",\"xxx\",999)))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertEquals(chain + \": dest boost changed\",2.3f,d.getField(\"dest_s\").getBoost(),0.0f)@@@37@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertEquals(chain,Arrays.asList(\"xxx\",999),d.getFieldValues(\"source2_s\"))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(chain,Arrays.asList(\"123456789\",\"\",42,\"abcd\"),d.getFieldValues(\"source1_s\"))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "d = processAdd(chain,doc(f(\"id\",\"1111\"),field(\"dest_s\",2.3f,\"orig1\",\"orig2\"),f(\"source1_s\",\"123456789\",\"\",42,\"abcd\")))@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertEquals(chain,Arrays.asList(\"123456789\",\"\",42,\"abcd\"),d.getFieldValues(\"source1_s\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(chain + \": dest boost changed\",2.3f,d.getField(\"dest_s\").getBoost(),0.0f)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "assertEquals(chain,Arrays.asList(\"123456789\",\"\",42,\"abcd\"),d.getFieldValues(\"dest_s\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "d = processAdd(chain,doc(f(\"id\",\"1111\"),field(\"dest_s\",2.3f,\"orig1\",\"orig2\"),f(\"source0_s\",\"NOT COPIED\"),f(\"source1_s\",\"123456789\",\"\",42,\"abcd\")))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertEquals(chain,Arrays.asList(\"123456789\",\"\",42,\"abcd\"),d.getFieldValues(\"source1_s\"))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(chain,Arrays.asList(\"123456789\",\"\",42,\"abcd\",\"xxx\",999),d.getFieldValues(\"dest_s\"))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertNotNull(chain,d)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "d = processAdd(chain,doc(f(\"id\",\"1111\"),field(\"dest_s\",2.3f,\"orig1\",\"orig2\"),f(\"source0_s\",\"NOT COPIED\"),f(\"source1_s\",\"123456789\",\"\",42,\"abcd\"),f(\"source2_s\",\"xxx\",999)))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "assertNotNull(d)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertNotNull(chain,d)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "d = processAdd(chain,doc(f(\"id\",\"1111\"),f(\"source1_s\",\"123456789\",\"\",42,\"abcd\")))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "d = processAdd(chain,doc(f(\"id\",\"1111\"),f(\"source0_s\",\"NOT COPIED\"),f(\"source1_s\",\"123456789\",\"\",42,\"abcd\"),f(\"source2_s\",\"xxx\",999)))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testCloneField['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertNotNull(chain,d)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "d = processAdd(chain,doc(f(\"id\",\"1111\"),f(\"source0_s\",\"NOT COPIED\"),f(\"source1_s\",\"123456789\",\"\",42,\"abcd\")))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(\"xyz\",d.getFieldValue(\"foo_y3_y7_s\"))@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(chain,Arrays.asList(\"xxx\",999),d.getFieldValues(\"source2_s\"))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24->10 [style = bold, label=""];
0->3 [style = bold, label=""];
34->4 [style = solid, label="d"];
2->26 [style = bold, label=""];
20->13 [style = bold, label=""];
37->36 [style = bold, label=""];
25->34 [style = bold, label=""];
26->17 [style = bold, label=""];
10->0 [style = solid, label="d"];
11->34 [style = dashed, label="0"];
21->15 [style = bold, label=""];
32->0 [style = bold, label=""];
11->4 [style = bold, label=""];
24->32 [style = bold, label=""];
8->35 [style = dashed, label="0"];
33->2 [style = bold, label=""];
28->7 [style = bold, label=""];
22->28 [style = bold, label=""];
30->6 [style = bold, label=""];
9->8 [style = bold, label=""];
12->1 [style = bold, label=""];
14->33 [style = dashed, label="0"];
29->12 [style = solid, label="d"];
17->23 [style = bold, label=""];
36->39 [style = bold, label=""];
11->4 [style = solid, label="d"];
19->16 [style = bold, label=""];
23->29 [style = bold, label=""];
18->29 [style = bold, label=""];
29->12 [style = bold, label=""];
18->22 [style = bold, label=""];
21->9 [style = bold, label=""];
21->29 [style = bold, label=""];
23->22 [style = bold, label=""];
31->6 [style = bold, label=""];
9->8 [style = solid, label="d"];
14->2 [style = solid, label="d"];
10->32 [style = dashed, label="0"];
16->33 [style = bold, label=""];
15->9 [style = bold, label=""];
25->11 [style = bold, label=""];
33->2 [style = solid, label="d"];
6->36 [style = dashed, label="0"];
10->0 [style = bold, label=""];
4->20 [style = bold, label=""];
13->5 [style = bold, label=""];
39->38 [style = bold, label=""];
34->4 [style = bold, label=""];
16->14 [style = bold, label=""];
3->21 [style = bold, label=""];
27->24 [style = bold, label=""];
14->2 [style = bold, label=""];
7->25 [style = bold, label=""];
13->22 [style = bold, label=""];
32->0 [style = solid, label="d"];
6->9 [style = bold, label=""];
1->19 [style = bold, label=""];
38->35 [style = bold, label=""];
8->27 [style = bold, label=""];
5->22 [style = bold, label=""];
23->18 [style = bold, label=""];
15->29 [style = bold, label=""];
9->38 [style = dashed, label="0"];
22->28 [style = solid, label="d"];
36->39 [style = solid, label="d"];
}
