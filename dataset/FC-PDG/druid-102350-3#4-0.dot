digraph {
30 [style = filled, label = "testRunWithMaximumMessageTime['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc1))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "expect(recordSupplier.poll(anyLong())).andReturn(records.subList(0,13)).once()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testRunWithTransformSpec['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertEquals(4,task.getRunner().getRowIngestionMeters().getThrownAway())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getProcessed())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"4\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(null,\"sequence0\",new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"0\")),new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"4\")),true,null,DateTimes.of(\"2010\"),\"awsEndpoint\",null,null,null,null,null,false))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Thread.sleep(10)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "expectLastCall().once()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "recordSupplier.assign(anyObject())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getProcessed())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1),publishedDescriptors())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "verifyAll()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "expectLastCall().anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "task.getRunner().getStatus() != Status.READING@@@14@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "recordSupplier.seek(anyObject(),anyString())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3),publishedDescriptors())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(2,task.getRunner().getRowIngestionMeters().getThrownAway())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final KinesisIndexTask task = createTask(null,DATA_SCHEMA.withTransformSpec(new TransformSpec(new SelectorDimFilter(\"dim1\",\"b\",null),ImmutableList.of(new ExpressionTransform(\"dim1t\",\"concat(dim1,dim1)\",ExprMacroTable.nil())))),new KinesisIndexTaskIOConfig(null,\"sequence0\",new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"0\")),new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"4\")),true,null,null,\"awsEndpoint\",null,null,null,null,null,false))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "expect(recordSupplier.getEarliestSequenceNumber(anyObject())).andReturn(\"0\").anyTimes()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "recordSupplier.close()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2009/P1D\",0)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "SegmentDescriptor desc3 = SD(task,\"2010/P1D\",0)@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2010/P1D\",0)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"bb\"),readSegmentColumn(\"dim1t\",desc1))@@@26@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expectLastCall().anyTimes()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "replayAll()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testRunWithMaximumMessageTime['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26->28 [style = solid, label="task"];
26->21 [style = solid, label="task"];
6->3 [style = bold, label=""];
0->9 [style = bold, label=""];
37->18 [style = solid, label="desc1"];
12->33 [style = dashed, label="0"];
8->15 [style = bold, label=""];
4->17 [style = bold, label=""];
15->14 [style = bold, label=""];
21->24 [style = solid, label="desc3"];
4->7 [style = dotted, label="true"];
21->27 [style = dashed, label="0"];
37->31 [style = solid, label="desc1"];
26->32 [style = dashed, label="0"];
11->6 [style = bold, label=""];
26->25 [style = bold, label=""];
36->15 [style = bold, label=""];
10->31 [style = dashed, label="0"];
5->26 [style = bold, label=""];
25->4 [style = bold, label=""];
26->9 [style = solid, label="task"];
21->22 [style = solid, label="desc3"];
31->18 [style = bold, label=""];
0->29 [style = bold, label=""];
29->24 [style = solid, label="desc1"];
21->24 [style = bold, label=""];
16->2 [style = solid, label="desc2"];
28->2 [style = solid, label="desc2"];
7->4 [style = bold, label=""];
20->1 [style = bold, label=""];
38->31 [style = bold, label=""];
32->25 [style = solid, label="task"];
24->18 [style = bold, label=""];
33->13 [style = bold, label=""];
17->23 [style = bold, label=""];
9->16 [style = bold, label=""];
4->7 [style = bold, label=""];
1->11 [style = bold, label=""];
9->37 [style = dashed, label="0"];
28->24 [style = solid, label="desc2"];
29->28 [style = bold, label=""];
5->32 [style = bold, label=""];
19->5 [style = bold, label=""];
12->13 [style = bold, label=""];
27->24 [style = solid, label="desc3"];
23->33 [style = bold, label=""];
9->29 [style = dashed, label="0"];
18->10 [style = bold, label=""];
3->19 [style = bold, label=""];
9->10 [style = solid, label="desc1"];
35->37 [style = bold, label=""];
32->37 [style = solid, label="task"];
16->21 [style = bold, label=""];
37->34 [style = bold, label=""];
16->24 [style = solid, label="desc2"];
9->24 [style = solid, label="desc1"];
26->27 [style = solid, label="task"];
32->25 [style = bold, label=""];
2->18 [style = dashed, label="0"];
30->15 [style = bold, label=""];
26->25 [style = solid, label="task"];
26->16 [style = solid, label="task"];
23->12 [style = bold, label=""];
10->2 [style = bold, label=""];
27->24 [style = bold, label=""];
28->27 [style = bold, label=""];
34->38 [style = bold, label=""];
0->35 [style = dashed, label="0"];
29->10 [style = solid, label="desc1"];
2->22 [style = bold, label=""];
16->28 [style = dashed, label="0"];
13->35 [style = bold, label=""];
37->34 [style = solid, label="desc1"];
26->29 [style = solid, label="task"];
14->20 [style = bold, label=""];
13->0 [style = bold, label=""];
27->22 [style = solid, label="desc3"];
}
