digraph {
6 [style = filled, label = "return READER.get().read(reuse,decoder)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "byte(( bytes@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "return READER.get().read(reuse,decoder)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "MetricReport reuse@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "readAndVerifySchemaId(inputStream,schemaId)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Closer closer = Closer.create()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Throwable t@@@18@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "MetricReport reuse@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "{closer.close()}@@@21@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "throw new IOException(String.format(\"MetricReport schema version not recognized. Found version %d, expected %d.\",versionNumber,SCHEMA_VERSION))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "READER = Optional.of(new SpecificDatumReader<>())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "!READER.isPresent()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "DataInputStream inputStream = closer.register(new DataInputStream(new ByteArrayInputStream(bytes)))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Decoder decoder = DecoderFactory.get().jsonDecoder(MetricReport.SCHEMA$,inputStream)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "schemaId != null@@@9@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "{closer.close()}@@@19@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "readAndVerifySchemaVersion(inputStream)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "int versionNumber = inputStream.readInt()@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Throwable t@@@16@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "byte(( bytes@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "MetricReport reuse@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Decoder decoder = DecoderFactory.get().binaryDecoder(inputStream,null)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "versionNumber != SCHEMA_VERSION@@@10@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "deserializeReportFromJson['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "throw closer.rethrow(t)@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "byte(( bytes@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "deserializeReportFromAvroSerialization['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "deserializeReportFromAvroSerialization['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "@Nullable String schemaId@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
0->3 [style = bold, label=""];
23->8 [style = solid, label="reuse"];
5->14 [style = dotted, label="true"];
5->8 [style = bold, label=""];
16->15 [style = bold, label=""];
28->6 [style = bold, label=""];
24->16 [style = solid, label="schemaId"];
12->5 [style = bold, label=""];
13->15 [style = solid, label="inputStream"];
7->10 [style = bold, label=""];
0->17 [style = bold, label=""];
11->1 [style = dotted, label="true"];
20->0 [style = dotted, label="true"];
20->0 [style = bold, label=""];
8->6 [style = solid, label="decoder"];
2->27 [style = dashed, label="0"];
13->18 [style = solid, label="inputStream"];
18->8 [style = solid, label="decoder"];
14->28 [style = bold, label=""];
8->6 [style = bold, label=""];
7->9 [style = dotted, label="true"];
9->10 [style = bold, label=""];
5->14 [style = bold, label=""];
16->22 [style = bold, label=""];
5->28 [style = bold, label=""];
24->15 [style = solid, label="schemaId"];
25->7 [style = bold, label=""];
3->4 [style = bold, label=""];
15->18 [style = bold, label=""];
2->13 [style = solid, label="bytes"];
13->16 [style = bold, label=""];
8->28 [style = dashed, label="0"];
13->28 [style = solid, label="inputStream"];
7->9 [style = bold, label=""];
8->17 [style = bold, label=""];
12->5 [style = solid, label="versionNumber"];
13->22 [style = solid, label="inputStream"];
6->4 [style = bold, label=""];
19->13 [style = solid, label="bytes"];
11->2 [style = dotted, label="true"];
22->18 [style = bold, label=""];
13->12 [style = bold, label=""];
21->24 [style = dotted, label="true"];
10->13 [style = bold, label=""];
27->6 [style = solid, label="reuse"];
21->23 [style = dotted, label="true"];
21->19 [style = dotted, label="true"];
12->14 [style = solid, label="versionNumber"];
28->6 [style = solid, label="decoder"];
26->13 [style = solid, label="bytes"];
13->8 [style = solid, label="inputStream"];
21->7 [style = bold, label=""];
14->8 [style = bold, label=""];
18->8 [style = bold, label=""];
0->3 [style = dotted, label="true"];
2->24 [style = dashed, label="0"];
25->27 [style = dotted, label="true"];
1->6 [style = solid, label="reuse"];
25->26 [style = dotted, label="true"];
11->7 [style = bold, label=""];
16->15 [style = dotted, label="true"];
16->22 [style = dotted, label="false"];
}
