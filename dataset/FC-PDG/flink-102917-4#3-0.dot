digraph {
9 [style = filled, label = "assertEquals(3L,inputGate.getLatestCheckpointId())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testMultiChannelJumpingOverCheckpoint['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "testMultiChannelWithBarriers['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "check(sequence(16(,inputGate.pollNext().get(),PAGE_SIZE)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "assertEquals(2L,handler.getNextExpectedCheckpointId())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "check(sequence(1(,inputGate.pollNext().get(),PAGE_SIZE)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "check(sequence(23(,inputGate.pollNext().get(),PAGE_SIZE)@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "inputGate = createCheckpointedInputGate(3,sequence,handler,false)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "check(sequence(19(,inputGate.pollNext().get(),PAGE_SIZE)@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "handler.setNextExpectedCheckpointId(1L)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "check(sequence(14(,inputGate.pollNext().get(),PAGE_SIZE)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "check(sequence(10(,inputGate.pollNext().get(),PAGE_SIZE)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertEquals(5L,handler.getNextExpectedCheckpointId())@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "assertEquals(4L,handler.getNextExpectedCheckpointId())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "check(sequence(6(,inputGate.pollNext().get(),PAGE_SIZE)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(3,handler.getAbortedCheckpointCounter())@@@45@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(mockInputGate.getBlockedChannels(),empty())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertThat(mockInputGate.getBlockedChannels(),empty())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(1,handler.getTriggeredCheckpointCounter())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "check(sequence(20(,inputGate.pollNext().get(),PAGE_SIZE)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "validateAlignmentTime(startTs,inputGate)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "check(sequence(7(,inputGate.pollNext().get(),PAGE_SIZE)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertThat(mockInputGate.getBlockedChannels(),empty())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(1L,inputGate.getLatestCheckpointId())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertThat(mockInputGate.getBlockedChannels(),empty())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "assertEquals(1L,handler.getNextExpectedCheckpointId())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ValidatingCheckpointHandler handler = new ValidatingCheckpointHandler()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "check(sequence(17(,inputGate.pollNext().get(),PAGE_SIZE)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "check(sequence(26(,inputGate.pollNext().get(),PAGE_SIZE)@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "startTs = System.nanoTime()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "check(sequence(15(,inputGate.pollNext().get(),PAGE_SIZE)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "check(sequence(28(,inputGate.pollNext().get(),PAGE_SIZE)@@@51@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "check(sequence(22(,inputGate.pollNext().get(),PAGE_SIZE)@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "check(sequence(4(,inputGate.pollNext().get(),PAGE_SIZE)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "check(sequence(24(,inputGate.pollNext().get(),PAGE_SIZE)@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "check(sequence(3(,inputGate.pollNext().get(),PAGE_SIZE)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "assertEquals(3L,handler.getNextExpectedCheckpointId())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "inputGate = createCheckpointedInputGate(3,sequence,handler)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "check(sequence(21(,inputGate.pollNext().get(),PAGE_SIZE)@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "check(sequence(9(,inputGate.pollNext().get(),PAGE_SIZE)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "check(sequence(25(,inputGate.pollNext().get(),PAGE_SIZE)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "check(sequence(8(,inputGate.pollNext().get(),PAGE_SIZE)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "long startTs = System.nanoTime()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "check(sequence(2(,inputGate.pollNext().get(),PAGE_SIZE)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "testMultiChannelJumpingOverCheckpoint['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertThat(mockInputGate.getBlockedChannels(),containsInAnyOrder(0,1))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "check(sequence(12(,inputGate.pollNext().get(),PAGE_SIZE)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "check(sequence(11(,inputGate.pollNext().get(),PAGE_SIZE)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(mockInputGate.getBlockedChannels(),empty())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(mockInputGate.getBlockedChannels(),containsInAnyOrder(1))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertEquals(2L,handler.getNextExpectedCheckpointId())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(mockInputGate.getBlockedChannels(),containsInAnyOrder(2))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(mockInputGate.getBlockedChannels(),containsInAnyOrder(0,2))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "check(sequence(18(,inputGate.pollNext().get(),PAGE_SIZE)@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "check(sequence(27(,inputGate.pollNext().get(),PAGE_SIZE)@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(2L,inputGate.getLatestCheckpointId())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "check(sequence(13(,inputGate.pollNext().get(),PAGE_SIZE)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "validateAlignmentTime(startTs,inputGate)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "check(sequence(5(,inputGate.pollNext().get(),PAGE_SIZE)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "check(sequence(0(,inputGate.pollNext().get(),PAGE_SIZE)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(4L,inputGate.getLatestCheckpointId())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "BufferOrEvent(( sequence = {createBuffer(0),createBuffer(2),createBuffer(0),createBarrier(1,1),createBarrier(1,2),createBuffer(0),createBarrier(1,0),createBuffer(0),createBuffer(0),createBuffer(1),createBuffer(1),createBuffer(2),createBarrier(2,0),createBarrier(2,1),createBarrier(2,2),createBuffer(2),createBuffer(2),createBarrier(3,2),createBuffer(0),createBuffer(0),createBarrier(3,0),createBarrier(3,1),createBarrier(4,1),createBarrier(4,2),createBarrier(4,0),createBuffer(0),createEndOfPartition(0),createEndOfPartition(1),createEndOfPartition(2)}@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->61 [style = bold, label=""];
22->21 [style = solid, label="sequence"];
10->23 [style = bold, label=""];
59->22 [style = bold, label=""];
28->26 [style = bold, label=""];
50->46 [style = bold, label=""];
19->23 [style = bold, label=""];
3->13 [style = bold, label=""];
22->33 [style = solid, label="sequence"];
22->19 [style = solid, label="sequence"];
1->49 [style = dashed, label="0"];
37->28 [style = bold, label=""];
13->29 [style = bold, label=""];
61->47 [style = bold, label=""];
1->30 [style = bold, label=""];
22->20 [style = solid, label="sequence"];
11->36 [style = bold, label=""];
22->54 [style = solid, label="sequence"];
15->8 [style = bold, label=""];
40->25 [style = bold, label=""];
22->37 [style = solid, label="sequence"];
17->1 [style = bold, label=""];
17->49 [style = bold, label=""];
24->37 [style = bold, label=""];
27->33 [style = bold, label=""];
57->52 [style = bold, label=""];
60->44 [style = bold, label=""];
26->13 [style = bold, label=""];
20->16 [style = bold, label=""];
55->56 [style = bold, label=""];
33->11 [style = bold, label=""];
6->42 [style = bold, label=""];
22->7 [style = solid, label="sequence"];
41->32 [style = bold, label=""];
38->34 [style = bold, label=""];
22->13 [style = solid, label="sequence"];
4->17 [style = bold, label=""];
22->44 [style = solid, label="sequence"];
22->2 [style = solid, label="sequence"];
22->38 [style = solid, label="sequence"];
22->35 [style = solid, label="sequence"];
46->58 [style = solid, label="startTs"];
22->17 [style = solid, label="sequence"];
14->34 [style = bold, label=""];
2->27 [style = bold, label=""];
5->22 [style = bold, label=""];
23->53 [style = bold, label=""];
22->23 [style = solid, label="sequence"];
12->41 [style = bold, label=""];
26->3 [style = bold, label=""];
36->40 [style = bold, label=""];
56->32 [style = bold, label=""];
53->58 [style = bold, label=""];
9->10 [style = bold, label=""];
46->20 [style = bold, label=""];
22->40 [style = solid, label="sequence"];
51->39 [style = bold, label=""];
22->12 [style = solid, label="sequence"];
22->11 [style = solid, label="sequence"];
49->45 [style = bold, label=""];
22->6 [style = bold, label=""];
22->60 [style = solid, label="sequence"];
56->52 [style = solid, label="startTs"];
16->19 [style = bold, label=""];
22->28 [style = solid, label="sequence"];
22->29 [style = solid, label="sequence"];
8->21 [style = bold, label=""];
20->19 [style = bold, label=""];
7->52 [style = solid, label="inputGate"];
7->31 [style = bold, label=""];
32->8 [style = bold, label=""];
36->0 [style = bold, label=""];
22->8 [style = solid, label="sequence"];
6->42 [style = solid, label="handler"];
22->34 [style = solid, label="sequence"];
43->22 [style = bold, label=""];
25->50 [style = bold, label=""];
34->18 [style = bold, label=""];
2->57 [style = bold, label=""];
19->9 [style = bold, label=""];
22->36 [style = solid, label="sequence"];
42->31 [style = bold, label=""];
38->14 [style = bold, label=""];
18->24 [style = bold, label=""];
25->20 [style = bold, label=""];
41->55 [style = bold, label=""];
52->27 [style = bold, label=""];
39->38 [style = bold, label=""];
23->39 [style = bold, label=""];
29->4 [style = bold, label=""];
22->25 [style = solid, label="sequence"];
21->2 [style = bold, label=""];
22->48 [style = solid, label="sequence"];
22->26 [style = solid, label="sequence"];
31->35 [style = bold, label=""];
22->4 [style = solid, label="sequence"];
22->41 [style = solid, label="sequence"];
22->39 [style = solid, label="sequence"];
7->42 [style = dashed, label="0"];
54->48 [style = bold, label=""];
58->51 [style = bold, label=""];
0->40 [style = bold, label=""];
45->60 [style = bold, label=""];
44->54 [style = bold, label=""];
6->7 [style = solid, label="handler"];
35->12 [style = bold, label=""];
6->7 [style = bold, label=""];
7->58 [style = solid, label="inputGate"];
22->42 [style = solid, label="sequence"];
32->15 [style = bold, label=""];
34->37 [style = bold, label=""];
22->32 [style = solid, label="sequence"];
47->29 [style = bold, label=""];
}
