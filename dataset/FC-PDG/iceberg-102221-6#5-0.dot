digraph {
7 [style = filled, label = "WriteResult result = WriteResult.builder().addAll(testHarness.extractOutputValues()).build()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertTrue(testHarness.getOneInputOperator() instanceof BoundedOneInput)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "long expectedDataFiles = partitioned? 2: 1@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "result = WriteResult.builder().addAll(testHarness.extractOutputValues()).build()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "int i = 0@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testBoundedStreamCloseWithEmittingDataFiles['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testHarness.processElement(SimpleDataUtil.createRowData(1,\"hello\"),timestamp++)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assertions.assertThat(testHarness.getOneInputOperator()).isInstanceOf()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "long checkpointId = 1@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "((BoundedOneInput)testHarness.getOneInputOperator()).endInput()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(expectedDataFiles,result.dataFiles().length)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(0,result.deleteFiles().length)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testHarness.processElement(SimpleDataUtil.createRowData(1,\"hello\"),1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(0,result.deleteFiles().length)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(expectedDataFiles * 2,result.dataFiles().length)@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(0,result.deleteFiles().length)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testHarness.processElement(SimpleDataUtil.createRowData(2,\"world\"),timestamp)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testHarness.prepareSnapshotPreBarrier(checkpointId++)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "long expectedDataFiles = partitioned? 2: 1@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "i < 5@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testBoundedStreamCloseWithEmittingDataFiles['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "i++@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testHarness.prepareSnapshotPreBarrier(checkpointId++)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "WriteResult result = WriteResult.builder().addAll(testHarness.extractOutputValues()).build()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testSnapshotTwice['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(expectedDataFiles,result.dataFiles().length)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testHarness.processElement(SimpleDataUtil.createRowData(2,\"world\"),2)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "long timestamp = 1@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
10->2 [style = solid, label="expectedDataFiles"];
4->14 [style = bold, label=""];
23->20 [style = bold, label=""];
16->18 [style = bold, label=""];
3->17 [style = dashed, label="0"];
22->19 [style = bold, label=""];
4->6 [style = bold, label=""];
10->12 [style = solid, label="expectedDataFiles"];
15->24 [style = dotted, label="true"];
18->17 [style = bold, label=""];
11->25 [style = solid, label="i"];
15->22 [style = dotted, label="true"];
16->23 [style = solid, label="checkpointId"];
6->14 [style = dashed, label="0"];
9->7 [style = bold, label=""];
4->21 [style = dashed, label="0"];
27->22 [style = bold, label=""];
3->4 [style = bold, label=""];
11->15 [style = solid, label="i"];
18->17 [style = solid, label="timestamp"];
14->1 [style = bold, label=""];
11->15 [style = bold, label=""];
15->27 [style = dotted, label="true"];
25->15 [style = solid, label="i"];
19->24 [style = bold, label=""];
6->1 [style = bold, label=""];
26->16 [style = bold, label=""];
13->3 [style = bold, label=""];
20->5 [style = solid, label="expectedDataFiles"];
7->2 [style = bold, label=""];
24->25 [style = bold, label=""];
15->19 [style = dotted, label="true"];
12->24 [style = dashed, label="0"];
25->15 [style = bold, label=""];
11->8 [style = bold, label=""];
10->9 [style = bold, label=""];
5->11 [style = bold, label=""];
20->7 [style = bold, label=""];
20->24 [style = solid, label="expectedDataFiles"];
15->25 [style = dotted, label="true"];
1->10 [style = bold, label=""];
15->27 [style = bold, label=""];
23->27 [style = solid, label="checkpointId"];
17->21 [style = bold, label=""];
8->12 [style = bold, label=""];
17->21 [style = solid, label="timestamp"];
2->5 [style = bold, label=""];
21->23 [style = bold, label=""];
}
