digraph {
43 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,mockIndexService(),maxTokenCount)@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "request.addTokenFilter(Map.of(\"type\",\"mock\",\"stopword\",\"brown\"))@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertEquals(\"quick\",tokens.get(1).getTerm())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "tokens = analyze.getTokens()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<AnalyzeAction.AnalyzeToken> tokens = analyze.getTokens()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,mockIndexService(),maxTokenCount)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "tokens = analyze.getTokens()@@@45@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,environment,mockIndexService(),maxTokenCount)@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"the\",tokens.get(0).getTerm())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(\"fox\",tokens.get(2).getTerm())@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"brown\",tokens.get(1).getTerm())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertEquals(3,tokens.size())@@@39@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertEquals(\"brown\",tokens.get(2).getTerm())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(\"fox\",tokens.get(3).getTerm())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(4,tokens.size())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "request.text(\"the quick brown fox\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "AnalyzeAction.Response analyze = TransportAnalyzeAction.analyze(request,registry,mockIndexService(),maxTokenCount)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "tokens = analyze.getTokens()@@@38@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(\"fox\",tokens.get(3).getTerm())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertEquals(\"quick\",tokens.get(0).getTerm())@@@40@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
51 [style = filled, label = "testWithIndexAnalyzers['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
54 [style = filled, label = "request.addTokenFilter(\"stop\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testWithIndexAnalyzers['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,mockIndexService(),maxTokenCount)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,mockIndexService(),maxTokenCount)@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "request.analyzer(null)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(\"brown\",tokens.get(2).getTerm())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(4,tokens.size())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(\"foxbaz\",tokens.get(2).getTerm())@@@42@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "tokens = analyze.getTokens()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "request.analyzer(\"custom_analyzer\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"quick\",tokens.get(0).getTerm())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "tokens = analyze.getTokens()@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(\"the\",tokens.get(0).getTerm())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertEquals(\"brown\",tokens.get(1).getTerm())@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,environment,mockIndexService(),maxTokenCount)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,mockIndexService(),maxTokenCount)@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "AnalyzeAction.Response analyze = TransportAnalyzeAction.analyze(request,registry,environment,mockIndexService(),maxTokenCount)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "request.addTokenFilter(\"mock\")@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "AnalyzeAction.Request request = new AnalyzeAction.Request()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "request.tokenizer(\"standard\")@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "testNonPreBuildTokenFilter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "request.analyzer(\"standard\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "request.tokenizer(\"standard\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,environment,mockIndexService(),maxTokenCount)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "assertEquals(\"foxbaz\",tokens.get(1).getTerm())@@@48@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "assertEquals(2,tokens.size())@@@46@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "assertEquals(\"brown\",tokens.get(1).getTerm())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(\"quick\",tokens.get(0).getTerm())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "request.addCharFilter(\"my_append\")@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "assertEquals(\"quick\",tokens.get(0).getTerm())@@@47@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "assertEquals(\"fox\",tokens.get(2).getTerm())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"quick\",tokens.get(1).getTerm())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(3,tokens.size())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(3,tokens.size())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26->20 [style = solid, label="request"];
28->29 [style = bold, label=""];
5->10 [style = bold, label=""];
42->43 [style = solid, label="analyze"];
29->15 [style = bold, label=""];
18->24 [style = bold, label=""];
13->32 [style = bold, label=""];
26->42 [style = solid, label="request"];
33->20 [style = bold, label=""];
26->46 [style = solid, label="request"];
20->46 [style = dashed, label="0"];
3->40 [style = bold, label=""];
26->53 [style = bold, label=""];
23->40 [style = dashed, label="0"];
14->48 [style = dashed, label="0"];
32->49 [style = bold, label=""];
27->28 [style = bold, label=""];
11->4 [style = bold, label=""];
40->0 [style = bold, label=""];
25->42 [style = dashed, label="0"];
0->11 [style = bold, label=""];
14->17 [style = bold, label=""];
38->36 [style = bold, label=""];
26->43 [style = solid, label="request"];
21->30 [style = bold, label=""];
53->54 [style = bold, label=""];
26->40 [style = solid, label="request"];
25->6 [style = bold, label=""];
48->17 [style = bold, label=""];
46->18 [style = bold, label=""];
23->0 [style = bold, label=""];
54->22 [style = bold, label=""];
49->43 [style = bold, label=""];
22->23 [style = bold, label=""];
36->39 [style = bold, label=""];
47->50 [style = bold, label=""];
26->22 [style = bold, label=""];
19->16 [style = bold, label=""];
7->26 [style = bold, label=""];
26->38 [style = solid, label="request"];
48->46 [style = solid, label="analyze"];
22->3 [style = bold, label=""];
20->18 [style = bold, label=""];
4->31 [style = bold, label=""];
26->23 [style = solid, label="request"];
6->5 [style = bold, label=""];
3->23 [style = bold, label=""];
1->33 [style = bold, label=""];
17->12 [style = bold, label=""];
26->14 [style = solid, label="request"];
14->20 [style = solid, label="analyze"];
20->25 [style = solid, label="analyze"];
46->42 [style = solid, label="analyze"];
42->6 [style = bold, label=""];
10->13 [style = bold, label=""];
34->37 [style = bold, label=""];
40->48 [style = solid, label="analyze"];
52->26 [style = bold, label=""];
33->46 [style = bold, label=""];
37->38 [style = bold, label=""];
16->48 [style = bold, label=""];
8->9 [style = bold, label=""];
9->21 [style = bold, label=""];
50->45 [style = bold, label=""];
51->26 [style = bold, label=""];
16->14 [style = bold, label=""];
39->41 [style = bold, label=""];
24->8 [style = bold, label=""];
30->2 [style = bold, label=""];
2->25 [style = bold, label=""];
43->44 [style = bold, label=""];
44->47 [style = bold, label=""];
12->27 [style = bold, label=""];
2->42 [style = bold, label=""];
31->19 [style = bold, label=""];
45->34 [style = bold, label=""];
26->25 [style = solid, label="request"];
23->14 [style = solid, label="analyze"];
26->48 [style = solid, label="request"];
43->38 [style = solid, label="analyze"];
15->1 [style = bold, label=""];
41->35 [style = bold, label=""];
}
