digraph {
2 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testNoLeaderFound['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "DruidLeaderClient druidLeaderClient = new DruidLeaderClient(httpClient,druidNodeDiscoveryProvider,\"nodetype\",\"/simple/leader\",serverDiscoverySelector)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "request.setContent(\"hello\".getBytes(\"UTF-8\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "druidLeaderClient.start()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "EasyMock.expect(serverDiscoverySelector.pick()).andReturn(null).anyTimes()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "DruidLeaderClient druidLeaderClient = new DruidLeaderClient(httpClient,druidNodeDiscoveryProvider,NodeType.PEON,\"/simple/leader\",EasyMock.createNiceMock())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "testServerFailureAndRedirect['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(new DiscoveryDruidNode(new DruidNode(\"test\",\"dummyhost\",64231,null,true,false),\"test\",ImmutableMap.of())))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testNoLeaderFound['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Request request = druidLeaderClient.makeRequest(HttpMethod.POST,\"/simple/redirect\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "ServerDiscoverySelector serverDiscoverySelector = EasyMock.createMock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "druidLeaderClient.start()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expectedException.expect()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expectedException.expectMessage(\"No known server\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EasyMock.replay(druidNodeDiscovery,druidNodeDiscoveryProvider)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(NodeType.PEON)).andReturn(druidNodeDiscovery)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(\"nodetype\")).andReturn(druidNodeDiscovery).anyTimes()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(\"hello\",druidLeaderClient.go(request).getContent())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(\"nodetype\")).andReturn(druidNodeDiscovery)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "EasyMock.replay(serverDiscoverySelector,druidNodeDiscovery,druidNodeDiscoveryProvider)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->4 [style = solid, label="druidNodeDiscoveryProvider"];
5->10 [style = bold, label=""];
14->24 [style = bold, label=""];
0->9 [style = bold, label=""];
16->0 [style = bold, label=""];
1->12 [style = solid, label="druidNodeDiscovery"];
22->19 [style = bold, label=""];
4->17 [style = dashed, label="0"];
7->12 [style = bold, label=""];
11->1 [style = bold, label=""];
4->13 [style = bold, label=""];
1->3 [style = solid, label="druidNodeDiscovery"];
20->6 [style = bold, label=""];
0->20 [style = dashed, label="0"];
3->4 [style = bold, label=""];
10->6 [style = bold, label=""];
22->17 [style = solid, label="serverDiscoverySelector"];
7->3 [style = bold, label=""];
4->0 [style = bold, label=""];
6->14 [style = bold, label=""];
3->23 [style = dashed, label="0"];
8->1 [style = bold, label=""];
18->22 [style = bold, label=""];
0->20 [style = solid, label="druidNodeDiscoveryProvider"];
0->23 [style = bold, label=""];
7->13 [style = solid, label="druidNodeDiscoveryProvider"];
3->12 [style = dashed, label="0"];
12->4 [style = bold, label=""];
2->21 [style = dashed, label="0"];
6->15 [style = dashed, label="0"];
0->13 [style = dashed, label="0"];
1->4 [style = solid, label="druidNodeDiscovery"];
9->5 [style = bold, label=""];
7->21 [style = bold, label=""];
21->16 [style = bold, label=""];
7->0 [style = solid, label="druidNodeDiscoveryProvider"];
23->17 [style = bold, label=""];
7->17 [style = solid, label="druidNodeDiscovery"];
22->20 [style = solid, label="serverDiscoverySelector"];
1->2 [style = bold, label=""];
13->9 [style = bold, label=""];
2->7 [style = bold, label=""];
0->17 [style = solid, label="druidNodeDiscoveryProvider"];
19->7 [style = bold, label=""];
17->20 [style = bold, label=""];
24->15 [style = bold, label=""];
}
