digraph {
14 [style = filled, label = "assertThat(aggregate.get(\"3\"),equalTo(\"0+E+F\"))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "processData(driver)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(aggregate.get(\"2\"),equalTo(\"0+B\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "{final KeyValueStore<String,ValueAndTimestamp<String>> reduced = driver.getTimestampedKeyValueStore(\"reduce\")assertThat(reduced.get(\"1\"),equalTo(ValueAndTimestamp.make(\"A+C+D\",10L)))assertThat(reduced.get(\"2\"),equalTo(ValueAndTimestamp.make(\"B\",1L)))assertThat(reduced.get(\"3\"),equalTo(ValueAndTimestamp.make(\"E+F\",9L)))}@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(aggregate.get(\"1\"),equalTo(\"0+A+C+D\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final KeyValueStore<String,String> aggregate = driver.getKeyValueStore(\"aggregate\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "groupedStream.aggregate(MockInitializer.STRING_INIT,MockAggregator.TOSTRING_ADDER,Materialized.as(\"aggregate\").withKeySerde(Serdes.String()).withValueSerde(Serdes.String()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(reduced.get(\"1\"),equalTo(\"A+C+D\"))@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(reduced.get(\"2\"),equalTo(\"B\"))@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "shouldReduceAndMaterializeResults['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "shouldReduceAndMaterializeResults['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(reduced.get(\"3\"),equalTo(\"E+F\"))@@@9@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final KeyValueStore<String,String> reduced = driver.getKeyValueStore(\"reduce\")@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "groupedStream.reduce(MockReducer.STRING_ADDER,Materialized.as(\"reduce\").withKeySerde(Serdes.String()).withValueSerde(Serdes.String()))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "{final KeyValueStore<String,String> reduced = driver.getKeyValueStore(\"reduce\")assertThat(reduced.get(\"1\"),equalTo(\"A+C+D\"))assertThat(reduced.get(\"2\"),equalTo(\"B\"))assertThat(reduced.get(\"3\"),equalTo(\"E+F\"))}@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "shouldAggregateAndMaterializeResults['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8->7 [style = bold, label=""];
9->5 [style = bold, label=""];
6->1 [style = bold, label=""];
1->12 [style = dashed, label="0"];
2->10 [style = dashed, label="0"];
1->2 [style = bold, label=""];
12->10 [style = bold, label=""];
13->12 [style = bold, label=""];
6->13 [style = dashed, label="0"];
3->14 [style = dashed, label="0"];
0->13 [style = bold, label=""];
5->0 [style = bold, label=""];
5->15 [style = dashed, label="0"];
10->14 [style = bold, label=""];
0->6 [style = bold, label=""];
4->5 [style = bold, label=""];
15->0 [style = bold, label=""];
11->15 [style = bold, label=""];
2->3 [style = bold, label=""];
0->8 [style = bold, label=""];
}
