digraph {
36 [style = filled, label = "testRestoreWithEmptyState['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testHarness.open()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(TEST_STATE,removeEquivalenceWrappers(consumerFunction.getRestoredState()))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertEquals(TEST_STREAM_NAME,restoredShardState.getStreamShardHandle().getStreamName())@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "testHarness.setup()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "consumerOperator.close()@@@30@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "SequenceNumberRange sequenceNumberRange = new SequenceNumberRange()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertFalse(restoredShardState.getStreamShardHandle().isClosed())@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "consumerOperator.cancel()@@@21@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "sequenceNumberRange.withStartingSequenceNumber(\"1\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertEquals(1,fetcher.getSubscribedShardsState().size())@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertEquals(TEST_SHARD_ID,restoredShardState.getStreamShardHandle().getShard().getShardId())@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "assertEquals(TEST_SEQUENCE_NUMBER,restoredShardState.getLastProcessedSequenceNum())@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "shard.setSequenceNumberRange(sequenceNumberRange)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "MigrationTestUtil.restoreFromSnapshot(testHarness,\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-snapshot\",testMigrateVersion)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "initialDiscoveryShards.add(new StreamShardHandle(shardMetadata.getStreamName(),shard))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "consumerOperator.close()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "KinesisStreamShardState restoredShardState = fetcher.getSubscribedShardsState().get(0)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "final TestFetcher<String> fetcher = new TestFetcher<>(Collections.singletonList(TEST_STREAM_NAME),new TestSourceContext<>(),new TestRuntimeContext(true,1,0),TestUtils.getStandardProperties(),new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),null,initialDiscoveryShards)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final List<StreamShardHandle> initialDiscoveryShards = new ArrayList<>(TEST_STATE.size())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "shard.setShardId(shardMetadata.getShardId())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testRestore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "consumerFunction.run(new TestSourceContext<>())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(TEST_STATE,consumerFunction.getRestoredState())@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "consumerOperator.close()@@@20@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertTrue(consumerFunction.getRestoredState().isEmpty())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "StreamSource<String,DummyFlinkKinesisConsumer<String>> consumerOperator = new StreamSource<>(consumerFunction)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "consumerOperator.cancel()@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testRestore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(1,consumerFunction.getRestoredState().size())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertNotEquals(null,consumerFunction.getRestoredState())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final DummyFlinkKinesisConsumer<String> consumerFunction = new DummyFlinkKinesisConsumer<>(fetcher,new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "MigrationTestUtil.restoreFromSnapshot(testHarness,\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-empty-snapshot\",testMigrateVersion)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final AbstractStreamOperatorTestHarness<String> testHarness = new AbstractStreamOperatorTestHarness<>(consumerOperator,1,1,0)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "consumerOperator.cancel()@@@31@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Shard shard = new Shard()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(TEST_SEQUENCE_NUMBER,fetcher.getSubscribedShardsState().get(0).getLastProcessedSequenceNum())@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28->29 [style = bold, label=""];
18->31 [style = bold, label=""];
15->10 [style = bold, label=""];
25->28 [style = bold, label=""];
7->11 [style = bold, label=""];
0->5 [style = solid, label="consumerFunction"];
9->2 [style = bold, label=""];
30->20 [style = bold, label=""];
11->34 [style = dashed, label="0"];
8->3 [style = bold, label=""];
14->22 [style = bold, label=""];
33->2 [style = bold, label=""];
22->21 [style = bold, label=""];
10->0 [style = solid, label="fetcher"];
35->32 [style = bold, label=""];
15->6 [style = bold, label=""];
1->10 [style = solid, label="initialDiscoveryShards"];
4->33 [style = solid, label="testHarness"];
12->1 [style = bold, label=""];
24->18 [style = bold, label=""];
6->15 [style = solid, label="shard"];
36->1 [style = bold, label=""];
9->33 [style = dashed, label="0"];
19->24 [style = bold, label=""];
6->14 [style = bold, label=""];
21->26 [style = bold, label=""];
22->26 [style = solid, label="sequenceNumberRange"];
1->6 [style = bold, label=""];
7->34 [style = bold, label=""];
13->27 [style = dashed, label="0"];
29->19 [style = bold, label=""];
16->33 [style = bold, label=""];
5->4 [style = bold, label=""];
10->0 [style = bold, label=""];
26->15 [style = bold, label=""];
31->30 [style = bold, label=""];
23->1 [style = bold, label=""];
5->4 [style = solid, label="consumerOperator"];
11->17 [style = bold, label=""];
14->15 [style = bold, label=""];
17->13 [style = bold, label=""];
34->35 [style = bold, label=""];
2->7 [style = bold, label=""];
17->27 [style = bold, label=""];
13->8 [style = bold, label=""];
4->9 [style = solid, label="testHarness"];
27->25 [style = bold, label=""];
16->9 [style = bold, label=""];
4->16 [style = bold, label=""];
0->5 [style = bold, label=""];
}
