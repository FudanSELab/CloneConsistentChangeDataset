digraph {
0 [style = filled, label = "workerTask.iteration()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "workerTask.initializeAndStart()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "expectConsumerPoll(1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "workerStartingOffsets.put(TOPIC_PARTITION,new OffsetAndMetadata(FIRST_OFFSET))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "workerTask.iteration()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "sinkTask.put(EasyMock.anyObject())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "PowerMock.verifyAll()@@@48@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "EasyMock.expectLastCall()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "workerStartingOffsets.put(TOPIC_PARTITION2,new OffsetAndMetadata(FIRST_OFFSET))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "workerCurrentOffsets.put(TOPIC_PARTITION2,new OffsetAndMetadata(FIRST_OFFSET))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "workerCurrentOffsets.put(TOPIC_PARTITION,new OffsetAndMetadata(FIRST_OFFSET + 1))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "testIgnoredCommit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "PowerMock.replayAll()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "assertEquals(workerStartingOffsets,Whitebox.getInternalState(workerTask,\"currentOffsets\"))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "EasyMock.expect(consumer.assignment()).andReturn(workerCurrentOffsets.keySet())@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "final Capture<OffsetCommitCallback> callback = EasyMock.newCapture()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertEquals(workerStartingOffsets,Whitebox.getInternalState(workerTask,\"lastCommittedOffsets\"))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "workerTask.iteration()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "consumer.commitAsync(EasyMock.eq(committableOffsets),EasyMock.capture(callback))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "committableOffsets.put(TOPIC_PARTITION2,new OffsetAndMetadata(FIRST_OFFSET))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "committableOffsets.put(TOPIC_PARTITION,new OffsetAndMetadata(FIRST_OFFSET + 1))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(workerStartingOffsets,Whitebox.getInternalState(workerTask,\"currentOffsets\"))@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "sinkTaskContext.getValue().requestCommit()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "taskOffsets.put(TOPIC_PARTITION,new OffsetAndMetadata(FIRST_OFFSET + 1))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "EasyMock.expectLastCall().andReturn(taskOffsets)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "workerTask.iteration()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "taskOffsets.put(new TopicPartition(TOPIC,3),new OffsetAndMetadata(FIRST_OFFSET))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "expectPollInitialAssignment()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "expectInitializeTask()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(workerStartingOffsets,Whitebox.getInternalState(workerTask,\"lastCommittedOffsets\"))@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "sinkTask.preCommit(workerCurrentOffsets)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(committableOffsets,Whitebox.getInternalState(workerTask,\"lastCommittedOffsets\"))@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "workerTask.iteration()@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "EasyMock.expectLastCall()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testPreCommit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "workerTask.iteration()@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "expectConsumerPoll(0)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "PowerMock.verifyAll()@@@29@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final Map<TopicPartition,OffsetAndMetadata> committableOffsets = new HashMap<>()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final Map<TopicPartition,OffsetAndMetadata> workerStartingOffsets = new HashMap<>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "taskOffsets.put(TOPIC_PARTITION2,new OffsetAndMetadata(FIRST_OFFSET + 1))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "workerTask.initializeAndStart()@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "EasyMock.expectLastCall().andAnswer(new IAnswer<Void>(){@Override public Void answer(){callback.getValue().onComplete(committableOffsets,null)return null}})@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "expectConsumerPoll(2)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "sinkTask.put(EasyMock.anyObject())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "EasyMock.expectLastCall().andReturn(workerStartingOffsets)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final Map<TopicPartition,OffsetAndMetadata> taskOffsets = new HashMap<>()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testPreCommit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "final Map<TopicPartition,OffsetAndMetadata> workerCurrentOffsets = new HashMap<>()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "expectConversionAndTransformation(1)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "sinkTaskContext.getValue().requestCommit()@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(workerCurrentOffsets,Whitebox.getInternalState(workerTask,\"currentOffsets\"))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "workerTask.initialize(TASK_CONFIG)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "workerCurrentOffsets.put(TOPIC_PARTITION,new OffsetAndMetadata(FIRST_OFFSET + 2))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "expectConversionAndTransformation(2)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "workerTask.initialize(TASK_CONFIG)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->2 [style = bold, label=""];
23->30 [style = bold, label=""];
14->22 [style = solid, label="taskOffsets"];
35->33 [style = bold, label=""];
32->9 [style = bold, label=""];
20->37 [style = bold, label=""];
53->8 [style = bold, label=""];
7->42 [style = solid, label="workerStartingOffsets"];
43->49 [style = bold, label=""];
16->18 [style = solid, label="committableOffsets"];
17->27 [style = bold, label=""];
10->6 [style = bold, label=""];
34->28 [style = bold, label=""];
22->24 [style = bold, label=""];
7->10 [style = bold, label=""];
38->18 [style = bold, label=""];
8->26 [style = bold, label=""];
2->11 [style = bold, label=""];
27->4 [style = bold, label=""];
49->51 [style = bold, label=""];
29->35 [style = bold, label=""];
21->16 [style = bold, label=""];
36->55 [style = bold, label=""];
3->21 [style = bold, label=""];
48->50 [style = bold, label=""];
7->50 [style = solid, label="workerStartingOffsets"];
14->13 [style = bold, label=""];
12->1 [style = bold, label=""];
42->43 [style = bold, label=""];
28->23 [style = bold, label=""];
39->42 [style = bold, label=""];
52->0 [style = bold, label=""];
36->39 [style = solid, label="workerCurrentOffsets"];
16->4 [style = solid, label="committableOffsets"];
46->54 [style = bold, label=""];
33->32 [style = bold, label=""];
41->35 [style = bold, label=""];
33->44 [style = bold, label=""];
32->44 [style = dashed, label="0"];
16->38 [style = solid, label="committableOffsets"];
47->48 [style = bold, label=""];
24->38 [style = bold, label=""];
55->15 [style = bold, label=""];
37->39 [style = bold, label=""];
15->14 [style = bold, label=""];
11->19 [style = bold, label=""];
15->39 [style = bold, label=""];
25->55 [style = dashed, label="0"];
22->40 [style = bold, label=""];
7->30 [style = solid, label="workerStartingOffsets"];
7->52 [style = solid, label="workerStartingOffsets"];
22->42 [style = dashed, label="0"];
36->23 [style = solid, label="workerCurrentOffsets"];
45->35 [style = bold, label=""];
13->3 [style = bold, label=""];
26->7 [style = bold, label=""];
16->20 [style = bold, label=""];
4->31 [style = bold, label=""];
44->53 [style = bold, label=""];
39->22 [style = bold, label=""];
54->47 [style = bold, label=""];
50->52 [style = bold, label=""];
24->38 [style = solid, label="callback"];
9->8 [style = bold, label=""];
0->5 [style = bold, label=""];
51->46 [style = bold, label=""];
6->36 [style = bold, label=""];
30->17 [style = bold, label=""];
40->24 [style = bold, label=""];
19->12 [style = bold, label=""];
7->34 [style = solid, label="workerStartingOffsets"];
9->53 [style = dashed, label="0"];
1->34 [style = bold, label=""];
25->15 [style = bold, label=""];
36->25 [style = bold, label=""];
18->0 [style = bold, label=""];
}
