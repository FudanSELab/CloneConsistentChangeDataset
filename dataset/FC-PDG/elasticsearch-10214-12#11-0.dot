digraph {
22 [style = filled, label = "throw new IllegalArgumentException(\"Mapper (\" + entry.getKey() + \"( is already registered\")@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "mappers.put(ScaledFloatFieldMapper.CONTENT_TYPE,new ScaledFloatFieldMapper.TypeParser())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "mappers.put(DateFieldMapper.CONTENT_TYPE,new DateFieldMapper.TypeParser())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "return Collections.unmodifiableMap(mappers)@@@29@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "mappers.put(TokenCountFieldMapper.CONTENT_TYPE,new TokenCountFieldMapper.TypeParser())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "return Collections.unmodifiableMap(mappers)@@@31@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "mappers.put(KeywordFieldMapper.CONTENT_TYPE,new KeywordFieldMapper.TypeParser())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "mappers.put(type.typeName(),new RangeFieldMapper.TypeParser(type))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "mappers.put(GeoPointFieldMapper.CONTENT_TYPE,new GeoPointFieldMapper.TypeParser())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "mappers.put(entry.getKey(),entry.getValue()) != null@@@26@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "mappers.put(TextFieldMapper.CONTENT_TYPE,new TextFieldMapper.TypeParser())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "getMappers['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "mappers.put(IpFieldMapper.CONTENT_TYPE,new IpFieldMapper.TypeParser())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "mappers.put(ObjectMapper.CONTENT_TYPE,new ObjectMapper.TypeParser())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "return Collections.unmodifiableMap(mappers)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "mappers.put(ObjectMapper.NESTED_CONTENT_TYPE,new ObjectMapper.TypeParser())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "mappers.put(SparseVectorFieldMapper.CONTENT_TYPE,new SparseVectorFieldMapper.TypeParser())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "mappers.put(GeoShapeFieldMapper.CONTENT_TYPE,new GeoShapeFieldMapper.TypeParser())@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "mappers.put(DenseVectorFieldMapper.CONTENT_TYPE,new DenseVectorFieldMapper.TypeParser())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Map<String,Mapper.TypeParser> mappers = new LinkedHashMap<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "mappers.put(BinaryFieldMapper.CONTENT_TYPE,new BinaryFieldMapper.TypeParser())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "mappers.put(entry.getKey(),entry.getValue()) != null@@@24@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "throw new IllegalArgumentException(\"Mapper (\" + entry.getKey() + \"( is already registered\")@@@25@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ShapesAvailability.JTS_AVAILABLE && ShapesAvailability.SPATIAL4J_AVAILABLE@@@21@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "List<MapperPlugin> mapperPlugins@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "getMappers['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "mappers.put(BooleanFieldMapper.CONTENT_TYPE,new BooleanFieldMapper.TypeParser())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "getMappers['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "mappers.put(CompletionFieldMapper.CONTENT_TYPE,new CompletionFieldMapper.TypeParser())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "mappers.put(FeatureVectorFieldMapper.CONTENT_TYPE,new FeatureVectorFieldMapper.TypeParser())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "mappers.put(FeatureFieldMapper.CONTENT_TYPE,new FeatureFieldMapper.TypeParser())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "mappers.put(type.typeName(),new NumberFieldMapper.TypeParser(type))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "mappers.put(BaseGeoShapeFieldMapper.CONTENT_TYPE,new BaseGeoShapeFieldMapper.TypeParser())@@@21@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "mappers.put(FieldAliasMapper.CONTENT_TYPE,new FieldAliasMapper.TypeParser())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25->23 [style = bold, label=""];
12->0 [style = bold, label=""];
5->14 [style = bold, label=""];
23->22 [style = bold, label=""];
4->26 [style = dashed, label="0"];
0->4 [style = bold, label=""];
10->6 [style = bold, label=""];
28->12 [style = bold, label=""];
16->2 [style = dotted, label="true"];
7->16 [style = bold, label=""];
0->32 [style = dashed, label="0"];
16->15 [style = bold, label=""];
11->1 [style = bold, label=""];
9->21 [style = bold, label=""];
22->20 [style = bold, label=""];
12->15 [style = solid, label="mappers"];
12->27 [style = solid, label="mappers"];
24->3 [style = dotted, label="true"];
16->2 [style = bold, label=""];
30->27 [style = bold, label=""];
21->25 [style = bold, label=""];
8->11 [style = bold, label=""];
23->22 [style = dotted, label="true"];
13->12 [style = bold, label=""];
4->19 [style = bold, label=""];
29->32 [style = bold, label=""];
32->31 [style = bold, label=""];
23->20 [style = bold, label=""];
18->10 [style = bold, label=""];
17->9 [style = bold, label=""];
1->17 [style = bold, label=""];
14->8 [style = bold, label=""];
6->5 [style = bold, label=""];
13->3 [style = dotted, label="true"];
12->29 [style = bold, label=""];
2->16 [style = bold, label=""];
24->12 [style = bold, label=""];
22->23 [style = bold, label=""];
21->23 [style = bold, label=""];
31->33 [style = bold, label=""];
26->30 [style = bold, label=""];
19->18 [style = bold, label=""];
12->20 [style = solid, label="mappers"];
2->15 [style = bold, label=""];
21->25 [style = dotted, label="true"];
33->26 [style = bold, label=""];
9->7 [style = bold, label=""];
}
