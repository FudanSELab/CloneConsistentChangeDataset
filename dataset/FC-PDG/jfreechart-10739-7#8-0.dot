digraph {
3 [style = filled, label = "assertTrue(d1.equals(d2))@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(d1 != d2)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "DefaultCategoryDataset<String,String> u1 = new DefaultCategoryDataset<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "u2.addValue(3.0,\"R1\",\"C3\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(d1.getClass() == d2.getClass())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertFalse(d1.equals(d2))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "d2 = (SlidingCategoryDataset)d1.clone()@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testSerialization['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "DefaultCategoryDataset<String,String> u2 = (DefaultCategoryDataset)d2.getUnderlyingDataset()@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "SlidingCategoryDataset<String,String> d2 = (SlidingCategoryDataset)TestUtils.serialised(d1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertTrue(d1.equals(d2))@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "SlidingCategoryDataset<String,String> d2@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testCloning['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "u1.addValue(2.0,\"R1\",\"C2\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(d1,d2)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "d2 = CloneUtils.clone(d1)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "u2.addValue(3.0,\"R1\",\"C3\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "u1.addValue(1.0,\"R1\",\"C1\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "SlidingCategoryDataset<String,String> d1 = new SlidingCategoryDataset<>(u1,0,5)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "u1.addValue(3.0,\"R1\",\"C3\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertTrue(d1.equals(d2))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "DefaultCategoryDataset<String,String> u2 = (DefaultCategoryDataset<String,String>)d2.getUnderlyingDataset()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "DefaultCategoryDataset<String,String> u2 = (DefaultCategoryDataset)d2.getUnderlyingDataset()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testCloning['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19->20 [style = solid, label="d2"];
4->3 [style = bold, label=""];
10->20 [style = solid, label="d1"];
16->11 [style = bold, label=""];
10->19 [style = solid, label="d1"];
10->19 [style = bold, label=""];
19->20 [style = bold, label=""];
9->4 [style = bold, label=""];
2->13 [style = solid, label="d2"];
2->12 [style = solid, label="d2"];
15->13 [style = solid, label="d2"];
15->3 [style = solid, label="d2"];
3->16 [style = bold, label=""];
12->6 [style = bold, label=""];
10->7 [style = bold, label=""];
2->12 [style = bold, label=""];
19->23 [style = solid, label="d2"];
20->21 [style = bold, label=""];
5->16 [style = dashed, label="0"];
8->1 [style = bold, label=""];
0->10 [style = solid, label="u1"];
3->5 [style = bold, label=""];
10->15 [style = solid, label="d1"];
17->0 [style = bold, label=""];
2->3 [style = solid, label="d2"];
22->0 [style = bold, label=""];
18->4 [style = bold, label=""];
14->0 [style = bold, label=""];
7->19 [style = dashed, label="0"];
7->2 [style = bold, label=""];
11->13 [style = bold, label=""];
19->3 [style = solid, label="d2"];
0->8 [style = bold, label=""];
15->9 [style = solid, label="d2"];
7->15 [style = bold, label=""];
5->11 [style = bold, label=""];
15->12 [style = bold, label=""];
10->12 [style = solid, label="d1"];
6->9 [style = bold, label=""];
1->10 [style = bold, label=""];
15->12 [style = solid, label="d2"];
2->9 [style = solid, label="d2"];
23->18 [style = bold, label=""];
21->23 [style = bold, label=""];
}
