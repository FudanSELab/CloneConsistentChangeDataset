digraph {
0 [style = filled, label = "testHarness.open()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final TestFetcher<String> fetcher = new TestFetcher<>(Collections.singletonList(TEST_STREAM_NAME),new TestSourceContext<>(),new TestRuntimeContext(true,1,0),TestUtils.getStandardProperties(),new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),null,initialDiscoveryShards)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(TEST_SHARD_ID,restoredShardState.getStreamShardHandle().getShard().getShardId())@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "shard.setShardId(shardMetadata.getShardId())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testRestore['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(SentinelSequenceNumber.SENTINEL_EARLIEST_SEQUENCE_NUM.get(),restoredShardState.getLastProcessedSequenceNum())@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "initialDiscoveryShards.add(new StreamShardHandle(shardMetadata.getStreamName(),shard))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testHarness.setup()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "shard.setSequenceNumberRange(sequenceNumberRange)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertNotEquals(null,consumerFunction.getRestoredState())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final AbstractStreamOperatorTestHarness<String> testHarness = new AbstractStreamOperatorTestHarness<>(consumerOperator,1,1,0)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(TEST_STREAM_NAME,restoredShardState.getStreamShardHandle().getStreamName())@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertEquals(TEST_STATE,consumerFunction.getRestoredState())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "MigrationTestUtil.restoreFromSnapshot(testHarness,\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-empty-snapshot\",testMigrateVersion)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertFalse(restoredShardState.getStreamShardHandle().isClosed())@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testRestoreWithEmptyState['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final List<StreamShardHandle> initialDiscoveryShards = new ArrayList<>(TEST_STATE.size())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "consumerOperator.close()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "KinesisStreamShardState restoredShardState = fetcher.getSubscribedShardsState().get(0)@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "StreamSource<String,DummyFlinkKinesisConsumer<String>> consumerOperator = new StreamSource<>(consumerFunction)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Shard shard = new Shard()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "consumerOperator.cancel()@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testRestoreWithEmptyState['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "sequenceNumberRange.withStartingSequenceNumber(\"1\")@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "MigrationTestUtil.restoreFromSnapshot(testHarness,\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-snapshot\",testMigrateVersion)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "consumerOperator.close()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "consumerFunction.run(new TestSourceContext<>())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final DummyFlinkKinesisConsumer<String> consumerFunction = new DummyFlinkKinesisConsumer<>(fetcher,new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(1,consumerFunction.getRestoredState().size())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "consumerOperator.cancel()@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertTrue(consumerFunction.getRestoredState().isEmpty())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "SequenceNumberRange sequenceNumberRange = new SequenceNumberRange()@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
28->31 [style = bold, label=""];
22->19 [style = bold, label=""];
9->30 [style = solid, label="testHarness"];
4->7 [style = bold, label=""];
15->1 [style = bold, label=""];
10->2 [style = bold, label=""];
26->2 [style = bold, label=""];
9->4 [style = bold, label=""];
11->6 [style = solid, label="consumerFunction"];
18->24 [style = bold, label=""];
12->14 [style = bold, label=""];
16->18 [style = bold, label=""];
2->5 [style = solid, label="initialDiscoveryShards"];
21->16 [style = bold, label=""];
29->28 [style = bold, label=""];
1->8 [style = bold, label=""];
20->22 [style = bold, label=""];
14->13 [style = bold, label=""];
7->30 [style = dashed, label="0"];
11->6 [style = bold, label=""];
1->23 [style = bold, label=""];
5->11 [style = solid, label="fetcher"];
20->19 [style = solid, label="sequenceNumberRange"];
19->13 [style = bold, label=""];
8->3 [style = bold, label=""];
6->9 [style = bold, label=""];
23->21 [style = bold, label=""];
27->29 [style = bold, label=""];
15->27 [style = bold, label=""];
13->12 [style = bold, label=""];
0->15 [style = bold, label=""];
1->27 [style = dashed, label="0"];
5->11 [style = bold, label=""];
9->7 [style = solid, label="testHarness"];
7->0 [style = bold, label=""];
30->0 [style = bold, label=""];
31->25 [style = bold, label=""];
12->13 [style = solid, label="shard"];
24->8 [style = bold, label=""];
4->30 [style = bold, label=""];
6->9 [style = solid, label="consumerOperator"];
13->5 [style = bold, label=""];
14->20 [style = bold, label=""];
2->12 [style = bold, label=""];
17->2 [style = bold, label=""];
}
