digraph {
18 [style = filled, label = "assertFalse(d1.equals(d2))@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "DefaultIntervalXYDataset dataset = new DefaultIntervalXYDataset()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertTrue(d1.getClass() == d2.getClass())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testIterateToFindDomainBounds_IntervalXYDataset['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "double(( y1 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@239718@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "x1(0( = 111.1@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "double(( y1End = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@23972c@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "d1.addSeries(\"S1\",data1)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "dataset.addSeries(\"S1\",data1)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "double(( y1Start = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@239722@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "double(((( data1 = new double((((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@239736@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(3.2,r.getUpperBound(),EPSILON)@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "DefaultIntervalXYDataset<String> d1 = new DefaultIntervalXYDataset<>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "double(( x1 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@2396fa@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(0.8,r.getLowerBound(),EPSILON)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testCloning2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Range r = DatasetUtils.iterateToFindDomainBounds(dataset,Arrays.asList(\"S1\"),true)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(d1.equals(d2))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertTrue(d1 != d2)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "double(( x1Start = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@239704@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "double(( x1End = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@23970e@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "DefaultIntervalXYDataset<String> d2 = CloneUtils.clone(d1)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testIterateToFindDomainBounds_IntervalXYDataset['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "DefaultIntervalXYDataset<String> dataset = new DefaultIntervalXYDataset<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15->23 [style = bold, label=""];
12->9 [style = solid, label="dataset"];
7->21 [style = dashed, label="0"];
12->16 [style = dashed, label="0"];
2->1 [style = bold, label=""];
21->15 [style = bold, label=""];
14->9 [style = solid, label="dataset"];
16->15 [style = solid, label="d1"];
10->21 [style = bold, label=""];
10->7 [style = bold, label=""];
3->0 [style = bold, label=""];
15->18 [style = solid, label="d2"];
1->10 [style = solid, label="y1"];
19->16 [style = bold, label=""];
7->9 [style = bold, label=""];
20->18 [style = bold, label=""];
16->23 [style = solid, label="d1"];
5->2 [style = bold, label=""];
11->10 [style = solid, label="y1End"];
1->6 [style = bold, label=""];
23->22 [style = bold, label=""];
14->4 [style = bold, label=""];
15->23 [style = solid, label="d2"];
12->14 [style = dashed, label="0"];
15->17 [style = solid, label="d2"];
12->4 [style = bold, label=""];
6->10 [style = solid, label="y1Start"];
11->10 [style = bold, label=""];
10->7 [style = solid, label="data1"];
6->11 [style = bold, label=""];
22->17 [style = bold, label=""];
9->3 [style = bold, label=""];
5->10 [style = solid, label="x1Start"];
16->4 [style = bold, label=""];
4->10 [style = solid, label="x1"];
2->10 [style = solid, label="x1End"];
10->21 [style = solid, label="data1"];
4->5 [style = bold, label=""];
13->14 [style = bold, label=""];
8->12 [style = bold, label=""];
17->20 [style = bold, label=""];
}
