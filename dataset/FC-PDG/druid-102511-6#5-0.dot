digraph {
52 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,true,null,null,false))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "SegmentDescriptor desc6 = SD(task,\"2012/P1D\",0)@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "maxTotalRows = 3L@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,1L,1,0L))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@62@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "Assert.assertTrue(checkpoint2.getPartitionOffsetMap().equals(nextOffsets))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "SegmentDescriptor desc4 = SD(task,\"2011/P1D\",0)@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,true,null,null,false))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
51 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "i++@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Thread.sleep(10)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "task.getRunner().getStatus() != KafkaIndexTask.Status.PAUSED@@@24@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Thread.sleep(10)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "final KafkaPartitions endPartitions = new KafkaPartitions(topic,ImmutableMap.of(0,10L,1,2L))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "final Map<Integer,Long> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new KafkaPartitions(topic,currentOffsets)),new KafkaDataSourceMetadata(new KafkaPartitions(topic,nextOffsets)))))@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new KafkaPartitions(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new KafkaPartitions(topic,checkpoint.getPartitionOffsetMap())))))@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "testTimeBasedIncrementalHandOff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
63 [style = filled, label = "SegmentDescriptor desc5 = SD(task,\"2011/P1D\",1)@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "int i = 0@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Thread.sleep(10)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "SegmentDescriptor desc3 = SD(task,\"2010/P1D\",0)@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "kafkaProducer.send(record).get()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,checkpoint.getPartitionSequenceNumberMap())))))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "int i = numToAdd@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "int numToAdd = records.size() - 2@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final KafkaPartitions startPartitions = new KafkaPartitions(topic,ImmutableMap.of(0,0L,1,0L))@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionOffsetMap().equals(currentOffsets))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "i++@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final KafkaPartitions startPartitions = new KafkaPartitions(topic,ImmutableMap.of(0,0L,1,0L))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L,1,0L))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@21@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "i < numToAdd@@@12@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "SegmentDescriptor desc7 = SD(task,\"2013/P1D\",0)@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L,1,0L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
59 [style = filled, label = "i < records.size()@@@34@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "final KafkaPartitions checkpoint2 = new KafkaPartitions(topic,ImmutableMap.of(0,10L,1,0L))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new KafkaPartitions(topic,currentOffsets)))))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testTimeBasedIncrementalHandOff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "intermediateHandoffPeriod = new Period().withSeconds(0)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "task.getRunner().getStatus() != KafkaIndexTask.Status.PAUSED@@@21@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new KafkaPartitions(topic,ImmutableMap.of(0,2L,1,0L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertTrue(checkpoint.getPartitionSequenceNumberMap().equals(currentOffsets))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
65 [style = filled, label = "final KafkaPartitions checkpoint1 = new KafkaPartitions(topic,ImmutableMap.of(0,3L,1,0L))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "task.getRunner().getStatus() != KafkaIndexTask.Status.PAUSED@@@30@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62->75 [style = solid, label="desc4"];
70->80 [style = bold, label=""];
72->58 [style = solid, label="task"];
16->37 [style = bold, label=""];
28->6 [style = bold, label=""];
4->25 [style = bold, label=""];
53->60 [style = solid, label="nextOffsets"];
26->30 [style = solid, label="currentOffsets"];
32->12 [style = bold, label=""];
68->66 [style = bold, label=""];
47->56 [style = solid, label="desc3"];
14->65 [style = bold, label=""];
77->12 [style = bold, label=""];
53->61 [style = solid, label="nextOffsets"];
42->48 [style = bold, label=""];
40->42 [style = solid, label="i"];
25->29 [style = bold, label=""];
67->42 [style = solid, label="i"];
71->75 [style = solid, label="desc2"];
36->33 [style = bold, label=""];
26->31 [style = solid, label="currentOffsets"];
72->62 [style = solid, label="task"];
21->38 [style = bold, label=""];
28->6 [style = dotted, label="true"];
2->75 [style = solid, label="desc1"];
52->28 [style = bold, label=""];
61->3 [style = bold, label=""];
51->50 [style = bold, label=""];
38->7 [style = dotted, label="true"];
38->7 [style = bold, label=""];
71->47 [style = bold, label=""];
41->64 [style = bold, label=""];
21->1 [style = bold, label=""];
42->48 [style = dotted, label="true"];
19->69 [style = dashed, label="0"];
9->5 [style = bold, label=""];
4->72 [style = solid, label="baseSequenceName"];
79->72 [style = solid, label="endPartitions"];
49->56 [style = bold, label=""];
62->51 [style = solid, label="desc4"];
1->38 [style = dashed, label="0"];
30->77 [style = dashed, label="0"];
38->26 [style = bold, label=""];
13->22 [style = bold, label=""];
46->75 [style = solid, label="desc7"];
53->60 [style = bold, label=""];
5->55 [style = dashed, label="0"];
4->34 [style = solid, label="baseSequenceName"];
50->54 [style = bold, label=""];
78->42 [style = solid, label="numToAdd"];
22->17 [style = solid, label="desc1"];
63->51 [style = solid, label="desc5"];
11->28 [style = bold, label=""];
18->19 [style = solid, label="startPartitions"];
73->43 [style = bold, label=""];
7->1 [style = bold, label=""];
65->45 [style = bold, label=""];
37->36 [style = bold, label=""];
19->12 [style = bold, label=""];
5->12 [style = solid, label="currentOffsets"];
25->76 [style = bold, label=""];
44->59 [style = solid, label="i"];
34->21 [style = solid, label="task"];
75->74 [style = bold, label=""];
58->50 [style = solid, label="desc6"];
5->69 [style = solid, label="currentOffsets"];
43->73 [style = bold, label=""];
56->51 [style = bold, label=""];
23->14 [style = bold, label=""];
35->28 [style = bold, label=""];
6->4 [style = bold, label=""];
66->2 [style = bold, label=""];
22->20 [style = bold, label=""];
15->9 [style = bold, label=""];
17->39 [style = bold, label=""];
10->0 [style = bold, label=""];
18->37 [style = dashed, label="0"];
27->65 [style = dashed, label="0"];
58->46 [style = bold, label=""];
59->41 [style = dotted, label="true"];
4->14 [style = solid, label="baseSequenceName"];
19->32 [style = dashed, label="0"];
14->20 [style = solid, label="task"];
67->40 [style = solid, label="i"];
14->21 [style = bold, label=""];
30->15 [style = bold, label=""];
72->26 [style = bold, label=""];
73->43 [style = dotted, label="true"];
72->47 [style = solid, label="task"];
8->24 [style = bold, label=""];
2->71 [style = bold, label=""];
17->10 [style = bold, label=""];
14->22 [style = solid, label="task"];
16->18 [style = bold, label=""];
79->72 [style = bold, label=""];
44->64 [style = solid, label="i"];
64->59 [style = solid, label="i"];
10->39 [style = dashed, label="0"];
55->69 [style = bold, label=""];
20->17 [style = solid, label="desc2"];
64->59 [style = bold, label=""];
73->44 [style = bold, label=""];
12->73 [style = bold, label=""];
27->36 [style = dashed, label="0"];
42->40 [style = dotted, label="true"];
1->7 [style = bold, label=""];
3->55 [style = bold, label=""];
22->0 [style = solid, label="desc1"];
5->77 [style = solid, label="currentOffsets"];
23->33 [style = dashed, label="0"];
47->62 [style = bold, label=""];
59->53 [style = bold, label=""];
72->63 [style = solid, label="task"];
5->32 [style = bold, label=""];
59->64 [style = dotted, label="true"];
5->19 [style = bold, label=""];
2->57 [style = solid, label="desc1"];
53->70 [style = solid, label="nextOffsets"];
13->68 [style = dashed, label="0"];
26->31 [style = bold, label=""];
72->71 [style = solid, label="task"];
63->75 [style = solid, label="desc5"];
60->61 [style = bold, label=""];
46->75 [style = bold, label=""];
30->5 [style = bold, label=""];
80->68 [style = bold, label=""];
72->26 [style = solid, label="task"];
58->75 [style = solid, label="desc6"];
26->15 [style = solid, label="currentOffsets"];
72->46 [style = solid, label="task"];
42->27 [style = bold, label=""];
46->54 [style = solid, label="desc7"];
12->3 [style = bold, label=""];
72->2 [style = solid, label="task"];
24->34 [style = solid, label="consumerProps"];
27->72 [style = solid, label="consumerProps"];
45->79 [style = bold, label=""];
76->78 [style = bold, label=""];
34->21 [style = bold, label=""];
34->20 [style = solid, label="task"];
29->8 [style = bold, label=""];
20->2 [style = solid, label="desc2"];
20->17 [style = bold, label=""];
71->49 [style = solid, label="desc2"];
14->34 [style = dashed, label="0"];
5->77 [style = bold, label=""];
0->2 [style = bold, label=""];
37->32 [style = solid, label="startPartitions"];
74->57 [style = bold, label=""];
23->45 [style = dashed, label="0"];
62->63 [style = bold, label=""];
47->75 [style = solid, label="desc3"];
15->30 [style = bold, label=""];
1->26 [style = bold, label=""];
3->80 [style = dashed, label="0"];
31->15 [style = bold, label=""];
30->31 [style = dashed, label="0"];
48->40 [style = bold, label=""];
23->14 [style = solid, label="endPartitions"];
5->70 [style = solid, label="currentOffsets"];
26->30 [style = bold, label=""];
63->58 [style = bold, label=""];
1->7 [style = dotted, label="true"];
14->72 [style = solid, label="startPartitions"];
24->16 [style = bold, label=""];
7->38 [style = bold, label=""];
18->14 [style = solid, label="startPartitions"];
78->44 [style = solid, label="numToAdd"];
39->0 [style = bold, label=""];
14->69 [style = solid, label="startPartitions"];
18->27 [style = bold, label=""];
78->67 [style = bold, label=""];
24->14 [style = solid, label="consumerProps"];
37->34 [style = solid, label="startPartitions"];
3->13 [style = bold, label=""];
67->42 [style = bold, label=""];
57->49 [style = bold, label=""];
34->22 [style = solid, label="task"];
27->23 [style = bold, label=""];
33->34 [style = solid, label="endPartitions"];
69->70 [style = bold, label=""];
30->15 [style = dotted, label="true"];
33->34 [style = bold, label=""];
59->41 [style = bold, label=""];
40->42 [style = bold, label=""];
28->4 [style = bold, label=""];
44->59 [style = bold, label=""];
14->21 [style = solid, label="task"];
}
