digraph {
2 [style = filled, label = "Assert.assertTrue(\"Actual should be a Record\",actual instanceof Record)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "type.typeId()@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(\"Primitive value should be equal to expected for type \" + type,expected,actual)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertTrue(\"Expected should be a Map\",expected instanceof Map)@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assertions.assertThat(actual).as(\"Actual should be a Record\").isInstanceOf()@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertEquals['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "Assertions.assertThat(expected).as(\"Expected should be a Map\").isInstanceOf()@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertTrue(\"Actual should be a List\",actual instanceof List)@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(type.asListType(),(List)expected,(List)actual)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Object expected@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertTrue(\"Expected should be a List\",expected instanceof List)@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertArrayEquals(\"Array contents should be equal\",(byte(()expected,(byte(()actual)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assertions.assertThat(actual).as(\"Actual should be a List\").isInstanceOf()@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "Assertions.assertThat(actual).as(\"Actual should be a Map\").isInstanceOf()@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "throw new IllegalArgumentException(\"Not a supported type: \" + type)@@@25@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Type type@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertEquals(type.asStructType(),(Record)expected,(Record)actual)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Type type@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Object expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertTrue(\"Actual should be a Map\",actual instanceof Map)@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(\"Primitive value should be equal to expected\",expected,actual)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Object expected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "Type type@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assertions.assertThat(expected).as(\"Expected should be a Record\").isInstanceOf()@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertEquals(type.asMapType(),(Map<?,?>)expected,(Map<?,?>)actual)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Object actual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "expected == null && actual == null@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertTrue(\"Expected should be a Record\",expected instanceof Record)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertTrue(\"Expected should be a byte((\",expected instanceof byte(()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertTrue(\"Actual should be a byte((\",actual instanceof byte(()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assertions.assertThat(expected).as(\"Expected should be a List\").isInstanceOf()@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
12->25 [style = dotted, label="true"];
26->15 [style = dotted, label="true"];
21->16 [style = solid, label="type"];
12->25 [style = bold, label=""];
12->28 [style = bold, label=""];
12->1 [style = bold, label=""];
2->10 [style = bold, label=""];
12->33 [style = dotted, label="true"];
12->23 [style = bold, label=""];
4->11 [style = solid, label="expected"];
12->5 [style = dotted, label="true"];
12->16 [style = bold, label=""];
18->7 [style = solid, label="expected"];
12->32 [style = bold, label=""];
6->4 [style = dotted, label="true"];
15->10 [style = solid, label="actual"];
1->28 [style = dashed, label="0"];
12->14 [style = dotted, label="true"];
4->3 [style = solid, label="expected"];
18->11 [style = solid, label="expected"];
30->14 [style = solid, label="expected"];
24->14 [style = bold, label=""];
30->9 [style = solid, label="expected"];
15->7 [style = solid, label="actual"];
17->2 [style = bold, label=""];
12->24 [style = dotted, label="true"];
27->5 [style = solid, label="actual"];
15->13 [style = solid, label="actual"];
12->10 [style = dotted, label="true"];
0->16 [style = solid, label="type"];
33->31 [style = bold, label=""];
15->2 [style = solid, label="actual"];
26->21 [style = dotted, label="true"];
12->16 [style = dotted, label="true"];
12->11 [style = dotted, label="true"];
7->8 [style = dotted, label="true"];
4->10 [style = solid, label="expected"];
12->31 [style = dotted, label="true"];
3->25 [style = dashed, label="0"];
17->23 [style = dashed, label="0"];
6->0 [style = dotted, label="true"];
12->9 [style = bold, label=""];
30->11 [style = solid, label="expected"];
2->19 [style = dashed, label="0"];
7->12 [style = bold, label=""];
12->20 [style = bold, label=""];
29->7 [style = bold, label=""];
32->33 [style = bold, label=""];
12->1 [style = dotted, label="true"];
12->32 [style = dotted, label="true"];
30->32 [style = solid, label="expected"];
27->7 [style = solid, label="actual"];
7->8 [style = bold, label=""];
30->28 [style = solid, label="expected"];
12->19 [style = dotted, label="true"];
30->10 [style = solid, label="expected"];
12->2 [style = dotted, label="true"];
13->24 [style = dashed, label="0"];
12->17 [style = bold, label=""];
18->1 [style = solid, label="expected"];
12->9 [style = dotted, label="true"];
27->33 [style = solid, label="actual"];
29->27 [style = dotted, label="true"];
12->3 [style = bold, label=""];
15->1 [style = solid, label="actual"];
29->30 [style = dotted, label="true"];
15->5 [style = solid, label="actual"];
9->20 [style = dashed, label="0"];
4->17 [style = solid, label="expected"];
27->14 [style = solid, label="actual"];
15->11 [style = solid, label="actual"];
20->24 [style = bold, label=""];
4->14 [style = solid, label="expected"];
4->7 [style = solid, label="expected"];
15->16 [style = solid, label="type"];
30->31 [style = solid, label="expected"];
30->3 [style = solid, label="expected"];
30->17 [style = solid, label="expected"];
30->7 [style = solid, label="expected"];
22->11 [style = bold, label=""];
5->22 [style = dashed, label="0"];
27->13 [style = solid, label="actual"];
19->10 [style = bold, label=""];
15->14 [style = solid, label="actual"];
29->15 [style = dotted, label="true"];
23->19 [style = bold, label=""];
8->12 [style = bold, label=""];
27->2 [style = solid, label="actual"];
12->23 [style = dotted, label="true"];
9->13 [style = bold, label=""];
12->13 [style = dotted, label="true"];
26->18 [style = dotted, label="true"];
12->28 [style = dotted, label="true"];
4->9 [style = solid, label="expected"];
15->28 [style = solid, label="type"];
12->20 [style = dotted, label="true"];
27->28 [style = solid, label="actual"];
3->5 [style = bold, label=""];
12->17 [style = dotted, label="true"];
27->31 [style = solid, label="actual"];
4->1 [style = solid, label="expected"];
12->22 [style = dotted, label="true"];
5->11 [style = bold, label=""];
18->10 [style = solid, label="expected"];
27->11 [style = solid, label="actual"];
18->14 [style = solid, label="expected"];
27->10 [style = solid, label="actual"];
26->7 [style = bold, label=""];
6->7 [style = bold, label=""];
13->14 [style = bold, label=""];
25->22 [style = bold, label=""];
12->3 [style = dotted, label="true"];
6->15 [style = dotted, label="true"];
}
