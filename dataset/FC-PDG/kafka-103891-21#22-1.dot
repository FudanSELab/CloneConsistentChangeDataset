digraph {
6 [style = filled, label = "Node node = metadata.fetch().nodes().get(0)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "client.prepareResponseFrom(offsetResponse(Collections.singletonMap(tp0,-1L),Errors.NONE),coordinator)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "initMetadata(client,Collections.singletonMap(topic,1))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testMissingOffsetNoResetPolicy['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ConsumerMetadata metadata = createMetadata(subscription)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "SubscriptionState subscription = new SubscriptionState(new LogContext(),OffsetResetStrategy.NONE)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThrows(,null)@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "KafkaConsumer<String,String> consumer = newConsumer(time,client,subscription,metadata,assignor,true,groupId,groupInstanceId,false)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "MockClient client = new MockClient(time,metadata)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Node coordinator = new Node(Integer.MAX_VALUE - node.id(),node.host(),node.port())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "client.prepareResponseFrom(FindCoordinatorResponse.prepareResponse(Errors.NONE,groupId,node),node)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "ConsumerPartitionAssignor assignor = new RoundRobinAssignor()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Time time = new MockTime()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "consumer.poll(Duration.ZERO)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(539L,consumer.position(tp0))@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "client.prepareResponseFrom(offsetResponse(Collections.singletonMap(tp0,539L),Errors.NONE),coordinator)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testMissingOffsetNoResetPolicy['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "consumer.assign(singletonList(tp0))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "client.prepareResponseFrom(FindCoordinatorResponse.prepareResponse(Errors.NONE,node),node)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testResetToCommittedOffset['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
7->11 [style = bold, label=""];
4->16 [style = dashed, label="0"];
11->13 [style = solid, label="coordinator"];
7->14 [style = dashed, label="0"];
1->2 [style = solid, label="subscription"];
6->7 [style = solid, label="node"];
6->14 [style = solid, label="node"];
0->2 [style = solid, label="metadata"];
1->0 [style = bold, label=""];
16->17 [style = bold, label=""];
13->19 [style = dashed, label="0"];
11->19 [style = bold, label=""];
3->2 [style = solid, label="assignor"];
5->2 [style = solid, label="time"];
12->7 [style = bold, label=""];
15->5 [style = bold, label=""];
2->12 [style = bold, label=""];
9->6 [style = bold, label=""];
19->16 [style = bold, label=""];
5->1 [style = bold, label=""];
11->19 [style = solid, label="coordinator"];
10->5 [style = bold, label=""];
8->9 [style = solid, label="client"];
3->2 [style = bold, label=""];
18->5 [style = bold, label=""];
8->2 [style = solid, label="client"];
11->13 [style = bold, label=""];
12->14 [style = bold, label=""];
0->8 [style = bold, label=""];
8->9 [style = bold, label=""];
1->0 [style = solid, label="subscription"];
5->8 [style = solid, label="time"];
14->11 [style = bold, label=""];
0->8 [style = solid, label="metadata"];
13->4 [style = bold, label=""];
}
