digraph {
7 [style = filled, label = "PrintStream stream = new PrintStream(baos)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "printSink.open(new Configuration())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Mockito.when(ctx.getIndexOfThisSubtask()).thenReturn(1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "printSink.invoke(\"hello world!\",SinkContextUtil.forTimestamp(0))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Mockito.when(ctx.getNumberOfParallelSubtasks()).thenReturn(2)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "printSink.setRuntimeContext(ctx)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testPrintSinkStdErr['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertEquals(\"2> hello world!\" + line,baos.toString())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testPrintSinkWithPrefix['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.fail()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ByteArrayOutputStream baos = new ByteArrayOutputStream()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"Print to System.err\",printSink.toString())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "PrintSinkFunction<String> printSink = new PrintSinkFunction<>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "printSink.setTargetToStandardErr()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "printSink.invoke(\"hello world!\")@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final StreamingRuntimeContext ctx = Mockito.mock()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "System.setOut(stream)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "printSink.close()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "stream.close()@@@22@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testPrintSinkStdErr['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\"hello world!\" + line,baos.toString())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Exception e@@@14@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
8->16 [style = bold, label=""];
15->10 [style = bold, label=""];
0->9 [style = bold, label=""];
17->1 [style = bold, label=""];
19->12 [style = bold, label=""];
10->14 [style = bold, label=""];
11->16 [style = dashed, label="0"];
21->15 [style = bold, label=""];
2->18 [style = bold, label=""];
20->1 [style = bold, label=""];
9->8 [style = bold, label=""];
7->13 [style = solid, label="stream"];
1->7 [style = bold, label=""];
5->19 [style = bold, label=""];
11->5 [style = bold, label=""];
5->6 [style = bold, label=""];
1->7 [style = solid, label="baos"];
2->15 [style = bold, label=""];
6->19 [style = dashed, label="0"];
16->5 [style = bold, label=""];
14->8 [style = bold, label=""];
12->3 [style = bold, label=""];
4->1 [style = bold, label=""];
18->21 [style = bold, label=""];
2->10 [style = solid, label="ctx"];
8->11 [style = bold, label=""];
0->9 [style = dotted, label="true"];
13->2 [style = bold, label=""];
6->12 [style = bold, label=""];
}
