digraph {
9 [style = filled, label = "j.createFreeStyleProject(\"aProject2\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "deleteJobManyShouldFailIfMiddleJobDoesNotExist['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(j.jenkins.getItem(\"never_created2\"),nullValue())@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(j.jenkins.getItem(\"never_created1\"),nullValue())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(result.stderr(),containsString(\"never_created1: No such job 'never_created1'\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "deleteJobManyShouldFailIfMoreJobsDoNotExist['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(result,failedWith(5))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "deleteJobManyShouldFailIfMiddleJobDoesNotExist['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Error occured while performing this command, see previous stderr output.\"))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertThat(result.stderr(),containsString(\"never_created2: No such job 'never_created2'\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(result.stderr(),containsString(\"never_created: No such job 'never_created'\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Job.READ,Job.DELETE,Jenkins.READ).invokeWithArgs(\"aProject1\",\"never_created1\",\"never_created2\",\"aProject2\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(j.jenkins.getItem(\"aProject2\"),nullValue())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Error occured while performing this command, see previous stderr output.\"))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "j.createFreeStyleProject(\"aProject1\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Job.READ,Job.DELETE,Jenkins.READ).invokeWithArgs(\"aProject1\",\"never_created\",\"aProject2\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(j.jenkins.getItem(\"aProject1\"),nullValue())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->10 [style = bold, label=""];
18->3 [style = bold, label=""];
16->13 [style = bold, label=""];
4->16 [style = dashed, label="0"];
0->17 [style = bold, label=""];
0->2 [style = bold, label=""];
1->3 [style = bold, label=""];
6->5 [style = solid, label="result"];
6->0 [style = solid, label="result"];
7->11 [style = dashed, label="0"];
6->14 [style = dashed, label="0"];
7->8 [style = bold, label=""];
2->17 [style = dashed, label="0"];
9->6 [style = bold, label=""];
14->5 [style = solid, label="result"];
3->9 [style = bold, label=""];
6->5 [style = bold, label=""];
5->0 [style = bold, label=""];
14->0 [style = solid, label="result"];
17->15 [style = bold, label=""];
9->14 [style = bold, label=""];
10->4 [style = bold, label=""];
11->8 [style = bold, label=""];
12->3 [style = bold, label=""];
2->7 [style = bold, label=""];
2->11 [style = bold, label=""];
15->8 [style = bold, label=""];
4->16 [style = bold, label=""];
14->5 [style = bold, label=""];
}
