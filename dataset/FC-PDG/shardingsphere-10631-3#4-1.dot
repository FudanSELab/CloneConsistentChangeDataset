digraph {
0 [style = filled, label = "assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds1\",\"LOGIC_TABLE\")))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ShardingSphereServiceLoader.register()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds2\",\"logic_table_2\")))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(actual.getActualDataNodes().size(),is(2))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(actual.getLogicTable(),is(\"logic_table\"))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "TableRule actual = new TableRule(tableRuleConfig,Arrays.asList(\"ds0\",\"ds1\"),null)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds1\",\"logic_table_1\")))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "tableRuleConfig.setShardingStrategy(new StandardShardingStrategyConfiguration(\"col_1\",\"MOD\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertCreateMinTableRule['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertCreateAutoTableRuleWithModAlgorithmWithoutActualDataSources['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "ModShardingAlgorithm shardingAlgorithm = new ModShardingAlgorithm()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "ShardingAutoTableRuleConfiguration tableRuleConfig = new ShardingAutoTableRuleConfiguration(\"LOGIC_TABLE\",null)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "TableRule actual = new TableRule(tableRuleConfig,Arrays.asList(\"ds0\",\"ds1\",\"ds2\"),shardingAlgorithm,null)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds0\",\"LOGIC_TABLE\")))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ShardingTableRuleConfiguration tableRuleConfig = new ShardingTableRuleConfiguration(\"LOGIC_TABLE\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds0\",\"logic_table_3\")))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "shardingAlgorithm.getProps().setProperty(\"sharding-count\",\"4\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(actual.getLogicTable(),is(\"LOGIC_TABLE\"))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertThat(actual.getLogicTable(),is(\"logic_table\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(actual.getActualDataNodes().size(),is(4))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "shardingAlgorithm.init()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertCreateMinTableRule['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(actual.getActualDataNodes().contains(new DataNode(\"ds0\",\"logic_table_0\")))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->13 [style = dashed, label="0"];
11->20 [style = bold, label=""];
9->11 [style = bold, label=""];
10->14 [style = bold, label=""];
2->3 [style = bold, label=""];
18->19 [style = bold, label=""];
19->10 [style = bold, label=""];
0->11 [style = dashed, label="0"];
16->17 [style = bold, label=""];
15->16 [style = bold, label=""];
4->0 [style = bold, label=""];
20->22 [style = bold, label=""];
6->2 [style = bold, label=""];
14->17 [style = solid, label="shardingAlgorithm"];
4->9 [style = dashed, label="0"];
3->5 [style = bold, label=""];
1->6 [style = bold, label=""];
8->5 [style = bold, label=""];
5->4 [style = bold, label=""];
7->6 [style = bold, label=""];
12->18 [style = bold, label=""];
3->8 [style = dashed, label="0"];
14->15 [style = bold, label=""];
6->2 [style = solid, label="tableRuleConfig"];
13->9 [style = bold, label=""];
19->17 [style = solid, label="tableRuleConfig"];
17->21 [style = bold, label=""];
2->8 [style = bold, label=""];
21->13 [style = bold, label=""];
}
