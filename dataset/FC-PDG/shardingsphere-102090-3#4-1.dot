digraph {
11 [style = filled, label = "final Collection<TableRuleSegment> actual@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "TableRuleSegment tableRuleSegment@@@9@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final List<ExpectedTableRule> expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertNull(assertContext.getText(\"Actual should not exist.\"),actual)@@@4@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final List<ExpectedTableRule> expected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "assertShardingTableRules['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final Collection<TableRuleSegment> actual@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual sharding table rule should exist.\"),actual)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "null == expected@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "count++@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int count = 0@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final List<ExpectedTableRule> expected@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertShardingTableRules['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "actual@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertNull(assertContext.getText(\"Actual sharding table rule should not exist.\"),actual)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "final Collection<TableRuleSegment> actual@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "TableRuleAssert.assertIs(assertContext,tableRuleSegment,expectedTableRule)@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "actual@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual should exist.\"),actual)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TableRuleSegment tableRuleSegment@@@9@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ExpectedTableRule expectedTableRule = expected.get(count)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertShardingTableRules['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
4->3 [style = bold, label=""];
0->12 [style = dotted, label="true"];
1->10 [style = dotted, label="true"];
21->20 [style = dotted, label="true"];
0->8 [style = dotted, label="false"];
21->11 [style = dotted, label="true"];
21->0 [style = bold, label=""];
6->3 [style = solid, label="count"];
0->6 [style = dotted, label="false"];
0->15 [style = dotted, label="true"];
1->11 [style = dotted, label="true"];
12->3 [style = solid, label="count"];
0->4 [style = dotted, label="true"];
16->0 [style = solid, label="expected"];
11->8 [style = solid, label="actual"];
2->7 [style = solid, label="actual"];
0->18 [style = dotted, label="false"];
17->14 [style = dotted, label="true"];
21->22 [style = dotted, label="true"];
22->4 [style = solid, label="assertContext"];
8->6 [style = bold, label=""];
1->0 [style = bold, label=""];
14->18 [style = solid, label="actual"];
3->4 [style = bold, label=""];
0->15 [style = bold, label=""];
6->12 [style = solid, label="count"];
0->7 [style = bold, label=""];
11->7 [style = solid, label="actual"];
17->16 [style = dotted, label="true"];
0->9 [style = dotted, label="false"];
17->0 [style = bold, label=""];
14->15 [style = solid, label="actual"];
18->6 [style = bold, label=""];
0->19 [style = dotted, label="false"];
2->8 [style = solid, label="actual"];
0->8 [style = bold, label=""];
3->4 [style = solid, label="expectedTableRule"];
0->5 [style = dotted, label="false"];
7->15 [style = dashed, label="0"];
4->12 [style = bold, label=""];
0->18 [style = bold, label=""];
8->18 [style = dashed, label="0"];
20->0 [style = solid, label="expected"];
10->0 [style = solid, label="expected"];
12->3 [style = bold, label=""];
0->3 [style = dotted, label="true"];
0->13 [style = dotted, label="false"];
1->2 [style = dotted, label="true"];
0->7 [style = dotted, label="true"];
17->11 [style = dotted, label="true"];
11->4 [style = solid, label="assertContext"];
}
