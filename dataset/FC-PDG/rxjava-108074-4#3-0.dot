digraph {
11 [style = filled, label = "sobs.onSubscribe(Disposable.empty())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "to.assertComplete()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "completeReentry['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "completeReentry['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "final AtomicReference<Subscriber<Integer>> serial = new AtomicReference<Subscriber<Integer>>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "TestSubscriber<Integer> ts = new TestSubscriber<Integer>(){@Override public void onNext(Integer v){serial.get().onComplete()serial.get().onComplete()super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@175b36cv}}@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "SerializedSubscriber<Integer> sobs = new SerializedSubscriber<Integer>(ts)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "ts.assertNoErrors()@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "to.assertValue(1)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ts.assertComplete()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "serial.set(sobs)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "sobs.onSubscribe(Disposables.empty())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "ts.assertValue(1)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "completeReentry['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final AtomicReference<Observer<Integer>> serial = new AtomicReference<Observer<Integer>>()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "SerializedObserver<Integer> sobs = new SerializedObserver<Integer>(to)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "sobs.onNext(1)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "to.assertNoErrors()@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "sobs.onSubscribe(new BooleanSubscription())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "TestObserver<Integer> to = new TestObserver<Integer>(){@Override public void onNext(Integer v){serial.get().onComplete()serial.get().onComplete()super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@175b322v}}@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->2 [style = solid, label="sobs"];
19->18 [style = bold, label=""];
3->17 [style = dashed, label="0"];
8->15 [style = bold, label=""];
4->16 [style = dashed, label="0"];
1->18 [style = dashed, label="0"];
18->2 [style = bold, label=""];
16->19 [style = bold, label=""];
10->6 [style = bold, label=""];
13->16 [style = bold, label=""];
11->2 [style = bold, label=""];
3->0 [style = bold, label=""];
0->14 [style = dashed, label="0"];
12->13 [style = bold, label=""];
5->1 [style = bold, label=""];
6->4 [style = bold, label=""];
15->17 [style = bold, label=""];
6->13 [style = dashed, label="0"];
17->14 [style = bold, label=""];
1->11 [style = dashed, label="0"];
7->6 [style = bold, label=""];
8->9 [style = bold, label=""];
19->2 [style = solid, label="sobs"];
9->3 [style = bold, label=""];
1->2 [style = bold, label=""];
5->11 [style = bold, label=""];
4->5 [style = solid, label="to"];
5->19 [style = dashed, label="0"];
4->5 [style = bold, label=""];
16->19 [style = solid, label="ts"];
2->8 [style = bold, label=""];
9->15 [style = dashed, label="0"];
}
