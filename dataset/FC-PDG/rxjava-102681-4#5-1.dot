digraph {
1 [style = filled, label = "verify(func).call()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Callable<String> func = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TestSubscriber<String> outer = new TestSubscriber<String>(subscriber)@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "outer.dispose()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "when(func.call()).thenAnswer(new Answer<String>(){@Override public String answer(InvocationOnMock invocation){observerLatch.countDown()try {funcLatch.await()}catch (InterruptedException e) return \"should_not_be_delivered\"}})@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "verify(observer).onSubscribe(any())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "fromCallableFlowable.subscribeOn(Schedulers.computation()).subscribe(outer)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "verifyNoMoreInteractions(subscriber)@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final CountDownLatch funcLatch = new CountDownLatch(1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "TestSubscriber<String> outer = new TestSubscriber<>(subscriber)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Subscriber<String> subscriber = TestHelper.mockSubscriber()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "TestObserver<String> outer = new TestObserver<String>(observer)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "funcLatch.countDown()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "outer.cancel()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Flowable<String> fromCallableFlowable = Flowable.fromCallable(func)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Observer<Object> observer = TestHelper.mockObserver()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Completable fromCallableObservable = Completable.fromCallable(func)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "fromCallableObservable.subscribeOn(Schedulers.computation()).subscribe(outer)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "verifyNoMoreInteractions(observer)@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "verify(subscriber).onSubscribe(any())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "observerLatch.await()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final CountDownLatch observerLatch = new CountDownLatch(1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->14 [style = bold, label=""];
24->19 [style = bold, label=""];
7->23 [style = dashed, label="0"];
9->11 [style = bold, label=""];
16->10 [style = bold, label=""];
4->16 [style = solid, label="subscriber"];
8->18 [style = bold, label=""];
14->10 [style = bold, label=""];
14->22 [style = dashed, label="0"];
11->12 [style = bold, label=""];
6->17 [style = dashed, label="0"];
19->22 [style = solid, label="observer"];
17->23 [style = bold, label=""];
1->17 [style = bold, label=""];
4->14 [style = solid, label="subscriber"];
2->13 [style = bold, label=""];
14->10 [style = solid, label="outer"];
8->0 [style = bold, label=""];
5->1 [style = bold, label=""];
22->20 [style = solid, label="outer"];
13->24 [style = dashed, label="0"];
20->8 [style = bold, label=""];
1->6 [style = bold, label=""];
15->11 [style = bold, label=""];
3->2 [style = bold, label=""];
10->8 [style = bold, label=""];
22->20 [style = bold, label=""];
21->11 [style = bold, label=""];
4->7 [style = solid, label="subscriber"];
18->5 [style = bold, label=""];
0->18 [style = dashed, label="0"];
11->13 [style = solid, label="func"];
4->19 [style = dashed, label="0"];
10->20 [style = dashed, label="0"];
16->10 [style = solid, label="outer"];
12->3 [style = bold, label=""];
14->16 [style = dashed, label="0"];
2->24 [style = bold, label=""];
6->7 [style = bold, label=""];
19->22 [style = bold, label=""];
11->24 [style = solid, label="func"];
19->23 [style = solid, label="observer"];
4->16 [style = bold, label=""];
0->5 [style = bold, label=""];
13->4 [style = bold, label=""];
}
