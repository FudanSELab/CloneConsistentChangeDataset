digraph {
0 [style = filled, label = "List<Result<TopNResultValue>> expectedResults = Collections.singletonList(new Result<>(DateTimes.of(\"2011-01-12T00:00:00.000Z\"),new TopNResultValue(Arrays.asList(ImmutableMap.builder().put(QueryRunnerTestHelper.marketDimension,\"total_market\").put(\"rows\",744L).put(\"index\",862719.3151855469D).put(\"addRowsIndexConstant\",863464.3151855469D).put(QueryRunnerTestHelper.dependentPostAggMetric,864209.3151855469D).put(\"uniques\",QueryRunnerTestHelper.UNIQUES_2).put(\"maxIndex\",1743.9217529296875D).put(\"minIndex\",792.3260498046875D).put(QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,QueryRunnerTestHelper.UNIQUES_2 + 1.0).build(),ImmutableMap.builder().put(QueryRunnerTestHelper.marketDimension,\"upfront\").put(\"rows\",744L).put(\"index\",768184.4240722656D).put(\"addRowsIndexConstant\",768929.4240722656D).put(QueryRunnerTestHelper.dependentPostAggMetric,769674.4240722656D).put(\"uniques\",QueryRunnerTestHelper.UNIQUES_2).put(\"maxIndex\",1870.06103515625D).put(\"minIndex\",545.9906005859375D).put(QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,QueryRunnerTestHelper.UNIQUES_2 + 1.0).build(),ImmutableMap.builder().put(QueryRunnerTestHelper.marketDimension,\"spot\").put(\"rows\",3348L).put(\"index\",382426.28929138184D).put(\"addRowsIndexConstant\",385775.28929138184D).put(QueryRunnerTestHelper.dependentPostAggMetric,389124.28929138184D).put(\"uniques\",QueryRunnerTestHelper.UNIQUES_9).put(QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,QueryRunnerTestHelper.UNIQUES_9 + 1.0).put(\"maxIndex\",277.2735290527344D).put(\"minIndex\",59.02102279663086D).build()))))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testTopNUnionQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "TestHelper.assertExpectedResults(expectedResults,runner.run(QueryPlus.wrap(query)))@@@5@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "TestHelper.assertExpectedResults(expectedResults,runner.run(QueryPlus.wrap(query),context))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "TopNQuery query = new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.allGran).dimension(QueryRunnerTestHelper.marketDimension).metric(QueryRunnerTestHelper.dependentPostAggMetric).threshold(4).intervals(QueryRunnerTestHelper.fullOnIntervalSpec).aggregators(Lists.newArrayList(Iterables.concat(commonAggregators,Lists.newArrayList(new DoubleMaxAggregatorFactory(\"maxIndex\",\"index\"),new DoubleMinAggregatorFactory(\"minIndex\",\"index\"))))).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant,QueryRunnerTestHelper.dependentPostAgg,QueryRunnerTestHelper.hyperUniqueFinalizingPostAgg).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testTopNUnionQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "TopNQuery query = new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.unionDataSource).granularity(QueryRunnerTestHelper.allGran).dimension(QueryRunnerTestHelper.marketDimension).metric(QueryRunnerTestHelper.dependentPostAggMetric).threshold(4).intervals(QueryRunnerTestHelper.fullOnIntervalSpec).aggregators(Lists.newArrayList(Iterables.concat(QueryRunnerTestHelper.commonDoubleAggregators,Lists.newArrayList(new DoubleMaxAggregatorFactory(\"maxIndex\",\"index\"),new DoubleMinAggregatorFactory(\"minIndex\",\"index\"))))).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant,QueryRunnerTestHelper.dependentPostAgg,QueryRunnerTestHelper.hyperUniqueFinalizingPostAgg).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "List<Result<TopNResultValue>> expectedResults = Collections.singletonList(new Result<>(DateTimes.of(\"2011-01-12T00:00:00.000Z\"),new TopNResultValue(Arrays.asList(ImmutableMap.builder().put(QueryRunnerTestHelper.marketDimension,\"total_market\").put(\"rows\",186L).put(\"index\",215679.82879638672D).put(\"addRowsIndexConstant\",215866.82879638672D).put(QueryRunnerTestHelper.dependentPostAggMetric,216053.82879638672D).put(\"uniques\",QueryRunnerTestHelper.UNIQUES_2).put(\"maxIndex\",1743.92175D).put(\"minIndex\",792.3260498046875D).put(QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,QueryRunnerTestHelper.UNIQUES_2 + 1.0).build(),ImmutableMap.builder().put(QueryRunnerTestHelper.marketDimension,\"upfront\").put(\"rows\",186L).put(\"index\",192046.1060180664D).put(\"addRowsIndexConstant\",192233.1060180664D).put(QueryRunnerTestHelper.dependentPostAggMetric,192420.1060180664D).put(\"uniques\",QueryRunnerTestHelper.UNIQUES_2).put(\"maxIndex\",1870.061029D).put(\"minIndex\",545.9906005859375D).put(QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,QueryRunnerTestHelper.UNIQUES_2 + 1.0).build(),ImmutableMap.builder().put(QueryRunnerTestHelper.marketDimension,\"spot\").put(\"rows\",837L).put(\"index\",95606.57232284546D).put(\"addRowsIndexConstant\",96444.57232284546D).put(QueryRunnerTestHelper.dependentPostAggMetric,97282.57232284546D).put(\"uniques\",QueryRunnerTestHelper.UNIQUES_9).put(QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,QueryRunnerTestHelper.UNIQUES_9 + 1.0).put(\"maxIndex\",277.273533D).put(\"minIndex\",59.02102279663086D).build()))))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertExpectedResults(expectedResults,query)@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testTopNDependentPostAgg['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "HashMap<String,Object> context = new HashMap<String,Object>()@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->1 [style = bold, label=""];
8->10 [style = bold, label=""];
1->8 [style = dashed, label="0"];
10->7 [style = solid, label="expectedResults"];
1->0 [style = bold, label=""];
4->2 [style = bold, label=""];
3->1 [style = bold, label=""];
9->8 [style = bold, label=""];
0->4 [style = bold, label=""];
0->6 [style = bold, label=""];
10->7 [style = bold, label=""];
0->2 [style = solid, label="expectedResults"];
1->6 [style = solid, label="query"];
1->2 [style = solid, label="query"];
0->6 [style = solid, label="expectedResults"];
8->7 [style = solid, label="query"];
4->2 [style = solid, label="context"];
}
