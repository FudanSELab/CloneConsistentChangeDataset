digraph {
21 [style = filled, label = "String query6 = \"SELECT lag(\"employee_id\",1,'NA') over \" + \"(partition by \"hire_date\" order by \"employee_id\"), \"hire_date\"\" + \"FROM \"employee\"\" + \"group by \"hire_date\", \"employee_id\"\"@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testJsonPredicate['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "String query0 = \"SELECT row_number() over (order by \"hire_date\") FROM \"employee\"\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "String expected4 = \"SELECT LAG(\"employee_id\", 1, 'NA') OVER \" + \"(PARTITION BY \"hire_date\" ORDER BY \"employee_id\") AS \"$0\", \" + \"LAG(\"employee_id\", 1, 'NA') OVER \" + \"(PARTITION BY \"birth_date\" ORDER BY \"employee_id\") AS \"$1\", \" + \"COUNT(*) OVER (PARTITION BY \"hire_date\" ORDER BY \"employee_id\" \" + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \"$2\", \" + \"COUNT(*) OVER (PARTITION BY \"birth_date\" ORDER BY \"employee_id\" \" + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \"$3\"\" + \"FROM \"foodmart\".\"employee\"\"@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "String query1 = \"SELECT rank() over (order by \"hire_date\") FROM \"employee\"\"@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "String expected1 = \"SELECT RANK() OVER (ORDER BY \"hire_date\") AS \"$0\"\" + \"FROM \"foodmart\".\"employee\"\"@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testConvertWindowToSql['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "String expected5 = \"SELECT LAG(\"employee_id\", 1, 'NA') OVER \" + \"(PARTITION BY \"hire_date\" ORDER BY \"employee_id\") AS \"$0\", \" + \"LAG(\"employee_id\", 1, 'NA') OVER \" + \"(PARTITION BY \"birth_date\" ORDER BY \"employee_id\") AS \"$1\", \" + \"MAX(SUM(\"employee_id\")) OVER (PARTITION BY \"hire_date\" ORDER BY \"employee_id\" \" + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \"$2\", \" + \"MAX(SUM(\"employee_id\")) OVER (PARTITION BY \"birth_date\" ORDER BY \"employee_id\" \" + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \"$3\"\" + \"FROM \"foodmart\".\"employee\"\" + \"GROUP BY \"employee_id\", \"hire_date\", \"birth_date\"\"@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "String query4 = \"SELECT lag(\"employee_id\",1,'NA') \" + \"over (partition by \"hire_date\" order by \"employee_id\") as lag1, \" + \"lag(\"employee_id\",1,'NA') \" + \"over (partition by \"birth_date\" order by \"employee_id\") as lag2, \" + \"count(*) over (partition by \"hire_date\" order by \"employee_id\") as count1, \" + \"count(*) over (partition by \"birth_date\" order by \"employee_id\") as count2\" + \"FROM \"employee\"\"@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "String query5 = \"SELECT lag(\"employee_id\",1,'NA') \" + \"over (partition by \"hire_date\" order by \"employee_id\") as lag1, \" + \"lag(\"employee_id\",1,'NA') \" + \"over (partition by \"birth_date\" order by \"employee_id\") as lag2, \" + \"max(sum(\"employee_id\")) over (partition by \"hire_date\" order by \"employee_id\") as count1, \" + \"max(sum(\"employee_id\")) over (partition by \"birth_date\" order by \"employee_id\") as count2\" + \"FROM \"employee\" group by \"employee_id\", \"hire_date\", \"birth_date\"\"@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "HepProgramBuilder builder = new HepProgramBuilder()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "sql(query).ok(expected)@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "HepPlanner hepPlanner = new HepPlanner(builder.build())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "String query = \"select \" + \"\"product_name\" is json, \" + \"\"product_name\" is json value, \" + \"\"product_name\" is json object, \" + \"\"product_name\" is json array, \" + \"\"product_name\" is json scalar, \" + \"\"product_name\" is not json, \" + \"\"product_name\" is not json value, \" + \"\"product_name\" is not json object, \" + \"\"product_name\" is not json array, \" + \"\"product_name\" is not json scalar \" + \"from \"product\"\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "final String expected = \"SELECT \" + \"\"product_name\" IS JSON VALUE, \" + \"\"product_name\" IS JSON VALUE, \" + \"\"product_name\" IS JSON OBJECT, \" + \"\"product_name\" IS JSON ARRAY, \" + \"\"product_name\" IS JSON SCALAR, \" + \"\"product_name\" IS NOT JSON VALUE, \" + \"\"product_name\" IS NOT JSON VALUE, \" + \"\"product_name\" IS NOT JSON OBJECT, \" + \"\"product_name\" IS NOT JSON ARRAY, \" + \"\"product_name\" IS NOT JSON SCALAR\" + \"FROM \"foodmart\".\"product\"\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "String expected6 = \"SELECT LAG(\"employee_id\", 1, 'NA') \" + \"OVER (PARTITION BY \"hire_date\" ORDER BY \"employee_id\"), \"hire_date\"\" + \"FROM \"foodmart\".\"employee\"\" + \"GROUP BY \"hire_date\", \"employee_id\"\"@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "String expected0 = \"SELECT ROW_NUMBER() OVER (ORDER BY \"hire_date\") AS \"$0\"\" + \"FROM \"foodmart\".\"employee\"\"@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "sql(query3).optimize(rules,hepPlanner).ok(expected3)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "String query2 = \"SELECT lead(\"employee_id\",1,'NA') over \" + \"(partition by \"hire_date\" order by \"employee_id\")\" + \"FROM \"employee\"\"@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "String expected2 = \"SELECT LEAD(\"employee_id\", 1, 'NA') OVER \" + \"(PARTITION BY \"hire_date\" \" + \"ORDER BY \"employee_id\") AS \"$0\"\" + \"FROM \"foodmart\".\"employee\"\"@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "sql(query5).optimize(rules,hepPlanner).ok(expected5)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "RuleSet rules = RuleSets.ofList(CoreRules.PROJECT_TO_LOGICAL_PROJECT_AND_WINDOW)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "String query3 = \"SELECT lag(\"employee_id\",1,'NA') over \" + \"(partition by \"hire_date\" order by \"employee_id\")\" + \"FROM \"employee\"\"@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "RuleSet rules = RuleSets.ofList(ProjectToWindowRule.PROJECT)@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "builder.addRuleClass()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "sql(query0).optimize(rules,hepPlanner).ok(expected0)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "sql(query1).optimize(rules,hepPlanner).ok(expected1)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testConvertWindowToSql['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "sql(query6).optimize(rules,hepPlanner).ok(expected6)@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "sql(query2).optimize(rules,hepPlanner).ok(expected2)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "sql(query4).optimize(rules,hepPlanner).ok(expected4)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "String expected3 = \"SELECT LAG(\"employee_id\", 1, 'NA') OVER \" + \"(PARTITION BY \"hire_date\" ORDER BY \"employee_id\") AS \"$0\"\" + \"FROM \"foodmart\".\"employee\"\"@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->22 [style = bold, label=""];
6->3 [style = bold, label=""];
21->10 [style = bold, label=""];
14->31 [style = dashed, label="0"];
7->2 [style = solid, label="expected1"];
22->19 [style = bold, label=""];
5->20 [style = bold, label=""];
10->20 [style = solid, label="expected6"];
25->23 [style = bold, label=""];
24->0 [style = bold, label=""];
8->18 [style = bold, label=""];
13->15 [style = solid, label="expected4"];
25->26 [style = dashed, label="0"];
9->4 [style = bold, label=""];
29->31 [style = bold, label=""];
3->14 [style = bold, label=""];
27->3 [style = bold, label=""];
4->21 [style = bold, label=""];
0->11 [style = bold, label=""];
8->17 [style = solid, label="expected3"];
16->17 [style = bold, label=""];
1->26 [style = bold, label=""];
30->29 [style = bold, label=""];
12->7 [style = bold, label=""];
15->5 [style = bold, label=""];
19->1 [style = bold, label=""];
7->24 [style = bold, label=""];
14->23 [style = solid, label="expected0"];
14->12 [style = bold, label=""];
26->23 [style = bold, label=""];
31->28 [style = solid, label="expected"];
17->15 [style = bold, label=""];
18->13 [style = bold, label=""];
11->8 [style = bold, label=""];
13->9 [style = bold, label=""];
23->2 [style = bold, label=""];
31->28 [style = bold, label=""];
4->5 [style = solid, label="expected5"];
0->16 [style = solid, label="expected2"];
1->25 [style = bold, label=""];
2->16 [style = bold, label=""];
}
