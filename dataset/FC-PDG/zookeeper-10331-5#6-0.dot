digraph {
11 [style = filled, label = "assertEquals(2,zk.getACL(\"/a/c/0\",new Stat()).size())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "List<ACL> acls = Arrays.asList(new ACL(ZooDefs.Perms.READ,Ids.ANYONE_ID_UNSAFE),deleteProtection)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "List<String> children = zk.getChildren(\"/a\",false)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\"1 children - b should be deleted \",1,children.size())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertTrue(ZKUtil.deleteRecursive(zk,\"/a\",1000))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertTrue(ZKUtil.deleteRecursive(zk,\"/a\",1000))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testDeleteRecursive['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertFalse(ZKUtil.deleteRecursive(zk,\"/a/c\",1000))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testDeleteRecursive['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "testDeleteRecursiveFail['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "children = zk.getChildren(\"/a\",false)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "setupDataTree(zk)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "zk.setACL(\"/a/c/0\",acls,-1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertTrue(children.contains(\"b\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final ZooKeeper zk = createClient()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertTrue(children.contains(\"b\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "List<String> children = zk.getChildren(\"/a\",false)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertTrue(ZKUtil.deleteRecursive(zk,\"/a/c\",1000))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(\"1 children - c should be deleted \",1,children.size())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertNull(zk.exists(\"/a\",null))@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "zk.addAuthInfo(deleteProtection.getId().getScheme(),\"user:test\".getBytes())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(1,children.size(),\"1 children - c should be deleted \")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertNull(zk.exists(\"/a\",null))@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(1,zk.getACL(\"/a/c/0\",new Stat()).size())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(\"2 children - c should fail to be deleted \",2,children.size())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "zk.create(\"/a/c/0/surprise\",\"\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "ACL deleteProtection = new ACL(ZooDefs.Perms.DELETE,new Id(\"digest\",\"user:tl+z3z0vO6PfPfEENfLF96E6pM0=\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertTrue(ZKUtil.deleteRecursive(zk,\"/a/b\",1000))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->6 [style = solid, label="zk"];
4->10 [style = bold, label=""];
6->3 [style = bold, label=""];
23->27 [style = bold, label=""];
20->26 [style = bold, label=""];
5->22 [style = solid, label="zk"];
19->17 [style = bold, label=""];
19->21 [style = solid, label="acls"];
13->19 [style = solid, label="deleteProtection"];
5->14 [style = solid, label="zk"];
0->27 [style = dashed, label="0"];
15->16 [style = bold, label=""];
2->4 [style = bold, label=""];
10->7 [style = bold, label=""];
1->13 [style = bold, label=""];
22->23 [style = bold, label=""];
0->10 [style = dashed, label="0"];
4->0 [style = bold, label=""];
0->7 [style = bold, label=""];
24->20 [style = bold, label=""];
5->1 [style = bold, label=""];
5->20 [style = solid, label="zk"];
13->19 [style = bold, label=""];
8->5 [style = bold, label=""];
21->11 [style = bold, label=""];
14->12 [style = bold, label=""];
7->6 [style = bold, label=""];
26->15 [style = bold, label=""];
11->22 [style = bold, label=""];
9->5 [style = bold, label=""];
16->14 [style = bold, label=""];
25->5 [style = bold, label=""];
27->24 [style = bold, label=""];
1->2 [style = bold, label=""];
18->21 [style = bold, label=""];
17->18 [style = bold, label=""];
5->1 [style = solid, label="zk"];
5->2 [style = solid, label="zk"];
}
