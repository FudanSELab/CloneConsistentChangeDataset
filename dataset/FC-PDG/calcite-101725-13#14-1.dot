digraph {
17 [style = filled, label = "!a.getType().isNullable() && isSafeExpression(a)@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "predicates.pulledUpPredicates.contains(a)@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "simplifyIsNotNull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "operands.add(simplified)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "simplified.isAlwaysFalse()@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "a.getKind()@@@29@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "simplifyIsNull['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "hasCustomNullabilityRules(a.getKind())@@@10@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "return null@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "return rexBuilder.makeLiteral(true)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "a = simplify(a,UNKNOWN)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "RexUtil.isNull(a)@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "return rexBuilder.makeLiteral(false)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "return null@@@33@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "RexNode operand@@@16@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "RexNode operand@@@16@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "return rexBuilder.makeLiteral(true)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "RexNode operand@@@16@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "operands.add(rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL,operand))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "return rexBuilder.makeLiteral(!((RexLiteral)a).isNull())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "return null@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "RexNode a@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "RexNode a@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final List<RexNode> operands = new ArrayList<>()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "return rexBuilder.makeLiteral(false)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "simplifyIsNotNull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Strong.policy(a.getKind())@@@13@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final RexNode simplified = simplifyIsNotNull(operand)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final RexNode simplified = simplifyIsNull(operand)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "return rexBuilder.makeLiteral(false)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "return RexUtil.composeDisjunction(rexBuilder,operands,false)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "return rexBuilder.makeLiteral(true)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "throw new AssertionError(\"every CUSTOM policy needs a handler, \" + a.getKind())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "((RexCall)a).getOperands()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "operands.add(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL,operand))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "a.getKind() == SqlKind.CAST@@@10@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "simplified == null@@@18@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "return RexUtil.composeConjunction(rexBuilder,operands)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18->3 [style = bold, label=""];
10->24 [style = bold, label=""];
17->1 [style = dotted, label="true"];
34->7 [style = solid, label="a"];
24->30 [style = dashed, label="0"];
9->10 [style = bold, label=""];
27->15 [style = dotted, label="true"];
22->34 [style = dashed, label="0"];
27->15 [style = bold, label=""];
1->23 [style = bold, label=""];
6->35 [style = dashed, label="0"];
12->20 [style = dotted, label="true"];
5->22 [style = dotted, label="true"];
18->3 [style = dotted, label="true"];
29->14 [style = bold, label=""];
18->32 [style = bold, label=""];
28->3 [style = bold, label=""];
13->31 [style = bold, label=""];
35->31 [style = bold, label=""];
18->11 [style = bold, label=""];
4->35 [style = dotted, label="true"];
23->21 [style = dotted, label="true"];
18->12 [style = bold, label=""];
37->29 [style = bold, label=""];
31->4 [style = bold, label=""];
18->8 [style = dotted, label="true"];
9->13 [style = dotted, label="false"];
17->37 [style = bold, label=""];
25->7 [style = bold, label=""];
4->13 [style = dotted, label="false"];
18->28 [style = bold, label=""];
3->0 [style = bold, label=""];
23->14 [style = bold, label=""];
22->7 [style = solid, label="a"];
4->9 [style = dotted, label="false"];
18->11 [style = dotted, label="true"];
20->8 [style = bold, label=""];
0->4 [style = solid, label="simplified"];
18->26 [style = dotted, label="true"];
10->0 [style = bold, label=""];
7->23 [style = solid, label="a"];
18->0 [style = dotted, label="true"];
5->7 [style = bold, label=""];
14->18 [style = bold, label=""];
14->15 [style = bold, label=""];
29->21 [style = dotted, label="true"];
16->20 [style = bold, label=""];
9->10 [style = dotted, label="true"];
13->0 [style = bold, label=""];
31->13 [style = solid, label="simplified"];
4->9 [style = bold, label=""];
27->18 [style = bold, label=""];
1->37 [style = dashed, label="0"];
24->12 [style = bold, label=""];
7->17 [style = bold, label=""];
13->24 [style = bold, label=""];
17->1 [style = bold, label=""];
21->27 [style = bold, label=""];
18->33 [style = dotted, label="true"];
3->24 [style = solid, label="operands"];
4->13 [style = bold, label=""];
18->24 [style = dotted, label="true"];
18->19 [style = dotted, label="true"];
12->20 [style = bold, label=""];
30->32 [style = bold, label=""];
6->24 [style = bold, label=""];
31->4 [style = solid, label="simplified"];
7->29 [style = solid, label="a"];
17->23 [style = bold, label=""];
29->21 [style = bold, label=""];
11->3 [style = bold, label=""];
18->8 [style = bold, label=""];
17->37 [style = dotted, label="true"];
35->30 [style = bold, label=""];
18->2 [style = dotted, label="true"];
21->14 [style = bold, label=""];
4->6 [style = dotted, label="true"];
4->35 [style = bold, label=""];
23->27 [style = bold, label=""];
4->6 [style = bold, label=""];
3->31 [style = bold, label=""];
0->13 [style = solid, label="simplified"];
6->0 [style = bold, label=""];
12->16 [style = bold, label=""];
13->30 [style = bold, label=""];
14->27 [style = dashed, label="0"];
15->18 [style = bold, label=""];
18->32 [style = dotted, label="true"];
11->28 [style = dashed, label="0"];
14->15 [style = dotted, label="true"];
3->30 [style = solid, label="operands"];
18->12 [style = dotted, label="true"];
23->21 [style = bold, label=""];
12->16 [style = dotted, label="true"];
0->4 [style = bold, label=""];
36->7 [style = bold, label=""];
18->28 [style = dotted, label="true"];
0->31 [style = dashed, label="0"];
25->22 [style = dotted, label="true"];
18->4 [style = dotted, label="true"];
18->31 [style = dotted, label="true"];
17->29 [style = bold, label=""];
36->34 [style = dotted, label="true"];
7->17 [style = solid, label="a"];
9->13 [style = bold, label=""];
18->30 [style = dotted, label="true"];
}
