digraph {
0 [style = filled, label = "extracted.add(extractionFn.apply(path))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testDeeperPathExtraction['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(expected,extracted)@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ExtractionFn extractionFn = new RegexDimExtractionFn(regex,false,null)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testPathExtraction['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Set<String> expected = Sets.newLinkedHashSet(ImmutableList.of(\"druid/prod\",\"druid/demo\",\"dash/aloe\",\"dash/baloo\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testPathExtraction['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String regex = \"^/((^/(+/(^/(+)(/|$)\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Set<String> extracted = new LinkedHashSet<>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "String regex = \"/((^/(+)/\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Set<String> expected = Sets.newLinkedHashSet(ImmutableList.of(\"druid\",\"dash\"))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->3 [style = bold, label=""];
1->3 [style = solid, label="extracted"];
6->4 [style = bold, label=""];
10->4 [style = solid, label="regex"];
4->1 [style = bold, label=""];
2->3 [style = solid, label="expected"];
7->6 [style = bold, label=""];
10->4 [style = bold, label=""];
1->0 [style = bold, label=""];
0->9 [style = bold, label=""];
5->6 [style = bold, label=""];
8->10 [style = bold, label=""];
6->10 [style = dashed, label="0"];
2->9 [style = dashed, label="0"];
6->4 [style = solid, label="regex"];
2->3 [style = bold, label=""];
0->2 [style = bold, label=""];
9->3 [style = solid, label="expected"];
}
