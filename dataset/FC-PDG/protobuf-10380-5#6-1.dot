digraph {
15 [style = filled, label = "byte(( data@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "int blockSize = 1@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertReadLittleEndian32['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "blockSize <= 16@@@5@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(inputType.name(),value,input.readRawLittleEndian32())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertTrue(inputType.name(),input.isAtEnd())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "long value@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertReadLittleEndian32['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertWithMessage(inputType.name()).that(input.readRawLittleEndian32()).isEqualTo(value)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "CodedInputStream input = inputType.newDecoder(data,blockSize)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "byte(( data@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertWithMessage(inputType.name()).that(input.isAtEnd()).isTrue()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertEquals(inputType.name(),value,input.readRawLittleEndian64())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "int value@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertReadLittleEndian64['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "int value@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "blockSize *= 2@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->10 [style = bold, label=""];
5->8 [style = bold, label=""];
4->3 [style = bold, label=""];
16->14 [style = solid, label="value"];
4->14 [style = bold, label=""];
5->14 [style = dotted, label="true"];
13->16 [style = dotted, label="true"];
2->4 [style = solid, label="blockSize"];
5->10 [style = dotted, label="true"];
6->10 [style = solid, label="value"];
7->11 [style = dashed, label="0"];
9->4 [style = solid, label="data"];
5->3 [style = dotted, label="true"];
0->6 [style = dotted, label="true"];
11->2 [style = bold, label=""];
5->4 [style = dotted, label="true"];
14->7 [style = bold, label=""];
5->11 [style = dotted, label="true"];
6->16 [style = dashed, label="0"];
15->4 [style = solid, label="data"];
8->5 [style = bold, label=""];
3->7 [style = bold, label=""];
12->6 [style = dotted, label="true"];
5->7 [style = dotted, label="true"];
7->2 [style = bold, label=""];
12->8 [style = bold, label=""];
0->1 [style = dotted, label="true"];
5->4 [style = bold, label=""];
6->4 [style = solid, label="data"];
0->8 [style = bold, label=""];
1->3 [style = solid, label="value"];
2->5 [style = solid, label="blockSize"];
13->15 [style = dotted, label="true"];
8->4 [style = solid, label="blockSize"];
3->10 [style = dashed, label="0"];
13->8 [style = bold, label=""];
3->14 [style = dashed, label="0"];
5->2 [style = dotted, label="true"];
2->5 [style = bold, label=""];
12->9 [style = dotted, label="true"];
10->11 [style = bold, label=""];
8->5 [style = solid, label="blockSize"];
}
