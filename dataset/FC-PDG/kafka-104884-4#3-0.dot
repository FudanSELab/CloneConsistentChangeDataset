digraph {
22 [style = filled, label = "sinkTask.preCommit(offsets)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expectConsumerPoll(0)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "workerTask.initializeAndStart()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(sinkTaskContext.getValue().isCommitRequested())@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "offsets.put(TOPIC_PARTITION2,new OffsetAndMetadata(FIRST_OFFSET))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "EasyMock.expectLastCall().andReturn(offsets)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(offsets,Whitebox.getInternalState(workerTask,\"lastCommittedOffsets\"))@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "EasyMock.expectLastCall()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "sinkTask.put(EasyMock.anyObject())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "expectInitializeTask()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "sinkTask.put(Collections.emptyList())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final Capture<OffsetCommitCallback> callback = EasyMock.newCapture()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "expectConversionAndTransformation(1)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "workerTask.iteration()@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testDeliveryWithMutatingTransform['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(1.0,workerTask.taskMetricsGroup().currentMetricValue(\"batch-size-max\"),0.0001)@@@39@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "expectConsumerPoll(1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "workerTask.initialize(TASK_CONFIG)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertNotEquals(offsets,Whitebox.getInternalState(workerTask,\"lastCommittedOffsets\"))@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "EasyMock.expectLastCall().andAnswer(new IAnswer<Void>(){@Override public Void answer(){callback.getValue().onComplete(offsets,null)return null}})@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertFalse(sinkTaskContext.getValue().isCommitRequested())@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(0,workerTask.commitFailures())@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "PowerMock.replayAll()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final Map<TopicPartition,OffsetAndMetadata> offsets = new HashMap<>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "createTask(initialState)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "PowerMock.verifyAll()@@@38@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "expectConversionAndTransformation(1,\"newtopic_\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "workerTask.iteration()@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testRequestCommit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "sinkTaskContext.getValue().requestCommit()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "expectPollInitialAssignment()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "workerTask.iteration()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testDeliveryWithMutatingTransform['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "EasyMock.expectLastCall()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "consumer.commitAsync(EasyMock.eq(offsets),EasyMock.capture(callback))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "offsets.put(TOPIC_PARTITION,new OffsetAndMetadata(FIRST_OFFSET + 1))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22->2 [style = bold, label=""];
12->25 [style = bold, label=""];
28->21 [style = solid, label="offsets"];
29->19 [style = bold, label=""];
29->19 [style = solid, label="callback"];
4->26 [style = bold, label=""];
6->15 [style = bold, label=""];
13->0 [style = bold, label=""];
31->9 [style = bold, label=""];
34->6 [style = bold, label=""];
7->9 [style = bold, label=""];
28->19 [style = solid, label="offsets"];
9->20 [style = bold, label=""];
26->33 [style = bold, label=""];
21->8 [style = bold, label=""];
17->12 [style = bold, label=""];
16->22 [style = bold, label=""];
1->23 [style = bold, label=""];
24->30 [style = bold, label=""];
27->11 [style = bold, label=""];
26->14 [style = bold, label=""];
28->22 [style = solid, label="offsets"];
20->1 [style = bold, label=""];
5->13 [style = bold, label=""];
10->3 [style = bold, label=""];
28->2 [style = solid, label="offsets"];
30->27 [style = bold, label=""];
0->10 [style = bold, label=""];
15->28 [style = bold, label=""];
19->21 [style = bold, label=""];
3->17 [style = bold, label=""];
25->4 [style = bold, label=""];
23->6 [style = bold, label=""];
23->34 [style = dashed, label="0"];
2->29 [style = bold, label=""];
32->31 [style = bold, label=""];
18->16 [style = bold, label=""];
28->18 [style = bold, label=""];
33->14 [style = bold, label=""];
8->24 [style = bold, label=""];
35->9 [style = bold, label=""];
1->34 [style = bold, label=""];
28->17 [style = solid, label="offsets"];
11->5 [style = bold, label=""];
28->4 [style = solid, label="offsets"];
}
