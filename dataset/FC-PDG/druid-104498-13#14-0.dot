digraph {
4 [style = filled, label = "final CompactionTask fromJson = objectMapper.readValue(bytes,)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final CompactionTask task = builder.segments(SEGMENTS).tuningConfig(createTuningConfig()).context(ImmutableMap.of(\"testKey\",\"testContext\")).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final byte(( bytes = objectMapper.writeValueAsBytes(task)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final Builder builder = new Builder(DATA_SOURCE,objectMapper,AuthTestUtils.TEST_AUTHORIZER_MAPPER,null,rowIngestionMetersFactory,coordinatorClient,segmentLoaderFactory,retryPolicyFactory,appenderatorsManager)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(task,fromJson)@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testSerdeWithInterval['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "final byte(( bytes = OBJECT_MAPPER.writeValueAsBytes(task)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testSerdeWithSegments['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final Builder builder = new Builder(DATA_SOURCE,OBJECT_MAPPER,AuthTestUtils.TEST_AUTHORIZER_MAPPER,null,ROW_INGESTION_METERS_FACTORY,COORDINATOR_CLIENT,segmentLoaderFactory,RETRY_POLICY_FACTORY,APPENDERATORS_MANAGER)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "final CompactionTask fromJson = OBJECT_MAPPER.readValue(bytes,)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "final CompactionTask task = builder.inputSpec(new CompactionIntervalSpec(COMPACTION_INTERVAL,SegmentUtils.hashIds(SEGMENTS))).tuningConfig(createTuningConfig()).context(ImmutableMap.of(\"testKey\",\"testContext\")).build()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "final CompactionTask task = builder.interval(COMPACTION_INTERVAL).tuningConfig(createTuningConfig()).context(ImmutableMap.of(\"testKey\",\"testContext\")).build()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "testSerdeWithInterval['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1->4 [style = bold, label=""];
11->2 [style = solid, label="task"];
4->2 [style = solid, label="fromJson"];
12->5 [style = bold, label=""];
7->10 [style = bold, label=""];
11->1 [style = bold, label=""];
5->9 [style = dashed, label="0"];
0->11 [style = dashed, label="0"];
4->2 [style = bold, label=""];
1->10 [style = dashed, label="0"];
0->1 [style = solid, label="task"];
9->7 [style = bold, label=""];
0->2 [style = solid, label="task"];
1->4 [style = solid, label="bytes"];
10->8 [style = solid, label="bytes"];
3->5 [style = bold, label=""];
10->8 [style = bold, label=""];
5->0 [style = bold, label=""];
8->2 [style = bold, label=""];
0->1 [style = bold, label=""];
8->2 [style = solid, label="fromJson"];
4->8 [style = dashed, label="0"];
5->11 [style = bold, label=""];
11->1 [style = solid, label="task"];
7->2 [style = solid, label="task"];
7->10 [style = solid, label="task"];
6->9 [style = bold, label=""];
0->7 [style = dashed, label="0"];
}
