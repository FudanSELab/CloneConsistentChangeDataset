digraph {
17 [style = filled, label = "EasyMock.expect(instance.getSslPort()).andReturn(SSL_PORT).anyTimes()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "EasyMock.expect(instance.getAddress()).andReturn(address).anyTimes()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "Assert.assertEquals(ADDRESS,uri.getHost())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "EasyMock.replay(instance,serviceProvider)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "EasyMock.verify(instance,serviceProvider)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "EasyMock.expect(instance.getPort()).andReturn(PORT).anyTimes()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testPickIPv6Bracket['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(PORT,server.getPort())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testPickIPv6Bracket['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertTrue(server.getHost().contains(ADDRESS))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "EasyMock.expect(serviceProvider.getInstance()).andReturn(instance).anyTimes()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final String ADDRESS = \"(2001:0db8:0000:0000:0000:ff00:0042:8329(\"@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "Assert.assertTrue(server.getHost().contains(Integer.toString(PORT)))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Server server = serverDiscoverySelector.pick()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(PORT,uri.getPort())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(\"https\",server.getScheme())@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(SSL_PORT,server.getPort())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testPickWithSslPort['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(address,uri.getHost())@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assert.assertEquals(\"http\",server.getScheme())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final URI uri = new URI(server.getScheme(),null,server.getAddress(),server.getPort(),\"/druid/indexer/v1/action\",null,null)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(\"http\",uri.getScheme())@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "EasyMock.expect(instance.getSslPort()).andReturn(-1).anyTimes()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "EasyMock.expect(instance.getAddress()).andReturn(ADDRESS).anyTimes()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final String address = \"(2001:0db8:0000:0000:0000:ff00:0042:8329(\"@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "Assert.assertEquals(ADDRESS,server.getAddress())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertTrue(server.getHost().contains(address))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assert.assertEquals(address,server.getAddress())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertTrue(server.getHost().contains(Integer.toString(SSL_PORT)))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(\"https\",uri.getScheme())@@@18@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(SSL_PORT,uri.getPort())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
10->3 [style = solid, label="ADDRESS"];
19->21 [style = solid, label="address"];
20->17 [style = bold, label=""];
25->1 [style = bold, label=""];
6->1 [style = dashed, label="0"];
19->22 [style = solid, label="address"];
7->17 [style = dashed, label="0"];
10->19 [style = dashed, label="0"];
3->18 [style = dashed, label="0"];
18->15 [style = bold, label=""];
8->20 [style = dashed, label="0"];
3->15 [style = bold, label=""];
5->18 [style = bold, label=""];
24->13 [style = bold, label=""];
2->9 [style = bold, label=""];
0->12 [style = dashed, label="0"];
19->18 [style = solid, label="address"];
15->16 [style = bold, label=""];
4->21 [style = dashed, label="0"];
12->0 [style = bold, label=""];
26->4 [style = bold, label=""];
5->4 [style = dashed, label="0"];
1->22 [style = dashed, label="0"];
17->7 [style = bold, label=""];
8->17 [style = bold, label=""];
9->26 [style = bold, label=""];
21->5 [style = bold, label=""];
10->1 [style = solid, label="ADDRESS"];
1->6 [style = bold, label=""];
19->13 [style = bold, label=""];
4->30 [style = bold, label=""];
10->13 [style = bold, label=""];
30->3 [style = bold, label=""];
11->10 [style = bold, label=""];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
12->25 [style = bold, label=""];
0->22 [style = bold, label=""];
23->19 [style = bold, label=""];
9->14 [style = bold, label=""];
28->24 [style = bold, label=""];
14->9 [style = dashed, label="0"];
15->3 [style = dashed, label="0"];
17->27 [style = bold, label=""];
13->8 [style = bold, label=""];
4->5 [style = bold, label=""];
16->12 [style = bold, label=""];
27->2 [style = bold, label=""];
14->21 [style = bold, label=""];
3->29 [style = bold, label=""];
29->16 [style = bold, label=""];
10->4 [style = solid, label="ADDRESS"];
22->6 [style = bold, label=""];
14->4 [style = bold, label=""];
13->20 [style = bold, label=""];
}
