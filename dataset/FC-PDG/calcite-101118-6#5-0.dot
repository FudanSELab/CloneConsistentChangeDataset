digraph {
0 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(buf.size(),equalTo(5))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertThat(buf.size(),equalTo(3))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertThat(buf.size(),equalTo(7))@@@42@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(buf.size(),equalTo(3))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final RelNode rel = root.rel@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testCustomProviderWithRelMetadataQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "assertThat(buf.size(),equalTo(4))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(buf.toString(),equalTo(\"(DEPTNO-rel, EXPR$1-rel, DEPTNO-agg(\"))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertThat(buf.size(),equalTo(5))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "testCustomProviderWithRelMetadataFactory['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "assertThat(buf.size(),equalTo(7))@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "assertThat(colType(mq,rel,0),equalTo(\"DEPTNO-rel\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final MyRelMetadataQuery mq1 = (MyRelMetadataQuery)rel.getCluster().getMetadataQuery()@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertThat(colType(mq1,input,0),equalTo(\"DEPTNO-agg\"))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final RelNode input = rel.getInput(0)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(buf.size(),equalTo(4))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final String sql = \"select deptno, count(*) from emp where deptno > 10 \" + \"group by deptno having count(*) = 0\"@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertThat(buf.size(),equalTo(6))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "ColTypeImpl.THREAD_LIST.set(buf)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final List<String> buf = new ArrayList<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertThat(colType(mq,rel,1),equalTo(\"EXPR$1-rel\"))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(colType(mq1,input,0),equalTo(\"DEPTNO-agg\"))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "final MyRelMetadataQuery mq = (MyRelMetadataQuery)rel.getCluster().getMetadataQuery()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "rel.getCluster().invalidateMetadataQuery()@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final MyRelMetadataQuery mq = rel.getCluster().getMetadataQuery()@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "testCustomProviderWithRelMetadataQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(colType(mq,input,0),equalTo(\"DEPTNO-agg\"))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertThat(buf.size(),equalTo(6))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "rel.getCluster().setMetadataProvider(new CachingRelMetadataProvider(rel.getCluster().getMetadataProvider(),planner))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertThat(colType(mq,input,1),equalTo(\"EXPR$1-agg\"))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(rel,instanceOf())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(colType(mq,input,1),equalTo(\"EXPR$1-agg\"))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "final RelMetadataQuery mq = rel.getCluster().getMetadataQuery()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final MyRelMetadataQuery mq1 = rel.getCluster().getMetadataQuery()@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertThat(colType(mq,input,1),equalTo(\"EXPR$1-agg\"))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertThat(buf.size(),equalTo(6))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "long timestamp = planner.getRelMetadataTimestamp(rel)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(buf.size(),equalTo(4))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(input,instanceOf())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertThat(timestamp,equalTo(0L))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "((MockRelOptPlanner)planner).setRelMetadataTimestamp(timestamp + 1)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(rel.getCluster().getMetadataQuery(),instanceOf())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(rel.getCluster().getMetadataQuery(),instanceOf())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final RelOptPlanner planner = rel.getCluster().getPlanner()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "rel.getCluster().setMetadataQuerySupplier(null)@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertThat(buf.size(),equalTo(3))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final RelRoot root = tester.withClusterFactory(null).convertSqlToRel(sql)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(colType(mq,input,1),equalTo(\"EXPR$1-agg\"))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->25 [style = bold, label=""];
8->49 [style = solid, label="rel"];
25->22 [style = bold, label=""];
14->2 [style = solid, label="input"];
33->9 [style = solid, label="mq"];
38->51 [style = bold, label=""];
10->40 [style = solid, label="input"];
44->15 [style = bold, label=""];
11->29 [style = bold, label=""];
43->42 [style = solid, label="mq"];
4->33 [style = dashed, label="0"];
45->7 [style = bold, label=""];
31->18 [style = solid, label="buf"];
10->15 [style = solid, label="input"];
48->54 [style = bold, label=""];
39->31 [style = bold, label=""];
43->28 [style = solid, label="mq"];
10->37 [style = solid, label="input"];
37->48 [style = bold, label=""];
9->21 [style = bold, label=""];
15->41 [style = bold, label=""];
17->27 [style = bold, label=""];
49->51 [style = solid, label="timestamp"];
19->15 [style = bold, label=""];
43->0 [style = solid, label="mq"];
4->10 [style = solid, label="mq"];
27->53 [style = solid, label="planner"];
4->17 [style = solid, label="mq"];
54->52 [style = bold, label=""];
35->31 [style = bold, label=""];
46->42 [style = bold, label=""];
43->40 [style = solid, label="mq"];
15->34 [style = bold, label=""];
10->14 [style = bold, label=""];
0->19 [style = bold, label=""];
10->2 [style = solid, label="input"];
33->7 [style = solid, label="mq"];
14->19 [style = solid, label="input"];
10->14 [style = solid, label="input"];
33->28 [style = bold, label=""];
47->28 [style = bold, label=""];
27->53 [style = bold, label=""];
41->37 [style = bold, label=""];
22->32 [style = bold, label=""];
49->38 [style = bold, label=""];
7->0 [style = bold, label=""];
19->0 [style = dashed, label="0"];
8->13 [style = solid, label="rel"];
33->28 [style = solid, label="mq"];
2->9 [style = bold, label=""];
49->38 [style = solid, label="timestamp"];
1->3 [style = solid, label="mq1"];
3->0 [style = bold, label=""];
26->16 [style = bold, label=""];
43->47 [style = bold, label=""];
10->0 [style = solid, label="input"];
27->11 [style = bold, label=""];
13->43 [style = bold, label=""];
33->11 [style = solid, label="mq"];
43->37 [style = solid, label="mq"];
14->3 [style = solid, label="input"];
0->44 [style = bold, label=""];
1->19 [style = solid, label="mq1"];
8->47 [style = solid, label="rel"];
6->17 [style = bold, label=""];
23->31 [style = bold, label=""];
26->16 [style = solid, label="sql"];
30->24 [style = bold, label=""];
33->17 [style = solid, label="mq"];
10->42 [style = solid, label="input"];
33->10 [style = solid, label="mq"];
16->8 [style = bold, label=""];
4->9 [style = solid, label="mq"];
18->26 [style = bold, label=""];
1->3 [style = bold, label=""];
43->15 [style = solid, label="mq"];
33->5 [style = solid, label="mq"];
4->7 [style = solid, label="mq"];
43->6 [style = solid, label="mq"];
14->5 [style = solid, label="input"];
51->40 [style = bold, label=""];
8->10 [style = solid, label="rel"];
14->2 [style = bold, label=""];
33->22 [style = solid, label="mq"];
24->1 [style = bold, label=""];
20->43 [style = dashed, label="0"];
10->54 [style = solid, label="input"];
8->13 [style = bold, label=""];
4->22 [style = solid, label="mq"];
4->11 [style = solid, label="mq"];
10->45 [style = solid, label="input"];
14->11 [style = solid, label="input"];
32->5 [style = bold, label=""];
4->5 [style = solid, label="mq"];
42->50 [style = bold, label=""];
28->10 [style = bold, label=""];
21->6 [style = bold, label=""];
7->12 [style = bold, label=""];
52->49 [style = bold, label=""];
43->47 [style = solid, label="mq"];
14->7 [style = solid, label="input"];
36->19 [style = solid, label="mq1"];
36->3 [style = solid, label="mq1"];
43->2 [style = solid, label="mq"];
31->18 [style = bold, label=""];
12->30 [style = bold, label=""];
43->54 [style = solid, label="mq"];
4->28 [style = bold, label=""];
14->17 [style = solid, label="input"];
20->33 [style = bold, label=""];
20->4 [style = bold, label=""];
10->6 [style = solid, label="input"];
40->46 [style = bold, label=""];
14->22 [style = solid, label="input"];
24->36 [style = bold, label=""];
1->36 [style = dashed, label="0"];
4->28 [style = solid, label="mq"];
29->7 [style = bold, label=""];
14->9 [style = solid, label="input"];
5->27 [style = bold, label=""];
8->28 [style = solid, label="rel"];
53->45 [style = bold, label=""];
43->45 [style = solid, label="mq"];
13->20 [style = bold, label=""];
36->3 [style = bold, label=""];
}
