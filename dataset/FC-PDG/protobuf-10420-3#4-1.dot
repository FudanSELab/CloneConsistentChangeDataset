digraph {
7 [style = filled, label = "TestMessageSet messageSet = TestMessageSet.parseFrom(data,extensionRegistry)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "extensionRegistry.add(TestMessageSetExtension1.messageSetExtension)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testMergeLazyMessageSetExtensionWithFlag['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ExtensionRegistryLite.setEagerlyParseMessageSets(eagerParsing)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ByteString data = raw.toByteString()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(123,messageSet.getExtension(TestMessageSetExtension1.messageSetExtension).getI())@@@11@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testParseMessageSetExtensionWithFlag['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "int typeId1 = 1545008@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testParseMessageSetExtensionWithFlag['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertThat(messageSet.getExtension(TestMessageSetExtension1.messageSetExtension).getI()).isEqualTo(123)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "ExtensionRegistryLite extensionRegistry = ExtensionRegistryLite.newInstance()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "boolean eagerParsing@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "RawMessageSet raw = RawMessageSet.newBuilder().addItem(RawMessageSet.Item.newBuilder().setTypeId(typeId1).setMessage(TestMessageSetExtension1.newBuilder().setI(123).build().toByteString()).build()).build()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "messageSet = messageSet.toBuilder().mergeFrom(data,extensionRegistry).build()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "boolean eagerParsing@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2->7 [style = solid, label="extensionRegistry"];
5->12 [style = dashed, label="0"];
7->11 [style = bold, label=""];
3->1 [style = bold, label=""];
13->12 [style = dotted, label="true"];
7->0 [style = bold, label=""];
0->11 [style = dashed, label="0"];
4->2 [style = bold, label=""];
2->9 [style = bold, label=""];
12->4 [style = solid, label="eagerParsing"];
10->5 [style = dotted, label="true"];
7->14 [style = bold, label=""];
6->7 [style = solid, label="data"];
1->6 [style = bold, label=""];
14->0 [style = bold, label=""];
8->5 [style = dotted, label="true"];
10->4 [style = bold, label=""];
5->4 [style = solid, label="eagerParsing"];
9->3 [style = bold, label=""];
8->4 [style = bold, label=""];
6->7 [style = bold, label=""];
13->4 [style = bold, label=""];
}
