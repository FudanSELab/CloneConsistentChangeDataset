digraph {
28 [style = filled, label = "g.addEdge(\"A\",\"B\",1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "g.addEdge(\"A\",\"B\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "g.addVertex(\"C\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "g.addEdge(\"D\",\"C\",1)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "g.addEdge(\"D\",\"C\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"(A, B, C, D(\",shortestPath(g,\"A\",\"D\").toString())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testOne['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "DirectedGraph<String,DefaultEdge> g = DefaultDirectedGraph.create()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertNull(shortestPath(g,\"A\",\"E\"),\"There is no path from A to E\")@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "assertThat(Iterables.size(g.getEdges(\"A\",\"B\")),is(1))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "g.addEdge(\"C\",\"D\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"((\",shortestPath(g,\"D\",\"D\").toString())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testAttributed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "g.addEdge(\"C\",\"C\",1)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertNull(\"Node X is not in the graph\",shortestPath(g,\"X\",\"A\"))@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(\"(A, B, D(\",shortestPath(g,\"A\",\"D\").toString())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "g.addVertex(\"F\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertThat(Iterables.size(g.getEdges(\"A\",\"B\")),is(1))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "g.addEdge(\"C\",\"C\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "g.addVertex(\"E\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertThat(Iterables.size(g.getEdges(\"A\",\"B\")),is(2))@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "g.addEdge(\"B\",\"C\",1)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testOne['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "g.addEdge(\"E\",\"F\",1)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "g.addVertex(\"D\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(g.addEdge(\"A\",\"B\",2),notNullValue())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertThat(g.addVertex(\"B\"),is(false))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "g.addEdge(\"B\",\"D\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "g.addEdge(\"B\",\"D\",1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "g.addEdge(\"B\",\"C\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertNull(shortestPath(g,\"X\",\"A\"),\"Node X is not in the graph\")@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "g.addEdge(\"E\",\"F\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertNull(\"There is no path from A to E\",shortestPath(g,\"A\",\"E\"))@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "AttributedDirectedGraph<String,DefaultEdge> g = AttributedDirectedGraph.create(new DefaultAttributedEdgeFactory())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "g.addVertex(\"A\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "g.addEdge(\"C\",\"D\",1)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "g.addVertex(\"B\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(g.addEdge(\"A\",\"B\",1),nullValue())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(\"((A, B, C, D(, (A, B, D((\",paths(g,\"A\",\"D\").toString())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
29->36 [style = bold, label=""];
3->29 [style = dashed, label="0"];
13->34 [style = bold, label=""];
14->18 [style = solid, label="g"];
8->37 [style = dashed, label="0"];
10->28 [style = bold, label=""];
11->1 [style = bold, label=""];
2->6 [style = bold, label=""];
1->15 [style = bold, label=""];
27->16 [style = solid, label="g"];
22->9 [style = bold, label=""];
8->3 [style = bold, label=""];
9->32 [style = bold, label=""];
14->22 [style = solid, label="g"];
15->24 [style = dashed, label="0"];
18->17 [style = bold, label=""];
37->29 [style = bold, label=""];
17->22 [style = bold, label=""];
12->0 [style = bold, label=""];
33->27 [style = bold, label=""];
14->27 [style = dashed, label="0"];
34->0 [style = bold, label=""];
20->10 [style = bold, label=""];
32->38 [style = bold, label=""];
11->28 [style = dashed, label="0"];
25->24 [style = bold, label=""];
6->5 [style = bold, label=""];
31->26 [style = bold, label=""];
36->13 [style = bold, label=""];
38->30 [style = bold, label=""];
13->12 [style = bold, label=""];
19->14 [style = bold, label=""];
0->23 [style = bold, label=""];
3->7 [style = bold, label=""];
14->23 [style = solid, label="g"];
27->18 [style = solid, label="g"];
30->31 [style = bold, label=""];
18->23 [style = dashed, label="0"];
5->4 [style = bold, label=""];
24->37 [style = bold, label=""];
4->20 [style = bold, label=""];
26->35 [style = bold, label=""];
28->25 [style = bold, label=""];
0->18 [style = bold, label=""];
23->17 [style = bold, label=""];
14->2 [style = bold, label=""];
1->25 [style = dashed, label="0"];
12->34 [style = dashed, label="0"];
14->16 [style = solid, label="g"];
15->8 [style = bold, label=""];
16->9 [style = bold, label=""];
27->2 [style = bold, label=""];
17->16 [style = bold, label=""];
7->36 [style = dashed, label="0"];
16->22 [style = dashed, label="0"];
21->14 [style = bold, label=""];
10->11 [style = bold, label=""];
}
