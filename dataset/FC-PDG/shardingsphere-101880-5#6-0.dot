digraph {
12 [style = filled, label = "hintManager.setDatabaseShardingValue(1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(HintManager.getDatabaseShardingValues(\"logicTable\").size(),is(2))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(HintManager.getDatabaseShardingValues(\"logicTable\").contains(3))@@@8@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "hintManager.addDatabaseShardingValue(\"logicTable\",3)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertAddDatabaseShardingValue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "List<Comparable<?>> shardingValues = new ArrayList<>(HintManager.getDatabaseShardingValues(\"logicTable\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertTrue(HintManager.isDatabaseShardingOnly())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(shardingValues.get(0),is(1))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "hintManager.addDatabaseShardingValue(\"logicTable\",1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(HintManager.getDatabaseShardingValues(\"logic_table\").contains(2))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(HintManager.getDatabaseShardingValues(\"logic_table\").size(),is(1))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertAddDatabaseShardingValueOnlyDatabaseSharding['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertTrue(HintManager.getDatabaseShardingValues(\"logicTable\").contains(1))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "assertAddDatabaseShardingValue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "hintManager.addDatabaseShardingValue(\"logic_table\",2)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(shardingValues.get(1),is(3))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertFalse(HintManager.isDatabaseShardingOnly())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
13->10 [style = bold, label=""];
16->11 [style = bold, label=""];
4->16 [style = dashed, label="0"];
4->6 [style = bold, label=""];
2->1 [style = bold, label=""];
0->6 [style = dashed, label="0"];
12->15 [style = bold, label=""];
0->11 [style = dashed, label="0"];
9->7 [style = bold, label=""];
15->16 [style = bold, label=""];
3->13 [style = dashed, label="0"];
4->0 [style = bold, label=""];
8->1 [style = bold, label=""];
1->12 [style = dashed, label="0"];
14->12 [style = bold, label=""];
11->13 [style = bold, label=""];
5->4 [style = bold, label=""];
6->9 [style = bold, label=""];
5->15 [style = dashed, label="0"];
}
