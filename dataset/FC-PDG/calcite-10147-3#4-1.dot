digraph {
14 [style = filled, label = "!expression.equals(that.expression)@@@13@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "!expressionList.equals(that.expressionList)@@@13@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "return false@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "!super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@106ff1bo@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Object o@@@2@@@['1', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "return false@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "equals['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "type != null? !type.equals(that.type): that.type != null@@@16@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "TypeBinaryExpression that = (TypeBinaryExpression)o@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "equals['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "return true@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "equals['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ConditionalExpression that = (ConditionalExpression)o@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "return true@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Object o@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "return false@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "o == null || getClass() != o.getClass()@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "return false@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "this == o@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6->17 [style = bold, label=""];
14->16 [style = bold, label=""];
16->15 [style = bold, label=""];
4->3 [style = bold, label=""];
3->7 [style = dotted, label="true"];
0->9 [style = bold, label=""];
11->4 [style = solid, label="o"];
15->10 [style = bold, label=""];
4->1 [style = dotted, label="true"];
16->10 [style = bold, label=""];
1->3 [style = bold, label=""];
13->4 [style = solid, label="o"];
11->17 [style = solid, label="o"];
8->6 [style = bold, label=""];
9->10 [style = bold, label=""];
7->8 [style = bold, label=""];
2->4 [style = bold, label=""];
9->16 [style = bold, label=""];
2->11 [style = dotted, label="true"];
8->17 [style = bold, label=""];
0->14 [style = dashed, label="0"];
11->5 [style = solid, label="o"];
18->11 [style = dotted, label="true"];
6->5 [style = bold, label=""];
0->10 [style = bold, label=""];
12->13 [style = dotted, label="true"];
11->13 [style = dashed, label="0"];
8->6 [style = dotted, label="true"];
18->4 [style = bold, label=""];
8->5 [style = bold, label=""];
5->0 [style = bold, label=""];
3->7 [style = bold, label=""];
12->4 [style = bold, label=""];
17->14 [style = bold, label=""];
5->17 [style = dashed, label="0"];
3->8 [style = bold, label=""];
11->3 [style = solid, label="o"];
13->3 [style = solid, label="o"];
14->9 [style = bold, label=""];
4->1 [style = bold, label=""];
14->9 [style = dotted, label="true"];
13->5 [style = solid, label="o"];
0->9 [style = dotted, label="true"];
16->15 [style = dotted, label="true"];
}
