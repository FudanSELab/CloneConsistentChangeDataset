digraph {
15 [style = filled, label = "ss.onChange(hosts.get(3),ApplicationState.STATUS,valueFactory.bootstrapping(keyTokens.get(1)))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().size() == 1)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "TokenMetadata tmd = ss.getTokenMetadata()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "ss.onChange(hosts.get(3),ApplicationState.STATUS,valueFactory.normal(keyTokens.get(2)))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Util.createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,7)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ss.onChange(hosts.get(3),ApplicationState.STATUS,valueFactory.bootstrapping(keyTokens.get(1)))@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(3)))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.left(keyTokens.get(1),Gossiper.computeExpireTime()))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(2)))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testStateJumpToLeft['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(3)).equals(hosts.get(2)))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "ArrayList<Token> endpointTokens = new ArrayList<Token>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.left(endpointTokens.get(2)))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().isEmpty())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "IPartitioner partitioner = new RandomPartitioner()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "StorageService ss = StorageService.instance@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(2)))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)) == null)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "assertTrue(tmd.isMember(hosts.get(2)))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(3)))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(2)))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "tmd.clearUnsafe()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.bootstrapping(keyTokens.get(4)))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "ss.setPartitionerUnsafe(oldPartitioner)@@@41@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(endpointTokens.get(2)))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(3)))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "List<InetAddress> hosts = new ArrayList<InetAddress>()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertTrue(tmd.isMember(hosts.get(2)))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testStateJumpToLeft['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().isEmpty())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "IPartitioner oldPartitioner = ss.setPartitionerUnsafe(partitioner)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(2)))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertTrue(tmd.isMember(hosts.get(3)))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ArrayList<Token> keyTokens = new ArrayList<Token>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(3)))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertTrue(tmd.isLeaving(hosts.get(2)))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(3)))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertTrue(tmd.getToken(hosts.get(3)).equals(keyTokens.get(2)))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "testStateJumpToBootstrap['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.left(endpointTokens.get(2),Gossiper.computeExpireTime()))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.bootstrapping(keyTokens.get(3)))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(keyTokens.get(3)))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->24 [style = dashed, label="0"];
14->3 [style = bold, label=""];
49->45 [style = bold, label=""];
15->10 [style = bold, label=""];
25->47 [style = bold, label=""];
16->18 [style = bold, label=""];
42->50 [style = bold, label=""];
0->19 [style = solid, label="keyTokens"];
5->23 [style = bold, label=""];
46->28 [style = bold, label=""];
17->6 [style = bold, label=""];
14->25 [style = dashed, label="0"];
8->19 [style = bold, label=""];
16->36 [style = solid, label="oldPartitioner"];
43->32 [style = bold, label=""];
38->27 [style = bold, label=""];
31->36 [style = bold, label=""];
9->48 [style = bold, label=""];
13->2 [style = solid, label="partitioner"];
13->16 [style = solid, label="partitioner"];
3->15 [style = bold, label=""];
30->34 [style = bold, label=""];
7->20 [style = bold, label=""];
26->6 [style = bold, label=""];
32->33 [style = bold, label=""];
8->19 [style = solid, label="hosts"];
1->9 [style = bold, label=""];
19->25 [style = bold, label=""];
20->4 [style = bold, label=""];
19->24 [style = bold, label=""];
48->26 [style = bold, label=""];
37->5 [style = bold, label=""];
45->1 [style = bold, label=""];
12->13 [style = bold, label=""];
5->1 [style = bold, label=""];
11->5 [style = bold, label=""];
6->38 [style = bold, label=""];
35->40 [style = bold, label=""];
29->20 [style = bold, label=""];
5->49 [style = bold, label=""];
27->46 [style = bold, label=""];
19->14 [style = bold, label=""];
28->43 [style = bold, label=""];
22->20 [style = bold, label=""];
39->31 [style = bold, label=""];
20->19 [style = solid, label="ss"];
33->42 [style = bold, label=""];
34->39 [style = bold, label=""];
0->8 [style = bold, label=""];
9->21 [style = bold, label=""];
47->41 [style = bold, label=""];
4->12 [style = bold, label=""];
13->19 [style = solid, label="partitioner"];
18->19 [style = solid, label="endpointTokens"];
1->38 [style = dashed, label="0"];
40->30 [style = bold, label=""];
44->37 [style = bold, label=""];
50->35 [style = bold, label=""];
16->6 [style = solid, label="oldPartitioner"];
23->9 [style = bold, label=""];
41->44 [style = bold, label=""];
21->17 [style = bold, label=""];
24->3 [style = bold, label=""];
18->0 [style = bold, label=""];
1->23 [style = dashed, label="0"];
13->2 [style = bold, label=""];
10->11 [style = bold, label=""];
2->16 [style = bold, label=""];
}
