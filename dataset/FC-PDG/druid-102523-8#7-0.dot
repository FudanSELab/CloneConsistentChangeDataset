digraph {
11 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc1))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final ListenableFuture<TaskStatus> future1 = runTask(task1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testRunReplicas['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",desc2))@@@25@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final ListenableFuture<TaskStatus> future2 = runTask(task2)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final KafkaIndexTask task1 = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null,false))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(2,task1.getRunner().getRowIngestionMeters().getProcessed())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future1.get().getStatusCode())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "kafkaProducer.send(record).get()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final KafkaIndexTask task2 = createTask(task1.getId(),new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null,false))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(1,task2.getRunner().getRowIngestionMeters().getProcessed())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future1.get().getStatusCode())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getThrownAway())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(3,task2.getRunner().getRowIngestionMeters().getProcessed())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getUnparseable())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final KafkaIndexTask task2 = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null,false))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getUnparseable())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "task1.stopGracefully(toolboxFactory.build(task1).getConfig())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "testRestore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future2.get().getStatusCode())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(2,countEvents(task1))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getThrownAway())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "task1.stopGracefully()@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "Thread.sleep(25)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "SegmentDescriptor desc2 = SD(task1,\"2011/P1D\",0)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "kafkaProducer.send(record).get()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "unlockAppenderatorBasePersistDirForTask(task1)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(3,task1.getRunner().getRowIngestionMeters().getProcessed())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testRestore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "countEvents(task1) != 2@@@10@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "SegmentDescriptor desc1 = SD(task1,\"2010/P1D\",0)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->15 [style = bold, label=""];
31->14 [style = solid, label="task2"];
15->1 [style = solid, label="desc1"];
23->20 [style = bold, label=""];
18->24 [style = bold, label=""];
31->23 [style = bold, label=""];
1->8 [style = bold, label=""];
32->22 [style = bold, label=""];
12->5 [style = bold, label=""];
21->0 [style = bold, label=""];
22->19 [style = bold, label=""];
0->6 [style = bold, label=""];
19->29 [style = bold, label=""];
7->4 [style = solid, label="task1"];
18->24 [style = dotted, label="true"];
28->7 [style = bold, label=""];
12->32 [style = bold, label=""];
14->17 [style = bold, label=""];
17->30 [style = bold, label=""];
7->31 [style = bold, label=""];
7->15 [style = solid, label="task1"];
24->18 [style = bold, label=""];
7->25 [style = solid, label="task1"];
13->16 [style = bold, label=""];
29->13 [style = bold, label=""];
7->0 [style = solid, label="task1"];
6->2 [style = bold, label=""];
23->14 [style = bold, label=""];
20->18 [style = bold, label=""];
5->32 [style = dashed, label="0"];
26->0 [style = bold, label=""];
17->12 [style = bold, label=""];
30->12 [style = bold, label=""];
9->29 [style = dashed, label="0"];
19->9 [style = bold, label=""];
3->7 [style = bold, label=""];
21->26 [style = dashed, label="0"];
11->10 [style = bold, label=""];
7->23 [style = solid, label="task1"];
15->11 [style = solid, label="desc1"];
7->23 [style = bold, label=""];
2->14 [style = solid, label="task2"];
2->14 [style = bold, label=""];
25->26 [style = bold, label=""];
15->4 [style = bold, label=""];
27->7 [style = bold, label=""];
18->25 [style = bold, label=""];
7->18 [style = solid, label="task1"];
4->11 [style = bold, label=""];
10->1 [style = bold, label=""];
5->22 [style = bold, label=""];
4->8 [style = solid, label="desc2"];
25->21 [style = bold, label=""];
9->13 [style = bold, label=""];
4->11 [style = solid, label="desc2"];
}
