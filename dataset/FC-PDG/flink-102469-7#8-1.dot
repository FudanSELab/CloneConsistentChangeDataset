digraph {
6 [style = filled, label = "testHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\",initialTime),0,0)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0),1,1)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "streamConfig.setStreamOperator(mapOperator)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testHarness.waitForInputProcessing()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "expectedOutput.add(new CheckpointBarrier(1,1))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1),0,1)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "expectedOutput.add(new CancelCheckpointMarker(0))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\",initialTime))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "StreamConfig streamConfig = testHarness.getStreamConfig()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "TestHarnessUtil.assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testHarness.waitForTaskRunning()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final OneInputStreamTaskTestHarness<String,String> testHarness = new OneInputStreamTaskTestHarness<String,String>(mapTask,2,2,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testCheckpointBarriers['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "TestHarnessUtil.assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput())@@@37@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testCheckpointBarriers['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1),0,0)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testHarness.processElement(new StreamRecord<String>(\"Hello-0-0\",initialTime),0,0)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testHarness.endInput()@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testHarness.waitForInputProcessing()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final OneInputStreamTask<String,String> mapTask = new OneInputStreamTask<String,String>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testHarness.processElement(new StreamRecord<String>(\"Hello-1-1\",initialTime),1,1)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Hello-1-1\",initialTime))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0),0,1)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\",initialTime),1,1)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\",initialTime))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1),1,0)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testHarness.waitForInputProcessing()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\",initialTime))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testHarness.invoke()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testOvertakingCheckpointBarriers['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "long initialTime = 0L@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(1,1),1,1)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0),0,0)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "expectedOutput.add(new CheckpointBarrier(0,0))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testHarness.setupOutputForSingletonOperatorChain()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "StreamMap<String,String> mapOperator = new StreamMap<String,String>(new IdentityMap())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testHarness.processEvent(new CheckpointBarrier(0,0),1,0)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testHarness.waitForTaskCompletion()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TestHarnessUtil.assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Hello-0-0\",initialTime))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "expectedOutput.add(new StreamRecord<String>(\"Hello-0-0\",initialTime))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25->8 [style = solid, label="mapOperator"];
3->31 [style = solid, label="expectedOutput"];
1->33 [style = solid, label="initialTime"];
3->1 [style = bold, label=""];
22->16 [style = bold, label=""];
26->5 [style = bold, label=""];
30->20 [style = bold, label=""];
1->7 [style = solid, label="initialTime"];
16->6 [style = bold, label=""];
4->13 [style = bold, label=""];
8->3 [style = bold, label=""];
1->27 [style = bold, label=""];
18->26 [style = bold, label=""];
36->31 [style = bold, label=""];
1->6 [style = solid, label="initialTime"];
28->17 [style = solid, label="mapTask"];
11->4 [style = bold, label=""];
1->16 [style = solid, label="initialTime"];
33->41 [style = bold, label=""];
17->30 [style = bold, label=""];
40->34 [style = bold, label=""];
9->10 [style = bold, label=""];
1->10 [style = solid, label="initialTime"];
20->25 [style = bold, label=""];
31->12 [style = bold, label=""];
32->33 [style = bold, label=""];
11->18 [style = bold, label=""];
24->14 [style = bold, label=""];
38->32 [style = bold, label=""];
29->28 [style = bold, label=""];
1->32 [style = solid, label="initialTime"];
7->9 [style = bold, label=""];
23->28 [style = bold, label=""];
1->0 [style = solid, label="initialTime"];
3->14 [style = solid, label="expectedOutput"];
35->28 [style = bold, label=""];
12->2 [style = bold, label=""];
13->19 [style = bold, label=""];
41->36 [style = bold, label=""];
15->11 [style = bold, label=""];
21->22 [style = bold, label=""];
39->40 [style = bold, label=""];
0->24 [style = bold, label=""];
14->12 [style = bold, label=""];
1->26 [style = solid, label="initialTime"];
10->0 [style = bold, label=""];
2->15 [style = bold, label=""];
5->4 [style = bold, label=""];
1->9 [style = solid, label="initialTime"];
28->17 [style = bold, label=""];
25->8 [style = bold, label=""];
34->38 [style = bold, label=""];
6->7 [style = bold, label=""];
1->5 [style = solid, label="initialTime"];
27->21 [style = bold, label=""];
37->39 [style = bold, label=""];
3->19 [style = solid, label="expectedOutput"];
17->20 [style = bold, label=""];
14->37 [style = bold, label=""];
}
