digraph {
23 [style = filled, label = "testMBeansRegistered['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(\"Could not find 1 producers: \" + s,1,s.size())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(\"Could not find 1 consumers: \" + s,1,s.size())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testMBeansRegistered['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "resolveMandatoryEndpoint(\"mock:end\",)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(1,s.size(),\"Could not find 1 context: \" + s)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(2,s.size(),\"Could not find 1 processors: \" + s)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Set<ObjectName> s = mbsc.queryNames(new ObjectName(domainName + \":type=endpoints,*\"),null)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(\"Could not find 2 endpoints: \" + s,2,s.size())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(2,s.size(),\"Could not find 2 endpoints: \" + s)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertEquals(\"Could not find 1 context: \" + s,1,s.size())@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "s = mbsc.queryNames(new ObjectName(domainName + \":type=context,*\"),null)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "template.sendBody(\"direct:start\",\"Hello World\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertDefaultDomain()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testMBeansRegistered['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertEquals(\"Could not find 1 processors: \" + s,2,s.size())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "s = mbsc.queryNames(new ObjectName(domainName + \":type=consumers,*\"),null)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(1,s.size(),\"Could not find 1 route: \" + s)@@@14@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "s = mbsc.queryNames(new ObjectName(domainName + \":type=processors,*\"),null)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(\"Could not find 1 route: \" + s,1,s.size())@@@20@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "s = mbsc.queryNames(new ObjectName(domainName + \":type=routes,*\"),null)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "isPlatform(\"aix\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "s = mbsc.queryNames(new ObjectName(domainName + \":type=producers,*\"),null)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->6 [style = bold, label=""];
23->2 [style = bold, label=""];
3->10 [style = bold, label=""];
10->21 [style = bold, label=""];
7->8 [style = bold, label=""];
11->12 [style = bold, label=""];
14->3 [style = bold, label=""];
13->4 [style = bold, label=""];
21->17 [style = solid, label="s"];
5->14 [style = dashed, label="0"];
4->1 [style = solid, label="s"];
11->12 [style = solid, label="s"];
4->16 [style = bold, label=""];
2->7 [style = bold, label=""];
11->0 [style = bold, label=""];
21->17 [style = bold, label=""];
20->22 [style = bold, label=""];
9->2 [style = bold, label=""];
4->16 [style = solid, label="s"];
17->20 [style = bold, label=""];
3->10 [style = solid, label="s"];
3->13 [style = bold, label=""];
15->2 [style = bold, label=""];
4->1 [style = bold, label=""];
2->8 [style = bold, label=""];
8->18 [style = bold, label=""];
8->11 [style = bold, label=""];
11->0 [style = solid, label="s"];
6->14 [style = bold, label=""];
20->22 [style = solid, label="s"];
19->11 [style = bold, label=""];
18->19 [style = bold, label=""];
10->4 [style = bold, label=""];
22->4 [style = bold, label=""];
6->5 [style = bold, label=""];
1->16 [style = dashed, label="0"];
6->5 [style = solid, label="s"];
3->13 [style = solid, label="s"];
5->3 [style = bold, label=""];
10->13 [style = dashed, label="0"];
6->14 [style = solid, label="s"];
2->7 [style = dotted, label="true"];
12->6 [style = bold, label=""];
0->12 [style = dashed, label="0"];
}
