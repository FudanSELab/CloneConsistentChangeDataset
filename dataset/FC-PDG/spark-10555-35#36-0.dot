digraph {
10 [style = filled, label = "memoryManager = new TestMemoryManager(new SparkConf().set(package$.MODULE$.MEMORY_OFFHEAP_ENABLED(),useOffHeapMemoryAllocator()).set(package$.MODULE$.MEMORY_OFFHEAP_SIZE(),256 * 1024 * 1024L).set(package$.MODULE$.SHUFFLE_SPILL_COMPRESS(),false).set(package$.MODULE$.SHUFFLE_COMPRESS(),false))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "when(taskContext.taskMetrics()).thenReturn(new TaskMetrics())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "setup['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "when(diskBlockManager.createTempLocalBlock()).thenAnswer(null)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "when(blockManager.diskBlockManager()).thenReturn(diskBlockManager)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "MockitoAnnotations.initMocks(this)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "tempDir = Utils.createTempDir(System.getProperty(\"java.io.tmpdir\"),\"unsafe-test\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "memoryManager = new TestMemoryManager(new SparkConf().set(\"spark.memory.offHeap.enabled\",\"\" + useOffHeapMemoryAllocator()).set(\"spark.memory.offHeap.size\",\"256mb\").set(package$.MODULE$.SHUFFLE_SPILL_COMPRESS(),false).set(package$.MODULE$.SHUFFLE_COMPRESS(),false))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "when(blockManager.getDiskWriter(any(),any(),any(),anyInt(),any())).thenAnswer(null)@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "spillFilesCreated.clear()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "setup['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "taskMemoryManager = new TaskMemoryManager(memoryManager,0)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "MockitoAnnotations.initMocks(this)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "taskContext = mock()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "when(blockManager.diskBlockManager()).thenReturn(diskBlockManager)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "setUp['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6->14 [style = bold, label=""];
10->0 [style = solid, label="memoryManager"];
3->0 [style = solid, label="memoryManager"];
5->7 [style = bold, label=""];
4->3 [style = bold, label=""];
6->5 [style = bold, label=""];
10->0 [style = bold, label=""];
15->2 [style = bold, label=""];
3->10 [style = dashed, label="0"];
7->1 [style = bold, label=""];
1->8 [style = bold, label=""];
11->15 [style = bold, label=""];
9->10 [style = bold, label=""];
14->13 [style = bold, label=""];
2->6 [style = bold, label=""];
13->1 [style = bold, label=""];
3->0 [style = bold, label=""];
0->2 [style = bold, label=""];
12->11 [style = bold, label=""];
}
