digraph {
9 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertFalse(buffer.isFull())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "Assert.assertTrue(buffer.isEmpty())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "testCircularBufferReset['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(0,buffer.size())@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertNull(buffer.peek())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "buffer.reset()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(2,buffer.size())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "buffer.write(\"B\")@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertFalse(buffer.isFull())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "testCircularBufferWithCapacity1['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertTrue(buffer.isFull())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "final int capacity = 3@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "buffer.write(\"A\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testCircularBufferWithCapacity1['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "CircularBuffer<String> buffer = new CircularBuffer<>(,capacity)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(1,buffer.size())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertFalse(buffer.isEmpty())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertTrue(buffer.isEmpty())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "buffer.write(\"B\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertTrue(buffer.isFull())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertFalse(buffer.isEmpty())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertEquals(\"B\",buffer.take())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(\"A\",buffer.peek())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertTrue(buffer.isEmpty())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertTrue(buffer.isEmpty())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(buffer.isFull())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "Assert.assertEquals(\"A\",buffer.peek())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertTrue(buffer.isEmpty())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "final int capacity = 1@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->9 [style = bold, label=""];
16->18 [style = bold, label=""];
7->1 [style = bold, label=""];
22->15 [style = bold, label=""];
6->35 [style = bold, label=""];
12->20 [style = dashed, label="0"];
10->21 [style = dashed, label="0"];
1->26 [style = dashed, label="0"];
25->30 [style = bold, label=""];
1->13 [style = solid, label="capacity"];
31->5 [style = bold, label=""];
2->27 [style = dashed, label="0"];
28->26 [style = bold, label=""];
9->22 [style = dashed, label="0"];
8->6 [style = bold, label=""];
6->17 [style = dashed, label="0"];
15->16 [style = bold, label=""];
5->36 [style = dashed, label="0"];
1->13 [style = bold, label=""];
19->8 [style = bold, label=""];
26->13 [style = bold, label=""];
4->0 [style = bold, label=""];
35->24 [style = bold, label=""];
3->19 [style = dashed, label="0"];
32->29 [style = bold, label=""];
8->17 [style = bold, label=""];
6->4 [style = bold, label=""];
5->2 [style = bold, label=""];
29->33 [style = bold, label=""];
13->12 [style = bold, label=""];
27->34 [style = bold, label=""];
36->27 [style = bold, label=""];
14->0 [style = bold, label=""];
24->31 [style = bold, label=""];
33->25 [style = bold, label=""];
17->14 [style = bold, label=""];
11->10 [style = bold, label=""];
11->18 [style = dashed, label="0"];
3->8 [style = bold, label=""];
0->22 [style = bold, label=""];
2->16 [style = dashed, label="0"];
2->36 [style = bold, label=""];
26->13 [style = solid, label="capacity"];
9->5 [style = bold, label=""];
23->1 [style = bold, label=""];
34->32 [style = bold, label=""];
4->14 [style = dashed, label="0"];
12->3 [style = bold, label=""];
18->21 [style = bold, label=""];
20->19 [style = bold, label=""];
5->15 [style = dashed, label="0"];
2->11 [style = bold, label=""];
4->35 [style = dashed, label="0"];
13->20 [style = bold, label=""];
}
