digraph {
21 [style = filled, label = "Double longResult = (Double)getStatResult(\"sosr\",\"long_ld\",VAL_TYPE.DOUBLE)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "expressions.put(\"multi\",new ETP(\"sum(long_lm)\",120.0))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "Double floatResult = (Double)getStatResult(\"sosr\",\"float_fd\",VAL_TYPE.DOUBLE)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Double intResult = (Double)getStatResult(\"sr\",\"int_id\",VAL_TYPE.DOUBLE)@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Double doubleResult = (Double)getStatResult(\"sosr\",\"double_dd\",VAL_TYPE.DOUBLE)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "sumTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Double longTest = (Double)calculateNumberStat(longTestStart,\"sum\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertEquals(getRawResponse(),doubleResult,doubleTest)@@@14@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Double floatResult = (Double)getStatResult(\"sr\",\"float_fd\",VAL_TYPE.DOUBLE)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "sumOfSquaresTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Double longResult = (Double)getStatResult(\"sr\",\"long_ld\",VAL_TYPE.DOUBLE)@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Double intResult = (Double)getStatResult(\"sosr\",\"int_id\",VAL_TYPE.DOUBLE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Double doubleTest = (Double)calculateNumberStat(doubleTestStart,\"sum\")@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Double doubleResult = (Double)getStatResult(\"sr\",\"double_dd\",VAL_TYPE.DOUBLE)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "sumTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Double floatTest = (Double)calculateNumberStat(floatTestStart,\"sumOfSquares\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Double floatTest = (Double)calculateNumberStat(floatTestStart,\"sum\")@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Double intTest = (Double)calculateNumberStat(intTestStart,\"sum\")@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Double intTest = (Double)calculateNumberStat(intTestStart,\"sumOfSquares\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(getRawResponse(),intResult,intTest)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(getRawResponse(),longResult,longTest)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Double doubleTest = (Double)calculateNumberStat(doubleTestStart,\"sumOfSquares\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testExpressions(expressions)@@@6@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertEquals(getRawResponse(),floatResult,floatTest)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "expressions.put(\"single\",new ETP(\"sum(int_i)\",57.0))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "Map<String,ETP> expressions = new HashMap<>()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "Double longTest = (Double)calculateNumberStat(longTestStart,\"sumOfSquares\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->9 [style = bold, label=""];
7->1 [style = bold, label=""];
9->0 [style = bold, label=""];
15->14 [style = bold, label=""];
3->9 [style = solid, label="floatResult"];
0->6 [style = bold, label=""];
5->26 [style = dashed, label="0"];
6->20 [style = dashed, label="0"];
12->8 [style = solid, label="longResult"];
8->3 [style = bold, label=""];
5->1 [style = solid, label="intResult"];
21->8 [style = solid, label="longResult"];
3->22 [style = dashed, label="0"];
16->17 [style = bold, label=""];
21->25 [style = bold, label=""];
26->19 [style = bold, label=""];
3->4 [style = bold, label=""];
22->23 [style = bold, label=""];
13->16 [style = bold, label=""];
18->10 [style = solid, label="doubleResult"];
12->21 [style = dashed, label="0"];
22->9 [style = solid, label="floatResult"];
8->22 [style = bold, label=""];
20->10 [style = bold, label=""];
24->26 [style = bold, label=""];
11->5 [style = bold, label=""];
12->2 [style = bold, label=""];
19->1 [style = bold, label=""];
18->20 [style = bold, label=""];
23->9 [style = solid, label="floatTest"];
9->18 [style = bold, label=""];
19->1 [style = solid, label="intTest"];
7->19 [style = dashed, label="0"];
1->21 [style = bold, label=""];
0->10 [style = solid, label="doubleResult"];
6->10 [style = bold, label=""];
16->14 [style = solid, label="expressions"];
17->15 [style = bold, label=""];
1->12 [style = bold, label=""];
2->25 [style = dashed, label="0"];
0->18 [style = dashed, label="0"];
5->7 [style = bold, label=""];
25->8 [style = bold, label=""];
2->8 [style = solid, label="longTest"];
25->8 [style = solid, label="longTest"];
4->9 [style = solid, label="floatTest"];
7->1 [style = solid, label="intTest"];
23->9 [style = bold, label=""];
4->23 [style = dashed, label="0"];
20->10 [style = solid, label="doubleTest"];
6->10 [style = solid, label="doubleTest"];
2->8 [style = bold, label=""];
26->1 [style = solid, label="intResult"];
}
