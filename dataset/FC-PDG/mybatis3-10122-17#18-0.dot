digraph {
3 [style = filled, label = "assertThat(config.getProxyFactory(),is(instanceOf()))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "assertThat(config.isLazyLoadingEnabled()).isFalse()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "assertThat(config.isMapUnderscoreToCamelCase()).isFalse()@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
62 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler(),is(instanceOf()))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "assertThat(config.getAutoMappingUnknownColumnBehavior()).isEqualTo(AutoMappingUnknownColumnBehavior.NONE)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
78 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler(),is(instanceOf()))@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertThat(config.getJdbcTypeForNull()).isEqualTo(JdbcType.OTHER)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
98 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper(),is(true))@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "assertThat(config.getReflectorFactory(),is(instanceOf()))@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "inputStream.close()@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertThat(config.isUseColumnLabel(),is(true))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
100 [style = filled, label = "shouldSuccessfullyLoadXMLConfigFile['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "assertThat(config.isCacheEnabled()).isTrue()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertNull(config.getLogPrefix())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "assertThat(objectFactory.getProperties().getProperty(\"objectFactoryProperty\"),is(\"100\"))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "Properties props = new Properties()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "assertThat(environment.getTransactionFactory(),is(instanceOf()))@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(config.getAutoMappingUnknownColumnBehavior(),is(AutoMappingUnknownColumnBehavior.NONE))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
96 [style = filled, label = "assertTrue(config.getTypeAliasRegistry().getTypeAliases().get(\"cart\").equals())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertNull(config.getLogImpl())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "assertThat(config.getProxyFactory(),is(instanceOf()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(config.isUseGeneratedKeys(),is(false))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
102 [style = filled, label = "assertThat(config.isMultipleResultSetsEnabled(),is(false))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
92 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler(),is(instanceOf()))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(config.getLazyLoadTriggerMethods(),is((Set<String>)new HashSet<String>(Arrays.asList(\"equals\",\"clone\",\"hashCode\",\"toString\"))))@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertThat(config.isCallSettersOnNulls(),is(false))@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
75 [style = filled, label = "assertThat(config.isAggressiveLazyLoading(),is(true))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "assertThat(config.getDatabaseId(),is(\"derby\"))@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "XMLConfigBuilder builder = new XMLConfigBuilder(inputStream,null,props)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(config.isAggressiveLazyLoading(),is(false))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "assertThat(config.isUseGeneratedKeys()).isFalse()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertThat(config.getDefaultScriptingLanguageInstance(),is(instanceOf()))@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "assertThat(config.isMultipleResultSetsEnabled()).isTrue()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertThat(config.getLocalCacheScope(),is(LocalCacheScope.SESSION))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
87 [style = filled, label = "assertThat(config.isCacheEnabled(),is(false))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "assertThat(config.getJdbcTypeForNull(),is(JdbcType.NULL))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler()).isInstanceOf()@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertThat(config.isLazyLoadingEnabled(),is(false))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "assertNotNull(config)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
91 [style = filled, label = "assertTrue(config.getTypeAliasRegistry().getTypeAliases().get(\"blogauthor\").equals())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "assertThat(config.isMapUnderscoreToCamelCase(),is(true))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler(),is(instanceOf()))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
85 [style = filled, label = "ExamplePlugin plugin = (ExamplePlugin)config.getInterceptors().get(0)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
89 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler(,JdbcType.VARCHAR),is(instanceOf()))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
86 [style = filled, label = "assertThat(config.getLogPrefix(),is(\"mybatis_\"))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertThat(config.getAutoMappingBehavior()).isEqualTo(AutoMappingBehavior.PARTIAL)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
76 [style = filled, label = "assertThat(config.getDefaultExecutorType(),is(ExecutorType.BATCH))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "assertThat(config.getVfsImpl().getName(),is(.getName()))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "String resource = \"org/apache/ibatis/builder/MinimalMapperConfig.xml\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "assertThat(config.getMapperRegistry().getMappers().size(),is(4))@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertNull(config.getDefaultStatementTimeout())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper(),is(true))@@@58@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper(),is(true))@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
103 [style = filled, label = "props.put(\"prop2\",\"cccc\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertThat(config.getDefaultScriptingLanuageInstance()).isInstanceOf()@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
83 [style = filled, label = "assertThat(config.getDefaultFetchSize(),is(100))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "InputStream inputStream = Resources.getResourceAsStream(resource)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
94 [style = filled, label = "assertThat(environment.getDataSource(),is(instanceOf()))@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(config.isMapUnderscoreToCamelCase(),is(false))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
56 [style = filled, label = "assertThat(config.isSafeRowBoundsEnabled(),is(true))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(config.getJdbcTypeForNull(),is(JdbcType.OTHER))@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
71 [style = filled, label = "assertThat(config.getLazyLoadTriggerMethods(),is((Set<String>)new HashSet<String>(Arrays.asList(\"equals\",\"clone\",\"hashCode\",\"toString\",\"xxx\"))))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
93 [style = filled, label = "assertThat(environment.getId(),is(\"development\"))@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "assertTrue(config.getTypeAliasRegistry().getTypeAliases().get(\"blog\").equals())@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "assertThat(plugin.getProperties().size(),is(1))@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "assertThat(config.isAggressiveLazyLoading()).isFalse()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertThat(config.isSafeRowBoundsEnabled(),is(false))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "assertThat(config.getProxyFactory()).isInstanceOf()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
81 [style = filled, label = "assertThat(config.getLocalCacheScope(),is(LocalCacheScope.STATEMENT))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertNull(config.getConfigurationFactory())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Configuration config = builder.parse()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "XMLConfigBuilder builder = new XMLConfigBuilder(inputStream)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertThat(config.getMapperRegistry().hasMapper(),is(true))@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertThat(config.isCallSettersOnNulls()).isFalse()@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "assertThat(config.getLocalCacheScope()).isEqualTo(LocalCacheScope.SESSION)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertThat(config.isCacheEnabled(),is(true))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertThat(config.isMultipleResultSetsEnabled(),is(true))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertNull(config.getDefaultFetchSize())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
101 [style = filled, label = "assertThat(config.getObjectWrapperFactory(),is(instanceOf()))@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "assertThat(config.isLazyLoadingEnabled(),is(true))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "assertThat(config.getConfigurationFactory().getName(),is(.getName()))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "shouldSuccessfullyLoadMinimalXMLConfigFile['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
67 [style = filled, label = "ExampleObjectFactory objectFactory = (ExampleObjectFactory)config.getObjectFactory()@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertThat(config.isSafeResultHandlerEnabled()).isTrue()@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "assertThat(config.isSafeResultHandlerEnabled(),is(false))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Configuration config = builder.parse()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
95 [style = filled, label = "assertThat(config.getDefaultStatementTimeout(),is(10))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "shouldSuccessfullyLoadMinimalXMLConfigFile['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertThat(config.getDefaultScriptingLanguageInstance(),is(instanceOf()))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "assertThat(plugin.getProperties().getProperty(\"pluginProperty\"),is(\"100\"))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(config.getDefaultExecutorType(),is(ExecutorType.SIMPLE))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "assertThat(config.isUseColumnLabel()).isTrue()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertThat(config.getTypeHandlerRegistry().getTypeHandler(),is(instanceOf()))@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
99 [style = filled, label = "assertThat(config.getLogImpl().getName(),is(.getName()))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertThat(config.getLazyLoadTriggerMethods()).isEqualTo((Set<String>)new HashSet<String>(Arrays.asList(\"equals\",\"clone\",\"hashCode\",\"toString\")))@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
90 [style = filled, label = "assertThat(config.isCallSettersOnNulls(),is(true))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertThat(config.getDefaultExecutorType()).isEqualTo(ExecutorType.SIMPLE)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
79 [style = filled, label = "assertThat(config.isUseGeneratedKeys(),is(true))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
84 [style = filled, label = "assertThat(config.getAutoMappingUnknownColumnBehavior(),is(AutoMappingUnknownColumnBehavior.WARNING))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
88 [style = filled, label = "String resource = \"org/apache/ibatis/builder/CustomizedSettingsMapperConfig.xml\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "assertThat(objectFactory.getProperties().size(),is(1))@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
104 [style = filled, label = "assertThat(config.getAutoMappingBehavior(),is(AutoMappingBehavior.NONE))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "assertThat(config.isSafeRowBoundsEnabled()).isFalse()@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
97 [style = filled, label = "Environment environment = config.getEnvironment()@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(config.isSafeResultHandlerEnabled(),is(true))@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
105 [style = filled, label = "assertThat(config.isUseColumnLabel(),is(false))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->3 [style = bold, label=""];
7->26 [style = solid, label="config"];
59->97 [style = bold, label=""];
19->83 [style = dashed, label="0"];
2->6 [style = bold, label=""];
1->105 [style = dashed, label="0"];
90->86 [style = bold, label=""];
69->89 [style = bold, label=""];
17->9 [style = bold, label=""];
80->96 [style = bold, label=""];
25->48 [style = dashed, label="0"];
8->35 [style = dashed, label="0"];
105->79 [style = bold, label=""];
98->65 [style = bold, label=""];
26->40 [style = bold, label=""];
57->59 [style = bold, label=""];
79->76 [style = bold, label=""];
17->76 [style = dashed, label="0"];
7->26 [style = bold, label=""];
15->45 [style = dashed, label="0"];
8->0 [style = bold, label=""];
87->74 [style = bold, label=""];
8->54 [style = dashed, label="0"];
71->58 [style = bold, label=""];
81->66 [style = bold, label=""];
93->94 [style = bold, label=""];
11->39 [style = dashed, label="0"];
94->72 [style = bold, label=""];
0->34 [style = dashed, label="0"];
16->14 [style = bold, label=""];
4->8 [style = bold, label=""];
23->36 [style = bold, label=""];
100->88 [style = bold, label=""];
62->92 [style = bold, label=""];
20->15 [style = bold, label=""];
27->104 [style = bold, label=""];
73->60 [style = bold, label=""];
45->41 [style = bold, label=""];
5->10 [style = bold, label=""];
40->50 [style = bold, label=""];
55->82 [style = bold, label=""];
12->60 [style = dashed, label="0"];
77->75 [style = bold, label=""];
102->105 [style = bold, label=""];
49->38 [style = bold, label=""];
6->88 [style = dashed, label="0"];
27->16 [style = bold, label=""];
10->7 [style = bold, label=""];
58->54 [style = bold, label=""];
86->99 [style = bold, label=""];
39->22 [style = bold, label=""];
21->71 [style = dashed, label="0"];
26->27 [style = bold, label=""];
75->102 [style = bold, label=""];
89->78 [style = bold, label=""];
76->95 [style = bold, label=""];
66->71 [style = bold, label=""];
18->25 [style = bold, label=""];
74->77 [style = bold, label=""];
5->52 [style = bold, label=""];
61->27 [style = bold, label=""];
5->61 [style = solid, label="inputStream"];
35->34 [style = bold, label=""];
53->85 [style = bold, label=""];
27->40 [style = dashed, label="0"];
101->53 [style = bold, label=""];
21->4 [style = bold, label=""];
46->43 [style = bold, label=""];
96->62 [style = bold, label=""];
29->17 [style = bold, label=""];
42->37 [style = bold, label=""];
47->42 [style = bold, label=""];
88->5 [style = solid, label="resource"];
31->32 [style = bold, label=""];
29->79 [style = dashed, label="0"];
0->11 [style = bold, label=""];
22->28 [style = bold, label=""];
12->24 [style = bold, label=""];
28->12 [style = bold, label=""];
83->70 [style = bold, label=""];
14->46 [style = dashed, label="0"];
32->33 [style = bold, label=""];
21->42 [style = dashed, label="0"];
12->49 [style = bold, label=""];
13->66 [style = dashed, label="0"];
27->84 [style = dashed, label="0"];
6->5 [style = bold, label=""];
11->86 [style = dashed, label="0"];
97->93 [style = bold, label=""];
54->90 [style = bold, label=""];
67->63 [style = bold, label=""];
18->36 [style = dashed, label="0"];
56->81 [style = bold, label=""];
34->39 [style = bold, label=""];
20->30 [style = dashed, label="0"];
11->22 [style = bold, label=""];
9->19 [style = bold, label=""];
51->98 [style = bold, label=""];
41->31 [style = bold, label=""];
85->57 [style = bold, label=""];
37->35 [style = bold, label=""];
33->19 [style = bold, label=""];
1->29 [style = bold, label=""];
70->56 [style = bold, label=""];
4->37 [style = dashed, label="0"];
99->73 [style = bold, label=""];
14->74 [style = dashed, label="0"];
23->18 [style = bold, label=""];
25->81 [style = dashed, label="0"];
3->77 [style = dashed, label="0"];
24->49 [style = dashed, label="0"];
15->1 [style = bold, label=""];
82->51 [style = bold, label=""];
28->73 [style = dashed, label="0"];
92->69 [style = bold, label=""];
44->6 [style = bold, label=""];
18->56 [style = dashed, label="0"];
25->13 [style = bold, label=""];
63->64 [style = bold, label=""];
88->5 [style = bold, label=""];
50->46 [style = bold, label=""];
9->95 [style = dashed, label="0"];
17->32 [style = dashed, label="0"];
6->5 [style = solid, label="resource"];
95->83 [style = bold, label=""];
20->75 [style = dashed, label="0"];
60->91 [style = bold, label=""];
1->41 [style = dashed, label="0"];
29->31 [style = dashed, label="0"];
104->84 [style = bold, label=""];
43->30 [style = bold, label=""];
64->101 [style = bold, label=""];
9->33 [style = dashed, label="0"];
26->104 [style = dashed, label="0"];
22->99 [style = dashed, label="0"];
3->20 [style = bold, label=""];
52->61 [style = solid, label="props"];
5->10 [style = solid, label="inputStream"];
84->87 [style = bold, label=""];
103->61 [style = bold, label=""];
48->47 [style = bold, label=""];
19->23 [style = bold, label=""];
3->43 [style = dashed, label="0"];
91->80 [style = bold, label=""];
78->67 [style = bold, label=""];
36->48 [style = bold, label=""];
68->55 [style = bold, label=""];
52->103 [style = bold, label=""];
16->50 [style = dashed, label="0"];
13->47 [style = dashed, label="0"];
13->21 [style = bold, label=""];
72->68 [style = bold, label=""];
30->45 [style = bold, label=""];
15->102 [style = dashed, label="0"];
}
