digraph {
16 [style = filled, label = "Map<String,Object> expectedMetrics = ImmutableMap.of(RowIngestionMeters.BUILD_SEGMENTS,ImmutableMap.of(RowIngestionMeters.PROCESSED,3,RowIngestionMeters.PROCESSED_WITH_ERROR,0,RowIngestionMeters.UNPARSEABLE,3,RowIngestionMeters.THROWN_AWAY,0))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "IngestionStatsAndErrorsTaskReportData reportData = getTaskReportData()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "IngestionStatsAndErrorsTaskReportData reportData = getTaskReportData()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(expectedMetrics,reportData.getRowStats())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(null,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"2\"),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"9\")),true,null,null,\"awsEndpoint\",null,null,null,null,false))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(expectedMetrics,reportData.getRowStats())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "replayAll()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"2\"),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"9\")),true,null,null,\"awsEndpoint\",null,null,null,null,false))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "maxSavedParseExceptions = 2@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testMultipleParseExceptionsFailure['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "IndexTaskTest.checkTaskStatusErrorMsgForParseExceptionsExceeded(status)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "reportParseExceptions = false@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "recordSupplier.assign(anyObject())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testMultipleParseExceptionsFailure['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getProcessedWithError())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(unparseableEvents,reportData.getUnparseableEvents())@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testMultipleParseExceptionsFailure['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertEquals(TaskState.FAILED,status.getStatusCode())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Map<String,Object> expectedMetrics = ImmutableMap.of(RowIngestionMeters.BUILD_SEGMENTS,ImmutableMap.of(RowIngestionMeters.PROCESSED,3,RowIngestionMeters.PROCESSED_WITH_ERROR,0,RowIngestionMeters.UNPARSEABLE,3,RowIngestionMeters.THROWN_AWAY,0))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "expectLastCall().anyTimes()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "maxParseExceptions = 2@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "TaskStatus status = future.get()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(),publishedDescriptors())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertNull(metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Map<String,Object> unparseableEvents = ImmutableMap.of(RowIngestionMeters.BUILD_SEGMENTS,Arrays.asList(\"Unable to parse row (unparseable2(\",\"Unable to parse row (unparseable(\"))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "insertData()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "expectLastCall().anyTimes()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "verifyAll()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "expect(recordSupplier.poll(anyLong())).andReturn(records.subList(2,13)).once()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,2L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "expect(recordSupplier.getEarliestSequenceNumber(anyObject())).andReturn(\"0\").anyTimes()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getProcessed())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertNull(metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Map<String,Object> unparseableEvents = ImmutableMap.of(RowIngestionMeters.BUILD_SEGMENTS,Arrays.asList(\"Unable to parse row (unparseable2(\",\"Unable to parse row (unparseable(\"))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "recordSupplier.seek(anyObject(),anyString())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(unparseableEvents,reportData.getUnparseableEvents())@@@22@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24->10 [style = bold, label=""];
32->35 [style = bold, label=""];
27->7 [style = solid, label="unparseableEvents"];
23->20 [style = bold, label=""];
2->26 [style = bold, label=""];
12->23 [style = solid, label="expectedMetrics"];
21->0 [style = bold, label=""];
16->8 [style = bold, label=""];
35->33 [style = solid, label="task"];
20->9 [style = bold, label=""];
11->1 [style = bold, label=""];
36->31 [style = bold, label=""];
26->28 [style = dashed, label="0"];
35->33 [style = bold, label=""];
18->17 [style = bold, label=""];
6->24 [style = bold, label=""];
15->6 [style = bold, label=""];
10->32 [style = bold, label=""];
26->19 [style = bold, label=""];
30->6 [style = bold, label=""];
26->19 [style = solid, label="task"];
1->22 [style = bold, label=""];
29->6 [style = bold, label=""];
0->14 [style = bold, label=""];
22->18 [style = bold, label=""];
28->19 [style = solid, label="task"];
16->8 [style = solid, label="expectedMetrics"];
17->2 [style = bold, label=""];
21->13 [style = bold, label=""];
10->25 [style = bold, label=""];
37->34 [style = solid, label="status"];
25->11 [style = bold, label=""];
37->38 [style = bold, label=""];
14->12 [style = bold, label=""];
5->4 [style = bold, label=""];
27->7 [style = bold, label=""];
34->36 [style = bold, label=""];
20->9 [style = solid, label="unparseableEvents"];
28->19 [style = bold, label=""];
38->34 [style = bold, label=""];
3->0 [style = solid, label="status"];
9->5 [style = bold, label=""];
3->21 [style = bold, label=""];
12->23 [style = bold, label=""];
33->37 [style = bold, label=""];
8->27 [style = bold, label=""];
19->3 [style = bold, label=""];
2->28 [style = bold, label=""];
31->19 [style = bold, label=""];
4->16 [style = bold, label=""];
13->0 [style = bold, label=""];
}
