digraph {
27 [style = filled, label = "Assert.assertTrue(_clusterVerifier.verifyByPolling())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW),0)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW),0)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS),3)@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "testSelectiveUpdates['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "accessor.clearReadCounters()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES),2)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "testSelectiveUpdates['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "cache.notifyDataChange(HelixConstants.ChangeType.LIVE_INSTANCE)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "cache.notifyDataChange(HelixConstants.ChangeType.IDEAL_STATE)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "cache.refresh(accessor)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES),1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES),NODE_NR)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "_gSetupTool.rebalanceStorageCluster(CLUSTER_NAME,\"TestDB_1\",_replica)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "_gSetupTool.addResourceToCluster(CLUSTER_NAME,\"TestDB_1\",_PARTITIONS,STATE_MODEL)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "cache.refresh(accessor)@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS),0)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES),0)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS),1)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES),0)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES),1)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "cache.notifyDataChange(HelixConstants.ChangeType.RESOURCE_CONFIG)@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES),0)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES),NODE_NR)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS),1)@@@33@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ResourceControllerDataProvider cache = new ResourceControllerDataProvider(\"CLUSTER_\" + TestHelper.getTestClassName())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES),0)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "accessor.clearReadCounters()@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES),0)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES),NODE_NR)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Thread.sleep(100)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS),NODE_NR + 1)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "cache.refresh(accessor)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES),0)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "testUpdateOnNotification['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "cache.refresh(accessor)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "cache.refresh(accessor)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "_gSetupTool.addResourceToCluster(CLUSTER_NAME,\"TestDB_2\",_PARTITIONS,STATE_MODEL)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "MockZkHelixDataAccessor accessor = new MockZkHelixDataAccessor(CLUSTER_NAME,new ZkBaseDataAccessor<ZNRecord>(_gZkClient))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES),0)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "cache.notifyDataChange(HelixConstants.ChangeType.IDEAL_STATE)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Thread.sleep(100)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES),0)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS),1)@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "TaskDriver driver = new TaskDriver(_manager)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "driver.start(workflow.build())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW),0)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "_gSetupTool.rebalanceStorageCluster(CLUSTER_NAME,\"TestDB_3\",_replica)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES),0)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "_gSetupTool.addResourceToCluster(CLUSTER_NAME,\"TestDB_3\",_PARTITIONS,STATE_MODEL)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW),1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "_gSetupTool.rebalanceStorageCluster(CLUSTER_NAME,\"TestDB_2\",_replica)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS),2)@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "accessor.clearReadCounters()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "accessor.clearReadCounters()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Workflow.Builder workflow = WorkflowGenerator.generateSingleJobWorkflowBuilder(\"Job\",new JobConfig.Builder().setCommand(\"ReIndex\").setTargetResource(\"TestDB_2\"))@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW),0)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->35 [style = bold, label=""];
8->33 [style = bold, label=""];
34->29 [style = bold, label=""];
21->10 [style = bold, label=""];
47->53 [style = bold, label=""];
37->46 [style = dashed, label="0"];
36->9 [style = bold, label=""];
15->34 [style = bold, label=""];
37->26 [style = bold, label=""];
21->44 [style = dashed, label="0"];
25->36 [style = bold, label=""];
11->4 [style = bold, label=""];
24->32 [style = bold, label=""];
41->37 [style = bold, label=""];
4->13 [style = bold, label=""];
44->10 [style = bold, label=""];
40->30 [style = solid, label="accessor"];
48->50 [style = bold, label=""];
17->30 [style = bold, label=""];
21->24 [style = bold, label=""];
7->31 [style = bold, label=""];
40->25 [style = solid, label="accessor"];
3->16 [style = bold, label=""];
14->45 [style = bold, label=""];
5->28 [style = bold, label=""];
30->18 [style = bold, label=""];
1->45 [style = dashed, label="0"];
26->11 [style = bold, label=""];
42->0 [style = bold, label=""];
28->14 [style = bold, label=""];
14->1 [style = bold, label=""];
39->22 [style = bold, label=""];
19->44 [style = bold, label=""];
56->51 [style = bold, label=""];
6->20 [style = bold, label=""];
43->40 [style = bold, label=""];
53->49 [style = bold, label=""];
35->23 [style = bold, label=""];
4->56 [style = bold, label=""];
54->25 [style = bold, label=""];
51->48 [style = bold, label=""];
10->39 [style = bold, label=""];
22->27 [style = bold, label=""];
40->41 [style = solid, label="accessor"];
18->6 [style = bold, label=""];
52->40 [style = bold, label=""];
12->25 [style = bold, label=""];
40->17 [style = bold, label=""];
40->14 [style = solid, label="accessor"];
11->47 [style = bold, label=""];
29->7 [style = bold, label=""];
9->3 [style = bold, label=""];
16->42 [style = bold, label=""];
27->24 [style = bold, label=""];
32->41 [style = bold, label=""];
23->12 [style = bold, label=""];
41->46 [style = bold, label=""];
55->11 [style = bold, label=""];
49->4 [style = bold, label=""];
33->19 [style = bold, label=""];
40->7 [style = solid, label="accessor"];
40->56 [style = solid, label="accessor"];
36->51 [style = dashed, label="0"];
38->40 [style = bold, label=""];
50->54 [style = bold, label=""];
20->15 [style = bold, label=""];
31->8 [style = bold, label=""];
0->5 [style = bold, label=""];
13->2 [style = bold, label=""];
46->55 [style = bold, label=""];
19->21 [style = bold, label=""];
}
