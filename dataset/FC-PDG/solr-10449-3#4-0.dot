digraph {
16 [style = filled, label = "rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "NodePreferenceRulesComparator comparator = new NodePreferenceRulesComparator(rules,null)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(\"node1\",replicas.get(0).getNodeName())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "List<Replica> replicas = getBasicReplicaList()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "comparator = new NodePreferenceRulesComparator(rules,null)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "replicaTypeTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(\"node2\",getHost(replicas.get(0).getNodeName()))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "replicaLocationTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "replicas.sort(comparator)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(\"node1\",replicas.get(1).getNodeName())@@@13@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"node2\",replicas.get(1).getNodeName())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(\"node2\",replicas.get(0).getNodeName())@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "List<PreferenceRule> rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2:8983\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "List<PreferenceRule> rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://node2:8983\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "List<PreferenceRule> rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "replicas.sort(comparator)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "replicaLocationTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"node1\",getHost(replicas.get(1).getNodeName()))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16->12 [style = solid, label="rules"];
14->3 [style = bold, label=""];
5->6 [style = solid, label="rules"];
15->6 [style = solid, label="rules"];
12->13 [style = solid, label="comparator"];
6->0 [style = solid, label="comparator"];
0->2 [style = bold, label=""];
1->3 [style = bold, label=""];
0->11 [style = bold, label=""];
10->3 [style = bold, label=""];
5->9 [style = dashed, label="0"];
15->6 [style = bold, label=""];
6->0 [style = bold, label=""];
3->15 [style = bold, label=""];
2->4 [style = bold, label=""];
2->8 [style = dashed, label="0"];
8->7 [style = bold, label=""];
9->6 [style = bold, label=""];
3->9 [style = bold, label=""];
12->13 [style = bold, label=""];
3->5 [style = bold, label=""];
5->6 [style = bold, label=""];
4->7 [style = dashed, label="0"];
0->8 [style = bold, label=""];
11->17 [style = bold, label=""];
9->6 [style = solid, label="rules"];
5->15 [style = dashed, label="0"];
16->12 [style = bold, label=""];
17->16 [style = bold, label=""];
13->2 [style = bold, label=""];
}
