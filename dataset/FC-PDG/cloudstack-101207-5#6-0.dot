digraph {
8 [style = filled, label = "Assert.assertTrue(domainManager.deleteDomain(20l,false))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "deleteDomain['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Mockito.doNothing().when(_accountMgr).checkAccess(Mockito.any(),Mockito.any())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Mockito.when(_networkDomainDao.listNetworkIdsByDomain(Mockito.anyLong())).thenReturn(new ArrayList<Long>())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertTrue(domainManager.deleteDomain(20l,true))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Mockito.when(_domainDao.search(Mockito.any(),(Filter)org.mockito.Matchers.isNull())).thenReturn(new ArrayList<DomainVO>())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Mockito.when(_offeringsDao.findByDomainId(Mockito.anyLong())).thenReturn(Collections.emptyList())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Mockito.when(_domainDao.update(Mockito.eq(20l),Mockito.any())).thenReturn(true)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Mockito.lenient().when(_accountDao.search(Mockito.any(),(Filter)org.mockito.Matchers.isNull())).thenReturn(new ArrayList<AccountVO>())@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "{CallContext.unregister()}@@@28@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Mockito.when(_dedicatedDao.listByDomainId(Mockito.anyLong())).thenReturn(new ArrayList<DedicatedResourceVO>())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Mockito.when(_resourceCountDao.removeEntriesByOwner(Mockito.anyLong(),Mockito.eq(ResourceOwnerType.Domain))).thenReturn(1l)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Mockito.when(_accountDao.createSearchCriteria()).thenReturn(Mockito.mock())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Mockito.when(_domainDao.createSearchCriteria()).thenReturn(Mockito.mock())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Mockito.when(_resourceLimitDao.removeEntriesByOwner(Mockito.anyLong(),Mockito.eq(ResourceOwnerType.Domain))).thenReturn(1l)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "deleteDomainCleanup['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Mockito.when(_accountDao.search(Mockito.any(),(Filter)org.mockito.Matchers.isNull())).thenReturn(new ArrayList<AccountVO>())@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Mockito.when(_diskOfferingDao.findByDomainId(Mockito.anyLong())).thenReturn(Collections.emptyList())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Mockito.when(_configMgr.releaseDomainSpecificVirtualRanges(Mockito.anyLong())).thenReturn(true)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "DomainVO domain = new DomainVO()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Mockito.when(_domainDao.findById(20l)).thenReturn(domain)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "domain.setAccountId(30l)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Account account = new AccountVO(\"testaccount\",1L,\"networkdomain\",(short)0,\"uuid\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "deleteDomain['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Mockito.when(_domainDao.remove(Mockito.anyLong())).thenReturn(true)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "domain.setId(20l)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "CallContext.register(user,account)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Mockito.when(_accountDao.findCleanupsForRemovedAccounts(Mockito.anyLong())).thenReturn(new ArrayList<AccountVO>())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "UserVO user = new UserVO(1,\"testuser\",\"password\",\"firstname\",\"lastName\",\"email\",\"timezone\",UUID.randomUUID().toString(),User.Source.UNKNOWN)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->23 [style = bold, label=""];
3->24 [style = bold, label=""];
2->4 [style = bold, label=""];
14->3 [style = bold, label=""];
26->13 [style = bold, label=""];
24->18 [style = bold, label=""];
6->9 [style = solid, label="user"];
7->10 [style = bold, label=""];
25->26 [style = bold, label=""];
27->0 [style = bold, label=""];
8->24 [style = dashed, label="0"];
19->0 [style = bold, label=""];
16->22 [style = bold, label=""];
16->13 [style = bold, label=""];
15->6 [style = bold, label=""];
20->1 [style = bold, label=""];
11->7 [style = bold, label=""];
6->9 [style = bold, label=""];
8->18 [style = bold, label=""];
12->5 [style = bold, label=""];
22->25 [style = bold, label=""];
1->17 [style = bold, label=""];
3->8 [style = bold, label=""];
17->11 [style = bold, label=""];
13->1 [style = bold, label=""];
16->20 [style = bold, label=""];
13->20 [style = dashed, label="0"];
28->10 [style = bold, label=""];
23->28 [style = bold, label=""];
0->2 [style = bold, label=""];
4->15 [style = bold, label=""];
21->0 [style = bold, label=""];
5->16 [style = bold, label=""];
10->14 [style = bold, label=""];
15->9 [style = solid, label="account"];
9->12 [style = bold, label=""];
0->12 [style = solid, label="domain"];
}
