digraph {
22 [style = filled, label = "assertEquals(2,message.getRepeatedNestedEnumList().size())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(1901,unknown.getField(singularField.getNumber()).getVarintList().get(0).longValue())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(unknown.getField(repeatedField.getNumber()).getVarintList().get(1).longValue()).isEqualTo(1903)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "TestAllExtensions message = TestAllExtensions.parseFrom(payload,registry)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testExtensionUnknownEnumValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(TestAllTypes.NestedEnum.BAR,message.getOptionalNestedEnum())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(TestAllTypes.NestedEnum.BAZ,message.getRepeatedNestedEnum(1))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(TestAllTypes.NestedEnum.BAR,message.getExtension(UnittestProto.optionalNestedEnumExtension))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertThat(message.getExtension(UnittestProto.repeatedNestedEnumExtension,0)).isEqualTo(TestAllTypes.NestedEnum.FOO)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "UnittestProto.registerAllExtensions(registry)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(1903,unknown.getField(repeatedField.getNumber()).getVarintList().get(1).longValue())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertEquals(1902,unknown.getField(repeatedField.getNumber()).getVarintList().get(0).longValue())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testUnknownEnumValues['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(message.getExtension(UnittestProto.optionalNestedEnumExtension)).isEqualTo(TestAllTypes.NestedEnum.BAR)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(TestAllTypes.NestedEnum.BAZ,message.getExtension(UnittestProto.repeatedNestedEnumExtension,1))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertThat(message.getExtension(UnittestProto.repeatedNestedEnumExtension,1)).isEqualTo(TestAllTypes.NestedEnum.BAZ)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "UnknownFieldSet unknown = message.getUnknownFields()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(unknown.getField(repeatedField.getNumber()).getVarintList().get(0).longValue()).isEqualTo(1902)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertEquals(2,message.getExtension(UnittestProto.repeatedNestedEnumExtension).size())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertEquals(TestAllTypes.NestedEnum.FOO,message.getExtension(UnittestProto.repeatedNestedEnumExtension,0))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertThat(unknown.getField(singularField.getNumber()).getVarintList().get(0).longValue()).isEqualTo(1901)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertThat(message.getExtension(UnittestProto.repeatedNestedEnumExtension).size()).isEqualTo(2)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertEquals(TestAllTypes.NestedEnum.FOO,message.getRepeatedNestedEnum(0))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(1903,unknown.getField(repeatedField.getNumber()).getVarintList().get(1).longValue())@@@11@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ExtensionRegistry registry = ExtensionRegistry.newInstance()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testExtensionUnknownEnumValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertEquals(1902,unknown.getField(repeatedField.getNumber()).getVarintList().get(0).longValue())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "TestAllTypes message = TestAllTypes.parseFrom(payload)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->18 [style = dashed, label="0"];
3->5 [style = solid, label="registry"];
19->18 [style = bold, label=""];
7->11 [style = bold, label=""];
8->16 [style = dashed, label="0"];
2->19 [style = dashed, label="0"];
26->25 [style = bold, label=""];
12->11 [style = bold, label=""];
1->3 [style = bold, label=""];
3->6 [style = solid, label="registry"];
0->15 [style = dashed, label="0"];
6->0 [style = bold, label=""];
10->13 [style = dashed, label="0"];
9->7 [style = bold, label=""];
15->16 [style = bold, label=""];
2->4 [style = bold, label=""];
6->15 [style = bold, label=""];
25->27 [style = bold, label=""];
24->26 [style = bold, label=""];
3->5 [style = bold, label=""];
13->19 [style = bold, label=""];
23->22 [style = bold, label=""];
21->20 [style = bold, label=""];
9->14 [style = dashed, label="0"];
5->6 [style = bold, label=""];
20->23 [style = bold, label=""];
27->11 [style = bold, label=""];
11->10 [style = bold, label=""];
14->12 [style = bold, label=""];
11->13 [style = bold, label=""];
0->8 [style = bold, label=""];
8->9 [style = bold, label=""];
17->3 [style = bold, label=""];
7->12 [style = dashed, label="0"];
0->24 [style = dashed, label="0"];
16->14 [style = bold, label=""];
10->2 [style = bold, label=""];
22->24 [style = bold, label=""];
}
