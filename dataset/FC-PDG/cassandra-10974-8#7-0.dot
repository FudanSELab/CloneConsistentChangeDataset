digraph {
4 [style = filled, label = "final PartitionColumns columns@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final IndexTransaction.Type transactionType@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "!isPrimaryKeyIndex() && !columns.contains(indexedColumn)@@@3@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final PartitionColumns columns@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "indexerFor['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final int nowInSec@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "indexerFor['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "indexerFor['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final int nowInSec@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final DecoratedKey key@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final IndexTransaction.Type transactionType@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "return new Indexer(){public void begin(){}public void partitionDelete(DeletionTime deletionTime){}public void rangeTombstone(RangeTombstone tombstone){}public void insertRow(Row row){if (isPrimaryKeyIndex()) {indexPrimaryKey(row.clustering(),getPrimaryKeyIndexLiveness(row),row.deletion())}{if (indexedColumn.isComplex()) indexCells(row.clustering(),row.getComplexColumnData(indexedColumn))indexCell(row.clustering(),row.getCell(indexedColumn))}}public void removeRow(Row row){if (isPrimaryKeyIndex()) indexPrimaryKey(row.clustering(),row.primaryKeyLivenessInfo(),row.deletion())if (indexedColumn.isComplex()) removeCells(row.clustering(),row.getComplexColumnData(indexedColumn))removeCell(row.clustering(),row.getCell(indexedColumn))}public void updateRow(Row oldRow,Row newRow){if (isPrimaryKeyIndex()) indexPrimaryKey(newRow.clustering(),newRow.primaryKeyLivenessInfo(),newRow.deletion())if (indexedColumn.isComplex()) {indexCells(newRow.clustering(),newRow.getComplexColumnData(indexedColumn))removeCells(oldRow.clustering(),oldRow.getComplexColumnData(indexedColumn))}{indexCell(newRow.clustering(),newRow.getCell(indexedColumn))removeCell(oldRow.clustering(),oldRow.getCell(indexedColumn))}}public void finish(){}private void indexCells(Clustering clustering,Iterable<Cell> cells){if (cells == null) returnfor (Cell cell : cells)indexCell(clustering,cell)}private void indexCell(Clustering clustering,Cell cell){if (cell == null || !cell.isLive(nowInSec)) returninsert(key.getKey(),clustering,cell,LivenessInfo.create(cell.timestamp(),cell.ttl(),cell.localDeletionTime()),opGroup)}private void removeCells(Clustering clustering,Iterable<Cell> cells){if (cells == null) returnfor (Cell cell : cells)removeCell(clustering,cell)}private void removeCell(Clustering clustering,Cell cell){if (cell == null || !cell.isLive(nowInSec)) returndelete(key.getKey(),clustering,cell,opGroup,nowInSec)}private void indexPrimaryKey(final Clustering clustering,final LivenessInfo liveness,final Row.Deletion deletion){if (liveness.timestamp() != LivenessInfo.NO_TIMESTAMP) insert(key.getKey(),clustering,null,liveness,opGroup)if (!deletion.isLive()) delete(key.getKey(),clustering,deletion.time(),opGroup)}private LivenessInfo getPrimaryKeyIndexLiveness(Row row){long timestamp = row.primaryKeyLivenessInfo().timestamp()int ttl = row.primaryKeyLivenessInfo().ttl()for (Cell cell : row.cells()){long cellTimestamp = cell.timestamp()if (cell.isLive(nowInSec)) {if (cellTimestamp > timestamp) {timestamp = cellTimestampttl = cell.ttl()}}}return LivenessInfo.create(baseCfs.metadata,timestamp,ttl,nowInSec)}}@@@4@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final OpOrder.Group opGroup@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "final int nowInSec@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "!isPrimaryKeyIndex() && !columns.contains(indexedColumn)@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final DecoratedKey key@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final OpOrder.Group opGroup@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final DecoratedKey key@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "final IndexTransaction.Type transactionType@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "return null@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->13 [style = dotted, label="true"];
2->3 [style = dotted, label="true"];
1->8 [style = dotted, label="true"];
2->4 [style = dotted, label="true"];
10->12 [style = dotted, label="true"];
6->7 [style = solid, label="opGroup"];
17->7 [style = solid, label="opGroup"];
1->8 [style = bold, label=""];
2->5 [style = dotted, label="true"];
16->8 [style = bold, label=""];
2->6 [style = dotted, label="true"];
19->14 [style = dotted, label="true"];
5->7 [style = solid, label="nowInSec"];
19->16 [style = bold, label=""];
15->7 [style = solid, label="nowInSec"];
2->1 [style = bold, label=""];
19->15 [style = dotted, label="true"];
10->6 [style = dotted, label="true"];
8->7 [style = bold, label=""];
16->7 [style = bold, label=""];
16->8 [style = dotted, label="true"];
19->17 [style = dotted, label="true"];
2->0 [style = dotted, label="true"];
1->7 [style = bold, label=""];
10->11 [style = dotted, label="true"];
19->6 [style = dotted, label="true"];
10->9 [style = dotted, label="true"];
19->18 [style = dotted, label="true"];
}
