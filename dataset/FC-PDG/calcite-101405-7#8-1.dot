digraph {
3 [style = filled, label = "assertThat(SqlFunctions.gtAny(2,1.0D),is(true))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(SqlFunctions.geAny(\"banana\",\"apple\"),is(true))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(SqlFunctions.geAny(new BigDecimal(2L),1),is(true))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "fail(\"'ge' on non-numeric different type is not possible\")@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertThat(SqlFunctions.geAny(2L,1.0D),is(true))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(SqlFunctions.geAny(new BigDecimal(1L),1L),is(true))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(SqlFunctions.gtAny(2,1L),is(true))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testGtWithAny['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(SqlFunctions.geAny(1,1.0D),is(true))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertThat(SqlFunctions.geAny(new BigDecimal(1L),1),is(true))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertThat(SqlFunctions.geAny(new BigDecimal(1L),1.0D),is(true))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(SqlFunctions.geAny(new BigDecimal(1L),new BigDecimal(1.0D)),is(true))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "fail(\"'gt' on non-numeric different type is not possible\")@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(SqlFunctions.geAny(new BigDecimal(2L),1L),is(true))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(SqlFunctions.gtAny(new BigDecimal(2L),1.0D),is(true))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(SqlFunctions.gtAny(\"2\",1L),is(false))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(SqlFunctions.geAny(2,1.0D),is(true))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(SqlFunctions.gtAny(new BigDecimal(2L),1L),is(true))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(SqlFunctions.geAny(1L,1.0D),is(true))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(SqlFunctions.geAny(new BigDecimal(2L),1.0D),is(true))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertThat(SqlFunctions.geAny(\"2\",2L),is(false))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(SqlFunctions.geAny(1,1L),is(true))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(SqlFunctions.geAny(\"apple\",\"apple\"),is(true))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(SqlFunctions.gtAny(new BigDecimal(2L),1),is(true))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(SqlFunctions.gtAny(\"banana\",\"apple\"),is(true))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testGtWithAny['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertThat(SqlFunctions.gtAny(new BigDecimal(2L),new BigDecimal(1.0D)),is(true))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(SqlFunctions.geAny(2,1L),is(true))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertThat(SqlFunctions.geAny(new BigDecimal(2L),new BigDecimal(1.0D)),is(true))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(SqlFunctions.gtAny(2L,1.0D),is(true))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testGeWithAny['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22->26 [style = bold, label=""];
5->10 [style = bold, label=""];
4->3 [style = bold, label=""];
30->17 [style = bold, label=""];
23->27 [style = bold, label=""];
28->30 [style = bold, label=""];
2->6 [style = bold, label=""];
9->4 [style = bold, label=""];
26->25 [style = bold, label=""];
0->16 [style = dashed, label="0"];
25->18 [style = bold, label=""];
14->28 [style = bold, label=""];
1->18 [style = dashed, label="0"];
12->24 [style = bold, label=""];
16->22 [style = bold, label=""];
11->9 [style = bold, label=""];
15->16 [style = bold, label=""];
3->0 [style = bold, label=""];
7->9 [style = bold, label=""];
8->1 [style = bold, label=""];
18->20 [style = bold, label=""];
10->26 [style = dashed, label="0"];
13->12 [style = bold, label=""];
20->23 [style = bold, label=""];
10->8 [style = bold, label=""];
29->19 [style = bold, label=""];
2->29 [style = dashed, label="0"];
6->19 [style = dashed, label="0"];
3->15 [style = dashed, label="0"];
8->25 [style = dashed, label="0"];
1->2 [style = bold, label=""];
9->12 [style = dashed, label="0"];
4->24 [style = dashed, label="0"];
17->29 [style = bold, label=""];
27->21 [style = bold, label=""];
0->5 [style = bold, label=""];
21->14 [style = bold, label=""];
24->15 [style = bold, label=""];
5->22 [style = dashed, label="0"];
}
