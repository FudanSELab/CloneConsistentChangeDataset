digraph {
11 [style = filled, label = "files.put(scannedFile,scannedFile)@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertTrue(\"Result did not contain D.class\",files.containsKey(\"D.class\"))@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(\"Result did not contain A.class\",files,hasKey(\"A.class\"))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "FileUtilities.rollbackTimestamps(new File(buildRule.getProject().getProperty(\"classes.dir\")),5)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "buildRule.executeTarget(\"testmethodparam\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Hashtable<String,String> files = new Hashtable<>()@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "buildRule.executeTarget(\"src1setup\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testMethodParam['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "buildRule.executeTarget(\"compile\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "buildRule.executeTarget(\"testdirect\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "FileUtilities.rollbackTimestamps(new File(buildRule.getProject().getProperty(\"tempsrc.dir\")),5)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertTrue(\"Result did not contain A.class\",files.containsKey(\"A.class\"))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "assertTrue(\"Result did not contain A.class\",files.containsKey(\"A.class\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "DirectoryScanner scanner = resultFileSet.getDirectoryScanner(p)@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(\"Result did not contain E.class\",files,hasKey(\"E.class\"))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Hashtable<String,String> files = getFiles()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertThat(\"Result did not contain B.class\",files,hasKey(\"B.class\"))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertEquals(\"Classfileset did not pick up expected number of \" + \"class files\",5,files.size())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "FileSet resultFileSet = p.getReference(RESULT_FILESET)@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(\"Result did not contain C.class\",files,hasKey(\"C.class\"))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertTrue(\"Result did not contain C.class\",files.containsKey(\"C.class\"))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"Classfileset did not pick up expected number of class files\",5,files.size())@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "assertEquals(\"Depend did not leave correct number of files\",3,files.size())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertTrue(\"Result did not contain B.class\",files.containsKey(\"B.class\"))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Project p = buildRule.getProject()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertTrue(\"Result did not contain E.class\",files.containsKey(\"E.class\"))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertThat(\"Result did not contain D.class\",files,hasKey(\"D.class\"))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "testDirect['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertTrue(\"Result did not contain D.class\",files.containsKey(\"D.class\"))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "testMethodParam['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Hashtable<String,String> files = getResultFiles()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13->20 [style = solid, label="files"];
7->1 [style = bold, label=""];
5->9 [style = bold, label=""];
13->16 [style = solid, label="files"];
27->28 [style = bold, label=""];
4->13 [style = bold, label=""];
3->11 [style = bold, label=""];
23->26 [style = bold, label=""];
18->17 [style = bold, label=""];
13->18 [style = solid, label="files"];
4->22 [style = dashed, label="0"];
0->12 [style = solid, label="p"];
13->19 [style = solid, label="files"];
13->17 [style = solid, label="files"];
17->19 [style = bold, label=""];
11->2 [style = bold, label=""];
22->30 [style = bold, label=""];
30->29 [style = bold, label=""];
9->6 [style = bold, label=""];
19->16 [style = bold, label=""];
26->27 [style = bold, label=""];
0->4 [style = bold, label=""];
21->22 [style = bold, label=""];
0->21 [style = dashed, label="0"];
10->0 [style = bold, label=""];
15->4 [style = bold, label=""];
4->8 [style = bold, label=""];
14->18 [style = bold, label=""];
12->3 [style = bold, label=""];
6->7 [style = bold, label=""];
29->24 [style = bold, label=""];
16->20 [style = bold, label=""];
13->14 [style = bold, label=""];
8->12 [style = bold, label=""];
25->21 [style = bold, label=""];
2->5 [style = bold, label=""];
24->23 [style = bold, label=""];
}
