digraph {
5 [style = filled, label = "Filter originalFilter = new AndFilter(ImmutableList.of(new SelectorFilter(\"channel\",null),new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\",null)))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Filter originalFilter = new AndFilter(ImmutableList.of(new SelectorFilter(\"channel\",null),new SelectorFilter(FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\",null)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(factSegment.asStorageAdapter(),joinableClauses,joinFilterPreAnalysis)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "JoinTestHelper.verifyCursors(adapter.makeCursors(originalFilter,Intervals.ETERNITY,VirtualColumns.EMPTY,Granularities.ALL,false,null),ImmutableList.of(\"page\",\"countryIsoCode\",FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"k\",FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\"),ImmutableList.of())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(expectedFilterSplit,actualFilterSplit)@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(null,new AndFilter(ImmutableList.of(new SelectorFilter(\"channel\",null),new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\",null))),ImmutableSet.of())@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryNameUsingIsoCodeLookup(JoinType.FULL))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "test_filterPushDown_factToCountryFullWithFilterOnNullsUsingLookup['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryNameUsingIsoCodeLookup(JoinType.INNER))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(null,new AndFilter(ImmutableList.of(new SelectorFilter(\"channel\",null),new SelectorFilter(FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\",null))),ImmutableSet.of())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "JoinFilterPreAnalysisGroup joinFilterPreAnalysisGroup = makeDefaultConfigPreAnalysisGroup(originalFilter,joinableClauses,VirtualColumns.EMPTY)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "test_filterPushDown_factToCountryInnerUsingCountryNumberFilterOnNullsUsingLookup['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "JoinTestHelper.verifyCursors(adapter.makeCursors(originalFilter,Intervals.ETERNITY,VirtualColumns.EMPTY,Granularities.ALL,false,null),ImmutableList.of(\"page\",\"countryIsoCode\",\"countryNumber\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"k\",FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\"),ImmutableList.of())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "test_filterPushDown_factToCountryFullWithFilterOnNullsUsingLookup['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "JoinFilterPreAnalysis joinFilterPreAnalysis = joinFilterPreAnalysisGroup.getPreAnalysisForSingleLevelMode()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(expectedFilterSplit,actualFilterSplit)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "JoinFilterPreAnalysis joinFilterPreAnalysis = simplePreAnalysis(joinableClauses,originalFilter)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(factSegment.asStorageAdapter(),joinableClauses,joinFilterPreAnalysisGroup)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4->9 [style = bold, label=""];
5->10 [style = bold, label=""];
1->4 [style = solid, label="joinFilterPreAnalysis"];
3->1 [style = solid, label="joinableClauses"];
9->0 [style = bold, label=""];
17->1 [style = bold, label=""];
0->6 [style = bold, label=""];
17->18 [style = solid, label="originalFilter"];
5->6 [style = solid, label="originalFilter"];
4->6 [style = solid, label="expectedFilterSplit"];
8->3 [style = bold, label=""];
3->10 [style = solid, label="joinableClauses"];
0->6 [style = solid, label="actualFilterSplit"];
14->2 [style = solid, label="joinableClauses"];
14->17 [style = bold, label=""];
1->10 [style = dashed, label="0"];
7->4 [style = bold, label=""];
10->11 [style = solid, label="joinFilterPreAnalysisGroup"];
15->0 [style = solid, label="expectedFilterSplit"];
3->2 [style = solid, label="joinableClauses"];
4->0 [style = bold, label=""];
6->18 [style = dashed, label="0"];
5->1 [style = bold, label=""];
1->2 [style = solid, label="joinFilterPreAnalysis"];
3->5 [style = bold, label=""];
10->11 [style = bold, label=""];
5->17 [style = dashed, label="0"];
5->13 [style = solid, label="originalFilter"];
14->1 [style = solid, label="joinableClauses"];
3->11 [style = solid, label="joinableClauses"];
17->1 [style = solid, label="originalFilter"];
11->13 [style = bold, label=""];
2->15 [style = bold, label=""];
15->4 [style = bold, label=""];
5->1 [style = solid, label="originalFilter"];
7->15 [style = dashed, label="0"];
16->14 [style = bold, label=""];
0->18 [style = bold, label=""];
2->11 [style = dashed, label="0"];
1->2 [style = bold, label=""];
12->3 [style = bold, label=""];
2->7 [style = bold, label=""];
3->14 [style = dashed, label="0"];
5->10 [style = solid, label="originalFilter"];
9->0 [style = solid, label="joinFilterPreAnalysis"];
4->0 [style = solid, label="actualFilterSplit"];
7->0 [style = solid, label="expectedFilterSplit"];
13->4 [style = bold, label=""];
}
