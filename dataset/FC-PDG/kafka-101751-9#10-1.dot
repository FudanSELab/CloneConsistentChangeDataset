digraph {
3 [style = filled, label = "driver.pipeInput(recordFactory.create(INPUT_TOPIC,\"A\",\"ignored\"))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "driver.pipeInput(recordFactory.create(INPUT_TOPIC,\"A\",\"a\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final KeyValueStore<String,Integer> keyValueStore = driver.getKeyValueStore(QUERYABLE_NAME)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "driver.pipeInput(recordFactory.create(INPUT_TOPIC,\"A\",\"ignored\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "driver.pipeInput(recordFactory.create(INPUT_TOPIC,\"A\",\"ignore\"))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertThat(output(),hasItems(\"A:1 (ts: 0)\",\"A:0 (ts: 0)\",\"A:2 (ts: 0)\",\"A:0 (ts: 0)\",\"A:3 (ts: 0)\"))@@@8@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "builder.table(INPUT_TOPIC,CONSUMED).transformValues(new StatefulTransformerSupplier(),Materialized.as(QUERYABLE_NAME).withKeySerde(Serdes.String()).withValueSerde(Serdes.Integer())).groupBy(toForceSendingOfOldValues(),Grouped.with(Serdes.String(),Serdes.Integer())).reduce(MockReducer.INTEGER_ADDER,MockReducer.INTEGER_SUBTRACTOR).mapValues(mapBackToStrings()).toStream().process(capture)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "driver.pipeInput(recordFactory.create(INPUT_TOPIC,\"A\",\"ignored\",15L))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "builder.table(INPUT_TOPIC,CONSUMED).transformValues(new StatelessTransformerSupplier()).groupBy(toForceSendingOfOldValues(),Grouped.with(Serdes.String(),Serdes.Integer())).reduce(MockReducer.INTEGER_ADDER,MockReducer.INTEGER_SUBTRACTOR).mapValues(mapBackToStrings()).toStream().process(capture)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "driver.pipeInput(recordFactory.create(INPUT_TOPIC,\"A\",\"aa\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "driver.pipeInput(recordFactory.create(INPUT_TOPIC,\"A\",\"ignored\",5L))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "driver.pipeInput(recordFactory.create(INPUT_TOPIC,\"A\",\"aaa\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(keyValueStore.get(\"A\"),is(3))@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "driver.pipeInput(recordFactory.create(INPUT_TOPIC,\"A\",\"ignored\",10L))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertThat(output(),hasItems(\"A:1 (ts: 5)\",\"A:0 (ts: 15)\",\"A:2 (ts: 15)\",\"A:0 (ts: 15)\",\"A:3 (ts: 15)\"))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "driver = new TopologyTestDriver(builder.build(),props())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->9 [style = bold, label=""];
5->12 [style = dashed, label="0"];
9->11 [style = bold, label=""];
17->6 [style = bold, label=""];
2->3 [style = bold, label=""];
0->2 [style = bold, label=""];
3->16 [style = dashed, label="0"];
11->12 [style = bold, label=""];
16->17 [style = bold, label=""];
8->14 [style = dashed, label="0"];
7->8 [style = bold, label=""];
15->16 [style = bold, label=""];
0->15 [style = bold, label=""];
2->15 [style = dashed, label="0"];
8->0 [style = bold, label=""];
12->13 [style = bold, label=""];
6->4 [style = bold, label=""];
3->5 [style = bold, label=""];
6->13 [style = dashed, label="0"];
5->6 [style = bold, label=""];
10->8 [style = bold, label=""];
14->0 [style = bold, label=""];
5->17 [style = dashed, label="0"];
2->9 [style = dashed, label="0"];
4->1 [style = bold, label=""];
18->14 [style = bold, label=""];
3->11 [style = dashed, label="0"];
13->4 [style = bold, label=""];
}
