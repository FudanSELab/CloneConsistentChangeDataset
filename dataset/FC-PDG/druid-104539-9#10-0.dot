digraph {
13 [style = filled, label = "final Pair<TaskStatus,List<DataSegment>> resultPair = runTask(compactionTask)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "runIndexTask()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(TEST_ROWS,rowsFromSegment)@@@23@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final CompactionTask compactionTask = builder.interval(Intervals.of(\"2014-01-01/2014-01-02\")).build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testRunWithDynamicPartitioning['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "int i = 0@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(new NumberedOverwriteShardSpec(32768,0,2,(short)1,(short)1),segments.get(i).getShardSpec())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(new NumberedShardSpec(0,1),segments.get(i).getShardSpec())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(getDefaultCompactionState(Granularities.HOUR,Granularities.MINUTE,ImmutableList.of()),segments.get(i).getLastCompactionState())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "List<String> rowsFromSegment = getCSVFormatRowsFromSegments(segments)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(new NumberedShardSpec(0,1),segments.get(i).getShardSpec())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(new NumberedOverwriteShardSpec(32768,0,2,(short)1,(short)1),segments.get(i).getShardSpec())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final Builder builder = new Builder(DATA_SOURCE,segmentLoaderFactory,RETRY_POLICY_FACTORY)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testRunWithDynamicPartitioning['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final List<DataSegment> segments = resultPair.rhs@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertTrue(resultPair.lhs.isSuccess())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(3,segments.size())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "IndexTask indexTask = new IndexTask(null,null,new IndexTask.IndexIngestionSpec(new DataSchema(\"test\",getObjectMapper().convertValue(new StringInputRowParser(DEFAULT_PARSE_SPEC,null),),new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a12610,new UniformGranularitySpec(Granularities.HOUR,Granularities.MINUTE,null),null,getObjectMapper()),new IndexTask.IndexIOConfig(new IngestSegmentFirehoseFactory(DATA_SOURCE,Intervals.of(\"2014-01-01/2014-01-02\"),null,null,null,null,null,getIndexIO(),coordinatorClient,segmentLoaderFactory,RETRY_POLICY_FACTORY),false),IndexTaskTest.createTuningConfig(5000000,null,null,Long.MAX_VALUE,null,false,true)),null)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(getDefaultCompactionState(Granularities.HOUR,Granularities.MINUTE,ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1))),segments.get(i).getLastCompactionState())@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "i++@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertTrue(resultPair.lhs.isSuccess())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "indexTask.addToContext(Tasks.STORE_COMPACTION_STATE_KEY,true)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final List<DataSegment> segments = resultPair.rhs@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "lockGranularity == LockGranularity.SEGMENT@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final Pair<TaskStatus,List<DataSegment>> resultPair = runTask(indexTask)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\",i,i + 1),segments.get(i).getInterval())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "i < 3@@@13@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testRunRegularIndexTaskWithIngestSegmentFirehose['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25->23 [style = bold, label=""];
26->24 [style = solid, label="indexTask"];
16->22 [style = dotted, label="true"];
17->22 [style = dashed, label="0"];
4->6 [style = bold, label=""];
5->17 [style = dotted, label="true"];
26->21 [style = bold, label=""];
9->17 [style = solid, label="i"];
15->13 [style = solid, label="compactionTask"];
17->16 [style = solid, label="i"];
5->16 [style = dotted, label="true"];
13->4 [style = bold, label=""];
8->5 [style = bold, label=""];
18->2 [style = bold, label=""];
2->3 [style = dotted, label="true"];
5->18 [style = dotted, label="true"];
9->16 [style = solid, label="i"];
16->2 [style = dotted, label="true"];
8->16 [style = solid, label="i"];
2->10 [style = dotted, label="false"];
5->9 [style = dotted, label="true"];
10->9 [style = bold, label=""];
16->18 [style = bold, label=""];
25->20 [style = bold, label=""];
5->1 [style = bold, label=""];
11->0 [style = bold, label=""];
11->26 [style = bold, label=""];
9->16 [style = bold, label=""];
2->10 [style = bold, label=""];
1->7 [style = solid, label="rowsFromSegment"];
9->18 [style = solid, label="i"];
21->24 [style = bold, label=""];
5->9 [style = bold, label=""];
27->11 [style = bold, label=""];
8->9 [style = solid, label="i"];
25->20 [style = dotted, label="false"];
2->3 [style = bold, label=""];
16->2 [style = bold, label=""];
0->15 [style = bold, label=""];
6->14 [style = bold, label=""];
19->11 [style = bold, label=""];
22->25 [style = bold, label=""];
3->9 [style = bold, label=""];
2->22 [style = bold, label=""];
14->8 [style = bold, label=""];
15->13 [style = bold, label=""];
9->2 [style = solid, label="i"];
17->2 [style = solid, label="i"];
20->17 [style = bold, label=""];
6->1 [style = solid, label="segments"];
16->25 [style = dotted, label="true"];
12->11 [style = bold, label=""];
17->18 [style = dashed, label="0"];
16->17 [style = bold, label=""];
1->7 [style = bold, label=""];
8->17 [style = solid, label="i"];
24->14 [style = bold, label=""];
9->5 [style = solid, label="i"];
23->17 [style = bold, label=""];
8->18 [style = solid, label="i"];
17->16 [style = bold, label=""];
9->5 [style = bold, label=""];
16->17 [style = dotted, label="true"];
25->23 [style = dotted, label="true"];
5->16 [style = bold, label=""];
5->2 [style = dotted, label="true"];
8->5 [style = solid, label="i"];
17->2 [style = bold, label=""];
}
