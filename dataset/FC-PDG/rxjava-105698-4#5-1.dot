digraph {
6 [style = filled, label = "Flowable.just(1).map(new Function<Integer,Integer>(){@Override public Integer apply(Integer t1){c.incrementAndGet()throw e}}).retry(retry5).subscribe(ts)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "issue2826['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TestSubscriberEx<Integer> ts = new TestSubscriberEx<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "final RuntimeException e = new RuntimeException(\"You shall not pass\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(Collections.singletonList(e),to.errors())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Observable.just(1).map(new Function<Integer,Integer>(){@Override public Integer apply(Integer t1){c.incrementAndGet()throw e}}).retry(retry5).subscribe(to)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "issue2826['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "ts.assertTerminated()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "issue2826['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(6,c.get())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "final AtomicInteger c = new AtomicInteger()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "TestObserverEx<Integer> to = new TestObserverEx<Integer>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(Collections.singletonList(e),ts.errors())@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "to.assertTerminated()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10->13 [style = solid, label="to"];
0->4 [style = solid, label="e"];
1->14 [style = dashed, label="0"];
7->8 [style = dashed, label="0"];
7->0 [style = bold, label=""];
0->11 [style = solid, label="e"];
9->8 [style = bold, label=""];
2->4 [style = bold, label=""];
8->0 [style = bold, label=""];
6->1 [style = bold, label=""];
12->10 [style = bold, label=""];
6->13 [style = dashed, label="0"];
5->6 [style = bold, label=""];
3->7 [style = bold, label=""];
5->13 [style = bold, label=""];
10->0 [style = bold, label=""];
8->6 [style = solid, label="ts"];
7->10 [style = dashed, label="0"];
1->2 [style = bold, label=""];
14->2 [style = bold, label=""];
7->6 [style = solid, label="ts"];
4->11 [style = dashed, label="0"];
13->14 [style = bold, label=""];
2->11 [style = bold, label=""];
0->5 [style = bold, label=""];
}
