digraph {
28 [style = filled, label = "OutputTag<Integer> oneOutput = new OutputTag<Integer>(\"one\"){}@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "headOperator.processElement(new StreamRecord<>(1))@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "assertThat(sink3Results,contains(\"Second: 2\",\"Second: 3\"))@@@63@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertThat(sink2Results,contains(\"First 2: 1\"))@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "OperatorChain<Integer,StreamMap<Integer,Integer>> operatorChain = createOperatorChain(streamConfig,environment,mockTask)@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Configuration configuration = chainedVertex.getConfiguration()@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "split.getSideOutput(oneOutput).map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink2Results.add(value)}})@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "sink2Results = new ArrayList<>()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "DataStream<Integer> input = env.fromElements(1,2,3)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "input = input.map(null)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "headOperator.processElement(new StreamRecord<>(3))@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "JobGraph jobGraph = env.getStreamGraph().getJobGraph()@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(sink2Results,contains(\"Second: 1\",\"Second: 2\",\"Second: 3\"))@@@35@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "StreamConfig streamConfig = new StreamConfig(configuration)@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "assertThat(sink1Results,contains(\"First 1: 1\"))@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "OperatorChain<Integer,StreamMap<Integer,Integer>> operatorChain = createOperatorChain(streamConfig,environment,mockTask)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "StreamTask<Integer,StreamMap<Integer,Integer>> mockTask = createMockTask(streamConfig,environment)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testMultiChaining['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(sink1Results,contains(\"First: 1\",\"First: 2\",\"First: 3\"))@@@36@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testMultiChaining['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "StreamTask<Integer,StreamMap<Integer,Integer>> mockTask = createMockTask(streamConfig,environment)@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "StreamConfig streamConfig = new StreamConfig(configuration)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "sink3Results = new ArrayList<>()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "split.getSideOutput(oneOutput).map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink1Results.add(value)}})@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "operatorWrapper.getStreamOperator().open()@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "headOperator.processElement(new StreamRecord<>(2))@@@32@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "operatorChain.initializeStateAndOpenOperators(null)@@@30@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "StreamExecutionEnvironment env@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "JobGraph jobGraph = env.getStreamGraph().getJobGraph()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "input.map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink2Results.add(value)}})@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "SingleOutputStreamOperator<Object> split = input.process(new ProcessFunction<Integer,Object>(){@Override public void processElement(Integer value,Context ctx,Collector<Object> out){if (value.equals(1)) {ctx.output(oneOutput,value)}{ctx.output(otherOutput,value)}}})@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Configuration configuration = chainedVertex.getConfiguration()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(sink2Results,contains(\"Second: 1\",\"Second: 2\",\"Second: 3\"))@@@37@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "input.map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink1Results.add(value)}})@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "headOperator.processElement(new StreamRecord<>(2))@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "StreamExecutionEnvironment env@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "headOperator.setup(mockTask,streamConfig,operatorChain.getMainOperatorOutput())@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(sink1Results,contains(\"First: 1\",\"First: 2\",\"First: 3\"))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "env.setParallelism(2)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "operatorWrapper.getStreamOperator().open()@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "headOperator.setup(mockTask,streamConfig,operatorChain.getMainOperatorOutput())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "headOperator.processElement(new StreamRecord<>(1))@@@31@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "StreamMap<Integer,Integer> headOperator = streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "headOperator.processElement(new StreamRecord<>(3))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "StreamMap<Integer,Integer> headOperator = streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "OutputTag<Integer> otherOutput = new OutputTag<Integer>(\"other\"){}@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "testMultiChainingWithSplit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "sink1Results = new ArrayList<>()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "split.getSideOutput(otherOutput).map(null).addSink(new SinkFunction<String>(){@Override public void invoke(String value,Context ctx){sink3Results.add(value)}})@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->10 [style = bold, label=""];
28->29 [style = bold, label=""];
49->45 [style = bold, label=""];
44->47 [style = solid, label="sink3Results"];
32->46 [style = bold, label=""];
9->11 [style = bold, label=""];
18->23 [style = bold, label=""];
7->31 [style = solid, label="sink2Results"];
11->1 [style = bold, label=""];
18->41 [style = dashed, label="0"];
34->52 [style = bold, label=""];
41->37 [style = bold, label=""];
4->19 [style = bold, label=""];
1->27 [style = bold, label=""];
1->3 [style = bold, label=""];
45->33 [style = bold, label=""];
12->31 [style = dashed, label="0"];
6->51 [style = dashed, label="0"];
5->15 [style = bold, label=""];
33->43 [style = solid, label="mockTask"];
29->32 [style = solid, label="otherOutput"];
19->2 [style = bold, label=""];
2->9 [style = bold, label=""];
16->17 [style = bold, label=""];
3->16 [style = bold, label=""];
40->34 [style = bold, label=""];
5->28 [style = bold, label=""];
23->0 [style = bold, label=""];
15->18 [style = bold, label=""];
49->35 [style = solid, label="streamConfig"];
22->7 [style = bold, label=""];
42->40 [style = bold, label=""];
46->41 [style = bold, label=""];
22->52 [style = solid, label="sink1Results"];
38->49 [style = solid, label="configuration"];
20->4 [style = bold, label=""];
33->35 [style = solid, label="mockTask"];
36->21 [style = bold, label=""];
26->16 [style = bold, label=""];
24->26 [style = bold, label=""];
49->33 [style = solid, label="streamConfig"];
7->5 [style = bold, label=""];
7->10 [style = solid, label="sink2Results"];
4->19 [style = solid, label="configuration"];
19->9 [style = solid, label="streamConfig"];
10->8 [style = bold, label=""];
38->49 [style = bold, label=""];
35->50 [style = bold, label=""];
43->35 [style = bold, label=""];
50->42 [style = bold, label=""];
7->12 [style = solid, label="sink2Results"];
19->11 [style = solid, label="streamConfig"];
19->1 [style = solid, label="streamConfig"];
29->32 [style = bold, label=""];
37->48 [style = bold, label=""];
9->11 [style = solid, label="mockTask"];
33->43 [style = bold, label=""];
28->32 [style = solid, label="oneOutput"];
52->31 [style = bold, label=""];
25->6 [style = dotted, label="true"];
39->38 [style = bold, label=""];
30->39 [style = bold, label=""];
22->17 [style = solid, label="sink1Results"];
0->20 [style = bold, label=""];
27->24 [style = bold, label=""];
31->47 [style = bold, label=""];
13->22 [style = bold, label=""];
9->1 [style = solid, label="mockTask"];
14->21 [style = bold, label=""];
36->51 [style = dotted, label="true"];
48->30 [style = bold, label=""];
49->43 [style = solid, label="streamConfig"];
44->5 [style = bold, label=""];
8->12 [style = bold, label=""];
8->52 [style = dashed, label="0"];
7->44 [style = bold, label=""];
25->21 [style = bold, label=""];
21->13 [style = bold, label=""];
22->8 [style = solid, label="sink1Results"];
14->6 [style = dotted, label="true"];
}
