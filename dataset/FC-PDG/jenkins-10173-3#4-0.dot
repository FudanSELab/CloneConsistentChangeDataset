digraph {
8 [style = filled, label = "MyView myView = new MyView(\"aView\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "updateViewShouldModifyViewConfiguration['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(result,failedWith(1))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "updateViewWithWrongViewTypeShouldFail['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertThat(updatedView.isFilterExecutors(),equalTo(true))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(\"Update should not modify view name\",j.jenkins.getView(\"ViewFromXML\"),nullValue())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "updateViewWithWrongViewTypeShouldFail['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(result,succeededSilently())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final View updatedView = j.jenkins.getView(\"aView\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "j.jenkins.addView(new ListView(\"aView\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(View.READ,View.CONFIGURE,Jenkins.READ).withStdin(this.getClass().getResourceAsStream(\"/hudson/cli/view.xml\")).invokeWithArgs(\"aView\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(updatedView.getViewName(),equalTo(\"aView\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "j.jenkins.addView(tv)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertThat(updatedView.isFilterQueue(),equalTo(false))@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(result.stderr(),containsString(\"Expecting view type: \" + myView.getClass() + \" but got: class hudson.model.ListView instead.\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "TreeView tv = new TreeView(\"aView\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertThat(result.stderr(),containsString(\"Expecting view type: \" + tv.getClass() + \" but got: class hudson.model.ListView instead.\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "j.jenkins.addView(myView)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->3 [style = bold, label=""];
15->13 [style = bold, label=""];
3->1 [style = bold, label=""];
8->6 [style = solid, label="myView"];
1->9 [style = dashed, label="0"];
8->6 [style = bold, label=""];
6->0 [style = bold, label=""];
7->8 [style = bold, label=""];
5->2 [style = solid, label="tv"];
11->15 [style = bold, label=""];
5->16 [style = dashed, label="0"];
3->9 [style = bold, label=""];
5->2 [style = bold, label=""];
0->10 [style = bold, label=""];
2->0 [style = bold, label=""];
13->12 [style = bold, label=""];
14->0 [style = bold, label=""];
14->0 [style = solid, label="result"];
0->3 [style = solid, label="result"];
2->6 [style = dashed, label="0"];
5->8 [style = dashed, label="0"];
16->14 [style = bold, label=""];
3->0 [style = dashed, label="0"];
4->5 [style = bold, label=""];
17->16 [style = bold, label=""];
10->11 [style = bold, label=""];
}
