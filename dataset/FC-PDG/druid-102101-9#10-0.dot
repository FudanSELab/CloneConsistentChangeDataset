digraph {
4 [style = filled, label = "final ExprType toExprType = ExprType.fromValueType(columnValueType)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "final ValueType toValueType = aggregateRowSignature.getColumnType(expression.getDirectColumn()).orElseThrow(null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "postAggregatorDirectColumnIsOk['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final RexNode rexNode@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "return false@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final ValueType columnValueType = aggregateRowSignature.getColumnType(expression.getDirectColumn()).orElseThrow(null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "!expression.isDirectColumnAccess()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final RowSignature aggregateRowSignature@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "final DruidExpression expression@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final RexNode rexNode@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "return true@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final RowSignature aggregateRowSignature@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final ExprType fromExprType = ExprType.fromValueType(Calcites.getValueTypeForRelDataType(rexNode.getType()))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "columnValueType == ValueType.COMPLEX@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final ValueType fromValueType = Calcites.getValueTypeForRelDataType(rexNode.getType())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final ExprType toExprType = ExprType.fromValueTypeStrict(columnValueType)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "postAggregatorDirectColumnIsOk['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "final RexNode rexNode@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "postAggregatorComplexDirectColumnIsOk['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final DruidExpression expression@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final ExprType fromExprType = ExprType.fromValueTypeStrict(Calcites.getValueTypeForRelDataType(rexNode.getType()))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "return toValueType == ValueType.COMPLEX && fromValueType == ValueType.COMPLEX@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "return toExprType.equals(fromExprType)@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final DruidExpression expression@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
11->4 [style = solid, label="columnValueType"];
0->3 [style = bold, label=""];
4->10 [style = bold, label=""];
22->18 [style = solid, label="toValueType"];
19->20 [style = dotted, label="true"];
5->1 [style = dotted, label="true"];
17->18 [style = solid, label="fromValueType"];
11->22 [style = dashed, label="0"];
3->11 [style = bold, label=""];
12->15 [style = dotted, label="true"];
19->23 [style = dotted, label="true"];
0->11 [style = bold, label=""];
19->21 [style = dotted, label="true"];
11->13 [style = solid, label="columnValueType"];
3->22 [style = bold, label=""];
2->4 [style = bold, label=""];
12->0 [style = bold, label=""];
10->6 [style = bold, label=""];
9->23 [style = dashed, label="0"];
11->2 [style = bold, label=""];
11->2 [style = solid, label="columnValueType"];
2->17 [style = dashed, label="0"];
19->0 [style = bold, label=""];
14->6 [style = solid, label="fromExprType"];
2->13 [style = bold, label=""];
12->16 [style = dotted, label="true"];
5->0 [style = bold, label=""];
5->7 [style = dotted, label="true"];
0->22 [style = bold, label=""];
10->6 [style = solid, label="fromExprType"];
22->17 [style = bold, label=""];
5->9 [style = dotted, label="true"];
8->18 [style = dashed, label="0"];
0->3 [style = dotted, label="true"];
8->4 [style = bold, label=""];
4->13 [style = dashed, label="0"];
13->14 [style = bold, label=""];
14->6 [style = bold, label=""];
10->14 [style = dashed, label="0"];
17->18 [style = bold, label=""];
2->8 [style = dotted, label="true"];
8->13 [style = bold, label=""];
2->8 [style = bold, label=""];
12->9 [style = dotted, label="true"];
}
