digraph {
34 [style = filled, label = "ImmutableDruidDataSource dataSource = new ImmutableDruidDataSource(\"DUMMY\",Collections.emptyMap(),segments)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "j++@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "j < maxSegments@@@10@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "int j = 0@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.expect(druidServer.getSegments()).andReturn(segments).anyTimes()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "serverHolderList.add(new ServerHolder(new ImmutableDruidServer(new DruidServerMetadata(\"DruidServer_Name_\" + i,\"localhost\",null,10000000L,ServerType.HISTORICAL,\"hot\",1),3000L,ImmutableMap.of(\"DUMMY\",EasyMock.createMock()),ImmutableMap.copyOf(segments)),fromPeon))@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int serverCount@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "EasyMock.expect(druidServer.getMaxSize()).andReturn(10000000L).anyTimes()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "segments.put(segment.getIdentifier(),segment)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "j++@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
42 [style = filled, label = "serverHolderList.add(new ServerHolder(new ImmutableDruidServer(new DruidServerMetadata(\"DruidServer_Name_\" + i,\"localhost\",null,10000000L,ServerType.HISTORICAL,\"hot\",1),3000L,ImmutableMap.of(\"DUMMY\",dataSource),segments.size()),fromPeon))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "EasyMock.expect(druidServer.getSegment(segment.getIdentifier())).andReturn(segment).anyTimes()@@@29@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "DataSegment segment = getSegment(j)@@@27@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "ImmutableDruidServer druidServer = EasyMock.createMock()@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "i < serverCount@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "i++@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int j = 0@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "segments.add(segment)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "LoadQueuePeonTester fromPeon = new LoadQueuePeonTester()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "LoadQueuePeonTester fromPeon = new LoadQueuePeonTester()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "setupDummyCluster['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "setupDummyCluster['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "List<DataSegment> segments = IntStream.range(0,maxSegments).mapToObj(null).collect(Collectors.toList())@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "ImmutableDruidServer druidServer = EasyMock.createMock()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "segments.put(segment.getIdentifier(),segment)@@@28@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "LoadQueuePeonTester fromPeon = new LoadQueuePeonTester()@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "serverHolderList.add(new ServerHolder(druidServer,fromPeon))@@@33@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "j < (maxSegments - 2)@@@25@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Map<String,DataSegment> segments = new HashMap<>()@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "int serverCount@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "DataSegment segment = getSegment(j)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "int maxSegments@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "j++@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "return serverHolderList@@@34@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "serverHolderList.add(new ServerHolder(druidServer,fromPeon))@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "Map<String,DataSegment> segments = new HashMap<>()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "EasyMock.replay(druidServer)@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "int serverCount@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "int i = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "EasyMock.replay(druidServer)@@@32@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes()@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
46 [style = filled, label = "setupDummyCluster['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "EasyMock.expect(druidServer.getSegments()).andReturn(segments).anyTimes()@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "List<ServerHolder> serverHolderList = new ArrayList<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int j = 0@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27->47 [style = dashed, label="0"];
8->14 [style = bold, label=""];
25->9 [style = dotted, label="true"];
18->20 [style = bold, label=""];
38->6 [style = bold, label=""];
14->3 [style = bold, label=""];
1->9 [style = solid, label="j"];
30->21 [style = bold, label=""];
17->21 [style = bold, label=""];
44->21 [style = solid, label="serverCount"];
3->12 [style = solid, label="segment"];
45->11 [style = bold, label=""];
41->25 [style = solid, label="j"];
45->5 [style = bold, label=""];
34->42 [style = solid, label="dataSource"];
24->45 [style = solid, label="maxSegments"];
7->19 [style = dashed, label="0"];
19->45 [style = dashed, label="0"];
10->14 [style = solid, label="j"];
6->2 [style = bold, label=""];
25->1 [style = bold, label=""];
14->28 [style = bold, label=""];
21->43 [style = dotted, label="true"];
12->10 [style = bold, label=""];
17->30 [style = solid, label="i"];
17->21 [style = solid, label="i"];
19->11 [style = dotted, label="true"];
21->18 [style = bold, label=""];
36->37 [style = solid, label="druidServer"];
35->37 [style = bold, label=""];
15->16 [style = bold, label=""];
46->44 [style = dotted, label="true"];
10->3 [style = solid, label="j"];
23->47 [style = bold, label=""];
21->14 [style = dotted, label="true"];
36->38 [style = bold, label=""];
8->14 [style = solid, label="j"];
17->42 [style = solid, label="i"];
8->10 [style = solid, label="j"];
23->27 [style = bold, label=""];
45->11 [style = dotted, label="true"];
28->30 [style = bold, label=""];
2->26 [style = solid, label="druidServer"];
21->34 [style = dotted, label="true"];
34->42 [style = bold, label=""];
1->11 [style = solid, label="j"];
27->25 [style = bold, label=""];
9->11 [style = solid, label="j"];
19->5 [style = bold, label=""];
9->45 [style = solid, label="j"];
21->18 [style = dotted, label="true"];
8->3 [style = solid, label="j"];
36->35 [style = solid, label="druidServer"];
39->16 [style = bold, label=""];
40->37 [style = solid, label="fromPeon"];
21->20 [style = dotted, label="true"];
4->1 [style = bold, label=""];
17->28 [style = solid, label="i"];
46->16 [style = bold, label=""];
19->11 [style = bold, label=""];
43->34 [style = solid, label="segments"];
37->5 [style = bold, label=""];
18->43 [style = bold, label=""];
45->7 [style = dotted, label="true"];
11->7 [style = solid, label="segment"];
0->21 [style = solid, label="serverCount"];
9->19 [style = solid, label="j"];
30->42 [style = solid, label="i"];
21->6 [style = bold, label=""];
10->14 [style = bold, label=""];
9->19 [style = bold, label=""];
21->40 [style = bold, label=""];
39->24 [style = dotted, label="true"];
1->19 [style = solid, label="j"];
25->1 [style = dotted, label="true"];
4->23 [style = dashed, label="0"];
16->22 [style = solid, label="serverHolderList"];
6->29 [style = solid, label="fromPeon"];
14->3 [style = dotted, label="true"];
18->42 [style = solid, label="fromPeon"];
24->14 [style = solid, label="maxSegments"];
33->21 [style = solid, label="serverCount"];
20->28 [style = solid, label="segments"];
2->13 [style = bold, label=""];
13->23 [style = bold, label=""];
20->8 [style = bold, label=""];
19->9 [style = dotted, label="true"];
27->25 [style = solid, label="j"];
1->45 [style = bold, label=""];
21->30 [style = dotted, label="true"];
15->0 [style = dotted, label="true"];
18->28 [style = solid, label="fromPeon"];
24->19 [style = solid, label="maxSegments"];
3->12 [style = bold, label=""];
7->31 [style = bold, label=""];
25->19 [style = dotted, label="true"];
39->33 [style = dotted, label="true"];
45->9 [style = dotted, label="true"];
41->1 [style = solid, label="j"];
21->8 [style = dotted, label="true"];
16->17 [style = bold, label=""];
26->29 [style = bold, label=""];
15->24 [style = dotted, label="true"];
9->41 [style = bold, label=""];
1->19 [style = solid, label="segment"];
21->28 [style = dotted, label="true"];
46->24 [style = dotted, label="true"];
30->21 [style = solid, label="i"];
21->42 [style = dotted, label="true"];
25->32 [style = bold, label=""];
1->45 [style = solid, label="j"];
2->29 [style = solid, label="druidServer"];
19->9 [style = bold, label=""];
41->25 [style = bold, label=""];
31->9 [style = dashed, label="0"];
31->9 [style = bold, label=""];
27->1 [style = solid, label="j"];
40->36 [style = bold, label=""];
14->42 [style = dashed, label="0"];
19->7 [style = dotted, label="true"];
5->26 [style = bold, label=""];
14->12 [style = dotted, label="true"];
45->31 [style = dotted, label="true"];
19->31 [style = dotted, label="true"];
11->7 [style = bold, label=""];
43->34 [style = bold, label=""];
25->4 [style = bold, label=""];
24->25 [style = solid, label="maxSegments"];
32->35 [style = bold, label=""];
9->45 [style = bold, label=""];
25->41 [style = dotted, label="true"];
14->10 [style = dotted, label="true"];
30->28 [style = solid, label="i"];
16->5 [style = solid, label="serverHolderList"];
1->19 [style = bold, label=""];
29->22 [style = bold, label=""];
20->43 [style = dashed, label="0"];
47->25 [style = bold, label=""];
27->41 [style = solid, label="j"];
42->30 [style = bold, label=""];
}
