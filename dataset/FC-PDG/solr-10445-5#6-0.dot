digraph {
34 [style = filled, label = "replicaTypeAndReplicaLocationTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "NodePreferenceRulesComparator comparator = new NodePreferenceRulesComparator(rules,null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "List<Replica> replicas = getBasicReplicaList()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "replicas.sort(comparator)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(\"node4\",replicas.get(1).getNodeName())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(\"node3\",replicas.get(3).getNodeName())@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(\"node4\",replicas.get(1).getNodeName())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(\"node2\",replicas.get(2).getNodeName())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "replicaTypeAndReplicaBase['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"node2\",replicas.get(1).getNodeName())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "rlt.transform(replicas)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(\"node5\",replicas.get(4).getNodeName())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "ModifiableSolrParams params = new ModifiableSolrParams()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "rlt = generator.getReplicaListTransformer(params)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "params.set(\"routingPreference\",\"1\")@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "replicas.add(new Replica(\"node4\",map(ZkStateReader.BASE_URL_PROP,\"http://host2_2:8983/solr\",ZkStateReader.NODE_NAME_PROP,\"node4\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"TLOG\"),\"collection1\",\"shard1\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "params.add(ShardParams.SHARDS_PREFERENCE,rulesParam)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ReplicaListTransformer rlt = generator.getReplicaListTransformer(params)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(\"node3\",replicas.get(3).getNodeName())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<PreferenceRule> rules = PreferenceRule.from(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2_2\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"node2\",replicas.get(2).getNodeName())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(\"node1\",replicas.get(0).getNodeName())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "replicas.add(new Replica(\"node5\",map(ZkStateReader.BASE_URL_PROP,\"http://host2_2:8983/solr\",ZkStateReader.NODE_NAME_PROP,\"node5\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"PULL\"),\"c1\",\"s1\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "params.add(\"routingPreference\",\"0\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "replicaTypeAndReplicaBase['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "rlt.transform(replicas)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"node1\",replicas.get(0).getNodeName())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"node4\",replicas.get(2).getNodeName())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "replicas.add(new Replica(\"node4\",map(ZkStateReader.BASE_URL_PROP,\"http://host2_2:8983/solr\",ZkStateReader.NODE_NAME_PROP,\"node4\",ZkStateReader.CORE_NAME_PROP,\"collection1\",ZkStateReader.REPLICA_TYPE,\"TLOG\"),\"c1\",\"s1\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(\"node1\",replicas.get(0).getNodeName())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\"@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(\"node5\",replicas.get(3).getNodeName())@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertEquals(\"node3\",replicas.get(3).getNodeName())@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "assertEquals(\"node3\",replicas.get(4).getNodeName())@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2->5 [style = solid, label="replicas"];
28->29 [style = bold, label=""];
22->25 [style = bold, label=""];
23->20 [style = bold, label=""];
27->32 [style = bold, label=""];
2->26 [style = bold, label=""];
15->7 [style = bold, label=""];
18->23 [style = bold, label=""];
20->9 [style = bold, label=""];
26->30 [style = solid, label="comparator"];
29->31 [style = bold, label=""];
12->17 [style = bold, label=""];
20->2 [style = dashed, label="0"];
4->21 [style = bold, label=""];
2->18 [style = bold, label=""];
6->19 [style = bold, label=""];
2->26 [style = solid, label="rules"];
9->10 [style = bold, label=""];
3->12 [style = bold, label=""];
32->2 [style = bold, label=""];
10->6 [style = bold, label=""];
18->32 [style = dashed, label="0"];
0->15 [style = bold, label=""];
19->8 [style = bold, label=""];
2->19 [style = solid, label="replicas"];
26->30 [style = bold, label=""];
7->6 [style = solid, label="params"];
18->20 [style = bold, label=""];
30->28 [style = bold, label=""];
20->10 [style = solid, label="rulesParam"];
11->3 [style = bold, label=""];
7->16 [style = solid, label="params"];
1->16 [style = bold, label=""];
7->2 [style = bold, label=""];
31->33 [style = bold, label=""];
21->1 [style = bold, label=""];
9->26 [style = dashed, label="0"];
16->5 [style = bold, label=""];
4->1 [style = bold, label=""];
5->11 [style = bold, label=""];
34->27 [style = bold, label=""];
13->14 [style = bold, label=""];
12->22 [style = bold, label=""];
8->13 [style = bold, label=""];
14->4 [style = bold, label=""];
24->15 [style = bold, label=""];
17->22 [style = dashed, label="0"];
}
