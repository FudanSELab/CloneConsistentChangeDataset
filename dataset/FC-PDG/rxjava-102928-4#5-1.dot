digraph {
2 [style = filled, label = "final List<GroupedFlowable<Integer,Integer>> groups = new ArrayList<GroupedFlowable<Integer,Integer>>()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "final List<GroupedObservable<Integer,Integer>> groups = new ArrayList<GroupedObservable<Integer,Integer>>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Observable.concat(groups).test().assertValueCount(1000).assertNoErrors().assertComplete()@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Observable.range(1,1000).groupBy(new Function<Integer,Integer>(){@Override public Integer apply(Integer v){return v % 10}}).doOnNext(new Consumer<GroupedObservable<Integer,Integer>>(){@Override public void accept(GroupedObservable<Integer,Integer> v){groups.add(v)}}).test().assertValueCount(1000).assertComplete().assertNoErrors()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "abandonedGroupsNoDataloss['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "abandonedGroupsNoDataloss['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Flowable.concat(groups).test().assertValueCount(1000).assertNoErrors().assertComplete()@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "abandonedGroupsNoDataloss['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Flowable.range(1,1000).groupBy(new Function<Integer,Integer>(){@Override public Integer apply(Integer v){return v % 10}}).doOnNext(new Consumer<GroupedFlowable<Integer,Integer>>(){@Override public void accept(GroupedFlowable<Integer,Integer> v){groups.add(v)}}).test().assertValueCount(1000).assertComplete().assertNoErrors()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final List<GroupedFlowable<Integer,Integer>> groups = new ArrayList<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7->9 [style = bold, label=""];
1->9 [style = dashed, label="0"];
2->0 [style = bold, label=""];
8->6 [style = bold, label=""];
3->2 [style = bold, label=""];
6->7 [style = bold, label=""];
0->7 [style = dashed, label="0"];
0->1 [style = bold, label=""];
5->4 [style = bold, label=""];
4->0 [style = bold, label=""];
2->4 [style = dashed, label="0"];
2->6 [style = dashed, label="0"];
}
