digraph {
6 [style = filled, label = "assertTrue(e.getCause() instanceof NotAssignedException)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testRestartConnectorRedirectToOwner['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "herder.tick()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "member.ensureActive()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "time.sleep(2000L)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "String ownerUrl = \"ownerUrl\"@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertStatistics(3,1,100,1000L)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "FutureCallback<Void> callback = new FutureCallback<>()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "EasyMock.expect(member.memberId()).andStubReturn(\"leader\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "PowerMock.expectLastCall()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertStatistics(3,1,100,3000L)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "member.wakeup()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "time.sleep(1000L)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "String ownerUrl = \"ownerUrl\"@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "member.poll(EasyMock.anyInt())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(ownerUrl,notAssignedException.forwardUrl())@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "herder.restartConnector(CONN1,callback)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "PowerMock.expectLastCall()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "expectPostRebalanceCatchup(SNAPSHOT)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "callback.get(1000L,TimeUnit.MILLISECONDS)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "expectRebalance(1,Collections.emptyList(),Collections.emptyList())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "PowerMock.replayAll()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testRestartConnectorRedirectToOwner['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "ExecutionException e@@@26@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "member.poll(EasyMock.anyInt())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testRestartTaskRedirectToOwner['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "PowerMock.verifyAll()@@@31@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "PowerMock.expectLastCall()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "NotAssignedException notAssignedException = (NotAssignedException)e.getCause()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expectRebalance(1,Collections.emptyList(),Collections.emptyList())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "herder.restartTask(TASK0,callback)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "EasyMock.expect(member.ownerUrl(CONN1)).andReturn(ownerUrl)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "PowerMock.expectLastCall()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "EasyMock.expect(member.ownerUrl(TASK0)).andReturn(ownerUrl)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "fail(\"Expected NotLeaderException to be raised\")@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "herder.tick()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->33 [style = bold, label=""];
16->13 [style = bold, label=""];
20->17 [style = bold, label=""];
23->30 [style = bold, label=""];
8->33 [style = solid, label="callback"];
5->23 [style = bold, label=""];
21->6 [style = bold, label=""];
7->10 [style = bold, label=""];
26->5 [style = bold, label=""];
11->4 [style = bold, label=""];
9->32 [style = bold, label=""];
18->19 [style = bold, label=""];
26->33 [style = dashed, label="0"];
8->26 [style = bold, label=""];
6->24 [style = bold, label=""];
4->18 [style = bold, label=""];
32->7 [style = bold, label=""];
31->1 [style = bold, label=""];
33->5 [style = bold, label=""];
34->12 [style = bold, label=""];
15->16 [style = bold, label=""];
25->35 [style = bold, label=""];
5->28 [style = bold, label=""];
17->11 [style = bold, label=""];
27->15 [style = bold, label=""];
36->1 [style = bold, label=""];
1->9 [style = bold, label=""];
20->4 [style = bold, label=""];
14->7 [style = bold, label=""];
35->34 [style = solid, label="ownerUrl"];
22->8 [style = bold, label=""];
8->26 [style = solid, label="callback"];
28->2 [style = bold, label=""];
14->32 [style = dashed, label="0"];
30->28 [style = bold, label=""];
21->24 [style = dotted, label="true"];
10->25 [style = bold, label=""];
25->12 [style = bold, label=""];
0->1 [style = bold, label=""];
9->14 [style = bold, label=""];
21->3 [style = dotted, label="true"];
18->8 [style = bold, label=""];
35->34 [style = bold, label=""];
2->29 [style = bold, label=""];
17->11 [style = solid, label="ownerUrl"];
19->22 [style = bold, label=""];
12->27 [style = bold, label=""];
24->3 [style = bold, label=""];
3->29 [style = bold, label=""];
21->6 [style = dotted, label="true"];
13->20 [style = bold, label=""];
}
