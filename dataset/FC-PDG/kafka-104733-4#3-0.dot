digraph {
7 [style = filled, label = "EasyMock.expectLastCall().andThrow(e)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "sinkTask.flush(EasyMock.anyObject())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final List<TopicPartition> partitions = asList(TOPIC_PARTITION,TOPIC_PARTITION2)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "EasyMock.expectLastCall()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "RuntimeException e@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "sinkTask.open(partitions)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte((,byte((>>(){@Override public ConsumerRecords<byte((,byte((> answer(){rebalanceListener.getValue().onPartitionsRevoked(partitions)rebalanceListener.getValue().onPartitionsAssigned(partitions)return ConsumerRecords.empty()}})@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final List<TopicPartition> partitions = Arrays.asList(TOPIC_PARTITION,TOPIC_PARTITION2)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "EasyMock.expect(consumer.position(TOPIC_PARTITION3)).andReturn(FIRST_OFFSET)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "sinkTask.put(Collections.emptyList())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "EasyMock.expectLastCall()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "sinkTask.open(partitions)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "consumer.commitSync(EasyMock.anyObject())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "expectPollInitialAssignment['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "EasyMock.expectLastCall()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "EasyMock.expectLastCall()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expectRebalanceAssignmentError['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "EasyMock.expectLastCall()@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final List<TopicPartition> partitions = Arrays.asList(TOPIC_PARTITION,TOPIC_PARTITION2,TOPIC_PARTITION3)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte((,byte((>>(){@Override public ConsumerRecords<byte((,byte((> answer(){rebalanceListener.getValue().onPartitionsAssigned(partitions)return ConsumerRecords.empty()}})@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "expectRebalanceAssignmentError['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "sinkTask.close(new HashSet<>(partitions))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->23 [style = dashed, label="0"];
22->25 [style = bold, label=""];
1->4 [style = bold, label=""];
14->0 [style = dotted, label="true"];
18->20 [style = solid, label="partitions"];
5->0 [style = dotted, label="true"];
16->22 [style = bold, label=""];
15->3 [style = bold, label=""];
24->18 [style = bold, label=""];
10->6 [style = bold, label=""];
12->2 [style = solid, label="partitions"];
15->2 [style = solid, label="partitions"];
3->10 [style = bold, label=""];
18->20 [style = bold, label=""];
12->11 [style = solid, label="partitions"];
18->23 [style = solid, label="partitions"];
12->3 [style = solid, label="partitions"];
23->21 [style = bold, label=""];
5->12 [style = bold, label=""];
7->19 [style = dashed, label="0"];
7->2 [style = bold, label=""];
19->23 [style = bold, label=""];
6->13 [style = bold, label=""];
15->3 [style = solid, label="partitions"];
8->9 [style = bold, label=""];
12->15 [style = dashed, label="0"];
12->18 [style = dashed, label="0"];
0->7 [style = solid, label="e"];
14->15 [style = bold, label=""];
12->3 [style = bold, label=""];
13->8 [style = bold, label=""];
9->1 [style = bold, label=""];
4->11 [style = bold, label=""];
20->19 [style = bold, label=""];
21->17 [style = bold, label=""];
11->7 [style = bold, label=""];
17->16 [style = bold, label=""];
15->11 [style = solid, label="partitions"];
}
