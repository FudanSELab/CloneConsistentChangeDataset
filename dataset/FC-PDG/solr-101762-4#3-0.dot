digraph {
13 [style = filled, label = "val.setValue(1234).setExists(true)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "objectCastingTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "val.setValue(1234L).setExists(true)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(casted.exists())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(new Long(1234),casted.getObject())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertTrue(val instanceof StringValue)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(casted.exists())@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(new Long(20),casted.getObject())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "val.setValue(20).setExists(true)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "val.setValue(20L).setExists(true)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "StringValue casted = (StringValue)val@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "TestLongValue val = new TestLongValue()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(20L,casted.getObject())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertEquals(\"20\",casted.getString())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(1234L,casted.getObject())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(\"1234\",casted.getString())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "objectCastingTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(val instanceof AnalyticsValue)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "stringCastingTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "AnalyticsValue casted = (AnalyticsValue)val@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "TestIntValue val = new TestIntValue()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20->17 [style = solid, label="val"];
0->3 [style = bold, label=""];
5->13 [style = dashed, label="0"];
2->0 [style = solid, label="val"];
5->10 [style = bold, label=""];
19->18 [style = bold, label=""];
20->17 [style = bold, label=""];
2->20 [style = dashed, label="0"];
4->17 [style = dashed, label="0"];
2->4 [style = solid, label="val"];
0->16 [style = dashed, label="0"];
8->12 [style = dashed, label="0"];
3->12 [style = bold, label=""];
16->19 [style = bold, label=""];
12->9 [style = bold, label=""];
2->4 [style = bold, label=""];
11->2 [style = bold, label=""];
4->0 [style = bold, label=""];
6->10 [style = dashed, label="0"];
3->19 [style = dashed, label="0"];
6->1 [style = bold, label=""];
5->6 [style = bold, label=""];
6->15 [style = dashed, label="0"];
7->2 [style = bold, label=""];
3->8 [style = bold, label=""];
8->9 [style = bold, label=""];
18->9 [style = bold, label=""];
9->5 [style = bold, label=""];
8->18 [style = dashed, label="0"];
13->15 [style = bold, label=""];
10->1 [style = bold, label=""];
17->16 [style = bold, label=""];
14->20 [style = bold, label=""];
9->13 [style = bold, label=""];
15->1 [style = bold, label=""];
20->16 [style = solid, label="val"];
}
