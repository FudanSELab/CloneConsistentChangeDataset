digraph {
10 [style = filled, label = "supervisor.runInternal()@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(SHARD0_PARTITION)).anyTimes()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "testShardMergePhaseOne['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "return tasks@@@46@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "supervisorRecordSupplier.assign(EasyMock.anyObject())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "TreeMap<Integer,Map<String,String>> checkpoints0 = new TreeMap<>()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "TreeMap<Integer,Map<String,String>> checkpoints1 = new TreeMap<>()@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "checkpoints1.put(0,ImmutableMap.of(SHARD_ID0,\"0\"))@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testShardSplitPhaseOne['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(task.getId())).andReturn(Optional.of(TaskStatus.running(task.getId()))).anyTimes()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "EasyMock.reset(taskClient)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "checkpoints0.put(0,ImmutableMap.of(SHARD_ID1,\"0\"))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(null)).anyTimes()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EasyMock.replay(taskClient)@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(DateTimes.nowUtc())).anyTimes()@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(tasks).anyTimes()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "EasyMock.reset(taskStorage)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(captured))).andReturn(true).times(1)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "supervisorRecordSupplier.seekToLatest(EasyMock.anyObject())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.NOT_STARTED)).anyTimes()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID0,SHARD_ID1)).anyTimes()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "supervisorRecordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "verifyAll()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "supervisor.runInternal()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "supervisor.start()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(DateTimes.nowUtc())).anyTimes()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(captured))).andReturn(true).times(2)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "replayAll()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-1\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints1)).times(1)@@@36@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-0\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints1)).times(1)@@@33@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID0)).anyTimes()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Capture<Task> captured = Capture.newInstance(CaptureType.ALL)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "EasyMock.expect(taskStorage.getTask(task.getId())).andReturn(Optional.of(task)).anyTimes()@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(SHARD0_PARTITION,SHARD1_PARTITION)).anyTimes()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "testShardSplitPhaseOne['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "List<Task> tasks = captured.getValues()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString())).andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.NOT_STARTED)).anyTimes()@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "EasyMock.replay(taskStorage)@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(EasyMock.anyObject())).andReturn(\"100\").anyTimes()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-0\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints0)).times(1)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "verifyAll()@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37->7 [style = bold, label=""];
28->48 [style = bold, label=""];
24->37 [style = bold, label=""];
29->26 [style = bold, label=""];
7->8 [style = bold, label=""];
0->4 [style = bold, label=""];
29->47 [style = dashed, label="0"];
26->2 [style = bold, label=""];
48->42 [style = bold, label=""];
41->6 [style = bold, label=""];
39->6 [style = bold, label=""];
23->1 [style = bold, label=""];
18->24 [style = bold, label=""];
20->18 [style = bold, label=""];
32->39 [style = bold, label=""];
30->9 [style = bold, label=""];
3->21 [style = bold, label=""];
13->22 [style = bold, label=""];
8->23 [style = bold, label=""];
15->19 [style = bold, label=""];
4->17 [style = bold, label=""];
14->0 [style = bold, label=""];
22->15 [style = bold, label=""];
5->32 [style = bold, label=""];
10->25 [style = bold, label=""];
34->3 [style = bold, label=""];
35->16 [style = bold, label=""];
42->5 [style = bold, label=""];
21->29 [style = bold, label=""];
12->38 [style = bold, label=""];
21->47 [style = bold, label=""];
45->3 [style = bold, label=""];
39->41 [style = dashed, label="0"];
32->46 [style = bold, label=""];
44->2 [style = bold, label=""];
11->10 [style = bold, label=""];
46->39 [style = bold, label=""];
1->30 [style = bold, label=""];
2->33 [style = bold, label=""];
28->5 [style = bold, label=""];
33->14 [style = bold, label=""];
16->20 [style = bold, label=""];
9->28 [style = bold, label=""];
31->13 [style = bold, label=""];
36->12 [style = bold, label=""];
20->43 [style = bold, label=""];
25->27 [style = bold, label=""];
6->36 [style = bold, label=""];
40->3 [style = bold, label=""];
32->41 [style = bold, label=""];
23->27 [style = solid, label="tasks"];
26->44 [style = dashed, label="0"];
12->36 [style = bold, label=""];
38->11 [style = bold, label=""];
19->35 [style = bold, label=""];
43->24 [style = bold, label=""];
18->43 [style = dashed, label="0"];
47->44 [style = bold, label=""];
17->31 [style = bold, label=""];
}
