digraph {
1 [style = filled, label = "unmapRuleDescription(rule)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef()@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "return true@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "removeRule['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "ruleTraitDef.deregisterConverterRule(this,converterRule)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "rule instanceof ConverterRule@@@8@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "return true@@@23@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef()@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "addRule['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "!ruleSet.remove(rule)@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "RelOptRuleOperand entry = iter.next()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "entry.getRule().equals(rule)@@@11@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "traitDefs.contains(ruleTraitDef)@@@12@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "rule instanceof ConverterRule@@@15@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "removeRule['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "ConverterRule converterRule = (ConverterRule)rule@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "final RelTrait ruleTrait = converterRule.getInTrait()@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "return false@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "RelOptRule rule@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final RelTrait ruleTrait = converterRule.getInTrait()@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "classOperands.values().removeIf(null)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "iter.remove()@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "traitDefs.contains(ruleTraitDef)@@@19@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "RelOptRule rule@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "iter.hasNext()@@@8@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "ruleTraitDef.deregisterConverterRule(this,converterRule)@@@20@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Iterator<RelOptRuleOperand> iter = classOperands.values().iterator()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14->2 [style = dotted, label="true"];
18->24 [style = bold, label=""];
7->11 [style = bold, label=""];
21->20 [style = dotted, label="true"];
0->13 [style = dotted, label="true"];
0->13 [style = bold, label=""];
21->19 [style = bold, label=""];
16->8 [style = bold, label=""];
21->18 [style = dotted, label="true"];
7->17 [style = dashed, label="0"];
26->25 [style = dotted, label="true"];
0->15 [style = dotted, label="true"];
11->12 [style = dotted, label="true"];
18->24 [style = dotted, label="true"];
11->14 [style = dotted, label="true"];
21->22 [style = dotted, label="true"];
11->12 [style = bold, label=""];
3->15 [style = bold, label=""];
15->6 [style = bold, label=""];
9->10 [style = bold, label=""];
0->6 [style = dotted, label="true"];
10->5 [style = dotted, label="true"];
1->7 [style = bold, label=""];
1->17 [style = bold, label=""];
20->18 [style = bold, label=""];
4->25 [style = dashed, label="0"];
5->1 [style = bold, label=""];
19->24 [style = solid, label="converterRule"];
11->0 [style = bold, label=""];
23->4 [style = dotted, label="true"];
13->16 [style = solid, label="converterRule"];
10->5 [style = bold, label=""];
13->3 [style = bold, label=""];
4->0 [style = solid, label="rule"];
4->13 [style = solid, label="rule"];
22->20 [style = bold, label=""];
6->16 [style = bold, label=""];
21->19 [style = dotted, label="true"];
6->8 [style = bold, label=""];
12->14 [style = bold, label=""];
0->8 [style = bold, label=""];
18->13 [style = bold, label=""];
4->19 [style = solid, label="rule"];
23->10 [style = bold, label=""];
9->4 [style = dotted, label="true"];
4->21 [style = solid, label="rule"];
14->2 [style = bold, label=""];
0->3 [style = dotted, label="true"];
20->18 [style = solid, label="ruleTraitDef"];
10->1 [style = bold, label=""];
14->11 [style = bold, label=""];
17->21 [style = bold, label=""];
19->22 [style = bold, label=""];
2->11 [style = bold, label=""];
4->14 [style = solid, label="rule"];
6->16 [style = dotted, label="true"];
4->1 [style = solid, label="rule"];
21->13 [style = bold, label=""];
24->13 [style = bold, label=""];
15->6 [style = solid, label="ruleTraitDef"];
}
