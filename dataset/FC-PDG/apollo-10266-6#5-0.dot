digraph {
28 [style = filled, label = "assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "DefaultConfig defaultConfig = new DefaultConfig(someNamespace,configRepository)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testGetIntPropertyMultipleTimesWithSmallCache['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(anotherValue,defaultConfig.getIntProperty(anotherKey,someDefaultValue))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(configRepository.getConfig()).thenReturn(someProperties)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "verify(someProperties,times(1)).getProperty(someKey)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "String someStringValue = \"someStringValue\"@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "when(someProperties.getProperty(anotherKey)).thenReturn(String.valueOf(anotherValue))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Integer someDefaultValue = -1@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "someProperties.setProperty(someKey,String.valueOf(someValue))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Long someDefaultValue = -1L@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "verify(someProperties,times(1)).getProperty(anotherKey)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "when(configRepository.getConfig()).thenReturn(someProperties)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "verify(someProperties,times(2)).getProperty(someKey)@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(someValue,defaultConfig.getLongProperty(someKey,someDefaultValue))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "String someStringKey = \"someStringKey\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "someProperties = mock()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "DefaultConfig defaultConfig = new DefaultConfig(someNamespace,configRepository)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testGetLongProperty['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Integer someValue = 2@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "String someKey = \"someKey\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Long someValue = 2L@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "when(someProperties.getProperty(someKey)).thenReturn(String.valueOf(someValue))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "someProperties.setProperty(someStringKey,someStringValue)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Long someValue = 2l@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "Long someDefaultValue = -1l@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "testGetLongProperty['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "Integer anotherValue = 3@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "MockInjector.setInstance(,new MockConfigUtilWithSmallCache())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "String anotherKey = \"anotherKey\"@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(someValue,defaultConfig.getIntProperty(someKey,someDefaultValue))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(anotherValue,defaultConfig.getIntProperty(anotherKey,someDefaultValue))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "someProperties = new Properties()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
4->10 [style = bold, label=""];
11->10 [style = solid, label="someDefaultValue"];
31->25 [style = bold, label=""];
10->28 [style = bold, label=""];
12->5 [style = bold, label=""];
16->27 [style = bold, label=""];
30->33 [style = bold, label=""];
28->30 [style = bold, label=""];
32->19 [style = solid, label="anotherValue"];
24->10 [style = solid, label="someDefaultValue"];
1->14 [style = dashed, label="0"];
22->16 [style = bold, label=""];
19->31 [style = bold, label=""];
2->1 [style = bold, label=""];
1->4 [style = solid, label="someValue"];
13->4 [style = solid, label="someDefaultValue"];
21->25 [style = solid, label="someValue"];
2->19 [style = solid, label="anotherKey"];
24->28 [style = solid, label="someDefaultValue"];
10->28 [style = dashed, label="0"];
2->0 [style = solid, label="someKey"];
7->0 [style = bold, label=""];
1->21 [style = dashed, label="0"];
24->33 [style = solid, label="someDefaultValue"];
21->16 [style = solid, label="someValue"];
13->10 [style = solid, label="someDefaultValue"];
6->7 [style = solid, label="someStringValue"];
9->7 [style = bold, label=""];
11->9 [style = bold, label=""];
21->10 [style = solid, label="someValue"];
24->18 [style = bold, label=""];
32->33 [style = solid, label="anotherValue"];
9->3 [style = solid, label="someProperties"];
15->5 [style = bold, label=""];
14->4 [style = solid, label="someValue"];
1->11 [style = bold, label=""];
21->2 [style = bold, label=""];
20->10 [style = bold, label=""];
6->2 [style = bold, label=""];
29->20 [style = bold, label=""];
21->28 [style = solid, label="someValue"];
2->31 [style = solid, label="anotherKey"];
11->13 [style = dashed, label="0"];
18->22 [style = bold, label=""];
5->10 [style = solid, label="someStringKey"];
5->6 [style = bold, label=""];
17->25 [style = solid, label="someKey"];
3->8 [style = bold, label=""];
32->27 [style = solid, label="anotherValue"];
14->0 [style = solid, label="someValue"];
2->14 [style = bold, label=""];
25->26 [style = bold, label=""];
17->10 [style = solid, label="someKey"];
24->25 [style = solid, label="someDefaultValue"];
17->28 [style = solid, label="someKey"];
22->29 [style = solid, label="someProperties"];
23->17 [style = bold, label=""];
11->4 [style = solid, label="someDefaultValue"];
13->9 [style = bold, label=""];
2->32 [style = bold, label=""];
8->4 [style = bold, label=""];
14->13 [style = bold, label=""];
27->29 [style = bold, label=""];
33->19 [style = bold, label=""];
2->4 [style = solid, label="someKey"];
5->7 [style = solid, label="someStringKey"];
4->10 [style = dashed, label="0"];
32->24 [style = bold, label=""];
2->33 [style = solid, label="anotherKey"];
17->21 [style = bold, label=""];
17->26 [style = solid, label="someKey"];
24->19 [style = solid, label="someDefaultValue"];
1->0 [style = solid, label="someValue"];
17->30 [style = solid, label="someKey"];
}
