digraph {
31 [style = filled, label = "OperatorStateHandle secondSuccessHandle = spy(snapshotResult.getJobManagerOwnedSnapshot())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "BackendRestorerProcedure<OperatorStateBackend,OperatorStateHandle> restorerProcedure = new BackendRestorerProcedure<>(backendSupplier,closeableRegistry,\"test op state backend\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "ListStateDescriptor<Integer> stateDescriptor = new ListStateDescriptor<>(\"test-state\",)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "verifyZeroInteractions(thirdNotUsedHandle)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "CloseableRegistry closeableRegistry = new CloseableRegistry()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "SnapshotResult<OperatorStateHandle> snapshotResult@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "OperatorStateBackend restoredBackend = restorerProcedure.createAndRestore(iterator)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testExceptionThrownIfAllRestoresFailed['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
48 [style = filled, label = "Assert.assertNotNull(restoredBackend)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(0,(int)stateIterator.next())@@@39@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "verify(firstFailHandle).openInputStream()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Assert.assertEquals(1,(int)stateIterator.next())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "listState.add(2)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "List<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(new StateObjectCollection<>(Collections.singletonList(firstFailHandle)),new StateObjectCollection<>(Collections.singletonList(secondSuccessHandle)),new StateObjectCollection<>(Collections.singletonList(thirdNotUsedHandle)))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "restorerProcedure.createAndRestore(iterator)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "{originalBackend.close()originalBackend.dispose()}@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testRestoreProcedureOrderAndFailure['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "verify(secondSuccessHandle).openInputStream()@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "{restoredBackend.close()restoredBackend.dispose()}@@@45@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "OperatorStateBackend originalBackend = backendSupplier.get()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "CheckpointStreamFactory checkpointStreamFactory = new MemCheckpointStreamFactory(1024)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertFalse(iterator.hasNext())@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Exception ignore@@@13@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Assert.fail()@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "verify(thirdFailHandle).openInputStream()@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "OperatorStateHandle thirdNotUsedHandle = mock()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "{}@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "verify(firstFailHandle).openInputStream()@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "listState.add(3)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "snapshot.run()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "OperatorStateHandle secondFailHandle = mock()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertTrue(iterator.hasNext())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "snapshotResult = snapshot.get()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "listState.add(1)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "ListState<Integer> listState = restoredBackend.getListState(stateDescriptor)@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertTrue(thirdNotUsedHandle == iterator.next().iterator().next())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "ListState<Integer> listState = originalBackend.getListState(stateDescriptor)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "RunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot = originalBackend.snapshot(0L,0L,checkpointStreamFactory,CheckpointOptions.forCheckpointWithDefaultLocation())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "Assert.assertFalse(stateIterator.hasNext())@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "BackendRestorerProcedure<OperatorStateBackend,OperatorStateHandle> restorerProcedure = new BackendRestorerProcedure<>(backendSupplier,closeableRegistry)@@@27@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "listState.add(0)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "OperatorStateHandle thirdFailHandle = mock()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Exception ignore@@@14@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "{}@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "testExceptionThrownIfAllRestoresFailed['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "restorerProcedure.createAndRestore(sortedRestoreOptions)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "OperatorStateHandle firstFailHandle = mock()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "verify(thirdFailHandle).openInputStream()@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.fail()@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
53 [style = filled, label = "Iterator<Integer> stateIterator = listState.get().iterator()@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Assert.assertEquals(2,(int)stateIterator.next())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Iterator<StateObjectCollection<OperatorStateHandle>> iterator = sortedRestoreOptions.iterator()@@@26@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "List<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(new StateObjectCollection<>(Collections.singletonList(firstFailHandle)),new StateObjectCollection<>(Collections.singletonList(secondFailHandle)),new StateObjectCollection<>(Collections.singletonList(thirdFailHandle)))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(3,(int)stateIterator.next())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32->53 [style = bold, label=""];
14->16 [style = bold, label=""];
13->10 [style = bold, label=""];
26->46 [style = bold, label=""];
28->29 [style = bold, label=""];
50->45 [style = solid, label="thirdNotUsedHandle"];
6->43 [style = bold, label=""];
31->36 [style = solid, label="secondSuccessHandle"];
11->38 [style = bold, label=""];
14->17 [style = solid, label="sortedRestoreOptions"];
21->19 [style = bold, label=""];
35->44 [style = bold, label=""];
47->48 [style = bold, label=""];
29->30 [style = bold, label=""];
50->28 [style = solid, label="thirdNotUsedHandle"];
52->33 [style = bold, label=""];
7->16 [style = dashed, label="0"];
51->24 [style = bold, label=""];
0->12 [style = bold, label=""];
27->28 [style = bold, label=""];
11->4 [style = bold, label=""];
3->14 [style = bold, label=""];
8->3 [style = bold, label=""];
42->39 [style = bold, label=""];
41->37 [style = bold, label=""];
7->47 [style = solid, label="iterator"];
12->17 [style = dashed, label="0"];
9->28 [style = dashed, label="0"];
19->10 [style = bold, label=""];
7->0 [style = bold, label=""];
10->32 [style = bold, label=""];
40->34 [style = bold, label=""];
16->17 [style = bold, label=""];
9->10 [style = bold, label=""];
44->49 [style = bold, label=""];
38->26 [style = solid, label="checkpointStreamFactory"];
4->36 [style = solid, label="firstFailHandle"];
12->9 [style = bold, label=""];
38->42 [style = bold, label=""];
14->36 [style = dashed, label="0"];
48->27 [style = bold, label=""];
1->13 [style = bold, label=""];
42->34 [style = solid, label="stateDescriptor"];
7->12 [style = solid, label="iterator"];
42->32 [style = solid, label="stateDescriptor"];
50->36 [style = solid, label="thirdNotUsedHandle"];
2->30 [style = dashed, label="0"];
14->7 [style = bold, label=""];
31->50 [style = bold, label=""];
46->51 [style = bold, label=""];
4->31 [style = bold, label=""];
18->20 [style = bold, label=""];
49->25 [style = bold, label=""];
0->47 [style = bold, label=""];
24->4 [style = bold, label=""];
3->50 [style = dashed, label="0"];
47->48 [style = solid, label="restoredBackend"];
5->6 [style = bold, label=""];
15->11 [style = bold, label=""];
8->14 [style = solid, label="secondFailHandle"];
3->14 [style = solid, label="thirdFailHandle"];
36->7 [style = bold, label=""];
4->14 [style = solid, label="firstFailHandle"];
39->40 [style = bold, label=""];
50->36 [style = bold, label=""];
11->16 [style = solid, label="closeableRegistry"];
7->53 [style = solid, label="iterator"];
25->26 [style = bold, label=""];
53->6 [style = bold, label=""];
12->27 [style = dashed, label="0"];
4->8 [style = bold, label=""];
43->41 [style = bold, label=""];
10->2 [style = bold, label=""];
37->52 [style = bold, label=""];
34->35 [style = bold, label=""];
8->31 [style = dashed, label="0"];
23->11 [style = bold, label=""];
20->19 [style = bold, label=""];
17->21 [style = bold, label=""];
22->11 [style = bold, label=""];
11->0 [style = solid, label="closeableRegistry"];
45->10 [style = bold, label=""];
30->45 [style = bold, label=""];
2->5 [style = bold, label=""];
}
