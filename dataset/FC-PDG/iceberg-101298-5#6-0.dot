digraph {
23 [style = filled, label = "Assert.assertTrue(\"Should read: id between lower and upper bounds\",shouldRead)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testIntegerGtEq['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertFalse(\"Should not read: id range above upper bound (80 > 79)\",shouldRead)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\",5),SPEC,true).eval(FILE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(greaterThanOrEqual(\"id\",INT_MAX_VALUE - 4),SPEC,true).eval(FILE)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testIntegerGtEq['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(greaterThanOrEqual(\"id\",INT_MAX_VALUE + 6),SPEC,true).eval(FILE)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\",85),SPEC,true).eval(FILE)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertFalse(\"Should not read: id range above upper bound (85 < 79)\",shouldRead)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertFalse(\"Should not read: id below lower bound\",shouldRead)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertTrue(\"Should read: id equal to lower bound\",shouldRead)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertTrue(\"Should read: id equal to upper bound\",shouldRead)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertFalse(\"Should not read: id above upper bound\",shouldRead)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertTrue(\"Should read: may possible ids\",shouldRead)@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(greaterThanOrEqual(\"id\",85),SPEC,true).eval(FILE)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\",80),SPEC,true).eval(FILE)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\",79),SPEC,true).eval(FILE)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertTrue(\"Should read: one possible id\",shouldRead)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\",30),SPEC,true).eval(FILE)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\",75),SPEC,true).eval(FILE)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertFalse(\"Should not read: id below lower bound\",shouldRead)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(greaterThanOrEqual(\"id\",INT_MAX_VALUE + 1),SPEC,true).eval(FILE)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Assert.assertFalse(\"Should not read: id above upper bound\",shouldRead)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(greaterThanOrEqual(\"id\",INT_MAX_VALUE),SPEC,true).eval(FILE)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(greaterThanOrEqual(\"id\",75),SPEC,true).eval(FILE)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "testIntegerEq['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(greaterThanOrEqual(\"id\",79),SPEC,true).eval(FILE)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(greaterThanOrEqual(\"id\",80),SPEC,true).eval(FILE)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\",29),SPEC,true).eval(FILE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->3 [style = solid, label="shouldRead"];
27->18 [style = bold, label=""];
0->5 [style = solid, label="shouldRead"];
18->23 [style = solid, label="shouldRead"];
24->25 [style = solid, label="shouldRead"];
28->15 [style = bold, label=""];
7->18 [style = dashed, label="0"];
18->23 [style = bold, label=""];
5->9 [style = bold, label=""];
9->2 [style = bold, label=""];
8->6 [style = solid, label="shouldRead"];
26->19 [style = solid, label="shouldRead"];
20->28 [style = bold, label=""];
20->28 [style = solid, label="shouldRead"];
8->20 [style = dashed, label="0"];
7->11 [style = dashed, label="0"];
2->27 [style = dashed, label="0"];
0->15 [style = dashed, label="0"];
10->5 [style = solid, label="shouldRead"];
8->12 [style = dashed, label="0"];
1->9 [style = dashed, label="0"];
8->6 [style = bold, label=""];
6->0 [style = bold, label=""];
26->19 [style = bold, label=""];
12->6 [style = bold, label=""];
7->3 [style = bold, label=""];
0->10 [style = dashed, label="0"];
15->22 [style = bold, label=""];
3->23 [style = dashed, label="0"];
5->1 [style = bold, label=""];
6->28 [style = dashed, label="0"];
23->24 [style = bold, label=""];
1->17 [style = dashed, label="0"];
12->6 [style = solid, label="shouldRead"];
13->12 [style = bold, label=""];
10->5 [style = bold, label=""];
11->3 [style = bold, label=""];
24->25 [style = bold, label=""];
17->27 [style = solid, label="shouldRead"];
6->10 [style = bold, label=""];
25->26 [style = bold, label=""];
11->3 [style = solid, label="shouldRead"];
9->2 [style = solid, label="shouldRead"];
21->16 [style = solid, label="shouldRead"];
1->2 [style = solid, label="shouldRead"];
4->8 [style = bold, label=""];
22->17 [style = bold, label=""];
21->16 [style = bold, label=""];
15->22 [style = solid, label="shouldRead"];
1->2 [style = bold, label=""];
5->22 [style = dashed, label="0"];
2->7 [style = bold, label=""];
17->27 [style = bold, label=""];
2->11 [style = bold, label=""];
14->20 [style = bold, label=""];
0->5 [style = bold, label=""];
19->21 [style = bold, label=""];
}
