digraph {
9 [style = filled, label = "Assert.assertEquals(1,responseObjects.size())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "EasyMock.replay(taskRunner,taskMaster,taskStorageQueryAdapter,indexerMetadataStorageAdapter,req)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "EasyMock.expect(taskStorageQueryAdapter.getCompletedTaskInfoByCreatedTimeDuration(null,null,null)).andStubReturn(ImmutableList.of(new TaskInfo(\"id_5\",DateTime.now(ISOChronology.getInstanceUTC()),TaskStatus.success(\"id_5\"),\"deny\",getTaskWithIdAndDatasource(\"id_5\",\"deny\")),new TaskInfo(\"id_6\",DateTime.now(ISOChronology.getInstanceUTC()),TaskStatus.success(\"id_6\"),\"allow\",getTaskWithIdAndDatasource(\"id_6\",\"allow\")),new TaskInfo(\"id_7\",DateTime.now(ISOChronology.getInstanceUTC()),TaskStatus.success(\"id_7\"),\"allow\",getTaskWithIdAndDatasource(\"id_7\",\"allow\"))))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "testGetTasks['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "EasyMock.expect(taskRunner.getKnownTasks()).andReturn(ImmutableList.of(new MockTaskRunnerWorkItem(\"id_1\",null),new MockTaskRunnerWorkItem(\"id_4\",null))).atLeastOnce()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "EasyMock.expect(taskStorageQueryAdapter.getRecentlyCompletedTaskInfo(null,null,null)).andStubReturn(ImmutableList.of(new TaskInfo(\"id_5\",DateTime.now(ISOChronology.getInstanceUTC()),TaskStatus.success(\"id_5\"),\"deny\",getTaskWithIdAndDatasource(\"id_5\",\"deny\")),new TaskInfo(\"id_6\",DateTime.now(ISOChronology.getInstanceUTC()),TaskStatus.success(\"id_6\"),\"allow\",getTaskWithIdAndDatasource(\"id_6\",\"allow\")),new TaskInfo(\"id_7\",DateTime.now(ISOChronology.getInstanceUTC()),TaskStatus.success(\"id_7\"),\"allow\",getTaskWithIdAndDatasource(\"id_7\",\"allow\"))))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "List<TaskStatusPlus> responseObjects = (List<TaskStatusPlus>)overlordResource.getTasks(null,null,null,null,null,req).getEntity()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(\"id_2\",responseObjects.get(0).getId())@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "EasyMock.expect(taskStorageQueryAdapter.getActiveTaskInfo(null)).andStubReturn(ImmutableList.of(new TaskInfo(\"id_1\",DateTime.now(ISOChronology.getInstanceUTC()),TaskStatus.success(\"id_1\"),\"allow\",getTaskWithIdAndDatasource(\"id_1\",\"allow\")),new TaskInfo(\"id_2\",DateTime.now(ISOChronology.getInstanceUTC()),TaskStatus.success(\"id_2\"),\"allow\",getTaskWithIdAndDatasource(\"id_2\",\"allow\")),new TaskInfo(\"id_3\",DateTime.now(ISOChronology.getInstanceUTC()),TaskStatus.success(\"id_3\"),\"deny\",getTaskWithIdAndDatasource(\"id_3\",\"deny\")),new TaskInfo(\"id_4\",DateTime.now(ISOChronology.getInstanceUTC()),TaskStatus.success(\"id_4\"),\"deny\",getTaskWithIdAndDatasource(\"id_4\",\"deny\"))))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "EasyMock.expect(taskRunner.getKnownTasks()).andReturn(ImmutableList.of(new MockTaskRunnerWorkItem(\"id_1\",null),new MockTaskRunnerWorkItem(\"id_4\",null)))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testGetTasks['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "testSecuredGetWaitingTask['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "List<TaskStatusPlus> responseObjects = (List<TaskStatusPlus>)overlordResource.getWaitingTasks(req).getEntity()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "EasyMock.expect(taskRunner.getPendingTasks()).andReturn(ImmutableList.of(new MockTaskRunnerWorkItem(\"id_4\",null)))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "expectAuthorizationTokenCheck()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EasyMock.expect(taskRunner.getRunningTasks()).andReturn(ImmutableList.of(new MockTaskRunnerWorkItem(\"id_1\",null)))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(4,responseObjects.size())@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4->9 [style = bold, label=""];
1->4 [style = bold, label=""];
7->11 [style = bold, label=""];
2->1 [style = bold, label=""];
8->15 [style = dashed, label="0"];
0->2 [style = bold, label=""];
6->11 [style = dashed, label="0"];
16->7 [style = bold, label=""];
5->9 [style = dashed, label="0"];
7->0 [style = bold, label=""];
6->0 [style = bold, label=""];
9->8 [style = bold, label=""];
10->7 [style = bold, label=""];
0->14 [style = bold, label=""];
11->0 [style = bold, label=""];
2->14 [style = dashed, label="0"];
8->5 [style = bold, label=""];
3->7 [style = bold, label=""];
15->9 [style = bold, label=""];
7->6 [style = bold, label=""];
13->15 [style = bold, label=""];
9->12 [style = bold, label=""];
14->13 [style = bold, label=""];
}
