digraph {
11 [style = filled, label = "assertThat(processor.getDatabaseType(),equalTo(\"GeoLite2-Country\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(processor.getProperties(),sameInstance(GeoIpProcessor.Factory.DEFAULT_COUNTRY_PROPERTIES))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertFalse(processor.isIgnoreMissing())@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(localDatabases)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "testCountryBuildDefaults['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testCountryBuildDefaults['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertThat(processor.getField(),equalTo(\"_field\"))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(processor.getUaParser().getOsPatterns().size(),greaterThan(0))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertThat(processor.getUaParser().getDevicePatterns().size(),greaterThan(0))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(processor.getTag(),equalTo(processorTag))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "GeoIpProcessor processor = factory.create(null,processorTag,null,config)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Map<String,Object> config = new HashMap<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(processor.getProperties(),equalTo(EnumSet.allOf()))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "UserAgentProcessor processor = factory.create(null,processorTag,null,config)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "UserAgentProcessor.Factory factory = new UserAgentProcessor.Factory(userAgentParsers)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "String processorTag = randomAlphaOfLength(10)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "config.put(\"database_file\",\"GeoLite2-Country.mmdb\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertFalse(processor.isIgnoreMissing())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(processor.getTargetField(),equalTo(\"user_agent\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(processor.getTargetField(),equalTo(\"geoip\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(processor.getUaParser().getUaPatterns().size(),greaterThan(0))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "config.put(\"field\",\"_field\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testBuildDefaults['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
23->16 [style = bold, label=""];
8->16 [style = dashed, label="0"];
22->15 [style = bold, label=""];
1->8 [style = bold, label=""];
21->19 [style = bold, label=""];
4->2 [style = solid, label="processorTag"];
4->7 [style = solid, label="processorTag"];
4->18 [style = solid, label="processorTag"];
3->11 [style = bold, label=""];
7->0 [style = bold, label=""];
11->12 [style = bold, label=""];
4->18 [style = bold, label=""];
4->2 [style = bold, label=""];
9->10 [style = bold, label=""];
12->6 [style = bold, label=""];
8->13 [style = dashed, label="0"];
20->21 [style = bold, label=""];
15->17 [style = bold, label=""];
10->5 [style = bold, label=""];
12->19 [style = dashed, label="0"];
5->4 [style = bold, label=""];
3->20 [style = dashed, label="0"];
8->9 [style = bold, label=""];
2->18 [style = dashed, label="0"];
10->4 [style = bold, label=""];
9->18 [style = solid, label="config"];
0->20 [style = bold, label=""];
13->9 [style = bold, label=""];
2->7 [style = bold, label=""];
14->13 [style = bold, label=""];
18->7 [style = bold, label=""];
19->22 [style = bold, label=""];
16->9 [style = bold, label=""];
9->2 [style = solid, label="config"];
11->21 [style = dashed, label="0"];
}
