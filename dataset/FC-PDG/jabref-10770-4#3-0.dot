digraph {
34 [style = filled, label = "Assert.assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,false).equals(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann\" + (0 == 1? \"\": \" and \") + \"John Smith and Black Brown, Peter\",true,false)))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(\"J. P. von Neumann\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Peter von Neumann\",true,true))@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(\"Smith, John\",AuthorList.fixAuthorLastNameFirstCommas(\"John Smith\",false,false))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorLastNameFirstCommas(\"\",false,false))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(\"John Smith and Peter Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\",false,false))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorFirstNameFirstCommas(\"\",false,false))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(\"John von Neumann, John Smith, and Peter Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",false,true))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertEquals(\"J. Smith\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",true,true))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(a,b)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testFixAuthorLastNameFirstCommasNoComma['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "Assert.assertEquals(\"J. von Neumann, J. Smith and P. Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,false))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertTrue(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,true).equals(AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann\" + (0 == 1? \"\": \" and \") + \"John Smith and Black Brown, Peter\",true,true)))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(\"J. Smith and P. Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\",true,true))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(\"von Neumann, J., Smith, J. and Black Brown, P.\",AuthorList.fixAuthorLastNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,false))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorFirstNameFirstCommas(\"\",false,true))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(\"von Neumann, J. P.\",AuthorList.fixAuthorLastNameFirstCommas(\"John Peter von Neumann\",true,false))@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(a.equals(b))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(\"J. von Neumann, J. Smith, and P. Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,true))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(\"John Smith\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",false,true))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testFixAuthorLastNameFirstCommasNoComma['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(\"John Smith\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",false,false))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorLastNameFirstCommas(\"\",true,false))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "String b = AuthorList.fixAuthorLastNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,false)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "String a = AuthorList.fixAuthorLastNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",true,false)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(\"J. P. von Neumann\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Peter von Neumann\",true,false))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(\"Smith, J. and Black Brown, P.\",AuthorList.fixAuthorLastNameFirstCommas(\"John Smith and Black Brown, Peter\",true,false))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(\"Smith, J.\",AuthorList.fixAuthorLastNameFirstCommas(\"John Smith\",true,false))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(\"Smith, John and Black Brown, Peter\",AuthorList.fixAuthorLastNameFirstCommas(\"John Smith and Black Brown, Peter\",false,false))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String b = AuthorList.fixAuthorLastNameFirstCommas(\"John von Neumann\" + (0 == 1? \"\": \" and \") + \"John Smith and Black Brown, Peter\",true,false)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(\"J. Smith and P. Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\",true,false))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(\"John Smith and Peter Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith and Black Brown, Peter\",false,true))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(\"John von Neumann, John Smith and Peter Black Brown\",AuthorList.fixAuthorFirstNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",false,false))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorFirstNameFirstCommas(\"\",true,true))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(\"von Neumann, John, Smith, John and Black Brown, Peter\",AuthorList.fixAuthorLastNameFirstCommas(\"John von Neumann and John Smith and Black Brown, Peter\",false,false))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(\"J. Smith\",AuthorList.fixAuthorFirstNameFirstCommas(\"John Smith\",true,false))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(\"\",AuthorList.fixAuthorFirstNameFirstCommas(\"\",true,false))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "testFixAuthorFirstNameFirstCommas['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9->36 [style = dashed, label="0"];
14->6 [style = solid, label="b"];
4->10 [style = bold, label=""];
22->33 [style = bold, label=""];
11->2 [style = solid, label="b"];
7->12 [style = bold, label=""];
35->22 [style = bold, label=""];
11->6 [style = bold, label=""];
30->26 [style = bold, label=""];
0->11 [style = bold, label=""];
11->6 [style = solid, label="b"];
24->29 [style = bold, label=""];
21->25 [style = bold, label=""];
29->34 [style = bold, label=""];
0->6 [style = solid, label="a"];
13->19 [style = dashed, label="0"];
25->35 [style = bold, label=""];
10->29 [style = dashed, label="0"];
8->28 [style = dashed, label="0"];
34->30 [style = bold, label=""];
1->9 [style = bold, label=""];
19->24 [style = bold, label=""];
6->2 [style = bold, label=""];
26->16 [style = bold, label=""];
0->14 [style = bold, label=""];
28->21 [style = bold, label=""];
16->28 [style = bold, label=""];
8->5 [style = bold, label=""];
31->27 [style = bold, label=""];
20->23 [style = bold, label=""];
15->9 [style = bold, label=""];
6->26 [style = dashed, label="0"];
11->14 [style = dashed, label="0"];
2->16 [style = dashed, label="0"];
10->0 [style = bold, label=""];
14->2 [style = solid, label="b"];
27->17 [style = bold, label=""];
33->31 [style = bold, label=""];
32->36 [style = bold, label=""];
5->7 [style = bold, label=""];
0->34 [style = dashed, label="0"];
17->20 [style = bold, label=""];
12->3 [style = bold, label=""];
4->24 [style = dashed, label="0"];
11->30 [style = dashed, label="0"];
14->6 [style = bold, label=""];
2->8 [style = bold, label=""];
23->18 [style = bold, label=""];
36->19 [style = bold, label=""];
9->13 [style = bold, label=""];
13->4 [style = bold, label=""];
}
