digraph {
48 [style = filled, label = "Iterator<LogEntry> iter = batch.records().deepEntries().iterator()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "assertEquals(\"Values should match\",ByteBuffer.wrap(value),entry.record().value())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(\"Values should match\",ByteBuffer.wrap(value),entry.record().value())@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "assertEquals(1,batches.size())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "long lingerMs = 10L@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Deque<ProducerBatch> partitionBatches = accum.batches().get(tp1)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int batchSize = 1024@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "Iterator<Record> iter = batch.records().records().iterator()@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertEquals(\"No partitions should be ready.\",0,accum.ready(cluster,now).readyNodes.size())@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "int appends = expectedNumAppends(batchSize)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "testFull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
45 [style = filled, label = "RecordAccumulator accum = new RecordAccumulator(1024,10 * 1024,CompressionType.NONE,lingerMs,100L,metrics,time)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "int batchSize = 1025@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "assertEquals(\"No partitions should be ready\",0,accum.ready(cluster,time.milliseconds()).readyNodes.size())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Record record = iter.next()@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "int appends = batchSize / msgSize@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertEquals(2,partitionBatches.size())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(1,partitionBatches.size())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "List<ProducerBatch> batches = accum.drain(cluster,Collections.singleton(node1),Integer.MAX_VALUE,0).get(node1.id())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testFull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "ProducerBatch batch = partitionBatches.peekFirst()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Deque<ProducerBatch> partitionBatches = accum.batches().get(tp1)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "i++@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(1,batches.size())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "i < appends@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "ProducerBatch batch = batches.get(0)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Iterator<ProducerBatch> partitionBatchesIterator = partitionBatches.iterator()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertEquals(\"Values should match\",ByteBuffer.wrap(value),record.value())@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "assertFalse(\"No more records\",iter.hasNext())@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertTrue(partitionBatchesIterator.next().isWritable())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "time.sleep(10)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "LogEntry entry = iter.next()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "i < appends@@@29@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertEquals(\"Our partition's leader should be ready\",Collections.singleton(node1),accum.ready(cluster,time.milliseconds()).readyNodes)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "accum.append(tp1,0L,key,value,null,maxBlockTimeMs)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertFalse(\"No more records\",iter.hasNext())@@@34@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertFalse(partitionBatchesIterator.next().isWritable())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(\"Our partition's leader should be ready\",Collections.singleton(node1),accum.ready(cluster,time.milliseconds()).readyNodes)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertFalse(\"No more records\",iter.hasNext())@@@35@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
47 [style = filled, label = "assertEquals(\"Keys should match\",ByteBuffer.wrap(key),entry.record().key())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "int i = 0@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "accum.append(tp1,0L,key,value,null,maxBlockTimeMs)@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertTrue(partitionBatches.peekFirst().isWritable())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "assertEquals(\"Keys should match\",ByteBuffer.wrap(key),record.key())@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "i++@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "int i = 0@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ProducerBatch batch = batches.get(0)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "List<ProducerBatch> batches = accum.drain(cluster,Collections.singleton(node1),Integer.MAX_VALUE,0).get(node1.id())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "int i = 0@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "long now = time.milliseconds()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "RecordAccumulator accum = new RecordAccumulator(batchSize + DefaultRecordBatch.RECORD_BATCH_OVERHEAD,10L * batchSize,CompressionType.NONE,10L,100L,metrics,time,new ApiVersions())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "assertTrue(batch.isWritable())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "testLinger['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "RecordAccumulator accum = new RecordAccumulator(batchSize,10L * batchSize,CompressionType.NONE,10L,100L,metrics,time)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "assertEquals(\"No partitions should be ready.\",0,accum.ready(cluster,now).readyNodes.size())@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertEquals(\"Keys should match\",ByteBuffer.wrap(key),entry.record().key())@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "accum.append(tp1,0L,key,value,null,maxBlockTimeMs)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31->37 [style = bold, label=""];
24->27 [style = solid, label="i"];
5->9 [style = bold, label=""];
26->37 [style = dotted, label="true"];
55->49 [style = bold, label=""];
33->26 [style = solid, label="appends"];
6->38 [style = dashed, label="0"];
38->31 [style = bold, label=""];
9->10 [style = bold, label=""];
2->27 [style = solid, label="appends"];
46->48 [style = bold, label=""];
30->18 [style = bold, label=""];
1->45 [style = dashed, label="0"];
27->15 [style = bold, label=""];
1->2 [style = solid, label="batchSize"];
30->18 [style = solid, label="i"];
15->17 [style = bold, label=""];
48->43 [style = bold, label=""];
29->46 [style = bold, label=""];
42->3 [style = bold, label=""];
4->8 [style = bold, label=""];
2->24 [style = bold, label=""];
8->39 [style = bold, label=""];
24->27 [style = bold, label=""];
17->16 [style = bold, label=""];
10->11 [style = bold, label=""];
50->29 [style = bold, label=""];
35->18 [style = bold, label=""];
6->26 [style = solid, label="i"];
27->22 [style = dotted, label="true"];
51->54 [style = bold, label=""];
0->19 [style = bold, label=""];
25->3 [style = bold, label=""];
52->45 [style = bold, label=""];
28->27 [style = solid, label="i"];
40->34 [style = bold, label=""];
27->8 [style = dotted, label="true"];
27->21 [style = dotted, label="true"];
18->6 [style = dotted, label="true"];
56->51 [style = bold, label=""];
43->47 [style = bold, label=""];
27->29 [style = dotted, label="true"];
21->22 [style = bold, label=""];
18->26 [style = dotted, label="true"];
7->2 [style = bold, label=""];
19->26 [style = bold, label=""];
18->0 [style = dotted, label="true"];
53->56 [style = bold, label=""];
14->15 [style = bold, label=""];
26->6 [style = dotted, label="true"];
32->41 [style = solid, label="batchSize"];
2->33 [style = dashed, label="0"];
27->29 [style = bold, label=""];
26->18 [style = solid, label="i"];
18->6 [style = solid, label="i"];
27->40 [style = dotted, label="true"];
6->26 [style = bold, label=""];
2->18 [style = solid, label="appends"];
27->39 [style = dotted, label="true"];
18->23 [style = bold, label=""];
3->1 [style = bold, label=""];
27->14 [style = bold, label=""];
13->35 [style = dashed, label="0"];
18->26 [style = bold, label=""];
18->19 [style = dotted, label="true"];
22->28 [style = bold, label=""];
45->53 [style = bold, label=""];
1->32 [style = dashed, label="0"];
1->7 [style = bold, label=""];
27->4 [style = dotted, label="true"];
21->39 [style = dashed, label="0"];
34->28 [style = bold, label=""];
12->13 [style = bold, label=""];
26->31 [style = dotted, label="true"];
26->38 [style = dotted, label="true"];
18->6 [style = bold, label=""];
33->24 [style = bold, label=""];
39->40 [style = bold, label=""];
16->5 [style = bold, label=""];
32->41 [style = bold, label=""];
7->41 [style = dashed, label="0"];
41->33 [style = bold, label=""];
11->20 [style = bold, label=""];
52->45 [style = solid, label="lingerMs"];
29->4 [style = bold, label=""];
24->28 [style = solid, label="i"];
1->7 [style = solid, label="batchSize"];
27->34 [style = dotted, label="true"];
26->36 [style = bold, label=""];
30->26 [style = solid, label="i"];
6->0 [style = bold, label=""];
13->30 [style = bold, label=""];
37->6 [style = bold, label=""];
54->50 [style = bold, label=""];
26->38 [style = bold, label=""];
27->28 [style = dotted, label="true"];
18->26 [style = solid, label="i"];
32->33 [style = solid, label="batchSize"];
47->55 [style = bold, label=""];
20->12 [style = bold, label=""];
44->52 [style = bold, label=""];
0->31 [style = dashed, label="0"];
8->21 [style = bold, label=""];
28->27 [style = bold, label=""];
3->32 [style = bold, label=""];
13->35 [style = bold, label=""];
19->37 [style = dashed, label="0"];
26->18 [style = bold, label=""];
33->27 [style = solid, label="appends"];
}
