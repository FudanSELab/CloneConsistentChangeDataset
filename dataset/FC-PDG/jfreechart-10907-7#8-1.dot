digraph {
0 [style = filled, label = "XIntervalSeries s1 = new XIntervalSeries(\"Series\")@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "XIntervalSeriesCollection c1 = new XIntervalSeriesCollection()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "XIntervalSeriesCollection<String> c2 = CloneUtils.clone(c1)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertTrue(c1.getClass() == c2.getClass())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "XIntervalSeriesCollection c2 = CloneUtils.clone(c1)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "c1.addSeries(s1)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testSerialization['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "s1.add(1.0,1.1,1.2,1.3)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "XIntervalSeriesCollection<String> c1 = new XIntervalSeriesCollection<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "XIntervalSeries<String> s1 = new XIntervalSeries<>(\"Series\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "XIntervalSeriesCollection c2 = TestUtils.serialised(c1)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertTrue(c1 != c2)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(c1.equals(c2))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(c1,c2)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testCloning['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "s1.setDescription(\"XYZ\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testCloning['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertFalse(c1.equals(c2))@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9->3 [style = solid, label="c2"];
5->12 [style = dashed, label="0"];
8->16 [style = dashed, label="0"];
0->6 [style = bold, label=""];
2->3 [style = bold, label=""];
11->7 [style = solid, label="c2"];
11->3 [style = solid, label="c2"];
16->17 [style = bold, label=""];
9->7 [style = bold, label=""];
5->9 [style = solid, label="c1"];
15->5 [style = bold, label=""];
0->8 [style = solid, label="s1"];
0->14 [style = dashed, label="0"];
3->10 [style = bold, label=""];
14->8 [style = solid, label="s1"];
13->12 [style = bold, label=""];
5->0 [style = bold, label=""];
12->11 [style = solid, label="c1"];
5->17 [style = solid, label="c1"];
6->16 [style = bold, label=""];
7->2 [style = bold, label=""];
5->16 [style = solid, label="c1"];
11->1 [style = solid, label="c2"];
6->8 [style = bold, label=""];
12->14 [style = bold, label=""];
8->9 [style = bold, label=""];
16->17 [style = solid, label="c2"];
9->11 [style = dashed, label="0"];
5->7 [style = solid, label="c1"];
10->1 [style = bold, label=""];
12->7 [style = solid, label="c1"];
8->11 [style = bold, label=""];
4->5 [style = bold, label=""];
9->1 [style = solid, label="c2"];
14->6 [style = bold, label=""];
11->7 [style = bold, label=""];
9->7 [style = solid, label="c2"];
}
