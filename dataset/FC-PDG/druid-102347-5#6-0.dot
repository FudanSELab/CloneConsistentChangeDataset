digraph {
66 [style = filled, label = "Thread.sleep(10)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final Map<String,String> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "expectLastCall().anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "recordSupplier.close()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(null,baseSequenceName,startPartitions,endPartitions,true,null,null,\"awsEndpoint\",null,null,null,null,false))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "Assert.assertEquals(4,task.getRunner().getRowIngestionMeters().getUnparseable())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc5))@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "expect(recordSupplier.getEarliestSequenceNumber(anyObject())).andReturn(\"0\").anyTimes()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Assert.assertEquals(checkpoint1.getPartitionSequenceNumberMap(),currentOffsets)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
53 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(stream,currentOffsets)),new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(stream,nextOffsets)))))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "final SeekableStreamPartitions<String,String> checkpoint1 = new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"2\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "SegmentDescriptor desc4 = sd(task,\"2011/P1D\",0)@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "testIncrementalHandOff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
61 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@27@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@47@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2010/P1D\",0)@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "Assert.assertEquals(checkpoint1.getPartitionSequenceNumberMap(),currentOffsets)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "maxTotalRows = 3L@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "maxRecordsPerPoll = 1@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"9\",shardId0,\"1\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "recordSupplier.assign(anyObject())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "Thread.sleep(10)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testIncrementalHandOff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"4\",shardId0,\"0\"))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
70 [style = filled, label = "final SeekableStreamPartitions<String,String> checkpoint2 = new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"9\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final Map<String,String> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"10\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "final Map<String,String> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc7),publishedDescriptors())@@@47@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "expect(recordSupplier.poll(anyLong())).andReturn(records.subList(0,3)).once().andReturn(records.subList(2,10)).once().andReturn(records.subList(9,11))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "final SeekableStreamPartitions<String,String> startPartitions = new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"0\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(startPartitions),new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(stream,currentOffsets)))))@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(4,task.getRunner().getRowIngestionMeters().getUnparseable())@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final SeekableStreamPartitions<String,String> checkpoint1 = new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"4\",shardId0,\"0\"))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
58 [style = filled, label = "final SeekableStreamPartitions<String,String> endPartitions = new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"10\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "Assert.assertEquals(checkpoint2.getPartitionSequenceNumberMap(),nextOffsets)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> endPartitions = new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"9\",shardId0,\"1\"))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",desc4))@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "recordSupplier.seek(anyObject(),anyString())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "Assert.assertEquals(6,task.getRunner().getRowIngestionMeters().getProcessed())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Thread.sleep(10)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "SegmentDescriptor desc5 = sd(task,\"2049/P1D\",0)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final SeekableStreamPartitions<String,String> startPartitions = new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"0\",shardId0,\"0\"))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(startPartitions),new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(stream,currentOffsets)))))@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(null,baseSequenceName,startPartitions,endPartitions,true,null,null,\"awsEndpoint\",null,null,null,null,null,false))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final SeekableStreamPartitions<String,String> endPartitions = new SeekableStreamPartitions<>(stream,ImmutableMap.of(shardId1,\"9\",shardId0,\"1\"))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
51 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(startPartitions),new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(stream,currentOffsets)))))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
72 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@21@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "final SeekableStreamStartSequenceNumbers<String,String> startPartitions = new SeekableStreamStartSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"0\",shardId0,\"0\"),ImmutableSet.of())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expectLastCall().anyTimes()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "expectLastCall().once()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "replayAll()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "verifyAll()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(null,baseSequenceName,startPartitions,endPartitions,true,null,null,\"awsEndpoint\",null,null,null,null,null,false))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
69 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@54@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "maxRowsPerSegment = 2@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expect(recordSupplier.poll(anyLong())).andReturn(records.subList(0,5)).once().andReturn(records.subList(4,records.size())).once()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->30 [style = bold, label=""];
73->27 [style = bold, label=""];
24->60 [style = bold, label=""];
44->7 [style = solid, label="task"];
45->51 [style = solid, label="startPartitions"];
43->2 [style = solid, label="desc6"];
4->53 [style = bold, label=""];
31->9 [style = bold, label=""];
30->20 [style = bold, label=""];
6->35 [style = solid, label="desc1"];
24->32 [style = bold, label=""];
38->12 [style = bold, label=""];
44->7 [style = bold, label=""];
16->13 [style = solid, label="desc2"];
48->35 [style = bold, label=""];
53->54 [style = bold, label=""];
7->22 [style = solid, label="task"];
44->29 [style = solid, label="task"];
22->13 [style = solid, label="desc1"];
16->34 [style = solid, label="desc2"];
61->65 [style = dotted, label="true"];
3->5 [style = bold, label=""];
29->2 [style = bold, label=""];
62->77 [style = bold, label=""];
62->73 [style = solid, label="nextOffsets"];
10->75 [style = bold, label=""];
2->13 [style = dashed, label="0"];
12->44 [style = solid, label="startPartitions"];
54->6 [style = bold, label=""];
43->29 [style = bold, label=""];
56->70 [style = bold, label=""];
74->13 [style = solid, label="desc7"];
8->27 [style = bold, label=""];
52->7 [style = solid, label="task"];
7->11 [style = solid, label="task"];
5->70 [style = dashed, label="0"];
11->25 [style = bold, label=""];
13->63 [style = bold, label=""];
44->43 [style = solid, label="task"];
24->60 [style = dashed, label="0"];
59->64 [style = bold, label=""];
19->34 [style = bold, label=""];
16->40 [style = bold, label=""];
7->11 [style = bold, label=""];
28->18 [style = bold, label=""];
36->71 [style = bold, label=""];
24->60 [style = solid, label="currentOffsets"];
24->46 [style = dashed, label="0"];
21->41 [style = bold, label=""];
3->56 [style = dashed, label="0"];
34->31 [style = bold, label=""];
38->45 [style = bold, label=""];
20->38 [style = bold, label=""];
16->31 [style = solid, label="desc4"];
41->59 [style = bold, label=""];
29->1 [style = solid, label="desc7"];
38->57 [style = bold, label=""];
8->61 [style = bold, label=""];
42->51 [style = dashed, label="0"];
17->42 [style = solid, label="currentOffsets"];
23->37 [style = bold, label=""];
41->7 [style = solid, label="baseSequenceName"];
64->15 [style = bold, label=""];
22->2 [style = solid, label="desc3"];
57->4 [style = solid, label="startPartitions"];
10->0 [style = bold, label=""];
49->41 [style = bold, label=""];
5->44 [style = solid, label="endPartitions"];
40->31 [style = solid, label="desc5"];
11->17 [style = bold, label=""];
7->40 [style = solid, label="task"];
52->7 [style = bold, label=""];
65->61 [style = bold, label=""];
72->66 [style = dotted, label="true"];
9->1 [style = bold, label=""];
52->16 [style = solid, label="task"];
14->39 [style = bold, label=""];
36->42 [style = bold, label=""];
0->75 [style = dashed, label="0"];
40->31 [style = solid, label="desc3"];
11->72 [style = dashed, label="0"];
16->2 [style = solid, label="desc4"];
2->48 [style = bold, label=""];
9->55 [style = dashed, label="0"];
41->52 [style = solid, label="baseSequenceName"];
17->46 [style = bold, label=""];
17->51 [style = solid, label="currentOffsets"];
36->51 [style = bold, label=""];
12->45 [style = dashed, label="0"];
51->4 [style = bold, label=""];
37->10 [style = bold, label=""];
22->16 [style = bold, label=""];
61->65 [style = bold, label=""];
77->73 [style = bold, label=""];
55->69 [style = bold, label=""];
74->69 [style = solid, label="desc7"];
52->33 [style = solid, label="task"];
40->76 [style = dashed, label="0"];
43->76 [style = bold, label=""];
60->8 [style = bold, label=""];
43->13 [style = solid, label="desc4"];
13->48 [style = dashed, label="0"];
52->6 [style = solid, label="task"];
6->2 [style = solid, label="desc1"];
17->32 [style = solid, label="currentOffsets"];
40->2 [style = solid, label="desc5"];
24->4 [style = solid, label="currentOffsets"];
76->74 [style = bold, label=""];
42->4 [style = bold, label=""];
32->8 [style = bold, label=""];
58->7 [style = bold, label=""];
5->44 [style = bold, label=""];
18->6 [style = bold, label=""];
52->40 [style = solid, label="task"];
6->33 [style = bold, label=""];
72->24 [style = bold, label=""];
62->53 [style = solid, label="nextOffsets"];
63->67 [style = bold, label=""];
44->33 [style = solid, label="task"];
52->43 [style = solid, label="task"];
71->4 [style = bold, label=""];
13->63 [style = dashed, label="0"];
14->59 [style = dashed, label="0"];
17->24 [style = solid, label="currentOffsets"];
12->3 [style = bold, label=""];
22->67 [style = solid, label="desc1"];
40->43 [style = bold, label=""];
44->16 [style = solid, label="task"];
47->52 [style = bold, label=""];
45->52 [style = solid, label="startPartitions"];
46->32 [style = bold, label=""];
33->22 [style = bold, label=""];
61->62 [style = bold, label=""];
41->14 [style = bold, label=""];
76->13 [style = solid, label="desc5"];
36->71 [style = dashed, label="0"];
41->44 [style = solid, label="baseSequenceName"];
22->34 [style = solid, label="desc3"];
43->9 [style = solid, label="desc6"];
7->16 [style = solid, label="task"];
39->15 [style = bold, label=""];
27->36 [style = bold, label=""];
11->72 [style = bold, label=""];
62->77 [style = solid, label="nextOffsets"];
44->40 [style = solid, label="task"];
12->42 [style = solid, label="startPartitions"];
5->47 [style = dashed, label="0"];
24->53 [style = solid, label="currentOffsets"];
12->57 [style = dashed, label="0"];
35->19 [style = bold, label=""];
75->30 [style = bold, label=""];
52->22 [style = solid, label="task"];
40->13 [style = solid, label="desc3"];
33->2 [style = solid, label="desc2"];
24->8 [style = solid, label="currentOffsets"];
4->28 [style = bold, label=""];
44->6 [style = solid, label="task"];
29->2 [style = solid, label="desc7"];
47->52 [style = solid, label="endPartitions"];
15->26 [style = bold, label=""];
2->13 [style = bold, label=""];
9->55 [style = bold, label=""];
52->29 [style = solid, label="task"];
57->56 [style = bold, label=""];
58->7 [style = solid, label="endPartitions"];
76->55 [style = solid, label="desc5"];
43->9 [style = solid, label="desc4"];
57->7 [style = solid, label="startPartitions"];
17->24 [style = bold, label=""];
70->58 [style = bold, label=""];
11->25 [style = dotted, label="true"];
3->50 [style = dashed, label="0"];
7->74 [style = solid, label="task"];
25->11 [style = bold, label=""];
45->50 [style = bold, label=""];
50->47 [style = bold, label=""];
26->23 [style = bold, label=""];
7->76 [style = solid, label="task"];
17->46 [style = solid, label="currentOffsets"];
7->43 [style = solid, label="task"];
66->72 [style = bold, label=""];
72->66 [style = bold, label=""];
68->41 [style = bold, label=""];
13->35 [style = bold, label=""];
74->13 [style = bold, label=""];
33->19 [style = solid, label="desc2"];
67->34 [style = bold, label=""];
44->52 [style = dashed, label="0"];
44->22 [style = solid, label="task"];
}
