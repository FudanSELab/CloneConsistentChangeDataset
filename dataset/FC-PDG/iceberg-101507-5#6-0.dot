digraph {
5 [style = filled, label = "canContainNulls(id)@@@6@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "gt['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "canContainNulls(id) || canContainNaNs(id)@@@6@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Types.NestedField field = struct.field(id)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "T upper = Conversions.fromByteBuffer(field.type(),upperBounds.get(id))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "return ROWS_MIGHT_NOT_MATCH@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Preconditions.checkNotNull(field,\"Cannot filter by nested column: %s\",schema.findField(id))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "cmp <= 0@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ltEq['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "BoundReference<T> ref@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "cmp > 0@@@12@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "BoundReference<T> ref@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Integer id = ref.fieldId()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "lowerBounds != null && lowerBounds.containsKey(id)@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "return ROWS_MIGHT_NOT_MATCH@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Literal<T> lit@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "upperBounds != null && upperBounds.containsKey(id)@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ltEq['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "BoundReference<T> ref@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "int cmp = lit.comparator().compare(lower,lit.value())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "int cmp = lit.comparator().compare(upper,lit.value())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Literal<T> lit@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "return ROWS_MUST_MATCH@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "T lower = Conversions.fromByteBuffer(field.type(),lowerBounds.get(id))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20->23 [style = bold, label=""];
5->16 [style = dashed, label="0"];
20->3 [style = bold, label=""];
8->0 [style = bold, label=""];
4->16 [style = bold, label=""];
9->7 [style = dotted, label="true"];
22->3 [style = bold, label=""];
4->5 [style = bold, label=""];
9->11 [style = dotted, label="true"];
9->3 [style = bold, label=""];
7->12 [style = dotted, label="true"];
0->1 [style = solid, label="id"];
1->4 [style = solid, label="field"];
8->6 [style = dotted, label="true"];
17->22 [style = solid, label="cmp"];
5->13 [style = dotted, label="true"];
20->17 [style = dotted, label="true"];
8->2 [style = dotted, label="true"];
10->11 [style = bold, label=""];
16->13 [style = dotted, label="true"];
5->9 [style = bold, label=""];
16->13 [style = bold, label=""];
11->17 [style = dashed, label="0"];
0->20 [style = solid, label="id"];
0->1 [style = bold, label=""];
15->6 [style = dotted, label="true"];
5->13 [style = bold, label=""];
9->10 [style = dotted, label="true"];
20->23 [style = dotted, label="true"];
23->17 [style = solid, label="lower"];
11->7 [style = bold, label=""];
7->3 [style = bold, label=""];
15->0 [style = bold, label=""];
7->12 [style = bold, label=""];
18->21 [style = dotted, label="true"];
7->22 [style = dashed, label="0"];
12->3 [style = bold, label=""];
0->4 [style = solid, label="id"];
5->20 [style = bold, label=""];
20->22 [style = dotted, label="true"];
18->19 [style = dotted, label="true"];
10->11 [style = solid, label="upper"];
9->20 [style = dashed, label="0"];
1->4 [style = bold, label=""];
11->7 [style = solid, label="cmp"];
6->21 [style = dashed, label="0"];
0->16 [style = solid, label="id"];
17->22 [style = bold, label=""];
13->9 [style = bold, label=""];
13->20 [style = bold, label=""];
0->9 [style = solid, label="id"];
22->12 [style = bold, label=""];
15->14 [style = dotted, label="true"];
22->12 [style = dotted, label="true"];
0->23 [style = solid, label="id"];
23->17 [style = bold, label=""];
18->0 [style = bold, label=""];
10->23 [style = dashed, label="0"];
9->10 [style = bold, label=""];
0->5 [style = solid, label="id"];
16->9 [style = bold, label=""];
0->10 [style = solid, label="id"];
}
