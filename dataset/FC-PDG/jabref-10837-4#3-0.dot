digraph {
14 [style = filled, label = "TreeNodeTestData.TreeNodeMock child3 = new TreeNodeTestData.TreeNodeMock(\"c\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "TreeNodeMock child1 = new TreeNodeMock(\"a\")@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TreeNodeMock child2 = new TreeNodeMock(\"b\")@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "TreeNodeTestData.TreeNodeMock node = TreeNodeTestData.getNodeInSimpleTree(root)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "root.addChild(child2)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "root.sortChildren(null,true)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "root.sortChildren(null,false)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(Arrays.asList(child1,child2,child3),node.getChildren())@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "sortChildrenRecursiveSortsInDeeperLevel['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "TreeNodeMock root = new TreeNodeMock()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "TreeNodeTestData.TreeNodeMock child1 = new TreeNodeTestData.TreeNodeMock(\"a\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "root.addChild(child3)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "TreeNodeTestData.TreeNodeMock child2 = new TreeNodeTestData.TreeNodeMock(\"b\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "node.addChild(child3)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "sortChildrenRecursiveSortsInDeeperLevel['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TreeNodeTestData.TreeNodeMock root = new TreeNodeTestData.TreeNodeMock()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "root.addChild(child1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "node.addChild(child2)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "TreeNodeMock node = getNodeInSimpleTree(root)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "TreeNodeMock child3 = new TreeNodeMock(\"c\")@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "node.addChild(child1)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "sortChildrenSortsInFirstLevel['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(Arrays.asList(child1,child2,child3),root.getChildren())@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8->5 [style = solid, label="child2"];
0->17 [style = solid, label="child3"];
5->9 [style = bold, label=""];
3->1 [style = bold, label=""];
11->14 [style = bold, label=""];
7->10 [style = bold, label=""];
0->19 [style = bold, label=""];
14->4 [style = solid, label="child3"];
2->6 [style = bold, label=""];
8->4 [style = solid, label="child2"];
6->21 [style = solid, label="child1"];
22->21 [style = bold, label=""];
8->21 [style = solid, label="child2"];
0->21 [style = solid, label="child3"];
7->20 [style = dashed, label="0"];
6->4 [style = solid, label="child1"];
19->17 [style = bold, label=""];
10->22 [style = dashed, label="0"];
14->9 [style = solid, label="child3"];
9->7 [style = bold, label=""];
4->21 [style = dashed, label="0"];
8->19 [style = solid, label="child2"];
12->13 [style = solid, label="root"];
20->22 [style = bold, label=""];
8->0 [style = bold, label=""];
0->14 [style = dashed, label="0"];
0->4 [style = solid, label="child3"];
12->13 [style = bold, label=""];
11->4 [style = solid, label="child2"];
1->12 [style = dashed, label="0"];
1->2 [style = solid, label="root"];
1->6 [style = bold, label=""];
11->5 [style = solid, label="child2"];
15->11 [style = bold, label=""];
18->1 [style = bold, label=""];
6->15 [style = dashed, label="0"];
2->13 [style = dashed, label="0"];
15->4 [style = solid, label="child1"];
9->17 [style = dashed, label="0"];
6->8 [style = bold, label=""];
0->9 [style = solid, label="child3"];
10->4 [style = bold, label=""];
17->20 [style = bold, label=""];
15->7 [style = solid, label="child1"];
1->2 [style = bold, label=""];
13->15 [style = bold, label=""];
6->7 [style = solid, label="child1"];
8->11 [style = dashed, label="0"];
5->19 [style = dashed, label="0"];
16->12 [style = bold, label=""];
0->5 [style = bold, label=""];
6->20 [style = solid, label="child1"];
14->5 [style = bold, label=""];
}
