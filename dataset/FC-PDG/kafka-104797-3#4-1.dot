digraph {
2 [style = filled, label = "Capture<Callback<Collection<String>>> callback = EasyMock.newCapture()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "herder.connectors(EasyMock.capture(callback))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "EasyMock.replay(herder)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "connectors['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "EasyMock.expectLastCall().andAnswer(new IAnswer<Void>(){@Override public Void answer(){Throwable timeout = new TimeoutException()callback.getValue().onCompletion(timeout,null)return null}})@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "EasyMock.replay(herder)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "connectors['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThrows(,null)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "connectorsFailure['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "EasyMock.expectLastCall().andAnswer(null)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(expectedConnectors,connectClusterState.connectors())@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1->3 [style = bold, label=""];
0->3 [style = bold, label=""];
4->8 [style = bold, label=""];
3->10 [style = bold, label=""];
1->8 [style = dashed, label="0"];
5->2 [style = bold, label=""];
4->1 [style = bold, label=""];
8->6 [style = bold, label=""];
6->0 [style = bold, label=""];
3->10 [style = dashed, label="0"];
1->0 [style = bold, label=""];
2->4 [style = bold, label=""];
7->2 [style = bold, label=""];
2->4 [style = solid, label="callback"];
9->2 [style = bold, label=""];
}
