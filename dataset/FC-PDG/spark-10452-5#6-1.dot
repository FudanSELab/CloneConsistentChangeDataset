digraph {
8 [style = filled, label = "model = KMeans.train(data.rdd(),1,1,1,KMeans.RANDOM())@@@21@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<double((> points = new ArrayList<double((>()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "JavaRDD<Vector> data = sc.parallelize(points,2)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(1,model.clusterCenters().length)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "runKMeansUsingConstructor['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "runKMeansUsingStaticMethods['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "double(((( expectedCenter = {{1.0,3.0,4.0}}@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Vector expectedCenter = Vectors.dense(1.0,3.0,4.0)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "model = KMeans.train(data.rdd(),1,1,1,KMeans.RANDOM())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertSetsEqual(model.clusterCenters(),expectedCenter)@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "KMeansModel model = KMeans.train(data.rdd(),1,1,1,KMeans.K_MEANS_PARALLEL())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertSetsEqual(model.clusterCenters(),expectedCenter)@@@22@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "points.add(new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a67d2b)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "points.add(new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a67d35)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "model = new KMeans().setK(1).setMaxIterations(1).setRuns(1).setInitializationMode(KMeans.RANDOM()).run(data.rdd())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(expectedCenter,model.clusterCenters()(0()@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "points.add(new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a67d3f)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "KMeansModel model = KMeans.train(data.rdd(),1,1)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "JavaRDD<double((> data = sc.parallelize(points,2)@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "List<Vector> points = Lists.newArrayList(Vectors.dense(1.0,2.0,6.0),Vectors.dense(1.0,3.0,0.0),Vectors.dense(1.0,4.0,6.0))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "runKMeansUsingStaticMethods['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertEquals(expectedCenter,model.clusterCenters()(0()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18->15 [style = solid, label="points"];
7->1 [style = bold, label=""];
1->8 [style = bold, label=""];
5->20 [style = bold, label=""];
21->6 [style = bold, label=""];
3->18 [style = dashed, label="0"];
18->11 [style = bold, label=""];
12->17 [style = bold, label=""];
7->20 [style = dashed, label="0"];
8->6 [style = bold, label=""];
6->17 [style = dashed, label="0"];
4->2 [style = bold, label=""];
20->1 [style = bold, label=""];
8->21 [style = dashed, label="0"];
15->19 [style = bold, label=""];
13->16 [style = bold, label=""];
11->15 [style = bold, label=""];
3->0 [style = bold, label=""];
22->3 [style = bold, label=""];
11->16 [style = solid, label="expectedCenter"];
0->10 [style = bold, label=""];
3->5 [style = solid, label="points"];
19->13 [style = bold, label=""];
1->21 [style = bold, label=""];
2->1 [style = solid, label="expectedCenter"];
10->4 [style = bold, label=""];
9->3 [style = bold, label=""];
5->7 [style = bold, label=""];
11->17 [style = solid, label="expectedCenter"];
14->18 [style = bold, label=""];
16->12 [style = bold, label=""];
2->6 [style = solid, label="expectedCenter"];
2->5 [style = bold, label=""];
}
