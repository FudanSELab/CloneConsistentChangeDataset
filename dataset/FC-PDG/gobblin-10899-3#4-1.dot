digraph {
11 [style = filled, label = "testSingleOutputIterable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "RecordStreamWithMetadata<Integer,String> stream = new RecordStreamWithMetadata<>(Flowable.just(new RecordEnvelope<>(2)),\"schema\").mapRecords(null)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "converter.processStream(stream,new WorkUnitState()).getRecordStream().subscribe(null)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "outputRecords.get(0).ack()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(ackable.acked,0)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "RecordStreamWithMetadata<Integer,String> stream = new RecordStreamWithMetadata<>(Flowable.just(new RecordEnvelope<>(1)),GlobalMetadata.builder().schema(\"schema\").build()).mapRecords(null)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "RecordStreamWithMetadata<Integer,String> stream = new RecordStreamWithMetadata<>(Flowable.just(new RecordEnvelope<>(1)),\"schema\").mapRecords(null)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "BasicAckableForTesting ackable = new BasicAckableForTesting()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(outputRecords.size(),2)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "MyConverter converter = new MyConverter()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(ackable.acked,1)@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testSingleOutputIterable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testMultiOutputIterable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(ackable.acked,0)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "outputRecords.get(1).ack()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(outputRecords.size(),1)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "List<StreamEntity<Integer>> outputRecords = Lists.newArrayList()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->10 [style = bold, label=""];
0->9 [style = bold, label=""];
7->16 [style = dashed, label="0"];
0->12 [style = bold, label=""];
4->13 [style = bold, label=""];
1->10 [style = dashed, label="0"];
10->6 [style = bold, label=""];
6->2 [style = bold, label=""];
1->13 [style = dashed, label="0"];
7->5 [style = bold, label=""];
1->6 [style = bold, label=""];
5->0 [style = bold, label=""];
3->8 [style = bold, label=""];
12->14 [style = bold, label=""];
16->5 [style = bold, label=""];
11->8 [style = bold, label=""];
14->9 [style = bold, label=""];
4->1 [style = bold, label=""];
8->4 [style = bold, label=""];
2->7 [style = bold, label=""];
13->6 [style = bold, label=""];
15->8 [style = bold, label=""];
2->16 [style = bold, label=""];
}
