digraph {
8 [style = filled, label = "metadata.putCustom(PersistentTasksCustomMetadata.TYPE,tasks.build())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "when(client.threadPool()).thenReturn(threadPool)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(executor.executions.size(),equalTo(0))@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "client = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "ClusterState state = createInitialClusterState(0,Settings.EMPTY)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "when(action.getTaskName()).thenReturn(TestPersistentTasksExecutor.NAME)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "tasks.addTask(UUIDs.base64UUID(),TestPersistentTasksExecutor.NAME,new TestParams(\"this_param\"),new Assignment(\"this_node\",\"test assignment on this node\"))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "MockExecutor executor = new MockExecutor()@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "PersistentTasksNodeService coordinator = new PersistentTasksNodeService(persistentTasksService,registry,new TaskManager(Settings.EMPTY,threadPool,Collections.emptySet()),executor)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "PersistentTasksExecutorRegistry registry = new PersistentTasksExecutorRegistry(Collections.singletonList(action))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ClusterState newClusterState = ClusterState.builder(state).metadata(metadata).build()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "@SuppressWarnings(\"unchecked\") PersistentTasksExecutor<TestParams> action = mock()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "when(mockClient.settings()).thenReturn(Settings.EMPTY)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "CountDownLatch latch = new CountDownLatch(1)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final ThreadPool threadPool = mock()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "when(threadPool.generic()).thenReturn(EsExecutors.DIRECT_EXECUTOR_SERVICE)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "PersistentTasksService persistentTasksService = new PersistentTasksService(null,null,mockClient){@Override public void sendCompletionRequest(String taskId,long taskAllocationId,Exception taskFailure,String localAbortReason,ActionListener<PersistentTask<?>> listener){assertThat(taskFailure,instanceOf())assertThat(taskFailure.getMessage(),equalTo(\"Something went wrong\"))assertThat(localAbortReason,nullValue())listener.onResponse(mock())latch.countDown()}@Override public void validateLocalAbortSupported(){if (isLocalAbortSupported() == false) {fail(\"this test should not cover local abort\")}}@Override public boolean isLocalAbortSupported(){return randomBoolean()}}@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testRegisterTaskFails['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "when(action.getExecutor()).thenReturn(ThreadPool.Names.SAME)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "when(action.createTask(anyLong(),anyString(),anyString(),any(),any(),any())).thenThrow(new RuntimeException(\"Something went wrong\"))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "setUpManager['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "coordinator.clusterChanged(new ClusterChangedEvent(\"test\",newClusterState,state))@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "when(threadPool.getThreadContext()).thenReturn(new ThreadContext(Settings.EMPTY))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "when(mockClient.threadPool()).thenReturn(threadPool)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "when(client.settings()).thenReturn(Settings.EMPTY)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Metadata.Builder metadata = Metadata.builder(state.metadata())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final Client mockClient = mock()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertTrue(latch.await(5,TimeUnit.SECONDS))@@@43@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testRegisterTaskFails['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "PersistentTasksCustomMetadata.Builder tasks = PersistentTasksCustomMetadata.builder()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->5 [style = bold, label=""];
9->11 [style = bold, label=""];
22->24 [style = dashed, label="0"];
1->11 [style = solid, label="mockClient"];
26->24 [style = solid, label="threadPool"];
17->21 [style = bold, label=""];
15->13 [style = solid, label="executor"];
25->7 [style = bold, label=""];
12->4 [style = bold, label=""];
28->26 [style = bold, label=""];
26->20 [style = bold, label=""];
29->28 [style = bold, label=""];
23->16 [style = bold, label=""];
20->13 [style = solid, label="threadPool"];
6->17 [style = bold, label=""];
4->8 [style = bold, label=""];
8->6 [style = bold, label=""];
22->9 [style = bold, label=""];
10->3 [style = bold, label=""];
24->22 [style = bold, label=""];
0->24 [style = bold, label=""];
16->2 [style = bold, label=""];
3->23 [style = bold, label=""];
14->17 [style = solid, label="state"];
6->17 [style = solid, label="newClusterState"];
11->10 [style = bold, label=""];
21->18 [style = bold, label=""];
15->13 [style = bold, label=""];
5->12 [style = bold, label=""];
24->27 [style = bold, label=""];
7->1 [style = bold, label=""];
19->7 [style = bold, label=""];
20->0 [style = bold, label=""];
1->20 [style = bold, label=""];
13->14 [style = bold, label=""];
10->2 [style = solid, label="action"];
2->15 [style = bold, label=""];
9->27 [style = dashed, label="0"];
20->22 [style = solid, label="threadPool"];
2->13 [style = solid, label="registry"];
11->13 [style = solid, label="persistentTasksService"];
}
