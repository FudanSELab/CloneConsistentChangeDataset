digraph {
1 [style = filled, label = "assertEquals(2,rebalanceListener.revokedCount)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "subscriptions.subscribe(new HashSet<>(Arrays.asList(topic1,otherTopic)),rebalanceListener)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(2,rebalanceListener.revokedCount)@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Set<TopicPartition> newAssignmentSet = new HashSet<>(newAssignment)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "Map<String,List<String>> updatedSubscriptions = singletonMap(consumerId,Arrays.asList(topic1,topic2))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(1,rebalanceListener.revokedCount)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
50 [style = filled, label = "metadata.update(TestUtils.singletonCluster(topic1,1),Collections.emptySet(),time.milliseconds())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "metadata.needMetadataForAllTopics(true)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "client.prepareResponse(new MockClient.RequestMatcher(){@Override public boolean matches(AbstractRequest body){final Map<String,Integer> updatedPartitions = new HashMap<>()for (String topic : updatedSubscription)updatedPartitions.put(topic,1)metadata.update(TestUtils.clusterWith(1,updatedPartitions),Collections.emptySet(),time.milliseconds())return true}},syncGroupResponse(singletonList(t1p),Errors.NONE))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "coordinator.ensureCoordinatorReady()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "coordinator.poll(time.milliseconds(),Long.MAX_VALUE)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.revoked)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "client.prepareResponse(groupCoordinatorResponse(node,Errors.NONE))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "client.prepareResponse(joinGroupFollowerResponse(2,\"consumer\",\"leader\",Errors.NONE))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertFalse(coordinator.needRejoin())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "subscriptions.subscribe(singleton(topic1),rebalanceListener)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "coordinator.ensureCoordinatorReady()@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.revoked)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.assigned)@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(1,rebalanceListener.assignedCount)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "assertEquals(2,rebalanceListener.assignedCount)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "final List<String> updatedSubscription = Arrays.asList(topic1,topic2)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "partitionAssignor.prepare(singletonMap(consumerId,singletonList(t1p)))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "final String consumerId = \"leader\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(2,rebalanceListener.revokedCount)@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "client.prepareResponse(joinGroupLeaderResponse(1,consumerId,initialSubscription,Errors.NONE))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(2,rebalanceListener.assignedCount)@@@20@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "client.prepareResponse(new MockClient.RequestMatcher(){@Override public boolean matches(AbstractRequest body){JoinGroupRequest join = (JoinGroupRequest)bodyProtocolMetadata protocolMetadata = join.groupProtocols().iterator().next()PartitionAssignor.Subscription subscription = ConsumerProtocol.deserializeSubscription(protocolMetadata.metadata())protocolMetadata.metadata().rewind()return subscription.topics().containsAll(updatedSubscriptionSet)}},joinGroupLeaderResponse(2,consumerId,updatedSubscriptions,Errors.NONE))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertTrue(rebalanceListener.revoked.isEmpty())@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "testRejoinGroup['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "subscriptions.subscribe(Pattern.compile(\".*\"),rebalanceListener)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertEquals(newAssignmentSet,subscriptions.assignedPartitions())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "testMetadataRefreshDuringRebalance['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Map<String,List<String>> initialSubscription = singletonMap(consumerId,singletonList(topic1))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "String otherTopic = \"otherTopic\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "List<TopicPartition> newAssignment = Arrays.asList(t1p,t2p)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "client.prepareResponse(joinGroupFollowerResponse(1,\"consumer\",\"leader\",Errors.NONE))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "client.prepareResponse(groupCoordinatorResponse(node,Errors.NONE))@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(2,rebalanceListener.assignedCount)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.revoked)@@@19@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "client.prepareResponse(syncGroupResponse(newAssignment,Errors.NONE))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "final Set<String> updatedSubscriptionSet = new HashSet<>(updatedSubscription)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(singleton(topic1),subscriptions.subscription())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "client.prepareResponse(syncGroupResponse(singletonList(t1p),Errors.NONE))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.assigned)@@@21@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "coordinator.joinGroupIfNeeded()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "joinAsFollowerAndReceiveAssignment(\"consumer\",coordinator,singletonList(t1p))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "assertEquals(singleton(t1p),rebalanceListener.assigned)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "testRejoinGroup['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "partitionAssignor.prepare(singletonMap(consumerId,newAssignment))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "assertEquals(newAssignmentSet,rebalanceListener.assigned)@@@46@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(updatedSubscriptionSet,subscriptions.subscription())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50->26 [style = bold, label=""];
30->38 [style = bold, label=""];
15->2 [style = bold, label=""];
36->51 [style = bold, label=""];
34->46 [style = bold, label=""];
7->1 [style = bold, label=""];
44->36 [style = bold, label=""];
47->29 [style = solid, label="newAssignment"];
49->30 [style = solid, label="updatedSubscriptions"];
47->42 [style = bold, label=""];
29->30 [style = bold, label=""];
37->27 [style = bold, label=""];
30->33 [style = solid, label="subscription"];
45->49 [style = solid, label="consumerId"];
17->9 [style = bold, label=""];
28->31 [style = bold, label=""];
18->11 [style = bold, label=""];
27->44 [style = bold, label=""];
42->37 [style = solid, label="newAssignmentSet"];
8->14 [style = bold, label=""];
35->32 [style = bold, label=""];
42->51 [style = solid, label="newAssignmentSet"];
1->18 [style = bold, label=""];
11->12 [style = bold, label=""];
6->24 [style = bold, label=""];
13->39 [style = bold, label=""];
40->34 [style = bold, label=""];
45->41 [style = solid, label="consumerId"];
9->10 [style = bold, label=""];
45->28 [style = bold, label=""];
45->30 [style = solid, label="consumerId"];
16->19 [style = bold, label=""];
20->25 [style = bold, label=""];
10->7 [style = bold, label=""];
3->4 [style = bold, label=""];
25->17 [style = bold, label=""];
0->15 [style = bold, label=""];
32->33 [style = bold, label=""];
14->17 [style = solid, label="otherTopic"];
2->13 [style = bold, label=""];
23->14 [style = bold, label=""];
31->50 [style = bold, label=""];
6->28 [style = dashed, label="0"];
6->5 [style = bold, label=""];
13->17 [style = bold, label=""];
26->2 [style = bold, label=""];
48->45 [style = bold, label=""];
43->47 [style = bold, label=""];
19->51 [style = dashed, label="0"];
5->0 [style = bold, label=""];
24->21 [style = bold, label=""];
22->20 [style = bold, label=""];
21->22 [style = bold, label=""];
41->40 [style = bold, label=""];
14->45 [style = dashed, label="0"];
47->42 [style = solid, label="newAssignment"];
47->38 [style = solid, label="newAssignment"];
39->41 [style = bold, label=""];
42->49 [style = bold, label=""];
45->29 [style = solid, label="consumerId"];
40->34 [style = solid, label="updatedSubscription"];
12->3 [style = bold, label=""];
34->33 [style = solid, label="updatedSubscriptionSet"];
2->41 [style = dashed, label="0"];
45->46 [style = solid, label="consumerId"];
45->39 [style = solid, label="consumerId"];
38->35 [style = bold, label=""];
33->37 [style = bold, label=""];
39->46 [style = solid, label="initialSubscription"];
34->30 [style = solid, label="updatedSubscriptionSet"];
14->6 [style = bold, label=""];
40->43 [style = solid, label="updatedSubscription"];
4->16 [style = bold, label=""];
14->1 [style = solid, label="otherTopic"];
49->29 [style = bold, label=""];
46->43 [style = bold, label=""];
}
