digraph {
0 [style = filled, label = "check(Boolean.FALSE,node,expected)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testNonBooleans['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testNonBooleans['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "String expected = node.toString()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "RexNode node = rexBuilder.makeCall(SqlStdOperatorTable.OR,x,y)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "check(null,node,expected)@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "RexNode node = rexBuilder.makeCall(SqlStdOperatorTable.PLUS,x,y)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "testOrUnchanged['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "RexNode node = plus(x,y)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "check(Boolean.TRUE,node,expected)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->5 [style = solid, label="expected"];
3->6 [style = dashed, label="0"];
2->3 [style = bold, label=""];
4->0 [style = solid, label="expected"];
3->0 [style = solid, label="node"];
3->1 [style = solid, label="node"];
9->8 [style = bold, label=""];
3->4 [style = bold, label=""];
6->1 [style = solid, label="node"];
8->1 [style = solid, label="node"];
6->4 [style = bold, label=""];
3->5 [style = solid, label="node"];
8->0 [style = solid, label="node"];
4->1 [style = solid, label="expected"];
5->0 [style = bold, label=""];
0->1 [style = bold, label=""];
7->6 [style = bold, label=""];
6->5 [style = solid, label="node"];
3->8 [style = dashed, label="0"];
8->5 [style = solid, label="node"];
8->4 [style = bold, label=""];
6->0 [style = solid, label="node"];
4->5 [style = bold, label=""];
}
