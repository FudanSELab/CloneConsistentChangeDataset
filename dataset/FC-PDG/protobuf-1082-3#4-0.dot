digraph {
11 [style = filled, label = "assertEquals(TestAllTypes.OneofFieldCase.ONEOF_INT32,message.getOneofFieldCase())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "TestRepeatedFieldsOnly repeatedOnlyMessage = TestRepeatedFieldsOnly.parseFrom(data)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(\"hello\",optionalOnlyMessage.getOptionalString())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(message.getOptionalNestedEnum()).isEqualTo(TestAllTypes.NestedEnum.FOO)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "builder.setOptionalString(\"hello\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"hello\",message.getOptionalString())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "assertEquals(4321,repeatedOnlyMessage.getRepeatedInt32(0))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "TestOptionalFieldsOnly optionalOnlyMessage = TestOptionalFieldsOnly.parseFrom(data)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(message.getOptionalBytes()).isEqualTo(ByteString.EMPTY)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertEquals(1,repeatedOnlyMessage.getRepeatedNestedMessageCount())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "builder.addRepeatedInt32(4321)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ByteString data = builder.build().toByteString()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testSerializeAndParse['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertThat(message.getOptionalString()).isEqualTo(\"hello\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "assertTrue(optionalOnlyMessage.hasOptionalNestedMessage())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(message.getOneofFieldCase()).isEqualTo(TestAllTypes.OneofFieldCase.ONEOF_INT32)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertTrue(message.hasOptionalNestedMessage())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertEquals(0,repeatedOnlyMessage.getRepeatedNestedMessage(0).getValue())@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(ByteString.EMPTY,message.getOptionalBytes())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "builder.setOptionalNestedMessage(TestAllTypes.NestedMessage.getDefaultInstance())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(0,optionalOnlyMessage.getOptionalNestedMessage().getValue())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "builder.addRepeatedNestedMessage(TestAllTypes.NestedMessage.getDefaultInstance())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "builder.addRepeatedString(\"world\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "builder.setOneofInt32(0)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(1,repeatedOnlyMessage.getRepeatedInt32Count())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(0,message.getOptionalNestedMessage().getValue())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "ByteString data = builder.build().toByteString()@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(message.hasOptionalNestedMessage()).isTrue()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testSerializeAndParse['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(message.getOptionalInt32()).isEqualTo(1234)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "assertEquals(1,repeatedOnlyMessage.getRepeatedStringCount())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "TestAllTypes.Builder builder = TestAllTypes.newBuilder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(TestAllTypes.NestedEnum.FOO,message.getOptionalNestedEnum())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "TestAllTypes message = TestAllTypes.parseFrom(data)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "builder.setOptionalInt32(1234)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(1234,optionalOnlyMessage.getOptionalInt32())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "testRepeatedFields['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(\"world\",repeatedOnlyMessage.getRepeatedString(0))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertThat(message.getOptionalNestedMessage().getValue()).isEqualTo(0)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3->29 [style = dashed, label="0"];
9->20 [style = dashed, label="0"];
14->3 [style = bold, label=""];
10->15 [style = dashed, label="0"];
35->27 [style = bold, label=""];
27->1 [style = bold, label=""];
8->16 [style = dashed, label="0"];
0->19 [style = bold, label=""];
19->20 [style = bold, label=""];
4->13 [style = bold, label=""];
28->38 [style = bold, label=""];
26->34 [style = bold, label=""];
1->19 [style = dashed, label="0"];
9->28 [style = dashed, label="0"];
3->6 [style = bold, label=""];
30->32 [style = bold, label=""];
34->31 [style = bold, label=""];
31->36 [style = bold, label=""];
6->0 [style = bold, label=""];
7->4 [style = bold, label=""];
9->10 [style = bold, label=""];
1->32 [style = dashed, label="0"];
1->30 [style = bold, label=""];
15->16 [style = bold, label=""];
36->33 [style = bold, label=""];
5->34 [style = dashed, label="0"];
12->7 [style = bold, label=""];
37->7 [style = bold, label=""];
1->9 [style = bold, label=""];
17->7 [style = bold, label=""];
6->0 [style = solid, label="data"];
22->18 [style = bold, label=""];
10->8 [style = bold, label=""];
8->2 [style = bold, label=""];
2->21 [style = dashed, label="0"];
21->22 [style = bold, label=""];
11->18 [style = dashed, label="0"];
0->1 [style = bold, label=""];
16->21 [style = bold, label=""];
33->24 [style = bold, label=""];
25->26 [style = bold, label=""];
0->30 [style = dashed, label="0"];
14->29 [style = bold, label=""];
38->25 [style = bold, label=""];
8->25 [style = dashed, label="0"];
5->11 [style = bold, label=""];
29->35 [style = bold, label=""];
1->30 [style = solid, label="data"];
20->15 [style = bold, label=""];
32->28 [style = bold, label=""];
13->14 [style = bold, label=""];
1->26 [style = solid, label="data"];
2->5 [style = bold, label=""];
24->23 [style = bold, label=""];
5->22 [style = dashed, label="0"];
}
