digraph {
8 [style = filled, label = "DataSchema schema = new DataSchema(\"\",parser,new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a4ee58,new ArbitraryGranularitySpec(Granularities.DAY,ImmutableList.of(Intervals.of(\"2014/2015\"))),null,jsonMapper)@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testOverlapMetricNameAndDim['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "testOverlapMetricNameAndDim['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "schema.getParser()@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "DataSchema schema = new DataSchema(VALID_DATASOURCE_CHARS_NAME,parser,new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a4edfb,new ArbitraryGranularitySpec(Granularities.DAY,ImmutableList.of(Intervals.of(\"2014/2015\"))),null,jsonMapper)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testEmptyDatasource['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Map<String,Object> parser = jsonMapper.convertValue(new StringInputRowParser(new JSONParseSpec(new TimestampSpec(\"time\",\"auto\",null),new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\",\"dimA\",\"dimB\",\"col2\")),ImmutableList.of(\"dimC\"),null),null,null),null),JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "expectedException.expect(CoreMatchers.instanceOf())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "DataSchema schema = new DataSchema(\"test\",parser,new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a4edab,new ArbitraryGranularitySpec(Granularities.DAY,ImmutableList.of(Intervals.of(\"2014/2015\"))),null,jsonMapper)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "expectedException.expectMessage(\"dataSource cannot be null or empty. Please provide a dataSource.\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Map<String,Object> parser = jsonMapper.convertValue(new StringInputRowParser(new JSONParseSpec(new TimestampSpec(\"time\",\"auto\",null),new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\",\"dimA\",\"dimB\",\"metric1\")),ImmutableList.of(\"dimC\"),null),null,null),null),JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->4 [style = solid, label="parser"];
5->2 [style = bold, label=""];
4->1 [style = bold, label=""];
2->0 [style = bold, label=""];
0->4 [style = dashed, label="0"];
9->10 [style = bold, label=""];
3->2 [style = bold, label=""];
6->7 [style = bold, label=""];
7->8 [style = bold, label=""];
10->8 [style = solid, label="parser"];
2->4 [style = bold, label=""];
0->1 [style = bold, label=""];
10->6 [style = bold, label=""];
2->10 [style = dashed, label="0"];
2->0 [style = solid, label="parser"];
}
