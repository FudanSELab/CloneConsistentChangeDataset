digraph {
25 [style = filled, label = "assertFalse(buffer.isEmpty())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "assertFalse(buffer.isFull())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertEquals(2,buffer.size())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "testCircularBufferReset['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertFalse(buffer.isFull())@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertFalse(buffer.isEmpty())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertFalse(buffer.isFull())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "final int capacity = 1@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "CircularBuffer<String> buffer = new CircularBuffer<>(,capacity)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "buffer.write(\"B\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertNull(buffer.peek())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "Assert.assertFalse(buffer.isEmpty())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(buffer.isEmpty())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "buffer.reset()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(0,buffer.size())@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertEquals(\"A\",buffer.peek())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertEquals(\"A\",buffer.peek())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertFalse(buffer.isFull())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertTrue(buffer.isEmpty())@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "testCircularBufferWithCapacity1['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(\"B\",buffer.take())@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertTrue(buffer.isFull())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(0,buffer.size())@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "assertEquals(1,buffer.size())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Assert.assertFalse(buffer.isFull())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "assertEquals(2,buffer.size())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "Assert.assertTrue(buffer.isEmpty())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(1,buffer.size())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "testCircularBufferReset['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "Assert.assertTrue(buffer.isFull())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertTrue(buffer.isEmpty())@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "assertNull(buffer.peek())@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertEquals(\"A\",buffer.peek())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(\"A\",buffer.peek())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertTrue(buffer.isEmpty())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "final int capacity = 3@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "buffer.write(\"A\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->10 [style = bold, label=""];
22->26 [style = bold, label=""];
0->16 [style = bold, label=""];
27->32 [style = bold, label=""];
15->34 [style = dashed, label="0"];
4->38 [style = bold, label=""];
1->8 [style = bold, label=""];
30->13 [style = bold, label=""];
25->33 [style = bold, label=""];
3->24 [style = bold, label=""];
7->12 [style = bold, label=""];
6->22 [style = bold, label=""];
14->25 [style = dashed, label="0"];
5->23 [style = dashed, label="0"];
26->3 [style = bold, label=""];
0->32 [style = dashed, label="0"];
8->3 [style = bold, label=""];
12->15 [style = bold, label=""];
35->39 [style = bold, label=""];
10->38 [style = dashed, label="0"];
11->29 [style = dashed, label="0"];
7->20 [style = dashed, label="0"];
39->6 [style = bold, label=""];
14->17 [style = bold, label=""];
39->6 [style = solid, label="capacity"];
12->34 [style = bold, label=""];
17->33 [style = dashed, label="0"];
5->18 [style = bold, label=""];
38->41 [style = bold, label=""];
16->2 [style = bold, label=""];
10->27 [style = dashed, label="0"];
3->4 [style = bold, label=""];
15->5 [style = bold, label=""];
13->6 [style = solid, label="capacity"];
1->22 [style = dashed, label="0"];
33->29 [style = bold, label=""];
13->39 [style = dashed, label="0"];
6->1 [style = bold, label=""];
28->2 [style = bold, label=""];
29->20 [style = bold, label=""];
41->36 [style = bold, label=""];
21->31 [style = bold, label=""];
9->31 [style = dashed, label="0"];
19->13 [style = bold, label=""];
23->21 [style = bold, label=""];
18->21 [style = dashed, label="0"];
36->2 [style = bold, label=""];
11->14 [style = dashed, label="0"];
10->0 [style = bold, label=""];
2->14 [style = bold, label=""];
20->12 [style = bold, label=""];
18->9 [style = bold, label=""];
34->23 [style = bold, label=""];
13->6 [style = bold, label=""];
4->24 [style = dashed, label="0"];
16->28 [style = dashed, label="0"];
2->25 [style = bold, label=""];
8->26 [style = dashed, label="0"];
32->28 [style = bold, label=""];
24->27 [style = bold, label=""];
14->40 [style = bold, label=""];
11->7 [style = bold, label=""];
40->37 [style = bold, label=""];
17->11 [style = bold, label=""];
17->2 [style = dashed, label="0"];
}
