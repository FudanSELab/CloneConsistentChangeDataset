digraph {
21 [style = filled, label = "graph = ValueGraphBuilder.undirected().allowsSelfLoops(true).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "graph.putEdgeValue(1,2,\"valueA\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "directedGraph['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "undirectedGraph['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(graph.edgeValueOrNull(1,2)).isEqualTo(\"valueA\")@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "graph.putEdgeValue(2,1,\"valueB\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(graph.edgeValueOrDefault(2,3,null)).isEqualTo(\"valueC\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertThat(graph.edgeValueOrDefault(4,4,null)).isEqualTo(\"valueD\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "directedGraph['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(toString).contains(\"valueB\")@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(graph.edgeValueOrDefault(2,1,null)).isEqualTo(\"valueB\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertThat(toString).doesNotContain(\"valueA\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(toString).contains(\"valueD\")@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "graph.putEdgeValue(4,4,\"valueD\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(graph.edgeValueOrNull(2,1)).isEqualTo(\"valueB\")@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(graph.edgeValueOrNull(1,2)).isEqualTo(\"valueB\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "graph.putEdgeValue(2,3,\"valueC\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(graph.edgeValueOrNull(4,4)).isEqualTo(\"valueD\")@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(graph.edgeValueOrNull(2,3)).isEqualTo(\"valueC\")@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "graph = ValueGraphBuilder.directed().allowsSelfLoops(true).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(graph.edgeValueOrDefault(1,2,null)).isEqualTo(\"valueA\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertThat(toString).contains(\"valueA\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "String toString = graph.toString()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(toString).contains(\"valueC\")@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->3 [style = bold, label=""];
10->21 [style = dashed, label="0"];
7->18 [style = dashed, label="0"];
13->20 [style = dashed, label="0"];
12->15 [style = bold, label=""];
21->8 [style = bold, label=""];
12->20 [style = bold, label=""];
19->10 [style = bold, label=""];
8->6 [style = bold, label=""];
3->22 [style = dashed, label="0"];
11->17 [style = dashed, label="0"];
7->4 [style = bold, label=""];
9->10 [style = bold, label=""];
16->17 [style = bold, label=""];
15->16 [style = bold, label=""];
13->15 [style = dashed, label="0"];
3->0 [style = bold, label=""];
20->2 [style = bold, label=""];
12->13 [style = bold, label=""];
6->5 [style = bold, label=""];
22->0 [style = bold, label=""];
18->4 [style = bold, label=""];
10->8 [style = bold, label=""];
23->21 [style = bold, label=""];
5->12 [style = bold, label=""];
0->1 [style = bold, label=""];
2->16 [style = dashed, label="0"];
11->7 [style = bold, label=""];
1->14 [style = bold, label=""];
4->22 [style = bold, label=""];
2->11 [style = bold, label=""];
17->18 [style = bold, label=""];
13->2 [style = bold, label=""];
}
