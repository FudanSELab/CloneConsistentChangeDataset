digraph {
47 [style = filled, label = "assertThat(map.getNumArrayEntries()).isEqualTo(3)@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
71 [style = filled, label = "i < 6@@@13@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "assertThat(map).hasSize(3)@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(Integer.valueOf(2),map.remove(1))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertNull(map.remove(i + 1))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertEquals(3,map.size())@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "assertEquals(2,map.getNumOverflowEntries())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "assertThat(map.remove(3)).isNull()@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertEquals(2,map.size())@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
65 [style = filled, label = "i++@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "i < 6@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "assertThat(map.remove(4)).isEqualTo(Integer.valueOf(5))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
67 [style = filled, label = "testEntrySetAdd['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "assertThat(map.keySet()).isEqualTo(makeSortedKeySet(0,1,2,3,4,5))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
69 [style = filled, label = "assertFalse(entrySet.add(entry))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "assertThat(map.remove(0)).isEqualTo(Integer.valueOf(1))@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "i++@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertThat(map.keySet()).isEqualTo(makeSortedKeySet(0,2,3,5))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertEquals(5,map.size())@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertNull(map.remove(3))@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "assertThat(map).hasSize(2)@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
48 [style = filled, label = "assertThat(map.keySet()).isEqualTo(makeSortedKeySet(0,2,5))@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "assertThat(map).hasSize(5)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "assertThat(map.getNumArrayEntries()).isEqualTo(3)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "assertThat(map).hasSize(6)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertEquals(6,map.size())@@@19@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertThat(map.remove(1)).isEqualTo(Integer.valueOf(2))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "assertThat(map.getNumOverflowEntries()).isEqualTo(2)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
63 [style = filled, label = "testRemove['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
42 [style = filled, label = "assertThat(map).hasSize(3)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertEquals(3,map.getNumOverflowEntries())@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "SmallSortedMap<Integer,Integer> map = SmallSortedMap.newInstanceForTest(3)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(Integer.valueOf(4),map.remove(3))@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "assertThat(map.getNumArrayEntries()).isEqualTo(2)@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertThat(map).hasSize(4)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
50 [style = filled, label = "assertThat(map.getNumArrayEntries()).isEqualTo(3)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertEquals(makeSortedKeySet(0,2,3,4,5),map.keySet())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "testRemove['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(Integer.valueOf(5),map.remove(4))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "assertThat(map.getNumOverflowEntries()).isEqualTo(0)@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
51 [style = filled, label = "assertThat(map.getNumOverflowEntries()).isEqualTo(0)@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "assertThat(map.getNumArrayEntries()).isEqualTo(3)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
70 [style = filled, label = "assertEquals(Integer.valueOf(i + 1),map.get(i))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertNull(map.put(i,i + 1))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "assertEquals(1,map.getNumOverflowEntries())@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "assertThat(map.remove(3)).isEqualTo(Integer.valueOf(4))@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(0,map.getNumOverflowEntries())@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "assertThat(map.keySet()).isEqualTo(makeSortedKeySet(0,2,3,4,5))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "assertThat(map.getNumOverflowEntries()).isEqualTo(0)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
57 [style = filled, label = "assertThat(map.put(i,i + 1)).isNull()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
55 [style = filled, label = "assertThat(map.getNumOverflowEntries()).isEqualTo(3)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(2,map.getNumArrayEntries())@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
61 [style = filled, label = "assertThat(map.getNumArrayEntries()).isEqualTo(3)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(makeSortedKeySet(0,2,5),map.keySet())@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
64 [style = filled, label = "int i = 0@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(0,map.getNumOverflowEntries())@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
62 [style = filled, label = "assertThat(map.getNumOverflowEntries()).isEqualTo(1)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "assertEquals(3,map.size())@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
66 [style = filled, label = "Set<Map.Entry<Integer,Integer>> entrySet = map.entrySet()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "Map.Entry<Integer,Integer> entry = new SimpleEntry<Integer,Integer>(i,i + 1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "assertThat(map.remove(i + 1)).isNull()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertEquals(3,map.getNumArrayEntries())@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertEquals(Integer.valueOf(1),map.remove(0))@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertEquals(makeSortedKeySet(0,2,3,5),map.keySet())@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertEquals(4,map.size())@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
68 [style = filled, label = "assertTrue(entrySet.add(entry))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(0,map.getNumOverflowEntries())@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "int i = 0@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->24 [style = bold, label=""];
71->70 [style = bold, label=""];
25->1 [style = bold, label=""];
28->72 [style = dotted, label="true"];
68->69 [style = bold, label=""];
7->30 [style = bold, label=""];
20->56 [style = dashed, label="0"];
38->51 [style = bold, label=""];
70->65 [style = bold, label=""];
71->18 [style = bold, label=""];
28->50 [style = bold, label=""];
28->14 [style = dotted, label="true"];
11->29 [style = bold, label=""];
21->37 [style = dashed, label="0"];
42->48 [style = bold, label=""];
64->70 [style = solid, label="i"];
9->10 [style = bold, label=""];
44->53 [style = bold, label=""];
59->61 [style = bold, label=""];
60->24 [style = bold, label=""];
18->55 [style = dashed, label="0"];
23->58 [style = dashed, label="0"];
8->72 [style = dashed, label="0"];
63->22 [style = bold, label=""];
26->50 [style = dashed, label="0"];
23->33 [style = bold, label=""];
53->34 [style = bold, label=""];
33->25 [style = bold, label=""];
6->36 [style = dashed, label="0"];
50->55 [style = bold, label=""];
32->28 [style = solid, label="i"];
9->41 [style = dashed, label="0"];
20->15 [style = bold, label=""];
65->70 [style = solid, label="i"];
16->39 [style = dashed, label="0"];
10->11 [style = bold, label=""];
24->28 [style = bold, label=""];
72->69 [style = solid, label="entry"];
48->37 [style = bold, label=""];
2->20 [style = bold, label=""];
64->71 [style = bold, label=""];
28->8 [style = dotted, label="true"];
35->54 [style = bold, label=""];
34->52 [style = bold, label=""];
57->60 [style = bold, label=""];
22->32 [style = bold, label=""];
24->8 [style = solid, label="i"];
0->21 [style = bold, label=""];
4->2 [style = bold, label=""];
13->40 [style = dashed, label="0"];
64->65 [style = solid, label="i"];
7->54 [style = dashed, label="0"];
41->59 [style = bold, label=""];
67->22 [style = bold, label=""];
32->8 [style = solid, label="i"];
32->14 [style = solid, label="i"];
28->24 [style = dotted, label="true"];
24->14 [style = solid, label="i"];
3->7 [style = bold, label=""];
15->9 [style = bold, label=""];
24->72 [style = solid, label="i"];
33->38 [style = dashed, label="0"];
1->46 [style = dashed, label="0"];
4->34 [style = dashed, label="0"];
49->41 [style = bold, label=""];
64->71 [style = solid, label="i"];
5->22 [style = bold, label=""];
47->36 [style = bold, label=""];
27->47 [style = dashed, label="0"];
28->72 [style = bold, label=""];
37->47 [style = bold, label=""];
16->13 [style = bold, label=""];
32->24 [style = solid, label="i"];
28->68 [style = dotted, label="true"];
3->35 [style = dashed, label="0"];
21->27 [style = bold, label=""];
65->71 [style = solid, label="i"];
54->43 [style = bold, label=""];
14->68 [style = dashed, label="0"];
25->51 [style = dashed, label="0"];
8->57 [style = dashed, label="0"];
8->14 [style = bold, label=""];
28->26 [style = bold, label=""];
32->72 [style = solid, label="i"];
62->35 [style = bold, label=""];
65->71 [style = bold, label=""];
71->65 [style = dotted, label="true"];
19->0 [style = bold, label=""];
12->53 [style = dashed, label="0"];
45->58 [style = bold, label=""];
58->38 [style = bold, label=""];
13->19 [style = bold, label=""];
17->12 [style = bold, label=""];
28->64 [style = bold, label=""];
22->66 [style = bold, label=""];
39->40 [style = bold, label=""];
28->8 [style = bold, label=""];
69->24 [style = bold, label=""];
28->60 [style = dotted, label="true"];
28->57 [style = bold, label=""];
10->59 [style = dashed, label="0"];
43->39 [style = bold, label=""];
19->42 [style = dashed, label="0"];
61->62 [style = bold, label=""];
24->28 [style = solid, label="i"];
31->23 [style = bold, label=""];
56->49 [style = bold, label=""];
72->68 [style = solid, label="entry"];
29->3 [style = bold, label=""];
29->62 [style = dashed, label="0"];
31->45 [style = dashed, label="0"];
18->17 [style = bold, label=""];
28->69 [style = dotted, label="true"];
52->56 [style = bold, label=""];
28->57 [style = dotted, label="true"];
2->52 [style = dashed, label="0"];
30->43 [style = dashed, label="0"];
27->6 [style = bold, label=""];
51->46 [style = bold, label=""];
14->60 [style = dashed, label="0"];
17->44 [style = dashed, label="0"];
55->44 [style = bold, label=""];
71->70 [style = dotted, label="true"];
0->48 [style = dashed, label="0"];
6->31 [style = bold, label=""];
12->4 [style = bold, label=""];
15->49 [style = dashed, label="0"];
11->61 [style = dashed, label="0"];
36->45 [style = bold, label=""];
30->16 [style = bold, label=""];
72->68 [style = bold, label=""];
32->28 [style = bold, label=""];
66->32 [style = bold, label=""];
40->42 [style = bold, label=""];
26->18 [style = bold, label=""];
}
