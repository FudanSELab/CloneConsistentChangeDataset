digraph {
18 [style = filled, label = "assertThat(locatorState.getPid().intValue()).isEqualTo(readPidFile())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(locatorState.getHost()).isEqualTo(InetAddress.getLocalHost().getCanonicalHostName())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "statusWithPidReturnsOnlineWithDetails['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(locatorState.getStatus()).isEqualTo(ONLINE)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "givenRunningLocator()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(locatorState.getUptime()).isGreaterThan(0)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "statusWithPidReturnsOnlineWithDetails['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertThat(locatorState.getClasspath()).isEqualTo(getClassPath())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "statusWithWorkingDirectoryReturnsOnlineWithDetails['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(locatorState.getJvmArguments()).isEqualTo(getJvmArguments())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(locatorState.getWorkingDirectory()).isEqualTo(getWorkingDirectoryPath())@@@15@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(locatorState.getPid().intValue()).isEqualTo(getLocatorPid())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(locatorState.getJavaVersion()).isEqualTo(System.getProperty(\"java.version\"))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(locatorState.getLogFile()).isEqualTo(getLogFile().getCanonicalPath())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(locatorState.getWorkingDirectory()).isEqualToIgnoringCase(getWorkingDirectoryPath())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "LocatorState locatorState = new Builder().setWorkingDirectory(getWorkingDirectoryPath()).build().status()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(locatorState.getMemberName()).isEqualTo(getUniqueName())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(locatorState.getGemFireVersion()).isEqualTo(GemFireVersion.getGemFireVersion())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "LocatorState locatorState = new Builder().setPid(getLocatorPid()).build().status()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
16->3 [style = bold, label=""];
0->16 [style = bold, label=""];
10->15 [style = bold, label=""];
11->15 [style = dashed, label="0"];
3->12 [style = bold, label=""];
2->10 [style = bold, label=""];
12->1 [style = bold, label=""];
1->9 [style = bold, label=""];
4->0 [style = bold, label=""];
9->6 [style = bold, label=""];
5->16 [style = dashed, label="0"];
17->0 [style = bold, label=""];
14->0 [style = bold, label=""];
18->10 [style = bold, label=""];
13->7 [style = bold, label=""];
7->2 [style = bold, label=""];
6->8 [style = bold, label=""];
2->18 [style = dashed, label="0"];
7->18 [style = bold, label=""];
8->13 [style = bold, label=""];
0->5 [style = bold, label=""];
10->11 [style = bold, label=""];
}
