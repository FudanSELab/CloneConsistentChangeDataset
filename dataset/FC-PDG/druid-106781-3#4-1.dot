digraph {
13 [style = filled, label = "assertExpectedResults(expectedResults,results)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Iterable<Result<TimeseriesResultValue>> results = runner.run(QueryPlus.wrap(query),CONTEXT).toList()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "resultMap.put(\"index\",NullHandling.defaultDoubleValue())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "resultMap.put(\"uniques\",0.0)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "resultMap.put(\"addRowsIndexConstant\",NullHandling.replaceWithDefault()? 1.0: null)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Map<String,Object> resultMap = Maps.newHashMap()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "testTimeseriesWithFilterOnNonExistentDimension['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "testTimeseriesWithFilterOnNonExistentDimension['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testTimeseriesWithNonExistentFilterAndMultiDim['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.dayGran).filters(\"bobby\",\"billy\").intervals(QueryRunnerTestHelper.firstToThird).aggregators(aggregatorFactoryList).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).descending(descending).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "List<Result<TimeseriesResultValue>> expectedResults = Arrays.asList(new Result<>(DateTimes.of(\"2011-04-01\"),new TimeseriesResultValue(resultMap)),new Result<>(DateTimes.of(\"2011-04-02\"),new TimeseriesResultValue(resultMap)))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Map<String,Object> resultMap = new HashMap<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.dayGran).filters(andDimFilter).intervals(QueryRunnerTestHelper.firstToThird).aggregators(aggregatorFactoryList).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).descending(descending).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Map<String,Object> resultMap = Maps.newHashMap()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "AndDimFilter andDimFilter = new AndDimFilter(new SelectorDimFilter(QueryRunnerTestHelper.marketDimension,\"billy\",null),new SelectorDimFilter(QueryRunnerTestHelper.qualityDimension,\"business\",null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "resultMap.put(\"rows\",0L)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->3 [style = bold, label=""];
15->14 [style = bold, label=""];
7->10 [style = bold, label=""];
3->6 [style = bold, label=""];
9->7 [style = bold, label=""];
12->0 [style = bold, label=""];
1->13 [style = bold, label=""];
6->1 [style = solid, label="expectedResults"];
2->10 [style = dashed, label="0"];
8->1 [style = bold, label=""];
2->0 [style = bold, label=""];
0->8 [style = solid, label="resultMap"];
7->2 [style = bold, label=""];
14->12 [style = bold, label=""];
10->0 [style = bold, label=""];
5->4 [style = bold, label=""];
6->8 [style = bold, label=""];
2->6 [style = solid, label="resultMap"];
10->6 [style = solid, label="resultMap"];
8->1 [style = solid, label="results"];
8->13 [style = solid, label="expectedResults"];
1->13 [style = solid, label="results"];
11->7 [style = bold, label=""];
0->5 [style = bold, label=""];
}
