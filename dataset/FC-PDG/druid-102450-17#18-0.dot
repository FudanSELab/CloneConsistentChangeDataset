digraph {
46 [style = filled, label = "Assert.assertTrue(\"isUseTransaction\",taskConfig.isUseTransaction())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "supervisor = getTestableSupervisor(1,1,true,\"PT1H\",null,null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertEquals(dataSchema,task.getDataSchema())@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "supervisorRecordSupplier.assign(EasyMock.anyObject())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,taskConfig.getEndSequenceNumbers().getPartitionSequenceNumberMap().get(1).longValue())@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "supervisor.getIoConfig().getConsumerProperties().put(\"bootstrap.servers\",kafkaHost)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "supervisorRecordSupplier.seekToLatest(EasyMock.anyObject())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "Assert.assertTrue(supervisor.isStarted())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(captured))).andReturn(true)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "Assert.assertEquals(topic,taskConfig.getEndSequenceNumbers().getStream())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "Assert.assertFalse(\"maximumMessageTime\",taskConfig.getMaximumMessageTime().isPresent())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Thread.sleep(1000)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,taskConfig.getEndSequenceNumbers().getPartitionSequenceNumberMap().get(SHARD_ID0))@@@37@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "supervisor.start()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(STREAM,taskConfig.getEndSequenceNumbers().getStream())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "verifyAll()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(null)).anyTimes()@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "supervisorRecordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "Assert.assertFalse(supervisor.isStarted())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Assert.assertEquals(tuningConfig.convertToTaskTuningConfig(),task.getTuningConfig())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "Assert.assertEquals(0L,taskConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap().get(1).longValue())@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "KafkaIndexTask task = captured.getValue()@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "taskRunner.registerListener(EasyMock.anyObject(),EasyMock.anyObject())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Assert.assertEquals(topic,taskConfig.getStartSequenceNumbers().getStream())@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,taskConfig.getEndSequenceNumbers().getPartitionSequenceNumberMap().get(0).longValue())@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "resetAll()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(tuningConfig.convertToTaskTuningConfig(),task.getTuningConfig())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "replayAll()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "verifyAll()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(SHARD1_PARTITION,SHARD0_PARTITION)).anyTimes()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertEquals(kafkaHost,taskConfig.getConsumerProperties().get(\"bootstrap.servers\"))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.capture(captured))).andReturn(true)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertFalse(\"minimumMessageTime\",taskConfig.getMinimumMessageTime().isPresent())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,taskConfig.getEndSequenceNumbers().getPartitionSequenceNumberMap().get(SHARD_ID1))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "supervisor.getInitRetryCounter() < 3@@@15@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "supervisor.start()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertTrue(\"isUseTransaction\",taskConfig.isUseTransaction())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "KafkaIndexTaskIOConfig taskConfig = task.getIOConfig()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Assert.assertTrue(supervisor.isLifecycleStarted())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "Assert.assertEquals(0L,taskConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap().get(0).longValue())@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "supervisor.runInternal()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "taskRunner.registerListener(EasyMock.anyObject(),EasyMock.anyObject())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "supervisor.tryInit()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "KinesisIndexTask task = captured.getValue()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "KinesisIndexTaskIOConfig taskConfig = task.getIOConfig()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "testFailedInitializationAndRecovery['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "Assert.assertTrue(supervisor.isLifecycleStarted())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "final KafkaSupervisorTuningConfig tuningConfig = supervisor.getTuningConfig()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Capture<KinesisIndexTask> captured = Capture.newInstance()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "replayAll()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(null)).anyTimes()@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(dataSchema,task.getDataSchema())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(\"sequenceName-0\",taskConfig.getBaseSequenceName())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "Assert.assertEquals(Long.MAX_VALUE,taskConfig.getEndSequenceNumbers().getPartitionSequenceNumberMap().get(2).longValue())@@@50@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "Assert.assertEquals(\"myCustomValue\",taskConfig.getConsumerProperties().get(\"myCustomKey\"))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "verifyAll()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "Capture<KafkaIndexTask> captured = Capture.newInstance()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "Assert.assertEquals(\"sequenceName-0\",taskConfig.getBaseSequenceName())@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "replayAll()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID1,SHARD_ID0)).anyTimes()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "addSomeEvents(1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "Assert.assertFalse(\"minimumMessageTime\",taskConfig.getMinimumMessageTime().isPresent())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "supervisor = getTestableSupervisor(1,1,true,\"PT1H\",null,null,false,StringUtils.format(\"badhostname:%d\",kafkaServer.getPort()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "Assert.assertEquals(0L,taskConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap().get(2).longValue())@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testNoInitialState['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testNoInitialState['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "supervisor.runInternal()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertFalse(\"maximumMessageTime\",taskConfig.getMaximumMessageTime().isPresent())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54->55 [style = bold, label=""];
56->29 [style = bold, label=""];
6->35 [style = bold, label=""];
12->5 [style = bold, label=""];
70->38 [style = bold, label=""];
32->34 [style = bold, label=""];
5->12 [style = dotted, label="true"];
9->7 [style = bold, label=""];
23->62 [style = dashed, label="0"];
67->2 [style = bold, label=""];
22->4 [style = bold, label=""];
29->6 [style = bold, label=""];
0->14 [style = bold, label=""];
10->51 [style = dashed, label="0"];
21->31 [style = bold, label=""];
45->61 [style = bold, label=""];
5->49 [style = bold, label=""];
71->64 [style = bold, label=""];
6->50 [style = dashed, label="0"];
69->72 [style = bold, label=""];
73->71 [style = bold, label=""];
28->25 [style = bold, label=""];
47->60 [style = bold, label=""];
24->27 [style = bold, label=""];
25->21 [style = bold, label=""];
52->78 [style = bold, label=""];
48->41 [style = bold, label=""];
14->22 [style = bold, label=""];
31->2 [style = bold, label=""];
16->32 [style = bold, label=""];
4->18 [style = bold, label=""];
26->24 [style = bold, label=""];
12->37 [style = bold, label=""];
8->17 [style = bold, label=""];
58->42 [style = bold, label=""];
55->75 [style = bold, label=""];
35->52 [style = dashed, label="0"];
27->29 [style = bold, label=""];
40->65 [style = bold, label=""];
76->40 [style = bold, label=""];
60->54 [style = bold, label=""];
23->20 [style = bold, label=""];
17->1 [style = bold, label=""];
57->66 [style = bold, label=""];
18->70 [style = dashed, label="0"];
35->39 [style = bold, label=""];
63->57 [style = bold, label=""];
19->10 [style = bold, label=""];
61->44 [style = bold, label=""];
13->48 [style = dashed, label="0"];
15->19 [style = bold, label=""];
42->51 [style = bold, label=""];
1->9 [style = bold, label=""];
33->26 [style = bold, label=""];
77->53 [style = bold, label=""];
53->50 [style = bold, label=""];
3->28 [style = bold, label=""];
46->79 [style = bold, label=""];
10->16 [style = bold, label=""];
51->45 [style = bold, label=""];
11->3 [style = bold, label=""];
1->6 [style = dashed, label="0"];
18->8 [style = bold, label=""];
64->67 [style = bold, label=""];
75->76 [style = bold, label=""];
78->62 [style = bold, label=""];
41->69 [style = bold, label=""];
35->30 [style = bold, label=""];
19->42 [style = dashed, label="0"];
29->53 [style = dashed, label="0"];
38->43 [style = bold, label=""];
36->19 [style = bold, label=""];
2->5 [style = bold, label=""];
7->13 [style = bold, label=""];
39->48 [style = bold, label=""];
20->63 [style = dashed, label="0"];
0->37 [style = dashed, label="0"];
30->78 [style = dashed, label="0"];
65->70 [style = bold, label=""];
72->46 [style = bold, label=""];
30->23 [style = bold, label=""];
74->73 [style = bold, label=""];
62->63 [style = bold, label=""];
43->68 [style = bold, label=""];
59->74 [style = bold, label=""];
12->0 [style = bold, label=""];
68->56 [style = bold, label=""];
50->52 [style = bold, label=""];
34->11 [style = bold, label=""];
79->77 [style = bold, label=""];
49->47 [style = bold, label=""];
37->14 [style = bold, label=""];
0->74 [style = dashed, label="0"];
5->12 [style = bold, label=""];
13->33 [style = bold, label=""];
44->59 [style = bold, label=""];
}
