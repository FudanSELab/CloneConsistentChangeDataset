digraph {
8 [style = filled, label = "i++@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "int i = 3072@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "i++@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "i < 2048@@@5@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(1024,inputStream.skip(1024))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(256,inputStream.skip(256))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(1024,inputStream.skip(1024))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(256,inputStream.skip(256))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "i++@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testSkipFromFileChannel['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(randomBytes(i(,(byte)inputStream.read())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testBytesSkippedAfterRead['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertEquals(randomBytes(i(,(byte)inputStream.read())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "int i = 2048@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "i < randomBytes.length@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "i < 1024@@@5@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "i < randomBytes.length@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(512,inputStream.skip(512))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "int i = 0@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testBytesSkippedAfterRead['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "i++@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(randomBytes(i(,(byte)inputStream.read())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "int i = 1024@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
8->11 [style = solid, label="i"];
4->3 [style = bold, label=""];
13->18 [style = dotted, label="true"];
13->16 [style = dotted, label="true"];
16->18 [style = bold, label=""];
5->3 [style = solid, label="i"];
22->19 [style = bold, label=""];
0->6 [style = bold, label=""];
2->6 [style = solid, label="i"];
0->1 [style = solid, label="i"];
18->16 [style = solid, label="i"];
2->6 [style = bold, label=""];
12->8 [style = dotted, label="true"];
9->4 [style = bold, label=""];
14->11 [style = solid, label="i"];
12->11 [style = bold, label=""];
12->15 [style = bold, label=""];
6->1 [style = dotted, label="true"];
4->3 [style = solid, label="i"];
14->12 [style = solid, label="i"];
1->0 [style = bold, label=""];
4->5 [style = solid, label="i"];
14->8 [style = solid, label="i"];
13->16 [style = bold, label=""];
4->8 [style = solid, label="i"];
17->18 [style = solid, label="i"];
18->13 [style = solid, label="i"];
12->11 [style = dotted, label="true"];
20->21 [style = bold, label=""];
6->1 [style = bold, label=""];
6->4 [style = bold, label=""];
17->16 [style = solid, label="i"];
3->5 [style = dotted, label="true"];
19->14 [style = bold, label=""];
8->5 [style = bold, label=""];
17->13 [style = solid, label="i"];
3->7 [style = bold, label=""];
7->2 [style = bold, label=""];
15->20 [style = bold, label=""];
3->8 [style = bold, label=""];
14->12 [style = bold, label=""];
2->1 [style = solid, label="i"];
18->13 [style = bold, label=""];
10->4 [style = bold, label=""];
2->0 [style = solid, label="i"];
7->15 [style = dashed, label="0"];
11->8 [style = bold, label=""];
17->13 [style = bold, label=""];
6->0 [style = dotted, label="true"];
3->14 [style = dashed, label="0"];
3->8 [style = dotted, label="true"];
8->12 [style = solid, label="i"];
21->17 [style = bold, label=""];
0->6 [style = solid, label="i"];
8->12 [style = bold, label=""];
5->8 [style = solid, label="i"];
}
