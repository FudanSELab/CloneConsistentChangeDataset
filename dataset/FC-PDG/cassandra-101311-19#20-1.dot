digraph {
1 [style = filled, label = "TokenMetadata tmd = ss.getTokenMetadata()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(1,tmd.getBootstrapTokens().size())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(1))))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(keyTokens.get(0),tmd.getToken(hosts.get(2)))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(hosts.get(2),tmd.getEndpoint(keyTokens.get(1)))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "IPartitioner partitioner = RandomPartitioner.instance@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.bootstrapping(Collections.singleton(keyTokens.get(1))))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Gossiper.instance.clearUnsafe()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.left(Collections.singleton(keyTokens.get(1)),Gossiper.computeExpireTime()))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "StorageService ss = StorageService.instance@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(2)))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "ss.onChange(hosts.get(3),ApplicationState.STATUS,valueFactory.bootstrapping(Collections.singleton(keyTokens.get(1))))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(3)))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Util.createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,hostIds,7)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().size() == 0)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(Collections.singleton(keyTokens.get(1))))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.left(Collections.singleton(keyTokens.get(1)),Gossiper.computeExpireTime()))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "tmd.clearUnsafe()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "List<UUID> hostIds = new ArrayList<UUID>()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ArrayList<Token> keyTokens = new ArrayList<Token>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertNull(tmd.getEndpoint(endpointTokens.get(2)))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertTrue(tmd.getBootstrapTokens().isEmpty())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "List<InetAddressAndPort> hosts = new ArrayList<>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(0))))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertFalse(tmd.isLeaving(hosts.get(2)))@@@30@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTrue(tmd.isLeaving(hosts.get(2)))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testStateJumpToLeft['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.leaving(Collections.singleton(keyTokens.get(0))))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.left(Collections.singleton(endpointTokens.get(2)),Gossiper.computeExpireTime()))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertEquals(hosts.get(3),tmd.getBootstrapTokens().get(keyTokens.get(1)))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(2)))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "ArrayList<Token> endpointTokens = new ArrayList<Token>()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testStateJumpToLeaving['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertEquals(hosts.get(2),tmd.getBootstrapTokens().get(keyTokens.get(1)))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testStateJumpToLeaving['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Util.createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,hostIds,6)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertFalse(tmd.isMember(hosts.get(2)))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(3),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(1))))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(1))))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(tmd.isLeaving(hosts.get(2)))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
13->10 [style = bold, label=""];
22->25 [style = bold, label=""];
30->38 [style = bold, label=""];
11->17 [style = solid, label="endpointTokens"];
41->32 [style = bold, label=""];
21->17 [style = solid, label="ss"];
16->8 [style = bold, label=""];
3->40 [style = bold, label=""];
3->17 [style = solid, label="hostIds"];
15->37 [style = dashed, label="0"];
10->19 [style = bold, label=""];
2->3 [style = bold, label=""];
37->25 [style = bold, label=""];
0->2 [style = bold, label=""];
42->39 [style = bold, label=""];
18->15 [style = bold, label=""];
25->18 [style = bold, label=""];
4->21 [style = bold, label=""];
27->40 [style = solid, label="partitioner"];
27->17 [style = solid, label="partitioner"];
21->40 [style = solid, label="ss"];
24->23 [style = bold, label=""];
2->40 [style = solid, label="hosts"];
1->7 [style = bold, label=""];
11->40 [style = solid, label="endpointTokens"];
18->38 [style = dashed, label="0"];
26->11 [style = bold, label=""];
29->21 [style = bold, label=""];
32->33 [style = bold, label=""];
12->41 [style = dashed, label="0"];
9->6 [style = bold, label=""];
20->5 [style = bold, label=""];
11->0 [style = bold, label=""];
17->12 [style = bold, label=""];
27->26 [style = solid, label="partitioner"];
31->35 [style = bold, label=""];
7->28 [style = bold, label=""];
2->17 [style = solid, label="hosts"];
38->37 [style = bold, label=""];
15->20 [style = bold, label=""];
5->24 [style = bold, label=""];
17->40 [style = dashed, label="0"];
21->1 [style = bold, label=""];
3->40 [style = solid, label="hostIds"];
40->41 [style = bold, label=""];
12->14 [style = bold, label=""];
7->27 [style = bold, label=""];
0->40 [style = solid, label="keyTokens"];
33->31 [style = bold, label=""];
25->42 [style = bold, label=""];
3->17 [style = bold, label=""];
28->27 [style = bold, label=""];
16->33 [style = dashed, label="0"];
8->31 [style = dashed, label="0"];
23->9 [style = bold, label=""];
19->22 [style = bold, label=""];
35->30 [style = bold, label=""];
39->36 [style = bold, label=""];
0->17 [style = solid, label="keyTokens"];
34->21 [style = bold, label=""];
8->13 [style = bold, label=""];
27->26 [style = bold, label=""];
}
