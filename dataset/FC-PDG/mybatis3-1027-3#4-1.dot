digraph {
22 [style = filled, label = "Class<?> clazz = @@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertTrue(type.getActualTypeArguments()(0( instanceof WildcardType)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "WildcardType wildcard = (WildcardType)type.getActualTypeArguments()(0(@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Type result = TypeParameterResolver.resolveReturnType(method,clazz)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Method method = clazz.getMethod(\"selectWildcardList\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(1,paramType.getActualTypeArguments().length)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(,type.getRawType())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertTrue(paramType.getActualTypeArguments()(0( instanceof WildcardType)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "WildcardType wildcard = (WildcardType)paramType.getActualTypeArguments()(0(@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testReturn_SimpleWildcard['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Method method = clazz.getMethod(\"simpleSelectWildcard\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertTrue(result instanceof ParameterizedType)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(0,wildcard.getLowerBounds().length)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(,wildcard.getUpperBounds()(0()@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "ParameterizedType type = (ParameterizedType)result@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testReturn_SimpleWildcard['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "testReturn_Lv2WildcardList['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(,wildcard.getUpperBounds()(0()@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(1,type.getActualTypeArguments().length)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(,paramType.getRawType())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ParameterizedType paramType = (ParameterizedType)result@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Class<?> clazz = @@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(1,wildcard.getUpperBounds().length)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
0->9 [style = bold, label=""];
22->15 [style = bold, label=""];
6->20 [style = dashed, label="0"];
22->4 [style = solid, label="clazz"];
9->18 [style = dashed, label="0"];
14->17 [style = bold, label=""];
3->22 [style = dashed, label="0"];
8->14 [style = dashed, label="0"];
4->16 [style = solid, label="result"];
2->4 [style = bold, label=""];
0->17 [style = dashed, label="0"];
4->10 [style = solid, label="result"];
9->6 [style = bold, label=""];
15->4 [style = solid, label="method"];
2->15 [style = dashed, label="0"];
20->21 [style = bold, label=""];
8->0 [style = bold, label=""];
3->4 [style = solid, label="clazz"];
4->1 [style = solid, label="result"];
18->20 [style = bold, label=""];
13->19 [style = bold, label=""];
10->8 [style = bold, label=""];
3->2 [style = bold, label=""];
11->3 [style = bold, label=""];
1->16 [style = bold, label=""];
15->4 [style = bold, label=""];
16->14 [style = bold, label=""];
4->1 [style = bold, label=""];
10->16 [style = dashed, label="0"];
6->7 [style = bold, label=""];
2->4 [style = solid, label="method"];
1->10 [style = bold, label=""];
12->22 [style = bold, label=""];
17->18 [style = bold, label=""];
21->13 [style = bold, label=""];
}
