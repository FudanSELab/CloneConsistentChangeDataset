digraph {
5 [style = filled, label = "final HiveDataset hiveDataset = (HiveDataset)dataset@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "return sortPartitions(partitions)@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "getPartitionsFromDataset['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "findDatasetVersions['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "List<Partition> partitions = HiveUtils.getPartitions(client.get(),hiveDataset.getTable(),Optional.absent())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "throw new IllegalArgumentException(\"HiveDatasetVersionFinder is only compatible with HiveDataset\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "!hiveDataset.getTable().isPartitioned()@@@7@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "List<Partition> partitions = HiveUtils.getPartitions(client.get(),getTable(),Optional.absent())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "!(dataset instanceof HiveDataset)@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Dataset dataset@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "return Lists.newArrayList(Iterables.filter(Iterables.transform(partitions,new Function<Partition,HiveDatasetVersion>(){@Override public HiveDatasetVersion apply(Partition partition){try {return getDatasetVersion(partition)}catch (Throwable e) }}),Predicates.notNull()))@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "throw new IllegalArgumentException(\"HiveDatasetVersionFinder is only compatible with partitioned hive tables\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "!HiveUtils.isPartitioned(hiveDataset.getTable())@@@7@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "findDatasetVersions['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2->3 [style = dotted, label="true"];
1->5 [style = bold, label=""];
13->11 [style = solid, label="partitions"];
5->10 [style = bold, label=""];
0->6 [style = bold, label=""];
2->3 [style = bold, label=""];
4->7 [style = solid, label="partitions"];
6->1 [style = dotted, label="true"];
10->3 [style = dotted, label="true"];
10->3 [style = bold, label=""];
2->4 [style = bold, label=""];
3->4 [style = bold, label=""];
13->11 [style = bold, label=""];
4->7 [style = bold, label=""];
2->10 [style = dashed, label="0"];
9->6 [style = bold, label=""];
9->8 [style = dotted, label="true"];
0->8 [style = dotted, label="true"];
6->1 [style = bold, label=""];
12->13 [style = bold, label=""];
6->5 [style = bold, label=""];
5->2 [style = bold, label=""];
8->5 [style = solid, label="dataset"];
10->4 [style = bold, label=""];
}
