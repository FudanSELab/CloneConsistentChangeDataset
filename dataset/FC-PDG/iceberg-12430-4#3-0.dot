digraph {
5 [style = filled, label = "Assert.assertEquals(\"Null value counts\",expected.nullValueCounts(),actual.nullValueCounts())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(\"File size in bytes\",expected.fileSizeInBytes(),actual.fileSizeInBytes())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(\"Should match the serialized record value counts\",expected.valueCounts(),actual.valueCounts())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "i++@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(\"Should match the serialized record size\",expected.fileSizeInBytes(),actual.fileSizeInBytes())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "Assert.assertEquals(\"Partition data at index \" + i,expected.partition().get(i,),actual.partition().get(i,))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(\"Shouldn't be null.\",expected != null && actual != null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(\"Upper bounds\",expected.upperBounds(),actual.upperBounds())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(\"Path\",expected.path(),actual.path())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(\"Should match the serialized record count\",expected.recordCount(),actual.recordCount())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "DataFile actual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(\"Value counts\",expected.valueCounts(),actual.valueCounts())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(\"Content\",expected.content(),actual.content())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(\"Equality field id list\",actual.equalityFieldIds(),expected.equalityFieldIds())@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertEquals(\"Should match the serialized record null value counts\",expected.nullValueCounts(),actual.nullValueCounts())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(\"Should match the serialized record format\",expected.format(),actual.format())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(\"Split offsets\",expected.splitOffsets(),actual.splitOffsets())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "DataFile expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(\"Partition size\",expected.partition().size(),actual.partition().size())@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(\"Lower bounds\",expected.lowerBounds(),actual.lowerBounds())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(\"Key metadata\",expected.keyMetadata(),actual.keyMetadata())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(\"Should match the serialized record partition\",expected.partition().get(0,),actual.partition().get(0,))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(\"Should match the serialized record offsets\",expected.keyMetadata(),actual.keyMetadata())@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(\"Column sizes\",expected.columnSizes(),actual.columnSizes())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "i < expected.partition().size()@@@13@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "return@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "ContentFile<?> expected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(\"SpecId\",expected.specId(),actual.specId())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(\"Should match the serialized record key metadata\",expected.keyMetadata(),actual.keyMetadata())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(\"Record count\",expected.recordCount(),actual.recordCount())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertEquals['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertEquals(\"Should match the serialized record lower bounds\",expected.lowerBounds(),actual.lowerBounds())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "expected == actual@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ContentFile<?> actual@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "int i = 0@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(\"Should match the serialized record upper bounds\",expected.upperBounds(),actual.upperBounds())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(\"Format\",expected.format(),actual.format())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ContentFile<?> actual@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(\"Should match the serialized record path\",expected.path(),actual.path())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertEquals(\"Should match the serialized record offsets\",expected.splitOffsets(),actual.splitOffsets())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23->2 [style = bold, label=""];
35->33 [style = bold, label=""];
14->7 [style = bold, label=""];
3->14 [style = bold, label=""];
19->11 [style = solid, label="actual"];
1->9 [style = bold, label=""];
17->16 [style = dotted, label="true"];
21->22 [style = bold, label=""];
20->10 [style = bold, label=""];
41->37 [style = bold, label=""];
0->11 [style = solid, label="actual"];
8->16 [style = solid, label="i"];
40->29 [style = dotted, label="true"];
19->1 [style = solid, label="actual"];
24->11 [style = solid, label="expected"];
24->1 [style = solid, label="expected"];
2->13 [style = bold, label=""];
37->35 [style = bold, label=""];
40->28 [style = bold, label=""];
16->8 [style = bold, label=""];
9->15 [style = bold, label=""];
39->32 [style = bold, label=""];
11->1 [style = bold, label=""];
15->21 [style = bold, label=""];
4->17 [style = bold, label=""];
4->17 [style = solid, label="i"];
11->6 [style = bold, label=""];
8->17 [style = bold, label=""];
7->20 [style = bold, label=""];
4->8 [style = solid, label="i"];
0->1 [style = solid, label="actual"];
19->30 [style = dashed, label="0"];
11->28 [style = dashed, label="0"];
32->36 [style = bold, label=""];
28->27 [style = bold, label=""];
36->41 [style = bold, label=""];
19->11 [style = solid, label="expected"];
13->12 [style = bold, label=""];
12->5 [style = bold, label=""];
25->4 [style = bold, label=""];
4->16 [style = solid, label="i"];
19->1 [style = solid, label="expected"];
26->24 [style = dotted, label="true"];
22->25 [style = bold, label=""];
26->11 [style = bold, label=""];
18->0 [style = dotted, label="true"];
11->6 [style = dotted, label="true"];
22->4 [style = bold, label=""];
18->19 [style = dotted, label="true"];
17->8 [style = dotted, label="true"];
33->38 [style = bold, label=""];
17->23 [style = bold, label=""];
38->31 [style = bold, label=""];
26->19 [style = dotted, label="true"];
5->3 [style = bold, label=""];
34->39 [style = bold, label=""];
8->17 [style = solid, label="i"];
27->34 [style = bold, label=""];
6->27 [style = dashed, label="0"];
17->16 [style = bold, label=""];
6->1 [style = bold, label=""];
18->11 [style = bold, label=""];
40->30 [style = dotted, label="true"];
}
