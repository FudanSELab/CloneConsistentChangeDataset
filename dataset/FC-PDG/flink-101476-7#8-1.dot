digraph {
10 [style = filled, label = "DataStream<Integer> source1 = env.addSource(new SourceFunction<Integer>(){@Override public void run(SourceContext<Integer> ctx){int index = 1while (index <= numElements) {ctx.collectWithTimestamp(index,index)ctx.collectWithTimestamp(index - 1,index - 1)index++ctx.emitWatermark(new Watermark(index - 2))}ctx.emitWatermark(new Watermark(Long.MAX_VALUE))ctx.emitWatermark(new Watermark(Long.MAX_VALUE))}@Override public void cancel(){}})@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "env.getConfig().setAutoWatermarkInterval(10)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "env.execute()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "source1.assignTimestampsAndWatermarks(new AssignerWithPeriodicWatermarks<Integer>(){@Override public long extractTimestamp(Integer element,long currentTimestamp){return element}@Override public Watermark getCurrentWatermark(){return null}}).transform(\"Watermark Check\",BasicTypeInfo.INT_TYPE_INFO,new CustomOperator(true))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertTrue(CustomOperator.finalWatermarks(0(.get(0).getTimestamp() == Long.MAX_VALUE)@@@36@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "env.getConfig().disableSysoutLogging()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testTimestampExtractorWithLongMaxWatermarkFromSource['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "source1.assignTimestampsAndWatermarks(new AssignerWithPunctuatedWatermarks<Integer>(){@Override public long extractTimestamp(Integer element,long currentTimestamp){return element}@Override public Watermark checkAndGetNextWatermark(Integer element,long extractedTimestamp){return null}}).transform(\"Watermark Check\",BasicTypeInfo.INT_TYPE_INFO,new CustomOperator(true))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testTimestampExtractorWithLongMaxWatermarkFromSource['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testTimestampExtractorWithLongMaxWatermarkFromSource2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "env.setParallelism(2)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final int numElements = 10@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "env.getConfig().setAutoWatermarkInterval(1)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertTrue(CustomOperator.finalWatermarks(0(.size() == 1)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->10 [style = solid, label="numElements"];
15->2 [style = bold, label=""];
8->16 [style = dashed, label="0"];
9->11 [style = bold, label=""];
1->15 [style = dashed, label="0"];
2->3 [style = bold, label=""];
4->15 [style = bold, label=""];
7->0 [style = bold, label=""];
2->10 [style = bold, label=""];
12->7 [style = bold, label=""];
7->14 [style = bold, label=""];
0->14 [style = dashed, label="0"];
3->10 [style = bold, label=""];
11->5 [style = bold, label=""];
10->8 [style = bold, label=""];
10->16 [style = bold, label=""];
0->4 [style = bold, label=""];
13->7 [style = bold, label=""];
8->9 [style = bold, label=""];
1->2 [style = bold, label=""];
4->1 [style = bold, label=""];
6->7 [style = bold, label=""];
16->9 [style = bold, label=""];
14->4 [style = bold, label=""];
}
