digraph {
13 [style = filled, label = "testMultiMatchQuery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "builder.type(MatchQuery.Type.PHRASE)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "builder.field(\"text_shingle\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "QueryStringQueryBuilder builder = new QueryStringQueryBuilder(\"foo bar baz\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Query query = builder.toQuery(searchExecutionContext)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testQueryString['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "query = builder.toQuery(searchExecutionContext)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(expectedQuery,equalTo(query))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "query = builder.toQuery(searchExecutionContext)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"foo bar baz\",\"text_shingle_unigram\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "builder.field(\"text_shingle\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(expectedPhraseQuery,equalTo(query))@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "query = builder.toQuery(searchExecutionContext)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "builder = new QueryStringQueryBuilder(\"\"foo bar baz biz\"\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(expectedQueryWithUnigram,equalTo(query))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Query query = builder.toQuery(searchExecutionContext)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(expectedPhraseQueryWithUnigram,equalTo(query))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "builder = new QueryStringQueryBuilder(\"\"foo bar baz\"\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "query = builder.toQuery(searchExecutionContext)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(expectedPhraseQueryWithUnigram,equalTo(query))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(expectedQuery,equalTo(query))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testMultiMatchQuery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "builder.field(\"text_shingle_unigram\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "builder.field(\"text_shingle_unigram\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "builder.type(MatchQueryParser.Type.PHRASE)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "builder.type(MatchQueryParser.Type.PHRASE)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "builder = new QueryStringQueryBuilder(\"foo bar baz biz\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
4->0 [style = solid, label="query"];
2->20 [style = bold, label=""];
10->21 [style = dashed, label="0"];
1->8 [style = bold, label=""];
0->26 [style = bold, label=""];
5->9 [style = bold, label=""];
21->19 [style = bold, label=""];
7->12 [style = solid, label="query"];
7->12 [style = bold, label=""];
6->20 [style = dashed, label="0"];
26->25 [style = bold, label=""];
12->10 [style = solid, label="query"];
0->3 [style = solid, label="query"];
3->6 [style = bold, label=""];
9->22 [style = dashed, label="0"];
3->15 [style = bold, label=""];
10->21 [style = bold, label=""];
16->17 [style = bold, label=""];
4->26 [style = dashed, label="0"];
9->7 [style = bold, label=""];
22->23 [style = bold, label=""];
1->8 [style = solid, label="query"];
11->2 [style = bold, label=""];
14->1 [style = bold, label=""];
4->0 [style = bold, label=""];
12->10 [style = bold, label=""];
17->24 [style = bold, label=""];
18->22 [style = bold, label=""];
20->16 [style = bold, label=""];
15->11 [style = bold, label=""];
6->15 [style = dashed, label="0"];
25->11 [style = bold, label=""];
6->11 [style = bold, label=""];
17->24 [style = solid, label="query"];
12->14 [style = bold, label=""];
23->12 [style = bold, label=""];
11->2 [style = solid, label="query"];
13->9 [style = bold, label=""];
19->4 [style = bold, label=""];
8->4 [style = bold, label=""];
10->1 [style = bold, label=""];
10->14 [style = dashed, label="0"];
}
