digraph {
0 [style = filled, label = "URL(( classpath = new URL((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b0bd5d@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(getTestJarPath(),programOptions.getJarFilePath())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testVariantWithExplicitJarAndArgumentsOption['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ProgramOptions programOptions = ProgramOptions.create(commandLine)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "CommandLine commandLine = CliFrontendParser.parse(CliFrontendParser.RUN_OPTIONS,arguments,true)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "String(( reducedArguments = {\"--debug\",\"true\",\"arg1\",\"arg2\"}@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testValidVariantWithNoJarAndNoArgumentsOption['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "PackagedProgram prog = frontend.buildProgram(programOptions)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertArrayEquals(reducedArguments,programOptions.getProgramArgs())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testVariantWithExplicitJarAndArgumentsOption['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertArrayEquals(classpath,programOptions.getClasspaths().toArray())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(TEST_JAR_MAIN_CLASS,prog.getMainClassName())@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "String(( arguments = {\"--classpath\",\"file:///tmp/foo\",\"--classpath\",\"file:///tmp/bar\",getTestJarPath(),\"--debug\",\"true\",\"arg1\",\"arg2\"}@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ProgramOptions programOptions = new ProgramOptions(commandLine)@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertArrayEquals(reducedArguments,prog.getArguments())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "String(( reducedArguments = new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b0bcfb@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->3 [style = bold, label=""];
12->5 [style = bold, label=""];
1->14 [style = dashed, label="0"];
14->8 [style = solid, label="reducedArguments"];
9->2 [style = bold, label=""];
10->6 [style = solid, label="commandLine"];
14->10 [style = bold, label=""];
6->3 [style = solid, label="programOptions"];
2->4 [style = bold, label=""];
10->6 [style = bold, label=""];
0->2 [style = solid, label="classpath"];
1->8 [style = solid, label="reducedArguments"];
15->5 [style = bold, label=""];
8->7 [style = bold, label=""];
10->13 [style = solid, label="commandLine"];
11->5 [style = bold, label=""];
0->14 [style = bold, label=""];
6->13 [style = dashed, label="0"];
5->0 [style = bold, label=""];
10->13 [style = bold, label=""];
0->1 [style = bold, label=""];
3->8 [style = bold, label=""];
5->10 [style = solid, label="arguments"];
13->9 [style = bold, label=""];
13->3 [style = solid, label="programOptions"];
6->9 [style = bold, label=""];
1->10 [style = bold, label=""];
1->4 [style = solid, label="reducedArguments"];
14->4 [style = solid, label="reducedArguments"];
}
