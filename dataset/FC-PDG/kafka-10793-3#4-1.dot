digraph {
5 [style = filled, label = "assertTrue(new File(directoryPath + File.separator + \"window\",\"segment\").list().length > 0)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertFalse(new File(directoryPath + File.separator + \"window\",\"segment\").exists())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(new File(directoryPath,\"window\").exists())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final ProcessorContext mockContext = mock()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "shouldDeleteStateDirectoryOnDestroy['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final File directory = new File(directoryPath)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "shouldDeleteStateDirectoryOnDestroy['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "expect(mockContext.stateDir()).andReturn(directory)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "expect(mockContext.appConfigs()).andReturn(mkMap(mkEntry(METRICS_RECORDING_LEVEL_CONFIG,\"INFO\")))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "final String directoryPath = TestUtils.tempDirectory().getAbsolutePath()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "replay(mockContext)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(new File(directoryPath,\"window\").exists())@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expect(mockContext.appConfigs()).andReturn(emptyMap())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final TimestampedSegment segment = new TimestampedSegment(\"segment\",\"window\",0L)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertTrue(new File(directoryPath + File.separator + \"window\",\"segment\").exists())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "segment.openDB(mockContext)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final KeyValueSegment segment = new KeyValueSegment(\"segment\",\"window\",0L)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "shouldDeleteStateDirectoryOnDestroy['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "final TimestampedSegment segment = new TimestampedSegment(\"segment\",\"window\",0L,metricsRecorder)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "segment.destroy()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->15 [style = dashed, label="0"];
16->15 [style = bold, label=""];
15->13 [style = bold, label=""];
7->17 [style = bold, label=""];
9->11 [style = bold, label=""];
12->5 [style = bold, label=""];
7->11 [style = solid, label="mockContext"];
10->19 [style = dashed, label="0"];
17->9 [style = bold, label=""];
2->3 [style = bold, label=""];
0->12 [style = bold, label=""];
11->4 [style = bold, label=""];
18->19 [style = bold, label=""];
14->10 [style = bold, label=""];
3->6 [style = bold, label=""];
7->4 [style = solid, label="mockContext"];
7->8 [style = bold, label=""];
1->7 [style = bold, label=""];
13->1 [style = bold, label=""];
4->0 [style = bold, label=""];
1->9 [style = solid, label="directory"];
13->1 [style = solid, label="directoryPath"];
5->2 [style = bold, label=""];
19->13 [style = bold, label=""];
10->13 [style = bold, label=""];
8->9 [style = bold, label=""];
8->17 [style = dashed, label="0"];
}
