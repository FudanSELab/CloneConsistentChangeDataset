digraph {
28 [style = filled, label = "testRecoverWithUnbackedNextGenInIllegalState['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Translog.Operation next = snapshot.next()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Files.createFile(config.getTranslogPath().resolve(\"translog-\" + (read.generation + 1) + \".tlog\"))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final String translogUUID = translog.getTranslogUUID()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "tlog.add(new Translog.Index(\"test\",\"\" + 1,1,primaryTerm.get(),Integer.toString(1).getBytes(Charset.forName(\"UTF-8\"))))@@@24@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Files.createFile(config.getTranslogPath().resolve(\"translog-\" + (read.generation + 2) + \".tlog\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(ex.getMessage(),\"failed to create new translog file\")@@@31@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "TranslogException ex = expectThrows(,null)@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testRecoverWithUnbackedNextGenAndFutureFile['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(ex.getCause().getClass(),)@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final TranslogDeletionPolicy deletionPolicy = translog.getDeletionPolicy()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(\"payload missmatch\",i,Integer.parseInt(next.getSource().source.utf8ToString()))@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "TranslogException ex = expectThrows(,null)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "tlog.add(new Translog.Index(\"test\",\"\" + 1,1,primaryTerm.get(),Integer.toString(1).getBytes(Charset.forName(\"UTF-8\"))))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testRecoverWithUnbackedNextGenAndFutureFile['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "i < 1@@@19@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(ex.getMessage(),\"failed to create new translog file\")@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(ex.getCause().getClass(),)@@@32@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "assertEquals(ex.getMessage(),\"failed to create new translog file\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertFalse(tlog.syncNeeded())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(ex.getCause().getClass(),)@@@28@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Path ckp = config.getTranslogPath().resolve(Translog.CHECKPOINT_FILE_NAME)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "i < 1@@@17@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Checkpoint read = Checkpoint.read(ckp)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertFalse(tlog.syncNeeded())@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "i++@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "translog.close()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Files.copy(ckp,config.getTranslogPath().resolve(Translog.getCommitCheckpointFileName(read.generation)))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TranslogConfig config = translog.getConfig()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertNotNull(\"operation \" + i + \" must be non-null\",next)@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "translog.add(new Translog.Index(\"test\",\"\" + 0,0,primaryTerm.get(),Integer.toString(0).getBytes(Charset.forName(\"UTF-8\"))))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "int i = 0@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
17->8 [style = bold, label=""];
14->3 [style = bold, label=""];
8->10 [style = bold, label=""];
0->16 [style = bold, label=""];
20->8 [style = solid, label="i"];
20->17 [style = bold, label=""];
4->17 [style = bold, label=""];
17->4 [style = solid, label="i"];
15->14 [style = bold, label=""];
21->0 [style = bold, label=""];
5->9 [style = bold, label=""];
29->30 [style = bold, label=""];
17->23 [style = solid, label="i"];
8->18 [style = bold, label=""];
6->21 [style = bold, label=""];
4->22 [style = solid, label="next"];
2->3 [style = bold, label=""];
12->22 [style = solid, label="i"];
18->11 [style = bold, label=""];
25->9 [style = bold, label=""];
8->17 [style = dotted, label="true"];
18->12 [style = bold, label=""];
3->19 [style = solid, label="ckp"];
28->9 [style = bold, label=""];
17->8 [style = solid, label="i"];
3->6 [style = solid, label="ckp"];
18->12 [style = solid, label="next"];
19->6 [style = bold, label=""];
11->24 [style = bold, label=""];
18->23 [style = dotted, label="true"];
22->23 [style = bold, label=""];
8->4 [style = dotted, label="true"];
14->1 [style = bold, label=""];
17->18 [style = solid, label="i"];
20->17 [style = solid, label="i"];
17->12 [style = solid, label="i"];
17->22 [style = solid, label="i"];
24->26 [style = bold, label=""];
26->27 [style = bold, label=""];
20->8 [style = bold, label=""];
18->12 [style = dotted, label="true"];
21->29 [style = bold, label=""];
8->12 [style = dotted, label="true"];
18->4 [style = bold, label=""];
3->19 [style = bold, label=""];
12->4 [style = bold, label=""];
30->31 [style = bold, label=""];
9->15 [style = bold, label=""];
17->18 [style = bold, label=""];
11->24 [style = dashed, label="0"];
12->18 [style = bold, label=""];
8->18 [style = dotted, label="true"];
20->12 [style = solid, label="i"];
0->20 [style = bold, label=""];
23->12 [style = bold, label=""];
1->2 [style = bold, label=""];
18->22 [style = dotted, label="true"];
20->4 [style = solid, label="i"];
18->4 [style = dotted, label="true"];
12->18 [style = solid, label="i"];
16->20 [style = bold, label=""];
4->22 [style = bold, label=""];
11->7 [style = bold, label=""];
12->23 [style = solid, label="i"];
10->11 [style = bold, label=""];
19->21 [style = bold, label=""];
}
